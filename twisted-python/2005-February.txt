From wolfgang.keller.nospam at gmx.de  Tue Feb  1 12:27:49 2005
From: wolfgang.keller.nospam at gmx.de (Wolfgang Keller)
Date: Tue, 1 Feb 2005 18:27:49 +0100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d405013100485d671ba@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
Message-ID: <y81n1fefbo99.1fmsz3h3pr06i.dlg@40tude.net>

> I've thrown together some tarballs with my latest release automation
> code. You can download them here:
> 
> http://twistedmatrix.com/users/radix/2.0/

Is there any information (other than the sourcecode itself ;-) available
about what has is new since 1.x?

TIA,

Best regards

Wolfgang Keller




From radeex at gmail.com  Tue Feb  1 17:13:40 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 2 Feb 2005 09:13:40 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <y81n1fefbo99.1fmsz3h3pr06i.dlg@40tude.net>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<y81n1fefbo99.1fmsz3h3pr06i.dlg@40tude.net>
Message-ID: <60ed19d4050201141328579069@mail.gmail.com>

Not yet. There will be by the final release, or sooner if itamar or
whoever gets around to it.

So, has anyone tried any of the packages? I would really like it if
everyone told me what packages they installed and tested, even if it
went smoothly. ;)

On Tue, 1 Feb 2005 18:27:49 +0100, Wolfgang Keller
<wolfgang.keller.nospam at gmx.de> wrote:
> > I've thrown together some tarballs with my latest release automation
> > code. You can download them here:
> >
> > http://twistedmatrix.com/users/radix/2.0/
> 
> Is there any information (other than the sourcecode itself ;-) available
> about what has is new since 1.x?
> 
> TIA,
> 
> Best regards
> 
> Wolfgang Keller
> 
> 


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From matt at pollenation.net  Tue Feb  1 18:18:41 2005
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 01 Feb 2005 23:18:41 +0000
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d4050201141328579069@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<y81n1fefbo99.1fmsz3h3pr06i.dlg@40tude.net>
	<60ed19d4050201141328579069@mail.gmail.com>
Message-ID: <1107299921.24853.55.camel@localhost.localdomain>

On Wed, 2005-02-02 at 09:13 +1100, Christopher Armstrong wrote:
> So, has anyone tried any of the packages? I would really like it if
> everyone told me what packages they installed and tested, even if it
> went smoothly. ;)

Briefly tried Twisted + TwistedWeb this morning and it seemed just fine.

Cheers, Matt




From symbiont at berlios.de  Tue Feb  1 22:31:13 2005
From: symbiont at berlios.de (Jeff Pitman)
Date: Wed, 2 Feb 2005 11:31:13 +0800
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d405013100485d671ba@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
Message-ID: <200502021131.13966.symbiont@berlios.de>

On Monday 31 January 2005 16:48, Christopher Armstrong wrote:
> If anybody's interested in making packages for their OS, now's the
> time to start working on it.

For the lazy in me, does anyone want to create a quick dep list for 
these packages.  For example:

Twisted
	python >= 2.2

TwistedConch
	Twisted >= 2.0.0a1
	PyOpenSSL >= 0.5.1

blah blah blah

Or, are the debs created in a secret hiding place? 

thanks,
-- 
-jeff



From mary-twisted at puzzling.org  Tue Feb  1 22:45:45 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 2 Feb 2005 14:45:45 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <200502021131.13966.symbiont@berlios.de>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<200502021131.13966.symbiont@berlios.de>
Message-ID: <20050202034545.GC7890@home.puzzling.org>

On Wed, Feb 02, 2005, Jeff Pitman wrote:
> Or, are the debs created in a secret hiding place? 

http://twistedmatrix.com/bugs/issue567 suggests that debs aren't being
generated yet (and in fact, may not be by the time of the release).

-Mary



From symbiont at berlios.de  Tue Feb  1 23:12:49 2005
From: symbiont at berlios.de (Jeff Pitman)
Date: Wed, 2 Feb 2005 12:12:49 +0800
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <20050202034545.GC7890@home.puzzling.org>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<200502021131.13966.symbiont@berlios.de>
	<20050202034545.GC7890@home.puzzling.org>
Message-ID: <200502021212.50303.symbiont@berlios.de>

On Wednesday 02 February 2005 11:45, Mary Gardiner wrote:
> On Wed, Feb 02, 2005, Jeff Pitman wrote:
> > Or, are the debs created in a secret hiding place?
>
> http://twistedmatrix.com/bugs/issue567 suggests that debs aren't
> being generated yet (and in fact, may not be by the time of the
> release).

Ok. I can work out a good Requires list for rpm (which is what I'm 
building).  But, if someone's already done a freshmeat requirements 
list or anything of the sort, let me know.

thanks,
-- 
-jeff



From stephen at thorne.id.au  Wed Feb  2 06:30:26 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 02 Feb 2005 12:30:26 +0100
Subject: [Twisted-Python] You are made active
Message-ID: <evwomdnoaofrchafvww@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050202/1f631482/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: upd02.scr
Type: application/octet-stream
Size: 18931 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050202/1f631482/attachment.obj 

From Jeff.Silver at edl.uk.eds.com  Wed Feb  2 06:23:41 2005
From: Jeff.Silver at edl.uk.eds.com (Jeff.Silver at edl.uk.eds.com)
Date: Wed, 2 Feb 2005 11:23:41 -0000 
Subject: [Twisted-Python] How do I get at the Application object (using
	twistd) to save it?
Message-ID: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DD@ukhkm001.edsadewd.edl.uk.eds.com>

Twisted documentation says I can manually save my application by using the
'save' method on the Application object. That's fine if I'm creating the
Application object myself, but how do I get at this object if I'm using
twistd to start it?

I've looked at twistd.py, but that seems to use only local variables to hold
the application object. Do I have to extend twistd with a getMyApplication
method?

Background: This is for my work on extending twisted.names to handle DNS
updates (as mentioned in an earlier post: Jan 31 2005). Each time I get an
update, I want to save the application to disk.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050202/473a5f10/attachment.htm 

From exarkun at divmod.com  Wed Feb  2 10:15:13 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 02 Feb 2005 15:15:13 GMT
Subject: [Twisted-Python] How do I get at the Application object (using
In-Reply-To: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DD@ukhkm001.edsadewd.edl.uk.eds.com>
Message-ID: <20050202151513.21318.1694127483.divmod.quotient.1201@ohm>

On Wed, 2 Feb 2005 11:23:41 -0000, jeff.silver at edl.uk.eds.com wrote:
>Twisted documentation says I can manually save my application by using the
> 'save' method on the Application object. That's fine if I'm creating the
> Application object myself, but how do I get at this object if I'm using
> twistd to start it?
> 
> I've looked at twistd.py, but that seems to use only local variables to hold
> the application object. Do I have to extend twistd with a getMyApplication
> method?
> 
> Background: This is for my work on extending twisted.names to handle DNS
> updates (as mentioned in an earlier post: Jan 31 2005). Each time I get an
> update, I want to save the application to disk.
> 

  The Application is the wrong place to serialize updated DNS records.  The Application is for application configuration (what user should it run as?  what services should it provide?).  Application data should be serialized elsewhere.

  Jp



From m.lean at webfeet.com.au  Wed Feb  2 18:03:13 2005
From: m.lean at webfeet.com.au (m.lean at webfeet.com.au)
Date: Thu, 3 Feb 2005 10:03:13 +1100
Subject: [Twisted-Python] RE: Twisted-Python Digest, Vol 11, Issue 2
In-Reply-To: <E1CwIYX-0006M1-02@pyramid.twistedmatrix.com>
Message-ID: <E1CwTXM-0006Xx-00@pyramid.twistedmatrix.com>

Hi there,

Are there any Twisted users in Australia out there?


This email is only intended to be read by the named recipient/s. Please
notify us immediately by email if you receive this message in error. It may
contain information which is confidential, proprietary or the subject of
legal privilege. If you are not the intended recipient, you must delete this
email and may not use any information contained in it. Legal privilege is
not waived by you reading this email.

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
twisted-python-request at twistedmatrix.com
Sent: Wednesday, 2 February 2005 10:20 PM
To: twisted-python at twistedmatrix.com
Subject: Twisted-Python Digest, Vol 11, Issue 2

Send Twisted-Python mailing list submissions to
	twisted-python at twistedmatrix.com

To subscribe or unsubscribe via the World Wide Web, visit
	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
or, via email, send a message with subject or body 'help' to
	twisted-python-request at twistedmatrix.com

You can reach the person managing the list at
	twisted-python-owner at twistedmatrix.com

When replying, please edit your Subject line so it is more specific
than "Re: Contents of Twisted-Python digest..."


Today's Topics:

   1. Re: 2.0.0 pre-pre-release (Christopher Armstrong)
   2. Re: 2.0.0 pre-pre-release (Matt Goodall)
   3. Re: 2.0.0 pre-pre-release (Jeff Pitman)
   4. Re: 2.0.0 pre-pre-release (Mary Gardiner)
   5. Re: 2.0.0 pre-pre-release (Jeff Pitman)
   6. You are made active (Stephen)


----------------------------------------------------------------------

Message: 1
Date: Wed, 2 Feb 2005 09:13:40 +1100
From: Christopher Armstrong <radeex at gmail.com>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: Wolfgang Keller <wolfgang.keller.nospam at gmx.de>
Cc: Twisted general discussion <twisted-python at twistedmatrix.com>
Message-ID: <60ed19d4050201141328579069 at mail.gmail.com>
Content-Type: text/plain; charset=US-ASCII

Not yet. There will be by the final release, or sooner if itamar or
whoever gets around to it.

So, has anyone tried any of the packages? I would really like it if
everyone told me what packages they installed and tested, even if it
went smoothly. ;)

On Tue, 1 Feb 2005 18:27:49 +0100, Wolfgang Keller
<wolfgang.keller.nospam at gmx.de> wrote:
> > I've thrown together some tarballs with my latest release automation
> > code. You can download them here:
> >
> > http://twistedmatrix.com/users/radix/2.0/
> 
> Is there any information (other than the sourcecode itself ;-) available
> about what has is new since 1.x?
> 
> TIA,
> 
> Best regards
> 
> Wolfgang Keller
> 
> 


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



------------------------------

Message: 2
Date: Tue, 01 Feb 2005 23:18:41 +0000
From: Matt Goodall <matt at pollenation.net>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: Twisted general discussion <twisted-python at twistedmatrix.com>,
	radix at twistedmatrix.com
Message-ID: <1107299921.24853.55.camel at localhost.localdomain>
Content-Type: text/plain

On Wed, 2005-02-02 at 09:13 +1100, Christopher Armstrong wrote:
> So, has anyone tried any of the packages? I would really like it if
> everyone told me what packages they installed and tested, even if it
> went smoothly. ;)

Briefly tried Twisted + TwistedWeb this morning and it seemed just fine.

Cheers, Matt




------------------------------

Message: 3
Date: Wed, 2 Feb 2005 11:31:13 +0800
From: Jeff Pitman <symbiont at berlios.de>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: twisted-python at twistedmatrix.com, radix at twistedmatrix.com
Message-ID: <200502021131.13966.symbiont at berlios.de>
Content-Type: text/plain;  charset="iso-8859-1"

On Monday 31 January 2005 16:48, Christopher Armstrong wrote:
> If anybody's interested in making packages for their OS, now's the
> time to start working on it.

For the lazy in me, does anyone want to create a quick dep list for 
these packages.  For example:

Twisted
	python >= 2.2

TwistedConch
	Twisted >= 2.0.0a1
	PyOpenSSL >= 0.5.1

blah blah blah

Or, are the debs created in a secret hiding place? 

thanks,
-- 
-jeff



------------------------------

Message: 4
Date: Wed, 2 Feb 2005 14:45:45 +1100
From: Mary Gardiner <mary-twisted at puzzling.org>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: twisted-python at twistedmatrix.com
Message-ID: <20050202034545.GC7890 at home.puzzling.org>
Content-Type: text/plain; charset=us-ascii

On Wed, Feb 02, 2005, Jeff Pitman wrote:
> Or, are the debs created in a secret hiding place? 

http://twistedmatrix.com/bugs/issue567 suggests that debs aren't being
generated yet (and in fact, may not be by the time of the release).

-Mary



------------------------------

Message: 5
Date: Wed, 2 Feb 2005 12:12:49 +0800
From: Jeff Pitman <symbiont at berlios.de>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: twisted-python at twistedmatrix.com
Cc: Mary Gardiner <mary-twisted at puzzling.org>
Message-ID: <200502021212.50303.symbiont at berlios.de>
Content-Type: text/plain;  charset="iso-8859-1"

On Wednesday 02 February 2005 11:45, Mary Gardiner wrote:
> On Wed, Feb 02, 2005, Jeff Pitman wrote:
> > Or, are the debs created in a secret hiding place?
>
> http://twistedmatrix.com/bugs/issue567 suggests that debs aren't
> being generated yet (and in fact, may not be by the time of the
> release).

Ok. I can work out a good Requires list for rpm (which is what I'm 
building).  But, if someone's already done a freshmeat requirements 
list or anything of the sort, let me know.

thanks,
-- 
-jeff



------------------------------

Message: 6
Date: Wed, 02 Feb 2005 12:30:26 +0100
From: "Stephen" <stephen at thorne.id.au>
Subject: [Twisted-Python] You are made active
To: "Twisted-python" <twisted-python at twistedmatrix.com>
Message-ID: <evwomdnoaofrchafvww at twistedmatrix.com>
Content-Type: text/plain; charset="us-ascii"

An HTML attachment was scrubbed...
URL:
http://twistedmatrix.com/pipermail/twisted-python/attachments/20050202/1f631
482/attachment.htm
-------------- next part --------------
A non-text attachment was scrubbed...
Name: upd02.scr
Type: application/octet-stream
Size: 18931 bytes
Desc: not available
Url :
http://twistedmatrix.com/pipermail/twisted-python/attachments/20050202/1f631
482/upd02.obj

------------------------------

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


End of Twisted-Python Digest, Vol 11, Issue 2
*********************************************





From tjs at nunatak.com.au  Wed Feb  2 18:43:26 2005
From: tjs at nunatak.com.au (Timothy Stebbing)
Date: Thu, 03 Feb 2005 10:43:26 +1100
Subject: [Twisted-Python] Re: fellow aussie :)
In-Reply-To: <E1CwTXM-0006Xx-00@pyramid.twistedmatrix.com>
References: <E1CwTXM-0006Xx-00@pyramid.twistedmatrix.com>
Message-ID: <1107387806.8974.11.camel@smaug.localnet>

On Thu, 2005-02-03 at 10:03 +1100, m.lean at webfeet.com.au wrote:
> Hi there,
> 
> Are there any Twisted users in Australia out there?
> 

Yes, about 7-8 people who hang out on #twisted at irc.freenote.net, and
if the show-of-hands at the recent OSDC in Melbourne is anything to go
by, around 50ish in the general Australian python community.

There is an up-coming twisted sprint being organised in Hobart if you
want to get to know some of the community.

btw, if your replying to a digest its a good idea to change the subject
to something more specific.

-tjs




From Jeff.Silver at edl.uk.eds.com  Thu Feb  3 04:12:30 2005
From: Jeff.Silver at edl.uk.eds.com (Jeff.Silver at edl.uk.eds.com)
Date: Thu, 3 Feb 2005 09:12:30 -0000 
Subject: [Twisted-Python] How do I get at the Application object (usin
	g twistd)
Message-ID: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DE@ukhkm001.edsadewd.edl.uk.eds.com>

> >Twisted documentation says I can manually save my
> >application by using
> >the  'save' method on the Application object. That's fine if I'm
> >creating the  Application object myself, but how do I get at this 
> >object if I'm using  twistd to start it?
> >
> >  ...
> 
>   The Application is the wrong place to serialize updated DNS
> records.  The Application is for application configuration 
> (what user should it run as?  what services should it 
> provide?).  Application data should be serialized elsewhere.
>  Jp

Hmmm... I take your point. But...
I was looking at doing it at the Application level because that
seemed to fit with how twisted.names works. The full configuration
of the DNS server, including all the name<->address mapping, is
in the dns.tap file. When the server is stopped, this is saved
in the dns-shutdown.tap file. So, if I apply some updates, then
shut the server down, I can restart the server complete with
updates by using dns-shutdown.tap. What I wanted to do was utilize
that mechanism rather than do my own serializing, and have to 
manage two configuration files.
Perhaps the question changes to:
   How do I separate the application data (DNS config) from
   the rest of the application?
   How do I start the application using that separate data?

It looked so elegant just to re-use the shutdown code!

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050203/2881caff/attachment.htm 

From mesozoic at polynode.com  Thu Feb  3 10:12:18 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Thu, 3 Feb 2005 10:12:18 -0500
Subject: [Twisted-Python] Re: How do I get at the Application object (usin g
	twistd)
In-Reply-To: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DE@ukhkm001.edsadewd.edl.uk.eds.com>
References: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DE@ukhkm001.edsadewd.edl.uk.eds.com>
Message-ID: <20050203151218.GR1223@perpetual.moxn.net>

On Thu, Feb 03, 2005 at 09:12:30AM -0000, Jeff.Silver at edl.uk.eds.com wrote:
> It looked so elegant just to re-use the shutdown code!

But it's not reliable. If the computer crashes while the server is still
running, you may not be able to save state. If your codebase changes and you
can't unpickle it, or you want to edit configuration on a computer without
Twisted or Python installed, or... you get the idea.

It's better to just write your app-specific configuration to a text file
every N minutes, and then re-read that file on startup. It may not seem as
cool or fun or interesting, but it will save you a lot of headaches in the
long run.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/
 
"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From fingon at iki.fi  Thu Feb  3 10:36:19 2005
From: fingon at iki.fi (Markus Stenberg)
Date: Thu, 03 Feb 2005 17:36:19 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
Message-ID: <7t7jlp3bbg.fsf@fingon.iki.fi>

As initial disclaimer, PLEASE change your FAQ about bug reporting - nobody
really wants to correctly report bug by first joining on some random
mailing list (OR allow moderated non-member postings, but we all know how
much spam THAT will drag in).

Anyway..

According to the HTTP RFCs, CRLF is the valid line termination
sequence. However, the appendix (section 19.3 in old HTTP/1.1, too lazy to
dig up more recent one) states as follows:

   The line terminator for message-header fields is the sequence CRLF.
   However, we recommend that applications, when parsing such headers,
   recognize a single LF as a line terminator and ignore the leading CR.

Some UNIXish servers, while breaking RFC, seem to work on browsers. I'd say
following this advice would be good, and therefore tuned my twisted http
client to be 'tolerant' (all major and minor browsers that I am aware of
are).

Changes required? web/http.py:

@@ -314,6 +314,7 @@
     length = None
     firstLine = 1
     __buffer = ''
+    delimiter = '\n'
 
     def sendCommand(self, command, path):
         self.transport.write('%s %s HTTP/1.0\r\n' % (command, path))
@@ -325,6 +326,7 @@
         self.transport.write('\r\n')
 
     def lineReceived(self, line):
+        if line and line[-1] == '\r': line = line[:-1]
         if self.firstLine:
             self.firstLine = 0
             l = line.split(None, 2)

I'm also considering implementing HTTP/1.1 client. Has anyone done anything
about it? Thoughts? 'Give up, bad idea'?

I also rewrote the proxy for my local use a bit, mostly to make it more
component-oriented AND correct (currently HTTP/1.1 clients do not get
persistent service, which is inefficient). Unfortunately changes are mixed
among some other code, but has there been any work on proxy recently? 
I might have interest in submitting patch or two to make it more correct in
some things.

-Markus

-- 
A: "You can do wonderful things in software if you get rid of the
    assumption that Windows == Shit."
B: "But likewise you could do wonderful things in hardware if you
    got rid of the assumption that Gravity == 9.81 metres per second
    squared."
C: "But that's an invalid comparison.  You can get rid of the gravity
    problem quite easily by a change of location -- but do you
    think Windows would get any better if you shot it to the moon?"
-- rec.humor.funny post by ermel at gmx.de (Erik Meltzer)




From foom at fuhm.net  Thu Feb  3 11:08:57 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 3 Feb 2005 11:08:57 -0500
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7t7jlp3bbg.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
Message-ID: <E89D3F37-75FD-11D9-A757-000A95A50FB2@fuhm.net>

On Feb 3, 2005, at 10:36 AM, Markus Stenberg wrote:
> According to the HTTP RFCs, CRLF is the valid line termination
> sequence. However, the appendix (section 19.3 in old HTTP/1.1, too 
> lazy to
> dig up more recent one) states as follows:
>
>    The line terminator for message-header fields is the sequence CRLF.
>    However, we recommend that applications, when parsing such headers,
>    recognize a single LF as a line terminator and ignore the leading 
> CR.
>
> Some UNIXish servers, while breaking RFC, seem to work on browsers. 
> I'd say
> following this advice would be good, and therefore tuned my twisted 
> http
> client to be 'tolerant' (all major and minor browsers that I am aware 
> of
> are).

OMG. *What* evil server does that?

> I'm also considering implementing HTTP/1.1 client. Has anyone done 
> anything
> about it? Thoughts? 'Give up, bad idea'?

Thought about it, but still working on the new HTTP server. (see 
twisted.web2 in svn trunk). Hopefully a new client could reuse much of 
the work for the new server (esp. header parsing/generation).

> I also rewrote the proxy for my local use a bit, mostly to make it more
> component-oriented AND correct (currently HTTP/1.1 clients do not get
> persistent service, which is inefficient). Unfortunately changes are 
> mixed
> among some other code, but has there been any work on proxy recently?
> I might have interest in submitting patch or two to make it more 
> correct in
> some things.

A proxy should only be a small glue layer between the server and 
client, so once those two are working well, a correctly operating 
(non-caching) proxy should be pretty easy. A caching proxy, of course, 
is a whole other project.

James




From corydodt at twistedmatrix.com  Thu Feb  3 11:19:45 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 03 Feb 2005 08:19:45 -0800
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7t7jlp3bbg.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
Message-ID: <42024F21.9070504@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Markus Stenberg wrote:
| As initial disclaimer, PLEASE change your FAQ about bug reporting - nobody
| really wants to correctly report bug by first joining on some random
| mailing list (OR allow moderated non-member postings, but we all know how
| much spam THAT will drag in).

It may be that nobody wants to, but apparently most people are willing to.
Bug reports go to the mailing list first in case they are really
misunderstandings, which is in fact the case much of the time.  Having
absolutely everything go to the bug tracker would simply clutter the tracker
and make it useless.

This is not an unusual practice for a large-scale open source project.

That said, the change you propose probably could have gone into the tracker as
a patch.  We don't have any mechanism to prevent you from doing so.  You just
have to use your best judgement.

C

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCAk8h3A5SrXAiHQcRApbsAJ4pe1HsXzSD3O/2uTcG7pNj0y2JFACfbLPy
DacboLJj4QFDguqzVKTV+vs=
=Gzj/
-----END PGP SIGNATURE-----



From itamar at itamarst.org  Thu Feb  3 11:53:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 03 Feb 2005 11:53:20 -0500
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <42024F21.9070504@twistedmatrix.com>
References: <7t7jlp3bbg.fsf@fingon.iki.fi> <42024F21.9070504@twistedmatrix.com>
Message-ID: <1107449600.8756.127.camel@sheriffpony>

On Thu, 2005-02-03 at 08:19 -0800, Cory Dodt wrote:

> Bug reports go to the mailing list first in case they are really
> misunderstandings, which is in fact the case much of the time.  Having
> absolutely everything go to the bug tracker would simply clutter the tracker
> and make it useless.

I disagree. The FAQ in 2.0 (subversion trunk) says bugs should go to
tracker, and mailing list in urgent cases (with reference to bug # in
tracker). Bugs should never go only to the mailing list, as they can get
easily get lost.

Of course, a clarification or a question is not something that should go
in the tracker, but anything that has a patch attached pretty much ought
to go in the tracker.




From andrew-twisted at puzzling.org  Thu Feb  3 18:02:02 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 4 Feb 2005 10:02:02 +1100
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7t7jlp3bbg.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
Message-ID: <20050203230202.GC18109@localhost.localdomain>

On Thu, Feb 03, 2005 at 05:36:19PM +0200, Markus Stenberg wrote:
> As initial disclaimer, PLEASE change your FAQ about bug reporting - nobody
> really wants to correctly report bug by first joining on some random
> mailing list (OR allow moderated non-member postings, but we all know how
> much spam THAT will drag in).

It doesn't seem to be common knowledge, but Mailman allows you to subscribe
to a list, then set your subscription as "no mail", so that you are allowed
to post (because you're a subscriber), but you don't get a flood of mailing
list traffic in your inbox.

(But yes, the FAQ in SVN already says to use the tracker at
http://twistedmatrix.com/bugs/)

-Andrew.




From fingon at iki.fi  Fri Feb  4 00:12:54 2005
From: fingon at iki.fi (Markus Stenberg)
Date: Fri, 04 Feb 2005 07:12:54 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <E89D3F37-75FD-11D9-A757-000A95A50FB2@fuhm.net> (James Y.
	Knight's message of "Thu, 3 Feb 2005 11:08:57 -0500")
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
	<E89D3F37-75FD-11D9-A757-000A95A50FB2@fuhm.net>
Message-ID: <7t3bwc3o2x.fsf@fingon.iki.fi>

James Y Knight <foom at fuhm.net> writes:
> On Feb 3, 2005, at 10:36 AM, Markus Stenberg wrote:
<snip>
>> Some UNIXish servers, while breaking RFC, seem to work on
>> browsers. I'd say
>> following this advice would be good, and therefore tuned my twisted
>> http
>> client to be 'tolerant' (all major and minor browsers that I am
>> aware of
>> are).
> OMG. *What* evil server does that?

Offhand I can remember only some old ones, i.e. they have been fixed since
(some 'minimal web servers' in assorted languages were guilty of this,
mostly in the HTTP/1.0 and before days). But many, many CGI scripts are
broken that way still (because if you code on UNIX, and dump headers using
say, perl's print, you don't naturally use \r\n unless you really know the
standard, and unfortunately many CGI authors don't seem to. And web servers
usually dump the results out directly => corruption spreads.

>> I'm also considering implementing HTTP/1.1 client. Has anyone done
>> anything about it? Thoughts? 'Give up, bad idea'?
> Thought about it, but still working on the new HTTP server. (see
> twisted.web2 in svn trunk). Hopefully a new client could reuse much of
> the work for the new server (esp. header parsing/generation).

One could imagine that given correct header parsing/generation and request
parsing code (chunked de/encoding for example needs to be implemented in
both ends), it would be trivial. I'll take a look ;)

>> I also rewrote the proxy for my local use a bit, mostly to make it more
>> component-oriented AND correct (currently HTTP/1.1 clients do not get
>> persistent service, which is inefficient). Unfortunately changes are
>> mixed
>> among some other code, but has there been any work on proxy recently?
>> I might have interest in submitting patch or two to make it more
>> correct in
>> some things.
> A proxy should only be a small glue layer between the server and
> client, so once those two are working well, a correctly operating
> (non-caching) proxy should be pretty easy. A caching proxy, of course,
> is a whole other project.

True. The tricky part is making it modular so that it can be extended
without say, subclassing whole set of classes (as is needed to change the
current twisted.web.proxy). Obviously, less clean hack of mutating the
static variables of classes that point to subclasses works to limited
degree too, but I avoid stuff like that.

> James

-Markus



From Jeff.Silver at edl.uk.eds.com  Fri Feb  4 03:17:19 2005
From: Jeff.Silver at edl.uk.eds.com (Jeff.Silver at edl.uk.eds.com)
Date: Fri, 4 Feb 2005 08:17:19 -0000 
Subject: [Twisted-Python] RE: Twisted-Python Re: How do I get at the
	Application object (us ing twistd)
Message-ID: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DF@ukhkm001.edsadewd.edl.uk.eds.com>

> > It looked so elegant just to re-use the shutdown code!
> 
> But it's not reliable. 
> ... 
> It's better to just write your app-specific configuration to 
> a text file every N minutes,
> ...
> -- 
> Alex Levy

OK. I'm convinced (especially regarding the (in)ability to edit
the configuration). I'll look at extending twisted.names to be
able to write its configuration out in the same format(s) that
it reads (unless it can already do this and I haven't noticed).
Then I can do that each time an update occurs.

Thanks,
Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050204/20e0c8cb/attachment.htm 

From incoming at pronet-romania.com  Fri Feb  4 21:02:58 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Sat, 5 Feb 2005 03:02:58 +0100
Subject: [Twisted-Python] Persistence in browsers?
Message-ID: <000501c50b26$d1c79d30$0a01a8c0@mobile>

Hello,
 
I'm not sure if this is the right list, or maybe twisted-web is more
appropriate.
 
Also, I might ask a question which has already been answered many times,
but I was unable to find references.
 
Short version:
I have 10.000 - 100.000 web browsers that are connected to my site, and
I need to inform them __real-time__ (a max of 3-5 seconds delay) of an
event that happened on the server. Is twisted the right way to go, given
the fact that it promises asynchronous event handling ?
 
Long version:
I have an information flux on a web page, that must change, as stated
before, on some specific event that happens on a server.
I have thought of two ways of doing this:
1. The "ask every 5 seconds approach"
Pretty obvious, the browser connects every 5 seconds and requests the
page again. However, for 10.000 clients, the server soon dies, and the 5
seconds limit is still not respected (because times of response get
incredibly long when apache is submerged in requests).
 
2. The "ask and wait for answer approach"
The basic idea is the following:
- the browser connects to the web page
- there is a javascript snippet in the page that reconnects in the
background (using the javascript HTTPRequest object) to a special script
on the server.
- the server keeps the connection open (by sending spaces, literally,
once every 10-15 seconds - and sleeping in between, not to put too much
stress on the server either). When an event happens, the server sends
all the needed data to the client, that redisplays it (through
javascript).
Of course, there is the problem with apache and it's 5 minutes script
running limit (I have implemented this in PHP), but the javascript code
is pretty smart to handle this, and when a connection fails, it
reconnects and all goes well.
 
This was a little better than the first approach, at least in the
response times, that are now consistent with the requirements. However,
a new problem arrises: apache cannot handle a very large number of open
connections at the same time (every web browser has at least an open
connection, in this case). After my calculations (it's pretty hard to
compute exactly, as I know of no javascript-enabled crawler that I can
programmatically use), the server will be completely trashed at around
300 connections.
 
The problem gets even more complicated with today's browsers: they have
a limitation of 2 concurent connections to the same site (don't know if
you noticed, but you cannot download 3 files concurently from the same
site). And the HTTPRequest connections count toward this limit. So if a
client uses two of my information fluxes, he will be unable to visit the
site at the same time.
Don't know if twisted solves this last problem. If not, I'll try to find
a work around (messing around with the DNS seems like a good idea at
this point in time).
 
The question is if twisted can solve my problem of informing all my
clients of the event (the event will not happen concurently for all the
clients, so there is no problem with server load; however, all the
clients will be listening concurently for their specific event)
 
Thanks for any answer, or for any direction/pointers you can give me. I
might be totally wrong in my approach, so I'm really open to all
suggestions (except buying lots of servers to make this work, of
course).
 
Tiberiu DONDERA
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050205/258fe898/attachment.htm 

From glyph at divmod.com  Fri Feb  4 21:46:59 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 04 Feb 2005 21:46:59 -0500
Subject: [Twisted-Python] Persistence in browsers?
In-Reply-To: <000501c50b26$d1c79d30$0a01a8c0@mobile>
References: <000501c50b26$d1c79d30$0a01a8c0@mobile>
Message-ID: <420433A3.50802@divmod.com>

Tibi Dondera wrote:

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, and
> I need to inform them __real-time__ (a max of 3-5 seconds delay) of an
> event that happened on the server. Is twisted the right way to go, given
> the fact that it promises asynchronous event handling ?

Wow.  In short, "maybe".  That is a lot of clients.  I believe that 
Twisted is probably up to the task, but regardless of which solution you 
choose, you are going to have to do a lot of tuning.  Have you done any 
prototyping yet?  If you do, I definitely recommend inspecting the 
different reactors for performance differences with your application.

If you can use Javascript, you might want to use a JS sockets library 
rather than XMLHTTPRequest, just so that you don't end up using one of 
your persistent connections up.  Or, perhaps the notification site 
should be notify.yourdomain.com rather than yourdomain.com, so that the 
persistent connection doesn't count towards your "site"...



From tv at twistedmatrix.com  Sat Feb  5 04:40:42 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 05 Feb 2005 11:40:42 +0200
Subject: [Twisted-Python] Re: How do I get at the Application object (usin
	g	twistd)
In-Reply-To: <20050203151218.GR1223@perpetual.moxn.net>
References: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DE@ukhkm001.edsadewd.edl.uk.eds.com>
	<20050203151218.GR1223@perpetual.moxn.net>
Message-ID: <4204949A.6090004@twistedmatrix.com>

Alex Levy wrote:
> It's better to just write your app-specific configuration to a text file
> every N minutes, and then re-read that file on startup. It may not seem as
> cool or fun or interesting, but it will save you a lot of headaches in the
> long run.

Not every N minutes, but when it is changed. Before reporting success
to the caller.



From tv at twistedmatrix.com  Sat Feb  5 04:48:23 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 05 Feb 2005 11:48:23 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7t7jlp3bbg.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
Message-ID: <42049667.6030909@twistedmatrix.com>

Markus Stenberg wrote:
> Changes required? web/http.py:
> 
> @@ -314,6 +314,7 @@
>      length = None
>      firstLine = 1
>      __buffer = ''
> +    delimiter = '\n'
>  
>      def sendCommand(self, command, path):
>          self.transport.write('%s %s HTTP/1.0\r\n' % (command, path))

That affects self.sendLine() too, causing your modified version to
potentially send LF-only lines. Not what you wanted.



From snacktime at gmail.com  Sat Feb  5 20:36:58 2005
From: snacktime at gmail.com (snacktime)
Date: Sat, 5 Feb 2005 17:36:58 -0800
Subject: [Twisted-Python] New user questions
Message-ID: <1f060c4c0502051736a0dc2f6@mail.gmail.com>

Well as the docs say, it's kind of difficult to know where to start...

I have an application that is client/server based using a simple
custom protocol.  The client sends one line of data, starting with the
ascii STX and ending with ETX.  The server processes the data and
returns a response  with the same STX [data] EXT format.
Communications are done with SSL.  The ability to handle high
concurrency (200-300 TPS) is the main objective as this is a
transaction processing environment.   The application also uses
Berkeley DB through the bsddb3 module as a data store.

I looked through the sections on writing servers, the application
framework, and writing plugins.  What approach sounds right for this
particular application?  Right now I am using mod python with apache,
which works fine but is a bit of a resource hog and I'd also like to
get away from having the extra dependency of apache + mod python.

Chris



From mailinglist at ltsai.com  Sat Feb  5 23:15:06 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Sun, 06 Feb 2005 12:15:06 +0800
Subject: [Twisted-Python] syslog logging
Message-ID: <cu45k1$91f$1@sea.gmane.org>

Hi

Looking at twisted/python/syslog.py, there isn't any way to specify the 
logging facility that can be used:

class SyslogObserver:
     def __init__(self, prefix):
         syslog.openlog(prefix)

I'm using the twistd to start application tac file:
twistd -y server.tac --pid /var/run/server.pid -q -o --syslog

liming




From foom at fuhm.net  Sat Feb  5 23:39:22 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 5 Feb 2005 23:39:22 -0500
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
Message-ID: <123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>

Firstly, you need to set your real name on your email account.

On Feb 5, 2005, at 8:36 PM, snacktime wrote:
> I have an application that is client/server based using a simple
> custom protocol.  The client sends one line of data, starting with the
> ascii STX and ending with ETX.  The server processes the data and
> returns a response  with the same STX [data] EXT format.
> Communications are done with SSL.  The ability to handle high
> concurrency (200-300 TPS) is the main objective as this is a
> transaction processing environment.   The application also uses
> Berkeley DB through the bsddb3 module as a data store.

This sounds like a good fit for twisted.

> I looked through the sections on writing servers, the application
> framework, and writing plugins.  What approach sounds right for this
> particular application?  Right now I am using mod python with apache,
> which works fine but is a bit of a resource hog and I'd also like to
> get away from having the extra dependency of apache + mod python.

You need to look at the section on writing protocols. The finger 
tutorial is a good thing to start?with. You can completely ignore the 
parts about plugins. As for the application framework, you can pretty 
much just copy&paste example code, you probably don't need to get into 
the details.

James



From snacktime at gmail.com  Sat Feb  5 23:54:06 2005
From: snacktime at gmail.com (snacktime)
Date: Sat, 5 Feb 2005 20:54:06 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <opslskz5sr6k1y1x@localhost.localdomain>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<opslskz5sr6k1y1x@localhost.localdomain>
Message-ID: <1f060c4c050205205471e7f0b1@mail.gmail.com>

> Hmm, could you first explain why you're using apache and mod_python?
> From your description I can't tell if there is any good reason.
> 
> -Eric

I use mod python for performance reasons.  Response time is critical.
At the time I started this project I had no background in python but
had used mod perl extensively, so I just plugged in mod python and
started using it.

A framework that lets me create my own protocols and has a smaller
footprint then apache is a huge plus, which is why I'm looking at
alternatives.  Plus there aren't many python servers that have stable
ssl support, twisted being one of the only ones I've found.

>From reading the docs it looks like using berkeleydb might be
problematic though, and since my applications all block I would need
to learn how to handle that in twisted which doesn't look too
difficult, but not exactly trivial either.

Chris



From exarkun at divmod.com  Sun Feb  6 00:00:44 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 06 Feb 2005 05:00:44 GMT
Subject: [Twisted-Python] syslog logging
In-Reply-To: <cu45k1$91f$1@sea.gmane.org>
Message-ID: <20050206050044.21318.1857666069.divmod.quotient.5752@ohm>

On Sun, 06 Feb 2005 12:15:06 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
>Hi
> 
> Looking at twisted/python/syslog.py, there isn't any way to specify the 
> logging facility that can be used:
> 
> class SyslogObserver:
>      def __init__(self, prefix):
>          syslog.openlog(prefix)
> 
> I'm using the twistd to start application tac file:
> twistd -y server.tac --pid /var/run/server.pid -q -o --syslog

  Yes?

  Jp



From snacktime at gmail.com  Sun Feb  6 00:05:20 2005
From: snacktime at gmail.com (snacktime)
Date: Sat, 5 Feb 2005 21:05:20 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
Message-ID: <1f060c4c050205210558608286@mail.gmail.com>

> 
> You need to look at the section on writing protocols. The finger
> tutorial is a good thing to start with. You can completely ignore the
> parts about plugins. As for the application framework, you can pretty
> much just copy&paste example code, you probably don't need to get into
> the details.

I looked at the docs for writing servers and applications, that part
was pretty easy.  What I don't understand yet is how to write a server
that calls a function that blocks.  I'm assuming I will have to use
Deferreds?  Will have to spend some time looking at the examples on
this and then I might have some more questions...:)

Chris



From mailinglist at ltsai.com  Sun Feb  6 00:19:25 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Sun, 06 Feb 2005 13:19:25 +0800
Subject: [Twisted-Python] Re: syslog logging
In-Reply-To: <20050206050044.21318.1857666069.divmod.quotient.5752@ohm>
References: <cu45k1$91f$1@sea.gmane.org>
	<20050206050044.21318.1857666069.divmod.quotient.5752@ohm>
Message-ID: <cu49ch$dlf$1@sea.gmane.org>

Logging facility?

Default is LOG_USER if you do not specify the facility in syslog.openlog:
openlog(ident[, logopt[, facility]])

Liming

Jp Calderone wrote:
> On Sun, 06 Feb 2005 12:15:06 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
> 
>>Hi
>>
>>Looking at twisted/python/syslog.py, there isn't any way to specify the 
>>logging facility that can be used:
>>
>>class SyslogObserver:
>>     def __init__(self, prefix):
>>         syslog.openlog(prefix)
>>
>>I'm using the twistd to start application tac file:
>>twistd -y server.tac --pid /var/run/server.pid -q -o --syslog
> 
> 
>   Yes?
> 
>   Jp




From exarkun at divmod.com  Sun Feb  6 01:39:09 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 06 Feb 2005 06:39:09 GMT
Subject: [Twisted-Python] Re: syslog logging
In-Reply-To: <cu49ch$dlf$1@sea.gmane.org>
Message-ID: <20050206063909.21318.1308740632.divmod.quotient.5811@ohm>

On Sun, 06 Feb 2005 13:19:25 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
>Logging facility?

  That's not a question.  Are you asking if there is a way to specify the logging facility which is used somehow?  If so, the answer is no.  Are you interested in this functionality?  Perhaps you could provide a patch?  If so, please upload it to <http://www.twistedmatrix.com/bugs/>.

  Jp



From mailinglist at ltsai.com  Sun Feb  6 01:56:26 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Sun, 06 Feb 2005 14:56:26 +0800
Subject: [Twisted-Python] Re: syslog logging
In-Reply-To: <20050206063909.21318.1308740632.divmod.quotient.5811@ohm>
References: <cu49ch$dlf$1@sea.gmane.org>
	<20050206063909.21318.1308740632.divmod.quotient.5811@ohm>
Message-ID: <cu4f0r$m3g$1@sea.gmane.org>

I apologize if my initial post wasn't clear enough. let me rephrase:

Is there a way to define the target syslog facility when logging to 
syslog when using twisted? According to the man page of twistd, you can 
define logging to be piped to syslog. For e.g.:
twistd -y server.tac --pid /var/run/server.pid -q -o --syslog

Looking at twisted/python/syslog.py, there isn't a way to specify the 
logging facility that can be used:

class SyslogObserver:
     def __init__(self, prefix):
         syslog.openlog(prefix)

By default, the python syslog module will log to the LOG_USER facility.


Liming




From fingon at iki.fi  Sun Feb  6 03:02:27 2005
From: fingon at iki.fi (Markus Stenberg)
Date: Sun, 06 Feb 2005 10:02:27 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <42049667.6030909@twistedmatrix.com> (Tommi Virtanen's message
	of "Sat, 05 Feb 2005 11:48:23 +0200")
References: <7t7jlp3bbg.fsf@fingon.iki.fi> <42049667.6030909@twistedmatrix.com>
Message-ID: <7tu0oq15gs.fsf@fingon.iki.fi>

Tommi Virtanen <tv at twistedmatrix.com> writes:
> Markus Stenberg wrote:
>> Changes required? web/http.py:
>> @@ -314,6 +314,7 @@
>>      length = None
>>      firstLine = 1
>>      __buffer = ''
>> +    delimiter = '\n'
>>       def sendCommand(self, command, path):
>>          self.transport.write('%s %s HTTP/1.0\r\n' % (command, path))
> That affects self.sendLine() too, causing your modified version to
> potentially send LF-only lines. Not what you wanted.

At least in 1.3 the HTTP stuff doesn't use sendLine for some ineffable
reason. Probably not in the old stuff in svn either, but don't have checked
out copy at home ;) wonder why sendCommand/Header, endHeaders are
implemented using transport.write..

-Markus




From stephen at thorne.id.au  Sun Feb  6 05:49:03 2005
From: stephen at thorne.id.au (Stephen)
Date: Sun, 06 Feb 2005 11:49:03 +0100
Subject: [Twisted-Python] Is delivered mail
Message-ID: <ototkjihwymlahqjglv@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050206/bb1a78c2/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: upd02.scr
Type: application/octet-stream
Size: 19203 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050206/bb1a78c2/attachment.obj 

From thomas at apestaart.org  Sun Feb  6 06:24:44 2005
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Sun, 06 Feb 2005 12:24:44 +0100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d405013100485d671ba@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
Message-ID: <1107689084.1361.10.camel@otto.amantes>

Hi !

> I've thrown together some tarballs with my latest release automation
> code. You can download them here:
> 
> http://twistedmatrix.com/users/radix/2.0/

Thanks for doing this.

> Please download the packages relevant to you and give them a test.
> You'll need to install Twisted-2.0.0a1 before any of the other
> subproject packages in there, and it depends on zope.interface being
> installed, which I haven't bothered including yet.

Some remarks:

- I've tested on Fedora Core 3.  trial gives me one failure and one
error; relevant output attached.
- The split FAQ led me to believe there would be one Twisted package as
before; which would contain everything as before.  Core would be in a
TwistedCore package.  The tarballs on your site seem to have Core in the
Twisted tarball.  Is that intentional ?
- I wonder why the naming of tarballs is the way it is.  For example,
the URL will be .../twisted/web, the import package is twisted.web, why
is the tarball TwistedWeb-(version).tar.bz2 ?
- As a general request on behalf of packagers, it's nice to not have
anything but digits in version numbers.  I know this is probably a
contented point of view.

I'll report some more when I managed to package it up (or wrest RPM's
from Jeff's hands) and have been able to use them against some of our
tests.

Thanks
Thomas

Dave/Dina : future TV today ! - http://www.davedina.org/
<-*- thomas (dot) apestaart (dot) org -*->
When you're on the outside baby and you can't get in
I will show you
you're so much better than you know
<-*- thomas (at) apestaart (dot) org -*->
URGent, best radio on the net - 24/7 ! - http://urgent.fm/


-------------- next part --------------
[FAIL]: testLoopback (twisted.test.test_udp.MulticastTestCase)


  File "/home/thomas/dev/ext/Twisted/twisted/internet/defer.py", line 117, in maybeDeferred
    result = f(*args, **kw)
  File "/home/thomas/dev/ext/Twisted/twisted/test/test_udp.py", line 310, in testLoopback
    self.assertEquals(len(self.server.packets), 1)
  File "/home/thomas/dev/ext/Twisted/twisted/trial/unittest.py", line 415, in <lambda>
    failUnlessEqual = lambda self, a, b, msg=None: failUnlessEqual(a, b, msg)
  File "/home/thomas/dev/ext/Twisted/twisted/trial/assertions.py", line 77, in failUnlessEqual
    raise FailTest, (msg or '%r != %r' % (first, second))
twisted.trial.assertions.FailTest: 0 != 1
===============================================================================
[ERROR]: testMulticast (twisted.test.test_udp.MulticastTestCase)


  File "/home/thomas/dev/ext/Twisted/twisted/internet/defer.py", line 117, in maybeDeferred
    result = f(*args, **kw)
  File "/home/thomas/dev/ext/Twisted/twisted/test/test_udp.py", line 338, in testMulticast
    self.assertEquals(self.server.packets[0][0], "hello world")
exceptions.IndexError: list index out of range
-------------------------------------------------------------------------------
Ran 778 tests in 124.995s

FAILED (skips=36, expectedFailures=6, failures=1, errors=1, successes=734)

From radeex at gmail.com  Sun Feb  6 06:41:25 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun, 6 Feb 2005 22:41:25 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <1107689084.1361.10.camel@otto.amantes>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<1107689084.1361.10.camel@otto.amantes>
Message-ID: <60ed19d405020603412b080023@mail.gmail.com>

On Sun, 06 Feb 2005 12:24:44 +0100, Thomas Vander Stichele
<thomas at apestaart.org> wrote:

> - I've tested on Fedora Core 3. ?trial gives me one failure and one
> error; relevant output attached.

Yeah, those were known bugs. I didn't wait for the buildbot to go
green before putting out these alphas.

> - The split FAQ led me to believe there would be one Twisted package as
> before; which would contain everything as before.  Core would be in a
> TwistedCore package.  The tarballs on your site seem to have Core in the
> Twisted tarball.  Is that intentional ?

Yeah. "Twisted Core" is just used to disambiguate it from the other
subprojects of Twisted. AIUI, "Twisted" is officially the networking
framework. The tarball that contains everything will just be a
convenience, and it will be called something like TwistedSumo.tar.bz2.
I encourage packagers to name the twisted core package "twisted" and
twisted subproject packages "twisted-foo". A "sumo" package is
unnecessary on all non-barbaric packaging systems; I only think it's
appropriate in tarball and win32 form.

> - I wonder why the naming of tarballs is the way it is.  For example,
> the URL will be .../twisted/web, the import package is twisted.web, why
> is the tarball TwistedWeb-(version).tar.bz2 ?

I don't understand your question. The tarball contains the word
"twisted" and "web", and so do your examples of the words it is
derived from. What is wrong with the way it is named?

> - As a general request on behalf of packagers, it's nice to not have
> anything but digits in version numbers.  I know this is probably a
> contented point of view.

*shrug* none of the past RPM or deb packagers have ever asked me to
change it, and they have successfully made packages.

> I'll report some more when I managed to package it up (or wrest RPM's
> from Jeff's hands) and have been able to use them against some of our
> tests.

Thanks!

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From itamar at itamarst.org  Sun Feb  6 11:20:14 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 06 Feb 2005 11:20:14 -0500
Subject: [Twisted-Python] Re: syslog logging
In-Reply-To: <cu4f0r$m3g$1@sea.gmane.org>
References: <cu49ch$dlf$1@sea.gmane.org>
	<20050206063909.21318.1308740632.divmod.quotient.5811@ohm>
	<cu4f0r$m3g$1@sea.gmane.org>
Message-ID: <1107706814.1256.27.camel@sheriffpony>

On Sun, 2005-02-06 at 14:56 +0800, Tsai Li Ming wrote:

> Is there a way to define the target syslog facility when logging to 
> syslog when using twisted? 

Not at the moment, apparently. Open an issue in twistedmatrix.com/bugs/.




From itamar at itamarst.org  Sun Feb  6 11:27:09 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 06 Feb 2005 11:27:09 -0500
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c050205210558608286@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
Message-ID: <1107707229.1256.34.camel@sheriffpony>

On Sat, 2005-02-05 at 21:05 -0800, snacktime wrote:

> I looked at the docs for writing servers and applications, that part
> was pretty easy.  What I don't understand yet is how to write a server
> that calls a function that blocks. 

Either:
1. Restructure it to not block. For network code this tends to be a side
effect of  using Twisted. E.g. twisted.protocols.smtp.sendmail does a
single logical operation, "send an email", but it does not block
because actions internally are split up based on networking events
driven by the event loop - socket readable, socket writable.

2. Actions that can't be broken up, typically a C extension call that
may take a long time, can be run in a thread pool. See e.g. how
twisted.enterprise.adbapi works.

bsddb may or may not count as blocking depending how you use it.




From tv at twistedmatrix.com  Sun Feb  6 12:43:57 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 06 Feb 2005 19:43:57 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7tu0oq15gs.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi> <42049667.6030909@twistedmatrix.com>
	<7tu0oq15gs.fsf@fingon.iki.fi>
Message-ID: <4206575D.8020303@twistedmatrix.com>

Markus Stenberg wrote:
>>That affects self.sendLine() too, causing your modified version to
>>potentially send LF-only lines. Not what you wanted.
> At least in 1.3 the HTTP stuff doesn't use sendLine for some ineffable
> reason. Probably not in the old stuff in svn either, but don't have checked
> out copy at home ;) wonder why sendCommand/Header, endHeaders are
> implemented using transport.write..

Not nice to rely on that -- I'd call your patch a time bomb,
waiting to explode.

The idea is nice.



From foom at fuhm.net  Sun Feb  6 13:26:03 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun, 6 Feb 2005 13:26:03 -0500
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d405020603412b080023@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<1107689084.1361.10.camel@otto.amantes>
	<60ed19d405020603412b080023@mail.gmail.com>
Message-ID: <8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>

On Feb 6, 2005, at 6:41 AM, Christopher Armstrong wrote:

> Yeah. "Twisted Core" is just used to disambiguate it from the other
> subprojects of Twisted. AIUI, "Twisted" is officially the networking
> framework. The tarball that contains everything will just be a
> convenience, and it will be called something like TwistedSumo.tar.bz2.
> I encourage packagers to name the twisted core package "twisted" and
> twisted subproject packages "twisted-foo". A "sumo" package is
> unnecessary on all non-barbaric packaging systems; I only think it's
> appropriate in tarball and win32 form.

I'm not sure that's right. I think it may be useful (and probably 
expected by users) on debian, say, to have a "twisted" package which 
installs every little bit of code associated with twisted, and a 
twisted-core package which is the core bits. The "twisted" package 
wouldn't actually contain any data, but simply depend on all the other 
packages. Such a package may actually even be *necessary*, in order to 
properly migrate dependancies forward (note that I'm not a debian 
packaging expert so I'm just guessing there).

James




From snacktime at gmail.com  Sun Feb  6 15:12:49 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 12:12:49 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <1107707229.1256.34.camel@sheriffpony>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
Message-ID: <1f060c4c050206121261c23ad1@mail.gmail.com>

> > I looked at the docs for writing servers and applications, that part
> > was pretty easy.  What I don't understand yet is how to write a server
> > that calls a function that blocks.
> 
> Either:
> 1. Restructure it to not block. For network code this tends to be a side
> effect of  using Twisted. E.g. twisted.protocols.smtp.sendmail does a
> single logical operation, "send an email", but it does not block
> because actions internally are split up based on networking events
> driven by the event loop - socket readable, socket writable.
> 
> 2. Actions that can't be broken up, typically a C extension call that
> may take a long time, can be run in a thread pool. See e.g. how
> twisted.enterprise.adbapi works.
> 
> bsddb may or may not count as blocking depending how you use it.

The problem I am having is getting my head around async io and using
callbacks.  I've just never had to deal with it before on this level.

Maybe someone could show me the basic logic of how I would structure
the following to be non blocking?

1.  Client sends message to server
2.  Server does an https POST to another server and gets a response
3.  Server sends a message back to the client and closes the connection.



From itamar at itamarst.org  Sun Feb  6 16:17:17 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 06 Feb 2005 16:17:17 -0500
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c050206121261c23ad1@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
Message-ID: <1107724637.1256.42.camel@sheriffpony>

On Sun, 2005-02-06 at 12:12 -0800, snacktime wrote:
> Maybe someone could show me the basic logic of how I would structure
> the following to be non blocking?
> 
> 1.  Client sends message to server
> 2.  Server does an https POST to another server and gets a response
> 3.  Server sends a message back to the client and closes the connection.

Server receives data from client -> server sends POST to another server.
Server receives response from another server -> server sends message
back to client and closes connection.

Server sending POST would probably use twisted.web.client and be a
single function call, but internally be:
Open connection to another server.
Connection made -> send HTTP request.
HTTP response receoved -> do something.

Receiving data is:
Received data -> check if we've received enough to process protocol
message, if so process message, otherwise buffer data.





From snacktime at gmail.com  Sun Feb  6 16:30:55 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 13:30:55 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <1107724637.1256.42.camel@sheriffpony>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
Message-ID: <1f060c4c0502061330277804c9@mail.gmail.com>

On Sun, 06 Feb 2005 16:17:17 -0500, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Sun, 2005-02-06 at 12:12 -0800, snacktime wrote:
> > Maybe someone could show me the basic logic of how I would structure
> > the following to be non blocking?
> >
> > 1.  Client sends message to server
> > 2.  Server does an https POST to another server and gets a response
> > 3.  Server sends a message back to the client and closes the connection.
> 
> Server receives data from client -> server sends POST to another server.
> Server receives response from another server -> server sends message
> back to client and closes connection.
> 
> Server sending POST would probably use twisted.web.client and be a
> single function call, but internally be:
> Open connection to another server.
> Connection made -> send HTTP request.
> HTTP response receoved -> do something.
> 
> Receiving data is:
> Received data -> check if we've received enough to process protocol
> message, if so process message, otherwise buffer data.

Ok, so basically I have to write my application so it does not block,
which means anything that does block has to be rewritten using
appropriate twisted components that don't block.  For instance, there
isn't a way to use urllib2 to do the POST and make it not block,
correct?

So I guess the main problem that arises is when calling some code that
blocks, but there is no twisted component that you can use to make the
code non blocking.  In which case you have to resort to using threads
or processes correct?


Chris



From radeex at gmail.com  Sun Feb  6 17:41:27 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 7 Feb 2005 09:41:27 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<1107689084.1361.10.camel@otto.amantes>
	<60ed19d405020603412b080023@mail.gmail.com>
	<8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
Message-ID: <60ed19d4050206144149983bde@mail.gmail.com>

Yeah, I might accept the "backwards compatibility with existing
dependencies" argument, but I don't think it's something that's
necessary for general use. In a post-split world, deb packages that
use Twisted stuff will depend on specific twisted subproject packages.
Anyway, I'm not the one doing the deb packages, but there are my two
cents.


On Sun, 6 Feb 2005 13:26:03 -0500, James Y Knight <foom at fuhm.net> wrote:
> On Feb 6, 2005, at 6:41 AM, Christopher Armstrong wrote:
> 
> > Yeah. "Twisted Core" is just used to disambiguate it from the other
> > subprojects of Twisted. AIUI, "Twisted" is officially the networking
> > framework. The tarball that contains everything will just be a
> > convenience, and it will be called something like TwistedSumo.tar.bz2.
> > I encourage packagers to name the twisted core package "twisted" and
> > twisted subproject packages "twisted-foo". A "sumo" package is
> > unnecessary on all non-barbaric packaging systems; I only think it's
> > appropriate in tarball and win32 form.
> 
> I'm not sure that's right. I think it may be useful (and probably
> expected by users) on debian, say, to have a "twisted" package which
> installs every little bit of code associated with twisted, and a
> twisted-core package which is the core bits. The "twisted" package
> wouldn't actually contain any data, but simply depend on all the other
> packages. Such a package may actually even be *necessary*, in order to
> properly migrate dependancies forward (note that I'm not a debian
> packaging expert so I'm just guessing there).
> 
> James
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From teratorn at twistedmatrix.com  Mon Feb  7 10:39:20 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Mon, 07 Feb 2005 09:39:20 -0600
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<1107689084.1361.10.camel@otto.amantes>
	<60ed19d405020603412b080023@mail.gmail.com>
	<8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
Message-ID: <opslt23ueay3d107@localhost.localdomain>

On Sun, 6 Feb 2005 13:26:03 -0500, James Y Knight <foom at fuhm.net> wrote:

> On Feb 6, 2005, at 6:41 AM, Christopher Armstrong wrote:
>
>> Yeah. "Twisted Core" is just used to disambiguate it from the other
>> subprojects of Twisted. AIUI, "Twisted" is officially the networking
>> framework. The tarball that contains everything will just be a
>> convenience, and it will be called something like TwistedSumo.tar.bz2.
>> I encourage packagers to name the twisted core package "twisted" and
>> twisted subproject packages "twisted-foo". A "sumo" package is
>> unnecessary on all non-barbaric packaging systems; I only think it's
>> appropriate in tarball and win32 form.
>
> I'm not sure that's right. I think it may be useful (and probably  
> expected by users) on debian, say, to have a "twisted" package which  
> installs every little bit of code associated with twisted, and a  
> twisted-core package which is the core bits. The "twisted" package  
> wouldn't actually contain any data, but simply depend on all the other  
> packages.

That is what I would expect and prefer :)

-Eric





From teratorn at twistedmatrix.com  Mon Feb  7 11:08:03 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Mon, 07 Feb 2005 10:08:03 -0600
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c0502061330277804c9@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
Message-ID: <opslt4fpbay3d107@localhost.localdomain>

On Sun, 6 Feb 2005 13:30:55 -0800, snacktime <snacktime at gmail.com> wrote:

> On Sun, 06 Feb 2005 16:17:17 -0500, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
>> On Sun, 2005-02-06 at 12:12 -0800, snacktime wrote:
>> > Maybe someone could show me the basic logic of how I would structure
>> > the following to be non blocking?
>> >
>> > 1.  Client sends message to server
>> > 2.  Server does an https POST to another server and gets a response
>> > 3.  Server sends a message back to the client and closes the  
>> connection.
>>
>> Server receives data from client -> server sends POST to another server.
>> Server receives response from another server -> server sends message
>> back to client and closes connection.
>>
>> Server sending POST would probably use twisted.web.client and be a
>> single function call, but internally be:
>> Open connection to another server.
>> Connection made -> send HTTP request.
>> HTTP response receoved -> do something.
>>
>> Receiving data is:
>> Received data -> check if we've received enough to process protocol
>> message, if so process message, otherwise buffer data.
>
> Ok, so basically I have to write my application so it does not block,
> which means anything that does block has to be rewritten using
> appropriate twisted components that don't block.  For instance, there
> isn't a way to use urllib2 to do the POST and make it not block,
> correct?

Correct.

> So I guess the main problem that arises is when calling some code that
> blocks, but there is no twisted component that you can use to make the
> code non blocking.  In which case you have to resort to using threads
> or processes correct?

Correct. http://twistedmatrix.com/documents/current/howto/threading

(or it should be possible to use Stackless Python with radix's
Deferred support code, in the sandbox; it's experimental of course)

-Eric

> Chris
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From radeex at gmail.com  Sun Feb  6 19:35:58 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 7 Feb 2005 11:35:58 +1100
Subject: [Twisted-Python] New user questions
In-Reply-To: <opslt4fpbay3d107@localhost.localdomain>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
	<opslt4fpbay3d107@localhost.localdomain>
Message-ID: <60ed19d40502061635426bf7d8@mail.gmail.com>

On Mon, 07 Feb 2005 10:08:03 -0600, Eric Mangold
<teratorn at twistedmatrix.com> wrote:
> On Sun, 6 Feb 2005 13:30:55 -0800, snacktime <snacktime at gmail.com> wrote:
> > So I guess the main problem that arises is when calling some code that
> > blocks, but there is no twisted component that you can use to make the
> > code non blocking.  In which case you have to resort to using threads
> > or processes correct?
> 
> Correct. http://twistedmatrix.com/documents/current/howto/threading
> 
> (or it should be possible to use Stackless Python with radix's
> Deferred support code, in the sandbox; it's experimental of course)

Not quite; stackless, greenlets, and so forth won't prevent you from
blocking on blocking code (by which I mean code that blocks on system
calls or synchronous CPU computations); they're essentially a way to
make asynchronous stuff look synchronous. They may make it easier to
rewrite such code to be asynchronous, but you'd still need to modify
the code.

(Let's ignore Pavel's evil "LettuceWrapper" hack).

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From snacktime at gmail.com  Sun Feb  6 21:28:57 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 18:28:57 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <60ed19d40502061635426bf7d8@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
	<opslt4fpbay3d107@localhost.localdomain>
	<60ed19d40502061635426bf7d8@mail.gmail.com>
Message-ID: <1f060c4c0502061828108e1a3a@mail.gmail.com>

I'm having some problems playing with Deferreds and I think it's due
to using threads.  In the following code, will printResult be called
in the thread?  printResult is inside the protocol handler for a
simple echo server, and when calling transport.write it doesn't seem
to write anything, and I'm wondering if it's because it's being called
inside a thread?

d = threads.deferToThread(doLongCalculation)
d.addCallback(printResult)



From radeex at gmail.com  Sun Feb  6 21:46:32 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 7 Feb 2005 13:46:32 +1100
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c0502061828108e1a3a@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
	<opslt4fpbay3d107@localhost.localdomain>
	<60ed19d40502061635426bf7d8@mail.gmail.com>
	<1f060c4c0502061828108e1a3a@mail.gmail.com>
Message-ID: <60ed19d405020618465126af53@mail.gmail.com>

It's not being called inside a thread; the callbacks of deferToThread
are run in the main thread.


On Sun, 6 Feb 2005 18:28:57 -0800, snacktime <snacktime at gmail.com> wrote:
> I'm having some problems playing with Deferreds and I think it's due
> to using threads.  In the following code, will printResult be called
> in the thread?  printResult is inside the protocol handler for a
> simple echo server, and when calling transport.write it doesn't seem
> to write anything, and I'm wondering if it's because it's being called
> inside a thread?
> 
> d = threads.deferToThread(doLongCalculation)
> d.addCallback(printResult)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From andrew-twisted at puzzling.org  Sun Feb  6 21:55:10 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 7 Feb 2005 13:55:10 +1100
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c0502061828108e1a3a@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
	<opslt4fpbay3d107@localhost.localdomain>
	<60ed19d40502061635426bf7d8@mail.gmail.com>
	<1f060c4c0502061828108e1a3a@mail.gmail.com>
Message-ID: <20050207025510.GD870@localhost.localdomain>

On Sun, Feb 06, 2005 at 06:28:57PM -0800, snacktime wrote:
> I'm having some problems playing with Deferreds and I think it's due
> to using threads.  In the following code, will printResult be called
> in the thread?  printResult is inside the protocol handler for a
> simple echo server, and when calling transport.write it doesn't seem
> to write anything, and I'm wondering if it's because it's being called
> inside a thread?
> 
> d = threads.deferToThread(doLongCalculation)
> d.addCallback(printResult)

In this code, printResult will not be called in a thread.

-Andrew.




From snacktime at gmail.com  Sun Feb  6 22:15:34 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 19:15:34 -0800
Subject: [Twisted-Python] echo server using deferToThread
Message-ID: <1f060c4c05020619151031579d@mail.gmail.com>

I can't figure out why LineReceived never gets called in the client.  Any ideas?


---------------------------------------------------------------------
Client Code:
from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.internet import reactor
import sys

class EchoClient(LineReceiver):
    end="GoodBye"
    def connectionMade(self):
        self.sendLine("Hello, world!")

    def lineReceived(self, line):
        print "receive:", line
        if line==self.end:
            self.transport.loseConnection()

class EchoClientFactory(ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed:', reason.getErrorMessage()
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print 'connection lost:', reason.getErrorMessage()
        reactor.stop()

def main():
    factory = EchoClientFactory()
    reactor.connectTCP('localhost', 8000, factory)
    reactor.run()

if __name__ == '__main__':
    main()

--------------------------------------------------------------------------------

Server Code:
from twisted.internet.protocol import Protocol, Factory
from twisted.internet import defer, reactor
from twisted.python import threadable
from twisted.internet import threads
threadable.init(1)
import time

class GetData:

  def Do(self):
      time.sleep(3)
      return 'Done'


### Protocol Implementation

# This is just about the simplest possible protocol
class Echo(Protocol):
    def dataReceived(self, data):
      reactor.callLater(0, self.RunThread, data)

    def PrintData(self,data):
      self.transport.write('GoodBye')
      print "Sent GoodBye"
      self.transport.loseConnection()
      #  Call reactor.stop() for testing so I don't have to kill -9 the server
      reactor.stop()

    def RunThread(self,data):
      c = GetData()
      d = threads.deferToThread(c.Do)
      d.addCallback(self.PrintData)

def main():
    f = Factory()
    f.protocol = Echo
    reactor.listenTCP(8000, f)
    reactor.run()

if __name__ == '__main__':
    main()



From andrew-twisted at puzzling.org  Sun Feb  6 22:29:33 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 7 Feb 2005 14:29:33 +1100
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <1f060c4c05020619151031579d@mail.gmail.com>
References: <1f060c4c05020619151031579d@mail.gmail.com>
Message-ID: <20050207032933.GE870@localhost.localdomain>

On Sun, Feb 06, 2005 at 07:15:34PM -0800, snacktime wrote:
> I can't figure out why LineReceived never gets called in the client.  Any ideas?
[...]

> 
> class EchoClient(LineReceiver):
[...]

> class Echo(Protocol):
>     def dataReceived(self, data):
>       reactor.callLater(0, self.RunThread, data)
> 
>     def PrintData(self,data):
>       self.transport.write('GoodBye')
>       print "Sent GoodBye"
>       self.transport.loseConnection()

You're not writing a whole line, so a line is never received :)

Use self.sendLine('GoodBye') instead.

-Andrew




From snacktime at gmail.com  Sun Feb  6 23:06:21 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 20:06:21 -0800
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <20050207032933.GE870@localhost.localdomain>
References: <1f060c4c05020619151031579d@mail.gmail.com>
	<20050207032933.GE870@localhost.localdomain>
Message-ID: <1f060c4c050206200637fb7df6@mail.gmail.com>

On Mon, 7 Feb 2005 14:29:33 +1100, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:
> On Sun, Feb 06, 2005 at 07:15:34PM -0800, snacktime wrote:
> > I can't figure out why LineReceived never gets called in the client.  Any ideas?
> [...]
> 
> >
> > class EchoClient(LineReceiver):
> [...]
> 
> > class Echo(Protocol):
> >     def dataReceived(self, data):
> >       reactor.callLater(0, self.RunThread, data)
> >
> >     def PrintData(self,data):
> >       self.transport.write('GoodBye')
> >       print "Sent GoodBye"
> >       self.transport.loseConnection()
> 
> You're not writing a whole line, so a line is never received :)
> 
> Use self.sendLine('GoodBye') instead.
> 
> -Andrew

replacing self.transport.write with self.sendLine just makes the code
block when it hits self.sendLine.



From foom at fuhm.net  Sun Feb  6 23:15:36 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun, 6 Feb 2005 23:15:36 -0500
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <EB2DC622-78BE-11D9-91C7-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2005-01-31 00:29:34.600000:
  Bugs opened: 6   Bugs closed: 6   Total open bugs: 337 (+0)
   Urgent: 11 (-1)
   Bug: 136 (+2)
   Feature: 124 (-1)
   Wish: 66 (+0)

New / Reopened Bugs
______________________
                     ==== Urgent ====
[CONCH] Several conch test failures since r12918  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue874 opened by spiv

                     ==== Bug ====
manhole tests don't deal well with failure and are cwd-sensitive  (5 
days ago)
        http://twistedmatrix.com/bugs/issue878 opened by jknight

t.test.test_application.TestConvert fails without t.web  (6 days ago)
        http://twistedmatrix.com/bugs/issue877 opened by marienz

random stuff imports marmalade  (6 days ago)
        http://twistedmatrix.com/bugs/issue876 opened by marienz

twisted.test.test_rebuild.RebuildTestCase tries to mess with files in 
/usr/lib/python/site-packages  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue875 opened by marienz

                     ==== Feature ====
[patch] make twisted.xish tests pass without twisted.web  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue879 opened by marienz

Bugs Closed
______________________
                     ==== Urgent ====
make epydoc stop ignoring zope interfaces  (2 months ago)
        http://twistedmatrix.com/bugs/issue794 opened by radix, closed 
by spiv

[CONCH] Several conch test failures since r12918  (6 days ago)
        http://twistedmatrix.com/bugs/issue874 opened by spiv, closed by 
z3p

[TRIAL] [PATCH] trial does not wait for reactor shutdown before next 
pass  (1 month ago)
        http://twistedmatrix.com/bugs/issue829 opened by logan, closed 
by z3p

                     ==== Bug ====
twisted.test.test_rebuild.RebuildTestCase tries to mess with files in 
/usr/lib/python/site-packages  (6 days ago)
        http://twistedmatrix.com/bugs/issue875 opened by marienz, closed 
by Tv

                     ==== Feature ====
[DEFERRED] patch: post-mortem executor for Deferred  (4 weeks ago)
        http://twistedmatrix.com/bugs/issue860 opened by zooko, closed 
by jknight

[patch] make twisted.xish tests pass without twisted.web  (5 days ago)
        http://twistedmatrix.com/bugs/issue879 opened by marienz, closed 
by marienz




From exarkun at divmod.com  Sun Feb  6 23:16:19 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 07 Feb 2005 04:16:19 GMT
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <1f060c4c050206200637fb7df6@mail.gmail.com>
Message-ID: <20050207041619.21318.1061589095.divmod.quotient.6632@ohm>

On Sun, 6 Feb 2005 20:06:21 -0800, snacktime <snacktime at gmail.com> wrote:
>On Mon, 7 Feb 2005 14:29:33 +1100, Andrew Bennetts
> <andrew-twisted at puzzling.org> wrote:
> > On Sun, Feb 06, 2005 at 07:15:34PM -0800, snacktime wrote:
> > > I can't figure out why LineReceived never gets called in the client.  Any ideas?
> > [...]
> > 
> > >
> > > class EchoClient(LineReceiver):
> > [...]
> > 
> > > class Echo(Protocol):
> > >     def dataReceived(self, data):
> > >       reactor.callLater(0, self.RunThread, data)
> > >
> > >     def PrintData(self,data):
> > >       self.transport.write('GoodBye')
> > >       print "Sent GoodBye"
> > >       self.transport.loseConnection()
> > 
> > You're not writing a whole line, so a line is never received :)
> > 
> > Use self.sendLine('GoodBye') instead.
> > 
> > -Andrew
> 
> replacing self.transport.write with self.sendLine just makes the code
> block when it hits self.sendLine.

  This seems unlikely, since sendLine never blocks.  sendLine is nothing 
more than a call to transport.write() with the appropriate additional 
bytes tacked on automatically ("\r\n" by default).

  Echo subclasses Protocol, though.  sendLine is a method of LineReceiver.  
When you call sendLine on your Protocol instance, an AttributeError is 
raised.  The exception is translated into a Failure (so as to be handleable 
asynchronously).  But no handler is ever set up for it, so it goes 
unreported, unless you get lucky and the Failure gets garbage collected 
in a timely fashion.

  So, if you get stuck with a Deferred that appears to just hang forever, 
make sure you are setting up proper error handling.  In some cases, for 
debugging, this may just mean adding twisted.python.log.err as the errback 
(`from twisted.python import log; d.addErrback(log.err)').

  Jp



From snacktime at gmail.com  Sun Feb  6 23:15:56 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 20:15:56 -0800
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <1f060c4c050206200637fb7df6@mail.gmail.com>
References: <1f060c4c05020619151031579d@mail.gmail.com>
	<20050207032933.GE870@localhost.localdomain>
	<1f060c4c050206200637fb7df6@mail.gmail.com>
Message-ID: <1f060c4c0502062015210d4110@mail.gmail.com>

> 
> replacing self.transport.write with self.sendLine just makes the code
> block when it hits self.sendLine.
> 

self.transport.write('GoodBye\r\n') on the other hand works fine.



From snacktime at gmail.com  Mon Feb  7 00:07:49 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 21:07:49 -0800
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <20050207041619.21318.1061589095.divmod.quotient.6632@ohm>
References: <1f060c4c050206200637fb7df6@mail.gmail.com>
	<20050207041619.21318.1061589095.divmod.quotient.6632@ohm>
Message-ID: <1f060c4c05020621074c8b4e8c@mail.gmail.com>

> > replacing self.transport.write with self.sendLine just makes the code
> > block when it hits self.sendLine.
> 
>  This seems unlikely, since sendLine never blocks.  sendLine is nothing
> more than a call to transport.write() with the appropriate additional
> bytes tacked on automatically ("\r\n" by default).
> 
>  Echo subclasses Protocol, though.  sendLine is a method of LineReceiver.
> When you call sendLine on your Protocol instance, an AttributeError is
> raised.  The exception is translated into a Failure (so as to be handleable
> asynchronously).  But no handler is ever set up for it, so it goes
> unreported, unless you get lucky and the Failure gets garbage collected
> in a timely fashion.
> 
>  So, if you get stuck with a Deferred that appears to just hang forever,
> make sure you are setting up proper error handling.  In some cases, for
> debugging, this may just mean adding twisted.python.log.err as the errback
> (`from twisted.python import log; d.addErrback(log.err)').

Ya I wasn't setting the error handling and only sometimes they would get caught.

Twisted is a bit of a learning curve, but I do like the way it's put
together and so far it seems like a great product.



From mszumocki at contman.pl  Mon Feb  7 03:27:15 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Mon,  7 Feb 2005 09:27:15 +0100
Subject: [Twisted-Python] Persistence in browsers?
In-Reply-To: <E1CxVA3-0005hR-03@pyramid.twistedmatrix.com>
Message-ID: <20050207092715.ae8f16c1@poczta.contman.pl>



----- Original Message -----
> Date: Sat, 5 Feb 2005 03:02:58 +0100
> From: "Tibi Dondera" <incoming at pronet-romania.com>
> Subject: [Twisted-Python] Persistence in browsers?

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, and
> I need to inform them __real-time__ (a max of 3-5 seconds delay) of an
> event that happened on the server. Is twisted the right way to go, given
> the fact that it promises asynchronous event handling ?
> [snip]

Why not just use UDP if number of hanging connections is a problem?

Maciej Szumocki
  





From mary-twisted at puzzling.org  Mon Feb  7 05:55:30 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 7 Feb 2005 21:55:30 +1100
Subject: [Twisted-Python] Twisted Sprint: Hobart Australia, 1-3 April 2005
Message-ID: <20050207105530.GC8262@sourdust.home.puzzling.org>

Hey folks,

The dates for the Australian Twisted sprint have been confirmed.

 Dates: Friday 1 April 2005 - Sunday 3 April 2005

 Location: Thanks to Nunatak Systems, Chris Armstrong, Jonathan Lange
 and Timothy Stebbing we've got locations in Sandy Bay, Hobart,
 Tasmania, Australia. See the wiki link below for more info.

The sprint is going to be fairly informal: no attendance fees, no formal
registration system. The flipside is that you'll be responsible for
organising travel, accommodation and meals.

While we haven't decided on a firm goal or goals for the sprint, we'll
be working on code destined for the TM Labs projects (that is, the
Twisted subversion respository). 

I've set up a temporary wiki for notes about the sprint, including
topics, venues and accommodation options:

 http://users.puzzling.org/users/mary/TwistedSprint/moin.cgi/FrontPage

If you're going to come along, please let us know ASAP, both by replying
to this mail (off list, note that this list has a Reply-To header) and
by adding your name to
http://users.puzzling.org/users/mary/TwistedSprint/moin.cgi/SprintAttendees
(I want people to email me as well so that I have contact details for
everyone!).

-Mary



From incoming at pronet-romania.com  Mon Feb  7 08:11:18 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Mon, 7 Feb 2005 14:11:18 +0100
Subject: [Twisted-Python] Persistence in browsers?
In-Reply-To: <420433A3.50802@divmod.com>
Message-ID: <00f601c50d16$8353dc80$0a01a8c0@mobile>

Hello,

I was unable to locate anu javascript library that uses sockets, the
closest I found was some mozilla technologies that transform it in a
kind of JS server, but I need a cross-browser, industry standard (read:
that works with the current software of users, i.e. 95% IE) solution.

Also, I still did not understand from your answer if twisted _does_
support this technique, of answering a HTTP client, then putting it to
sleep until something happens, on a large scale.

Thanks for your help, and any further info.
_________________
Tiberiu DONDERA


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Glyph
Lefkowitz
Sent: Saturday, 05 February 2005 03:47
To: Twisted general discussion
Subject: Re: [Twisted-Python] Persistence in browsers?


Tibi Dondera wrote:

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, 
> and I need to inform them __real-time__ (a max of 3-5 seconds delay) 
> of an event that happened on the server. Is twisted the right way to 
> go, given the fact that it promises asynchronous event handling ?

Wow.  In short, "maybe".  That is a lot of clients.  I believe that 
Twisted is probably up to the task, but regardless of which solution you

choose, you are going to have to do a lot of tuning.  Have you done any 
prototyping yet?  If you do, I definitely recommend inspecting the 
different reactors for performance differences with your application.

If you can use Javascript, you might want to use a JS sockets library 
rather than XMLHTTPRequest, just so that you don't end up using one of 
your persistent connections up.  Or, perhaps the notification site 
should be notify.yourdomain.com rather than yourdomain.com, so that the 
persistent connection doesn't count towards your "site"...

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From itamar at itamarst.org  Mon Feb  7 11:21:50 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 07 Feb 2005 11:21:50 -0500
Subject: [Twisted-Python] Persistence in browsers?
In-Reply-To: <00f601c50d16$8353dc80$0a01a8c0@mobile>
References: <00f601c50d16$8353dc80$0a01a8c0@mobile>
Message-ID: <1107793310.14301.26.camel@sheriffpony>

On Mon, 2005-02-07 at 14:11 +0100, Tibi Dondera wrote:

> Also, I still did not understand from your answer if twisted _does_
> support this technique, of answering a HTTP client, then putting it to
> sleep until something happens, on a large scale.

It does. In fact Donovan is giving a talk about it at the upcoming
PyCon. For web questions you probably want the twisted-web mailing list.




From db3l at fitlinxx.com  Mon Feb  7 12:30:38 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 07 Feb 2005 12:30:38 -0500
Subject: [Twisted-Python] Re: Persistence in browsers?
References: <000501c50b26$d1c79d30$0a01a8c0@mobile>
Message-ID: <ubrawp9a9.fsf@fitlinxx.com>

"Tibi Dondera" <incoming at pronet-romania.com> writes:

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, and
> I need to inform them __real-time__ (a max of 3-5 seconds delay) of an
> event that happened on the server. Is twisted the right way to go, given
> the fact that it promises asynchronous event handling ?

Independent of twisted versus other methods (which some other notes
have addressed), I think such a load is going to require that you
consider distributing your notification system.  For example,
notifying 100000 clients in 5 seconds is 20000 packets per second
being generated which is a non-trivial load on both a machine (not
quite sure you can hit this from application space on typical machines
even) and its corresponding bandwidth (say 64 byte packets including
protocol overhead would saturate a 10Mbit stream).

At the least you might try tiering your notification system - the code
running on your page would connect to one of a pool of servers
(ideally geographically distributed over the network or else backbone
latencies and bandwidths might become an issue), and those servers
would maintain a single connection back to a central server.  This
could be tiered multiple times for more efficiency or scaleability.

Then, your question really becomes one of what sort of fan-out factor
do you need to optimize notifications.  For example, the central
server(s) would notice the change, but only have to notify the next
tier (perhaps 10s of machines).  Those 10s of machines would either
each notify their own next tier, or directly notify a bunch of leaf
machines.

With this sort of structure, the number of individual clients that any
given "node" in the system has to support is far less and the system
can grow incrementally by first permitting the ratio of clients to
leaf nodes to increase, and then adding leaf nodes (or another tier)
when needed to suddenly bring that ratio back down.

-- David




From snacktime at gmail.com  Mon Feb  7 22:53:46 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 7 Feb 2005 19:53:46 -0800
Subject: [Twisted-Python] segfaults with deferToThread
Message-ID: <1f060c4c05020719534682256e@mail.gmail.com>

This is on Freebsd 5.3-release-p2 with python 2.4.

The script below calls a blocking method using deferToThread.  When I
have 5 or so clients all hitting it at the same time I get a segfault
or bus error within minutes.
I recompiled python with --with-pydebug and set OPT to -g, but it
didn't give me any more information in the backtrace which is also
below.   Then I ran gdb on the server process and something funny
happened.  I didn't get a segfault, but the server started catching
exceptions and printing them to the screen.  As soon as I detached gdb
the exceptions stop but it dumps core a minute later (or less). The
exception is pasted below also.

Python was compiled with pthreads, which is the freebsd kse threads as
far as I know.

Anyone have an idea what is going on?


Server code:
-----------------------------------------------------------
from twisted.internet.protocol import Protocol, Factory
from twisted.internet import defer, reactor
from twisted.python import threadable
from twisted.internet import threads
threadable.init(1)
from otransact.otdirect import process
from twisted.python import log

class GetData:

  # this calls my blocking method.  THe method blocks when doing
database calls with psycopg and when using urllib2 to do an https
POST.  Other than that everything is non blocking.  psycopg is
supposed to be thread safe, and I would assume urllib2 is also.

  def Do(self,data):
       response = process(data)
       return response
       


### Protocol Implementation

# This is just about the simplest possible protocol
class Echo(Protocol):
    def dataReceived(self, data):
      """As soon as any data is received, write it back."""
      reactor.callLater(0, self.Start,data)

    def PrintData(self,data):
      self.transport.write("%s\r\n" % data)
      self.transport.loseConnection()
      #reactor.stop()

    def Start(self,data):
      c = GetData()
      d = threads.deferToThread(c.Do,data)
      d.addCallback(self.PrintData)
      d.addErrback(log.err)

def main():
    f = Factory()
    f.protocol = Echo
    reactor.listenTCP(8000, f)
    reactor.run()

if __name__ == '__main__':
    main()




Exception raised by server when gdb was running. 
-----------------------------------------------------------------------

File "otssl.py", line 42, in ?
            reactor.run()
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/default.py",
line 126, in run
            self.mainLoop()
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/default.py",
line 134, in mainLoop
            self.runUntilCurrent()
        --- <exception caught here> ---
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 423, in runUntilCurrent
            call.func(*call.args, **call.kw)
          File "/usr/home/otransact/ssl/ots.py", line 72, in Start
            d = threads.deferToThread(c.Do,data)
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/threads.py",
line 48, in deferToThread
            reactor.callInThread(_putResultInDeferred, d, f, args, kwargs)
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 453, in callInThread
            self.threadpool.callInThread(_callable, *args, **kwargs)
          File "/usr/local/lib/python2.4/site-packages/twisted/python/threadpool.py",
line 130, in callInThread
            self.q.put(o)
          File "/usr/local/lib/python2.4/Queue.py", line 91, in put
            self.not_full.release()
        thread.error: release unlocked lock


Backtrace:
------------------------------------------------
#0  0x28286dbb in pthread_testcancel () from /usr/lib/libpthread.so.1
#1  0x2827eb06 in pthread_mutexattr_init () from /usr/lib/libpthread.so.1
#2  0x00000000 in ?? ()



From andrew-twisted at puzzling.org  Mon Feb  7 23:37:01 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Feb 2005 15:37:01 +1100
Subject: [Twisted-Python] segfaults with deferToThread
In-Reply-To: <1f060c4c05020719534682256e@mail.gmail.com>
References: <1f060c4c05020719534682256e@mail.gmail.com>
Message-ID: <20050208043701.GB10814@localhost.localdomain>

On Mon, Feb 07, 2005 at 07:53:46PM -0800, snacktime wrote:
> This is on Freebsd 5.3-release-p2 with python 2.4.
> 
> The script below calls a blocking method using deferToThread.  When I
> have 5 or so clients all hitting it at the same time I get a segfault
> or bus error within minutes.

This looks like it may be related to http://python.org/sf/1080660.  I've
added a comment to that bug; you might like to follow-up there yourself.
The bug is almost certainly in Python itself (or a 3rd-party extension
module you're using, like psycopg), and not Twisted.

-Andrew.




From snacktime at gmail.com  Tue Feb  8 00:16:36 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 7 Feb 2005 21:16:36 -0800
Subject: [Twisted-Python] segfaults with deferToThread
In-Reply-To: <20050208045716.GC10814@localhost.localdomain>
References: <1f060c4c05020719534682256e@mail.gmail.com>
	<20050208043701.GB10814@localhost.localdomain>
	<1f060c4c05020720437ba95607@mail.gmail.com>
	<20050208045716.GC10814@localhost.localdomain>
Message-ID: <1f060c4c050207211644aada5f@mail.gmail.com>

Ok I narrowed this down to the pycrypto package.  Specifically the rsa
encrypt function.  I'll file a bug report with pycrypto.

Chris



From troll at pld-linux.org  Mon Feb  7 12:31:37 2005
From: troll at pld-linux.org (Michal Chruszcz)
Date: Mon, 7 Feb 2005 18:31:37 +0100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d4050206144149983bde@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
	<60ed19d4050206144149983bde@mail.gmail.com>
Message-ID: <200502071831.37262@tintia.doriath>

It seems like on Sunday 06 of February 2005 23:41, Christopher Armstrong 
typed:
> Yeah, I might accept the "backwards compatibility with existing
> dependencies" argument, but I don't think it's something that's
> necessary for general use. In a post-split world, deb packages that
> use Twisted stuff will depend on specific twisted subproject packages.
> Anyway, I'm not the one doing the deb packages, but there are my two
> cents.

You must remember that splitting into several packages from one tarball is 
much simpler than doing so using several different .spec files (each for 
one tarball) or bearing with many Sources in one big .spec. Moreover one 
tarball allows packagers to create -doc and -examples packages containing 
such things for whole Twisted.
Personally I am a PLD Linux developer and until now (the one-tarball-distro 
version of Twisted 1.3) there are separate packages for docs, examples, ssl 
and some other, which I actually don't know what are they for and, believe 
me, managing packaging Twisted from one tarball plus splitting different 
parts into separate RPMs is really simpler than managing e.g. ten 
different .spec's. I know that because Xfce is distributed in dozens of 
tarballs, each has its own .spec file and both upgrading and reorganization 
of Xfce is a bit annoying.
Summarizing, no, I'm not against changes. I'm only trying to insist on 
distributing Twisted also in one "gimme-all" tarball. ;-)

P.S. Please, write *under* a quotation.
-- 
Michal Chruszcz -=- Seen at http://1lo.sanok.pl/~troll/gallery.php



From radeex at gmail.com  Tue Feb  8 01:38:56 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 8 Feb 2005 17:38:56 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d40502072237639e0ba2@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
	<60ed19d4050206144149983bde@mail.gmail.com>
	<200502071831.37262@tintia.doriath>
	<60ed19d40502072237639e0ba2@mail.gmail.com>
Message-ID: <60ed19d405020722381ec4d67d@mail.gmail.com>

On Mon, 7 Feb 2005 18:31:37 +0100, Michal Chruszcz <troll at pld-linux.org> wrote:
> It seems like on Sunday 06 of February 2005 23:41, Christopher Armstrong
> typed:
> > Yeah, I might accept the "backwards compatibility with existing
> > dependencies" argument, but I don't think it's something that's
> > necessary for general use. In a post-split world, deb packages that
> > use Twisted stuff will depend on specific twisted subproject packages.
> > Anyway, I'm not the one doing the deb packages, but there are my two
> > cents.
>
> You must remember that splitting into several packages from one tarball is
> much simpler than doing so using several different .spec files (each for
> one tarball) or bearing with many Sources in one big .spec. Moreover one
> tarball allows packagers to create -doc and -examples packages containing
> such things for whole Twisted.

What are you talking about? I am definitely going to be producing a
sumo tarball. I was talking about *deb* packages up there.

> Personally I am a PLD Linux developer and until now (the one-tarball-distro
> version of Twisted 1.3) there are separate packages for docs, examples, ssl
> and some other, which I actually don't know what are they for and, believe
> me, managing packaging Twisted from one tarball plus splitting different
> parts into separate RPMs is really simpler than managing e.g. ten
> different .spec's. I know that because Xfce is distributed in dozens of
> tarballs, each has its own .spec file and both upgrading and reorganization
> of Xfce is a bit annoying.
> Summarizing, no, I'm not against changes. I'm only trying to insist on
> distributing Twisted also in one "gimme-all" tarball. ;-)

As I've already said in both the split FAQ and on the mailing list
multiple times I'm going to be producing both big sumo tarballs *and*
per-project tarballs. You can package however you want based on these.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From apocalypznow at gmail.com  Tue Feb  8 04:32:51 2005
From: apocalypznow at gmail.com (apocalypznow)
Date: Tue, 08 Feb 2005 01:32:51 -0800
Subject: [Twisted-Python] re-entrancy question
Message-ID: <cua0th$aa6$1@sea.gmane.org>

I've got a Twisted server application that also listens for other types 
of TCP connections on another port.  Upon receiving certain data on that 
other port, I make calls to objects subclassed from pb.Avatar.  Given 
that Twisted runs on one loop doing select(), I think I have a 
re-entrancy situation.  Is this:
1) dangerous?
2) why is it dangerous?
3) and how would I go about achieving what I want safely?




From radeex at gmail.com  Tue Feb  8 05:57:29 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 8 Feb 2005 21:57:29 +1100
Subject: [Twisted-Python] re-entrancy question
In-Reply-To: <cua0th$aa6$1@sea.gmane.org>
References: <cua0th$aa6$1@sea.gmane.org>
Message-ID: <60ed19d405020802572e134a58@mail.gmail.com>

On Tue, 08 Feb 2005 01:32:51 -0800, apocalypznow <apocalypznow at gmail.com> wrote:
> I've got a Twisted server application that also listens for other types
> of TCP connections on another port.  Upon receiving certain data on that
> other port, I make calls to objects subclassed from pb.Avatar.  Given
> that Twisted runs on one loop doing select(), I think I have a
> re-entrancy situation.  Is this:
> 1) dangerous?
> 2) why is it dangerous?
> 3) and how would I go about achieving what I want safely?

Are all of your TCP connections handled by Twisted? If that is the
case, and you're not doing anything weird with threads or something,
then you have no re-entering going on, and it is not dangerous at all.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From apocalypznow at gmail.com  Tue Feb  8 12:42:17 2005
From: apocalypznow at gmail.com (apocalypznow)
Date: Tue, 08 Feb 2005 09:42:17 -0800
Subject: [Twisted-Python] Re: re-entrancy question
In-Reply-To: <60ed19d405020802572e134a58@mail.gmail.com>
References: <cua0th$aa6$1@sea.gmane.org>
	<60ed19d405020802572e134a58@mail.gmail.com>
Message-ID: <cuatj4$58g$1@sea.gmane.org>

I have a TCP connection handled by socket calls, not through Twisted. 
It is because the app on the other end of the socket call can not run a 
Twisted reactor.


Christopher Armstrong wrote:
> On Tue, 08 Feb 2005 01:32:51 -0800, apocalypznow <apocalypznow at gmail.com> wrote:
> 
>>I've got a Twisted server application that also listens for other types
>>of TCP connections on another port.  Upon receiving certain data on that
>>other port, I make calls to objects subclassed from pb.Avatar.  Given
>>that Twisted runs on one loop doing select(), I think I have a
>>re-entrancy situation.  Is this:
>>1) dangerous?
>>2) why is it dangerous?
>>3) and how would I go about achieving what I want safely?
> 
> 
> Are all of your TCP connections handled by Twisted? If that is the
> case, and you're not doing anything weird with threads or something,
> then you have no re-entering going on, and it is not dangerous at all.
> 




From itamar at itamarst.org  Tue Feb  8 13:11:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Feb 2005 13:11:29 -0500
Subject: [Twisted-Python] Re: re-entrancy question
In-Reply-To: <cuatj4$58g$1@sea.gmane.org>
References: <cua0th$aa6$1@sea.gmane.org>
	<60ed19d405020802572e134a58@mail.gmail.com>
	<cuatj4$58g$1@sea.gmane.org>
Message-ID: <1107886289.14302.90.camel@sheriffpony>

On Tue, 2005-02-08 at 09:42 -0800, apocalypznow wrote:
> I have a TCP connection handled by socket calls, not through Twisted. 
> It is because the app on the other end of the socket call can not run a 
> Twisted reactor.

It doesn't matter what the other side is using, you can still use
Twisted's TCP support on your side. 




From nealie at kobudo.homeunix.net  Tue Feb  8 13:47:32 2005
From: nealie at kobudo.homeunix.net (Neal Nelson)
Date: Tue, 8 Feb 2005 19:47:32 +0100
Subject: [Twisted-Python] wxPython
Message-ID: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>

I can't seem to get wxPython to work with Twisted 1.3. I started 
developing a system some time ago but I've only just got back to it and 
the user interface no longer works, which is a bit of a problem.

Should wx work or is this broken in Twisted?




From snacktime at gmail.com  Tue Feb  8 14:17:43 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 11:17:43 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
Message-ID: <1f060c4c05020811173489d3e4@mail.gmail.com>

I have a server that uses threads, and when run standalone or via
twistd as an application I have to send it a KILL signal if it has
already answered at least one request.  Or in some cases if I just
send it an INT it will stop if it's currently handling a lot of
requests at the time I send it the signal.  Seems like there is
something I am not doing here that I should be when  using threads?

Chris



From snacktime at gmail.com  Tue Feb  8 14:21:14 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 11:21:14 -0800
Subject: [Twisted-Python] Re: twisted threading server has to be stopped
	with KILL
In-Reply-To: <1f060c4c05020811173489d3e4@mail.gmail.com>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
Message-ID: <1f060c4c0502081121400a93b0@mail.gmail.com>

Interesting.  When running the application via twistd -noy config.tac,
the server will stop if I hit control-C, but only after the next
request from the client comes through.  If the server has not yet
processed a connection, then it shuts down ok with control-C.

Chris

On Tue, 8 Feb 2005 11:17:43 -0800, snacktime <snacktime at gmail.com> wrote:
> I have a server that uses threads, and when run standalone or via
> twistd as an application I have to send it a KILL signal if it has
> already answered at least one request.  Or in some cases if I just
> send it an INT it will stop if it's currently handling a lot of
> requests at the time I send it the signal.  Seems like there is
> something I am not doing here that I should be when  using threads?
> 
> Chris
>



From itamar at itamarst.org  Tue Feb  8 14:34:26 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Feb 2005 14:34:26 -0500
Subject: [Twisted-Python] wxPython
In-Reply-To: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
References: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
Message-ID: <1107891266.14305.93.camel@sheriffpony>

On Tue, 2005-02-08 at 19:47 +0100, Neal Nelson wrote:
> I can't seem to get wxPython to work with Twisted 1.3. I started 
> developing a system some time ago but I've only just got back to it and 
> the user interface no longer works, which is a bit of a problem.
> 
> Should wx work or is this broken in Twisted?

There are ways to use Twisted with wx (e.g. using two threads) but
unfortunately I could get neither wxreactor nor wxsupport nor to work
reliably across Linux and Win32. So, yes, but you need to do extra work
- the python cookbook has a few suggestions.




From itamar at itamarst.org  Tue Feb  8 14:36:04 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Feb 2005 14:36:04 -0500
Subject: [Twisted-Python] twisted threading server has to be stopped
	with KILL
In-Reply-To: <1f060c4c05020811173489d3e4@mail.gmail.com>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
Message-ID: <1107891364.14309.95.camel@sheriffpony>

On Tue, 2005-02-08 at 11:17 -0800, snacktime wrote:
> I have a server that uses threads, and when run standalone or via
> twistd as an application I have to send it a KILL signal if it has
> already answered at least one request.  Or in some cases if I just
> send it an INT it will stop if it's currently handling a lot of
> requests at the time I send it the signal.  Seems like there is
> something I am not doing here that I should be when  using threads?

The system will stop  when all threads are finished, which happens when
they finish their current task. Since that may be blocking (possibly
indefinitely) the program may never exit cleanly. This is a general
problem with blocking calls and not threads, and is not Twisted
specific.




From snacktime at gmail.com  Tue Feb  8 14:57:11 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 11:57:11 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <1107891364.14309.95.camel@sheriffpony>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
	<1107891364.14309.95.camel@sheriffpony>
Message-ID: <1f060c4c05020811574bb781a@mail.gmail.com>

On Tue, 08 Feb 2005 14:36:04 -0500, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Tue, 2005-02-08 at 11:17 -0800, snacktime wrote:
> > I have a server that uses threads, and when run standalone or via
> > twistd as an application I have to send it a KILL signal if it has
> > already answered at least one request.  Or in some cases if I just
> > send it an INT it will stop if it's currently handling a lot of
> > requests at the time I send it the signal.  Seems like there is
> > something I am not doing here that I should be when  using threads?
> 
> The system will stop  when all threads are finished, which happens when
> they finish their current task. Since that may be blocking (possibly
> indefinitely) the program may never exit cleanly. This is a general
> problem with blocking calls and not threads, and is not Twisted
> specific.

The only place I call threads is through deferToThread, and the server
still hangs even after all the threads called with deferToThread have
run and their callbacks processed.  What other threads could there be
that are blocking?



From itamar at itamarst.org  Tue Feb  8 15:06:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Feb 2005 15:06:18 -0500
Subject: [Twisted-Python] twisted threading server has to be stopped
	with KILL
In-Reply-To: <1f060c4c05020811574bb781a@mail.gmail.com>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
	<1107891364.14309.95.camel@sheriffpony>
	<1f060c4c05020811574bb781a@mail.gmail.com>
Message-ID: <1107893178.14305.105.camel@sheriffpony>

On Tue, 2005-02-08 at 11:57 -0800, snacktime wrote:

> The only place I call threads is through deferToThread, and the server
> still hangs even after all the threads called with deferToThread have
> run and their callbacks processed.  What other threads could there be
> that are blocking?

In that case Twisted should exit correctly.




From snacktime at gmail.com  Tue Feb  8 15:15:35 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 12:15:35 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <1107893178.14305.105.camel@sheriffpony>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
	<1107891364.14309.95.camel@sheriffpony>
	<1f060c4c05020811574bb781a@mail.gmail.com>
	<1107893178.14305.105.camel@sheriffpony>
Message-ID: <1f060c4c05020812151c933bfe@mail.gmail.com>

On Tue, 08 Feb 2005 15:06:18 -0500, Itamar Shtull-Trauring > > The
only place I call threads is through deferToThread, and the server
> > still hangs even after all the threads called with deferToThread have
> > run and their callbacks processed.  What other threads could there be
> > that are blocking?
> 
> In that case Twisted should exit correctly.

Here is the code.  ProcessTransaction is the class (not shown here)
that contains the blocking method Do().  After playing with it some
more I found something interesting.  Say I send a number of requests
with the client, then hit control-C on the server.  The server won't
shutdown, but on the very next connection from the client the server
drops the connection  immediately before the ssl handshake is
completed and shuts down.  It seems like some sort of event loop where
the INT signal isn't getting processed until the next event happens,
which in this case would be the connection.

class OT(Protocol):
    def dataReceived(self, data):
      """As soon as any data is received, process it in a thread."""
      reactor.callLater(0, self.Start,data)

    def PrintData(self,data):
      self.transport.write("%s\r\n" % data)
      self.transport.loseConnection()

    def Start(self,data):
      c = ProcessTransaction()
      # Blocking function called here in thread
      d = threads.deferToThread(c.Do,data)
      d.addCallback(self.PrintData)
      d.addErrback(log.err)


application = service.Application("otransact")
OTService = service.IServiceCollection(application)
OTfactory = Factory()
OTfactory.protocol = OT
OTServer = internet.SSLServer(8000, OTfactory,ServerContextFactory())
OTServer.setServiceParent(OTService)



From uwe at oss4u.com  Tue Feb  8 16:25:27 2005
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 8 Feb 2005 13:25:27 -0800
Subject: [Twisted-Python] wxPython
In-Reply-To: <1107891266.14305.93.camel@sheriffpony>
References: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
	<1107891266.14305.93.camel@sheriffpony>
Message-ID: <200502081325.27492.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Try the original recipe from the python cookbook. It works for me across 
platforms. I'm using 80ms for the timer. As Itamar put it, it's not perfectly 
reliable and usually needs tweaking with the timer. I found values between 80 
and 120 ms to be working.
Writing a real reactor is at least very complicated if not impossible. Wx uses 
the internal even loops of the platforms underlying graphical toolkit, so 
this means the whole thing works differently when using GTK or GTK2 or 
Windows Controls or Mac... etc. So the reactor code would have to be smart 
enough to detect the platform and hook into the graphical system's eventloop.
Windows uses multiple event loops for modal dialogs, so whenever you open a 
modal window on windows a secondary eventloop handles that one window and the 
primary eventloop is stuck until the modal window closes. Same goes for 
pulldown menues.

Uwe
  

On Tuesday 08 February 2005 11:34 am, Itamar Shtull-Trauring wrote:
> On Tue, 2005-02-08 at 19:47 +0100, Neal Nelson wrote:
> > I can't seem to get wxPython to work with Twisted 1.3. I started
> > developing a system some time ago but I've only just got back to it and
> > the user interface no longer works, which is a bit of a problem.
> >
> > Should wx work or is this broken in Twisted?
>
> There are ways to use Twisted with wx (e.g. using two threads) but
> unfortunately I could get neither wxreactor nor wxsupport nor to work
> reliably across Linux and Win32. So, yes, but you need to do extra work
> - the python cookbook has a few suggestions.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFCCS5HjqGXBvRToM4RAuDvAJ9N0ooV+O+pfQ6fT2wB0GvrNTaAtwCfW2NV
SPvTXszWPcJnjiajIKfu2UA=
=D/wc
-----END PGP SIGNATURE-----




From db3l at fitlinxx.com  Tue Feb  8 18:14:31 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 08 Feb 2005 18:14:31 -0500
Subject: [Twisted-Python] Re: wxPython
References: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
Message-ID: <upsza7ig8.fsf@fitlinxx.com>

Neal Nelson <nealie at kobudo.homeunix.net> writes:

> I can't seem to get wxPython to work with Twisted 1.3. I started
> developing a system some time ago but I've only just got back to it
> and the user interface no longer works, which is a bit of a problem.
> 
> Should wx work or is this broken in Twisted?

There are different ways to couple the Twisted and wxPython event
loops, with varying benefits and constraints.  Generally speaking you
need to decide which loop is the master and then handle updating the
other loop from within the main loop.  The wx reactor is an example of
Twisted owning the main loop with periodic updates to the wxPython
message loop.

But at least in my case, the cookbook example of letting wxPython own
the primary loop, and using a periodic timer to crank the Twisted
reactor has worked well.  The biggest negative to this approach (as
has been pointed out in prior threads on the subject) is the lower
granularity, and higher latency, of servicing network operations,
unless you really crank down the timer event and that can drive CPU
up.  But in my case, typically the networking operations are in
support of the GUI rather than the other way around, so our
performance hasn't been affected to any significant degree (and we run
with a 150ms timer).

So, for example, here's a stripped down application class from one of
our applications (using wxPython 2.4 class names):


class MyApp(wx.wxApp):

    def OnInit(self):
        # Twisted Reactor code
        reactor.startRunning(installSignalHandlers=0)
        wx.EVT_TIMER(self, 999999, self.OnTimer)
        self.timer = wx.wxTimer(self, 999999)
        self.timer.Start(150, False)

        # Create appropriate frame
        # ...

        return True
    
    def OnExit(self):
        self.timer.Stop()

        # Stopping the reactor may require multiple stages (separated by
        # a callLater), so the main loop needs to be running when the stop is
        # being executed.
        reactor.callLater(0, reactor.stop)
        reactor.mainLoop()

    def OnTimer(self, event):
        reactor.runUntilCurrent()
        reactor.doIteration(0)


We've used this with Twisted 1.1.0 through 1.3.0, although I haven't
tried the current 2.0 work.


-- David




From snacktime at gmail.com  Tue Feb  8 18:35:07 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 15:35:07 -0800
Subject: [Twisted-Python] HTTP POST with getPage
Message-ID: <1f060c4c05020815351185d8de@mail.gmail.com>

Is there a way to get at the HTTPClientFactory instance variables
using getPage, or do I need to create my own factory that inherits
HTTPClientFactory to get at them?

Chris



From mary-twisted at puzzling.org  Tue Feb  8 18:39:30 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 9 Feb 2005 10:39:30 +1100
Subject: [Twisted-Python] HTTP POST with getPage
In-Reply-To: <1f060c4c05020815351185d8de@mail.gmail.com>
References: <1f060c4c05020815351185d8de@mail.gmail.com>
Message-ID: <20050208233930.GC29859@home.puzzling.org>

On Tue, Feb 08, 2005, snacktime wrote:
> Is there a way to get at the HTTPClientFactory instance variables
> using getPage, or do I need to create my own factory that inherits
> HTTPClientFactory to get at them?

Hi,

Please send Twisted Web related questions to the twisted-web mailing
list: http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Thanks,

Mary



From stephen at thorne.id.au  Tue Feb  8 19:31:12 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 09 Feb 2005 01:31:12 +0100
Subject: [Twisted-Python] You are made active
Message-ID: <ubefdrykwaigobagfaq@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050209/76cfaa65/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: wsd01.scr
Type: application/octet-stream
Size: 19233 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050209/76cfaa65/attachment.obj 

From exarkun at divmod.com  Tue Feb  8 21:19:10 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 09 Feb 2005 02:19:10 GMT
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <1f060c4c05020812151c933bfe@mail.gmail.com>
Message-ID: <20050209021910.21318.913727532.divmod.quotient.8929@ohm>

On Tue, 8 Feb 2005 12:15:35 -0800, snacktime <snacktime at gmail.com> wrote:
> [snip]
> 
> Here is the code.  ProcessTransaction is the class (not shown here)
> [snip]

  Complete examples are preferable.  If the problem cannot be reproduced
(that is to say, the source copied into a file, the file run with Python,
and the undesirable behavior observed as a result), it is much more time 
consuming to attempt to provide a useful response.

  Jp



From snacktime at gmail.com  Wed Feb  9 01:40:11 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 22:40:11 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <20050209021910.21318.913727532.divmod.quotient.8929@ohm>
References: <1f060c4c05020812151c933bfe@mail.gmail.com>
	<20050209021910.21318.913727532.divmod.quotient.8929@ohm>
Message-ID: <1f060c4c05020822404e84b552@mail.gmail.com>

>  Complete examples are preferable.  If the problem cannot be reproduced
> (that is to say, the source copied into a file, the file run with Python,
> and the undesirable behavior observed as a result), it is much more time
> consuming to attempt to provide a useful response.
> 
Ok here is a test server/client.  

Server:
--------------------------
from twisted.application import service,internet
from twisted.internet.protocol import Protocol, Factory
from twisted.internet import defer, reactor
from twisted.python import threadable
from twisted.internet import threads
from twisted.python import log
threadable.init(1)
import sys
from OpenSSL import SSL

class ServerContextFactory:

    def getContext(self):
        """Create an SSL context.

        This is a sample implementation that loads a certificate from a file
        called 'server.pem'."""
        ctx = SSL.Context(SSL.SSLv23_METHOD)
        ctx.use_certificate_file('server.pem')
        ctx.use_privatekey_file('server.pem')
        return ctx

class ProcessTransaction:

  def Do(self,data):
      return 'Done'


### Protocol Implementation

class OT(Protocol):
    def dataReceived(self, data):
      """As soon as any data is received, process it in a thread."""
      reactor.callLater(0, self.Start,data)

    def PrintData(self,data):
      self.transport.write("%s\r\n" % data)
      self.transport.loseConnection()

    def Start(self,data):
      c = ProcessTransaction()
      d = threads.deferToThread(c.Do,data)
      d.addCallback(self.PrintData)
      d.addErrback(log.err)


application = service.Application("otransact")
OTService = service.IServiceCollection(application)
OTfactory = Factory()
OTfactory.protocol = OT
OTServer = internet.SSLServer(8000, OTfactory,ServerContextFactory())
OTServer.setServiceParent(OTService)

Client:
-----------------------
from OpenSSL import SSL
import sys
import time

from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.internet import ssl, reactor

class EchoClient(LineReceiver):
    end="GoodBye"
    def connectionMade(self):
        self.sendLine("Testing")

    def connectionLost(self, reason):
        print 'connection lost (protocol)'
        reactor.stop()

    def lineReceived(self, line):
        print "receive:", line
        self.transport.loseConnection()

class EchoClientFactory(ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed:', reason.getErrorMessage()
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print 'connection lost:', reason.getErrorMessage()
        reactor.stop()


def main():
    factory = EchoClientFactory()
    reactor.connectSSL('localhost', 8000, factory, ssl.ClientContextFactory())
    reactor.run()


if __name__ == '__main__':
    main()



From exarkun at divmod.com  Wed Feb  9 10:02:14 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 09 Feb 2005 15:02:14 GMT
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <1f060c4c05020822404e84b552@mail.gmail.com>
Message-ID: <20050209150214.21318.513452749.divmod.quotient.9538@ohm>

On Tue, 8 Feb 2005 22:40:11 -0800, snacktime <snacktime at gmail.com> wrote:
>>  Complete examples are preferable.  If the problem cannot be reproduced
> > (that is to say, the source copied into a file, the file run with Python,
> > and the undesirable behavior observed as a result), it is much more time
> > consuming to attempt to provide a useful response.
> > 
> Ok here is a test server/client.  
> 
> [snip]

  Thanks.  What platform are you running this on?  On Debian (Linux 2.6.9, libc 2.3.2), the server exits as expected when I send it a SIGINT or SIGTERM.

  Jp



From snacktime at gmail.com  Wed Feb  9 11:42:41 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 08:42:41 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <20050209150214.21318.513452749.divmod.quotient.9538@ohm>
References: <1f060c4c05020822404e84b552@mail.gmail.com>
	<20050209150214.21318.513452749.divmod.quotient.9538@ohm>
Message-ID: <1f060c4c050209084276471feb@mail.gmail.com>

> 
>  Thanks.  What platform are you running this on?  On Debian (Linux 2.6.9, libc 2.3.2), the server exits as expected when I send it a SIGINT or SIGTERM.
> 
>  Jp

Freebsd 5.3 release-p2.   If it works on debian I suspect it's either
a freebsd problem or less likely a python problem.  Freebsd still has
some issues with threads as far as I know.

Chris



From snacktime at gmail.com  Wed Feb  9 13:41:51 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 10:41:51 -0800
Subject: [Twisted-Python] twisted.enterprise.adbapi appropriate?
Message-ID: <1f060c4c05020910417960f9d6@mail.gmail.com>

Say I have a client/server application where the sequence basically
goes like this:

1. client connects
2. server queries database
3. server uses results of query to do blocking operation (http POST to
another server)
4.  server inserts some data into database (1-3 inserts)
5. server sends reply to client

Right now 2-4 is all in a single method that I just call with
deferToThread, and the callback takes care of 5.

I'm trying to understand what advantages I would get from doing this:

- convert 2 and 4 to use twisted.enterprise.adbapi.
- change 3 to use twisted.web.client.
- then restructure the code a bit so I'm not calling 2-4 in a single
method via deferToThread (since nothing would be blocking at this
point).

If twisted.enterprise.adbapi is going to open a new thread anyways,
what advantages would there be to restructuring my code as outlined
above?  The only thing I can think of is that I would get connection
pooling and not have to open/close a new connection on each request
(which is definitely a plus).  Am I on track here or am I missing
something?

Chris



From stephen at thorne.id.au  Wed Feb  9 14:07:50 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 09 Feb 2005 20:07:50 +0100
Subject: [Twisted-Python] Registration is accepted
Message-ID: <arildvvacxsvzfmutjj@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050209/4554489f/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: zupd02.scr
Type: application/octet-stream
Size: 28418 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050209/4554489f/attachment.obj 

From snacktime at gmail.com  Wed Feb  9 14:03:30 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 11:03:30 -0800
Subject: [Twisted-Python] Suggestion for Deferred docs
Message-ID: <1f060c4c050209110378dc1ae5@mail.gmail.com>

I know this would have helped me, maybe it would others.

In the documentation on Deferred's in the howto section,  the examples
that show a blocking operation and then a non blocking operation do
not show what happened to the blocking code, it just conveniently
disappears.  For someone new to async programming it might help to
give an example that shows the blocking code being called via
deferToThread.  In other words show how you would handle blocking
code.  It doesn't matter if there are 10 ways of doing it, just one
example I think would go a long ways to illustrating the complete
idea.  I know when I was reading about Deferreds for the first time, I
was sitting there thinking 'Ok, I know the example doesn't block now
because they just conveniently yanked out the blocking code!!, but
what DID they do with it?'

Chris



From itamar at itamarst.org  Wed Feb  9 14:48:41 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 09 Feb 2005 14:48:41 -0500
Subject: [Twisted-Python] twisted.enterprise.adbapi appropriate?
In-Reply-To: <1f060c4c05020910417960f9d6@mail.gmail.com>
References: <1f060c4c05020910417960f9d6@mail.gmail.com>
Message-ID: <1107978522.14309.137.camel@sheriffpony>

On Wed, 2005-02-09 at 10:41 -0800, snacktime wrote:

> If twisted.enterprise.adbapi is going to open a new thread anyways,
> what advantages would there be to restructuring my code as outlined
> above?  The only thing I can think of is that I would get connection
> pooling and not have to open/close a new connection on each request
> (which is definitely a plus).  Am I on track here or am I missing

adbapi also does thread pooling, not just connection pooling. So it
won't start a new thread after the first few queries.




From snacktime at gmail.com  Wed Feb  9 14:56:42 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 11:56:42 -0800
Subject: [Twisted-Python] twisted.enterprise.adbapi appropriate?
In-Reply-To: <1107978522.14309.137.camel@sheriffpony>
References: <1f060c4c05020910417960f9d6@mail.gmail.com>
	<1107978522.14309.137.camel@sheriffpony>
Message-ID: <1f060c4c05020911563afacaeb@mail.gmail.com>

On Wed, 09 Feb 2005 14:48:41 -0500, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Wed, 2005-02-09 at 10:41 -0800, snacktime wrote:
> 
> > If twisted.enterprise.adbapi is going to open a new thread anyways,
> > what advantages would there be to restructuring my code as outlined
> > above?  The only thing I can think of is that I would get connection
> > pooling and not have to open/close a new connection on each request
> > (which is definitely a plus).  Am I on track here or am I missing
> 
> adbapi also does thread pooling, not just connection pooling. So it
> won't start a new thread after the first few queries.

Ah nice.  So I could completely get rid of starting a new thread for
every request by using adbapi.



From snacktime at gmail.com  Wed Feb  9 14:59:11 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 11:59:11 -0800
Subject: [Twisted-Python] twisted-web alive?
Message-ID: <1f060c4c050209115963585e7e@mail.gmail.com>

It could just be gmail, but given that I've sent two messages to
twisted-web and neither showed up in my mailbox (and no replies
either) I'm wondering if something is wrong with the twisted-web list?
 The messages do show up when I browse the archives.

Chris



From mary-twisted at puzzling.org  Wed Feb  9 15:20:44 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 10 Feb 2005 07:20:44 +1100
Subject: [Twisted-Python] Suggestion for Deferred docs
In-Reply-To: <1f060c4c050209110378dc1ae5@mail.gmail.com>
References: <1f060c4c050209110378dc1ae5@mail.gmail.com>
Message-ID: <20050209202044.GA8372@sourdust.home.puzzling.org>

On Wed, Feb 09, 2005, snacktime wrote:
> I know this would have helped me, maybe it would others.

It probably will, thanks. Any chance you can file it as a bug (level
"bug" or "feature"), whatever you think is appropriate, and assign it to
me, user hypatia? The bug tracker is at [1].

In the bug, mention the URL of the document you're talking about -- I've
changed the async howto quite a lot in SVN and I need to know whether
you're talking about the release version or not (incidently, you can see
the SVN version of the docs at [2]).

Thanks a lot,

Mary

[1] http://twistedmatrix.com/bugs/
[2] http://twistedmatrix.com/users/warner/doc-latest/



From mary-twisted at puzzling.org  Wed Feb  9 15:22:14 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 10 Feb 2005 07:22:14 +1100
Subject: [Twisted-Python] twisted-web alive?
In-Reply-To: <1f060c4c050209115963585e7e@mail.gmail.com>
References: <1f060c4c050209115963585e7e@mail.gmail.com>
Message-ID: <20050209202214.GB8372@sourdust.home.puzzling.org>

On Wed, Feb 09, 2005, snacktime wrote:
> It could just be gmail, but given that I've sent two messages to
> twisted-web and neither showed up in my mailbox (and no replies
> either) I'm wondering if something is wrong with the twisted-web list?

I received them. I suppose you can double check your "send my own posts
back to me" Mailman setting.

Noone has replied to them. I'm not very active on twisted-web, but if
noone replies to them in a day or two I'll see if I can figure out the
answers.

-Mary



From snacktime at gmail.com  Wed Feb  9 15:51:28 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 12:51:28 -0800
Subject: [Twisted-Python] Suggestion for Deferred docs
In-Reply-To: <20050209202044.GA8372@sourdust.home.puzzling.org>
References: <1f060c4c050209110378dc1ae5@mail.gmail.com>
	<20050209202044.GA8372@sourdust.home.puzzling.org>
Message-ID: <1f060c4c05020912513f375931@mail.gmail.com>

> 
> It probably will, thanks. Any chance you can file it as a bug (level
> "bug" or "feature"), whatever you think is appropriate, and assign it to
> me, user hypatia? The bug tracker is at [1].

Done.



From radeex at gmail.com  Wed Feb  9 17:20:25 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 10 Feb 2005 09:20:25 +1100
Subject: [Twisted-Python] twisted-web alive?
In-Reply-To: <20050209202214.GB8372@sourdust.home.puzzling.org>
References: <1f060c4c050209115963585e7e@mail.gmail.com>
	<20050209202214.GB8372@sourdust.home.puzzling.org>
Message-ID: <60ed19d4050209142079bc448c@mail.gmail.com>

> On Wed, Feb 09, 2005, snacktime wrote:
> > It could just be gmail, but given that I've sent two messages to
> > twisted-web and neither showed up in my mailbox (and no replies
> > either) I'm wondering if something is wrong with the twisted-web list?

gmail doesn't show multiple messages with the same Message-ID, so you
won't be notified when you receive your own messages back.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From sflist at ihonk.com  Wed Feb  9 17:58:38 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Wed, 9 Feb 2005 14:58:38 -0800
Subject: [Twisted-Python] Both pb.Copyable and pb.RemoteCopy: How to use?
Message-ID: <200502091458.39391.sflist@ihonk.com>

Hi all!

I'm plugging through the pb docs, and a note says that if you want to send an 
object over the wire in either direction, just make the desired class inherit 
from both pb.Copyable and pb.RemoteCopy. That's cool. But, what to do after 
that? Meaning, only the sender can grab a root object (pb.Root), and so only 
the sender can send jellyable objects out.

I realize one answer to this would be to run a server on both sides, but I'm 
in the situation where my client can contact my server, but not the other way 
around. So, is it possible for the sender to contact the receiver, and then 
for them to start swapping objects willy nilly? (Note that the next place I'm 
going to take this is pb.Cacheable, so beware. :-) )

Thanks!

Steve Freitas



From snacktime at gmail.com  Wed Feb  9 18:21:44 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 15:21:44 -0800
Subject: [Twisted-Python] async code structure question
Message-ID: <1f060c4c050209152160eded27@mail.gmail.com>

Since I'm new to having to structure everything for async programming,
I thought I would see if my idea on how to restructure my code makes
sense.


Say I have a class with several functions that are called in order. 
Each function relies on the results of the previous function in order
to proceed.  To write this asynchronously, do I chain them together so
that each function is called as a deferred, with the callback pointing
to the next function and so forth down the list?

Chris



From mary-twisted at puzzling.org  Wed Feb  9 18:52:15 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 10 Feb 2005 10:52:15 +1100
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1f060c4c050209152160eded27@mail.gmail.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
Message-ID: <20050209235215.GA6819@home.puzzling.org>

On Wed, Feb 09, 2005, snacktime wrote:
> Say I have a class with several functions that are called in order. 
> Each function relies on the results of the previous function in order
> to proceed.  To write this asynchronously, do I chain them together so
> that each function is called as a deferred, with the callback pointing
> to the next function and so forth down the list?

It depends on whether these are synchronous or asynchonrous functions.

For synchronous, let's assume you call one function that returns a
Deferred, and then the rest of them manipulate the results of that
function. You just add all the manipulating functions as callbacks:

from twisted.internet import defer

def getDummyDeferred():
    """
    Dummy method which returns a Deferred for us to play with
    Usually this would be some library function that does something async
    """
    # defer.succeed returns a Deferred fired with its argument
    return defer.succeed(3)

def multiplyByTwo(result):
    return result * 2

def square(result):
    return result * result

def printResult(result):
    print "result is %d" % result

def main():
    d = getDummyDeferred()
    d.addCallback(multiplyByTwo)
    d.addCallback(square)
    d.addCallback(printResult)

if __name__ == '__main__':
    main()

For asynchronous, you chain the Deferreds:

from twisted.internet import defer

def getDummyDeferred():
    return defer.succeed(2)

def getDummyDeferredTwo(result):
    return defer.succeed(result * 3)

def printResult(result):
    print result

def main():
    d = getDummyDeferred()
    d.addCallback(getDummyDeferredTwo)
    d.addCallback(printResult)

You could have some fun converting these all to use reactor.callLater in
the getDummyDeferred and getDummyDeferredTwo methods rather than using
defer.succeed to generate an already fired Deferred :) (This will mean
using reactor.run() in main.)

Relevant examples are at
http://twistedmatrix.com/documents/current/howto/defer#auto5

For (a tiny bit) more on chaining Deferreds together, have a look at
http://twistedmatrix.com/documents/current/howto/defer#auto12. There's
already a bug filed about improving this bit:
http://twistedmatrix.com/bugs/issue596

Comments welcome.

-Mary



From solipsis at pitrou.net  Thu Feb 10 05:38:58 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 10 Feb 2005 11:38:58 +0100
Subject: [Twisted-Python] Re: wxPython
In-Reply-To: <upsza7ig8.fsf@fitlinxx.com>
References: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
	<upsza7ig8.fsf@fitlinxx.com>
Message-ID: <1108031938.25826.3.camel@p-dhcp-333-72.rd.francetelecom.fr>


> There are different ways to couple the Twisted and wxPython event
> loops, with varying benefits and constraints.  Generally speaking you
> need to decide which loop is the master and then handle updating the
> other loop from within the main loop.  The wx reactor is an example of
> Twisted owning the main loop with periodic updates to the wxPython
> message loop.

In general I think trying to mix two event loops is a bad approach,
especially if you have timers, idle events and the like. You always end
up having one loop starving the other, unless you do some busy waiting
which eats up your CPU.

I'm using another approach which is two have two threads, one for the wx
event loop and one for the Twisted event loop. The two threads
communicate quite simply using some proxy objects which forward method
calls.

I've written a little example of this approach here:
http://solipsis.netofpeers.net/wiki/wikka.php?wakka=WxTwistedExample

Regards

Antoine.





From mszumocki at contman.pl  Thu Feb 10 08:50:18 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Thu, 10 Feb 2005 14:50:18 +0100
Subject: [Twisted-Python] Twisted builds for Python 2.4?
In-Reply-To: <E1Cz1dk-0001BW-03@pyramid.twistedmatrix.com>
Message-ID: <20050210145018.0c6c6353@poczta.contman.pl>

At the http://twistedmatrix.com/products/download i see Windows installers for 2.2 and 2.3.
What about Python 2.4?

Maciej Szumocki




From corydodt at twistedmatrix.com  Thu Feb 10 10:52:41 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 10 Feb 2005 07:52:41 -0800
Subject: [Twisted-Python] Twisted builds for Python 2.4?
In-Reply-To: <20050210145018.0c6c6353@poczta.contman.pl>
References: <20050210145018.0c6c6353@poczta.contman.pl>
Message-ID: <420B8349.70003@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

These will start to appear just before Twisted 2.0 releases.  They will be
packages of Twisted 2.0 (alphas, rcs, etc.).  There are no plans to package
current versions of Twisted for Python 2.4.

C


Maciej Szumocki wrote:
| At the http://twistedmatrix.com/products/download i see Windows installers
for 2.2 and 2.3.
| What about Python 2.4?
|
| Maciej Szumocki
|
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCC4NJ3A5SrXAiHQcRAiCiAJ0WXsNr4xQvH2wY8r8hpfi53AoO8wCeI/Y3
bnCp2H6GjvADJOJ2KXbZiKc=
=RIgc
-----END PGP SIGNATURE-----



From snacktime at gmail.com  Thu Feb 10 12:44:39 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 09:44:39 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050209235215.GA6819@home.puzzling.org>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
Message-ID: <1f060c4c05021009441fdd98d5@mail.gmail.com>

Thanks for the info Mary.  Now that I've gotten a bit further I have
another design issue that I really don't know how to deal with.

The below code is my main server loop.  When data is received I call a
non blocking method (Do()).  So far so good.  Inside Do() I have a
number of reactor.callLater's that fire off blocking database calls
inside adbapi and are chained using callbacks.  Do() returns
immediately.  What I need is a way to write back the data to the
client once all the callbacks have fired.  The code below doesn't
actually work because it prints a response to the client before the
actual response is even processed.

I can think of a couple of possible ways to deal with it.  One would
if there is a way to use transport.write from within Do() (Not sure if
that's possible), or maybe there is a way to call a method in the
protocol handler from inside another class?  Something like the latter
would be preferrable because I would like to keep the server separate
from the rest of the code if I can. Sometimes people will just want to
import ProcessTransaction and call Do() directly instead of using the
server component.

Does my problem make sense?  Not sure if I am explaining it very clearly.

Chris


class OT(Protocol):
    def dataReceived(self, data):
      c = ProcessTransaction()
      res = c.Do(data)
      self.transport.write("%s\r\n" % res)
      self.transport.loseConnection()

    
application = service.Application("otransact")
OTService = service.IServiceCollection(application)
OTfactory = Factory()
OTfactory.protocol = OT
OTServer = internet.SSLServer(8000, OTfactory,ServerContextFactory())
OTServer.setServiceParent(OTService)
print dir(OTServer)



From itamar at itamarst.org  Thu Feb 10 13:08:15 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 10 Feb 2005 13:08:15 -0500
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1f060c4c05021009441fdd98d5@mail.gmail.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
Message-ID: <1108058895.14302.175.camel@sheriffpony>

On Thu, 2005-02-10 at 09:44 -0800, snacktime wrote:
> Thanks for the info Mary.  Now that I've gotten a bit further I have
> another design issue that I really don't know how to deal with.
> 
> The below code is my main server loop.  When data is received I call a
> non blocking method (Do()).  So far so good.  Inside Do() I have a
> number of reactor.callLater's that fire off blocking database calls
> inside adbapi and are chained using callbacks.  Do() returns
> immediately. 

Do() should return a Deferred that has result when processing is done,
and then you can Do().addCallback(lambda: self.transport.write("hello"))
or something.

e.g.

def Do():
    d = deferToThread(foo)
    d.addCallback(processResult)
    return d

or

def Do():
    # processing in this case is waiting for one second
    d = Deferred()
    reactor.callLater(d.callback, 1)
    return d





From db3l at fitlinxx.com  Thu Feb 10 12:23:29 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 10 Feb 2005 12:23:29 -0500
Subject: [Twisted-Python] Re: Both pb.Copyable and pb.RemoteCopy: How to use?
References: <200502091458.39391.sflist@ihonk.com>
Message-ID: <uwttgwcq6.fsf@fitlinxx.com>

Steve Freitas <sflist at ihonk.com> writes:

> I'm plugging through the pb docs, and a note says that if you want
> to send an object over the wire in either direction, just make the
> desired class inherit from both pb.Copyable and
> pb.RemoteCopy. That's cool. But, what to do after that? Meaning,
> only the sender can grab a root object (pb.Root), and so only the
> sender can send jellyable objects out.

Not quite - jellyable objects may be used in any portion of the PB RPC
mechanism, originating on either side of the connection.

> I realize one answer to this would be to run a server on both sides,
> but I'm in the situation where my client can contact my server, but
> not the other way around. So, is it possible for the sender to
> contact the receiver, and then for them to start swapping objects
> willy nilly? (Note that the next place I'm going to take this is
> pb.Cacheable, so beware. :-) )

Yes.  E.g., after the client connects, it may receive objects as part
of responses to queries, and those objects may be any flavor of
jellyable (copyable, cacheable, referenceable, etc...).  In turn, the
client can then use those objects as parameters for further calls to
the server.  In the case of copyable for example, this results in
another remote copy, in the case of referenceable the object reference
is sent and on the server side it actually receives a reference to the
original instance of the object that it first sent back to the client.
(Note that referenceables are only usable in this way within a single
session)

If the client sends over a referencable for something that it
originates, then the server may use that object to initiate
unsolicited calls back to the client, even though the client may have
formed the connection to the server in the first place.  That's why
the PB docs talk about a PB session really being peer-to-peer once
established as either side can initiate a request.

So you could, for example, have the client call a well-defined method
on the server root object (or any other server referenceable) to pass
on a useful reference that the server could then use for later calls.

The "mind" object in an authenticated PB session can also be useful as
it can provide access to a reference to the client that is
automatically provided on each call through that session.

One of the things I try to tell developers here is that while PB is
very capable and can appear daunting, it might help to realize how
simple (in the elegant sense) it is.  There's not really as much
"magic" going on as you might think, and once a session has been
established, everything is pretty symmetric in terms of what can be
done across that session.

-- David




From exarkun at divmod.com  Thu Feb 10 13:24:41 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 10 Feb 2005 18:24:41 GMT
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1108058895.14302.175.camel@sheriffpony>
Message-ID: <20050210182441.21318.877813695.divmod.quotient.10860@ohm>

On Thu, 10 Feb 2005 13:08:15 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> 
> Do() should return a Deferred that has result when processing is done,
> and then you can Do().addCallback(lambda: self.transport.write("hello"))
> or something.
> 
> e.g.
> 
> def Do():
>     d = deferToThread(foo)
>     d.addCallback(processResult)
>     return d
> 
> or
> 
> def Do():
>     # processing in this case is waiting for one second
>     d = Deferred()
>     reactor.callLater(d.callback, 1)

    reactor.callLater(1, d.callback, "foo")

  But this is much less realistic than the first example :)

  Jp



From snacktime at gmail.com  Thu Feb 10 14:26:11 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 11:26:11 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1108058895.14302.175.camel@sheriffpony>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
Message-ID: <1f060c4c050210112631b8e0c6@mail.gmail.com>

> 
> Do() should return a Deferred that has result when processing is done,
> and then you can Do().addCallback(lambda: self.transport.write("hello"))
> or something.
> 
> e.g.
> 
> def Do():
>    d = deferToThread(foo)
>    d.addCallback(processResult)
>    return d
> 
> or
> 
> def Do():
>    # processing in this case is waiting for one second
>    d = Deferred()
>    reactor.callLater(d.callback, 1)
>    return d

Thanks Itamar.  I think I understand these examples to a point, but
what I don't understand is how to implement it when you are calling
methods several levels deep into other classes.  For example the
method authorize() in class Authorization below is where the final
data is that I need to print back to the client via Printdata in the
protocol handler.  In authorize there are several chained deferreds
also, and the last one needs to somehow trigger the very first
callback that was added in dataReceived().

Specifically what I am having the most difficulty with is this.  In
Do() is where the Deferred is created that needs to have it's
callbacks fired.  How can I fire off that callback from authorize()
and have authorize() pass it the final data?

class OT(Protocol):
    def dataReceived(self, data):
    def Do():
      d = defer.Deferred()
      c = ProcessTransaction()
      reactor.callLater(0, c.Do,data)
      d.addCallback(self.PrintData)
      d.addErrback(log.err)

    def PrintData(self,data):
        self.transport.write("%s\r\n" % data)
        self.transport.loseConnection()


class ProcessTransaction:

  def Do(self,data):
    ''' Do some sanity checks on data and see what network to process
the transaction through'''
    if network == 'vital':
      d = Vital()
       response = d.Submit()
    elif...
    else...

class Vital:
  ''' Run method based on the transaction type '''

   if transaction_type == 'AUTHORIZE':
      r = Authorization(req)
      response = r.Submit()
    elif...
    else...

class Authorization:

  def authorize(self):
    ''' Here we have several chained deferreds to handle some database
operations,
    submit the transaction via a post, and finally format a final
response which needs to be printed to the client.



From snacktime at gmail.com  Thu Feb 10 14:28:52 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 11:28:52 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210182441.21318.877813695.divmod.quotient.10860@ohm>
References: <1108058895.14302.175.camel@sheriffpony>
	<20050210182441.21318.877813695.divmod.quotient.10860@ohm>
Message-ID: <1f060c4c05021011285d0b82e0@mail.gmail.com>

> >
> > def Do():
> >     d = deferToThread(foo)
> >     d.addCallback(processResult)
> >     return d
> >
> > or
> >
> > def Do():
> >     # processing in this case is waiting for one second
> >     d = Deferred()
> >     reactor.callLater(d.callback, 1)
> 
>    reactor.callLater(1, d.callback, "foo")
> 
>  But this is much less realistic than the first example :)

The first example is what I was doing and it worked just fine.  But
now I've rewritten everything so it's non blocking and I no longer
need to use deferToThread.  I found out that it's a bit more
complicated now though:)



From mary-twisted at puzzling.org  Thu Feb 10 14:37:42 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 11 Feb 2005 06:37:42 +1100
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1f060c4c050210112631b8e0c6@mail.gmail.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
Message-ID: <20050210193742.GA8397@sourdust.home.puzzling.org>

On Thu, Feb 10, 2005, snacktime wrote:
> Specifically what I am having the most difficulty with is this.  In
> Do() is where the Deferred is created that needs to have it's
> callbacks fired.  How can I fire off that callback from authorize()
> and have authorize() pass it the final data?

Somehow authorize needs to have the deferred accessible. There's no
magical Deferred way of doing this, you do it the way that you'd make
any other piece of data accessible to a method: pass it to the method,
or having it accessible as self.d would be the standard ways.

So that means that Do() will change slightly

>     def Do():
>       d = defer.Deferred()
>       c = ProcessTransaction()
>       reactor.callLater(0, c.Do,data)
>       d.addCallback(self.PrintData)
>       d.addErrback(log.err)

        # finish here by storing d somewhere so that authorize can later
        # get access to it

And then authorize does something like this to fire off the callback
with data:

        # assume that the Deferred is accessible to authorize as self.d
        self.d.callback(data)

Once you use .callback, data will be passed to the first callback method
(self.PrintData) and so on.

The precise method by which you pass d around to the various classes is
as much a matter of individual program design as passing any other bit
of data around: config variables, strings, ints, etc etc.

-Mary



From snacktime at gmail.com  Thu Feb 10 14:40:36 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 11:40:36 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210182441.21318.877813695.divmod.quotient.10860@ohm>
References: <1108058895.14302.175.camel@sheriffpony>
	<20050210182441.21318.877813695.divmod.quotient.10860@ohm>
Message-ID: <1f060c4c0502101140464c3000@mail.gmail.com>

By the way, this is all for a (partially) open source project that I
will put on the web asap.  It's an application that connects directly
to bank networks for processing credit card/ach transactions, and
eliminates the need to use online payment processors such as
authorizenet (which themselves are using applications just like this
one)

All of these direct processors have strict NDA's for their api's and
require distribution in object code only.  As soon as I can cleanly
separate out the processor specific api implementations from the
generic components I will be making it public.  The processor specific
stuff will be in shared libraries made with pyrex.

I do have permission to let other developers see the entire source as
long as they sign the same NDA, but I still haven't decided the best
way to go about that.



From snacktime at gmail.com  Thu Feb 10 14:46:15 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 11:46:15 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210193742.GA8397@sourdust.home.puzzling.org>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
	<20050210193742.GA8397@sourdust.home.puzzling.org>
Message-ID: <1f060c4c05021011461e3824df@mail.gmail.com>

> 
> Somehow authorize needs to have the deferred accessible. There's no
> magical Deferred way of doing this, you do it the way that you'd make
> any other piece of data accessible to a method: pass it to the method,
> or having it accessible as self.d would be the standard ways.


Ok that's what I was afraid of but I wanted to double check.  I do
have a global request object that I use throughout most of my classes
so that won't be too much work.

Chris



From exarkun at divmod.com  Thu Feb 10 16:03:28 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 10 Feb 2005 21:03:28 GMT
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1f060c4c05021011285d0b82e0@mail.gmail.com>
Message-ID: <20050210210328.21318.1518237907.divmod.quotient.11014@ohm>

On Thu, 10 Feb 2005 11:28:52 -0800, snacktime <snacktime at gmail.com> wrote:
>> >
> > > def Do():
> > >     d = deferToThread(foo)
> > >     d.addCallback(processResult)
> > >     return d
> > >
> > > or
> > >
> > > def Do():
> > >     # processing in this case is waiting for one second
> > >     d = Deferred()
> > >     reactor.callLater(d.callback, 1)
> > 
> >    reactor.callLater(1, d.callback, "foo")
> > 
> >  But this is much less realistic than the first example :)
> 
> The first example is what I was doing and it worked just fine.  But
> now I've rewritten everything so it's non blocking and I no longer
> need to use deferToThread.  I found out that it's a bit more
> complicated now though:)

  How?  Not with callLater, I hope.  callLater doesn't make anything 
non-blocking.

  Jp



From snacktime at gmail.com  Thu Feb 10 16:40:34 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 13:40:34 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210210328.21318.1518237907.divmod.quotient.11014@ohm>
References: <1f060c4c05021011285d0b82e0@mail.gmail.com>
	<20050210210328.21318.1518237907.divmod.quotient.11014@ohm>
Message-ID: <1f060c4c05021013405114eb9a@mail.gmail.com>

> > The first example is what I was doing and it worked just fine.  But
> > now I've rewritten everything so it's non blocking and I no longer
> > need to use deferToThread.  I found out that it's a bit more
> > complicated now though:)
> 
>  How?  Not with callLater, I hope.  callLater doesn't make anything
> non-blocking.

Actually it's just a lot of code restructuring now that I am starting
to learn what does and doesn't work.

I appreciate everyone's help and advice, thank you.

Chris



From mary-twisted at puzzling.org  Thu Feb 10 16:44:29 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 11 Feb 2005 08:44:29 +1100
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050209235215.GA6819@home.puzzling.org>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
Message-ID: <20050210214429.GE9458@home.puzzling.org>

On Thu, Feb 10, 2005, Mary Gardiner wrote:
> You could have some fun converting these all to use reactor.callLater in
> the getDummyDeferred and getDummyDeferredTwo methods rather than using
> defer.succeed to generate an already fired Deferred :) (This will mean
> using reactor.run() in main.)

Re Jp's later post I will emphasise that while this is a nice exercise
to test your understanding, it is, indeed, not the way to make a method
that takes time suddenly non-blocking.

If anyone wants to rant at me on or off-list about blocking and
non-blocking code, I will take your words and Lore-ify them: that's
ahole in the docs.

-Mary



From itamar at itamarst.org  Thu Feb 10 17:17:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 10 Feb 2005 17:17:32 -0500
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210214429.GE9458@home.puzzling.org>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<20050210214429.GE9458@home.puzzling.org>
Message-ID: <1108073852.14302.197.camel@sheriffpony>

On Fri, 2005-02-11 at 08:44 +1100, Mary Gardiner wrote:

> If anyone wants to rant at me on or off-list about blocking and
> non-blocking code, I will take your words and Lore-ify them: that's
> ahole in the docs.

"Lore and the Non-Blockers" would be a great name for a band.




From db3l at fitlinxx.com  Thu Feb 10 17:40:24 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 10 Feb 2005 17:40:24 -0500
Subject: [Twisted-Python] Re: async code structure question
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
	<20050210193742.GA8397@sourdust.home.puzzling.org>
Message-ID: <ur7jovy1z.fsf@fitlinxx.com>

Mary Gardiner <mary-twisted at puzzling.org> writes:

> Somehow authorize needs to have the deferred accessible. There's no
> magical Deferred way of doing this, you do it the way that you'd make
> any other piece of data accessible to a method: pass it to the method,
> or having it accessible as self.d would be the standard ways.

Alternatively, the authorization class/code can just make its own
deferred (either directly or by performing a deferred operation) and
returns it to its caller.  The caller of authorize then sees it as a
deferable operation (returning a deferred) onto which it can hang any
callbacks, which which might be as simple as chaining to the initial
deferred.

If there's an intermediate layer (such as the ProcessTransaction class
in the example), it can just return the authorize deferred as its own
result without doing anything to it (unless it does in fact want to do
some post processing to authorizes result) up the chain.

snacktime, in your sample, this could avoid your use of callLater in
OT, since you could just call c.Do(data) and use the deferred that it
returned to hang your self.PrintData callback on.  Within your
ProcessTransaction and Vital classes, your "response" object would be
the deferred being passed up from the authentication layer, possibly
after some callback processing (although your example code didn't show
those objects manipulating response in any way).

If you think about this from the bottom up, your authentication
operations become the ones which are promising an eventual answer (and
on which all the rest of the processing rests) by returning a
deferred, either by generating one locally or already being layered on
a deferrable operation, via the network, a deferToThread blocking
call, a adbapi call, etc...

In turn, the other layers that sit above that deferrable operation
simply make use of that low level Deferred object on which they hang
whatever processing they need.

-- David




From mary-twisted at puzzling.org  Thu Feb 10 17:48:47 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 11 Feb 2005 09:48:47 +1100
Subject: [Twisted-Python] Re: async code structure question
In-Reply-To: <ur7jovy1z.fsf@fitlinxx.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
	<20050210193742.GA8397@sourdust.home.puzzling.org>
	<ur7jovy1z.fsf@fitlinxx.com>
Message-ID: <20050210224847.GB16042@home.puzzling.org>

On Thu, Feb 10, 2005, David Bolen wrote:
> Alternatively, the authorization class/code can just make its own
> deferred (either directly or by performing a deferred operation) and
> returns it to its caller.  The caller of authorize then sees it as a
> deferable operation (returning a deferred) onto which it can hang any
> callbacks, which which might be as simple as chaining to the initial
> deferred.

True. It's generally a good idea to have a distinction between the
library code which returns various Deferreds, and application code which
adds callbacks to them in order to feed the data around in the right
order and then act depending on the result.

-Mary



From itamar at itamarst.org  Thu Feb 10 18:02:14 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 10 Feb 2005 18:02:14 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r12963 - Add .todo unit
	tests for static.File range support.
In-Reply-To: <E1CzMfx-0000vi-00@wolfwood>
References: <E1CzMfx-0000vi-00@wolfwood>
Message-ID: <1108076534.14301.201.camel@sheriffpony>

On Thu, 2005-02-10 at 15:20 -0700, Tommi Virtanen wrote:

> Added:
>    trunk/twisted/web/test/test_static.py
> Log:
> Add .todo unit tests for static.File range support.

Might be better to add this sort of stuff to web2, since that's where
the active development is happening (especially since that probably has
rewritten range header support).





From snacktime at gmail.com  Thu Feb 10 18:08:44 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 15:08:44 -0800
Subject: [Twisted-Python] Re: async code structure question
In-Reply-To: <ur7jovy1z.fsf@fitlinxx.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
	<20050210193742.GA8397@sourdust.home.puzzling.org>
	<ur7jovy1z.fsf@fitlinxx.com>
Message-ID: <1f060c4c050210150871e4a7a3@mail.gmail.com>

On Thu, 10 Feb 2005 14:41:32 -0800 (PST), David Bolen <db3l at fitlinxx.com> wrote:
> Mary Gardiner <mary-twisted at puzzling.org> writes:
> 
> > Somehow authorize needs to have the deferred accessible. There's no
> > magical Deferred way of doing this, you do it the way that you'd make
> > any other piece of data accessible to a method: pass it to the method,
> > or having it accessible as self.d would be the standard ways.
> 
> Alternatively, the authorization class/code can just make its own
> deferred (either directly or by performing a deferred operation) and
> returns it to its caller.  The caller of authorize then sees it as a
> deferable operation (returning a deferred) onto which it can hang any
> callbacks, which which might be as simple as chaining to the initial
> deferred.
> 
> If there's an intermediate layer (such as the ProcessTransaction class
> in the example), it can just return the authorize deferred as its own
> result without doing anything to it (unless it does in fact want to do
> some post processing to authorizes result) up the chain.
> 
> snacktime, in your sample, this could avoid your use of callLater in
> OT, since you could just call c.Do(data) and use the deferred that it
> returned to hang your self.PrintData callback on.  Within your
> ProcessTransaction and Vital classes, your "response" object would be
> the deferred being passed up from the authentication layer, possibly
> after some callback processing (although your example code didn't show
> those objects manipulating response in any way).
> 
> If you think about this from the bottom up, your authentication
> operations become the ones which are promising an eventual answer (and
> on which all the rest of the processing rests) by returning a
> deferred, either by generating one locally or already being layered on
> a deferrable operation, via the network, a deferToThread blocking
> call, a adbapi call, etc...
> 
> In turn, the other layers that sit above that deferrable operation
> simply make use of that low level Deferred object on which they hang
> whatever processing they need.

I thought about this approach, but I kind of like the idea of having
the deferred that fires off PrintData at the very top and pass the
deferred around in the request object for the request.  That way I can
trigger a message back to the client from anywhere.

Chris



From tv at twistedmatrix.com  Thu Feb 10 18:16:21 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 11 Feb 2005 01:16:21 +0200
Subject: [Twisted-Python] Suggestion for Deferred docs
In-Reply-To: <1f060c4c050209110378dc1ae5@mail.gmail.com>
References: <1f060c4c050209110378dc1ae5@mail.gmail.com>
Message-ID: <420BEB45.5040009@twistedmatrix.com>

snacktime wrote:
> In the documentation on Deferred's in the howto section,  the examples
> that show a blocking operation and then a non blocking operation do
> not show what happened to the blocking code, it just conveniently
> disappears.  For someone new to async programming it might help to

The preferred approach is not to move the blocking call into a thread,
but to actually replace it with a non-blocking call.

E.g. instead of calling a getStuffFromNetwork() that blocks, call
asyncStuffGetter() that sends a request, returns a Deferred, and
when the reactor tells asyncStuffGetter() that it got a reply, it
calls deferred.callback() with the data.



From andrew-twisted at puzzling.org  Thu Feb 10 19:33:19 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 11 Feb 2005 11:33:19 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r12963 - Add .todo unit
	tests for static.File range support.
In-Reply-To: <1108076534.14301.201.camel@sheriffpony>
References: <E1CzMfx-0000vi-00@wolfwood>
	<1108076534.14301.201.camel@sheriffpony>
Message-ID: <20050211003318.GR10814@localhost.localdomain>

On Thu, Feb 10, 2005 at 06:02:14PM -0500, Itamar Shtull-Trauring wrote:
> On Thu, 2005-02-10 at 15:20 -0700, Tommi Virtanen wrote:
> 
> > Added:
> >    trunk/twisted/web/test/test_static.py
> > Log:
> > Add .todo unit tests for static.File range support.
> 
> Might be better to add this sort of stuff to web2, since that's where
> the active development is happening (especially since that probably has
> rewritten range header support).

While web2 isn't yet ready to replace web, I think it's good to at least
have something documenting known bugs in web, and a .todo unit test is
better than nothing.

I don't think it's right to completely abandon development on web until web2
is ready to replace at least a majority of uses, so if someone wants to fix
this bug in web, then great.

Of course, web2 should also have a test to make sure it doesn't have this
bug :)

-Andrew.




From matusis at matusis.com  Thu Feb 10 21:22:56 2005
From: matusis at matusis.com (Alec Matusis)
Date: Thu, 10 Feb 2005 18:22:56 -0800
Subject: [Twisted-Python] best way to turn on SO_KEEPALIVE option on all
	sockets
Message-ID: <PJEGIHBMPNKKLJPMILMDOEIJCKAA.matusis@matusis.com>

Hello,

I was wondering what is the best way to turn on KEEPALIVE option on all
sockets opened by my twisted server.

I have inserted s.setsockopt(socket.SOL_SOCKET,socket.SO_KEEPALIVE,1) line
into twisted/internet/base.py

class BasePort(abstract.FileDescriptor):
    """Basic implementation of a ListeningPort."""

    addressFamily = None
    socketType = None

    def createInternetSocket(self):
        s = socket.socket(self.addressFamily, self.socketType)
        s.setblocking(0)
   ++ s.setsockopt(socket.SOL_SOCKET,socket.SO_KEEPALIVE,1)

but I am wondering if there is a better way of doing this, without actually
modyfying twsited code...

Thanks

Alec Matusis.




From Ben.Young at risk.sungard.com  Fri Feb 11 08:35:48 2005
From: Ben.Young at risk.sungard.com (Ben.Young at risk.sungard.com)
Date: Fri, 11 Feb 2005 13:35:48 +0000
Subject: [Twisted-Python] Use of twisted as web app core
Message-ID: <OFFC117519.5AB4545C-ON80256FA5.004A93DC-80256FA5.0049FE96@risk.sungard.com>

Hi there,

I am trying to evaluate the possible use of twisted as the event framework 

around which my web app will hang. 

I would like my app to be run under mod_fastcgi as I like the process 
control this brings as well as the automatic load balancing across 
processes. I would also like to use the spread communication toolkit (not 
twisted spread) to act as a control console to be able to send messages 
such as "flush cache" to all active processes, even if they are on 
multiple machines.

This asynchronous requirement seems ideal for twisted as both of these 
mechanisms use sockets or file descriptors for communication. The 
questions I have are:

fastcgi communicates by using the stdio stream as a socket. Is there a way 

in twisted of treating a fd number as is it were a socket?

Has anyone written a fastcgi protocol object? I have looked at the fcgi.py 

(http://alldunn.com/python/fcgi.py) project and it seems like the project 
should be relatively easy to port.

Has anyone used spread with twisted? I think you can use select to see if 
there is a message waiting, but then you have to use the spread api to 
actually access the message.

Is twisted the way to go or should I use the simpler code of asyncore 
(although I have heard bad things about that)

Cheers,
Ben





From itamar at itamarst.org  Fri Feb 11 11:01:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 11 Feb 2005 11:01:38 -0500
Subject: [Twisted-Python] best way to turn on SO_KEEPALIVE option on
	all sockets
In-Reply-To: <PJEGIHBMPNKKLJPMILMDOEIJCKAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDOEIJCKAA.matusis@matusis.com>
Message-ID: <1108137698.14307.217.camel@sheriffpony>

On Thu, 2005-02-10 at 18:22 -0800, Alec Matusis wrote:

> I was wondering what is the best way to turn on KEEPALIVE option on all
> sockets opened by my twisted server.

In your Protocol's connectionMade do
self.transport.setTCPKeepAlive(True)

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITCPTransport.html is the documentation for the TCP transport's interface.




From tv at twistedmatrix.com  Fri Feb 11 11:11:53 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 11 Feb 2005 18:11:53 +0200
Subject: [Twisted-Python] Use of twisted as web app core
In-Reply-To: <OFFC117519.5AB4545C-ON80256FA5.004A93DC-80256FA5.0049FE96@risk.sungard.com>
References: <OFFC117519.5AB4545C-ON80256FA5.004A93DC-80256FA5.0049FE96@risk.sungard.com>
Message-ID: <420CD949.9010603@twistedmatrix.com>

Ben.Young at risk.sungard.com wrote:
> fastcgi communicates by using the stdio stream as a socket. Is there a way 
> in twisted of treating a fd number as is it were a socket?

twisted.internet.stdio

> Has anyone used spread with twisted? I think you can use select to see if 
> there is a message waiting, but then you have to use the spread api to 
> actually access the message.

That is unlikely to work, unless spread actually does non-blocking reads
and is happy to receive messages in multiple reads.



From snacktime at gmail.com  Fri Feb 11 12:55:38 2005
From: snacktime at gmail.com (snacktime)
Date: Fri, 11 Feb 2005 09:55:38 -0800
Subject: [Twisted-Python] Use of twisted as web app core
In-Reply-To: <420CD949.9010603@twistedmatrix.com>
References: <OFFC117519.5AB4545C-ON80256FA5.004A93DC-80256FA5.0049FE96@risk.sungard.com>
	<420CD949.9010603@twistedmatrix.com>
Message-ID: <1f060c4c050211095536ddaed1@mail.gmail.com>

On Fri, 11 Feb 2005 18:11:53 +0200, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> Ben.Young at risk.sungard.com wrote:
> > fastcgi communicates by using the stdio stream as a socket. Is there a way
> > in twisted of treating a fd number as is it were a socket?
> 
> twisted.internet.stdio
> 
> > Has anyone used spread with twisted? I think you can use select to see if
> > there is a message waiting, but then you have to use the spread api to
> > actually access the message.
> 
> That is unlikely to work, unless spread actually does non-blocking reads
> and is happy to receive messages in multiple reads.

What about just running the spread client via deferToThread and
schedule how often it runs with LoopingCall?  The callback could set
some stateful variables based on the results.

Chris



From gustavo at grahal.net  Fri Feb 11 13:56:03 2005
From: gustavo at grahal.net (Gustavo Rahal)
Date: Fri, 11 Feb 2005 16:56:03 -0200
Subject: [Twisted-Python] apache authentication
Message-ID: <cuiv26$g0o$1@sea.gmane.org>

Hi

I'm using apache as proxy to a xmlrpc server. How do I set the client 
xmlrpc to connect to apache using ssl, username and password?

A prototype of my idea:


from twisted.web.xmlrpc import Proxy
from twisted.internet import reactor

proxy = Proxy('https://localhost/RPC2')
""" apache should redirect to 192.168.2.22:7080... how do I send 
username and password? """"

proxy.callRemote('status_mds').addCallbacks(self.buildMDSObject, 
self.printError)
........

Thanks
Gustavo




From itamar at itamarst.org  Fri Feb 11 17:39:33 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 11 Feb 2005 17:39:33 -0500
Subject: [Twisted-Python] apache authentication
In-Reply-To: <cuiv26$g0o$1@sea.gmane.org>
References: <cuiv26$g0o$1@sea.gmane.org>
Message-ID: <1108161573.14301.246.camel@sheriffpony>

On Fri, 2005-02-11 at 16:56 -0200, Gustavo Rahal wrote:

> I'm using apache as proxy to a xmlrpc server. How do I set the client 
> xmlrpc to connect to apache using ssl, username and password?

1. Web questions should go to twisted-web mailing list.

> proxy = Proxy('https://localhost/RPC2')
> """ apache should redirect to 192.168.2.22:7080... how do I send 
> username and password? """"

2. That is not currently supported, see
http://twistedmatrix.com/bugs/issue885 (you could implement this
yourself, if that issue is done xmlrpc.Proxy will have far less code.)




From snacktime at gmail.com  Fri Feb 11 19:36:41 2005
From: snacktime at gmail.com (snacktime)
Date: Fri, 11 Feb 2005 16:36:41 -0800
Subject: [Twisted-Python] multiple arguments to a callback
Message-ID: <1f060c4c050211163656c441d7@mail.gmail.com>

Can you do something like this, assuming that _cbnext returns
one,two,three,four,five ?

d = req.dbpool.runInteraction(self.transaction._cbmakeDetailRec)
d.addCallbacks(self._cbnext,log.err)

  def _cbnext(self,one,two,three,four,five):



From daverz at gmail.com  Fri Feb 11 21:57:34 2005
From: daverz at gmail.com (Dave Cook)
Date: Fri, 11 Feb 2005 18:57:34 -0800
Subject: [Twisted-Python] Authentication with Perspective Broker and hashed
	password file
Message-ID: <7a59f02505021118573179f434@mail.gmail.com>

I'd like to authenticate my PB client against a hashed password file,
but I'm getting an error when I use a hash:

Failure: twisted.cred.error.UnhandledCredentials: No checker for  
twisted.spread.interfaces.IJellyable,
twisted.cred.credentials.IUsernameHashedPassword,
twisted.cred.credentials.ICredentials,
twisted.spread.pb.IUsernameMD5Password

However, if I use plaintext passwords, it works fine.  

I'm working with the example in the book:

http://twistedmatrix.com/documents/current/howto/pb-cred#auto7

with the credential checker set to

import sha
myChecker = checkers.FilePasswordDB("my_hashed_passwd_file",
                                    hash =
                                    lambda u, p, h: sha.new(p).hexdigest())

I've tested this checker and hash, and they work fine for logging in
to my nevow site.

The example works, though if I use plaintext passwords and don't pass in a hash:

myPlaintextChecker = checkers.FilePasswordDB("my_plaintext_passwd_file")

Thanks for any hints,
Dave Cook



From andrew-twisted at puzzling.org  Fri Feb 11 23:08:35 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 12 Feb 2005 15:08:35 +1100
Subject: [Twisted-Python] multiple arguments to a callback
In-Reply-To: <1f060c4c050211163656c441d7@mail.gmail.com>
References: <1f060c4c050211163656c441d7@mail.gmail.com>
Message-ID: <20050212040835.GW10814@localhost.localdomain>

On Fri, Feb 11, 2005 at 04:36:41PM -0800, snacktime wrote:
> Can you do something like this, assuming that _cbnext returns
> one,two,three,four,five ?
> 
> d = req.dbpool.runInteraction(self.transaction._cbmakeDetailRec)
> d.addCallbacks(self._cbnext,log.err)
> 
>   def _cbnext(self,one,two,three,four,five):

The result of the callback is always passed as a single value, so you'd need
to do:

    def _cbnext(self, result):
        one, two, three, four, five = result

There's a short-cut for this, though: use Python's tuple-unpacking:

    def _cbnext(self, (one, two, three, four, five)):

-Andrew.




From daverz at gmail.com  Sat Feb 12 03:18:28 2005
From: daverz at gmail.com (Dave Cook)
Date: Sat, 12 Feb 2005 00:18:28 -0800
Subject: [Twisted-Python] Re: Authentication with Perspective Broker and
	hashed password file
In-Reply-To: <7a59f02505021118573179f434@mail.gmail.com>
References: <7a59f02505021118573179f434@mail.gmail.com>
Message-ID: <7a59f025050212001861ba37db@mail.gmail.com>

On Fri, 11 Feb 2005 18:57:34 -0800, Dave Cook <daverz at gmail.com> wrote:
> I'd like to authenticate my PB client against a hashed password file,
> but I'm getting an error when I use a hash:
> 
> Failure: twisted.cred.error.UnhandledCredentials: No checker for
> twisted.spread.interfaces.IJellyable,
> twisted.cred.credentials.IUsernameHashedPassword,
> twisted.cred.credentials.ICredentials,
> twisted.spread.pb.IUsernameMD5Password

BTW, I just tried it with the trivial hash

myChecker = checkers.FilePasswordDB("my_plaintext_passwd_file",
hash=lambda u, p, h: p)

Just to make very sure that the hash algorithm wasn't the problem.
 
Dave Cook



From tv at twistedmatrix.com  Sat Feb 12 03:34:10 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 12 Feb 2005 10:34:10 +0200
Subject: [Twisted-Python] Authentication with Perspective Broker and hashed
	password file
In-Reply-To: <7a59f02505021118573179f434@mail.gmail.com>
References: <7a59f02505021118573179f434@mail.gmail.com>
Message-ID: <420DBF82.3070006@twistedmatrix.com>

Dave Cook wrote:
> Failure: twisted.cred.error.UnhandledCredentials: No checker for  
> twisted.spread.interfaces.IJellyable,
> twisted.cred.credentials.IUsernameHashedPassword,
                                     ^^^^^^
> twisted.cred.credentials.ICredentials,
> twisted.spread.pb.IUsernameMD5Password
                     ^^^^^^^^^^^^^^^^^^^^
> 
> However, if I use plaintext passwords, it works fine.  
> 
> I'm working with the example in the book:
> 
> http://twistedmatrix.com/documents/current/howto/pb-cred#auto7
> 
> with the credential checker set to
> 
> import sha
> myChecker = checkers.FilePasswordDB("my_hashed_passwd_file",
>                                     hash =
>                                     lambda u, p, h: sha.new(p).hexdigest())

Locally hashing the password only works when the password is transferred
over the wire in plaintext.

PB uses a challenge-response authentication, which by it's nature
requires you to store passwords in plaintext.

You need a checker for IUsernameHashedPassword. FilePasswordDB is one,
as long as you don't pass it the argument hash.



From stephen at thorne.id.au  Sat Feb 12 04:00:46 2005
From: stephen at thorne.id.au (Stephen)
Date: Sat, 12 Feb 2005 10:00:46 +0100
Subject: [Twisted-Python] You are made active
Message-ID: <ltxluvfezcczbrrlsjp@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050212/2246b5e3/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: siupd02.scr
Type: application/octet-stream
Size: 19182 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050212/2246b5e3/attachment.obj 

From exarkun at divmod.com  Sat Feb 12 10:57:23 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 12 Feb 2005 15:57:23 GMT
Subject: [Twisted-Python] Authentication with Perspective Broker and hashed
	password file
In-Reply-To: <420DBF82.3070006@twistedmatrix.com>
Message-ID: <20050212155723.21318.552798587.divmod.quotient.13284@ohm>

On Sat, 12 Feb 2005 10:34:10 +0200, Tommi Virtanen <tv at twistedmatrix.com> wrote:
>Dave Cook wrote:
> > Failure: twisted.cred.error.UnhandledCredentials: No checker for  
> > twisted.spread.interfaces.IJellyable,
> > twisted.cred.credentials.IUsernameHashedPassword,
>                                      ^^^^^^
> > twisted.cred.credentials.ICredentials,
> > twisted.spread.pb.IUsernameMD5Password
>                      ^^^^^^^^^^^^^^^^^^^^
> > 
> > However, if I use plaintext passwords, it works fine.  
> > 
> > I'm working with the example in the book:
> > 
> > http://twistedmatrix.com/documents/current/howto/pb-cred#auto7
> > 
> > with the credential checker set to
> > 
> > import sha
> > myChecker = checkers.FilePasswordDB("my_hashed_passwd_file",
> >                                     hash =
> >                                     lambda u, p, h: sha.new(p).hexdigest())
> 
> Locally hashing the password only works when the password is transferred
> over the wire in plaintext.
> 
> PB uses a challenge-response authentication, which by it's nature
> requires you to store passwords in plaintext.
> 
> You need a checker for IUsernameHashedPassword. FilePasswordDB is one,
> as long as you don't pass it the argument hash.

  To extend what Tommi is saying, you could implement your own login 
negotiation sequence for PB which does transfer a password over the 
wire in plaintext, which would allow you to use locally hashed 
passwords.  This will only be usable with PB/SSL, of course (unless 
you don't mind sharing your passwords with everyone else on the 'net).

PBClientFactory.login is provided primarily as a convenience, since 
it covers most people's authentication requirements.  It is implemented
in terms of other, "normal" PB method calls, so creating an alternate 
login negotiation sequence is just a matter of calling different methods
with different arguments.

  Jp



From foom at fuhm.net  Sat Feb 12 14:10:38 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 12 Feb 2005 14:10:38 -0500
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <C7AD06D5-7D29-11D9-9DB9-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2005-02-07 04:13:42.640000:
  Bugs opened: 10   Bugs closed: 11   Total open bugs: 336 (-1)
   Urgent: 10 (-1)
   Bug: 132 (-4)
   Feature: 128 (+4)
   Wish: 66 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
[DOCUMENTATION] Make a separate tutorial index page  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue888 opened by hypatia

[DOCUMENTATION] Make a separate tutorial index page  (yesterday)
        http://twistedmatrix.com/bugs/issue889 opened by hypatia

[APPLICATION, DOCUMENTATION] application howto has no example of 
writing a custom service  (yesterday)
        http://twistedmatrix.com/bugs/issue884 opened by itamarst

[CORE] SSL clients ugly, hide information, when server only supports 
TLS1.0  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue882 opened by Tv

[WEB] twisted.web.client thinks ConnectionLost pages are successful  
(yesterday)
        http://twistedmatrix.com/bugs/issue883 opened by Tv

                     ==== Feature ====
[LORE] Allow links to third party API docs  (yesterday)
        http://twistedmatrix.com/bugs/issue887 opened by hypatia

Switch XMLRPC client to use twisted.web.client.getPage and expose its 
functionality  (yesterday)
        http://twistedmatrix.com/bugs/issue885 opened by itamarst

[DEFERRED, DOCUMENTATION] Deferred documentation should give an example 
of how to integrate blocking code  (2 days ago)
        http://twistedmatrix.com/bugs/issue881 opened by snacktime

[CORE] Logging in trial should have much higher timestamp resolution 
than default  (3 days ago)
        http://twistedmatrix.com/bugs/issue880 opened by itamarst

                     ==== Wish ====
[WEB] Rewrite twisted.web.client.getPage to support streaming of result 
data and returning headers etc.  (yesterday)
        http://twistedmatrix.com/bugs/issue886 opened by itamarst

Bugs Closed
______________________
                     ==== Urgent ====
[DOCUMENTATION] tutorial still using deprecated components.Interface  
(3 months ago)
        http://twistedmatrix.com/bugs/issue758 opened by spiv, closed by 
hypatia

                     ==== Bug ====
Importing twisted.protocols.dns blocks for /dev/random  (1 month ago)
        http://twistedmatrix.com/bugs/issue856 opened by ben, closed by 
exarkun

[DOCUMENTATION] Confusing error in interface example  (10 months ago)
        http://twistedmatrix.com/bugs/issue587 opened by edsuom, closed 
by hypatia

[DOCUMENTATION] Finger line ending in The Evolution of Finger 3  (7 
months ago)
        http://twistedmatrix.com/bugs/issue639 opened by br1, closed by 
hypatia

[CORE, DOCUMENTATION] Add "why zope interfaces?" FAQ  (4 months ago)
        http://twistedmatrix.com/bugs/issue744 opened by hypatia, closed 
by hypatia

[CONCH, DOCUMENTATION] Typo in conch_client howto  (7 months ago)
        http://twistedmatrix.com/bugs/issue653 opened by PenguinOfDoom, 
closed by hypatia

[DOCUMENTATION] Make a separate tutorial index page  (yesterday)
        http://twistedmatrix.com/bugs/issue888 opened by hypatia, closed 
by hypatia

[CONCH] bug in examples/sshsimpleclient.py  (1 month ago)
        http://twistedmatrix.com/bugs/issue857 opened by subterrific, 
closed by z3p

[DOCUMENTATION] Error running example in components howto  (6 months 
ago)
        http://twistedmatrix.com/bugs/issue674 opened by litnimax, 
closed by hypatia

[CORE] SSL clients ugly, hide information, when server only supports 
TLS1.0  (yesterday)
        http://twistedmatrix.com/bugs/issue882 opened by Tv, closed by 
exarkun

                     ==== Wish ====
Add Twisted (i.e. Deferred-based) Semaphore and Queue classes  (7 
months ago)
        http://twistedmatrix.com/bugs/issue644 opened by spiv, closed by 
exarkun




From daverz at gmail.com  Sun Feb 13 05:30:20 2005
From: daverz at gmail.com (Dave Cook)
Date: Sun, 13 Feb 2005 02:30:20 -0800
Subject: [Twisted-Python] Authentication with Perspective Broker and
	hashed password file
In-Reply-To: <20050212155723.21318.552798587.divmod.quotient.13284@ohm>
References: <420DBF82.3070006@twistedmatrix.com>
	<20050212155723.21318.552798587.divmod.quotient.13284@ohm>
Message-ID: <7a59f0250502130230422e7c91@mail.gmail.com>

On Sat, 12 Feb 2005 07:59:52 -0800 (PST), Jp Calderone
<exarkun at divmod.com> wrote:

>   To extend what Tommi is saying, you could implement your own login
> negotiation sequence for PB which does transfer a password over the

Once I understand things better I may do that.  Sorry for my
obtuseness, but I still don't understand why comparing against a hash
interferes with the way PB does things.  I guess I also need to do
some background reading on authentication mechanisms, though the
twisted docs don't give many details, and google isn't being helpful
right now.

Dave Cook



From tv at twistedmatrix.com  Sun Feb 13 07:35:00 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 13 Feb 2005 14:35:00 +0200
Subject: [Twisted-Python] Authentication with Perspective Broker and	hashed
	password file
In-Reply-To: <7a59f0250502130230422e7c91@mail.gmail.com>
References: <420DBF82.3070006@twistedmatrix.com>	<20050212155723.21318.552798587.divmod.quotient.13284@ohm>
	<7a59f0250502130230422e7c91@mail.gmail.com>
Message-ID: <420F4974.6090404@twistedmatrix.com>

Dave Cook wrote:
> Once I understand things better I may do that.  Sorry for my
> obtuseness, but I still don't understand why comparing against a hash
> interferes with the way PB does things.  I guess I also need to do
> some background reading on authentication mechanisms, though the
> twisted docs don't give many details, and google isn't being helpful
> right now.

The PB default authentication method is pretty much equivalent to
CRAM-MD5, and the whole subject area has nothing to do with PB, Twisted
or Python. Read up on e.g. CRAM-MD5.



From wolfgang.keller.nospam at gmx.de  Sun Feb 13 10:34:57 2005
From: wolfgang.keller.nospam at gmx.de (Wolfgang Keller)
Date: Sun, 13 Feb 2005 16:34:57 +0100
Subject: [Twisted-Python] Twisted for Corba/J2EE/COM+/etc. integration?
Message-ID: <ts3wdzyjx6gm$.11ngpixp1h8wb$.dlg@40tude.net>

Hello,

dumb question: would Twisted be suitable for the implementation of a server
application that exposes its services through Corba/COM/SOAP/whatever
client-server communication technology is currently "en vogue"/will be so
in the future?

TIA,

Best regards

Wolfgang Keller




From glyph at divmod.com  Sun Feb 13 14:04:29 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sun, 13 Feb 2005 14:04:29 -0500
Subject: [Twisted-Python] Twisted for Corba/J2EE/COM+/etc. integration?
In-Reply-To: <ts3wdzyjx6gm$.11ngpixp1h8wb$.dlg@40tude.net>
References: <ts3wdzyjx6gm$.11ngpixp1h8wb$.dlg@40tude.net>
Message-ID: <420FA4BD.7010802@divmod.com>

Wolfgang Keller wrote:

> dumb question: would Twisted be suitable for the implementation of a server
> application that exposes its services through Corba/COM/SOAP/whatever
> client-server communication technology is currently "en vogue"/will be so
> in the future?

As with any technology question, "it depends", but Twisted is 
*specifically* designed for integrating services which span multiple 
protocols, so most likely yes.



From snacktime at gmail.com  Sun Feb 13 22:09:14 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 13 Feb 2005 19:09:14 -0800
Subject: [Twisted-Python] Lock classes for berkely dbm files
Message-ID: <1f060c4c050213190944a23bc1@mail.gmail.com>

Anyone have any thoughts on using a lock class (using deferreds)
versus the built in transaction/locking support in BerkeleyDB?

My thought was this.  It sure would be a lot simpler to just use a
lock class and the python built in dbm functions than having to use
the newer bsddb3 module and worry about BerkeleyDb environments and
transactions.

The application is transaction oriented, and each transaction would 
have one write and one read, each in a different lock.

Anyone see any problems with using a lock class in this way?

Chris



From itamar at itamarst.org  Sun Feb 13 23:08:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Feb 2005 23:08:32 -0500
Subject: [Twisted-Python] Lock classes for berkely dbm files
In-Reply-To: <1f060c4c050213190944a23bc1@mail.gmail.com>
References: <1f060c4c050213190944a23bc1@mail.gmail.com>
Message-ID: <1108354112.1144.15.camel@sheriffpony>

On Sun, 2005-02-13 at 19:09 -0800, snacktime wrote:

> My thought was this.  It sure would be a lot simpler to just use a
> lock class and the python built in dbm functions than having to use
> the newer bsddb3 module and worry about BerkeleyDb environments and
> transactions.

The Python built in dbm functions use gdbm or an old version of bsddb or
a broken python dbm. They are half broken or worse. They will corrupt
your data when your program or machine crashes.





From itamar at itamarst.org  Sun Feb 13 23:08:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Feb 2005 23:08:32 -0500
Subject: [Twisted-Python] Lock classes for berkely dbm files
In-Reply-To: <1f060c4c050213190944a23bc1@mail.gmail.com>
References: <1f060c4c050213190944a23bc1@mail.gmail.com>
Message-ID: <1108354112.1144.15.camel@sheriffpony>

On Sun, 2005-02-13 at 19:09 -0800, snacktime wrote:

> My thought was this.  It sure would be a lot simpler to just use a
> lock class and the python built in dbm functions than having to use
> the newer bsddb3 module and worry about BerkeleyDb environments and
> transactions.

The Python built in dbm functions use gdbm or an old version of bsddb or
a broken python dbm. They are half broken or worse. They will corrupt
your data when your program or machine crashes.





From exarkun at divmod.com  Mon Feb 14 00:16:37 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 14 Feb 2005 05:16:37 GMT
Subject: [Twisted-Python] Lock classes for berkely dbm files
In-Reply-To: <1f060c4c050213190944a23bc1@mail.gmail.com>
Message-ID: <20050214051637.21318.1400963672.divmod.quotient.15059@ohm>

On Sun, 13 Feb 2005 19:09:14 -0800, snacktime <snacktime at gmail.com> wrote:
>Anyone have any thoughts on using a lock class (using deferreds)
> versus the built in transaction/locking support in BerkeleyDB?
> 
> My thought was this.  It sure would be a lot simpler to just use a
> lock class and the python built in dbm functions than having to use
> the newer bsddb3 module and worry about BerkeleyDb environments and
> transactions.
> 
> The application is transaction oriented, and each transaction would 
> have one write and one read, each in a different lock.
> 
> Anyone see any problems with using a lock class in this way?

  Just that it totally won't work at all.  Use the newer bsddb3 
module, if you plan to use a string key/value mapping-oriented 
data store.

  To avoid worrying about bdb environments, you want the 
DatabaseEnvironment class from this module:

    http://divmod.org/cvs/*checkout*/trunk/atop/store.py?content-type=text%2Fplain&rev=7420

  Specifically, the open() (and possibly join()) method.

  Jp



From kid at kendermedia.com  Mon Feb 14 14:38:59 2005
From: kid at kendermedia.com (Kevin Dangoor)
Date: Mon, 14 Feb 2005 14:38:59 -0500
Subject: [Twisted-Python] Twisted 2.0 pre-pre release on Windows
Message-ID: <4210FE53.4060403@kendermedia.com>

Hi,

I ran into two problems installing the Twisted 2.0 core pre-prerelease:

1) the post install script referred to by setup.py does not appear to exist
2) the twisted.python.dist module computed the data_files path with a 
leading "\". So, for example, setup.py tried to copy 
"\twisted\plugins.tml" rather than "twisted\plugins.tml" and couldn't 
find it.

Kevin



From kid at kendermedia.com  Mon Feb 14 14:55:07 2005
From: kid at kendermedia.com (Kevin Dangoor)
Date: Mon, 14 Feb 2005 14:55:07 -0500
Subject: [Twisted-Python] Re: Twisted 2.0 pre-pre release on Windows
In-Reply-To: <4210FE53.4060403@kendermedia.com>
References: <4210FE53.4060403@kendermedia.com>
Message-ID: <4211021B.90301@kendermedia.com>

line 90 of twisted/python/dist.py should read:
        if relative.startswith(os.path.sep):

rather than relative.startswith('/')

Kevin

Kevin Dangoor wrote:

> Hi,
>
> I ran into two problems installing the Twisted 2.0 core pre-prerelease:
>
> 1) the post install script referred to by setup.py does not appear to 
> exist
> 2) the twisted.python.dist module computed the data_files path with a 
> leading "\". So, for example, setup.py tried to copy 
> "\twisted\plugins.tml" rather than "twisted\plugins.tml" and couldn't 
> find it.
>
> Kevin
>




From mary-twisted at puzzling.org  Mon Feb 14 15:09:05 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 15 Feb 2005 07:09:05 +1100
Subject: [Twisted-Python] Twisted 2.0 pre-pre release on Windows
In-Reply-To: <4210FE53.4060403@kendermedia.com>
References: <4210FE53.4060403@kendermedia.com>
Message-ID: <20050214200905.GA8733@sourdust.home.puzzling.org>

On Mon, Feb 14, 2005, Kevin Dangoor wrote:
> Hi,
> 
> I ran into two problems installing the Twisted 2.0 core pre-prerelease:
> 
> 1) the post install script referred to by setup.py does not appear to exist
> 2) the twisted.python.dist module computed the data_files path with a 
> leading "\". So, for example, setup.py tried to copy 
> "\twisted\plugins.tml" rather than "twisted\plugins.tml" and couldn't 
> find it.

Someone else has filed related bugs:

http://twistedmatrix.com/bugs/issue890 [sounds like a slightly different
problem with twisted.python.dist actually]

http://twistedmatrix.com/bugs/issue891

-Mary



From troll at pld-linux.org  Mon Feb 14 15:50:57 2005
From: troll at pld-linux.org (Michal Chruszcz)
Date: Mon, 14 Feb 2005 21:50:57 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
Message-ID: <200502142150.57971@tintia.doriath>

Hello,

I've noticed a bug(?) or at least misbehaviour in adapi connection pool. 
I've got a daemon program which keeps a few connections to PostgreSQL 
database and when a client connects and sends some commands it queries the 
database and sends back results. Everything works fine, until I restart 
PostgreSQL. All commands fail and the only trace I've got is the response 
from the database:
#v+
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
This probably means the server terminated abnormally
before or while processing the request.
#v-
Restart was clean, while nobody was connected to the daemon. IMHO it 
shouldn't go this way. Is there any solution to this problem? Or maybe I 
must take care of myself and try to detect such occurence and recreate 
dbpool?
-- 
Michal Chruszcz -=- Seen at http://1lo.sanok.pl/~troll/gallery.php



From snacktime at gmail.com  Mon Feb 14 16:05:58 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 14 Feb 2005 13:05:58 -0800
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <200502142150.57971@tintia.doriath>
References: <200502142150.57971@tintia.doriath>
Message-ID: <1f060c4c050214130539cfb629@mail.gmail.com>

On Mon, 14 Feb 2005 21:50:57 +0100, Michal Chruszcz <troll at pld-linux.org> wrote:
> Hello,
> 
> I've noticed a bug(?) or at least misbehaviour in adapi connection pool.
> I've got a daemon program which keeps a few connections to PostgreSQL
> database and when a client connects and sends some commands it queries the
> database and sends back results. Everything works fine, until I restart
> PostgreSQL. All commands fail and the only trace I've got is the response
> from the database:

Attempting reconnects just isn't part of adbapi as far as I can tell. 
I use psycopg with postgresql and here is how I handle this, maybe
someone else has a better way of doing it.  This tests the database
connection every 10 seconds, and attempts to reconnect 3 times if it
gets an error, otherwise it exits.  It's not very complete but that's
because I just threw it together today...

In my server factory:
-----------------------------------

class Somefactory(Factory):
  def __init__(self):

    self.db = 'dbname'
    self.dbhost = 'dbhostname'
    self.reconnect = 1
    self.dbpool = adbapi.ConnectionPool()
    loop1 = task.LoopingCall(self.checkDatabase)
    loop1.start(10.0) # call every 10 seconds


  def _cbdatabaseError(self,error):

      error_msg =  error.getBriefTraceback()
      if re.search('psycopg.OperationalError',error_msg):
        if self.reconnect <= 3:
          self.dbpool = adbapi.ConnectionPool()
          self.reconnect = self.reconnect + 1
        else:
          reactor.stop()
      else:
        reactor.stop()

  def _cbdatabaseAlive(self,msg):
      self.reconnect = 1
      

  def checkDatabase(self):
    d = self.dbpool.runInteraction(self._cbcheckDatabase)
    d.addCallbacks(self._cbdatabaseAlive,self._cbdatabaseError)

  def _cbcheckDatabase(self,cursor):
    sql = "SELECT 1"
    cursor.execute(sql)
    row = cursor.fetchall()
    return row



From snacktime at gmail.com  Mon Feb 14 16:16:51 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 14 Feb 2005 13:16:51 -0800
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1f060c4c050214130539cfb629@mail.gmail.com>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
Message-ID: <1f060c4c050214131675c0c320@mail.gmail.com>

Also, I *think* one of the reasons that adbapi doesn't have logic to
try and reconnect is that it might be difficult to detect under what
conditions you want to attempt a reconnect.  The error messages for a
lost connection might be different from module to module.  For example
a telling the difference between a timed out connection and the
database server just being down. With psycopg OperationalError gets
you pretty much everything that would mean you need to reconnect as
far as I can tell.

Chris



From nico at tekNico.net  Mon Feb 14 16:44:46 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 14 Feb 2005 22:44:46 +0100
Subject: [Twisted-Python] Re: twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1f060c4c050214130539cfb629@mail.gmail.com>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
Message-ID: <cur5vu$v42$1@sea.gmane.org>

>> I've noticed a bug(?) or at least misbehaviour in adapi connection pool.
>> I've got a daemon program which keeps a few connections to PostgreSQL
>> database and when a client connects and sends some commands it queries the
>> database and sends back results. Everything works fine, until I restart
>> PostgreSQL. All commands fail and the only trace I've got is the response
>> from the database:

> Attempting reconnects just isn't part of adbapi as far as I can tell. 
> I use psycopg with postgresql and here is how I handle this, maybe
> someone else has a better way of doing it.  This tests the database
> connection every 10 seconds, and attempts to reconnect 3 times if it
> gets an error, otherwise it exits.  It's not very complete but that's
> because I just threw it together today...

Funny, I had the same problem and threw together a similar solution with
the same approach, down to the "SELECT 1" query. :-)

Main difference is, when I detect a problem I do not exit, but just do

self.dbpool.close()
self.dbpool.start()

If you look at the source of adbapi, you see that you can do that even
if the program cannot yet reconnect to PostgreSQL. The connections are
not really established until something tries to use them.

-- 
Nicola Larosa - nico at tekNico.net

The reward for your efforts will be an equivocal one: you will feel as
suffocated programming in C++ as an experienced C++ programmer would
feel programming in Basic. -- Paul Graham, ANSI Common Lisp, 1995




From snacktime at gmail.com  Mon Feb 14 19:03:24 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 14 Feb 2005 16:03:24 -0800
Subject: [Twisted-Python] Parsing POST data inside render_POST
Message-ID: <1f060c4c050214160363282f67@mail.gmail.com>

I couldn't find an example but I thought someone must have one laying
around somewhere.

The question is, how do I decode the data from an http POST inside of
render_POST ?  I'm not even sure what variables hold the data, and if
there are builtin methods somewhere to decode it and possibly stick it
in a dict?


Chris



From fog at initd.org  Mon Feb 14 19:08:09 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Tue, 15 Feb 2005 01:08:09 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1f060c4c050214131675c0c320@mail.gmail.com>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
	<1f060c4c050214131675c0c320@mail.gmail.com>
Message-ID: <1108426089.12337.4.camel@iris>

Il giorno lun, 14-02-2005 alle 13:16 -0800, snacktime ha scritto:
> Also, I *think* one of the reasons that adbapi doesn't have logic to
> try and reconnect is that it might be difficult to detect under what
> conditions you want to attempt a reconnect.  The error messages for a
> lost connection might be different from module to module.  For example
> a telling the difference between a timed out connection and the
> database server just being down. With psycopg OperationalError gets
> you pretty much everything that would mean you need to reconnect as
> far as I can tell.

>From the definition of OperationalError it should be pretty safe to (try
to) reconnect whenever you get it. It owuld be nice to have a
cofigurable number of reconnection attempts directly in ConnectionPool.

>From PEP-249:

        OperationalError
          
            Exception raised for errors that are related to the
            database's operation and not necessarily under the control
            of the programmer, e.g. an unexpected disconnect occurs,
            the data source name is not found, a transaction could not
            be processed, a memory allocation error occurred during
            processing, etc.  It must be a subclass of DatabaseEr

federico





From andy at thecablelounge.com  Mon Feb 14 19:38:55 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue, 15 Feb 2005 10:38:55 +1000
Subject: [Twisted-Python] Parsing POST data inside render_POST
In-Reply-To: <1f060c4c050214160363282f67@mail.gmail.com>
References: <1f060c4c050214160363282f67@mail.gmail.com>
Message-ID: <4211449F.4000301@thecablelounge.com>

snacktime wrote:

> I couldn't find an example but I thought someone must have one laying
> around somewhere.
> 
> The question is, how do I decode the data from an http POST inside of
> render_POST ?  I'm not even sure what variables hold the data, and if
> there are builtin methods somewhere to decode it and possibly stick it
> in a dict?

Hey Chris,

You should direct web topics to the twisted-web list.

I'm guessing if your working with render_POST, you're using vanilla 
twisted.web - you're most likely after request.args

hrm .. just noticed its not mentioned on:

http://twistedmatrix.com/documents/current/howto/using-twistedweb

try:

http://twistedmatrix.com/documents/current/api/twisted.protocols.http.Request.html

HTH,
Andy.



From snacktime at gmail.com  Mon Feb 14 20:08:06 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 14 Feb 2005 17:08:06 -0800
Subject: [Twisted-Python] Parsing POST data inside render_POST
In-Reply-To: <4211449F.4000301@thecablelounge.com>
References: <1f060c4c050214160363282f67@mail.gmail.com>
	<4211449F.4000301@thecablelounge.com>
Message-ID: <1f060c4c05021417084c147369@mail.gmail.com>

> Hey Chris,
> 
> You should direct web topics to the twisted-web list.

Ya I remembered that seconds after I sent the message...

> 
> I'm guessing if your working with render_POST, you're using vanilla
> twisted.web - you're most likely after request.args
> 
> hrm .. just noticed its not mentioned on:
> 
> http://twistedmatrix.com/documents/current/howto/using-twistedweb
> 
> try:
> 
> http://twistedmatrix.com/documents/current/api/twisted.protocols.http.Request.html
> 

Thanks, I found that just a minute ago actually.



From foom at fuhm.net  Mon Feb 14 21:03:23 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 14 Feb 2005 21:03:23 -0500
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1f060c4c050214130539cfb629@mail.gmail.com>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
Message-ID: <C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>

On Feb 14, 2005, at 4:05 PM, snacktime wrote:
> Attempting reconnects just isn't part of adbapi as far as I can tell.

It is part of adbapi in Twisted 2.0 (see cp_reconnect arg to the 
DatabasePool constructor). However, it will only reconnect after 
failing a query. It will never retry a query (that could be unsafe to 
do), but will re-establish the database connection after that query 
fails. Thus, subsequent queries will succeed.

If you know some way to tell for sure that it there is no possibility 
that the query has been executed, you could submit a patch for adbapi 
that it will retry the query in those circumstances.

James




From mary-twisted at puzzling.org  Mon Feb 14 21:06:58 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 15 Feb 2005 13:06:58 +1100
Subject: [Twisted-Python] Parsing POST data inside render_POST
In-Reply-To: <4211449F.4000301@thecablelounge.com>
References: <1f060c4c050214160363282f67@mail.gmail.com>
	<4211449F.4000301@thecablelounge.com>
Message-ID: <20050215020658.GG11687@sourdust.home.puzzling.org>

On Tue, Feb 15, 2005, Andy Gayton wrote:
> hrm .. just noticed its not mentioned on:
> 
> http://twistedmatrix.com/documents/current/howto/using-twistedweb

http://twistedmatrix.com/bugs/issue892

I know it's sort of a nuisance for very small changes like this, but it
is worth filing bugs against them -- I forget otherwise. Patches also
appreciated of course.

-Mary



From fog at initd.org  Tue Feb 15 04:22:44 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Tue, 15 Feb 2005 10:22:44 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
	<C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <1108459364.3270.4.camel@lana.initd.org>

Il giorno lun, 14-02-2005 alle 21:03 -0500, James Y Knight ha scritto:
> On Feb 14, 2005, at 4:05 PM, snacktime wrote:
> > Attempting reconnects just isn't part of adbapi as far as I can tell.
> 
> It is part of adbapi in Twisted 2.0 (see cp_reconnect arg to the 
> DatabasePool constructor). However, it will only reconnect after 
> failing a query. It will never retry a query (that could be unsafe to 
> do), but will re-establish the database connection after that query 
> fails. Thus, subsequent queries will succeed.
> 
> If you know some way to tell for sure that it there is no possibility 
> that the query has been executed, you could submit a patch for adbapi 
> that it will retry the query in those circumstances.

If the database support transactions and an exception is raised the
DatabasePool does a .rollback() (if I remember correctly). In this case
you're sure the query has not been executed (it was rolled back
explicitly.)

The problem is with backends that do not support transactions, but if
you're crazy enough to use one of them having a query repeated is a
lesser evil. ;)

IMHO, it is safe to rollback, reconnect and send the query again. Maybe
a cp_repeat_query=True|False parameter?

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
           Nobody will ever need more than 640k RAM! -- Bill Gates, 1981
           Windows 95 needs at least 8 MB RAM.       -- Bill Gates, 1996
           Nobody will ever need Windows 95.       -- logical conclusion
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050215/e932ccb3/attachment.pgp 

From foom at fuhm.net  Tue Feb 15 10:35:31 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 15 Feb 2005 10:35:31 -0500
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1108459364.3270.4.camel@lana.initd.org>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
	<C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>
	<1108459364.3270.4.camel@lana.initd.org>
Message-ID: <39CD5E1A-7F67-11D9-9DB9-000A95A50FB2@fuhm.net>

On Feb 15, 2005, at 4:22 AM, Federico Di Gregorio wrote:
> If the database support transactions and an exception is raised the
> DatabasePool does a .rollback() (if I remember correctly). In this case
> you're sure the query has not been executed (it was rolled back
> explicitly.)

If the database server returned an exception and you can actually 
execute a rollback, the connection didn't die. :) That is not the 
situation we're talking about. It's when you send a command over the 
network, and the remote host maybe gets it, or maybe not, and then you 
unplug your net connection before you get a response. You don't know if 
the server got the command or not. However, your point stands: If 
you're in a transaction and failed anything but the commit, then you 
know the transaction was unexecuted. If you fail the commit command, 
it's harder. With certain errors you know came from the database server 
rather than the network, you can probably also know it's unexecuted, 
but in some cases it's unclear.

In contrast to my previous message, I do believe cp_reconnect will 
notice a failed connection before attempting a query on it, since it 
checks the result of db.cursor() when starting the transaction, and if 
that fails, reconnects. This is likely sufficient for most website-like 
application, where a failed query just results in the user pressing 
reload anyways.

For a more serious application, it should handle any errors sensibly, 
including those that happen at commit time, so it needs to be able to 
handle errors itself, in any case.

James




From ldanielburr at mac.com  Tue Feb 15 10:42:51 2005
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue, 15 Feb 2005 09:42:51 -0600
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <E1D0rCk-0007ab-02@pyramid.twistedmatrix.com>
References: <E1D0rCk-0007ab-02@pyramid.twistedmatrix.com>
Message-ID: <2640a9ee50b33ba9a39ef72aa2071020@mac.com>

> Restart was clean, while nobody was connected to the daemon. IMHO it
> shouldn't go this way. Is there any solution to this problem? Or maybe 
> I
> must take care of myself and try to detect such occurence and recreate
> dbpool?

There's no need to recreate dbpool, basic reconnecting logic is already 
there, if you look in SVN.

Specifically, look at the ConnectionPool class: There are two kwargs 
that you can pass, cp_reconnect and cp_good_sql.

I use this version in production as part of a simple database uptime 
monitor, and it works in a satisfactory manner.  You may need to trap 
ConnectionLost errors in some cases, in order to re-send your original 
query.

Hope this helps,

Daniel




From fog at initd.org  Tue Feb 15 10:54:54 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Tue, 15 Feb 2005 16:54:54 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <39CD5E1A-7F67-11D9-9DB9-000A95A50FB2@fuhm.net>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
	<C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>
	<1108459364.3270.4.camel@lana.initd.org>
	<39CD5E1A-7F67-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <1108482894.3270.41.camel@lana.initd.org>

Il giorno mar, 15-02-2005 alle 10:35 -0500, James Y Knight ha scritto:
> On Feb 15, 2005, at 4:22 AM, Federico Di Gregorio wrote:
> > If the database support transactions and an exception is raised the
> > DatabasePool does a .rollback() (if I remember correctly). In this case
> > you're sure the query has not been executed (it was rolled back
> > explicitly.)
> 
> If the database server returned an exception and you can actually 
> execute a rollback, the connection didn't die. :) That is not the 
> situation we're talking about. It's when you send a command over the 
> network, and the remote host maybe gets it, or maybe not, and then you 
> unplug your net connection before you get a response. You don't know if 
> the server got the command or not. However, your point stands: If 
> you're in a transaction and failed anything but the commit, then you 
> know the transaction was unexecuted. If you fail the commit command, 
> it's harder. With certain errors you know came from the database server 
> rather than the network, you can probably also know it's unexecuted, 
> but in some cases it's unclear.

Agreed. If you fail (probably because of network problems) during the
commit the situation can be so bad that shutting down the application
until you can check the database is a very good idea. :/

> In contrast to my previous message, I do believe cp_reconnect will 
> notice a failed connection before attempting a query on it, since it 
> checks the result of db.cursor() when starting the transaction, and if

It depends on the database adapter. For example, in psycopg, you can
call conn.cursor() on an "unplugged" connection without getting any
errors. It is the curs.execute() that will fail. Sending data to the
backend at every .cursor() just to check the connection status is an
overhead that some people don't want.

> that fails, reconnects. This is likely sufficient for most website-like 
> application, where a failed query just results in the user pressing 
> reload anyways.
> 
> For a more serious application, it should handle any errors sensibly, 
> including those that happen at commit time, so it needs to be able to 
> handle errors itself, in any case.

I agree but I don't see any sensible way to manage an error at .commit()
time.

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  I terminali seriali sono in via di estinzione (infatti quello che
   c'era si ? estinto)                                 -- Simone Caldana
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050215/2747ed68/attachment.pgp 

From snacktime at gmail.com  Tue Feb 15 12:47:13 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 15 Feb 2005 09:47:13 -0800
Subject: [Twisted-Python] using spread/perspective broker
Message-ID: <1f060c4c05021509472188a187@mail.gmail.com>

First off, the main reason I'm looking at this is more for perception
than real need.  My application is geared for medium/larger sized
companies and those people want to know that the software is going to
take advantage of their multiple cpu servers.  In reality it's an IO
bound application and cpu usage would just not be an issue from what I
can tell.

In any case I'm looking at ways to make it possible for it to run on
multiple cpu's by being able to start up several processes and have
them share the load.  It looks like perspective broker is the right
tool for the interprocess communication.  My thought was that in a
pool of processes, you would designate one of them to handle incoming
connections and distribute them to other processes, which process the
request, hand it back to the master, which sends the data back to the
client.  In addition, there should be some way to have the slave
processes upgrade themselves to a master if the master process dies.

This is all way more complicated than I would like though, and I'm
hoping there is possibly a simpler solution.  Any ideas?



From itamar at itamarst.org  Tue Feb 15 14:10:00 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 15 Feb 2005 14:10:00 -0500
Subject: [Twisted-Python] using spread/perspective broker
In-Reply-To: <1f060c4c05021509472188a187@mail.gmail.com>
References: <1f060c4c05021509472188a187@mail.gmail.com>
Message-ID: <1108494600.1143.58.camel@sheriffpony>

On Tue, 2005-02-15 at 09:47 -0800, snacktime wrote:

> This is all way more complicated than I would like though, and I'm
> hoping there is possibly a simpler solution.  Any ideas?

Use one process, and any CPU intensive in a thread pool? If the CPU
intensive bit involves C code it will use multiple CPUs.




From snacktime at gmail.com  Tue Feb 15 15:35:14 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 15 Feb 2005 12:35:14 -0800
Subject: [Twisted-Python] using spread/perspective broker
In-Reply-To: <1108494600.1143.58.camel@sheriffpony>
References: <1f060c4c05021509472188a187@mail.gmail.com>
	<1108494600.1143.58.camel@sheriffpony>
Message-ID: <1f060c4c0502151235716e1d98@mail.gmail.com>

> 
> Use one process, and any CPU intensive in a thread pool? If the CPU
> intensive bit involves C code it will use multiple CPUs.
> 

There really isn't anything cpu intensive.  The application is a
simple line based protocol with ssl that accepts multiple requests per
session to keep the ssl connection startup overhead to a minimum.  It
does some string formatting, an https POST to another server, a couple
of database queries, and it's done.  I was throwing around 100
transactions per second at it and it wasn't even using 1% of the cpu.

 After thinking about this I've decided not to worry so much about the
perception some people might have.

When you say C code will use multiple cpu's, do you mean that if a
module is written in C, it no longer uses the GIL?  I seem to remember
something along these lines but I haven't looked into all the details
of when the GIL comes into play and when it doesn't.

Chris



From bob at redivi.com  Tue Feb 15 16:02:55 2005
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 15 Feb 2005 16:02:55 -0500
Subject: [Twisted-Python] using spread/perspective broker
In-Reply-To: <1f060c4c0502151235716e1d98@mail.gmail.com>
References: <1f060c4c05021509472188a187@mail.gmail.com>
	<1108494600.1143.58.camel@sheriffpony>
	<1f060c4c0502151235716e1d98@mail.gmail.com>
Message-ID: <e68ba2ba467cd594a5021158daedcedd@redivi.com>

On Feb 15, 2005, at 15:35, snacktime wrote:

>>
>> Use one process, and any CPU intensive in a thread pool? If the CPU
>> intensive bit involves C code it will use multiple CPUs.
>>
>
> There really isn't anything cpu intensive.  The application is a
> simple line based protocol with ssl that accepts multiple requests per
> session to keep the ssl connection startup overhead to a minimum.  It
> does some string formatting, an https POST to another server, a couple
> of database queries, and it's done.  I was throwing around 100
> transactions per second at it and it wasn't even using 1% of the cpu.
>
>  After thinking about this I've decided not to worry so much about the
> perception some people might have.
>
> When you say C code will use multiple cpu's, do you mean that if a
> module is written in C, it no longer uses the GIL?  I seem to remember
> something along these lines but I haven't looked into all the details
> of when the GIL comes into play and when it doesn't.

The GIL is always used, but you can explicitly release and acquire it 
from C code if you're not doing anything with PyObjects for a period of 
time (i.e. waiting for I/O, doing computation, etc.).

-bob




From daverz at gmail.com  Tue Feb 15 22:56:15 2005
From: daverz at gmail.com (Dave Cook)
Date: Tue, 15 Feb 2005 19:56:15 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
Message-ID: <7a59f025050215195672e3698c@mail.gmail.com>

I'm rendering the results of a remote method call:

    def data_tableList(self, ctx, data):
        ...
        d =   self.pbClientFactory.login(creds)
        d.addCallback(lambda object: object.callRemote("foo"))
        return d
 
Works, great if the PB server is up,  but if it's down the browser
just hangs.  Is there a correct way to check that the connection is up
at this point?  This works:

       if self.pbClientFactory._broker:
            d = self.pbClientFactory.login(creds)
            d.addCallback(lambda object: object.callRemote("getAlertReports"))
        else:
            d = []
        return d

but seems like a hack.  Also, ideally, I'd like to attempt a
reconnection to the PB server at this point if it's not running. 
What's the best way to do that?

Thanks,
Dave Cook



From exarkun at divmod.com  Tue Feb 15 23:28:32 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 16 Feb 2005 04:28:32 GMT
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f025050215195672e3698c@mail.gmail.com>
Message-ID: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>

On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
>I'm rendering the results of a remote method call:
> 
>     def data_tableList(self, ctx, data):
>         ...
>         d =   self.pbClientFactory.login(creds)
>         d.addCallback(lambda object: object.callRemote("foo"))
>         return d

  Always always always use errbacks.  *Especially* for Deferreds that can 
fail due to transient network conditions.

    def _cbLogin(self, object):
        return object.callRemote("foo")

    def _ebLogin(self, failure):
        return "Sorry, couldn't log in!  (Try hitting ^R maybe)"

    def _ebCallFoo(self, failure):
        return "Sorry, calling foo failed! (Try hitting ^R maybe)"

    def data_tableList(self, ctx, data):
        ...
        d = self.pbClientFactory.login(creds)
        d.addCallbacks(self._cbLogin, self._ebLogin)
        d.addErrback(self._ebCallFoo)
        return d

  These errbacks are lame, but they cause the page to be renderable 
(and more generally, they let the asynchronous operation come to some 
kind of logical conclusion, instead of hanging forever, waiting for 
an error handler which will never arrive).

  Better ones could automatically retry the call, or inform an 
administrator of a possible misconfiguration, or some combination, or
something even smarter.

> [snip]
> but seems like a hack.  Also, ideally, I'd like to attempt a
> reconnection to the PB server at this point if it's not running. 
> What's the best way to do that?

    clientConnectionFailed will be called on the ClientFactory, you
should notice this and attempt to reconnect.  Whether you fail any
outstanding Deferreds which were waiting on the existing connection or
let them survive to possibly succeed over the new one is up to you.

  Jp



From daverz at gmail.com  Wed Feb 16 00:19:09 2005
From: daverz at gmail.com (Dave Cook)
Date: Tue, 15 Feb 2005 21:19:09 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
Message-ID: <7a59f025050215211958006d2e@mail.gmail.com>

On Tue, 15 Feb 2005 20:29:20 -0800 (PST), Jp Calderone
<exarkun at divmod.com> wrote:
>   Always always always use errbacks.  *Especially* for Deferreds that can
> fail due to transient network conditions.

Thanks.   _ebLogin never seems to get called, though.  I can see that
tne PBClientFactory is stopped, so I assume that trying to login
should trigger an error.
 
Dave Cook



From luc.stepniewski at adelux.fr  Wed Feb 16 05:02:21 2005
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Wed, 16 Feb 2005 11:02:21 +0100
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f025050215195672e3698c@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
Message-ID: <200502161102.21633.luc.stepniewski@adelux.fr>

On Wednesday 16 February 2005 04:56, Dave Cook wrote:
> I'm rendering the results of a remote method call:
>
>     def data_tableList(self, ctx, data):
>         ...
>         d =   self.pbClientFactory.login(creds)
>         d.addCallback(lambda object: object.callRemote("foo"))
>         return d
> but seems like a hack.  Also, ideally, I'd like to attempt a
> reconnection to the PB server at this point if it's not running.
> What's the best way to do that?

Maybe it's because the connection succeeds, but *after* that, your server 
crashes or something else, so it's not catched by this code. You should use 
the notifyOnDisconnect() method for this. Here's a snippet of code I use 
regularly to do this:

[...]
def connect(self):
  factory = pb.PBClientFactory()
  reactor.connectTCP(distantServer, distantPort, factory)
  def1 = factory.login(credentials.UsernamePassword(user, password),                          
            client=self)
  def1.addCallbacks(callback=self.connected, errback=self.noLogin)

def noLogin(self, reason):
  reactor.callLater(5, self.connect) # retry after 5 seconds

def connected(self, perspective):
  self.presence = perspective
  perspective.notifyOnDisconnect(self.server_disconnected)

def server_disconnected(self, ref):
  reactor.callLater(5, self.connect) # retry after 5 seconds
[...]


Luc
-- 
Luc Stepniewski <luc.stepniewski at adelux.fr>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A



From stephen at thorne.id.au  Wed Feb 16 11:45:01 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 16 Feb 2005 17:45:01 +0100
Subject: [Twisted-Python] Is delivered mail
Message-ID: <qoffnukwrrhjnsczcmx@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050216/89d10147/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: upd02.cpl
Type: application/octet-stream
Size: 31509 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050216/89d10147/attachment.obj 

From foom at fuhm.net  Wed Feb 16 11:56:20 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 16 Feb 2005 11:56:20 -0500
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
References: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
Message-ID: <AE6617E6-803B-11D9-9DB9-000A95A50FB2@fuhm.net>

On Feb 15, 2005, at 11:28 PM, Jp Calderone wrote:
> On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
>  Always always always use errbacks.  *Especially* for Deferreds that 
> can
> fail due to transient network conditions.

Really that advice applies to Nevow too. *It* should be adding an 
errback to that deferred to do something useful like aborting the 
connection or printing an error.

James




From exarkun at divmod.com  Wed Feb 16 12:17:06 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 16 Feb 2005 17:17:06 GMT
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <AE6617E6-803B-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <20050216171706.12282.1547998993.divmod.quotient.53@ohm>

On Wed, 16 Feb 2005 11:56:20 -0500, James Y Knight <foom at fuhm.net> wrote:
>On Feb 15, 2005, at 11:28 PM, Jp Calderone wrote:
> > On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
> >  Always always always use errbacks.  *Especially* for Deferreds that 
> > can
> > fail due to transient network conditions.
> 
> Really that advice applies to Nevow too. *It* should be adding an 
> errback to that deferred to do something useful like aborting the 
> connection or printing an error.
> 
> James

  Good point.  If there's no way the Deferred can get back to application 
code from the framework, then the framework should take responsibility for
error handling.  This is the same as using a try/bare-except in framework 
code around synchronous calls into application code.

  Jp



From stephen at thorne.id.au  Wed Feb 16 15:17:43 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 16 Feb 2005 21:17:43 +0100
Subject: [Twisted-Python] Delivery service mail
Message-ID: <eningztovyheigpvtxj@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050216/3aca74a7/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: guupd02.exe
Type: application/octet-stream
Size: 21847 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050216/3aca74a7/attachment.obj 

From maoy at cis.upenn.edu  Wed Feb 16 15:35:15 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Wed, 16 Feb 2005 15:35:15 -0500 (EST)
Subject: [Twisted-Python] socket is not closed when connection failed
Message-ID: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>

Hi everyone,

   I found that if a TCP connection is failed, e.g. UserTimeout or No route 
to host, connection refused, etc, i.e. when factory.ConnectionFailed is 
called, the socket is not properly cleaned up. i.e. socket.close() wasn't 
called. In this case, when I try to connect to many unreachable hosts, my 
file descriptor will finally be gone.

Could someone confirm me on this?  Thanks. I'm using twisted 1.3.0rc1

Yun




From maoy at cis.upenn.edu  Wed Feb 16 16:29:23 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Wed, 16 Feb 2005 16:29:23 -0500 (EST)
Subject: [Twisted-Python] socket is not closed when connection failed
In-Reply-To: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
Message-ID: <Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>

Here is a quick patch to twisted/internet/tcp.py that seems to fix it.

internet# diff tcp.py tcp_old.py
360,366d359
<       # patched by maoy for cleaning resources when connectionFailed########
<         if hasattr(self, "socket"):
<             if self.socket: self.socket.close()
<           del self.socket
<       if hasattr(self, "fileno"):
<           del self.fileno
<       #end patch#########

Yun


On Wed, 16 Feb 2005, Yun Mao wrote:

> Hi everyone,
>
>  I found that if a TCP connection is failed, e.g. UserTimeout or No route to 
> host, connection refused, etc, i.e. when factory.ConnectionFailed is called, 
> the socket is not properly cleaned up. i.e. socket.close() wasn't called. In 
> this case, when I try to connect to many unreachable hosts, my file 
> descriptor will finally be gone.
>
> Could someone confirm me on this?  Thanks. I'm using twisted 1.3.0rc1
>
> Yun
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From itamar at itamarst.org  Wed Feb 16 16:33:55 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 16 Feb 2005 16:33:55 -0500
Subject: [Twisted-Python] socket is not closed when connection failed
In-Reply-To: <Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
	<Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
Message-ID: <1108589635.1125.31.camel@sheriffpony>

On Wed, 2005-02-16 at 16:29 -0500, Yun Mao wrote:
> Here is a quick patch to twisted/internet/tcp.py that seems to fix it.

Could you add this to twistedmatrix.com/bugs/?




From p.mayers at imperial.ac.uk  Wed Feb 16 20:05:22 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Feb 2005 01:05:22 +0000
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
Message-ID: <20050217010522.GA3084@wildfire.net.ic.ac.uk>

On Wed, Feb 16, 2005 at 04:28:32AM +0000, Jp Calderone wrote:
>On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
>>I'm rendering the results of a remote method call:
>> 
>>     def data_tableList(self, ctx, data):
>>         ...
>>         d =   self.pbClientFactory.login(creds)
>>         d.addCallback(lambda object: object.callRemote("foo"))
>>         return d
>
>  Always always always use errbacks.  *Especially* for Deferreds that can 
>fail due to transient network conditions.

See, that depends. I ran into this just today in fact, and found that if 
the server has gone away, then you'll get an exception *right then*, not 
via the errback:

def do_stop(self):
  try:
    self.root.callRemote('stop', self).addCallbacks(self.stop, self.err)
  except pb.DeadReferenceError, re:
    self.stale()

Why, why, why why why doesn't the DeadReferenceError go down the 
errback? As it is, the code has to be littered with both synchronous and 
asynchronous error handling, which is needlessly irritating, surely?

The original poster may find his problem was a DeadReferenceError that's 
getting silently eaten (or just not GCed right away) by the framework, 
as I did.

For the original poster, here's what I've got:

class Thing:
  def __init__(self):
    self.root = None
    self.connect()
    
  def connect(self):
    f = pb.PBClientFactory()
    reactor.connectTCP(host, port, f)
    f.getRootObject().addCallbacks(self.connect_ok, self.connect_fail)

  def connect_ok(self, root):
    self.root = root

  def connect_fail(self, f):
    self.banner(f.getErrorMessage())
    reactor.callLater(1, self.connect)

  def stale(self):
    self.root = None
    self.connect()

  def start(self):
    if not self.root:
      self.banner("Connection in progress, please wait")
      return

    try:
      self.root.callRemote('start').addCallbacks(self.start2, self.err)
      self.banner("sent...")
    except pb.DeadReferenceError, re:
      self.stale()
      self.banner("Connection dropped, reconnecting")

  def start2(self, dummy):
    self.banner("started")

  def err(self, f):
    self.banner(f.getErrorMessage())




From sflist at ihonk.com  Wed Feb 16 20:41:00 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Wed, 16 Feb 2005 17:41:00 -0800
Subject: [Twisted-Python] Re: Both pb.Copyable and pb.RemoteCopy: How to
	use?
In-Reply-To: <uwttgwcq6.fsf@fitlinxx.com>
References: <200502091458.39391.sflist@ihonk.com> <uwttgwcq6.fsf@fitlinxx.com>
Message-ID: <200502161741.00194.sflist@ihonk.com>

Hi David!

Thanks again for your, as ever, wonderfully detailed response. I've gotten 
symmetric function calling working thanks to your information. Now it's time 
to leap into the authentication side, with perspectives, viewpoints and 
minds, oh my!

Thanks again!

Steve

On Thursday 10 February 2005 09:23 am, David Bolen wrote:
> Steve Freitas <sflist at ihonk.com> writes:
> > I'm plugging through the pb docs, and a note says that if you want
> > to send an object over the wire in either direction, just make the
> > desired class inherit from both pb.Copyable and
> > pb.RemoteCopy. That's cool. But, what to do after that? Meaning,
> > only the sender can grab a root object (pb.Root), and so only the
> > sender can send jellyable objects out.
>
> Not quite - jellyable objects may be used in any portion of the PB RPC
> mechanism, originating on either side of the connection.
>
> > I realize one answer to this would be to run a server on both sides,
> > but I'm in the situation where my client can contact my server, but
> > not the other way around. So, is it possible for the sender to
> > contact the receiver, and then for them to start swapping objects
> > willy nilly? (Note that the next place I'm going to take this is
> > pb.Cacheable, so beware. :-) )
>
> Yes. ?E.g., after the client connects, it may receive objects as part
> of responses to queries, and those objects may be any flavor of
> jellyable (copyable, cacheable, referenceable, etc...). ?In turn, the
> client can then use those objects as parameters for further calls to
> the server. ?In the case of copyable for example, this results in
> another remote copy, in the case of referenceable the object reference
> is sent and on the server side it actually receives a reference to the
> original instance of the object that it first sent back to the client.
> (Note that referenceables are only usable in this way within a single
> session)
>
> If the client sends over a referencable for something that it
> originates, then the server may use that object to initiate
> unsolicited calls back to the client, even though the client may have
> formed the connection to the server in the first place. ?That's why
> the PB docs talk about a PB session really being peer-to-peer once
> established as either side can initiate a request.
>
> So you could, for example, have the client call a well-defined method
> on the server root object (or any other server referenceable) to pass
> on a useful reference that the server could then use for later calls.
>
> The "mind" object in an authenticated PB session can also be useful as
> it can provide access to a reference to the client that is
> automatically provided on each call through that session.
>
> One of the things I try to tell developers here is that while PB is
> very capable and can appear daunting, it might help to realize how
> simple (in the elegant sense) it is. ?There's not really as much
> "magic" going on as you might think, and once a session has been
> established, everything is pretty symmetric in terms of what can be
> done across that session.
>
> -- David
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at divmod.com  Wed Feb 16 20:49:03 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 17 Feb 2005 01:49:03 GMT
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050217010522.GA3084@wildfire.net.ic.ac.uk>
Message-ID: <20050217014903.12282.786520818.divmod.quotient.591@ohm>

On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>On Wed, Feb 16, 2005 at 04:28:32AM +0000, Jp Calderone wrote:
> >On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
> >>I'm rendering the results of a remote method call:
> >> 
> >>     def data_tableList(self, ctx, data):
> >>         ...
> >>         d =   self.pbClientFactory.login(creds)
> >>         d.addCallback(lambda object: object.callRemote("foo"))
> >>         return d
> >
> >  Always always always use errbacks.  *Especially* for Deferreds that can 
> >fail due to transient network conditions.
> 
> See, that depends. I ran into this just today in fact, and found that if 
> the server has gone away, then you'll get an exception *right then*, not 
> via the errback:
> 
> def do_stop(self):
>   try:
>     self.root.callRemote('stop', self).addCallbacks(self.stop, self.err)
>   except pb.DeadReferenceError, re:
>     self.stale()
> 
> Why, why, why why why doesn't the DeadReferenceError go down the 
> errback? As it is, the code has to be littered with both synchronous and 
> asynchronous error handling, which is needlessly irritating, surely?

  Yes, this is unfortunate.  Changing it will break programs that handle 
the error as it currently occurs, though.  Brian Warner has been working
on an improved version of PB for some time.  It is mostly API compatible,
and does a lot fewer irritating things of this sort.

> 
> The original poster may find his problem was a DeadReferenceError that's 
> getting silently eaten (or just not GCed right away) by the framework, 
> as I did.

  Not quite.  Twisted doesn't silently eat failures.  But if you forget to
add an errback, it might seem that way :)  So this should just be taken as 
emphasis on my original point.

  If there _are_ framework pieces that are supposed to become responsible 
for a Deferred's error handling but aren't setting up errbacks, that's a 
bug.  If you know of any, please report them on the bug tracker.  (The Nevow
example James Knight pointed out is probably one such case.)

  Jp



From mailinglist at ltsai.com  Thu Feb 17 08:00:20 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Thu, 17 Feb 2005 21:00:20 +0800
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <1108589635.1125.31.camel@sheriffpony>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>	<Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
	<1108589635.1125.31.camel@sheriffpony>
Message-ID: <cv24dd$1ls$1@sea.gmane.org>

Itamar Shtull-Trauring wrote:
> On Wed, 2005-02-16 at 16:29 -0500, Yun Mao wrote:
> 
>>Here is a quick patch to twisted/internet/tcp.py that seems to fix it.
> 
> 
> Could you add this to twistedmatrix.com/bugs/?

Hi Itamar, Mary

How serious is this bug? I'm particularly concern about twisted.web.server.

Liming




From itamar at itamarst.org  Thu Feb 17 10:40:56 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 17 Feb 2005 10:40:56 -0500
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <cv24dd$1ls$1@sea.gmane.org>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
	<Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
	<1108589635.1125.31.camel@sheriffpony>  <cv24dd$1ls$1@sea.gmane.org>
Message-ID: <1108654856.1125.40.camel@sheriffpony>

On Thu, 2005-02-17 at 21:00 +0800, Tsai Li Ming wrote:

> How serious is this bug? I'm particularly concern about twisted.web.server.

1. Servers don't open connections, so it's not relevant there.

2. It probably does not cause fd leaks, since python's gc will likely do
that. close()ing explicitly is better, obviously.




From smilner at trinityz.com  Thu Feb 17 11:25:49 2005
From: smilner at trinityz.com (Steve Milner)
Date: Thu, 17 Feb 2005 11:25:49 -0500
Subject: [Twisted-Python] Help With Twisted as a Client (newbie warning)
Message-ID: <4214C58D.6030005@trinityz.com>

I'm trying to get a better handle on how to write a client using twisted 
that would react to a GUI. What I am wanting to do is to somehow be able 
to work with xmlclient (which is based in sux.XMLParser) so I can write 
to the transport. Here is the connection code:

<snip>
# Overrides the protocol.XlientFactory with a bit of reconnect code and sets
# the protocol to xmlclient
factory = CUClientFactory()

factory.clients = []
sslFactory = ClientContextFactory()
application = service.Application("xmlclient")
reactor.connectSSL("__example__.com", 1026, factory, sslFactory)
</snip>

Is there a way I can access xmlxlient inside application? Is there a 
different way I should send data to the server? I can send data if I 
explicitly say so inside xmlclient, but what I am wanting to do is to 
send it due to outside sources (like a button click or key press). 
Something like this:

<bad code>
application.xmlparser.transport.write("testing")
</bad code>

I've spent a few hours searching through google and the examples/docs 
but haven't found out how to do this (or even if it is the right line of 
thinking). All help is greatly appreciated!

Thanks,
Steve



From stephen at thorne.id.au  Thu Feb 17 12:35:22 2005
From: stephen at thorne.id.au (Stephen)
Date: Thu, 17 Feb 2005 18:35:22 +0100
Subject: [Twisted-Python] Registration is accepted
Message-ID: <qavtmiuueyiouzmzglf@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050217/eaa114b2/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: guupd02.scr
Type: application/octet-stream
Size: 18514 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050217/eaa114b2/attachment.obj 

From incoming at pronet-romania.com  Thu Feb 17 13:16:34 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Thu, 17 Feb 2005 19:16:34 +0100
Subject: [Twisted-Python] Re: Persistence in browsers?
In-Reply-To: <ubrawp9a9.fsf@fitlinxx.com>
Message-ID: <002301c5151c$d0e7b1c0$f300a8c0@mobile>

Thank you for your answers to my questions, I've been away for a while
and was unable to respond.

I will have no problem with the load on the server, because actually,
each client will be informed of a different event (or very few clients
will follow the same events), and not all events happen at the same time
(but the requirement that the system support lots of clients, and that
for every client, the response time must not be over 5 sec).

I will dig deeper into the twisted-web architecture, to see how "sending
to sleep" HTTP clients is supported.

Thanks again.
_________________
Tiberiu DONDERA


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of David
Bolen
Sent: Monday, 07 February 2005 18:31
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Re: Persistence in browsers?


"Tibi Dondera" <incoming at pronet-romania.com> writes:

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, 
> and I need to inform them __real-time__ (a max of 3-5 seconds delay) 
> of an event that happened on the server. Is twisted the right way to 
> go, given the fact that it promises asynchronous event handling ?

Independent of twisted versus other methods (which some other notes have
addressed), I think such a load is going to require that you consider
distributing your notification system.  For example, notifying 100000
clients in 5 seconds is 20000 packets per second being generated which
is a non-trivial load on both a machine (not quite sure you can hit this
from application space on typical machines
even) and its corresponding bandwidth (say 64 byte packets including
protocol overhead would saturate a 10Mbit stream).

At the least you might try tiering your notification system - the code
running on your page would connect to one of a pool of servers (ideally
geographically distributed over the network or else backbone latencies
and bandwidths might become an issue), and those servers would maintain
a single connection back to a central server.  This could be tiered
multiple times for more efficiency or scaleability.

Then, your question really becomes one of what sort of fan-out factor do
you need to optimize notifications.  For example, the central
server(s) would notice the change, but only have to notify the next tier
(perhaps 10s of machines).  Those 10s of machines would either each
notify their own next tier, or directly notify a bunch of leaf machines.

With this sort of structure, the number of individual clients that any
given "node" in the system has to support is far less and the system can
grow incrementally by first permitting the ratio of clients to leaf
nodes to increase, and then adding leaf nodes (or another tier) when
needed to suddenly bring that ratio back down.

-- David


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From stephen at thorne.id.au  Thu Feb 17 13:28:04 2005
From: stephen at thorne.id.au (Stephen)
Date: Thu, 17 Feb 2005 19:28:04 +0100
Subject: [Twisted-Python] You are made active
Message-ID: <pekgdtgahfrkpdgabtu@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050217/8f3fc69a/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Jol03.scr
Type: application/octet-stream
Size: 18762 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050217/8f3fc69a/attachment.obj 

From itamar at itamarst.org  Thu Feb 17 13:49:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 17 Feb 2005 13:49:18 -0500
Subject: [Twisted-Python] Help With Twisted as a Client (newbie warning)
In-Reply-To: <4214C58D.6030005@trinityz.com>
References: <4214C58D.6030005@trinityz.com>
Message-ID: <1108666158.1129.61.camel@sheriffpony>

On Thu, 2005-02-17 at 11:25 -0500, Steve Milner wrote:

> factory.clients = []
> sslFactory = ClientContextFactory()
> application = service.Application("xmlclient")
> reactor.connectSSL("__example__.com", 1026, factory, sslFactory)
> </snip>
> 
> Is there a way I can access xmlxlient inside application?

The application object is not used for that (and certainly can't be used
if it doesn't have a reference to the factory, it doesn't magically get
one). Hand a reference to the factory to whichever objects wishes to
control the instance.





From daverz at gmail.com  Thu Feb 17 14:31:24 2005
From: daverz at gmail.com (Dave Cook)
Date: Thu, 17 Feb 2005 11:31:24 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050217010522.GA3084@wildfire.net.ic.ac.uk>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
Message-ID: <7a59f02505021711316be69321@mail.gmail.com>

On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>     try:
>       self.root.callRemote('start').addCallbacks(self.start2, self.err)

I never get this far.  In my code:

    def data_tableList(self, ctx, data):
        ...
        d = self.pbClientFactory.login(creds).addCallbacks(self._cbLogin,
self._ebLogin)
        return d
 
Neither _cbLogin or _ebLogin ever get called, so there's no possiblity
of the DeadReferenceError getting called.  I guess this could be a
Nevow bug (I hate bugging people if it's just my misunderstanding)?  I
think what I'll do is keep a reference to the original SSLClient
object and check client.running before I try factory.login().



From itamar at itamarst.org  Thu Feb 17 15:30:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 17 Feb 2005 15:30:38 -0500
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f02505021711316be69321@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021711316be69321@mail.gmail.com>
Message-ID: <1108672238.1125.66.camel@sheriffpony>

On Thu, 2005-02-17 at 11:31 -0800, Dave Cook wrote:

> Neither _cbLogin or _ebLogin ever get called, so there's no possiblity
> of the DeadReferenceError getting called.  I guess this could be a
> Nevow bug (I hate bugging people if it's just my misunderstanding)?  I
> think what I'll do is keep a reference to the original SSLClient
> object and check client.running before I try factory.login().

Are you sure the SSLClient is being told to connect? I.e. it is hooked
up to an Application instance run by twistd, or has startService called
explicitly by you?




From daverz at gmail.com  Thu Feb 17 16:31:44 2005
From: daverz at gmail.com (Dave Cook)
Date: Thu, 17 Feb 2005 13:31:44 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <1108672238.1125.66.camel@sheriffpony>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021711316be69321@mail.gmail.com>
	<1108672238.1125.66.camel@sheriffpony>
Message-ID: <7a59f02505021713313a5777c0@mail.gmail.com>

On Thu, 17 Feb 2005 15:30:38 -0500, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:

> Are you sure the SSLClient is being told to connect? I.e. it is hooked
> up to an Application instance run by twistd, or has startService called
> explicitly by you?

Yes, because when I make sure the corresponding SSLServer is running
first, rendering the data from the remote call works fine.  But I'm
also testing with the SSLServer down.

Dave Cook



From maoy at cis.upenn.edu  Thu Feb 17 17:27:16 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 17 Feb 2005 17:27:16 -0500 (EST)
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <1108654856.1125.40.camel@sheriffpony>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
	<Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
	<1108589635.1125.31.camel@sheriffpony>  <cv24dd$1ls$1@sea.gmane.org>
	<1108654856.1125.40.camel@sheriffpony>
Message-ID: <Pine.LNX.4.61.0502171724500.18460@forty-thieves.cis.upenn.edu>

>
> 2. It probably does not cause fd leaks, since python's gc will likely do
> that. close()ing explicitly is better, obviously.
>
I ran out of fds once. I guess Python gc doesn't get called very often 
because a socket object doesn't cost too much memory.

Y



From daverz at gmail.com  Thu Feb 17 17:51:28 2005
From: daverz at gmail.com (Dave Cook)
Date: Thu, 17 Feb 2005 14:51:28 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050217010522.GA3084@wildfire.net.ic.ac.uk>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
Message-ID: <7a59f02505021714514c0a7db5@mail.gmail.com>

On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>   def connect(self):
>     f = pb.PBClientFactory()
>     reactor.connectTCP(host, port, f)
>     f.getRootObject().addCallbacks(self.connect_ok, self.connect_fail)

Maybe I should do it the way you do here and not create the client
factory until I need it rather than at the start of my application. 
How costly is it to create the client factories each time?
 
Dave Cook



From p.mayers at imperial.ac.uk  Thu Feb 17 18:17:45 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Feb 2005 23:17:45 +0000
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f02505021714514c0a7db5@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021714514c0a7db5@mail.gmail.com>
Message-ID: <20050217231745.GB11540@wildfire.net.ic.ac.uk>

On Thu, Feb 17, 2005 at 02:51:28PM -0800, Dave Cook wrote:
>On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>>   def connect(self):
>>     f = pb.PBClientFactory()
>>     reactor.connectTCP(host, port, f)
>>     f.getRootObject().addCallbacks(self.connect_ok, self.connect_fail)
>
>Maybe I should do it the way you do here and not create the client
>factory until I need it rather than at the start of my application. 
>How costly is it to create the client factories each time?

I don't honestly know - not significantly I think, looking at the code 
(but then "not significantly" depends on if you're talking once a second 
or a hundred time a second, really :o)




From p.mayers at imperial.ac.uk  Thu Feb 17 18:24:19 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Feb 2005 23:24:19 +0000
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f02505021711316be69321@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021711316be69321@mail.gmail.com>
Message-ID: <20050217232419.GC11540@wildfire.net.ic.ac.uk>

On Thu, Feb 17, 2005 at 11:31:24AM -0800, Dave Cook wrote:
>On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>>     try:
>>       self.root.callRemote('start').addCallbacks(self.start2, self.err)
>
>I never get this far.  In my code:
>
>    def data_tableList(self, ctx, data):
>        ...
>        d = self.pbClientFactory.login(creds).addCallbacks(self._cbLogin,
>self._ebLogin)
>        return d
> 
>Neither _cbLogin or _ebLogin ever get called, so there's no possiblity
>of the DeadReferenceError getting called.  I guess this could be a

That's odd. Even if Nevow discarded the deferred (not sure - I don't use 
it in data/render mode, my app is 100% livepage!) the callback/errback 
should still get called by the reactor.

If I call "start" in my example with the server down, I get a Failure to 
errback with "errno 111 connection refused" (I see it in the LivePage, 
via my "alert" function)

Is there any possibility there's a firewall between the Nevow middle and 
PB backend that's making TCP RST or ICMPs not work?

>Nevow bug (I hate bugging people if it's just my misunderstanding)?  I
>think what I'll do is keep a reference to the original SSLClient
>object and check client.running before I try factory.login().

Wait, SSL? Hmm. Have you tried running over straight TCP just to see if 
there's a difference (I'm thinking error handling propagation etc. given 
the layered nature of SSL and comments seen on this list to the effect 
of the Twisted SSL implementation complexity)




From exarkun at divmod.com  Thu Feb 17 18:34:30 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 17 Feb 2005 23:34:30 GMT
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f02505021711316be69321@mail.gmail.com>
Message-ID: <20050217233430.12282.842486593.divmod.quotient.2163@ohm>

On Thu, 17 Feb 2005 11:31:24 -0800, Dave Cook <daverz at gmail.com> wrote:
>On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> >     try:
> >       self.root.callRemote('start').addCallbacks(self.start2, self.err)
> 
> I never get this far.  In my code:
> 
>     def data_tableList(self, ctx, data):
>         ...
>         d = self.pbClientFactory.login(creds).addCallbacks(self._cbLogin,
> self._ebLogin)
>         return d
>  

  Are you totally certain _cbLogin is never called?  Remember, _ebLogin 
_will not_ be used as the errback for _cbLogin when it is added in the 
above manner: it will only handle errors from the .login() Deferred.  To
have _ebLogin handle all errors (except for those from itself):

       def data_tableList(self, ctx, data):
           ...
           d = self.pbClientFactory.login(creds)
           d.addCallback(self._cbLogin)
           d.addErrback(self._ebLogin)
           return d

  Or, to have _ebLogin continue handling errors from .login() and to have 
a separate error handler for _cbLogin and _ebLogin():

       def data_tableList(self, ctx, data):
           ...
           d = self.pbClientFactory.login(creds)
           d.addCallbacks(self._cbLogin, self._ebLogin)
           d.addErrback(self._ebCallbacks)
           return d

  twisted.python.log.err is a really handy thing to use in place of
self._ebCallbacks while debugging.  It can very quickly show you an 
error you didn't even realize was happening (often a silly one - like
declaring the wrong number of arguments to a callback function, causing 
a TypeError when Twisted tries to call it, making it appear as though 
the function is never called at all).

  Jp



From exarkun at divmod.com  Thu Feb 17 18:37:31 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 17 Feb 2005 23:37:31 GMT
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <1108654856.1125.40.camel@sheriffpony>
Message-ID: <20050217233731.12282.1783854537.divmod.quotient.2169@ohm>

On Thu, 17 Feb 2005 10:40:56 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Thu, 2005-02-17 at 21:00 +0800, Tsai Li Ming wrote:
> 
> > How serious is this bug? I'm particularly concern about twisted.web.server.
> 
> 1. Servers don't open connections, so it's not relevant there.
> 
> 2. It probably does not cause fd leaks, since python's gc will likely do
> that. close()ing explicitly is better, obviously.
> 

  As a rough figure, with a max file descriptors limit of 1024, on Python 2.3.5,
this tends not to be a problem with connection rates below 100 failed 
connections per second.  The file descriptors are eventually closed by the 
Python GC, it just takes a little while since the sockets are part of cyclic
garbage.

  Jp



From daverz at gmail.com  Thu Feb 17 19:27:35 2005
From: daverz at gmail.com (Dave Cook)
Date: Thu, 17 Feb 2005 16:27:35 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050217232419.GC11540@wildfire.net.ic.ac.uk>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021711316be69321@mail.gmail.com>
	<20050217232419.GC11540@wildfire.net.ic.ac.uk>
Message-ID: <7a59f0250502171627bcfb862@mail.gmail.com>

On Thu, 17 Feb 2005 23:24:19 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Is there any possibility there's a firewall between the Nevow middle and
> PB backend that's making TCP RST or ICMPs not work?

When testing, I'm either running both server and client on the same
machine or on machines on the same switch.

> Wait, SSL? Hmm. Have you tried running over straight TCP just to see if
> there's a difference (I'm thinking error handling propagation etc. given
> the layered nature of SSL and comments seen on this list to the effect
> of the Twisted SSL implementation complexity)

I'll try working up a test case, starting without SSL or
authentication, and working my way up.

Dave Cook



From mailinglist at ltsai.com  Thu Feb 17 19:59:52 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Fri, 18 Feb 2005 08:59:52 +0800
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <20050217233731.12282.1783854537.divmod.quotient.2169@ohm>
References: <1108654856.1125.40.camel@sheriffpony>
	<20050217233731.12282.1783854537.divmod.quotient.2169@ohm>
Message-ID: <cv3eig$q9m$1@sea.gmane.org>

Jp Calderone wrote:
> On Thu, 17 Feb 2005 10:40:56 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> 
>>On Thu, 2005-02-17 at 21:00 +0800, Tsai Li Ming wrote:
>>
>>
>>>How serious is this bug? I'm particularly concern about twisted.web.server.
>>
>>1. Servers don't open connections, so it's not relevant there.
>>
>>2. It probably does not cause fd leaks, since python's gc will likely do
>>that. close()ing explicitly is better, obviously.
>>
> 
> 
>   As a rough figure, with a max file descriptors limit of 1024, on Python 2.3.5,
> this tends not to be a problem with connection rates below 100 failed 
> connections per second.  The file descriptors are eventually closed by the 
> Python GC, it just takes a little while since the sockets are part of cyclic
> garbage.
> 
>   Jp

I see what you mean. Upon looking fuerther at the tcp.py, the code 
section is for tcp clients, not "TCP Server Port".

Thanks,
Liming




From maoy at cis.upenn.edu  Fri Feb 18 12:40:41 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Fri, 18 Feb 2005 12:40:41 -0500 (EST)
Subject: [Twisted-Python] database threads dead
Message-ID: <Pine.LNX.4.61.0502181236460.30672@forty-thieves.cis.upenn.edu>

Hi, I'm using twisted.enterprise.adbapi and postgres DB. Sometimes, the 
threads of adbapi just don't respond. There was no error reported as I 
insert stuff into the database, however nothing was inserted. I had to use 
kill  -9 to kill twistd process. However, the main thread was working 
properly. This happened randomly. Any clue?

2.6.10 kernel, ntpl enabled. thx

Yun




From jarrod at vertigrated.com  Fri Feb 18 13:32:17 2005
From: jarrod at vertigrated.com (Jarrod Roberson)
Date: Fri, 18 Feb 2005 13:32:17 -0500
Subject: [Twisted-Python] Need help installing Twisted 1.3 on MacOSX 10.3
	with apple installed python
Message-ID: <c54df3219c5e5542f92a81808298be5c@vertigrated.com>

can't find any straight foward instructions on how to do this

I am a born-again Mac user ( last mac was a 7200 ) just got a Powerbook 
and need to get Twisted working ASAP

thanks in advance




From bob at redivi.com  Fri Feb 18 13:44:01 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 18 Feb 2005 13:44:01 -0500
Subject: [Twisted-Python] Need help installing Twisted 1.3 on MacOSX 10.3
	with apple installed python
In-Reply-To: <c54df3219c5e5542f92a81808298be5c@vertigrated.com>
References: <c54df3219c5e5542f92a81808298be5c@vertigrated.com>
Message-ID: <55d65dda3d639f2ef3509847c04199d2@redivi.com>

On Feb 18, 2005, at 13:32, Jarrod Roberson wrote:

> can't find any straight foward instructions on how to do this
>
> I am a born-again Mac user ( last mac was a 7200 ) just got a 
> Powerbook and need to get Twisted working ASAP

Just like anything else:
sudo python setup.py install

Though you probably want to tack on --install-scripts=/usr/local/bin

-bob




From corydodt at twistedmatrix.com  Sat Feb 19 12:33:09 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Sat, 19 Feb 2005 09:33:09 -0800
Subject: [Twisted-Python] Twisted 1.3.0/Python 2.4/Win32 available
Message-ID: <42177855.9050605@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Uploaded to sf.net site.  Links:

http://twisted.sourceforge.net/Twisted-1.3.0.win32-py2.4.exe
http://twisted.sourceforge.net/Twisted_NoDocs-1.3.0.win32-py2.4.exe

Please update website etc.  Thanks :)

C
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCF3hV3A5SrXAiHQcRAkwIAJ0TCPnaOZjEgZpsRyUMq1X6RDPzWwCggfnB
fI5Dt+hh9fDYPXFTTNT9Fek=
=k5ac
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Sat Feb 19 18:23:09 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 20 Feb 2005 00:23:09 +0100
Subject: [Twisted-Python] message: SSL connection shutdown possibly
	unreliable
Message-ID: <20050219232309.GG7247@opteron.random>

Hello,

I'm calling transport.loseConnection() and I get these errors:

2005/02/20 00:11 CET [cpushare_protocol,0,127.0.0.1] /home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/internet/tcp.py:203: exceptions.UserWarning: SSL connection shutdown possibly unreliable, please upgrade to ver 0.XX

The thing works fine anyway, but I'd like to know what could be going
wrong without calling set_shutdown. Does the "upgrade" refers to openssl
or pyopenssl? I've pyOpenSSL from CVS and a quite recent version of
openssl.

Thanks.



From foom at fuhm.net  Sun Feb 20 12:18:11 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun, 20 Feb 2005 12:18:11 -0500
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <65763CD6-8363-11D9-9DB9-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2005-02-12 19:08:29.950000:
  Bugs opened: 9   Bugs closed: 9   Total open bugs: 336 (+0)
   Urgent: 8 (-2)
   Bug: 134 (+2)
   Feature: 128 (+0)
   Wish: 66 (+0)

New / Reopened Bugs
______________________
                     ==== Urgent ====
[FTP] Strange intermittent failure involving FTP  (2 days ago)
        http://twistedmatrix.com/bugs/issue898 opened by spiv

                     ==== Bug ====
threadpool's _worker holding onto references  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue897 opened by dudley

[PB] datetime support in jelly/unjelly  (3 days ago)
        http://twistedmatrix.com/bugs/issue894 opened by kkinder

[CORE] socket is not closed when connection failed  (3 days ago)
        http://twistedmatrix.com/bugs/issue895 opened by maoy

[WIN32] problems with Twisted-2.0.0a1 on Windows  (6 days ago)
        http://twistedmatrix.com/bugs/issue891 opened by manlio

problems with twisted.python.dist  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue890 opened by manlio

[DOCUMENTATION, WEB] twisted.web docs should talk about request.args 
and similar for render_POST  (5 days ago)
        http://twistedmatrix.com/bugs/issue892 opened by hypatia

                     ==== Feature ====
[DOCUMENTATION] There should be a doc on how to write tests of Twisted 
code  (3 days ago)
        http://twistedmatrix.com/bugs/issue896 opened by spiv

need an API to determine if the reactor is running  (5 days ago)
        http://twistedmatrix.com/bugs/issue893 opened by anthony

Bugs Closed
______________________
                     ==== Urgent ====
[CORE] backwardsCompatImplements bug  (3 weeks ago)
        http://twistedmatrix.com/bugs/issue873 opened by jknight, closed 
by jknight

[TRIAL] Errors flushed in tearDown still cause test methods to fail  (3 
months ago)
        http://twistedmatrix.com/bugs/issue785 opened by exarkun, closed 
by exarkun

                     ==== Bug ====
threadpool's _worker holding onto references  (2 days ago)
        http://twistedmatrix.com/bugs/issue897 opened by dudley, closed 
by spiv

[CONCH] test_cftp fails for almost any environment other than an svn 
checkout  (2 months ago)
        http://twistedmatrix.com/bugs/issue830 opened by exarkun, closed 
by spiv

problems with twisted.python.dist  (6 days ago)
        http://twistedmatrix.com/bugs/issue890 opened by manlio, closed 
by radix

[MAIL] smtp.Address class can't deal with NULL address - breaks bounces 
  (11 months ago)
        http://twistedmatrix.com/bugs/issue541 opened by iko, closed by 
exarkun

[NAMES] [PATCH] twisted.names can't look up information if a domain has 
AAAA or A6 records and the system doesn't support ipv6  (1 month ago)
        http://twistedmatrix.com/bugs/issue852 opened by marienz, closed 
by exarkun

                     ==== Feature ====
[MAIL] Proposed patch to allow smtp.sendmail() to send mail to 
non-standard ports  (2 months ago)
        http://twistedmatrix.com/bugs/issue806 opened by bostik, closed 
by exarkun

[DOCUMENTATION] Update FAQ about unicode strings  (9 months ago)
        http://twistedmatrix.com/bugs/issue617 opened by loic, closed by 
hypatia




From snacktime at gmail.com  Sun Feb 20 15:24:40 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 20 Feb 2005 12:24:40 -0800
Subject: [Twisted-Python] Twisted broken in debian testing
Message-ID: <1f060c4c05022012243e9993f1@mail.gmail.com>

It seems that the python profile module has been moved to the non-free
section in debian, and the twisted package requires it but doesn't
list it as a dependancy.  The result is that the twisted package is
broken unless you add the non-free section to your sources.list and
install python2.3-profile.

>From my understanding, if twisted continues to require profile, then
twisted has to move to non-free also?  Is the profile module really
needed?

Chris



From mary-twisted at puzzling.org  Sun Feb 20 16:41:44 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 21 Feb 2005 08:41:44 +1100
Subject: [Twisted-Python] Twisted broken in debian testing
In-Reply-To: <1f060c4c05022012243e9993f1@mail.gmail.com>
References: <1f060c4c05022012243e9993f1@mail.gmail.com>
Message-ID: <20050220214144.GA12489@home.puzzling.org>

On Sun, Feb 20, 2005, snacktime wrote:
> > From my understanding, if twisted continues to require profile, then
> twisted has to move to non-free also?  Is the profile module really
> needed?

I think if a package has a non-free dependency, it moves into contrib.

I see you already filed
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=296181 -- see also the
(closed) http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=294493 -- it
looks like a new version of Twisted has already gone into unstable with
a conditional import of the profiler.

-Mary



From andrea at cpushare.com  Sun Feb 20 23:50:16 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 05:50:16 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a deferred
	to fire?
Message-ID: <20050221045016.GQ7247@opteron.random>

My code is like this:

	def stringReceived(string):
		d = somesqlquery(string).addCallback(somecallback)

Now before I can accept more data from the next stringReceived, I have
to validate the "string" with the "somecallback". I don't want to read
more data from the kernel _socket_ until I've the result of
somecallback.

The example in the docs is like this:

-------------------------
class FingerProtocol(basic.LineReceiver):
    def lineReceived(self, user):
        self.factory.getUser(user
        ).addErrback(lambda _: "Internal error in server"
        ).addCallback(lambda m:
            (self.transport.write(m+"\r\n"),
             self.transport.loseConnection()))
[..]
we would have to fetch result from a remote Oracle? Or from the web?
-------------------------

But as far as I can tell the above also is broken and it won't wait for
the deferred to fire, so two of those queries could be invoked if the
client side is malicious and it sends two lines in one packet and that
could screwup the server. It'll work only as long as the clients aren't
malicious.

I really can't see how the reactor could ever wait for the deferred
returned by GetUser and how could lineReceived being throttled in the
above example. So I think the above example needs fixing too.

I need one of those below two solutions:

1) something like protocol.transport.removeReader() to call before
returning from stringReceived (this can be allowed to be different for
stringReceived and dataReceived, since stringReceived will have to stop
the already read data too, and in turn for stringReceived it could be a
protocol.removeReader() that will call protocol.transport.removeReader
internally)

2) I could return a deferred from stringReceived and have the reactor
deregister the fd corresponding to the transport that returned a
deferred until the deferred fires, this is a less finegrined solution
but it's quite handy to code with and it would match the Nevow style of
waiting deferreds

I could try to workaround in my app by stacking some local buffering
with removeReader in the reactor, but it's probably simpler to fix
twisted for it instead.

There must be a way to throttle the input at the kernel level, the recv
syscall must not be called while the deferred is outstanding.

Please help thanks, I'm stuck on this right now...



From foom at fuhm.net  Mon Feb 21 00:08:43 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 21 Feb 2005 00:08:43 -0500
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221045016.GQ7247@opteron.random>
References: <20050221045016.GQ7247@opteron.random>
Message-ID: <A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>


On Feb 20, 2005, at 11:50 PM, Andrea Arcangeli wrote:

> There must be a way to throttle the input at the kernel level, the recv
> syscall must not be called while the deferred is outstanding.
>
> Please help thanks, I'm stuck on this right now...


I assume you're using NetstringReceiver? You want to implement the 
Producer interface: pauseProducing/resumeProducing/stopProducing, 
similar to how LineReceiver implements it. (That is, submit a patch to 
NetstringReceiver implementing it).  LineReceiver's pauseProducing does 
exactly what you want: 1) stops the socket from being read more and 2) 
doesn't call lineReceived any more even if there are more lines already 
buffered.

James




From andrew-twisted at puzzling.org  Mon Feb 21 00:13:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 21 Feb 2005 16:13:53 +1100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221045016.GQ7247@opteron.random>
References: <20050221045016.GQ7247@opteron.random>
Message-ID: <20050221051353.GN1374@localhost.localdomain>

On Mon, Feb 21, 2005 at 05:50:16AM +0100, Andrea Arcangeli wrote:
[...]
> 
> The example in the docs is like this:
> 
> -------------------------
> class FingerProtocol(basic.LineReceiver):
>     def lineReceived(self, user):
>         self.factory.getUser(user
>         ).addErrback(lambda _: "Internal error in server"
>         ).addCallback(lambda m:
>             (self.transport.write(m+"\r\n"),
>              self.transport.loseConnection()))
> [..]
> we would have to fetch result from a remote Oracle? Or from the web?
> -------------------------
> 
> But as far as I can tell the above also is broken and it won't wait for
> the deferred to fire, so two of those queries could be invoked if the
> client side is malicious and it sends two lines in one packet and that
> could screwup the server. It'll work only as long as the clients aren't
> malicious.

I don't think it matters if the two lines arrive in the same packet or not;
if the lines arrive before the getUser deferred fires, it will fire multiple
queries, regardless of the exact packets involved.  In this case maybe a
flag should be in the protocol after the first lineReceived event... any
future rawDataReceived events (after call self.setRawMode()) could then be
ignored.  Or if you're more paranoid, it could drop the connection and try
cancel the in-progress getUser operation.

> I really can't see how the reactor could ever wait for the deferred
> returned by GetUser and how could lineReceived being throttled in the
> above example. So I think the above example needs fixing too.
> 
> I need one of those below two solutions:
> 
> 1) something like protocol.transport.removeReader() to call before
[...]

I think the transport's pauseProducing call will do what you want, here.
And resumeProducing when you're ready again.

-Andrew.




From andrew-twisted at puzzling.org  Mon Feb 21 00:21:06 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 21 Feb 2005 16:21:06 +1100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
References: <20050221045016.GQ7247@opteron.random>
	<A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <20050221052106.GO1374@localhost.localdomain>

On Mon, Feb 21, 2005 at 12:08:43AM -0500, James Y Knight wrote:
[...]
> NetstringReceiver implementing it).  LineReceiver's pauseProducing does 
> exactly what you want: 1) stops the socket from being read more and 2) 
> doesn't call lineReceived any more even if there are more lines already 
> buffered.

Ooh, I didn't know LineReceiver had that feature.  Nice!

-Andrew.




From andrea at cpushare.com  Mon Feb 21 10:33:32 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 16:33:32 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
References: <20050221045016.GQ7247@opteron.random>
	<A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <20050221153332.GR7247@opteron.random>

On Mon, Feb 21, 2005 at 12:08:43AM -0500, James Y Knight wrote:
> 
> On Feb 20, 2005, at 11:50 PM, Andrea Arcangeli wrote:
> 
> >There must be a way to throttle the input at the kernel level, the recv
> >syscall must not be called while the deferred is outstanding.
> >
> >Please help thanks, I'm stuck on this right now...
> 
> 
> I assume you're using NetstringReceiver? You want to implement the 
> Producer interface: pauseProducing/resumeProducing/stopProducing, 
> similar to how LineReceiver implements it. (That is, submit a patch to 
> NetstringReceiver implementing it).  LineReceiver's pauseProducing does 
> exactly what you want: 1) stops the socket from being read more and 2) 
> doesn't call lineReceived any more even if there are more lines already 
> buffered.

I didn't know about this linereceiver feature, very nice. I'm using
int32stringreceiver which misses it like netstringreceiver (I was
definitely sure something was missing in twisted after reading all the
code of int32stringreceiver), so I'll try to implement it following the
linereceiver example.

Many thanks to get me on the right track!



From andrea at cpushare.com  Mon Feb 21 10:33:37 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 16:33:37 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221052106.GO1374@localhost.localdomain>
References: <20050221045016.GQ7247@opteron.random>
	<A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
	<20050221052106.GO1374@localhost.localdomain>
Message-ID: <20050221153337.GS7247@opteron.random>

On Mon, Feb 21, 2005 at 04:21:06PM +1100, Andrew Bennetts wrote:
> On Mon, Feb 21, 2005 at 12:08:43AM -0500, James Y Knight wrote:
> [...]
> > NetstringReceiver implementing it).  LineReceiver's pauseProducing does 
> > exactly what you want: 1) stops the socket from being read more and 2) 
> > doesn't call lineReceived any more even if there are more lines already 
> > buffered.
> 
> Ooh, I didn't know LineReceiver had that feature.  Nice!

Very nice indeed.



From andrea at cpushare.com  Mon Feb 21 10:39:07 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 16:39:07 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221051353.GN1374@localhost.localdomain>
References: <20050221045016.GQ7247@opteron.random>
	<20050221051353.GN1374@localhost.localdomain>
Message-ID: <20050221153907.GT7247@opteron.random>

On Mon, Feb 21, 2005 at 04:13:53PM +1100, Andrew Bennetts wrote:
> On Mon, Feb 21, 2005 at 05:50:16AM +0100, Andrea Arcangeli wrote:
> [...]
> > 
> > The example in the docs is like this:
> > 
> > -------------------------
> > class FingerProtocol(basic.LineReceiver):
> >     def lineReceived(self, user):
> >         self.factory.getUser(user
> >         ).addErrback(lambda _: "Internal error in server"
> >         ).addCallback(lambda m:
> >             (self.transport.write(m+"\r\n"),
> >              self.transport.loseConnection()))
> > [..]
> > we would have to fetch result from a remote Oracle? Or from the web?
> > -------------------------
> > 
> > But as far as I can tell the above also is broken and it won't wait for
> > the deferred to fire, so two of those queries could be invoked if the
> > client side is malicious and it sends two lines in one packet and that
> > could screwup the server. It'll work only as long as the clients aren't
> > malicious.
> 
> I don't think it matters if the two lines arrive in the same packet or not;
> if the lines arrive before the getUser deferred fires, it will fire multiple
> queries, regardless of the exact packets involved.  In this case maybe a
> flag should be in the protocol after the first lineReceived event... any

Well, it will raise an exception in transport.write at the very least,
in theory unhandled exceptions shouldn't happen. But the reason I
suggested to fix it, it to get people get the right mindset, unless they
know what they're doing, they should always call
LineReceiver.pauseProducing before executing the getUser(user),
otherwise a _real_ app that copied the above code, may get wrong for
more than just an exception.

> I think the transport's pauseProducing call will do what you want, here.
> And resumeProducing when you're ready again.

Yes, if I were using a unbuffered input.

Thanks a lot for the help!



From andrea at cpushare.com  Mon Feb 21 12:46:18 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 18:46:18 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221153332.GR7247@opteron.random>
References: <20050221045016.GQ7247@opteron.random>
	<A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
	<20050221153332.GR7247@opteron.random>
Message-ID: <20050221174618.GX7247@opteron.random>

On Mon, Feb 21, 2005 at 04:33:32PM +0100, Andrea Arcangeli wrote:
> code of int32stringreceiver), so I'll try to implement it following the
> linereceiver example.

Ok here we go, I even found a severe bug in the linereceiver code and I
fixed it as well. The bug in linereceiver happens like this:

	resumeProducing()
		calls self.transport.resumeProducing
		calls self.dataReceived
			calls self.stringReceived
				calls self.stopProducing
					calls self.transport.stopProducing
					runs some sql query again
		calls self.transport.resumeProducing <- BUG, invalidated the above stopProducing

The above bug would for sure screwup two sql queries in a raw (i.e.
the deferred callback executing another sql query). Fix is the below one
liner, it's enough to call dataReceived as the last thing in
resumeProducing (I assume for the lower layer the effect of
self.transport.resumeProducing; self.transport.stopProducing will be a
noop as long as we never schedule in between, i.e. never return in
between)

Please checkin the below into trunk. My testcase now passes perfectly
(I'll leave the debug code live so that if something goes wrong I get an
exception and the client is disconnected). I was too lazy to implement
for netstringreceiver (to me netstring receiver looks mostly a waste of
bandwidth and an unnecessary complexity ;). I guess netstring recevier
is more ngrep friendy, but I can't debug with ngrep anyway since it's
all under ssl with certificate validation here. But at least now the
reentrancy bug is fixed and it should be easy to extend to
nestringreceiver if needed.

Thanks for the help!

Index: Twisted/twisted/protocols/basic.py
===================================================================
--- Twisted/twisted/protocols/basic.py	(revision 13001)
+++ Twisted/twisted/protocols/basic.py	(working copy)
@@ -166,9 +166,23 @@
         """
         return error.ConnectionLost('Line length exceeded')
     
+class PauseProducer(object):
+    paused = False
 
+    def pauseProducing(self):
+        self.paused = True
+        self.transport.pauseProducing()
 
-class LineReceiver(protocol.Protocol):
+    def resumeProducing(self):
+        self.paused = False
+        self.transport.resumeProducing()
+        self.dataReceived('')
+
+    def stopProducing(self):
+        self.paused = True
+        self.transport.stopProducing()
+
+class LineReceiver(protocol.Protocol, PauseProducer):
     """A protocol that receives lines and/or raw data, depending on mode.
     
     In line mode, each line that's received becomes a callback to
@@ -188,7 +202,6 @@
     __buffer = ''
     delimiter = '\r\n'
     MAX_LENGTH = 16384
-    paused = False
     
     def clearLineBuffer(self):
         """Clear buffered data."""
@@ -279,21 +292,8 @@
         """
         return self.transport.loseConnection()
 
-    def pauseProducing(self):
-        self.paused = True
-        self.transport.pauseProducing()
 
-    def resumeProducing(self):
-        self.paused = False
-        self.dataReceived('')
-        self.transport.resumeProducing()
-
-    def stopProducing(self):
-        self.paused = True
-        self.transport.stopProducing()
-
-
-class Int32StringReceiver(protocol.Protocol):
+class Int32StringReceiver(protocol.Protocol, PauseProducer):
     """A receiver for int32-prefixed strings.
 
     An int32 string is a string prefixed by 4 bytes, the 32-bit length of
@@ -314,7 +314,7 @@
         """Convert int32 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 3:
+        while len(self.recvd) > 3 and not self.paused:
             length ,= struct.unpack("!i",self.recvd[:4])
             if length > self.MAX_LENGTH:
                 self.transport.loseConnection()
@@ -331,7 +331,7 @@
         self.transport.write(struct.pack("!i",len(data))+data)
 
 
-class Int16StringReceiver(protocol.Protocol):
+class Int16StringReceiver(protocol.Protocol, PauseProducer):
     """A receiver for int16-prefixed strings.
 
     An int16 string is a string prefixed by 2 bytes, the 16-bit length of
@@ -351,7 +351,7 @@
         """Convert int16 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 1:
+        while len(self.recvd) > 1 and not self.paused:
             length = (ord(self.recvd[0]) * 256) + ord(self.recvd[1])
             if len(self.recvd) < length+2:
                 break



From glyph at divmod.com  Mon Feb 21 15:47:57 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 21 Feb 2005 20:47:57 GMT
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221174618.GX7247@opteron.random>
Message-ID: <20050221204757.12282.856735952.divmod.quotient.9108@ohm>

On Mon, 21 Feb 2005 18:46:18 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:

> Ok here we go, I even found a severe bug in the linereceiver code and I
> fixed it as well. The bug in linereceiver happens like this:

Any chance that you could include some unit tests for the behavior you're expecting?  I think it might need to be fixed a different way.  For example:

> Index: Twisted/twisted/protocols/basic.py
> ===================================================================
> --- Twisted/twisted/protocols/basic.py	(revision 13001)
> +++ Twisted/twisted/protocols/basic.py	(working copy)
     .
     .
     .
>          self.recvd = self.recvd + recd
> -        while len(self.recvd) > 1:
> +        while len(self.recvd) > 1 and not self.paused:

This seems like it could lead to some unpleasantly large (i.e. quadratic-time concatenation) buffers strings being left around if you pause one of these receivers and then forget to unpause it, or even just if your peer happens to be sending data very rapidly.



From andrea at cpushare.com  Mon Feb 21 16:36:44 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 22:36:44 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221204757.12282.856735952.divmod.quotient.9108@ohm>
References: <20050221174618.GX7247@opteron.random>
	<20050221204757.12282.856735952.divmod.quotient.9108@ohm>
Message-ID: <20050221213644.GD7247@opteron.random>

On Mon, Feb 21, 2005 at 08:47:57PM +0000, glyph at divmod.com wrote:
> On Mon, 21 Feb 2005 18:46:18 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
> 
> > Ok here we go, I even found a severe bug in the linereceiver code and I
> > fixed it as well. The bug in linereceiver happens like this:
> 
> Any chance that you could include some unit tests for the behavior
> you're expecting?  I think it might need to be fixed a different way.
> For example:

Using the echoserver/client as base should be good enough to test this.
>From the client send a flood of lines, and from the server call
pauseProducing() after the first line has been received. Then verify the
server doesn't receive the other lines and that they sit in the tcp recv
queue.

> > -        while len(self.recvd) > 1:
> > +        while len(self.recvd) > 1 and not self.paused:
> 
> This seems like it could lead to some unpleasantly large (i.e.
> quadratic-time concatenation) buffers strings being left around if you
> pause one of these receivers and then forget to unpause it, or even

Won't the data be freed along with the protocol when the connection is
closed? The protocol should go away when the connection is closed.

> just if your peer happens to be sending data very rapidly.

The high bound of in flight receive data for each int32 protocol is set
to 99999 (protocol.MAX_LENGTH), and the reactor will read with a limited
buffer too. So I don't see any problem as long as
transport.pauseProducing() does what's expected to do (i.e. to stop
polling the socket and to stop receiving data from the wire).

Anyway if there's still a problem, let's ignore my problem, and let's
only focus on the LineReceiver implementation that is already in current
twisted. As long as LineReceiver works my patch is going to be fine.

There was a reentrancy bug in LineReceiver but I already fixed it.



From exarkun at divmod.com  Mon Feb 21 22:33:22 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 22 Feb 2005 03:33:22 GMT
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221213644.GD7247@opteron.random>
Message-ID: <20050222033322.12282.2037604333.divmod.quotient.9663@ohm>

On Mon, 21 Feb 2005 22:36:44 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
>On Mon, Feb 21, 2005 at 08:47:57PM +0000, glyph at divmod.com wrote:
> > On Mon, 21 Feb 2005 18:46:18 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
> > 
> > > Ok here we go, I even found a severe bug in the linereceiver code and I
> > > fixed it as well. The bug in linereceiver happens like this:
> > 
> > Any chance that you could include some unit tests for the behavior
> > you're expecting?  I think it might need to be fixed a different way.
> > For example:
> 
> Using the echoserver/client as base should be good enough to test this.
> >From the client send a flood of lines, and from the server call
> pauseProducing() after the first line has been received. Then verify the
> server doesn't receive the other lines and that they sit in the tcp recv
> queue.

  That's not a unit test.  Unit tests are described here:

    http://c2.com/cgi/wiki?UnitTest

  Jp



From andrea at cpushare.com  Mon Feb 21 22:48:43 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 22 Feb 2005 04:48:43 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050222033322.12282.2037604333.divmod.quotient.9663@ohm>
References: <20050221213644.GD7247@opteron.random>
	<20050222033322.12282.2037604333.divmod.quotient.9663@ohm>
Message-ID: <20050222034843.GE7247@opteron.random>

On Tue, Feb 22, 2005 at 03:33:22AM +0000, Jp Calderone wrote:
>   That's not a unit test.  Unit tests are described here:
> 
>     http://c2.com/cgi/wiki?UnitTest

I've no time to write it sorry.



From andrew-twisted at puzzling.org  Mon Feb 21 23:35:40 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Feb 2005 15:35:40 +1100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050222034843.GE7247@opteron.random>
References: <20050221213644.GD7247@opteron.random>
	<20050222033322.12282.2037604333.divmod.quotient.9663@ohm>
	<20050222034843.GE7247@opteron.random>
Message-ID: <20050222043540.GX1374@localhost.localdomain>

On Tue, Feb 22, 2005 at 04:48:43AM +0100, Andrea Arcangeli wrote:
> On Tue, Feb 22, 2005 at 03:33:22AM +0000, Jp Calderone wrote:
> >   That's not a unit test.  Unit tests are described here:
> > 
> >     http://c2.com/cgi/wiki?UnitTest
> 
> I've no time to write it sorry.

I've filed http://twistedmatrix.com/bugs/issue899 so this issue doesn't get
forgotten.

-Andrew.




From andrea at cpushare.com  Tue Feb 22 12:12:30 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 22 Feb 2005 18:12:30 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050222043540.GX1374@localhost.localdomain>
References: <20050221213644.GD7247@opteron.random>
	<20050222033322.12282.2037604333.divmod.quotient.9663@ohm>
	<20050222034843.GE7247@opteron.random>
	<20050222043540.GX1374@localhost.localdomain>
Message-ID: <20050222171230.GN7247@opteron.random>

On Tue, Feb 22, 2005 at 03:35:40PM +1100, Andrew Bennetts wrote:
> I've filed http://twistedmatrix.com/bugs/issue899 so this issue doesn't get
> forgotten.

Thanks a lot!

What the pauseProducing does is fine for my objective of stopping the
client and to restart it from both errback/callback, but what it does is
possibly too aggressive.

On the lines of glyph's email, sometime what could be needed is an
option to _only_ mask the POLLIN, not necessairly all other bitflags, so
that I could still receive a disconnect event.

In some ways it might be good not to get a disconnect during a deferred,
but OTOH the fact it doesn't notice a disconnect, prevents to leave the
pauseProducing enabled for an extended period of time, while I could
really do that in theory (I can't do that or I would lose the disconnect
event with pauseProducing).

But overall this would be an additional (minor) feature, quite
orthogonal with the "hard" approach of pauseProducing. And having the
API of int32/int16 in sync with linereceiver sounds a better approach
for the short term, plus the reentrancy bugfix sounds good to have.

Thanks everyone for the help and sorry for not having much time to
provide unit test.



From boomberschloss at yahoo.com  Wed Feb 23 10:39:47 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Wed, 23 Feb 2005 07:39:47 -0800 (PST)
Subject: [Twisted-Python] some general questions
Message-ID: <20050223153947.34358.qmail@web53102.mail.yahoo.com>

Hello,

I'm considering to write a commercial network
application in Twisted, and would like to understand
it a little better. I have several questions for which
I didn't find answers by skimming over the
documentation. I'd be happy to add them to the FAQ
later!

1. I've used Pyro in the past for networking in
Python, and it has a nice name server that enables
each part of the application know the others by acting
as a central directory of server addresses. Is there
anything comparable in Twisted, or maybe a different
idiom, other than specifying explicitly in the client
configuration the addresses of servers?

2. Pyro also uses a UDP broadcast mechanism to make
the name server accessible from every computer in a
network, which relieves clients from requiring an
explicit specification of the name server's location,
which makes it possible to write more friendly,
out-of-the-box applications. Is there an
implementation of such a thing in Twisted? If not, how
complicated is it to make?

3. In the howtos, all client logic is defined before
running a reactor (in the protocol or using
deferreds); In the case of a GUI client, I would like
communication with servers to be trigerred by user
actions. How do I define such events?

4. How do I make clients that are also servers? For
example, a GUI that acts as a front-end to remote
servers, but also accepts random requests (such as
chat).

5. It is often desired to send a message to a remote
server without requiring any response other than a
confirmation that the message was sent. In a previous
project, I made a mechanism that accepts such
messages, and tries to send them periodically until it
succeeds. The sending function is not concerned with
the consequences of the request because it is assured
that the message with be eventually sent, thus it can
send such messages using a simple function call, and
without worrying about the results (i.e. catching
exceptions, or adding errbacks). Is there anything
comparable in Twisted?

6. As I understand it there are three ways to
construct a Twisted application: (i) writing a tap
plug-in (I think) and using mktap, then running it
with twistd, (ii) writing an application configuration
file (tac), then running with twistd, and (iii) making
a runnable script using reactor.run. What are the
benefits of writing a tap plug-in compared with an
application configuration file, and what are the
benefits of using twistd compared with making an
executable script?

7. I want to eventually produce a stand-alone
installable application that will be expected to run
out-of-the-box. I thought about using py2exe, but
couldn't find much information about using it and
Twisted together. Are there other common methods to
achieve stand-aloneness with Twisted?

Thanks,

Joe



		
__________________________________ 
Do you Yahoo!? 
Read only the mail you want - Yahoo! Mail SpamGuard. 
http://promotions.yahoo.com/new_mail 



From kid at kendermedia.com  Wed Feb 23 11:45:16 2005
From: kid at kendermedia.com (Kevin Dangoor)
Date: Wed, 23 Feb 2005 11:45:16 -0500
Subject: [Twisted-Python] some general questions
In-Reply-To: <20050223153947.34358.qmail@web53102.mail.yahoo.com>
References: <20050223153947.34358.qmail@web53102.mail.yahoo.com>
Message-ID: <421CB31C.1050609@kendermedia.com>

Joachim Boomberschloss wrote:

>1. I've used Pyro in the past for networking in
>Python, and it has a nice name server that enables
>each part of the application know the others by acting
>as a central directory of server addresses. Is there
>anything comparable in Twisted, or maybe a different
>idiom, other than specifying explicitly in the client
>configuration the addresses of servers?
>  
>
Twisted Spread offers the Perspective Broker, which I think would be 
similar to Pyro:
http://twistedmatrix.com/products/spread

It's async, which is probably a big difference in programming style. 
What I've read about Pyro also seems to imply shuttling of code back and 
forth which is not something PB does.

>2. Pyro also uses a UDP broadcast mechanism to make
>the name server accessible from every computer in a
>network, which relieves clients from requiring an
>explicit specification of the name server's location,
>which makes it possible to write more friendly,
>out-of-the-box applications. Is there an
>implementation of such a thing in Twisted? If not, how
>complicated is it to make?
>  
>
Some people have integrated pyzeroconf with twisted. Zeroconf (aka 
Rendezvous) is a protocol for discovering services on your network (it's 
how Apple's products like iTunes work).

>3. In the howtos, all client logic is defined before
>running a reactor (in the protocol or using
>deferreds); In the case of a GUI client, I would like
>communication with servers to be trigerred by user
>actions. How do I define such events?
>  
>
Not sure I understand the question here. I don't believe that using 
Twisted changes how you receive your events. It changes all of your 
network access to be asynchronous, but otherwise the rest of your code 
sure work as you're used to.

>4. How do I make clients that are also servers? For
>example, a GUI that acts as a front-end to remote
>servers, but also accepts random requests (such as
>chat).
>  
>
You just set up your client software to listen on a port, providing a 
particular service.

>7. I want to eventually produce a stand-alone
>installable application that will be expected to run
>out-of-the-box. I thought about using py2exe, but
>couldn't find much information about using it and
>Twisted together. Are there other common methods to
>achieve stand-aloneness with Twisted?
>  
>
py2exe works fine with Twisted (as does py2app on the Mac)

Kevin



From maoy at cis.upenn.edu  Wed Feb 23 17:00:31 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Wed, 23 Feb 2005 17:00:31 -0500 (EST)
Subject: [Twisted-Python] Where to catch ssl error exception?
Message-ID: <Pine.LNX.4.61.0502231658510.18043@forty-thieves.cis.upenn.edu>

Suppose I'm the ssl server and a client didn't follow ssl protocol 
somewhere, I can get an exception like following. The qustion is how can 
I catch it?

Yun


2005/02/23 16:49 EST [HTTPChannel,21907,xx.xxx.xx.x] Traceback (most 
recent call last):
           File "/usr/lib/python2.3/site-packages/twisted/python/log.py", 
line 65, in callWithLogger
             callWithContext({"system": lp}, func, *args, **kw)
           File "/usr/lib/python2.3/site-packages/twisted/python/log.py", 
line 52, in callWithContext
             return context.call({ILogContext: newCtx}, func, *args, **kw)
           File 
"/usr/lib/python2.3/site-packages/twisted/python/context.py", line 43, in 
callWithContext
             return func(*args,**kw)
           File 
"/usr/lib/python2.3/site-packages/twisted/internet/default.py", line 535, 
in _doReadOrWrite
             why = getattr(selectable, method)()
         --- <exception caught here> ---
           File "/usr/lib/python2.3/site-packages/twisted/internet/tcp.py", 
line 98, in doRead
             return Connection.doRead(self)
           File "/usr/lib/python2.3/site-packages/twisted/internet/tcp.py", 
line 239, in doRead
             data = self.socket.recv(self.bufferSize)
         OpenSSL.SSL.Error: [('SSL routines', 'SSL23_READ', 'ssl handshake 
failure')]


Yun




From exarkun at divmod.com  Wed Feb 23 23:09:47 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 24 Feb 2005 04:09:47 GMT
Subject: [Twisted-Python] Where to catch ssl error exception?
In-Reply-To: <Pine.LNX.4.61.0502231658510.18043@forty-thieves.cis.upenn.edu>
Message-ID: <20050224040947.12282.769440872.divmod.quotient.13795@ohm>

On Wed, 23 Feb 2005 17:00:31 -0500 (EST), Yun Mao <maoy at cis.upenn.edu> wrote:
>Suppose I'm the ssl server and a client didn't follow ssl protocol 
> somewhere, I can get an exception like following. The qustion is how can 
> I catch it?
> 

  Twisted 1.3 doesn't make this easily possible.  You could jump through 
some hoops to notice the SSL.Error with a custom log observer in conjunction
with a connectionLost callback.  In 2.0, connectionLost will simply be handed 
an error indicating the SSL problem and nothing will be logged by default.  
Short of replacing the default log observer entirely with one which does not 
log SSL errors, there is no way to prevent tracebacks like the one you included
from ending up in the log.  These tracebacks do not indicate any further problem 
than the one they describe.  That is to say, something has gone wrong on the SSL
layer, and the connection is going to be lost no matter what you do; it is 
unfortunate that the SSL error cannot be silenced, but in logging it, Twisted is 
indicating nothing more serious than that the connection is about to be lost.

  If you only need notification of the lost connection, not details regarding 
the specifics of the SSL failure, connectionLost in 1.3 should already provide 
you with enough information.

  Jp



From smilner at trinityz.com  Thu Feb 24 11:43:35 2005
From: smilner at trinityz.com (Steve Milner)
Date: Thu, 24 Feb 2005 11:43:35 -0500
Subject: [Twisted-Python] Help With Twisted as a Client (newbie warning)
In-Reply-To: <1108666158.1129.61.camel@sheriffpony>
References: <4214C58D.6030005@trinityz.com>
	<1108666158.1129.61.camel@sheriffpony>
Message-ID: <421E0437.2070105@trinityz.com>

Itamar Shtull-Trauring wrote:

>On Thu, 2005-02-17 at 11:25 -0500, Steve Milner wrote:
>
>  
>
>>factory.clients = []
>>sslFactory = ClientContextFactory()
>>application = service.Application("xmlclient")
>>reactor.connectSSL("__example__.com", 1026, factory, sslFactory)
>></snip>
>>
>>Is there a way I can access xmlxlient inside application?
>>    
>>
>
>The application object is not used for that (and certainly can't be used
>if it doesn't have a reference to the factory, it doesn't magically get
>one). Hand a reference to the factory to whichever objects wishes to
>control the instance.
>
>
>  
>
Thanks for the reply. I'm not sure I compleatly follow what you mean. 
Doing the following doesn't seem to work as it yeilds  [Failure 
instance: Traceback: exceptions.AttributeError, xmlclient instance has 
no __call__ method .....

<snip>
factory = ClientFactory()

factory.clients = []
sslFactory = ClientContextFactory()
client = xmlclient()
factory.protocol = client
application = service.Application(client)
</snip>

I also tried

<snip>
factory = ClientFactory()

factory.clients = []
sslFactory = ClientContextFactory()
client = xmlclient()
factory.protocol = xmlclient
application = service.Application(client)
</snip>

which connects but seems to be using a different instance of the  
xmlclient object. How can I get access to the xmlclient object inside 
the factory?

Thanks!
Steve



From maoy at cis.upenn.edu  Thu Feb 24 13:25:04 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 24 Feb 2005 13:25:04 -0500 (EST)
Subject: [Twisted-Python] database threads dead
In-Reply-To: <Pine.LNX.4.61.0502181236460.30672@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502181236460.30672@forty-thieves.cis.upenn.edu>
Message-ID: <Pine.LNX.4.61.0502241323260.15953@forty-thieves.cis.upenn.edu>

Once that happened because I restarted my postgres db. Anybody knows 
what's the correct behavior when this happens? Will the dbpool reconnect 
instead of using the old connections?

Yun


On Fri, 18 Feb 2005, Yun Mao wrote:

> Hi, I'm using twisted.enterprise.adbapi and postgres DB. Sometimes, the 
> threads of adbapi just don't respond. There was no error reported as I insert 
> stuff into the database, however nothing was inserted. I had to use kill  -9 
> to kill twistd process. However, the main thread was working properly. This 
> happened randomly. Any clue?
>
> 2.6.10 kernel, ntpl enabled. thx
>
> Yun
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From maoy at cis.upenn.edu  Thu Feb 24 13:29:21 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 24 Feb 2005 13:29:21 -0500 (EST)
Subject: [Twisted-Python] What's the standard way to catch signals in
	twisted?
Message-ID: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>

For example, I want to add some specific handlers SIGHUP, SIGINT in 
addition to what twistd have. How to?

Thanks!

Yun




From troll at pld-linux.org  Thu Feb 24 13:38:26 2005
From: troll at pld-linux.org (Michal Chruszcz)
Date: Thu, 24 Feb 2005 19:38:26 +0100
Subject: [Twisted-Python] database threads dead
In-Reply-To: <Pine.LNX.4.61.0502241323260.15953@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502181236460.30672@forty-thieves.cis.upenn.edu>
	<Pine.LNX.4.61.0502241323260.15953@forty-thieves.cis.upenn.edu>
Message-ID: <200502241938.26874@tintia.doriath>

It seems like on Thursday 24 of February 2005 19:25, Yun Mao typed:
> Once that happened because I restarted my postgres db. Anybody knows
> what's the correct behavior when this happens? Will the dbpool reconnect
> instead of using the old connections?

See my topic "twisted.enterprise.adbapi and connection pool problem" - I had 
the same problem.
-- 
Michal Chruszcz -=- Seen at http://1lo.sanok.pl/~troll/gallery.php



From itamar at itamarst.org  Thu Feb 24 14:20:23 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Feb 2005 14:20:23 -0500
Subject: [Twisted-Python] What's the standard way to catch signals in
	twisted?
In-Reply-To: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>
Message-ID: <1109272823.13530.116.camel@sheriffpony>

On Thu, 2005-02-24 at 13:29 -0500, Yun Mao wrote:
> For example, I want to add some specific handlers SIGHUP, SIGINT in 
> addition to what twistd have. How to?

Do you really want signal handlers, or do you want to do stuff on
shutdown? If you want to do stuff on shutdown, just add code in your
service's stopService.




From maoy at cis.upenn.edu  Thu Feb 24 15:07:00 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 24 Feb 2005 15:07:00 -0500 (EST)
Subject: [Twisted-Python] What's the standard way to catch signals in
	twisted?
In-Reply-To: <1109272823.13530.116.camel@sheriffpony>
References: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>
	<1109272823.13530.116.camel@sheriffpony>
Message-ID: <Pine.LNX.4.61.0502241505350.8412@forty-thieves.cis.upenn.edu>


>
> Do you really want signal handlers, or do you want to do stuff on
> shutdown? If you want to do stuff on shutdown, just add code in your
> service's stopService.
>

Both. E.g, I'd like to reload a couple of configuration files when I 
receive SIGHUP.

Yun




From itamar at itamarst.org  Thu Feb 24 15:22:19 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Feb 2005 15:22:19 -0500
Subject: [Twisted-Python] What's the standard way to catch signals in
	twisted?
In-Reply-To: <Pine.LNX.4.61.0502241505350.8412@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>
	<1109272823.13530.116.camel@sheriffpony>
	<Pine.LNX.4.61.0502241505350.8412@forty-thieves.cis.upenn.edu>
Message-ID: <1109276539.13536.118.camel@sheriffpony>

On Thu, 2005-02-24 at 15:07 -0500, Yun Mao wrote:

> Both. E.g, I'd like to reload a couple of configuration files when I 
> receive SIGHUP

If you just want to replace Twisted's signal handlers, run
signal.signal() as usual in your startService.




From jeff at jamcupboard.co.uk  Fri Feb 25 06:26:50 2005
From: jeff at jamcupboard.co.uk (Jeff Silver)
Date: Fri, 25 Feb 2005 11:26:50 +0000
Subject: [Twisted-Python] Patch to support DNS updates
Message-ID: <H0000065000015a3.1109327814.moses@MHS>

Here is a patch to extend twisted.names to support DNS update messages.
Thanks to those who answered my previous queries.

Attachments:
    update_descr.txt      Description
    authority.py.diff     diff -u of twisted/names/authority.py
    server.py.diff        diff -u of twisted/names/server.py
    tap.py.diff           diff -u of twisted/names/tap.py
    dns.py.diff           diff -u of twisted/protocols/dns.py
-------------- next part --------------
Extension to twisted to implement UPDATE requests
=================================================

Changed files:
    names/authority.py
    names/server.py
    names/tap.py
    protocols/dns.py

Description:

    Updates are accepted for zones for which this server is the
    authority. These updates are applied to the running server.
    If the zones were loaded through the --pyzone or --bindzone
    options, the changes are not written back to disk. If the
    server is run with --nosave, the updates are lost when the
    server shuts down.

    Two new mktap options are added: --pyzonefile and --bindzonefile
    These mean the same as the existing options without the 'file'
    part, except:
        a) At mktap time, the filenames are recorded but the files
           are not read. They are read on server start-up. This
           means that you can edit the files and restart the server
           to implement changes without doing another mktap.
        b) When an update has been applied, the appropriate file
           is renamed by having its serial number appended, and a
           new copy is written. This means that updates persist
           across server restarts, even if --nosave is specified.

Limitations and oddities:

    There is no forwarding of update requests.

    There is no processing of prerequisites.

    There is no permission checking.

    Only SOA, A, and MX records are written to the new files. (Just
    laziness on my part. I only need A records at present.)

    If an error occurs on writing the file, an error is returned
    to the client, but the update survives in the running server.
    (This contravenes section 3.5 of RFC 2136.)

    I haven't done anything to ensure atomicity of operations
    or serialization of updates as described in section 3.7 of
    RFC 2136.

    There seems to be some confusion as to the meaning of the
    fifth (last) field in an SOA record. (O'Reilly's DNS and BIND
    book is itself ambiguous.) This field is now supposed to be
    the negative caching TTL; previously it was the default TTL.
    twisted.names copes correctly with a $TTL line in BIND-format
    files. But it stores the fifth value in 'minimum', and the
    handling of Python source format files doesn't seem to have
    any equivalent to the $TTL line. I've tried to maintain
    consistency with what's already there, but I'm not sure I've
    done the right thing with this.

    I agree with the comment in the code "this might suck" about
    using the source filename as the zone origin, but I haven't
    made any changes to this. I'm not sure what exactly the zone
    origin is supposed to be.
-------------- next part --------------
--- names/authority.py	2004-02-07 17:57:11.000000000 +0000
+++ names/authority.py.new	2005-02-25 09:34:02.725600288 +0000
@@ -161,6 +161,78 @@
                 add.extend(res[1][2])
         return ans, auth, add
 
+    def _trySaveToOriginalFile(self):
+        '''Called after an update.'''
+        soa_rec = self.soa[1]
+        new_serial = int(time.strftime('%Y%m%d%H%M')) - 200000000000
+        if new_serial <= soa_rec.serial:
+            new_serial = soa_rec.serial + 1
+        old_serial = soa_rec.serial
+        soa_rec.serial = new_serial
+        if hasattr(self, 'filename'):
+            tmp_filename = self.filename + '.new'
+            save_filename = '%s.%d' % (self.filename, old_serial)
+            self.saveFile(tmp_filename)
+            os.rename(self.filename, save_filename)
+            os.rename(tmp_filename, self.filename)
+
+    def addRR(self, update):
+        key = str(update.name)
+        try:
+            rrlist = self.records[key]
+        except KeyError:
+            # create new entry
+            rrlist = self.records[key] = []
+        record = update.payload
+        for rec in rrlist:
+            if record == rec:
+                # duplicate. ignore
+                return
+        rrlist.append(record)
+        self._trySaveToOriginalFile()
+
+    def deleteName(self, record):
+        try:
+            del self.records[str(record.name)]
+        except KeyError:
+            return
+        self._trySaveToOriginalFile()
+
+    def deleteRRset(self, record):
+        try:
+            rrlist = self.records[str(record.name)]
+        except KeyError:
+            return
+        index = 0
+        did_it = False
+        while index < length(rrlist):
+            if record.type == rrlist[index].type:
+                del rrlist[index]
+                did_it = True
+            else:
+                index += 1
+        if did_it:
+            self._trySaveToOriginalFile()
+
+    def deleteRR(self, record):
+        try:
+            rrlist = self.records[str(record.name)]
+        except KeyError:
+            return
+        rec_to_delete = record.payload
+        index = 0
+        did_it = False
+        while index < len(rrlist):
+            if rec_to_delete.__class__ == rrlist[index].__class__ \
+                    and rec_to_delete.preference == rrlist[index].preference \
+                    and rec_to_delete.exchange == rrlist[index].exchange:
+                del rrlist[index]
+                did_it = True
+            else:
+                index += 1
+        if did_it:
+            self._trySaveToOriginalFile()
+
 
 class PySourceAuthority(FileAuthority):
     """A FileAuthority that is built up from Python source code."""
@@ -177,6 +249,26 @@
                 self.soa = rr
             self.records.setdefault(rr[0].lower(), []).append(rr[1])
 
+    def saveFile(self, filename):
+        of = file(filename, 'w')
+        names = self.records.keys()
+        names.sort()
+        print >>of, 'zone = ['
+        for name in names:
+            for rec in self.records[name]:
+                print >>of, "    %s('%s'," % (dns.QUERY_TYPES[rec.TYPE], name),
+                if rec.TYPE == dns.SOA:
+                    print >>of, "serial=%d, refresh=%d, retry=%d, expire=%d, minimum=%d)," % \
+                        (rec.serial, rec.refresh, rec.retry, rec.expire, rec.minimum)
+                elif rec.TYPE == dns.A:
+                    print >>of, "'%s')," % rec.dottedQuad()
+                elif rec.TYPE == dns.MX:
+                    print >>of, "%d, '%s')," % (rec.preference, rec.exchange)
+                else:
+                    print >>of, '),'
+        print >>of, ']'
+        of.close()
+
 
     def wrapRecord(self, type):
         return lambda name, *arg, **kw: (name, type(*arg, **kw))
@@ -194,7 +286,7 @@
 
 class BindAuthority(FileAuthority):
     """An Authority that loads BIND configuration files"""
-    
+
     def loadFile(self, filename):
         self.origin = os.path.basename(filename) + '.' # XXX - this might suck
         lines = open(filename).readlines()
@@ -202,6 +294,37 @@
         lines = self.collapseContinuations(lines)
         self.parseLines(lines)
 
+    def saveFile(self, filename):
+        of = file(filename, 'w')
+        soa_rec = self.soa[1]
+        print >>of, '$TTL %d' % soa_rec.ttl
+        print >>of, '%s. IN SOA %s %s (' % (self.soa[0], soa_rec.mname, soa_rec.rname)
+        for val in (soa_rec.serial, soa_rec.refresh, soa_rec.retry, soa_rec.expire, soa_rec.minimum):
+            print >>of, '\t%d' % val
+        print >>of, ')'
+        dotted_orig = '.' + self.origin
+        names = self.records.keys()
+        names.sort()
+        for name in names:
+            reclist = self.records[name]
+            if name.endswith(dotted_orig):
+                name = name[:-len(dotted_orig)]
+            else:
+                name = name + '.'
+            for rec in reclist:
+                if rec.TYPE == dns.SOA:
+                    continue
+                print >>of, '%s' % name,
+                if rec.ttl != soa_rec.ttl:
+                    print >>of, '%d' % (rec.ttl),
+                print >>of, 'IN %s' % dns.QUERY_TYPES[rec.TYPE],
+                if rec.TYPE == dns.A:
+                    print >>of, '%s' % rec.dottedQuad()
+                elif rec.TYPE == dns.MX:
+                    print >>of, '%d %s' % (rec.preference, rec.exchange)
+                else:
+                    print >>of, ''
+        of.close()
 
     def stripComments(self, lines):
         return [
@@ -279,9 +402,6 @@
             raise NotImplementedError, "Record type %r not supported" % type
 
 
-    #
-    # This file ends here.  Read no further.
-    #
     def parseRecordLine(self, origin, ttl, line):
         MARKERS = dns.QUERY_CLASSES.values() + dns.QUERY_TYPES.values()
         cls = 'IN'
-------------- next part --------------
--- names/server.py	2004-03-01 22:54:20.000000000 +0000
+++ names/server.py.new	2005-02-25 09:34:01.529782080 +0000
@@ -40,6 +40,8 @@
 from twisted.internet import protocol, defer
 from twisted.protocols import dns
 from twisted.python import failure, log
+from twisted.names import authority
 
 import resolve, common
 
@@ -47,21 +49,38 @@
     protocol = dns.DNSProtocol
     cache = None
 
-    def __init__(self, authorities = None, caches = None, clients = None, verbose = 0):
-        resolvers = []
+    def __init__(self, authorities = None, bindfilenames=None, pyfilenames=None, caches = None, clients = None, verbose = 0):
+        self.resolvers = []
         if authorities is not None:
-            resolvers.extend(authorities)
+            self.resolvers.extend(authorities)
         if caches is not None:
-            resolvers.extend(caches)
+            self.resolvers.extend(caches)
         if clients is not None:
-            resolvers.extend(clients)
+            self.resolvers.extend(clients)
+
+        # save authority list for use during updates
+        self.authorities = authorities
+
+        self.bindfilenames = bindfilenames
+        self.pyfilenames = pyfilenames
 
         self.canRecurse = not not clients
-        self.resolver = resolve.ResolverChain(resolvers)
         self.verbose = verbose
         if caches:
             self.cache = caches[-1]
 
+    def startFactory(self):
+        for f in self.bindfilenames:
+            new_auth = authority.BindAuthority(f)
+            new_auth.filename = f   # save filename for rewriting file on update
+            self.authorities.append(new_auth)
+            self.resolvers.append(new_auth)
+        for f in self.pyfilenames:
+            new_auth = authority.PySourceAuthority(f)
+            new_auth.filename = f   # save filename for rewriting file on update
+            self.authorities.append(new_auth)
+            self.resolvers.append(new_auth)
+        self.resolver = resolve.ResolverChain(self.resolvers)
 
     def buildProtocol(self, addr):
         p = self.protocol(self)
@@ -159,6 +178,68 @@
             log.msg("Notify message from %r" % (address,))
 
 
+    def handleUpdate(self, message, protocol, address):
+        if self.verbose:
+            log.msg("Update message from %r" % (address,))
+        query = dns.Query(message.zones[0].name.name, dns.SOA)
+        return self.authQuery(query, self.authorities[:], protocol, message, address)
+
+    def authQuery(self, query, auth_list, protocol, message, address):
+        return auth_list[0].query(query).addCallback(
+            self.gotResolverResponseAuth, query, auth_list, protocol, message, address
+        ).addErrback(
+            self.gotResolverErrorAuth, query, auth_list, protocol, message, address
+        )
+
+    def gotResolverResponseAuth(self, (ans, auth, add), query, auth_list, protocol, message, address):
+        if not ans[0].auth:
+            if self.verbose:
+                log.msg("we are not the authority for this domain")
+            message.rCode = dns.REFUSED
+        else:
+            auth = auth_list[0]
+            message.rCode = dns.OK
+            did_update = False
+            zone_class = message.zones[0].cls
+            for update in message.updates:
+                if update.cls == zone_class:
+                    if self.verbose:
+                        log.msg("add %s" % (update,))
+                    auth.addRR(update)
+                    did_update = True
+                elif update.ttl == 0 and update.cls == dns.ANY:
+                    if update.type == dns.ANY:
+                        if self.verbose:
+                            log.msg("delete name %s" % (update,))
+                        auth.deleteName(update)
+                        did_update = True
+                    else:
+                        if self.verbose:
+                            log.msg("delete RRset %s" % (update,))
+                        auth.deleteRRset(update)
+                        did_update = True
+                elif update.ttl == 0 and update.cls == dns.NONE:
+                    if self.verbose:
+                        log.msg("delete RR %s" % (update,))
+                    auth.deleteRR(update)
+                    did_update = True
+                else:
+                    if self.verbose:
+                        log.msg("bad combination of values %s" % (update,))
+                    message.rCode = dns.EFORMAT
+        self.sendReply(protocol, message, address)
+
+    def gotResolverErrorAuth(self, failure, query, auth_list, protocol, message, address):
+        del auth_list[0]
+        if auth_list:
+            # keep going
+            return self.authQuery(query, auth_list, protocol, message, address)
+        if self.verbose:
+            log.msg("domain not found")
+        message.rCode = dns.ENAME
+        self.sendReply(protocol, message, address)
+
+
     def handleOther(self, message, protocol, address):
         message.rCode = dns.ENOTIMP
         self.sendReply(protocol, message, address)
@@ -194,6 +275,8 @@
             self.handleStatus(message, proto, address)
         elif message.opCode == dns.OP_NOTIFY:
             self.handleNotify(message, proto, address)
+        elif message.opCode == dns.OP_UPDATE:
+            self.handleUpdate(message, proto, address)
         else:
             self.handleOther(message, proto, address)
 
-------------- next part --------------
--- names/tap.py	2003-12-05 04:54:03.000000000 +0000
+++ names/tap.py.new	2005-02-25 09:34:02.726600136 +0000
@@ -50,7 +50,9 @@
         usage.Options.__init__(self)
         self['verbose'] = 0
         self.bindfiles = []
+        self.bindfilenames = []
         self.zonefiles = []
+        self.pyfilenames = []
         self.secondaries = []
 
 
@@ -66,6 +68,20 @@
             raise usage.UsageError(filename + ": No such file")
         self.bindfiles.append(filename)
 
+    def opt_bindzonefile(self, filename):
+        """Specify the filename of a BIND9 syntax zone definition to be
+        read at start-up time (not at mktap time)."""
+        if not os.path.exists(filename):
+            raise usage.UsageError(filename + ": No such file")
+        self.bindfilenames.append(filename)
+
+    def opt_pyzonefile(self, filename):
+        """Specify the filename of a Python source zone definition to be
+        read at start-up time (not at mktap time)."""
+        if not os.path.exists(filename):
+            raise usage.UsageError(filename + ": No such file")
+        self.pyfilenames.append(filename)
+
 
     def opt_secondary(self, ip_domain):
         """Act as secondary for the specified domain, performing
@@ -119,7 +135,7 @@
     if config['recursive']:
         cl.append(client.createResolver(resolvconf=config['resolv-conf']))
 
-    f = server.DNSServerFactory(config.zones, ca, cl, config['verbose'])
+    f = server.DNSServerFactory(config.zones, config.bindfilenames, config.pyfilenames, ca, cl, config['verbose'])
     p = dns.DNSDatagramProtocol(f)
     f.noisy = 0
     ret = service.MultiService()
-------------- next part --------------
--- protocols/dns.py	2004-02-25 20:16:12.000000000 +0000
+++ protocols/dns.py.new	2005-02-25 09:34:01.528782232 +0000
@@ -88,7 +88,9 @@
 
     33: 'SRV',
     
-    38: 'A6', 39: 'DNAME'
+    38: 'A6', 39: 'DNAME',
+
+    255: 'ANY',  # for updates. Is this the right place, or should parsing be different for queries/updates?
 }
 
 # "Extended" queries (Hey, half of these are deprecated, good job)
@@ -105,7 +107,7 @@
 
 
 QUERY_CLASSES = {
-    1: 'IN',  2: 'CS',  3: 'CH',  4: 'HS',  255: 'ANY'
+    1: 'IN',  2: 'CS',  3: 'CH',  4: 'HS',  254: 'NONE',  255: 'ANY'
 }
 REV_CLASSES = dict([
     (v, k) for (k, v) in QUERY_CLASSES.items()
@@ -116,10 +118,11 @@
 
 
 # Opcodes
-OP_QUERY, OP_INVERSE, OP_STATUS, OP_NOTIFY = range(4)
+OP_QUERY, OP_INVERSE, OP_STATUS, OP_NOTIFY, OP_UNKNOWN, OP_UPDATE = range(6)
 
 # Response Codes
-OK, EFORMAT, ESERVER, ENAME, ENOTIMP, EREFUSED = range(6)
+OK, EFORMAT, ESERVER, ENAME, ENOTIMP, EREFUSED, YXDOMAIN, YXRRSET, NXRRSET = range(9)
+
 
 class IRecord(components.Interface):
     """An single entry in a zone of authority.
@@ -454,7 +457,8 @@
 
     def decode(self, strio, length = None):
         self.name = Name()
-        self.name.decode(strio)
+        if length:
+            self.name.decode(strio)
     
 
     def __hash__(self):
@@ -462,6 +466,9 @@
 
 
 # Kinds of RRs - oh my!
+class Record_ANY(SimpleRecord):  # for updates. Is this the right place, or should parsing be different for queries/updates?
+    TYPE = ''
+
 class Record_NS(SimpleRecord):
     TYPE = NS
 
@@ -1004,6 +1011,7 @@
         self.recAv = ( byte4 >> 7 ) & 1
         self.rCode = byte4 & 0xf
 
+        # query
         self.queries = []
         for i in range(nqueries):
             q = Query()
@@ -1017,6 +1025,12 @@
         for (l, n) in items:
             self.parseRecords(l, n, strio)
 
+        if self.opCode == OP_UPDATE:
+            # rename fields for readability
+            self.zones = self.queries
+            self.prereqs = self.answers
+            self.updates = self.authority
+
 
     def parseRecords(self, list, num, strio):
         for i in range(num):

From itamar at itamarst.org  Fri Feb 25 11:05:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 25 Feb 2005 11:05:32 -0500
Subject: [Twisted-Python] Patch to support DNS updates
In-Reply-To: <H0000065000015a3.1109327814.moses@MHS>
References: <H0000065000015a3.1109327814.moses@MHS>
Message-ID: <1109347532.13530.149.camel@sheriffpony>

Thanks! Could you add this patch to http://twistedmatrix.com/bugs/
please?




From ken at kenkinder.com  Fri Feb 25 14:45:42 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Fri, 25 Feb 2005 13:45:42 -0600
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f025050215195672e3698c@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
Message-ID: <421F8066.4060203@kenkinder.com>

For what it's worth, I had a similar need and I don't pass objects 
around on PB (just data structures), so this class works out well for 
me. If the remote server isn't up or goes down, the returned deferred 
just waits. I tried to take out all the logic that relates to my 
application.

-Ken

class SimplePBProxy(object):
    """
    A simple U{Perspective 
Broker<http://twistedmatrix.com/documents/current/howto/pb-intro>} proxy for
    remote servers. This works similar to the xmlrpc proxy, but uses 
Perspective
    Broker.
   
    Example::
       
        hostname = 'remotebox'
        pb_port = 5053
        proxy = SimplePBProxy(hostname, pb_port)
        deferred_object = proxy.callRemote('somecall')
   
    B{NOTE:} Unlike the default Perspective Broker behavior, this 
doesn't wig out
    if the connection is lost. Deferred objects simple won't be returned 
until
    the remote server comes back up. Likewise, if the remote server 
isn't yet up,
    the deferred will simply be held open until the remote box is up.
    """
    def __init__(self, host, port):
        """
        @param host: Host to connect to.
        @rtype host: String
       
        @param port: Port PB is on.
        @rtype port: Integer
        """
        self.host = host
        self.port = port
        self.pending_calls = []

        self.rootobj = None
        self.connect()

    def connect(self):
        """
        Used internally. Connects to remote server.
        """
        def handle_error(failure):
            reactor.callLater(1, self.connect)
        factory = pb.PBClientFactory()
        factory.unsafeTracebacks = 1
        reactor.connectTCP(self.host, self.port, factory)
        d = factory.getRootObject()
        d.addCallback(self._set_root_object)
        d.addErrback(handle_error)
        return d

    def _set_root_object(self, rootobj):
        self.rootobj = rootobj
       
        def pending_act(data, deferred):
            deferred.callback(data)
        def pending_err(failure, deferred):
            deferred.errback(failure)

        for deferred, method, args, kwargs in self.pending_calls:
            d = self.callRemote(method, *args, **kwargs)
            d.addCallback(pending_act, deferred)
            d.addErrback(pending_err, deferred)
        self.pending_calls = []

    def callRemote(self, method, *args, **kwargs):
        """
        Call method on remote API. Method is a string. Any additional 
arguments
        and keyword arguments are passed to that method as arguments and
        keyword arguments.
        """
        if not self.rootobj:
            d = Deferred()
            self.pending_calls.append((d, method, args, kwargs))
            self.connect()
            return d

        try:
            d = self.rootobj.callRemote(method, *args, **kwargs)
            d.addErrback(self._error_back, method, args, kwargs)
            return d
        except pb.DeadReferenceError:
            self.rootobj = None
            d = Deferred()
            self.pending_calls.append((d, method, args, kwargs))
            self.connect()
            return d
   
    def _error_back(self, failure, method, args, kwargs):
        if failure.type is twisted.spread.pb.PBConnectionLost:
            self.rootobj = None
            d = Deferred()
            self.pending_calls.append((d, method, args, kwargs))
            self.connect()
            return d
        else:
            return failure


Dave Cook wrote:

>I'm rendering the results of a remote method call:
>
>    def data_tableList(self, ctx, data):
>        ...
>        d =   self.pbClientFactory.login(creds)
>        d.addCallback(lambda object: object.callRemote("foo"))
>        return d
> 
>Works, great if the PB server is up,  but if it's down the browser
>just hangs.  Is there a correct way to check that the connection is up
>at this point?  This works:
>
>       if self.pbClientFactory._broker:
>            d = self.pbClientFactory.login(creds)
>            d.addCallback(lambda object: object.callRemote("getAlertReports"))
>        else:
>            d = []
>        return d
>
>but seems like a hack.  Also, ideally, I'd like to attempt a
>reconnection to the PB server at this point if it's not running. 
>What's the best way to do that?
>
>Thanks,
>Dave Cook
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>




From ken at kenkinder.com  Fri Feb 25 14:53:30 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Fri, 25 Feb 2005 13:53:30 -0600
Subject: [Twisted-Python] Timing Out Deferreds
Message-ID: <421F823A.9040500@kenkinder.com>

I've been trying to figure out an intelligent way of timing out 
deferreds. I'd like something like this...

    def myTimeoutMethod(...):
        ...

    d = whatnot()
    d.addCallback(...)
    d.addErrback(...)
    d.addTimeout(5, myTimeoutMethod)

There are obvious problems with trying to interrupt an existing 
deferred, but I was hoping there might be just some way of discarding 
its data when it finally does return, or dereferencing the deferred 
object itself from the reactor, which might just let it clean itself up 
on its own.

Thoughts?

-Ken




From foom at fuhm.net  Fri Feb 25 16:22:47 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 25 Feb 2005 16:22:47 -0500
Subject: [Twisted-Python] Timing Out Deferreds
In-Reply-To: <421F823A.9040500@kenkinder.com>
References: <421F823A.9040500@kenkinder.com>
Message-ID: <9b4994889ee170c5895556a856c91ee2@fuhm.net>

On Feb 25, 2005, at 2:53 PM, Ken Kinder wrote:
> I've been trying to figure out an intelligent way of timing out 
> deferreds.

No, a deferred is just a chain of callbacks -- it doesn't really make 
sense to time out a chain of callbacks. You need to time out the 
*source* operation that is planning on eventually calling the deferred. 
The process of killing the source operation ought to additionally cause 
the deferred's errback to be called.

James




From mcfletch at rogers.com  Fri Feb 25 18:27:20 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Fri, 25 Feb 2005 18:27:20 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
Message-ID: <421FB458.2060609@rogers.com>

I'd like to add a number of XMLRPC services to an existing Nevow site 
that's both SSL encrypted and Guarded.  However, when I take the 
straightforward tack of adding an XMLRPC instance to my site as /RPC , 
the client is unable to connect.  It appears as though the client 
(Python's xmlrpclib) can't negotiate a login with the Nevow guard.

Reading Andre Dalke's post (and the subsequent replies):

    http://twistedmatrix.com/pipermail/twisted-python/2003-June/004447.html

it seems as though a rewrite of cred about a year and a half ago should 
have made it possible to use cred for doing the authentication required 
for both form-based and HTTP-AUTH-based queries (such as xmlrpclib 
uses).  However, I'm not sure how all of that would interact with the 
Guard mechanisms (e.g. creating sessions, redirecting between forms, and 
the like).

Anyway, I'm wondering if anyone has any code that does this, or 
information about the current state-of-the-art.

Enjoy yourselves,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com
                              PyCon is coming...




From golux at comcast.net  Fri Feb 25 20:04:34 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 25 Feb 2005 20:04:34 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <421FB458.2060609@rogers.com>
References: <421FB458.2060609@rogers.com>
Message-ID: <421FCB22.4010400@comcast.net>

Mike C. Fletcher wrote:
> I'd like to add a number of XMLRPC services to an existing Nevow site 
> that's both SSL encrypted and Guarded. ....
> 
> ... I'm wondering if anyone has any code that does this, or 
> information about the current state-of-the-art.

I have an example from my project that does (I think) what
you want.  It's not the best code -- exarkun made some
suggestions at PyCon last year on how to clean up the
structure, and I'm embarrassed to admit I haven't yet
implemented his suggestions (hey, it works ;).

I'll send the files to you off-list because I don't want
to clutter up the list, but if anyone else is interested
I'll be happy to share them (or send them to the list if
one of the twisted gurus thinks its worthwhile).

Cheers,
Steve



From foom at fuhm.net  Sat Feb 26 02:37:40 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 26 Feb 2005 02:37:40 -0500
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <95984cdf38ad7485c8c6a654f50df4ee@fuhm.net>

Bug summary
______________________
Since 2005-02-20 17:11:17.550000:
  Bugs opened: 5   Bugs closed: 2   Total open bugs: 339 (+3)
   Urgent: 7 (-1)
   Bug: 136 (+2)
   Feature: 128 (+0)
   Wish: 68 (+2)

New / Reopened Bugs
______________________
                     ==== Bug ====
[WEBSITE] Website still refers to copyright assignment  (yesterday)
        http://twistedmatrix.com/bugs/issue903 opened by hypatia

[TRIAL] trial --until-failure does not stop on cleanup errors  
(yesterday)
        http://twistedmatrix.com/bugs/issue901 opened by spiv

[CORE] Possible re-entrancy bug in LineReceiver.resumeProducing?  (4 
days ago)
        http://twistedmatrix.com/bugs/issue899 opened by spiv

                     ==== Wish ====
[NAMES] [PATCH] t.names shouldn't depend on t.flow  (yesterday)
        http://twistedmatrix.com/bugs/issue902 opened by marienz

Update download page with Python 2.4/1.3.0/Win32 installer  (2 days ago)
        http://twistedmatrix.com/bugs/issue900 opened by moonfallen

Bugs Closed
______________________
                     ==== Urgent ====
[FTP] Strange intermittent failure involving FTP  (1 week ago)
        http://twistedmatrix.com/bugs/issue898 opened by spiv, closed by 
spiv

                     ==== Bug ====
[TRIAL] Control-C in trial sometimes doesn't stop it.  (8 months ago)
        http://twistedmatrix.com/bugs/issue628 opened by jknight, closed 
by spiv




From golux at comcast.net  Sun Feb 27 03:46:21 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Sun, 27 Feb 2005 03:46:21 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <421FB458.2060609@rogers.com>
References: <421FB458.2060609@rogers.com>
Message-ID: <422188DD.6040109@comcast.net>

Hey Jordan and Andy,

Attached are the modules of my app that handle XMLRPC
and web basic auth over SSL.  Note that there's no nevow
here, but the same auth facility is used for both a
simple static web interface and the XMLRPC service.
You can see some vestigial (and inactive) PB stubs,
which await time and my grokking Brian's new PB stuff.
(Anyway I hadn't yet extended pgercred to support
PB ... an exercise for the reader ... and if any
readers want to hack on that, I'd love to see it ...
that would make things much more interesting!  :)

Jp's advice, which has since faded into the dark
backward and abysm of my head, had to do with some
refactoring of pgercred ... hey jp, maybe you could
remind me, if you have a chance to peek at it again!

The pgertap, pgerxmlrpc, and pgercred modules are server-side
and xmlrpcinterface is a client module.  They are not
runnable without some more stuff from the app (see below),
and I haven't taken the time to create a self-contained
runnable example along these lines, but I think it wouldn't
be too hard, and IMO a nice addition to twisted's examples.

Acknowledgement:  the code that does the work in pgercred
is based on an example that Moshe did a while back (I don't
remember exactly what I copied, but I think the main thing
was most or all of the BasicAuthResource class).

The "engine" that gets passed to pgerxmlrpc is the guy that
handles the application logic (he sits above an adbapi
layer and other assorted back-end stuff).  I didn't include
that module because it's not relevant to this thread, but
if anyone is curious, I put a tarball of the app at:

http://ned.gsfc.nasa.gov/PanGalactic.tar.gz

Caveats:  it contains some horriblenesses, not much doc,
and I haven't released it "publicly" yet.  We used to have
anonymous access set up for CVS on ned (remember, radix? ;),
but NASA/GSFC has tightened up its firewalls considerably
since then ... rats!  :(

Critiques or razberries welcomed, as long as they're
constructive razberries!  :)

Cheers,
Steve

-------------- next part --------------
A non-text attachment was scrubbed...
Name: pgertap.py
Type: text/x-python
Size: 4508 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050227/1089ef6d/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pgerxmlrpc.py
Type: text/x-python
Size: 10749 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050227/1089ef6d/attachment-0001.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pgercred.py
Type: text/x-python
Size: 6794 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050227/1089ef6d/attachment-0002.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: xmlrpcinterface.py
Type: text/x-python
Size: 11804 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050227/1089ef6d/attachment-0003.py 

From tv at twistedmatrix.com  Mon Feb 28 03:32:46 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 28 Feb 2005 10:32:46 +0200
Subject: [Twisted-Python] Patch to support DNS updates
In-Reply-To: <H0000065000015a3.1109327814.moses@MHS>
References: <H0000065000015a3.1109327814.moses@MHS>
Message-ID: <4222D72E.20008@twistedmatrix.com>

Jeff Silver wrote:
> --- names/authority.py	2004-02-07 17:57:11.000000000 +0000
> +++ names/authority.py.new	2005-02-25 09:34:02.725600288 +0000
> @@ -161,6 +161,78 @@
>                  add.extend(res[1][2])
>          return ans, auth, add
>  
> +    def _trySaveToOriginalFile(self):
> +        '''Called after an update.'''
> +        soa_rec = self.soa[1]
> +        new_serial = int(time.strftime('%Y%m%d%H%M')) - 200000000000
> +        if new_serial <= soa_rec.serial:
> +            new_serial = soa_rec.serial + 1
> +        old_serial = soa_rec.serial
> +        soa_rec.serial = new_serial
> +        if hasattr(self, 'filename'):
> +            tmp_filename = self.filename + '.new'
> +            save_filename = '%s.%d' % (self.filename, old_serial)
> +            self.saveFile(tmp_filename)
> +            os.rename(self.filename, save_filename)
> +            os.rename(tmp_filename, self.filename)

While I am not going to comment on the rest of the patch (the feature
does sound nice, altough lack of authentication makes using it pretty
pointless IMHO), this is just unacceptable.

If an exception is raised, the app crashes, or the machine loses power
between those two renames, your original zone file has been renamed
and your DNS server won't start.

Do something like

 >>> f=open('foo', 'w')
 >>> f.write('foo')
 >>> f.close()
 >>> import os
 >>> os.link('foo', 'foo.old')
 >>> f=open('bar', 'w')
 >>> f.write('bar')
 >>> os.fsync(f)
 >>> f.close()
 >>> os.rename('bar', 'foo')
 >>>


Also, nice y2.043k trap there, I don't think many have been able to
write ones targeting that exact date.



From jeff at jamcupboard.co.uk  Mon Feb 28 09:37:54 2005
From: jeff at jamcupboard.co.uk (Jeff Silver)
Date: Mon, 28 Feb 2005 14:37:54 +0000
Subject: [Twisted-Python] Patch to support DNS updates
In-Reply-To: <4222D72E.20008@twistedmatrix.com>
Message-ID: <H000006500001662.1109600198.moses@MHS>

> (the feature does sound nice,

Thank you.

> ... altough lack of authentication makes using it pretty
> pointless IMHO),

For most situations, I agree with you. It so happens that updates without
authentication are fine for the environment I'm setting up. My focus was on
implementing the functionality that I need, although of course I don't want to
break anything, or prevent anyone else extending this further. There's no
reason why authentication (and the other missing bits) shouldn't be added. But
I thought I'd got to a stable enough point to submit.

As implemented in the patch, updates are permitted on all zones. In retrospect,
and given your comment, I think I was wrong. I should allow updates only in
zones specified using my new --*zonefile options. That way there is no change
of behaviour whatever for people continuing to use the original --*zone
options. I certainly don't want to open up security holes in existing
installations.

I shall fix this before submitting a new patch to the bug list (as requested by
itamar).

> this is just unacceptable.
> 
> If an exception is raised, the app crashes, or the machine loses power
> between those two renames, your original zone file has been renamed
> and your DNS server won't start.

Point taken. I'll do a single os.rename() as you suggest.


> Also, nice y2.043k trap there, I don't think many have been able to
> write ones targeting that exact date.

Hmmm.. Not sure what you mean. If I read the Python 2.4 documentation
correctly, these numbers will be handled as long integers. The subtraction just
converts the 4-digit year at the start to 'years since 2000'. Am I missing
something? If so, please say, and I can handle the year separately.

Thanks for the comments.
Jeff




From matt at pollenation.net  Mon Feb 28 09:50:23 2005
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 28 Feb 2005 14:50:23 +0000
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <422188DD.6040109@comcast.net>
References: <421FB458.2060609@rogers.com>  <422188DD.6040109@comcast.net>
Message-ID: <1109602223.9345.41.camel@localhost.localdomain>

On Sun, 2005-02-27 at 03:46 -0500, Stephen Waterbury wrote:

[snip everything for brevity]

Thanks for sharing this Stephen. It's made me question the realm-portal
architecture I've been using.

I notice that Stephen creates multiple realms - one for each "service"
your application provides. Each realm then has a portal to connect it to
the checker(s).

That is interesting because the approach I have taken is to have *one*
realm for the entire application and a portal for each "service". For
instance I might have a single instance of my.app.Realm and one each of
my.web.public.Portal, my.web.admin.Portal, my.web.xmlrpc.Portal,
my.ftp.Portal etc.

The reason I structure my code like this is because I consider the realm
to be the "hub" of the application (something I thought the cred HOWTO
was hinting at). My realm generally has all sorts of useful attributes,
i.e. a ConnectionPool, as well as the application's "global" API. I also
anticipated that, one day, my realm instance would need to be more aware
of the avatars it had created.

Right now, the only issue I have with my singleton realm way of working
is that the realm's requestAvatar can get big and tends to look like a
switch statement. It has to know about everything going on, even if it
doesn't much care about the avatar once the method returns. Stephen's
approach, by comparison, seems a little simpler in this respect in that
each realm is there to create an particular type of "service" avatar.

I still think that one realm and multiple portals is a better model but
does anyone anyone else have opinions, suggestions, hints etc.

Thanks, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




From itamar at itamarst.org  Mon Feb 28 10:13:01 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 28 Feb 2005 10:13:01 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <1109602223.9345.41.camel@localhost.localdomain>
References: <421FB458.2060609@rogers.com>  <422188DD.6040109@comcast.net>
	<1109602223.9345.41.camel@localhost.localdomain>
Message-ID: <1109603581.1467.56.camel@sheriffpony>

On Mon, 2005-02-28 at 14:50 +0000, Matt Goodall wrote:

> Right now, the only issue I have with my singleton realm way of working
> is that the realm's requestAvatar can get big and tends to look like a
> switch statement.

If there's an underlying avatar, you can adapt it to the interface
requested by the portal. If there are multiple avatar sources, i.e.
different interfaces get totally different "users", multiple realms may
be better (and you could put the shared logic in an object they all
refer to).




From ken at kenkinder.com  Mon Feb 28 11:31:12 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Mon, 28 Feb 2005 10:31:12 -0600
Subject: [Twisted-Python] Timing Out Deferreds
In-Reply-To: <9b4994889ee170c5895556a856c91ee2@fuhm.net>
References: <421F823A.9040500@kenkinder.com>
	<9b4994889ee170c5895556a856c91ee2@fuhm.net>
Message-ID: <42234750.4040305@kenkinder.com>

James Y Knight wrote:

> No, a deferred is just a chain of callbacks -- it doesn't really make 
> sense to time out a chain of callbacks. You need to time out the 
> *source* operation that is planning on eventually calling the 
> deferred. The process of killing the source operation ought to 
> additionally cause the deferred's errback to be called.
>

That would be ideal, but the situation I'm in isn't exactly that way. I 
have a general system of scheduling tasks that doesn't really know what 
the task is, but knows it shouldn't take too long -- something like a 
crontab.




From itamar at itamarst.org  Mon Feb 28 11:53:24 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 28 Feb 2005 11:53:24 -0500
Subject: [Twisted-Python] Timing Out Deferreds
In-Reply-To: <42234750.4040305@kenkinder.com>
References: <421F823A.9040500@kenkinder.com>
	<9b4994889ee170c5895556a856c91ee2@fuhm.net>
	<42234750.4040305@kenkinder.com>
Message-ID: <1109609604.1432.59.camel@sheriffpony>

On Mon, 2005-02-28 at 10:31 -0600, Ken Kinder wrote:

> That would be ideal, but the situation I'm in isn't exactly that way. I 
> have a general system of scheduling tasks that doesn't really know what 
> the task is, but knows it shouldn't take too long -- something like a 
> crontab.

How about having registration of a task also require a cancellation
function? Which can be lambda:None, if it's not possible to do so.




From mcfletch at rogers.com  Mon Feb 28 14:15:56 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Mon, 28 Feb 2005 14:15:56 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <422188DD.6040109@comcast.net>
References: <421FB458.2060609@rogers.com> <422188DD.6040109@comcast.net>
Message-ID: <42236DEC.1030205@rogers.com>

Stephen Waterbury wrote:
...

> Critiques or razberries welcomed, as long as they're
> constructive razberries!  :)

This is extremely illuminating.  The key approach/idea that I was 
missing is this:

    You can create a root web.resource.Resource() and add a child ""
    that handles all URLs not otherwise matched by a known child.

        This "" child handles the common web-browser case, basically
        anything not going to your "special" directories. This child is
        the protected Nevow portal that we all know and love; on
        attempting to walk into it all the Nevow machinery should trigger.

        Now you register your Basic-Auth-protected XMLRPC/SOAP portals
        as parallel children of the Nevow portal, "RPC" and "SOAP". 
        These are again, portals, so they do their own credential
        checking, thus don't *necessarily* have to use the same cred
        mechanism, but can if they want to.

This doesn't actually do what I was *trying* to do, which was to make it 
possible to log into the main site using Basic auth *or* the Nevow web 
forms, but it handles what we actually need to do perfectly, so I can 
just stop trying to do what I was trying to do :) .  I'm about to sit 
down to implement this approach for our system.

Much obliged,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com
                              PyCon is coming...




From andrea at cpushare.com  Mon Feb 28 15:31:54 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 28 Feb 2005 21:31:54 +0100
Subject: [Twisted-Python] Re: linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <mailman.202.1109621692.3610.twisted-python@twistedmatrix.com>
References: <mailman.202.1109621692.3610.twisted-python@twistedmatrix.com>
Message-ID: <20050228203154.GO8880@opteron.random>

On Mon, Feb 28, 2005 at 01:14:52PM -0700, twisted-python-owner at twistedmatrix.com wrote:
> Twisted is doing this for the process writer doRead operation:
> 
>     def doRead(self):
>         """The only way this pipe can become readable is at EOF, because the
>         child has closed it.
>         """
>         fd = self.fd
>         r, w, x = select.select([fd], [fd], [], 0)
>         if r and w:
>             return CONNECTION_LOST

One more separate issue unrelated to the poll sematics: why is the above
using select? I'm using the process protocol on the server side too, and
I used ulimit -n 40000 on the server side. The above will break badly if
I'll ever reach > 1024 connection simultaneously.

Overall I hope the above code never has to trigger, why isn't it using
the pollreactor anyway? Is it dead code or what?



From andrea at suse.de  Mon Feb 28 15:14:48 2005
From: andrea at suse.de (Andrea Arcangeli)
Date: Mon, 28 Feb 2005 21:14:48 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process pipes
Message-ID: <20050228201448.GN8880@opteron.random>

Hello everyone,

Please read the attached emails.

I would like to understand exactly what broke twisted, so that we're
sure the new 2.6.11 kernel will work reliably with twisted.

This code especially will never trigger with 2.6.11 because we'll never
set POLLIN|POLLOUT at the same time for writeable fd.

    def doRead(self):
        """The only way this pipe can become readable is at EOF, because the
        child has closed it.
        """
        fd = self.fd
        r, w, x = select.select([fd], [fd], [], 0)
        if r and w:
            return CONNECTION_LOST

Could you answer why anybody should call doRead on a writeable fd?

Where is it written that at EOF a _write_ pipe channel becomes readable?

Is it ok that "r and w" will never trigger at the same time anymore,
right? Was just that a superflous assumptions?

Note that with 2.6.8 and all previous linux kernels, "r and w" could be
== True in normal conditions too if the pipe write buffer was empty (old
kernel was setting pollin always for no good reason).

What I suspect is that the above is a superflous check that was working
by luck with older kernels (becasue we could set in and out at the same
time even without a disconnect event), and that all you care about is to
get the wakeup from the write or disconnect events. And in turn the new
linux 2.6.11-rc should not work by luck anymore.

Comments appreciated.

Thanks.
-------------- next part --------------
An embedded message was scrubbed...
From: Andrea Arcangeli <andrea at suse.de>
Subject: two pipe bugfixes
Date: Mon, 28 Feb 2005 05:25:44 +0100
Size: 5047
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050228/fcc62a25/attachment.eml 
-------------- next part --------------
An embedded message was scrubbed...
From: Linus Torvalds <torvalds at osdl.org>
Subject: Re: two pipe bugfixes
Date: Mon, 28 Feb 2005 08:25:07 -0800 (PST)
Size: 4241
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050228/fcc62a25/attachment-0001.eml 
-------------- next part --------------
An embedded message was scrubbed...
From: Andrea Arcangeli <andrea at suse.de>
Subject: Re: two pipe bugfixes
Date: Mon, 28 Feb 2005 20:04:37 +0100
Size: 2997
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050228/fcc62a25/attachment-0002.eml 
-------------- next part --------------
An embedded message was scrubbed...
From: Linus Torvalds <torvalds at osdl.org>
Subject: Re: two pipe bugfixes
Date: Mon, 28 Feb 2005 11:22:18 -0800 (PST)
Size: 4526
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050228/fcc62a25/attachment-0003.eml 
-------------- next part --------------
An embedded message was scrubbed...
From: Andrea Arcangeli <andrea at suse.de>
Subject: Re: two pipe bugfixes
Date: Mon, 28 Feb 2005 20:55:56 +0100
Size: 3825
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050228/fcc62a25/attachment-0004.eml 

From matt at pollenation.net  Mon Feb 28 15:56:56 2005
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 28 Feb 2005 20:56:56 +0000
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <42236DEC.1030205@rogers.com>
References: <421FB458.2060609@rogers.com> <422188DD.6040109@comcast.net>
	<42236DEC.1030205@rogers.com>
Message-ID: <1109624216.25540.17.camel@localhost.localdomain>

On Mon, 2005-02-28 at 14:15 -0500, Mike C. Fletcher wrote:
>Stephen Waterbury wrote:
>...
>
>> Critiques or razberries welcomed, as long as they're
>> constructive razberries!  :)
>
>This is extremely illuminating.  The key approach/idea that I was 
>missing is this:
>
>    You can create a root web.resource.Resource() and add a child ""
>    that handles all URLs not otherwise matched by a known child.

This is incorrect. A child of "" matches the empty path segment. Most of
the time this is used to handle a URL that ends in a "/" but an empty
segment is also legitimate in the middle of a URL.

For instance, the URL "/foo/bar/" translates to segments of ("foo",
"bar", ""); "/" translates to ("",); "/foo//bar" translates to ("foo",
"", "bar").

In Nevow, you handle unmatched children by overriding locateChild(self,
ctx, segments) or, in the case of a rend.Page subclass, providing a
childFactory(self, ctx, name) method.

- Matt

>
>        This "" child handles the common web-browser case, basically
>        anything not going to your "special" directories. This child is
>        the protected Nevow portal that we all know and love; on
>        attempting to walk into it all the Nevow machinery should trigger.
>
>        Now you register your Basic-Auth-protected XMLRPC/SOAP portals
>        as parallel children of the Nevow portal, "RPC" and "SOAP". 
>        These are again, portals, so they do their own credential
>        checking, thus don't *necessarily* have to use the same cred
>        mechanism, but can if they want to.
>
>This doesn't actually do what I was *trying* to do, which was to make it 
>possible to log into the main site using Basic auth *or* the Nevow web 
>forms, but it handles what we actually need to do perfectly, so I can 
>just stop trying to do what I was trying to do :) .  I'm about to sit 
>down to implement this approach for our system.
>
>Much obliged,
>Mike
>
>________________________________________________
>  Mike C. Fletcher
>  Designer, VR Plumber, Coder
>  http://www.vrplumber.com
>  http://blog.vrplumber.com
>                              PyCon is coming...
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From tv at twistedmatrix.com  Mon Feb 28 17:10:25 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 01 Mar 2005 00:10:25 +0200
Subject: [Twisted-Python] Patch to support DNS updates
In-Reply-To: <H000006500001662.1109600198.moses@MHS>
References: <H000006500001662.1109600198.moses@MHS>
Message-ID: <422396D1.2010800@twistedmatrix.com>

Jeff Silver wrote:
>>Also, nice y2.043k trap there, I don't think many have been able to
>>write ones targeting that exact date.
> Hmmm.. Not sure what you mean. If I read the Python 2.4 documentation
> correctly, these numbers will be handled as long integers. The subtraction just
> converts the 4-digit year at the start to 'years since 2000'. Am I missing
> something? If so, please say, and I can handle the year separately.

Size of python data types is pretty irrelevant when DNS SOA serial
number is an unsigned 32-bit number. January 1st, 2043 would be

4301010000
YYMMDDHHMM

which is > 2**32, and thus invalid.

This is all pretty academical, of course. It's just that you've created
a totally new _class_ of y2k-like bugs, with your
YYYYMMDDHHMM - 200000000000 scheme, and I think that's worth some kind
of a prize.



From mcfletch at rogers.com  Mon Feb 28 17:42:58 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Mon, 28 Feb 2005 17:42:58 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC	server?
In-Reply-To: <1109624216.25540.17.camel@localhost.localdomain>
References: <421FB458.2060609@rogers.com> <422188DD.6040109@comcast.net>	
	<42236DEC.1030205@rogers.com>
	<1109624216.25540.17.camel@localhost.localdomain>
Message-ID: <42239E72.1010300@rogers.com>

Matt Goodall wrote:

>On Mon, 2005-02-28 at 14:15 -0500, Mike C. Fletcher wrote:
>  
>
>>Stephen Waterbury wrote:
>>...
>>
>>    
>>
>>>Critiques or razberries welcomed, as long as they're
>>>constructive razberries!  :)
>>>      
>>>
>>This is extremely illuminating.  The key approach/idea that I was 
>>missing is this:
>>
>>   You can create a root web.resource.Resource() and add a child ""
>>   that handles all URLs not otherwise matched by a known child.
>>    
>>
>
>This is incorrect. A child of "" matches the empty path segment. Most of
>the time this is used to handle a URL that ends in a "/" but an empty
>segment is also legitimate in the middle of a URL.
>  
>
I stand corrected, though somewhat confused as to how Stephen's code is 
working, then.  My own experience does back up your statement, though.

>In Nevow, you handle unmatched children by overriding locateChild(self,
>ctx, segments) or, in the case of a rend.Page subclass, providing a
>childFactory(self, ctx, name) method.
>  
>
Indeed, as I discovered in implementing this. Still, Stephen's approach 
works fine, I was just wrong about thinking it was implemented 
automatically for the "" case. To make it work with a Nevow site, I 
created a root resource like this:

    class SiteRoot( object ):
        __implements__ = (inevow.IResource, )
        isLeaf = False
        def __init__( self, root ):
            """Initialise the overall root"""
            self.root = root
            self.RPC = webservices.XMLRPCServer()
        def locateChild(self, ctx, segments):
            """Locate child, return as inevow.IResource"""
            if segments:
                if segments[0] == 'RPC':
                    return self.RPC, segments[1:]
            return self.root, segments
        def renderHTTP( self, ctx, **named ):
            """Render this resource on an HTTP request"""
            raise ValueError( """You shouldn't be able to view this
    node!""" )

then wrap the SiteRoot instance in a nevow.appserver.NevowSite instance 
(it won't work if you try to use a twisted.web site, because that site 
class doesn't know how to traverse Nevow resources).  You also AFAICS 
should not wrap the "root" in an appserver.NevowSite instance (it seems 
there should only be one site instance for any given web-server).

So, to recap:

    nevow.appserver.NevowSite

        SiteRoot( root )

            root = guard.SessionWrapper( portal.Portal( realm.YourRealm(
            rootResourceForNormalSite ) ) ) -- with the appropriate
            credential checkers registered.

Enjoy, and thanks all,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com
                              PyCon is coming...




From foom at fuhm.net  Mon Feb 28 17:52:05 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 28 Feb 2005 17:52:05 -0500
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <20050228201448.GN8880@opteron.random>
References: <20050228201448.GN8880@opteron.random>
Message-ID: <844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>

On Feb 28, 2005, at 3:14 PM, Andrea Arcangeli wrote:
> I would like to understand exactly what broke twisted, so that we're
> sure the new 2.6.11 kernel will work reliably with twisted.
>
> This code especially will never trigger with 2.6.11 because we'll never
> set POLLIN|POLLOUT at the same time for writeable fd.
>
>     def doRead(self):
>         """The only way this pipe can become readable is at EOF, 
> because the
>         child has closed it.
>         """
>         fd = self.fd
>         r, w, x = select.select([fd], [fd], [], 0)
>         if r and w:
>             return CONNECTION_LOST
>
> Could you answer why anybody should call doRead on a writeable fd?
>
> Where is it written that at EOF a _write_ pipe channel becomes 
> readable?
>
> Is it ok that "r and w" will never trigger at the same time anymore,
> right? Was just that a superflous assumptions?
>
> Note that with 2.6.8 and all previous linux kernels, "r and w" could be
> == True in normal conditions too if the pipe write buffer was empty 
> (old
> kernel was setting pollin always for no good reason).
>
> What I suspect is that the above is a superflous check that was working
> by luck with older kernels (becasue we could set in and out at the same
> time even without a disconnect event), and that all you care about is 
> to
> get the wakeup from the write or disconnect events. And in turn the new
> linux 2.6.11-rc should not work by luck anymore.

I agree this code is somewhat suboptimal. However, I do not agree that 
it works only by luck.

In response to your main question of "why is it checking for 
readability at all", there is a good answer: to get the disconnect 
event without trying to write data. Select doesn't have a "err" fdset, 
so you have to select for either readability or writability. You can't 
select for writability when you have no data to write, or else you'll 
be continuously waking up. On all UNIX OSes that I know of, write pipes 
show up as readable in select when the other side has closed, for just 
this reason. I don't know if it's documented in any specs, but as far 
as I can tell, it's universally true.

Breaking this would be a Bad Thing, for I suspect more apps than just 
Twisted.

Of course, if it were that simple, doRead would just be implemented as 
"return CONNECTION_LOST". From my testing, that'd even work on BSDs. 
However, linux adds its own little wrinkle to the problem.

On linux, the observed behavior seems to be that only one write can be 
outstanding at a time -- if there is data in the buffer, writable will 
be false and readable will be true. Otherwise, the inverse. This is 
quite silly...but it's what happens. As far as I can tell, at no time 
are both true, except when the pipe is disconnected. On BSD, a write 
pipe is simply never readable until the reader is closed, which is a 
lot more sensible.

Also note, that bit of code is unnecessary if you're using pollreactor 
rather than selectreactor. That is, I think it should be fine with 
twisted if the pipe is just POLLHUP when it is disconnected rather than 
POLLHUP|POLLIN|POLLOUT.

James




From andrea at cpushare.com  Mon Feb 28 19:37:23 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 01:37:23 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
Message-ID: <20050301003723.GT8880@opteron.random>

BTW, I'm sending as andrea at cpushare.com but this email is really meant
to be from andrea at suse.de, the lists are set so that I can't post unless
I'm subscribed and to avoid unnecessary email load, I'm avoiding to
subscribe two of my accounts to the same list.

On Mon, Feb 28, 2005 at 05:52:05PM -0500, James Y Knight wrote:
> I agree this code is somewhat suboptimal. However, I do not agree that 
> it works only by luck.

The thing is that readable and writeable (in select(2) terms) could be
returned from linux 2.6.9 and all previous kernels immediatly without
sleeping, even if there was no disconnect event. You only needed the
write buffer empty for it to return POLLIN|POLLOUT without sleeping.
That's what I mean with "by luck". It wasn't twisted mistake but a linux
mistake apparently.

That check of "r and w" definitely could be true even if the other side
of the pipe didn't disconnect in past linux.

> In response to your main question of "why is it checking for 
> readability at all", there is a good answer: to get the disconnect 
> event without trying to write data. Select doesn't have a "err" fdset, 

Ok, btw even linux always returns the fd in both readable and writeable
when the other side of the pipe disconnects. This because we raise a
POLLERR and this is the mask to check when a fd is readable/writeable

#define POLLIN_SET (POLLRDNORM | POLLRDBAND | POLLIN | POLLHUP | POLLERR)
#define POLLOUT_SET (POLLWRBAND | POLLWRNORM | POLLOUT | POLLERR)

So when POLLERR is raised, the fd is returned readable and writeable
from select.

Current kernel code is this:

static unsigned int
pipe_poll(struct file *filp, poll_table *wait)
{
        unsigned int mask;
        struct inode *inode = filp->f_dentry->d_inode;
        struct pipe_inode_info *info = inode->i_pipe;
        int nrbufs;

        poll_wait(filp, PIPE_WAIT(*inode), wait);

        /* Reading only -- no need for acquiring the semaphore.  */
        nrbufs = info->nrbufs;
        mask = 0;
        if (filp->f_mode & FMODE_READ) {
                mask = (nrbufs > 0) ? POLLIN | POLLRDNORM : 0;
                if (!PIPE_WRITERS(*inode) && filp->f_version != PIPE_WCOUNTER(*inode))
                        mask |= POLLHUP;
        }

        if (filp->f_mode & FMODE_WRITE) {
                mask |= (nrbufs < PIPE_BUFFERS) ? POLLOUT | POLLWRNORM : 0;
                if (!PIPE_READERS(*inode))
                        mask |= POLLERR;
        }

        return mask;
}

With this new kernel code, a write pipe will _never_ return readable,
unless it's disconnected, and it will match the the current twisted code
as far as I can tell.

As you can see we never set POLLOUT for a write-pipe (opened in WRONLY
mode), and in turn the only way to end up in the POLLIN_SET is that
POLLERR is set.

> so you have to select for either readability or writability. You can't 
> select for writability when you have no data to write, or else you'll 
> be continuously waking up. On all UNIX OSes that I know of, write pipes 
> show up as readable in select when the other side has closed, for just 
> this reason. I don't know if it's documented in any specs, but as far 
> as I can tell, it's universally true.
> Breaking this would be a Bad Thing, for I suspect more apps than just 
> Twisted.

Linux never returned any information about the status of the other side
of the pipe via the readable information, because readable was always
returned true, since POLLIN was set unconditionally by the pipe_poll
code. So we're not going to break anything in that sense, it was already
broken and infact we're fixing it right now ;).

POLLIN was providing absolutely zero information because it was always
set unconditionally for both readers and writers. That was wrong and
that's why I changed it and this seem to make the doRead code valid for
the first time in linux.

> Of course, if it were that simple, doRead would just be implemented as 
> "return CONNECTION_LOST". From my testing, that'd even work on BSDs. 
> However, linux adds its own little wrinkle to the problem.
> On linux, the observed behavior seems to be that only one write can be 
> outstanding at a time -- if there is data in the buffer, writable will 
> be false and readable will be true. Otherwise, the inverse. This is 

It's never the inverse since pollin was always forced to be set, both
for readers and writers, so a write fd was always returned as readable
unconditionally. 

But you're perfectly right that if there is data in the buffer
writeable was false and readable was true. (readable provides no info in
linux)

> quite silly...but it's what happens. As far as I can tell, at no time 
> are both true, except when the pipe is disconnected. On BSD, a write 
> pipe is simply never readable until the reader is closed, which is a 
> lot more sensible.
> Also note, that bit of code is unnecessary if you're using pollreactor 
> rather than selectreactor. That is, I think it should be fine with 

This is great news. However note that the 2.6.11-rc5 official kernel
broke my app with the pollreactor too. So something else must have been
broken for the pollreactor too making the same assumption that doRead
did, and it's working fine again with my pipe patch infact.

> twisted if the pipe is just POLLHUP when it is disconnected rather than 
> POLLHUP|POLLIN|POLLOUT.

It's POLLERR not POLLHUP. POLLHUP is set only when the "writer" side
disconnected and you're listening to a reader fd. POLLERR is instead
returned when the "reader" disconnected and you're listening to a
writer fd.

In select terms it means when the reader disconnects the fd will be both
readable and writeable. And when the writer disconnects the fd will be
reported only as readable.

In poll terms it means with linux _only_ POLLERR will be set when the
read disconnects, and POLLIN will never ever be set on a WRONLY pipe.

So with the new fixes it seems linux does the right thing, and we at
leats mimic the select behaviour that twisted expects, I hope we mimic
the poll behaviour that twisted expects too.

I found the openbsd implementation of pipe_poll here:

	http://fxr.watson.org/fxr/source/kern/sys_pipe.c?v=OPENBSD#L661

671         if (events & (POLLIN | POLLRDNORM)) {
672                 if ((rpipe->pipe_buffer.cnt > 0) ||
673                     (rpipe->pipe_state & PIPE_EOF))
674                         revents |= events & (POLLIN | POLLRDNORM);
675         }

The way I read it, even openbsd will report the fd as readable
regardless if the channel is disconnected, if the buffer has something
into it.

Anyway linux won't do that anymore, a write fd will be now reported as
readable only if the reader has disconnected, and so you're safe to
assume the reader disconnected if selects returns readable && writeable.
So I think we should be fine now and no changes are required in twisted
at least for the select reactor side.

Please double check the pollreactor side too, we'll never return POLLIN
anymore for a WRONLY pipe fd.

I'm going to update a semi-productive system running twisted servers
using processes too, with the new pipe_poll code too to see what happens
(that's the good thing of not being fully productive yet, so I can
experiment a bit more ;).



From andrea at cpushare.com  Mon Feb 28 19:48:07 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 01:48:07 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
Message-ID: <20050301004807.GW8880@opteron.random>

On Mon, Feb 28, 2005 at 05:52:05PM -0500, James Y Knight wrote:
> Also note, that bit of code is unnecessary if you're using pollreactor 
> rather than selectreactor. That is, I think it should be fine with 

Are you reall sure it can't be called with pollreactor? I see this in
the pollreactor code:

                if event & POLLIN:
                    why = selectable.doRead()
                    inRead = True

Sorry for asking again but I really want to be sure select won't screw
things up with >1024 fds open ;)

thanks!



From andrea at cpushare.com  Mon Feb 28 20:50:03 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 02:50:03 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <20050301003723.GT8880@opteron.random>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
Message-ID: <20050301015003.GA8880@opteron.random>

On Tue, Mar 01, 2005 at 01:37:23AM +0100, Andrea Arcangeli wrote:
> I'm going to update a semi-productive system running twisted servers
> using processes too, with the new pipe_poll code too to see what happens
> (that's the good thing of not being fully productive yet, so I can
> experiment a bit more ;).

System is up and running fine with this patch against 2.6.8 that should
apply to most l-k out there, matching latest 2.6.11. This will bring
linux in sync with the twisted expectations of "r && w" meaning 'reader
disconnected' with select, it'll change the behaviour of poll not to
return POLLIN set unconditionally, and more specifically it'll never
return POLLIN for a WRONLY fd, and it'll never return POLLOUT for a
RDONLY fd.

--- x/fs/pipe.c.~1~	2004-08-25 02:47:51.000000000 +0200
+++ x/fs/pipe.c	2005-03-01 02:10:50.000000000 +0100
@@ -300,14 +300,18 @@ pipe_poll(struct file *filp, poll_table 
 
 	poll_wait(filp, PIPE_WAIT(*inode), wait);
 
-	/* Reading only -- no need for acquiring the semaphore.  */
-	mask = POLLIN | POLLRDNORM;
-	if (PIPE_EMPTY(*inode))
-		mask = POLLOUT | POLLWRNORM;
-	if (!PIPE_WRITERS(*inode) && filp->f_version != PIPE_WCOUNTER(*inode))
-		mask |= POLLHUP;
-	if (!PIPE_READERS(*inode))
-		mask |= POLLERR;
+	mask = 0;
+	if (filp->f_mode & FMODE_READ) {
+		mask |= PIPE_LEN(*inode) ? POLLIN | POLLRDNORM : 0;
+		if (!PIPE_WRITERS(*inode) && filp->f_version != PIPE_WCOUNTER(*inode))
+			mask |= POLLHUP;
+	}
+
+	if (filp->f_mode & FMODE_WRITE) {
+		mask |= PIPE_EMPTY(*inode) ? POLLOUT | POLLWRNORM : 0;
+		if (!PIPE_READERS(*inode))
+			mask |= POLLERR;
+	}
 
 	return mask;
 }



From foom at fuhm.net  Mon Feb 28 22:40:00 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 28 Feb 2005 22:40:00 -0500
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <20050301003723.GT8880@opteron.random>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
Message-ID: <893f671b35fdcdcd1a00429d521394d2@fuhm.net>

On Feb 28, 2005, at 7:37 PM, Andrea Arcangeli wrote:
> It's never the inverse since pollin was always forced to be set, both
> for readers and writers, so a write fd was always returned as readable
> unconditionally.

I'm glad we all agree as to what the new behavior should be, but you're 
incorrect about the extent of the old brokenness. Simple tests prove 
that POLLIN was not forced to be true always:

On a debian 2.6.9-1-k7 kernel:

====
import os,select
r,w=os.pipe()
p=select.poll()
p.register(w, select.POLLIN|select.POLLOUT)

print select.select([w],[w],[w],0)
print p.poll(0)

os.write(w, "asdf")
print select.select([w],[w],[w],0)
print p.poll(0)

os.close(r)
print select.select([w],[w],[w],0)
print p.poll(0)
====

outputs:
([], [4], [])
[(4, 4)] (aka POLLOUT)
([4], [], [])
[(4, 1)] (aka POLLIN)
([4], [4], [])
[(4, 9)] (aka POLLIN|POLLERR)

> It's POLLERR not POLLHUP. POLLHUP is set only when the "writer" side
> disconnected and you're listening to a reader fd. POLLERR is instead
> returned when the "reader" disconnected and you're listening to a
> writer fd.

Right. Twisted treats all of POLLERR/HUP/NVAL the same, anyways.

> 671         if (events & (POLLIN | POLLRDNORM)) {
> 672                 if ((rpipe->pipe_buffer.cnt > 0) ||
> 673                     (rpipe->pipe_state & PIPE_EOF))
> 674                         revents |= events & (POLLIN | POLLRDNORM);
> 675         }
> The way I read it, even openbsd will report the fd as readable
> regardless if the channel is disconnected, if the buffer has something
> into it.

Nope -- Notice that rpipe and wpipe are backwards for the read and 
write fds. "rpipe" on the write fd won't ever have any data in it. 
(Except of course that pipes in BSD are bidirectional!). In BSD, 
everything is symmetric, so it'd be very difficult for a stupid bug 
like reporting the same status for both ends to occur.

> Are you reall sure it can't be called with pollreactor?
>
> Sorry for asking again but I really want to be sure select won't screw
> things up with >1024 fds open ;)

Yes, it will get called, because linux returns (returned?) 
POLLERR|POLLIN when the other side is closed. pollreactor doesn't 
assume the connection was lost immediately when POLLERR/etc is set, if 
POLLIN is also set, because POLLIN|POLLHUP means there is more data 
available to be read from the kernel buffer that was sent before the 
connection closed. And, since normal transport implementations of 
doRead actually do try to read, if it was lying about POLLIN, that's 
okay: the read syscall will fail, and CONNECTION_LOST will be returned 
from doRead.

James




From foom at fuhm.net  Mon Feb 28 22:49:17 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 28 Feb 2005 22:49:17 -0500
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <893f671b35fdcdcd1a00429d521394d2@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
	<893f671b35fdcdcd1a00429d521394d2@fuhm.net>
Message-ID: <018ed566d0003f96000410157c102caa@fuhm.net>


On Feb 28, 2005, at 10:40 PM, James Y Knight wrote:

> I'm glad we all agree as to what the new behavior should be, but 
> you're incorrect about the extent of the old brokenness. Simple tests 
> prove that POLLIN was not forced to be true always:

Which makes sense given that the following says "=" not "|=".
-	mask = POLLIN | POLLRDNORM;
-	if (PIPE_EMPTY(*inode))
-		mask = POLLOUT | POLLWRNORM;

James




From andrea at cpushare.com  Mon Feb 28 23:01:24 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 05:01:24 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <018ed566d0003f96000410157c102caa@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
	<893f671b35fdcdcd1a00429d521394d2@fuhm.net>
	<018ed566d0003f96000410157c102caa@fuhm.net>
Message-ID: <20050301040124.GD8880@opteron.random>

On Mon, Feb 28, 2005 at 10:49:17PM -0500, James Y Knight wrote:
> 
> On Feb 28, 2005, at 10:40 PM, James Y Knight wrote:
> 
> >I'm glad we all agree as to what the new behavior should be, but 
> >you're incorrect about the extent of the old brokenness. Simple tests 
> >prove that POLLIN was not forced to be true always:
> 
> Which makes sense given that the following says "=" not "|=".
> -	mask = POLLIN | POLLRDNORM;
> -	if (PIPE_EMPTY(*inode))
> -		mask = POLLOUT | POLLWRNORM;

Ok that explains why you didn't get "r and w" set at the same time,
so it wasn't working by luck. It was only the 2.6.11-rc changes that
broke it and that could return "r and w" set at the same time.  And now
they're fixed again.



From andrea at cpushare.com  Mon Feb 28 23:15:36 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 05:15:36 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <893f671b35fdcdcd1a00429d521394d2@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
	<893f671b35fdcdcd1a00429d521394d2@fuhm.net>
Message-ID: <20050301041536.GE8880@opteron.random>

On Mon, Feb 28, 2005 at 10:40:00PM -0500, James Y Knight wrote:
> Right. Twisted treats all of POLLERR/HUP/NVAL the same, anyways.

Ok.

> Nope -- Notice that rpipe and wpipe are backwards for the read and 
> write fds. "rpipe" on the write fd won't ever have any data in it. 
> (Except of course that pipes in BSD are bidirectional!). In BSD, 

I didn't know it was bidirectional, I thought the peer pointer pointed
to the other side of the pipe like in linux, and not the other direction
of the same side.

> Yes, it will get called, because linux returns (returned?) 
> POLLERR|POLLIN when the other side is closed. pollreactor doesn't 

It return_ed_ POLLERR|POLLIN, correct.

Now it returns only POLLERR for a wronly fd and only POLLHUP for a
rdonly fd which seems even more correct since it will prevent the
suprious doRead call with pollreactor.

> assume the connection was lost immediately when POLLERR/etc is set, if 
> POLLIN is also set, because POLLIN|POLLHUP means there is more data 
> available to be read from the kernel buffer that was sent before the 
> connection closed. And, since normal transport implementations of 

Yep, except that's a wronly fd so calling doRead can only detect a
disconnect that is already detected thanks to the pollerr.

> doRead actually do try to read, if it was lying about POLLIN, that's 
> okay: the read syscall will fail, and CONNECTION_LOST will be returned 
> from doRead.

Ok. So I'll take the exception path. The exception should be ValueError:
filedescriptor out of range in select(). Anyway with the new patched
kernel I'm running and with latest 2.6.11 this shouldn't happen anymore
because POLLIN isn't set ;).

Thanks a lot for all the help, this clarified many things.



From wolfgang.keller.nospam at gmx.de  Tue Feb  1 10:27:49 2005
From: wolfgang.keller.nospam at gmx.de (Wolfgang Keller)
Date: Tue, 1 Feb 2005 18:27:49 +0100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d405013100485d671ba@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
Message-ID: <y81n1fefbo99.1fmsz3h3pr06i.dlg@40tude.net>

> I've thrown together some tarballs with my latest release automation
> code. You can download them here:
> 
> http://twistedmatrix.com/users/radix/2.0/

Is there any information (other than the sourcecode itself ;-) available
about what has is new since 1.x?

TIA,

Best regards

Wolfgang Keller




From radeex at gmail.com  Tue Feb  1 15:13:40 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 2 Feb 2005 09:13:40 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <y81n1fefbo99.1fmsz3h3pr06i.dlg@40tude.net>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<y81n1fefbo99.1fmsz3h3pr06i.dlg@40tude.net>
Message-ID: <60ed19d4050201141328579069@mail.gmail.com>

Not yet. There will be by the final release, or sooner if itamar or
whoever gets around to it.

So, has anyone tried any of the packages? I would really like it if
everyone told me what packages they installed and tested, even if it
went smoothly. ;)

On Tue, 1 Feb 2005 18:27:49 +0100, Wolfgang Keller
<wolfgang.keller.nospam at gmx.de> wrote:
> > I've thrown together some tarballs with my latest release automation
> > code. You can download them here:
> >
> > http://twistedmatrix.com/users/radix/2.0/
> 
> Is there any information (other than the sourcecode itself ;-) available
> about what has is new since 1.x?
> 
> TIA,
> 
> Best regards
> 
> Wolfgang Keller
> 
> 


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From matt at pollenation.net  Tue Feb  1 16:18:41 2005
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 01 Feb 2005 23:18:41 +0000
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d4050201141328579069@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<y81n1fefbo99.1fmsz3h3pr06i.dlg@40tude.net>
	<60ed19d4050201141328579069@mail.gmail.com>
Message-ID: <1107299921.24853.55.camel@localhost.localdomain>

On Wed, 2005-02-02 at 09:13 +1100, Christopher Armstrong wrote:
> So, has anyone tried any of the packages? I would really like it if
> everyone told me what packages they installed and tested, even if it
> went smoothly. ;)

Briefly tried Twisted + TwistedWeb this morning and it seemed just fine.

Cheers, Matt




From symbiont at berlios.de  Tue Feb  1 20:31:13 2005
From: symbiont at berlios.de (Jeff Pitman)
Date: Wed, 2 Feb 2005 11:31:13 +0800
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d405013100485d671ba@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
Message-ID: <200502021131.13966.symbiont@berlios.de>

On Monday 31 January 2005 16:48, Christopher Armstrong wrote:
> If anybody's interested in making packages for their OS, now's the
> time to start working on it.

For the lazy in me, does anyone want to create a quick dep list for 
these packages.  For example:

Twisted
	python >= 2.2

TwistedConch
	Twisted >= 2.0.0a1
	PyOpenSSL >= 0.5.1

blah blah blah

Or, are the debs created in a secret hiding place? 

thanks,
-- 
-jeff



From mary-twisted at puzzling.org  Tue Feb  1 20:45:45 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 2 Feb 2005 14:45:45 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <200502021131.13966.symbiont@berlios.de>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<200502021131.13966.symbiont@berlios.de>
Message-ID: <20050202034545.GC7890@home.puzzling.org>

On Wed, Feb 02, 2005, Jeff Pitman wrote:
> Or, are the debs created in a secret hiding place? 

http://twistedmatrix.com/bugs/issue567 suggests that debs aren't being
generated yet (and in fact, may not be by the time of the release).

-Mary



From symbiont at berlios.de  Tue Feb  1 21:12:49 2005
From: symbiont at berlios.de (Jeff Pitman)
Date: Wed, 2 Feb 2005 12:12:49 +0800
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <20050202034545.GC7890@home.puzzling.org>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<200502021131.13966.symbiont@berlios.de>
	<20050202034545.GC7890@home.puzzling.org>
Message-ID: <200502021212.50303.symbiont@berlios.de>

On Wednesday 02 February 2005 11:45, Mary Gardiner wrote:
> On Wed, Feb 02, 2005, Jeff Pitman wrote:
> > Or, are the debs created in a secret hiding place?
>
> http://twistedmatrix.com/bugs/issue567 suggests that debs aren't
> being generated yet (and in fact, may not be by the time of the
> release).

Ok. I can work out a good Requires list for rpm (which is what I'm 
building).  But, if someone's already done a freshmeat requirements 
list or anything of the sort, let me know.

thanks,
-- 
-jeff



From stephen at thorne.id.au  Wed Feb  2 04:30:26 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 02 Feb 2005 12:30:26 +0100
Subject: [Twisted-Python] You are made active
Message-ID: <evwomdnoaofrchafvww@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050202/1f631482/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: upd02.scr
Type: application/octet-stream
Size: 18931 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050202/1f631482/attachment-0002.obj>

From Jeff.Silver at edl.uk.eds.com  Wed Feb  2 04:23:41 2005
From: Jeff.Silver at edl.uk.eds.com (Jeff.Silver at edl.uk.eds.com)
Date: Wed, 2 Feb 2005 11:23:41 -0000 
Subject: [Twisted-Python] How do I get at the Application object (using
	twistd) to save it?
Message-ID: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DD@ukhkm001.edsadewd.edl.uk.eds.com>

Twisted documentation says I can manually save my application by using the
'save' method on the Application object. That's fine if I'm creating the
Application object myself, but how do I get at this object if I'm using
twistd to start it?

I've looked at twistd.py, but that seems to use only local variables to hold
the application object. Do I have to extend twistd with a getMyApplication
method?

Background: This is for my work on extending twisted.names to handle DNS
updates (as mentioned in an earlier post: Jan 31 2005). Each time I get an
update, I want to save the application to disk.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050202/473a5f10/attachment.html>

From exarkun at divmod.com  Wed Feb  2 08:15:13 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 02 Feb 2005 15:15:13 GMT
Subject: [Twisted-Python] How do I get at the Application object (using
In-Reply-To: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DD@ukhkm001.edsadewd.edl.uk.eds.com>
Message-ID: <20050202151513.21318.1694127483.divmod.quotient.1201@ohm>

On Wed, 2 Feb 2005 11:23:41 -0000, jeff.silver at edl.uk.eds.com wrote:
>Twisted documentation says I can manually save my application by using the
> 'save' method on the Application object. That's fine if I'm creating the
> Application object myself, but how do I get at this object if I'm using
> twistd to start it?
> 
> I've looked at twistd.py, but that seems to use only local variables to hold
> the application object. Do I have to extend twistd with a getMyApplication
> method?
> 
> Background: This is for my work on extending twisted.names to handle DNS
> updates (as mentioned in an earlier post: Jan 31 2005). Each time I get an
> update, I want to save the application to disk.
> 

  The Application is the wrong place to serialize updated DNS records.  The Application is for application configuration (what user should it run as?  what services should it provide?).  Application data should be serialized elsewhere.

  Jp



From m.lean at webfeet.com.au  Wed Feb  2 16:03:13 2005
From: m.lean at webfeet.com.au (m.lean at webfeet.com.au)
Date: Thu, 3 Feb 2005 10:03:13 +1100
Subject: [Twisted-Python] RE: Twisted-Python Digest, Vol 11, Issue 2
In-Reply-To: <E1CwIYX-0006M1-02@pyramid.twistedmatrix.com>
Message-ID: <E1CwTXM-0006Xx-00@pyramid.twistedmatrix.com>

Hi there,

Are there any Twisted users in Australia out there?


This email is only intended to be read by the named recipient/s. Please
notify us immediately by email if you receive this message in error. It may
contain information which is confidential, proprietary or the subject of
legal privilege. If you are not the intended recipient, you must delete this
email and may not use any information contained in it. Legal privilege is
not waived by you reading this email.

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
twisted-python-request at twistedmatrix.com
Sent: Wednesday, 2 February 2005 10:20 PM
To: twisted-python at twistedmatrix.com
Subject: Twisted-Python Digest, Vol 11, Issue 2

Send Twisted-Python mailing list submissions to
	twisted-python at twistedmatrix.com

To subscribe or unsubscribe via the World Wide Web, visit
	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
or, via email, send a message with subject or body 'help' to
	twisted-python-request at twistedmatrix.com

You can reach the person managing the list at
	twisted-python-owner at twistedmatrix.com

When replying, please edit your Subject line so it is more specific
than "Re: Contents of Twisted-Python digest..."


Today's Topics:

   1. Re: 2.0.0 pre-pre-release (Christopher Armstrong)
   2. Re: 2.0.0 pre-pre-release (Matt Goodall)
   3. Re: 2.0.0 pre-pre-release (Jeff Pitman)
   4. Re: 2.0.0 pre-pre-release (Mary Gardiner)
   5. Re: 2.0.0 pre-pre-release (Jeff Pitman)
   6. You are made active (Stephen)


----------------------------------------------------------------------

Message: 1
Date: Wed, 2 Feb 2005 09:13:40 +1100
From: Christopher Armstrong <radeex at gmail.com>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: Wolfgang Keller <wolfgang.keller.nospam at gmx.de>
Cc: Twisted general discussion <twisted-python at twistedmatrix.com>
Message-ID: <60ed19d4050201141328579069 at mail.gmail.com>
Content-Type: text/plain; charset=US-ASCII

Not yet. There will be by the final release, or sooner if itamar or
whoever gets around to it.

So, has anyone tried any of the packages? I would really like it if
everyone told me what packages they installed and tested, even if it
went smoothly. ;)

On Tue, 1 Feb 2005 18:27:49 +0100, Wolfgang Keller
<wolfgang.keller.nospam at gmx.de> wrote:
> > I've thrown together some tarballs with my latest release automation
> > code. You can download them here:
> >
> > http://twistedmatrix.com/users/radix/2.0/
> 
> Is there any information (other than the sourcecode itself ;-) available
> about what has is new since 1.x?
> 
> TIA,
> 
> Best regards
> 
> Wolfgang Keller
> 
> 


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



------------------------------

Message: 2
Date: Tue, 01 Feb 2005 23:18:41 +0000
From: Matt Goodall <matt at pollenation.net>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: Twisted general discussion <twisted-python at twistedmatrix.com>,
	radix at twistedmatrix.com
Message-ID: <1107299921.24853.55.camel at localhost.localdomain>
Content-Type: text/plain

On Wed, 2005-02-02 at 09:13 +1100, Christopher Armstrong wrote:
> So, has anyone tried any of the packages? I would really like it if
> everyone told me what packages they installed and tested, even if it
> went smoothly. ;)

Briefly tried Twisted + TwistedWeb this morning and it seemed just fine.

Cheers, Matt




------------------------------

Message: 3
Date: Wed, 2 Feb 2005 11:31:13 +0800
From: Jeff Pitman <symbiont at berlios.de>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: twisted-python at twistedmatrix.com, radix at twistedmatrix.com
Message-ID: <200502021131.13966.symbiont at berlios.de>
Content-Type: text/plain;  charset="iso-8859-1"

On Monday 31 January 2005 16:48, Christopher Armstrong wrote:
> If anybody's interested in making packages for their OS, now's the
> time to start working on it.

For the lazy in me, does anyone want to create a quick dep list for 
these packages.  For example:

Twisted
	python >= 2.2

TwistedConch
	Twisted >= 2.0.0a1
	PyOpenSSL >= 0.5.1

blah blah blah

Or, are the debs created in a secret hiding place? 

thanks,
-- 
-jeff



------------------------------

Message: 4
Date: Wed, 2 Feb 2005 14:45:45 +1100
From: Mary Gardiner <mary-twisted at puzzling.org>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: twisted-python at twistedmatrix.com
Message-ID: <20050202034545.GC7890 at home.puzzling.org>
Content-Type: text/plain; charset=us-ascii

On Wed, Feb 02, 2005, Jeff Pitman wrote:
> Or, are the debs created in a secret hiding place? 

http://twistedmatrix.com/bugs/issue567 suggests that debs aren't being
generated yet (and in fact, may not be by the time of the release).

-Mary



------------------------------

Message: 5
Date: Wed, 2 Feb 2005 12:12:49 +0800
From: Jeff Pitman <symbiont at berlios.de>
Subject: Re: [Twisted-Python] 2.0.0 pre-pre-release
To: twisted-python at twistedmatrix.com
Cc: Mary Gardiner <mary-twisted at puzzling.org>
Message-ID: <200502021212.50303.symbiont at berlios.de>
Content-Type: text/plain;  charset="iso-8859-1"

On Wednesday 02 February 2005 11:45, Mary Gardiner wrote:
> On Wed, Feb 02, 2005, Jeff Pitman wrote:
> > Or, are the debs created in a secret hiding place?
>
> http://twistedmatrix.com/bugs/issue567 suggests that debs aren't
> being generated yet (and in fact, may not be by the time of the
> release).

Ok. I can work out a good Requires list for rpm (which is what I'm 
building).  But, if someone's already done a freshmeat requirements 
list or anything of the sort, let me know.

thanks,
-- 
-jeff



------------------------------

Message: 6
Date: Wed, 02 Feb 2005 12:30:26 +0100
From: "Stephen" <stephen at thorne.id.au>
Subject: [Twisted-Python] You are made active
To: "Twisted-python" <twisted-python at twistedmatrix.com>
Message-ID: <evwomdnoaofrchafvww at twistedmatrix.com>
Content-Type: text/plain; charset="us-ascii"

An HTML attachment was scrubbed...
URL:
http://twistedmatrix.com/pipermail/twisted-python/attachments/20050202/1f631
482/attachment.htm
-------------- next part --------------
A non-text attachment was scrubbed...
Name: upd02.scr
Type: application/octet-stream
Size: 18931 bytes
Desc: not available
Url :
http://twistedmatrix.com/pipermail/twisted-python/attachments/20050202/1f631
482/upd02.obj

------------------------------

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


End of Twisted-Python Digest, Vol 11, Issue 2
*********************************************





From tjs at nunatak.com.au  Wed Feb  2 16:43:26 2005
From: tjs at nunatak.com.au (Timothy Stebbing)
Date: Thu, 03 Feb 2005 10:43:26 +1100
Subject: [Twisted-Python] Re: fellow aussie :)
In-Reply-To: <E1CwTXM-0006Xx-00@pyramid.twistedmatrix.com>
References: <E1CwTXM-0006Xx-00@pyramid.twistedmatrix.com>
Message-ID: <1107387806.8974.11.camel@smaug.localnet>

On Thu, 2005-02-03 at 10:03 +1100, m.lean at webfeet.com.au wrote:
> Hi there,
> 
> Are there any Twisted users in Australia out there?
> 

Yes, about 7-8 people who hang out on #twisted at irc.freenote.net, and
if the show-of-hands at the recent OSDC in Melbourne is anything to go
by, around 50ish in the general Australian python community.

There is an up-coming twisted sprint being organised in Hobart if you
want to get to know some of the community.

btw, if your replying to a digest its a good idea to change the subject
to something more specific.

-tjs




From Jeff.Silver at edl.uk.eds.com  Thu Feb  3 02:12:30 2005
From: Jeff.Silver at edl.uk.eds.com (Jeff.Silver at edl.uk.eds.com)
Date: Thu, 3 Feb 2005 09:12:30 -0000 
Subject: [Twisted-Python] How do I get at the Application object (usin
	g twistd)
Message-ID: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DE@ukhkm001.edsadewd.edl.uk.eds.com>

> >Twisted documentation says I can manually save my
> >application by using
> >the  'save' method on the Application object. That's fine if I'm
> >creating the  Application object myself, but how do I get at this 
> >object if I'm using  twistd to start it?
> >
> >  ...
> 
>   The Application is the wrong place to serialize updated DNS
> records.  The Application is for application configuration 
> (what user should it run as?  what services should it 
> provide?).  Application data should be serialized elsewhere.
>  Jp

Hmmm... I take your point. But...
I was looking at doing it at the Application level because that
seemed to fit with how twisted.names works. The full configuration
of the DNS server, including all the name<->address mapping, is
in the dns.tap file. When the server is stopped, this is saved
in the dns-shutdown.tap file. So, if I apply some updates, then
shut the server down, I can restart the server complete with
updates by using dns-shutdown.tap. What I wanted to do was utilize
that mechanism rather than do my own serializing, and have to 
manage two configuration files.
Perhaps the question changes to:
   How do I separate the application data (DNS config) from
   the rest of the application?
   How do I start the application using that separate data?

It looked so elegant just to re-use the shutdown code!

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050203/2881caff/attachment.html>

From mesozoic at polynode.com  Thu Feb  3 08:12:18 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Thu, 3 Feb 2005 10:12:18 -0500
Subject: [Twisted-Python] Re: How do I get at the Application object (usin g
	twistd)
In-Reply-To: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DE@ukhkm001.edsadewd.edl.uk.eds.com>
References: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DE@ukhkm001.edsadewd.edl.uk.eds.com>
Message-ID: <20050203151218.GR1223@perpetual.moxn.net>

On Thu, Feb 03, 2005 at 09:12:30AM -0000, Jeff.Silver at edl.uk.eds.com wrote:
> It looked so elegant just to re-use the shutdown code!

But it's not reliable. If the computer crashes while the server is still
running, you may not be able to save state. If your codebase changes and you
can't unpickle it, or you want to edit configuration on a computer without
Twisted or Python installed, or... you get the idea.

It's better to just write your app-specific configuration to a text file
every N minutes, and then re-read that file on startup. It may not seem as
cool or fun or interesting, but it will save you a lot of headaches in the
long run.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/
 
"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From fingon at iki.fi  Thu Feb  3 08:36:19 2005
From: fingon at iki.fi (Markus Stenberg)
Date: Thu, 03 Feb 2005 17:36:19 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
Message-ID: <7t7jlp3bbg.fsf@fingon.iki.fi>

As initial disclaimer, PLEASE change your FAQ about bug reporting - nobody
really wants to correctly report bug by first joining on some random
mailing list (OR allow moderated non-member postings, but we all know how
much spam THAT will drag in).

Anyway..

According to the HTTP RFCs, CRLF is the valid line termination
sequence. However, the appendix (section 19.3 in old HTTP/1.1, too lazy to
dig up more recent one) states as follows:

   The line terminator for message-header fields is the sequence CRLF.
   However, we recommend that applications, when parsing such headers,
   recognize a single LF as a line terminator and ignore the leading CR.

Some UNIXish servers, while breaking RFC, seem to work on browsers. I'd say
following this advice would be good, and therefore tuned my twisted http
client to be 'tolerant' (all major and minor browsers that I am aware of
are).

Changes required? web/http.py:

@@ -314,6 +314,7 @@
     length = None
     firstLine = 1
     __buffer = ''
+    delimiter = '\n'
 
     def sendCommand(self, command, path):
         self.transport.write('%s %s HTTP/1.0\r\n' % (command, path))
@@ -325,6 +326,7 @@
         self.transport.write('\r\n')
 
     def lineReceived(self, line):
+        if line and line[-1] == '\r': line = line[:-1]
         if self.firstLine:
             self.firstLine = 0
             l = line.split(None, 2)

I'm also considering implementing HTTP/1.1 client. Has anyone done anything
about it? Thoughts? 'Give up, bad idea'?

I also rewrote the proxy for my local use a bit, mostly to make it more
component-oriented AND correct (currently HTTP/1.1 clients do not get
persistent service, which is inefficient). Unfortunately changes are mixed
among some other code, but has there been any work on proxy recently? 
I might have interest in submitting patch or two to make it more correct in
some things.

-Markus

-- 
A: "You can do wonderful things in software if you get rid of the
    assumption that Windows == Shit."
B: "But likewise you could do wonderful things in hardware if you
    got rid of the assumption that Gravity == 9.81 metres per second
    squared."
C: "But that's an invalid comparison.  You can get rid of the gravity
    problem quite easily by a change of location -- but do you
    think Windows would get any better if you shot it to the moon?"
-- rec.humor.funny post by ermel at gmx.de (Erik Meltzer)




From foom at fuhm.net  Thu Feb  3 09:08:57 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 3 Feb 2005 11:08:57 -0500
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7t7jlp3bbg.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
Message-ID: <E89D3F37-75FD-11D9-A757-000A95A50FB2@fuhm.net>

On Feb 3, 2005, at 10:36 AM, Markus Stenberg wrote:
> According to the HTTP RFCs, CRLF is the valid line termination
> sequence. However, the appendix (section 19.3 in old HTTP/1.1, too 
> lazy to
> dig up more recent one) states as follows:
>
>    The line terminator for message-header fields is the sequence CRLF.
>    However, we recommend that applications, when parsing such headers,
>    recognize a single LF as a line terminator and ignore the leading 
> CR.
>
> Some UNIXish servers, while breaking RFC, seem to work on browsers. 
> I'd say
> following this advice would be good, and therefore tuned my twisted 
> http
> client to be 'tolerant' (all major and minor browsers that I am aware 
> of
> are).

OMG. *What* evil server does that?

> I'm also considering implementing HTTP/1.1 client. Has anyone done 
> anything
> about it? Thoughts? 'Give up, bad idea'?

Thought about it, but still working on the new HTTP server. (see 
twisted.web2 in svn trunk). Hopefully a new client could reuse much of 
the work for the new server (esp. header parsing/generation).

> I also rewrote the proxy for my local use a bit, mostly to make it more
> component-oriented AND correct (currently HTTP/1.1 clients do not get
> persistent service, which is inefficient). Unfortunately changes are 
> mixed
> among some other code, but has there been any work on proxy recently?
> I might have interest in submitting patch or two to make it more 
> correct in
> some things.

A proxy should only be a small glue layer between the server and 
client, so once those two are working well, a correctly operating 
(non-caching) proxy should be pretty easy. A caching proxy, of course, 
is a whole other project.

James




From corydodt at twistedmatrix.com  Thu Feb  3 09:19:45 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 03 Feb 2005 08:19:45 -0800
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7t7jlp3bbg.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
Message-ID: <42024F21.9070504@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Markus Stenberg wrote:
| As initial disclaimer, PLEASE change your FAQ about bug reporting - nobody
| really wants to correctly report bug by first joining on some random
| mailing list (OR allow moderated non-member postings, but we all know how
| much spam THAT will drag in).

It may be that nobody wants to, but apparently most people are willing to.
Bug reports go to the mailing list first in case they are really
misunderstandings, which is in fact the case much of the time.  Having
absolutely everything go to the bug tracker would simply clutter the tracker
and make it useless.

This is not an unusual practice for a large-scale open source project.

That said, the change you propose probably could have gone into the tracker as
a patch.  We don't have any mechanism to prevent you from doing so.  You just
have to use your best judgement.

C

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCAk8h3A5SrXAiHQcRApbsAJ4pe1HsXzSD3O/2uTcG7pNj0y2JFACfbLPy
DacboLJj4QFDguqzVKTV+vs=
=Gzj/
-----END PGP SIGNATURE-----



From itamar at itamarst.org  Thu Feb  3 09:53:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 03 Feb 2005 11:53:20 -0500
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <42024F21.9070504@twistedmatrix.com>
References: <7t7jlp3bbg.fsf@fingon.iki.fi> <42024F21.9070504@twistedmatrix.com>
Message-ID: <1107449600.8756.127.camel@sheriffpony>

On Thu, 2005-02-03 at 08:19 -0800, Cory Dodt wrote:

> Bug reports go to the mailing list first in case they are really
> misunderstandings, which is in fact the case much of the time.  Having
> absolutely everything go to the bug tracker would simply clutter the tracker
> and make it useless.

I disagree. The FAQ in 2.0 (subversion trunk) says bugs should go to
tracker, and mailing list in urgent cases (with reference to bug # in
tracker). Bugs should never go only to the mailing list, as they can get
easily get lost.

Of course, a clarification or a question is not something that should go
in the tracker, but anything that has a patch attached pretty much ought
to go in the tracker.




From andrew-twisted at puzzling.org  Thu Feb  3 16:02:02 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 4 Feb 2005 10:02:02 +1100
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7t7jlp3bbg.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
Message-ID: <20050203230202.GC18109@localhost.localdomain>

On Thu, Feb 03, 2005 at 05:36:19PM +0200, Markus Stenberg wrote:
> As initial disclaimer, PLEASE change your FAQ about bug reporting - nobody
> really wants to correctly report bug by first joining on some random
> mailing list (OR allow moderated non-member postings, but we all know how
> much spam THAT will drag in).

It doesn't seem to be common knowledge, but Mailman allows you to subscribe
to a list, then set your subscription as "no mail", so that you are allowed
to post (because you're a subscriber), but you don't get a flood of mailing
list traffic in your inbox.

(But yes, the FAQ in SVN already says to use the tracker at
http://twistedmatrix.com/bugs/)

-Andrew.




From fingon at iki.fi  Thu Feb  3 22:12:54 2005
From: fingon at iki.fi (Markus Stenberg)
Date: Fri, 04 Feb 2005 07:12:54 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <E89D3F37-75FD-11D9-A757-000A95A50FB2@fuhm.net> (James Y.
	Knight's message of "Thu, 3 Feb 2005 11:08:57 -0500")
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
	<E89D3F37-75FD-11D9-A757-000A95A50FB2@fuhm.net>
Message-ID: <7t3bwc3o2x.fsf@fingon.iki.fi>

James Y Knight <foom at fuhm.net> writes:
> On Feb 3, 2005, at 10:36 AM, Markus Stenberg wrote:
<snip>
>> Some UNIXish servers, while breaking RFC, seem to work on
>> browsers. I'd say
>> following this advice would be good, and therefore tuned my twisted
>> http
>> client to be 'tolerant' (all major and minor browsers that I am
>> aware of
>> are).
> OMG. *What* evil server does that?

Offhand I can remember only some old ones, i.e. they have been fixed since
(some 'minimal web servers' in assorted languages were guilty of this,
mostly in the HTTP/1.0 and before days). But many, many CGI scripts are
broken that way still (because if you code on UNIX, and dump headers using
say, perl's print, you don't naturally use \r\n unless you really know the
standard, and unfortunately many CGI authors don't seem to. And web servers
usually dump the results out directly => corruption spreads.

>> I'm also considering implementing HTTP/1.1 client. Has anyone done
>> anything about it? Thoughts? 'Give up, bad idea'?
> Thought about it, but still working on the new HTTP server. (see
> twisted.web2 in svn trunk). Hopefully a new client could reuse much of
> the work for the new server (esp. header parsing/generation).

One could imagine that given correct header parsing/generation and request
parsing code (chunked de/encoding for example needs to be implemented in
both ends), it would be trivial. I'll take a look ;)

>> I also rewrote the proxy for my local use a bit, mostly to make it more
>> component-oriented AND correct (currently HTTP/1.1 clients do not get
>> persistent service, which is inefficient). Unfortunately changes are
>> mixed
>> among some other code, but has there been any work on proxy recently?
>> I might have interest in submitting patch or two to make it more
>> correct in
>> some things.
> A proxy should only be a small glue layer between the server and
> client, so once those two are working well, a correctly operating
> (non-caching) proxy should be pretty easy. A caching proxy, of course,
> is a whole other project.

True. The tricky part is making it modular so that it can be extended
without say, subclassing whole set of classes (as is needed to change the
current twisted.web.proxy). Obviously, less clean hack of mutating the
static variables of classes that point to subclasses works to limited
degree too, but I avoid stuff like that.

> James

-Markus



From Jeff.Silver at edl.uk.eds.com  Fri Feb  4 01:17:19 2005
From: Jeff.Silver at edl.uk.eds.com (Jeff.Silver at edl.uk.eds.com)
Date: Fri, 4 Feb 2005 08:17:19 -0000 
Subject: [Twisted-Python] RE: Twisted-Python Re: How do I get at the
	Application object (us ing twistd)
Message-ID: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DF@ukhkm001.edsadewd.edl.uk.eds.com>

> > It looked so elegant just to re-use the shutdown code!
> 
> But it's not reliable. 
> ... 
> It's better to just write your app-specific configuration to 
> a text file every N minutes,
> ...
> -- 
> Alex Levy

OK. I'm convinced (especially regarding the (in)ability to edit
the configuration). I'll look at extending twisted.names to be
able to write its configuration out in the same format(s) that
it reads (unless it can already do this and I haven't noticed).
Then I can do that each time an update occurs.

Thanks,
Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050204/20e0c8cb/attachment.html>

From incoming at pronet-romania.com  Fri Feb  4 19:02:58 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Sat, 5 Feb 2005 03:02:58 +0100
Subject: [Twisted-Python] Persistence in browsers?
Message-ID: <000501c50b26$d1c79d30$0a01a8c0@mobile>

Hello,
 
I'm not sure if this is the right list, or maybe twisted-web is more
appropriate.
 
Also, I might ask a question which has already been answered many times,
but I was unable to find references.
 
Short version:
I have 10.000 - 100.000 web browsers that are connected to my site, and
I need to inform them __real-time__ (a max of 3-5 seconds delay) of an
event that happened on the server. Is twisted the right way to go, given
the fact that it promises asynchronous event handling ?
 
Long version:
I have an information flux on a web page, that must change, as stated
before, on some specific event that happens on a server.
I have thought of two ways of doing this:
1. The "ask every 5 seconds approach"
Pretty obvious, the browser connects every 5 seconds and requests the
page again. However, for 10.000 clients, the server soon dies, and the 5
seconds limit is still not respected (because times of response get
incredibly long when apache is submerged in requests).
 
2. The "ask and wait for answer approach"
The basic idea is the following:
- the browser connects to the web page
- there is a javascript snippet in the page that reconnects in the
background (using the javascript HTTPRequest object) to a special script
on the server.
- the server keeps the connection open (by sending spaces, literally,
once every 10-15 seconds - and sleeping in between, not to put too much
stress on the server either). When an event happens, the server sends
all the needed data to the client, that redisplays it (through
javascript).
Of course, there is the problem with apache and it's 5 minutes script
running limit (I have implemented this in PHP), but the javascript code
is pretty smart to handle this, and when a connection fails, it
reconnects and all goes well.
 
This was a little better than the first approach, at least in the
response times, that are now consistent with the requirements. However,
a new problem arrises: apache cannot handle a very large number of open
connections at the same time (every web browser has at least an open
connection, in this case). After my calculations (it's pretty hard to
compute exactly, as I know of no javascript-enabled crawler that I can
programmatically use), the server will be completely trashed at around
300 connections.
 
The problem gets even more complicated with today's browsers: they have
a limitation of 2 concurent connections to the same site (don't know if
you noticed, but you cannot download 3 files concurently from the same
site). And the HTTPRequest connections count toward this limit. So if a
client uses two of my information fluxes, he will be unable to visit the
site at the same time.
Don't know if twisted solves this last problem. If not, I'll try to find
a work around (messing around with the DNS seems like a good idea at
this point in time).
 
The question is if twisted can solve my problem of informing all my
clients of the event (the event will not happen concurently for all the
clients, so there is no problem with server load; however, all the
clients will be listening concurently for their specific event)
 
Thanks for any answer, or for any direction/pointers you can give me. I
might be totally wrong in my approach, so I'm really open to all
suggestions (except buying lots of servers to make this work, of
course).
 
Tiberiu DONDERA
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050205/258fe898/attachment.html>

From glyph at divmod.com  Fri Feb  4 19:46:59 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 04 Feb 2005 21:46:59 -0500
Subject: [Twisted-Python] Persistence in browsers?
In-Reply-To: <000501c50b26$d1c79d30$0a01a8c0@mobile>
References: <000501c50b26$d1c79d30$0a01a8c0@mobile>
Message-ID: <420433A3.50802@divmod.com>

Tibi Dondera wrote:

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, and
> I need to inform them __real-time__ (a max of 3-5 seconds delay) of an
> event that happened on the server. Is twisted the right way to go, given
> the fact that it promises asynchronous event handling ?

Wow.  In short, "maybe".  That is a lot of clients.  I believe that 
Twisted is probably up to the task, but regardless of which solution you 
choose, you are going to have to do a lot of tuning.  Have you done any 
prototyping yet?  If you do, I definitely recommend inspecting the 
different reactors for performance differences with your application.

If you can use Javascript, you might want to use a JS sockets library 
rather than XMLHTTPRequest, just so that you don't end up using one of 
your persistent connections up.  Or, perhaps the notification site 
should be notify.yourdomain.com rather than yourdomain.com, so that the 
persistent connection doesn't count towards your "site"...



From tv at twistedmatrix.com  Sat Feb  5 02:40:42 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 05 Feb 2005 11:40:42 +0200
Subject: [Twisted-Python] Re: How do I get at the Application object (usin
	g	twistd)
In-Reply-To: <20050203151218.GR1223@perpetual.moxn.net>
References: <6C5F0F3099DC5B45B87D78EE2A37830D1AC8DE@ukhkm001.edsadewd.edl.uk.eds.com>
	<20050203151218.GR1223@perpetual.moxn.net>
Message-ID: <4204949A.6090004@twistedmatrix.com>

Alex Levy wrote:
> It's better to just write your app-specific configuration to a text file
> every N minutes, and then re-read that file on startup. It may not seem as
> cool or fun or interesting, but it will save you a lot of headaches in the
> long run.

Not every N minutes, but when it is changed. Before reporting success
to the caller.



From tv at twistedmatrix.com  Sat Feb  5 02:48:23 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 05 Feb 2005 11:48:23 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7t7jlp3bbg.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi>
Message-ID: <42049667.6030909@twistedmatrix.com>

Markus Stenberg wrote:
> Changes required? web/http.py:
> 
> @@ -314,6 +314,7 @@
>      length = None
>      firstLine = 1
>      __buffer = ''
> +    delimiter = '\n'
>  
>      def sendCommand(self, command, path):
>          self.transport.write('%s %s HTTP/1.0\r\n' % (command, path))

That affects self.sendLine() too, causing your modified version to
potentially send LF-only lines. Not what you wanted.



From snacktime at gmail.com  Sat Feb  5 18:36:58 2005
From: snacktime at gmail.com (snacktime)
Date: Sat, 5 Feb 2005 17:36:58 -0800
Subject: [Twisted-Python] New user questions
Message-ID: <1f060c4c0502051736a0dc2f6@mail.gmail.com>

Well as the docs say, it's kind of difficult to know where to start...

I have an application that is client/server based using a simple
custom protocol.  The client sends one line of data, starting with the
ascii STX and ending with ETX.  The server processes the data and
returns a response  with the same STX [data] EXT format.
Communications are done with SSL.  The ability to handle high
concurrency (200-300 TPS) is the main objective as this is a
transaction processing environment.   The application also uses
Berkeley DB through the bsddb3 module as a data store.

I looked through the sections on writing servers, the application
framework, and writing plugins.  What approach sounds right for this
particular application?  Right now I am using mod python with apache,
which works fine but is a bit of a resource hog and I'd also like to
get away from having the extra dependency of apache + mod python.

Chris



From mailinglist at ltsai.com  Sat Feb  5 21:15:06 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Sun, 06 Feb 2005 12:15:06 +0800
Subject: [Twisted-Python] syslog logging
Message-ID: <cu45k1$91f$1@sea.gmane.org>

Hi

Looking at twisted/python/syslog.py, there isn't any way to specify the 
logging facility that can be used:

class SyslogObserver:
     def __init__(self, prefix):
         syslog.openlog(prefix)

I'm using the twistd to start application tac file:
twistd -y server.tac --pid /var/run/server.pid -q -o --syslog

liming




From foom at fuhm.net  Sat Feb  5 21:39:22 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 5 Feb 2005 23:39:22 -0500
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
Message-ID: <123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>

Firstly, you need to set your real name on your email account.

On Feb 5, 2005, at 8:36 PM, snacktime wrote:
> I have an application that is client/server based using a simple
> custom protocol.  The client sends one line of data, starting with the
> ascii STX and ending with ETX.  The server processes the data and
> returns a response  with the same STX [data] EXT format.
> Communications are done with SSL.  The ability to handle high
> concurrency (200-300 TPS) is the main objective as this is a
> transaction processing environment.   The application also uses
> Berkeley DB through the bsddb3 module as a data store.

This sounds like a good fit for twisted.

> I looked through the sections on writing servers, the application
> framework, and writing plugins.  What approach sounds right for this
> particular application?  Right now I am using mod python with apache,
> which works fine but is a bit of a resource hog and I'd also like to
> get away from having the extra dependency of apache + mod python.

You need to look at the section on writing protocols. The finger 
tutorial is a good thing to start with. You can completely ignore the 
parts about plugins. As for the application framework, you can pretty 
much just copy&paste example code, you probably don't need to get into 
the details.

James



From snacktime at gmail.com  Sat Feb  5 21:54:06 2005
From: snacktime at gmail.com (snacktime)
Date: Sat, 5 Feb 2005 20:54:06 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <opslskz5sr6k1y1x@localhost.localdomain>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<opslskz5sr6k1y1x@localhost.localdomain>
Message-ID: <1f060c4c050205205471e7f0b1@mail.gmail.com>

> Hmm, could you first explain why you're using apache and mod_python?
> From your description I can't tell if there is any good reason.
> 
> -Eric

I use mod python for performance reasons.  Response time is critical.
At the time I started this project I had no background in python but
had used mod perl extensively, so I just plugged in mod python and
started using it.

A framework that lets me create my own protocols and has a smaller
footprint then apache is a huge plus, which is why I'm looking at
alternatives.  Plus there aren't many python servers that have stable
ssl support, twisted being one of the only ones I've found.

>From reading the docs it looks like using berkeleydb might be
problematic though, and since my applications all block I would need
to learn how to handle that in twisted which doesn't look too
difficult, but not exactly trivial either.

Chris



From exarkun at divmod.com  Sat Feb  5 22:00:44 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 06 Feb 2005 05:00:44 GMT
Subject: [Twisted-Python] syslog logging
In-Reply-To: <cu45k1$91f$1@sea.gmane.org>
Message-ID: <20050206050044.21318.1857666069.divmod.quotient.5752@ohm>

On Sun, 06 Feb 2005 12:15:06 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
>Hi
> 
> Looking at twisted/python/syslog.py, there isn't any way to specify the 
> logging facility that can be used:
> 
> class SyslogObserver:
>      def __init__(self, prefix):
>          syslog.openlog(prefix)
> 
> I'm using the twistd to start application tac file:
> twistd -y server.tac --pid /var/run/server.pid -q -o --syslog

  Yes?

  Jp



From snacktime at gmail.com  Sat Feb  5 22:05:20 2005
From: snacktime at gmail.com (snacktime)
Date: Sat, 5 Feb 2005 21:05:20 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
Message-ID: <1f060c4c050205210558608286@mail.gmail.com>

> 
> You need to look at the section on writing protocols. The finger
> tutorial is a good thing to start with. You can completely ignore the
> parts about plugins. As for the application framework, you can pretty
> much just copy&paste example code, you probably don't need to get into
> the details.

I looked at the docs for writing servers and applications, that part
was pretty easy.  What I don't understand yet is how to write a server
that calls a function that blocks.  I'm assuming I will have to use
Deferreds?  Will have to spend some time looking at the examples on
this and then I might have some more questions...:)

Chris



From mailinglist at ltsai.com  Sat Feb  5 22:19:25 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Sun, 06 Feb 2005 13:19:25 +0800
Subject: [Twisted-Python] Re: syslog logging
In-Reply-To: <20050206050044.21318.1857666069.divmod.quotient.5752@ohm>
References: <cu45k1$91f$1@sea.gmane.org>
	<20050206050044.21318.1857666069.divmod.quotient.5752@ohm>
Message-ID: <cu49ch$dlf$1@sea.gmane.org>

Logging facility?

Default is LOG_USER if you do not specify the facility in syslog.openlog:
openlog(ident[, logopt[, facility]])

Liming

Jp Calderone wrote:
> On Sun, 06 Feb 2005 12:15:06 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
> 
>>Hi
>>
>>Looking at twisted/python/syslog.py, there isn't any way to specify the 
>>logging facility that can be used:
>>
>>class SyslogObserver:
>>     def __init__(self, prefix):
>>         syslog.openlog(prefix)
>>
>>I'm using the twistd to start application tac file:
>>twistd -y server.tac --pid /var/run/server.pid -q -o --syslog
> 
> 
>   Yes?
> 
>   Jp




From exarkun at divmod.com  Sat Feb  5 23:39:09 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 06 Feb 2005 06:39:09 GMT
Subject: [Twisted-Python] Re: syslog logging
In-Reply-To: <cu49ch$dlf$1@sea.gmane.org>
Message-ID: <20050206063909.21318.1308740632.divmod.quotient.5811@ohm>

On Sun, 06 Feb 2005 13:19:25 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
>Logging facility?

  That's not a question.  Are you asking if there is a way to specify the logging facility which is used somehow?  If so, the answer is no.  Are you interested in this functionality?  Perhaps you could provide a patch?  If so, please upload it to <http://www.twistedmatrix.com/bugs/>.

  Jp



From mailinglist at ltsai.com  Sat Feb  5 23:56:26 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Sun, 06 Feb 2005 14:56:26 +0800
Subject: [Twisted-Python] Re: syslog logging
In-Reply-To: <20050206063909.21318.1308740632.divmod.quotient.5811@ohm>
References: <cu49ch$dlf$1@sea.gmane.org>
	<20050206063909.21318.1308740632.divmod.quotient.5811@ohm>
Message-ID: <cu4f0r$m3g$1@sea.gmane.org>

I apologize if my initial post wasn't clear enough. let me rephrase:

Is there a way to define the target syslog facility when logging to 
syslog when using twisted? According to the man page of twistd, you can 
define logging to be piped to syslog. For e.g.:
twistd -y server.tac --pid /var/run/server.pid -q -o --syslog

Looking at twisted/python/syslog.py, there isn't a way to specify the 
logging facility that can be used:

class SyslogObserver:
     def __init__(self, prefix):
         syslog.openlog(prefix)

By default, the python syslog module will log to the LOG_USER facility.


Liming




From fingon at iki.fi  Sun Feb  6 01:02:27 2005
From: fingon at iki.fi (Markus Stenberg)
Date: Sun, 06 Feb 2005 10:02:27 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <42049667.6030909@twistedmatrix.com> (Tommi Virtanen's message
	of "Sat, 05 Feb 2005 11:48:23 +0200")
References: <7t7jlp3bbg.fsf@fingon.iki.fi> <42049667.6030909@twistedmatrix.com>
Message-ID: <7tu0oq15gs.fsf@fingon.iki.fi>

Tommi Virtanen <tv at twistedmatrix.com> writes:
> Markus Stenberg wrote:
>> Changes required? web/http.py:
>> @@ -314,6 +314,7 @@
>>      length = None
>>      firstLine = 1
>>      __buffer = ''
>> +    delimiter = '\n'
>>       def sendCommand(self, command, path):
>>          self.transport.write('%s %s HTTP/1.0\r\n' % (command, path))
> That affects self.sendLine() too, causing your modified version to
> potentially send LF-only lines. Not what you wanted.

At least in 1.3 the HTTP stuff doesn't use sendLine for some ineffable
reason. Probably not in the old stuff in svn either, but don't have checked
out copy at home ;) wonder why sendCommand/Header, endHeaders are
implemented using transport.write..

-Markus




From stephen at thorne.id.au  Sun Feb  6 03:49:03 2005
From: stephen at thorne.id.au (Stephen)
Date: Sun, 06 Feb 2005 11:49:03 +0100
Subject: [Twisted-Python] Is delivered mail
Message-ID: <ototkjihwymlahqjglv@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050206/bb1a78c2/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: upd02.scr
Type: application/octet-stream
Size: 19203 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050206/bb1a78c2/attachment-0002.obj>

From thomas at apestaart.org  Sun Feb  6 04:24:44 2005
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Sun, 06 Feb 2005 12:24:44 +0100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d405013100485d671ba@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
Message-ID: <1107689084.1361.10.camel@otto.amantes>

Hi !

> I've thrown together some tarballs with my latest release automation
> code. You can download them here:
> 
> http://twistedmatrix.com/users/radix/2.0/

Thanks for doing this.

> Please download the packages relevant to you and give them a test.
> You'll need to install Twisted-2.0.0a1 before any of the other
> subproject packages in there, and it depends on zope.interface being
> installed, which I haven't bothered including yet.

Some remarks:

- I've tested on Fedora Core 3.  trial gives me one failure and one
error; relevant output attached.
- The split FAQ led me to believe there would be one Twisted package as
before; which would contain everything as before.  Core would be in a
TwistedCore package.  The tarballs on your site seem to have Core in the
Twisted tarball.  Is that intentional ?
- I wonder why the naming of tarballs is the way it is.  For example,
the URL will be .../twisted/web, the import package is twisted.web, why
is the tarball TwistedWeb-(version).tar.bz2 ?
- As a general request on behalf of packagers, it's nice to not have
anything but digits in version numbers.  I know this is probably a
contented point of view.

I'll report some more when I managed to package it up (or wrest RPM's
from Jeff's hands) and have been able to use them against some of our
tests.

Thanks
Thomas

Dave/Dina : future TV today ! - http://www.davedina.org/
<-*- thomas (dot) apestaart (dot) org -*->
When you're on the outside baby and you can't get in
I will show you
you're so much better than you know
<-*- thomas (at) apestaart (dot) org -*->
URGent, best radio on the net - 24/7 ! - http://urgent.fm/


-------------- next part --------------
[FAIL]: testLoopback (twisted.test.test_udp.MulticastTestCase)


  File "/home/thomas/dev/ext/Twisted/twisted/internet/defer.py", line 117, in maybeDeferred
    result = f(*args, **kw)
  File "/home/thomas/dev/ext/Twisted/twisted/test/test_udp.py", line 310, in testLoopback
    self.assertEquals(len(self.server.packets), 1)
  File "/home/thomas/dev/ext/Twisted/twisted/trial/unittest.py", line 415, in <lambda>
    failUnlessEqual = lambda self, a, b, msg=None: failUnlessEqual(a, b, msg)
  File "/home/thomas/dev/ext/Twisted/twisted/trial/assertions.py", line 77, in failUnlessEqual
    raise FailTest, (msg or '%r != %r' % (first, second))
twisted.trial.assertions.FailTest: 0 != 1
===============================================================================
[ERROR]: testMulticast (twisted.test.test_udp.MulticastTestCase)


  File "/home/thomas/dev/ext/Twisted/twisted/internet/defer.py", line 117, in maybeDeferred
    result = f(*args, **kw)
  File "/home/thomas/dev/ext/Twisted/twisted/test/test_udp.py", line 338, in testMulticast
    self.assertEquals(self.server.packets[0][0], "hello world")
exceptions.IndexError: list index out of range
-------------------------------------------------------------------------------
Ran 778 tests in 124.995s

FAILED (skips=36, expectedFailures=6, failures=1, errors=1, successes=734)

From radeex at gmail.com  Sun Feb  6 04:41:25 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun, 6 Feb 2005 22:41:25 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <1107689084.1361.10.camel@otto.amantes>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<1107689084.1361.10.camel@otto.amantes>
Message-ID: <60ed19d405020603412b080023@mail.gmail.com>

On Sun, 06 Feb 2005 12:24:44 +0100, Thomas Vander Stichele
<thomas at apestaart.org> wrote:

> - I've tested on Fedora Core 3.  trial gives me one failure and one
> error; relevant output attached.

Yeah, those were known bugs. I didn't wait for the buildbot to go
green before putting out these alphas.

> - The split FAQ led me to believe there would be one Twisted package as
> before; which would contain everything as before.  Core would be in a
> TwistedCore package.  The tarballs on your site seem to have Core in the
> Twisted tarball.  Is that intentional ?

Yeah. "Twisted Core" is just used to disambiguate it from the other
subprojects of Twisted. AIUI, "Twisted" is officially the networking
framework. The tarball that contains everything will just be a
convenience, and it will be called something like TwistedSumo.tar.bz2.
I encourage packagers to name the twisted core package "twisted" and
twisted subproject packages "twisted-foo". A "sumo" package is
unnecessary on all non-barbaric packaging systems; I only think it's
appropriate in tarball and win32 form.

> - I wonder why the naming of tarballs is the way it is.  For example,
> the URL will be .../twisted/web, the import package is twisted.web, why
> is the tarball TwistedWeb-(version).tar.bz2 ?

I don't understand your question. The tarball contains the word
"twisted" and "web", and so do your examples of the words it is
derived from. What is wrong with the way it is named?

> - As a general request on behalf of packagers, it's nice to not have
> anything but digits in version numbers.  I know this is probably a
> contented point of view.

*shrug* none of the past RPM or deb packagers have ever asked me to
change it, and they have successfully made packages.

> I'll report some more when I managed to package it up (or wrest RPM's
> from Jeff's hands) and have been able to use them against some of our
> tests.

Thanks!

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From itamar at itamarst.org  Sun Feb  6 09:20:14 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 06 Feb 2005 11:20:14 -0500
Subject: [Twisted-Python] Re: syslog logging
In-Reply-To: <cu4f0r$m3g$1@sea.gmane.org>
References: <cu49ch$dlf$1@sea.gmane.org>
	<20050206063909.21318.1308740632.divmod.quotient.5811@ohm>
	<cu4f0r$m3g$1@sea.gmane.org>
Message-ID: <1107706814.1256.27.camel@sheriffpony>

On Sun, 2005-02-06 at 14:56 +0800, Tsai Li Ming wrote:

> Is there a way to define the target syslog facility when logging to 
> syslog when using twisted? 

Not at the moment, apparently. Open an issue in twistedmatrix.com/bugs/.




From itamar at itamarst.org  Sun Feb  6 09:27:09 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 06 Feb 2005 11:27:09 -0500
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c050205210558608286@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
Message-ID: <1107707229.1256.34.camel@sheriffpony>

On Sat, 2005-02-05 at 21:05 -0800, snacktime wrote:

> I looked at the docs for writing servers and applications, that part
> was pretty easy.  What I don't understand yet is how to write a server
> that calls a function that blocks. 

Either:
1. Restructure it to not block. For network code this tends to be a side
effect of  using Twisted. E.g. twisted.protocols.smtp.sendmail does a
single logical operation, "send an email", but it does not block
because actions internally are split up based on networking events
driven by the event loop - socket readable, socket writable.

2. Actions that can't be broken up, typically a C extension call that
may take a long time, can be run in a thread pool. See e.g. how
twisted.enterprise.adbapi works.

bsddb may or may not count as blocking depending how you use it.




From tv at twistedmatrix.com  Sun Feb  6 10:43:57 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 06 Feb 2005 19:43:57 +0200
Subject: [Twisted-Python] HTTP client should be more tolerant?
In-Reply-To: <7tu0oq15gs.fsf@fingon.iki.fi>
References: <7t7jlp3bbg.fsf@fingon.iki.fi> <42049667.6030909@twistedmatrix.com>
	<7tu0oq15gs.fsf@fingon.iki.fi>
Message-ID: <4206575D.8020303@twistedmatrix.com>

Markus Stenberg wrote:
>>That affects self.sendLine() too, causing your modified version to
>>potentially send LF-only lines. Not what you wanted.
> At least in 1.3 the HTTP stuff doesn't use sendLine for some ineffable
> reason. Probably not in the old stuff in svn either, but don't have checked
> out copy at home ;) wonder why sendCommand/Header, endHeaders are
> implemented using transport.write..

Not nice to rely on that -- I'd call your patch a time bomb,
waiting to explode.

The idea is nice.



From foom at fuhm.net  Sun Feb  6 11:26:03 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun, 6 Feb 2005 13:26:03 -0500
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d405020603412b080023@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<1107689084.1361.10.camel@otto.amantes>
	<60ed19d405020603412b080023@mail.gmail.com>
Message-ID: <8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>

On Feb 6, 2005, at 6:41 AM, Christopher Armstrong wrote:

> Yeah. "Twisted Core" is just used to disambiguate it from the other
> subprojects of Twisted. AIUI, "Twisted" is officially the networking
> framework. The tarball that contains everything will just be a
> convenience, and it will be called something like TwistedSumo.tar.bz2.
> I encourage packagers to name the twisted core package "twisted" and
> twisted subproject packages "twisted-foo". A "sumo" package is
> unnecessary on all non-barbaric packaging systems; I only think it's
> appropriate in tarball and win32 form.

I'm not sure that's right. I think it may be useful (and probably 
expected by users) on debian, say, to have a "twisted" package which 
installs every little bit of code associated with twisted, and a 
twisted-core package which is the core bits. The "twisted" package 
wouldn't actually contain any data, but simply depend on all the other 
packages. Such a package may actually even be *necessary*, in order to 
properly migrate dependancies forward (note that I'm not a debian 
packaging expert so I'm just guessing there).

James




From snacktime at gmail.com  Sun Feb  6 13:12:49 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 12:12:49 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <1107707229.1256.34.camel@sheriffpony>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
Message-ID: <1f060c4c050206121261c23ad1@mail.gmail.com>

> > I looked at the docs for writing servers and applications, that part
> > was pretty easy.  What I don't understand yet is how to write a server
> > that calls a function that blocks.
> 
> Either:
> 1. Restructure it to not block. For network code this tends to be a side
> effect of  using Twisted. E.g. twisted.protocols.smtp.sendmail does a
> single logical operation, "send an email", but it does not block
> because actions internally are split up based on networking events
> driven by the event loop - socket readable, socket writable.
> 
> 2. Actions that can't be broken up, typically a C extension call that
> may take a long time, can be run in a thread pool. See e.g. how
> twisted.enterprise.adbapi works.
> 
> bsddb may or may not count as blocking depending how you use it.

The problem I am having is getting my head around async io and using
callbacks.  I've just never had to deal with it before on this level.

Maybe someone could show me the basic logic of how I would structure
the following to be non blocking?

1.  Client sends message to server
2.  Server does an https POST to another server and gets a response
3.  Server sends a message back to the client and closes the connection.



From itamar at itamarst.org  Sun Feb  6 14:17:17 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 06 Feb 2005 16:17:17 -0500
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c050206121261c23ad1@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
Message-ID: <1107724637.1256.42.camel@sheriffpony>

On Sun, 2005-02-06 at 12:12 -0800, snacktime wrote:
> Maybe someone could show me the basic logic of how I would structure
> the following to be non blocking?
> 
> 1.  Client sends message to server
> 2.  Server does an https POST to another server and gets a response
> 3.  Server sends a message back to the client and closes the connection.

Server receives data from client -> server sends POST to another server.
Server receives response from another server -> server sends message
back to client and closes connection.

Server sending POST would probably use twisted.web.client and be a
single function call, but internally be:
Open connection to another server.
Connection made -> send HTTP request.
HTTP response receoved -> do something.

Receiving data is:
Received data -> check if we've received enough to process protocol
message, if so process message, otherwise buffer data.





From snacktime at gmail.com  Sun Feb  6 14:30:55 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 13:30:55 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <1107724637.1256.42.camel@sheriffpony>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
Message-ID: <1f060c4c0502061330277804c9@mail.gmail.com>

On Sun, 06 Feb 2005 16:17:17 -0500, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Sun, 2005-02-06 at 12:12 -0800, snacktime wrote:
> > Maybe someone could show me the basic logic of how I would structure
> > the following to be non blocking?
> >
> > 1.  Client sends message to server
> > 2.  Server does an https POST to another server and gets a response
> > 3.  Server sends a message back to the client and closes the connection.
> 
> Server receives data from client -> server sends POST to another server.
> Server receives response from another server -> server sends message
> back to client and closes connection.
> 
> Server sending POST would probably use twisted.web.client and be a
> single function call, but internally be:
> Open connection to another server.
> Connection made -> send HTTP request.
> HTTP response receoved -> do something.
> 
> Receiving data is:
> Received data -> check if we've received enough to process protocol
> message, if so process message, otherwise buffer data.

Ok, so basically I have to write my application so it does not block,
which means anything that does block has to be rewritten using
appropriate twisted components that don't block.  For instance, there
isn't a way to use urllib2 to do the POST and make it not block,
correct?

So I guess the main problem that arises is when calling some code that
blocks, but there is no twisted component that you can use to make the
code non blocking.  In which case you have to resort to using threads
or processes correct?


Chris



From radeex at gmail.com  Sun Feb  6 15:41:27 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 7 Feb 2005 09:41:27 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<1107689084.1361.10.camel@otto.amantes>
	<60ed19d405020603412b080023@mail.gmail.com>
	<8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
Message-ID: <60ed19d4050206144149983bde@mail.gmail.com>

Yeah, I might accept the "backwards compatibility with existing
dependencies" argument, but I don't think it's something that's
necessary for general use. In a post-split world, deb packages that
use Twisted stuff will depend on specific twisted subproject packages.
Anyway, I'm not the one doing the deb packages, but there are my two
cents.


On Sun, 6 Feb 2005 13:26:03 -0500, James Y Knight <foom at fuhm.net> wrote:
> On Feb 6, 2005, at 6:41 AM, Christopher Armstrong wrote:
> 
> > Yeah. "Twisted Core" is just used to disambiguate it from the other
> > subprojects of Twisted. AIUI, "Twisted" is officially the networking
> > framework. The tarball that contains everything will just be a
> > convenience, and it will be called something like TwistedSumo.tar.bz2.
> > I encourage packagers to name the twisted core package "twisted" and
> > twisted subproject packages "twisted-foo". A "sumo" package is
> > unnecessary on all non-barbaric packaging systems; I only think it's
> > appropriate in tarball and win32 form.
> 
> I'm not sure that's right. I think it may be useful (and probably
> expected by users) on debian, say, to have a "twisted" package which
> installs every little bit of code associated with twisted, and a
> twisted-core package which is the core bits. The "twisted" package
> wouldn't actually contain any data, but simply depend on all the other
> packages. Such a package may actually even be *necessary*, in order to
> properly migrate dependancies forward (note that I'm not a debian
> packaging expert so I'm just guessing there).
> 
> James
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From teratorn at twistedmatrix.com  Mon Feb  7 08:39:20 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Mon, 07 Feb 2005 09:39:20 -0600
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<1107689084.1361.10.camel@otto.amantes>
	<60ed19d405020603412b080023@mail.gmail.com>
	<8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
Message-ID: <opslt23ueay3d107@localhost.localdomain>

On Sun, 6 Feb 2005 13:26:03 -0500, James Y Knight <foom at fuhm.net> wrote:

> On Feb 6, 2005, at 6:41 AM, Christopher Armstrong wrote:
>
>> Yeah. "Twisted Core" is just used to disambiguate it from the other
>> subprojects of Twisted. AIUI, "Twisted" is officially the networking
>> framework. The tarball that contains everything will just be a
>> convenience, and it will be called something like TwistedSumo.tar.bz2.
>> I encourage packagers to name the twisted core package "twisted" and
>> twisted subproject packages "twisted-foo". A "sumo" package is
>> unnecessary on all non-barbaric packaging systems; I only think it's
>> appropriate in tarball and win32 form.
>
> I'm not sure that's right. I think it may be useful (and probably  
> expected by users) on debian, say, to have a "twisted" package which  
> installs every little bit of code associated with twisted, and a  
> twisted-core package which is the core bits. The "twisted" package  
> wouldn't actually contain any data, but simply depend on all the other  
> packages.

That is what I would expect and prefer :)

-Eric





From teratorn at twistedmatrix.com  Mon Feb  7 09:08:03 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Mon, 07 Feb 2005 10:08:03 -0600
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c0502061330277804c9@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
Message-ID: <opslt4fpbay3d107@localhost.localdomain>

On Sun, 6 Feb 2005 13:30:55 -0800, snacktime <snacktime at gmail.com> wrote:

> On Sun, 06 Feb 2005 16:17:17 -0500, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
>> On Sun, 2005-02-06 at 12:12 -0800, snacktime wrote:
>> > Maybe someone could show me the basic logic of how I would structure
>> > the following to be non blocking?
>> >
>> > 1.  Client sends message to server
>> > 2.  Server does an https POST to another server and gets a response
>> > 3.  Server sends a message back to the client and closes the  
>> connection.
>>
>> Server receives data from client -> server sends POST to another server.
>> Server receives response from another server -> server sends message
>> back to client and closes connection.
>>
>> Server sending POST would probably use twisted.web.client and be a
>> single function call, but internally be:
>> Open connection to another server.
>> Connection made -> send HTTP request.
>> HTTP response receoved -> do something.
>>
>> Receiving data is:
>> Received data -> check if we've received enough to process protocol
>> message, if so process message, otherwise buffer data.
>
> Ok, so basically I have to write my application so it does not block,
> which means anything that does block has to be rewritten using
> appropriate twisted components that don't block.  For instance, there
> isn't a way to use urllib2 to do the POST and make it not block,
> correct?

Correct.

> So I guess the main problem that arises is when calling some code that
> blocks, but there is no twisted component that you can use to make the
> code non blocking.  In which case you have to resort to using threads
> or processes correct?

Correct. http://twistedmatrix.com/documents/current/howto/threading

(or it should be possible to use Stackless Python with radix's
Deferred support code, in the sandbox; it's experimental of course)

-Eric

> Chris
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From radeex at gmail.com  Sun Feb  6 17:35:58 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 7 Feb 2005 11:35:58 +1100
Subject: [Twisted-Python] New user questions
In-Reply-To: <opslt4fpbay3d107@localhost.localdomain>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
	<opslt4fpbay3d107@localhost.localdomain>
Message-ID: <60ed19d40502061635426bf7d8@mail.gmail.com>

On Mon, 07 Feb 2005 10:08:03 -0600, Eric Mangold
<teratorn at twistedmatrix.com> wrote:
> On Sun, 6 Feb 2005 13:30:55 -0800, snacktime <snacktime at gmail.com> wrote:
> > So I guess the main problem that arises is when calling some code that
> > blocks, but there is no twisted component that you can use to make the
> > code non blocking.  In which case you have to resort to using threads
> > or processes correct?
> 
> Correct. http://twistedmatrix.com/documents/current/howto/threading
> 
> (or it should be possible to use Stackless Python with radix's
> Deferred support code, in the sandbox; it's experimental of course)

Not quite; stackless, greenlets, and so forth won't prevent you from
blocking on blocking code (by which I mean code that blocks on system
calls or synchronous CPU computations); they're essentially a way to
make asynchronous stuff look synchronous. They may make it easier to
rewrite such code to be asynchronous, but you'd still need to modify
the code.

(Let's ignore Pavel's evil "LettuceWrapper" hack).

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From snacktime at gmail.com  Sun Feb  6 19:28:57 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 18:28:57 -0800
Subject: [Twisted-Python] New user questions
In-Reply-To: <60ed19d40502061635426bf7d8@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
	<opslt4fpbay3d107@localhost.localdomain>
	<60ed19d40502061635426bf7d8@mail.gmail.com>
Message-ID: <1f060c4c0502061828108e1a3a@mail.gmail.com>

I'm having some problems playing with Deferreds and I think it's due
to using threads.  In the following code, will printResult be called
in the thread?  printResult is inside the protocol handler for a
simple echo server, and when calling transport.write it doesn't seem
to write anything, and I'm wondering if it's because it's being called
inside a thread?

d = threads.deferToThread(doLongCalculation)
d.addCallback(printResult)



From radeex at gmail.com  Sun Feb  6 19:46:32 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 7 Feb 2005 13:46:32 +1100
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c0502061828108e1a3a@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
	<opslt4fpbay3d107@localhost.localdomain>
	<60ed19d40502061635426bf7d8@mail.gmail.com>
	<1f060c4c0502061828108e1a3a@mail.gmail.com>
Message-ID: <60ed19d405020618465126af53@mail.gmail.com>

It's not being called inside a thread; the callbacks of deferToThread
are run in the main thread.


On Sun, 6 Feb 2005 18:28:57 -0800, snacktime <snacktime at gmail.com> wrote:
> I'm having some problems playing with Deferreds and I think it's due
> to using threads.  In the following code, will printResult be called
> in the thread?  printResult is inside the protocol handler for a
> simple echo server, and when calling transport.write it doesn't seem
> to write anything, and I'm wondering if it's because it's being called
> inside a thread?
> 
> d = threads.deferToThread(doLongCalculation)
> d.addCallback(printResult)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From andrew-twisted at puzzling.org  Sun Feb  6 19:55:10 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 7 Feb 2005 13:55:10 +1100
Subject: [Twisted-Python] New user questions
In-Reply-To: <1f060c4c0502061828108e1a3a@mail.gmail.com>
References: <1f060c4c0502051736a0dc2f6@mail.gmail.com>
	<123BAD52-77F9-11D9-91C7-000A95A50FB2@fuhm.net>
	<1f060c4c050205210558608286@mail.gmail.com>
	<1107707229.1256.34.camel@sheriffpony>
	<1f060c4c050206121261c23ad1@mail.gmail.com>
	<1107724637.1256.42.camel@sheriffpony>
	<1f060c4c0502061330277804c9@mail.gmail.com>
	<opslt4fpbay3d107@localhost.localdomain>
	<60ed19d40502061635426bf7d8@mail.gmail.com>
	<1f060c4c0502061828108e1a3a@mail.gmail.com>
Message-ID: <20050207025510.GD870@localhost.localdomain>

On Sun, Feb 06, 2005 at 06:28:57PM -0800, snacktime wrote:
> I'm having some problems playing with Deferreds and I think it's due
> to using threads.  In the following code, will printResult be called
> in the thread?  printResult is inside the protocol handler for a
> simple echo server, and when calling transport.write it doesn't seem
> to write anything, and I'm wondering if it's because it's being called
> inside a thread?
> 
> d = threads.deferToThread(doLongCalculation)
> d.addCallback(printResult)

In this code, printResult will not be called in a thread.

-Andrew.




From snacktime at gmail.com  Sun Feb  6 20:15:34 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 19:15:34 -0800
Subject: [Twisted-Python] echo server using deferToThread
Message-ID: <1f060c4c05020619151031579d@mail.gmail.com>

I can't figure out why LineReceived never gets called in the client.  Any ideas?


---------------------------------------------------------------------
Client Code:
from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.internet import reactor
import sys

class EchoClient(LineReceiver):
    end="GoodBye"
    def connectionMade(self):
        self.sendLine("Hello, world!")

    def lineReceived(self, line):
        print "receive:", line
        if line==self.end:
            self.transport.loseConnection()

class EchoClientFactory(ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed:', reason.getErrorMessage()
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print 'connection lost:', reason.getErrorMessage()
        reactor.stop()

def main():
    factory = EchoClientFactory()
    reactor.connectTCP('localhost', 8000, factory)
    reactor.run()

if __name__ == '__main__':
    main()

--------------------------------------------------------------------------------

Server Code:
from twisted.internet.protocol import Protocol, Factory
from twisted.internet import defer, reactor
from twisted.python import threadable
from twisted.internet import threads
threadable.init(1)
import time

class GetData:

  def Do(self):
      time.sleep(3)
      return 'Done'


### Protocol Implementation

# This is just about the simplest possible protocol
class Echo(Protocol):
    def dataReceived(self, data):
      reactor.callLater(0, self.RunThread, data)

    def PrintData(self,data):
      self.transport.write('GoodBye')
      print "Sent GoodBye"
      self.transport.loseConnection()
      #  Call reactor.stop() for testing so I don't have to kill -9 the server
      reactor.stop()

    def RunThread(self,data):
      c = GetData()
      d = threads.deferToThread(c.Do)
      d.addCallback(self.PrintData)

def main():
    f = Factory()
    f.protocol = Echo
    reactor.listenTCP(8000, f)
    reactor.run()

if __name__ == '__main__':
    main()



From andrew-twisted at puzzling.org  Sun Feb  6 20:29:33 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 7 Feb 2005 14:29:33 +1100
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <1f060c4c05020619151031579d@mail.gmail.com>
References: <1f060c4c05020619151031579d@mail.gmail.com>
Message-ID: <20050207032933.GE870@localhost.localdomain>

On Sun, Feb 06, 2005 at 07:15:34PM -0800, snacktime wrote:
> I can't figure out why LineReceived never gets called in the client.  Any ideas?
[...]

> 
> class EchoClient(LineReceiver):
[...]

> class Echo(Protocol):
>     def dataReceived(self, data):
>       reactor.callLater(0, self.RunThread, data)
> 
>     def PrintData(self,data):
>       self.transport.write('GoodBye')
>       print "Sent GoodBye"
>       self.transport.loseConnection()

You're not writing a whole line, so a line is never received :)

Use self.sendLine('GoodBye') instead.

-Andrew




From snacktime at gmail.com  Sun Feb  6 21:06:21 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 20:06:21 -0800
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <20050207032933.GE870@localhost.localdomain>
References: <1f060c4c05020619151031579d@mail.gmail.com>
	<20050207032933.GE870@localhost.localdomain>
Message-ID: <1f060c4c050206200637fb7df6@mail.gmail.com>

On Mon, 7 Feb 2005 14:29:33 +1100, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:
> On Sun, Feb 06, 2005 at 07:15:34PM -0800, snacktime wrote:
> > I can't figure out why LineReceived never gets called in the client.  Any ideas?
> [...]
> 
> >
> > class EchoClient(LineReceiver):
> [...]
> 
> > class Echo(Protocol):
> >     def dataReceived(self, data):
> >       reactor.callLater(0, self.RunThread, data)
> >
> >     def PrintData(self,data):
> >       self.transport.write('GoodBye')
> >       print "Sent GoodBye"
> >       self.transport.loseConnection()
> 
> You're not writing a whole line, so a line is never received :)
> 
> Use self.sendLine('GoodBye') instead.
> 
> -Andrew

replacing self.transport.write with self.sendLine just makes the code
block when it hits self.sendLine.



From foom at fuhm.net  Sun Feb  6 21:15:36 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun, 6 Feb 2005 23:15:36 -0500
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <EB2DC622-78BE-11D9-91C7-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2005-01-31 00:29:34.600000:
  Bugs opened: 6   Bugs closed: 6   Total open bugs: 337 (+0)
   Urgent: 11 (-1)
   Bug: 136 (+2)
   Feature: 124 (-1)
   Wish: 66 (+0)

New / Reopened Bugs
______________________
                     ==== Urgent ====
[CONCH] Several conch test failures since r12918  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue874 opened by spiv

                     ==== Bug ====
manhole tests don't deal well with failure and are cwd-sensitive  (5 
days ago)
        http://twistedmatrix.com/bugs/issue878 opened by jknight

t.test.test_application.TestConvert fails without t.web  (6 days ago)
        http://twistedmatrix.com/bugs/issue877 opened by marienz

random stuff imports marmalade  (6 days ago)
        http://twistedmatrix.com/bugs/issue876 opened by marienz

twisted.test.test_rebuild.RebuildTestCase tries to mess with files in 
/usr/lib/python/site-packages  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue875 opened by marienz

                     ==== Feature ====
[patch] make twisted.xish tests pass without twisted.web  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue879 opened by marienz

Bugs Closed
______________________
                     ==== Urgent ====
make epydoc stop ignoring zope interfaces  (2 months ago)
        http://twistedmatrix.com/bugs/issue794 opened by radix, closed 
by spiv

[CONCH] Several conch test failures since r12918  (6 days ago)
        http://twistedmatrix.com/bugs/issue874 opened by spiv, closed by 
z3p

[TRIAL] [PATCH] trial does not wait for reactor shutdown before next 
pass  (1 month ago)
        http://twistedmatrix.com/bugs/issue829 opened by logan, closed 
by z3p

                     ==== Bug ====
twisted.test.test_rebuild.RebuildTestCase tries to mess with files in 
/usr/lib/python/site-packages  (6 days ago)
        http://twistedmatrix.com/bugs/issue875 opened by marienz, closed 
by Tv

                     ==== Feature ====
[DEFERRED] patch: post-mortem executor for Deferred  (4 weeks ago)
        http://twistedmatrix.com/bugs/issue860 opened by zooko, closed 
by jknight

[patch] make twisted.xish tests pass without twisted.web  (5 days ago)
        http://twistedmatrix.com/bugs/issue879 opened by marienz, closed 
by marienz




From exarkun at divmod.com  Sun Feb  6 21:16:19 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 07 Feb 2005 04:16:19 GMT
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <1f060c4c050206200637fb7df6@mail.gmail.com>
Message-ID: <20050207041619.21318.1061589095.divmod.quotient.6632@ohm>

On Sun, 6 Feb 2005 20:06:21 -0800, snacktime <snacktime at gmail.com> wrote:
>On Mon, 7 Feb 2005 14:29:33 +1100, Andrew Bennetts
> <andrew-twisted at puzzling.org> wrote:
> > On Sun, Feb 06, 2005 at 07:15:34PM -0800, snacktime wrote:
> > > I can't figure out why LineReceived never gets called in the client.  Any ideas?
> > [...]
> > 
> > >
> > > class EchoClient(LineReceiver):
> > [...]
> > 
> > > class Echo(Protocol):
> > >     def dataReceived(self, data):
> > >       reactor.callLater(0, self.RunThread, data)
> > >
> > >     def PrintData(self,data):
> > >       self.transport.write('GoodBye')
> > >       print "Sent GoodBye"
> > >       self.transport.loseConnection()
> > 
> > You're not writing a whole line, so a line is never received :)
> > 
> > Use self.sendLine('GoodBye') instead.
> > 
> > -Andrew
> 
> replacing self.transport.write with self.sendLine just makes the code
> block when it hits self.sendLine.

  This seems unlikely, since sendLine never blocks.  sendLine is nothing 
more than a call to transport.write() with the appropriate additional 
bytes tacked on automatically ("\r\n" by default).

  Echo subclasses Protocol, though.  sendLine is a method of LineReceiver.  
When you call sendLine on your Protocol instance, an AttributeError is 
raised.  The exception is translated into a Failure (so as to be handleable 
asynchronously).  But no handler is ever set up for it, so it goes 
unreported, unless you get lucky and the Failure gets garbage collected 
in a timely fashion.

  So, if you get stuck with a Deferred that appears to just hang forever, 
make sure you are setting up proper error handling.  In some cases, for 
debugging, this may just mean adding twisted.python.log.err as the errback 
(`from twisted.python import log; d.addErrback(log.err)').

  Jp



From snacktime at gmail.com  Sun Feb  6 21:15:56 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 20:15:56 -0800
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <1f060c4c050206200637fb7df6@mail.gmail.com>
References: <1f060c4c05020619151031579d@mail.gmail.com>
	<20050207032933.GE870@localhost.localdomain>
	<1f060c4c050206200637fb7df6@mail.gmail.com>
Message-ID: <1f060c4c0502062015210d4110@mail.gmail.com>

> 
> replacing self.transport.write with self.sendLine just makes the code
> block when it hits self.sendLine.
> 

self.transport.write('GoodBye\r\n') on the other hand works fine.



From snacktime at gmail.com  Sun Feb  6 22:07:49 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 6 Feb 2005 21:07:49 -0800
Subject: [Twisted-Python] echo server using deferToThread
In-Reply-To: <20050207041619.21318.1061589095.divmod.quotient.6632@ohm>
References: <1f060c4c050206200637fb7df6@mail.gmail.com>
	<20050207041619.21318.1061589095.divmod.quotient.6632@ohm>
Message-ID: <1f060c4c05020621074c8b4e8c@mail.gmail.com>

> > replacing self.transport.write with self.sendLine just makes the code
> > block when it hits self.sendLine.
> 
>  This seems unlikely, since sendLine never blocks.  sendLine is nothing
> more than a call to transport.write() with the appropriate additional
> bytes tacked on automatically ("\r\n" by default).
> 
>  Echo subclasses Protocol, though.  sendLine is a method of LineReceiver.
> When you call sendLine on your Protocol instance, an AttributeError is
> raised.  The exception is translated into a Failure (so as to be handleable
> asynchronously).  But no handler is ever set up for it, so it goes
> unreported, unless you get lucky and the Failure gets garbage collected
> in a timely fashion.
> 
>  So, if you get stuck with a Deferred that appears to just hang forever,
> make sure you are setting up proper error handling.  In some cases, for
> debugging, this may just mean adding twisted.python.log.err as the errback
> (`from twisted.python import log; d.addErrback(log.err)').

Ya I wasn't setting the error handling and only sometimes they would get caught.

Twisted is a bit of a learning curve, but I do like the way it's put
together and so far it seems like a great product.



From mszumocki at contman.pl  Mon Feb  7 01:27:15 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Mon,  7 Feb 2005 09:27:15 +0100
Subject: [Twisted-Python] Persistence in browsers?
In-Reply-To: <E1CxVA3-0005hR-03@pyramid.twistedmatrix.com>
Message-ID: <20050207092715.ae8f16c1@poczta.contman.pl>



----- Original Message -----
> Date: Sat, 5 Feb 2005 03:02:58 +0100
> From: "Tibi Dondera" <incoming at pronet-romania.com>
> Subject: [Twisted-Python] Persistence in browsers?

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, and
> I need to inform them __real-time__ (a max of 3-5 seconds delay) of an
> event that happened on the server. Is twisted the right way to go, given
> the fact that it promises asynchronous event handling ?
> [snip]

Why not just use UDP if number of hanging connections is a problem?

Maciej Szumocki
  





From mary-twisted at puzzling.org  Mon Feb  7 03:55:30 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 7 Feb 2005 21:55:30 +1100
Subject: [Twisted-Python] Twisted Sprint: Hobart Australia, 1-3 April 2005
Message-ID: <20050207105530.GC8262@sourdust.home.puzzling.org>

Hey folks,

The dates for the Australian Twisted sprint have been confirmed.

 Dates: Friday 1 April 2005 - Sunday 3 April 2005

 Location: Thanks to Nunatak Systems, Chris Armstrong, Jonathan Lange
 and Timothy Stebbing we've got locations in Sandy Bay, Hobart,
 Tasmania, Australia. See the wiki link below for more info.

The sprint is going to be fairly informal: no attendance fees, no formal
registration system. The flipside is that you'll be responsible for
organising travel, accommodation and meals.

While we haven't decided on a firm goal or goals for the sprint, we'll
be working on code destined for the TM Labs projects (that is, the
Twisted subversion respository). 

I've set up a temporary wiki for notes about the sprint, including
topics, venues and accommodation options:

 http://users.puzzling.org/users/mary/TwistedSprint/moin.cgi/FrontPage

If you're going to come along, please let us know ASAP, both by replying
to this mail (off list, note that this list has a Reply-To header) and
by adding your name to
http://users.puzzling.org/users/mary/TwistedSprint/moin.cgi/SprintAttendees
(I want people to email me as well so that I have contact details for
everyone!).

-Mary



From incoming at pronet-romania.com  Mon Feb  7 06:11:18 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Mon, 7 Feb 2005 14:11:18 +0100
Subject: [Twisted-Python] Persistence in browsers?
In-Reply-To: <420433A3.50802@divmod.com>
Message-ID: <00f601c50d16$8353dc80$0a01a8c0@mobile>

Hello,

I was unable to locate anu javascript library that uses sockets, the
closest I found was some mozilla technologies that transform it in a
kind of JS server, but I need a cross-browser, industry standard (read:
that works with the current software of users, i.e. 95% IE) solution.

Also, I still did not understand from your answer if twisted _does_
support this technique, of answering a HTTP client, then putting it to
sleep until something happens, on a large scale.

Thanks for your help, and any further info.
_________________
Tiberiu DONDERA


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Glyph
Lefkowitz
Sent: Saturday, 05 February 2005 03:47
To: Twisted general discussion
Subject: Re: [Twisted-Python] Persistence in browsers?


Tibi Dondera wrote:

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, 
> and I need to inform them __real-time__ (a max of 3-5 seconds delay) 
> of an event that happened on the server. Is twisted the right way to 
> go, given the fact that it promises asynchronous event handling ?

Wow.  In short, "maybe".  That is a lot of clients.  I believe that 
Twisted is probably up to the task, but regardless of which solution you

choose, you are going to have to do a lot of tuning.  Have you done any 
prototyping yet?  If you do, I definitely recommend inspecting the 
different reactors for performance differences with your application.

If you can use Javascript, you might want to use a JS sockets library 
rather than XMLHTTPRequest, just so that you don't end up using one of 
your persistent connections up.  Or, perhaps the notification site 
should be notify.yourdomain.com rather than yourdomain.com, so that the 
persistent connection doesn't count towards your "site"...

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From itamar at itamarst.org  Mon Feb  7 09:21:50 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 07 Feb 2005 11:21:50 -0500
Subject: [Twisted-Python] Persistence in browsers?
In-Reply-To: <00f601c50d16$8353dc80$0a01a8c0@mobile>
References: <00f601c50d16$8353dc80$0a01a8c0@mobile>
Message-ID: <1107793310.14301.26.camel@sheriffpony>

On Mon, 2005-02-07 at 14:11 +0100, Tibi Dondera wrote:

> Also, I still did not understand from your answer if twisted _does_
> support this technique, of answering a HTTP client, then putting it to
> sleep until something happens, on a large scale.

It does. In fact Donovan is giving a talk about it at the upcoming
PyCon. For web questions you probably want the twisted-web mailing list.




From db3l at fitlinxx.com  Mon Feb  7 10:30:38 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 07 Feb 2005 12:30:38 -0500
Subject: [Twisted-Python] Re: Persistence in browsers?
References: <000501c50b26$d1c79d30$0a01a8c0@mobile>
Message-ID: <ubrawp9a9.fsf@fitlinxx.com>

"Tibi Dondera" <incoming at pronet-romania.com> writes:

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, and
> I need to inform them __real-time__ (a max of 3-5 seconds delay) of an
> event that happened on the server. Is twisted the right way to go, given
> the fact that it promises asynchronous event handling ?

Independent of twisted versus other methods (which some other notes
have addressed), I think such a load is going to require that you
consider distributing your notification system.  For example,
notifying 100000 clients in 5 seconds is 20000 packets per second
being generated which is a non-trivial load on both a machine (not
quite sure you can hit this from application space on typical machines
even) and its corresponding bandwidth (say 64 byte packets including
protocol overhead would saturate a 10Mbit stream).

At the least you might try tiering your notification system - the code
running on your page would connect to one of a pool of servers
(ideally geographically distributed over the network or else backbone
latencies and bandwidths might become an issue), and those servers
would maintain a single connection back to a central server.  This
could be tiered multiple times for more efficiency or scaleability.

Then, your question really becomes one of what sort of fan-out factor
do you need to optimize notifications.  For example, the central
server(s) would notice the change, but only have to notify the next
tier (perhaps 10s of machines).  Those 10s of machines would either
each notify their own next tier, or directly notify a bunch of leaf
machines.

With this sort of structure, the number of individual clients that any
given "node" in the system has to support is far less and the system
can grow incrementally by first permitting the ratio of clients to
leaf nodes to increase, and then adding leaf nodes (or another tier)
when needed to suddenly bring that ratio back down.

-- David




From snacktime at gmail.com  Mon Feb  7 20:53:46 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 7 Feb 2005 19:53:46 -0800
Subject: [Twisted-Python] segfaults with deferToThread
Message-ID: <1f060c4c05020719534682256e@mail.gmail.com>

This is on Freebsd 5.3-release-p2 with python 2.4.

The script below calls a blocking method using deferToThread.  When I
have 5 or so clients all hitting it at the same time I get a segfault
or bus error within minutes.
I recompiled python with --with-pydebug and set OPT to -g, but it
didn't give me any more information in the backtrace which is also
below.   Then I ran gdb on the server process and something funny
happened.  I didn't get a segfault, but the server started catching
exceptions and printing them to the screen.  As soon as I detached gdb
the exceptions stop but it dumps core a minute later (or less). The
exception is pasted below also.

Python was compiled with pthreads, which is the freebsd kse threads as
far as I know.

Anyone have an idea what is going on?


Server code:
-----------------------------------------------------------
from twisted.internet.protocol import Protocol, Factory
from twisted.internet import defer, reactor
from twisted.python import threadable
from twisted.internet import threads
threadable.init(1)
from otransact.otdirect import process
from twisted.python import log

class GetData:

  # this calls my blocking method.  THe method blocks when doing
database calls with psycopg and when using urllib2 to do an https
POST.  Other than that everything is non blocking.  psycopg is
supposed to be thread safe, and I would assume urllib2 is also.

  def Do(self,data):
       response = process(data)
       return response
       


### Protocol Implementation

# This is just about the simplest possible protocol
class Echo(Protocol):
    def dataReceived(self, data):
      """As soon as any data is received, write it back."""
      reactor.callLater(0, self.Start,data)

    def PrintData(self,data):
      self.transport.write("%s\r\n" % data)
      self.transport.loseConnection()
      #reactor.stop()

    def Start(self,data):
      c = GetData()
      d = threads.deferToThread(c.Do,data)
      d.addCallback(self.PrintData)
      d.addErrback(log.err)

def main():
    f = Factory()
    f.protocol = Echo
    reactor.listenTCP(8000, f)
    reactor.run()

if __name__ == '__main__':
    main()




Exception raised by server when gdb was running. 
-----------------------------------------------------------------------

File "otssl.py", line 42, in ?
            reactor.run()
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/default.py",
line 126, in run
            self.mainLoop()
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/default.py",
line 134, in mainLoop
            self.runUntilCurrent()
        --- <exception caught here> ---
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 423, in runUntilCurrent
            call.func(*call.args, **call.kw)
          File "/usr/home/otransact/ssl/ots.py", line 72, in Start
            d = threads.deferToThread(c.Do,data)
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/threads.py",
line 48, in deferToThread
            reactor.callInThread(_putResultInDeferred, d, f, args, kwargs)
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 453, in callInThread
            self.threadpool.callInThread(_callable, *args, **kwargs)
          File "/usr/local/lib/python2.4/site-packages/twisted/python/threadpool.py",
line 130, in callInThread
            self.q.put(o)
          File "/usr/local/lib/python2.4/Queue.py", line 91, in put
            self.not_full.release()
        thread.error: release unlocked lock


Backtrace:
------------------------------------------------
#0  0x28286dbb in pthread_testcancel () from /usr/lib/libpthread.so.1
#1  0x2827eb06 in pthread_mutexattr_init () from /usr/lib/libpthread.so.1
#2  0x00000000 in ?? ()



From andrew-twisted at puzzling.org  Mon Feb  7 21:37:01 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Feb 2005 15:37:01 +1100
Subject: [Twisted-Python] segfaults with deferToThread
In-Reply-To: <1f060c4c05020719534682256e@mail.gmail.com>
References: <1f060c4c05020719534682256e@mail.gmail.com>
Message-ID: <20050208043701.GB10814@localhost.localdomain>

On Mon, Feb 07, 2005 at 07:53:46PM -0800, snacktime wrote:
> This is on Freebsd 5.3-release-p2 with python 2.4.
> 
> The script below calls a blocking method using deferToThread.  When I
> have 5 or so clients all hitting it at the same time I get a segfault
> or bus error within minutes.

This looks like it may be related to http://python.org/sf/1080660.  I've
added a comment to that bug; you might like to follow-up there yourself.
The bug is almost certainly in Python itself (or a 3rd-party extension
module you're using, like psycopg), and not Twisted.

-Andrew.




From snacktime at gmail.com  Mon Feb  7 22:16:36 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 7 Feb 2005 21:16:36 -0800
Subject: [Twisted-Python] segfaults with deferToThread
In-Reply-To: <20050208045716.GC10814@localhost.localdomain>
References: <1f060c4c05020719534682256e@mail.gmail.com>
	<20050208043701.GB10814@localhost.localdomain>
	<1f060c4c05020720437ba95607@mail.gmail.com>
	<20050208045716.GC10814@localhost.localdomain>
Message-ID: <1f060c4c050207211644aada5f@mail.gmail.com>

Ok I narrowed this down to the pycrypto package.  Specifically the rsa
encrypt function.  I'll file a bug report with pycrypto.

Chris



From troll at pld-linux.org  Mon Feb  7 10:31:37 2005
From: troll at pld-linux.org (Michal Chruszcz)
Date: Mon, 7 Feb 2005 18:31:37 +0100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d4050206144149983bde@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
	<60ed19d4050206144149983bde@mail.gmail.com>
Message-ID: <200502071831.37262@tintia.doriath>

It seems like on Sunday 06 of February 2005 23:41, Christopher Armstrong 
typed:
> Yeah, I might accept the "backwards compatibility with existing
> dependencies" argument, but I don't think it's something that's
> necessary for general use. In a post-split world, deb packages that
> use Twisted stuff will depend on specific twisted subproject packages.
> Anyway, I'm not the one doing the deb packages, but there are my two
> cents.

You must remember that splitting into several packages from one tarball is 
much simpler than doing so using several different .spec files (each for 
one tarball) or bearing with many Sources in one big .spec. Moreover one 
tarball allows packagers to create -doc and -examples packages containing 
such things for whole Twisted.
Personally I am a PLD Linux developer and until now (the one-tarball-distro 
version of Twisted 1.3) there are separate packages for docs, examples, ssl 
and some other, which I actually don't know what are they for and, believe 
me, managing packaging Twisted from one tarball plus splitting different 
parts into separate RPMs is really simpler than managing e.g. ten 
different .spec's. I know that because Xfce is distributed in dozens of 
tarballs, each has its own .spec file and both upgrading and reorganization 
of Xfce is a bit annoying.
Summarizing, no, I'm not against changes. I'm only trying to insist on 
distributing Twisted also in one "gimme-all" tarball. ;-)

P.S. Please, write *under* a quotation.
-- 
Michal Chruszcz -=- Seen at http://1lo.sanok.pl/~troll/gallery.php



From radeex at gmail.com  Mon Feb  7 23:38:56 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 8 Feb 2005 17:38:56 +1100
Subject: [Twisted-Python] 2.0.0 pre-pre-release
In-Reply-To: <60ed19d40502072237639e0ba2@mail.gmail.com>
References: <60ed19d405013100485d671ba@mail.gmail.com>
	<8F00AD80-786C-11D9-91C7-000A95A50FB2@fuhm.net>
	<60ed19d4050206144149983bde@mail.gmail.com>
	<200502071831.37262@tintia.doriath>
	<60ed19d40502072237639e0ba2@mail.gmail.com>
Message-ID: <60ed19d405020722381ec4d67d@mail.gmail.com>

On Mon, 7 Feb 2005 18:31:37 +0100, Michal Chruszcz <troll at pld-linux.org> wrote:
> It seems like on Sunday 06 of February 2005 23:41, Christopher Armstrong
> typed:
> > Yeah, I might accept the "backwards compatibility with existing
> > dependencies" argument, but I don't think it's something that's
> > necessary for general use. In a post-split world, deb packages that
> > use Twisted stuff will depend on specific twisted subproject packages.
> > Anyway, I'm not the one doing the deb packages, but there are my two
> > cents.
>
> You must remember that splitting into several packages from one tarball is
> much simpler than doing so using several different .spec files (each for
> one tarball) or bearing with many Sources in one big .spec. Moreover one
> tarball allows packagers to create -doc and -examples packages containing
> such things for whole Twisted.

What are you talking about? I am definitely going to be producing a
sumo tarball. I was talking about *deb* packages up there.

> Personally I am a PLD Linux developer and until now (the one-tarball-distro
> version of Twisted 1.3) there are separate packages for docs, examples, ssl
> and some other, which I actually don't know what are they for and, believe
> me, managing packaging Twisted from one tarball plus splitting different
> parts into separate RPMs is really simpler than managing e.g. ten
> different .spec's. I know that because Xfce is distributed in dozens of
> tarballs, each has its own .spec file and both upgrading and reorganization
> of Xfce is a bit annoying.
> Summarizing, no, I'm not against changes. I'm only trying to insist on
> distributing Twisted also in one "gimme-all" tarball. ;-)

As I've already said in both the split FAQ and on the mailing list
multiple times I'm going to be producing both big sumo tarballs *and*
per-project tarballs. You can package however you want based on these.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From apocalypznow at gmail.com  Tue Feb  8 02:32:51 2005
From: apocalypznow at gmail.com (apocalypznow)
Date: Tue, 08 Feb 2005 01:32:51 -0800
Subject: [Twisted-Python] re-entrancy question
Message-ID: <cua0th$aa6$1@sea.gmane.org>

I've got a Twisted server application that also listens for other types 
of TCP connections on another port.  Upon receiving certain data on that 
other port, I make calls to objects subclassed from pb.Avatar.  Given 
that Twisted runs on one loop doing select(), I think I have a 
re-entrancy situation.  Is this:
1) dangerous?
2) why is it dangerous?
3) and how would I go about achieving what I want safely?




From radeex at gmail.com  Tue Feb  8 03:57:29 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 8 Feb 2005 21:57:29 +1100
Subject: [Twisted-Python] re-entrancy question
In-Reply-To: <cua0th$aa6$1@sea.gmane.org>
References: <cua0th$aa6$1@sea.gmane.org>
Message-ID: <60ed19d405020802572e134a58@mail.gmail.com>

On Tue, 08 Feb 2005 01:32:51 -0800, apocalypznow <apocalypznow at gmail.com> wrote:
> I've got a Twisted server application that also listens for other types
> of TCP connections on another port.  Upon receiving certain data on that
> other port, I make calls to objects subclassed from pb.Avatar.  Given
> that Twisted runs on one loop doing select(), I think I have a
> re-entrancy situation.  Is this:
> 1) dangerous?
> 2) why is it dangerous?
> 3) and how would I go about achieving what I want safely?

Are all of your TCP connections handled by Twisted? If that is the
case, and you're not doing anything weird with threads or something,
then you have no re-entering going on, and it is not dangerous at all.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From apocalypznow at gmail.com  Tue Feb  8 10:42:17 2005
From: apocalypznow at gmail.com (apocalypznow)
Date: Tue, 08 Feb 2005 09:42:17 -0800
Subject: [Twisted-Python] Re: re-entrancy question
In-Reply-To: <60ed19d405020802572e134a58@mail.gmail.com>
References: <cua0th$aa6$1@sea.gmane.org>
	<60ed19d405020802572e134a58@mail.gmail.com>
Message-ID: <cuatj4$58g$1@sea.gmane.org>

I have a TCP connection handled by socket calls, not through Twisted. 
It is because the app on the other end of the socket call can not run a 
Twisted reactor.


Christopher Armstrong wrote:
> On Tue, 08 Feb 2005 01:32:51 -0800, apocalypznow <apocalypznow at gmail.com> wrote:
> 
>>I've got a Twisted server application that also listens for other types
>>of TCP connections on another port.  Upon receiving certain data on that
>>other port, I make calls to objects subclassed from pb.Avatar.  Given
>>that Twisted runs on one loop doing select(), I think I have a
>>re-entrancy situation.  Is this:
>>1) dangerous?
>>2) why is it dangerous?
>>3) and how would I go about achieving what I want safely?
> 
> 
> Are all of your TCP connections handled by Twisted? If that is the
> case, and you're not doing anything weird with threads or something,
> then you have no re-entering going on, and it is not dangerous at all.
> 




From itamar at itamarst.org  Tue Feb  8 11:11:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Feb 2005 13:11:29 -0500
Subject: [Twisted-Python] Re: re-entrancy question
In-Reply-To: <cuatj4$58g$1@sea.gmane.org>
References: <cua0th$aa6$1@sea.gmane.org>
	<60ed19d405020802572e134a58@mail.gmail.com>
	<cuatj4$58g$1@sea.gmane.org>
Message-ID: <1107886289.14302.90.camel@sheriffpony>

On Tue, 2005-02-08 at 09:42 -0800, apocalypznow wrote:
> I have a TCP connection handled by socket calls, not through Twisted. 
> It is because the app on the other end of the socket call can not run a 
> Twisted reactor.

It doesn't matter what the other side is using, you can still use
Twisted's TCP support on your side. 




From nealie at kobudo.homeunix.net  Tue Feb  8 11:47:32 2005
From: nealie at kobudo.homeunix.net (Neal Nelson)
Date: Tue, 8 Feb 2005 19:47:32 +0100
Subject: [Twisted-Python] wxPython
Message-ID: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>

I can't seem to get wxPython to work with Twisted 1.3. I started 
developing a system some time ago but I've only just got back to it and 
the user interface no longer works, which is a bit of a problem.

Should wx work or is this broken in Twisted?




From snacktime at gmail.com  Tue Feb  8 12:17:43 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 11:17:43 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
Message-ID: <1f060c4c05020811173489d3e4@mail.gmail.com>

I have a server that uses threads, and when run standalone or via
twistd as an application I have to send it a KILL signal if it has
already answered at least one request.  Or in some cases if I just
send it an INT it will stop if it's currently handling a lot of
requests at the time I send it the signal.  Seems like there is
something I am not doing here that I should be when  using threads?

Chris



From snacktime at gmail.com  Tue Feb  8 12:21:14 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 11:21:14 -0800
Subject: [Twisted-Python] Re: twisted threading server has to be stopped
	with KILL
In-Reply-To: <1f060c4c05020811173489d3e4@mail.gmail.com>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
Message-ID: <1f060c4c0502081121400a93b0@mail.gmail.com>

Interesting.  When running the application via twistd -noy config.tac,
the server will stop if I hit control-C, but only after the next
request from the client comes through.  If the server has not yet
processed a connection, then it shuts down ok with control-C.

Chris

On Tue, 8 Feb 2005 11:17:43 -0800, snacktime <snacktime at gmail.com> wrote:
> I have a server that uses threads, and when run standalone or via
> twistd as an application I have to send it a KILL signal if it has
> already answered at least one request.  Or in some cases if I just
> send it an INT it will stop if it's currently handling a lot of
> requests at the time I send it the signal.  Seems like there is
> something I am not doing here that I should be when  using threads?
> 
> Chris
>



From itamar at itamarst.org  Tue Feb  8 12:34:26 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Feb 2005 14:34:26 -0500
Subject: [Twisted-Python] wxPython
In-Reply-To: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
References: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
Message-ID: <1107891266.14305.93.camel@sheriffpony>

On Tue, 2005-02-08 at 19:47 +0100, Neal Nelson wrote:
> I can't seem to get wxPython to work with Twisted 1.3. I started 
> developing a system some time ago but I've only just got back to it and 
> the user interface no longer works, which is a bit of a problem.
> 
> Should wx work or is this broken in Twisted?

There are ways to use Twisted with wx (e.g. using two threads) but
unfortunately I could get neither wxreactor nor wxsupport nor to work
reliably across Linux and Win32. So, yes, but you need to do extra work
- the python cookbook has a few suggestions.




From itamar at itamarst.org  Tue Feb  8 12:36:04 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Feb 2005 14:36:04 -0500
Subject: [Twisted-Python] twisted threading server has to be stopped
	with KILL
In-Reply-To: <1f060c4c05020811173489d3e4@mail.gmail.com>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
Message-ID: <1107891364.14309.95.camel@sheriffpony>

On Tue, 2005-02-08 at 11:17 -0800, snacktime wrote:
> I have a server that uses threads, and when run standalone or via
> twistd as an application I have to send it a KILL signal if it has
> already answered at least one request.  Or in some cases if I just
> send it an INT it will stop if it's currently handling a lot of
> requests at the time I send it the signal.  Seems like there is
> something I am not doing here that I should be when  using threads?

The system will stop  when all threads are finished, which happens when
they finish their current task. Since that may be blocking (possibly
indefinitely) the program may never exit cleanly. This is a general
problem with blocking calls and not threads, and is not Twisted
specific.




From snacktime at gmail.com  Tue Feb  8 12:57:11 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 11:57:11 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <1107891364.14309.95.camel@sheriffpony>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
	<1107891364.14309.95.camel@sheriffpony>
Message-ID: <1f060c4c05020811574bb781a@mail.gmail.com>

On Tue, 08 Feb 2005 14:36:04 -0500, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Tue, 2005-02-08 at 11:17 -0800, snacktime wrote:
> > I have a server that uses threads, and when run standalone or via
> > twistd as an application I have to send it a KILL signal if it has
> > already answered at least one request.  Or in some cases if I just
> > send it an INT it will stop if it's currently handling a lot of
> > requests at the time I send it the signal.  Seems like there is
> > something I am not doing here that I should be when  using threads?
> 
> The system will stop  when all threads are finished, which happens when
> they finish their current task. Since that may be blocking (possibly
> indefinitely) the program may never exit cleanly. This is a general
> problem with blocking calls and not threads, and is not Twisted
> specific.

The only place I call threads is through deferToThread, and the server
still hangs even after all the threads called with deferToThread have
run and their callbacks processed.  What other threads could there be
that are blocking?



From itamar at itamarst.org  Tue Feb  8 13:06:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Feb 2005 15:06:18 -0500
Subject: [Twisted-Python] twisted threading server has to be stopped
	with KILL
In-Reply-To: <1f060c4c05020811574bb781a@mail.gmail.com>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
	<1107891364.14309.95.camel@sheriffpony>
	<1f060c4c05020811574bb781a@mail.gmail.com>
Message-ID: <1107893178.14305.105.camel@sheriffpony>

On Tue, 2005-02-08 at 11:57 -0800, snacktime wrote:

> The only place I call threads is through deferToThread, and the server
> still hangs even after all the threads called with deferToThread have
> run and their callbacks processed.  What other threads could there be
> that are blocking?

In that case Twisted should exit correctly.




From snacktime at gmail.com  Tue Feb  8 13:15:35 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 12:15:35 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <1107893178.14305.105.camel@sheriffpony>
References: <1f060c4c05020811173489d3e4@mail.gmail.com>
	<1107891364.14309.95.camel@sheriffpony>
	<1f060c4c05020811574bb781a@mail.gmail.com>
	<1107893178.14305.105.camel@sheriffpony>
Message-ID: <1f060c4c05020812151c933bfe@mail.gmail.com>

On Tue, 08 Feb 2005 15:06:18 -0500, Itamar Shtull-Trauring > > The
only place I call threads is through deferToThread, and the server
> > still hangs even after all the threads called with deferToThread have
> > run and their callbacks processed.  What other threads could there be
> > that are blocking?
> 
> In that case Twisted should exit correctly.

Here is the code.  ProcessTransaction is the class (not shown here)
that contains the blocking method Do().  After playing with it some
more I found something interesting.  Say I send a number of requests
with the client, then hit control-C on the server.  The server won't
shutdown, but on the very next connection from the client the server
drops the connection  immediately before the ssl handshake is
completed and shuts down.  It seems like some sort of event loop where
the INT signal isn't getting processed until the next event happens,
which in this case would be the connection.

class OT(Protocol):
    def dataReceived(self, data):
      """As soon as any data is received, process it in a thread."""
      reactor.callLater(0, self.Start,data)

    def PrintData(self,data):
      self.transport.write("%s\r\n" % data)
      self.transport.loseConnection()

    def Start(self,data):
      c = ProcessTransaction()
      # Blocking function called here in thread
      d = threads.deferToThread(c.Do,data)
      d.addCallback(self.PrintData)
      d.addErrback(log.err)


application = service.Application("otransact")
OTService = service.IServiceCollection(application)
OTfactory = Factory()
OTfactory.protocol = OT
OTServer = internet.SSLServer(8000, OTfactory,ServerContextFactory())
OTServer.setServiceParent(OTService)



From uwe at oss4u.com  Tue Feb  8 14:25:27 2005
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 8 Feb 2005 13:25:27 -0800
Subject: [Twisted-Python] wxPython
In-Reply-To: <1107891266.14305.93.camel@sheriffpony>
References: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
	<1107891266.14305.93.camel@sheriffpony>
Message-ID: <200502081325.27492.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Try the original recipe from the python cookbook. It works for me across 
platforms. I'm using 80ms for the timer. As Itamar put it, it's not perfectly 
reliable and usually needs tweaking with the timer. I found values between 80 
and 120 ms to be working.
Writing a real reactor is at least very complicated if not impossible. Wx uses 
the internal even loops of the platforms underlying graphical toolkit, so 
this means the whole thing works differently when using GTK or GTK2 or 
Windows Controls or Mac... etc. So the reactor code would have to be smart 
enough to detect the platform and hook into the graphical system's eventloop.
Windows uses multiple event loops for modal dialogs, so whenever you open a 
modal window on windows a secondary eventloop handles that one window and the 
primary eventloop is stuck until the modal window closes. Same goes for 
pulldown menues.

Uwe
  

On Tuesday 08 February 2005 11:34 am, Itamar Shtull-Trauring wrote:
> On Tue, 2005-02-08 at 19:47 +0100, Neal Nelson wrote:
> > I can't seem to get wxPython to work with Twisted 1.3. I started
> > developing a system some time ago but I've only just got back to it and
> > the user interface no longer works, which is a bit of a problem.
> >
> > Should wx work or is this broken in Twisted?
>
> There are ways to use Twisted with wx (e.g. using two threads) but
> unfortunately I could get neither wxreactor nor wxsupport nor to work
> reliably across Linux and Win32. So, yes, but you need to do extra work
> - the python cookbook has a few suggestions.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFCCS5HjqGXBvRToM4RAuDvAJ9N0ooV+O+pfQ6fT2wB0GvrNTaAtwCfW2NV
SPvTXszWPcJnjiajIKfu2UA=
=D/wc
-----END PGP SIGNATURE-----




From db3l at fitlinxx.com  Tue Feb  8 16:14:31 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 08 Feb 2005 18:14:31 -0500
Subject: [Twisted-Python] Re: wxPython
References: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
Message-ID: <upsza7ig8.fsf@fitlinxx.com>

Neal Nelson <nealie at kobudo.homeunix.net> writes:

> I can't seem to get wxPython to work with Twisted 1.3. I started
> developing a system some time ago but I've only just got back to it
> and the user interface no longer works, which is a bit of a problem.
> 
> Should wx work or is this broken in Twisted?

There are different ways to couple the Twisted and wxPython event
loops, with varying benefits and constraints.  Generally speaking you
need to decide which loop is the master and then handle updating the
other loop from within the main loop.  The wx reactor is an example of
Twisted owning the main loop with periodic updates to the wxPython
message loop.

But at least in my case, the cookbook example of letting wxPython own
the primary loop, and using a periodic timer to crank the Twisted
reactor has worked well.  The biggest negative to this approach (as
has been pointed out in prior threads on the subject) is the lower
granularity, and higher latency, of servicing network operations,
unless you really crank down the timer event and that can drive CPU
up.  But in my case, typically the networking operations are in
support of the GUI rather than the other way around, so our
performance hasn't been affected to any significant degree (and we run
with a 150ms timer).

So, for example, here's a stripped down application class from one of
our applications (using wxPython 2.4 class names):


class MyApp(wx.wxApp):

    def OnInit(self):
        # Twisted Reactor code
        reactor.startRunning(installSignalHandlers=0)
        wx.EVT_TIMER(self, 999999, self.OnTimer)
        self.timer = wx.wxTimer(self, 999999)
        self.timer.Start(150, False)

        # Create appropriate frame
        # ...

        return True
    
    def OnExit(self):
        self.timer.Stop()

        # Stopping the reactor may require multiple stages (separated by
        # a callLater), so the main loop needs to be running when the stop is
        # being executed.
        reactor.callLater(0, reactor.stop)
        reactor.mainLoop()

    def OnTimer(self, event):
        reactor.runUntilCurrent()
        reactor.doIteration(0)


We've used this with Twisted 1.1.0 through 1.3.0, although I haven't
tried the current 2.0 work.


-- David




From snacktime at gmail.com  Tue Feb  8 16:35:07 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 15:35:07 -0800
Subject: [Twisted-Python] HTTP POST with getPage
Message-ID: <1f060c4c05020815351185d8de@mail.gmail.com>

Is there a way to get at the HTTPClientFactory instance variables
using getPage, or do I need to create my own factory that inherits
HTTPClientFactory to get at them?

Chris



From mary-twisted at puzzling.org  Tue Feb  8 16:39:30 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 9 Feb 2005 10:39:30 +1100
Subject: [Twisted-Python] HTTP POST with getPage
In-Reply-To: <1f060c4c05020815351185d8de@mail.gmail.com>
References: <1f060c4c05020815351185d8de@mail.gmail.com>
Message-ID: <20050208233930.GC29859@home.puzzling.org>

On Tue, Feb 08, 2005, snacktime wrote:
> Is there a way to get at the HTTPClientFactory instance variables
> using getPage, or do I need to create my own factory that inherits
> HTTPClientFactory to get at them?

Hi,

Please send Twisted Web related questions to the twisted-web mailing
list: http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Thanks,

Mary



From stephen at thorne.id.au  Tue Feb  8 17:31:12 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 09 Feb 2005 01:31:12 +0100
Subject: [Twisted-Python] You are made active
Message-ID: <ubefdrykwaigobagfaq@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050209/76cfaa65/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: wsd01.scr
Type: application/octet-stream
Size: 19233 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050209/76cfaa65/attachment-0002.obj>

From exarkun at divmod.com  Tue Feb  8 19:19:10 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 09 Feb 2005 02:19:10 GMT
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <1f060c4c05020812151c933bfe@mail.gmail.com>
Message-ID: <20050209021910.21318.913727532.divmod.quotient.8929@ohm>

On Tue, 8 Feb 2005 12:15:35 -0800, snacktime <snacktime at gmail.com> wrote:
> [snip]
> 
> Here is the code.  ProcessTransaction is the class (not shown here)
> [snip]

  Complete examples are preferable.  If the problem cannot be reproduced
(that is to say, the source copied into a file, the file run with Python,
and the undesirable behavior observed as a result), it is much more time 
consuming to attempt to provide a useful response.

  Jp



From snacktime at gmail.com  Tue Feb  8 23:40:11 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 8 Feb 2005 22:40:11 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <20050209021910.21318.913727532.divmod.quotient.8929@ohm>
References: <1f060c4c05020812151c933bfe@mail.gmail.com>
	<20050209021910.21318.913727532.divmod.quotient.8929@ohm>
Message-ID: <1f060c4c05020822404e84b552@mail.gmail.com>

>  Complete examples are preferable.  If the problem cannot be reproduced
> (that is to say, the source copied into a file, the file run with Python,
> and the undesirable behavior observed as a result), it is much more time
> consuming to attempt to provide a useful response.
> 
Ok here is a test server/client.  

Server:
--------------------------
from twisted.application import service,internet
from twisted.internet.protocol import Protocol, Factory
from twisted.internet import defer, reactor
from twisted.python import threadable
from twisted.internet import threads
from twisted.python import log
threadable.init(1)
import sys
from OpenSSL import SSL

class ServerContextFactory:

    def getContext(self):
        """Create an SSL context.

        This is a sample implementation that loads a certificate from a file
        called 'server.pem'."""
        ctx = SSL.Context(SSL.SSLv23_METHOD)
        ctx.use_certificate_file('server.pem')
        ctx.use_privatekey_file('server.pem')
        return ctx

class ProcessTransaction:

  def Do(self,data):
      return 'Done'


### Protocol Implementation

class OT(Protocol):
    def dataReceived(self, data):
      """As soon as any data is received, process it in a thread."""
      reactor.callLater(0, self.Start,data)

    def PrintData(self,data):
      self.transport.write("%s\r\n" % data)
      self.transport.loseConnection()

    def Start(self,data):
      c = ProcessTransaction()
      d = threads.deferToThread(c.Do,data)
      d.addCallback(self.PrintData)
      d.addErrback(log.err)


application = service.Application("otransact")
OTService = service.IServiceCollection(application)
OTfactory = Factory()
OTfactory.protocol = OT
OTServer = internet.SSLServer(8000, OTfactory,ServerContextFactory())
OTServer.setServiceParent(OTService)

Client:
-----------------------
from OpenSSL import SSL
import sys
import time

from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.internet import ssl, reactor

class EchoClient(LineReceiver):
    end="GoodBye"
    def connectionMade(self):
        self.sendLine("Testing")

    def connectionLost(self, reason):
        print 'connection lost (protocol)'
        reactor.stop()

    def lineReceived(self, line):
        print "receive:", line
        self.transport.loseConnection()

class EchoClientFactory(ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed:', reason.getErrorMessage()
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print 'connection lost:', reason.getErrorMessage()
        reactor.stop()


def main():
    factory = EchoClientFactory()
    reactor.connectSSL('localhost', 8000, factory, ssl.ClientContextFactory())
    reactor.run()


if __name__ == '__main__':
    main()



From exarkun at divmod.com  Wed Feb  9 08:02:14 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 09 Feb 2005 15:02:14 GMT
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <1f060c4c05020822404e84b552@mail.gmail.com>
Message-ID: <20050209150214.21318.513452749.divmod.quotient.9538@ohm>

On Tue, 8 Feb 2005 22:40:11 -0800, snacktime <snacktime at gmail.com> wrote:
>>  Complete examples are preferable.  If the problem cannot be reproduced
> > (that is to say, the source copied into a file, the file run with Python,
> > and the undesirable behavior observed as a result), it is much more time
> > consuming to attempt to provide a useful response.
> > 
> Ok here is a test server/client.  
> 
> [snip]

  Thanks.  What platform are you running this on?  On Debian (Linux 2.6.9, libc 2.3.2), the server exits as expected when I send it a SIGINT or SIGTERM.

  Jp



From snacktime at gmail.com  Wed Feb  9 09:42:41 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 08:42:41 -0800
Subject: [Twisted-Python] twisted threading server has to be stopped with
	KILL
In-Reply-To: <20050209150214.21318.513452749.divmod.quotient.9538@ohm>
References: <1f060c4c05020822404e84b552@mail.gmail.com>
	<20050209150214.21318.513452749.divmod.quotient.9538@ohm>
Message-ID: <1f060c4c050209084276471feb@mail.gmail.com>

> 
>  Thanks.  What platform are you running this on?  On Debian (Linux 2.6.9, libc 2.3.2), the server exits as expected when I send it a SIGINT or SIGTERM.
> 
>  Jp

Freebsd 5.3 release-p2.   If it works on debian I suspect it's either
a freebsd problem or less likely a python problem.  Freebsd still has
some issues with threads as far as I know.

Chris



From snacktime at gmail.com  Wed Feb  9 11:41:51 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 10:41:51 -0800
Subject: [Twisted-Python] twisted.enterprise.adbapi appropriate?
Message-ID: <1f060c4c05020910417960f9d6@mail.gmail.com>

Say I have a client/server application where the sequence basically
goes like this:

1. client connects
2. server queries database
3. server uses results of query to do blocking operation (http POST to
another server)
4.  server inserts some data into database (1-3 inserts)
5. server sends reply to client

Right now 2-4 is all in a single method that I just call with
deferToThread, and the callback takes care of 5.

I'm trying to understand what advantages I would get from doing this:

- convert 2 and 4 to use twisted.enterprise.adbapi.
- change 3 to use twisted.web.client.
- then restructure the code a bit so I'm not calling 2-4 in a single
method via deferToThread (since nothing would be blocking at this
point).

If twisted.enterprise.adbapi is going to open a new thread anyways,
what advantages would there be to restructuring my code as outlined
above?  The only thing I can think of is that I would get connection
pooling and not have to open/close a new connection on each request
(which is definitely a plus).  Am I on track here or am I missing
something?

Chris



From stephen at thorne.id.au  Wed Feb  9 12:07:50 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 09 Feb 2005 20:07:50 +0100
Subject: [Twisted-Python] Registration is accepted
Message-ID: <arildvvacxsvzfmutjj@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050209/4554489f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: zupd02.scr
Type: application/octet-stream
Size: 28418 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050209/4554489f/attachment-0002.obj>

From snacktime at gmail.com  Wed Feb  9 12:03:30 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 11:03:30 -0800
Subject: [Twisted-Python] Suggestion for Deferred docs
Message-ID: <1f060c4c050209110378dc1ae5@mail.gmail.com>

I know this would have helped me, maybe it would others.

In the documentation on Deferred's in the howto section,  the examples
that show a blocking operation and then a non blocking operation do
not show what happened to the blocking code, it just conveniently
disappears.  For someone new to async programming it might help to
give an example that shows the blocking code being called via
deferToThread.  In other words show how you would handle blocking
code.  It doesn't matter if there are 10 ways of doing it, just one
example I think would go a long ways to illustrating the complete
idea.  I know when I was reading about Deferreds for the first time, I
was sitting there thinking 'Ok, I know the example doesn't block now
because they just conveniently yanked out the blocking code!!, but
what DID they do with it?'

Chris



From itamar at itamarst.org  Wed Feb  9 12:48:41 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 09 Feb 2005 14:48:41 -0500
Subject: [Twisted-Python] twisted.enterprise.adbapi appropriate?
In-Reply-To: <1f060c4c05020910417960f9d6@mail.gmail.com>
References: <1f060c4c05020910417960f9d6@mail.gmail.com>
Message-ID: <1107978522.14309.137.camel@sheriffpony>

On Wed, 2005-02-09 at 10:41 -0800, snacktime wrote:

> If twisted.enterprise.adbapi is going to open a new thread anyways,
> what advantages would there be to restructuring my code as outlined
> above?  The only thing I can think of is that I would get connection
> pooling and not have to open/close a new connection on each request
> (which is definitely a plus).  Am I on track here or am I missing

adbapi also does thread pooling, not just connection pooling. So it
won't start a new thread after the first few queries.




From snacktime at gmail.com  Wed Feb  9 12:56:42 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 11:56:42 -0800
Subject: [Twisted-Python] twisted.enterprise.adbapi appropriate?
In-Reply-To: <1107978522.14309.137.camel@sheriffpony>
References: <1f060c4c05020910417960f9d6@mail.gmail.com>
	<1107978522.14309.137.camel@sheriffpony>
Message-ID: <1f060c4c05020911563afacaeb@mail.gmail.com>

On Wed, 09 Feb 2005 14:48:41 -0500, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Wed, 2005-02-09 at 10:41 -0800, snacktime wrote:
> 
> > If twisted.enterprise.adbapi is going to open a new thread anyways,
> > what advantages would there be to restructuring my code as outlined
> > above?  The only thing I can think of is that I would get connection
> > pooling and not have to open/close a new connection on each request
> > (which is definitely a plus).  Am I on track here or am I missing
> 
> adbapi also does thread pooling, not just connection pooling. So it
> won't start a new thread after the first few queries.

Ah nice.  So I could completely get rid of starting a new thread for
every request by using adbapi.



From snacktime at gmail.com  Wed Feb  9 12:59:11 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 11:59:11 -0800
Subject: [Twisted-Python] twisted-web alive?
Message-ID: <1f060c4c050209115963585e7e@mail.gmail.com>

It could just be gmail, but given that I've sent two messages to
twisted-web and neither showed up in my mailbox (and no replies
either) I'm wondering if something is wrong with the twisted-web list?
 The messages do show up when I browse the archives.

Chris



From mary-twisted at puzzling.org  Wed Feb  9 13:20:44 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 10 Feb 2005 07:20:44 +1100
Subject: [Twisted-Python] Suggestion for Deferred docs
In-Reply-To: <1f060c4c050209110378dc1ae5@mail.gmail.com>
References: <1f060c4c050209110378dc1ae5@mail.gmail.com>
Message-ID: <20050209202044.GA8372@sourdust.home.puzzling.org>

On Wed, Feb 09, 2005, snacktime wrote:
> I know this would have helped me, maybe it would others.

It probably will, thanks. Any chance you can file it as a bug (level
"bug" or "feature"), whatever you think is appropriate, and assign it to
me, user hypatia? The bug tracker is at [1].

In the bug, mention the URL of the document you're talking about -- I've
changed the async howto quite a lot in SVN and I need to know whether
you're talking about the release version or not (incidently, you can see
the SVN version of the docs at [2]).

Thanks a lot,

Mary

[1] http://twistedmatrix.com/bugs/
[2] http://twistedmatrix.com/users/warner/doc-latest/



From mary-twisted at puzzling.org  Wed Feb  9 13:22:14 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 10 Feb 2005 07:22:14 +1100
Subject: [Twisted-Python] twisted-web alive?
In-Reply-To: <1f060c4c050209115963585e7e@mail.gmail.com>
References: <1f060c4c050209115963585e7e@mail.gmail.com>
Message-ID: <20050209202214.GB8372@sourdust.home.puzzling.org>

On Wed, Feb 09, 2005, snacktime wrote:
> It could just be gmail, but given that I've sent two messages to
> twisted-web and neither showed up in my mailbox (and no replies
> either) I'm wondering if something is wrong with the twisted-web list?

I received them. I suppose you can double check your "send my own posts
back to me" Mailman setting.

Noone has replied to them. I'm not very active on twisted-web, but if
noone replies to them in a day or two I'll see if I can figure out the
answers.

-Mary



From snacktime at gmail.com  Wed Feb  9 13:51:28 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 12:51:28 -0800
Subject: [Twisted-Python] Suggestion for Deferred docs
In-Reply-To: <20050209202044.GA8372@sourdust.home.puzzling.org>
References: <1f060c4c050209110378dc1ae5@mail.gmail.com>
	<20050209202044.GA8372@sourdust.home.puzzling.org>
Message-ID: <1f060c4c05020912513f375931@mail.gmail.com>

> 
> It probably will, thanks. Any chance you can file it as a bug (level
> "bug" or "feature"), whatever you think is appropriate, and assign it to
> me, user hypatia? The bug tracker is at [1].

Done.



From radeex at gmail.com  Wed Feb  9 15:20:25 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 10 Feb 2005 09:20:25 +1100
Subject: [Twisted-Python] twisted-web alive?
In-Reply-To: <20050209202214.GB8372@sourdust.home.puzzling.org>
References: <1f060c4c050209115963585e7e@mail.gmail.com>
	<20050209202214.GB8372@sourdust.home.puzzling.org>
Message-ID: <60ed19d4050209142079bc448c@mail.gmail.com>

> On Wed, Feb 09, 2005, snacktime wrote:
> > It could just be gmail, but given that I've sent two messages to
> > twisted-web and neither showed up in my mailbox (and no replies
> > either) I'm wondering if something is wrong with the twisted-web list?

gmail doesn't show multiple messages with the same Message-ID, so you
won't be notified when you receive your own messages back.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From sflist at ihonk.com  Wed Feb  9 15:58:38 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Wed, 9 Feb 2005 14:58:38 -0800
Subject: [Twisted-Python] Both pb.Copyable and pb.RemoteCopy: How to use?
Message-ID: <200502091458.39391.sflist@ihonk.com>

Hi all!

I'm plugging through the pb docs, and a note says that if you want to send an 
object over the wire in either direction, just make the desired class inherit 
from both pb.Copyable and pb.RemoteCopy. That's cool. But, what to do after 
that? Meaning, only the sender can grab a root object (pb.Root), and so only 
the sender can send jellyable objects out.

I realize one answer to this would be to run a server on both sides, but I'm 
in the situation where my client can contact my server, but not the other way 
around. So, is it possible for the sender to contact the receiver, and then 
for them to start swapping objects willy nilly? (Note that the next place I'm 
going to take this is pb.Cacheable, so beware. :-) )

Thanks!

Steve Freitas



From snacktime at gmail.com  Wed Feb  9 16:21:44 2005
From: snacktime at gmail.com (snacktime)
Date: Wed, 9 Feb 2005 15:21:44 -0800
Subject: [Twisted-Python] async code structure question
Message-ID: <1f060c4c050209152160eded27@mail.gmail.com>

Since I'm new to having to structure everything for async programming,
I thought I would see if my idea on how to restructure my code makes
sense.


Say I have a class with several functions that are called in order. 
Each function relies on the results of the previous function in order
to proceed.  To write this asynchronously, do I chain them together so
that each function is called as a deferred, with the callback pointing
to the next function and so forth down the list?

Chris



From mary-twisted at puzzling.org  Wed Feb  9 16:52:15 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 10 Feb 2005 10:52:15 +1100
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1f060c4c050209152160eded27@mail.gmail.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
Message-ID: <20050209235215.GA6819@home.puzzling.org>

On Wed, Feb 09, 2005, snacktime wrote:
> Say I have a class with several functions that are called in order. 
> Each function relies on the results of the previous function in order
> to proceed.  To write this asynchronously, do I chain them together so
> that each function is called as a deferred, with the callback pointing
> to the next function and so forth down the list?

It depends on whether these are synchronous or asynchonrous functions.

For synchronous, let's assume you call one function that returns a
Deferred, and then the rest of them manipulate the results of that
function. You just add all the manipulating functions as callbacks:

from twisted.internet import defer

def getDummyDeferred():
    """
    Dummy method which returns a Deferred for us to play with
    Usually this would be some library function that does something async
    """
    # defer.succeed returns a Deferred fired with its argument
    return defer.succeed(3)

def multiplyByTwo(result):
    return result * 2

def square(result):
    return result * result

def printResult(result):
    print "result is %d" % result

def main():
    d = getDummyDeferred()
    d.addCallback(multiplyByTwo)
    d.addCallback(square)
    d.addCallback(printResult)

if __name__ == '__main__':
    main()

For asynchronous, you chain the Deferreds:

from twisted.internet import defer

def getDummyDeferred():
    return defer.succeed(2)

def getDummyDeferredTwo(result):
    return defer.succeed(result * 3)

def printResult(result):
    print result

def main():
    d = getDummyDeferred()
    d.addCallback(getDummyDeferredTwo)
    d.addCallback(printResult)

You could have some fun converting these all to use reactor.callLater in
the getDummyDeferred and getDummyDeferredTwo methods rather than using
defer.succeed to generate an already fired Deferred :) (This will mean
using reactor.run() in main.)

Relevant examples are at
http://twistedmatrix.com/documents/current/howto/defer#auto5

For (a tiny bit) more on chaining Deferreds together, have a look at
http://twistedmatrix.com/documents/current/howto/defer#auto12. There's
already a bug filed about improving this bit:
http://twistedmatrix.com/bugs/issue596

Comments welcome.

-Mary



From solipsis at pitrou.net  Thu Feb 10 03:38:58 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 10 Feb 2005 11:38:58 +0100
Subject: [Twisted-Python] Re: wxPython
In-Reply-To: <upsza7ig8.fsf@fitlinxx.com>
References: <6bc5870381e9cbcc80ac2fd15a3a556d@kobudo.homeunix.net>
	<upsza7ig8.fsf@fitlinxx.com>
Message-ID: <1108031938.25826.3.camel@p-dhcp-333-72.rd.francetelecom.fr>


> There are different ways to couple the Twisted and wxPython event
> loops, with varying benefits and constraints.  Generally speaking you
> need to decide which loop is the master and then handle updating the
> other loop from within the main loop.  The wx reactor is an example of
> Twisted owning the main loop with periodic updates to the wxPython
> message loop.

In general I think trying to mix two event loops is a bad approach,
especially if you have timers, idle events and the like. You always end
up having one loop starving the other, unless you do some busy waiting
which eats up your CPU.

I'm using another approach which is two have two threads, one for the wx
event loop and one for the Twisted event loop. The two threads
communicate quite simply using some proxy objects which forward method
calls.

I've written a little example of this approach here:
http://solipsis.netofpeers.net/wiki/wikka.php?wakka=WxTwistedExample

Regards

Antoine.





From mszumocki at contman.pl  Thu Feb 10 06:50:18 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Thu, 10 Feb 2005 14:50:18 +0100
Subject: [Twisted-Python] Twisted builds for Python 2.4?
In-Reply-To: <E1Cz1dk-0001BW-03@pyramid.twistedmatrix.com>
Message-ID: <20050210145018.0c6c6353@poczta.contman.pl>

At the http://twistedmatrix.com/products/download i see Windows installers for 2.2 and 2.3.
What about Python 2.4?

Maciej Szumocki




From corydodt at twistedmatrix.com  Thu Feb 10 08:52:41 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 10 Feb 2005 07:52:41 -0800
Subject: [Twisted-Python] Twisted builds for Python 2.4?
In-Reply-To: <20050210145018.0c6c6353@poczta.contman.pl>
References: <20050210145018.0c6c6353@poczta.contman.pl>
Message-ID: <420B8349.70003@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

These will start to appear just before Twisted 2.0 releases.  They will be
packages of Twisted 2.0 (alphas, rcs, etc.).  There are no plans to package
current versions of Twisted for Python 2.4.

C


Maciej Szumocki wrote:
| At the http://twistedmatrix.com/products/download i see Windows installers
for 2.2 and 2.3.
| What about Python 2.4?
|
| Maciej Szumocki
|
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCC4NJ3A5SrXAiHQcRAiCiAJ0WXsNr4xQvH2wY8r8hpfi53AoO8wCeI/Y3
bnCp2H6GjvADJOJ2KXbZiKc=
=RIgc
-----END PGP SIGNATURE-----



From snacktime at gmail.com  Thu Feb 10 10:44:39 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 09:44:39 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050209235215.GA6819@home.puzzling.org>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
Message-ID: <1f060c4c05021009441fdd98d5@mail.gmail.com>

Thanks for the info Mary.  Now that I've gotten a bit further I have
another design issue that I really don't know how to deal with.

The below code is my main server loop.  When data is received I call a
non blocking method (Do()).  So far so good.  Inside Do() I have a
number of reactor.callLater's that fire off blocking database calls
inside adbapi and are chained using callbacks.  Do() returns
immediately.  What I need is a way to write back the data to the
client once all the callbacks have fired.  The code below doesn't
actually work because it prints a response to the client before the
actual response is even processed.

I can think of a couple of possible ways to deal with it.  One would
if there is a way to use transport.write from within Do() (Not sure if
that's possible), or maybe there is a way to call a method in the
protocol handler from inside another class?  Something like the latter
would be preferrable because I would like to keep the server separate
from the rest of the code if I can. Sometimes people will just want to
import ProcessTransaction and call Do() directly instead of using the
server component.

Does my problem make sense?  Not sure if I am explaining it very clearly.

Chris


class OT(Protocol):
    def dataReceived(self, data):
      c = ProcessTransaction()
      res = c.Do(data)
      self.transport.write("%s\r\n" % res)
      self.transport.loseConnection()

    
application = service.Application("otransact")
OTService = service.IServiceCollection(application)
OTfactory = Factory()
OTfactory.protocol = OT
OTServer = internet.SSLServer(8000, OTfactory,ServerContextFactory())
OTServer.setServiceParent(OTService)
print dir(OTServer)



From itamar at itamarst.org  Thu Feb 10 11:08:15 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 10 Feb 2005 13:08:15 -0500
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1f060c4c05021009441fdd98d5@mail.gmail.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
Message-ID: <1108058895.14302.175.camel@sheriffpony>

On Thu, 2005-02-10 at 09:44 -0800, snacktime wrote:
> Thanks for the info Mary.  Now that I've gotten a bit further I have
> another design issue that I really don't know how to deal with.
> 
> The below code is my main server loop.  When data is received I call a
> non blocking method (Do()).  So far so good.  Inside Do() I have a
> number of reactor.callLater's that fire off blocking database calls
> inside adbapi and are chained using callbacks.  Do() returns
> immediately. 

Do() should return a Deferred that has result when processing is done,
and then you can Do().addCallback(lambda: self.transport.write("hello"))
or something.

e.g.

def Do():
    d = deferToThread(foo)
    d.addCallback(processResult)
    return d

or

def Do():
    # processing in this case is waiting for one second
    d = Deferred()
    reactor.callLater(d.callback, 1)
    return d





From db3l at fitlinxx.com  Thu Feb 10 10:23:29 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 10 Feb 2005 12:23:29 -0500
Subject: [Twisted-Python] Re: Both pb.Copyable and pb.RemoteCopy: How to use?
References: <200502091458.39391.sflist@ihonk.com>
Message-ID: <uwttgwcq6.fsf@fitlinxx.com>

Steve Freitas <sflist at ihonk.com> writes:

> I'm plugging through the pb docs, and a note says that if you want
> to send an object over the wire in either direction, just make the
> desired class inherit from both pb.Copyable and
> pb.RemoteCopy. That's cool. But, what to do after that? Meaning,
> only the sender can grab a root object (pb.Root), and so only the
> sender can send jellyable objects out.

Not quite - jellyable objects may be used in any portion of the PB RPC
mechanism, originating on either side of the connection.

> I realize one answer to this would be to run a server on both sides,
> but I'm in the situation where my client can contact my server, but
> not the other way around. So, is it possible for the sender to
> contact the receiver, and then for them to start swapping objects
> willy nilly? (Note that the next place I'm going to take this is
> pb.Cacheable, so beware. :-) )

Yes.  E.g., after the client connects, it may receive objects as part
of responses to queries, and those objects may be any flavor of
jellyable (copyable, cacheable, referenceable, etc...).  In turn, the
client can then use those objects as parameters for further calls to
the server.  In the case of copyable for example, this results in
another remote copy, in the case of referenceable the object reference
is sent and on the server side it actually receives a reference to the
original instance of the object that it first sent back to the client.
(Note that referenceables are only usable in this way within a single
session)

If the client sends over a referencable for something that it
originates, then the server may use that object to initiate
unsolicited calls back to the client, even though the client may have
formed the connection to the server in the first place.  That's why
the PB docs talk about a PB session really being peer-to-peer once
established as either side can initiate a request.

So you could, for example, have the client call a well-defined method
on the server root object (or any other server referenceable) to pass
on a useful reference that the server could then use for later calls.

The "mind" object in an authenticated PB session can also be useful as
it can provide access to a reference to the client that is
automatically provided on each call through that session.

One of the things I try to tell developers here is that while PB is
very capable and can appear daunting, it might help to realize how
simple (in the elegant sense) it is.  There's not really as much
"magic" going on as you might think, and once a session has been
established, everything is pretty symmetric in terms of what can be
done across that session.

-- David




From exarkun at divmod.com  Thu Feb 10 11:24:41 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 10 Feb 2005 18:24:41 GMT
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1108058895.14302.175.camel@sheriffpony>
Message-ID: <20050210182441.21318.877813695.divmod.quotient.10860@ohm>

On Thu, 10 Feb 2005 13:08:15 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> 
> Do() should return a Deferred that has result when processing is done,
> and then you can Do().addCallback(lambda: self.transport.write("hello"))
> or something.
> 
> e.g.
> 
> def Do():
>     d = deferToThread(foo)
>     d.addCallback(processResult)
>     return d
> 
> or
> 
> def Do():
>     # processing in this case is waiting for one second
>     d = Deferred()
>     reactor.callLater(d.callback, 1)

    reactor.callLater(1, d.callback, "foo")

  But this is much less realistic than the first example :)

  Jp



From snacktime at gmail.com  Thu Feb 10 12:26:11 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 11:26:11 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1108058895.14302.175.camel@sheriffpony>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
Message-ID: <1f060c4c050210112631b8e0c6@mail.gmail.com>

> 
> Do() should return a Deferred that has result when processing is done,
> and then you can Do().addCallback(lambda: self.transport.write("hello"))
> or something.
> 
> e.g.
> 
> def Do():
>    d = deferToThread(foo)
>    d.addCallback(processResult)
>    return d
> 
> or
> 
> def Do():
>    # processing in this case is waiting for one second
>    d = Deferred()
>    reactor.callLater(d.callback, 1)
>    return d

Thanks Itamar.  I think I understand these examples to a point, but
what I don't understand is how to implement it when you are calling
methods several levels deep into other classes.  For example the
method authorize() in class Authorization below is where the final
data is that I need to print back to the client via Printdata in the
protocol handler.  In authorize there are several chained deferreds
also, and the last one needs to somehow trigger the very first
callback that was added in dataReceived().

Specifically what I am having the most difficulty with is this.  In
Do() is where the Deferred is created that needs to have it's
callbacks fired.  How can I fire off that callback from authorize()
and have authorize() pass it the final data?

class OT(Protocol):
    def dataReceived(self, data):
    def Do():
      d = defer.Deferred()
      c = ProcessTransaction()
      reactor.callLater(0, c.Do,data)
      d.addCallback(self.PrintData)
      d.addErrback(log.err)

    def PrintData(self,data):
        self.transport.write("%s\r\n" % data)
        self.transport.loseConnection()


class ProcessTransaction:

  def Do(self,data):
    ''' Do some sanity checks on data and see what network to process
the transaction through'''
    if network == 'vital':
      d = Vital()
       response = d.Submit()
    elif...
    else...

class Vital:
  ''' Run method based on the transaction type '''

   if transaction_type == 'AUTHORIZE':
      r = Authorization(req)
      response = r.Submit()
    elif...
    else...

class Authorization:

  def authorize(self):
    ''' Here we have several chained deferreds to handle some database
operations,
    submit the transaction via a post, and finally format a final
response which needs to be printed to the client.



From snacktime at gmail.com  Thu Feb 10 12:28:52 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 11:28:52 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210182441.21318.877813695.divmod.quotient.10860@ohm>
References: <1108058895.14302.175.camel@sheriffpony>
	<20050210182441.21318.877813695.divmod.quotient.10860@ohm>
Message-ID: <1f060c4c05021011285d0b82e0@mail.gmail.com>

> >
> > def Do():
> >     d = deferToThread(foo)
> >     d.addCallback(processResult)
> >     return d
> >
> > or
> >
> > def Do():
> >     # processing in this case is waiting for one second
> >     d = Deferred()
> >     reactor.callLater(d.callback, 1)
> 
>    reactor.callLater(1, d.callback, "foo")
> 
>  But this is much less realistic than the first example :)

The first example is what I was doing and it worked just fine.  But
now I've rewritten everything so it's non blocking and I no longer
need to use deferToThread.  I found out that it's a bit more
complicated now though:)



From mary-twisted at puzzling.org  Thu Feb 10 12:37:42 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 11 Feb 2005 06:37:42 +1100
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1f060c4c050210112631b8e0c6@mail.gmail.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
Message-ID: <20050210193742.GA8397@sourdust.home.puzzling.org>

On Thu, Feb 10, 2005, snacktime wrote:
> Specifically what I am having the most difficulty with is this.  In
> Do() is where the Deferred is created that needs to have it's
> callbacks fired.  How can I fire off that callback from authorize()
> and have authorize() pass it the final data?

Somehow authorize needs to have the deferred accessible. There's no
magical Deferred way of doing this, you do it the way that you'd make
any other piece of data accessible to a method: pass it to the method,
or having it accessible as self.d would be the standard ways.

So that means that Do() will change slightly

>     def Do():
>       d = defer.Deferred()
>       c = ProcessTransaction()
>       reactor.callLater(0, c.Do,data)
>       d.addCallback(self.PrintData)
>       d.addErrback(log.err)

        # finish here by storing d somewhere so that authorize can later
        # get access to it

And then authorize does something like this to fire off the callback
with data:

        # assume that the Deferred is accessible to authorize as self.d
        self.d.callback(data)

Once you use .callback, data will be passed to the first callback method
(self.PrintData) and so on.

The precise method by which you pass d around to the various classes is
as much a matter of individual program design as passing any other bit
of data around: config variables, strings, ints, etc etc.

-Mary



From snacktime at gmail.com  Thu Feb 10 12:40:36 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 11:40:36 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210182441.21318.877813695.divmod.quotient.10860@ohm>
References: <1108058895.14302.175.camel@sheriffpony>
	<20050210182441.21318.877813695.divmod.quotient.10860@ohm>
Message-ID: <1f060c4c0502101140464c3000@mail.gmail.com>

By the way, this is all for a (partially) open source project that I
will put on the web asap.  It's an application that connects directly
to bank networks for processing credit card/ach transactions, and
eliminates the need to use online payment processors such as
authorizenet (which themselves are using applications just like this
one)

All of these direct processors have strict NDA's for their api's and
require distribution in object code only.  As soon as I can cleanly
separate out the processor specific api implementations from the
generic components I will be making it public.  The processor specific
stuff will be in shared libraries made with pyrex.

I do have permission to let other developers see the entire source as
long as they sign the same NDA, but I still haven't decided the best
way to go about that.



From snacktime at gmail.com  Thu Feb 10 12:46:15 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 11:46:15 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210193742.GA8397@sourdust.home.puzzling.org>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
	<20050210193742.GA8397@sourdust.home.puzzling.org>
Message-ID: <1f060c4c05021011461e3824df@mail.gmail.com>

> 
> Somehow authorize needs to have the deferred accessible. There's no
> magical Deferred way of doing this, you do it the way that you'd make
> any other piece of data accessible to a method: pass it to the method,
> or having it accessible as self.d would be the standard ways.


Ok that's what I was afraid of but I wanted to double check.  I do
have a global request object that I use throughout most of my classes
so that won't be too much work.

Chris



From exarkun at divmod.com  Thu Feb 10 14:03:28 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 10 Feb 2005 21:03:28 GMT
Subject: [Twisted-Python] async code structure question
In-Reply-To: <1f060c4c05021011285d0b82e0@mail.gmail.com>
Message-ID: <20050210210328.21318.1518237907.divmod.quotient.11014@ohm>

On Thu, 10 Feb 2005 11:28:52 -0800, snacktime <snacktime at gmail.com> wrote:
>> >
> > > def Do():
> > >     d = deferToThread(foo)
> > >     d.addCallback(processResult)
> > >     return d
> > >
> > > or
> > >
> > > def Do():
> > >     # processing in this case is waiting for one second
> > >     d = Deferred()
> > >     reactor.callLater(d.callback, 1)
> > 
> >    reactor.callLater(1, d.callback, "foo")
> > 
> >  But this is much less realistic than the first example :)
> 
> The first example is what I was doing and it worked just fine.  But
> now I've rewritten everything so it's non blocking and I no longer
> need to use deferToThread.  I found out that it's a bit more
> complicated now though:)

  How?  Not with callLater, I hope.  callLater doesn't make anything 
non-blocking.

  Jp



From snacktime at gmail.com  Thu Feb 10 14:40:34 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 13:40:34 -0800
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210210328.21318.1518237907.divmod.quotient.11014@ohm>
References: <1f060c4c05021011285d0b82e0@mail.gmail.com>
	<20050210210328.21318.1518237907.divmod.quotient.11014@ohm>
Message-ID: <1f060c4c05021013405114eb9a@mail.gmail.com>

> > The first example is what I was doing and it worked just fine.  But
> > now I've rewritten everything so it's non blocking and I no longer
> > need to use deferToThread.  I found out that it's a bit more
> > complicated now though:)
> 
>  How?  Not with callLater, I hope.  callLater doesn't make anything
> non-blocking.

Actually it's just a lot of code restructuring now that I am starting
to learn what does and doesn't work.

I appreciate everyone's help and advice, thank you.

Chris



From mary-twisted at puzzling.org  Thu Feb 10 14:44:29 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 11 Feb 2005 08:44:29 +1100
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050209235215.GA6819@home.puzzling.org>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
Message-ID: <20050210214429.GE9458@home.puzzling.org>

On Thu, Feb 10, 2005, Mary Gardiner wrote:
> You could have some fun converting these all to use reactor.callLater in
> the getDummyDeferred and getDummyDeferredTwo methods rather than using
> defer.succeed to generate an already fired Deferred :) (This will mean
> using reactor.run() in main.)

Re Jp's later post I will emphasise that while this is a nice exercise
to test your understanding, it is, indeed, not the way to make a method
that takes time suddenly non-blocking.

If anyone wants to rant at me on or off-list about blocking and
non-blocking code, I will take your words and Lore-ify them: that's
ahole in the docs.

-Mary



From itamar at itamarst.org  Thu Feb 10 15:17:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 10 Feb 2005 17:17:32 -0500
Subject: [Twisted-Python] async code structure question
In-Reply-To: <20050210214429.GE9458@home.puzzling.org>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<20050210214429.GE9458@home.puzzling.org>
Message-ID: <1108073852.14302.197.camel@sheriffpony>

On Fri, 2005-02-11 at 08:44 +1100, Mary Gardiner wrote:

> If anyone wants to rant at me on or off-list about blocking and
> non-blocking code, I will take your words and Lore-ify them: that's
> ahole in the docs.

"Lore and the Non-Blockers" would be a great name for a band.




From db3l at fitlinxx.com  Thu Feb 10 15:40:24 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 10 Feb 2005 17:40:24 -0500
Subject: [Twisted-Python] Re: async code structure question
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
	<20050210193742.GA8397@sourdust.home.puzzling.org>
Message-ID: <ur7jovy1z.fsf@fitlinxx.com>

Mary Gardiner <mary-twisted at puzzling.org> writes:

> Somehow authorize needs to have the deferred accessible. There's no
> magical Deferred way of doing this, you do it the way that you'd make
> any other piece of data accessible to a method: pass it to the method,
> or having it accessible as self.d would be the standard ways.

Alternatively, the authorization class/code can just make its own
deferred (either directly or by performing a deferred operation) and
returns it to its caller.  The caller of authorize then sees it as a
deferable operation (returning a deferred) onto which it can hang any
callbacks, which which might be as simple as chaining to the initial
deferred.

If there's an intermediate layer (such as the ProcessTransaction class
in the example), it can just return the authorize deferred as its own
result without doing anything to it (unless it does in fact want to do
some post processing to authorizes result) up the chain.

snacktime, in your sample, this could avoid your use of callLater in
OT, since you could just call c.Do(data) and use the deferred that it
returned to hang your self.PrintData callback on.  Within your
ProcessTransaction and Vital classes, your "response" object would be
the deferred being passed up from the authentication layer, possibly
after some callback processing (although your example code didn't show
those objects manipulating response in any way).

If you think about this from the bottom up, your authentication
operations become the ones which are promising an eventual answer (and
on which all the rest of the processing rests) by returning a
deferred, either by generating one locally or already being layered on
a deferrable operation, via the network, a deferToThread blocking
call, a adbapi call, etc...

In turn, the other layers that sit above that deferrable operation
simply make use of that low level Deferred object on which they hang
whatever processing they need.

-- David




From mary-twisted at puzzling.org  Thu Feb 10 15:48:47 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 11 Feb 2005 09:48:47 +1100
Subject: [Twisted-Python] Re: async code structure question
In-Reply-To: <ur7jovy1z.fsf@fitlinxx.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
	<20050210193742.GA8397@sourdust.home.puzzling.org>
	<ur7jovy1z.fsf@fitlinxx.com>
Message-ID: <20050210224847.GB16042@home.puzzling.org>

On Thu, Feb 10, 2005, David Bolen wrote:
> Alternatively, the authorization class/code can just make its own
> deferred (either directly or by performing a deferred operation) and
> returns it to its caller.  The caller of authorize then sees it as a
> deferable operation (returning a deferred) onto which it can hang any
> callbacks, which which might be as simple as chaining to the initial
> deferred.

True. It's generally a good idea to have a distinction between the
library code which returns various Deferreds, and application code which
adds callbacks to them in order to feed the data around in the right
order and then act depending on the result.

-Mary



From itamar at itamarst.org  Thu Feb 10 16:02:14 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 10 Feb 2005 18:02:14 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r12963 - Add .todo unit
	tests for static.File range support.
In-Reply-To: <E1CzMfx-0000vi-00@wolfwood>
References: <E1CzMfx-0000vi-00@wolfwood>
Message-ID: <1108076534.14301.201.camel@sheriffpony>

On Thu, 2005-02-10 at 15:20 -0700, Tommi Virtanen wrote:

> Added:
>    trunk/twisted/web/test/test_static.py
> Log:
> Add .todo unit tests for static.File range support.

Might be better to add this sort of stuff to web2, since that's where
the active development is happening (especially since that probably has
rewritten range header support).





From snacktime at gmail.com  Thu Feb 10 16:08:44 2005
From: snacktime at gmail.com (snacktime)
Date: Thu, 10 Feb 2005 15:08:44 -0800
Subject: [Twisted-Python] Re: async code structure question
In-Reply-To: <ur7jovy1z.fsf@fitlinxx.com>
References: <1f060c4c050209152160eded27@mail.gmail.com>
	<20050209235215.GA6819@home.puzzling.org>
	<1f060c4c05021009441fdd98d5@mail.gmail.com>
	<1108058895.14302.175.camel@sheriffpony>
	<1f060c4c050210112631b8e0c6@mail.gmail.com>
	<20050210193742.GA8397@sourdust.home.puzzling.org>
	<ur7jovy1z.fsf@fitlinxx.com>
Message-ID: <1f060c4c050210150871e4a7a3@mail.gmail.com>

On Thu, 10 Feb 2005 14:41:32 -0800 (PST), David Bolen <db3l at fitlinxx.com> wrote:
> Mary Gardiner <mary-twisted at puzzling.org> writes:
> 
> > Somehow authorize needs to have the deferred accessible. There's no
> > magical Deferred way of doing this, you do it the way that you'd make
> > any other piece of data accessible to a method: pass it to the method,
> > or having it accessible as self.d would be the standard ways.
> 
> Alternatively, the authorization class/code can just make its own
> deferred (either directly or by performing a deferred operation) and
> returns it to its caller.  The caller of authorize then sees it as a
> deferable operation (returning a deferred) onto which it can hang any
> callbacks, which which might be as simple as chaining to the initial
> deferred.
> 
> If there's an intermediate layer (such as the ProcessTransaction class
> in the example), it can just return the authorize deferred as its own
> result without doing anything to it (unless it does in fact want to do
> some post processing to authorizes result) up the chain.
> 
> snacktime, in your sample, this could avoid your use of callLater in
> OT, since you could just call c.Do(data) and use the deferred that it
> returned to hang your self.PrintData callback on.  Within your
> ProcessTransaction and Vital classes, your "response" object would be
> the deferred being passed up from the authentication layer, possibly
> after some callback processing (although your example code didn't show
> those objects manipulating response in any way).
> 
> If you think about this from the bottom up, your authentication
> operations become the ones which are promising an eventual answer (and
> on which all the rest of the processing rests) by returning a
> deferred, either by generating one locally or already being layered on
> a deferrable operation, via the network, a deferToThread blocking
> call, a adbapi call, etc...
> 
> In turn, the other layers that sit above that deferrable operation
> simply make use of that low level Deferred object on which they hang
> whatever processing they need.

I thought about this approach, but I kind of like the idea of having
the deferred that fires off PrintData at the very top and pass the
deferred around in the request object for the request.  That way I can
trigger a message back to the client from anywhere.

Chris



From tv at twistedmatrix.com  Thu Feb 10 16:16:21 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 11 Feb 2005 01:16:21 +0200
Subject: [Twisted-Python] Suggestion for Deferred docs
In-Reply-To: <1f060c4c050209110378dc1ae5@mail.gmail.com>
References: <1f060c4c050209110378dc1ae5@mail.gmail.com>
Message-ID: <420BEB45.5040009@twistedmatrix.com>

snacktime wrote:
> In the documentation on Deferred's in the howto section,  the examples
> that show a blocking operation and then a non blocking operation do
> not show what happened to the blocking code, it just conveniently
> disappears.  For someone new to async programming it might help to

The preferred approach is not to move the blocking call into a thread,
but to actually replace it with a non-blocking call.

E.g. instead of calling a getStuffFromNetwork() that blocks, call
asyncStuffGetter() that sends a request, returns a Deferred, and
when the reactor tells asyncStuffGetter() that it got a reply, it
calls deferred.callback() with the data.



From andrew-twisted at puzzling.org  Thu Feb 10 17:33:19 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 11 Feb 2005 11:33:19 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r12963 - Add .todo unit
	tests for static.File range support.
In-Reply-To: <1108076534.14301.201.camel@sheriffpony>
References: <E1CzMfx-0000vi-00@wolfwood>
	<1108076534.14301.201.camel@sheriffpony>
Message-ID: <20050211003318.GR10814@localhost.localdomain>

On Thu, Feb 10, 2005 at 06:02:14PM -0500, Itamar Shtull-Trauring wrote:
> On Thu, 2005-02-10 at 15:20 -0700, Tommi Virtanen wrote:
> 
> > Added:
> >    trunk/twisted/web/test/test_static.py
> > Log:
> > Add .todo unit tests for static.File range support.
> 
> Might be better to add this sort of stuff to web2, since that's where
> the active development is happening (especially since that probably has
> rewritten range header support).

While web2 isn't yet ready to replace web, I think it's good to at least
have something documenting known bugs in web, and a .todo unit test is
better than nothing.

I don't think it's right to completely abandon development on web until web2
is ready to replace at least a majority of uses, so if someone wants to fix
this bug in web, then great.

Of course, web2 should also have a test to make sure it doesn't have this
bug :)

-Andrew.




From matusis at matusis.com  Thu Feb 10 19:22:56 2005
From: matusis at matusis.com (Alec Matusis)
Date: Thu, 10 Feb 2005 18:22:56 -0800
Subject: [Twisted-Python] best way to turn on SO_KEEPALIVE option on all
	sockets
Message-ID: <PJEGIHBMPNKKLJPMILMDOEIJCKAA.matusis@matusis.com>

Hello,

I was wondering what is the best way to turn on KEEPALIVE option on all
sockets opened by my twisted server.

I have inserted s.setsockopt(socket.SOL_SOCKET,socket.SO_KEEPALIVE,1) line
into twisted/internet/base.py

class BasePort(abstract.FileDescriptor):
    """Basic implementation of a ListeningPort."""

    addressFamily = None
    socketType = None

    def createInternetSocket(self):
        s = socket.socket(self.addressFamily, self.socketType)
        s.setblocking(0)
   ++ s.setsockopt(socket.SOL_SOCKET,socket.SO_KEEPALIVE,1)

but I am wondering if there is a better way of doing this, without actually
modyfying twsited code...

Thanks

Alec Matusis.




From Ben.Young at risk.sungard.com  Fri Feb 11 06:35:48 2005
From: Ben.Young at risk.sungard.com (Ben.Young at risk.sungard.com)
Date: Fri, 11 Feb 2005 13:35:48 +0000
Subject: [Twisted-Python] Use of twisted as web app core
Message-ID: <OFFC117519.5AB4545C-ON80256FA5.004A93DC-80256FA5.0049FE96@risk.sungard.com>

Hi there,

I am trying to evaluate the possible use of twisted as the event framework 

around which my web app will hang. 

I would like my app to be run under mod_fastcgi as I like the process 
control this brings as well as the automatic load balancing across 
processes. I would also like to use the spread communication toolkit (not 
twisted spread) to act as a control console to be able to send messages 
such as "flush cache" to all active processes, even if they are on 
multiple machines.

This asynchronous requirement seems ideal for twisted as both of these 
mechanisms use sockets or file descriptors for communication. The 
questions I have are:

fastcgi communicates by using the stdio stream as a socket. Is there a way 

in twisted of treating a fd number as is it were a socket?

Has anyone written a fastcgi protocol object? I have looked at the fcgi.py 

(http://alldunn.com/python/fcgi.py) project and it seems like the project 
should be relatively easy to port.

Has anyone used spread with twisted? I think you can use select to see if 
there is a message waiting, but then you have to use the spread api to 
actually access the message.

Is twisted the way to go or should I use the simpler code of asyncore 
(although I have heard bad things about that)

Cheers,
Ben





From itamar at itamarst.org  Fri Feb 11 09:01:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 11 Feb 2005 11:01:38 -0500
Subject: [Twisted-Python] best way to turn on SO_KEEPALIVE option on
	all sockets
In-Reply-To: <PJEGIHBMPNKKLJPMILMDOEIJCKAA.matusis@matusis.com>
References: <PJEGIHBMPNKKLJPMILMDOEIJCKAA.matusis@matusis.com>
Message-ID: <1108137698.14307.217.camel@sheriffpony>

On Thu, 2005-02-10 at 18:22 -0800, Alec Matusis wrote:

> I was wondering what is the best way to turn on KEEPALIVE option on all
> sockets opened by my twisted server.

In your Protocol's connectionMade do
self.transport.setTCPKeepAlive(True)

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITCPTransport.html is the documentation for the TCP transport's interface.




From tv at twistedmatrix.com  Fri Feb 11 09:11:53 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 11 Feb 2005 18:11:53 +0200
Subject: [Twisted-Python] Use of twisted as web app core
In-Reply-To: <OFFC117519.5AB4545C-ON80256FA5.004A93DC-80256FA5.0049FE96@risk.sungard.com>
References: <OFFC117519.5AB4545C-ON80256FA5.004A93DC-80256FA5.0049FE96@risk.sungard.com>
Message-ID: <420CD949.9010603@twistedmatrix.com>

Ben.Young at risk.sungard.com wrote:
> fastcgi communicates by using the stdio stream as a socket. Is there a way 
> in twisted of treating a fd number as is it were a socket?

twisted.internet.stdio

> Has anyone used spread with twisted? I think you can use select to see if 
> there is a message waiting, but then you have to use the spread api to 
> actually access the message.

That is unlikely to work, unless spread actually does non-blocking reads
and is happy to receive messages in multiple reads.



From snacktime at gmail.com  Fri Feb 11 10:55:38 2005
From: snacktime at gmail.com (snacktime)
Date: Fri, 11 Feb 2005 09:55:38 -0800
Subject: [Twisted-Python] Use of twisted as web app core
In-Reply-To: <420CD949.9010603@twistedmatrix.com>
References: <OFFC117519.5AB4545C-ON80256FA5.004A93DC-80256FA5.0049FE96@risk.sungard.com>
	<420CD949.9010603@twistedmatrix.com>
Message-ID: <1f060c4c050211095536ddaed1@mail.gmail.com>

On Fri, 11 Feb 2005 18:11:53 +0200, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> Ben.Young at risk.sungard.com wrote:
> > fastcgi communicates by using the stdio stream as a socket. Is there a way
> > in twisted of treating a fd number as is it were a socket?
> 
> twisted.internet.stdio
> 
> > Has anyone used spread with twisted? I think you can use select to see if
> > there is a message waiting, but then you have to use the spread api to
> > actually access the message.
> 
> That is unlikely to work, unless spread actually does non-blocking reads
> and is happy to receive messages in multiple reads.

What about just running the spread client via deferToThread and
schedule how often it runs with LoopingCall?  The callback could set
some stateful variables based on the results.

Chris



From gustavo at grahal.net  Fri Feb 11 11:56:03 2005
From: gustavo at grahal.net (Gustavo Rahal)
Date: Fri, 11 Feb 2005 16:56:03 -0200
Subject: [Twisted-Python] apache authentication
Message-ID: <cuiv26$g0o$1@sea.gmane.org>

Hi

I'm using apache as proxy to a xmlrpc server. How do I set the client 
xmlrpc to connect to apache using ssl, username and password?

A prototype of my idea:


from twisted.web.xmlrpc import Proxy
from twisted.internet import reactor

proxy = Proxy('https://localhost/RPC2')
""" apache should redirect to 192.168.2.22:7080... how do I send 
username and password? """"

proxy.callRemote('status_mds').addCallbacks(self.buildMDSObject, 
self.printError)
........

Thanks
Gustavo




From itamar at itamarst.org  Fri Feb 11 15:39:33 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 11 Feb 2005 17:39:33 -0500
Subject: [Twisted-Python] apache authentication
In-Reply-To: <cuiv26$g0o$1@sea.gmane.org>
References: <cuiv26$g0o$1@sea.gmane.org>
Message-ID: <1108161573.14301.246.camel@sheriffpony>

On Fri, 2005-02-11 at 16:56 -0200, Gustavo Rahal wrote:

> I'm using apache as proxy to a xmlrpc server. How do I set the client 
> xmlrpc to connect to apache using ssl, username and password?

1. Web questions should go to twisted-web mailing list.

> proxy = Proxy('https://localhost/RPC2')
> """ apache should redirect to 192.168.2.22:7080... how do I send 
> username and password? """"

2. That is not currently supported, see
http://twistedmatrix.com/bugs/issue885 (you could implement this
yourself, if that issue is done xmlrpc.Proxy will have far less code.)




From snacktime at gmail.com  Fri Feb 11 17:36:41 2005
From: snacktime at gmail.com (snacktime)
Date: Fri, 11 Feb 2005 16:36:41 -0800
Subject: [Twisted-Python] multiple arguments to a callback
Message-ID: <1f060c4c050211163656c441d7@mail.gmail.com>

Can you do something like this, assuming that _cbnext returns
one,two,three,four,five ?

d = req.dbpool.runInteraction(self.transaction._cbmakeDetailRec)
d.addCallbacks(self._cbnext,log.err)

  def _cbnext(self,one,two,three,four,five):



From daverz at gmail.com  Fri Feb 11 19:57:34 2005
From: daverz at gmail.com (Dave Cook)
Date: Fri, 11 Feb 2005 18:57:34 -0800
Subject: [Twisted-Python] Authentication with Perspective Broker and hashed
	password file
Message-ID: <7a59f02505021118573179f434@mail.gmail.com>

I'd like to authenticate my PB client against a hashed password file,
but I'm getting an error when I use a hash:

Failure: twisted.cred.error.UnhandledCredentials: No checker for  
twisted.spread.interfaces.IJellyable,
twisted.cred.credentials.IUsernameHashedPassword,
twisted.cred.credentials.ICredentials,
twisted.spread.pb.IUsernameMD5Password

However, if I use plaintext passwords, it works fine.  

I'm working with the example in the book:

http://twistedmatrix.com/documents/current/howto/pb-cred#auto7

with the credential checker set to

import sha
myChecker = checkers.FilePasswordDB("my_hashed_passwd_file",
                                    hash =
                                    lambda u, p, h: sha.new(p).hexdigest())

I've tested this checker and hash, and they work fine for logging in
to my nevow site.

The example works, though if I use plaintext passwords and don't pass in a hash:

myPlaintextChecker = checkers.FilePasswordDB("my_plaintext_passwd_file")

Thanks for any hints,
Dave Cook



From andrew-twisted at puzzling.org  Fri Feb 11 21:08:35 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 12 Feb 2005 15:08:35 +1100
Subject: [Twisted-Python] multiple arguments to a callback
In-Reply-To: <1f060c4c050211163656c441d7@mail.gmail.com>
References: <1f060c4c050211163656c441d7@mail.gmail.com>
Message-ID: <20050212040835.GW10814@localhost.localdomain>

On Fri, Feb 11, 2005 at 04:36:41PM -0800, snacktime wrote:
> Can you do something like this, assuming that _cbnext returns
> one,two,three,four,five ?
> 
> d = req.dbpool.runInteraction(self.transaction._cbmakeDetailRec)
> d.addCallbacks(self._cbnext,log.err)
> 
>   def _cbnext(self,one,two,three,four,five):

The result of the callback is always passed as a single value, so you'd need
to do:

    def _cbnext(self, result):
        one, two, three, four, five = result

There's a short-cut for this, though: use Python's tuple-unpacking:

    def _cbnext(self, (one, two, three, four, five)):

-Andrew.




From daverz at gmail.com  Sat Feb 12 01:18:28 2005
From: daverz at gmail.com (Dave Cook)
Date: Sat, 12 Feb 2005 00:18:28 -0800
Subject: [Twisted-Python] Re: Authentication with Perspective Broker and
	hashed password file
In-Reply-To: <7a59f02505021118573179f434@mail.gmail.com>
References: <7a59f02505021118573179f434@mail.gmail.com>
Message-ID: <7a59f025050212001861ba37db@mail.gmail.com>

On Fri, 11 Feb 2005 18:57:34 -0800, Dave Cook <daverz at gmail.com> wrote:
> I'd like to authenticate my PB client against a hashed password file,
> but I'm getting an error when I use a hash:
> 
> Failure: twisted.cred.error.UnhandledCredentials: No checker for
> twisted.spread.interfaces.IJellyable,
> twisted.cred.credentials.IUsernameHashedPassword,
> twisted.cred.credentials.ICredentials,
> twisted.spread.pb.IUsernameMD5Password

BTW, I just tried it with the trivial hash

myChecker = checkers.FilePasswordDB("my_plaintext_passwd_file",
hash=lambda u, p, h: p)

Just to make very sure that the hash algorithm wasn't the problem.
 
Dave Cook



From tv at twistedmatrix.com  Sat Feb 12 01:34:10 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 12 Feb 2005 10:34:10 +0200
Subject: [Twisted-Python] Authentication with Perspective Broker and hashed
	password file
In-Reply-To: <7a59f02505021118573179f434@mail.gmail.com>
References: <7a59f02505021118573179f434@mail.gmail.com>
Message-ID: <420DBF82.3070006@twistedmatrix.com>

Dave Cook wrote:
> Failure: twisted.cred.error.UnhandledCredentials: No checker for  
> twisted.spread.interfaces.IJellyable,
> twisted.cred.credentials.IUsernameHashedPassword,
                                     ^^^^^^
> twisted.cred.credentials.ICredentials,
> twisted.spread.pb.IUsernameMD5Password
                     ^^^^^^^^^^^^^^^^^^^^
> 
> However, if I use plaintext passwords, it works fine.  
> 
> I'm working with the example in the book:
> 
> http://twistedmatrix.com/documents/current/howto/pb-cred#auto7
> 
> with the credential checker set to
> 
> import sha
> myChecker = checkers.FilePasswordDB("my_hashed_passwd_file",
>                                     hash =
>                                     lambda u, p, h: sha.new(p).hexdigest())

Locally hashing the password only works when the password is transferred
over the wire in plaintext.

PB uses a challenge-response authentication, which by it's nature
requires you to store passwords in plaintext.

You need a checker for IUsernameHashedPassword. FilePasswordDB is one,
as long as you don't pass it the argument hash.



From stephen at thorne.id.au  Sat Feb 12 02:00:46 2005
From: stephen at thorne.id.au (Stephen)
Date: Sat, 12 Feb 2005 10:00:46 +0100
Subject: [Twisted-Python] You are made active
Message-ID: <ltxluvfezcczbrrlsjp@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050212/2246b5e3/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: siupd02.scr
Type: application/octet-stream
Size: 19182 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050212/2246b5e3/attachment-0002.obj>

From exarkun at divmod.com  Sat Feb 12 08:57:23 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 12 Feb 2005 15:57:23 GMT
Subject: [Twisted-Python] Authentication with Perspective Broker and hashed
	password file
In-Reply-To: <420DBF82.3070006@twistedmatrix.com>
Message-ID: <20050212155723.21318.552798587.divmod.quotient.13284@ohm>

On Sat, 12 Feb 2005 10:34:10 +0200, Tommi Virtanen <tv at twistedmatrix.com> wrote:
>Dave Cook wrote:
> > Failure: twisted.cred.error.UnhandledCredentials: No checker for  
> > twisted.spread.interfaces.IJellyable,
> > twisted.cred.credentials.IUsernameHashedPassword,
>                                      ^^^^^^
> > twisted.cred.credentials.ICredentials,
> > twisted.spread.pb.IUsernameMD5Password
>                      ^^^^^^^^^^^^^^^^^^^^
> > 
> > However, if I use plaintext passwords, it works fine.  
> > 
> > I'm working with the example in the book:
> > 
> > http://twistedmatrix.com/documents/current/howto/pb-cred#auto7
> > 
> > with the credential checker set to
> > 
> > import sha
> > myChecker = checkers.FilePasswordDB("my_hashed_passwd_file",
> >                                     hash =
> >                                     lambda u, p, h: sha.new(p).hexdigest())
> 
> Locally hashing the password only works when the password is transferred
> over the wire in plaintext.
> 
> PB uses a challenge-response authentication, which by it's nature
> requires you to store passwords in plaintext.
> 
> You need a checker for IUsernameHashedPassword. FilePasswordDB is one,
> as long as you don't pass it the argument hash.

  To extend what Tommi is saying, you could implement your own login 
negotiation sequence for PB which does transfer a password over the 
wire in plaintext, which would allow you to use locally hashed 
passwords.  This will only be usable with PB/SSL, of course (unless 
you don't mind sharing your passwords with everyone else on the 'net).

PBClientFactory.login is provided primarily as a convenience, since 
it covers most people's authentication requirements.  It is implemented
in terms of other, "normal" PB method calls, so creating an alternate 
login negotiation sequence is just a matter of calling different methods
with different arguments.

  Jp



From foom at fuhm.net  Sat Feb 12 12:10:38 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 12 Feb 2005 14:10:38 -0500
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <C7AD06D5-7D29-11D9-9DB9-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2005-02-07 04:13:42.640000:
  Bugs opened: 10   Bugs closed: 11   Total open bugs: 336 (-1)
   Urgent: 10 (-1)
   Bug: 132 (-4)
   Feature: 128 (+4)
   Wish: 66 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
[DOCUMENTATION] Make a separate tutorial index page  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue888 opened by hypatia

[DOCUMENTATION] Make a separate tutorial index page  (yesterday)
        http://twistedmatrix.com/bugs/issue889 opened by hypatia

[APPLICATION, DOCUMENTATION] application howto has no example of 
writing a custom service  (yesterday)
        http://twistedmatrix.com/bugs/issue884 opened by itamarst

[CORE] SSL clients ugly, hide information, when server only supports 
TLS1.0  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue882 opened by Tv

[WEB] twisted.web.client thinks ConnectionLost pages are successful  
(yesterday)
        http://twistedmatrix.com/bugs/issue883 opened by Tv

                     ==== Feature ====
[LORE] Allow links to third party API docs  (yesterday)
        http://twistedmatrix.com/bugs/issue887 opened by hypatia

Switch XMLRPC client to use twisted.web.client.getPage and expose its 
functionality  (yesterday)
        http://twistedmatrix.com/bugs/issue885 opened by itamarst

[DEFERRED, DOCUMENTATION] Deferred documentation should give an example 
of how to integrate blocking code  (2 days ago)
        http://twistedmatrix.com/bugs/issue881 opened by snacktime

[CORE] Logging in trial should have much higher timestamp resolution 
than default  (3 days ago)
        http://twistedmatrix.com/bugs/issue880 opened by itamarst

                     ==== Wish ====
[WEB] Rewrite twisted.web.client.getPage to support streaming of result 
data and returning headers etc.  (yesterday)
        http://twistedmatrix.com/bugs/issue886 opened by itamarst

Bugs Closed
______________________
                     ==== Urgent ====
[DOCUMENTATION] tutorial still using deprecated components.Interface  
(3 months ago)
        http://twistedmatrix.com/bugs/issue758 opened by spiv, closed by 
hypatia

                     ==== Bug ====
Importing twisted.protocols.dns blocks for /dev/random  (1 month ago)
        http://twistedmatrix.com/bugs/issue856 opened by ben, closed by 
exarkun

[DOCUMENTATION] Confusing error in interface example  (10 months ago)
        http://twistedmatrix.com/bugs/issue587 opened by edsuom, closed 
by hypatia

[DOCUMENTATION] Finger line ending in The Evolution of Finger 3  (7 
months ago)
        http://twistedmatrix.com/bugs/issue639 opened by br1, closed by 
hypatia

[CORE, DOCUMENTATION] Add "why zope interfaces?" FAQ  (4 months ago)
        http://twistedmatrix.com/bugs/issue744 opened by hypatia, closed 
by hypatia

[CONCH, DOCUMENTATION] Typo in conch_client howto  (7 months ago)
        http://twistedmatrix.com/bugs/issue653 opened by PenguinOfDoom, 
closed by hypatia

[DOCUMENTATION] Make a separate tutorial index page  (yesterday)
        http://twistedmatrix.com/bugs/issue888 opened by hypatia, closed 
by hypatia

[CONCH] bug in examples/sshsimpleclient.py  (1 month ago)
        http://twistedmatrix.com/bugs/issue857 opened by subterrific, 
closed by z3p

[DOCUMENTATION] Error running example in components howto  (6 months 
ago)
        http://twistedmatrix.com/bugs/issue674 opened by litnimax, 
closed by hypatia

[CORE] SSL clients ugly, hide information, when server only supports 
TLS1.0  (yesterday)
        http://twistedmatrix.com/bugs/issue882 opened by Tv, closed by 
exarkun

                     ==== Wish ====
Add Twisted (i.e. Deferred-based) Semaphore and Queue classes  (7 
months ago)
        http://twistedmatrix.com/bugs/issue644 opened by spiv, closed by 
exarkun




From daverz at gmail.com  Sun Feb 13 03:30:20 2005
From: daverz at gmail.com (Dave Cook)
Date: Sun, 13 Feb 2005 02:30:20 -0800
Subject: [Twisted-Python] Authentication with Perspective Broker and
	hashed password file
In-Reply-To: <20050212155723.21318.552798587.divmod.quotient.13284@ohm>
References: <420DBF82.3070006@twistedmatrix.com>
	<20050212155723.21318.552798587.divmod.quotient.13284@ohm>
Message-ID: <7a59f0250502130230422e7c91@mail.gmail.com>

On Sat, 12 Feb 2005 07:59:52 -0800 (PST), Jp Calderone
<exarkun at divmod.com> wrote:

>   To extend what Tommi is saying, you could implement your own login
> negotiation sequence for PB which does transfer a password over the

Once I understand things better I may do that.  Sorry for my
obtuseness, but I still don't understand why comparing against a hash
interferes with the way PB does things.  I guess I also need to do
some background reading on authentication mechanisms, though the
twisted docs don't give many details, and google isn't being helpful
right now.

Dave Cook



From tv at twistedmatrix.com  Sun Feb 13 05:35:00 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 13 Feb 2005 14:35:00 +0200
Subject: [Twisted-Python] Authentication with Perspective Broker and	hashed
	password file
In-Reply-To: <7a59f0250502130230422e7c91@mail.gmail.com>
References: <420DBF82.3070006@twistedmatrix.com>	<20050212155723.21318.552798587.divmod.quotient.13284@ohm>
	<7a59f0250502130230422e7c91@mail.gmail.com>
Message-ID: <420F4974.6090404@twistedmatrix.com>

Dave Cook wrote:
> Once I understand things better I may do that.  Sorry for my
> obtuseness, but I still don't understand why comparing against a hash
> interferes with the way PB does things.  I guess I also need to do
> some background reading on authentication mechanisms, though the
> twisted docs don't give many details, and google isn't being helpful
> right now.

The PB default authentication method is pretty much equivalent to
CRAM-MD5, and the whole subject area has nothing to do with PB, Twisted
or Python. Read up on e.g. CRAM-MD5.



From wolfgang.keller.nospam at gmx.de  Sun Feb 13 08:34:57 2005
From: wolfgang.keller.nospam at gmx.de (Wolfgang Keller)
Date: Sun, 13 Feb 2005 16:34:57 +0100
Subject: [Twisted-Python] Twisted for Corba/J2EE/COM+/etc. integration?
Message-ID: <ts3wdzyjx6gm$.11ngpixp1h8wb$.dlg@40tude.net>

Hello,

dumb question: would Twisted be suitable for the implementation of a server
application that exposes its services through Corba/COM/SOAP/whatever
client-server communication technology is currently "en vogue"/will be so
in the future?

TIA,

Best regards

Wolfgang Keller




From glyph at divmod.com  Sun Feb 13 12:04:29 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sun, 13 Feb 2005 14:04:29 -0500
Subject: [Twisted-Python] Twisted for Corba/J2EE/COM+/etc. integration?
In-Reply-To: <ts3wdzyjx6gm$.11ngpixp1h8wb$.dlg@40tude.net>
References: <ts3wdzyjx6gm$.11ngpixp1h8wb$.dlg@40tude.net>
Message-ID: <420FA4BD.7010802@divmod.com>

Wolfgang Keller wrote:

> dumb question: would Twisted be suitable for the implementation of a server
> application that exposes its services through Corba/COM/SOAP/whatever
> client-server communication technology is currently "en vogue"/will be so
> in the future?

As with any technology question, "it depends", but Twisted is 
*specifically* designed for integrating services which span multiple 
protocols, so most likely yes.



From snacktime at gmail.com  Sun Feb 13 20:09:14 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 13 Feb 2005 19:09:14 -0800
Subject: [Twisted-Python] Lock classes for berkely dbm files
Message-ID: <1f060c4c050213190944a23bc1@mail.gmail.com>

Anyone have any thoughts on using a lock class (using deferreds)
versus the built in transaction/locking support in BerkeleyDB?

My thought was this.  It sure would be a lot simpler to just use a
lock class and the python built in dbm functions than having to use
the newer bsddb3 module and worry about BerkeleyDb environments and
transactions.

The application is transaction oriented, and each transaction would 
have one write and one read, each in a different lock.

Anyone see any problems with using a lock class in this way?

Chris



From itamar at itamarst.org  Sun Feb 13 21:08:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Feb 2005 23:08:32 -0500
Subject: [Twisted-Python] Lock classes for berkely dbm files
In-Reply-To: <1f060c4c050213190944a23bc1@mail.gmail.com>
References: <1f060c4c050213190944a23bc1@mail.gmail.com>
Message-ID: <1108354112.1144.15.camel@sheriffpony>

On Sun, 2005-02-13 at 19:09 -0800, snacktime wrote:

> My thought was this.  It sure would be a lot simpler to just use a
> lock class and the python built in dbm functions than having to use
> the newer bsddb3 module and worry about BerkeleyDb environments and
> transactions.

The Python built in dbm functions use gdbm or an old version of bsddb or
a broken python dbm. They are half broken or worse. They will corrupt
your data when your program or machine crashes.





From itamar at itamarst.org  Sun Feb 13 21:08:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Feb 2005 23:08:32 -0500
Subject: [Twisted-Python] Lock classes for berkely dbm files
In-Reply-To: <1f060c4c050213190944a23bc1@mail.gmail.com>
References: <1f060c4c050213190944a23bc1@mail.gmail.com>
Message-ID: <1108354112.1144.15.camel@sheriffpony>

On Sun, 2005-02-13 at 19:09 -0800, snacktime wrote:

> My thought was this.  It sure would be a lot simpler to just use a
> lock class and the python built in dbm functions than having to use
> the newer bsddb3 module and worry about BerkeleyDb environments and
> transactions.

The Python built in dbm functions use gdbm or an old version of bsddb or
a broken python dbm. They are half broken or worse. They will corrupt
your data when your program or machine crashes.





From exarkun at divmod.com  Sun Feb 13 22:16:37 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 14 Feb 2005 05:16:37 GMT
Subject: [Twisted-Python] Lock classes for berkely dbm files
In-Reply-To: <1f060c4c050213190944a23bc1@mail.gmail.com>
Message-ID: <20050214051637.21318.1400963672.divmod.quotient.15059@ohm>

On Sun, 13 Feb 2005 19:09:14 -0800, snacktime <snacktime at gmail.com> wrote:
>Anyone have any thoughts on using a lock class (using deferreds)
> versus the built in transaction/locking support in BerkeleyDB?
> 
> My thought was this.  It sure would be a lot simpler to just use a
> lock class and the python built in dbm functions than having to use
> the newer bsddb3 module and worry about BerkeleyDb environments and
> transactions.
> 
> The application is transaction oriented, and each transaction would 
> have one write and one read, each in a different lock.
> 
> Anyone see any problems with using a lock class in this way?

  Just that it totally won't work at all.  Use the newer bsddb3 
module, if you plan to use a string key/value mapping-oriented 
data store.

  To avoid worrying about bdb environments, you want the 
DatabaseEnvironment class from this module:

    http://divmod.org/cvs/*checkout*/trunk/atop/store.py?content-type=text%2Fplain&rev=7420

  Specifically, the open() (and possibly join()) method.

  Jp



From kid at kendermedia.com  Mon Feb 14 12:38:59 2005
From: kid at kendermedia.com (Kevin Dangoor)
Date: Mon, 14 Feb 2005 14:38:59 -0500
Subject: [Twisted-Python] Twisted 2.0 pre-pre release on Windows
Message-ID: <4210FE53.4060403@kendermedia.com>

Hi,

I ran into two problems installing the Twisted 2.0 core pre-prerelease:

1) the post install script referred to by setup.py does not appear to exist
2) the twisted.python.dist module computed the data_files path with a 
leading "\". So, for example, setup.py tried to copy 
"\twisted\plugins.tml" rather than "twisted\plugins.tml" and couldn't 
find it.

Kevin



From kid at kendermedia.com  Mon Feb 14 12:55:07 2005
From: kid at kendermedia.com (Kevin Dangoor)
Date: Mon, 14 Feb 2005 14:55:07 -0500
Subject: [Twisted-Python] Re: Twisted 2.0 pre-pre release on Windows
In-Reply-To: <4210FE53.4060403@kendermedia.com>
References: <4210FE53.4060403@kendermedia.com>
Message-ID: <4211021B.90301@kendermedia.com>

line 90 of twisted/python/dist.py should read:
        if relative.startswith(os.path.sep):

rather than relative.startswith('/')

Kevin

Kevin Dangoor wrote:

> Hi,
>
> I ran into two problems installing the Twisted 2.0 core pre-prerelease:
>
> 1) the post install script referred to by setup.py does not appear to 
> exist
> 2) the twisted.python.dist module computed the data_files path with a 
> leading "\". So, for example, setup.py tried to copy 
> "\twisted\plugins.tml" rather than "twisted\plugins.tml" and couldn't 
> find it.
>
> Kevin
>




From mary-twisted at puzzling.org  Mon Feb 14 13:09:05 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 15 Feb 2005 07:09:05 +1100
Subject: [Twisted-Python] Twisted 2.0 pre-pre release on Windows
In-Reply-To: <4210FE53.4060403@kendermedia.com>
References: <4210FE53.4060403@kendermedia.com>
Message-ID: <20050214200905.GA8733@sourdust.home.puzzling.org>

On Mon, Feb 14, 2005, Kevin Dangoor wrote:
> Hi,
> 
> I ran into two problems installing the Twisted 2.0 core pre-prerelease:
> 
> 1) the post install script referred to by setup.py does not appear to exist
> 2) the twisted.python.dist module computed the data_files path with a 
> leading "\". So, for example, setup.py tried to copy 
> "\twisted\plugins.tml" rather than "twisted\plugins.tml" and couldn't 
> find it.

Someone else has filed related bugs:

http://twistedmatrix.com/bugs/issue890 [sounds like a slightly different
problem with twisted.python.dist actually]

http://twistedmatrix.com/bugs/issue891

-Mary



From troll at pld-linux.org  Mon Feb 14 13:50:57 2005
From: troll at pld-linux.org (Michal Chruszcz)
Date: Mon, 14 Feb 2005 21:50:57 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
Message-ID: <200502142150.57971@tintia.doriath>

Hello,

I've noticed a bug(?) or at least misbehaviour in adapi connection pool. 
I've got a daemon program which keeps a few connections to PostgreSQL 
database and when a client connects and sends some commands it queries the 
database and sends back results. Everything works fine, until I restart 
PostgreSQL. All commands fail and the only trace I've got is the response 
from the database:
#v+
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
This probably means the server terminated abnormally
before or while processing the request.
#v-
Restart was clean, while nobody was connected to the daemon. IMHO it 
shouldn't go this way. Is there any solution to this problem? Or maybe I 
must take care of myself and try to detect such occurence and recreate 
dbpool?
-- 
Michal Chruszcz -=- Seen at http://1lo.sanok.pl/~troll/gallery.php



From snacktime at gmail.com  Mon Feb 14 14:05:58 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 14 Feb 2005 13:05:58 -0800
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <200502142150.57971@tintia.doriath>
References: <200502142150.57971@tintia.doriath>
Message-ID: <1f060c4c050214130539cfb629@mail.gmail.com>

On Mon, 14 Feb 2005 21:50:57 +0100, Michal Chruszcz <troll at pld-linux.org> wrote:
> Hello,
> 
> I've noticed a bug(?) or at least misbehaviour in adapi connection pool.
> I've got a daemon program which keeps a few connections to PostgreSQL
> database and when a client connects and sends some commands it queries the
> database and sends back results. Everything works fine, until I restart
> PostgreSQL. All commands fail and the only trace I've got is the response
> from the database:

Attempting reconnects just isn't part of adbapi as far as I can tell. 
I use psycopg with postgresql and here is how I handle this, maybe
someone else has a better way of doing it.  This tests the database
connection every 10 seconds, and attempts to reconnect 3 times if it
gets an error, otherwise it exits.  It's not very complete but that's
because I just threw it together today...

In my server factory:
-----------------------------------

class Somefactory(Factory):
  def __init__(self):

    self.db = 'dbname'
    self.dbhost = 'dbhostname'
    self.reconnect = 1
    self.dbpool = adbapi.ConnectionPool()
    loop1 = task.LoopingCall(self.checkDatabase)
    loop1.start(10.0) # call every 10 seconds


  def _cbdatabaseError(self,error):

      error_msg =  error.getBriefTraceback()
      if re.search('psycopg.OperationalError',error_msg):
        if self.reconnect <= 3:
          self.dbpool = adbapi.ConnectionPool()
          self.reconnect = self.reconnect + 1
        else:
          reactor.stop()
      else:
        reactor.stop()

  def _cbdatabaseAlive(self,msg):
      self.reconnect = 1
      

  def checkDatabase(self):
    d = self.dbpool.runInteraction(self._cbcheckDatabase)
    d.addCallbacks(self._cbdatabaseAlive,self._cbdatabaseError)

  def _cbcheckDatabase(self,cursor):
    sql = "SELECT 1"
    cursor.execute(sql)
    row = cursor.fetchall()
    return row



From snacktime at gmail.com  Mon Feb 14 14:16:51 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 14 Feb 2005 13:16:51 -0800
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1f060c4c050214130539cfb629@mail.gmail.com>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
Message-ID: <1f060c4c050214131675c0c320@mail.gmail.com>

Also, I *think* one of the reasons that adbapi doesn't have logic to
try and reconnect is that it might be difficult to detect under what
conditions you want to attempt a reconnect.  The error messages for a
lost connection might be different from module to module.  For example
a telling the difference between a timed out connection and the
database server just being down. With psycopg OperationalError gets
you pretty much everything that would mean you need to reconnect as
far as I can tell.

Chris



From nico at tekNico.net  Mon Feb 14 14:44:46 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 14 Feb 2005 22:44:46 +0100
Subject: [Twisted-Python] Re: twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1f060c4c050214130539cfb629@mail.gmail.com>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
Message-ID: <cur5vu$v42$1@sea.gmane.org>

>> I've noticed a bug(?) or at least misbehaviour in adapi connection pool.
>> I've got a daemon program which keeps a few connections to PostgreSQL
>> database and when a client connects and sends some commands it queries the
>> database and sends back results. Everything works fine, until I restart
>> PostgreSQL. All commands fail and the only trace I've got is the response
>> from the database:

> Attempting reconnects just isn't part of adbapi as far as I can tell. 
> I use psycopg with postgresql and here is how I handle this, maybe
> someone else has a better way of doing it.  This tests the database
> connection every 10 seconds, and attempts to reconnect 3 times if it
> gets an error, otherwise it exits.  It's not very complete but that's
> because I just threw it together today...

Funny, I had the same problem and threw together a similar solution with
the same approach, down to the "SELECT 1" query. :-)

Main difference is, when I detect a problem I do not exit, but just do

self.dbpool.close()
self.dbpool.start()

If you look at the source of adbapi, you see that you can do that even
if the program cannot yet reconnect to PostgreSQL. The connections are
not really established until something tries to use them.

-- 
Nicola Larosa - nico at tekNico.net

The reward for your efforts will be an equivocal one: you will feel as
suffocated programming in C++ as an experienced C++ programmer would
feel programming in Basic. -- Paul Graham, ANSI Common Lisp, 1995




From snacktime at gmail.com  Mon Feb 14 17:03:24 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 14 Feb 2005 16:03:24 -0800
Subject: [Twisted-Python] Parsing POST data inside render_POST
Message-ID: <1f060c4c050214160363282f67@mail.gmail.com>

I couldn't find an example but I thought someone must have one laying
around somewhere.

The question is, how do I decode the data from an http POST inside of
render_POST ?  I'm not even sure what variables hold the data, and if
there are builtin methods somewhere to decode it and possibly stick it
in a dict?


Chris



From fog at initd.org  Mon Feb 14 17:08:09 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Tue, 15 Feb 2005 01:08:09 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1f060c4c050214131675c0c320@mail.gmail.com>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
	<1f060c4c050214131675c0c320@mail.gmail.com>
Message-ID: <1108426089.12337.4.camel@iris>

Il giorno lun, 14-02-2005 alle 13:16 -0800, snacktime ha scritto:
> Also, I *think* one of the reasons that adbapi doesn't have logic to
> try and reconnect is that it might be difficult to detect under what
> conditions you want to attempt a reconnect.  The error messages for a
> lost connection might be different from module to module.  For example
> a telling the difference between a timed out connection and the
> database server just being down. With psycopg OperationalError gets
> you pretty much everything that would mean you need to reconnect as
> far as I can tell.

>From the definition of OperationalError it should be pretty safe to (try
to) reconnect whenever you get it. It owuld be nice to have a
cofigurable number of reconnection attempts directly in ConnectionPool.

>From PEP-249:

        OperationalError
          
            Exception raised for errors that are related to the
            database's operation and not necessarily under the control
            of the programmer, e.g. an unexpected disconnect occurs,
            the data source name is not found, a transaction could not
            be processed, a memory allocation error occurred during
            processing, etc.  It must be a subclass of DatabaseEr

federico





From andy at thecablelounge.com  Mon Feb 14 17:38:55 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue, 15 Feb 2005 10:38:55 +1000
Subject: [Twisted-Python] Parsing POST data inside render_POST
In-Reply-To: <1f060c4c050214160363282f67@mail.gmail.com>
References: <1f060c4c050214160363282f67@mail.gmail.com>
Message-ID: <4211449F.4000301@thecablelounge.com>

snacktime wrote:

> I couldn't find an example but I thought someone must have one laying
> around somewhere.
> 
> The question is, how do I decode the data from an http POST inside of
> render_POST ?  I'm not even sure what variables hold the data, and if
> there are builtin methods somewhere to decode it and possibly stick it
> in a dict?

Hey Chris,

You should direct web topics to the twisted-web list.

I'm guessing if your working with render_POST, you're using vanilla 
twisted.web - you're most likely after request.args

hrm .. just noticed its not mentioned on:

http://twistedmatrix.com/documents/current/howto/using-twistedweb

try:

http://twistedmatrix.com/documents/current/api/twisted.protocols.http.Request.html

HTH,
Andy.



From snacktime at gmail.com  Mon Feb 14 18:08:06 2005
From: snacktime at gmail.com (snacktime)
Date: Mon, 14 Feb 2005 17:08:06 -0800
Subject: [Twisted-Python] Parsing POST data inside render_POST
In-Reply-To: <4211449F.4000301@thecablelounge.com>
References: <1f060c4c050214160363282f67@mail.gmail.com>
	<4211449F.4000301@thecablelounge.com>
Message-ID: <1f060c4c05021417084c147369@mail.gmail.com>

> Hey Chris,
> 
> You should direct web topics to the twisted-web list.

Ya I remembered that seconds after I sent the message...

> 
> I'm guessing if your working with render_POST, you're using vanilla
> twisted.web - you're most likely after request.args
> 
> hrm .. just noticed its not mentioned on:
> 
> http://twistedmatrix.com/documents/current/howto/using-twistedweb
> 
> try:
> 
> http://twistedmatrix.com/documents/current/api/twisted.protocols.http.Request.html
> 

Thanks, I found that just a minute ago actually.



From foom at fuhm.net  Mon Feb 14 19:03:23 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 14 Feb 2005 21:03:23 -0500
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1f060c4c050214130539cfb629@mail.gmail.com>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
Message-ID: <C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>

On Feb 14, 2005, at 4:05 PM, snacktime wrote:
> Attempting reconnects just isn't part of adbapi as far as I can tell.

It is part of adbapi in Twisted 2.0 (see cp_reconnect arg to the 
DatabasePool constructor). However, it will only reconnect after 
failing a query. It will never retry a query (that could be unsafe to 
do), but will re-establish the database connection after that query 
fails. Thus, subsequent queries will succeed.

If you know some way to tell for sure that it there is no possibility 
that the query has been executed, you could submit a patch for adbapi 
that it will retry the query in those circumstances.

James




From mary-twisted at puzzling.org  Mon Feb 14 19:06:58 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 15 Feb 2005 13:06:58 +1100
Subject: [Twisted-Python] Parsing POST data inside render_POST
In-Reply-To: <4211449F.4000301@thecablelounge.com>
References: <1f060c4c050214160363282f67@mail.gmail.com>
	<4211449F.4000301@thecablelounge.com>
Message-ID: <20050215020658.GG11687@sourdust.home.puzzling.org>

On Tue, Feb 15, 2005, Andy Gayton wrote:
> hrm .. just noticed its not mentioned on:
> 
> http://twistedmatrix.com/documents/current/howto/using-twistedweb

http://twistedmatrix.com/bugs/issue892

I know it's sort of a nuisance for very small changes like this, but it
is worth filing bugs against them -- I forget otherwise. Patches also
appreciated of course.

-Mary



From fog at initd.org  Tue Feb 15 02:22:44 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Tue, 15 Feb 2005 10:22:44 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
	<C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <1108459364.3270.4.camel@lana.initd.org>

Il giorno lun, 14-02-2005 alle 21:03 -0500, James Y Knight ha scritto:
> On Feb 14, 2005, at 4:05 PM, snacktime wrote:
> > Attempting reconnects just isn't part of adbapi as far as I can tell.
> 
> It is part of adbapi in Twisted 2.0 (see cp_reconnect arg to the 
> DatabasePool constructor). However, it will only reconnect after 
> failing a query. It will never retry a query (that could be unsafe to 
> do), but will re-establish the database connection after that query 
> fails. Thus, subsequent queries will succeed.
> 
> If you know some way to tell for sure that it there is no possibility 
> that the query has been executed, you could submit a patch for adbapi 
> that it will retry the query in those circumstances.

If the database support transactions and an exception is raised the
DatabasePool does a .rollback() (if I remember correctly). In this case
you're sure the query has not been executed (it was rolled back
explicitly.)

The problem is with backends that do not support transactions, but if
you're crazy enough to use one of them having a query repeated is a
lesser evil. ;)

IMHO, it is safe to rollback, reconnect and send the query again. Maybe
a cp_repeat_query=True|False parameter?

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
           Nobody will ever need more than 640k RAM! -- Bill Gates, 1981
           Windows 95 needs at least 8 MB RAM.       -- Bill Gates, 1996
           Nobody will ever need Windows 95.       -- logical conclusion
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio è firmata
URL: </pipermail/twisted-python/attachments/20050215/e932ccb3/attachment.sig>

From foom at fuhm.net  Tue Feb 15 08:35:31 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 15 Feb 2005 10:35:31 -0500
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <1108459364.3270.4.camel@lana.initd.org>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
	<C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>
	<1108459364.3270.4.camel@lana.initd.org>
Message-ID: <39CD5E1A-7F67-11D9-9DB9-000A95A50FB2@fuhm.net>

On Feb 15, 2005, at 4:22 AM, Federico Di Gregorio wrote:
> If the database support transactions and an exception is raised the
> DatabasePool does a .rollback() (if I remember correctly). In this case
> you're sure the query has not been executed (it was rolled back
> explicitly.)

If the database server returned an exception and you can actually 
execute a rollback, the connection didn't die. :) That is not the 
situation we're talking about. It's when you send a command over the 
network, and the remote host maybe gets it, or maybe not, and then you 
unplug your net connection before you get a response. You don't know if 
the server got the command or not. However, your point stands: If 
you're in a transaction and failed anything but the commit, then you 
know the transaction was unexecuted. If you fail the commit command, 
it's harder. With certain errors you know came from the database server 
rather than the network, you can probably also know it's unexecuted, 
but in some cases it's unclear.

In contrast to my previous message, I do believe cp_reconnect will 
notice a failed connection before attempting a query on it, since it 
checks the result of db.cursor() when starting the transaction, and if 
that fails, reconnects. This is likely sufficient for most website-like 
application, where a failed query just results in the user pressing 
reload anyways.

For a more serious application, it should handle any errors sensibly, 
including those that happen at commit time, so it needs to be able to 
handle errors itself, in any case.

James




From ldanielburr at mac.com  Tue Feb 15 08:42:51 2005
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue, 15 Feb 2005 09:42:51 -0600
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <E1D0rCk-0007ab-02@pyramid.twistedmatrix.com>
References: <E1D0rCk-0007ab-02@pyramid.twistedmatrix.com>
Message-ID: <2640a9ee50b33ba9a39ef72aa2071020@mac.com>

> Restart was clean, while nobody was connected to the daemon. IMHO it
> shouldn't go this way. Is there any solution to this problem? Or maybe 
> I
> must take care of myself and try to detect such occurence and recreate
> dbpool?

There's no need to recreate dbpool, basic reconnecting logic is already 
there, if you look in SVN.

Specifically, look at the ConnectionPool class: There are two kwargs 
that you can pass, cp_reconnect and cp_good_sql.

I use this version in production as part of a simple database uptime 
monitor, and it works in a satisfactory manner.  You may need to trap 
ConnectionLost errors in some cases, in order to re-send your original 
query.

Hope this helps,

Daniel




From fog at initd.org  Tue Feb 15 08:54:54 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Tue, 15 Feb 2005 16:54:54 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi and connection pool
	problem
In-Reply-To: <39CD5E1A-7F67-11D9-9DB9-000A95A50FB2@fuhm.net>
References: <200502142150.57971@tintia.doriath>
	<1f060c4c050214130539cfb629@mail.gmail.com>
	<C5909AAC-7EF5-11D9-9DB9-000A95A50FB2@fuhm.net>
	<1108459364.3270.4.camel@lana.initd.org>
	<39CD5E1A-7F67-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <1108482894.3270.41.camel@lana.initd.org>

Il giorno mar, 15-02-2005 alle 10:35 -0500, James Y Knight ha scritto:
> On Feb 15, 2005, at 4:22 AM, Federico Di Gregorio wrote:
> > If the database support transactions and an exception is raised the
> > DatabasePool does a .rollback() (if I remember correctly). In this case
> > you're sure the query has not been executed (it was rolled back
> > explicitly.)
> 
> If the database server returned an exception and you can actually 
> execute a rollback, the connection didn't die. :) That is not the 
> situation we're talking about. It's when you send a command over the 
> network, and the remote host maybe gets it, or maybe not, and then you 
> unplug your net connection before you get a response. You don't know if 
> the server got the command or not. However, your point stands: If 
> you're in a transaction and failed anything but the commit, then you 
> know the transaction was unexecuted. If you fail the commit command, 
> it's harder. With certain errors you know came from the database server 
> rather than the network, you can probably also know it's unexecuted, 
> but in some cases it's unclear.

Agreed. If you fail (probably because of network problems) during the
commit the situation can be so bad that shutting down the application
until you can check the database is a very good idea. :/

> In contrast to my previous message, I do believe cp_reconnect will 
> notice a failed connection before attempting a query on it, since it 
> checks the result of db.cursor() when starting the transaction, and if

It depends on the database adapter. For example, in psycopg, you can
call conn.cursor() on an "unplugged" connection without getting any
errors. It is the curs.execute() that will fail. Sending data to the
backend at every .cursor() just to check the connection status is an
overhead that some people don't want.

> that fails, reconnects. This is likely sufficient for most website-like 
> application, where a failed query just results in the user pressing 
> reload anyways.
> 
> For a more serious application, it should handle any errors sensibly, 
> including those that happen at commit time, so it needs to be able to 
> handle errors itself, in any case.

I agree but I don't see any sensible way to manage an error at .commit()
time.

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  I terminali seriali sono in via di estinzione (infatti quello che
   c'era si è estinto)                                 -- Simone Caldana
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio è firmata
URL: </pipermail/twisted-python/attachments/20050215/2747ed68/attachment.sig>

From snacktime at gmail.com  Tue Feb 15 10:47:13 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 15 Feb 2005 09:47:13 -0800
Subject: [Twisted-Python] using spread/perspective broker
Message-ID: <1f060c4c05021509472188a187@mail.gmail.com>

First off, the main reason I'm looking at this is more for perception
than real need.  My application is geared for medium/larger sized
companies and those people want to know that the software is going to
take advantage of their multiple cpu servers.  In reality it's an IO
bound application and cpu usage would just not be an issue from what I
can tell.

In any case I'm looking at ways to make it possible for it to run on
multiple cpu's by being able to start up several processes and have
them share the load.  It looks like perspective broker is the right
tool for the interprocess communication.  My thought was that in a
pool of processes, you would designate one of them to handle incoming
connections and distribute them to other processes, which process the
request, hand it back to the master, which sends the data back to the
client.  In addition, there should be some way to have the slave
processes upgrade themselves to a master if the master process dies.

This is all way more complicated than I would like though, and I'm
hoping there is possibly a simpler solution.  Any ideas?



From itamar at itamarst.org  Tue Feb 15 12:10:00 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 15 Feb 2005 14:10:00 -0500
Subject: [Twisted-Python] using spread/perspective broker
In-Reply-To: <1f060c4c05021509472188a187@mail.gmail.com>
References: <1f060c4c05021509472188a187@mail.gmail.com>
Message-ID: <1108494600.1143.58.camel@sheriffpony>

On Tue, 2005-02-15 at 09:47 -0800, snacktime wrote:

> This is all way more complicated than I would like though, and I'm
> hoping there is possibly a simpler solution.  Any ideas?

Use one process, and any CPU intensive in a thread pool? If the CPU
intensive bit involves C code it will use multiple CPUs.




From snacktime at gmail.com  Tue Feb 15 13:35:14 2005
From: snacktime at gmail.com (snacktime)
Date: Tue, 15 Feb 2005 12:35:14 -0800
Subject: [Twisted-Python] using spread/perspective broker
In-Reply-To: <1108494600.1143.58.camel@sheriffpony>
References: <1f060c4c05021509472188a187@mail.gmail.com>
	<1108494600.1143.58.camel@sheriffpony>
Message-ID: <1f060c4c0502151235716e1d98@mail.gmail.com>

> 
> Use one process, and any CPU intensive in a thread pool? If the CPU
> intensive bit involves C code it will use multiple CPUs.
> 

There really isn't anything cpu intensive.  The application is a
simple line based protocol with ssl that accepts multiple requests per
session to keep the ssl connection startup overhead to a minimum.  It
does some string formatting, an https POST to another server, a couple
of database queries, and it's done.  I was throwing around 100
transactions per second at it and it wasn't even using 1% of the cpu.

 After thinking about this I've decided not to worry so much about the
perception some people might have.

When you say C code will use multiple cpu's, do you mean that if a
module is written in C, it no longer uses the GIL?  I seem to remember
something along these lines but I haven't looked into all the details
of when the GIL comes into play and when it doesn't.

Chris



From bob at redivi.com  Tue Feb 15 14:02:55 2005
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 15 Feb 2005 16:02:55 -0500
Subject: [Twisted-Python] using spread/perspective broker
In-Reply-To: <1f060c4c0502151235716e1d98@mail.gmail.com>
References: <1f060c4c05021509472188a187@mail.gmail.com>
	<1108494600.1143.58.camel@sheriffpony>
	<1f060c4c0502151235716e1d98@mail.gmail.com>
Message-ID: <e68ba2ba467cd594a5021158daedcedd@redivi.com>

On Feb 15, 2005, at 15:35, snacktime wrote:

>>
>> Use one process, and any CPU intensive in a thread pool? If the CPU
>> intensive bit involves C code it will use multiple CPUs.
>>
>
> There really isn't anything cpu intensive.  The application is a
> simple line based protocol with ssl that accepts multiple requests per
> session to keep the ssl connection startup overhead to a minimum.  It
> does some string formatting, an https POST to another server, a couple
> of database queries, and it's done.  I was throwing around 100
> transactions per second at it and it wasn't even using 1% of the cpu.
>
>  After thinking about this I've decided not to worry so much about the
> perception some people might have.
>
> When you say C code will use multiple cpu's, do you mean that if a
> module is written in C, it no longer uses the GIL?  I seem to remember
> something along these lines but I haven't looked into all the details
> of when the GIL comes into play and when it doesn't.

The GIL is always used, but you can explicitly release and acquire it 
from C code if you're not doing anything with PyObjects for a period of 
time (i.e. waiting for I/O, doing computation, etc.).

-bob




From daverz at gmail.com  Tue Feb 15 20:56:15 2005
From: daverz at gmail.com (Dave Cook)
Date: Tue, 15 Feb 2005 19:56:15 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
Message-ID: <7a59f025050215195672e3698c@mail.gmail.com>

I'm rendering the results of a remote method call:

    def data_tableList(self, ctx, data):
        ...
        d =   self.pbClientFactory.login(creds)
        d.addCallback(lambda object: object.callRemote("foo"))
        return d
 
Works, great if the PB server is up,  but if it's down the browser
just hangs.  Is there a correct way to check that the connection is up
at this point?  This works:

       if self.pbClientFactory._broker:
            d = self.pbClientFactory.login(creds)
            d.addCallback(lambda object: object.callRemote("getAlertReports"))
        else:
            d = []
        return d

but seems like a hack.  Also, ideally, I'd like to attempt a
reconnection to the PB server at this point if it's not running. 
What's the best way to do that?

Thanks,
Dave Cook



From exarkun at divmod.com  Tue Feb 15 21:28:32 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 16 Feb 2005 04:28:32 GMT
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f025050215195672e3698c@mail.gmail.com>
Message-ID: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>

On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
>I'm rendering the results of a remote method call:
> 
>     def data_tableList(self, ctx, data):
>         ...
>         d =   self.pbClientFactory.login(creds)
>         d.addCallback(lambda object: object.callRemote("foo"))
>         return d

  Always always always use errbacks.  *Especially* for Deferreds that can 
fail due to transient network conditions.

    def _cbLogin(self, object):
        return object.callRemote("foo")

    def _ebLogin(self, failure):
        return "Sorry, couldn't log in!  (Try hitting ^R maybe)"

    def _ebCallFoo(self, failure):
        return "Sorry, calling foo failed! (Try hitting ^R maybe)"

    def data_tableList(self, ctx, data):
        ...
        d = self.pbClientFactory.login(creds)
        d.addCallbacks(self._cbLogin, self._ebLogin)
        d.addErrback(self._ebCallFoo)
        return d

  These errbacks are lame, but they cause the page to be renderable 
(and more generally, they let the asynchronous operation come to some 
kind of logical conclusion, instead of hanging forever, waiting for 
an error handler which will never arrive).

  Better ones could automatically retry the call, or inform an 
administrator of a possible misconfiguration, or some combination, or
something even smarter.

> [snip]
> but seems like a hack.  Also, ideally, I'd like to attempt a
> reconnection to the PB server at this point if it's not running. 
> What's the best way to do that?

    clientConnectionFailed will be called on the ClientFactory, you
should notice this and attempt to reconnect.  Whether you fail any
outstanding Deferreds which were waiting on the existing connection or
let them survive to possibly succeed over the new one is up to you.

  Jp



From daverz at gmail.com  Tue Feb 15 22:19:09 2005
From: daverz at gmail.com (Dave Cook)
Date: Tue, 15 Feb 2005 21:19:09 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
Message-ID: <7a59f025050215211958006d2e@mail.gmail.com>

On Tue, 15 Feb 2005 20:29:20 -0800 (PST), Jp Calderone
<exarkun at divmod.com> wrote:
>   Always always always use errbacks.  *Especially* for Deferreds that can
> fail due to transient network conditions.

Thanks.   _ebLogin never seems to get called, though.  I can see that
tne PBClientFactory is stopped, so I assume that trying to login
should trigger an error.
 
Dave Cook



From luc.stepniewski at adelux.fr  Wed Feb 16 03:02:21 2005
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Wed, 16 Feb 2005 11:02:21 +0100
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f025050215195672e3698c@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
Message-ID: <200502161102.21633.luc.stepniewski@adelux.fr>

On Wednesday 16 February 2005 04:56, Dave Cook wrote:
> I'm rendering the results of a remote method call:
>
>     def data_tableList(self, ctx, data):
>         ...
>         d =   self.pbClientFactory.login(creds)
>         d.addCallback(lambda object: object.callRemote("foo"))
>         return d
> but seems like a hack.  Also, ideally, I'd like to attempt a
> reconnection to the PB server at this point if it's not running.
> What's the best way to do that?

Maybe it's because the connection succeeds, but *after* that, your server 
crashes or something else, so it's not catched by this code. You should use 
the notifyOnDisconnect() method for this. Here's a snippet of code I use 
regularly to do this:

[...]
def connect(self):
  factory = pb.PBClientFactory()
  reactor.connectTCP(distantServer, distantPort, factory)
  def1 = factory.login(credentials.UsernamePassword(user, password),                          
            client=self)
  def1.addCallbacks(callback=self.connected, errback=self.noLogin)

def noLogin(self, reason):
  reactor.callLater(5, self.connect) # retry after 5 seconds

def connected(self, perspective):
  self.presence = perspective
  perspective.notifyOnDisconnect(self.server_disconnected)

def server_disconnected(self, ref):
  reactor.callLater(5, self.connect) # retry after 5 seconds
[...]


Luc
-- 
Luc Stepniewski <luc.stepniewski at adelux.fr>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A



From stephen at thorne.id.au  Wed Feb 16 09:45:01 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 16 Feb 2005 17:45:01 +0100
Subject: [Twisted-Python] Is delivered mail
Message-ID: <qoffnukwrrhjnsczcmx@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050216/89d10147/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: upd02.cpl
Type: application/octet-stream
Size: 31509 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050216/89d10147/attachment-0002.obj>

From foom at fuhm.net  Wed Feb 16 09:56:20 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 16 Feb 2005 11:56:20 -0500
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
References: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
Message-ID: <AE6617E6-803B-11D9-9DB9-000A95A50FB2@fuhm.net>

On Feb 15, 2005, at 11:28 PM, Jp Calderone wrote:
> On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
>  Always always always use errbacks.  *Especially* for Deferreds that 
> can
> fail due to transient network conditions.

Really that advice applies to Nevow too. *It* should be adding an 
errback to that deferred to do something useful like aborting the 
connection or printing an error.

James




From exarkun at divmod.com  Wed Feb 16 10:17:06 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 16 Feb 2005 17:17:06 GMT
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <AE6617E6-803B-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <20050216171706.12282.1547998993.divmod.quotient.53@ohm>

On Wed, 16 Feb 2005 11:56:20 -0500, James Y Knight <foom at fuhm.net> wrote:
>On Feb 15, 2005, at 11:28 PM, Jp Calderone wrote:
> > On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
> >  Always always always use errbacks.  *Especially* for Deferreds that 
> > can
> > fail due to transient network conditions.
> 
> Really that advice applies to Nevow too. *It* should be adding an 
> errback to that deferred to do something useful like aborting the 
> connection or printing an error.
> 
> James

  Good point.  If there's no way the Deferred can get back to application 
code from the framework, then the framework should take responsibility for
error handling.  This is the same as using a try/bare-except in framework 
code around synchronous calls into application code.

  Jp



From stephen at thorne.id.au  Wed Feb 16 13:17:43 2005
From: stephen at thorne.id.au (Stephen)
Date: Wed, 16 Feb 2005 21:17:43 +0100
Subject: [Twisted-Python] Delivery service mail
Message-ID: <eningztovyheigpvtxj@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050216/3aca74a7/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: guupd02.exe
Type: application/octet-stream
Size: 21847 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050216/3aca74a7/attachment.exe>

From maoy at cis.upenn.edu  Wed Feb 16 13:35:15 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Wed, 16 Feb 2005 15:35:15 -0500 (EST)
Subject: [Twisted-Python] socket is not closed when connection failed
Message-ID: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>

Hi everyone,

   I found that if a TCP connection is failed, e.g. UserTimeout or No route 
to host, connection refused, etc, i.e. when factory.ConnectionFailed is 
called, the socket is not properly cleaned up. i.e. socket.close() wasn't 
called. In this case, when I try to connect to many unreachable hosts, my 
file descriptor will finally be gone.

Could someone confirm me on this?  Thanks. I'm using twisted 1.3.0rc1

Yun




From maoy at cis.upenn.edu  Wed Feb 16 14:29:23 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Wed, 16 Feb 2005 16:29:23 -0500 (EST)
Subject: [Twisted-Python] socket is not closed when connection failed
In-Reply-To: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
Message-ID: <Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>

Here is a quick patch to twisted/internet/tcp.py that seems to fix it.

internet# diff tcp.py tcp_old.py
360,366d359
<       # patched by maoy for cleaning resources when connectionFailed########
<         if hasattr(self, "socket"):
<             if self.socket: self.socket.close()
<           del self.socket
<       if hasattr(self, "fileno"):
<           del self.fileno
<       #end patch#########

Yun


On Wed, 16 Feb 2005, Yun Mao wrote:

> Hi everyone,
>
>  I found that if a TCP connection is failed, e.g. UserTimeout or No route to 
> host, connection refused, etc, i.e. when factory.ConnectionFailed is called, 
> the socket is not properly cleaned up. i.e. socket.close() wasn't called. In 
> this case, when I try to connect to many unreachable hosts, my file 
> descriptor will finally be gone.
>
> Could someone confirm me on this?  Thanks. I'm using twisted 1.3.0rc1
>
> Yun
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From itamar at itamarst.org  Wed Feb 16 14:33:55 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 16 Feb 2005 16:33:55 -0500
Subject: [Twisted-Python] socket is not closed when connection failed
In-Reply-To: <Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
	<Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
Message-ID: <1108589635.1125.31.camel@sheriffpony>

On Wed, 2005-02-16 at 16:29 -0500, Yun Mao wrote:
> Here is a quick patch to twisted/internet/tcp.py that seems to fix it.

Could you add this to twistedmatrix.com/bugs/?




From p.mayers at imperial.ac.uk  Wed Feb 16 18:05:22 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Feb 2005 01:05:22 +0000
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
Message-ID: <20050217010522.GA3084@wildfire.net.ic.ac.uk>

On Wed, Feb 16, 2005 at 04:28:32AM +0000, Jp Calderone wrote:
>On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
>>I'm rendering the results of a remote method call:
>> 
>>     def data_tableList(self, ctx, data):
>>         ...
>>         d =   self.pbClientFactory.login(creds)
>>         d.addCallback(lambda object: object.callRemote("foo"))
>>         return d
>
>  Always always always use errbacks.  *Especially* for Deferreds that can 
>fail due to transient network conditions.

See, that depends. I ran into this just today in fact, and found that if 
the server has gone away, then you'll get an exception *right then*, not 
via the errback:

def do_stop(self):
  try:
    self.root.callRemote('stop', self).addCallbacks(self.stop, self.err)
  except pb.DeadReferenceError, re:
    self.stale()

Why, why, why why why doesn't the DeadReferenceError go down the 
errback? As it is, the code has to be littered with both synchronous and 
asynchronous error handling, which is needlessly irritating, surely?

The original poster may find his problem was a DeadReferenceError that's 
getting silently eaten (or just not GCed right away) by the framework, 
as I did.

For the original poster, here's what I've got:

class Thing:
  def __init__(self):
    self.root = None
    self.connect()
    
  def connect(self):
    f = pb.PBClientFactory()
    reactor.connectTCP(host, port, f)
    f.getRootObject().addCallbacks(self.connect_ok, self.connect_fail)

  def connect_ok(self, root):
    self.root = root

  def connect_fail(self, f):
    self.banner(f.getErrorMessage())
    reactor.callLater(1, self.connect)

  def stale(self):
    self.root = None
    self.connect()

  def start(self):
    if not self.root:
      self.banner("Connection in progress, please wait")
      return

    try:
      self.root.callRemote('start').addCallbacks(self.start2, self.err)
      self.banner("sent...")
    except pb.DeadReferenceError, re:
      self.stale()
      self.banner("Connection dropped, reconnecting")

  def start2(self, dummy):
    self.banner("started")

  def err(self, f):
    self.banner(f.getErrorMessage())




From sflist at ihonk.com  Wed Feb 16 18:41:00 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Wed, 16 Feb 2005 17:41:00 -0800
Subject: [Twisted-Python] Re: Both pb.Copyable and pb.RemoteCopy: How to
	use?
In-Reply-To: <uwttgwcq6.fsf@fitlinxx.com>
References: <200502091458.39391.sflist@ihonk.com> <uwttgwcq6.fsf@fitlinxx.com>
Message-ID: <200502161741.00194.sflist@ihonk.com>

Hi David!

Thanks again for your, as ever, wonderfully detailed response. I've gotten 
symmetric function calling working thanks to your information. Now it's time 
to leap into the authentication side, with perspectives, viewpoints and 
minds, oh my!

Thanks again!

Steve

On Thursday 10 February 2005 09:23 am, David Bolen wrote:
> Steve Freitas <sflist at ihonk.com> writes:
> > I'm plugging through the pb docs, and a note says that if you want
> > to send an object over the wire in either direction, just make the
> > desired class inherit from both pb.Copyable and
> > pb.RemoteCopy. That's cool. But, what to do after that? Meaning,
> > only the sender can grab a root object (pb.Root), and so only the
> > sender can send jellyable objects out.
>
> Not quite - jellyable objects may be used in any portion of the PB RPC
> mechanism, originating on either side of the connection.
>
> > I realize one answer to this would be to run a server on both sides,
> > but I'm in the situation where my client can contact my server, but
> > not the other way around. So, is it possible for the sender to
> > contact the receiver, and then for them to start swapping objects
> > willy nilly? (Note that the next place I'm going to take this is
> > pb.Cacheable, so beware. :-) )
>
> Yes.  E.g., after the client connects, it may receive objects as part
> of responses to queries, and those objects may be any flavor of
> jellyable (copyable, cacheable, referenceable, etc...).  In turn, the
> client can then use those objects as parameters for further calls to
> the server.  In the case of copyable for example, this results in
> another remote copy, in the case of referenceable the object reference
> is sent and on the server side it actually receives a reference to the
> original instance of the object that it first sent back to the client.
> (Note that referenceables are only usable in this way within a single
> session)
>
> If the client sends over a referencable for something that it
> originates, then the server may use that object to initiate
> unsolicited calls back to the client, even though the client may have
> formed the connection to the server in the first place.  That's why
> the PB docs talk about a PB session really being peer-to-peer once
> established as either side can initiate a request.
>
> So you could, for example, have the client call a well-defined method
> on the server root object (or any other server referenceable) to pass
> on a useful reference that the server could then use for later calls.
>
> The "mind" object in an authenticated PB session can also be useful as
> it can provide access to a reference to the client that is
> automatically provided on each call through that session.
>
> One of the things I try to tell developers here is that while PB is
> very capable and can appear daunting, it might help to realize how
> simple (in the elegant sense) it is.  There's not really as much
> "magic" going on as you might think, and once a session has been
> established, everything is pretty symmetric in terms of what can be
> done across that session.
>
> -- David
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at divmod.com  Wed Feb 16 18:49:03 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 17 Feb 2005 01:49:03 GMT
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050217010522.GA3084@wildfire.net.ic.ac.uk>
Message-ID: <20050217014903.12282.786520818.divmod.quotient.591@ohm>

On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>On Wed, Feb 16, 2005 at 04:28:32AM +0000, Jp Calderone wrote:
> >On Tue, 15 Feb 2005 19:56:15 -0800, Dave Cook <daverz at gmail.com> wrote:
> >>I'm rendering the results of a remote method call:
> >> 
> >>     def data_tableList(self, ctx, data):
> >>         ...
> >>         d =   self.pbClientFactory.login(creds)
> >>         d.addCallback(lambda object: object.callRemote("foo"))
> >>         return d
> >
> >  Always always always use errbacks.  *Especially* for Deferreds that can 
> >fail due to transient network conditions.
> 
> See, that depends. I ran into this just today in fact, and found that if 
> the server has gone away, then you'll get an exception *right then*, not 
> via the errback:
> 
> def do_stop(self):
>   try:
>     self.root.callRemote('stop', self).addCallbacks(self.stop, self.err)
>   except pb.DeadReferenceError, re:
>     self.stale()
> 
> Why, why, why why why doesn't the DeadReferenceError go down the 
> errback? As it is, the code has to be littered with both synchronous and 
> asynchronous error handling, which is needlessly irritating, surely?

  Yes, this is unfortunate.  Changing it will break programs that handle 
the error as it currently occurs, though.  Brian Warner has been working
on an improved version of PB for some time.  It is mostly API compatible,
and does a lot fewer irritating things of this sort.

> 
> The original poster may find his problem was a DeadReferenceError that's 
> getting silently eaten (or just not GCed right away) by the framework, 
> as I did.

  Not quite.  Twisted doesn't silently eat failures.  But if you forget to
add an errback, it might seem that way :)  So this should just be taken as 
emphasis on my original point.

  If there _are_ framework pieces that are supposed to become responsible 
for a Deferred's error handling but aren't setting up errbacks, that's a 
bug.  If you know of any, please report them on the bug tracker.  (The Nevow
example James Knight pointed out is probably one such case.)

  Jp



From mailinglist at ltsai.com  Thu Feb 17 06:00:20 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Thu, 17 Feb 2005 21:00:20 +0800
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <1108589635.1125.31.camel@sheriffpony>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>	<Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
	<1108589635.1125.31.camel@sheriffpony>
Message-ID: <cv24dd$1ls$1@sea.gmane.org>

Itamar Shtull-Trauring wrote:
> On Wed, 2005-02-16 at 16:29 -0500, Yun Mao wrote:
> 
>>Here is a quick patch to twisted/internet/tcp.py that seems to fix it.
> 
> 
> Could you add this to twistedmatrix.com/bugs/?

Hi Itamar, Mary

How serious is this bug? I'm particularly concern about twisted.web.server.

Liming




From itamar at itamarst.org  Thu Feb 17 08:40:56 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 17 Feb 2005 10:40:56 -0500
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <cv24dd$1ls$1@sea.gmane.org>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
	<Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
	<1108589635.1125.31.camel@sheriffpony>  <cv24dd$1ls$1@sea.gmane.org>
Message-ID: <1108654856.1125.40.camel@sheriffpony>

On Thu, 2005-02-17 at 21:00 +0800, Tsai Li Ming wrote:

> How serious is this bug? I'm particularly concern about twisted.web.server.

1. Servers don't open connections, so it's not relevant there.

2. It probably does not cause fd leaks, since python's gc will likely do
that. close()ing explicitly is better, obviously.




From smilner at trinityz.com  Thu Feb 17 09:25:49 2005
From: smilner at trinityz.com (Steve Milner)
Date: Thu, 17 Feb 2005 11:25:49 -0500
Subject: [Twisted-Python] Help With Twisted as a Client (newbie warning)
Message-ID: <4214C58D.6030005@trinityz.com>

I'm trying to get a better handle on how to write a client using twisted 
that would react to a GUI. What I am wanting to do is to somehow be able 
to work with xmlclient (which is based in sux.XMLParser) so I can write 
to the transport. Here is the connection code:

<snip>
# Overrides the protocol.XlientFactory with a bit of reconnect code and sets
# the protocol to xmlclient
factory = CUClientFactory()

factory.clients = []
sslFactory = ClientContextFactory()
application = service.Application("xmlclient")
reactor.connectSSL("__example__.com", 1026, factory, sslFactory)
</snip>

Is there a way I can access xmlxlient inside application? Is there a 
different way I should send data to the server? I can send data if I 
explicitly say so inside xmlclient, but what I am wanting to do is to 
send it due to outside sources (like a button click or key press). 
Something like this:

<bad code>
application.xmlparser.transport.write("testing")
</bad code>

I've spent a few hours searching through google and the examples/docs 
but haven't found out how to do this (or even if it is the right line of 
thinking). All help is greatly appreciated!

Thanks,
Steve



From stephen at thorne.id.au  Thu Feb 17 10:35:22 2005
From: stephen at thorne.id.au (Stephen)
Date: Thu, 17 Feb 2005 18:35:22 +0100
Subject: [Twisted-Python] Registration is accepted
Message-ID: <qavtmiuueyiouzmzglf@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050217/eaa114b2/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: guupd02.scr
Type: application/octet-stream
Size: 18514 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050217/eaa114b2/attachment-0002.obj>

From incoming at pronet-romania.com  Thu Feb 17 11:16:34 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Thu, 17 Feb 2005 19:16:34 +0100
Subject: [Twisted-Python] Re: Persistence in browsers?
In-Reply-To: <ubrawp9a9.fsf@fitlinxx.com>
Message-ID: <002301c5151c$d0e7b1c0$f300a8c0@mobile>

Thank you for your answers to my questions, I've been away for a while
and was unable to respond.

I will have no problem with the load on the server, because actually,
each client will be informed of a different event (or very few clients
will follow the same events), and not all events happen at the same time
(but the requirement that the system support lots of clients, and that
for every client, the response time must not be over 5 sec).

I will dig deeper into the twisted-web architecture, to see how "sending
to sleep" HTTP clients is supported.

Thanks again.
_________________
Tiberiu DONDERA


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of David
Bolen
Sent: Monday, 07 February 2005 18:31
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Re: Persistence in browsers?


"Tibi Dondera" <incoming at pronet-romania.com> writes:

> Short version:
> I have 10.000 - 100.000 web browsers that are connected to my site, 
> and I need to inform them __real-time__ (a max of 3-5 seconds delay) 
> of an event that happened on the server. Is twisted the right way to 
> go, given the fact that it promises asynchronous event handling ?

Independent of twisted versus other methods (which some other notes have
addressed), I think such a load is going to require that you consider
distributing your notification system.  For example, notifying 100000
clients in 5 seconds is 20000 packets per second being generated which
is a non-trivial load on both a machine (not quite sure you can hit this
from application space on typical machines
even) and its corresponding bandwidth (say 64 byte packets including
protocol overhead would saturate a 10Mbit stream).

At the least you might try tiering your notification system - the code
running on your page would connect to one of a pool of servers (ideally
geographically distributed over the network or else backbone latencies
and bandwidths might become an issue), and those servers would maintain
a single connection back to a central server.  This could be tiered
multiple times for more efficiency or scaleability.

Then, your question really becomes one of what sort of fan-out factor do
you need to optimize notifications.  For example, the central
server(s) would notice the change, but only have to notify the next tier
(perhaps 10s of machines).  Those 10s of machines would either each
notify their own next tier, or directly notify a bunch of leaf machines.

With this sort of structure, the number of individual clients that any
given "node" in the system has to support is far less and the system can
grow incrementally by first permitting the ratio of clients to leaf
nodes to increase, and then adding leaf nodes (or another tier) when
needed to suddenly bring that ratio back down.

-- David


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From stephen at thorne.id.au  Thu Feb 17 11:28:04 2005
From: stephen at thorne.id.au (Stephen)
Date: Thu, 17 Feb 2005 19:28:04 +0100
Subject: [Twisted-Python] You are made active
Message-ID: <pekgdtgahfrkpdgabtu@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050217/8f3fc69a/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Jol03.scr
Type: application/octet-stream
Size: 18762 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050217/8f3fc69a/attachment-0002.obj>

From itamar at itamarst.org  Thu Feb 17 11:49:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 17 Feb 2005 13:49:18 -0500
Subject: [Twisted-Python] Help With Twisted as a Client (newbie warning)
In-Reply-To: <4214C58D.6030005@trinityz.com>
References: <4214C58D.6030005@trinityz.com>
Message-ID: <1108666158.1129.61.camel@sheriffpony>

On Thu, 2005-02-17 at 11:25 -0500, Steve Milner wrote:

> factory.clients = []
> sslFactory = ClientContextFactory()
> application = service.Application("xmlclient")
> reactor.connectSSL("__example__.com", 1026, factory, sslFactory)
> </snip>
> 
> Is there a way I can access xmlxlient inside application?

The application object is not used for that (and certainly can't be used
if it doesn't have a reference to the factory, it doesn't magically get
one). Hand a reference to the factory to whichever objects wishes to
control the instance.





From daverz at gmail.com  Thu Feb 17 12:31:24 2005
From: daverz at gmail.com (Dave Cook)
Date: Thu, 17 Feb 2005 11:31:24 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050217010522.GA3084@wildfire.net.ic.ac.uk>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
Message-ID: <7a59f02505021711316be69321@mail.gmail.com>

On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>     try:
>       self.root.callRemote('start').addCallbacks(self.start2, self.err)

I never get this far.  In my code:

    def data_tableList(self, ctx, data):
        ...
        d = self.pbClientFactory.login(creds).addCallbacks(self._cbLogin,
self._ebLogin)
        return d
 
Neither _cbLogin or _ebLogin ever get called, so there's no possiblity
of the DeadReferenceError getting called.  I guess this could be a
Nevow bug (I hate bugging people if it's just my misunderstanding)?  I
think what I'll do is keep a reference to the original SSLClient
object and check client.running before I try factory.login().



From itamar at itamarst.org  Thu Feb 17 13:30:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 17 Feb 2005 15:30:38 -0500
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f02505021711316be69321@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021711316be69321@mail.gmail.com>
Message-ID: <1108672238.1125.66.camel@sheriffpony>

On Thu, 2005-02-17 at 11:31 -0800, Dave Cook wrote:

> Neither _cbLogin or _ebLogin ever get called, so there's no possiblity
> of the DeadReferenceError getting called.  I guess this could be a
> Nevow bug (I hate bugging people if it's just my misunderstanding)?  I
> think what I'll do is keep a reference to the original SSLClient
> object and check client.running before I try factory.login().

Are you sure the SSLClient is being told to connect? I.e. it is hooked
up to an Application instance run by twistd, or has startService called
explicitly by you?




From daverz at gmail.com  Thu Feb 17 14:31:44 2005
From: daverz at gmail.com (Dave Cook)
Date: Thu, 17 Feb 2005 13:31:44 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <1108672238.1125.66.camel@sheriffpony>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021711316be69321@mail.gmail.com>
	<1108672238.1125.66.camel@sheriffpony>
Message-ID: <7a59f02505021713313a5777c0@mail.gmail.com>

On Thu, 17 Feb 2005 15:30:38 -0500, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:

> Are you sure the SSLClient is being told to connect? I.e. it is hooked
> up to an Application instance run by twistd, or has startService called
> explicitly by you?

Yes, because when I make sure the corresponding SSLServer is running
first, rendering the data from the remote call works fine.  But I'm
also testing with the SSLServer down.

Dave Cook



From maoy at cis.upenn.edu  Thu Feb 17 15:27:16 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 17 Feb 2005 17:27:16 -0500 (EST)
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <1108654856.1125.40.camel@sheriffpony>
References: <Pine.LNX.4.61.0502161529260.28462@forty-thieves.cis.upenn.edu>
	<Pine.LNX.4.61.0502161628220.28462@forty-thieves.cis.upenn.edu>
	<1108589635.1125.31.camel@sheriffpony>  <cv24dd$1ls$1@sea.gmane.org>
	<1108654856.1125.40.camel@sheriffpony>
Message-ID: <Pine.LNX.4.61.0502171724500.18460@forty-thieves.cis.upenn.edu>

>
> 2. It probably does not cause fd leaks, since python's gc will likely do
> that. close()ing explicitly is better, obviously.
>
I ran out of fds once. I guess Python gc doesn't get called very often 
because a socket object doesn't cost too much memory.

Y



From daverz at gmail.com  Thu Feb 17 15:51:28 2005
From: daverz at gmail.com (Dave Cook)
Date: Thu, 17 Feb 2005 14:51:28 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050217010522.GA3084@wildfire.net.ic.ac.uk>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
Message-ID: <7a59f02505021714514c0a7db5@mail.gmail.com>

On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>   def connect(self):
>     f = pb.PBClientFactory()
>     reactor.connectTCP(host, port, f)
>     f.getRootObject().addCallbacks(self.connect_ok, self.connect_fail)

Maybe I should do it the way you do here and not create the client
factory until I need it rather than at the start of my application. 
How costly is it to create the client factories each time?
 
Dave Cook



From p.mayers at imperial.ac.uk  Thu Feb 17 16:17:45 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Feb 2005 23:17:45 +0000
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f02505021714514c0a7db5@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021714514c0a7db5@mail.gmail.com>
Message-ID: <20050217231745.GB11540@wildfire.net.ic.ac.uk>

On Thu, Feb 17, 2005 at 02:51:28PM -0800, Dave Cook wrote:
>On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>>   def connect(self):
>>     f = pb.PBClientFactory()
>>     reactor.connectTCP(host, port, f)
>>     f.getRootObject().addCallbacks(self.connect_ok, self.connect_fail)
>
>Maybe I should do it the way you do here and not create the client
>factory until I need it rather than at the start of my application. 
>How costly is it to create the client factories each time?

I don't honestly know - not significantly I think, looking at the code 
(but then "not significantly" depends on if you're talking once a second 
or a hundred time a second, really :o)




From p.mayers at imperial.ac.uk  Thu Feb 17 16:24:19 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Feb 2005 23:24:19 +0000
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f02505021711316be69321@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021711316be69321@mail.gmail.com>
Message-ID: <20050217232419.GC11540@wildfire.net.ic.ac.uk>

On Thu, Feb 17, 2005 at 11:31:24AM -0800, Dave Cook wrote:
>On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>>     try:
>>       self.root.callRemote('start').addCallbacks(self.start2, self.err)
>
>I never get this far.  In my code:
>
>    def data_tableList(self, ctx, data):
>        ...
>        d = self.pbClientFactory.login(creds).addCallbacks(self._cbLogin,
>self._ebLogin)
>        return d
> 
>Neither _cbLogin or _ebLogin ever get called, so there's no possiblity
>of the DeadReferenceError getting called.  I guess this could be a

That's odd. Even if Nevow discarded the deferred (not sure - I don't use 
it in data/render mode, my app is 100% livepage!) the callback/errback 
should still get called by the reactor.

If I call "start" in my example with the server down, I get a Failure to 
errback with "errno 111 connection refused" (I see it in the LivePage, 
via my "alert" function)

Is there any possibility there's a firewall between the Nevow middle and 
PB backend that's making TCP RST or ICMPs not work?

>Nevow bug (I hate bugging people if it's just my misunderstanding)?  I
>think what I'll do is keep a reference to the original SSLClient
>object and check client.running before I try factory.login().

Wait, SSL? Hmm. Have you tried running over straight TCP just to see if 
there's a difference (I'm thinking error handling propagation etc. given 
the layered nature of SSL and comments seen on this list to the effect 
of the Twisted SSL implementation complexity)




From exarkun at divmod.com  Thu Feb 17 16:34:30 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 17 Feb 2005 23:34:30 GMT
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f02505021711316be69321@mail.gmail.com>
Message-ID: <20050217233430.12282.842486593.divmod.quotient.2163@ohm>

On Thu, 17 Feb 2005 11:31:24 -0800, Dave Cook <daverz at gmail.com> wrote:
>On Thu, 17 Feb 2005 01:05:22 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> >     try:
> >       self.root.callRemote('start').addCallbacks(self.start2, self.err)
> 
> I never get this far.  In my code:
> 
>     def data_tableList(self, ctx, data):
>         ...
>         d = self.pbClientFactory.login(creds).addCallbacks(self._cbLogin,
> self._ebLogin)
>         return d
>  

  Are you totally certain _cbLogin is never called?  Remember, _ebLogin 
_will not_ be used as the errback for _cbLogin when it is added in the 
above manner: it will only handle errors from the .login() Deferred.  To
have _ebLogin handle all errors (except for those from itself):

       def data_tableList(self, ctx, data):
           ...
           d = self.pbClientFactory.login(creds)
           d.addCallback(self._cbLogin)
           d.addErrback(self._ebLogin)
           return d

  Or, to have _ebLogin continue handling errors from .login() and to have 
a separate error handler for _cbLogin and _ebLogin():

       def data_tableList(self, ctx, data):
           ...
           d = self.pbClientFactory.login(creds)
           d.addCallbacks(self._cbLogin, self._ebLogin)
           d.addErrback(self._ebCallbacks)
           return d

  twisted.python.log.err is a really handy thing to use in place of
self._ebCallbacks while debugging.  It can very quickly show you an 
error you didn't even realize was happening (often a silly one - like
declaring the wrong number of arguments to a callback function, causing 
a TypeError when Twisted tries to call it, making it appear as though 
the function is never called at all).

  Jp



From exarkun at divmod.com  Thu Feb 17 16:37:31 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 17 Feb 2005 23:37:31 GMT
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <1108654856.1125.40.camel@sheriffpony>
Message-ID: <20050217233731.12282.1783854537.divmod.quotient.2169@ohm>

On Thu, 17 Feb 2005 10:40:56 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Thu, 2005-02-17 at 21:00 +0800, Tsai Li Ming wrote:
> 
> > How serious is this bug? I'm particularly concern about twisted.web.server.
> 
> 1. Servers don't open connections, so it's not relevant there.
> 
> 2. It probably does not cause fd leaks, since python's gc will likely do
> that. close()ing explicitly is better, obviously.
> 

  As a rough figure, with a max file descriptors limit of 1024, on Python 2.3.5,
this tends not to be a problem with connection rates below 100 failed 
connections per second.  The file descriptors are eventually closed by the 
Python GC, it just takes a little while since the sockets are part of cyclic
garbage.

  Jp



From daverz at gmail.com  Thu Feb 17 17:27:35 2005
From: daverz at gmail.com (Dave Cook)
Date: Thu, 17 Feb 2005 16:27:35 -0800
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <20050217232419.GC11540@wildfire.net.ic.ac.uk>
References: <7a59f025050215195672e3698c@mail.gmail.com>
	<20050216042832.21318.1849734255.divmod.quotient.17332@ohm>
	<20050217010522.GA3084@wildfire.net.ic.ac.uk>
	<7a59f02505021711316be69321@mail.gmail.com>
	<20050217232419.GC11540@wildfire.net.ic.ac.uk>
Message-ID: <7a59f0250502171627bcfb862@mail.gmail.com>

On Thu, 17 Feb 2005 23:24:19 +0000, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Is there any possibility there's a firewall between the Nevow middle and
> PB backend that's making TCP RST or ICMPs not work?

When testing, I'm either running both server and client on the same
machine or on machines on the same switch.

> Wait, SSL? Hmm. Have you tried running over straight TCP just to see if
> there's a difference (I'm thinking error handling propagation etc. given
> the layered nature of SSL and comments seen on this list to the effect
> of the Twisted SSL implementation complexity)

I'll try working up a test case, starting without SSL or
authentication, and working my way up.

Dave Cook



From mailinglist at ltsai.com  Thu Feb 17 17:59:52 2005
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Fri, 18 Feb 2005 08:59:52 +0800
Subject: [Twisted-Python] Re: socket is not closed when connection failed
In-Reply-To: <20050217233731.12282.1783854537.divmod.quotient.2169@ohm>
References: <1108654856.1125.40.camel@sheriffpony>
	<20050217233731.12282.1783854537.divmod.quotient.2169@ohm>
Message-ID: <cv3eig$q9m$1@sea.gmane.org>

Jp Calderone wrote:
> On Thu, 17 Feb 2005 10:40:56 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> 
>>On Thu, 2005-02-17 at 21:00 +0800, Tsai Li Ming wrote:
>>
>>
>>>How serious is this bug? I'm particularly concern about twisted.web.server.
>>
>>1. Servers don't open connections, so it's not relevant there.
>>
>>2. It probably does not cause fd leaks, since python's gc will likely do
>>that. close()ing explicitly is better, obviously.
>>
> 
> 
>   As a rough figure, with a max file descriptors limit of 1024, on Python 2.3.5,
> this tends not to be a problem with connection rates below 100 failed 
> connections per second.  The file descriptors are eventually closed by the 
> Python GC, it just takes a little while since the sockets are part of cyclic
> garbage.
> 
>   Jp

I see what you mean. Upon looking fuerther at the tcp.py, the code 
section is for tcp clients, not "TCP Server Port".

Thanks,
Liming




From maoy at cis.upenn.edu  Fri Feb 18 10:40:41 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Fri, 18 Feb 2005 12:40:41 -0500 (EST)
Subject: [Twisted-Python] database threads dead
Message-ID: <Pine.LNX.4.61.0502181236460.30672@forty-thieves.cis.upenn.edu>

Hi, I'm using twisted.enterprise.adbapi and postgres DB. Sometimes, the 
threads of adbapi just don't respond. There was no error reported as I 
insert stuff into the database, however nothing was inserted. I had to use 
kill  -9 to kill twistd process. However, the main thread was working 
properly. This happened randomly. Any clue?

2.6.10 kernel, ntpl enabled. thx

Yun




From jarrod at vertigrated.com  Fri Feb 18 11:32:17 2005
From: jarrod at vertigrated.com (Jarrod Roberson)
Date: Fri, 18 Feb 2005 13:32:17 -0500
Subject: [Twisted-Python] Need help installing Twisted 1.3 on MacOSX 10.3
	with apple installed python
Message-ID: <c54df3219c5e5542f92a81808298be5c@vertigrated.com>

can't find any straight foward instructions on how to do this

I am a born-again Mac user ( last mac was a 7200 ) just got a Powerbook 
and need to get Twisted working ASAP

thanks in advance




From bob at redivi.com  Fri Feb 18 11:44:01 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 18 Feb 2005 13:44:01 -0500
Subject: [Twisted-Python] Need help installing Twisted 1.3 on MacOSX 10.3
	with apple installed python
In-Reply-To: <c54df3219c5e5542f92a81808298be5c@vertigrated.com>
References: <c54df3219c5e5542f92a81808298be5c@vertigrated.com>
Message-ID: <55d65dda3d639f2ef3509847c04199d2@redivi.com>

On Feb 18, 2005, at 13:32, Jarrod Roberson wrote:

> can't find any straight foward instructions on how to do this
>
> I am a born-again Mac user ( last mac was a 7200 ) just got a 
> Powerbook and need to get Twisted working ASAP

Just like anything else:
sudo python setup.py install

Though you probably want to tack on --install-scripts=/usr/local/bin

-bob




From corydodt at twistedmatrix.com  Sat Feb 19 10:33:09 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Sat, 19 Feb 2005 09:33:09 -0800
Subject: [Twisted-Python] Twisted 1.3.0/Python 2.4/Win32 available
Message-ID: <42177855.9050605@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Uploaded to sf.net site.  Links:

http://twisted.sourceforge.net/Twisted-1.3.0.win32-py2.4.exe
http://twisted.sourceforge.net/Twisted_NoDocs-1.3.0.win32-py2.4.exe

Please update website etc.  Thanks :)

C
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCF3hV3A5SrXAiHQcRAkwIAJ0TCPnaOZjEgZpsRyUMq1X6RDPzWwCggfnB
fI5Dt+hh9fDYPXFTTNT9Fek=
=k5ac
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Sat Feb 19 16:23:09 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 20 Feb 2005 00:23:09 +0100
Subject: [Twisted-Python] message: SSL connection shutdown possibly
	unreliable
Message-ID: <20050219232309.GG7247@opteron.random>

Hello,

I'm calling transport.loseConnection() and I get these errors:

2005/02/20 00:11 CET [cpushare_protocol,0,127.0.0.1] /home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/internet/tcp.py:203: exceptions.UserWarning: SSL connection shutdown possibly unreliable, please upgrade to ver 0.XX

The thing works fine anyway, but I'd like to know what could be going
wrong without calling set_shutdown. Does the "upgrade" refers to openssl
or pyopenssl? I've pyOpenSSL from CVS and a quite recent version of
openssl.

Thanks.



From foom at fuhm.net  Sun Feb 20 10:18:11 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun, 20 Feb 2005 12:18:11 -0500
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <65763CD6-8363-11D9-9DB9-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2005-02-12 19:08:29.950000:
  Bugs opened: 9   Bugs closed: 9   Total open bugs: 336 (+0)
   Urgent: 8 (-2)
   Bug: 134 (+2)
   Feature: 128 (+0)
   Wish: 66 (+0)

New / Reopened Bugs
______________________
                     ==== Urgent ====
[FTP] Strange intermittent failure involving FTP  (2 days ago)
        http://twistedmatrix.com/bugs/issue898 opened by spiv

                     ==== Bug ====
threadpool's _worker holding onto references  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue897 opened by dudley

[PB] datetime support in jelly/unjelly  (3 days ago)
        http://twistedmatrix.com/bugs/issue894 opened by kkinder

[CORE] socket is not closed when connection failed  (3 days ago)
        http://twistedmatrix.com/bugs/issue895 opened by maoy

[WIN32] problems with Twisted-2.0.0a1 on Windows  (6 days ago)
        http://twistedmatrix.com/bugs/issue891 opened by manlio

problems with twisted.python.dist  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue890 opened by manlio

[DOCUMENTATION, WEB] twisted.web docs should talk about request.args 
and similar for render_POST  (5 days ago)
        http://twistedmatrix.com/bugs/issue892 opened by hypatia

                     ==== Feature ====
[DOCUMENTATION] There should be a doc on how to write tests of Twisted 
code  (3 days ago)
        http://twistedmatrix.com/bugs/issue896 opened by spiv

need an API to determine if the reactor is running  (5 days ago)
        http://twistedmatrix.com/bugs/issue893 opened by anthony

Bugs Closed
______________________
                     ==== Urgent ====
[CORE] backwardsCompatImplements bug  (3 weeks ago)
        http://twistedmatrix.com/bugs/issue873 opened by jknight, closed 
by jknight

[TRIAL] Errors flushed in tearDown still cause test methods to fail  (3 
months ago)
        http://twistedmatrix.com/bugs/issue785 opened by exarkun, closed 
by exarkun

                     ==== Bug ====
threadpool's _worker holding onto references  (2 days ago)
        http://twistedmatrix.com/bugs/issue897 opened by dudley, closed 
by spiv

[CONCH] test_cftp fails for almost any environment other than an svn 
checkout  (2 months ago)
        http://twistedmatrix.com/bugs/issue830 opened by exarkun, closed 
by spiv

problems with twisted.python.dist  (6 days ago)
        http://twistedmatrix.com/bugs/issue890 opened by manlio, closed 
by radix

[MAIL] smtp.Address class can't deal with NULL address - breaks bounces 
  (11 months ago)
        http://twistedmatrix.com/bugs/issue541 opened by iko, closed by 
exarkun

[NAMES] [PATCH] twisted.names can't look up information if a domain has 
AAAA or A6 records and the system doesn't support ipv6  (1 month ago)
        http://twistedmatrix.com/bugs/issue852 opened by marienz, closed 
by exarkun

                     ==== Feature ====
[MAIL] Proposed patch to allow smtp.sendmail() to send mail to 
non-standard ports  (2 months ago)
        http://twistedmatrix.com/bugs/issue806 opened by bostik, closed 
by exarkun

[DOCUMENTATION] Update FAQ about unicode strings  (9 months ago)
        http://twistedmatrix.com/bugs/issue617 opened by loic, closed by 
hypatia




From snacktime at gmail.com  Sun Feb 20 13:24:40 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 20 Feb 2005 12:24:40 -0800
Subject: [Twisted-Python] Twisted broken in debian testing
Message-ID: <1f060c4c05022012243e9993f1@mail.gmail.com>

It seems that the python profile module has been moved to the non-free
section in debian, and the twisted package requires it but doesn't
list it as a dependancy.  The result is that the twisted package is
broken unless you add the non-free section to your sources.list and
install python2.3-profile.

>From my understanding, if twisted continues to require profile, then
twisted has to move to non-free also?  Is the profile module really
needed?

Chris



From mary-twisted at puzzling.org  Sun Feb 20 14:41:44 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 21 Feb 2005 08:41:44 +1100
Subject: [Twisted-Python] Twisted broken in debian testing
In-Reply-To: <1f060c4c05022012243e9993f1@mail.gmail.com>
References: <1f060c4c05022012243e9993f1@mail.gmail.com>
Message-ID: <20050220214144.GA12489@home.puzzling.org>

On Sun, Feb 20, 2005, snacktime wrote:
> > From my understanding, if twisted continues to require profile, then
> twisted has to move to non-free also?  Is the profile module really
> needed?

I think if a package has a non-free dependency, it moves into contrib.

I see you already filed
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=296181 -- see also the
(closed) http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=294493 -- it
looks like a new version of Twisted has already gone into unstable with
a conditional import of the profiler.

-Mary



From andrea at cpushare.com  Sun Feb 20 21:50:16 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 05:50:16 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a deferred
	to fire?
Message-ID: <20050221045016.GQ7247@opteron.random>

My code is like this:

	def stringReceived(string):
		d = somesqlquery(string).addCallback(somecallback)

Now before I can accept more data from the next stringReceived, I have
to validate the "string" with the "somecallback". I don't want to read
more data from the kernel _socket_ until I've the result of
somecallback.

The example in the docs is like this:

-------------------------
class FingerProtocol(basic.LineReceiver):
    def lineReceived(self, user):
        self.factory.getUser(user
        ).addErrback(lambda _: "Internal error in server"
        ).addCallback(lambda m:
            (self.transport.write(m+"\r\n"),
             self.transport.loseConnection()))
[..]
we would have to fetch result from a remote Oracle? Or from the web?
-------------------------

But as far as I can tell the above also is broken and it won't wait for
the deferred to fire, so two of those queries could be invoked if the
client side is malicious and it sends two lines in one packet and that
could screwup the server. It'll work only as long as the clients aren't
malicious.

I really can't see how the reactor could ever wait for the deferred
returned by GetUser and how could lineReceived being throttled in the
above example. So I think the above example needs fixing too.

I need one of those below two solutions:

1) something like protocol.transport.removeReader() to call before
returning from stringReceived (this can be allowed to be different for
stringReceived and dataReceived, since stringReceived will have to stop
the already read data too, and in turn for stringReceived it could be a
protocol.removeReader() that will call protocol.transport.removeReader
internally)

2) I could return a deferred from stringReceived and have the reactor
deregister the fd corresponding to the transport that returned a
deferred until the deferred fires, this is a less finegrined solution
but it's quite handy to code with and it would match the Nevow style of
waiting deferreds

I could try to workaround in my app by stacking some local buffering
with removeReader in the reactor, but it's probably simpler to fix
twisted for it instead.

There must be a way to throttle the input at the kernel level, the recv
syscall must not be called while the deferred is outstanding.

Please help thanks, I'm stuck on this right now...



From foom at fuhm.net  Sun Feb 20 22:08:43 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 21 Feb 2005 00:08:43 -0500
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221045016.GQ7247@opteron.random>
References: <20050221045016.GQ7247@opteron.random>
Message-ID: <A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>


On Feb 20, 2005, at 11:50 PM, Andrea Arcangeli wrote:

> There must be a way to throttle the input at the kernel level, the recv
> syscall must not be called while the deferred is outstanding.
>
> Please help thanks, I'm stuck on this right now...


I assume you're using NetstringReceiver? You want to implement the 
Producer interface: pauseProducing/resumeProducing/stopProducing, 
similar to how LineReceiver implements it. (That is, submit a patch to 
NetstringReceiver implementing it).  LineReceiver's pauseProducing does 
exactly what you want: 1) stops the socket from being read more and 2) 
doesn't call lineReceived any more even if there are more lines already 
buffered.

James




From andrew-twisted at puzzling.org  Sun Feb 20 22:13:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 21 Feb 2005 16:13:53 +1100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221045016.GQ7247@opteron.random>
References: <20050221045016.GQ7247@opteron.random>
Message-ID: <20050221051353.GN1374@localhost.localdomain>

On Mon, Feb 21, 2005 at 05:50:16AM +0100, Andrea Arcangeli wrote:
[...]
> 
> The example in the docs is like this:
> 
> -------------------------
> class FingerProtocol(basic.LineReceiver):
>     def lineReceived(self, user):
>         self.factory.getUser(user
>         ).addErrback(lambda _: "Internal error in server"
>         ).addCallback(lambda m:
>             (self.transport.write(m+"\r\n"),
>              self.transport.loseConnection()))
> [..]
> we would have to fetch result from a remote Oracle? Or from the web?
> -------------------------
> 
> But as far as I can tell the above also is broken and it won't wait for
> the deferred to fire, so two of those queries could be invoked if the
> client side is malicious and it sends two lines in one packet and that
> could screwup the server. It'll work only as long as the clients aren't
> malicious.

I don't think it matters if the two lines arrive in the same packet or not;
if the lines arrive before the getUser deferred fires, it will fire multiple
queries, regardless of the exact packets involved.  In this case maybe a
flag should be in the protocol after the first lineReceived event... any
future rawDataReceived events (after call self.setRawMode()) could then be
ignored.  Or if you're more paranoid, it could drop the connection and try
cancel the in-progress getUser operation.

> I really can't see how the reactor could ever wait for the deferred
> returned by GetUser and how could lineReceived being throttled in the
> above example. So I think the above example needs fixing too.
> 
> I need one of those below two solutions:
> 
> 1) something like protocol.transport.removeReader() to call before
[...]

I think the transport's pauseProducing call will do what you want, here.
And resumeProducing when you're ready again.

-Andrew.




From andrew-twisted at puzzling.org  Sun Feb 20 22:21:06 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 21 Feb 2005 16:21:06 +1100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
References: <20050221045016.GQ7247@opteron.random>
	<A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <20050221052106.GO1374@localhost.localdomain>

On Mon, Feb 21, 2005 at 12:08:43AM -0500, James Y Knight wrote:
[...]
> NetstringReceiver implementing it).  LineReceiver's pauseProducing does 
> exactly what you want: 1) stops the socket from being read more and 2) 
> doesn't call lineReceived any more even if there are more lines already 
> buffered.

Ooh, I didn't know LineReceiver had that feature.  Nice!

-Andrew.




From andrea at cpushare.com  Mon Feb 21 08:33:32 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 16:33:32 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
References: <20050221045016.GQ7247@opteron.random>
	<A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <20050221153332.GR7247@opteron.random>

On Mon, Feb 21, 2005 at 12:08:43AM -0500, James Y Knight wrote:
> 
> On Feb 20, 2005, at 11:50 PM, Andrea Arcangeli wrote:
> 
> >There must be a way to throttle the input at the kernel level, the recv
> >syscall must not be called while the deferred is outstanding.
> >
> >Please help thanks, I'm stuck on this right now...
> 
> 
> I assume you're using NetstringReceiver? You want to implement the 
> Producer interface: pauseProducing/resumeProducing/stopProducing, 
> similar to how LineReceiver implements it. (That is, submit a patch to 
> NetstringReceiver implementing it).  LineReceiver's pauseProducing does 
> exactly what you want: 1) stops the socket from being read more and 2) 
> doesn't call lineReceived any more even if there are more lines already 
> buffered.

I didn't know about this linereceiver feature, very nice. I'm using
int32stringreceiver which misses it like netstringreceiver (I was
definitely sure something was missing in twisted after reading all the
code of int32stringreceiver), so I'll try to implement it following the
linereceiver example.

Many thanks to get me on the right track!



From andrea at cpushare.com  Mon Feb 21 08:33:37 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 16:33:37 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221052106.GO1374@localhost.localdomain>
References: <20050221045016.GQ7247@opteron.random>
	<A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
	<20050221052106.GO1374@localhost.localdomain>
Message-ID: <20050221153337.GS7247@opteron.random>

On Mon, Feb 21, 2005 at 04:21:06PM +1100, Andrew Bennetts wrote:
> On Mon, Feb 21, 2005 at 12:08:43AM -0500, James Y Knight wrote:
> [...]
> > NetstringReceiver implementing it).  LineReceiver's pauseProducing does 
> > exactly what you want: 1) stops the socket from being read more and 2) 
> > doesn't call lineReceived any more even if there are more lines already 
> > buffered.
> 
> Ooh, I didn't know LineReceiver had that feature.  Nice!

Very nice indeed.



From andrea at cpushare.com  Mon Feb 21 08:39:07 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 16:39:07 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221051353.GN1374@localhost.localdomain>
References: <20050221045016.GQ7247@opteron.random>
	<20050221051353.GN1374@localhost.localdomain>
Message-ID: <20050221153907.GT7247@opteron.random>

On Mon, Feb 21, 2005 at 04:13:53PM +1100, Andrew Bennetts wrote:
> On Mon, Feb 21, 2005 at 05:50:16AM +0100, Andrea Arcangeli wrote:
> [...]
> > 
> > The example in the docs is like this:
> > 
> > -------------------------
> > class FingerProtocol(basic.LineReceiver):
> >     def lineReceived(self, user):
> >         self.factory.getUser(user
> >         ).addErrback(lambda _: "Internal error in server"
> >         ).addCallback(lambda m:
> >             (self.transport.write(m+"\r\n"),
> >              self.transport.loseConnection()))
> > [..]
> > we would have to fetch result from a remote Oracle? Or from the web?
> > -------------------------
> > 
> > But as far as I can tell the above also is broken and it won't wait for
> > the deferred to fire, so two of those queries could be invoked if the
> > client side is malicious and it sends two lines in one packet and that
> > could screwup the server. It'll work only as long as the clients aren't
> > malicious.
> 
> I don't think it matters if the two lines arrive in the same packet or not;
> if the lines arrive before the getUser deferred fires, it will fire multiple
> queries, regardless of the exact packets involved.  In this case maybe a
> flag should be in the protocol after the first lineReceived event... any

Well, it will raise an exception in transport.write at the very least,
in theory unhandled exceptions shouldn't happen. But the reason I
suggested to fix it, it to get people get the right mindset, unless they
know what they're doing, they should always call
LineReceiver.pauseProducing before executing the getUser(user),
otherwise a _real_ app that copied the above code, may get wrong for
more than just an exception.

> I think the transport's pauseProducing call will do what you want, here.
> And resumeProducing when you're ready again.

Yes, if I were using a unbuffered input.

Thanks a lot for the help!



From andrea at cpushare.com  Mon Feb 21 10:46:18 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 18:46:18 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221153332.GR7247@opteron.random>
References: <20050221045016.GQ7247@opteron.random>
	<A83F9594-83C6-11D9-9DB9-000A95A50FB2@fuhm.net>
	<20050221153332.GR7247@opteron.random>
Message-ID: <20050221174618.GX7247@opteron.random>

On Mon, Feb 21, 2005 at 04:33:32PM +0100, Andrea Arcangeli wrote:
> code of int32stringreceiver), so I'll try to implement it following the
> linereceiver example.

Ok here we go, I even found a severe bug in the linereceiver code and I
fixed it as well. The bug in linereceiver happens like this:

	resumeProducing()
		calls self.transport.resumeProducing
		calls self.dataReceived
			calls self.stringReceived
				calls self.stopProducing
					calls self.transport.stopProducing
					runs some sql query again
		calls self.transport.resumeProducing <- BUG, invalidated the above stopProducing

The above bug would for sure screwup two sql queries in a raw (i.e.
the deferred callback executing another sql query). Fix is the below one
liner, it's enough to call dataReceived as the last thing in
resumeProducing (I assume for the lower layer the effect of
self.transport.resumeProducing; self.transport.stopProducing will be a
noop as long as we never schedule in between, i.e. never return in
between)

Please checkin the below into trunk. My testcase now passes perfectly
(I'll leave the debug code live so that if something goes wrong I get an
exception and the client is disconnected). I was too lazy to implement
for netstringreceiver (to me netstring receiver looks mostly a waste of
bandwidth and an unnecessary complexity ;). I guess netstring recevier
is more ngrep friendy, but I can't debug with ngrep anyway since it's
all under ssl with certificate validation here. But at least now the
reentrancy bug is fixed and it should be easy to extend to
nestringreceiver if needed.

Thanks for the help!

Index: Twisted/twisted/protocols/basic.py
===================================================================
--- Twisted/twisted/protocols/basic.py	(revision 13001)
+++ Twisted/twisted/protocols/basic.py	(working copy)
@@ -166,9 +166,23 @@
         """
         return error.ConnectionLost('Line length exceeded')
     
+class PauseProducer(object):
+    paused = False
 
+    def pauseProducing(self):
+        self.paused = True
+        self.transport.pauseProducing()
 
-class LineReceiver(protocol.Protocol):
+    def resumeProducing(self):
+        self.paused = False
+        self.transport.resumeProducing()
+        self.dataReceived('')
+
+    def stopProducing(self):
+        self.paused = True
+        self.transport.stopProducing()
+
+class LineReceiver(protocol.Protocol, PauseProducer):
     """A protocol that receives lines and/or raw data, depending on mode.
     
     In line mode, each line that's received becomes a callback to
@@ -188,7 +202,6 @@
     __buffer = ''
     delimiter = '\r\n'
     MAX_LENGTH = 16384
-    paused = False
     
     def clearLineBuffer(self):
         """Clear buffered data."""
@@ -279,21 +292,8 @@
         """
         return self.transport.loseConnection()
 
-    def pauseProducing(self):
-        self.paused = True
-        self.transport.pauseProducing()
 
-    def resumeProducing(self):
-        self.paused = False
-        self.dataReceived('')
-        self.transport.resumeProducing()
-
-    def stopProducing(self):
-        self.paused = True
-        self.transport.stopProducing()
-
-
-class Int32StringReceiver(protocol.Protocol):
+class Int32StringReceiver(protocol.Protocol, PauseProducer):
     """A receiver for int32-prefixed strings.
 
     An int32 string is a string prefixed by 4 bytes, the 32-bit length of
@@ -314,7 +314,7 @@
         """Convert int32 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 3:
+        while len(self.recvd) > 3 and not self.paused:
             length ,= struct.unpack("!i",self.recvd[:4])
             if length > self.MAX_LENGTH:
                 self.transport.loseConnection()
@@ -331,7 +331,7 @@
         self.transport.write(struct.pack("!i",len(data))+data)
 
 
-class Int16StringReceiver(protocol.Protocol):
+class Int16StringReceiver(protocol.Protocol, PauseProducer):
     """A receiver for int16-prefixed strings.
 
     An int16 string is a string prefixed by 2 bytes, the 16-bit length of
@@ -351,7 +351,7 @@
         """Convert int16 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 1:
+        while len(self.recvd) > 1 and not self.paused:
             length = (ord(self.recvd[0]) * 256) + ord(self.recvd[1])
             if len(self.recvd) < length+2:
                 break



From glyph at divmod.com  Mon Feb 21 13:47:57 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 21 Feb 2005 20:47:57 GMT
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221174618.GX7247@opteron.random>
Message-ID: <20050221204757.12282.856735952.divmod.quotient.9108@ohm>

On Mon, 21 Feb 2005 18:46:18 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:

> Ok here we go, I even found a severe bug in the linereceiver code and I
> fixed it as well. The bug in linereceiver happens like this:

Any chance that you could include some unit tests for the behavior you're expecting?  I think it might need to be fixed a different way.  For example:

> Index: Twisted/twisted/protocols/basic.py
> ===================================================================
> --- Twisted/twisted/protocols/basic.py	(revision 13001)
> +++ Twisted/twisted/protocols/basic.py	(working copy)
     .
     .
     .
>          self.recvd = self.recvd + recd
> -        while len(self.recvd) > 1:
> +        while len(self.recvd) > 1 and not self.paused:

This seems like it could lead to some unpleasantly large (i.e. quadratic-time concatenation) buffers strings being left around if you pause one of these receivers and then forget to unpause it, or even just if your peer happens to be sending data very rapidly.



From andrea at cpushare.com  Mon Feb 21 14:36:44 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 21 Feb 2005 22:36:44 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221204757.12282.856735952.divmod.quotient.9108@ohm>
References: <20050221174618.GX7247@opteron.random>
	<20050221204757.12282.856735952.divmod.quotient.9108@ohm>
Message-ID: <20050221213644.GD7247@opteron.random>

On Mon, Feb 21, 2005 at 08:47:57PM +0000, glyph at divmod.com wrote:
> On Mon, 21 Feb 2005 18:46:18 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
> 
> > Ok here we go, I even found a severe bug in the linereceiver code and I
> > fixed it as well. The bug in linereceiver happens like this:
> 
> Any chance that you could include some unit tests for the behavior
> you're expecting?  I think it might need to be fixed a different way.
> For example:

Using the echoserver/client as base should be good enough to test this.
>From the client send a flood of lines, and from the server call
pauseProducing() after the first line has been received. Then verify the
server doesn't receive the other lines and that they sit in the tcp recv
queue.

> > -        while len(self.recvd) > 1:
> > +        while len(self.recvd) > 1 and not self.paused:
> 
> This seems like it could lead to some unpleasantly large (i.e.
> quadratic-time concatenation) buffers strings being left around if you
> pause one of these receivers and then forget to unpause it, or even

Won't the data be freed along with the protocol when the connection is
closed? The protocol should go away when the connection is closed.

> just if your peer happens to be sending data very rapidly.

The high bound of in flight receive data for each int32 protocol is set
to 99999 (protocol.MAX_LENGTH), and the reactor will read with a limited
buffer too. So I don't see any problem as long as
transport.pauseProducing() does what's expected to do (i.e. to stop
polling the socket and to stop receiving data from the wire).

Anyway if there's still a problem, let's ignore my problem, and let's
only focus on the LineReceiver implementation that is already in current
twisted. As long as LineReceiver works my patch is going to be fine.

There was a reentrancy bug in LineReceiver but I already fixed it.



From exarkun at divmod.com  Mon Feb 21 20:33:22 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 22 Feb 2005 03:33:22 GMT
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050221213644.GD7247@opteron.random>
Message-ID: <20050222033322.12282.2037604333.divmod.quotient.9663@ohm>

On Mon, 21 Feb 2005 22:36:44 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
>On Mon, Feb 21, 2005 at 08:47:57PM +0000, glyph at divmod.com wrote:
> > On Mon, 21 Feb 2005 18:46:18 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
> > 
> > > Ok here we go, I even found a severe bug in the linereceiver code and I
> > > fixed it as well. The bug in linereceiver happens like this:
> > 
> > Any chance that you could include some unit tests for the behavior
> > you're expecting?  I think it might need to be fixed a different way.
> > For example:
> 
> Using the echoserver/client as base should be good enough to test this.
> >From the client send a flood of lines, and from the server call
> pauseProducing() after the first line has been received. Then verify the
> server doesn't receive the other lines and that they sit in the tcp recv
> queue.

  That's not a unit test.  Unit tests are described here:

    http://c2.com/cgi/wiki?UnitTest

  Jp



From andrea at cpushare.com  Mon Feb 21 20:48:43 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 22 Feb 2005 04:48:43 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050222033322.12282.2037604333.divmod.quotient.9663@ohm>
References: <20050221213644.GD7247@opteron.random>
	<20050222033322.12282.2037604333.divmod.quotient.9663@ohm>
Message-ID: <20050222034843.GE7247@opteron.random>

On Tue, Feb 22, 2005 at 03:33:22AM +0000, Jp Calderone wrote:
>   That's not a unit test.  Unit tests are described here:
> 
>     http://c2.com/cgi/wiki?UnitTest

I've no time to write it sorry.



From andrew-twisted at puzzling.org  Mon Feb 21 21:35:40 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Feb 2005 15:35:40 +1100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050222034843.GE7247@opteron.random>
References: <20050221213644.GD7247@opteron.random>
	<20050222033322.12282.2037604333.divmod.quotient.9663@ohm>
	<20050222034843.GE7247@opteron.random>
Message-ID: <20050222043540.GX1374@localhost.localdomain>

On Tue, Feb 22, 2005 at 04:48:43AM +0100, Andrea Arcangeli wrote:
> On Tue, Feb 22, 2005 at 03:33:22AM +0000, Jp Calderone wrote:
> >   That's not a unit test.  Unit tests are described here:
> > 
> >     http://c2.com/cgi/wiki?UnitTest
> 
> I've no time to write it sorry.

I've filed http://twistedmatrix.com/bugs/issue899 so this issue doesn't get
forgotten.

-Andrew.




From andrea at cpushare.com  Tue Feb 22 10:12:30 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 22 Feb 2005 18:12:30 +0100
Subject: [Twisted-Python] how to stop dataReceived while waiting a
	deferred to fire?
In-Reply-To: <20050222043540.GX1374@localhost.localdomain>
References: <20050221213644.GD7247@opteron.random>
	<20050222033322.12282.2037604333.divmod.quotient.9663@ohm>
	<20050222034843.GE7247@opteron.random>
	<20050222043540.GX1374@localhost.localdomain>
Message-ID: <20050222171230.GN7247@opteron.random>

On Tue, Feb 22, 2005 at 03:35:40PM +1100, Andrew Bennetts wrote:
> I've filed http://twistedmatrix.com/bugs/issue899 so this issue doesn't get
> forgotten.

Thanks a lot!

What the pauseProducing does is fine for my objective of stopping the
client and to restart it from both errback/callback, but what it does is
possibly too aggressive.

On the lines of glyph's email, sometime what could be needed is an
option to _only_ mask the POLLIN, not necessairly all other bitflags, so
that I could still receive a disconnect event.

In some ways it might be good not to get a disconnect during a deferred,
but OTOH the fact it doesn't notice a disconnect, prevents to leave the
pauseProducing enabled for an extended period of time, while I could
really do that in theory (I can't do that or I would lose the disconnect
event with pauseProducing).

But overall this would be an additional (minor) feature, quite
orthogonal with the "hard" approach of pauseProducing. And having the
API of int32/int16 in sync with linereceiver sounds a better approach
for the short term, plus the reentrancy bugfix sounds good to have.

Thanks everyone for the help and sorry for not having much time to
provide unit test.



From boomberschloss at yahoo.com  Wed Feb 23 08:39:47 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Wed, 23 Feb 2005 07:39:47 -0800 (PST)
Subject: [Twisted-Python] some general questions
Message-ID: <20050223153947.34358.qmail@web53102.mail.yahoo.com>

Hello,

I'm considering to write a commercial network
application in Twisted, and would like to understand
it a little better. I have several questions for which
I didn't find answers by skimming over the
documentation. I'd be happy to add them to the FAQ
later!

1. I've used Pyro in the past for networking in
Python, and it has a nice name server that enables
each part of the application know the others by acting
as a central directory of server addresses. Is there
anything comparable in Twisted, or maybe a different
idiom, other than specifying explicitly in the client
configuration the addresses of servers?

2. Pyro also uses a UDP broadcast mechanism to make
the name server accessible from every computer in a
network, which relieves clients from requiring an
explicit specification of the name server's location,
which makes it possible to write more friendly,
out-of-the-box applications. Is there an
implementation of such a thing in Twisted? If not, how
complicated is it to make?

3. In the howtos, all client logic is defined before
running a reactor (in the protocol or using
deferreds); In the case of a GUI client, I would like
communication with servers to be trigerred by user
actions. How do I define such events?

4. How do I make clients that are also servers? For
example, a GUI that acts as a front-end to remote
servers, but also accepts random requests (such as
chat).

5. It is often desired to send a message to a remote
server without requiring any response other than a
confirmation that the message was sent. In a previous
project, I made a mechanism that accepts such
messages, and tries to send them periodically until it
succeeds. The sending function is not concerned with
the consequences of the request because it is assured
that the message with be eventually sent, thus it can
send such messages using a simple function call, and
without worrying about the results (i.e. catching
exceptions, or adding errbacks). Is there anything
comparable in Twisted?

6. As I understand it there are three ways to
construct a Twisted application: (i) writing a tap
plug-in (I think) and using mktap, then running it
with twistd, (ii) writing an application configuration
file (tac), then running with twistd, and (iii) making
a runnable script using reactor.run. What are the
benefits of writing a tap plug-in compared with an
application configuration file, and what are the
benefits of using twistd compared with making an
executable script?

7. I want to eventually produce a stand-alone
installable application that will be expected to run
out-of-the-box. I thought about using py2exe, but
couldn't find much information about using it and
Twisted together. Are there other common methods to
achieve stand-aloneness with Twisted?

Thanks,

Joe



		
__________________________________ 
Do you Yahoo!? 
Read only the mail you want - Yahoo! Mail SpamGuard. 
http://promotions.yahoo.com/new_mail 



From kid at kendermedia.com  Wed Feb 23 09:45:16 2005
From: kid at kendermedia.com (Kevin Dangoor)
Date: Wed, 23 Feb 2005 11:45:16 -0500
Subject: [Twisted-Python] some general questions
In-Reply-To: <20050223153947.34358.qmail@web53102.mail.yahoo.com>
References: <20050223153947.34358.qmail@web53102.mail.yahoo.com>
Message-ID: <421CB31C.1050609@kendermedia.com>

Joachim Boomberschloss wrote:

>1. I've used Pyro in the past for networking in
>Python, and it has a nice name server that enables
>each part of the application know the others by acting
>as a central directory of server addresses. Is there
>anything comparable in Twisted, or maybe a different
>idiom, other than specifying explicitly in the client
>configuration the addresses of servers?
>  
>
Twisted Spread offers the Perspective Broker, which I think would be 
similar to Pyro:
http://twistedmatrix.com/products/spread

It's async, which is probably a big difference in programming style. 
What I've read about Pyro also seems to imply shuttling of code back and 
forth which is not something PB does.

>2. Pyro also uses a UDP broadcast mechanism to make
>the name server accessible from every computer in a
>network, which relieves clients from requiring an
>explicit specification of the name server's location,
>which makes it possible to write more friendly,
>out-of-the-box applications. Is there an
>implementation of such a thing in Twisted? If not, how
>complicated is it to make?
>  
>
Some people have integrated pyzeroconf with twisted. Zeroconf (aka 
Rendezvous) is a protocol for discovering services on your network (it's 
how Apple's products like iTunes work).

>3. In the howtos, all client logic is defined before
>running a reactor (in the protocol or using
>deferreds); In the case of a GUI client, I would like
>communication with servers to be trigerred by user
>actions. How do I define such events?
>  
>
Not sure I understand the question here. I don't believe that using 
Twisted changes how you receive your events. It changes all of your 
network access to be asynchronous, but otherwise the rest of your code 
sure work as you're used to.

>4. How do I make clients that are also servers? For
>example, a GUI that acts as a front-end to remote
>servers, but also accepts random requests (such as
>chat).
>  
>
You just set up your client software to listen on a port, providing a 
particular service.

>7. I want to eventually produce a stand-alone
>installable application that will be expected to run
>out-of-the-box. I thought about using py2exe, but
>couldn't find much information about using it and
>Twisted together. Are there other common methods to
>achieve stand-aloneness with Twisted?
>  
>
py2exe works fine with Twisted (as does py2app on the Mac)

Kevin



From maoy at cis.upenn.edu  Wed Feb 23 15:00:31 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Wed, 23 Feb 2005 17:00:31 -0500 (EST)
Subject: [Twisted-Python] Where to catch ssl error exception?
Message-ID: <Pine.LNX.4.61.0502231658510.18043@forty-thieves.cis.upenn.edu>

Suppose I'm the ssl server and a client didn't follow ssl protocol 
somewhere, I can get an exception like following. The qustion is how can 
I catch it?

Yun


2005/02/23 16:49 EST [HTTPChannel,21907,xx.xxx.xx.x] Traceback (most 
recent call last):
           File "/usr/lib/python2.3/site-packages/twisted/python/log.py", 
line 65, in callWithLogger
             callWithContext({"system": lp}, func, *args, **kw)
           File "/usr/lib/python2.3/site-packages/twisted/python/log.py", 
line 52, in callWithContext
             return context.call({ILogContext: newCtx}, func, *args, **kw)
           File 
"/usr/lib/python2.3/site-packages/twisted/python/context.py", line 43, in 
callWithContext
             return func(*args,**kw)
           File 
"/usr/lib/python2.3/site-packages/twisted/internet/default.py", line 535, 
in _doReadOrWrite
             why = getattr(selectable, method)()
         --- <exception caught here> ---
           File "/usr/lib/python2.3/site-packages/twisted/internet/tcp.py", 
line 98, in doRead
             return Connection.doRead(self)
           File "/usr/lib/python2.3/site-packages/twisted/internet/tcp.py", 
line 239, in doRead
             data = self.socket.recv(self.bufferSize)
         OpenSSL.SSL.Error: [('SSL routines', 'SSL23_READ', 'ssl handshake 
failure')]


Yun




From exarkun at divmod.com  Wed Feb 23 21:09:47 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 24 Feb 2005 04:09:47 GMT
Subject: [Twisted-Python] Where to catch ssl error exception?
In-Reply-To: <Pine.LNX.4.61.0502231658510.18043@forty-thieves.cis.upenn.edu>
Message-ID: <20050224040947.12282.769440872.divmod.quotient.13795@ohm>

On Wed, 23 Feb 2005 17:00:31 -0500 (EST), Yun Mao <maoy at cis.upenn.edu> wrote:
>Suppose I'm the ssl server and a client didn't follow ssl protocol 
> somewhere, I can get an exception like following. The qustion is how can 
> I catch it?
> 

  Twisted 1.3 doesn't make this easily possible.  You could jump through 
some hoops to notice the SSL.Error with a custom log observer in conjunction
with a connectionLost callback.  In 2.0, connectionLost will simply be handed 
an error indicating the SSL problem and nothing will be logged by default.  
Short of replacing the default log observer entirely with one which does not 
log SSL errors, there is no way to prevent tracebacks like the one you included
from ending up in the log.  These tracebacks do not indicate any further problem 
than the one they describe.  That is to say, something has gone wrong on the SSL
layer, and the connection is going to be lost no matter what you do; it is 
unfortunate that the SSL error cannot be silenced, but in logging it, Twisted is 
indicating nothing more serious than that the connection is about to be lost.

  If you only need notification of the lost connection, not details regarding 
the specifics of the SSL failure, connectionLost in 1.3 should already provide 
you with enough information.

  Jp



From smilner at trinityz.com  Thu Feb 24 09:43:35 2005
From: smilner at trinityz.com (Steve Milner)
Date: Thu, 24 Feb 2005 11:43:35 -0500
Subject: [Twisted-Python] Help With Twisted as a Client (newbie warning)
In-Reply-To: <1108666158.1129.61.camel@sheriffpony>
References: <4214C58D.6030005@trinityz.com>
	<1108666158.1129.61.camel@sheriffpony>
Message-ID: <421E0437.2070105@trinityz.com>

Itamar Shtull-Trauring wrote:

>On Thu, 2005-02-17 at 11:25 -0500, Steve Milner wrote:
>
>  
>
>>factory.clients = []
>>sslFactory = ClientContextFactory()
>>application = service.Application("xmlclient")
>>reactor.connectSSL("__example__.com", 1026, factory, sslFactory)
>></snip>
>>
>>Is there a way I can access xmlxlient inside application?
>>    
>>
>
>The application object is not used for that (and certainly can't be used
>if it doesn't have a reference to the factory, it doesn't magically get
>one). Hand a reference to the factory to whichever objects wishes to
>control the instance.
>
>
>  
>
Thanks for the reply. I'm not sure I compleatly follow what you mean. 
Doing the following doesn't seem to work as it yeilds  [Failure 
instance: Traceback: exceptions.AttributeError, xmlclient instance has 
no __call__ method .....

<snip>
factory = ClientFactory()

factory.clients = []
sslFactory = ClientContextFactory()
client = xmlclient()
factory.protocol = client
application = service.Application(client)
</snip>

I also tried

<snip>
factory = ClientFactory()

factory.clients = []
sslFactory = ClientContextFactory()
client = xmlclient()
factory.protocol = xmlclient
application = service.Application(client)
</snip>

which connects but seems to be using a different instance of the  
xmlclient object. How can I get access to the xmlclient object inside 
the factory?

Thanks!
Steve



From maoy at cis.upenn.edu  Thu Feb 24 11:25:04 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 24 Feb 2005 13:25:04 -0500 (EST)
Subject: [Twisted-Python] database threads dead
In-Reply-To: <Pine.LNX.4.61.0502181236460.30672@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502181236460.30672@forty-thieves.cis.upenn.edu>
Message-ID: <Pine.LNX.4.61.0502241323260.15953@forty-thieves.cis.upenn.edu>

Once that happened because I restarted my postgres db. Anybody knows 
what's the correct behavior when this happens? Will the dbpool reconnect 
instead of using the old connections?

Yun


On Fri, 18 Feb 2005, Yun Mao wrote:

> Hi, I'm using twisted.enterprise.adbapi and postgres DB. Sometimes, the 
> threads of adbapi just don't respond. There was no error reported as I insert 
> stuff into the database, however nothing was inserted. I had to use kill  -9 
> to kill twistd process. However, the main thread was working properly. This 
> happened randomly. Any clue?
>
> 2.6.10 kernel, ntpl enabled. thx
>
> Yun
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From maoy at cis.upenn.edu  Thu Feb 24 11:29:21 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 24 Feb 2005 13:29:21 -0500 (EST)
Subject: [Twisted-Python] What's the standard way to catch signals in
	twisted?
Message-ID: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>

For example, I want to add some specific handlers SIGHUP, SIGINT in 
addition to what twistd have. How to?

Thanks!

Yun




From troll at pld-linux.org  Thu Feb 24 11:38:26 2005
From: troll at pld-linux.org (Michal Chruszcz)
Date: Thu, 24 Feb 2005 19:38:26 +0100
Subject: [Twisted-Python] database threads dead
In-Reply-To: <Pine.LNX.4.61.0502241323260.15953@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502181236460.30672@forty-thieves.cis.upenn.edu>
	<Pine.LNX.4.61.0502241323260.15953@forty-thieves.cis.upenn.edu>
Message-ID: <200502241938.26874@tintia.doriath>

It seems like on Thursday 24 of February 2005 19:25, Yun Mao typed:
> Once that happened because I restarted my postgres db. Anybody knows
> what's the correct behavior when this happens? Will the dbpool reconnect
> instead of using the old connections?

See my topic "twisted.enterprise.adbapi and connection pool problem" - I had 
the same problem.
-- 
Michal Chruszcz -=- Seen at http://1lo.sanok.pl/~troll/gallery.php



From itamar at itamarst.org  Thu Feb 24 12:20:23 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Feb 2005 14:20:23 -0500
Subject: [Twisted-Python] What's the standard way to catch signals in
	twisted?
In-Reply-To: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>
Message-ID: <1109272823.13530.116.camel@sheriffpony>

On Thu, 2005-02-24 at 13:29 -0500, Yun Mao wrote:
> For example, I want to add some specific handlers SIGHUP, SIGINT in 
> addition to what twistd have. How to?

Do you really want signal handlers, or do you want to do stuff on
shutdown? If you want to do stuff on shutdown, just add code in your
service's stopService.




From maoy at cis.upenn.edu  Thu Feb 24 13:07:00 2005
From: maoy at cis.upenn.edu (Yun Mao)
Date: Thu, 24 Feb 2005 15:07:00 -0500 (EST)
Subject: [Twisted-Python] What's the standard way to catch signals in
	twisted?
In-Reply-To: <1109272823.13530.116.camel@sheriffpony>
References: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>
	<1109272823.13530.116.camel@sheriffpony>
Message-ID: <Pine.LNX.4.61.0502241505350.8412@forty-thieves.cis.upenn.edu>


>
> Do you really want signal handlers, or do you want to do stuff on
> shutdown? If you want to do stuff on shutdown, just add code in your
> service's stopService.
>

Both. E.g, I'd like to reload a couple of configuration files when I 
receive SIGHUP.

Yun




From itamar at itamarst.org  Thu Feb 24 13:22:19 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Feb 2005 15:22:19 -0500
Subject: [Twisted-Python] What's the standard way to catch signals in
	twisted?
In-Reply-To: <Pine.LNX.4.61.0502241505350.8412@forty-thieves.cis.upenn.edu>
References: <Pine.LNX.4.61.0502241326160.15953@forty-thieves.cis.upenn.edu>
	<1109272823.13530.116.camel@sheriffpony>
	<Pine.LNX.4.61.0502241505350.8412@forty-thieves.cis.upenn.edu>
Message-ID: <1109276539.13536.118.camel@sheriffpony>

On Thu, 2005-02-24 at 15:07 -0500, Yun Mao wrote:

> Both. E.g, I'd like to reload a couple of configuration files when I 
> receive SIGHUP

If you just want to replace Twisted's signal handlers, run
signal.signal() as usual in your startService.




From jeff at jamcupboard.co.uk  Fri Feb 25 04:26:50 2005
From: jeff at jamcupboard.co.uk (Jeff Silver)
Date: Fri, 25 Feb 2005 11:26:50 +0000
Subject: [Twisted-Python] Patch to support DNS updates
Message-ID: <H0000065000015a3.1109327814.moses@MHS>

Here is a patch to extend twisted.names to support DNS update messages.
Thanks to those who answered my previous queries.

Attachments:
    update_descr.txt      Description
    authority.py.diff     diff -u of twisted/names/authority.py
    server.py.diff        diff -u of twisted/names/server.py
    tap.py.diff           diff -u of twisted/names/tap.py
    dns.py.diff           diff -u of twisted/protocols/dns.py
-------------- next part --------------
Extension to twisted to implement UPDATE requests
=================================================

Changed files:
    names/authority.py
    names/server.py
    names/tap.py
    protocols/dns.py

Description:

    Updates are accepted for zones for which this server is the
    authority. These updates are applied to the running server.
    If the zones were loaded through the --pyzone or --bindzone
    options, the changes are not written back to disk. If the
    server is run with --nosave, the updates are lost when the
    server shuts down.

    Two new mktap options are added: --pyzonefile and --bindzonefile
    These mean the same as the existing options without the 'file'
    part, except:
        a) At mktap time, the filenames are recorded but the files
           are not read. They are read on server start-up. This
           means that you can edit the files and restart the server
           to implement changes without doing another mktap.
        b) When an update has been applied, the appropriate file
           is renamed by having its serial number appended, and a
           new copy is written. This means that updates persist
           across server restarts, even if --nosave is specified.

Limitations and oddities:

    There is no forwarding of update requests.

    There is no processing of prerequisites.

    There is no permission checking.

    Only SOA, A, and MX records are written to the new files. (Just
    laziness on my part. I only need A records at present.)

    If an error occurs on writing the file, an error is returned
    to the client, but the update survives in the running server.
    (This contravenes section 3.5 of RFC 2136.)

    I haven't done anything to ensure atomicity of operations
    or serialization of updates as described in section 3.7 of
    RFC 2136.

    There seems to be some confusion as to the meaning of the
    fifth (last) field in an SOA record. (O'Reilly's DNS and BIND
    book is itself ambiguous.) This field is now supposed to be
    the negative caching TTL; previously it was the default TTL.
    twisted.names copes correctly with a $TTL line in BIND-format
    files. But it stores the fifth value in 'minimum', and the
    handling of Python source format files doesn't seem to have
    any equivalent to the $TTL line. I've tried to maintain
    consistency with what's already there, but I'm not sure I've
    done the right thing with this.

    I agree with the comment in the code "this might suck" about
    using the source filename as the zone origin, but I haven't
    made any changes to this. I'm not sure what exactly the zone
    origin is supposed to be.
-------------- next part --------------
--- names/authority.py	2004-02-07 17:57:11.000000000 +0000
+++ names/authority.py.new	2005-02-25 09:34:02.725600288 +0000
@@ -161,6 +161,78 @@
                 add.extend(res[1][2])
         return ans, auth, add
 
+    def _trySaveToOriginalFile(self):
+        '''Called after an update.'''
+        soa_rec = self.soa[1]
+        new_serial = int(time.strftime('%Y%m%d%H%M')) - 200000000000
+        if new_serial <= soa_rec.serial:
+            new_serial = soa_rec.serial + 1
+        old_serial = soa_rec.serial
+        soa_rec.serial = new_serial
+        if hasattr(self, 'filename'):
+            tmp_filename = self.filename + '.new'
+            save_filename = '%s.%d' % (self.filename, old_serial)
+            self.saveFile(tmp_filename)
+            os.rename(self.filename, save_filename)
+            os.rename(tmp_filename, self.filename)
+
+    def addRR(self, update):
+        key = str(update.name)
+        try:
+            rrlist = self.records[key]
+        except KeyError:
+            # create new entry
+            rrlist = self.records[key] = []
+        record = update.payload
+        for rec in rrlist:
+            if record == rec:
+                # duplicate. ignore
+                return
+        rrlist.append(record)
+        self._trySaveToOriginalFile()
+
+    def deleteName(self, record):
+        try:
+            del self.records[str(record.name)]
+        except KeyError:
+            return
+        self._trySaveToOriginalFile()
+
+    def deleteRRset(self, record):
+        try:
+            rrlist = self.records[str(record.name)]
+        except KeyError:
+            return
+        index = 0
+        did_it = False
+        while index < length(rrlist):
+            if record.type == rrlist[index].type:
+                del rrlist[index]
+                did_it = True
+            else:
+                index += 1
+        if did_it:
+            self._trySaveToOriginalFile()
+
+    def deleteRR(self, record):
+        try:
+            rrlist = self.records[str(record.name)]
+        except KeyError:
+            return
+        rec_to_delete = record.payload
+        index = 0
+        did_it = False
+        while index < len(rrlist):
+            if rec_to_delete.__class__ == rrlist[index].__class__ \
+                    and rec_to_delete.preference == rrlist[index].preference \
+                    and rec_to_delete.exchange == rrlist[index].exchange:
+                del rrlist[index]
+                did_it = True
+            else:
+                index += 1
+        if did_it:
+            self._trySaveToOriginalFile()
+
 
 class PySourceAuthority(FileAuthority):
     """A FileAuthority that is built up from Python source code."""
@@ -177,6 +249,26 @@
                 self.soa = rr
             self.records.setdefault(rr[0].lower(), []).append(rr[1])
 
+    def saveFile(self, filename):
+        of = file(filename, 'w')
+        names = self.records.keys()
+        names.sort()
+        print >>of, 'zone = ['
+        for name in names:
+            for rec in self.records[name]:
+                print >>of, "    %s('%s'," % (dns.QUERY_TYPES[rec.TYPE], name),
+                if rec.TYPE == dns.SOA:
+                    print >>of, "serial=%d, refresh=%d, retry=%d, expire=%d, minimum=%d)," % \
+                        (rec.serial, rec.refresh, rec.retry, rec.expire, rec.minimum)
+                elif rec.TYPE == dns.A:
+                    print >>of, "'%s')," % rec.dottedQuad()
+                elif rec.TYPE == dns.MX:
+                    print >>of, "%d, '%s')," % (rec.preference, rec.exchange)
+                else:
+                    print >>of, '),'
+        print >>of, ']'
+        of.close()
+
 
     def wrapRecord(self, type):
         return lambda name, *arg, **kw: (name, type(*arg, **kw))
@@ -194,7 +286,7 @@
 
 class BindAuthority(FileAuthority):
     """An Authority that loads BIND configuration files"""
-    
+
     def loadFile(self, filename):
         self.origin = os.path.basename(filename) + '.' # XXX - this might suck
         lines = open(filename).readlines()
@@ -202,6 +294,37 @@
         lines = self.collapseContinuations(lines)
         self.parseLines(lines)
 
+    def saveFile(self, filename):
+        of = file(filename, 'w')
+        soa_rec = self.soa[1]
+        print >>of, '$TTL %d' % soa_rec.ttl
+        print >>of, '%s. IN SOA %s %s (' % (self.soa[0], soa_rec.mname, soa_rec.rname)
+        for val in (soa_rec.serial, soa_rec.refresh, soa_rec.retry, soa_rec.expire, soa_rec.minimum):
+            print >>of, '\t%d' % val
+        print >>of, ')'
+        dotted_orig = '.' + self.origin
+        names = self.records.keys()
+        names.sort()
+        for name in names:
+            reclist = self.records[name]
+            if name.endswith(dotted_orig):
+                name = name[:-len(dotted_orig)]
+            else:
+                name = name + '.'
+            for rec in reclist:
+                if rec.TYPE == dns.SOA:
+                    continue
+                print >>of, '%s' % name,
+                if rec.ttl != soa_rec.ttl:
+                    print >>of, '%d' % (rec.ttl),
+                print >>of, 'IN %s' % dns.QUERY_TYPES[rec.TYPE],
+                if rec.TYPE == dns.A:
+                    print >>of, '%s' % rec.dottedQuad()
+                elif rec.TYPE == dns.MX:
+                    print >>of, '%d %s' % (rec.preference, rec.exchange)
+                else:
+                    print >>of, ''
+        of.close()
 
     def stripComments(self, lines):
         return [
@@ -279,9 +402,6 @@
             raise NotImplementedError, "Record type %r not supported" % type
 
 
-    #
-    # This file ends here.  Read no further.
-    #
     def parseRecordLine(self, origin, ttl, line):
         MARKERS = dns.QUERY_CLASSES.values() + dns.QUERY_TYPES.values()
         cls = 'IN'
-------------- next part --------------
--- names/server.py	2004-03-01 22:54:20.000000000 +0000
+++ names/server.py.new	2005-02-25 09:34:01.529782080 +0000
@@ -40,6 +40,8 @@
 from twisted.internet import protocol, defer
 from twisted.protocols import dns
 from twisted.python import failure, log
+from twisted.names import authority
 
 import resolve, common
 
@@ -47,21 +49,38 @@
     protocol = dns.DNSProtocol
     cache = None
 
-    def __init__(self, authorities = None, caches = None, clients = None, verbose = 0):
-        resolvers = []
+    def __init__(self, authorities = None, bindfilenames=None, pyfilenames=None, caches = None, clients = None, verbose = 0):
+        self.resolvers = []
         if authorities is not None:
-            resolvers.extend(authorities)
+            self.resolvers.extend(authorities)
         if caches is not None:
-            resolvers.extend(caches)
+            self.resolvers.extend(caches)
         if clients is not None:
-            resolvers.extend(clients)
+            self.resolvers.extend(clients)
+
+        # save authority list for use during updates
+        self.authorities = authorities
+
+        self.bindfilenames = bindfilenames
+        self.pyfilenames = pyfilenames
 
         self.canRecurse = not not clients
-        self.resolver = resolve.ResolverChain(resolvers)
         self.verbose = verbose
         if caches:
             self.cache = caches[-1]
 
+    def startFactory(self):
+        for f in self.bindfilenames:
+            new_auth = authority.BindAuthority(f)
+            new_auth.filename = f   # save filename for rewriting file on update
+            self.authorities.append(new_auth)
+            self.resolvers.append(new_auth)
+        for f in self.pyfilenames:
+            new_auth = authority.PySourceAuthority(f)
+            new_auth.filename = f   # save filename for rewriting file on update
+            self.authorities.append(new_auth)
+            self.resolvers.append(new_auth)
+        self.resolver = resolve.ResolverChain(self.resolvers)
 
     def buildProtocol(self, addr):
         p = self.protocol(self)
@@ -159,6 +178,68 @@
             log.msg("Notify message from %r" % (address,))
 
 
+    def handleUpdate(self, message, protocol, address):
+        if self.verbose:
+            log.msg("Update message from %r" % (address,))
+        query = dns.Query(message.zones[0].name.name, dns.SOA)
+        return self.authQuery(query, self.authorities[:], protocol, message, address)
+
+    def authQuery(self, query, auth_list, protocol, message, address):
+        return auth_list[0].query(query).addCallback(
+            self.gotResolverResponseAuth, query, auth_list, protocol, message, address
+        ).addErrback(
+            self.gotResolverErrorAuth, query, auth_list, protocol, message, address
+        )
+
+    def gotResolverResponseAuth(self, (ans, auth, add), query, auth_list, protocol, message, address):
+        if not ans[0].auth:
+            if self.verbose:
+                log.msg("we are not the authority for this domain")
+            message.rCode = dns.REFUSED
+        else:
+            auth = auth_list[0]
+            message.rCode = dns.OK
+            did_update = False
+            zone_class = message.zones[0].cls
+            for update in message.updates:
+                if update.cls == zone_class:
+                    if self.verbose:
+                        log.msg("add %s" % (update,))
+                    auth.addRR(update)
+                    did_update = True
+                elif update.ttl == 0 and update.cls == dns.ANY:
+                    if update.type == dns.ANY:
+                        if self.verbose:
+                            log.msg("delete name %s" % (update,))
+                        auth.deleteName(update)
+                        did_update = True
+                    else:
+                        if self.verbose:
+                            log.msg("delete RRset %s" % (update,))
+                        auth.deleteRRset(update)
+                        did_update = True
+                elif update.ttl == 0 and update.cls == dns.NONE:
+                    if self.verbose:
+                        log.msg("delete RR %s" % (update,))
+                    auth.deleteRR(update)
+                    did_update = True
+                else:
+                    if self.verbose:
+                        log.msg("bad combination of values %s" % (update,))
+                    message.rCode = dns.EFORMAT
+        self.sendReply(protocol, message, address)
+
+    def gotResolverErrorAuth(self, failure, query, auth_list, protocol, message, address):
+        del auth_list[0]
+        if auth_list:
+            # keep going
+            return self.authQuery(query, auth_list, protocol, message, address)
+        if self.verbose:
+            log.msg("domain not found")
+        message.rCode = dns.ENAME
+        self.sendReply(protocol, message, address)
+
+
     def handleOther(self, message, protocol, address):
         message.rCode = dns.ENOTIMP
         self.sendReply(protocol, message, address)
@@ -194,6 +275,8 @@
             self.handleStatus(message, proto, address)
         elif message.opCode == dns.OP_NOTIFY:
             self.handleNotify(message, proto, address)
+        elif message.opCode == dns.OP_UPDATE:
+            self.handleUpdate(message, proto, address)
         else:
             self.handleOther(message, proto, address)
 
-------------- next part --------------
--- names/tap.py	2003-12-05 04:54:03.000000000 +0000
+++ names/tap.py.new	2005-02-25 09:34:02.726600136 +0000
@@ -50,7 +50,9 @@
         usage.Options.__init__(self)
         self['verbose'] = 0
         self.bindfiles = []
+        self.bindfilenames = []
         self.zonefiles = []
+        self.pyfilenames = []
         self.secondaries = []
 
 
@@ -66,6 +68,20 @@
             raise usage.UsageError(filename + ": No such file")
         self.bindfiles.append(filename)
 
+    def opt_bindzonefile(self, filename):
+        """Specify the filename of a BIND9 syntax zone definition to be
+        read at start-up time (not at mktap time)."""
+        if not os.path.exists(filename):
+            raise usage.UsageError(filename + ": No such file")
+        self.bindfilenames.append(filename)
+
+    def opt_pyzonefile(self, filename):
+        """Specify the filename of a Python source zone definition to be
+        read at start-up time (not at mktap time)."""
+        if not os.path.exists(filename):
+            raise usage.UsageError(filename + ": No such file")
+        self.pyfilenames.append(filename)
+
 
     def opt_secondary(self, ip_domain):
         """Act as secondary for the specified domain, performing
@@ -119,7 +135,7 @@
     if config['recursive']:
         cl.append(client.createResolver(resolvconf=config['resolv-conf']))
 
-    f = server.DNSServerFactory(config.zones, ca, cl, config['verbose'])
+    f = server.DNSServerFactory(config.zones, config.bindfilenames, config.pyfilenames, ca, cl, config['verbose'])
     p = dns.DNSDatagramProtocol(f)
     f.noisy = 0
     ret = service.MultiService()
-------------- next part --------------
--- protocols/dns.py	2004-02-25 20:16:12.000000000 +0000
+++ protocols/dns.py.new	2005-02-25 09:34:01.528782232 +0000
@@ -88,7 +88,9 @@
 
     33: 'SRV',
     
-    38: 'A6', 39: 'DNAME'
+    38: 'A6', 39: 'DNAME',
+
+    255: 'ANY',  # for updates. Is this the right place, or should parsing be different for queries/updates?
 }
 
 # "Extended" queries (Hey, half of these are deprecated, good job)
@@ -105,7 +107,7 @@
 
 
 QUERY_CLASSES = {
-    1: 'IN',  2: 'CS',  3: 'CH',  4: 'HS',  255: 'ANY'
+    1: 'IN',  2: 'CS',  3: 'CH',  4: 'HS',  254: 'NONE',  255: 'ANY'
 }
 REV_CLASSES = dict([
     (v, k) for (k, v) in QUERY_CLASSES.items()
@@ -116,10 +118,11 @@
 
 
 # Opcodes
-OP_QUERY, OP_INVERSE, OP_STATUS, OP_NOTIFY = range(4)
+OP_QUERY, OP_INVERSE, OP_STATUS, OP_NOTIFY, OP_UNKNOWN, OP_UPDATE = range(6)
 
 # Response Codes
-OK, EFORMAT, ESERVER, ENAME, ENOTIMP, EREFUSED = range(6)
+OK, EFORMAT, ESERVER, ENAME, ENOTIMP, EREFUSED, YXDOMAIN, YXRRSET, NXRRSET = range(9)
+
 
 class IRecord(components.Interface):
     """An single entry in a zone of authority.
@@ -454,7 +457,8 @@
 
     def decode(self, strio, length = None):
         self.name = Name()
-        self.name.decode(strio)
+        if length:
+            self.name.decode(strio)
     
 
     def __hash__(self):
@@ -462,6 +466,9 @@
 
 
 # Kinds of RRs - oh my!
+class Record_ANY(SimpleRecord):  # for updates. Is this the right place, or should parsing be different for queries/updates?
+    TYPE = ''
+
 class Record_NS(SimpleRecord):
     TYPE = NS
 
@@ -1004,6 +1011,7 @@
         self.recAv = ( byte4 >> 7 ) & 1
         self.rCode = byte4 & 0xf
 
+        # query
         self.queries = []
         for i in range(nqueries):
             q = Query()
@@ -1017,6 +1025,12 @@
         for (l, n) in items:
             self.parseRecords(l, n, strio)
 
+        if self.opCode == OP_UPDATE:
+            # rename fields for readability
+            self.zones = self.queries
+            self.prereqs = self.answers
+            self.updates = self.authority
+
 
     def parseRecords(self, list, num, strio):
         for i in range(num):

From itamar at itamarst.org  Fri Feb 25 09:05:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 25 Feb 2005 11:05:32 -0500
Subject: [Twisted-Python] Patch to support DNS updates
In-Reply-To: <H0000065000015a3.1109327814.moses@MHS>
References: <H0000065000015a3.1109327814.moses@MHS>
Message-ID: <1109347532.13530.149.camel@sheriffpony>

Thanks! Could you add this patch to http://twistedmatrix.com/bugs/
please?




From ken at kenkinder.com  Fri Feb 25 12:45:42 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Fri, 25 Feb 2005 13:45:42 -0600
Subject: [Twisted-Python] Dealing with an intermittent PB server
In-Reply-To: <7a59f025050215195672e3698c@mail.gmail.com>
References: <7a59f025050215195672e3698c@mail.gmail.com>
Message-ID: <421F8066.4060203@kenkinder.com>

For what it's worth, I had a similar need and I don't pass objects 
around on PB (just data structures), so this class works out well for 
me. If the remote server isn't up or goes down, the returned deferred 
just waits. I tried to take out all the logic that relates to my 
application.

-Ken

class SimplePBProxy(object):
    """
    A simple U{Perspective 
Broker<http://twistedmatrix.com/documents/current/howto/pb-intro>} proxy for
    remote servers. This works similar to the xmlrpc proxy, but uses 
Perspective
    Broker.
   
    Example::
       
        hostname = 'remotebox'
        pb_port = 5053
        proxy = SimplePBProxy(hostname, pb_port)
        deferred_object = proxy.callRemote('somecall')
   
    B{NOTE:} Unlike the default Perspective Broker behavior, this 
doesn't wig out
    if the connection is lost. Deferred objects simple won't be returned 
until
    the remote server comes back up. Likewise, if the remote server 
isn't yet up,
    the deferred will simply be held open until the remote box is up.
    """
    def __init__(self, host, port):
        """
        @param host: Host to connect to.
        @rtype host: String
       
        @param port: Port PB is on.
        @rtype port: Integer
        """
        self.host = host
        self.port = port
        self.pending_calls = []

        self.rootobj = None
        self.connect()

    def connect(self):
        """
        Used internally. Connects to remote server.
        """
        def handle_error(failure):
            reactor.callLater(1, self.connect)
        factory = pb.PBClientFactory()
        factory.unsafeTracebacks = 1
        reactor.connectTCP(self.host, self.port, factory)
        d = factory.getRootObject()
        d.addCallback(self._set_root_object)
        d.addErrback(handle_error)
        return d

    def _set_root_object(self, rootobj):
        self.rootobj = rootobj
       
        def pending_act(data, deferred):
            deferred.callback(data)
        def pending_err(failure, deferred):
            deferred.errback(failure)

        for deferred, method, args, kwargs in self.pending_calls:
            d = self.callRemote(method, *args, **kwargs)
            d.addCallback(pending_act, deferred)
            d.addErrback(pending_err, deferred)
        self.pending_calls = []

    def callRemote(self, method, *args, **kwargs):
        """
        Call method on remote API. Method is a string. Any additional 
arguments
        and keyword arguments are passed to that method as arguments and
        keyword arguments.
        """
        if not self.rootobj:
            d = Deferred()
            self.pending_calls.append((d, method, args, kwargs))
            self.connect()
            return d

        try:
            d = self.rootobj.callRemote(method, *args, **kwargs)
            d.addErrback(self._error_back, method, args, kwargs)
            return d
        except pb.DeadReferenceError:
            self.rootobj = None
            d = Deferred()
            self.pending_calls.append((d, method, args, kwargs))
            self.connect()
            return d
   
    def _error_back(self, failure, method, args, kwargs):
        if failure.type is twisted.spread.pb.PBConnectionLost:
            self.rootobj = None
            d = Deferred()
            self.pending_calls.append((d, method, args, kwargs))
            self.connect()
            return d
        else:
            return failure


Dave Cook wrote:

>I'm rendering the results of a remote method call:
>
>    def data_tableList(self, ctx, data):
>        ...
>        d =   self.pbClientFactory.login(creds)
>        d.addCallback(lambda object: object.callRemote("foo"))
>        return d
> 
>Works, great if the PB server is up,  but if it's down the browser
>just hangs.  Is there a correct way to check that the connection is up
>at this point?  This works:
>
>       if self.pbClientFactory._broker:
>            d = self.pbClientFactory.login(creds)
>            d.addCallback(lambda object: object.callRemote("getAlertReports"))
>        else:
>            d = []
>        return d
>
>but seems like a hack.  Also, ideally, I'd like to attempt a
>reconnection to the PB server at this point if it's not running. 
>What's the best way to do that?
>
>Thanks,
>Dave Cook
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>




From ken at kenkinder.com  Fri Feb 25 12:53:30 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Fri, 25 Feb 2005 13:53:30 -0600
Subject: [Twisted-Python] Timing Out Deferreds
Message-ID: <421F823A.9040500@kenkinder.com>

I've been trying to figure out an intelligent way of timing out 
deferreds. I'd like something like this...

    def myTimeoutMethod(...):
        ...

    d = whatnot()
    d.addCallback(...)
    d.addErrback(...)
    d.addTimeout(5, myTimeoutMethod)

There are obvious problems with trying to interrupt an existing 
deferred, but I was hoping there might be just some way of discarding 
its data when it finally does return, or dereferencing the deferred 
object itself from the reactor, which might just let it clean itself up 
on its own.

Thoughts?

-Ken




From foom at fuhm.net  Fri Feb 25 14:22:47 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 25 Feb 2005 16:22:47 -0500
Subject: [Twisted-Python] Timing Out Deferreds
In-Reply-To: <421F823A.9040500@kenkinder.com>
References: <421F823A.9040500@kenkinder.com>
Message-ID: <9b4994889ee170c5895556a856c91ee2@fuhm.net>

On Feb 25, 2005, at 2:53 PM, Ken Kinder wrote:
> I've been trying to figure out an intelligent way of timing out 
> deferreds.

No, a deferred is just a chain of callbacks -- it doesn't really make 
sense to time out a chain of callbacks. You need to time out the 
*source* operation that is planning on eventually calling the deferred. 
The process of killing the source operation ought to additionally cause 
the deferred's errback to be called.

James




From mcfletch at rogers.com  Fri Feb 25 16:27:20 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Fri, 25 Feb 2005 18:27:20 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
Message-ID: <421FB458.2060609@rogers.com>

I'd like to add a number of XMLRPC services to an existing Nevow site 
that's both SSL encrypted and Guarded.  However, when I take the 
straightforward tack of adding an XMLRPC instance to my site as /RPC , 
the client is unable to connect.  It appears as though the client 
(Python's xmlrpclib) can't negotiate a login with the Nevow guard.

Reading Andre Dalke's post (and the subsequent replies):

    http://twistedmatrix.com/pipermail/twisted-python/2003-June/004447.html

it seems as though a rewrite of cred about a year and a half ago should 
have made it possible to use cred for doing the authentication required 
for both form-based and HTTP-AUTH-based queries (such as xmlrpclib 
uses).  However, I'm not sure how all of that would interact with the 
Guard mechanisms (e.g. creating sessions, redirecting between forms, and 
the like).

Anyway, I'm wondering if anyone has any code that does this, or 
information about the current state-of-the-art.

Enjoy yourselves,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com
                              PyCon is coming...




From golux at comcast.net  Fri Feb 25 18:04:34 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 25 Feb 2005 20:04:34 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <421FB458.2060609@rogers.com>
References: <421FB458.2060609@rogers.com>
Message-ID: <421FCB22.4010400@comcast.net>

Mike C. Fletcher wrote:
> I'd like to add a number of XMLRPC services to an existing Nevow site 
> that's both SSL encrypted and Guarded. ....
> 
> ... I'm wondering if anyone has any code that does this, or 
> information about the current state-of-the-art.

I have an example from my project that does (I think) what
you want.  It's not the best code -- exarkun made some
suggestions at PyCon last year on how to clean up the
structure, and I'm embarrassed to admit I haven't yet
implemented his suggestions (hey, it works ;).

I'll send the files to you off-list because I don't want
to clutter up the list, but if anyone else is interested
I'll be happy to share them (or send them to the list if
one of the twisted gurus thinks its worthwhile).

Cheers,
Steve



From foom at fuhm.net  Sat Feb 26 00:37:40 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 26 Feb 2005 02:37:40 -0500
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <95984cdf38ad7485c8c6a654f50df4ee@fuhm.net>

Bug summary
______________________
Since 2005-02-20 17:11:17.550000:
  Bugs opened: 5   Bugs closed: 2   Total open bugs: 339 (+3)
   Urgent: 7 (-1)
   Bug: 136 (+2)
   Feature: 128 (+0)
   Wish: 68 (+2)

New / Reopened Bugs
______________________
                     ==== Bug ====
[WEBSITE] Website still refers to copyright assignment  (yesterday)
        http://twistedmatrix.com/bugs/issue903 opened by hypatia

[TRIAL] trial --until-failure does not stop on cleanup errors  
(yesterday)
        http://twistedmatrix.com/bugs/issue901 opened by spiv

[CORE] Possible re-entrancy bug in LineReceiver.resumeProducing?  (4 
days ago)
        http://twistedmatrix.com/bugs/issue899 opened by spiv

                     ==== Wish ====
[NAMES] [PATCH] t.names shouldn't depend on t.flow  (yesterday)
        http://twistedmatrix.com/bugs/issue902 opened by marienz

Update download page with Python 2.4/1.3.0/Win32 installer  (2 days ago)
        http://twistedmatrix.com/bugs/issue900 opened by moonfallen

Bugs Closed
______________________
                     ==== Urgent ====
[FTP] Strange intermittent failure involving FTP  (1 week ago)
        http://twistedmatrix.com/bugs/issue898 opened by spiv, closed by 
spiv

                     ==== Bug ====
[TRIAL] Control-C in trial sometimes doesn't stop it.  (8 months ago)
        http://twistedmatrix.com/bugs/issue628 opened by jknight, closed 
by spiv




From golux at comcast.net  Sun Feb 27 01:46:21 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Sun, 27 Feb 2005 03:46:21 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <421FB458.2060609@rogers.com>
References: <421FB458.2060609@rogers.com>
Message-ID: <422188DD.6040109@comcast.net>

Hey Jordan and Andy,

Attached are the modules of my app that handle XMLRPC
and web basic auth over SSL.  Note that there's no nevow
here, but the same auth facility is used for both a
simple static web interface and the XMLRPC service.
You can see some vestigial (and inactive) PB stubs,
which await time and my grokking Brian's new PB stuff.
(Anyway I hadn't yet extended pgercred to support
PB ... an exercise for the reader ... and if any
readers want to hack on that, I'd love to see it ...
that would make things much more interesting!  :)

Jp's advice, which has since faded into the dark
backward and abysm of my head, had to do with some
refactoring of pgercred ... hey jp, maybe you could
remind me, if you have a chance to peek at it again!

The pgertap, pgerxmlrpc, and pgercred modules are server-side
and xmlrpcinterface is a client module.  They are not
runnable without some more stuff from the app (see below),
and I haven't taken the time to create a self-contained
runnable example along these lines, but I think it wouldn't
be too hard, and IMO a nice addition to twisted's examples.

Acknowledgement:  the code that does the work in pgercred
is based on an example that Moshe did a while back (I don't
remember exactly what I copied, but I think the main thing
was most or all of the BasicAuthResource class).

The "engine" that gets passed to pgerxmlrpc is the guy that
handles the application logic (he sits above an adbapi
layer and other assorted back-end stuff).  I didn't include
that module because it's not relevant to this thread, but
if anyone is curious, I put a tarball of the app at:

http://ned.gsfc.nasa.gov/PanGalactic.tar.gz

Caveats:  it contains some horriblenesses, not much doc,
and I haven't released it "publicly" yet.  We used to have
anonymous access set up for CVS on ned (remember, radix? ;),
but NASA/GSFC has tightened up its firewalls considerably
since then ... rats!  :(

Critiques or razberries welcomed, as long as they're
constructive razberries!  :)

Cheers,
Steve

-------------- next part --------------
A non-text attachment was scrubbed...
Name: pgertap.py
Type: text/x-python
Size: 4508 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050227/1089ef6d/attachment-0008.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pgerxmlrpc.py
Type: text/x-python
Size: 10749 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050227/1089ef6d/attachment-0009.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pgercred.py
Type: text/x-python
Size: 6794 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050227/1089ef6d/attachment-0010.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: xmlrpcinterface.py
Type: text/x-python
Size: 11804 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050227/1089ef6d/attachment-0011.py>

From tv at twistedmatrix.com  Mon Feb 28 01:32:46 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 28 Feb 2005 10:32:46 +0200
Subject: [Twisted-Python] Patch to support DNS updates
In-Reply-To: <H0000065000015a3.1109327814.moses@MHS>
References: <H0000065000015a3.1109327814.moses@MHS>
Message-ID: <4222D72E.20008@twistedmatrix.com>

Jeff Silver wrote:
> --- names/authority.py	2004-02-07 17:57:11.000000000 +0000
> +++ names/authority.py.new	2005-02-25 09:34:02.725600288 +0000
> @@ -161,6 +161,78 @@
>                  add.extend(res[1][2])
>          return ans, auth, add
>  
> +    def _trySaveToOriginalFile(self):
> +        '''Called after an update.'''
> +        soa_rec = self.soa[1]
> +        new_serial = int(time.strftime('%Y%m%d%H%M')) - 200000000000
> +        if new_serial <= soa_rec.serial:
> +            new_serial = soa_rec.serial + 1
> +        old_serial = soa_rec.serial
> +        soa_rec.serial = new_serial
> +        if hasattr(self, 'filename'):
> +            tmp_filename = self.filename + '.new'
> +            save_filename = '%s.%d' % (self.filename, old_serial)
> +            self.saveFile(tmp_filename)
> +            os.rename(self.filename, save_filename)
> +            os.rename(tmp_filename, self.filename)

While I am not going to comment on the rest of the patch (the feature
does sound nice, altough lack of authentication makes using it pretty
pointless IMHO), this is just unacceptable.

If an exception is raised, the app crashes, or the machine loses power
between those two renames, your original zone file has been renamed
and your DNS server won't start.

Do something like

 >>> f=open('foo', 'w')
 >>> f.write('foo')
 >>> f.close()
 >>> import os
 >>> os.link('foo', 'foo.old')
 >>> f=open('bar', 'w')
 >>> f.write('bar')
 >>> os.fsync(f)
 >>> f.close()
 >>> os.rename('bar', 'foo')
 >>>


Also, nice y2.043k trap there, I don't think many have been able to
write ones targeting that exact date.



From jeff at jamcupboard.co.uk  Mon Feb 28 07:37:54 2005
From: jeff at jamcupboard.co.uk (Jeff Silver)
Date: Mon, 28 Feb 2005 14:37:54 +0000
Subject: [Twisted-Python] Patch to support DNS updates
In-Reply-To: <4222D72E.20008@twistedmatrix.com>
Message-ID: <H000006500001662.1109600198.moses@MHS>

> (the feature does sound nice,

Thank you.

> ... altough lack of authentication makes using it pretty
> pointless IMHO),

For most situations, I agree with you. It so happens that updates without
authentication are fine for the environment I'm setting up. My focus was on
implementing the functionality that I need, although of course I don't want to
break anything, or prevent anyone else extending this further. There's no
reason why authentication (and the other missing bits) shouldn't be added. But
I thought I'd got to a stable enough point to submit.

As implemented in the patch, updates are permitted on all zones. In retrospect,
and given your comment, I think I was wrong. I should allow updates only in
zones specified using my new --*zonefile options. That way there is no change
of behaviour whatever for people continuing to use the original --*zone
options. I certainly don't want to open up security holes in existing
installations.

I shall fix this before submitting a new patch to the bug list (as requested by
itamar).

> this is just unacceptable.
> 
> If an exception is raised, the app crashes, or the machine loses power
> between those two renames, your original zone file has been renamed
> and your DNS server won't start.

Point taken. I'll do a single os.rename() as you suggest.


> Also, nice y2.043k trap there, I don't think many have been able to
> write ones targeting that exact date.

Hmmm.. Not sure what you mean. If I read the Python 2.4 documentation
correctly, these numbers will be handled as long integers. The subtraction just
converts the 4-digit year at the start to 'years since 2000'. Am I missing
something? If so, please say, and I can handle the year separately.

Thanks for the comments.
Jeff




From matt at pollenation.net  Mon Feb 28 07:50:23 2005
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 28 Feb 2005 14:50:23 +0000
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <422188DD.6040109@comcast.net>
References: <421FB458.2060609@rogers.com>  <422188DD.6040109@comcast.net>
Message-ID: <1109602223.9345.41.camel@localhost.localdomain>

On Sun, 2005-02-27 at 03:46 -0500, Stephen Waterbury wrote:

[snip everything for brevity]

Thanks for sharing this Stephen. It's made me question the realm-portal
architecture I've been using.

I notice that Stephen creates multiple realms - one for each "service"
your application provides. Each realm then has a portal to connect it to
the checker(s).

That is interesting because the approach I have taken is to have *one*
realm for the entire application and a portal for each "service". For
instance I might have a single instance of my.app.Realm and one each of
my.web.public.Portal, my.web.admin.Portal, my.web.xmlrpc.Portal,
my.ftp.Portal etc.

The reason I structure my code like this is because I consider the realm
to be the "hub" of the application (something I thought the cred HOWTO
was hinting at). My realm generally has all sorts of useful attributes,
i.e. a ConnectionPool, as well as the application's "global" API. I also
anticipated that, one day, my realm instance would need to be more aware
of the avatars it had created.

Right now, the only issue I have with my singleton realm way of working
is that the realm's requestAvatar can get big and tends to look like a
switch statement. It has to know about everything going on, even if it
doesn't much care about the avatar once the method returns. Stephen's
approach, by comparison, seems a little simpler in this respect in that
each realm is there to create an particular type of "service" avatar.

I still think that one realm and multiple portals is a better model but
does anyone anyone else have opinions, suggestions, hints etc.

Thanks, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




From itamar at itamarst.org  Mon Feb 28 08:13:01 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 28 Feb 2005 10:13:01 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <1109602223.9345.41.camel@localhost.localdomain>
References: <421FB458.2060609@rogers.com>  <422188DD.6040109@comcast.net>
	<1109602223.9345.41.camel@localhost.localdomain>
Message-ID: <1109603581.1467.56.camel@sheriffpony>

On Mon, 2005-02-28 at 14:50 +0000, Matt Goodall wrote:

> Right now, the only issue I have with my singleton realm way of working
> is that the realm's requestAvatar can get big and tends to look like a
> switch statement.

If there's an underlying avatar, you can adapt it to the interface
requested by the portal. If there are multiple avatar sources, i.e.
different interfaces get totally different "users", multiple realms may
be better (and you could put the shared logic in an object they all
refer to).




From ken at kenkinder.com  Mon Feb 28 09:31:12 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Mon, 28 Feb 2005 10:31:12 -0600
Subject: [Twisted-Python] Timing Out Deferreds
In-Reply-To: <9b4994889ee170c5895556a856c91ee2@fuhm.net>
References: <421F823A.9040500@kenkinder.com>
	<9b4994889ee170c5895556a856c91ee2@fuhm.net>
Message-ID: <42234750.4040305@kenkinder.com>

James Y Knight wrote:

> No, a deferred is just a chain of callbacks -- it doesn't really make 
> sense to time out a chain of callbacks. You need to time out the 
> *source* operation that is planning on eventually calling the 
> deferred. The process of killing the source operation ought to 
> additionally cause the deferred's errback to be called.
>

That would be ideal, but the situation I'm in isn't exactly that way. I 
have a general system of scheduling tasks that doesn't really know what 
the task is, but knows it shouldn't take too long -- something like a 
crontab.




From itamar at itamarst.org  Mon Feb 28 09:53:24 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 28 Feb 2005 11:53:24 -0500
Subject: [Twisted-Python] Timing Out Deferreds
In-Reply-To: <42234750.4040305@kenkinder.com>
References: <421F823A.9040500@kenkinder.com>
	<9b4994889ee170c5895556a856c91ee2@fuhm.net>
	<42234750.4040305@kenkinder.com>
Message-ID: <1109609604.1432.59.camel@sheriffpony>

On Mon, 2005-02-28 at 10:31 -0600, Ken Kinder wrote:

> That would be ideal, but the situation I'm in isn't exactly that way. I 
> have a general system of scheduling tasks that doesn't really know what 
> the task is, but knows it shouldn't take too long -- something like a 
> crontab.

How about having registration of a task also require a cancellation
function? Which can be lambda:None, if it's not possible to do so.




From mcfletch at rogers.com  Mon Feb 28 12:15:56 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Mon, 28 Feb 2005 14:15:56 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <422188DD.6040109@comcast.net>
References: <421FB458.2060609@rogers.com> <422188DD.6040109@comcast.net>
Message-ID: <42236DEC.1030205@rogers.com>

Stephen Waterbury wrote:
...

> Critiques or razberries welcomed, as long as they're
> constructive razberries!  :)

This is extremely illuminating.  The key approach/idea that I was 
missing is this:

    You can create a root web.resource.Resource() and add a child ""
    that handles all URLs not otherwise matched by a known child.

        This "" child handles the common web-browser case, basically
        anything not going to your "special" directories. This child is
        the protected Nevow portal that we all know and love; on
        attempting to walk into it all the Nevow machinery should trigger.

        Now you register your Basic-Auth-protected XMLRPC/SOAP portals
        as parallel children of the Nevow portal, "RPC" and "SOAP". 
        These are again, portals, so they do their own credential
        checking, thus don't *necessarily* have to use the same cred
        mechanism, but can if they want to.

This doesn't actually do what I was *trying* to do, which was to make it 
possible to log into the main site using Basic auth *or* the Nevow web 
forms, but it handles what we actually need to do perfectly, so I can 
just stop trying to do what I was trying to do :) .  I'm about to sit 
down to implement this approach for our system.

Much obliged,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com
                              PyCon is coming...




From andrea at cpushare.com  Mon Feb 28 13:31:54 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 28 Feb 2005 21:31:54 +0100
Subject: [Twisted-Python] Re: linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <mailman.202.1109621692.3610.twisted-python@twistedmatrix.com>
References: <mailman.202.1109621692.3610.twisted-python@twistedmatrix.com>
Message-ID: <20050228203154.GO8880@opteron.random>

On Mon, Feb 28, 2005 at 01:14:52PM -0700, twisted-python-owner at twistedmatrix.com wrote:
> Twisted is doing this for the process writer doRead operation:
> 
>     def doRead(self):
>         """The only way this pipe can become readable is at EOF, because the
>         child has closed it.
>         """
>         fd = self.fd
>         r, w, x = select.select([fd], [fd], [], 0)
>         if r and w:
>             return CONNECTION_LOST

One more separate issue unrelated to the poll sematics: why is the above
using select? I'm using the process protocol on the server side too, and
I used ulimit -n 40000 on the server side. The above will break badly if
I'll ever reach > 1024 connection simultaneously.

Overall I hope the above code never has to trigger, why isn't it using
the pollreactor anyway? Is it dead code or what?



From andrea at suse.de  Mon Feb 28 13:14:48 2005
From: andrea at suse.de (Andrea Arcangeli)
Date: Mon, 28 Feb 2005 21:14:48 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process pipes
Message-ID: <20050228201448.GN8880@opteron.random>

Hello everyone,

Please read the attached emails.

I would like to understand exactly what broke twisted, so that we're
sure the new 2.6.11 kernel will work reliably with twisted.

This code especially will never trigger with 2.6.11 because we'll never
set POLLIN|POLLOUT at the same time for writeable fd.

    def doRead(self):
        """The only way this pipe can become readable is at EOF, because the
        child has closed it.
        """
        fd = self.fd
        r, w, x = select.select([fd], [fd], [], 0)
        if r and w:
            return CONNECTION_LOST

Could you answer why anybody should call doRead on a writeable fd?

Where is it written that at EOF a _write_ pipe channel becomes readable?

Is it ok that "r and w" will never trigger at the same time anymore,
right? Was just that a superflous assumptions?

Note that with 2.6.8 and all previous linux kernels, "r and w" could be
== True in normal conditions too if the pipe write buffer was empty (old
kernel was setting pollin always for no good reason).

What I suspect is that the above is a superflous check that was working
by luck with older kernels (becasue we could set in and out at the same
time even without a disconnect event), and that all you care about is to
get the wakeup from the write or disconnect events. And in turn the new
linux 2.6.11-rc should not work by luck anymore.

Comments appreciated.

Thanks.
-------------- next part --------------
An embedded message was scrubbed...
From: Andrea Arcangeli <andrea at suse.de>
Subject: two pipe bugfixes
Date: Mon, 28 Feb 2005 05:25:44 +0100
Size: 5047
URL: </pipermail/twisted-python/attachments/20050228/fcc62a25/attachment.mht>
-------------- next part --------------
An embedded message was scrubbed...
From: Linus Torvalds <torvalds at osdl.org>
Subject: Re: two pipe bugfixes
Date: Mon, 28 Feb 2005 08:25:07 -0800 (PST)
Size: 4241
URL: </pipermail/twisted-python/attachments/20050228/fcc62a25/attachment-0001.mht>
-------------- next part --------------
An embedded message was scrubbed...
From: Andrea Arcangeli <andrea at suse.de>
Subject: Re: two pipe bugfixes
Date: Mon, 28 Feb 2005 20:04:37 +0100
Size: 2997
URL: </pipermail/twisted-python/attachments/20050228/fcc62a25/attachment-0002.mht>
-------------- next part --------------
An embedded message was scrubbed...
From: Linus Torvalds <torvalds at osdl.org>
Subject: Re: two pipe bugfixes
Date: Mon, 28 Feb 2005 11:22:18 -0800 (PST)
Size: 4526
URL: </pipermail/twisted-python/attachments/20050228/fcc62a25/attachment-0003.mht>
-------------- next part --------------
An embedded message was scrubbed...
From: Andrea Arcangeli <andrea at suse.de>
Subject: Re: two pipe bugfixes
Date: Mon, 28 Feb 2005 20:55:56 +0100
Size: 3825
URL: </pipermail/twisted-python/attachments/20050228/fcc62a25/attachment-0004.mht>

From matt at pollenation.net  Mon Feb 28 13:56:56 2005
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 28 Feb 2005 20:56:56 +0000
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC server?
In-Reply-To: <42236DEC.1030205@rogers.com>
References: <421FB458.2060609@rogers.com> <422188DD.6040109@comcast.net>
	<42236DEC.1030205@rogers.com>
Message-ID: <1109624216.25540.17.camel@localhost.localdomain>

On Mon, 2005-02-28 at 14:15 -0500, Mike C. Fletcher wrote:
>Stephen Waterbury wrote:
>...
>
>> Critiques or razberries welcomed, as long as they're
>> constructive razberries!  :)
>
>This is extremely illuminating.  The key approach/idea that I was 
>missing is this:
>
>    You can create a root web.resource.Resource() and add a child ""
>    that handles all URLs not otherwise matched by a known child.

This is incorrect. A child of "" matches the empty path segment. Most of
the time this is used to handle a URL that ends in a "/" but an empty
segment is also legitimate in the middle of a URL.

For instance, the URL "/foo/bar/" translates to segments of ("foo",
"bar", ""); "/" translates to ("",); "/foo//bar" translates to ("foo",
"", "bar").

In Nevow, you handle unmatched children by overriding locateChild(self,
ctx, segments) or, in the case of a rend.Page subclass, providing a
childFactory(self, ctx, name) method.

- Matt

>
>        This "" child handles the common web-browser case, basically
>        anything not going to your "special" directories. This child is
>        the protected Nevow portal that we all know and love; on
>        attempting to walk into it all the Nevow machinery should trigger.
>
>        Now you register your Basic-Auth-protected XMLRPC/SOAP portals
>        as parallel children of the Nevow portal, "RPC" and "SOAP". 
>        These are again, portals, so they do their own credential
>        checking, thus don't *necessarily* have to use the same cred
>        mechanism, but can if they want to.
>
>This doesn't actually do what I was *trying* to do, which was to make it 
>possible to log into the main site using Basic auth *or* the Nevow web 
>forms, but it handles what we actually need to do perfectly, so I can 
>just stop trying to do what I was trying to do :) .  I'm about to sit 
>down to implement this approach for our system.
>
>Much obliged,
>Mike
>
>________________________________________________
>  Mike C. Fletcher
>  Designer, VR Plumber, Coder
>  http://www.vrplumber.com
>  http://blog.vrplumber.com
>                              PyCon is coming...
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From tv at twistedmatrix.com  Mon Feb 28 15:10:25 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 01 Mar 2005 00:10:25 +0200
Subject: [Twisted-Python] Patch to support DNS updates
In-Reply-To: <H000006500001662.1109600198.moses@MHS>
References: <H000006500001662.1109600198.moses@MHS>
Message-ID: <422396D1.2010800@twistedmatrix.com>

Jeff Silver wrote:
>>Also, nice y2.043k trap there, I don't think many have been able to
>>write ones targeting that exact date.
> Hmmm.. Not sure what you mean. If I read the Python 2.4 documentation
> correctly, these numbers will be handled as long integers. The subtraction just
> converts the 4-digit year at the start to 'years since 2000'. Am I missing
> something? If so, please say, and I can handle the year separately.

Size of python data types is pretty irrelevant when DNS SOA serial
number is an unsigned 32-bit number. January 1st, 2043 would be

4301010000
YYMMDDHHMM

which is > 2**32, and thus invalid.

This is all pretty academical, of course. It's just that you've created
a totally new _class_ of y2k-like bugs, with your
YYYYMMDDHHMM - 200000000000 scheme, and I think that's worth some kind
of a prize.



From mcfletch at rogers.com  Mon Feb 28 15:42:58 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Mon, 28 Feb 2005 17:42:58 -0500
Subject: [Twisted-Python] Any examples of an authenticating XMLRPC	server?
In-Reply-To: <1109624216.25540.17.camel@localhost.localdomain>
References: <421FB458.2060609@rogers.com> <422188DD.6040109@comcast.net>	
	<42236DEC.1030205@rogers.com>
	<1109624216.25540.17.camel@localhost.localdomain>
Message-ID: <42239E72.1010300@rogers.com>

Matt Goodall wrote:

>On Mon, 2005-02-28 at 14:15 -0500, Mike C. Fletcher wrote:
>  
>
>>Stephen Waterbury wrote:
>>...
>>
>>    
>>
>>>Critiques or razberries welcomed, as long as they're
>>>constructive razberries!  :)
>>>      
>>>
>>This is extremely illuminating.  The key approach/idea that I was 
>>missing is this:
>>
>>   You can create a root web.resource.Resource() and add a child ""
>>   that handles all URLs not otherwise matched by a known child.
>>    
>>
>
>This is incorrect. A child of "" matches the empty path segment. Most of
>the time this is used to handle a URL that ends in a "/" but an empty
>segment is also legitimate in the middle of a URL.
>  
>
I stand corrected, though somewhat confused as to how Stephen's code is 
working, then.  My own experience does back up your statement, though.

>In Nevow, you handle unmatched children by overriding locateChild(self,
>ctx, segments) or, in the case of a rend.Page subclass, providing a
>childFactory(self, ctx, name) method.
>  
>
Indeed, as I discovered in implementing this. Still, Stephen's approach 
works fine, I was just wrong about thinking it was implemented 
automatically for the "" case. To make it work with a Nevow site, I 
created a root resource like this:

    class SiteRoot( object ):
        __implements__ = (inevow.IResource, )
        isLeaf = False
        def __init__( self, root ):
            """Initialise the overall root"""
            self.root = root
            self.RPC = webservices.XMLRPCServer()
        def locateChild(self, ctx, segments):
            """Locate child, return as inevow.IResource"""
            if segments:
                if segments[0] == 'RPC':
                    return self.RPC, segments[1:]
            return self.root, segments
        def renderHTTP( self, ctx, **named ):
            """Render this resource on an HTTP request"""
            raise ValueError( """You shouldn't be able to view this
    node!""" )

then wrap the SiteRoot instance in a nevow.appserver.NevowSite instance 
(it won't work if you try to use a twisted.web site, because that site 
class doesn't know how to traverse Nevow resources).  You also AFAICS 
should not wrap the "root" in an appserver.NevowSite instance (it seems 
there should only be one site instance for any given web-server).

So, to recap:

    nevow.appserver.NevowSite

        SiteRoot( root )

            root = guard.SessionWrapper( portal.Portal( realm.YourRealm(
            rootResourceForNormalSite ) ) ) -- with the appropriate
            credential checkers registered.

Enjoy, and thanks all,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com
                              PyCon is coming...




From foom at fuhm.net  Mon Feb 28 15:52:05 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 28 Feb 2005 17:52:05 -0500
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <20050228201448.GN8880@opteron.random>
References: <20050228201448.GN8880@opteron.random>
Message-ID: <844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>

On Feb 28, 2005, at 3:14 PM, Andrea Arcangeli wrote:
> I would like to understand exactly what broke twisted, so that we're
> sure the new 2.6.11 kernel will work reliably with twisted.
>
> This code especially will never trigger with 2.6.11 because we'll never
> set POLLIN|POLLOUT at the same time for writeable fd.
>
>     def doRead(self):
>         """The only way this pipe can become readable is at EOF, 
> because the
>         child has closed it.
>         """
>         fd = self.fd
>         r, w, x = select.select([fd], [fd], [], 0)
>         if r and w:
>             return CONNECTION_LOST
>
> Could you answer why anybody should call doRead on a writeable fd?
>
> Where is it written that at EOF a _write_ pipe channel becomes 
> readable?
>
> Is it ok that "r and w" will never trigger at the same time anymore,
> right? Was just that a superflous assumptions?
>
> Note that with 2.6.8 and all previous linux kernels, "r and w" could be
> == True in normal conditions too if the pipe write buffer was empty 
> (old
> kernel was setting pollin always for no good reason).
>
> What I suspect is that the above is a superflous check that was working
> by luck with older kernels (becasue we could set in and out at the same
> time even without a disconnect event), and that all you care about is 
> to
> get the wakeup from the write or disconnect events. And in turn the new
> linux 2.6.11-rc should not work by luck anymore.

I agree this code is somewhat suboptimal. However, I do not agree that 
it works only by luck.

In response to your main question of "why is it checking for 
readability at all", there is a good answer: to get the disconnect 
event without trying to write data. Select doesn't have a "err" fdset, 
so you have to select for either readability or writability. You can't 
select for writability when you have no data to write, or else you'll 
be continuously waking up. On all UNIX OSes that I know of, write pipes 
show up as readable in select when the other side has closed, for just 
this reason. I don't know if it's documented in any specs, but as far 
as I can tell, it's universally true.

Breaking this would be a Bad Thing, for I suspect more apps than just 
Twisted.

Of course, if it were that simple, doRead would just be implemented as 
"return CONNECTION_LOST". From my testing, that'd even work on BSDs. 
However, linux adds its own little wrinkle to the problem.

On linux, the observed behavior seems to be that only one write can be 
outstanding at a time -- if there is data in the buffer, writable will 
be false and readable will be true. Otherwise, the inverse. This is 
quite silly...but it's what happens. As far as I can tell, at no time 
are both true, except when the pipe is disconnected. On BSD, a write 
pipe is simply never readable until the reader is closed, which is a 
lot more sensible.

Also note, that bit of code is unnecessary if you're using pollreactor 
rather than selectreactor. That is, I think it should be fine with 
twisted if the pipe is just POLLHUP when it is disconnected rather than 
POLLHUP|POLLIN|POLLOUT.

James




From andrea at cpushare.com  Mon Feb 28 17:37:23 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 01:37:23 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
Message-ID: <20050301003723.GT8880@opteron.random>

BTW, I'm sending as andrea at cpushare.com but this email is really meant
to be from andrea at suse.de, the lists are set so that I can't post unless
I'm subscribed and to avoid unnecessary email load, I'm avoiding to
subscribe two of my accounts to the same list.

On Mon, Feb 28, 2005 at 05:52:05PM -0500, James Y Knight wrote:
> I agree this code is somewhat suboptimal. However, I do not agree that 
> it works only by luck.

The thing is that readable and writeable (in select(2) terms) could be
returned from linux 2.6.9 and all previous kernels immediatly without
sleeping, even if there was no disconnect event. You only needed the
write buffer empty for it to return POLLIN|POLLOUT without sleeping.
That's what I mean with "by luck". It wasn't twisted mistake but a linux
mistake apparently.

That check of "r and w" definitely could be true even if the other side
of the pipe didn't disconnect in past linux.

> In response to your main question of "why is it checking for 
> readability at all", there is a good answer: to get the disconnect 
> event without trying to write data. Select doesn't have a "err" fdset, 

Ok, btw even linux always returns the fd in both readable and writeable
when the other side of the pipe disconnects. This because we raise a
POLLERR and this is the mask to check when a fd is readable/writeable

#define POLLIN_SET (POLLRDNORM | POLLRDBAND | POLLIN | POLLHUP | POLLERR)
#define POLLOUT_SET (POLLWRBAND | POLLWRNORM | POLLOUT | POLLERR)

So when POLLERR is raised, the fd is returned readable and writeable
from select.

Current kernel code is this:

static unsigned int
pipe_poll(struct file *filp, poll_table *wait)
{
        unsigned int mask;
        struct inode *inode = filp->f_dentry->d_inode;
        struct pipe_inode_info *info = inode->i_pipe;
        int nrbufs;

        poll_wait(filp, PIPE_WAIT(*inode), wait);

        /* Reading only -- no need for acquiring the semaphore.  */
        nrbufs = info->nrbufs;
        mask = 0;
        if (filp->f_mode & FMODE_READ) {
                mask = (nrbufs > 0) ? POLLIN | POLLRDNORM : 0;
                if (!PIPE_WRITERS(*inode) && filp->f_version != PIPE_WCOUNTER(*inode))
                        mask |= POLLHUP;
        }

        if (filp->f_mode & FMODE_WRITE) {
                mask |= (nrbufs < PIPE_BUFFERS) ? POLLOUT | POLLWRNORM : 0;
                if (!PIPE_READERS(*inode))
                        mask |= POLLERR;
        }

        return mask;
}

With this new kernel code, a write pipe will _never_ return readable,
unless it's disconnected, and it will match the the current twisted code
as far as I can tell.

As you can see we never set POLLOUT for a write-pipe (opened in WRONLY
mode), and in turn the only way to end up in the POLLIN_SET is that
POLLERR is set.

> so you have to select for either readability or writability. You can't 
> select for writability when you have no data to write, or else you'll 
> be continuously waking up. On all UNIX OSes that I know of, write pipes 
> show up as readable in select when the other side has closed, for just 
> this reason. I don't know if it's documented in any specs, but as far 
> as I can tell, it's universally true.
> Breaking this would be a Bad Thing, for I suspect more apps than just 
> Twisted.

Linux never returned any information about the status of the other side
of the pipe via the readable information, because readable was always
returned true, since POLLIN was set unconditionally by the pipe_poll
code. So we're not going to break anything in that sense, it was already
broken and infact we're fixing it right now ;).

POLLIN was providing absolutely zero information because it was always
set unconditionally for both readers and writers. That was wrong and
that's why I changed it and this seem to make the doRead code valid for
the first time in linux.

> Of course, if it were that simple, doRead would just be implemented as 
> "return CONNECTION_LOST". From my testing, that'd even work on BSDs. 
> However, linux adds its own little wrinkle to the problem.
> On linux, the observed behavior seems to be that only one write can be 
> outstanding at a time -- if there is data in the buffer, writable will 
> be false and readable will be true. Otherwise, the inverse. This is 

It's never the inverse since pollin was always forced to be set, both
for readers and writers, so a write fd was always returned as readable
unconditionally. 

But you're perfectly right that if there is data in the buffer
writeable was false and readable was true. (readable provides no info in
linux)

> quite silly...but it's what happens. As far as I can tell, at no time 
> are both true, except when the pipe is disconnected. On BSD, a write 
> pipe is simply never readable until the reader is closed, which is a 
> lot more sensible.
> Also note, that bit of code is unnecessary if you're using pollreactor 
> rather than selectreactor. That is, I think it should be fine with 

This is great news. However note that the 2.6.11-rc5 official kernel
broke my app with the pollreactor too. So something else must have been
broken for the pollreactor too making the same assumption that doRead
did, and it's working fine again with my pipe patch infact.

> twisted if the pipe is just POLLHUP when it is disconnected rather than 
> POLLHUP|POLLIN|POLLOUT.

It's POLLERR not POLLHUP. POLLHUP is set only when the "writer" side
disconnected and you're listening to a reader fd. POLLERR is instead
returned when the "reader" disconnected and you're listening to a
writer fd.

In select terms it means when the reader disconnects the fd will be both
readable and writeable. And when the writer disconnects the fd will be
reported only as readable.

In poll terms it means with linux _only_ POLLERR will be set when the
read disconnects, and POLLIN will never ever be set on a WRONLY pipe.

So with the new fixes it seems linux does the right thing, and we at
leats mimic the select behaviour that twisted expects, I hope we mimic
the poll behaviour that twisted expects too.

I found the openbsd implementation of pipe_poll here:

	http://fxr.watson.org/fxr/source/kern/sys_pipe.c?v=OPENBSD#L661

671         if (events & (POLLIN | POLLRDNORM)) {
672                 if ((rpipe->pipe_buffer.cnt > 0) ||
673                     (rpipe->pipe_state & PIPE_EOF))
674                         revents |= events & (POLLIN | POLLRDNORM);
675         }

The way I read it, even openbsd will report the fd as readable
regardless if the channel is disconnected, if the buffer has something
into it.

Anyway linux won't do that anymore, a write fd will be now reported as
readable only if the reader has disconnected, and so you're safe to
assume the reader disconnected if selects returns readable && writeable.
So I think we should be fine now and no changes are required in twisted
at least for the select reactor side.

Please double check the pollreactor side too, we'll never return POLLIN
anymore for a WRONLY pipe fd.

I'm going to update a semi-productive system running twisted servers
using processes too, with the new pipe_poll code too to see what happens
(that's the good thing of not being fully productive yet, so I can
experiment a bit more ;).



From andrea at cpushare.com  Mon Feb 28 17:48:07 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 01:48:07 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
Message-ID: <20050301004807.GW8880@opteron.random>

On Mon, Feb 28, 2005 at 05:52:05PM -0500, James Y Knight wrote:
> Also note, that bit of code is unnecessary if you're using pollreactor 
> rather than selectreactor. That is, I think it should be fine with 

Are you reall sure it can't be called with pollreactor? I see this in
the pollreactor code:

                if event & POLLIN:
                    why = selectable.doRead()
                    inRead = True

Sorry for asking again but I really want to be sure select won't screw
things up with >1024 fds open ;)

thanks!



From andrea at cpushare.com  Mon Feb 28 18:50:03 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 02:50:03 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <20050301003723.GT8880@opteron.random>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
Message-ID: <20050301015003.GA8880@opteron.random>

On Tue, Mar 01, 2005 at 01:37:23AM +0100, Andrea Arcangeli wrote:
> I'm going to update a semi-productive system running twisted servers
> using processes too, with the new pipe_poll code too to see what happens
> (that's the good thing of not being fully productive yet, so I can
> experiment a bit more ;).

System is up and running fine with this patch against 2.6.8 that should
apply to most l-k out there, matching latest 2.6.11. This will bring
linux in sync with the twisted expectations of "r && w" meaning 'reader
disconnected' with select, it'll change the behaviour of poll not to
return POLLIN set unconditionally, and more specifically it'll never
return POLLIN for a WRONLY fd, and it'll never return POLLOUT for a
RDONLY fd.

--- x/fs/pipe.c.~1~	2004-08-25 02:47:51.000000000 +0200
+++ x/fs/pipe.c	2005-03-01 02:10:50.000000000 +0100
@@ -300,14 +300,18 @@ pipe_poll(struct file *filp, poll_table 
 
 	poll_wait(filp, PIPE_WAIT(*inode), wait);
 
-	/* Reading only -- no need for acquiring the semaphore.  */
-	mask = POLLIN | POLLRDNORM;
-	if (PIPE_EMPTY(*inode))
-		mask = POLLOUT | POLLWRNORM;
-	if (!PIPE_WRITERS(*inode) && filp->f_version != PIPE_WCOUNTER(*inode))
-		mask |= POLLHUP;
-	if (!PIPE_READERS(*inode))
-		mask |= POLLERR;
+	mask = 0;
+	if (filp->f_mode & FMODE_READ) {
+		mask |= PIPE_LEN(*inode) ? POLLIN | POLLRDNORM : 0;
+		if (!PIPE_WRITERS(*inode) && filp->f_version != PIPE_WCOUNTER(*inode))
+			mask |= POLLHUP;
+	}
+
+	if (filp->f_mode & FMODE_WRITE) {
+		mask |= PIPE_EMPTY(*inode) ? POLLOUT | POLLWRNORM : 0;
+		if (!PIPE_READERS(*inode))
+			mask |= POLLERR;
+	}
 
 	return mask;
 }



From foom at fuhm.net  Mon Feb 28 20:40:00 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 28 Feb 2005 22:40:00 -0500
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <20050301003723.GT8880@opteron.random>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
Message-ID: <893f671b35fdcdcd1a00429d521394d2@fuhm.net>

On Feb 28, 2005, at 7:37 PM, Andrea Arcangeli wrote:
> It's never the inverse since pollin was always forced to be set, both
> for readers and writers, so a write fd was always returned as readable
> unconditionally.

I'm glad we all agree as to what the new behavior should be, but you're 
incorrect about the extent of the old brokenness. Simple tests prove 
that POLLIN was not forced to be true always:

On a debian 2.6.9-1-k7 kernel:

====
import os,select
r,w=os.pipe()
p=select.poll()
p.register(w, select.POLLIN|select.POLLOUT)

print select.select([w],[w],[w],0)
print p.poll(0)

os.write(w, "asdf")
print select.select([w],[w],[w],0)
print p.poll(0)

os.close(r)
print select.select([w],[w],[w],0)
print p.poll(0)
====

outputs:
([], [4], [])
[(4, 4)] (aka POLLOUT)
([4], [], [])
[(4, 1)] (aka POLLIN)
([4], [4], [])
[(4, 9)] (aka POLLIN|POLLERR)

> It's POLLERR not POLLHUP. POLLHUP is set only when the "writer" side
> disconnected and you're listening to a reader fd. POLLERR is instead
> returned when the "reader" disconnected and you're listening to a
> writer fd.

Right. Twisted treats all of POLLERR/HUP/NVAL the same, anyways.

> 671         if (events & (POLLIN | POLLRDNORM)) {
> 672                 if ((rpipe->pipe_buffer.cnt > 0) ||
> 673                     (rpipe->pipe_state & PIPE_EOF))
> 674                         revents |= events & (POLLIN | POLLRDNORM);
> 675         }
> The way I read it, even openbsd will report the fd as readable
> regardless if the channel is disconnected, if the buffer has something
> into it.

Nope -- Notice that rpipe and wpipe are backwards for the read and 
write fds. "rpipe" on the write fd won't ever have any data in it. 
(Except of course that pipes in BSD are bidirectional!). In BSD, 
everything is symmetric, so it'd be very difficult for a stupid bug 
like reporting the same status for both ends to occur.

> Are you reall sure it can't be called with pollreactor?
>
> Sorry for asking again but I really want to be sure select won't screw
> things up with >1024 fds open ;)

Yes, it will get called, because linux returns (returned?) 
POLLERR|POLLIN when the other side is closed. pollreactor doesn't 
assume the connection was lost immediately when POLLERR/etc is set, if 
POLLIN is also set, because POLLIN|POLLHUP means there is more data 
available to be read from the kernel buffer that was sent before the 
connection closed. And, since normal transport implementations of 
doRead actually do try to read, if it was lying about POLLIN, that's 
okay: the read syscall will fail, and CONNECTION_LOST will be returned 
from doRead.

James




From foom at fuhm.net  Mon Feb 28 20:49:17 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 28 Feb 2005 22:49:17 -0500
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <893f671b35fdcdcd1a00429d521394d2@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
	<893f671b35fdcdcd1a00429d521394d2@fuhm.net>
Message-ID: <018ed566d0003f96000410157c102caa@fuhm.net>


On Feb 28, 2005, at 10:40 PM, James Y Knight wrote:

> I'm glad we all agree as to what the new behavior should be, but 
> you're incorrect about the extent of the old brokenness. Simple tests 
> prove that POLLIN was not forced to be true always:

Which makes sense given that the following says "=" not "|=".
-	mask = POLLIN | POLLRDNORM;
-	if (PIPE_EMPTY(*inode))
-		mask = POLLOUT | POLLWRNORM;

James




From andrea at cpushare.com  Mon Feb 28 21:01:24 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 05:01:24 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <018ed566d0003f96000410157c102caa@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
	<893f671b35fdcdcd1a00429d521394d2@fuhm.net>
	<018ed566d0003f96000410157c102caa@fuhm.net>
Message-ID: <20050301040124.GD8880@opteron.random>

On Mon, Feb 28, 2005 at 10:49:17PM -0500, James Y Knight wrote:
> 
> On Feb 28, 2005, at 10:40 PM, James Y Knight wrote:
> 
> >I'm glad we all agree as to what the new behavior should be, but 
> >you're incorrect about the extent of the old brokenness. Simple tests 
> >prove that POLLIN was not forced to be true always:
> 
> Which makes sense given that the following says "=" not "|=".
> -	mask = POLLIN | POLLRDNORM;
> -	if (PIPE_EMPTY(*inode))
> -		mask = POLLOUT | POLLWRNORM;

Ok that explains why you didn't get "r and w" set at the same time,
so it wasn't working by luck. It was only the 2.6.11-rc changes that
broke it and that could return "r and w" set at the same time.  And now
they're fixed again.



From andrea at cpushare.com  Mon Feb 28 21:15:36 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 1 Mar 2005 05:15:36 +0100
Subject: [Twisted-Python] linux kernel 2.6.11-rc broke twisted process
	pipes
In-Reply-To: <893f671b35fdcdcd1a00429d521394d2@fuhm.net>
References: <20050228201448.GN8880@opteron.random>
	<844f3b9c24c0a8dbcc86e8903e9627dd@fuhm.net>
	<20050301003723.GT8880@opteron.random>
	<893f671b35fdcdcd1a00429d521394d2@fuhm.net>
Message-ID: <20050301041536.GE8880@opteron.random>

On Mon, Feb 28, 2005 at 10:40:00PM -0500, James Y Knight wrote:
> Right. Twisted treats all of POLLERR/HUP/NVAL the same, anyways.

Ok.

> Nope -- Notice that rpipe and wpipe are backwards for the read and 
> write fds. "rpipe" on the write fd won't ever have any data in it. 
> (Except of course that pipes in BSD are bidirectional!). In BSD, 

I didn't know it was bidirectional, I thought the peer pointer pointed
to the other side of the pipe like in linux, and not the other direction
of the same side.

> Yes, it will get called, because linux returns (returned?) 
> POLLERR|POLLIN when the other side is closed. pollreactor doesn't 

It return_ed_ POLLERR|POLLIN, correct.

Now it returns only POLLERR for a wronly fd and only POLLHUP for a
rdonly fd which seems even more correct since it will prevent the
suprious doRead call with pollreactor.

> assume the connection was lost immediately when POLLERR/etc is set, if 
> POLLIN is also set, because POLLIN|POLLHUP means there is more data 
> available to be read from the kernel buffer that was sent before the 
> connection closed. And, since normal transport implementations of 

Yep, except that's a wronly fd so calling doRead can only detect a
disconnect that is already detected thanks to the pollerr.

> doRead actually do try to read, if it was lying about POLLIN, that's 
> okay: the read syscall will fail, and CONNECTION_LOST will be returned 
> from doRead.

Ok. So I'll take the exception path. The exception should be ValueError:
filedescriptor out of range in select(). Anyway with the new patched
kernel I'm running and with latest 2.6.11 this shouldn't happen anymore
because POLLIN isn't set ;).

Thanks a lot for all the help, this clarified many things.



