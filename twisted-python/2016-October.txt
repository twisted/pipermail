From trac at twistedmatrix.com  Sun Oct  2 00:05:20 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 02 Oct 2016 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1475388320.25.4221222574904602964@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161002/1fa24c18/attachment.html>

From ngoonee.talk at gmail.com  Mon Oct  3 21:55:48 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 4 Oct 2016 11:55:48 +0800
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
Message-ID: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>

First off, I've read [1] and am not trying to convert twisted code
into blocking code (well, I WAS, but have reconsidered).

I've got Kivy code using twisted code without much problem, but really
hated defining many in-line functions/lambdas for simple 'assign the
result to a Kivy widget' style things. I'm now abstracting
twisted-related code into its own class (separate from kivy UI code).

My eventual aim is for Kivy-related code to be approximately:-

    val = doSomeCallRemoteCallHere(args)
    myWidget.text = val

The closest I'm able to come to that so far is for my function to be
decorated with @defer.inlineCallbacks which will then look like this

    val = yield doSomeCallRemoteCallHere(args)
    myWidget.text = val

Much better readability than my previous

    def put_val_in_widget(retval):
        myWidget.text = retval
    d = doSomeCallRemoteCallHere(args)
    d.addCallback(put_val_in_widget)

Is this as 'good' (for the subjective readability concern) as it gets?
I'm basically going for sufficient readability that my UI code can be
read by programmers stuck in a synchronous mindset.

[1] - http://glyf.livejournal.com/40037.html


From meejah at meejah.ca  Mon Oct  3 22:42:45 2016
From: meejah at meejah.ca (meejah)
Date: Tue, 04 Oct 2016 08:42:45 +0400
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
In-Reply-To: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
 (Oon-Ee Ng's message of "Tue, 4 Oct 2016 11:55:48 +0800")
References: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
Message-ID: <86y424ohbu.fsf@atlantis.meejah.ca>

Oon-Ee Ng <ngoonee.talk at gmail.com> writes:

> The closest I'm able to come to that so far is for my function to be
> decorated with @defer.inlineCallbacks which will then look like this
>
>     val = yield doSomeCallRemoteCallHere(args)
>     myWidget.text = val

You can even do "myWidget.text = yield somethingDeferred()"

> Is this as 'good' (for the subjective readability concern) as it gets?

Yes.
Unless you move everything to Python 3 and then you can use the async /
await syntax (with Twisted), which is more-or-less the same as the above
(but you avoid the decorator). It would look like:

    myWidget.text = await somethingDeferred()

-- 
meejah


From manish.tomar at gmail.com  Mon Oct  3 23:03:16 2016
From: manish.tomar at gmail.com (Manish Tomar)
Date: Mon, 3 Oct 2016 22:03:16 -0700
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
In-Reply-To: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
References: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
Message-ID: <CABH8oEMM-b7t_5qCXVeSO7QL-UxU=Kmv++298YtfPfhoZX+A1A@mail.gmail.com>

On Mon, Oct 3, 2016 at 8:55 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:

> Is this as 'good' (for the subjective readability concern) as it gets?
> I'm basically going for sufficient readability that my UI code can be
> read by programmers stuck in a synchronous mindset.
I was on synchronous mindset before learning Twisted and did not
like/understand Deferred. The `yield` based statement really helped me
initially but more importantly over time I liked seeing an explicit
difference between blocking vs non-blocking code. When I see `a =
yield func()`, I immediately register the fact that this is a
time-consuming operation which helps in understanding the performance
of the system. So, yes it is a good start for synchronous mindset
people.


From ngoonee.talk at gmail.com  Tue Oct  4 00:19:55 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 4 Oct 2016 14:19:55 +0800
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
In-Reply-To: <86y424ohbu.fsf@atlantis.meejah.ca>
References: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
 <86y424ohbu.fsf@atlantis.meejah.ca>
Message-ID: <CAGQ70esCGRhxPy7r8PJEWt5Qb-EkziPgBsXrhCFEY5NOGuvYqQ@mail.gmail.com>

On Tue, Oct 4, 2016 at 12:42 PM, meejah <meejah at meejah.ca> wrote:
> Oon-Ee Ng <ngoonee.talk at gmail.com> writes:
>
>> The closest I'm able to come to that so far is for my function to be
>> decorated with @defer.inlineCallbacks which will then look like this
>>
>>     val = yield doSomeCallRemoteCallHere(args)
>>     myWidget.text = val
>
> You can even do "myWidget.text = yield somethingDeferred()"

Why yes, that makes sense.
>
>> Is this as 'good' (for the subjective readability concern) as it gets?
>
> Yes.
> Unless you move everything to Python 3 and then you can use the async /
> await syntax (with Twisted), which is more-or-less the same as the above
> (but you avoid the decorator). It would look like:
>
>     myWidget.text = await somethingDeferred()
>
I would if I could, most of my projects are already there but last I
checked (beginning of the year) the _threadedselect reactor wasn't
fully ready yet, and AMP wasn't ported. I see a lot of progress on
that front with Amber's frequent updates here, so will migrate when I
can, but in the meantime I'm keeping things on python2 (no official
release of the app yet, so its not a big deal to shift when ready).


From ngoonee.talk at gmail.com  Tue Oct  4 00:21:55 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 4 Oct 2016 14:21:55 +0800
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
In-Reply-To: <CABH8oEMM-b7t_5qCXVeSO7QL-UxU=Kmv++298YtfPfhoZX+A1A@mail.gmail.com>
References: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
 <CABH8oEMM-b7t_5qCXVeSO7QL-UxU=Kmv++298YtfPfhoZX+A1A@mail.gmail.com>
Message-ID: <CAGQ70es37ESh9uQS39LVM50WHxPcBbv_z8nZAF9BzGf6N731Yw@mail.gmail.com>

On Tue, Oct 4, 2016 at 1:03 PM, Manish Tomar <manish.tomar at gmail.com> wrote:
> I was on synchronous mindset before learning Twisted and did not
> like/understand Deferred. The `yield` based statement really helped me
> initially but more importantly over time I liked seeing an explicit
> difference between blocking vs non-blocking code. When I see `a =
> yield func()`, I immediately register the fact that this is a
> time-consuming operation which helps in understanding the performance
> of the system. So, yes it is a good start for synchronous mindset
> people.


Actually I really like the idea behind deferred, its just not the
easiest to read and understand for others, and I don't want to be the
only one maintaining my code.

That being said 'yield=time-consuming' doesn't make sense to me. I'm
using twisted (and AMP) for communication, not to offload processing,
and some of the operations would be near-instant in a threaded context
(obviously with the reactor running it has to wait till it gets picked
up).


From meejah at meejah.ca  Tue Oct  4 15:42:58 2016
From: meejah at meejah.ca (meejah)
Date: Wed, 05 Oct 2016 01:42:58 +0400
Subject: [Twisted-Python] txtorcon 0.17.0
Message-ID: <86ponfoknx.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm pleased to announce txtorcon 0.17.0, largely to fix a bug with
Unix-socket control-ports:

 * issue 187: fix unix-socket control endpoints
 * sometimes mapping streams to hostnames wasn't working properly
 * backwards-compatibility API for `socks_hostname` was incorrectly named

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.17.0
   https://github.com/meejah/txtorcon/releases/tag/v0.17.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.17.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.17.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
5e321387ab56f22d184b18d91a60c30dd1f72575d9e32ff3614ef911bce49daa  txtorcon-0.17.0.tar.gz
e1da13cc43328e040335d091e2ef15717a2b836b48fbede31fc6a7e332b699b4  txtorcon-0.17.0-py2-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJX9B8gAAoJEMJgKAMSgGmnCLoH/jZNzTG4QRRKk54XkFCbSmBh
Qg0YAmWVa4iFMkjidawyfZ8Cocje+yROMiuvH2VWNCcI809q96TB06caNJS0w5c3
I10i9N9xY2S13/yVzW/izW3HMPR+Sdi0Hod9UGTQ0F2Vpcs+g8bpPyKvMK+mPm+L
P0QwyejOAO/FzTndA73T5o2bVKdR3NkK1EfY0FRTjQsD71UZlVJa4AK828v1EMi3
0oNXDny+H9xzJu/i03zFX3zSL1jb69KCxkLyUBIuj5Vg+3by8FwbBa1G3Ehcs70C
RV6ew6WLa0Ty7fnUBy18Z3gFx9+4Ew/Eq/t7weVgRiW0VCAHwgOKx0D4wqSMeH8=
=nyB6
-----END PGP SIGNATURE-----


From nathaniel at google.com  Thu Oct  6 12:49:51 2016
From: nathaniel at google.com (Nathaniel Manista)
Date: Thu, 6 Oct 2016 11:49:51 -0700
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
 <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
Message-ID: <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>

On Thu, Sep 29, 2016 at 5:41 PM, James Broadhead <jamesbroadhead at gmail.com>
wrote:

> If you're planning on working on this,
>

We don't currently have plans to implement it ourselves; we're trying to
invoke the magic of open source. So far the feature requests we've gotten
have been all over the map (gevent <http://www.gevent.org/>/asyncio
<https://docs.python.org/3/whatsnew/3.4.html#asyncio>/async-await
<https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax>)
that what's most important right now is just fostering the conversation
among everyone who is interested about what the desired behavior of gRPC
Python will be.

it'd probably be worth taking a look at the Twisted bindings for Thrift (a
> competing RPC system from FB, based on the Google PB paper).
>
> The generator[2] isn't the best place to start (imperative C++ that
> outputs python), but the code that it generates served us very well for
> years (generally, communicating twisted->cassandra, or twisted->scala
> services).
>
> [1] https://thrift.apache.org/
> [2] https://github.com/apache/thrift/blob/master/compiler/
> cpp/src/thrift/generate/t_py_generator.cc
>

Please contribute this to the thread
<https://groups.google.com/d/topic/grpc-io/RpkyqqQy8TU/discussion>/design
document
<https://github.com/grpc/grpc-experiments/blob/master/python/async/README.md>
/conversation.
-Nathaniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161006/9f84cbdf/attachment.html>

From manish.tomar at gmail.com  Thu Oct  6 13:11:22 2016
From: manish.tomar at gmail.com (Manish Tomar)
Date: Thu, 6 Oct 2016 12:11:22 -0700
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
 <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
 <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>
Message-ID: <CABH8oEOndAG_+Xe0dvdDH-K32_d7mprbCDxYM8c2RJzGwKg2QQ@mail.gmail.com>

On Thu, Oct 6, 2016 at 11:49 AM, Nathaniel Manista <nathaniel at google.com> wrote:
> On Thu, Sep 29, 2016 at 5:41 PM, James Broadhead <jamesbroadhead at gmail.com>
> wrote:
>>
>> If you're planning on working on this,
>
>
> We don't currently have plans to implement it ourselves; we're trying to
> invoke the magic of open source. So far the feature requests we've gotten
> have been all over the map (gevent/asyncio/async-await) that what's most
> important right now is just fostering the conversation among everyone who is
> interested about what the desired behavior of gRPC Python will be.
It will be nice if it can be implemented without IO [1] as Cory
rightfully points out everywhere.
>
>> it'd probably be worth taking a look at the Twisted bindings for Thrift (a
>> competing RPC system from FB, based on the Google PB paper).
>>
>> The generator[2] isn't the best place to start (imperative C++ that
>> outputs python), but the code that it generates served us very well for
>> years (generally, communicating twisted->cassandra, or twisted->scala
>> services).
>>
>> [1] https://thrift.apache.org/
>> [2]
>> https://github.com/apache/thrift/blob/master/compiler/cpp/src/thrift/generate/t_py_generator.cc
>
>
> Please contribute this to the thread/design document/conversation.
Thanks! I'll probably try to mention about sans-IO part there.
> -Nathaniel
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

[1] https://sans-io.readthedocs.io/


From nathaniel at google.com  Thu Oct  6 17:22:59 2016
From: nathaniel at google.com (Nathaniel Manista)
Date: Thu, 6 Oct 2016 16:22:59 -0700
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CABH8oEOndAG_+Xe0dvdDH-K32_d7mprbCDxYM8c2RJzGwKg2QQ@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
 <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
 <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>
 <CABH8oEOndAG_+Xe0dvdDH-K32_d7mprbCDxYM8c2RJzGwKg2QQ@mail.gmail.com>
Message-ID: <CAEOYnAQmbKHn9o2kCjN9-ouKi3d_EvWnOwRpCJuWX5-ZiCA5+Q@mail.gmail.com>

On Thu, Oct 6, 2016 at 12:11 PM, Manish Tomar <manish.tomar at gmail.com>
wrote:

> It will be nice if it can be implemented without IO [1] as Cory
> rightfully points out everywhere.
>

I'm a big fan of sans I/O; I think it will be interesting to see how much
it can be applied to the C-language library that implements most of the
behavior of gRPC Python.
-N
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161006/e0396abb/attachment.html>

From trac at twistedmatrix.com  Sun Oct  9 00:05:19 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 09 Oct 2016 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1475993119.95.3973823150216637327@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161009/67a39ecc/attachment.html>

From ngoonee.talk at gmail.com  Sun Oct  9 20:05:32 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 10 Oct 2016 10:05:32 +0800
Subject: [Twisted-Python] Conch examples give me host key related errors
Message-ID: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>

My google-fu is failing me (or I'm the only one with a misconfigured
ssh system), but none of the examples on
http://twistedmatrix.com/documents/current/conch/examples/index.html
run for me.

The ConchError I'm mostly getting says ('no host keys, failing',
None), while the simplesshserver.py example fails with a KeyError
'sshKeyDir'

Not sure where twisted-conch expects host keys to be, but my openssh
host keys are fine (I have a running sshd which sources them from
/etc/ssh as per usual). That being said, there's no way twisted-conch
as a python user-process would have access to them (nor should it).

I'm actually just wanting to use twisted-conch-manhole, but running
into this problem first. Is there something I need to configure in my
system?


From hawkowl at atleastfornow.net  Sun Oct  9 20:11:11 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 10 Oct 2016 13:11:11 +1100
Subject: [Twisted-Python] Conch examples give me host key related errors
In-Reply-To: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>
References: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>
Message-ID: <6229BEDD-C4DA-479E-8FAB-75F316AFF490@atleastfornow.net>

Hi,

This is most likely because of a security change I made a few versions ago, where conch will no longer use a set of default, hard-coded SSH keys.

You may want to do something like https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/manhole_tap.py#L149 <https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/manhole_tap.py#L149> , and add a key yourself -- we should update these examples to add this, so that they run out of the box again.

- Amber

> On 10 Oct. 2016, at 13:05, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> 
> My google-fu is failing me (or I'm the only one with a misconfigured
> ssh system), but none of the examples on
> http://twistedmatrix.com/documents/current/conch/examples/index.html
> run for me.
> 
> The ConchError I'm mostly getting says ('no host keys, failing',
> None), while the simplesshserver.py example fails with a KeyError
> 'sshKeyDir'
> 
> Not sure where twisted-conch expects host keys to be, but my openssh
> host keys are fine (I have a running sshd which sources them from
> /etc/ssh as per usual). That being said, there's no way twisted-conch
> as a python user-process would have access to them (nor should it).
> 
> I'm actually just wanting to use twisted-conch-manhole, but running
> into this problem first. Is there something I need to configure in my
> system?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161010/704e9d0f/attachment.html>

From ngoonee.talk at gmail.com  Sun Oct  9 20:55:56 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 10 Oct 2016 10:55:56 +0800
Subject: [Twisted-Python] Conch examples give me host key related errors
In-Reply-To: <6229BEDD-C4DA-479E-8FAB-75F316AFF490@atleastfornow.net>
References: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>
 <6229BEDD-C4DA-479E-8FAB-75F316AFF490@atleastfornow.net>
Message-ID: <CAGQ70eudo5-SK3p58MKM-BVE5T3=VccoZuU7tckW+2bawK33FQ@mail.gmail.com>

A reply from Amber herself! Thanks for the pointer, I dug into the
code a bit and figured these lines would do it (assuming publicKey and
privateKey are already defined as strings)

f = whatever_is_generating_a_factory(**kwargs)
f.publicKeys[b'ssh-rsa'] = keys.Key.fromString(data=publicKey)
f.privateKeys[b'ssh-rsa'] = keys.Key.fromString(data=privateKey)
reactor.listenTCP(port, f)

It seems keys is deprecated from 15.5.5 though, what's the modern alternative?

On Mon, Oct 10, 2016 at 10:11 AM, Amber "Hawkie" Brown
<hawkowl at atleastfornow.net> wrote:
> Hi,
>
> This is most likely because of a security change I made a few versions ago,
> where conch will no longer use a set of default, hard-coded SSH keys.
>
> You may want to do something like
> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/manhole_tap.py#L149
> , and add a key yourself -- we should update these examples to add this, so
> that they run out of the box again.
>
> - Amber
>
> On 10 Oct. 2016, at 13:05, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>
> My google-fu is failing me (or I'm the only one with a misconfigured
> ssh system), but none of the examples on
> http://twistedmatrix.com/documents/current/conch/examples/index.html
> run for me.
>
> The ConchError I'm mostly getting says ('no host keys, failing',
> None), while the simplesshserver.py example fails with a KeyError
> 'sshKeyDir'
>
> Not sure where twisted-conch expects host keys to be, but my openssh
> host keys are fine (I have a running sshd which sources them from
> /etc/ssh as per usual). That being said, there's no way twisted-conch
> as a python user-process would have access to them (nor should it).
>
> I'm actually just wanting to use twisted-conch-manhole, but running
> into this problem first. Is there something I need to configure in my
> system?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From ngoonee.talk at gmail.com  Sun Oct  9 21:11:28 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 10 Oct 2016 11:11:28 +0800
Subject: [Twisted-Python] Conch examples give me host key related errors
In-Reply-To: <CAGQ70eudo5-SK3p58MKM-BVE5T3=VccoZuU7tckW+2bawK33FQ@mail.gmail.com>
References: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>
 <6229BEDD-C4DA-479E-8FAB-75F316AFF490@atleastfornow.net>
 <CAGQ70eudo5-SK3p58MKM-BVE5T3=VccoZuU7tckW+2bawK33FQ@mail.gmail.com>
Message-ID: <CAGQ70etDbp7O+cvoHrBAVd1WVMH6dDee4JBWvXxTmWKsMPf7nw@mail.gmail.com>

Oh and it seems tab completion was being worked on but that's been
left waiting for a while now -
https://twistedmatrix.com/trac/ticket/6863

Still fantastically useful without though, so no complaints there.

On Mon, Oct 10, 2016 at 10:55 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> A reply from Amber herself! Thanks for the pointer, I dug into the
> code a bit and figured these lines would do it (assuming publicKey and
> privateKey are already defined as strings)
>
> f = whatever_is_generating_a_factory(**kwargs)
> f.publicKeys[b'ssh-rsa'] = keys.Key.fromString(data=publicKey)
> f.privateKeys[b'ssh-rsa'] = keys.Key.fromString(data=privateKey)
> reactor.listenTCP(port, f)
>
> It seems keys is deprecated from 15.5.5 though, what's the modern alternative?
>
> On Mon, Oct 10, 2016 at 10:11 AM, Amber "Hawkie" Brown
> <hawkowl at atleastfornow.net> wrote:
>> Hi,
>>
>> This is most likely because of a security change I made a few versions ago,
>> where conch will no longer use a set of default, hard-coded SSH keys.
>>
>> You may want to do something like
>> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/manhole_tap.py#L149
>> , and add a key yourself -- we should update these examples to add this, so
>> that they run out of the box again.
>>
>> - Amber
>>
>> On 10 Oct. 2016, at 13:05, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>>
>> My google-fu is failing me (or I'm the only one with a misconfigured
>> ssh system), but none of the examples on
>> http://twistedmatrix.com/documents/current/conch/examples/index.html
>> run for me.
>>
>> The ConchError I'm mostly getting says ('no host keys, failing',
>> None), while the simplesshserver.py example fails with a KeyError
>> 'sshKeyDir'
>>
>> Not sure where twisted-conch expects host keys to be, but my openssh
>> host keys are fine (I have a running sshd which sources them from
>> /etc/ssh as per usual). That being said, there's no way twisted-conch
>> as a python user-process would have access to them (nor should it).
>>
>> I'm actually just wanting to use twisted-conch-manhole, but running
>> into this problem first. Is there something I need to configure in my
>> system?
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>


From dansut at gmail.com  Mon Oct 10 10:41:59 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 10 Oct 2016 12:41:59 -0400
Subject: [Twisted-Python] Is there a recommended way for a Service to
	request Application stop?
Message-ID: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>

I have a hierarchy of Services some of which is MultiService and other
parts are my own implementations of IServiceCollection - in some
situations the a child Service may want to 'suggest' that the
Application's job is done (error, or simply task completed) and I'm
looking for some sort of standardized way to pass this info upstream.
The idea being that I may using my implemented Services in a variety
of Applications.

In this type of situation, is it the general intention a child Service
would use the Application directly, such that potential StopService()s
could bubble down? Or is there a normal pattern here to have messages
bubble up through the Services hierarchy? I'm not seeing anything like
this in the examples I've found or looking through the sources, but
I'm probably missing something.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From glyph at twistedmatrix.com  Mon Oct 10 15:51:24 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Oct 2016 14:51:24 -0700
Subject: [Twisted-Python] Is there a recommended way for a Service to
	request Application stop?
In-Reply-To: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
References: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
Message-ID: <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>


> On Oct 10, 2016, at 9:41 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> I have a hierarchy of Services some of which is MultiService and other
> parts are my own implementations of IServiceCollection - in some
> situations the a child Service may want to 'suggest' that the
> Application's job is done (error, or simply task completed) and I'm
> looking for some sort of standardized way to pass this info upstream.
> The idea being that I may using my implemented Services in a variety
> of Applications.
> 
> In this type of situation, is it the general intention a child Service
> would use the Application directly, such that potential StopService()s
> could bubble down? Or is there a normal pattern here to have messages
> bubble up through the Services hierarchy? I'm not seeing anything like
> this in the examples I've found or looking through the sources, but
> I'm probably missing something.


Services are just things that can be started and stopped.  Application is just a top-level object that associates a thing-to-start with a few bits of global process-level state, like logging and pidfile settings.

Therefore, the Service hierarchy abstraction is a poor fit for some code that needs to do some work and then exit; it's designed for long-running tools which can be started and stopped on demand.  For example, what happens if two Service objects think that the Application's job is "done"?

If you want to exit a process, calling `stop` on the reactor is generally the right way to go.

But: talking about this in such vague, abstract terms is unlikely to be helpful.  What, concretely, are you actually trying to do with the "Services in a variety of Applications"?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161010/304210d3/attachment.html>

From dansut at gmail.com  Mon Oct 10 17:38:12 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 10 Oct 2016 19:38:12 -0400
Subject: [Twisted-Python] Is there a recommended way for a Service to
 request Application stop?
In-Reply-To: <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>
References: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
 <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>
Message-ID: <CADzPF4sKVwg8iJmFXRZOaLjruQSur+fzCj1yd2MtkzkvZb1zkA@mail.gmail.com>

Thanks for your feedback Glyph, responses embedded below.

On Oct 10, 2016, at 9:41 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> I have a hierarchy of Services some of which is MultiService and other
> parts are my own implementations of IServiceCollection - in some
> situations the child Service may want to 'suggest' that the
> Application's job is done (error, or simply task completed) and I'm
> looking for some sort of standardized way to pass this info upstream.
> The idea being that I may using my implemented Services in a variety
> of Applications.
>
> In this type of situation, is it the general intention a child Service
> would use the Application directly, such that potential StopService()s
> could bubble down? Or is there a normal pattern here to have messages
> bubble up through the Services hierarchy? I'm not seeing anything like
> this in the examples I've found or looking through the sources, but
> I'm probably missing something.

On Mon, Oct 10, 2016 at 5:51 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> Services are just things that can be started and stopped.  Application is
> just a top-level object that associates a thing-to-start with a few bits of
> global process-level state, like logging and pidfile settings.
>
> Therefore, the Service hierarchy abstraction is a poor fit for some code
> that needs to do some work and then exit; it's designed for long-running
> tools which can be started and stopped on demand.  For example, what happens
> if two Service objects think that the Application's job is "done"?

This is perhap the type of thing I'm trying to code for; my goal is
that the Services themselves do not have the final say in when the
Application (or parent Service) is done. The event a Service feels is
a problem may cause its parent to stop it, or it could simply call a
method on it to remediate - depending on situation.

> If you want to exit a process, calling `stop` on the reactor is generally
> the right way to go.

ie. specifically I would not want a Service to stop the reactor, as
what it feels is a problem might only be a minor inconvenience for the
Application as a whole; but in another Application, or Application
state, it might be 'game over'.

> But: talking about this in such vague, abstract terms is unlikely to be
> helpful.  What, concretely, are you actually trying to do with the "Services
> in a variety of Applications"?

I'll try to give one fairly concrete example of where I'd like to use
this kind of pattern.
The Services are long running polling ModBus clients whose configs are
read from a DB by the parent, the child Service has no knowledge of
where its config came from. Occasionally the child Services config may
become totally unworkable (for a variety of reasons) and so they want
to tell their parent the situation to give it a chance to reconfig,
call child.stopService(), or...The parent will have many such
Services, appropriate action may include a child reconfig, or if all
children showing issues telling its parent the situation to ask for
'advice'.

It seems to me in Twisted's Applications the job of calling
stopService() (or similar) should always be the responsibility of the
parent Service, but as a child how should I give my parent a clue I
need attention?

I can see implementing this with my own Interfaces so the child
Services know more about their parent's Interfaces/attributes, or
related objects, and can bubble information up through these, but I'd
prefer my child Services to know as little about their parents as
possible so they can be re-used in other simple Twisted apps.
Basically, I didn't want to go implementing stuff when there were
already tried and tested Twisted patterns for dealing with this kind
of thing.

Generically, can I somehow bubble up events through the Service
hierarchy, or should I communicate with external objects to the
hierarchy that can bubble down actions from higher up?

Any suggestions, or pointers to similar examples will be most
appreciated - I'm not stuck on this quandary, just wanting to write
code which fits best with the Twisted way of doing things.
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From glyph at twistedmatrix.com  Mon Oct 10 18:02:54 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Oct 2016 17:02:54 -0700
Subject: [Twisted-Python] Is there a recommended way for a Service to
	request Application stop?
In-Reply-To: <CADzPF4sKVwg8iJmFXRZOaLjruQSur+fzCj1yd2MtkzkvZb1zkA@mail.gmail.com>
References: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
 <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>
 <CADzPF4sKVwg8iJmFXRZOaLjruQSur+fzCj1yd2MtkzkvZb1zkA@mail.gmail.com>
Message-ID: <8C06C92C-D12A-421B-846A-00ED9C69F675@twistedmatrix.com>


> On Oct 10, 2016, at 4:38 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Generically, can I somehow bubble up events through the Service
> hierarchy, or should I communicate with external objects to the
> hierarchy that can bubble down actions from higher up?


Following the <https://en.wikipedia.org/wiki/Single_responsibility_principle <https://en.wikipedia.org/wiki/Single_responsibility_principle>>, the service hierarchy's job is just to make sure everything gets started up and shut down together.

It sounds to me like you have a pretty well-defined hierarchy which seems like it fits into the service hierarchy because it's roughly parallel in terms of which objects participate; however, you have very application-specific semantics for this parallel hierarchy.  For example, it's pretty unusual to have a super-service reconfigure a subordinate service in order to recover from an error condition, in my experience, unless you're talking about stuff like erlang supervision hierarchies, but that requires runtime support like the code being recovered running in a subprocess that doesn't share state.

It often feels like abstractions are expensive so you should have as few of them as possible; but, in reality, *simple* abstractions are cheap, and what makes abstraction expensive is when you overload them.  Make a new, simple abstraction that contains exactly the semantics you just described, and use composition to point at the appropriate point in the MultiService hierarchy.  When it's time to "stop" a service, do setServiceParent(None); when it's time to "start" it, do setServiceParent(appropriateServiceParent).  This should take care of keeping your services in the appropriate state.

BTW, if you have stateful long-running services that have to self-modify based on changing circumstances, you might want to also check out https://github.com/glyph/automat <https://github.com/glyph/automat> to see if it can help you ensure that everything's in a consistent state.

Good luck!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161010/3e694983/attachment.html>

From hawkowl at atleastfornow.net  Tue Oct 11 02:53:29 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 11 Oct 2016 19:53:29 +1100
Subject: [Twisted-Python] Twisted 16.5.0rc1 Release Candidate Announcement
Message-ID: <8472BF75-7E5C-4AE3-B2BA-352BFE8114A2@atleastfornow.net>

Hello everyone! It's time for another Twisted release.

I bring you Twisted 16.5.0rc1, the first release candidate of the 16.5 series. This release contains the following:

- Deferred.addTimeout, for timing out your Deferreds! (contributed by cyli, reviews by adiroiban, theisencouple, manishtomar, markrwilliams)
- yield from support for Deferreds, in functions wrapped with twisted.internet.defer.ensureDeferred. This will work in Python 3.4, unlike async/await which is 3.5+ (contributed by hawkowl, reviews by markrwilliams, lukasa).
- The new asyncio interop reactor, which allows Twisted to run on top of the asyncio event loop. This doesn't include any Deferred-Future interop, but stay tuned! (contributed by itamar and hawkowl, reviews by rodrigc, markrwilliams)
- twisted.internet.cfreactor is now supported on Python 2.7 and Python 3.5+! This is useful for writing pyobjc or Toga applications. (contributed by hawkowl, reviews by glyph, markrwilliams)
- twisted.python.constants has been split out into constantly on PyPI, and likewise with twisted.python.versions going into the PyPI package incremental. Twisted now uses these external packages, which will be shared with other projects (like Klein). (contributed by hawkowl, reviews by glyph, markrwilliams)
- Many new Python 3 modules, including twisted.pair, twisted.python.zippath, twisted.spread.pb, and more parts of Conch! (contributed by rodrigc, hawkowl, glyph, berdario, & others, reviews by acabhishek942, rodrigc, & others)
- Many bug fixes and cleanups!
- 260+ closed tickets overall.

For more information, check the NEWS file (link provided below).

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/rc/16.5.0rc1/ <https://twistedmatrix.com/Releases/rc/16.5.0rc1/>) to get the release candidate tarballs and the full NEWS file. If you want to install it right away, run:

   pip install Twisted==16.5.0rc1

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161011/12318c25/attachment-0001.html>

From dansut at gmail.com  Tue Oct 11 14:25:01 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 11 Oct 2016 16:25:01 -0400
Subject: [Twisted-Python] Is there a recommended way for a Service to
 request Application stop?
In-Reply-To: <8C06C92C-D12A-421B-846A-00ED9C69F675@twistedmatrix.com>
References: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
 <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>
 <CADzPF4sKVwg8iJmFXRZOaLjruQSur+fzCj1yd2MtkzkvZb1zkA@mail.gmail.com>
 <8C06C92C-D12A-421B-846A-00ED9C69F675@twistedmatrix.com>
Message-ID: <CADzPF4skRs0LeG+DnKVQ5J2sBypdF-qed6qkgNU79r2vRhr1Aw@mail.gmail.com>

On Oct 10, 2016, at 4:38 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> Generically, can I somehow bubble up events through the Service
> hierarchy, or should I communicate with external objects to the
> hierarchy that can bubble down actions from higher up?

On Mon, Oct 10, 2016 at 8:02 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> Following the
> <https://en.wikipedia.org/wiki/Single_responsibility_principle>, the service
> hierarchy's job is just to make sure everything gets started up and shut
> down together.
>
> It sounds to me like you have a pretty well-defined hierarchy which seems
> like it fits into the service hierarchy because it's roughly parallel in
> terms of which objects participate; however, you have very
> application-specific semantics for this parallel hierarchy.

Maybe this was my conceptual issue; the parallels were close enough
that it just felt right to add the functionality to Twisted's Service
Hierarchy - close enough that I was sucked into thoughts of
modbusPollingClient IS-A Service... but keeping in mind the arguments
of composition vs inheritance, I somehow finished up with
modbusClientService HAS-A pollingLogic - whereas what I think you are
recommending here is that that pollingLogic HAS-A modbusClientService
and knows about a MultiService which it makes use of only to let the
Application have overall control over starting and stopping all the
active Services.

Actually I just read this back through and am not sure this is
actually really what you meant Glyph :-/
I do get that it seems I am grabbing the stick by the wrong end, I
guess I'll just go back to reading more example code to see if I can
find something that resonates with me as being close to what I'm
trying to achieve.

> [...]
> When it's time to "stop" a service, do setServiceParent(None); when it's
> time to "start" it, do setServiceParent(appropriateServiceParent).  This
> should take care of keeping your services in the appropriate state.

I have to admit I had not even thought of using setServiceParent(None)
to bring services down - looking at the source makes this concept
clearer and potentially useful to me though

> BTW, if you have stateful long-running services that have to self-modify
> based on changing circumstances, you might want to also check out
> https://github.com/glyph/automat to see if it can help you ensure that
> everything's in a consistent state.

I'm still really just prototyping at this stage, trying to find an
architecture that fits what I believe should be quite a simple
application that is reasonably well suited to Twisted, but once I've
passed this stage if I do find myself needing a FSM that is beyond
totally simple then I'll certainly give this a look. Thanks.
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From glyph at twistedmatrix.com  Tue Oct 11 23:58:54 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 11 Oct 2016 22:58:54 -0700
Subject: [Twisted-Python] Twisted 16.5.0rc1 Release Candidate
	Announcement
In-Reply-To: <8472BF75-7E5C-4AE3-B2BA-352BFE8114A2@atleastfornow.net>
References: <8472BF75-7E5C-4AE3-B2BA-352BFE8114A2@atleastfornow.net>
Message-ID: <F47C910A-43D1-4E9B-B0FE-B94B4181F785@twistedmatrix.com>

> On Oct 11, 2016, at 1:53 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hello everyone! It's time for another Twisted release.

Woohoo!  Looks like another awesome release :).

-glyph

> I bring you Twisted 16.5.0rc1, the first release candidate of the 16.5 series. This release contains the following:
> 
> - Deferred.addTimeout, for timing out your Deferreds! (contributed by cyli, reviews by adiroiban, theisencouple, manishtomar, markrwilliams)
> - yield from support for Deferreds, in functions wrapped with twisted.internet.defer.ensureDeferred. This will work in Python 3.4, unlike async/await which is 3.5+ (contributed by hawkowl, reviews by markrwilliams, lukasa).
> - The new asyncio interop reactor, which allows Twisted to run on top of the asyncio event loop. This doesn't include any Deferred-Future interop, but stay tuned! (contributed by itamar and hawkowl, reviews by rodrigc, markrwilliams)
> - twisted.internet.cfreactor is now supported on Python 2.7 and Python 3.5+! This is useful for writing pyobjc or Toga applications. (contributed by hawkowl, reviews by glyph, markrwilliams)
> - twisted.python.constants has been split out into constantly on PyPI, and likewise with twisted.python.versions going into the PyPI package incremental. Twisted now uses these external packages, which will be shared with other projects (like Klein). (contributed by hawkowl, reviews by glyph, markrwilliams)
> - Many new Python 3 modules, including twisted.pair, twisted.python.zippath, twisted.spread.pb, and more parts of Conch! (contributed by rodrigc, hawkowl, glyph, berdario, & others, reviews by acabhishek942, rodrigc, & others)
> - Many bug fixes and cleanups!
> - 260+ closed tickets overall.
> 
> For more information, check the NEWS file (link provided below).
> 
> As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/rc/16.5.0rc1/ <https://twistedmatrix.com/Releases/rc/16.5.0rc1/>) to get the release candidate tarballs and the full NEWS file. If you want to install it right away, run:
> 
>    pip install Twisted==16.5.0rc1
> 
> Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)
> 
> Twisted Regards,
> Amber Brown (HawkOwl)
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161011/123334ea/attachment.html>

From cory at lukasa.co.uk  Wed Oct 12 10:25:37 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 12 Oct 2016 17:25:37 +0100
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CAEOYnAQmbKHn9o2kCjN9-ouKi3d_EvWnOwRpCJuWX5-ZiCA5+Q@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
 <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
 <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>
 <CABH8oEOndAG_+Xe0dvdDH-K32_d7mprbCDxYM8c2RJzGwKg2QQ@mail.gmail.com>
 <CAEOYnAQmbKHn9o2kCjN9-ouKi3d_EvWnOwRpCJuWX5-ZiCA5+Q@mail.gmail.com>
Message-ID: <5DC576B6-55A0-4AC5-901A-E3EBA2CBBF37@lukasa.co.uk>

On this note, if anyone wanted to write a greenfield gRPC implementation for Twisted directly, rather than using the C++ library that Nathaniel has been working on, hyper-h2 and Twisted?s built-in HTTP/2 logic is likely to be a very useful leaping off point. My high-level understanding of gRPC is that at a wire-protocol level the other things required are some protocol buffers and some code generation. That?s definitely not *nothing*, but neither is it the same as implementing the whole thing in one go.

Cory


> On 7 Oct 2016, at 00:22, Nathaniel Manista <nathaniel at google.com> wrote:
> 
> On Thu, Oct 6, 2016 at 12:11 PM, Manish Tomar <manish.tomar at gmail.com <mailto:manish.tomar at gmail.com>> wrote:
> It will be nice if it can be implemented without IO [1] as Cory
> rightfully points out everywhere.
> 
> I'm a big fan of sans I/O; I think it will be interesting to see how much it can be applied to the C-language library that implements most of the behavior of gRPC Python.
> -N
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161012/c59731b5/attachment.html>

From tom.prince at ualberta.net  Wed Oct 12 15:11:45 2016
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 12 Oct 2016 21:11:45 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
Message-ID: <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>

I think if we are reconsidering the endpoint syntax, we should explicitly
have nested delimiters for quoting (so something like () or {}), to easily
allow multiple levels of nested endpoint strings (or any other kind of
string).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161012/572002ff/attachment.html>

From glyph at twistedmatrix.com  Wed Oct 12 15:19:17 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Oct 2016 14:19:17 -0700
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
Message-ID: <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>


> On Oct 12, 2016, at 2:11 PM, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> I think if we are reconsidering the endpoint syntax, we should explicitly have nested delimiters for quoting (so something like () or {}), to easily allow multiple levels of nested endpoint strings (or any other kind of string).

Do you have a suggestion or an example of how this might be used?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161012/396659ca/attachment.html>

From tom.prince at ualberta.net  Wed Oct 12 20:35:22 2016
From: tom.prince at ualberta.net (Tom Prince)
Date: Thu, 13 Oct 2016 02:35:22 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
Message-ID: <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>

> Do you have a suggestion or an example of how this might be used?


The idea I have in my head isn't backwards compatible, but I was thinking
of something like

haproxy:(tls:hostname.example:endpoint=(tcp:7.6.5.4:443))

This would break any endpoint description that starts with `(` but allows
arbitrarily nested endpoints (or even just date containing `:`).

Thinking about it some more, there isn't currently any endpoint
descriptions that have an empty name, so we could have a entirely new
syntax that starts with `:`. If we went in that direction, we'd definitely
want to think about future extensibility when designing it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161013/25265cfa/attachment.html>

From glyph at twistedmatrix.com  Thu Oct 13 01:23:33 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Oct 2016 00:23:33 -0700
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
 <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
Message-ID: <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>


> On Oct 12, 2016, at 7:35 PM, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> Thinking about it some more, there isn't currently any endpoint descriptions that have an empty name, so we could have a entirely new syntax that starts with `:`. If we went in that direction, we'd definitely want to think about future extensibility when designing it.

This applies more generally; no need for any weird hacks.  Any 'new' plugin could just opt in to a different syntax; we can just look up until the first ':'; we just need to define a new interface for a new syntax.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161013/042677fa/attachment.html>

From kevinjacobconway at gmail.com  Thu Oct 13 05:14:27 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 13 Oct 2016 11:14:27 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
 <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
 <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
Message-ID: <CAKF=+dhmJzNn1gheNJ-RT0-J+6dyEBuyYMtZ8VNvPUR9FLRRqg@mail.gmail.com>

> we can just look up until the first ':'; we just need to define a new
interface for a new syntax.

What do you think of adding a special argument for endpoint strings called
"wraps" or "pipe" that tells the parser to recombine the right-hand side
and send it back through the parser? For example:

 haproxy:*pipe=*
ssl:port=443:privateKey=/etc/ssl/server.pem:extraCertChain=/etc/ssl/chain.pem:sslmethod=SSLv3_METHOD:dhParameters=dh_param_1024.pem:
*pipe=*tcp:7.6.5.4:443:*pipe=*unix:path=/var/run/web.sock

I believe this would fit as a backwards compatible change to the syntax and
would also position us to add composition support to the existing endpoints
in backwards compatible ways. As endpoints gain composition support,
existing users can opt-in by adding the new argument to existing string
descriptors.

This topic coming back up is timely for me. I was recently talking with a
user of the haproxy endpoint wrapper who was hitting an issue with the SSL
endpoint not playing well when used in composition. I'll spin off another
thread for that topic, but coming up with a syntax for composition is going
to be pre-requisite to having true composition support.

On Thu, Oct 13, 2016 at 2:26 AM Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Oct 12, 2016, at 7:35 PM, Tom Prince <tom.prince at ualberta.net> wrote:
>
> Thinking about it some more, there isn't currently any endpoint
> descriptions that have an empty name, so we could have a entirely new
> syntax that starts with `:`. If we went in that direction, we'd definitely
> want to think about future extensibility when designing it.
>
>
> This applies more generally; no need for any weird hacks.  Any 'new'
> plugin could just opt in to a different syntax; we can just look up until
> the first ':'; we just need to define a new interface for a new syntax.
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161013/75847844/attachment-0001.html>

From tom.prince at ualberta.net  Thu Oct 13 13:47:54 2016
From: tom.prince at ualberta.net (Tom Prince)
Date: Thu, 13 Oct 2016 19:47:54 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
 <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
 <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
Message-ID: <CAOtB_kkTrN5aJAVq_+Z2rXdK50FP0VQKmL6fxxUHfCRRgZb6Yg@mail.gmail.com>

> This applies more generally; no need for any weird hacks.  Any 'new'
plugin could just opt in to a different syntax; we can just look up until
the first ':'; we just need to define a new interface for a new syntax.

I don't think that this provides a good user experience.

1) There are existing endpoints that want nestable endpoints, so either
    a) They don't change, somewhat defeating the purpose of having a new
syntax (or cluttering the endpoint namespace with less than useful
endpoints).
    b) They change incompatibility, defeating the purpose of trying to
maintain backwards compatability.

2) As user, I need to learn which endpoints support the new syntax, thus
potentially needing to know both methods of quoting and switch between them
as appropriate.


There are a couple of possible ways around this, without requiring a weird
hack.
- I wonder how many endpoints strings have ever been written whose value
starts with any of `[` `(` or `{`? I suspect that the number might in fact
be 0. In which case, although the change is technically incompatible, in
practice it wouldn't be.
- Alternatively, we could deprecate an unquoted [, (, { at the beginning of
a value, and then after a suitable deprecation period (perhaps additionally
a release where it is just an error), we could repurpose one of them to act
as quoting (leaving the other two for future extensiblity).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161013/9ab73b3c/attachment.html>

From glyph at twistedmatrix.com  Thu Oct 13 17:40:40 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Oct 2016 16:40:40 -0700
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAOtB_kkTrN5aJAVq_+Z2rXdK50FP0VQKmL6fxxUHfCRRgZb6Yg@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
 <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
 <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
 <CAOtB_kkTrN5aJAVq_+Z2rXdK50FP0VQKmL6fxxUHfCRRgZb6Yg@mail.gmail.com>
Message-ID: <A95858EC-231B-45E5-B7DD-D7B99B0C1C30@twistedmatrix.com>


> On Oct 13, 2016, at 12:47 PM, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> > This applies more generally; no need for any weird hacks.  Any 'new' plugin could just opt in to a different syntax; we can just look up until the first ':'; we just need to define a new interface for a new syntax.
> 
> I don't think that this provides a good user experience.
> 
> 1) There are existing endpoints that want nestable endpoints, so either
>     a) They don't change, somewhat defeating the purpose of having a new syntax (or cluttering the endpoint namespace with less than useful endpoints).

We already have this problem, and we will need to do a doc cleanup / consolidation / deprecation pass soon.  (see: tcp, tcp6, host, ssl, tls...)

>     b) They change incompatibility, defeating the purpose of trying to maintain backwards compatability.

As you've noticed, we may have several potential "outs" to have practically-compatible parsing syntaxes; the real problem is the internal factoring of the parsing APIs rather than the syntax.

> 2) As user, I need to learn which endpoints support the new syntax, thus potentially needing to know both methods of quoting and switch between them as appropriate.

As a user you're going to need to read the parameter documentation anyway; learning about new syntax is not much different than learning about a new parameter.  And you may not realize there _is_ a syntax; most configuration of this type is just copying and pasting a reasonable-looking example.  Not to say that we should be spuriously incompatible for those who have learned the rules, but the only rule to learn at this point is ": separates arguments, \ escapes :".  We could add one more rule without unduly stressing the cognitive burden of the endpoint system.

> There are a couple of possible ways around this, without requiring a weird hack.
> - I wonder how many endpoints strings have ever been written whose value starts with any of `[` `(` or `{`? I suspect that the number might in fact be 0. In which case, although the change is technically incompatible, in practice it wouldn't be.
> - Alternatively, we could deprecate an unquoted [, (, { at the beginning of a value, and then after a suitable deprecation period (perhaps additionally a release where it is just an error), we could repurpose one of them to act as quoting (leaving the other two for future extensiblity).

I suspect that this would be overkill here; we also have other options, like '(: :)', which would be totally compatible (there are no _arguments_ anywhere presently named "(").

-g

From trac at twistedmatrix.com  Sun Oct 16 00:05:19 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 16 Oct 2016 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1476597919.25.7988560955633887948@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161016/48eb019b/attachment.html>

From johnaherne at rocs.co.uk  Mon Oct 17 01:46:56 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 17 Oct 2016 08:46:56 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
	Twisted 16.4.1
Message-ID: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>

I have been running some tests to check some issue and have seen that
notifyFinish is not being called in 16.4.1

This is on Windows 10 using python 2.7.12

Checking back it  is not called 16.3.0 but is in 16.2.0

The test uses some sample code from Twisted web in 60 seconds that sets a
timer to allow the browser to halt the request by using Escape and make
notifyFinish  get called.

Before I did anything else I thought I would check and see if anyone else
was seeing this behaviour.

The code I am using is below:

from twisted.web.resource import Resource
from twisted.web.server import  Site, NOT_DONE_YET
from twisted.internet import reactor


class DelayedResource(Resource):
    def _delayedRender(self, request):
        print 'SEND RESPONSE'
        request.write("Sorry to keep you waiting.")
        request.finish()

    def _responseFailed(self, failure, call):
        print 'RESPONSE FAILED', failure
        call.cancel()


    def render_GET(self, request):
        call = reactor.callLater(10, self._delayedRender, request)
        request.notifyFinish().addErrback(self._responseFailed, call)
        return NOT_DONE_YET



resource = Resource()
print 'RESOURCE', resource
resource.putChild("logme", DelayedResource())
factory = Site(resource)

print 'FACTORY', factory
reactor.listenTCP(8080, factory)
reactor.run()



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161017/d2717d42/attachment.html>

From johnaherne at rocs.co.uk  Mon Oct 17 02:00:34 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 17 Oct 2016 09:00:34 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
	Twisted 16.4.1
Message-ID: <CAKmUHjaG6r-QxXgaXRV0G-9NGsGn6KOAFUMpKj7K6TQfRCFxmg@mail.gmail.com>

Apologies for not being more comprehensive.

This happens on python2.7 windows 10 64 bit and on windows 7 32 bit



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161017/01b3a89c/attachment.html>

From cory at lukasa.co.uk  Mon Oct 17 08:13:21 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 17 Oct 2016 15:13:21 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
Message-ID: <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>


> On 17 Oct 2016, at 08:46, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have been running some tests to check some issue and have seen that notifyFinish is not being called in 16.4.1
> 
> This is on Windows 10 using python 2.7.12
> 
> Checking back it  is not called 16.3.0 but is in 16.2.0
> 
> The test uses some sample code from Twisted web in 60 seconds that sets a timer to allow the browser to halt the request by using Escape and make notifyFinish  get called.
> 
> Before I did anything else I thought I would check and see if anyone else was seeing this behaviour.

Yup, this looks like a known issue: https://twistedmatrix.com/trac/ticket/8692

Cory

From johnaherne at rocs.co.uk  Mon Oct 17 10:27:58 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 17 Oct 2016 17:27:58 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
Message-ID: <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>

OK. Thanks for the link.

That explains what is going on although I'm not too clear on the details.

What I was looking to do was set up an http session and when the browser
went away use that a the trigger to expire the session.

I didn't just want to set some arbitrary time frame to expire the session
but if they just exited the browser or browser tab I could use notifyFinish
to pick up the lost connection and I could then expire the session.

I have'nt  spotted any other info re sessions that would help with this.

Thanks

John Aherne


On Mon, Oct 17, 2016 at 3:13 PM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 17 Oct 2016, at 08:46, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > I have been running some tests to check some issue and have seen that
> notifyFinish is not being called in 16.4.1
> >
> > This is on Windows 10 using python 2.7.12
> >
> > Checking back it  is not called 16.3.0 but is in 16.2.0
> >
> > The test uses some sample code from Twisted web in 60 seconds that sets
> a timer to allow the browser to halt the request by using Escape and make
> notifyFinish  get called.
> >
> > Before I did anything else I thought I would check and see if anyone
> else was seeing this behaviour.
>
> Yup, this looks like a known issue: https://twistedmatrix.com/
> trac/ticket/8692
>
> Cory
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161017/f7ee7a85/attachment.html>

From cory at lukasa.co.uk  Mon Oct 17 10:48:20 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 17 Oct 2016 17:48:20 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
 <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
Message-ID: <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>


> On 17 Oct 2016, at 17:27, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> OK. Thanks for the link.
> 
> That explains what is going on although I'm not too clear on the details.
> 
> What I was looking to do was set up an http session and when the browser went away use that a the trigger to expire the session.
> 
> I didn't just want to set some arbitrary time frame to expire the session but if they just exited the browser or browser tab I could use notifyFinish to pick up the lost connection and I could then expire the session.
> 
> I have'nt  spotted any other info re sessions that would help with this.

The biggest issue here is that ?when the browser goes away? is not a well-defined condition that the server can observe. Browsers will attempt to keep connections open as long as they can, meaning that connection termination may not be observed until quite some time later.

Is there any reason that standard cookies (ones that expire at the end of a browser session) + explicit log out aren?t a suitable approach here?

Cory



From johnaherne at rocs.co.uk  Tue Oct 18 00:37:52 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 18 Oct 2016 07:37:52 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
 <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
 <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
Message-ID: <CAKmUHjZOOGqe+XiAQmNbmo0k3xLKcbRJyLnFP9moJiHU7UneqQ@mail.gmail.com>

Well since notifyFinish does not do what I was hoping, I'm back to using
the standard cookie expire mechanism.

I could use javascript to detect idle time, but that's just as arbitrary as
expiring cookies.

Thanks

John Aherne



On Mon, Oct 17, 2016 at 5:48 PM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 17 Oct 2016, at 17:27, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > OK. Thanks for the link.
> >
> > That explains what is going on although I'm not too clear on the details.
> >
> > What I was looking to do was set up an http session and when the browser
> went away use that a the trigger to expire the session.
> >
> > I didn't just want to set some arbitrary time frame to expire the
> session but if they just exited the browser or browser tab I could use
> notifyFinish to pick up the lost connection and I could then expire the
> session.
> >
> > I have'nt  spotted any other info re sessions that would help with this.
>
> The biggest issue here is that ?when the browser goes away? is not a
> well-defined condition that the server can observe. Browsers will attempt
> to keep connections open as long as they can, meaning that connection
> termination may not be observed until quite some time later.
>
> Is there any reason that standard cookies (ones that expire at the end of
> a browser session) + explicit log out aren?t a suitable approach here?
>
> Cory
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161018/079ccdaa/attachment.html>

From johnaherne at rocs.co.uk  Tue Oct 18 01:29:02 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 18 Oct 2016 08:29:02 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
 <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
 <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
Message-ID: <CAKmUHja9BU0ojncH6KSF8VpnuZaj7CUpy0Df9yCoU99mWuW=Cw@mail.gmail.com>

Having read the irc log a few times I'm still not clear what is meant to
happen.

I can't see under what circumstances notifyFinish will return a Failure.

John Aherne


On Mon, Oct 17, 2016 at 5:48 PM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 17 Oct 2016, at 17:27, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > OK. Thanks for the link.
> >
> > That explains what is going on although I'm not too clear on the details.
> >
> > What I was looking to do was set up an http session and when the browser
> went away use that a the trigger to expire the session.
> >
> > I didn't just want to set some arbitrary time frame to expire the
> session but if they just exited the browser or browser tab I could use
> notifyFinish to pick up the lost connection and I could then expire the
> session.
> >
> > I have'nt  spotted any other info re sessions that would help with this.
>
> The biggest issue here is that ?when the browser goes away? is not a
> well-defined condition that the server can observe. Browsers will attempt
> to keep connections open as long as they can, meaning that connection
> termination may not be observed until quite some time later.
>
> Is there any reason that standard cookies (ones that expire at the end of
> a browser session) + explicit log out aren?t a suitable approach here?
>
> Cory
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161018/7620615a/attachment.html>

From glyph at twistedmatrix.com  Tue Oct 18 02:18:39 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2016 01:18:39 -0700
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
	Twisted 16.4.1
In-Reply-To: <CAKmUHja9BU0ojncH6KSF8VpnuZaj7CUpy0Df9yCoU99mWuW=Cw@mail.gmail.com>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
 <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
 <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
 <CAKmUHja9BU0ojncH6KSF8VpnuZaj7CUpy0Df9yCoU99mWuW=Cw@mail.gmail.com>
Message-ID: <6229BFC7-FAD8-4409-B6F1-F6E278CF78FC@twistedmatrix.com>


> On Oct 18, 2016, at 12:29 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Having read the irc log a few times I'm still not clear what is meant to happen.
> 
> I can't see under what circumstances notifyFinish will return a Failure.

The difference between firing with None and firing with a Failure is extremely subtle.  If the client connection terminates "before it's ready" then you'll get an Failure, but this is fairly fuzzily defined in terms of application-level semantics.  A connection that is "not ready" to terminate might be one that has outstanding data to send to the client which the client doesn't receive, or a connection which has only partially received a request.  There are other low-level details of the socket which might also be relevant (for example, I think you might also get this if the client neglects to send a CLOSE_ALERT TLS message).

For most applications, the difference between "failure" and "success" in this case just isn't very interesting.

As Corey identified earlier in the thread though, _also_ a bug where it isn't being called all the time when we expect it.  As the ticket said though, you can try to work around this by just calling resumeProducing() unconditionally at the beginning of your request processing...

-glyph




From itamar at itamarst.org  Tue Oct 18 06:50:10 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 18 Oct 2016 08:50:10 -0400
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
Message-ID: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>

Not been doing much Twisted lately, but have been doing async stuff
elsewhere, and I've learned some useful things.

1. Callbacks should be sync or async, but never
sometimes-one-sometimes-the-other. For details go read
http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/.
For example, Deferred.addCallback(f) really should never run f()
immediately.

3. By instrumenting all callbacks it manages, which may or may not
require item #1, Twisted can have a context that automatically follows
callbacks. Node has this and it is extremely useful.
http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/
is best summary I've found with a bit of searching.

-- 
Itamar Turner-Trauring


From glyph at twistedmatrix.com  Tue Oct 18 13:44:33 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2016 12:44:33 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
Message-ID: <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>


> On Oct 18, 2016, at 5:50 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Not been doing much Twisted lately, but have been doing async stuff
> elsewhere, and I've learned some useful things.

Thanks for writing these up, Itamar!  This sort of reflection is rare and it's always helpful :).

> 1. Callbacks should be sync or async, but never
> sometimes-one-sometimes-the-other. For details go read
> http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/.
> For example, Deferred.addCallback(f) really should never run f()
> immediately.

This has come up a lot in a compare-and-contrast of Twisted vs. asyncio.

I agree that the problems with synchronous callbacks are not insignificant (reentrancy is a degenerate form of preemption, and as we all know preemption is the corrupt wellspring of all bugs).  However, the benefit, i.e. consistency of behavior with respect to reentrancy, comes with a cost: tight coupling to an event loop.  In asyncio, Future's tight coupling to call_soon is a source of problems; it makes it hard to write a test without setting up an elaborate scheduling trampoline, whereas successResultOf/failureResultOf are quite simple to work with.

I think Deferred as it is today is a pretty good compromise between the two positions.  On the one hand it is decoupled from the event loop.  On the other - and this is important - no Deferred-returning API will ever call your callbacks synchronously.  Deferred.addCallback will, of course, but savvy Twisted programmers can (and should) do this, if they have dependent state changes:

self.manipulateSomeStateForSetup()
d = doSomethingPotentiallySynchronous()
self.manipulateSomeStateForProcessing()
d.addCallback(completeOperation)

As a caller, you can always decide whether you can safely be re-entered or not.  In most cases, simply moving the 'addCallback' to the end of the function (a-la Go's "defer", oddly enough) is fine.  In more complex cases where you really need to unwind reentrancy completely, you can do your own callLater(0) or callFromThread() from an object with a reference to a reactor.

> 3.

What happened to '2'? :)

> By instrumenting all callbacks it manages, which may or may not
> require item #1, Twisted can have a context that automatically follows
> callbacks. Node has this and it is extremely useful.
> http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/
> is best summary I've found with a bit of searching.

This was _always_ supposed to be the way that Twisted worked, but frankly I just wasn't smart enough to figure it out.  This is why twisted.python.context came to exist in the first place; I always wanted to attach it to Deferred somehow.  I will watch this talk intently; if #1 really is required to address this, my opinion might change.  A PR would be intensely appreciated.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161018/d234ff8f/attachment.html>

From kevinjacobconway at gmail.com  Tue Oct 18 17:05:08 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Tue, 18 Oct 2016 23:05:08 +0000
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
Message-ID: <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>

> This is why twisted.python.context came to exist in the first place; I
always wanted to attach it to Deferred somehow

Well, it's not something we've announced yet through any official channel,
but we had to solve the context propagation problem at Atlassian to
instrument our services with traceable logging. We open sourced our
solution at https://bitbucket.org/hipchat/txlocal. The answer for us was an
extension for the reactor, thread pool, and inline callbacks that maintain
the needed state. There's a readme with some insight into how we tool our
services.

We've had it on our backlog to address the mailing list and, possibly even,
discuss what it would take to put this into Twisted. I guess now is as good
if a time as any. Feel free to spin off a another thread or reach out to me
off list with any questions or feedback.

On Tue, Oct 18, 2016, 14:47 Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Oct 18, 2016, at 5:50 AM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> Not been doing much Twisted lately, but have been doing async stuff
> elsewhere, and I've learned some useful things.
>
>
> Thanks for writing these up, Itamar!  This sort of reflection is rare and
> it's always helpful :).
>
> 1. Callbacks should be sync or async, but never
> sometimes-one-sometimes-the-other. For details go read
> http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/.
> For example, Deferred.addCallback(f) really should never run f()
> immediately.
>
>
> This has come up a lot in a compare-and-contrast of Twisted vs. asyncio.
>
> I agree that the problems with synchronous callbacks are not insignificant
> (reentrancy is a degenerate form of preemption, and as we all know
> preemption is the corrupt wellspring of all bugs).  However, the benefit,
> i.e. consistency of behavior with respect to reentrancy, comes with a cost:
> tight coupling to an event loop.  In asyncio, Future's tight coupling to
> call_soon is a source of problems; it makes it hard to write a test without
> setting up an elaborate scheduling trampoline, whereas
> successResultOf/failureResultOf are quite simple to work with.
>
> I think Deferred as it is today is a pretty good compromise between the
> two positions.  On the one hand it is decoupled from the event loop.  On
> the other - and this is important - *no Deferred-returning API will ever
> call your callbacks synchronously*.  Deferred.addCallback will, of
> course, but savvy Twisted programmers can (and should) do this, if they
> have dependent state changes:
>
> self.manipulateSomeStateForSetup()
>
> d = doSomethingPotentiallySynchronous()
> *self.manipulateSomeStateForProcessing()*
> d.addCallback(completeOperation)
>
>
> As a caller, you can always decide whether you can safely be re-entered or
> not.  In most cases, simply moving the 'addCallback' to the end of the
> function (a-la Go's "defer", oddly enough) is fine.  In more complex cases
> where you really need to unwind reentrancy completely, you can do your own
> callLater(0) or callFromThread() from an object with a reference to a
> reactor.
>
> 3.
>
>
> What happened to '2'? :)
>
> By instrumenting all callbacks it manages, which may or may not
> require item #1, Twisted can have a context that automatically follows
> callbacks. Node has this and it is extremely useful.
>
> http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/
> is best summary I've found with a bit of searching.
>
>
> This was _always_ supposed to be the way that Twisted worked, but frankly
> I just wasn't smart enough to figure it out.  This is why
> twisted.python.context came to exist in the first place; I always wanted to
> attach it to Deferred somehow.  I will watch this talk intently; if #1
> really is required to address this, my opinion might change.  A PR would be
> intensely appreciated.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161018/3e000c49/attachment.html>

From glyph at twistedmatrix.com  Tue Oct 18 18:47:57 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2016 17:47:57 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>
Message-ID: <D7C9C24F-9527-499C-B7C5-149C0F947860@twistedmatrix.com>


> On Oct 18, 2016, at 4:05 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> > This is why twisted.python.context came to exist in the first place; I always wanted to attach it to Deferred somehow
> 
> Well, it's not something we've announced yet through any official channel, but we had to solve the context propagation problem at Atlassian to instrument our services with traceable logging. We open sourced our solution at https://bitbucket.org/hipchat/txlocal <https://bitbucket.org/hipchat/txlocal>. The answer for us was an extension for the reactor, thread pool, and inline callbacks that maintain the needed state. There's a readme with some insight into how we tool our services.
> 
This is (A) very cool, and (B) making such aggressive use of private APIs that it could win a contest about how to ensure that you break on every new release of Twisted :).  I'm super impressed that you tracked the introduction of twisted._threads and support both old- and new-style thread pools!
> We've had it on our backlog to address the mailing list and, possibly even, discuss what it would take to put this into Twisted. I guess now is as good if a time as any. Feel free to spin off a another thread or reach out to me off list with any questions or feedback
> 
This seems like as good a time to talk about it as any!  Integrating this into the core in some fashion would be good, but I imagine that it's a non-trivial impact to performance, so it would be worthwhile to track that.

Speaking of performance - I found the long digression on "Don't Switch In The Core" interesting, since we actually _do_ tracking this kind of context already, for logging.  I was a little surprised you didn't integrate with this at all.

To be fair, this is something that our friends over at PyPy have been bugging us about since forever; when you're benchmarking raw wire speed it does tend to show up in profiling.

I also take it from the performance notes that you're not using PyPy?  __slots__ shouldn't make much of a difference there.  (In fact I'm given to believe it's a slight _decrease_ in performance on pypy...)

-glyph

> On Tue, Oct 18, 2016, 14:47 Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> On Oct 18, 2016, at 5:50 AM, Itamar Turner-Trauring <itamar at itamarst.org <mailto:itamar at itamarst.org>> wrote:
>> 
>> Not been doing much Twisted lately, but have been doing async stuff
>> elsewhere, and I've learned some useful things.
> 
> Thanks for writing these up, Itamar!  This sort of reflection is rare and it's always helpful :).
> 
>> 1. Callbacks should be sync or async, but never
>> sometimes-one-sometimes-the-other. For details go read
>> http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/ <http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/>.
>> For example, Deferred.addCallback(f) really should never run f()
>> immediately.
> 
> This has come up a lot in a compare-and-contrast of Twisted vs. asyncio.
> 
> I agree that the problems with synchronous callbacks are not insignificant (reentrancy is a degenerate form of preemption, and as we all know preemption is the corrupt wellspring of all bugs).  However, the benefit, i.e. consistency of behavior with respect to reentrancy, comes with a cost: tight coupling to an event loop.  In asyncio, Future's tight coupling to call_soon is a source of problems; it makes it hard to write a test without setting up an elaborate scheduling trampoline, whereas successResultOf/failureResultOf are quite simple to work with.
> 
> I think Deferred as it is today is a pretty good compromise between the two positions.  On the one hand it is decoupled from the event loop.  On the other - and this is important - no Deferred-returning API will ever call your callbacks synchronously.  Deferred.addCallback will, of course, but savvy Twisted programmers can (and should) do this, if they have dependent state changes:
> 
> self.manipulateSomeStateForSetup()
> d = doSomethingPotentiallySynchronous()
> self.manipulateSomeStateForProcessing()
> d.addCallback(completeOperation)
> 
> As a caller, you can always decide whether you can safely be re-entered or not.  In most cases, simply moving the 'addCallback' to the end of the function (a-la Go's "defer", oddly enough) is fine.  In more complex cases where you really need to unwind reentrancy completely, you can do your own callLater(0) or callFromThread() from an object with a reference to a reactor.
> 
>> 3.
> 
> What happened to '2'? :)
> 
>> By instrumenting all callbacks it manages, which may or may not
>> require item #1, Twisted can have a context that automatically follows
>> callbacks. Node has this and it is extremely useful.
>> http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/ <http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/>
>> is best summary I've found with a bit of searching.
> 
> This was _always_ supposed to be the way that Twisted worked, but frankly I just wasn't smart enough to figure it out.  This is why twisted.python.context came to exist in the first place; I always wanted to attach it to Deferred somehow.  I will watch this talk intently; if #1 really is required to address this, my opinion might change.  A PR would be intensely appreciated.
> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161018/abe895f6/attachment-0001.html>

From kevinjacobconway at gmail.com  Tue Oct 18 20:09:25 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Wed, 19 Oct 2016 02:09:25 +0000
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <D7C9C24F-9527-499C-B7C5-149C0F947860@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>
 <D7C9C24F-9527-499C-B7C5-149C0F947860@twistedmatrix.com>
Message-ID: <CAKF=+djEoQ_8U_c92O2gRy+HgAxEPorUM_FXS69WkwQMYCbz0Q@mail.gmail.com>

> making such aggressive use of private APIs that it could win a contest
about how to ensure that you break on every new release of Twisted :)

We're very aware of that! It's one of the reasons we have the test matrix
set up to run multiple versions of Python and Twisted. I have not started
on 16.X compatibility yet.

 >  I imagine that it's a non-trivial impact to performance, so it would be
worthwhile to track that.

We put this this through some extensive benchmarks and testing to measure
the performance impact. For example, the details are logged in a commit
message but, we initially implemented the @inlineCallbacks extension as a
coroutine wrapper. However, we found that the way t.p.Failure tries to
serialize itself, and its local+global scopes, to a dictionary caused
enormous memory and CPU consumption when triggered because of the added
objects in those spaces. The negative impact grew exponentially with levels
of nested coroutines. Very bad day.

Once we pivoted to a small fork of @inlineCallbacks, we measured the
overall performance hit to be negligible in our services. I'll dig around
to see if I can find where we documented the actual numbers we saw. At a
macro level, our service wide stats showed no meaningful growth of runtime
or memory consumption.

> digression on "Don't Switch In The Core"

I was surprised at how much switching this context implementation was when
we put it in the lower level read/write callbacks. Each of our services
process a large amount of continually streaming data and our profiles show,
IIRC, that one of the top 5 consumers of CPU time was calling the
read/write callbacks. When we added this to those paths it increased
overall CPU usage by double digit percentage points. If this feature were
available as an opt-in reactor extension then providers could capacity plan
around the performance hit. We found it more valuable to move the switching
closer to application protocol code where switches happen less frequently.

  > I also take it from the performance notes that you're not using PyPy?

We're still on cPython. PyPy is something we've talked about before but
haven't invested much time into yet. I don't know to what extent PyPy might
change the performance characteristics of the project.

On Tue, Oct 18, 2016 at 7:50 PM Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

On Oct 18, 2016, at 4:05 PM, Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> This is why twisted.python.context came to exist in the first place; I
always wanted to attach it to Deferred somehow

Well, it's not something we've announced yet through any official channel,
but we had to solve the context propagation problem at Atlassian to
instrument our services with traceable logging. We open sourced our
solution at https://bitbucket.org/hipchat/txlocal. The answer for us was an
extension for the reactor, thread pool, and inline callbacks that maintain
the needed state. There's a readme with some insight into how we tool our
services.

This is (A) very cool, and (B) making such aggressive use of private APIs
that it could win a contest about how to ensure that you break on every new
release of Twisted :).  I'm super impressed that you tracked the
introduction of twisted._threads and support both old- and new-style thread
pools!

We've had it on our backlog to address the mailing list and, possibly even,
discuss what it would take to put this into Twisted. I guess now is as good
if a time as any. Feel free to spin off a another thread or reach out to me
off list with any questions or feedback

This seems like as good a time to talk about it as any!  Integrating this
into the core in some fashion would be good, but I imagine that it's a
non-trivial impact to performance, so it would be worthwhile to track that.

Speaking of performance - I found the long digression on "Don't Switch In
The Core" interesting, since we actually _do_ tracking this kind of context
already, for logging.  I was a little surprised you didn't integrate with
this at all.

To be fair, this is something that our friends over at PyPy have been
bugging us about since forever; when you're benchmarking raw wire speed it
does tend to show up in profiling.

I also take it from the performance notes that you're not using PyPy?
 __slots__ shouldn't make much of a difference there.  (In fact I'm given
to believe it's a slight _decrease_ in performance on pypy...)

-glyph

On Tue, Oct 18, 2016, 14:47 Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

On Oct 18, 2016, at 5:50 AM, Itamar Turner-Trauring <itamar at itamarst.org>
wrote:

Not been doing much Twisted lately, but have been doing async stuff
elsewhere, and I've learned some useful things.


Thanks for writing these up, Itamar!  This sort of reflection is rare and
it's always helpful :).

1. Callbacks should be sync or async, but never
sometimes-one-sometimes-the-other. For details go read
http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/.
For example, Deferred.addCallback(f) really should never run f()
immediately.


This has come up a lot in a compare-and-contrast of Twisted vs. asyncio.

I agree that the problems with synchronous callbacks are not insignificant
(reentrancy is a degenerate form of preemption, and as we all know
preemption is the corrupt wellspring of all bugs).  However, the benefit,
i.e. consistency of behavior with respect to reentrancy, comes with a cost:
tight coupling to an event loop.  In asyncio, Future's tight coupling to
call_soon is a source of problems; it makes it hard to write a test without
setting up an elaborate scheduling trampoline, whereas
successResultOf/failureResultOf are quite simple to work with.

I think Deferred as it is today is a pretty good compromise between the two
positions.  On the one hand it is decoupled from the event loop.  On the
other - and this is important - *no Deferred-returning API will ever call
your callbacks synchronously*.  Deferred.addCallback will, of course, but
savvy Twisted programmers can (and should) do this, if they have dependent
state changes:

self.manipulateSomeStateForSetup()

d = doSomethingPotentiallySynchronous()
*self.manipulateSomeStateForProcessing()*
d.addCallback(completeOperation)


As a caller, you can always decide whether you can safely be re-entered or
not.  In most cases, simply moving the 'addCallback' to the end of the
function (a-la Go's "defer", oddly enough) is fine.  In more complex cases
where you really need to unwind reentrancy completely, you can do your own
callLater(0) or callFromThread() from an object with a reference to a
reactor.

3.


What happened to '2'? :)

By instrumenting all callbacks it manages, which may or may not
require item #1, Twisted can have a context that automatically follows
callbacks. Node has this and it is extremely useful.
http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/
is best summary I've found with a bit of searching.


This was _always_ supposed to be the way that Twisted worked, but frankly I
just wasn't smart enough to figure it out.  This is why
twisted.python.context came to exist in the first place; I always wanted to
attach it to Deferred somehow.  I will watch this talk intently; if #1
really is required to address this, my opinion might change.  A PR would be
intensely appreciated.

-glyph

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161019/1fb34863/attachment.html>

From glyph at twistedmatrix.com  Wed Oct 19 12:55:24 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Oct 2016 11:55:24 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <CAKF=+djEoQ_8U_c92O2gRy+HgAxEPorUM_FXS69WkwQMYCbz0Q@mail.gmail.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>
 <D7C9C24F-9527-499C-B7C5-149C0F947860@twistedmatrix.com>
 <CAKF=+djEoQ_8U_c92O2gRy+HgAxEPorUM_FXS69WkwQMYCbz0Q@mail.gmail.com>
Message-ID: <51D84DEE-1433-46C6-9B32-010C45CB975B@twistedmatrix.com>


> On Oct 18, 2016, at 7:09 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> > making such aggressive use of private APIs that it could win a contest about how to ensure that you break on every new release of Twisted :)
> 
> We're very aware of that! It's one of the reasons we have the test matrix set up to run multiple versions of Python and Twisted. I have not started on 16.X compatibility yet.
> 
>  >  I imagine that it's a non-trivial impact to performance, so it would be worthwhile to track that.
> 
> We put this this through some extensive benchmarks and testing to measure the performance impact. For example, the details are logged in a commit message but, we initially implemented the @inlineCallbacks extension as a coroutine wrapper. However, we found that the way t.p.Failure tries to serialize itself, and its local+global scopes, to a dictionary caused enormous memory and CPU consumption when triggered because of the added objects in those spaces. The negative impact grew exponentially with levels of nested coroutines. Very bad day.

What are you referring to as a "coroutine" here?  A generator?  And exponential growth, you say?  That sounds very surprising.

> Once we pivoted to a small fork of @inlineCallbacks, we measured the overall performance hit to be negligible in our services. I'll dig around to see if I can find where we documented the actual numbers we saw. At a macro level, our service wide stats showed no meaningful growth of runtime or memory consumption.

Does this mean you only get context tracking against inlineCallbacks, and not other usages of Deferred?

> > digression on "Don't Switch In The Core"
> 
> I was surprised at how much switching this context implementation was when we put it in the lower level read/write callbacks. Each of our services process a large amount of continually streaming data and our profiles show, IIRC, that one of the top 5 consumers of CPU time was calling the read/write callbacks. When we added this to those paths it increased overall CPU usage by double digit percentage points. If this feature were available as an opt-in reactor extension then providers could capacity plan around the performance hit. We found it more valuable to move the switching closer to application protocol code where switches happen less frequently.

Maybe "switching" is more expensive than I realized.  Where is this implemented?

>   > I also take it from the performance notes that you're not using PyPy?
> 
> We're still on cPython. PyPy is something we've talked about before but haven't invested much time into yet. I don't know to what extent PyPy might change the performance characteristics of the project.

As I always tell people - if you care about performance, PyPy should be step zero.  Optimizing for CPython looks like adding weird implementation-specific hacks that might start working or be backwards in the next version; optimizing for PyPy means making the code simpler and more readable so the JIT can figure out what to do ;).  So the pressure that optimizing for PyPy exerts on your code is generally a lot healthier.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161019/7c0eb2cc/attachment.html>

From itamar at itamarst.org  Wed Oct 19 15:45:53 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2016 17:45:53 -0400
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
Message-ID: <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>




On Tue, Oct 18, 2016, at 03:44 PM, Glyph Lefkowitz wrote:
>
> I think Deferred as it is today is a pretty good compromise between
> the two positions.  On the one hand it is decoupled from the event
> loop.  On the other - and this is important - *no Deferred-returning
> API will ever call your callbacks synchronously*.
> Deferred.addCallback will, of course, but savvy Twisted programmers
> can (and should) do this, if they have dependent state changes:
>
>> self.manipulateSomeStateForSetup()
>>
>> d = doSomethingPotentiallySynchronous()
>> *self.manipulateSomeStateForProcessing()*
>> d.addCallback(completeOperation)
>
> As a caller, you can always decide whether you can safely be re-
> entered or not.  In most cases, simply moving the 'addCallback' to the
> end of the function (a-la Go's "defer", oddly enough) is fine.  In
> more complex cases where you really need to unwind reentrancy
> completely, you can do your own callLater(0) or callFromThread() from
> an object with a reference to a reactor.

Well... I had a test that went through synchronous Deferred path. And
yeah, it was easier to write than async test. But it failed to catch a
bug that was only in async case. So the problem I see is that supporting
both in Deferred means you need twice the number of tests each time you
use Deferreds.

>> 3.
>
> What happened to '2'? :)

There were only two points :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161019/4e461e8b/attachment.html>

From itamar at itamarst.org  Wed Oct 19 15:47:08 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2016 17:47:08 -0400
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
Message-ID: <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>




On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:
> Well... I had a test that went through synchronous Deferred path. And
> yeah, it was easier to write than async test. But it failed to catch a
> bug that was only in async case. So the problem I see is that
> supporting both in Deferred means you need twice the number of tests
> each time you use Deferreds.
>

Er, that was unclear. I had a bug that wasn't caught by tests because it
passed with sync Deferred and failed with async Deferred callback, and I
didn't have tests for latter.

--
Itamar Turner-Trauring

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161019/20201182/attachment.html>

From glyph at twistedmatrix.com  Wed Oct 19 15:54:43 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Oct 2016 14:54:43 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
Message-ID: <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>


> On Oct 19, 2016, at 2:47 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:
>> Well... I had a test that went through synchronous Deferred path. And yeah, it was easier to write than async test. But it failed to catch a bug that was only in async case. So the problem I see is that supporting both in Deferred means you need twice the number of tests each time you use Deferreds.
> 
> Er, that was unclear. I had a bug that wasn't caught by tests because it passed with sync Deferred and failed with async Deferred callback, and I didn't have tests for latter.


To be clear: I do see this as a downside to Deferred's architecture; it's a tradeoff.  I see the loose coupling with the event loop as a worthwhile upside.

However, it's totally possible to write the async Deferred callback case as well, just by having the test fire the Deferred after returning to the test body instead of firing it before :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161019/5888a860/attachment-0001.html>

From exarkun at twistedmatrix.com  Wed Oct 19 17:25:20 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 19 Oct 2016 19:25:20 -0400
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
Message-ID: <CAEeXt4MLmpJ4Z1=tDJWva2W_T67U+EGk2ZbAJGP1_JUTPJ-9+Q@mail.gmail.com>

It's also possible to write a little bit of testing library code and get
both versions of the test nearly for free.  Unfortunately, I very rarely
see test suites written that way.  I think many people don't realize there
are two cases to handle or believe testing both cases is too expensive for
them (perhaps because they don't realize you can reuse the code for doing
so to save on the cost).

Jean-Paul

On Wed, Oct 19, 2016 at 5:54 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Oct 19, 2016, at 2:47 PM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:
>
> Well... I had a test that went through synchronous Deferred path. And
> yeah, it was easier to write than async test. But it failed to catch a bug
> that was only in async case. So the problem I see is that supporting both
> in Deferred means you need twice the number of tests each time you use
> Deferreds.
>
>
> Er, that was unclear. I had a bug that wasn't caught by tests because it
> passed with sync Deferred and failed with async Deferred callback, and I
> didn't have tests for latter.
>
>
> To be clear: I do see this as a *downside* to Deferred's architecture;
> it's a tradeoff.  I see the loose coupling with the event loop as a
> worthwhile upside.
>
> However, it's totally possible to write the async Deferred callback case
> as well, just by having the test fire the Deferred after returning to the
> test body instead of firing it before :-).
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161019/b1b750a2/attachment.html>

From hawkowl at atleastfornow.net  Wed Oct 19 17:43:58 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 20 Oct 2016 10:43:58 +1100
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
Message-ID: <281845A0-2369-43C0-BAEF-5367DD8A2856@atleastfornow.net>


> On 20 Oct. 2016, at 08:54, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Oct 19, 2016, at 2:47 PM, Itamar Turner-Trauring <itamar at itamarst.org <mailto:itamar at itamarst.org>> wrote:
>> 
>> On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:
>>> Well... I had a test that went through synchronous Deferred path. And yeah, it was easier to write than async test. But it failed to catch a bug that was only in async case. So the problem I see is that supporting both in Deferred means you need twice the number of tests each time you use Deferreds.
>> 
>> Er, that was unclear. I had a bug that wasn't caught by tests because it passed with sync Deferred and failed with async Deferred callback, and I didn't have tests for latter.
> 
> 
> To be clear: I do see this as a downside to Deferred's architecture; it's a tradeoff.  I see the loose coupling with the event loop as a worthwhile upside.

One thing that I have still not figured out is how Futures (which are tightly tied to an event loop) will possibly ever work over multiple event loops. I think since you can't really chain them, this is less of a problem, but Deferreds like to absorb other Deferreds and make one big one, which would make the tight coupling problematic if you wanted to use two event loops (like, say, a GTK one and an IOCP one on Windows).

- Amber

> 
> However, it's totally possible to write the async Deferred callback case as well, just by having the test fire the Deferred after returning to the test body instead of firing it before :-).
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161020/0eb80b1d/attachment.html>

From glyph at twistedmatrix.com  Wed Oct 19 18:07:05 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Oct 2016 17:07:05 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <CAEeXt4MLmpJ4Z1=tDJWva2W_T67U+EGk2ZbAJGP1_JUTPJ-9+Q@mail.gmail.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
 <CAEeXt4MLmpJ4Z1=tDJWva2W_T67U+EGk2ZbAJGP1_JUTPJ-9+Q@mail.gmail.com>
Message-ID: <5080C176-9A6C-4D0F-B5C3-8076A12B858E@twistedmatrix.com>


> On Oct 19, 2016, at 4:25 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> It's also possible to write a little bit of testing library code and get both versions of the test nearly for free.  Unfortunately, I very rarely see test suites written that way.  I think many people don't realize there are two cases to handle or believe testing both cases is too expensive for them (perhaps because they don't realize you can reuse the code for doing so to save on the cost).

I don't think even I've ever written a test suite that way.  Could we provide any utilities in Twisted to make this easier, or even more importantly, more obvious?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161019/b03fc6ee/attachment.html>

From glyph at twistedmatrix.com  Wed Oct 19 18:07:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Oct 2016 17:07:59 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <281845A0-2369-43C0-BAEF-5367DD8A2856@atleastfornow.net>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
 <281845A0-2369-43C0-BAEF-5367DD8A2856@atleastfornow.net>
Message-ID: <8A05D50A-258A-4A58-85A2-29942B25861D@twistedmatrix.com>


> On Oct 19, 2016, at 4:43 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> One thing that I have still not figured out is how Futures (which are tightly tied to an event loop) will possibly ever work over multiple event loops. I think since you can't really chain them, this is less of a problem, but Deferreds like to absorb other Deferreds and make one big one, which would make the tight coupling problematic if you wanted to use two event loops (like, say, a GTK one and an IOCP one on Windows).
> 

I've never seen this as a problem, because "multiple event loops" implicitly means "multiple threads"; and you really kinda need to call back a Deferred on the same event loop where it was originated.  When would you want to do this?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161019/7a35bdb4/attachment.html>

From kevinjacobconway at gmail.com  Wed Oct 19 18:12:47 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 20 Oct 2016 00:12:47 +0000
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
Message-ID: <CAKF=+diopr-YYWRPOEuJeZD2kM9UuzWA3HFNs+D9CqhKcKf3Jw@mail.gmail.com>

> What are you referring to as a "coroutine" here?  A generator?

Generator, yes, but used as a coroutine that both emits values and receives
them. The introduction of dedicated coroutines in Python 3.5 is something I
haven't updated my personal language for very well. Generator-coroutine is
the term used in there Python docs, IIRC.

> And exponential growth, you say?

Well... That may not be perfectly accurate and I shouldn't have used that
term. It grew large enough, fast enough that the same level of nesting was
measured in microseconds for the control and and over an hour for the
wrapper so I cancelled the test. Let me put together a reproducible
experiment and let others decide the growth rate.

> Where is this implemented?

Unfortunately, our production use of the lib is not something we've open
sourced. Similar to the above, I'll make available a reproducible
experiment so you can draw your own conclusion.

> Optimizing for CPython looks like adding weird implementation-specific
hacks that might start working or be backwards in the next version

This went into the rationale behind making most of the components
pluggable. The choice of optimizing for cPython is internal to us and we
chose to document it for others. It's not required and not the default.

As far as the possibility of integrating this feature into Twisted, let me
chat with my cohorts over here. Well come back with some benchmark code and
a proposal of changes for further discussion. I'll probably start a new
thread to focus on the context bits.

On Wed, Oct 19, 2016, 16:56 Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:


On Oct 19, 2016, at 2:47 PM, Itamar Turner-Trauring <itamar at itamarst.org>
wrote:

On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:

Well... I had a test that went through synchronous Deferred path. And yeah,
it was easier to write than async test. But it failed to catch a bug that
was only in async case. So the problem I see is that supporting both in
Deferred means you need twice the number of tests each time you use
Deferreds.


Er, that was unclear. I had a bug that wasn't caught by tests because it
passed with sync Deferred and failed with async Deferred callback, and I
didn't have tests for latter.


To be clear: I do see this as a *downside* to Deferred's architecture; it's
a tradeoff.  I see the loose coupling with the event loop as a worthwhile
upside.

However, it's totally possible to write the async Deferred callback case as
well, just by having the test fire the Deferred after returning to the test
body instead of firing it before :-).

-glyph
_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161020/e5708d31/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Oct 20 02:13:09 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Oct 2016 01:13:09 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <CAKF=+diopr-YYWRPOEuJeZD2kM9UuzWA3HFNs+D9CqhKcKf3Jw@mail.gmail.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
 <CAKF=+diopr-YYWRPOEuJeZD2kM9UuzWA3HFNs+D9CqhKcKf3Jw@mail.gmail.com>
Message-ID: <A87BC01A-146D-4505-8D49-011E817750F1@twistedmatrix.com>


> On Oct 19, 2016, at 5:12 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> As far as the possibility of integrating this feature into Twisted, let me chat with my cohorts over here. Well come back with some benchmark code and a proposal of changes for further discussion. I'll probably start a new thread to focus on the context bits.

The Twisted benchmarks are not super discoverable, so for your reference, they're available here <https://github.com/twisted-infra/twisted-benchmarks> and PRs should be submitted there.  They're separate from the repo because newer benchmarks often have to be run against older versions to get a trend line.

(Also, if you didn't know, the results from these benchmarks are presented at <http://speed.twistedmatrix.com> :)).

-glyph

From hawkowl at atleastfornow.net  Sat Oct 22 22:26:40 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 23 Oct 2016 15:26:40 +1100
Subject: [Twisted-Python] Twisted 16.5.0rc2 Release Candidate Announcement
Message-ID: <DEEAA762-F8DE-49AF-B67F-0C1106244E9D@atleastfornow.net>

Hi everyone,

I've just cut Twisted 16.5.0rc2, the second RC of the 16.5.0 release series. It contains fixes for three bugs:

- Twisted Logger writing tracebacks in the middle of JSON-formatted logs
- `twisted.version`'s package changing case (which was fixed with making Incremental compare them lower cased)
- Comparing non-ASCII-subset Unicode strings in Trial on Python 2.7 failing with a UnicodeDecodeError.

You can get it by running `pip install Twisted==16.5.0rc2` or getting the tarball from https://twistedmatrix.com/Releases/rc/16.5.0rc2/. The full NEWS file is also available there, if you wish to read more details.

16.5.0 will be released sometime around Wednesday, provided no more serious bugs rear their head! Remember to test it with your applications, you'll get a virtual cookie if you do :)

- Amber

From trac at twistedmatrix.com  Sun Oct 23 00:05:19 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 23 Oct 2016 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1477202719.91.749666995684002139@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161023/2b496656/attachment.html>

From trac at twistedmatrix.com  Sun Oct 30 00:05:21 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 30 Oct 2016 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1477807521.35.1923675691785505309@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161030/e4c24e49/attachment.html>

From jerryguitarist at gmail.com  Mon Oct 31 18:05:37 2016
From: jerryguitarist at gmail.com (Eeshan Garg)
Date: Mon, 31 Oct 2016 21:35:37 -0230
Subject: [Twisted-Python] [Twisted] #7934: Add assertion helpers
 assertLogEvent/assertLogEvents for testing log events
In-Reply-To: <068.19cdc8437e75049f0a9436bcb652f388@twistedmatrix.com>
References: <053.d5e2af953523391d81766f286647eb01@twistedmatrix.com>
 <068.19cdc8437e75049f0a9436bcb652f388@twistedmatrix.com>
Message-ID: <CA+2gYir0hdSC4vOo0J+UueS3pb7LzXHa04_5q5jbp34hPGgOqA@mail.gmail.com>

Hi @glyph!

My sincere apologies for being so inactive on this ticket. Unfortunately,
the past few weeks have piled up too much on my plate. I do plan on
responding to markrwilliams' review in the next week or so. Thank you so
much for taking the time to look at this ticket, I promise the time you
spent on it won't go to waste, as I do plan on going through with this and
follow it up with further involvement in Twisted as a whole. Looking
forward to learning more from you and markrwilliams and from everyone else!

Regards,
Eeshan Garg

On Mon, Oct 31, 2016 at 8:16 PM, Twisted <trac at twistedmatrix.com> wrote:

> #7934: Add assertion helpers assertLogEvent/assertLogEvents for testing
> log events
> -------------------------+-------------------------
>  Reporter:  eeshangarg   |       Owner:  eeshangarg
>      Type:  enhancement  |      Status:  new
>  Priority:  normal       |   Milestone:
> Component:  core         |  Resolution:
>  Keywords:               |      Branch:
>    Author:               |
> -------------------------+-------------------------
> Changes (by glyph):
>
>  * keywords:  review =>
>
>
> Comment:
>
>  Since there were no objections?
>
> --
> Ticket URL: <https://twistedmatrix.com/trac/ticket/7934#comment:12>
> Twisted <https://twistedmatrix.com/trac/>
> Engine of your Internet
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161031/a7dad938/attachment.html>

From glyph at twistedmatrix.com  Mon Oct 31 18:07:23 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 31 Oct 2016 17:07:23 -0700
Subject: [Twisted-Python] [Twisted] #7934: Add assertion helpers
 assertLogEvent/assertLogEvents for testing log events
In-Reply-To: <CA+2gYir0hdSC4vOo0J+UueS3pb7LzXHa04_5q5jbp34hPGgOqA@mail.gmail.com>
References: <053.d5e2af953523391d81766f286647eb01@twistedmatrix.com>
 <068.19cdc8437e75049f0a9436bcb652f388@twistedmatrix.com>
 <CA+2gYir0hdSC4vOo0J+UueS3pb7LzXHa04_5q5jbp34hPGgOqA@mail.gmail.com>
Message-ID: <2C24BF66-4475-4E84-8BDF-A633DAF47BC3@twistedmatrix.com>


> On Oct 31, 2016, at 5:05 PM, Eeshan Garg <jerryguitarist at gmail.com> wrote:
> 
> Hi @glyph!
> 
> My sincere apologies for being so inactive on this ticket. Unfortunately, the past few weeks have piled up too much on my plate. I do plan on responding to markrwilliams' review in the next week or so. Thank you so much for taking the time to look at this ticket, I promise the time you spent on it won't go to waste, as I do plan on going through with this and follow it up with further involvement in Twisted as a whole. Looking forward to learning more from you and markrwilliams and from everyone else!

No need to apologize!  Just work on it as time allows.  If we all had to feel bad about being unresponsive, I'd take one look at the 14-year-old tickets on Report 1 and collapse under the crushing weight of the guilt :).

-glyph



From trac at twistedmatrix.com  Sun Oct  2 00:05:20 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 02 Oct 2016 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1475388320.25.4221222574904602964@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161002/1fa24c18/attachment-0002.html>

From ngoonee.talk at gmail.com  Mon Oct  3 21:55:48 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 4 Oct 2016 11:55:48 +0800
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
Message-ID: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>

First off, I've read [1] and am not trying to convert twisted code
into blocking code (well, I WAS, but have reconsidered).

I've got Kivy code using twisted code without much problem, but really
hated defining many in-line functions/lambdas for simple 'assign the
result to a Kivy widget' style things. I'm now abstracting
twisted-related code into its own class (separate from kivy UI code).

My eventual aim is for Kivy-related code to be approximately:-

    val = doSomeCallRemoteCallHere(args)
    myWidget.text = val

The closest I'm able to come to that so far is for my function to be
decorated with @defer.inlineCallbacks which will then look like this

    val = yield doSomeCallRemoteCallHere(args)
    myWidget.text = val

Much better readability than my previous

    def put_val_in_widget(retval):
        myWidget.text = retval
    d = doSomeCallRemoteCallHere(args)
    d.addCallback(put_val_in_widget)

Is this as 'good' (for the subjective readability concern) as it gets?
I'm basically going for sufficient readability that my UI code can be
read by programmers stuck in a synchronous mindset.

[1] - http://glyf.livejournal.com/40037.html



From meejah at meejah.ca  Mon Oct  3 22:42:45 2016
From: meejah at meejah.ca (meejah)
Date: Tue, 04 Oct 2016 08:42:45 +0400
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
In-Reply-To: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
 (Oon-Ee Ng's message of "Tue, 4 Oct 2016 11:55:48 +0800")
References: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
Message-ID: <86y424ohbu.fsf@atlantis.meejah.ca>

Oon-Ee Ng <ngoonee.talk at gmail.com> writes:

> The closest I'm able to come to that so far is for my function to be
> decorated with @defer.inlineCallbacks which will then look like this
>
>     val = yield doSomeCallRemoteCallHere(args)
>     myWidget.text = val

You can even do "myWidget.text = yield somethingDeferred()"

> Is this as 'good' (for the subjective readability concern) as it gets?

Yes.
Unless you move everything to Python 3 and then you can use the async /
await syntax (with Twisted), which is more-or-less the same as the above
(but you avoid the decorator). It would look like:

    myWidget.text = await somethingDeferred()

-- 
meejah



From manish.tomar at gmail.com  Mon Oct  3 23:03:16 2016
From: manish.tomar at gmail.com (Manish Tomar)
Date: Mon, 3 Oct 2016 22:03:16 -0700
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
In-Reply-To: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
References: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
Message-ID: <CABH8oEMM-b7t_5qCXVeSO7QL-UxU=Kmv++298YtfPfhoZX+A1A@mail.gmail.com>

On Mon, Oct 3, 2016 at 8:55 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:

> Is this as 'good' (for the subjective readability concern) as it gets?
> I'm basically going for sufficient readability that my UI code can be
> read by programmers stuck in a synchronous mindset.
I was on synchronous mindset before learning Twisted and did not
like/understand Deferred. The `yield` based statement really helped me
initially but more importantly over time I liked seeing an explicit
difference between blocking vs non-blocking code. When I see `a =
yield func()`, I immediately register the fact that this is a
time-consuming operation which helps in understanding the performance
of the system. So, yes it is a good start for synchronous mindset
people.



From ngoonee.talk at gmail.com  Tue Oct  4 00:19:55 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 4 Oct 2016 14:19:55 +0800
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
In-Reply-To: <86y424ohbu.fsf@atlantis.meejah.ca>
References: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
 <86y424ohbu.fsf@atlantis.meejah.ca>
Message-ID: <CAGQ70esCGRhxPy7r8PJEWt5Qb-EkziPgBsXrhCFEY5NOGuvYqQ@mail.gmail.com>

On Tue, Oct 4, 2016 at 12:42 PM, meejah <meejah at meejah.ca> wrote:
> Oon-Ee Ng <ngoonee.talk at gmail.com> writes:
>
>> The closest I'm able to come to that so far is for my function to be
>> decorated with @defer.inlineCallbacks which will then look like this
>>
>>     val = yield doSomeCallRemoteCallHere(args)
>>     myWidget.text = val
>
> You can even do "myWidget.text = yield somethingDeferred()"

Why yes, that makes sense.
>
>> Is this as 'good' (for the subjective readability concern) as it gets?
>
> Yes.
> Unless you move everything to Python 3 and then you can use the async /
> await syntax (with Twisted), which is more-or-less the same as the above
> (but you avoid the decorator). It would look like:
>
>     myWidget.text = await somethingDeferred()
>
I would if I could, most of my projects are already there but last I
checked (beginning of the year) the _threadedselect reactor wasn't
fully ready yet, and AMP wasn't ported. I see a lot of progress on
that front with Amber's frequent updates here, so will migrate when I
can, but in the meantime I'm keeping things on python2 (no official
release of the app yet, so its not a big deal to shift when ready).



From ngoonee.talk at gmail.com  Tue Oct  4 00:21:55 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 4 Oct 2016 14:21:55 +0800
Subject: [Twisted-Python] inlineCallbacks as a blocking approximator
	(stylistic)
In-Reply-To: <CABH8oEMM-b7t_5qCXVeSO7QL-UxU=Kmv++298YtfPfhoZX+A1A@mail.gmail.com>
References: <CAGQ70euy4E4UbTzyw807HMxpt0tKBAeRA5NzLb0SQ8Zbhg89Vw@mail.gmail.com>
 <CABH8oEMM-b7t_5qCXVeSO7QL-UxU=Kmv++298YtfPfhoZX+A1A@mail.gmail.com>
Message-ID: <CAGQ70es37ESh9uQS39LVM50WHxPcBbv_z8nZAF9BzGf6N731Yw@mail.gmail.com>

On Tue, Oct 4, 2016 at 1:03 PM, Manish Tomar <manish.tomar at gmail.com> wrote:
> I was on synchronous mindset before learning Twisted and did not
> like/understand Deferred. The `yield` based statement really helped me
> initially but more importantly over time I liked seeing an explicit
> difference between blocking vs non-blocking code. When I see `a =
> yield func()`, I immediately register the fact that this is a
> time-consuming operation which helps in understanding the performance
> of the system. So, yes it is a good start for synchronous mindset
> people.


Actually I really like the idea behind deferred, its just not the
easiest to read and understand for others, and I don't want to be the
only one maintaining my code.

That being said 'yield=time-consuming' doesn't make sense to me. I'm
using twisted (and AMP) for communication, not to offload processing,
and some of the operations would be near-instant in a threaded context
(obviously with the reactor running it has to wait till it gets picked
up).



From meejah at meejah.ca  Tue Oct  4 15:42:58 2016
From: meejah at meejah.ca (meejah)
Date: Wed, 05 Oct 2016 01:42:58 +0400
Subject: [Twisted-Python] txtorcon 0.17.0
Message-ID: <86ponfoknx.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm pleased to announce txtorcon 0.17.0, largely to fix a bug with
Unix-socket control-ports:

 * issue 187: fix unix-socket control endpoints
 * sometimes mapping streams to hostnames wasn't working properly
 * backwards-compatibility API for `socks_hostname` was incorrectly named

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.17.0
   https://github.com/meejah/txtorcon/releases/tag/v0.17.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.17.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.17.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
5e321387ab56f22d184b18d91a60c30dd1f72575d9e32ff3614ef911bce49daa  txtorcon-0.17.0.tar.gz
e1da13cc43328e040335d091e2ef15717a2b836b48fbede31fc6a7e332b699b4  txtorcon-0.17.0-py2-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJX9B8gAAoJEMJgKAMSgGmnCLoH/jZNzTG4QRRKk54XkFCbSmBh
Qg0YAmWVa4iFMkjidawyfZ8Cocje+yROMiuvH2VWNCcI809q96TB06caNJS0w5c3
I10i9N9xY2S13/yVzW/izW3HMPR+Sdi0Hod9UGTQ0F2Vpcs+g8bpPyKvMK+mPm+L
P0QwyejOAO/FzTndA73T5o2bVKdR3NkK1EfY0FRTjQsD71UZlVJa4AK828v1EMi3
0oNXDny+H9xzJu/i03zFX3zSL1jb69KCxkLyUBIuj5Vg+3by8FwbBa1G3Ehcs70C
RV6ew6WLa0Ty7fnUBy18Z3gFx9+4Ew/Eq/t7weVgRiW0VCAHwgOKx0D4wqSMeH8=
=nyB6
-----END PGP SIGNATURE-----



From nathaniel at google.com  Thu Oct  6 12:49:51 2016
From: nathaniel at google.com (Nathaniel Manista)
Date: Thu, 6 Oct 2016 11:49:51 -0700
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
 <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
Message-ID: <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>

On Thu, Sep 29, 2016 at 5:41 PM, James Broadhead <jamesbroadhead at gmail.com>
wrote:

> If you're planning on working on this,
>

We don't currently have plans to implement it ourselves; we're trying to
invoke the magic of open source. So far the feature requests we've gotten
have been all over the map (gevent <http://www.gevent.org/>/asyncio
<https://docs.python.org/3/whatsnew/3.4.html#asyncio>/async-await
<https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax>)
that what's most important right now is just fostering the conversation
among everyone who is interested about what the desired behavior of gRPC
Python will be.

it'd probably be worth taking a look at the Twisted bindings for Thrift (a
> competing RPC system from FB, based on the Google PB paper).
>
> The generator[2] isn't the best place to start (imperative C++ that
> outputs python), but the code that it generates served us very well for
> years (generally, communicating twisted->cassandra, or twisted->scala
> services).
>
> [1] https://thrift.apache.org/
> [2] https://github.com/apache/thrift/blob/master/compiler/
> cpp/src/thrift/generate/t_py_generator.cc
>

Please contribute this to the thread
<https://groups.google.com/d/topic/grpc-io/RpkyqqQy8TU/discussion>/design
document
<https://github.com/grpc/grpc-experiments/blob/master/python/async/README.md>
/conversation.
-Nathaniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161006/9f84cbdf/attachment-0002.html>

From manish.tomar at gmail.com  Thu Oct  6 13:11:22 2016
From: manish.tomar at gmail.com (Manish Tomar)
Date: Thu, 6 Oct 2016 12:11:22 -0700
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
 <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
 <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>
Message-ID: <CABH8oEOndAG_+Xe0dvdDH-K32_d7mprbCDxYM8c2RJzGwKg2QQ@mail.gmail.com>

On Thu, Oct 6, 2016 at 11:49 AM, Nathaniel Manista <nathaniel at google.com> wrote:
> On Thu, Sep 29, 2016 at 5:41 PM, James Broadhead <jamesbroadhead at gmail.com>
> wrote:
>>
>> If you're planning on working on this,
>
>
> We don't currently have plans to implement it ourselves; we're trying to
> invoke the magic of open source. So far the feature requests we've gotten
> have been all over the map (gevent/asyncio/async-await) that what's most
> important right now is just fostering the conversation among everyone who is
> interested about what the desired behavior of gRPC Python will be.
It will be nice if it can be implemented without IO [1] as Cory
rightfully points out everywhere.
>
>> it'd probably be worth taking a look at the Twisted bindings for Thrift (a
>> competing RPC system from FB, based on the Google PB paper).
>>
>> The generator[2] isn't the best place to start (imperative C++ that
>> outputs python), but the code that it generates served us very well for
>> years (generally, communicating twisted->cassandra, or twisted->scala
>> services).
>>
>> [1] https://thrift.apache.org/
>> [2]
>> https://github.com/apache/thrift/blob/master/compiler/cpp/src/thrift/generate/t_py_generator.cc
>
>
> Please contribute this to the thread/design document/conversation.
Thanks! I'll probably try to mention about sans-IO part there.
> -Nathaniel
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

[1] https://sans-io.readthedocs.io/



From nathaniel at google.com  Thu Oct  6 17:22:59 2016
From: nathaniel at google.com (Nathaniel Manista)
Date: Thu, 6 Oct 2016 16:22:59 -0700
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CABH8oEOndAG_+Xe0dvdDH-K32_d7mprbCDxYM8c2RJzGwKg2QQ@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
 <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
 <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>
 <CABH8oEOndAG_+Xe0dvdDH-K32_d7mprbCDxYM8c2RJzGwKg2QQ@mail.gmail.com>
Message-ID: <CAEOYnAQmbKHn9o2kCjN9-ouKi3d_EvWnOwRpCJuWX5-ZiCA5+Q@mail.gmail.com>

On Thu, Oct 6, 2016 at 12:11 PM, Manish Tomar <manish.tomar at gmail.com>
wrote:

> It will be nice if it can be implemented without IO [1] as Cory
> rightfully points out everywhere.
>

I'm a big fan of sans I/O; I think it will be interesting to see how much
it can be applied to the C-language library that implements most of the
behavior of gRPC Python.
-N
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161006/e0396abb/attachment-0002.html>

From trac at twistedmatrix.com  Sun Oct  9 00:05:19 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 09 Oct 2016 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1475993119.95.3973823150216637327@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161009/67a39ecc/attachment-0002.html>

From ngoonee.talk at gmail.com  Sun Oct  9 20:05:32 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 10 Oct 2016 10:05:32 +0800
Subject: [Twisted-Python] Conch examples give me host key related errors
Message-ID: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>

My google-fu is failing me (or I'm the only one with a misconfigured
ssh system), but none of the examples on
http://twistedmatrix.com/documents/current/conch/examples/index.html
run for me.

The ConchError I'm mostly getting says ('no host keys, failing',
None), while the simplesshserver.py example fails with a KeyError
'sshKeyDir'

Not sure where twisted-conch expects host keys to be, but my openssh
host keys are fine (I have a running sshd which sources them from
/etc/ssh as per usual). That being said, there's no way twisted-conch
as a python user-process would have access to them (nor should it).

I'm actually just wanting to use twisted-conch-manhole, but running
into this problem first. Is there something I need to configure in my
system?



From hawkowl at atleastfornow.net  Sun Oct  9 20:11:11 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 10 Oct 2016 13:11:11 +1100
Subject: [Twisted-Python] Conch examples give me host key related errors
In-Reply-To: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>
References: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>
Message-ID: <6229BEDD-C4DA-479E-8FAB-75F316AFF490@atleastfornow.net>

Hi,

This is most likely because of a security change I made a few versions ago, where conch will no longer use a set of default, hard-coded SSH keys.

You may want to do something like https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/manhole_tap.py#L149 <https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/manhole_tap.py#L149> , and add a key yourself -- we should update these examples to add this, so that they run out of the box again.

- Amber

> On 10 Oct. 2016, at 13:05, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> 
> My google-fu is failing me (or I'm the only one with a misconfigured
> ssh system), but none of the examples on
> http://twistedmatrix.com/documents/current/conch/examples/index.html
> run for me.
> 
> The ConchError I'm mostly getting says ('no host keys, failing',
> None), while the simplesshserver.py example fails with a KeyError
> 'sshKeyDir'
> 
> Not sure where twisted-conch expects host keys to be, but my openssh
> host keys are fine (I have a running sshd which sources them from
> /etc/ssh as per usual). That being said, there's no way twisted-conch
> as a python user-process would have access to them (nor should it).
> 
> I'm actually just wanting to use twisted-conch-manhole, but running
> into this problem first. Is there something I need to configure in my
> system?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161010/704e9d0f/attachment-0002.html>

From ngoonee.talk at gmail.com  Sun Oct  9 20:55:56 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 10 Oct 2016 10:55:56 +0800
Subject: [Twisted-Python] Conch examples give me host key related errors
In-Reply-To: <6229BEDD-C4DA-479E-8FAB-75F316AFF490@atleastfornow.net>
References: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>
 <6229BEDD-C4DA-479E-8FAB-75F316AFF490@atleastfornow.net>
Message-ID: <CAGQ70eudo5-SK3p58MKM-BVE5T3=VccoZuU7tckW+2bawK33FQ@mail.gmail.com>

A reply from Amber herself! Thanks for the pointer, I dug into the
code a bit and figured these lines would do it (assuming publicKey and
privateKey are already defined as strings)

f = whatever_is_generating_a_factory(**kwargs)
f.publicKeys[b'ssh-rsa'] = keys.Key.fromString(data=publicKey)
f.privateKeys[b'ssh-rsa'] = keys.Key.fromString(data=privateKey)
reactor.listenTCP(port, f)

It seems keys is deprecated from 15.5.5 though, what's the modern alternative?

On Mon, Oct 10, 2016 at 10:11 AM, Amber "Hawkie" Brown
<hawkowl at atleastfornow.net> wrote:
> Hi,
>
> This is most likely because of a security change I made a few versions ago,
> where conch will no longer use a set of default, hard-coded SSH keys.
>
> You may want to do something like
> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/manhole_tap.py#L149
> , and add a key yourself -- we should update these examples to add this, so
> that they run out of the box again.
>
> - Amber
>
> On 10 Oct. 2016, at 13:05, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>
> My google-fu is failing me (or I'm the only one with a misconfigured
> ssh system), but none of the examples on
> http://twistedmatrix.com/documents/current/conch/examples/index.html
> run for me.
>
> The ConchError I'm mostly getting says ('no host keys, failing',
> None), while the simplesshserver.py example fails with a KeyError
> 'sshKeyDir'
>
> Not sure where twisted-conch expects host keys to be, but my openssh
> host keys are fine (I have a running sshd which sources them from
> /etc/ssh as per usual). That being said, there's no way twisted-conch
> as a python user-process would have access to them (nor should it).
>
> I'm actually just wanting to use twisted-conch-manhole, but running
> into this problem first. Is there something I need to configure in my
> system?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From ngoonee.talk at gmail.com  Sun Oct  9 21:11:28 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 10 Oct 2016 11:11:28 +0800
Subject: [Twisted-Python] Conch examples give me host key related errors
In-Reply-To: <CAGQ70eudo5-SK3p58MKM-BVE5T3=VccoZuU7tckW+2bawK33FQ@mail.gmail.com>
References: <CAGQ70etH_Fduh2MpLKn0PjasF4FuZ7W_La06W2wxa7vRPFKXsQ@mail.gmail.com>
 <6229BEDD-C4DA-479E-8FAB-75F316AFF490@atleastfornow.net>
 <CAGQ70eudo5-SK3p58MKM-BVE5T3=VccoZuU7tckW+2bawK33FQ@mail.gmail.com>
Message-ID: <CAGQ70etDbp7O+cvoHrBAVd1WVMH6dDee4JBWvXxTmWKsMPf7nw@mail.gmail.com>

Oh and it seems tab completion was being worked on but that's been
left waiting for a while now -
https://twistedmatrix.com/trac/ticket/6863

Still fantastically useful without though, so no complaints there.

On Mon, Oct 10, 2016 at 10:55 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> A reply from Amber herself! Thanks for the pointer, I dug into the
> code a bit and figured these lines would do it (assuming publicKey and
> privateKey are already defined as strings)
>
> f = whatever_is_generating_a_factory(**kwargs)
> f.publicKeys[b'ssh-rsa'] = keys.Key.fromString(data=publicKey)
> f.privateKeys[b'ssh-rsa'] = keys.Key.fromString(data=privateKey)
> reactor.listenTCP(port, f)
>
> It seems keys is deprecated from 15.5.5 though, what's the modern alternative?
>
> On Mon, Oct 10, 2016 at 10:11 AM, Amber "Hawkie" Brown
> <hawkowl at atleastfornow.net> wrote:
>> Hi,
>>
>> This is most likely because of a security change I made a few versions ago,
>> where conch will no longer use a set of default, hard-coded SSH keys.
>>
>> You may want to do something like
>> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/manhole_tap.py#L149
>> , and add a key yourself -- we should update these examples to add this, so
>> that they run out of the box again.
>>
>> - Amber
>>
>> On 10 Oct. 2016, at 13:05, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>>
>> My google-fu is failing me (or I'm the only one with a misconfigured
>> ssh system), but none of the examples on
>> http://twistedmatrix.com/documents/current/conch/examples/index.html
>> run for me.
>>
>> The ConchError I'm mostly getting says ('no host keys, failing',
>> None), while the simplesshserver.py example fails with a KeyError
>> 'sshKeyDir'
>>
>> Not sure where twisted-conch expects host keys to be, but my openssh
>> host keys are fine (I have a running sshd which sources them from
>> /etc/ssh as per usual). That being said, there's no way twisted-conch
>> as a python user-process would have access to them (nor should it).
>>
>> I'm actually just wanting to use twisted-conch-manhole, but running
>> into this problem first. Is there something I need to configure in my
>> system?
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>



From dansut at gmail.com  Mon Oct 10 10:41:59 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 10 Oct 2016 12:41:59 -0400
Subject: [Twisted-Python] Is there a recommended way for a Service to
	request Application stop?
Message-ID: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>

I have a hierarchy of Services some of which is MultiService and other
parts are my own implementations of IServiceCollection - in some
situations the a child Service may want to 'suggest' that the
Application's job is done (error, or simply task completed) and I'm
looking for some sort of standardized way to pass this info upstream.
The idea being that I may using my implemented Services in a variety
of Applications.

In this type of situation, is it the general intention a child Service
would use the Application directly, such that potential StopService()s
could bubble down? Or is there a normal pattern here to have messages
bubble up through the Services hierarchy? I'm not seeing anything like
this in the examples I've found or looking through the sources, but
I'm probably missing something.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From glyph at twistedmatrix.com  Mon Oct 10 15:51:24 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Oct 2016 14:51:24 -0700
Subject: [Twisted-Python] Is there a recommended way for a Service to
	request Application stop?
In-Reply-To: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
References: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
Message-ID: <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>


> On Oct 10, 2016, at 9:41 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> I have a hierarchy of Services some of which is MultiService and other
> parts are my own implementations of IServiceCollection - in some
> situations the a child Service may want to 'suggest' that the
> Application's job is done (error, or simply task completed) and I'm
> looking for some sort of standardized way to pass this info upstream.
> The idea being that I may using my implemented Services in a variety
> of Applications.
> 
> In this type of situation, is it the general intention a child Service
> would use the Application directly, such that potential StopService()s
> could bubble down? Or is there a normal pattern here to have messages
> bubble up through the Services hierarchy? I'm not seeing anything like
> this in the examples I've found or looking through the sources, but
> I'm probably missing something.


Services are just things that can be started and stopped.  Application is just a top-level object that associates a thing-to-start with a few bits of global process-level state, like logging and pidfile settings.

Therefore, the Service hierarchy abstraction is a poor fit for some code that needs to do some work and then exit; it's designed for long-running tools which can be started and stopped on demand.  For example, what happens if two Service objects think that the Application's job is "done"?

If you want to exit a process, calling `stop` on the reactor is generally the right way to go.

But: talking about this in such vague, abstract terms is unlikely to be helpful.  What, concretely, are you actually trying to do with the "Services in a variety of Applications"?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161010/304210d3/attachment-0002.html>

From dansut at gmail.com  Mon Oct 10 17:38:12 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 10 Oct 2016 19:38:12 -0400
Subject: [Twisted-Python] Is there a recommended way for a Service to
 request Application stop?
In-Reply-To: <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>
References: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
 <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>
Message-ID: <CADzPF4sKVwg8iJmFXRZOaLjruQSur+fzCj1yd2MtkzkvZb1zkA@mail.gmail.com>

Thanks for your feedback Glyph, responses embedded below.

On Oct 10, 2016, at 9:41 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> I have a hierarchy of Services some of which is MultiService and other
> parts are my own implementations of IServiceCollection - in some
> situations the child Service may want to 'suggest' that the
> Application's job is done (error, or simply task completed) and I'm
> looking for some sort of standardized way to pass this info upstream.
> The idea being that I may using my implemented Services in a variety
> of Applications.
>
> In this type of situation, is it the general intention a child Service
> would use the Application directly, such that potential StopService()s
> could bubble down? Or is there a normal pattern here to have messages
> bubble up through the Services hierarchy? I'm not seeing anything like
> this in the examples I've found or looking through the sources, but
> I'm probably missing something.

On Mon, Oct 10, 2016 at 5:51 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> Services are just things that can be started and stopped.  Application is
> just a top-level object that associates a thing-to-start with a few bits of
> global process-level state, like logging and pidfile settings.
>
> Therefore, the Service hierarchy abstraction is a poor fit for some code
> that needs to do some work and then exit; it's designed for long-running
> tools which can be started and stopped on demand.  For example, what happens
> if two Service objects think that the Application's job is "done"?

This is perhap the type of thing I'm trying to code for; my goal is
that the Services themselves do not have the final say in when the
Application (or parent Service) is done. The event a Service feels is
a problem may cause its parent to stop it, or it could simply call a
method on it to remediate - depending on situation.

> If you want to exit a process, calling `stop` on the reactor is generally
> the right way to go.

ie. specifically I would not want a Service to stop the reactor, as
what it feels is a problem might only be a minor inconvenience for the
Application as a whole; but in another Application, or Application
state, it might be 'game over'.

> But: talking about this in such vague, abstract terms is unlikely to be
> helpful.  What, concretely, are you actually trying to do with the "Services
> in a variety of Applications"?

I'll try to give one fairly concrete example of where I'd like to use
this kind of pattern.
The Services are long running polling ModBus clients whose configs are
read from a DB by the parent, the child Service has no knowledge of
where its config came from. Occasionally the child Services config may
become totally unworkable (for a variety of reasons) and so they want
to tell their parent the situation to give it a chance to reconfig,
call child.stopService(), or...The parent will have many such
Services, appropriate action may include a child reconfig, or if all
children showing issues telling its parent the situation to ask for
'advice'.

It seems to me in Twisted's Applications the job of calling
stopService() (or similar) should always be the responsibility of the
parent Service, but as a child how should I give my parent a clue I
need attention?

I can see implementing this with my own Interfaces so the child
Services know more about their parent's Interfaces/attributes, or
related objects, and can bubble information up through these, but I'd
prefer my child Services to know as little about their parents as
possible so they can be re-used in other simple Twisted apps.
Basically, I didn't want to go implementing stuff when there were
already tried and tested Twisted patterns for dealing with this kind
of thing.

Generically, can I somehow bubble up events through the Service
hierarchy, or should I communicate with external objects to the
hierarchy that can bubble down actions from higher up?

Any suggestions, or pointers to similar examples will be most
appreciated - I'm not stuck on this quandary, just wanting to write
code which fits best with the Twisted way of doing things.
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From glyph at twistedmatrix.com  Mon Oct 10 18:02:54 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Oct 2016 17:02:54 -0700
Subject: [Twisted-Python] Is there a recommended way for a Service to
	request Application stop?
In-Reply-To: <CADzPF4sKVwg8iJmFXRZOaLjruQSur+fzCj1yd2MtkzkvZb1zkA@mail.gmail.com>
References: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
 <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>
 <CADzPF4sKVwg8iJmFXRZOaLjruQSur+fzCj1yd2MtkzkvZb1zkA@mail.gmail.com>
Message-ID: <8C06C92C-D12A-421B-846A-00ED9C69F675@twistedmatrix.com>


> On Oct 10, 2016, at 4:38 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Generically, can I somehow bubble up events through the Service
> hierarchy, or should I communicate with external objects to the
> hierarchy that can bubble down actions from higher up?


Following the <https://en.wikipedia.org/wiki/Single_responsibility_principle <https://en.wikipedia.org/wiki/Single_responsibility_principle>>, the service hierarchy's job is just to make sure everything gets started up and shut down together.

It sounds to me like you have a pretty well-defined hierarchy which seems like it fits into the service hierarchy because it's roughly parallel in terms of which objects participate; however, you have very application-specific semantics for this parallel hierarchy.  For example, it's pretty unusual to have a super-service reconfigure a subordinate service in order to recover from an error condition, in my experience, unless you're talking about stuff like erlang supervision hierarchies, but that requires runtime support like the code being recovered running in a subprocess that doesn't share state.

It often feels like abstractions are expensive so you should have as few of them as possible; but, in reality, *simple* abstractions are cheap, and what makes abstraction expensive is when you overload them.  Make a new, simple abstraction that contains exactly the semantics you just described, and use composition to point at the appropriate point in the MultiService hierarchy.  When it's time to "stop" a service, do setServiceParent(None); when it's time to "start" it, do setServiceParent(appropriateServiceParent).  This should take care of keeping your services in the appropriate state.

BTW, if you have stateful long-running services that have to self-modify based on changing circumstances, you might want to also check out https://github.com/glyph/automat <https://github.com/glyph/automat> to see if it can help you ensure that everything's in a consistent state.

Good luck!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161010/3e694983/attachment-0002.html>

From hawkowl at atleastfornow.net  Tue Oct 11 02:53:29 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 11 Oct 2016 19:53:29 +1100
Subject: [Twisted-Python] Twisted 16.5.0rc1 Release Candidate Announcement
Message-ID: <8472BF75-7E5C-4AE3-B2BA-352BFE8114A2@atleastfornow.net>

Hello everyone! It's time for another Twisted release.

I bring you Twisted 16.5.0rc1, the first release candidate of the 16.5 series. This release contains the following:

- Deferred.addTimeout, for timing out your Deferreds! (contributed by cyli, reviews by adiroiban, theisencouple, manishtomar, markrwilliams)
- yield from support for Deferreds, in functions wrapped with twisted.internet.defer.ensureDeferred. This will work in Python 3.4, unlike async/await which is 3.5+ (contributed by hawkowl, reviews by markrwilliams, lukasa).
- The new asyncio interop reactor, which allows Twisted to run on top of the asyncio event loop. This doesn't include any Deferred-Future interop, but stay tuned! (contributed by itamar and hawkowl, reviews by rodrigc, markrwilliams)
- twisted.internet.cfreactor is now supported on Python 2.7 and Python 3.5+! This is useful for writing pyobjc or Toga applications. (contributed by hawkowl, reviews by glyph, markrwilliams)
- twisted.python.constants has been split out into constantly on PyPI, and likewise with twisted.python.versions going into the PyPI package incremental. Twisted now uses these external packages, which will be shared with other projects (like Klein). (contributed by hawkowl, reviews by glyph, markrwilliams)
- Many new Python 3 modules, including twisted.pair, twisted.python.zippath, twisted.spread.pb, and more parts of Conch! (contributed by rodrigc, hawkowl, glyph, berdario, & others, reviews by acabhishek942, rodrigc, & others)
- Many bug fixes and cleanups!
- 260+ closed tickets overall.

For more information, check the NEWS file (link provided below).

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/rc/16.5.0rc1/ <https://twistedmatrix.com/Releases/rc/16.5.0rc1/>) to get the release candidate tarballs and the full NEWS file. If you want to install it right away, run:

   pip install Twisted==16.5.0rc1

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161011/12318c25/attachment-0002.html>

From dansut at gmail.com  Tue Oct 11 14:25:01 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 11 Oct 2016 16:25:01 -0400
Subject: [Twisted-Python] Is there a recommended way for a Service to
 request Application stop?
In-Reply-To: <8C06C92C-D12A-421B-846A-00ED9C69F675@twistedmatrix.com>
References: <CADzPF4ukNmJ-uQ4VAzuFj5-L_msN715B3AsA2Ghi0ybddavnGg@mail.gmail.com>
 <BC154CFD-418C-4397-AE9C-A5865F576EE1@twistedmatrix.com>
 <CADzPF4sKVwg8iJmFXRZOaLjruQSur+fzCj1yd2MtkzkvZb1zkA@mail.gmail.com>
 <8C06C92C-D12A-421B-846A-00ED9C69F675@twistedmatrix.com>
Message-ID: <CADzPF4skRs0LeG+DnKVQ5J2sBypdF-qed6qkgNU79r2vRhr1Aw@mail.gmail.com>

On Oct 10, 2016, at 4:38 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> Generically, can I somehow bubble up events through the Service
> hierarchy, or should I communicate with external objects to the
> hierarchy that can bubble down actions from higher up?

On Mon, Oct 10, 2016 at 8:02 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> Following the
> <https://en.wikipedia.org/wiki/Single_responsibility_principle>, the service
> hierarchy's job is just to make sure everything gets started up and shut
> down together.
>
> It sounds to me like you have a pretty well-defined hierarchy which seems
> like it fits into the service hierarchy because it's roughly parallel in
> terms of which objects participate; however, you have very
> application-specific semantics for this parallel hierarchy.

Maybe this was my conceptual issue; the parallels were close enough
that it just felt right to add the functionality to Twisted's Service
Hierarchy - close enough that I was sucked into thoughts of
modbusPollingClient IS-A Service... but keeping in mind the arguments
of composition vs inheritance, I somehow finished up with
modbusClientService HAS-A pollingLogic - whereas what I think you are
recommending here is that that pollingLogic HAS-A modbusClientService
and knows about a MultiService which it makes use of only to let the
Application have overall control over starting and stopping all the
active Services.

Actually I just read this back through and am not sure this is
actually really what you meant Glyph :-/
I do get that it seems I am grabbing the stick by the wrong end, I
guess I'll just go back to reading more example code to see if I can
find something that resonates with me as being close to what I'm
trying to achieve.

> [...]
> When it's time to "stop" a service, do setServiceParent(None); when it's
> time to "start" it, do setServiceParent(appropriateServiceParent).  This
> should take care of keeping your services in the appropriate state.

I have to admit I had not even thought of using setServiceParent(None)
to bring services down - looking at the source makes this concept
clearer and potentially useful to me though

> BTW, if you have stateful long-running services that have to self-modify
> based on changing circumstances, you might want to also check out
> https://github.com/glyph/automat to see if it can help you ensure that
> everything's in a consistent state.

I'm still really just prototyping at this stage, trying to find an
architecture that fits what I believe should be quite a simple
application that is reasonably well suited to Twisted, but once I've
passed this stage if I do find myself needing a FSM that is beyond
totally simple then I'll certainly give this a look. Thanks.
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From glyph at twistedmatrix.com  Tue Oct 11 23:58:54 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 11 Oct 2016 22:58:54 -0700
Subject: [Twisted-Python] Twisted 16.5.0rc1 Release Candidate
	Announcement
In-Reply-To: <8472BF75-7E5C-4AE3-B2BA-352BFE8114A2@atleastfornow.net>
References: <8472BF75-7E5C-4AE3-B2BA-352BFE8114A2@atleastfornow.net>
Message-ID: <F47C910A-43D1-4E9B-B0FE-B94B4181F785@twistedmatrix.com>

> On Oct 11, 2016, at 1:53 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hello everyone! It's time for another Twisted release.

Woohoo!  Looks like another awesome release :).

-glyph

> I bring you Twisted 16.5.0rc1, the first release candidate of the 16.5 series. This release contains the following:
> 
> - Deferred.addTimeout, for timing out your Deferreds! (contributed by cyli, reviews by adiroiban, theisencouple, manishtomar, markrwilliams)
> - yield from support for Deferreds, in functions wrapped with twisted.internet.defer.ensureDeferred. This will work in Python 3.4, unlike async/await which is 3.5+ (contributed by hawkowl, reviews by markrwilliams, lukasa).
> - The new asyncio interop reactor, which allows Twisted to run on top of the asyncio event loop. This doesn't include any Deferred-Future interop, but stay tuned! (contributed by itamar and hawkowl, reviews by rodrigc, markrwilliams)
> - twisted.internet.cfreactor is now supported on Python 2.7 and Python 3.5+! This is useful for writing pyobjc or Toga applications. (contributed by hawkowl, reviews by glyph, markrwilliams)
> - twisted.python.constants has been split out into constantly on PyPI, and likewise with twisted.python.versions going into the PyPI package incremental. Twisted now uses these external packages, which will be shared with other projects (like Klein). (contributed by hawkowl, reviews by glyph, markrwilliams)
> - Many new Python 3 modules, including twisted.pair, twisted.python.zippath, twisted.spread.pb, and more parts of Conch! (contributed by rodrigc, hawkowl, glyph, berdario, & others, reviews by acabhishek942, rodrigc, & others)
> - Many bug fixes and cleanups!
> - 260+ closed tickets overall.
> 
> For more information, check the NEWS file (link provided below).
> 
> As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/rc/16.5.0rc1/ <https://twistedmatrix.com/Releases/rc/16.5.0rc1/>) to get the release candidate tarballs and the full NEWS file. If you want to install it right away, run:
> 
>    pip install Twisted==16.5.0rc1
> 
> Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)
> 
> Twisted Regards,
> Amber Brown (HawkOwl)
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161011/123334ea/attachment-0002.html>

From cory at lukasa.co.uk  Wed Oct 12 10:25:37 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 12 Oct 2016 17:25:37 +0100
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CAEOYnAQmbKHn9o2kCjN9-ouKi3d_EvWnOwRpCJuWX5-ZiCA5+Q@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
 <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>
 <CAEOYnASQGaAMcTcyta48vosJmSH6EUhUw1teJXKELuiLJ69Xyw@mail.gmail.com>
 <CABH8oEOndAG_+Xe0dvdDH-K32_d7mprbCDxYM8c2RJzGwKg2QQ@mail.gmail.com>
 <CAEOYnAQmbKHn9o2kCjN9-ouKi3d_EvWnOwRpCJuWX5-ZiCA5+Q@mail.gmail.com>
Message-ID: <5DC576B6-55A0-4AC5-901A-E3EBA2CBBF37@lukasa.co.uk>

On this note, if anyone wanted to write a greenfield gRPC implementation for Twisted directly, rather than using the C++ library that Nathaniel has been working on, hyper-h2 and Twisted’s built-in HTTP/2 logic is likely to be a very useful leaping off point. My high-level understanding of gRPC is that at a wire-protocol level the other things required are some protocol buffers and some code generation. That’s definitely not *nothing*, but neither is it the same as implementing the whole thing in one go.

Cory


> On 7 Oct 2016, at 00:22, Nathaniel Manista <nathaniel at google.com> wrote:
> 
> On Thu, Oct 6, 2016 at 12:11 PM, Manish Tomar <manish.tomar at gmail.com <mailto:manish.tomar at gmail.com>> wrote:
> It will be nice if it can be implemented without IO [1] as Cory
> rightfully points out everywhere.
> 
> I'm a big fan of sans I/O; I think it will be interesting to see how much it can be applied to the C-language library that implements most of the behavior of gRPC Python.
> -N
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161012/c59731b5/attachment-0002.html>

From tom.prince at ualberta.net  Wed Oct 12 15:11:45 2016
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 12 Oct 2016 21:11:45 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
Message-ID: <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>

I think if we are reconsidering the endpoint syntax, we should explicitly
have nested delimiters for quoting (so something like () or {}), to easily
allow multiple levels of nested endpoint strings (or any other kind of
string).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161012/572002ff/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Oct 12 15:19:17 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Oct 2016 14:19:17 -0700
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
Message-ID: <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>


> On Oct 12, 2016, at 2:11 PM, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> I think if we are reconsidering the endpoint syntax, we should explicitly have nested delimiters for quoting (so something like () or {}), to easily allow multiple levels of nested endpoint strings (or any other kind of string).

Do you have a suggestion or an example of how this might be used?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161012/396659ca/attachment-0002.html>

From tom.prince at ualberta.net  Wed Oct 12 20:35:22 2016
From: tom.prince at ualberta.net (Tom Prince)
Date: Thu, 13 Oct 2016 02:35:22 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
Message-ID: <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>

> Do you have a suggestion or an example of how this might be used?


The idea I have in my head isn't backwards compatible, but I was thinking
of something like

haproxy:(tls:hostname.example:endpoint=(tcp:7.6.5.4:443))

This would break any endpoint description that starts with `(` but allows
arbitrarily nested endpoints (or even just date containing `:`).

Thinking about it some more, there isn't currently any endpoint
descriptions that have an empty name, so we could have a entirely new
syntax that starts with `:`. If we went in that direction, we'd definitely
want to think about future extensibility when designing it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161013/25265cfa/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Oct 13 01:23:33 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Oct 2016 00:23:33 -0700
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
 <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
Message-ID: <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>


> On Oct 12, 2016, at 7:35 PM, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> Thinking about it some more, there isn't currently any endpoint descriptions that have an empty name, so we could have a entirely new syntax that starts with `:`. If we went in that direction, we'd definitely want to think about future extensibility when designing it.

This applies more generally; no need for any weird hacks.  Any 'new' plugin could just opt in to a different syntax; we can just look up until the first ':'; we just need to define a new interface for a new syntax.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161013/042677fa/attachment-0002.html>

From kevinjacobconway at gmail.com  Thu Oct 13 05:14:27 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 13 Oct 2016 11:14:27 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
 <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
 <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
Message-ID: <CAKF=+dhmJzNn1gheNJ-RT0-J+6dyEBuyYMtZ8VNvPUR9FLRRqg@mail.gmail.com>

> we can just look up until the first ':'; we just need to define a new
interface for a new syntax.

What do you think of adding a special argument for endpoint strings called
"wraps" or "pipe" that tells the parser to recombine the right-hand side
and send it back through the parser? For example:

 haproxy:*pipe=*
ssl:port=443:privateKey=/etc/ssl/server.pem:extraCertChain=/etc/ssl/chain.pem:sslmethod=SSLv3_METHOD:dhParameters=dh_param_1024.pem:
*pipe=*tcp:7.6.5.4:443:*pipe=*unix:path=/var/run/web.sock

I believe this would fit as a backwards compatible change to the syntax and
would also position us to add composition support to the existing endpoints
in backwards compatible ways. As endpoints gain composition support,
existing users can opt-in by adding the new argument to existing string
descriptors.

This topic coming back up is timely for me. I was recently talking with a
user of the haproxy endpoint wrapper who was hitting an issue with the SSL
endpoint not playing well when used in composition. I'll spin off another
thread for that topic, but coming up with a syntax for composition is going
to be pre-requisite to having true composition support.

On Thu, Oct 13, 2016 at 2:26 AM Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Oct 12, 2016, at 7:35 PM, Tom Prince <tom.prince at ualberta.net> wrote:
>
> Thinking about it some more, there isn't currently any endpoint
> descriptions that have an empty name, so we could have a entirely new
> syntax that starts with `:`. If we went in that direction, we'd definitely
> want to think about future extensibility when designing it.
>
>
> This applies more generally; no need for any weird hacks.  Any 'new'
> plugin could just opt in to a different syntax; we can just look up until
> the first ':'; we just need to define a new interface for a new syntax.
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161013/75847844/attachment-0002.html>

From tom.prince at ualberta.net  Thu Oct 13 13:47:54 2016
From: tom.prince at ualberta.net (Tom Prince)
Date: Thu, 13 Oct 2016 19:47:54 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
 <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
 <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
Message-ID: <CAOtB_kkTrN5aJAVq_+Z2rXdK50FP0VQKmL6fxxUHfCRRgZb6Yg@mail.gmail.com>

> This applies more generally; no need for any weird hacks.  Any 'new'
plugin could just opt in to a different syntax; we can just look up until
the first ':'; we just need to define a new interface for a new syntax.

I don't think that this provides a good user experience.

1) There are existing endpoints that want nestable endpoints, so either
    a) They don't change, somewhat defeating the purpose of having a new
syntax (or cluttering the endpoint namespace with less than useful
endpoints).
    b) They change incompatibility, defeating the purpose of trying to
maintain backwards compatability.

2) As user, I need to learn which endpoints support the new syntax, thus
potentially needing to know both methods of quoting and switch between them
as appropriate.


There are a couple of possible ways around this, without requiring a weird
hack.
- I wonder how many endpoints strings have ever been written whose value
starts with any of `[` `(` or `{`? I suspect that the number might in fact
be 0. In which case, although the change is technically incompatible, in
practice it wouldn't be.
- Alternatively, we could deprecate an unquoted [, (, { at the beginning of
a value, and then after a suitable deprecation period (perhaps additionally
a release where it is just an error), we could repurpose one of them to act
as quoting (leaving the other two for future extensiblity).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161013/9ab73b3c/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Oct 13 17:40:40 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Oct 2016 16:40:40 -0700
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAOtB_kkTrN5aJAVq_+Z2rXdK50FP0VQKmL6fxxUHfCRRgZb6Yg@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
 <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>
 <CAOtB_k=kSLc6vsV4uYN7OCFe54Mp_oB2zLE3uq87PiPB-AWvig@mail.gmail.com>
 <8D482422-FED1-46FD-87F1-DFC3F2689523@twistedmatrix.com>
 <CAOtB_k=PQTeV6m9+MDgniznNHrqxLecrJDiD-9oq+T7w2THH5w@mail.gmail.com>
 <C4B678F1-9B1A-4ECA-969B-671316803825@twistedmatrix.com>
 <CAOtB_kkTrN5aJAVq_+Z2rXdK50FP0VQKmL6fxxUHfCRRgZb6Yg@mail.gmail.com>
Message-ID: <A95858EC-231B-45E5-B7DD-D7B99B0C1C30@twistedmatrix.com>


> On Oct 13, 2016, at 12:47 PM, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> > This applies more generally; no need for any weird hacks.  Any 'new' plugin could just opt in to a different syntax; we can just look up until the first ':'; we just need to define a new interface for a new syntax.
> 
> I don't think that this provides a good user experience.
> 
> 1) There are existing endpoints that want nestable endpoints, so either
>     a) They don't change, somewhat defeating the purpose of having a new syntax (or cluttering the endpoint namespace with less than useful endpoints).

We already have this problem, and we will need to do a doc cleanup / consolidation / deprecation pass soon.  (see: tcp, tcp6, host, ssl, tls...)

>     b) They change incompatibility, defeating the purpose of trying to maintain backwards compatability.

As you've noticed, we may have several potential "outs" to have practically-compatible parsing syntaxes; the real problem is the internal factoring of the parsing APIs rather than the syntax.

> 2) As user, I need to learn which endpoints support the new syntax, thus potentially needing to know both methods of quoting and switch between them as appropriate.

As a user you're going to need to read the parameter documentation anyway; learning about new syntax is not much different than learning about a new parameter.  And you may not realize there _is_ a syntax; most configuration of this type is just copying and pasting a reasonable-looking example.  Not to say that we should be spuriously incompatible for those who have learned the rules, but the only rule to learn at this point is ": separates arguments, \ escapes :".  We could add one more rule without unduly stressing the cognitive burden of the endpoint system.

> There are a couple of possible ways around this, without requiring a weird hack.
> - I wonder how many endpoints strings have ever been written whose value starts with any of `[` `(` or `{`? I suspect that the number might in fact be 0. In which case, although the change is technically incompatible, in practice it wouldn't be.
> - Alternatively, we could deprecate an unquoted [, (, { at the beginning of a value, and then after a suitable deprecation period (perhaps additionally a release where it is just an error), we could repurpose one of them to act as quoting (leaving the other two for future extensiblity).

I suspect that this would be overkill here; we also have other options, like '(: :)', which would be totally compatible (there are no _arguments_ anywhere presently named "(").

-g


From trac at twistedmatrix.com  Sun Oct 16 00:05:19 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 16 Oct 2016 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1476597919.25.7988560955633887948@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161016/48eb019b/attachment-0002.html>

From johnaherne at rocs.co.uk  Mon Oct 17 01:46:56 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 17 Oct 2016 08:46:56 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
	Twisted 16.4.1
Message-ID: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>

I have been running some tests to check some issue and have seen that
notifyFinish is not being called in 16.4.1

This is on Windows 10 using python 2.7.12

Checking back it  is not called 16.3.0 but is in 16.2.0

The test uses some sample code from Twisted web in 60 seconds that sets a
timer to allow the browser to halt the request by using Escape and make
notifyFinish  get called.

Before I did anything else I thought I would check and see if anyone else
was seeing this behaviour.

The code I am using is below:

from twisted.web.resource import Resource
from twisted.web.server import  Site, NOT_DONE_YET
from twisted.internet import reactor


class DelayedResource(Resource):
    def _delayedRender(self, request):
        print 'SEND RESPONSE'
        request.write("Sorry to keep you waiting.")
        request.finish()

    def _responseFailed(self, failure, call):
        print 'RESPONSE FAILED', failure
        call.cancel()


    def render_GET(self, request):
        call = reactor.callLater(10, self._delayedRender, request)
        request.notifyFinish().addErrback(self._responseFailed, call)
        return NOT_DONE_YET



resource = Resource()
print 'RESOURCE', resource
resource.putChild("logme", DelayedResource())
factory = Site(resource)

print 'FACTORY', factory
reactor.listenTCP(8080, factory)
reactor.run()



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161017/d2717d42/attachment-0002.html>

From johnaherne at rocs.co.uk  Mon Oct 17 02:00:34 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 17 Oct 2016 09:00:34 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
	Twisted 16.4.1
Message-ID: <CAKmUHjaG6r-QxXgaXRV0G-9NGsGn6KOAFUMpKj7K6TQfRCFxmg@mail.gmail.com>

Apologies for not being more comprehensive.

This happens on python2.7 windows 10 64 bit and on windows 7 32 bit



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161017/01b3a89c/attachment-0002.html>

From cory at lukasa.co.uk  Mon Oct 17 08:13:21 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 17 Oct 2016 15:13:21 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
Message-ID: <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>


> On 17 Oct 2016, at 08:46, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have been running some tests to check some issue and have seen that notifyFinish is not being called in 16.4.1
> 
> This is on Windows 10 using python 2.7.12
> 
> Checking back it  is not called 16.3.0 but is in 16.2.0
> 
> The test uses some sample code from Twisted web in 60 seconds that sets a timer to allow the browser to halt the request by using Escape and make notifyFinish  get called.
> 
> Before I did anything else I thought I would check and see if anyone else was seeing this behaviour.

Yup, this looks like a known issue: https://twistedmatrix.com/trac/ticket/8692

Cory


From johnaherne at rocs.co.uk  Mon Oct 17 10:27:58 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 17 Oct 2016 17:27:58 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
Message-ID: <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>

OK. Thanks for the link.

That explains what is going on although I'm not too clear on the details.

What I was looking to do was set up an http session and when the browser
went away use that a the trigger to expire the session.

I didn't just want to set some arbitrary time frame to expire the session
but if they just exited the browser or browser tab I could use notifyFinish
to pick up the lost connection and I could then expire the session.

I have'nt  spotted any other info re sessions that would help with this.

Thanks

John Aherne


On Mon, Oct 17, 2016 at 3:13 PM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 17 Oct 2016, at 08:46, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > I have been running some tests to check some issue and have seen that
> notifyFinish is not being called in 16.4.1
> >
> > This is on Windows 10 using python 2.7.12
> >
> > Checking back it  is not called 16.3.0 but is in 16.2.0
> >
> > The test uses some sample code from Twisted web in 60 seconds that sets
> a timer to allow the browser to halt the request by using Escape and make
> notifyFinish  get called.
> >
> > Before I did anything else I thought I would check and see if anyone
> else was seeing this behaviour.
>
> Yup, this looks like a known issue: https://twistedmatrix.com/
> trac/ticket/8692
>
> Cory
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161017/f7ee7a85/attachment-0002.html>

From cory at lukasa.co.uk  Mon Oct 17 10:48:20 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 17 Oct 2016 17:48:20 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
 <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
Message-ID: <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>


> On 17 Oct 2016, at 17:27, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> OK. Thanks for the link.
> 
> That explains what is going on although I'm not too clear on the details.
> 
> What I was looking to do was set up an http session and when the browser went away use that a the trigger to expire the session.
> 
> I didn't just want to set some arbitrary time frame to expire the session but if they just exited the browser or browser tab I could use notifyFinish to pick up the lost connection and I could then expire the session.
> 
> I have'nt  spotted any other info re sessions that would help with this.

The biggest issue here is that “when the browser goes away” is not a well-defined condition that the server can observe. Browsers will attempt to keep connections open as long as they can, meaning that connection termination may not be observed until quite some time later.

Is there any reason that standard cookies (ones that expire at the end of a browser session) + explicit log out aren’t a suitable approach here?

Cory




From johnaherne at rocs.co.uk  Tue Oct 18 00:37:52 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 18 Oct 2016 07:37:52 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
 <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
 <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
Message-ID: <CAKmUHjZOOGqe+XiAQmNbmo0k3xLKcbRJyLnFP9moJiHU7UneqQ@mail.gmail.com>

Well since notifyFinish does not do what I was hoping, I'm back to using
the standard cookie expire mechanism.

I could use javascript to detect idle time, but that's just as arbitrary as
expiring cookies.

Thanks

John Aherne



On Mon, Oct 17, 2016 at 5:48 PM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 17 Oct 2016, at 17:27, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > OK. Thanks for the link.
> >
> > That explains what is going on although I'm not too clear on the details.
> >
> > What I was looking to do was set up an http session and when the browser
> went away use that a the trigger to expire the session.
> >
> > I didn't just want to set some arbitrary time frame to expire the
> session but if they just exited the browser or browser tab I could use
> notifyFinish to pick up the lost connection and I could then expire the
> session.
> >
> > I have'nt  spotted any other info re sessions that would help with this.
>
> The biggest issue here is that “when the browser goes away” is not a
> well-defined condition that the server can observe. Browsers will attempt
> to keep connections open as long as they can, meaning that connection
> termination may not be observed until quite some time later.
>
> Is there any reason that standard cookies (ones that expire at the end of
> a browser session) + explicit log out aren’t a suitable approach here?
>
> Cory
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161018/079ccdaa/attachment-0002.html>

From johnaherne at rocs.co.uk  Tue Oct 18 01:29:02 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 18 Oct 2016 08:29:02 +0100
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
 Twisted 16.4.1
In-Reply-To: <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
 <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
 <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
Message-ID: <CAKmUHja9BU0ojncH6KSF8VpnuZaj7CUpy0Df9yCoU99mWuW=Cw@mail.gmail.com>

Having read the irc log a few times I'm still not clear what is meant to
happen.

I can't see under what circumstances notifyFinish will return a Failure.

John Aherne


On Mon, Oct 17, 2016 at 5:48 PM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 17 Oct 2016, at 17:27, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > OK. Thanks for the link.
> >
> > That explains what is going on although I'm not too clear on the details.
> >
> > What I was looking to do was set up an http session and when the browser
> went away use that a the trigger to expire the session.
> >
> > I didn't just want to set some arbitrary time frame to expire the
> session but if they just exited the browser or browser tab I could use
> notifyFinish to pick up the lost connection and I could then expire the
> session.
> >
> > I have'nt  spotted any other info re sessions that would help with this.
>
> The biggest issue here is that “when the browser goes away” is not a
> well-defined condition that the server can observe. Browsers will attempt
> to keep connections open as long as they can, meaning that connection
> termination may not be observed until quite some time later.
>
> Is there any reason that standard cookies (ones that expire at the end of
> a browser session) + explicit log out aren’t a suitable approach here?
>
> Cory
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161018/7620615a/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Oct 18 02:18:39 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2016 01:18:39 -0700
Subject: [Twisted-Python] notifyFinish not being called on Windows 10
	Twisted 16.4.1
In-Reply-To: <CAKmUHja9BU0ojncH6KSF8VpnuZaj7CUpy0Df9yCoU99mWuW=Cw@mail.gmail.com>
References: <CAKmUHjZgmhcdwHxjUcePBUO6Lf_tPicMBWTS7c6hTGtmGrpqaw@mail.gmail.com>
 <ED39A76B-8B66-4CC1-9091-AFC84BFE7C26@lukasa.co.uk>
 <CAKmUHjYWf-7oZEWAZJw5ZWKW+mDED+N0b==9d=d3631kndfs0A@mail.gmail.com>
 <13F83B1B-127B-43DB-ABA7-DA1214ED9A77@lukasa.co.uk>
 <CAKmUHja9BU0ojncH6KSF8VpnuZaj7CUpy0Df9yCoU99mWuW=Cw@mail.gmail.com>
Message-ID: <6229BFC7-FAD8-4409-B6F1-F6E278CF78FC@twistedmatrix.com>


> On Oct 18, 2016, at 12:29 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Having read the irc log a few times I'm still not clear what is meant to happen.
> 
> I can't see under what circumstances notifyFinish will return a Failure.

The difference between firing with None and firing with a Failure is extremely subtle.  If the client connection terminates "before it's ready" then you'll get an Failure, but this is fairly fuzzily defined in terms of application-level semantics.  A connection that is "not ready" to terminate might be one that has outstanding data to send to the client which the client doesn't receive, or a connection which has only partially received a request.  There are other low-level details of the socket which might also be relevant (for example, I think you might also get this if the client neglects to send a CLOSE_ALERT TLS message).

For most applications, the difference between "failure" and "success" in this case just isn't very interesting.

As Corey identified earlier in the thread though, _also_ a bug where it isn't being called all the time when we expect it.  As the ticket said though, you can try to work around this by just calling resumeProducing() unconditionally at the beginning of your request processing...

-glyph





From itamar at itamarst.org  Tue Oct 18 06:50:10 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 18 Oct 2016 08:50:10 -0400
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
Message-ID: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>

Not been doing much Twisted lately, but have been doing async stuff
elsewhere, and I've learned some useful things.

1. Callbacks should be sync or async, but never
sometimes-one-sometimes-the-other. For details go read
http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/.
For example, Deferred.addCallback(f) really should never run f()
immediately.

3. By instrumenting all callbacks it manages, which may or may not
require item #1, Twisted can have a context that automatically follows
callbacks. Node has this and it is extremely useful.
http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/
is best summary I've found with a bit of searching.

-- 
Itamar Turner-Trauring



From glyph at twistedmatrix.com  Tue Oct 18 13:44:33 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2016 12:44:33 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
Message-ID: <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>


> On Oct 18, 2016, at 5:50 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Not been doing much Twisted lately, but have been doing async stuff
> elsewhere, and I've learned some useful things.

Thanks for writing these up, Itamar!  This sort of reflection is rare and it's always helpful :).

> 1. Callbacks should be sync or async, but never
> sometimes-one-sometimes-the-other. For details go read
> http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/.
> For example, Deferred.addCallback(f) really should never run f()
> immediately.

This has come up a lot in a compare-and-contrast of Twisted vs. asyncio.

I agree that the problems with synchronous callbacks are not insignificant (reentrancy is a degenerate form of preemption, and as we all know preemption is the corrupt wellspring of all bugs).  However, the benefit, i.e. consistency of behavior with respect to reentrancy, comes with a cost: tight coupling to an event loop.  In asyncio, Future's tight coupling to call_soon is a source of problems; it makes it hard to write a test without setting up an elaborate scheduling trampoline, whereas successResultOf/failureResultOf are quite simple to work with.

I think Deferred as it is today is a pretty good compromise between the two positions.  On the one hand it is decoupled from the event loop.  On the other - and this is important - no Deferred-returning API will ever call your callbacks synchronously.  Deferred.addCallback will, of course, but savvy Twisted programmers can (and should) do this, if they have dependent state changes:

self.manipulateSomeStateForSetup()
d = doSomethingPotentiallySynchronous()
self.manipulateSomeStateForProcessing()
d.addCallback(completeOperation)

As a caller, you can always decide whether you can safely be re-entered or not.  In most cases, simply moving the 'addCallback' to the end of the function (a-la Go's "defer", oddly enough) is fine.  In more complex cases where you really need to unwind reentrancy completely, you can do your own callLater(0) or callFromThread() from an object with a reference to a reactor.

> 3.

What happened to '2'? :)

> By instrumenting all callbacks it manages, which may or may not
> require item #1, Twisted can have a context that automatically follows
> callbacks. Node has this and it is extremely useful.
> http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/
> is best summary I've found with a bit of searching.

This was _always_ supposed to be the way that Twisted worked, but frankly I just wasn't smart enough to figure it out.  This is why twisted.python.context came to exist in the first place; I always wanted to attach it to Deferred somehow.  I will watch this talk intently; if #1 really is required to address this, my opinion might change.  A PR would be intensely appreciated.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161018/d234ff8f/attachment-0002.html>

From kevinjacobconway at gmail.com  Tue Oct 18 17:05:08 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Tue, 18 Oct 2016 23:05:08 +0000
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
Message-ID: <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>

> This is why twisted.python.context came to exist in the first place; I
always wanted to attach it to Deferred somehow

Well, it's not something we've announced yet through any official channel,
but we had to solve the context propagation problem at Atlassian to
instrument our services with traceable logging. We open sourced our
solution at https://bitbucket.org/hipchat/txlocal. The answer for us was an
extension for the reactor, thread pool, and inline callbacks that maintain
the needed state. There's a readme with some insight into how we tool our
services.

We've had it on our backlog to address the mailing list and, possibly even,
discuss what it would take to put this into Twisted. I guess now is as good
if a time as any. Feel free to spin off a another thread or reach out to me
off list with any questions or feedback.

On Tue, Oct 18, 2016, 14:47 Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Oct 18, 2016, at 5:50 AM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> Not been doing much Twisted lately, but have been doing async stuff
> elsewhere, and I've learned some useful things.
>
>
> Thanks for writing these up, Itamar!  This sort of reflection is rare and
> it's always helpful :).
>
> 1. Callbacks should be sync or async, but never
> sometimes-one-sometimes-the-other. For details go read
> http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/.
> For example, Deferred.addCallback(f) really should never run f()
> immediately.
>
>
> This has come up a lot in a compare-and-contrast of Twisted vs. asyncio.
>
> I agree that the problems with synchronous callbacks are not insignificant
> (reentrancy is a degenerate form of preemption, and as we all know
> preemption is the corrupt wellspring of all bugs).  However, the benefit,
> i.e. consistency of behavior with respect to reentrancy, comes with a cost:
> tight coupling to an event loop.  In asyncio, Future's tight coupling to
> call_soon is a source of problems; it makes it hard to write a test without
> setting up an elaborate scheduling trampoline, whereas
> successResultOf/failureResultOf are quite simple to work with.
>
> I think Deferred as it is today is a pretty good compromise between the
> two positions.  On the one hand it is decoupled from the event loop.  On
> the other - and this is important - *no Deferred-returning API will ever
> call your callbacks synchronously*.  Deferred.addCallback will, of
> course, but savvy Twisted programmers can (and should) do this, if they
> have dependent state changes:
>
> self.manipulateSomeStateForSetup()
>
> d = doSomethingPotentiallySynchronous()
> *self.manipulateSomeStateForProcessing()*
> d.addCallback(completeOperation)
>
>
> As a caller, you can always decide whether you can safely be re-entered or
> not.  In most cases, simply moving the 'addCallback' to the end of the
> function (a-la Go's "defer", oddly enough) is fine.  In more complex cases
> where you really need to unwind reentrancy completely, you can do your own
> callLater(0) or callFromThread() from an object with a reference to a
> reactor.
>
> 3.
>
>
> What happened to '2'? :)
>
> By instrumenting all callbacks it manages, which may or may not
> require item #1, Twisted can have a context that automatically follows
> callbacks. Node has this and it is extremely useful.
>
> http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/
> is best summary I've found with a bit of searching.
>
>
> This was _always_ supposed to be the way that Twisted worked, but frankly
> I just wasn't smart enough to figure it out.  This is why
> twisted.python.context came to exist in the first place; I always wanted to
> attach it to Deferred somehow.  I will watch this talk intently; if #1
> really is required to address this, my opinion might change.  A PR would be
> intensely appreciated.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161018/3e000c49/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Oct 18 18:47:57 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2016 17:47:57 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>
Message-ID: <D7C9C24F-9527-499C-B7C5-149C0F947860@twistedmatrix.com>


> On Oct 18, 2016, at 4:05 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> > This is why twisted.python.context came to exist in the first place; I always wanted to attach it to Deferred somehow
> 
> Well, it's not something we've announced yet through any official channel, but we had to solve the context propagation problem at Atlassian to instrument our services with traceable logging. We open sourced our solution at https://bitbucket.org/hipchat/txlocal <https://bitbucket.org/hipchat/txlocal>. The answer for us was an extension for the reactor, thread pool, and inline callbacks that maintain the needed state. There's a readme with some insight into how we tool our services.
> 
This is (A) very cool, and (B) making such aggressive use of private APIs that it could win a contest about how to ensure that you break on every new release of Twisted :).  I'm super impressed that you tracked the introduction of twisted._threads and support both old- and new-style thread pools!
> We've had it on our backlog to address the mailing list and, possibly even, discuss what it would take to put this into Twisted. I guess now is as good if a time as any. Feel free to spin off a another thread or reach out to me off list with any questions or feedback
> 
This seems like as good a time to talk about it as any!  Integrating this into the core in some fashion would be good, but I imagine that it's a non-trivial impact to performance, so it would be worthwhile to track that.

Speaking of performance - I found the long digression on "Don't Switch In The Core" interesting, since we actually _do_ tracking this kind of context already, for logging.  I was a little surprised you didn't integrate with this at all.

To be fair, this is something that our friends over at PyPy have been bugging us about since forever; when you're benchmarking raw wire speed it does tend to show up in profiling.

I also take it from the performance notes that you're not using PyPy?  __slots__ shouldn't make much of a difference there.  (In fact I'm given to believe it's a slight _decrease_ in performance on pypy...)

-glyph

> On Tue, Oct 18, 2016, 14:47 Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> On Oct 18, 2016, at 5:50 AM, Itamar Turner-Trauring <itamar at itamarst.org <mailto:itamar at itamarst.org>> wrote:
>> 
>> Not been doing much Twisted lately, but have been doing async stuff
>> elsewhere, and I've learned some useful things.
> 
> Thanks for writing these up, Itamar!  This sort of reflection is rare and it's always helpful :).
> 
>> 1. Callbacks should be sync or async, but never
>> sometimes-one-sometimes-the-other. For details go read
>> http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/ <http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/>.
>> For example, Deferred.addCallback(f) really should never run f()
>> immediately.
> 
> This has come up a lot in a compare-and-contrast of Twisted vs. asyncio.
> 
> I agree that the problems with synchronous callbacks are not insignificant (reentrancy is a degenerate form of preemption, and as we all know preemption is the corrupt wellspring of all bugs).  However, the benefit, i.e. consistency of behavior with respect to reentrancy, comes with a cost: tight coupling to an event loop.  In asyncio, Future's tight coupling to call_soon is a source of problems; it makes it hard to write a test without setting up an elaborate scheduling trampoline, whereas successResultOf/failureResultOf are quite simple to work with.
> 
> I think Deferred as it is today is a pretty good compromise between the two positions.  On the one hand it is decoupled from the event loop.  On the other - and this is important - no Deferred-returning API will ever call your callbacks synchronously.  Deferred.addCallback will, of course, but savvy Twisted programmers can (and should) do this, if they have dependent state changes:
> 
> self.manipulateSomeStateForSetup()
> d = doSomethingPotentiallySynchronous()
> self.manipulateSomeStateForProcessing()
> d.addCallback(completeOperation)
> 
> As a caller, you can always decide whether you can safely be re-entered or not.  In most cases, simply moving the 'addCallback' to the end of the function (a-la Go's "defer", oddly enough) is fine.  In more complex cases where you really need to unwind reentrancy completely, you can do your own callLater(0) or callFromThread() from an object with a reference to a reactor.
> 
>> 3.
> 
> What happened to '2'? :)
> 
>> By instrumenting all callbacks it manages, which may or may not
>> require item #1, Twisted can have a context that automatically follows
>> callbacks. Node has this and it is extremely useful.
>> http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/ <http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/>
>> is best summary I've found with a bit of searching.
> 
> This was _always_ supposed to be the way that Twisted worked, but frankly I just wasn't smart enough to figure it out.  This is why twisted.python.context came to exist in the first place; I always wanted to attach it to Deferred somehow.  I will watch this talk intently; if #1 really is required to address this, my opinion might change.  A PR would be intensely appreciated.
> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161018/abe895f6/attachment-0002.html>

From kevinjacobconway at gmail.com  Tue Oct 18 20:09:25 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Wed, 19 Oct 2016 02:09:25 +0000
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <D7C9C24F-9527-499C-B7C5-149C0F947860@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>
 <D7C9C24F-9527-499C-B7C5-149C0F947860@twistedmatrix.com>
Message-ID: <CAKF=+djEoQ_8U_c92O2gRy+HgAxEPorUM_FXS69WkwQMYCbz0Q@mail.gmail.com>

> making such aggressive use of private APIs that it could win a contest
about how to ensure that you break on every new release of Twisted :)

We're very aware of that! It's one of the reasons we have the test matrix
set up to run multiple versions of Python and Twisted. I have not started
on 16.X compatibility yet.

 >  I imagine that it's a non-trivial impact to performance, so it would be
worthwhile to track that.

We put this this through some extensive benchmarks and testing to measure
the performance impact. For example, the details are logged in a commit
message but, we initially implemented the @inlineCallbacks extension as a
coroutine wrapper. However, we found that the way t.p.Failure tries to
serialize itself, and its local+global scopes, to a dictionary caused
enormous memory and CPU consumption when triggered because of the added
objects in those spaces. The negative impact grew exponentially with levels
of nested coroutines. Very bad day.

Once we pivoted to a small fork of @inlineCallbacks, we measured the
overall performance hit to be negligible in our services. I'll dig around
to see if I can find where we documented the actual numbers we saw. At a
macro level, our service wide stats showed no meaningful growth of runtime
or memory consumption.

> digression on "Don't Switch In The Core"

I was surprised at how much switching this context implementation was when
we put it in the lower level read/write callbacks. Each of our services
process a large amount of continually streaming data and our profiles show,
IIRC, that one of the top 5 consumers of CPU time was calling the
read/write callbacks. When we added this to those paths it increased
overall CPU usage by double digit percentage points. If this feature were
available as an opt-in reactor extension then providers could capacity plan
around the performance hit. We found it more valuable to move the switching
closer to application protocol code where switches happen less frequently.

  > I also take it from the performance notes that you're not using PyPy?

We're still on cPython. PyPy is something we've talked about before but
haven't invested much time into yet. I don't know to what extent PyPy might
change the performance characteristics of the project.

On Tue, Oct 18, 2016 at 7:50 PM Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

On Oct 18, 2016, at 4:05 PM, Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> This is why twisted.python.context came to exist in the first place; I
always wanted to attach it to Deferred somehow

Well, it's not something we've announced yet through any official channel,
but we had to solve the context propagation problem at Atlassian to
instrument our services with traceable logging. We open sourced our
solution at https://bitbucket.org/hipchat/txlocal. The answer for us was an
extension for the reactor, thread pool, and inline callbacks that maintain
the needed state. There's a readme with some insight into how we tool our
services.

This is (A) very cool, and (B) making such aggressive use of private APIs
that it could win a contest about how to ensure that you break on every new
release of Twisted :).  I'm super impressed that you tracked the
introduction of twisted._threads and support both old- and new-style thread
pools!

We've had it on our backlog to address the mailing list and, possibly even,
discuss what it would take to put this into Twisted. I guess now is as good
if a time as any. Feel free to spin off a another thread or reach out to me
off list with any questions or feedback

This seems like as good a time to talk about it as any!  Integrating this
into the core in some fashion would be good, but I imagine that it's a
non-trivial impact to performance, so it would be worthwhile to track that.

Speaking of performance - I found the long digression on "Don't Switch In
The Core" interesting, since we actually _do_ tracking this kind of context
already, for logging.  I was a little surprised you didn't integrate with
this at all.

To be fair, this is something that our friends over at PyPy have been
bugging us about since forever; when you're benchmarking raw wire speed it
does tend to show up in profiling.

I also take it from the performance notes that you're not using PyPy?
 __slots__ shouldn't make much of a difference there.  (In fact I'm given
to believe it's a slight _decrease_ in performance on pypy...)

-glyph

On Tue, Oct 18, 2016, 14:47 Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

On Oct 18, 2016, at 5:50 AM, Itamar Turner-Trauring <itamar at itamarst.org>
wrote:

Not been doing much Twisted lately, but have been doing async stuff
elsewhere, and I've learned some useful things.


Thanks for writing these up, Itamar!  This sort of reflection is rare and
it's always helpful :).

1. Callbacks should be sync or async, but never
sometimes-one-sometimes-the-other. For details go read
http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/.
For example, Deferred.addCallback(f) really should never run f()
immediately.


This has come up a lot in a compare-and-contrast of Twisted vs. asyncio.

I agree that the problems with synchronous callbacks are not insignificant
(reentrancy is a degenerate form of preemption, and as we all know
preemption is the corrupt wellspring of all bugs).  However, the benefit,
i.e. consistency of behavior with respect to reentrancy, comes with a cost:
tight coupling to an event loop.  In asyncio, Future's tight coupling to
call_soon is a source of problems; it makes it hard to write a test without
setting up an elaborate scheduling trampoline, whereas
successResultOf/failureResultOf are quite simple to work with.

I think Deferred as it is today is a pretty good compromise between the two
positions.  On the one hand it is decoupled from the event loop.  On the
other - and this is important - *no Deferred-returning API will ever call
your callbacks synchronously*.  Deferred.addCallback will, of course, but
savvy Twisted programmers can (and should) do this, if they have dependent
state changes:

self.manipulateSomeStateForSetup()

d = doSomethingPotentiallySynchronous()
*self.manipulateSomeStateForProcessing()*
d.addCallback(completeOperation)


As a caller, you can always decide whether you can safely be re-entered or
not.  In most cases, simply moving the 'addCallback' to the end of the
function (a-la Go's "defer", oddly enough) is fine.  In more complex cases
where you really need to unwind reentrancy completely, you can do your own
callLater(0) or callFromThread() from an object with a reference to a
reactor.

3.


What happened to '2'? :)

By instrumenting all callbacks it manages, which may or may not
require item #1, Twisted can have a context that automatically follows
callbacks. Node has this and it is extremely useful.
http://fredkschott.com/post/2014/02/conquering-asynchronous-context-with-cls/
is best summary I've found with a bit of searching.


This was _always_ supposed to be the way that Twisted worked, but frankly I
just wasn't smart enough to figure it out.  This is why
twisted.python.context came to exist in the first place; I always wanted to
attach it to Deferred somehow.  I will watch this talk intently; if #1
really is required to address this, my opinion might change.  A PR would be
intensely appreciated.

-glyph

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161019/1fb34863/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Oct 19 12:55:24 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Oct 2016 11:55:24 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <CAKF=+djEoQ_8U_c92O2gRy+HgAxEPorUM_FXS69WkwQMYCbz0Q@mail.gmail.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <CAKF=+dhuCBmFqaFXg9BmqJkWW-4qhLBirAAhvpLbtVPk_N2XgA@mail.gmail.com>
 <D7C9C24F-9527-499C-B7C5-149C0F947860@twistedmatrix.com>
 <CAKF=+djEoQ_8U_c92O2gRy+HgAxEPorUM_FXS69WkwQMYCbz0Q@mail.gmail.com>
Message-ID: <51D84DEE-1433-46C6-9B32-010C45CB975B@twistedmatrix.com>


> On Oct 18, 2016, at 7:09 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> > making such aggressive use of private APIs that it could win a contest about how to ensure that you break on every new release of Twisted :)
> 
> We're very aware of that! It's one of the reasons we have the test matrix set up to run multiple versions of Python and Twisted. I have not started on 16.X compatibility yet.
> 
>  >  I imagine that it's a non-trivial impact to performance, so it would be worthwhile to track that.
> 
> We put this this through some extensive benchmarks and testing to measure the performance impact. For example, the details are logged in a commit message but, we initially implemented the @inlineCallbacks extension as a coroutine wrapper. However, we found that the way t.p.Failure tries to serialize itself, and its local+global scopes, to a dictionary caused enormous memory and CPU consumption when triggered because of the added objects in those spaces. The negative impact grew exponentially with levels of nested coroutines. Very bad day.

What are you referring to as a "coroutine" here?  A generator?  And exponential growth, you say?  That sounds very surprising.

> Once we pivoted to a small fork of @inlineCallbacks, we measured the overall performance hit to be negligible in our services. I'll dig around to see if I can find where we documented the actual numbers we saw. At a macro level, our service wide stats showed no meaningful growth of runtime or memory consumption.

Does this mean you only get context tracking against inlineCallbacks, and not other usages of Deferred?

> > digression on "Don't Switch In The Core"
> 
> I was surprised at how much switching this context implementation was when we put it in the lower level read/write callbacks. Each of our services process a large amount of continually streaming data and our profiles show, IIRC, that one of the top 5 consumers of CPU time was calling the read/write callbacks. When we added this to those paths it increased overall CPU usage by double digit percentage points. If this feature were available as an opt-in reactor extension then providers could capacity plan around the performance hit. We found it more valuable to move the switching closer to application protocol code where switches happen less frequently.

Maybe "switching" is more expensive than I realized.  Where is this implemented?

>   > I also take it from the performance notes that you're not using PyPy?
> 
> We're still on cPython. PyPy is something we've talked about before but haven't invested much time into yet. I don't know to what extent PyPy might change the performance characteristics of the project.

As I always tell people - if you care about performance, PyPy should be step zero.  Optimizing for CPython looks like adding weird implementation-specific hacks that might start working or be backwards in the next version; optimizing for PyPy means making the code simpler and more readable so the JIT can figure out what to do ;).  So the pressure that optimizing for PyPy exerts on your code is generally a lot healthier.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161019/7c0eb2cc/attachment-0002.html>

From itamar at itamarst.org  Wed Oct 19 15:45:53 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2016 17:45:53 -0400
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
Message-ID: <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>




On Tue, Oct 18, 2016, at 03:44 PM, Glyph Lefkowitz wrote:
>
> I think Deferred as it is today is a pretty good compromise between
> the two positions.  On the one hand it is decoupled from the event
> loop.  On the other - and this is important - *no Deferred-returning
> API will ever call your callbacks synchronously*.
> Deferred.addCallback will, of course, but savvy Twisted programmers
> can (and should) do this, if they have dependent state changes:
>
>> self.manipulateSomeStateForSetup()
>>
>> d = doSomethingPotentiallySynchronous()
>> *self.manipulateSomeStateForProcessing()*
>> d.addCallback(completeOperation)
>
> As a caller, you can always decide whether you can safely be re-
> entered or not.  In most cases, simply moving the 'addCallback' to the
> end of the function (a-la Go's "defer", oddly enough) is fine.  In
> more complex cases where you really need to unwind reentrancy
> completely, you can do your own callLater(0) or callFromThread() from
> an object with a reference to a reactor.

Well... I had a test that went through synchronous Deferred path. And
yeah, it was easier to write than async test. But it failed to catch a
bug that was only in async case. So the problem I see is that supporting
both in Deferred means you need twice the number of tests each time you
use Deferreds.

>> 3.
>
> What happened to '2'? :)

There were only two points :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161019/4e461e8b/attachment-0002.html>

From itamar at itamarst.org  Wed Oct 19 15:47:08 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2016 17:47:08 -0400
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
Message-ID: <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>




On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:
> Well... I had a test that went through synchronous Deferred path. And
> yeah, it was easier to write than async test. But it failed to catch a
> bug that was only in async case. So the problem I see is that
> supporting both in Deferred means you need twice the number of tests
> each time you use Deferreds.
>

Er, that was unclear. I had a bug that wasn't caught by tests because it
passed with sync Deferred and failed with async Deferred callback, and I
didn't have tests for latter.

--
Itamar Turner-Trauring

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161019/20201182/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Oct 19 15:54:43 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Oct 2016 14:54:43 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
Message-ID: <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>


> On Oct 19, 2016, at 2:47 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:
>> Well... I had a test that went through synchronous Deferred path. And yeah, it was easier to write than async test. But it failed to catch a bug that was only in async case. So the problem I see is that supporting both in Deferred means you need twice the number of tests each time you use Deferreds.
> 
> Er, that was unclear. I had a bug that wasn't caught by tests because it passed with sync Deferred and failed with async Deferred callback, and I didn't have tests for latter.


To be clear: I do see this as a downside to Deferred's architecture; it's a tradeoff.  I see the loose coupling with the event loop as a worthwhile upside.

However, it's totally possible to write the async Deferred callback case as well, just by having the test fire the Deferred after returning to the test body instead of firing it before :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161019/5888a860/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Oct 19 17:25:20 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 19 Oct 2016 19:25:20 -0400
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
Message-ID: <CAEeXt4MLmpJ4Z1=tDJWva2W_T67U+EGk2ZbAJGP1_JUTPJ-9+Q@mail.gmail.com>

It's also possible to write a little bit of testing library code and get
both versions of the test nearly for free.  Unfortunately, I very rarely
see test suites written that way.  I think many people don't realize there
are two cases to handle or believe testing both cases is too expensive for
them (perhaps because they don't realize you can reuse the code for doing
so to save on the cost).

Jean-Paul

On Wed, Oct 19, 2016 at 5:54 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Oct 19, 2016, at 2:47 PM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:
>
> Well... I had a test that went through synchronous Deferred path. And
> yeah, it was easier to write than async test. But it failed to catch a bug
> that was only in async case. So the problem I see is that supporting both
> in Deferred means you need twice the number of tests each time you use
> Deferreds.
>
>
> Er, that was unclear. I had a bug that wasn't caught by tests because it
> passed with sync Deferred and failed with async Deferred callback, and I
> didn't have tests for latter.
>
>
> To be clear: I do see this as a *downside* to Deferred's architecture;
> it's a tradeoff.  I see the loose coupling with the event loop as a
> worthwhile upside.
>
> However, it's totally possible to write the async Deferred callback case
> as well, just by having the test fire the Deferred after returning to the
> test body instead of firing it before :-).
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161019/b1b750a2/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed Oct 19 17:43:58 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 20 Oct 2016 10:43:58 +1100
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
Message-ID: <281845A0-2369-43C0-BAEF-5367DD8A2856@atleastfornow.net>


> On 20 Oct. 2016, at 08:54, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Oct 19, 2016, at 2:47 PM, Itamar Turner-Trauring <itamar at itamarst.org <mailto:itamar at itamarst.org>> wrote:
>> 
>> On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:
>>> Well... I had a test that went through synchronous Deferred path. And yeah, it was easier to write than async test. But it failed to catch a bug that was only in async case. So the problem I see is that supporting both in Deferred means you need twice the number of tests each time you use Deferreds.
>> 
>> Er, that was unclear. I had a bug that wasn't caught by tests because it passed with sync Deferred and failed with async Deferred callback, and I didn't have tests for latter.
> 
> 
> To be clear: I do see this as a downside to Deferred's architecture; it's a tradeoff.  I see the loose coupling with the event loop as a worthwhile upside.

One thing that I have still not figured out is how Futures (which are tightly tied to an event loop) will possibly ever work over multiple event loops. I think since you can't really chain them, this is less of a problem, but Deferreds like to absorb other Deferreds and make one big one, which would make the tight coupling problematic if you wanted to use two event loops (like, say, a GTK one and an IOCP one on Windows).

- Amber

> 
> However, it's totally possible to write the async Deferred callback case as well, just by having the test fire the Deferred after returning to the test body instead of firing it before :-).
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161020/0eb80b1d/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Oct 19 18:07:05 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Oct 2016 17:07:05 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <CAEeXt4MLmpJ4Z1=tDJWva2W_T67U+EGk2ZbAJGP1_JUTPJ-9+Q@mail.gmail.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
 <CAEeXt4MLmpJ4Z1=tDJWva2W_T67U+EGk2ZbAJGP1_JUTPJ-9+Q@mail.gmail.com>
Message-ID: <5080C176-9A6C-4D0F-B5C3-8076A12B858E@twistedmatrix.com>


> On Oct 19, 2016, at 4:25 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> It's also possible to write a little bit of testing library code and get both versions of the test nearly for free.  Unfortunately, I very rarely see test suites written that way.  I think many people don't realize there are two cases to handle or believe testing both cases is too expensive for them (perhaps because they don't realize you can reuse the code for doing so to save on the cost).

I don't think even I've ever written a test suite that way.  Could we provide any utilities in Twisted to make this easier, or even more importantly, more obvious?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161019/b03fc6ee/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Oct 19 18:07:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Oct 2016 17:07:59 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <281845A0-2369-43C0-BAEF-5367DD8A2856@atleastfornow.net>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
 <281845A0-2369-43C0-BAEF-5367DD8A2856@atleastfornow.net>
Message-ID: <8A05D50A-258A-4A58-85A2-29942B25861D@twistedmatrix.com>


> On Oct 19, 2016, at 4:43 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> One thing that I have still not figured out is how Futures (which are tightly tied to an event loop) will possibly ever work over multiple event loops. I think since you can't really chain them, this is less of a problem, but Deferreds like to absorb other Deferreds and make one big one, which would make the tight coupling problematic if you wanted to use two event loops (like, say, a GTK one and an IOCP one on Windows).
> 

I've never seen this as a problem, because "multiple event loops" implicitly means "multiple threads"; and you really kinda need to call back a Deferred on the same event loop where it was originated.  When would you want to do this?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161019/7a35bdb4/attachment-0002.html>

From kevinjacobconway at gmail.com  Wed Oct 19 18:12:47 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 20 Oct 2016 00:12:47 +0000
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
 better t.p.context
In-Reply-To: <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
Message-ID: <CAKF=+diopr-YYWRPOEuJeZD2kM9UuzWA3HFNs+D9CqhKcKf3Jw@mail.gmail.com>

> What are you referring to as a "coroutine" here?  A generator?

Generator, yes, but used as a coroutine that both emits values and receives
them. The introduction of dedicated coroutines in Python 3.5 is something I
haven't updated my personal language for very well. Generator-coroutine is
the term used in there Python docs, IIRC.

> And exponential growth, you say?

Well... That may not be perfectly accurate and I shouldn't have used that
term. It grew large enough, fast enough that the same level of nesting was
measured in microseconds for the control and and over an hour for the
wrapper so I cancelled the test. Let me put together a reproducible
experiment and let others decide the growth rate.

> Where is this implemented?

Unfortunately, our production use of the lib is not something we've open
sourced. Similar to the above, I'll make available a reproducible
experiment so you can draw your own conclusion.

> Optimizing for CPython looks like adding weird implementation-specific
hacks that might start working or be backwards in the next version

This went into the rationale behind making most of the components
pluggable. The choice of optimizing for cPython is internal to us and we
chose to document it for others. It's not required and not the default.

As far as the possibility of integrating this feature into Twisted, let me
chat with my cohorts over here. Well come back with some benchmark code and
a proposal of changes for further discussion. I'll probably start a new
thread to focus on the context bits.

On Wed, Oct 19, 2016, 16:56 Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:


On Oct 19, 2016, at 2:47 PM, Itamar Turner-Trauring <itamar at itamarst.org>
wrote:

On Wed, Oct 19, 2016, at 05:45 PM, Itamar Turner-Trauring wrote:

Well... I had a test that went through synchronous Deferred path. And yeah,
it was easier to write than async test. But it failed to catch a bug that
was only in async case. So the problem I see is that supporting both in
Deferred means you need twice the number of tests each time you use
Deferreds.


Er, that was unclear. I had a bug that wasn't caught by tests because it
passed with sync Deferred and failed with async Deferred callback, and I
didn't have tests for latter.


To be clear: I do see this as a *downside* to Deferred's architecture; it's
a tradeoff.  I see the loose coupling with the event loop as a worthwhile
upside.

However, it's totally possible to write the async Deferred callback case as
well, just by having the test fire the Deferred after returning to the test
body instead of firing it before :-).

-glyph
_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161020/e5708d31/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Oct 20 02:13:09 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Oct 2016 01:13:09 -0700
Subject: [Twisted-Python] Some things I've learned: safer callbacks,
	better t.p.context
In-Reply-To: <CAKF=+diopr-YYWRPOEuJeZD2kM9UuzWA3HFNs+D9CqhKcKf3Jw@mail.gmail.com>
References: <1476795010.1115336.759578201.026E4EB6@webmail.messagingengine.com>
 <FB3E9D6A-A462-41B5-BFEA-1B315A1AFCFB@twistedmatrix.com>
 <1476913553.33251.761361153.46DA528B@webmail.messagingengine.com>
 <1476913628.33821.761363369.26CEA2EC@webmail.messagingengine.com>
 <47251D59-6C53-47E7-BCAE-E5BA1A47670B@twistedmatrix.com>
 <CAKF=+diopr-YYWRPOEuJeZD2kM9UuzWA3HFNs+D9CqhKcKf3Jw@mail.gmail.com>
Message-ID: <A87BC01A-146D-4505-8D49-011E817750F1@twistedmatrix.com>


> On Oct 19, 2016, at 5:12 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> As far as the possibility of integrating this feature into Twisted, let me chat with my cohorts over here. Well come back with some benchmark code and a proposal of changes for further discussion. I'll probably start a new thread to focus on the context bits.

The Twisted benchmarks are not super discoverable, so for your reference, they're available here <https://github.com/twisted-infra/twisted-benchmarks> and PRs should be submitted there.  They're separate from the repo because newer benchmarks often have to be run against older versions to get a trend line.

(Also, if you didn't know, the results from these benchmarks are presented at <http://speed.twistedmatrix.com> :)).

-glyph


From hawkowl at atleastfornow.net  Sat Oct 22 22:26:40 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 23 Oct 2016 15:26:40 +1100
Subject: [Twisted-Python] Twisted 16.5.0rc2 Release Candidate Announcement
Message-ID: <DEEAA762-F8DE-49AF-B67F-0C1106244E9D@atleastfornow.net>

Hi everyone,

I've just cut Twisted 16.5.0rc2, the second RC of the 16.5.0 release series. It contains fixes for three bugs:

- Twisted Logger writing tracebacks in the middle of JSON-formatted logs
- `twisted.version`'s package changing case (which was fixed with making Incremental compare them lower cased)
- Comparing non-ASCII-subset Unicode strings in Trial on Python 2.7 failing with a UnicodeDecodeError.

You can get it by running `pip install Twisted==16.5.0rc2` or getting the tarball from https://twistedmatrix.com/Releases/rc/16.5.0rc2/. The full NEWS file is also available there, if you wish to read more details.

16.5.0 will be released sometime around Wednesday, provided no more serious bugs rear their head! Remember to test it with your applications, you'll get a virtual cookie if you do :)

- Amber


From trac at twistedmatrix.com  Sun Oct 23 00:05:19 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 23 Oct 2016 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1477202719.91.749666995684002139@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161023/2b496656/attachment-0002.html>

From trac at twistedmatrix.com  Sun Oct 30 00:05:21 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 30 Oct 2016 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1477807521.35.1923675691785505309@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161030/e4c24e49/attachment-0002.html>

From jerryguitarist at gmail.com  Mon Oct 31 18:05:37 2016
From: jerryguitarist at gmail.com (Eeshan Garg)
Date: Mon, 31 Oct 2016 21:35:37 -0230
Subject: [Twisted-Python] [Twisted] #7934: Add assertion helpers
 assertLogEvent/assertLogEvents for testing log events
In-Reply-To: <068.19cdc8437e75049f0a9436bcb652f388@twistedmatrix.com>
References: <053.d5e2af953523391d81766f286647eb01@twistedmatrix.com>
 <068.19cdc8437e75049f0a9436bcb652f388@twistedmatrix.com>
Message-ID: <CA+2gYir0hdSC4vOo0J+UueS3pb7LzXHa04_5q5jbp34hPGgOqA@mail.gmail.com>

Hi @glyph!

My sincere apologies for being so inactive on this ticket. Unfortunately,
the past few weeks have piled up too much on my plate. I do plan on
responding to markrwilliams' review in the next week or so. Thank you so
much for taking the time to look at this ticket, I promise the time you
spent on it won't go to waste, as I do plan on going through with this and
follow it up with further involvement in Twisted as a whole. Looking
forward to learning more from you and markrwilliams and from everyone else!

Regards,
Eeshan Garg

On Mon, Oct 31, 2016 at 8:16 PM, Twisted <trac at twistedmatrix.com> wrote:

> #7934: Add assertion helpers assertLogEvent/assertLogEvents for testing
> log events
> -------------------------+-------------------------
>  Reporter:  eeshangarg   |       Owner:  eeshangarg
>      Type:  enhancement  |      Status:  new
>  Priority:  normal       |   Milestone:
> Component:  core         |  Resolution:
>  Keywords:               |      Branch:
>    Author:               |
> -------------------------+-------------------------
> Changes (by glyph):
>
>  * keywords:  review =>
>
>
> Comment:
>
>  Since there were no objections…
>
> --
> Ticket URL: <https://twistedmatrix.com/trac/ticket/7934#comment:12>
> Twisted <https://twistedmatrix.com/trac/>
> Engine of your Internet
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161031/a7dad938/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Oct 31 18:07:23 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 31 Oct 2016 17:07:23 -0700
Subject: [Twisted-Python] [Twisted] #7934: Add assertion helpers
 assertLogEvent/assertLogEvents for testing log events
In-Reply-To: <CA+2gYir0hdSC4vOo0J+UueS3pb7LzXHa04_5q5jbp34hPGgOqA@mail.gmail.com>
References: <053.d5e2af953523391d81766f286647eb01@twistedmatrix.com>
 <068.19cdc8437e75049f0a9436bcb652f388@twistedmatrix.com>
 <CA+2gYir0hdSC4vOo0J+UueS3pb7LzXHa04_5q5jbp34hPGgOqA@mail.gmail.com>
Message-ID: <2C24BF66-4475-4E84-8BDF-A633DAF47BC3@twistedmatrix.com>


> On Oct 31, 2016, at 5:05 PM, Eeshan Garg <jerryguitarist at gmail.com> wrote:
> 
> Hi @glyph!
> 
> My sincere apologies for being so inactive on this ticket. Unfortunately, the past few weeks have piled up too much on my plate. I do plan on responding to markrwilliams' review in the next week or so. Thank you so much for taking the time to look at this ticket, I promise the time you spent on it won't go to waste, as I do plan on going through with this and follow it up with further involvement in Twisted as a whole. Looking forward to learning more from you and markrwilliams and from everyone else!

No need to apologize!  Just work on it as time allows.  If we all had to feel bad about being unresponsive, I'd take one look at the 14-year-old tickets on Report 1 and collapse under the crushing weight of the guilt :).

-glyph




