From glyph at twistedmatrix.com  Sat Mar  2 23:32:58 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2019 22:32:58 -0800
Subject: [Twisted-Python] a farewell to buildbot
Message-ID: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>

Thanks to our long-suffering contributors Adi Roiban and Kyle Altendorf, we now have macOS builds running on circleCI!  Supposedly we have sufficient resources to actually run all our builds, too, without running out of CI juice before the end of each month :-).

As such, I've changed our repository configuration to drop the old, somewhat outdated macOS buildbot, and replace it with the Circle CI infrastructure which should cover that platform.

With this change, none of the buildbot builders define our gating-to-trunk continuous integration.  This is a great thing for the project, as it means external contributors will be able to get a "this is acceptable to merge" green checkmark without ./admin/pr_as_branch or any other similar repo:write-person-requiring shenanigans.

However, it also means that we are now spending a not-insignificant amount of contributor time maintaining a farm of machines that do tons of continuous integration work, which may not really be telling us anything interesting about Twisted's quality or correctness.  I think it might be worth considering decommissioning buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> entirely, unless some of the vendors of the platforms and kernels covered there would like to step up to do some maintenance themselves.  It's been a decade or so since Twisted was spotting regular regressions in Linux, FreeBSD or Darwin, so I think this style of build infrastructure may be a relic of a bygone era.

For my part, I probably will start doing any contributions on my own fork, since that will mean I don't have to constantly kick random spurious RHEL7 buildbot failures to avoid getting a red "X" on my PRs.

Furthermore, if we decom'd buildbot as software infrastructure, we'd still have a significant amount of cloud / hardware resources we could potentially throw at *other* problems facing the project which cloud CI doesn't cover as well, like SpeedCenter.

So, do folks have any strong feelings, or would anyone like to volunteer to help with some aspect of this?  As always: we don't have enough folks to keep up with the operational demands of twistedmatrix.com <http://twistedmatrix.com/>, so if you want to dev some ops or ops some infra, please speak up :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190302/22506712/attachment.html>

From hawkowl at atleastfornow.net  Sat Mar  2 23:45:47 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 2 Mar 2019 22:45:47 -0800
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
Message-ID: <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>

I have been switching matrix.org to Buildkite's open source offering (where
you bring your own builders). It might be an option for things like
codespeed, which we still would want to be consistent.

Other than that, I was taking a look at Azure Pipelines last year. I think
we could get a decent amount of hosted, easy to maintain build
infrastructure through Microsoft, which includes the potential to also
ditch running our own Windows for testing.

- Amber

On Sat., 2 Mar. 2019, 22:33 Glyph, <glyph at twistedmatrix.com> wrote:

> Thanks to our long-suffering contributors Adi Roiban and Kyle Altendorf,
> we now have macOS builds running on circleCI!  Supposedly we have
> sufficient resources to actually run all our builds, too, without running
> out of CI juice before the end of each month :-).
>
> As such, I've changed our repository configuration to drop the old,
> somewhat outdated macOS buildbot, and replace it with the Circle CI
> infrastructure which should cover that platform.
>
> With this change, none of the buildbot builders define our gating-to-trunk
> continuous integration.  This is a great thing for the project, as it means
> external contributors will be able to get a "this is acceptable to merge"
> green checkmark without ./admin/pr_as_branch or any other similar
> repo:write-person-requiring shenanigans.
>
> However, it also means that we are now spending a not-insignificant amount
> of contributor time maintaining a farm of machines that do tons of
> continuous integration work, which may not really be telling us anything
> interesting about Twisted's quality or correctness.  I think it might be
> worth considering decommissioning buildbot.twistedmatrix.com entirely,
> unless some of the vendors of the platforms and kernels covered there would
> like to step up to do some maintenance themselves.  It's been a decade or
> so since Twisted was spotting regular regressions in Linux, FreeBSD or
> Darwin, so I think this style of build infrastructure may be a relic of a
> bygone era.
>
> For my part, I probably will start doing any contributions on my own fork,
> since that will mean I don't have to constantly kick random spurious RHEL7
> buildbot failures to avoid getting a red "X" on my PRs.
>
> Furthermore, if we decom'd buildbot as software infrastructure, we'd still
> have a significant amount of cloud / hardware resources we could
> potentially throw at *other* problems facing the project which cloud CI
> doesn't cover as well, like SpeedCenter.
>
> So, do folks have any strong feelings, or would anyone like to volunteer
> to help with some aspect of this?  As always: we don't have enough folks to
> keep up with the operational demands of twistedmatrix.com, so if you want
> to dev some ops or ops some infra, please speak up :).
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190302/f8f9a2f2/attachment.html>

From trac at twistedmatrix.com  Sun Mar  3 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Mar 2019 07:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1551596718.54.8156496412292518531@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190303/3d0f4710/attachment-0001.html>

From glyph at twistedmatrix.com  Sun Mar  3 00:18:51 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2019 23:18:51 -0800
Subject: [Twisted-Python] secrets management
Message-ID: <7D413F02-48A9-48B2-B69D-06E96626644A@twistedmatrix.com>

Thanks to 1Password's open source program, we now have the ability to conveniently and securely share secrets amongst the Twisted core team:

https://github.com/1Password/1password-teams-open-source/pull/106#issuecomment-467884584 <https://github.com/1Password/1password-teams-open-source/pull/106#issuecomment-467884584>

If you're interested in using this (for example, if you do anything with Twisted infra) please drop me an email from your twistedmatrix.com <http://twistedmatrix.com/> email address and I'll add you to the team.  (If you do infra work but don't have a twistedmatrix.com <http://twistedmatrix.com/> email address, I'll set you up with one.)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190302/71e4b39b/attachment.html>

From chris at withers.org  Sun Mar  3 07:07:58 2019
From: chris at withers.org (Chris Withers)
Date: Sun, 3 Mar 2019 14:07:58 +0000
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
 <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>
Message-ID: <95b8942e-685d-55f3-4534-46171b7e9a47@withers.org>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190303/1390acfb/attachment.html>

From sda at fstab.net  Sun Mar  3 09:40:11 2019
From: sda at fstab.net (Kyle Altendorf)
Date: Sun, 03 Mar 2019 11:40:11 -0500
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <95b8942e-685d-55f3-4534-46171b7e9a47@withers.org>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
 <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>
 <95b8942e-685d-55f3-4534-46171b7e9a47@withers.org>
Message-ID: <b2f4fb10f46d01552c8982347b473512@fstab.net>

On 2019-03-03 09:07, Chris Withers wrote:
> What do you make of CircleCI?

I found it mostly pleasant but I'm expecting to be using Azure 
personally.  It's the only one that I've worked with that covers what I 
think ought to be the basics.  Linux/macOS/Windows, CPython 2,7/3.4+ 
(ok, maybe 3.5+...), and PyPy 2/3 (I had to download it but it wasn't 
too painful to get it working), and artifact storage.

CircleCI was nice but it lacks Windows entirely and only has CPython 2/3 
on macOS iirc.  They do provide some nice templating features.  AppVeyor 
lacks macOS (I haven't tried their Linux) and just one worker at a time. 
  Travis now has the OSes covered and their matrixing is nice (until you 
do anything 'special' and it can't be used afaik) but only really 
supports Python on Linux and doesn't have artifact storage.

All that said, I just started with Azure Pipelines this week and have 
only put one pure Python project on it so who knows what will turn up as 
I do more.

https://dev.azure.com/altendky/exttr/_build/results?buildId=120

Cheers,
-kyle


From twotonespirit at gmail.com  Sun Mar  3 10:31:06 2019
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sun, 3 Mar 2019 10:31:06 -0700
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <b2f4fb10f46d01552c8982347b473512@fstab.net>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
 <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>
 <95b8942e-685d-55f3-4534-46171b7e9a47@withers.org>
 <b2f4fb10f46d01552c8982347b473512@fstab.net>
Message-ID: <CAMGywB6nvj4mkpC3Mg5zd2rBOLu5weROC4-CVSsOLtfDWoca8g@mail.gmail.com>

Hawkowl: I didn't realize you were involved in matrix.  I love matrix!

On Sun, Mar 3, 2019 at 9:40 AM Kyle Altendorf <sda at fstab.net> wrote:

> On 2019-03-03 09:07, Chris Withers wrote:
> > What do you make of CircleCI?
>
> I found it mostly pleasant but I'm expecting to be using Azure
> personally.  It's the only one that I've worked with that covers what I
> think ought to be the basics.  Linux/macOS/Windows, CPython 2,7/3.4+
> (ok, maybe 3.5+...), and PyPy 2/3 (I had to download it but it wasn't
> too painful to get it working), and artifact storage.
>
> CircleCI was nice but it lacks Windows entirely and only has CPython 2/3
> on macOS iirc.  They do provide some nice templating features.  AppVeyor
> lacks macOS (I haven't tried their Linux) and just one worker at a time.
>   Travis now has the OSes covered and their matrixing is nice (until you
> do anything 'special' and it can't be used afaik) but only really
> supports Python on Linux and doesn't have artifact storage.
>
> All that said, I just started with Azure Pipelines this week and have
> only put one pure Python project on it so who knows what will turn up as
> I do more.
>
> https://dev.azure.com/altendky/exttr/_build/results?buildId=120
>
> Cheers,
> -kyle
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190303/a6c7226f/attachment.html>

From contact at evilham.com  Sun Mar  3 10:46:56 2019
From: contact at evilham.com (Evilham)
Date: Sun, 3 Mar 2019 18:46:56 +0100
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
Message-ID: <11f7a8c9-4627-c412-8f0f-87134cf6f550@evilham.com>

Am 03/03/2019 um 7:32 schrieb Glyph:
> So, do folks have any strong feelings, or would anyone like to volunteer
> to help with some aspect of this?  As always: we don't have enough folks
> to keep up with the operational demands of twistedmatrix.com
> <http://twistedmatrix.com>, so if you want to dev some ops or ops some
> infra, please speak up :).

This together with the 1password email raises following question:
Is there anything particular that needs more support?

Amber's point about Buildkite's bring-your-own-builders offering sounds
interesting, and if lack of Mensch-power is the only issue, maybe a call
to arms in a somewhat more specific fashion would be in order?

I mention because that would help with some ML readers who may think "no
way I can help with that" and actually could have the expertise on
specific bits that are needed.

Also, listing needs could be a good exercise overall and it could be
listed here: https://twistedmatrix.com/trac/wiki/Infrastructure

PS: Since Amber is part of Matrix' team, I just realised the silliest
thing: following Twisted's tradition of awesome/awful naming puns,
Matrix' Homeserver reference implementation, synapse, is written on
Twisted, and this project's website is... twistedmatrix.com (!)

-- 
Evilham


From glyph at twistedmatrix.com  Sun Mar  3 13:41:05 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 Mar 2019 12:41:05 -0800
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <11f7a8c9-4627-c412-8f0f-87134cf6f550@evilham.com>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
 <11f7a8c9-4627-c412-8f0f-87134cf6f550@evilham.com>
Message-ID: <D5AB0E96-E53B-4794-845C-E49CEB6835DD@twistedmatrix.com>



> On Mar 3, 2019, at 9:46 AM, Evilham <contact at evilham.com> wrote:
> 
> Am 03/03/2019 um 7:32 schrieb Glyph:
>> So, do folks have any strong feelings, or would anyone like to volunteer
>> to help with some aspect of this?  As always: we don't have enough folks
>> to keep up with the operational demands of twistedmatrix.com
>> <http://twistedmatrix.com>, so if you want to dev some ops or ops some
>> infra, please speak up :).
> 
> This together with the 1password email raises following question:
> Is there anything particular that needs more support?

Thanks for asking!

> Amber's point about Buildkite's bring-your-own-builders offering sounds
> interesting, and if lack of Mensch-power is the only issue, maybe a call
> to arms in a somewhat more specific fashion would be in order?

The bystander effect might indeed be a big reason few folks have stepped forward.

Broadly speaking there are three areas that would be good to get help with, in rough order of importance (although they're all super important):

reducing the amount of regular work it takes to keep things running
setting up systems to get more concrete and immediate benefits out of our dogfooding Twisted and related technology
keeping an eye on the running systems and reacting to alerts

Projects that fall into bucket number 1 include:

dockerizing everything so that instead of a long, elaborate fabric script (https://github.com/twisted-infra/braid/ <https://github.com/twisted-infra/braid/>) we can just `docker-compose up` to get something resembling our current infrastructure.  these services include:
the website
the DNS service
the mailman instance serving this list
codespeed
buildbot, if it keeps being A Thing
the IRC bot (kenaan) that reminds us of the work that needs doing
decomissioning Trac and replacing its workflows with a Github bot (note that we would want to preserve stuff like the regular dev-stats email, the IRC bot, https://twisted.reviews/ <https://twisted.reviews/> etc)
adding an API to our DNS service so that we could use i.e. DNS-01 certificate provisioning to get TLS certificates for other services

In the second bucket would come things like setting up Sentry to capture errors from all those services (web, dns, trac, etc) all of which have bits of Twisted running in them.  In the third would of course be getting admin access to these machines and restarting things when all else has failed, so that hawkowl, mark, or myself doesn't need to do it.

> I mention because that would help with some ML readers who may think "no
> way I can help with that" and actually could have the expertise on
> specific bits that are needed.

The main thing that is required here is the enthusiasm, energy, and spare time required to be responsible for some of this stuff, and to regularly dedicate a little energy to any or all of the above things.

Right now, the operations work is drudgery because nobody has the energy to take it to the next level, and it's just about trying not to break things too badly.  But if someone really put some time into it, we could potentially build some really cool event-driven demos with Twisted that could get people (and core developers!) really excited to develop more interesting features, and we have plenty of hardware to run such things.

> Also, listing needs could be a good exercise overall and it could be
> listed here: https://twistedmatrix.com/trac/wiki/Infrastructure <https://twistedmatrix.com/trac/wiki/Infrastructure>

A good initial project for an interested party would be perhaps to start editing that page by reading Braid and this email.

> PS: Since Amber is part of Matrix' team, I just realised the silliest
> thing: following Twisted's tradition of awesome/awful naming puns,
> Matrix' Homeserver reference implementation, synapse, is written on
> Twisted, and this project's website is... twistedmatrix.com (!)

I'm really hoping to bring back more of this.  For example, the "twisted matrix" was originally so named because the sub-projects were twisted dot something, and these were termed "dot products".

;-).

I hope this message was helpful!

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190303/c2503071/attachment.html>

From twm at freecog.net  Mon Mar  4 16:12:28 2019
From: twm at freecog.net (Tom Most)
Date: Mon, 04 Mar 2019 23:12:28 +0000
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate
 Announcement
In-Reply-To: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
References: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
Message-ID: <9CFF17CE-5D53-4453-B429-B134E36FAC25@freecog.net>

Hi Amber,

I wanted to make sure you've seen this: https://twistedmatrix.com/trac/ticket/9592

Twisted now references a symbol not present in its minimal crypography requirement.

---Tom


On February 24, 2019 11:19:28 AM PST, Amber Brown <hawkowl at atleastfornow.net> wrote:
>Hello from PyCascades! Straight from the Pacific North-West, a new 
>Twisted release candidate!
>
>In this release, there is:
>
>- twisted.web.client.HostnameCachingHTTPSPolicy was added as a new 
>contextFactory option. This reduces the performance overhead for making
>
>many TLS connections to the same host.
>- twisted.conch.ssh.keys can now read private keys in the new 
>"openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default
>
>in OpenSSH 7.8.
>- The sample code in the "Twisted Web In 60 Seconds" tutorial runs on 
>Python 3.
>- DeferredLock and DeferredSemaphore can be used as asynchronous
>context 
>managers on Python 3.5+.
>- twisted.internet.ssl.CertificateOptions now uses 32 random bytes 
>instead of an MD5 hash for the ssl session identifier context.
>- twisted.python.failure.Failure.getTracebackObject now returns 
>traceback objects whose frames can be passed into traceback.print_stack
>
>for better debugging of where the exception came from.
>- Much more! 20+ tickets closed overall.
>
>You can get the tarball and the NEWS file at 
>https://twistedmatrix.com/Releases/rc/19.2.0rc1/ , or you can try it
>out 
>from PyPI:
>
>     python -m pip install Twisted==19.2.0rc1
>
>Please test it, and let me know how your applications fare, good or
>bad! 
>If nothing comes up, 19.2 will release in a week.
>
>Twisted regards,
>
>Amber Brown (hawkowl)
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190304/6b82963d/attachment.html>

From hawkowl at atleastfornow.net  Mon Mar  4 16:14:08 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Mon, 4 Mar 2019 15:14:08 -0800
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate
 Announcement
In-Reply-To: <9CFF17CE-5D53-4453-B429-B134E36FAC25@freecog.net>
References: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
 <9CFF17CE-5D53-4453-B429-B134E36FAC25@freecog.net>
Message-ID: <CAMxb2iv8nzi0sUFHLHYA6ZxDrdyLP3RxVADuRFUTLH+h+Zbgrg@mail.gmail.com>

Hi Tom,

Thanks for letting me know.

I propose we update this dependency and do an rc2, would anyone have an
objection to that?

- Amber

On Mon., 4 Mar. 2019, 15:12 Tom Most, <twm at freecog.net> wrote:

> Hi Amber,
>
> I wanted to make sure you've seen this:
> https://twistedmatrix.com/trac/ticket/9592
>
> Twisted now references a symbol not present in its minimal crypography
> requirement.
>
> ---Tom
>
>
> On February 24, 2019 11:19:28 AM PST, Amber Brown <
> hawkowl at atleastfornow.net> wrote:
>>
>> Hello from PyCascades! Straight from the Pacific North-West, a new
>> Twisted release candidate!
>>
>> In this release, there is:
>>
>> - twisted.web.client.HostnameCachingHTTPSPolicy was added as a new
>> contextFactory option. This reduces the performance overhead for making
>> many TLS connections to the same host.
>> - twisted.conch.ssh.keys can now read private keys in the new
>> "openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default
>> in OpenSSH 7.8.
>> - The sample code in the "Twisted Web In 60 Seconds" tutorial runs on
>> Python 3.
>> - DeferredLock and DeferredSemaphore can be used as asynchronous context
>> managers on Python 3.5+.
>> - twisted.internet.ssl.CertificateOptions now uses 32 random bytes
>> instead of an MD5 hash for the ssl session identifier context.
>> - twisted.python.failure.Failure.getTracebackObject now returns
>> traceback objects whose frames can be passed into traceback.print_stack
>> for better debugging of where the exception came from.
>> - Much more! 20+ tickets closed overall.
>>
>> You can get the tarball and the NEWS file at
>> https://twistedmatrix.com/Releases/rc/19.2.0rc1/ , or you can try it out
>> from PyPI:
>>
>>      python -m pip install Twisted==19.2.0rc1
>>
>> Please test it, and let me know how your applications fare, good or bad!
>> If nothing comes up, 19.2 will release in a week.
>>
>> Twisted regards,
>>
>> Amber Brown (hawkowl)
>>
>> ------------------------------
>>
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190304/bf885b5e/attachment.html>

From glyph at twistedmatrix.com  Mon Mar  4 22:03:52 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Mar 2019 21:03:52 -0800
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate
 Announcement
In-Reply-To: <CAMxb2iv8nzi0sUFHLHYA6ZxDrdyLP3RxVADuRFUTLH+h+Zbgrg@mail.gmail.com>
References: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
 <9CFF17CE-5D53-4453-B429-B134E36FAC25@freecog.net>
 <CAMxb2iv8nzi0sUFHLHYA6ZxDrdyLP3RxVADuRFUTLH+h+Zbgrg@mail.gmail.com>
Message-ID: <49638820-4B78-44FB-8010-415A264E0ABC@twistedmatrix.com>

Let's do it.

> On Mar 4, 2019, at 3:14 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi Tom,
> 
> Thanks for letting me know. 
> 
> I propose we update this dependency and do an rc2, would anyone have an objection to that?
> 
> - Amber
> 
> On Mon., 4 Mar. 2019, 15:12 Tom Most, <twm at freecog.net <mailto:twm at freecog.net>> wrote:
> Hi Amber,
> 
> I wanted to make sure you've seen this: https://twistedmatrix.com/trac/ticket/9592 <https://twistedmatrix.com/trac/ticket/9592>
> 
> Twisted now references a symbol not present in its minimal crypography requirement.
> 
> ---Tom
> 
> 
> On February 24, 2019 11:19:28 AM PST, Amber Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> Hello from PyCascades! Straight from the Pacific North-West, a new 
> Twisted release candidate!
> 
> In this release, there is:
> 
> - twisted.web.client.HostnameCachingHTTPSPolicy was added as a new 
> contextFactory option. This reduces the performance overhead for making 
> many TLS connections to the same host.
> - twisted.conch.ssh.keys can now read private keys in the new 
> "openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default 
> in OpenSSH 7.8.
> - The sample code in the "Twisted Web In 60 Seconds" tutorial runs on 
> Python 3.
> - DeferredLock and DeferredSemaphore can be used as asynchronous context 
> managers on Python 3.5+.
> - twisted.internet.ssl.CertificateOptions now uses 32 random bytes 
> instead of an MD5 hash for the ssl session identifier context.
> - twisted.python.failure.Failure.getTracebackObject now returns 
> traceback objects whose frames can be passed into traceback.print_stack 
> for better debugging of where the exception came from.
> - Much more! 20+ tickets closed overall.
> 
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/19.2.0rc1 <https://twistedmatrix.com/Releases/rc/19.2.0rc1>/ , or you can try it out 
> from PyPI:
> 
>      python -m pip install Twisted==19.2.0rc1
> 
> Please test it, and let me know how your applications fare, good or bad! 
> If nothing comes up, 19.2 will release in a week.
> 
> Twisted regards,
> 
> Amber Brown (hawkowl)
> 
> 
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190304/199d048f/attachment-0001.html>

From twm at freecog.net  Wed Mar  6 00:24:47 2019
From: twm at freecog.net (Tom Most)
Date: Wed, 06 Mar 2019 02:24:47 -0500
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate
 Announcement
In-Reply-To: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
References: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
Message-ID: <2a25245d-78a9-4323-9ef0-0dc8610f6b61@www.fastmail.com>

Another note:

> twisted.web.client.Request and twisted.web.client.HTTPClient were both vulnerable to header injection attacks. They now replace linear whitespace ('r', 'n', and 'rn') with a single space. (#9421)

Headers now assumes the value is a list of string (or bytes). It used to accept a list of arbitrary values. When using the twisted.web resource model (the IRequest.setHeader API) the value would be coerced.

This change actually broke some of my tests, though not any production code. I was passing a list where a scalar string was required (this, precisely: https://github.com/twisted/treq/pull/237). The result was a response with a header like:

    Foo: ['value']

That's not a useful feature in this case so I am happy to have caught the bug but it does seem like there may be real-world code this breaks. For example, request.setHeader('Retry-After', 10) would produce a valid header.

(Also the release note seems to be missing some backslashes in the bit I quoted.)

---Tom


From wiml at hhhh.org  Thu Mar  7 18:42:56 2019
From: wiml at hhhh.org (Wim Lewis)
Date: Thu, 7 Mar 2019 17:42:56 -0800
Subject: [Twisted-Python] Are t.w.s.Requests's prepath/postpath part of the
 IRequest interface?
Message-ID: <20190308014256.GA11809@kosmos.hhhh.org>

I was just working on the documentation to fix Trac bug #5533, but I 
have a question about intent. Right now, prepath and postpath are 
undocumented; as best as I can tell, though, they are intended to be 
public. Question is, are they part of the IRequest interface, or only of 
the Request implementation?

(There aren't any other implementations of IRequest in Twisted, so I 
suppose it's a little bit academic.)

It seems to me that they should be on IRequest, since IRequest already 
has methods like prePathURL() which depend on the information in 
prepath/postpath. Leaving these attributes off of IRequest wouldn't 
provide any more flexibility to implementers of the interface, and 
postpath in particular is very useful to people writing render methods.

 <https://twistedmatrix.com/trac/ticket/5533>


From trac at twistedmatrix.com  Sun Mar 10 00:05:19 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Mar 2019 07:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1552201519.35.4015975272680201973@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190310/e660ffb3/attachment.html>

From glyph at twistedmatrix.com  Sun Mar 10 21:06:12 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 10 Mar 2019 20:06:12 -0700
Subject: [Twisted-Python] Are t.w.s.Requests's prepath/postpath part of
 the IRequest interface?
In-Reply-To: <20190308014256.GA11809@kosmos.hhhh.org>
References: <20190308014256.GA11809@kosmos.hhhh.org>
Message-ID: <C9038986-2A58-4A06-8F77-49323EBB287B@twistedmatrix.com>


> On Mar 7, 2019, at 5:42 PM, Wim Lewis <wiml at hhhh.org> wrote:
> 
> I was just working on the documentation to fix Trac bug #5533, but I 
> have a question about intent. Right now, prepath and postpath are 
> undocumented; as best as I can tell, though, they are intended to be 
> public. Question is, are they part of the IRequest interface, or only of 
> the Request implementation?

I think that this is a bit of a special case, in that *normally* if something isn’t mentioned in an interface you need to add a new interface, it’s an incompatible change to add it, etc; but, functionally, there are a bunch of things you can’t really implement with the current IRequest unless you assume it has .prepath and .postpath attributes.  If someone has an IRequest proxy today it really needs to special case those attributes or it will be unusable for all but the most trivial applications.

So yeah: let’s correct the documentation here, and add them.

> (There aren't any other implementations of IRequest in Twisted, so I 
> suppose it's a little bit academic.)
> 

Also, yeah, that.

> It seems to me that they should be on IRequest, since IRequest already 
> has methods like prePathURL() which depend on the information in 
> prepath/postpath. Leaving these attributes off of IRequest wouldn't 
> provide any more flexibility to implementers of the interface, and 
> postpath in particular is very useful to people writing render methods.
> 
> <https://twistedmatrix.com/trac/ticket/5533>
> 

Agreed on all counts.

From chris at withers.org  Wed Mar 13 05:20:55 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 13 Mar 2019 11:20:55 +0000
Subject: [Twisted-Python] giving a reason when adding a timeout
Message-ID: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>

Hi All,

Unless I'm missing something, Deferred.addTimeout is really unhelpful in 
terms on providing context about *what* timed out.
TimeoutError(<some number>, 'Deferred') just isn't that useful.

How come addTimeout doesn't let you specify a textual reason, or 
otherwise provide some context about the timeout?

Am I missing something obvious here?

Chris


From adi at roiban.ro  Wed Mar 13 06:24:58 2019
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 13 Mar 2019 12:24:58 +0000
Subject: [Twisted-Python] giving a reason when adding a timeout
In-Reply-To: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>
References: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>
Message-ID: <CAFycZ9fm4XDkoHw=_XOEOtgk0dxsJL-kQ20NP47Dztxamgr7rw@mail.gmail.com>

Hi,

On Wed, 13 Mar 2019 at 11:21, Chris Withers <chris at withers.org> wrote:
>
> Hi All,
>
> Unless I'm missing something, Deferred.addTimeout is really unhelpful in
> terms on providing context about *what* timed out.
> TimeoutError(<some number>, 'Deferred') just isn't that useful.
>
> How come addTimeout doesn't let you specify a textual reason, or
> otherwise provide some context about the timeout?
>
> Am I missing something obvious here?

I don't know what kind of context do you need :)

You can add your own errback and add your extra error handling there.

There is also onTimeoutCancel argument.

If there is anything missing from the API, feel free to send a pull
request in GitHub.

I guess that it was implemented in this way as the current
implementation serves the purpose for the people who have added the
support for timeout.

Regards,
Adi



> Chris
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Adi Roiban


From chris at withers.org  Wed Mar 13 10:07:33 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 13 Mar 2019 16:07:33 +0000
Subject: [Twisted-Python] giving a reason when adding a timeout
In-Reply-To: <CAFycZ9fm4XDkoHw=_XOEOtgk0dxsJL-kQ20NP47Dztxamgr7rw@mail.gmail.com>
References: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>
 <CAFycZ9fm4XDkoHw=_XOEOtgk0dxsJL-kQ20NP47Dztxamgr7rw@mail.gmail.com>
Message-ID: <7d1cc0bd-4d69-84fb-7298-7414766cd38b@withers.org>

>> Unless I'm missing something, Deferred.addTimeout is really unhelpful in
>> terms on providing context about *what* timed out.
>> TimeoutError(<some number>, 'Deferred') just isn't that useful.
>>
>> How come addTimeout doesn't let you specify a textual reason, or
>> otherwise provide some context about the timeout?
>>
>> Am I missing something obvious here?
> 
> I don't know what kind of context do you need :)

foo.addTimeout(myTimeout, reactor, message='never heard back')

> You can add your own errback and add your extra error handling there.

What's the must succinct way to get the above by adding an errback?

> There is also onTimeoutCancel argument.

Pretty clunky to write a whole function for either this or the errback 
just to change the useless 'Deferred' string in the current 
implementation with something useful.

> If there is anything missing from the API, feel free to send a pull
> request in GitHub.

What's the likely turn around time from me submitting a PR to when it 
ends up in a released version of Twisted that I can use?

Chris


From adi at roiban.ro  Wed Mar 13 17:36:38 2019
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 13 Mar 2019 23:36:38 +0000
Subject: [Twisted-Python] giving a reason when adding a timeout
In-Reply-To: <7d1cc0bd-4d69-84fb-7298-7414766cd38b@withers.org>
References: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>
 <CAFycZ9fm4XDkoHw=_XOEOtgk0dxsJL-kQ20NP47Dztxamgr7rw@mail.gmail.com>
 <7d1cc0bd-4d69-84fb-7298-7414766cd38b@withers.org>
Message-ID: <CAFycZ9ckLhn_xd+VQxku0POn_0d0C+yxCDvjEFYmunQ5Dhvk=w@mail.gmail.com>

On Wed, 13 Mar 2019 at 16:07, Chris Withers <chris at withers.org> wrote:
>
> >> Unless I'm missing something, Deferred.addTimeout is really unhelpful in
> >> terms on providing context about *what* timed out.
> >> TimeoutError(<some number>, 'Deferred') just isn't that useful.
> >>
> >> How come addTimeout doesn't let you specify a textual reason, or
> >> otherwise provide some context about the timeout?
> >>
> >> Am I missing something obvious here?
> >
> > I don't know what kind of context do you need :)
>
> foo.addTimeout(myTimeout, reactor, message='never heard back')
>
> > You can add your own errback and add your extra error handling there.
>
> What's the must succinct way to get the above by adding an errback?
>

That is subjective :)
You can try something like this.

def eb_timeoutLog(failure, message):
    failure.trap(TimeoutError)
    print(message)

deferred = someJob()
deferred.addTimeout(10, reactor)
deferred.addErrback(eb_timeoutLog, message='never heard back')

or like this

def eb_timeoutLog(failure, message):
    failure.trap(TimeoutError)
    print(message)

def add_timeout(deferred, timeout, message):
    deferred.addTimeout(10, reactor)
    deferred.addErrback(eb_timeoutLog, message)

deferred = someJob()
add_timeout(deferred, message='never heard back')


> > There is also onTimeoutCancel argument.
>
> Pretty clunky to write a whole function for either this or the errback
> just to change the useless 'Deferred' string in the current
> implementation with something useful.

For production code I add errbacks anyway.
The errback catches various error conditions and does more than just
printing a text.
I am not missing anything here :)

> > If there is anything missing from the API, feel free to send a pull
> > request in GitHub.
>
> What's the likely turn around time from me submitting a PR to when it
> ends up in a released version of Twisted that I can use?

I don't you the answer to that question.

If this is something that you want to be improved, my suggestion is to
give it a try.

The whole Twisted was created by people who had an issue and were
willing to effort required to share the solution with the rest of the
world :)

> Chris



-- 
Adi Roiban


From trac at twistedmatrix.com  Sun Mar 17 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Mar 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1552802718.26.564061144324231146@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190317/2542230c/attachment.html>

From wiml at hhhh.org  Tue Mar 19 01:13:12 2019
From: wiml at hhhh.org (Wim Lewis)
Date: Tue, 19 Mar 2019 00:13:12 -0700
Subject: [Twisted-Python] Any Windows users/reviewers around?
Message-ID: <20190319071312.GA1833@kosmos.hhhh.org>

There are a couple of Windows-specific PRs that I think could use a 
review and merge. I don't have access to Windows or really know much 
about it, or I'd do it.

The one I think is most pressing is Trac 9446 / PR 1025, which is a data 
corruption bug when using the IOCP reactor:
   https://twistedmatrix.com/trac/ticket/9446
   https://github.com/twisted/twisted/pull/1025
which may be a duplicate of:
   https://twistedmatrix.com/trac/ticket/3525

There are a few others in the review queue <https://twistedmatrix.com/trac/report/25>.


From itamar at itamarst.org  Thu Mar 21 09:27:35 2019
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 21 Mar 2019 11:27:35 -0400
Subject: [Twisted-Python] =?utf-8?q?ANN=3A_Eliot_1=2E7=2C_the_causal_logg?=
 =?utf-8?q?ing_library=2C_now_with_inlineCallbacks_support?=
Message-ID: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>

Python and Twisted's built-in `logging` output a stream of factoids: they’re interesting, but you can’t really tell what’s going on.

 * Why is your application slow?
 * What caused this code path to be chosen?
 * Why did this error happen?
Standard logging can’t answer these questions.

But with a better model you could understand what and why things happened in your application. You could pinpoint performance bottlenecks, you could understand what happened when, who called what.

That is what Eliot does. `Eliot` is a Python logging system that outputs causal chains of *actions*: actions can spawn other actions, and eventually they either *succeed or fail*. The resulting logs tell you the story of what your software did: what happened, and what caused it.


Eliot has had good Twisted support from the start, but the latest release also supports inlineCallbacks, thanks to Jean-Paul Calderone.

You can learn more about Eliot at https://eliot.readthedocs.io/en/stable/

-- 
Itamar Turner-Trauring
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190321/0fc9efd7/attachment.html>

From chris at withers.org  Fri Mar 22 01:01:17 2019
From: chris at withers.org (Chris Withers)
Date: Fri, 22 Mar 2019 07:01:17 +0000
Subject: [Twisted-Python] ANN: Eliot 1.7, the causal logging library,
 now with inlineCallbacks support
In-Reply-To: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
Message-ID: <6f1ecf70-0478-ec33-a0da-81f90bfd0621@withers.org>

Hey Stranger, long time no speak :-)

On 21/03/2019 15:27, Itamar Turner-Trauring wrote:
> Python and Twisted's built-in |logging| output a stream of factoids: 
> they’re interesting, but you can’t really tell what’s going on.
> 
>   * Why is your application slow?
>   * What caused this code path to be chosen?
>   * Why did this error happen?
> 
> Standard logging can’t answer these questions.
> 
> But with a better model you could understand what and why things 
> happened in your application. You could pinpoint performance 
> bottlenecks, you could understand what happened when, who called what.
> 
> That is what Eliot does. |Eliot| is a Python logging system that outputs 
> causal chains of *actions*: actions can spawn other actions, and 
> eventually they either *succeed or fail*. The resulting logs tell you 
> the story of what your software did: what happened, and what caused it.

Have you looked at tools like https://www.jaegertracing.io/?
Feels like quite a similar approach to Eliot, and it's be fantastic if 
Eliot could provide contexts to Jaeger for Twisted applications!

cheers,

Chris


From itamar at itamarst.org  Fri Mar 22 07:34:53 2019
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 22 Mar 2019 09:34:53 -0400
Subject: [Twisted-Python] 
 =?utf-8?q?ANN=3A_Eliot_1=2E7=2C_the_causal_logg?=
 =?utf-8?q?ing_library=2C_now_with_inlineCallbacks_support?=
In-Reply-To: <6f1ecf70-0478-ec33-a0da-81f90bfd0621@withers.org>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
 <6f1ecf70-0478-ec33-a0da-81f90bfd0621@withers.org>
Message-ID: <69f6a71e-9e65-42ec-8738-008d0b1f1285@www.fastmail.com>

Hi!

On Fri, Mar 22, 2019, at 3:01 AM, Chris Withers wrote:

> Have you looked at tools like https://www.jaegertracing.io/?
> Feels like quite a similar approach to Eliot, and it's be fantastic if 
> Eliot could provide contexts to Jaeger for Twisted applications!

There are some similarities, yes. Eliot was in part inspired by a tool called Frost that was created before—and was similar to—Dapper. And Dapper inspired a whole generation of tracing systems.

However, these tracing systems are mostly about large scale distributed systems with lots of different services, so from what I've seen their operational requirements tend to be more heavyweight. And they often seem less interested in tracing within a program. Eliot is very Python-focused, and about smaller scale systems (and e.g. very useful for scientific computing, which Jaeger and similar systems likely have no interest in).

I have vaguely considered hooking up Eliot to OpenTracing so they can interoperate (https://github.com/itamarst/eliot/issues/361).

Easiest thing if you want to use Jaeger might be extending Jaeger's Python library to support Twisted, e.g. borrow DeferredContext API design from Eliot. But it's possible Eliot could go in the other direction and feed into Jaeger (I'm not sure whether OpenTracing spec provides for compatibility on wire level, or just language-level API).

-Itamar

(I might, by the way, have availability for related consulting at some point.)


From chris at cmsconstruct.com  Fri Mar 22 11:08:19 2019
From: chris at cmsconstruct.com (Chris Satterthwaite)
Date: Fri, 22 Mar 2019 12:08:19 -0500
Subject: [Twisted-Python] stop/start client connections with loseConnection
 in ReconnectingClientFactory
Message-ID: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>

Hello community,

 

First of all - thanks for an awesome platform!  I'm brand new to this
community, but have been using Twisted a couple years.

 

Reason for posting:

I've hit a condition with ReconnectingClientFactory that I'm not sure is per
design.  I have a work around right now, but need your perspective.  Seems
like there should be a better/right way to do this.

 

Attempted design:

I'd like to have long running TCP clients (forever until stopped), with a
long running TCP server.  When a long running client hits a problem with a
dependency (database is down, kafka bus unavailable, external API not
responding, etc), I want the client to go offline for a while and then come
back online. an automated, self-recovery type action.  Since it's not ok to
start/stop/restart the Twisted Reactor, I am letting the client finish
whatever it can do, disconnect from the service, destruct the dependencies,
wait for a period of time, and then attempt a clean re-initialization of
those dependencies along with reconnecting to the Twisted Server.

 

Problem case:

I'm using the ReconnectingClientFactory in my client.  When the client hits
a problem, it calls transport.loseConnection().  But whenever the client
calls this, after the disconnect - it does not reconnect; stopFactory is
called and everything exits. 

 

Work around:

I noticed some Twisted source code that works off factory.numPorts.  If
numPorts is 1 and the client loses the connection, it goes to 0 and calls
the cleanup.  So I conditionally increase this number right before
intentionally disconnecting, and then reset that after reconnecting.  This
solves the problem, but it's a hack.  

 

I'll attach the test scripts to this post (if attachments are allowed), but
the main code is with these functions in the factory:

 

                def clientConnectionLost(self, connector, reason):

                                print('  factory clientConnectionLost:
reason: {}'.format(reason))

                                # if self.disconnectedOnPurpose:

                                #             ## Hack to keep reactor alive

                                #             print('  factory
clientConnectionLost: increasing numPorts')

                                #             self.numPorts += 1

                                #             self.numPortsChanged = True

                                #             self.disconnectedOnPurpose =
False

                                print('  ... simulate client going idle
before attempting restart...')

                                time.sleep(5)

 
ReconnectingClientFactory.clientConnectionLost(self, connector, reason)

                                print('  factory clientConnectionLost:
end.\n')

 

                def clientConnectionMade(self):

                                print('  factory clientConnectionMade:
starting numPorts: {}'.format(self.numPorts))

                                # if self.numPortsChanged :

                                #             ## Resetting from hacked value

                                #             print('  factory
clientConnectionMade: decreasing numPorts')

                                #             self.numPorts -= 1

                                #             self.numPortsChanged = False

                                print('  factory clientConnectionMade:
finished numPorts: {}'.format(self.numPorts))

 

                def cleanup(self):

                                print('factory cleanup: calling
loseConnection')

                                if self.connectedClient is not None:

 
self.connectedClient.transport.loseConnection()

                                                self.disconnectedOnPurpose =
True

 

With the above lines commented out, once the cleanup call does
transport.loseConnection(), the factory stops at the end of
clientConnectionLost. 

 

 

Sample scripts/logs:

I've tried to create short test scripts and corresponding logs (with the
client failing, and then with it restarting when I use the workaround).
I've cut out several thousand lines to get down to something simple for the
example test scripts, but I know the client is still a little long.  Again,
I'm not sure if attachments work on the mailing list, but I'll attempt to
attach the client/server scripts with the corresponding pass/fail logs.

 

Thanks!

 

-Chris

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0001.html>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: testClient.py
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0002.ksh>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: testServer.py
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0003.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client_not_working.log
Type: application/octet-stream
Size: 1280 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0003.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client_working_with_hack.log
Type: application/octet-stream
Size: 2139 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0004.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.log
Type: application/octet-stream
Size: 682 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0005.obj>

From chris at withers.org  Fri Mar 22 12:54:24 2019
From: chris at withers.org (Chris Withers)
Date: Fri, 22 Mar 2019 18:54:24 +0000
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
Message-ID: <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>

On 22/03/2019 17:08, Chris Satterthwaite wrote:
>                  def clientConnectionLost(self, connector, reason):

Without the rest of your class, it's difficult to see some of the 
potential problems... Could you put it on a gist somewhere?

> 
>                                  print('  factory clientConnectionLost: 
> reason: {}'.format(reason))
> 
>                                  # if self.disconnectedOnPurpose:
> 
>                                  #             ## Hack to keep reactor alive
> 
>                                  #             print('  factory 
> clientConnectionLost: increasing numPorts')
> 
>                                  #             self.numPorts += 1
> 
>                                  #             self.numPortsChanged = True
> 
>                                  #             
> self.disconnectedOnPurpose = False
> 
>                                  print('  ... simulate client going idle 
> before attempting restart...')
> 
>                                  time.sleep(5)

This will block the reactor, so don't think you should be doing it...

cheers,

Chris


From sean.dizazzo at gmail.com  Fri Mar 22 14:08:35 2019
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Fri, 22 Mar 2019 13:08:35 -0700
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
Message-ID: <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>

You may want to look at twisted.application.internet.ClientService
<https://twistedmatrix.com/documents/18.7.0/api/twisted.application.internet.ClientService.html>.
It uses the new endpoints instead of the `connectTCP()` stuff.  Not sure if
it applies in your situation, but it has all of the retry logic built in,
so that may make it easier to work with.


On Fri, Mar 22, 2019 at 10:08 AM Chris Satterthwaite <chris at cmsconstruct.com>
wrote:

> Hello community,
>
>
>
> First of all - thanks for an awesome platform!  I’m brand new to this
> community, but have been using Twisted a couple years.
>
>
>
> *Reason for posting:*
>
> I’ve hit a condition with ReconnectingClientFactory that I’m not sure is
> per design.  I have a work around right now, but need your perspective.
> Seems like there should be a better/right way to do this.
>
>
>
> *Attempted design:*
>
> I’d like to have long running TCP clients (forever until stopped), with a
> long running TCP server.  When a long running client hits a problem with a
> dependency (database is down, kafka bus unavailable, external API not
> responding, etc), I want the client to go offline for a while and then come
> back online… an automated, self-recovery type action.  Since it’s not ok to
> start/stop/restart the Twisted Reactor, I am letting the client finish
> whatever it can do, disconnect from the service, destruct the dependencies,
> wait for a period of time, and then attempt a clean re-initialization of
> those dependencies along with reconnecting to the Twisted Server.
>
>
>
> *Problem case:*
>
> I’m using the ReconnectingClientFactory in my client.  When the client
> hits a problem, it calls transport.loseConnection().  But whenever the
> client calls this, after the disconnect – it does not reconnect;
> stopFactory is called and everything exits.
>
>
>
> *Work around:*
>
> I noticed some Twisted source code that works off factory.numPorts.  If
> numPorts is 1 and the client loses the connection, it goes to 0 and calls
> the cleanup.  So I conditionally increase this number right before
> intentionally disconnecting, and then reset that after reconnecting.  This
> solves the problem, but it’s a hack.
>
>
>
> I’ll attach the test scripts to this post (if attachments are allowed),
> but the main code is with these functions in the factory:
>
>
>
>                 def clientConnectionLost(self, connector, reason):
>
>                                 print('  factory clientConnectionLost:
> reason: {}'.format(reason))
>
>                                 # if self.disconnectedOnPurpose:
>
>                                 #             ## Hack to keep reactor alive
>
>                                 #             print('  factory
> clientConnectionLost: increasing numPorts')
>
>                                 #             self.numPorts += 1
>
>                                 #             self.numPortsChanged = True
>
>                                 #             self.disconnectedOnPurpose =
> False
>
>                                 print('  ... simulate client going idle
> before attempting restart...')
>
>                                 time.sleep(5)
>
>
> ReconnectingClientFactory.clientConnectionLost(self, connector, reason)
>
>                                 print('  factory clientConnectionLost:
> end.\n')
>
>
>
>                 def clientConnectionMade(self):
>
>                                 print('  factory clientConnectionMade:
> starting numPorts: {}'.format(self.numPorts))
>
>                                 # if self.numPortsChanged :
>
>                                 #             ## Resetting from hacked
> value
>
>                                 #             print('  factory
> clientConnectionMade: decreasing numPorts')
>
>                                 #             self.numPorts -= 1
>
>                                 #             self.numPortsChanged = False
>
>                                 print('  factory clientConnectionMade:
> finished numPorts: {}'.format(self.numPorts))
>
>
>
>                 def cleanup(self):
>
>                                 print('factory cleanup: calling
> loseConnection')
>
>                                 if self.connectedClient is not None:
>
>
> self.connectedClient.transport.loseConnection()
>
>                                                 self.disconnectedOnPurpose
> = True
>
>
>
> With the above lines commented out, once the cleanup call does
> transport.loseConnection(), the factory stops at the end of
> clientConnectionLost.
>
>
>
>
>
> *Sample scripts/logs:*
>
> I’ve tried to create short test scripts and corresponding logs (with the
> client failing, and then with it restarting when I use the workaround).
> I’ve cut out several thousand lines to get down to something simple for the
> example test scripts, but I know the client is still a little long.  Again,
> I’m not sure if attachments work on the mailing list, but I’ll attempt to
> attach the client/server scripts with the corresponding pass/fail logs.
>
>
>
> Thanks!
>
>
>
> -Chris
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190322/82ffd17c/attachment.html>

From chris at cmsconstruct.com  Fri Mar 22 17:26:24 2019
From: chris at cmsconstruct.com (Chris Satterthwaite)
Date: Fri, 22 Mar 2019 18:26:24 -0500
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>
Message-ID: <000201d4e106$ab0cc060$01264120$@cmsconstruct.com>

Hi Chris,

The files I attached (with the full classes) made it through to my email, but I wondered if they would they go through to everyone.

Here's a gist with the same scripts:
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f

And yep, as you mentioned, a 'sleep' is definitely blocking.  That's not in the production version; I just dropped it in here for the test script to simulate something.

Thanks!
-Chris

-----Original Message-----
From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of Chris Withers
Sent: Friday, March 22, 2019 1:54 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] stop/start client connections with loseConnection in ReconnectingClientFactory

On 22/03/2019 17:08, Chris Satterthwaite wrote:
>                  def clientConnectionLost(self, connector, reason):

Without the rest of your class, it's difficult to see some of the potential problems... Could you put it on a gist somewhere?

> 
>                                  print('  factory clientConnectionLost: 
> reason: {}'.format(reason))
> 
>                                  # if self.disconnectedOnPurpose:
> 
>                                  #             ## Hack to keep reactor 
> alive
> 
>                                  #             print('  factory
> clientConnectionLost: increasing numPorts')
> 
>                                  #             self.numPorts += 1
> 
>                                  #             self.numPortsChanged = 
> True
> 
>                                  #             
> self.disconnectedOnPurpose = False
> 
>                                  print('  ... simulate client going 
> idle before attempting restart...')
> 
>                                  time.sleep(5)

This will block the reactor, so don't think you should be doing it...

cheers,

Chris

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From chris at cmsconstruct.com  Fri Mar 22 17:28:31 2019
From: chris at cmsconstruct.com (Chris Satterthwaite)
Date: Fri, 22 Mar 2019 18:28:31 -0500
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
Message-ID: <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>

Hi Sean,

 

Thanks for the suggestion; I’ll take a look.

 

-Chris

 

 

From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of Sean DiZazzo
Sent: Friday, March 22, 2019 3:09 PM
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] stop/start client connections with loseConnection in ReconnectingClientFactory

 

You may want to look at twisted.application.internet.ClientService <https://twistedmatrix.com/documents/18.7.0/api/twisted.application.internet.ClientService.html> .  It uses the new endpoints instead of the `connectTCP()` stuff.  Not sure if it applies in your situation, but it has all of the retry logic built in, so that may make it easier to work with.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190322/9a6fd0a5/attachment.html>

From dholth at gmail.com  Sat Mar 23 08:21:52 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sat, 23 Mar 2019 10:21:52 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
Message-ID: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>

Hello. Can you help me to learn to debug tls problems in twisted?

I was disappointed that txacme, an automatic way to get certificates for
twisted web, stopped working, so I'm trying to add a responder for the new
challenge type. It sends a special certificate if the CA negotiates acme
using alpn, proving domain control, then you get a certificate.

Seems to work with openssl s_client but letsencrypt says "no application
protocol". Anyone know where that error comes from?

https://github.com/glyph/txsni/pull/26
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/9bf20b62/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 23 15:47:53 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 14:47:53 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
Message-ID: <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>

On Mar 23, 2019, at 7:21 AM, Daniel Holth <dholth at gmail.com> wrote:
> 
> Hello. Can you help me to learn to debug tls problems in twisted?

Hi Daniel!  Thanks so much for trying to improve this aspect of the Twisted ecosystem.

> I was disappointed that txacme, an automatic way to get certificates for twisted web, stopped working, so I'm trying to add a responder for the new challenge type.

This situation is definitely bad; as JP tersely put it on https://github.com/twisted/txacme/issues/148, "The published documentation makes it appear as though the server endpoint works though it has apparently been broken for about a year".

But to prevent onlookers from thinking the situation is even worse than it is, please allow me to clarify:

txacme still "works" in the sense that it supports the http-01 challenge (which is still supported for the forseeable future, AFAIK), and its challenge/response implementation also powers https://pypi.org/project/lancer/ <https://pypi.org/project/lancer/>, which uses the dns-01 challenge.  However, its endpoints (and particularly its string endpoint plugin) doesn't support this challenge directly.

The thing that's broken is sni-01, which was disabled globally by Let's Encrypt for security reasons: https://www.zdnet.com/article/lets-encrypt-disables-tls-sni-01-validation/ <https://www.zdnet.com/article/lets-encrypt-disables-tls-sni-01-validation/>

One approach to fixing this is to implement a string endpoint syntax that listens on port 80 and supports HTTP-01 rather than trying to make TLS support TLS-ALPN-01.

See discussion here: https://github.com/twisted/txacme/issues/129 <https://github.com/twisted/txacme/issues/129>.

Brian Warner already has a branch here: https://github.com/warner/txacme/tree/129-http01-endpoint <https://github.com/warner/txacme/tree/129-http01-endpoint> but has not made a PR yet.  Perhaps you could resurrect this code, polish anything that needs polishing, and get it integrated and released :).

> It sends a special certificate if the CA negotiates acme using alpn, proving domain control, then you get a certificate.

> Seems to work with openssl s_client but letsencrypt says "no application protocol". Anyone know where that error comes from?
> 
> https://github.com/glyph/txsni/pull/26 <https://github.com/glyph/txsni/pull/26>
I suspect one thing you might be running into is this: https://github.com/pyca/pyopenssl/issues/769 <https://github.com/pyca/pyopenssl/issues/769>, i.e. the issue that caused Certbot to revert their own ALPN support: https://github.com/certbot/certbot/pull/6100 <https://github.com/certbot/certbot/pull/6100>.  This is an OpenSSL bug and there's not a whole lot Twisted can do about it.  See here where I ran into it myself, for this exact same reason: https://github.com/openssl/openssl/issues/7660#issuecomment-462104869 <https://github.com/openssl/openssl/issues/7660#issuecomment-462104869>

Even if you're not hitting this specific problem, continuing down this road (implementing the ALPN challenge using OpenSSL) is unfortunately a bad idea.

Fundamentally, the ALPN callback in OpenSSL is poorly designed, and optimized for the very specific negotiation process that HTTP/2 requires.  The guidance from people familiar with OpenSSL is - and I know this sounds like a joke, I wish I were kidding here, but no, this is seriously the recommendation - implement your own parser for the ClientHello, extract the ALPN field yourself, then construct an OpenSSL connection object based on what you find there, and hand it the bytes you just parsed.

Given the mechanics of the challenge message (i.e.: it's going to be in the initial clienthello) you could probably cheese it with a regex just to get something working.

I hope this was helpful.  Good luck, and please keep us posted on your efforts!

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/82514dec/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 23 16:03:49 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 15:03:49 -0700
Subject: [Twisted-Python] Any Windows users/reviewers around?
In-Reply-To: <20190319071312.GA1833@kosmos.hhhh.org>
References: <20190319071312.GA1833@kosmos.hhhh.org>
Message-ID: <51E6C94C-1C03-4FE6-AC4C-A8F7FCAC6B8D@twistedmatrix.com>



> On Mar 19, 2019, at 12:13 AM, Wim Lewis <wiml at hhhh.org> wrote:
> 
> There are a couple of Windows-specific PRs that I think could use a 
> review and merge. I don't have access to Windows or really know much 
> about it, or I'd do it.

If you need access to Windows, we do have an MSDN membership that the project can use.  Is this of interest?

> The one I think is most pressing is Trac 9446 / PR 1025, which is a data 
> corruption bug when using the IOCP reactor:
>   https://twistedmatrix.com/trac/ticket/9446 <https://twistedmatrix.com/trac/ticket/9446>  https://github.com/twisted/twisted/pull/1025 <https://github.com/twisted/twisted/pull/1025>

If you wanted to just land this because it seems quite serious and passes CI, I don't think anyone would blame you.  It's languished long enough, and absent any C-level crash bugs, the situation can't possibly be worse than it is now :-).

> which may be a duplicate of:
>   https://twistedmatrix.com/trac/ticket/3525 <https://twistedmatrix.com/trac/ticket/3525>

Thanks for pointing this out.

> There are a few others in the review queue <https://twistedmatrix.com/trac/report/25>.

If there are any Windows users out there who want to be maintainers, please speak up!  We could really use the help.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/3ca64777/attachment.html>

From dholth at gmail.com  Sat Mar 23 16:39:07 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sat, 23 Mar 2019 18:39:07 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
Message-ID: <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>

Wow! Such broken. I was starting to get suspicious of openssl myself.
Poor documentation about the rules on context switching and whether
doing things in a certain order should trigger callbacks.

At least you can get a cert when the ALPN / ACME certificate (and
DEFAULT?) is the only one provided by twisted. If the several attempts
they make came from the same IP address that might be one way to hack
it.

If it gets that bad I'll put the ClientHello regex next to the
regex-based pkcs parser from my rsalette library :)

Fixing the http-01 challenge is a very rational suggestion.

Thanks!

Daniel


From dholth at gmail.com  Sat Mar 23 17:06:29 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sat, 23 Mar 2019 19:06:29 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
Message-ID: <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>

HOLY REGEX BATMAN

class _ConnectionProxy(object):

    def bio_write(self, buf):
        if ACME_TLS_1 in buf:
            self.acme_tls_1 = True
        self.bio_write = self._obj.bio_write
        return self._obj.bio_write(buf)
Now we can choose the acme certificate store in the sni callback and
make letsencrypt happy!


From glyph at twistedmatrix.com  Sat Mar 23 21:58:46 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 20:58:46 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
Message-ID: <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>



> On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
> 
> HOLY REGEX BATMAN
> 
> class _ConnectionProxy(object):
> 
>    def bio_write(self, buf):
>        if ACME_TLS_1 in buf:
>            self.acme_tls_1 = True
>        self.bio_write = self._obj.bio_write
>        return self._obj.bio_write(buf)
> Now we can choose the acme certificate store in the sni callback and
> make letsencrypt happy!

1. Gross
2. Hooray!

-g


From glyph at twistedmatrix.com  Sat Mar 23 21:58:22 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 20:58:22 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
Message-ID: <C92C8294-0C8E-432B-9ED3-10D8ACC2B627@twistedmatrix.com>

> On Mar 23, 2019, at 3:39 PM, Daniel Holth <dholth at gmail.com> wrote:
> 
> Wow! Such broken. I was starting to get suspicious of openssl myself.
> Poor documentation about the rules on context switching and whether
> doing things in a certain order should trigger callbacks.

In fairness, they do realize that this is a bit of a mess, and eventually one hopes there will be something better: https://github.com/openssl/openssl/issues/6109 <https://github.com/openssl/openssl/issues/6109>
> At least you can get a cert when the ALPN / ACME certificate (and
> DEFAULT?) is the only one provided by twisted. If the several attempts
> they make came from the same IP address that might be one way to hack
> it.


What IP addresses does Let’s Encrypt use to validate my web server?

We don’t publish a list of IP addresses we use to validate, because they may change at any time. In the future we may validate from multiple IP addresses at once.

Source: https://letsencrypt.org/docs/faq/#what-ip-addresses-does-let-s-encrypt-use-to-validate-my-web-server <https://letsencrypt.org/docs/faq/#what-ip-addresses-does-let-s-encrypt-use-to-validate-my-web-server>

> If it gets that bad I'll put the ClientHello regex next to the
> regex-based pkcs parser from my rsalette library :)

Oh no :-(.  Don't do RSA in pure python, that's an invitation to timing attacks.

> Fixing the http-01 challenge is a very rational suggestion.

Thanks!  If you could get Warner's patch over the finish line, that would probably be the best, most practical step forward.

> Thanks!
> 
> Daniel
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/6a97821b/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 23 22:17:00 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 21:17:00 -0700
Subject: [Twisted-Python] ANN: Eliot 1.7, the causal logging library,
 now with inlineCallbacks support
In-Reply-To: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
Message-ID: <4E03D7D7-04BF-44F6-93B9-35095DCB4AC4@twistedmatrix.com>


> On Mar 21, 2019, at 8:27 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Python and Twisted's built-in logging output a stream of factoids: they’re interesting, but you can’t really tell what’s going on.
> 
> Why is your application slow?
> What caused this code path to be chosen?
> Why did this error happen?
> Standard logging can’t answer these questions.
> 
> But with a better model you could understand what and why things happened in your application. You could pinpoint performance bottlenecks, you could understand what happened when, who called what.
> 


I should note that if anyone out there is interested in getting involved with contributing to Twisted, but the bugs look big and daunting, finding a module that uses twisted.python.log and updating it to:

1. use twisted.logger
2. format all of its fields with structured information rather than string formatting

would really help with the consumption of Twisted's native log messages by more advanced tools like Eliot, and generally make Twisted better and push it into the future.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/bb7707a4/attachment.html>

From dholth at gmail.com  Sat Mar 23 22:20:53 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sun, 24 Mar 2019 00:20:53 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
Message-ID: <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>

All we have to do is have some kind of per connection certificate store or
flag. If acme is in the first packet and the special certificate exists,
send it. Otherwise send the normal certificate, for a very short window of
possible brokenness. Letsencrypt may or may not require correct alpn
negotiation. Should be simple.

I'm happy running the acme client separately and listing my domain instead
of doing it all on demand inside twisted.


On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:

>
>
> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
> >
> > HOLY REGEX BATMAN
> >
> > class _ConnectionProxy(object):
> >
> >    def bio_write(self, buf):
> >        if ACME_TLS_1 in buf:
> >            self.acme_tls_1 = True
> >        self.bio_write = self._obj.bio_write
> >        return self._obj.bio_write(buf)
> > Now we can choose the acme certificate store in the sni callback and
> > make letsencrypt happy!
>
> 1. Gross
> 2. Hooray!
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/ff338129/attachment-0001.html>

From glyph at twistedmatrix.com  Sat Mar 23 22:30:20 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 21:30:20 -0700
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
Message-ID: <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>

I'd further note that ClientService is generally the new, good way to do things and ReconnectingClientFactory is the old, bad way.  Our hope is to eventually deprecate ReconnectingClientFactory and most of the APIs that it uses, but this is a big project that we have not been able to make much progress on in the last, ahem, decade or so.

-g

> On Mar 22, 2019, at 4:28 PM, Chris Satterthwaite <chris at cmsconstruct.com> wrote:
> 
> Hi Sean,
>  
> Thanks for the suggestion; I’ll take a look.
>  
> -Chris
>  
>  
> From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of Sean DiZazzo
> Sent: Friday, March 22, 2019 3:09 PM
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Subject: Re: [Twisted-Python] stop/start client connections with loseConnection in ReconnectingClientFactory
>  
> You may want to look at twisted.application.internet.ClientService <https://twistedmatrix.com/documents/18.7.0/api/twisted.application.internet.ClientService.html>.  It uses the new endpoints instead of the `connectTCP()` stuff.  Not sure if it applies in your situation, but it has all of the retry logic built in, so that may make it easier to work with.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/1fa75b74/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 23 22:55:04 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 21:55:04 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
Message-ID: <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>

I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.

-g

> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
> 
> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple. 
> 
> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
> 
> 
> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
> > 
> > HOLY REGEX BATMAN
> > 
> > class _ConnectionProxy(object):
> > 
> >    def bio_write(self, buf):
> >        if ACME_TLS_1 in buf:
> >            self.acme_tls_1 = True
> >        self.bio_write = self._obj.bio_write
> >        return self._obj.bio_write(buf)
> > Now we can choose the acme certificate store in the sni callback and
> > make letsencrypt happy!
> 
> 1. Gross
> 2. Hooray!
> 
> -g
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/8c49dcd3/attachment.html>

From trac at twistedmatrix.com  Sun Mar 24 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Mar 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1553407518.07.4432321411124008080@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/ab1e1c38/attachment-0001.html>

From dholth at gmail.com  Sun Mar 24 10:26:59 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sun, 24 Mar 2019 12:26:59 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
Message-ID: <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>

The cleaned up pull request should be really easy to try, with a
dehydrated:(basedir) string port. Go get some certs people!

On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:

> I think ACME_TLS_1 is a sufficiently high-entropy string that the
> likelihood of brokenness from this approach is basically zero.
>
> -g
>
> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
>
> All we have to do is have some kind of per connection certificate store or
> flag. If acme is in the first packet and the special certificate exists,
> send it. Otherwise send the normal certificate, for a very short window of
> possible brokenness. Letsencrypt may or may not require correct alpn
> negotiation. Should be simple.
>
> I'm happy running the acme client separately and listing my domain instead
> of doing it all on demand inside twisted.
>
>
> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>>
>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
>> >
>> > HOLY REGEX BATMAN
>> >
>> > class _ConnectionProxy(object):
>> >
>> >    def bio_write(self, buf):
>> >        if ACME_TLS_1 in buf:
>> >            self.acme_tls_1 = True
>> >        self.bio_write = self._obj.bio_write
>> >        return self._obj.bio_write(buf)
>> > Now we can choose the acme certificate store in the sni callback and
>> > make letsencrypt happy!
>>
>> 1. Gross
>> 2. Hooray!
>>
>> -g
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/84d6e374/attachment.html>

From glyph at twistedmatrix.com  Sun Mar 24 14:32:52 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Mar 2019 13:32:52 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
Message-ID: <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>

Any chance you could include a link to the relevant PR?  Pulling this out of the raging tire-fire of my Github notifications would take an unfortunately non-trivial amount of time - and I imagine that not everyone subscribed might even be on the appropriate repos :).

-g

> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
> 
> The cleaned up pull request should be really easy to try, with a dehydrated:(basedir) string port. Go get some certs people!
> 
> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.
> 
> -g
> 
>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>> 
>> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple. 
>> 
>> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
>> 
>> 
>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>> > 
>> > HOLY REGEX BATMAN
>> > 
>> > class _ConnectionProxy(object):
>> > 
>> >    def bio_write(self, buf):
>> >        if ACME_TLS_1 in buf:
>> >            self.acme_tls_1 = True
>> >        self.bio_write = self._obj.bio_write
>> >        return self._obj.bio_write(buf)
>> > Now we can choose the acme certificate store in the sni callback and
>> > make letsencrypt happy!
>> 
>> 1. Gross
>> 2. Hooray!
>> 
>> -g
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/cb965498/attachment.html>

From dholth at gmail.com  Sun Mar 24 14:59:38 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sun, 24 Mar 2019 16:59:38 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
Message-ID: <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>

Pull request for txsni acme https://github.com/glyph/txsni/pull/28

On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com> wrote:

> Any chance you could include a link to the relevant PR?  Pulling this out
> of the raging tire-fire of my Github notifications would take an
> unfortunately non-trivial amount of time - and I imagine that not everyone
> subscribed might even be on the appropriate repos :).
>
> -g
>
> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
>
> The cleaned up pull request should be really easy to try, with a
> dehydrated:(basedir) string port. Go get some certs people!
>
> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:
>
>> I think ACME_TLS_1 is a sufficiently high-entropy string that the
>> likelihood of brokenness from this approach is basically zero.
>>
>> -g
>>
>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
>>
>> All we have to do is have some kind of per connection certificate store
>> or flag. If acme is in the first packet and the special certificate exists,
>> send it. Otherwise send the normal certificate, for a very short window of
>> possible brokenness. Letsencrypt may or may not require correct alpn
>> negotiation. Should be simple.
>>
>> I'm happy running the acme client separately and listing my domain
>> instead of doing it all on demand inside twisted.
>>
>>
>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
>>
>>>
>>>
>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
>>> >
>>> > HOLY REGEX BATMAN
>>> >
>>> > class _ConnectionProxy(object):
>>> >
>>> >    def bio_write(self, buf):
>>> >        if ACME_TLS_1 in buf:
>>> >            self.acme_tls_1 = True
>>> >        self.bio_write = self._obj.bio_write
>>> >        return self._obj.bio_write(buf)
>>> > Now we can choose the acme certificate store in the sni callback and
>>> > make letsencrypt happy!
>>>
>>> 1. Gross
>>> 2. Hooray!
>>>
>>> -g
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/1a7410f0/attachment.html>

From glyph at twistedmatrix.com  Sun Mar 24 15:38:33 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Mar 2019 14:38:33 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
 <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
Message-ID: <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>

Thanks! I put some review comments on it.  I would encourage others with interest in this area to have a look; I might not get back to this for a couple of weeks, but I'd be happy to give people collaborator permissions on the repo if they'd like to help out.

(Frankly it's probably time that this project grew up and moved over to the Twisted org anyway, given that txacme depends on it...)

-g

> On Mar 24, 2019, at 1:59 PM, Daniel Holth <dholth at gmail.com> wrote:
> 
> Pull request for txsni acme https://github.com/glyph/txsni/pull/28 <https://github.com/glyph/txsni/pull/28>
> On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Any chance you could include a link to the relevant PR?  Pulling this out of the raging tire-fire of my Github notifications would take an unfortunately non-trivial amount of time - and I imagine that not everyone subscribed might even be on the appropriate repos :).
> 
> -g
> 
>> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>> 
>> The cleaned up pull request should be really easy to try, with a dehydrated:(basedir) string port. Go get some certs people!
>> 
>> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.
>> 
>> -g
>> 
>>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>>> 
>>> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple. 
>>> 
>>> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
>>> 
>>> 
>>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>>> 
>>> 
>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>>> > 
>>> > HOLY REGEX BATMAN
>>> > 
>>> > class _ConnectionProxy(object):
>>> > 
>>> >    def bio_write(self, buf):
>>> >        if ACME_TLS_1 in buf:
>>> >            self.acme_tls_1 = True
>>> >        self.bio_write = self._obj.bio_write
>>> >        return self._obj.bio_write(buf)
>>> > Now we can choose the acme certificate store in the sni callback and
>>> > make letsencrypt happy!
>>> 
>>> 1. Gross
>>> 2. Hooray!
>>> 
>>> -g
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/bc6f62e8/attachment-0001.html>

From glyph at twistedmatrix.com  Sun Mar 24 16:40:24 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Mar 2019 15:40:24 -0700
Subject: [Twisted-Python] optimizing for engagement
Message-ID: <824DD4E6-62A4-4836-80DB-B24D6514332F@twistedmatrix.com>

Hello Twistors,

It's been a good weekend for the Twisted ecosystem!  Despite spending rather more time on email than is usual for a weekend, I've been enjoying the mailing list activity so thanks to everyone for your contributions.

We had a good chat on IRC about some potential ways to increase contribution to the project.  (I'll let the authors of these proposals raise them themselves, if they want to bring it to the broader forum of this list.)  These proposals largely focused on structural issues with the way the project is maintained or the way the code is organized.

However, we have relatively few people who do much in the way of social organizing of Twisted and its constellation of ancillary projects.  We have ad-hoc presences at a few regional conferences, a sometimes presence at the PyCon sprints (which, unfortunately, I don't think I'll be able to make this year).

One thing I'd like to propose I think would really help us get more engagement with the project and the ecosystem, possibly in addition to and in concert with some of the aforementioned structural/technical changes, is some dedicated, intentional social organization, particularly of our distributed online community.

Hackathons and sprints (which have probably provoked the majority of Twisted's development over the years) are not a lot more than "let's get together and do X at Y time".  They can be organized online as well as in person.  Still, a successful sprint requires someone to thoughtfully select variables X and Y and then effectively communicate about the event, both to people already involved in the project and also to potential audiences of newcomers.  This involves finding students looking for projects to learn on, and finding users who might want get bugs that they have encountered fixed; in other words, "outreach".

It also involves some amount of celebrating accomplishments that come out of these events, to build enthusiasm for the next one.  (If you've been organizing local events that we're not aware of, it would be great to hear about them!)

So I'd like to encourage anyone who might be wondering what they can do to contribute to the project but find the prospect of debugging IMAP serialization or use-after-free IO completion port debugging to be bewildering, "online sprint organizing" is a potentially very rich seam to mine for potential contributions.

If you are interested in trying to do this but need access to any Twisted resources in support of doing this - the main ones I can think of being our Twitter (https://twitter.com/twistedmatrix <https://twitter.com/twistedmatrix>) or Blogger (https://labs.twistedmatrix.com <https://labs.twistedmatrix.com/>) accounts - just let me know and I'd be happy to provide access.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/123a2f49/attachment.html>

From dholth at gmail.com  Sun Mar 24 19:17:04 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sun, 24 Mar 2019 21:17:04 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
 <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
 <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>
Message-ID: <CAG8k2+7AOUam+Ua0k+AD=dnBMM11UyFo-jhCYBnEy09s9vBadg@mail.gmail.com>

Do move it to twisted. I was surprised it wasn't already there.

On Sun, Mar 24, 2019, 17:39 Glyph <glyph at twistedmatrix.com> wrote:

> Thanks! I put some review comments on it.  I would encourage others with
> interest in this area to have a look; I might not get back to this for a
> couple of weeks, but I'd be happy to give people collaborator permissions
> on the repo if they'd like to help out.
>
> (Frankly it's probably time that this project grew up and moved over to
> the Twisted org anyway, given that txacme depends on it...)
>
> -g
>
> On Mar 24, 2019, at 1:59 PM, Daniel Holth <dholth at gmail.com> wrote:
>
> Pull request for txsni acme https://github.com/glyph/txsni/pull/28
>
> On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com> wrote:
>
>> Any chance you could include a link to the relevant PR?  Pulling this out
>> of the raging tire-fire of my Github notifications would take an
>> unfortunately non-trivial amount of time - and I imagine that not everyone
>> subscribed might even be on the appropriate repos :).
>>
>> -g
>>
>> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
>>
>> The cleaned up pull request should be really easy to try, with a
>> dehydrated:(basedir) string port. Go get some certs people!
>>
>> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:
>>
>>> I think ACME_TLS_1 is a sufficiently high-entropy string that the
>>> likelihood of brokenness from this approach is basically zero.
>>>
>>> -g
>>>
>>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
>>>
>>> All we have to do is have some kind of per connection certificate store
>>> or flag. If acme is in the first packet and the special certificate exists,
>>> send it. Otherwise send the normal certificate, for a very short window of
>>> possible brokenness. Letsencrypt may or may not require correct alpn
>>> negotiation. Should be simple.
>>>
>>> I'm happy running the acme client separately and listing my domain
>>> instead of doing it all on demand inside twisted.
>>>
>>>
>>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
>>>
>>>>
>>>>
>>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
>>>> >
>>>> > HOLY REGEX BATMAN
>>>> >
>>>> > class _ConnectionProxy(object):
>>>> >
>>>> >    def bio_write(self, buf):
>>>> >        if ACME_TLS_1 in buf:
>>>> >            self.acme_tls_1 = True
>>>> >        self.bio_write = self._obj.bio_write
>>>> >        return self._obj.bio_write(buf)
>>>> > Now we can choose the acme certificate store in the sni callback and
>>>> > make letsencrypt happy!
>>>>
>>>> 1. Gross
>>>> 2. Hooray!
>>>>
>>>> -g
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/7d2dff6d/attachment.html>

From hawkowl at atleastfornow.net  Mon Mar 25 04:15:22 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Mon, 25 Mar 2019 21:15:22 +1100
Subject: [Twisted-Python] A Proposal for reducing the burden of developing
 on Twisted by dropping Python 2 support
Message-ID: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>

Hi everyone,

Since the Python 2 EOL date is rapidly approaching, I thought it was 
time we consider dropping Python 2 support.

I personally find that Python 2 compat adds a huge amount of overhead 
when working on and maintaining Twisted, and think that with the current 
maintainer availability, dropping it sooner rather than later would have 
a beneficial effect on how much work we spend on shims/compat, 
complexity, and our ability to ship new features, as well as onboarding 
people who are interested in the project, but have no interest (or 
experience!) in Python 2.7.

It is basically summed up by doing a feature freeze on an agreed-upon 
version of Twisted, that will be the last version released for 2.7. It 
would be abnormal in that it would get security fixes (our current 
policy is to only release them for current versions) and critical 
bugfixes, but would otherwise be frozen.

One of my rationales is that from some analysis of PyPI download 
statistics, the vast majority of Python 2 users are using old versions 
of Twisted, while nearly all our Python 3 users are on the latest 
version. As such, I believe freezing a version that will get security 
updates but no new features would not be a massive loss to those stuck 
on Python 2 for whatever reason.

Twisted's compatibility policy would still apply, ensuring that Python 
2/3 compatible software using Twisted would be able to use the older 
Twisted version on Python 2, and the newer version on Python 3, as you 
would usually expect.

You can find the proposal here, in this handy-dandy Google Doc: 
https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit

Comments are welcome, as well as which timeline seems reasonable.

- Amber


From maarten at treewalker.org  Mon Mar 25 04:55:53 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Mon, 25 Mar 2019 11:55:53 +0100
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <16204375.eClh2f66oM@hyperion>

On Monday, 25 March 2019 11:15:22 CET Amber Brown wrote:

> One of my rationales is that from some analysis of PyPI download
> statistics, the vast majority of Python 2 users are using old versions
> of Twisted, while nearly all our Python 3 users are on the latest
> version. As such, I believe freezing a version that will get security
> updates but no new features would not be a massive loss to those
> stuck on Python 2 for whatever reason.

I think this makes sense: applications that are still gaining new 
features should be on Python 3 by now. For applications on Python 2 the 
main concern would be to keep them running while the world around them 
updates (new OS versions etc).

> Comments are welcome, as well as which timeline seems reasonable.

Python 2.7 support will end early 2020. In my opinion it is unnecessary 
to support Twisted on Python 2.7 for longer than Python 2.7 itself is 
supported. So all of the proposed timelines are generous, in my opinion.

Bye,
		Maarten




From donal.mcmullan at gmail.com  Mon Mar 25 08:11:50 2019
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Mon, 25 Mar 2019 14:11:50 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <CADf-aJFGr8Uwrpm=rWMYg6tiMY3DTU3vxtU+uwHPWvOxO8m41A@mail.gmail.com>

Hi Amber -

Notwithstanding the fact that VFX/Anim will be stuck on PY2 for a few more
years, this all sounds very reasonable. None of the proposed timelines
would cause problems for my team.

Many thanks

DJM

On Mon, 25 Mar 2019 at 10:15, Amber Brown <hawkowl at atleastfornow.net> wrote:

> Hi everyone,
>
> Since the Python 2 EOL date is rapidly approaching, I thought it was
> time we consider dropping Python 2 support.
>
> I personally find that Python 2 compat adds a huge amount of overhead
> when working on and maintaining Twisted, and think that with the current
> maintainer availability, dropping it sooner rather than later would have
> a beneficial effect on how much work we spend on shims/compat,
> complexity, and our ability to ship new features, as well as onboarding
> people who are interested in the project, but have no interest (or
> experience!) in Python 2.7.
>
> It is basically summed up by doing a feature freeze on an agreed-upon
> version of Twisted, that will be the last version released for 2.7. It
> would be abnormal in that it would get security fixes (our current
> policy is to only release them for current versions) and critical
> bugfixes, but would otherwise be frozen.
>
> One of my rationales is that from some analysis of PyPI download
> statistics, the vast majority of Python 2 users are using old versions
> of Twisted, while nearly all our Python 3 users are on the latest
> version. As such, I believe freezing a version that will get security
> updates but no new features would not be a massive loss to those stuck
> on Python 2 for whatever reason.
>
> Twisted's compatibility policy would still apply, ensuring that Python
> 2/3 compatible software using Twisted would be able to use the older
> Twisted version on Python 2, and the newer version on Python 3, as you
> would usually expect.
>
> You can find the proposal here, in this handy-dandy Google Doc:
>
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
> Comments are welcome, as well as which timeline seems reasonable.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190325/0f3b167b/attachment.html>

From adi at roiban.ro  Mon Mar 25 08:33:48 2019
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 25 Mar 2019 14:33:48 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <CAFycZ9fYjc0Cmvmvej3FOBhkMChHfs0iVXu=_3YjkTadvdgTMA@mail.gmail.com>

On Mon, 25 Mar 2019 at 10:15, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
> Hi everyone,
>
> Since the Python 2 EOL date is rapidly approaching, I thought it was
> time we consider dropping Python 2 support.
>

[snip]

> You can find the proposal here, in this handy-dandy Google Doc:
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
> Comments are welcome, as well as which timeline seems reasonable.
>
> - Amber

Many thanks Amber for putting this together.

I would vote for option 3. ... as it will take some time to clean the code.






--
Adi Roiban


From barry.scott at forcepoint.com  Mon Mar 25 11:06:23 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Mon, 25 Mar 2019 17:06:23 +0000
Subject: [Twisted-Python] ANN: Eliot 1.7, the causal logging library,
 now with inlineCallbacks support
In-Reply-To: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
Message-ID: <14522251.sWHKtWim9z@barry-scott-desktop>

On Thursday, 21 March 2019 15:27:35 GMT Itamar Turner-Trauring wrote:
> Python and Twisted's built-in `logging` output a stream of factoids: they’re
> interesting, but you can’t really tell what’s going on.
> 
>  * Why is your application slow?
>  * What caused this code path to be chosen?
>  * Why did this error happen?
> Standard logging can’t answer these questions.
> 
> But with a better model you could understand what and why things happened in
> your application. You could pinpoint performance bottlenecks, you could
> understand what happened when, who called what.
> 
> That is what Eliot does. `Eliot` is a Python logging system that outputs
> causal chains of *actions*: actions can spawn other actions, and eventually
> they either *succeed or fail*. The resulting logs tell you the story of
> what your software did: what happened, and what caused it.
> 
> 
> Eliot has had good Twisted support from the start, but the latest release
> also supports inlineCallbacks, thanks to Jean-Paul Calderone.
> 
> You can learn more about Eliot at https://eliot.readthedocs.io/en/stable/

Interesting library.

It seems that I cannot have a action finish with an error unless I raise an
exception. That seems limiting, there are lots of cases where I have code
that hits an error condition and does not raise an exception. For example
an HTTP request that gets a non 200 status.

Have I missed something?

Barry




From itamar at itamarst.org  Mon Mar 25 11:23:19 2019
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 25 Mar 2019 13:23:19 -0400
Subject: [Twisted-Python] 
 =?utf-8?q?ANN=3A_Eliot_1=2E7=2C_the_causal_logg?=
 =?utf-8?q?ing_library=2C_now_with_inlineCallbacks_support?=
In-Reply-To: <14522251.sWHKtWim9z@barry-scott-desktop>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
 <14522251.sWHKtWim9z@barry-scott-desktop>
Message-ID: <4e4aeaeb-0103-4a89-8ba1-0023f4696fa2@www.fastmail.com>

> Interesting library.
> 
> It seems that I cannot have a action finish with an error unless I raise an
> exception. That seems limiting, there are lots of cases where I have code
> that hits an error condition and does not raise an exception. For example
> an HTTP request that gets a non 200 status.
> 
> Have I missed something?

You don't have to raise an exception, though the current API requires you to create an exception instance:
---

from eliot import start_action

action = start_action(action_type="http_request"):
with action.context():
    response = http_request()
    if response.code == 200:
        action.finish()
        return response.json
    else:
        action.finish(HTTPError(code=response.code))
        return None 

---
The Twisted APIs for Eliot likewise support Deferreds using a DeferredContext object, again with no need to raise an exception:

https://eliot.readthedocs.io/en/stable/generating/twisted.html#actions-and-deferreds
    
-Itamar    


From barry.scott at forcepoint.com  Mon Mar 25 11:22:46 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Mon, 25 Mar 2019 17:22:46 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <64733852.0XqjMW6x9D@barry-scott-desktop>

On Monday, 25 March 2019 10:15:22 GMT Amber Brown wrote:
> Hi everyone,
> 
> Since the Python 2 EOL date is rapidly approaching, I thought it was
> time we consider dropping Python 2 support.
> 
> I personally find that Python 2 compat adds a huge amount of overhead
> when working on and maintaining Twisted, and think that with the current
> maintainer availability, dropping it sooner rather than later would have
> a beneficial effect on how much work we spend on shims/compat,
> complexity, and our ability to ship new features, as well as onboarding
> people who are interested in the project, but have no interest (or
> experience!) in Python 2.7.
> 
> It is basically summed up by doing a feature freeze on an agreed-upon
> version of Twisted, that will be the last version released for 2.7. It
> would be abnormal in that it would get security fixes (our current
> policy is to only release them for current versions) and critical
> bugfixes, but would otherwise be frozen.
> 
> One of my rationales is that from some analysis of PyPI download
> statistics, the vast majority of Python 2 users are using old versions
> of Twisted, while nearly all our Python 3 users are on the latest
> version. As such, I believe freezing a version that will get security
> updates but no new features would not be a massive loss to those stuck
> on Python 2 for whatever reason.
> 
> Twisted's compatibility policy would still apply, ensuring that Python
> 2/3 compatible software using Twisted would be able to use the older
> Twisted version on Python 2, and the newer version on Python 3, as you
> would usually expect.
> 
> You can find the proposal here, in this handy-dandy Google Doc:
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0
> lik/edit
> 
> Comments are welcome, as well as which timeline seems reasonable.

We are stuck on python2.7 for the foreseeable future and you will not see us 
in the PyPi stats. We download your release tar ball and build an RPM from it.
We also have to build python2.7 our selves as we are stuck on Centos 6.8.

Having a legacy twisted with critical bugs and security fixes would work for 
us.

Barry




From werner at thieprojects.ch  Mon Mar 25 13:57:54 2019
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 25 Mar 2019 09:57:54 -1000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <64733852.0XqjMW6x9D@barry-scott-desktop>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
 <64733852.0XqjMW6x9D@barry-scott-desktop>
Message-ID: <abd27833-7bef-e41a-f9c4-ca311ff25f13@thieprojects.ch>

+1

Werner

On 3/25/19 07:22, Scott, Barry wrote:
> On Monday, 25 March 2019 10:15:22 GMT Amber Brown wrote:
>> Hi everyone,
>>
>> Since the Python 2 EOL date is rapidly approaching, I thought it was
>> time we consider dropping Python 2 support.
>>
>> I personally find that Python 2 compat adds a huge amount of overhead
>> when working on and maintaining Twisted, and think that with the current
>> maintainer availability, dropping it sooner rather than later would have
>> a beneficial effect on how much work we spend on shims/compat,
>> complexity, and our ability to ship new features, as well as onboarding
>> people who are interested in the project, but have no interest (or
>> experience!) in Python 2.7.
>>
>> It is basically summed up by doing a feature freeze on an agreed-upon
>> version of Twisted, that will be the last version released for 2.7. It
>> would be abnormal in that it would get security fixes (our current
>> policy is to only release them for current versions) and critical
>> bugfixes, but would otherwise be frozen.
>>
>> One of my rationales is that from some analysis of PyPI download
>> statistics, the vast majority of Python 2 users are using old versions
>> of Twisted, while nearly all our Python 3 users are on the latest
>> version. As such, I believe freezing a version that will get security
>> updates but no new features would not be a massive loss to those stuck
>> on Python 2 for whatever reason.
>>
>> Twisted's compatibility policy would still apply, ensuring that Python
>> 2/3 compatible software using Twisted would be able to use the older
>> Twisted version on Python 2, and the newer version on Python 3, as you
>> would usually expect.
>>
>> You can find the proposal here, in this handy-dandy Google Doc:
>> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0
>> lik/edit
>>
>> Comments are welcome, as well as which timeline seems reasonable.
> We are stuck on python2.7 for the foreseeable future and you will not see us 
> in the PyPi stats. We download your release tar ball and build an RPM from it.
> We also have to build python2.7 our selves as we are stuck on Centos 6.8.
>
> Having a legacy twisted with critical bugs and security fixes would work for 
> us.
>
> Barry
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From john at egh.com  Mon Mar 25 14:21:26 2019
From: john at egh.com (John Santos)
Date: Mon, 25 Mar 2019 16:21:26 -0400
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <fa199b33-b837-be6d-3c7d-841b6ae09575@egh.com>

My application works on both Python 2.7 and 3.  All my and my customer 
sites are now on Python 3 (there was a year or so of both), so I've 
stopped testing on 2.7, though I haven't done anything deliberate to 
break it.

I hope/expect that none of my code changes to make my source compatible 
with both 2.7 and 3 will break when Twisted support for 2.7 goes away!  
(It seems to me the Twisted compatibility policy would guarantee that.)

Most of my customer systems are on Red Hat or CentOS where the default 
Python, as of a few weeks ago, is 2.7.  I've installed Python 3.6 in a 
virtual environment and that has worked fine. (Replacing 2.7 with 3.6 
breaks many system tools, don't ask me how I know this!)

So I no longer have any problem with 2.7 support going away in Twisted.

- John Santos

On 3/25/2019 6:15 AM, Amber Brown wrote:
> Hi everyone,
>
> Since the Python 2 EOL date is rapidly approaching, I thought it was 
> time we consider dropping Python 2 support.
>
> I personally find that Python 2 compat adds a huge amount of overhead 
> when working on and maintaining Twisted, and think that with the 
> current maintainer availability, dropping it sooner rather than later 
> would have a beneficial effect on how much work we spend on 
> shims/compat, complexity, and our ability to ship new features, as 
> well as onboarding people who are interested in the project, but have 
> no interest (or experience!) in Python 2.7.
>
> It is basically summed up by doing a feature freeze on an agreed-upon 
> version of Twisted, that will be the last version released for 2.7. It 
> would be abnormal in that it would get security fixes (our current 
> policy is to only release them for current versions) and critical 
> bugfixes, but would otherwise be frozen.
>
> One of my rationales is that from some analysis of PyPI download 
> statistics, the vast majority of Python 2 users are using old versions 
> of Twisted, while nearly all our Python 3 users are on the latest 
> version. As such, I believe freezing a version that will get security 
> updates but no new features would not be a massive loss to those stuck 
> on Python 2 for whatever reason.
>
> Twisted's compatibility policy would still apply, ensuring that Python 
> 2/3 compatible software using Twisted would be able to use the older 
> Twisted version on Python 2, and the newer version on Python 3, as you 
> would usually expect.
>
> You can find the proposal here, in this handy-dandy Google Doc: 
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
> Comments are welcome, as well as which timeline seems reasonable.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539


From glyph at twistedmatrix.com  Mon Mar 25 22:52:03 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2019 21:52:03 -0700
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <3F533AD3-7485-42E3-B77B-35024CF918CA@twistedmatrix.com>

> On Mar 25, 2019, at 3:15 AM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> Since the Python 2 EOL date is rapidly approaching, I thought it was time we consider dropping Python 2 support.
> 
> I personally find that Python 2 compat adds a huge amount of overhead when working on and maintaining Twisted, and think that with the current maintainer availability, dropping it sooner rather than later would have a beneficial effect on how much work we spend on shims/compat, complexity, and our ability to ship new features, as well as onboarding people who are interested in the project, but have no interest (or experience!) in Python 2.7.

Personally, I don't have this problem, but I'm certainly willing to believe it's a bigger deal for others; especially others who perhaps have not even learned Python 2 at this point.

> It is basically summed up by doing a feature freeze on an agreed-upon version of Twisted, that will be the last version released for 2.7. It would be abnormal in that it would get security fixes (our current policy is to only release them for current versions) and critical bugfixes, but would otherwise be frozen.

Here's my question about this:

Who will do this work?

Personally, I'm not willing to commit to this.  I know from experience both on Twisted and other projects that maintaining multiple release branches, even one that's "maintenance only", requires at least one point-person for each branch at all times (usually a "release manager").  And backporting fixes inevitably gets harder and harder as the "maintenance" branch diverges from top-of-tree.  If I have time to work on Twisted in my increasingly scarce spare time, I want it to be on something at least plausibly interesting, and manually backporting manual fixes to an unmaintained py2 branch that I don't even use doesn't qualify.

("But glyph", I hear you ask, "then why are you willing to write py2 code as it is?".  Well, hypothetical reader, it's because I find it easily an order of magnitude easier to fix version discrepancies in the same change where they creep in, and CI is yelling me about them, than it is to fix them in a big tangled morass six months later with no idea which part of the code I'm backporting is the issue.)

Do we have py2-only users who are willing to take ownership of this branch?  Specific people willing to sign up for this responsibility for the next... how long?  Three years?  Five years?

So I'd rather be quite explicit that while we would not object to anyone filling these roles, someone still needs to step forward and fill them, and I'm not willing to commit the current team, such as it is, to work that I myself am unwilling to do.  If nobody does step forward we should not claim to have security support for a dead / unmaintained branch.

> One of my rationales is that from some analysis of PyPI download statistics, the vast majority of Python 2 users are using old versions of Twisted, while nearly all our Python 3 users are on the latest version. As such, I believe freezing a version that will get security updates but no new features would not be a massive loss to those stuck on Python 2 for whatever reason.

I know that you detailed some of this on IRC, but: how old?

My sense would be that of course users stuck on py2 would have a more conservative upgrade cadence than py3 users, but that doesn't mean they never upgrade.  How far behind are these py2 users, and does the curve suggest they're catching up or are most twisted downloads just like, version 1.3 on python 1.5.2 forever?

> Twisted's compatibility policy would still apply, ensuring that Python 2/3 compatible software using Twisted would be able to use the older Twisted version on Python 2, and the newer version on Python 3, as you would usually expect.

We have 2 big blockers here right now that would prevent doing this as things stand right now:

Twisted is not yet fully ported to Python 3, so there's no version where you can use all of Twisted on Python 3.  This picture is way, way smaller than it has ever been, though - grab a module and start porting: http://blog.habnab.it/twisted-depgraph/ <http://blog.habnab.it/twisted-depgraph/>
We still have Python 2 in production ourselves that requires Twisted; specifically:
Trac and several of our ancillary utilities around it.  Happily this does seem to be fairly actively worked on: "opened 4 years ago, last modified 12 days ago" https://trac.edgewall.org/ticket/12130 <https://trac.edgewall.org/ticket/12130>
Dogfood DNS: twisted.names doesn't work on python 3: https://twistedmatrix.com/trac/ticket/9496 <https://twistedmatrix.com/trac/ticket/9496>
Our front-end webserver might work on pypy3, but we have yet to move it over.  Maybe that would be a good place to start?

If this proposal lights a fire under some folks to drive any of these projects to completion, that would be great!

> You can find the proposal here, in this handy-dandy Google Doc: https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
> 
> Comments are welcome, as well as which timeline seems reasonable.

Personally I feel like Option 1 is the most reasonable.  We can't do option 3 because of the above blockers, and option 2 just seems random to me - why commit to 4 months of additional maintenance beyond when py2 itself is EOL?  Maybe there's an option like, 1.5, where we de-support py2 at max(2020-01-01, "the date at which we no longer have any py2 code in production ourselves")?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190325/b3d2a821/attachment.html>

From glyph at twistedmatrix.com  Mon Mar 25 22:57:57 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2019 21:57:57 -0700
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <64733852.0XqjMW6x9D@barry-scott-desktop>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
 <64733852.0XqjMW6x9D@barry-scott-desktop>
Message-ID: <B023933C-AB12-4C15-916D-4E195394AAF8@twistedmatrix.com>

Hi Barry!

Thanks for your feedback.

> On Mar 25, 2019, at 10:22 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> We are stuck on python2.7 for the foreseeable future and you will not see us 
> in the PyPi stats. We download your release tar ball and build an RPM from it.
> We also have to build python2.7 our selves as we are stuck on Centos 6.8.

Given the nature of your product I'm curious: isn't the inability to maintain certifications like PCI / HIPAA due to the lack of upstream support for python 2.7 a problem for a security application?

> Having a legacy twisted with critical bugs and security fixes would work for 
> us.

Apropos of the question in my other response - would you (or any of your colleagues) be willing to take responsibility for such a branch and do the security triage / backport work there?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190325/2492dd65/attachment-0001.html>

From chris at withers.org  Tue Mar 26 01:14:18 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 26 Mar 2019 07:14:18 +0000
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
Message-ID: <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>

On 24/03/2019 04:30, Glyph wrote:
> I'd further note that ClientService is /generally/ the new, good way to 
> do things and ReconnectingClientFactory is the old, bad way.  Our hope 
> is to eventually deprecate ReconnectingClientFactory and most of the 
> APIs that it uses, but this is a big project that we have not been able 
> to make much progress on in the last, ahem, decade or so.

What's the big advantage(s) of ClientService over 
ReconnectingClientFactory?

The Autobahn guys still show ReconnectingClientFactory in their docs, 
and I remember looking at this before and ending up going with 
ReconnectingClientFactory because it works and didn't look like it'd 
need much effort to integrated into an existing code base.

cheers,

Chris


From chris at withers.org  Tue Mar 26 01:28:26 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 26 Mar 2019 07:28:26 +0000
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <000201d4e106$ab0cc060$01264120$@cmsconstruct.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>
 <000201d4e106$ab0cc060$01264120$@cmsconstruct.com>
Message-ID: <664a2b76-656a-333e-49d5-bcdd32cec4eb@withers.org>

On 22/03/2019 23:26, Chris Satterthwaite wrote:
> Hi Chris,
> 
> The files I attached (with the full classes) made it through to my email, but I wondered if they would they go through to everyone.
> 
> Here's a gist with the same scripts:
> https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f
> 
> And yep, as you mentioned, a 'sleep' is definitely blocking.  That's not in the production version; I just dropped it in here for the test script to simulate something.

Observations:

- Your super call at 
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L46, 
I'd expect that to be super(ServiceClientFactory, self).__init__(), but 
your spelling may be a python 3 only thing that works?

- Those sleeps are going to cause you more problems than they solve.

- What does this seek to achieve? 
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L88-L89

- Why not use twisted logging instead of print? By setting it to debug, 
you'll get lots of into about what twisted is doing, and by using 
logging you won't need to do all that manual traceback printing.

- when you say "When the client hits a problem, it calls 
transport.loseConnection()", where is that call to transport.loseConnection?

- when you noticed some Twisted source code that works off 
factory.numPorts, where is that code? Can you provide a link? This 
doesn't sound right...

Now, as to what your problem is, I suspect it's this call to stopTrying:
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L87

The factory is stopped and started again by ReconnectingClientFactory, 
so you don't want that there as it means you stop trying every time 
there's a disconnection.

cheers,

Chris


From glyph at twistedmatrix.com  Tue Mar 26 02:32:36 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2019 01:32:36 -0700
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
Message-ID: <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>



> On Mar 26, 2019, at 12:14 AM, Chris Withers <chris at withers.org> wrote:
> 
> On 24/03/2019 04:30, Glyph wrote:
>> I'd further note that ClientService is /generally/ the new, good way to do things and ReconnectingClientFactory is the old, bad way.  Our hope is to eventually deprecate ReconnectingClientFactory and most of the APIs that it uses, but this is a big project that we have not been able to make much progress on in the last, ahem, decade or so.
> 
> What's the big advantage(s) of ClientService over ReconnectingClientFactory?
> 
> The Autobahn guys still show ReconnectingClientFactory in their docs, and I remember looking at this before and ending up going with ReconnectingClientFactory because it works and didn't look like it'd need much effort to integrated into an existing code base.

Let me count the ways.

ReconnectingClientFactory is destined for deprecation, eventually.  You should just adopt the "new" thing now so that if we get more energy to cycle the APIs and delete the old stuff, you'll have less hassle to deal with.  ("New" is in quotes here since it's been around for well over 3 years at this point; Autobahn should update too, not just you.)
ClientService works with endpoints, which means you can use it with any kind of transport, like SSH transports, subprocesses, etc.  Most practically, it works with HostnameEndpoint which is a much better way to get TLS than connectSSL; ReconnectingClientFactory works, kind of accidentally, with TLS since connectSSL is on the reactor, but it won't use happy eyeballs and it won't connect over IPv6, so connections will be slower and less reliable.
Conceptually, ClientService has a much clearer and more useful responsibility: its job is to maintain a state (i.e.: that there is a single connection, that it is connected) rather than to do a thing.  For example, 
if you want to shut down a ReconnectingClientFactory:
you have to call stopTrying, then uh...
find the last protocol it built with buildProtocol, then
grab its transport (hope it's saving that transport as '.transport', because it doesn't actually have to) 
call loseConnection
remember to trap connectionLost so you can see when its done.
if you want to shut down a ClientService
call stopService
wait for the Deferred that it returned to fire
ClientService is (mostly) implemented using composition rather than inheritance, so much less of the guts of the internal implementation is hanging around where you might accidentally twiddle it and break its assumptions, so you can trust its guarantees more.
other benefits of composition: you don't have to override attributes of your Protocol and thereby indulge in subclassing yourself to get notifications; consider 'prepareConnection', 'whenConnected'.
the retry policy mechanics are better documented and much easier to customize
it's backed by a formal state machine - not that I'm aware of any specific bugs in ReconnectingClientFactory but do you think it got all of these state transitions correct: https://gist.github.com/glyph/614be03151556333efe04b849fa05930 <https://gist.github.com/glyph/614be03151556333efe04b849fa05930>
It's more testable because it just takes its clock and reactor as constructor parameters, rather than requiring post-hoc poorly-documented attribute patching to become testable.

Hopefully at least some of this is convincing :)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190326/143f0701/attachment.html>

From tobias.oberstein at crossbario.com  Tue Mar 26 03:53:07 2019
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Tue, 26 Mar 2019 10:53:07 +0100
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
Message-ID: <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>

>> The Autobahn guys still show ReconnectingClientFactory in their docs, 

Where did you find that? That would be a doc bug, but in the _docs_, 
there is no reference to ReconnectingClientFactory

(cpy372_3) oberstet at intel-nuci7:~$ find 
~/scm/crossbario/autobahn-python/docs/ -type f -exec grep -Hi 
"ReconnectingClientFactory" {} \;
(cpy372_3) oberstet at intel-nuci7:~$

We do have some example code using ReconnectingClientFactory though:

(cpy372_3) oberstet at intel-nuci7:~$ find 
~/scm/crossbario/autobahn-python/examples/ -type f -exec grep -Hi 
"ReconnectingClientFactory" {} \; | wc -l
8

>> and I remember looking at this before and ending up going with 
>> ReconnectingClientFactory because it works and didn't look like it'd 
>> need much effort to integrated into an existing code base.
> 
> Let me count the ways.
> 
>  1. ReconnectingClientFactory is destined for deprecation, eventually.
>       You should just adopt the "new" thing now so that if we get more
>     energy to cycle the APIs and delete the old stuff, you'll have less
>     hassle to deal with.  ("New" is in quotes here since it's been
>     around for well over 3 years at this point; Autobahn should update
>     too, not just you.)

Autobahn will automatically use

twisted.application.internet.ClientService

for auto-reconnect when on Twisted 16.1.0+

https://github.com/crossbario/autobahn-python/blob/master/autobahn/twisted/wamp.py#L349

>  2. ClientService works with endpoints, which means you can use it with
>     /any/ kind of transport, like SSH transports, subprocesses, etc.
>       Most practically, it works with HostnameEndpoint which is a much
>     better way to get TLS than connectSSL; ReconnectingClientFactory
>     works, kind of accidentally, with TLS since connectSSL is on the
>     reactor, but it won't use happy eyeballs and it won't connect over
>     IPv6, so connections will be slower and less reliable.
>  3. Conceptually, ClientService has a much clearer and more useful
>     responsibility: its job is to /maintain a state/ (i.e.: that there
>     is a single connection, that it is connected) rather than to /do a
>     thing/.  For example,
>      1. if you want to shut down a ReconnectingClientFactory:
>          1. you have to call stopTrying, then uh...
>          2. find the last protocol it built with buildProtocol, then
>          3. grab its transport (hope it's saving that transport as
>             '.transport', because it doesn't actually have to)
>          4. call loseConnection
>          5. remember to trap connectionLost so you can see when its done.
>      2. if you want to shut down a ClientService
>          1. call stopService
>          2. wait for the Deferred that it returned to fire
>  4. ClientService is (mostly) implemented using composition rather than
>     inheritance, so much less of the guts of the internal implementation
>     is hanging around where you might accidentally twiddle it and break
>     its assumptions, so you can trust its guarantees more.

++1

(note: Autobahn is a culprit to the overuse of inheritance vs 
composition too .. but the so-called "new API" (for WAMP) is following 
composition + observer pattern, while the "old API" (that is inheriting 
from ApplicationSession) is still pretty much around. we have some 
legacy already ..)

>      1. other benefits of composition: you don't have to override
>         attributes of your Protocol and thereby indulge in subclassing
>         yourself to get notifications; consider 'prepareConnection',
>         'whenConnected'.
>      2. the retry policy mechanics are better documented and much easier
>         to customize
>      3. it's backed by a formal state machine - not that I'm aware of
>         any specific bugs in ReconnectingClientFactory but do you think
>         it got /all/ of these state transitions correct:
>         https://gist.github.com/glyph/614be03151556333efe04b849fa05930
>  5. It's more testable because it just takes its clock and reactor as
>     constructor parameters, rather than requiring post-hoc
>     poorly-documented attribute patching to become testable.
> 
> 
> Hopefully at least some of this is convincing :)

all and each of them is convincing;)

> 
> -g
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 

Tobias Oberstein - phone +49 176 2375 2055 - tobias.oberstein at crossbario.com
Crossbar.io GmbH - Waldstrasse 18 - 91054 Erlangen
HRB 15870 - Amtsgericht Fuerth - Geschäftsfuehrer/CEO - Tobias Oberstein

https://crossbar.io
https://crossbario.com


From chris at cmsconstruct.com  Tue Mar 26 07:34:40 2019
From: chris at cmsconstruct.com (Chris Satterthwaite)
Date: Tue, 26 Mar 2019 08:34:40 -0500
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <664a2b76-656a-333e-49d5-bcdd32cec4eb@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>
 <000201d4e106$ab0cc060$01264120$@cmsconstruct.com>
 <664a2b76-656a-333e-49d5-bcdd32cec4eb@withers.org>
Message-ID: <002b01d4e3d8$aa6369f0$ff2a3dd0$@cmsconstruct.com>

Hi Chris,

The print and sleep statements are just my efforts at converting something big down to something small for a test case.  In the actual client I'm using twisted.logger for FilteringLogObserver's and Logger's.  The looping call for system health was also a shorted version; I wasn't sure if looping calls were the culprit at the start.  I appologise for the fluff and if I introduced confusion.  I just figured that posting multiple classes and thousands of lines would get less response than an attempted short test sample.


> when you say "When the client hits a problem, it calls transport.loseConnection()", where is that call to transport.loseConnection?

The transport.loseConnection call is on line 82 of the test client code; it's inside the cleanup() function.


> Now, as to what your problem is, I suspect it's this call to stopTrying:
> https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L87

I may be missing this from the Twisted side, but I understood that stopFactory was only called when the reactor was cleaning up.  So I added stopTrying in there for the ReconnectingClientFactory portion, amongst many other lines (that I removed for the example) for stopping external dependencies.  All that seemed to work fine.


When I called loseConnection with just a single established connection, stopFactory was called and ReconnectingClientFactory was not restarted or reconnected.  Seemed like ReconnectingClientFactory was not expecting a new connection attempt after the loseConnection call.  Additionally, it seemed like the factory expected to clean up and stop the reactor whenever loseConnection was called with that single connection.  And of course in most use-cases, that makes sense.  But my goal was to hang on to the factory after loseConnection, and continue work after external dependencies came back online.


> when you noticed some Twisted source code that works off factory.numPorts, where is that code?

To troubleshoot, I used __dict__ to start investigating variable values with the factory and client.  And I used that to start searching through the twisted code in site-packages.  I noticed at least one function which conditionally worked off numPorts in order to shut things down (twisted.internet.protocol.AbstractDatagramProtocol.doStop).  Here's the code:
        assert self.numPorts > 0
        self.numPorts = self.numPorts - 1
        self.transport = None
        if not self.numPorts:
            if self.noisy:
                log.msg("Stopping protocol %s" % self)
            self.stopProtocol()

And so the work around I implemented was to conditionally increase this number while I controlled the disconnect/reconnect.  Seemed to work fine in practice.


Thanks again for the responses.  Given all the benefits Glyph mentioned of ClientService - I've added that migration into my roadmap.

-Chris


-----Original Message-----
From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of Chris Withers
Sent: Tuesday, March 26, 2019 2:28 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] stop/start client connections with loseConnection in ReconnectingClientFactory

On 22/03/2019 23:26, Chris Satterthwaite wrote:
> Hi Chris,
> 
> The files I attached (with the full classes) made it through to my email, but I wondered if they would they go through to everyone.
> 
> Here's a gist with the same scripts:
> https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519
> f
> 
> And yep, as you mentioned, a 'sleep' is definitely blocking.  That's not in the production version; I just dropped it in here for the test script to simulate something.

Observations:

- Your super call at
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L46,
I'd expect that to be super(ServiceClientFactory, self).__init__(), but your spelling may be a python 3 only thing that works?

- Those sleeps are going to cause you more problems than they solve.

- What does this seek to achieve? 
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L88-L89

- Why not use twisted logging instead of print? By setting it to debug, you'll get lots of into about what twisted is doing, and by using logging you won't need to do all that manual traceback printing.

- when you say "When the client hits a problem, it calls transport.loseConnection()", where is that call to transport.loseConnection?

- when you noticed some Twisted source code that works off factory.numPorts, where is that code? Can you provide a link? This doesn't sound right...

Now, as to what your problem is, I suspect it's this call to stopTrying:
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L87

The factory is stopped and started again by ReconnectingClientFactory, so you don't want that there as it means you stop trying every time there's a disconnection.

cheers,

Chris

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From rodrigc at crodrigues.org  Tue Mar 26 20:35:58 2019
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 26 Mar 2019 19:35:58 -0700
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <CAG=rPVfLmZQrkEwoHzu8Rm-Xh9jhqBPOoDjA2NHhLGuMBoQN_g@mail.gmail.com>

On Mon, Mar 25, 2019 at 3:15 AM Amber Brown <hawkowl at atleastfornow.net>
wrote:

>
>
>
> You can find the proposal here, in this handy-dandy Google Doc:
>
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
>
>
Thanks for writing that doc.
I think option 3 of making Twisted 19.4 the last Python 2 release, with
security updates until 2021 is
actually pretty reasonable.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190326/3f957809/attachment.html>

From rodrigc at crodrigues.org  Tue Mar 26 20:59:01 2019
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 26 Mar 2019 19:59:01 -0700
Subject: [Twisted-Python] Drop support for Python 3.4?
Message-ID: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>

What do people think of dropping Twisted support for Python 3.4?

According to https://devguide.python.org/#status-of-python-branches

Python 3.4 EOL'd on March 19, 2019.

In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
the end of this year we will have Python 3.8.

That's quite a lot of Python versions to support.

Python 3.5 introduced async/await keywords, which are very relevant to
Twisted:
https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492

If it makes sense, it would be nice to use these keywords as first-level
features in Twisted.

Since Amber brought up discussion of dropping Python 2.7 here:
https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html

I thought I would raise dropping Python 3.4 also.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190326/09bf50b8/attachment.html>

From glyph at twistedmatrix.com  Tue Mar 26 23:04:17 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2019 22:04:17 -0700
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
Message-ID: <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>



> On Mar 26, 2019, at 7:59 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> What do people think of dropping Twisted support for Python 3.4?
> 
> According to https://devguide.python.org/#status-of-python-branches <https://devguide.python.org/#status-of-python-branches>
> 
> Python 3.4 EOL'd on March 19, 2019.
> 
> In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> the end of this year we will have Python 3.8.
> 
> That's quite a lot of Python versions to support.
> 
> Python 3.5 introduced async/await keywords, which are very relevant to Twisted:
> https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492 <https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492>
> 
> If it makes sense, it would be nice to use these keywords as first-level features in Twisted.
> 
> Since Amber brought up discussion of dropping Python 2.7 here:
> https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html <https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html>
> 
> I thought I would raise dropping Python 3.4 also.

I'll let any 3.4 users speak for themselves if they're out there, but while I can imagine a host of reasons we might want to still support 2.7, I can't think of any that we'd want to hang on to 3.4 any longer than necessary.  3.5 still has the lingering benefit of a production(-ish) pypy, so we might not want to jump to 3.6-only anyway, but if it's unsupported by python core, let's get rid of it.  Faster round trips through CI are reason enough :-).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190326/1f6d6258/attachment.html>

From adi at roiban.ro  Wed Mar 27 02:45:13 2019
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 27 Mar 2019 08:45:13 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <3F533AD3-7485-42E3-B77B-35024CF918CA@twistedmatrix.com>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
 <3F533AD3-7485-42E3-B77B-35024CF918CA@twistedmatrix.com>
Message-ID: <CAFycZ9eT10=N3rcKch1N-7BQ6fEJra4NFd1WGuvKuLQtqaybjQ@mail.gmail.com>

On Tue, 26 Mar 2019 at 04:52, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Mar 25, 2019, at 3:15 AM, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
>
> Hi everyone,
>
> Since the Python 2 EOL date is rapidly approaching, I thought it was time we consider dropping Python 2 support.
>
> I personally find that Python 2 compat adds a huge amount of overhead when working on and maintaining Twisted, and think that with the current maintainer availability, dropping it sooner rather than later would have a beneficial effect on how much work we spend on shims/compat, complexity, and our ability to ship new features, as well as onboarding people who are interested in the project, but have no interest (or experience!) in Python 2.7.
>
>
> Personally, I don't have this problem, but I'm certainly willing to believe it's a bigger deal for others; especially others who perhaps have not even learned Python 2 at this point.

I am still using python 2.7 on all my projects, and I remember the
sending patches supporting python 3 was an extra effort... I had to
learn python 3 things, and then search for ways / workaround to
implement something in a py2 + py3 way... read six documentation.

I guess that many Twisted developers don't have too much free time,
this can add up.

For me learning py3 was ok as at some point I will use it...but I
guess that for people who will never use py2 is just unwanted work.

>
>
> Here's my question about this:
>
> Who will do this work?
>
> Personally, I'm not willing to commit to this.  I know from experience both on Twisted and other projects that maintaining multiple release branches, even one that's "maintenance only", requires at least one point-person for each branch at all times (usually a "release manager").  And backporting fixes inevitably gets harder and harder as the "maintenance" branch diverges from top-of-tree.  If I have time to work on Twisted in my increasingly scarce spare time, I want it to be on something at least plausibly interesting, and manually backporting manual fixes to an unmaintained py2 branch that I don't even use doesn't qualify.
>
[SNIP]
>
> Do we have py2-only users who are willing to take ownership of this branch?  Specific people willing to sign up for this responsibility for the next... how long?  Three years?  Five years?
>


I can help with backporting security fixed for the next 5 years, as I
will use it.

I am still using 15.5 due to lack of python cryptography on all
systems, and I have a fork for twisted.web with support for resources
which can add custom `Expect: 100-continue` behaviour.

I am doing backporting and as long as there is a CI, is not that hard.

I hope there will be at least another person to help reviewing the backports.

> So I'd rather be quite explicit that while we would not object to anyone filling these roles, someone still needs to step forward and fill them, and I'm not willing to commit the current team, such as it is, to work that I myself am unwilling to do.  If nobody does step forward we should not claim to have security support for a dead / unmaintained branch.

Well.. this is free/libre software so I guess that nobody will be sued
if we commit to something, and later we found out that this can't be
done.

> One of my rationales is that from some analysis of PyPI download statistics, the vast majority of Python 2 users are using old versions of Twisted, while nearly all our Python 3 users are on the latest version. As such, I believe freezing a version that will get security updates but no new features would not be a massive loss to those stuck on Python 2 for whatever reason.
>
>
> I know that you detailed some of this on IRC, but: how old?
>
> My sense would be that of course users stuck on py2 would have a more conservative upgrade cadence than py3 users, but that doesn't mean they never upgrade.  How far behind are these py2 users, and does the curve suggest they're catching up or are most twisted downloads just like, version 1.3 on python 1.5.2 forever?
>

>From my experience the upgrade is between 5 to 10 years.
But the upgrade is done only because the system will be obsolete.
Old version run in private networks, without Internet access with
nobody willing to touch a working system.

PCI don't help. So far, they have only asked for TLS1.2 and removal of
CBC Mode ciphers in SSH...and that is all.
They have never complained about old OpenSSH or OpenSSL versions...
and when you have custom old software, the PCI auditor have no clue.

I know more than 3 big companies which still have not upgraded to TLS
1.2 even with all the PCI audits...they always get extensions and
workarounds.

> Twisted's compatibility policy would still apply, ensuring that Python 2/3 compatible software using Twisted would be able to use the older Twisted version on Python 2, and the newer version on Python 3, as you would usually expect.
>
>
> We have 2 big blockers here right now that would prevent doing this as things stand right now:
>
> Twisted is not yet fully ported to Python 3, so there's no version where you can use all of Twisted on Python 3.  This picture is way, way smaller than it has ever been, though - grab a module and start porting: http://blog.habnab.it/twisted-depgraph/
> We still have Python 2 in production ourselves that requires Twisted; specifically:
>
> Trac and several of our ancillary utilities around it.  Happily this does seem to be fairly actively worked on: "opened 4 years ago, last modified 12 days ago" https://trac.edgewall.org/ticket/12130

Do we really need Trac?
Maybe is time to move the tickets and wiki to GitHub.

> Dogfood DNS: twisted.names doesn't work on python 3: https://twistedmatrix.com/trac/ticket/9496

I have never used Twisted.names in production.
I tried to help with the review of twisted.names patches, and I
remember there was not much interest for twisted.names
So maybe we can get rid of it and move it to a separate project.

I don't think that we need to have everything in twisted core... if
ldaptor is an external project, why we can't have twisted.names


> Our front-end webserver might work on pypy3, but we have yet to move it over.  Maybe that would be a good place to start?
>
>
> If this proposal lights a fire under some folks to drive any of these projects to completion, that would be great!

My hope is that this proposal will light a fire and people using
Twisted will more about Twisted.

I feel that Twisted stability and reduce number of defects is not
helping the open source dev model.
People will use Twisted, it just work and they forget about it.
Or if it doesn't work, they can fix something on their project
relatively easy...but takes a lot of effort to send upstream..so they
will never put the effort required to have a fix upstream.

> You can find the proposal here, in this handy-dandy Google Doc: https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
> Comments are welcome, as well as which timeline seems reasonable.
>
>
> Personally I feel like Option 1 is the most reasonable.  We can't do option 3 because of the above blockers, and option 2 just seems random to me - why commit to 4 months of additional maintenance beyond when py2 itself is EOL?  Maybe there's an option like, 1.5, where we de-support py2 at max(2020-01-01, "the date at which we no longer have any py2 code in production ourselves")?

If we keep the current prod infrastructure, I am not confident that we
will no longer have py2 code in prod by the end of this year.

I don't feel that the current Twisted team have resource to maintain a
custom infrastructure.
I think that things will be better for everyone if for example of
Twisted names we will just use the credit on Azure to keep the DNS and
use more Software as a Service so that the team will spend more time
on developing new feature than doing sysadmin work.

Dogfooding is a good thing, but in this case, I fell that it does not help.

--
Adi Roiban


From hawkowl at atleastfornow.net  Wed Mar 27 03:59:54 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Wed, 27 Mar 2019 20:59:54 +1100
Subject: [Twisted-Python] Twisted 19.2.0rc2 Release Candidate Announcement
Message-ID: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>

Hello everyone! 19.2.0rc2 is now out. Sorry for the delay!

This fixes the Cryptography dependency being set to 1.5, when we 
actually require at least 2.5.

You can get the tarball and the NEWS file at 
https://twistedmatrix.com/Releases/rc/19.2.0rc2/ , or you can try it out 
from PyPI:

     python -m pip install Twisted==19.2.0rc2

Please test it, and let me know how your applications fare, good or bad! 
If nothing comes up, 19.2 will release in a week.

Twisted regards,

Amber Brown (hawkowl)


From julian at grayvines.com  Wed Mar 27 06:32:31 2019
From: julian at grayvines.com (Julian Berman)
Date: Wed, 27 Mar 2019 08:32:31 -0400
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support (Craig Rodrigues)
In-Reply-To: <mailman.24.1553676330.2410.twisted-python@twistedmatrix.com>
References: <mailman.24.1553676330.2410.twisted-python@twistedmatrix.com>
Message-ID: <CABJQSkkQtEFRJevCrKUr6cCgBBUdudEyXJiyhyPgpVwdHmKxKQ@mail.gmail.com>

Hi!

Figured it might be helpful to just throw in the other viewpoint (that I'd
hold).

Which is -- I use a Python 2.7 [PyPy] not end of lifing in 2020 (or in the
forseeable future -- and one by the way I'd wholeheartedly have recommended
more of us use even before now :). At work, we develop even new
applications on it, and likely will not have any plans to move anything
really until at least a year or two, until PyPy3 matures and until we have
time to do extensive benchmarking showing it isn't slower than PyPy2.

So my personal opinion would be obviously "drop Py2 support immediately" --
nope kidding, just making sure you're still reading -- it's "keep it
forever and we all suffer, hooray".

I don't contribute to Twisted as much as I'd like (or should), and I fully
recognize the huge efforts of others who hey shouldn't do free work just on
my behalf -- but, in case it's valuable, FWIW dropping Py2 support would
make me *less* likely to contribute :), since I couldn't rely on being able
to use my own contributions -- perhaps though a decent solution to this
side of things is for twisted to continue to pursue being more modular than
it is today (i.e. break it up).

-J

On Wed, Mar 27, 2019 at 4:45 AM <twisted-python-request at twistedmatrix.com>
wrote:

> Send Twisted-Python mailing list submissions to
>         twisted-python at twistedmatrix.com
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> or, via email, send a message with subject or body 'help' to
>         twisted-python-request at twistedmatrix.com
>
> You can reach the person managing the list at
>         twisted-python-owner at twistedmatrix.com
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-Python digest..."
> Today's Topics:
>
>    1. Re: A Proposal for reducing the burden of developing on
>       Twisted by dropping Python 2 support (Craig Rodrigues)
>    2. Drop support for Python 3.4? (Craig Rodrigues)
>    3. Re: Drop support for Python 3.4? (Glyph)
>    4. Re: A Proposal for reducing the burden of developing on
>       Twisted by dropping Python 2 support (Adi Roiban)
>
>
>
> ---------- Forwarded message ----------
> From: Craig Rodrigues <rodrigc at crodrigues.org>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Cc:
> Bcc:
> Date: Tue, 26 Mar 2019 19:35:58 -0700
> Subject: Re: [Twisted-Python] A Proposal for reducing the burden of
> developing on Twisted by dropping Python 2 support
>
>
> On Mon, Mar 25, 2019 at 3:15 AM Amber Brown <hawkowl at atleastfornow.net>
> wrote:
>
>>
>>
>>
>> You can find the proposal here, in this handy-dandy Google Doc:
>>
>> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>>
>>
>>
> Thanks for writing that doc.
> I think option 3 of making Twisted 19.4 the last Python 2 release, with
> security updates until 2021 is
> actually pretty reasonable.
>
> --
> Craig
>
>
>
> ---------- Forwarded message ----------
> From: Craig Rodrigues <rodrigc at crodrigues.org>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Cc:
> Bcc:
> Date: Tue, 26 Mar 2019 19:59:01 -0700
> Subject: [Twisted-Python] Drop support for Python 3.4?
> What do people think of dropping Twisted support for Python 3.4?
>
> According to https://devguide.python.org/#status-of-python-branches
>
> Python 3.4 EOL'd on March 19, 2019.
>
> In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> the end of this year we will have Python 3.8.
>
> That's quite a lot of Python versions to support.
>
> Python 3.5 introduced async/await keywords, which are very relevant to
> Twisted:
> https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492
>
> If it makes sense, it would be nice to use these keywords as first-level
> features in Twisted.
>
> Since Amber brought up discussion of dropping Python 2.7 here:
> https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html
>
> I thought I would raise dropping Python 3.4 also.
> --
> Craig
>
>
>
> ---------- Forwarded message ----------
> From: Glyph <glyph at twistedmatrix.com>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Cc:
> Bcc:
> Date: Tue, 26 Mar 2019 22:04:17 -0700
> Subject: Re: [Twisted-Python] Drop support for Python 3.4?
>
>
> On Mar 26, 2019, at 7:59 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> What do people think of dropping Twisted support for Python 3.4?
>
> According to https://devguide.python.org/#status-of-python-branches
>
> Python 3.4 EOL'd on March 19, 2019.
>
> In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> the end of this year we will have Python 3.8.
>
> That's quite a lot of Python versions to support.
>
> Python 3.5 introduced async/await keywords, which are very relevant to
> Twisted:
> https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492
>
> If it makes sense, it would be nice to use these keywords as first-level
> features in Twisted.
>
> Since Amber brought up discussion of dropping Python 2.7 here:
> https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html
>
> I thought I would raise dropping Python 3.4 also.
>
>
> I'll let any 3.4 users speak for themselves if they're out there, but
> while I can imagine a host of reasons we might want to still support 2.7, I
> can't think of any that we'd want to hang on to 3.4 any longer than
> necessary.  3.5 still has the lingering benefit of a production(-ish) pypy,
> so we might not want to jump to 3.6-only anyway, but if it's unsupported by
> python core, let's get rid of it.  Faster round trips through CI are reason
> enough :-).
>
> -g
>
>
>
>
> ---------- Forwarded message ----------
> From: Adi Roiban <adi at roiban.ro>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Cc:
> Bcc:
> Date: Wed, 27 Mar 2019 08:45:13 +0000
> Subject: Re: [Twisted-Python] A Proposal for reducing the burden of
> developing on Twisted by dropping Python 2 support
> On Tue, 26 Mar 2019 at 04:52, Glyph <glyph at twistedmatrix.com> wrote:
> >
> > On Mar 25, 2019, at 3:15 AM, Amber Brown <hawkowl at atleastfornow.net>
> wrote:
> >
> >
> > Hi everyone,
> >
> > Since the Python 2 EOL date is rapidly approaching, I thought it was
> time we consider dropping Python 2 support.
> >
> > I personally find that Python 2 compat adds a huge amount of overhead
> when working on and maintaining Twisted, and think that with the current
> maintainer availability, dropping it sooner rather than later would have a
> beneficial effect on how much work we spend on shims/compat, complexity,
> and our ability to ship new features, as well as onboarding people who are
> interested in the project, but have no interest (or experience!) in Python
> 2.7.
> >
> >
> > Personally, I don't have this problem, but I'm certainly willing to
> believe it's a bigger deal for others; especially others who perhaps have
> not even learned Python 2 at this point.
>
> I am still using python 2.7 on all my projects, and I remember the
> sending patches supporting python 3 was an extra effort... I had to
> learn python 3 things, and then search for ways / workaround to
> implement something in a py2 + py3 way... read six documentation.
>
> I guess that many Twisted developers don't have too much free time,
> this can add up.
>
> For me learning py3 was ok as at some point I will use it...but I
> guess that for people who will never use py2 is just unwanted work.
>
> >
> >
> > Here's my question about this:
> >
> > Who will do this work?
> >
> > Personally, I'm not willing to commit to this.  I know from experience
> both on Twisted and other projects that maintaining multiple release
> branches, even one that's "maintenance only", requires at least one
> point-person for each branch at all times (usually a "release manager").
> And backporting fixes inevitably gets harder and harder as the
> "maintenance" branch diverges from top-of-tree.  If I have time to work on
> Twisted in my increasingly scarce spare time, I want it to be on something
> at least plausibly interesting, and manually backporting manual fixes to an
> unmaintained py2 branch that I don't even use doesn't qualify.
> >
> [SNIP]
> >
> > Do we have py2-only users who are willing to take ownership of this
> branch?  Specific people willing to sign up for this responsibility for the
> next... how long?  Three years?  Five years?
> >
>
>
> I can help with backporting security fixed for the next 5 years, as I
> will use it.
>
> I am still using 15.5 due to lack of python cryptography on all
> systems, and I have a fork for twisted.web with support for resources
> which can add custom `Expect: 100-continue` behaviour.
>
> I am doing backporting and as long as there is a CI, is not that hard.
>
> I hope there will be at least another person to help reviewing the
> backports.
>
> > So I'd rather be quite explicit that while we would not object to anyone
> filling these roles, someone still needs to step forward and fill them, and
> I'm not willing to commit the current team, such as it is, to work that I
> myself am unwilling to do.  If nobody does step forward we should not claim
> to have security support for a dead / unmaintained branch.
>
> Well.. this is free/libre software so I guess that nobody will be sued
> if we commit to something, and later we found out that this can't be
> done.
>
> > One of my rationales is that from some analysis of PyPI download
> statistics, the vast majority of Python 2 users are using old versions of
> Twisted, while nearly all our Python 3 users are on the latest version. As
> such, I believe freezing a version that will get security updates but no
> new features would not be a massive loss to those stuck on Python 2 for
> whatever reason.
> >
> >
> > I know that you detailed some of this on IRC, but: how old?
> >
> > My sense would be that of course users stuck on py2 would have a more
> conservative upgrade cadence than py3 users, but that doesn't mean they
> never upgrade.  How far behind are these py2 users, and does the curve
> suggest they're catching up or are most twisted downloads just like,
> version 1.3 on python 1.5.2 forever?
> >
>
> >From my experience the upgrade is between 5 to 10 years.
> But the upgrade is done only because the system will be obsolete.
> Old version run in private networks, without Internet access with
> nobody willing to touch a working system.
>
> PCI don't help. So far, they have only asked for TLS1.2 and removal of
> CBC Mode ciphers in SSH...and that is all.
> They have never complained about old OpenSSH or OpenSSL versions...
> and when you have custom old software, the PCI auditor have no clue.
>
> I know more than 3 big companies which still have not upgraded to TLS
> 1.2 even with all the PCI audits...they always get extensions and
> workarounds.
>
> > Twisted's compatibility policy would still apply, ensuring that Python
> 2/3 compatible software using Twisted would be able to use the older
> Twisted version on Python 2, and the newer version on Python 3, as you
> would usually expect.
> >
> >
> > We have 2 big blockers here right now that would prevent doing this as
> things stand right now:
> >
> > Twisted is not yet fully ported to Python 3, so there's no version where
> you can use all of Twisted on Python 3.  This picture is way, way smaller
> than it has ever been, though - grab a module and start porting:
> http://blog.habnab.it/twisted-depgraph/
> > We still have Python 2 in production ourselves that requires Twisted;
> specifically:
> >
> > Trac and several of our ancillary utilities around it.  Happily this
> does seem to be fairly actively worked on: "opened 4 years ago, last
> modified 12 days ago" https://trac.edgewall.org/ticket/12130
>
> Do we really need Trac?
> Maybe is time to move the tickets and wiki to GitHub.
>
> > Dogfood DNS: twisted.names doesn't work on python 3:
> https://twistedmatrix.com/trac/ticket/9496
>
> I have never used Twisted.names in production.
> I tried to help with the review of twisted.names patches, and I
> remember there was not much interest for twisted.names
> So maybe we can get rid of it and move it to a separate project.
>
> I don't think that we need to have everything in twisted core... if
> ldaptor is an external project, why we can't have twisted.names
>
>
> > Our front-end webserver might work on pypy3, but we have yet to move it
> over.  Maybe that would be a good place to start?
> >
> >
> > If this proposal lights a fire under some folks to drive any of these
> projects to completion, that would be great!
>
> My hope is that this proposal will light a fire and people using
> Twisted will more about Twisted.
>
> I feel that Twisted stability and reduce number of defects is not
> helping the open source dev model.
> People will use Twisted, it just work and they forget about it.
> Or if it doesn't work, they can fix something on their project
> relatively easy...but takes a lot of effort to send upstream..so they
> will never put the effort required to have a fix upstream.
>
> > You can find the proposal here, in this handy-dandy Google Doc:
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
> >
> > Comments are welcome, as well as which timeline seems reasonable.
> >
> >
> > Personally I feel like Option 1 is the most reasonable.  We can't do
> option 3 because of the above blockers, and option 2 just seems random to
> me - why commit to 4 months of additional maintenance beyond when py2
> itself is EOL?  Maybe there's an option like, 1.5, where we de-support py2
> at max(2020-01-01, "the date at which we no longer have any py2 code in
> production ourselves")?
>
> If we keep the current prod infrastructure, I am not confident that we
> will no longer have py2 code in prod by the end of this year.
>
> I don't feel that the current Twisted team have resource to maintain a
> custom infrastructure.
> I think that things will be better for everyone if for example of
> Twisted names we will just use the credit on Azure to keep the DNS and
> use more Software as a Service so that the team will spend more time
> on developing new feature than doing sysadmin work.
>
> Dogfooding is a good thing, but in this case, I fell that it does not help.
>
> --
> Adi Roiban
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190327/69273bba/attachment-0001.html>

From maarten at treewalker.org  Wed Mar 27 12:55:19 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 27 Mar 2019 19:55:19 +0100
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
 <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>
Message-ID: <4047129.1hCDKizrtX@hyperion>

On Wednesday, 27 March 2019 06:04:17 CET Glyph wrote:
> > On Mar 26, 2019, at 7:59 PM, Craig Rodrigues
> > <rodrigc at crodrigues.org> wrote:
> > 
> > What do people think of dropping Twisted support for Python 3.4?
> > 
> > According to https://devguide.python.org/#status-of-python-branches
> > <https://devguide.python.org/#status-of-python-branches>
> > 
> > Python 3.4 EOL'd on March 19, 2019.
> > 
> > In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> > the end of this year we will have Python 3.8.
> > 
> > That's quite a lot of Python versions to support.
> > 
> > Python 3.5 introduced async/await keywords, which are very relevant
> > to Twisted:
> > https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492
> > <https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492>
> > 
> > If it makes sense, it would be nice to use these keywords as
> > first-level features in Twisted.
> > 
> > Since Amber brought up discussion of dropping Python 2.7 here:
> > https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234
> > .html
> > <https://twistedmatrix.com/pipermail/twisted-python/2019-March/0322
> > 34.html>
> > 
> > I thought I would raise dropping Python 3.4 also.
> 
> I'll let any 3.4 users speak for themselves if they're out there, but
> while I can imagine a host of reasons we might want to still support
> 2.7, I can't think of any that we'd want to hang on to 3.4 any longer
> than necessary.  3.5 still has the lingering benefit of a
> production(-ish) pypy, so we might not want to jump to 3.6-only
> anyway, but if it's unsupported by python core, let's get rid of it. 
> Faster round trips through CI are reason enough :-).

Python 3.5 is still the default python3 version in Debian stable, so 
updating beyond that might make it more complex for Debian users to 
install Twisted.

One advantage of 3.5 over 3.4 is that support for type annotations is 
included (with some limitations compared to 3.6). Is this something that 
Twisted plans to adopt?

My personal experience with type annotations so far as that they 
occasionally uncover a bug, but the main benefit is in having formal 
documentation of types that can be verified by tooling (mypy).

Bye,
		Maarten




From tobias.oberstein at crossbario.com  Wed Mar 27 14:32:59 2019
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Wed, 27 Mar 2019 21:32:59 +0100
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <4047129.1hCDKizrtX@hyperion>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
 <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>
 <4047129.1hCDKizrtX@hyperion>
Message-ID: <03028a69-8991-f772-bfcd-398977b1d2db@crossbario.com>

> Python 3.5 is still the default python3 version in Debian stable, so
> updating beyond that might make it more complex for Debian users to
> install Twisted.

yeah, that, and: as of today, pypy3 is at python 3.5

so _not_ supporting 3.5 would definitely be a problem for us (crossbar.io)

dropping 3.4: no problem with that, same with 3.3

dropping 2.7: np .. even though there are users of autobahn (a 
websocket/wamp library) still on py2.7, and we fully support that right 
now and have no plans (yet) to retire it

cheers,
/Tobias


From donal.mcmullan at gmail.com  Thu Mar 28 08:01:39 2019
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Thu, 28 Mar 2019 14:01:39 +0000
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <03028a69-8991-f772-bfcd-398977b1d2db@crossbario.com>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
 <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>
 <4047129.1hCDKizrtX@hyperion>
 <03028a69-8991-f772-bfcd-398977b1d2db@crossbario.com>
Message-ID: <CADf-aJEtXQU_RqfTK6brwWr5gmswTZF1Wc_OeqrFB=9q79h7+A@mail.gmail.com>

Twisted on pypy is important for us. We don't care about 3.4 support at all.

Thanks

DJM

On Wed, 27 Mar 2019 at 20:55, Tobias Oberstein <
tobias.oberstein at crossbario.com> wrote:

> > Python 3.5 is still the default python3 version in Debian stable, so
> > updating beyond that might make it more complex for Debian users to
> > install Twisted.
>
> yeah, that, and: as of today, pypy3 is at python 3.5
>
> so _not_ supporting 3.5 would definitely be a problem for us (crossbar.io)
>
> dropping 3.4: no problem with that, same with 3.3
>
> dropping 2.7: np .. even though there are users of autobahn (a
> websocket/wamp library) still on py2.7, and we fully support that right
> now and have no plans (yet) to retire it
>
> cheers,
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190328/478aefb8/attachment.html>

From grimmtooth at gmail.com  Fri Mar 29 11:20:35 2019
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Fri, 29 Mar 2019 13:20:35 -0400
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <CA+1iZEcUe3T=2zt2Tkn4H_gSOgQ=9GE-TfN75pOT-98PLEnVUQ@mail.gmail.com>

 I don't have any skin in this game other than as a consumer, but I agree
that the proposed plan makes sense, FWIW.

Freezing at a specific version in sync (ish) with the Py2 support
notification has a certain symmetry to it :)

Regards,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190329/a6faeaec/attachment.html>

From twm at freecog.net  Fri Mar 29 12:13:46 2019
From: twm at freecog.net (Tom Most)
Date: Fri, 29 Mar 2019 14:13:46 -0400
Subject: [Twisted-Python] 
 =?utf-8?q?A_Proposal_for_reducing_the_burden_of?=
 =?utf-8?q?_developing_on_Twisted_by_dropping_Python_2_support?=
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <b7de3b7c-f882-4c0e-839c-d4eddcc24267@www.fastmail.com>

This also works for me and at $EMPLOYER. We expect the same or similar to happen in many more parts of the Python ecosystem.

-- 
  Tom Most
  twm at freecog.net

On Mon, Mar 25, 2019, at 3:15 AM, Amber Brown wrote:
> Hi everyone,
> 
> Since the Python 2 EOL date is rapidly approaching, I thought it was 
> time we consider dropping Python 2 support.
> 
> I personally find that Python 2 compat adds a huge amount of overhead 
> when working on and maintaining Twisted, and think that with the current 
> maintainer availability, dropping it sooner rather than later would have 
> a beneficial effect on how much work we spend on shims/compat, 
> complexity, and our ability to ship new features, as well as onboarding 
> people who are interested in the project, but have no interest (or 
> experience!) in Python 2.7.
> 
> It is basically summed up by doing a feature freeze on an agreed-upon 
> version of Twisted, that will be the last version released for 2.7. It 
> would be abnormal in that it would get security fixes (our current 
> policy is to only release them for current versions) and critical 
> bugfixes, but would otherwise be frozen.
> 
> One of my rationales is that from some analysis of PyPI download 
> statistics, the vast majority of Python 2 users are using old versions 
> of Twisted, while nearly all our Python 3 users are on the latest 
> version. As such, I believe freezing a version that will get security 
> updates but no new features would not be a massive loss to those stuck 
> on Python 2 for whatever reason.
> 
> Twisted's compatibility policy would still apply, ensuring that Python 
> 2/3 compatible software using Twisted would be able to use the older 
> Twisted version on Python 2, and the newer version on Python 3, as you 
> would usually expect.
> 
> You can find the proposal here, in this handy-dandy Google Doc: 
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
> 
> Comments are welcome, as well as which timeline seems reasonable.
> 
> - Amber
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From twm at freecog.net  Fri Mar 29 12:19:25 2019
From: twm at freecog.net (Tom Most)
Date: Fri, 29 Mar 2019 14:19:25 -0400
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
Message-ID: <9fbdfb3b-b6f6-42cc-a65d-03a96794cbc5@www.fastmail.com>

I'm happy to drop 3.4 support and prune our build matrix a bit, as well as that in downstream projects.

--
 Tom Most
 twm at freecog.net



On Tue, Mar 26, 2019, at 7:59 PM, Craig Rodrigues wrote:
> What do people think of dropping Twisted support for Python 3.4?
> 
> According to https://devguide.python.org/#status-of-python-branches
> 
> Python 3.4 EOL'd on March 19, 2019.
> 
> In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> the end of this year we will have Python 3.8.
> 
> That's quite a lot of Python versions to support.
> 
> Python 3.5 introduced async/await keywords, which are very relevant to Twisted:
> https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492
> 
> If it makes sense, it would be nice to use these keywords as first-level features in Twisted.
> 
> Since Amber brought up discussion of dropping Python 2.7 here:
> https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html
> 
> I thought I would raise dropping Python 3.4 also.
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190329/fe522204/attachment.html>

From trac at twistedmatrix.com  Sun Mar 31 00:05:24 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 31 Mar 2019 06:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1554012324.64.5799705070018996643@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190331/04393fb2/attachment.html>

From glyph at twistedmatrix.com  Sat Mar  2 23:32:58 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2019 22:32:58 -0800
Subject: [Twisted-Python] a farewell to buildbot
Message-ID: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>

Thanks to our long-suffering contributors Adi Roiban and Kyle Altendorf, we now have macOS builds running on circleCI!  Supposedly we have sufficient resources to actually run all our builds, too, without running out of CI juice before the end of each month :-).

As such, I've changed our repository configuration to drop the old, somewhat outdated macOS buildbot, and replace it with the Circle CI infrastructure which should cover that platform.

With this change, none of the buildbot builders define our gating-to-trunk continuous integration.  This is a great thing for the project, as it means external contributors will be able to get a "this is acceptable to merge" green checkmark without ./admin/pr_as_branch or any other similar repo:write-person-requiring shenanigans.

However, it also means that we are now spending a not-insignificant amount of contributor time maintaining a farm of machines that do tons of continuous integration work, which may not really be telling us anything interesting about Twisted's quality or correctness.  I think it might be worth considering decommissioning buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> entirely, unless some of the vendors of the platforms and kernels covered there would like to step up to do some maintenance themselves.  It's been a decade or so since Twisted was spotting regular regressions in Linux, FreeBSD or Darwin, so I think this style of build infrastructure may be a relic of a bygone era.

For my part, I probably will start doing any contributions on my own fork, since that will mean I don't have to constantly kick random spurious RHEL7 buildbot failures to avoid getting a red "X" on my PRs.

Furthermore, if we decom'd buildbot as software infrastructure, we'd still have a significant amount of cloud / hardware resources we could potentially throw at *other* problems facing the project which cloud CI doesn't cover as well, like SpeedCenter.

So, do folks have any strong feelings, or would anyone like to volunteer to help with some aspect of this?  As always: we don't have enough folks to keep up with the operational demands of twistedmatrix.com <http://twistedmatrix.com/>, so if you want to dev some ops or ops some infra, please speak up :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190302/22506712/attachment-0002.html>

From hawkowl at atleastfornow.net  Sat Mar  2 23:45:47 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 2 Mar 2019 22:45:47 -0800
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
Message-ID: <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>

I have been switching matrix.org to Buildkite's open source offering (where
you bring your own builders). It might be an option for things like
codespeed, which we still would want to be consistent.

Other than that, I was taking a look at Azure Pipelines last year. I think
we could get a decent amount of hosted, easy to maintain build
infrastructure through Microsoft, which includes the potential to also
ditch running our own Windows for testing.

- Amber

On Sat., 2 Mar. 2019, 22:33 Glyph, <glyph at twistedmatrix.com> wrote:

> Thanks to our long-suffering contributors Adi Roiban and Kyle Altendorf,
> we now have macOS builds running on circleCI!  Supposedly we have
> sufficient resources to actually run all our builds, too, without running
> out of CI juice before the end of each month :-).
>
> As such, I've changed our repository configuration to drop the old,
> somewhat outdated macOS buildbot, and replace it with the Circle CI
> infrastructure which should cover that platform.
>
> With this change, none of the buildbot builders define our gating-to-trunk
> continuous integration.  This is a great thing for the project, as it means
> external contributors will be able to get a "this is acceptable to merge"
> green checkmark without ./admin/pr_as_branch or any other similar
> repo:write-person-requiring shenanigans.
>
> However, it also means that we are now spending a not-insignificant amount
> of contributor time maintaining a farm of machines that do tons of
> continuous integration work, which may not really be telling us anything
> interesting about Twisted's quality or correctness.  I think it might be
> worth considering decommissioning buildbot.twistedmatrix.com entirely,
> unless some of the vendors of the platforms and kernels covered there would
> like to step up to do some maintenance themselves.  It's been a decade or
> so since Twisted was spotting regular regressions in Linux, FreeBSD or
> Darwin, so I think this style of build infrastructure may be a relic of a
> bygone era.
>
> For my part, I probably will start doing any contributions on my own fork,
> since that will mean I don't have to constantly kick random spurious RHEL7
> buildbot failures to avoid getting a red "X" on my PRs.
>
> Furthermore, if we decom'd buildbot as software infrastructure, we'd still
> have a significant amount of cloud / hardware resources we could
> potentially throw at *other* problems facing the project which cloud CI
> doesn't cover as well, like SpeedCenter.
>
> So, do folks have any strong feelings, or would anyone like to volunteer
> to help with some aspect of this?  As always: we don't have enough folks to
> keep up with the operational demands of twistedmatrix.com, so if you want
> to dev some ops or ops some infra, please speak up :).
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190302/f8f9a2f2/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar  3 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Mar 2019 07:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1551596718.54.8156496412292518531@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190303/3d0f4710/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Mar  3 00:18:51 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 2 Mar 2019 23:18:51 -0800
Subject: [Twisted-Python] secrets management
Message-ID: <7D413F02-48A9-48B2-B69D-06E96626644A@twistedmatrix.com>

Thanks to 1Password's open source program, we now have the ability to conveniently and securely share secrets amongst the Twisted core team:

https://github.com/1Password/1password-teams-open-source/pull/106#issuecomment-467884584 <https://github.com/1Password/1password-teams-open-source/pull/106#issuecomment-467884584>

If you're interested in using this (for example, if you do anything with Twisted infra) please drop me an email from your twistedmatrix.com <http://twistedmatrix.com/> email address and I'll add you to the team.  (If you do infra work but don't have a twistedmatrix.com <http://twistedmatrix.com/> email address, I'll set you up with one.)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190302/71e4b39b/attachment-0002.html>

From chris at withers.org  Sun Mar  3 07:07:58 2019
From: chris at withers.org (Chris Withers)
Date: Sun, 3 Mar 2019 14:07:58 +0000
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
 <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>
Message-ID: <95b8942e-685d-55f3-4534-46171b7e9a47@withers.org>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190303/1390acfb/attachment-0002.html>

From sda at fstab.net  Sun Mar  3 09:40:11 2019
From: sda at fstab.net (Kyle Altendorf)
Date: Sun, 03 Mar 2019 11:40:11 -0500
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <95b8942e-685d-55f3-4534-46171b7e9a47@withers.org>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
 <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>
 <95b8942e-685d-55f3-4534-46171b7e9a47@withers.org>
Message-ID: <b2f4fb10f46d01552c8982347b473512@fstab.net>

On 2019-03-03 09:07, Chris Withers wrote:
> What do you make of CircleCI?

I found it mostly pleasant but I'm expecting to be using Azure 
personally.  It's the only one that I've worked with that covers what I 
think ought to be the basics.  Linux/macOS/Windows, CPython 2,7/3.4+ 
(ok, maybe 3.5+...), and PyPy 2/3 (I had to download it but it wasn't 
too painful to get it working), and artifact storage.

CircleCI was nice but it lacks Windows entirely and only has CPython 2/3 
on macOS iirc.  They do provide some nice templating features.  AppVeyor 
lacks macOS (I haven't tried their Linux) and just one worker at a time. 
  Travis now has the OSes covered and their matrixing is nice (until you 
do anything 'special' and it can't be used afaik) but only really 
supports Python on Linux and doesn't have artifact storage.

All that said, I just started with Azure Pipelines this week and have 
only put one pure Python project on it so who knows what will turn up as 
I do more.

https://dev.azure.com/altendky/exttr/_build/results?buildId=120

Cheers,
-kyle



From twotonespirit at gmail.com  Sun Mar  3 10:31:06 2019
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sun, 3 Mar 2019 10:31:06 -0700
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <b2f4fb10f46d01552c8982347b473512@fstab.net>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
 <CAMxb2ishvS0HCcc3CGoPnrAV5-=fBQcm0O+nWRu=p_G6HRkLhQ@mail.gmail.com>
 <95b8942e-685d-55f3-4534-46171b7e9a47@withers.org>
 <b2f4fb10f46d01552c8982347b473512@fstab.net>
Message-ID: <CAMGywB6nvj4mkpC3Mg5zd2rBOLu5weROC4-CVSsOLtfDWoca8g@mail.gmail.com>

Hawkowl: I didn't realize you were involved in matrix.  I love matrix!

On Sun, Mar 3, 2019 at 9:40 AM Kyle Altendorf <sda at fstab.net> wrote:

> On 2019-03-03 09:07, Chris Withers wrote:
> > What do you make of CircleCI?
>
> I found it mostly pleasant but I'm expecting to be using Azure
> personally.  It's the only one that I've worked with that covers what I
> think ought to be the basics.  Linux/macOS/Windows, CPython 2,7/3.4+
> (ok, maybe 3.5+...), and PyPy 2/3 (I had to download it but it wasn't
> too painful to get it working), and artifact storage.
>
> CircleCI was nice but it lacks Windows entirely and only has CPython 2/3
> on macOS iirc.  They do provide some nice templating features.  AppVeyor
> lacks macOS (I haven't tried their Linux) and just one worker at a time.
>   Travis now has the OSes covered and their matrixing is nice (until you
> do anything 'special' and it can't be used afaik) but only really
> supports Python on Linux and doesn't have artifact storage.
>
> All that said, I just started with Azure Pipelines this week and have
> only put one pure Python project on it so who knows what will turn up as
> I do more.
>
> https://dev.azure.com/altendky/exttr/_build/results?buildId=120
>
> Cheers,
> -kyle
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190303/a6c7226f/attachment-0002.html>

From contact at evilham.com  Sun Mar  3 10:46:56 2019
From: contact at evilham.com (Evilham)
Date: Sun, 3 Mar 2019 18:46:56 +0100
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
Message-ID: <11f7a8c9-4627-c412-8f0f-87134cf6f550@evilham.com>

Am 03/03/2019 um 7:32 schrieb Glyph:
> So, do folks have any strong feelings, or would anyone like to volunteer
> to help with some aspect of this?  As always: we don't have enough folks
> to keep up with the operational demands of twistedmatrix.com
> <http://twistedmatrix.com>, so if you want to dev some ops or ops some
> infra, please speak up :).

This together with the 1password email raises following question:
Is there anything particular that needs more support?

Amber's point about Buildkite's bring-your-own-builders offering sounds
interesting, and if lack of Mensch-power is the only issue, maybe a call
to arms in a somewhat more specific fashion would be in order?

I mention because that would help with some ML readers who may think "no
way I can help with that" and actually could have the expertise on
specific bits that are needed.

Also, listing needs could be a good exercise overall and it could be
listed here: https://twistedmatrix.com/trac/wiki/Infrastructure

PS: Since Amber is part of Matrix' team, I just realised the silliest
thing: following Twisted's tradition of awesome/awful naming puns,
Matrix' Homeserver reference implementation, synapse, is written on
Twisted, and this project's website is... twistedmatrix.com (!)

-- 
Evilham



From glyph at twistedmatrix.com  Sun Mar  3 13:41:05 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 Mar 2019 12:41:05 -0800
Subject: [Twisted-Python] a farewell to buildbot
In-Reply-To: <11f7a8c9-4627-c412-8f0f-87134cf6f550@evilham.com>
References: <B4A8EF52-C238-467D-9D13-F86A422CF139@twistedmatrix.com>
 <11f7a8c9-4627-c412-8f0f-87134cf6f550@evilham.com>
Message-ID: <D5AB0E96-E53B-4794-845C-E49CEB6835DD@twistedmatrix.com>



> On Mar 3, 2019, at 9:46 AM, Evilham <contact at evilham.com> wrote:
> 
> Am 03/03/2019 um 7:32 schrieb Glyph:
>> So, do folks have any strong feelings, or would anyone like to volunteer
>> to help with some aspect of this?  As always: we don't have enough folks
>> to keep up with the operational demands of twistedmatrix.com
>> <http://twistedmatrix.com>, so if you want to dev some ops or ops some
>> infra, please speak up :).
> 
> This together with the 1password email raises following question:
> Is there anything particular that needs more support?

Thanks for asking!

> Amber's point about Buildkite's bring-your-own-builders offering sounds
> interesting, and if lack of Mensch-power is the only issue, maybe a call
> to arms in a somewhat more specific fashion would be in order?

The bystander effect might indeed be a big reason few folks have stepped forward.

Broadly speaking there are three areas that would be good to get help with, in rough order of importance (although they're all super important):

reducing the amount of regular work it takes to keep things running
setting up systems to get more concrete and immediate benefits out of our dogfooding Twisted and related technology
keeping an eye on the running systems and reacting to alerts

Projects that fall into bucket number 1 include:

dockerizing everything so that instead of a long, elaborate fabric script (https://github.com/twisted-infra/braid/ <https://github.com/twisted-infra/braid/>) we can just `docker-compose up` to get something resembling our current infrastructure.  these services include:
the website
the DNS service
the mailman instance serving this list
codespeed
buildbot, if it keeps being A Thing
the IRC bot (kenaan) that reminds us of the work that needs doing
decomissioning Trac and replacing its workflows with a Github bot (note that we would want to preserve stuff like the regular dev-stats email, the IRC bot, https://twisted.reviews/ <https://twisted.reviews/> etc)
adding an API to our DNS service so that we could use i.e. DNS-01 certificate provisioning to get TLS certificates for other services

In the second bucket would come things like setting up Sentry to capture errors from all those services (web, dns, trac, etc) all of which have bits of Twisted running in them.  In the third would of course be getting admin access to these machines and restarting things when all else has failed, so that hawkowl, mark, or myself doesn't need to do it.

> I mention because that would help with some ML readers who may think "no
> way I can help with that" and actually could have the expertise on
> specific bits that are needed.

The main thing that is required here is the enthusiasm, energy, and spare time required to be responsible for some of this stuff, and to regularly dedicate a little energy to any or all of the above things.

Right now, the operations work is drudgery because nobody has the energy to take it to the next level, and it's just about trying not to break things too badly.  But if someone really put some time into it, we could potentially build some really cool event-driven demos with Twisted that could get people (and core developers!) really excited to develop more interesting features, and we have plenty of hardware to run such things.

> Also, listing needs could be a good exercise overall and it could be
> listed here: https://twistedmatrix.com/trac/wiki/Infrastructure <https://twistedmatrix.com/trac/wiki/Infrastructure>

A good initial project for an interested party would be perhaps to start editing that page by reading Braid and this email.

> PS: Since Amber is part of Matrix' team, I just realised the silliest
> thing: following Twisted's tradition of awesome/awful naming puns,
> Matrix' Homeserver reference implementation, synapse, is written on
> Twisted, and this project's website is... twistedmatrix.com (!)

I'm really hoping to bring back more of this.  For example, the "twisted matrix" was originally so named because the sub-projects were twisted dot something, and these were termed "dot products".

;-).

I hope this message was helpful!

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190303/c2503071/attachment-0002.html>

From twm at freecog.net  Mon Mar  4 16:12:28 2019
From: twm at freecog.net (Tom Most)
Date: Mon, 04 Mar 2019 23:12:28 +0000
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate
 Announcement
In-Reply-To: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
References: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
Message-ID: <9CFF17CE-5D53-4453-B429-B134E36FAC25@freecog.net>

Hi Amber,

I wanted to make sure you've seen this: https://twistedmatrix.com/trac/ticket/9592

Twisted now references a symbol not present in its minimal crypography requirement.

---Tom


On February 24, 2019 11:19:28 AM PST, Amber Brown <hawkowl at atleastfornow.net> wrote:
>Hello from PyCascades! Straight from the Pacific North-West, a new 
>Twisted release candidate!
>
>In this release, there is:
>
>- twisted.web.client.HostnameCachingHTTPSPolicy was added as a new 
>contextFactory option. This reduces the performance overhead for making
>
>many TLS connections to the same host.
>- twisted.conch.ssh.keys can now read private keys in the new 
>"openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default
>
>in OpenSSH 7.8.
>- The sample code in the "Twisted Web In 60 Seconds" tutorial runs on 
>Python 3.
>- DeferredLock and DeferredSemaphore can be used as asynchronous
>context 
>managers on Python 3.5+.
>- twisted.internet.ssl.CertificateOptions now uses 32 random bytes 
>instead of an MD5 hash for the ssl session identifier context.
>- twisted.python.failure.Failure.getTracebackObject now returns 
>traceback objects whose frames can be passed into traceback.print_stack
>
>for better debugging of where the exception came from.
>- Much more! 20+ tickets closed overall.
>
>You can get the tarball and the NEWS file at 
>https://twistedmatrix.com/Releases/rc/19.2.0rc1/ , or you can try it
>out 
>from PyPI:
>
>     python -m pip install Twisted==19.2.0rc1
>
>Please test it, and let me know how your applications fare, good or
>bad! 
>If nothing comes up, 19.2 will release in a week.
>
>Twisted regards,
>
>Amber Brown (hawkowl)
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190304/6b82963d/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Mar  4 16:14:08 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Mon, 4 Mar 2019 15:14:08 -0800
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate
 Announcement
In-Reply-To: <9CFF17CE-5D53-4453-B429-B134E36FAC25@freecog.net>
References: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
 <9CFF17CE-5D53-4453-B429-B134E36FAC25@freecog.net>
Message-ID: <CAMxb2iv8nzi0sUFHLHYA6ZxDrdyLP3RxVADuRFUTLH+h+Zbgrg@mail.gmail.com>

Hi Tom,

Thanks for letting me know.

I propose we update this dependency and do an rc2, would anyone have an
objection to that?

- Amber

On Mon., 4 Mar. 2019, 15:12 Tom Most, <twm at freecog.net> wrote:

> Hi Amber,
>
> I wanted to make sure you've seen this:
> https://twistedmatrix.com/trac/ticket/9592
>
> Twisted now references a symbol not present in its minimal crypography
> requirement.
>
> ---Tom
>
>
> On February 24, 2019 11:19:28 AM PST, Amber Brown <
> hawkowl at atleastfornow.net> wrote:
>>
>> Hello from PyCascades! Straight from the Pacific North-West, a new
>> Twisted release candidate!
>>
>> In this release, there is:
>>
>> - twisted.web.client.HostnameCachingHTTPSPolicy was added as a new
>> contextFactory option. This reduces the performance overhead for making
>> many TLS connections to the same host.
>> - twisted.conch.ssh.keys can now read private keys in the new
>> "openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default
>> in OpenSSH 7.8.
>> - The sample code in the "Twisted Web In 60 Seconds" tutorial runs on
>> Python 3.
>> - DeferredLock and DeferredSemaphore can be used as asynchronous context
>> managers on Python 3.5+.
>> - twisted.internet.ssl.CertificateOptions now uses 32 random bytes
>> instead of an MD5 hash for the ssl session identifier context.
>> - twisted.python.failure.Failure.getTracebackObject now returns
>> traceback objects whose frames can be passed into traceback.print_stack
>> for better debugging of where the exception came from.
>> - Much more! 20+ tickets closed overall.
>>
>> You can get the tarball and the NEWS file at
>> https://twistedmatrix.com/Releases/rc/19.2.0rc1/ , or you can try it out
>> from PyPI:
>>
>>      python -m pip install Twisted==19.2.0rc1
>>
>> Please test it, and let me know how your applications fare, good or bad!
>> If nothing comes up, 19.2 will release in a week.
>>
>> Twisted regards,
>>
>> Amber Brown (hawkowl)
>>
>> ------------------------------
>>
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190304/bf885b5e/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Mar  4 22:03:52 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Mar 2019 21:03:52 -0800
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate
 Announcement
In-Reply-To: <CAMxb2iv8nzi0sUFHLHYA6ZxDrdyLP3RxVADuRFUTLH+h+Zbgrg@mail.gmail.com>
References: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
 <9CFF17CE-5D53-4453-B429-B134E36FAC25@freecog.net>
 <CAMxb2iv8nzi0sUFHLHYA6ZxDrdyLP3RxVADuRFUTLH+h+Zbgrg@mail.gmail.com>
Message-ID: <49638820-4B78-44FB-8010-415A264E0ABC@twistedmatrix.com>

Let's do it.

> On Mar 4, 2019, at 3:14 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi Tom,
> 
> Thanks for letting me know. 
> 
> I propose we update this dependency and do an rc2, would anyone have an objection to that?
> 
> - Amber
> 
> On Mon., 4 Mar. 2019, 15:12 Tom Most, <twm at freecog.net <mailto:twm at freecog.net>> wrote:
> Hi Amber,
> 
> I wanted to make sure you've seen this: https://twistedmatrix.com/trac/ticket/9592 <https://twistedmatrix.com/trac/ticket/9592>
> 
> Twisted now references a symbol not present in its minimal crypography requirement.
> 
> ---Tom
> 
> 
> On February 24, 2019 11:19:28 AM PST, Amber Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> Hello from PyCascades! Straight from the Pacific North-West, a new 
> Twisted release candidate!
> 
> In this release, there is:
> 
> - twisted.web.client.HostnameCachingHTTPSPolicy was added as a new 
> contextFactory option. This reduces the performance overhead for making 
> many TLS connections to the same host.
> - twisted.conch.ssh.keys can now read private keys in the new 
> "openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default 
> in OpenSSH 7.8.
> - The sample code in the "Twisted Web In 60 Seconds" tutorial runs on 
> Python 3.
> - DeferredLock and DeferredSemaphore can be used as asynchronous context 
> managers on Python 3.5+.
> - twisted.internet.ssl.CertificateOptions now uses 32 random bytes 
> instead of an MD5 hash for the ssl session identifier context.
> - twisted.python.failure.Failure.getTracebackObject now returns 
> traceback objects whose frames can be passed into traceback.print_stack 
> for better debugging of where the exception came from.
> - Much more! 20+ tickets closed overall.
> 
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/19.2.0rc1 <https://twistedmatrix.com/Releases/rc/19.2.0rc1>/ , or you can try it out 
> from PyPI:
> 
>      python -m pip install Twisted==19.2.0rc1
> 
> Please test it, and let me know how your applications fare, good or bad! 
> If nothing comes up, 19.2 will release in a week.
> 
> Twisted regards,
> 
> Amber Brown (hawkowl)
> 
> 
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190304/199d048f/attachment-0002.html>

From twm at freecog.net  Wed Mar  6 00:24:47 2019
From: twm at freecog.net (Tom Most)
Date: Wed, 06 Mar 2019 02:24:47 -0500
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate
 Announcement
In-Reply-To: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
References: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>
Message-ID: <2a25245d-78a9-4323-9ef0-0dc8610f6b61@www.fastmail.com>

Another note:

> twisted.web.client.Request and twisted.web.client.HTTPClient were both vulnerable to header injection attacks. They now replace linear whitespace ('r', 'n', and 'rn') with a single space. (#9421)

Headers now assumes the value is a list of string (or bytes). It used to accept a list of arbitrary values. When using the twisted.web resource model (the IRequest.setHeader API) the value would be coerced.

This change actually broke some of my tests, though not any production code. I was passing a list where a scalar string was required (this, precisely: https://github.com/twisted/treq/pull/237). The result was a response with a header like:

    Foo: ['value']

That's not a useful feature in this case so I am happy to have caught the bug but it does seem like there may be real-world code this breaks. For example, request.setHeader('Retry-After', 10) would produce a valid header.

(Also the release note seems to be missing some backslashes in the bit I quoted.)

---Tom



From wiml at hhhh.org  Thu Mar  7 18:42:56 2019
From: wiml at hhhh.org (Wim Lewis)
Date: Thu, 7 Mar 2019 17:42:56 -0800
Subject: [Twisted-Python] Are t.w.s.Requests's prepath/postpath part of the
 IRequest interface?
Message-ID: <20190308014256.GA11809@kosmos.hhhh.org>

I was just working on the documentation to fix Trac bug #5533, but I 
have a question about intent. Right now, prepath and postpath are 
undocumented; as best as I can tell, though, they are intended to be 
public. Question is, are they part of the IRequest interface, or only of 
the Request implementation?

(There aren't any other implementations of IRequest in Twisted, so I 
suppose it's a little bit academic.)

It seems to me that they should be on IRequest, since IRequest already 
has methods like prePathURL() which depend on the information in 
prepath/postpath. Leaving these attributes off of IRequest wouldn't 
provide any more flexibility to implementers of the interface, and 
postpath in particular is very useful to people writing render methods.

 <https://twistedmatrix.com/trac/ticket/5533>



From trac at twistedmatrix.com  Sun Mar 10 00:05:19 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Mar 2019 07:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1552201519.35.4015975272680201973@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190310/e660ffb3/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Mar 10 21:06:12 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 10 Mar 2019 20:06:12 -0700
Subject: [Twisted-Python] Are t.w.s.Requests's prepath/postpath part of
 the IRequest interface?
In-Reply-To: <20190308014256.GA11809@kosmos.hhhh.org>
References: <20190308014256.GA11809@kosmos.hhhh.org>
Message-ID: <C9038986-2A58-4A06-8F77-49323EBB287B@twistedmatrix.com>


> On Mar 7, 2019, at 5:42 PM, Wim Lewis <wiml at hhhh.org> wrote:
> 
> I was just working on the documentation to fix Trac bug #5533, but I 
> have a question about intent. Right now, prepath and postpath are 
> undocumented; as best as I can tell, though, they are intended to be 
> public. Question is, are they part of the IRequest interface, or only of 
> the Request implementation?

I think that this is a bit of a special case, in that *normally* if something isn’t mentioned in an interface you need to add a new interface, it’s an incompatible change to add it, etc; but, functionally, there are a bunch of things you can’t really implement with the current IRequest unless you assume it has .prepath and .postpath attributes.  If someone has an IRequest proxy today it really needs to special case those attributes or it will be unusable for all but the most trivial applications.

So yeah: let’s correct the documentation here, and add them.

> (There aren't any other implementations of IRequest in Twisted, so I 
> suppose it's a little bit academic.)
> 

Also, yeah, that.

> It seems to me that they should be on IRequest, since IRequest already 
> has methods like prePathURL() which depend on the information in 
> prepath/postpath. Leaving these attributes off of IRequest wouldn't 
> provide any more flexibility to implementers of the interface, and 
> postpath in particular is very useful to people writing render methods.
> 
> <https://twistedmatrix.com/trac/ticket/5533>
> 

Agreed on all counts.


From chris at withers.org  Wed Mar 13 05:20:55 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 13 Mar 2019 11:20:55 +0000
Subject: [Twisted-Python] giving a reason when adding a timeout
Message-ID: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>

Hi All,

Unless I'm missing something, Deferred.addTimeout is really unhelpful in 
terms on providing context about *what* timed out.
TimeoutError(<some number>, 'Deferred') just isn't that useful.

How come addTimeout doesn't let you specify a textual reason, or 
otherwise provide some context about the timeout?

Am I missing something obvious here?

Chris



From adi at roiban.ro  Wed Mar 13 06:24:58 2019
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 13 Mar 2019 12:24:58 +0000
Subject: [Twisted-Python] giving a reason when adding a timeout
In-Reply-To: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>
References: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>
Message-ID: <CAFycZ9fm4XDkoHw=_XOEOtgk0dxsJL-kQ20NP47Dztxamgr7rw@mail.gmail.com>

Hi,

On Wed, 13 Mar 2019 at 11:21, Chris Withers <chris at withers.org> wrote:
>
> Hi All,
>
> Unless I'm missing something, Deferred.addTimeout is really unhelpful in
> terms on providing context about *what* timed out.
> TimeoutError(<some number>, 'Deferred') just isn't that useful.
>
> How come addTimeout doesn't let you specify a textual reason, or
> otherwise provide some context about the timeout?
>
> Am I missing something obvious here?

I don't know what kind of context do you need :)

You can add your own errback and add your extra error handling there.

There is also onTimeoutCancel argument.

If there is anything missing from the API, feel free to send a pull
request in GitHub.

I guess that it was implemented in this way as the current
implementation serves the purpose for the people who have added the
support for timeout.

Regards,
Adi



> Chris
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Adi Roiban



From chris at withers.org  Wed Mar 13 10:07:33 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 13 Mar 2019 16:07:33 +0000
Subject: [Twisted-Python] giving a reason when adding a timeout
In-Reply-To: <CAFycZ9fm4XDkoHw=_XOEOtgk0dxsJL-kQ20NP47Dztxamgr7rw@mail.gmail.com>
References: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>
 <CAFycZ9fm4XDkoHw=_XOEOtgk0dxsJL-kQ20NP47Dztxamgr7rw@mail.gmail.com>
Message-ID: <7d1cc0bd-4d69-84fb-7298-7414766cd38b@withers.org>

>> Unless I'm missing something, Deferred.addTimeout is really unhelpful in
>> terms on providing context about *what* timed out.
>> TimeoutError(<some number>, 'Deferred') just isn't that useful.
>>
>> How come addTimeout doesn't let you specify a textual reason, or
>> otherwise provide some context about the timeout?
>>
>> Am I missing something obvious here?
> 
> I don't know what kind of context do you need :)

foo.addTimeout(myTimeout, reactor, message='never heard back')

> You can add your own errback and add your extra error handling there.

What's the must succinct way to get the above by adding an errback?

> There is also onTimeoutCancel argument.

Pretty clunky to write a whole function for either this or the errback 
just to change the useless 'Deferred' string in the current 
implementation with something useful.

> If there is anything missing from the API, feel free to send a pull
> request in GitHub.

What's the likely turn around time from me submitting a PR to when it 
ends up in a released version of Twisted that I can use?

Chris



From adi at roiban.ro  Wed Mar 13 17:36:38 2019
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 13 Mar 2019 23:36:38 +0000
Subject: [Twisted-Python] giving a reason when adding a timeout
In-Reply-To: <7d1cc0bd-4d69-84fb-7298-7414766cd38b@withers.org>
References: <e6c59a51-efb8-d218-789e-a92f2dbaa7c5@withers.org>
 <CAFycZ9fm4XDkoHw=_XOEOtgk0dxsJL-kQ20NP47Dztxamgr7rw@mail.gmail.com>
 <7d1cc0bd-4d69-84fb-7298-7414766cd38b@withers.org>
Message-ID: <CAFycZ9ckLhn_xd+VQxku0POn_0d0C+yxCDvjEFYmunQ5Dhvk=w@mail.gmail.com>

On Wed, 13 Mar 2019 at 16:07, Chris Withers <chris at withers.org> wrote:
>
> >> Unless I'm missing something, Deferred.addTimeout is really unhelpful in
> >> terms on providing context about *what* timed out.
> >> TimeoutError(<some number>, 'Deferred') just isn't that useful.
> >>
> >> How come addTimeout doesn't let you specify a textual reason, or
> >> otherwise provide some context about the timeout?
> >>
> >> Am I missing something obvious here?
> >
> > I don't know what kind of context do you need :)
>
> foo.addTimeout(myTimeout, reactor, message='never heard back')
>
> > You can add your own errback and add your extra error handling there.
>
> What's the must succinct way to get the above by adding an errback?
>

That is subjective :)
You can try something like this.

def eb_timeoutLog(failure, message):
    failure.trap(TimeoutError)
    print(message)

deferred = someJob()
deferred.addTimeout(10, reactor)
deferred.addErrback(eb_timeoutLog, message='never heard back')

or like this

def eb_timeoutLog(failure, message):
    failure.trap(TimeoutError)
    print(message)

def add_timeout(deferred, timeout, message):
    deferred.addTimeout(10, reactor)
    deferred.addErrback(eb_timeoutLog, message)

deferred = someJob()
add_timeout(deferred, message='never heard back')


> > There is also onTimeoutCancel argument.
>
> Pretty clunky to write a whole function for either this or the errback
> just to change the useless 'Deferred' string in the current
> implementation with something useful.

For production code I add errbacks anyway.
The errback catches various error conditions and does more than just
printing a text.
I am not missing anything here :)

> > If there is anything missing from the API, feel free to send a pull
> > request in GitHub.
>
> What's the likely turn around time from me submitting a PR to when it
> ends up in a released version of Twisted that I can use?

I don't you the answer to that question.

If this is something that you want to be improved, my suggestion is to
give it a try.

The whole Twisted was created by people who had an issue and were
willing to effort required to share the solution with the rest of the
world :)

> Chris



-- 
Adi Roiban



From trac at twistedmatrix.com  Sun Mar 17 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Mar 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1552802718.26.564061144324231146@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190317/2542230c/attachment-0002.html>

From wiml at hhhh.org  Tue Mar 19 01:13:12 2019
From: wiml at hhhh.org (Wim Lewis)
Date: Tue, 19 Mar 2019 00:13:12 -0700
Subject: [Twisted-Python] Any Windows users/reviewers around?
Message-ID: <20190319071312.GA1833@kosmos.hhhh.org>

There are a couple of Windows-specific PRs that I think could use a 
review and merge. I don't have access to Windows or really know much 
about it, or I'd do it.

The one I think is most pressing is Trac 9446 / PR 1025, which is a data 
corruption bug when using the IOCP reactor:
   https://twistedmatrix.com/trac/ticket/9446
   https://github.com/twisted/twisted/pull/1025
which may be a duplicate of:
   https://twistedmatrix.com/trac/ticket/3525

There are a few others in the review queue <https://twistedmatrix.com/trac/report/25>.



From itamar at itamarst.org  Thu Mar 21 09:27:35 2019
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 21 Mar 2019 11:27:35 -0400
Subject: [Twisted-Python] =?utf-8?q?ANN=3A_Eliot_1=2E7=2C_the_causal_logg?=
 =?utf-8?q?ing_library=2C_now_with_inlineCallbacks_support?=
Message-ID: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>

Python and Twisted's built-in `logging` output a stream of factoids: they’re interesting, but you can’t really tell what’s going on.

 * Why is your application slow?
 * What caused this code path to be chosen?
 * Why did this error happen?
Standard logging can’t answer these questions.

But with a better model you could understand what and why things happened in your application. You could pinpoint performance bottlenecks, you could understand what happened when, who called what.

That is what Eliot does. `Eliot` is a Python logging system that outputs causal chains of *actions*: actions can spawn other actions, and eventually they either *succeed or fail*. The resulting logs tell you the story of what your software did: what happened, and what caused it.


Eliot has had good Twisted support from the start, but the latest release also supports inlineCallbacks, thanks to Jean-Paul Calderone.

You can learn more about Eliot at https://eliot.readthedocs.io/en/stable/

-- 
Itamar Turner-Trauring
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190321/0fc9efd7/attachment-0002.html>

From chris at withers.org  Fri Mar 22 01:01:17 2019
From: chris at withers.org (Chris Withers)
Date: Fri, 22 Mar 2019 07:01:17 +0000
Subject: [Twisted-Python] ANN: Eliot 1.7, the causal logging library,
 now with inlineCallbacks support
In-Reply-To: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
Message-ID: <6f1ecf70-0478-ec33-a0da-81f90bfd0621@withers.org>

Hey Stranger, long time no speak :-)

On 21/03/2019 15:27, Itamar Turner-Trauring wrote:
> Python and Twisted's built-in |logging| output a stream of factoids: 
> they’re interesting, but you can’t really tell what’s going on.
> 
>   * Why is your application slow?
>   * What caused this code path to be chosen?
>   * Why did this error happen?
> 
> Standard logging can’t answer these questions.
> 
> But with a better model you could understand what and why things 
> happened in your application. You could pinpoint performance 
> bottlenecks, you could understand what happened when, who called what.
> 
> That is what Eliot does. |Eliot| is a Python logging system that outputs 
> causal chains of *actions*: actions can spawn other actions, and 
> eventually they either *succeed or fail*. The resulting logs tell you 
> the story of what your software did: what happened, and what caused it.

Have you looked at tools like https://www.jaegertracing.io/?
Feels like quite a similar approach to Eliot, and it's be fantastic if 
Eliot could provide contexts to Jaeger for Twisted applications!

cheers,

Chris



From itamar at itamarst.org  Fri Mar 22 07:34:53 2019
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 22 Mar 2019 09:34:53 -0400
Subject: [Twisted-Python] 
 =?utf-8?q?ANN=3A_Eliot_1=2E7=2C_the_causal_logg?=
 =?utf-8?q?ing_library=2C_now_with_inlineCallbacks_support?=
In-Reply-To: <6f1ecf70-0478-ec33-a0da-81f90bfd0621@withers.org>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
 <6f1ecf70-0478-ec33-a0da-81f90bfd0621@withers.org>
Message-ID: <69f6a71e-9e65-42ec-8738-008d0b1f1285@www.fastmail.com>

Hi!

On Fri, Mar 22, 2019, at 3:01 AM, Chris Withers wrote:

> Have you looked at tools like https://www.jaegertracing.io/?
> Feels like quite a similar approach to Eliot, and it's be fantastic if 
> Eliot could provide contexts to Jaeger for Twisted applications!

There are some similarities, yes. Eliot was in part inspired by a tool called Frost that was created before—and was similar to—Dapper. And Dapper inspired a whole generation of tracing systems.

However, these tracing systems are mostly about large scale distributed systems with lots of different services, so from what I've seen their operational requirements tend to be more heavyweight. And they often seem less interested in tracing within a program. Eliot is very Python-focused, and about smaller scale systems (and e.g. very useful for scientific computing, which Jaeger and similar systems likely have no interest in).

I have vaguely considered hooking up Eliot to OpenTracing so they can interoperate (https://github.com/itamarst/eliot/issues/361).

Easiest thing if you want to use Jaeger might be extending Jaeger's Python library to support Twisted, e.g. borrow DeferredContext API design from Eliot. But it's possible Eliot could go in the other direction and feed into Jaeger (I'm not sure whether OpenTracing spec provides for compatibility on wire level, or just language-level API).

-Itamar

(I might, by the way, have availability for related consulting at some point.)



From chris at cmsconstruct.com  Fri Mar 22 11:08:19 2019
From: chris at cmsconstruct.com (Chris Satterthwaite)
Date: Fri, 22 Mar 2019 12:08:19 -0500
Subject: [Twisted-Python] stop/start client connections with loseConnection
 in ReconnectingClientFactory
Message-ID: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>

Hello community,

 

First of all - thanks for an awesome platform!  I'm brand new to this
community, but have been using Twisted a couple years.

 

Reason for posting:

I've hit a condition with ReconnectingClientFactory that I'm not sure is per
design.  I have a work around right now, but need your perspective.  Seems
like there should be a better/right way to do this.

 

Attempted design:

I'd like to have long running TCP clients (forever until stopped), with a
long running TCP server.  When a long running client hits a problem with a
dependency (database is down, kafka bus unavailable, external API not
responding, etc), I want the client to go offline for a while and then come
back online. an automated, self-recovery type action.  Since it's not ok to
start/stop/restart the Twisted Reactor, I am letting the client finish
whatever it can do, disconnect from the service, destruct the dependencies,
wait for a period of time, and then attempt a clean re-initialization of
those dependencies along with reconnecting to the Twisted Server.

 

Problem case:

I'm using the ReconnectingClientFactory in my client.  When the client hits
a problem, it calls transport.loseConnection().  But whenever the client
calls this, after the disconnect - it does not reconnect; stopFactory is
called and everything exits. 

 

Work around:

I noticed some Twisted source code that works off factory.numPorts.  If
numPorts is 1 and the client loses the connection, it goes to 0 and calls
the cleanup.  So I conditionally increase this number right before
intentionally disconnecting, and then reset that after reconnecting.  This
solves the problem, but it's a hack.  

 

I'll attach the test scripts to this post (if attachments are allowed), but
the main code is with these functions in the factory:

 

                def clientConnectionLost(self, connector, reason):

                                print('  factory clientConnectionLost:
reason: {}'.format(reason))

                                # if self.disconnectedOnPurpose:

                                #             ## Hack to keep reactor alive

                                #             print('  factory
clientConnectionLost: increasing numPorts')

                                #             self.numPorts += 1

                                #             self.numPortsChanged = True

                                #             self.disconnectedOnPurpose =
False

                                print('  ... simulate client going idle
before attempting restart...')

                                time.sleep(5)

 
ReconnectingClientFactory.clientConnectionLost(self, connector, reason)

                                print('  factory clientConnectionLost:
end.\n')

 

                def clientConnectionMade(self):

                                print('  factory clientConnectionMade:
starting numPorts: {}'.format(self.numPorts))

                                # if self.numPortsChanged :

                                #             ## Resetting from hacked value

                                #             print('  factory
clientConnectionMade: decreasing numPorts')

                                #             self.numPorts -= 1

                                #             self.numPortsChanged = False

                                print('  factory clientConnectionMade:
finished numPorts: {}'.format(self.numPorts))

 

                def cleanup(self):

                                print('factory cleanup: calling
loseConnection')

                                if self.connectedClient is not None:

 
self.connectedClient.transport.loseConnection()

                                                self.disconnectedOnPurpose =
True

 

With the above lines commented out, once the cleanup call does
transport.loseConnection(), the factory stops at the end of
clientConnectionLost. 

 

 

Sample scripts/logs:

I've tried to create short test scripts and corresponding logs (with the
client failing, and then with it restarting when I use the workaround).
I've cut out several thousand lines to get down to something simple for the
example test scripts, but I know the client is still a little long.  Again,
I'm not sure if attachments work on the mailing list, but I'll attempt to
attach the client/server scripts with the corresponding pass/fail logs.

 

Thanks!

 

-Chris

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0002.html>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: testClient.py
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0004.ksh>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: testServer.py
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0005.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client_not_working.log
Type: application/octet-stream
Size: 1280 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0006.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client_working_with_hack.log
Type: application/octet-stream
Size: 2139 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0007.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.log
Type: application/octet-stream
Size: 682 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190322/df901b5a/attachment-0008.obj>

From chris at withers.org  Fri Mar 22 12:54:24 2019
From: chris at withers.org (Chris Withers)
Date: Fri, 22 Mar 2019 18:54:24 +0000
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
Message-ID: <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>

On 22/03/2019 17:08, Chris Satterthwaite wrote:
>                  def clientConnectionLost(self, connector, reason):

Without the rest of your class, it's difficult to see some of the 
potential problems... Could you put it on a gist somewhere?

> 
>                                  print('  factory clientConnectionLost: 
> reason: {}'.format(reason))
> 
>                                  # if self.disconnectedOnPurpose:
> 
>                                  #             ## Hack to keep reactor alive
> 
>                                  #             print('  factory 
> clientConnectionLost: increasing numPorts')
> 
>                                  #             self.numPorts += 1
> 
>                                  #             self.numPortsChanged = True
> 
>                                  #             
> self.disconnectedOnPurpose = False
> 
>                                  print('  ... simulate client going idle 
> before attempting restart...')
> 
>                                  time.sleep(5)

This will block the reactor, so don't think you should be doing it...

cheers,

Chris



From sean.dizazzo at gmail.com  Fri Mar 22 14:08:35 2019
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Fri, 22 Mar 2019 13:08:35 -0700
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
Message-ID: <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>

You may want to look at twisted.application.internet.ClientService
<https://twistedmatrix.com/documents/18.7.0/api/twisted.application.internet.ClientService.html>.
It uses the new endpoints instead of the `connectTCP()` stuff.  Not sure if
it applies in your situation, but it has all of the retry logic built in,
so that may make it easier to work with.


On Fri, Mar 22, 2019 at 10:08 AM Chris Satterthwaite <chris at cmsconstruct.com>
wrote:

> Hello community,
>
>
>
> First of all - thanks for an awesome platform!  I’m brand new to this
> community, but have been using Twisted a couple years.
>
>
>
> *Reason for posting:*
>
> I’ve hit a condition with ReconnectingClientFactory that I’m not sure is
> per design.  I have a work around right now, but need your perspective.
> Seems like there should be a better/right way to do this.
>
>
>
> *Attempted design:*
>
> I’d like to have long running TCP clients (forever until stopped), with a
> long running TCP server.  When a long running client hits a problem with a
> dependency (database is down, kafka bus unavailable, external API not
> responding, etc), I want the client to go offline for a while and then come
> back online… an automated, self-recovery type action.  Since it’s not ok to
> start/stop/restart the Twisted Reactor, I am letting the client finish
> whatever it can do, disconnect from the service, destruct the dependencies,
> wait for a period of time, and then attempt a clean re-initialization of
> those dependencies along with reconnecting to the Twisted Server.
>
>
>
> *Problem case:*
>
> I’m using the ReconnectingClientFactory in my client.  When the client
> hits a problem, it calls transport.loseConnection().  But whenever the
> client calls this, after the disconnect – it does not reconnect;
> stopFactory is called and everything exits.
>
>
>
> *Work around:*
>
> I noticed some Twisted source code that works off factory.numPorts.  If
> numPorts is 1 and the client loses the connection, it goes to 0 and calls
> the cleanup.  So I conditionally increase this number right before
> intentionally disconnecting, and then reset that after reconnecting.  This
> solves the problem, but it’s a hack.
>
>
>
> I’ll attach the test scripts to this post (if attachments are allowed),
> but the main code is with these functions in the factory:
>
>
>
>                 def clientConnectionLost(self, connector, reason):
>
>                                 print('  factory clientConnectionLost:
> reason: {}'.format(reason))
>
>                                 # if self.disconnectedOnPurpose:
>
>                                 #             ## Hack to keep reactor alive
>
>                                 #             print('  factory
> clientConnectionLost: increasing numPorts')
>
>                                 #             self.numPorts += 1
>
>                                 #             self.numPortsChanged = True
>
>                                 #             self.disconnectedOnPurpose =
> False
>
>                                 print('  ... simulate client going idle
> before attempting restart...')
>
>                                 time.sleep(5)
>
>
> ReconnectingClientFactory.clientConnectionLost(self, connector, reason)
>
>                                 print('  factory clientConnectionLost:
> end.\n')
>
>
>
>                 def clientConnectionMade(self):
>
>                                 print('  factory clientConnectionMade:
> starting numPorts: {}'.format(self.numPorts))
>
>                                 # if self.numPortsChanged :
>
>                                 #             ## Resetting from hacked
> value
>
>                                 #             print('  factory
> clientConnectionMade: decreasing numPorts')
>
>                                 #             self.numPorts -= 1
>
>                                 #             self.numPortsChanged = False
>
>                                 print('  factory clientConnectionMade:
> finished numPorts: {}'.format(self.numPorts))
>
>
>
>                 def cleanup(self):
>
>                                 print('factory cleanup: calling
> loseConnection')
>
>                                 if self.connectedClient is not None:
>
>
> self.connectedClient.transport.loseConnection()
>
>                                                 self.disconnectedOnPurpose
> = True
>
>
>
> With the above lines commented out, once the cleanup call does
> transport.loseConnection(), the factory stops at the end of
> clientConnectionLost.
>
>
>
>
>
> *Sample scripts/logs:*
>
> I’ve tried to create short test scripts and corresponding logs (with the
> client failing, and then with it restarting when I use the workaround).
> I’ve cut out several thousand lines to get down to something simple for the
> example test scripts, but I know the client is still a little long.  Again,
> I’m not sure if attachments work on the mailing list, but I’ll attempt to
> attach the client/server scripts with the corresponding pass/fail logs.
>
>
>
> Thanks!
>
>
>
> -Chris
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190322/82ffd17c/attachment-0002.html>

From chris at cmsconstruct.com  Fri Mar 22 17:26:24 2019
From: chris at cmsconstruct.com (Chris Satterthwaite)
Date: Fri, 22 Mar 2019 18:26:24 -0500
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>
Message-ID: <000201d4e106$ab0cc060$01264120$@cmsconstruct.com>

Hi Chris,

The files I attached (with the full classes) made it through to my email, but I wondered if they would they go through to everyone.

Here's a gist with the same scripts:
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f

And yep, as you mentioned, a 'sleep' is definitely blocking.  That's not in the production version; I just dropped it in here for the test script to simulate something.

Thanks!
-Chris

-----Original Message-----
From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of Chris Withers
Sent: Friday, March 22, 2019 1:54 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] stop/start client connections with loseConnection in ReconnectingClientFactory

On 22/03/2019 17:08, Chris Satterthwaite wrote:
>                  def clientConnectionLost(self, connector, reason):

Without the rest of your class, it's difficult to see some of the potential problems... Could you put it on a gist somewhere?

> 
>                                  print('  factory clientConnectionLost: 
> reason: {}'.format(reason))
> 
>                                  # if self.disconnectedOnPurpose:
> 
>                                  #             ## Hack to keep reactor 
> alive
> 
>                                  #             print('  factory
> clientConnectionLost: increasing numPorts')
> 
>                                  #             self.numPorts += 1
> 
>                                  #             self.numPortsChanged = 
> True
> 
>                                  #             
> self.disconnectedOnPurpose = False
> 
>                                  print('  ... simulate client going 
> idle before attempting restart...')
> 
>                                  time.sleep(5)

This will block the reactor, so don't think you should be doing it...

cheers,

Chris

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From chris at cmsconstruct.com  Fri Mar 22 17:28:31 2019
From: chris at cmsconstruct.com (Chris Satterthwaite)
Date: Fri, 22 Mar 2019 18:28:31 -0500
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
Message-ID: <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>

Hi Sean,

 

Thanks for the suggestion; I’ll take a look.

 

-Chris

 

 

From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of Sean DiZazzo
Sent: Friday, March 22, 2019 3:09 PM
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] stop/start client connections with loseConnection in ReconnectingClientFactory

 

You may want to look at twisted.application.internet.ClientService <https://twistedmatrix.com/documents/18.7.0/api/twisted.application.internet.ClientService.html> .  It uses the new endpoints instead of the `connectTCP()` stuff.  Not sure if it applies in your situation, but it has all of the retry logic built in, so that may make it easier to work with.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190322/9a6fd0a5/attachment-0002.html>

From dholth at gmail.com  Sat Mar 23 08:21:52 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sat, 23 Mar 2019 10:21:52 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
Message-ID: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>

Hello. Can you help me to learn to debug tls problems in twisted?

I was disappointed that txacme, an automatic way to get certificates for
twisted web, stopped working, so I'm trying to add a responder for the new
challenge type. It sends a special certificate if the CA negotiates acme
using alpn, proving domain control, then you get a certificate.

Seems to work with openssl s_client but letsencrypt says "no application
protocol". Anyone know where that error comes from?

https://github.com/glyph/txsni/pull/26
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/9bf20b62/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Mar 23 15:47:53 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 14:47:53 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
Message-ID: <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>

On Mar 23, 2019, at 7:21 AM, Daniel Holth <dholth at gmail.com> wrote:
> 
> Hello. Can you help me to learn to debug tls problems in twisted?

Hi Daniel!  Thanks so much for trying to improve this aspect of the Twisted ecosystem.

> I was disappointed that txacme, an automatic way to get certificates for twisted web, stopped working, so I'm trying to add a responder for the new challenge type.

This situation is definitely bad; as JP tersely put it on https://github.com/twisted/txacme/issues/148, "The published documentation makes it appear as though the server endpoint works though it has apparently been broken for about a year".

But to prevent onlookers from thinking the situation is even worse than it is, please allow me to clarify:

txacme still "works" in the sense that it supports the http-01 challenge (which is still supported for the forseeable future, AFAIK), and its challenge/response implementation also powers https://pypi.org/project/lancer/ <https://pypi.org/project/lancer/>, which uses the dns-01 challenge.  However, its endpoints (and particularly its string endpoint plugin) doesn't support this challenge directly.

The thing that's broken is sni-01, which was disabled globally by Let's Encrypt for security reasons: https://www.zdnet.com/article/lets-encrypt-disables-tls-sni-01-validation/ <https://www.zdnet.com/article/lets-encrypt-disables-tls-sni-01-validation/>

One approach to fixing this is to implement a string endpoint syntax that listens on port 80 and supports HTTP-01 rather than trying to make TLS support TLS-ALPN-01.

See discussion here: https://github.com/twisted/txacme/issues/129 <https://github.com/twisted/txacme/issues/129>.

Brian Warner already has a branch here: https://github.com/warner/txacme/tree/129-http01-endpoint <https://github.com/warner/txacme/tree/129-http01-endpoint> but has not made a PR yet.  Perhaps you could resurrect this code, polish anything that needs polishing, and get it integrated and released :).

> It sends a special certificate if the CA negotiates acme using alpn, proving domain control, then you get a certificate.

> Seems to work with openssl s_client but letsencrypt says "no application protocol". Anyone know where that error comes from?
> 
> https://github.com/glyph/txsni/pull/26 <https://github.com/glyph/txsni/pull/26>
I suspect one thing you might be running into is this: https://github.com/pyca/pyopenssl/issues/769 <https://github.com/pyca/pyopenssl/issues/769>, i.e. the issue that caused Certbot to revert their own ALPN support: https://github.com/certbot/certbot/pull/6100 <https://github.com/certbot/certbot/pull/6100>.  This is an OpenSSL bug and there's not a whole lot Twisted can do about it.  See here where I ran into it myself, for this exact same reason: https://github.com/openssl/openssl/issues/7660#issuecomment-462104869 <https://github.com/openssl/openssl/issues/7660#issuecomment-462104869>

Even if you're not hitting this specific problem, continuing down this road (implementing the ALPN challenge using OpenSSL) is unfortunately a bad idea.

Fundamentally, the ALPN callback in OpenSSL is poorly designed, and optimized for the very specific negotiation process that HTTP/2 requires.  The guidance from people familiar with OpenSSL is - and I know this sounds like a joke, I wish I were kidding here, but no, this is seriously the recommendation - implement your own parser for the ClientHello, extract the ALPN field yourself, then construct an OpenSSL connection object based on what you find there, and hand it the bytes you just parsed.

Given the mechanics of the challenge message (i.e.: it's going to be in the initial clienthello) you could probably cheese it with a regex just to get something working.

I hope this was helpful.  Good luck, and please keep us posted on your efforts!

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/82514dec/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Mar 23 16:03:49 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 15:03:49 -0700
Subject: [Twisted-Python] Any Windows users/reviewers around?
In-Reply-To: <20190319071312.GA1833@kosmos.hhhh.org>
References: <20190319071312.GA1833@kosmos.hhhh.org>
Message-ID: <51E6C94C-1C03-4FE6-AC4C-A8F7FCAC6B8D@twistedmatrix.com>



> On Mar 19, 2019, at 12:13 AM, Wim Lewis <wiml at hhhh.org> wrote:
> 
> There are a couple of Windows-specific PRs that I think could use a 
> review and merge. I don't have access to Windows or really know much 
> about it, or I'd do it.

If you need access to Windows, we do have an MSDN membership that the project can use.  Is this of interest?

> The one I think is most pressing is Trac 9446 / PR 1025, which is a data 
> corruption bug when using the IOCP reactor:
>   https://twistedmatrix.com/trac/ticket/9446 <https://twistedmatrix.com/trac/ticket/9446>  https://github.com/twisted/twisted/pull/1025 <https://github.com/twisted/twisted/pull/1025>

If you wanted to just land this because it seems quite serious and passes CI, I don't think anyone would blame you.  It's languished long enough, and absent any C-level crash bugs, the situation can't possibly be worse than it is now :-).

> which may be a duplicate of:
>   https://twistedmatrix.com/trac/ticket/3525 <https://twistedmatrix.com/trac/ticket/3525>

Thanks for pointing this out.

> There are a few others in the review queue <https://twistedmatrix.com/trac/report/25>.

If there are any Windows users out there who want to be maintainers, please speak up!  We could really use the help.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/3ca64777/attachment-0002.html>

From dholth at gmail.com  Sat Mar 23 16:39:07 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sat, 23 Mar 2019 18:39:07 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
Message-ID: <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>

Wow! Such broken. I was starting to get suspicious of openssl myself.
Poor documentation about the rules on context switching and whether
doing things in a certain order should trigger callbacks.

At least you can get a cert when the ALPN / ACME certificate (and
DEFAULT?) is the only one provided by twisted. If the several attempts
they make came from the same IP address that might be one way to hack
it.

If it gets that bad I'll put the ClientHello regex next to the
regex-based pkcs parser from my rsalette library :)

Fixing the http-01 challenge is a very rational suggestion.

Thanks!

Daniel



From dholth at gmail.com  Sat Mar 23 17:06:29 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sat, 23 Mar 2019 19:06:29 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
Message-ID: <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>

HOLY REGEX BATMAN

class _ConnectionProxy(object):

    def bio_write(self, buf):
        if ACME_TLS_1 in buf:
            self.acme_tls_1 = True
        self.bio_write = self._obj.bio_write
        return self._obj.bio_write(buf)
Now we can choose the acme certificate store in the sni callback and
make letsencrypt happy!



From glyph at twistedmatrix.com  Sat Mar 23 21:58:46 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 20:58:46 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
Message-ID: <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>



> On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
> 
> HOLY REGEX BATMAN
> 
> class _ConnectionProxy(object):
> 
>    def bio_write(self, buf):
>        if ACME_TLS_1 in buf:
>            self.acme_tls_1 = True
>        self.bio_write = self._obj.bio_write
>        return self._obj.bio_write(buf)
> Now we can choose the acme certificate store in the sni callback and
> make letsencrypt happy!

1. Gross
2. Hooray!

-g



From glyph at twistedmatrix.com  Sat Mar 23 21:58:22 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 20:58:22 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
Message-ID: <C92C8294-0C8E-432B-9ED3-10D8ACC2B627@twistedmatrix.com>

> On Mar 23, 2019, at 3:39 PM, Daniel Holth <dholth at gmail.com> wrote:
> 
> Wow! Such broken. I was starting to get suspicious of openssl myself.
> Poor documentation about the rules on context switching and whether
> doing things in a certain order should trigger callbacks.

In fairness, they do realize that this is a bit of a mess, and eventually one hopes there will be something better: https://github.com/openssl/openssl/issues/6109 <https://github.com/openssl/openssl/issues/6109>
> At least you can get a cert when the ALPN / ACME certificate (and
> DEFAULT?) is the only one provided by twisted. If the several attempts
> they make came from the same IP address that might be one way to hack
> it.


What IP addresses does Let’s Encrypt use to validate my web server?

We don’t publish a list of IP addresses we use to validate, because they may change at any time. In the future we may validate from multiple IP addresses at once.

Source: https://letsencrypt.org/docs/faq/#what-ip-addresses-does-let-s-encrypt-use-to-validate-my-web-server <https://letsencrypt.org/docs/faq/#what-ip-addresses-does-let-s-encrypt-use-to-validate-my-web-server>

> If it gets that bad I'll put the ClientHello regex next to the
> regex-based pkcs parser from my rsalette library :)

Oh no :-(.  Don't do RSA in pure python, that's an invitation to timing attacks.

> Fixing the http-01 challenge is a very rational suggestion.

Thanks!  If you could get Warner's patch over the finish line, that would probably be the best, most practical step forward.

> Thanks!
> 
> Daniel
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/6a97821b/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Mar 23 22:17:00 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 21:17:00 -0700
Subject: [Twisted-Python] ANN: Eliot 1.7, the causal logging library,
 now with inlineCallbacks support
In-Reply-To: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
Message-ID: <4E03D7D7-04BF-44F6-93B9-35095DCB4AC4@twistedmatrix.com>


> On Mar 21, 2019, at 8:27 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Python and Twisted's built-in logging output a stream of factoids: they’re interesting, but you can’t really tell what’s going on.
> 
> Why is your application slow?
> What caused this code path to be chosen?
> Why did this error happen?
> Standard logging can’t answer these questions.
> 
> But with a better model you could understand what and why things happened in your application. You could pinpoint performance bottlenecks, you could understand what happened when, who called what.
> 


I should note that if anyone out there is interested in getting involved with contributing to Twisted, but the bugs look big and daunting, finding a module that uses twisted.python.log and updating it to:

1. use twisted.logger
2. format all of its fields with structured information rather than string formatting

would really help with the consumption of Twisted's native log messages by more advanced tools like Eliot, and generally make Twisted better and push it into the future.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/bb7707a4/attachment-0002.html>

From dholth at gmail.com  Sat Mar 23 22:20:53 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sun, 24 Mar 2019 00:20:53 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
Message-ID: <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>

All we have to do is have some kind of per connection certificate store or
flag. If acme is in the first packet and the special certificate exists,
send it. Otherwise send the normal certificate, for a very short window of
possible brokenness. Letsencrypt may or may not require correct alpn
negotiation. Should be simple.

I'm happy running the acme client separately and listing my domain instead
of doing it all on demand inside twisted.


On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:

>
>
> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
> >
> > HOLY REGEX BATMAN
> >
> > class _ConnectionProxy(object):
> >
> >    def bio_write(self, buf):
> >        if ACME_TLS_1 in buf:
> >            self.acme_tls_1 = True
> >        self.bio_write = self._obj.bio_write
> >        return self._obj.bio_write(buf)
> > Now we can choose the acme certificate store in the sni callback and
> > make letsencrypt happy!
>
> 1. Gross
> 2. Hooray!
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/ff338129/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Mar 23 22:30:20 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 21:30:20 -0700
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
Message-ID: <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>

I'd further note that ClientService is generally the new, good way to do things and ReconnectingClientFactory is the old, bad way.  Our hope is to eventually deprecate ReconnectingClientFactory and most of the APIs that it uses, but this is a big project that we have not been able to make much progress on in the last, ahem, decade or so.

-g

> On Mar 22, 2019, at 4:28 PM, Chris Satterthwaite <chris at cmsconstruct.com> wrote:
> 
> Hi Sean,
>  
> Thanks for the suggestion; I’ll take a look.
>  
> -Chris
>  
>  
> From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of Sean DiZazzo
> Sent: Friday, March 22, 2019 3:09 PM
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Subject: Re: [Twisted-Python] stop/start client connections with loseConnection in ReconnectingClientFactory
>  
> You may want to look at twisted.application.internet.ClientService <https://twistedmatrix.com/documents/18.7.0/api/twisted.application.internet.ClientService.html>.  It uses the new endpoints instead of the `connectTCP()` stuff.  Not sure if it applies in your situation, but it has all of the retry logic built in, so that may make it easier to work with.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/1fa75b74/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Mar 23 22:55:04 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Mar 2019 21:55:04 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
Message-ID: <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>

I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.

-g

> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
> 
> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple. 
> 
> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
> 
> 
> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
> > 
> > HOLY REGEX BATMAN
> > 
> > class _ConnectionProxy(object):
> > 
> >    def bio_write(self, buf):
> >        if ACME_TLS_1 in buf:
> >            self.acme_tls_1 = True
> >        self.bio_write = self._obj.bio_write
> >        return self._obj.bio_write(buf)
> > Now we can choose the acme certificate store in the sni callback and
> > make letsencrypt happy!
> 
> 1. Gross
> 2. Hooray!
> 
> -g
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190323/8c49dcd3/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar 24 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Mar 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1553407518.07.4432321411124008080@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/ab1e1c38/attachment-0002.html>

From dholth at gmail.com  Sun Mar 24 10:26:59 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sun, 24 Mar 2019 12:26:59 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
Message-ID: <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>

The cleaned up pull request should be really easy to try, with a
dehydrated:(basedir) string port. Go get some certs people!

On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:

> I think ACME_TLS_1 is a sufficiently high-entropy string that the
> likelihood of brokenness from this approach is basically zero.
>
> -g
>
> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
>
> All we have to do is have some kind of per connection certificate store or
> flag. If acme is in the first packet and the special certificate exists,
> send it. Otherwise send the normal certificate, for a very short window of
> possible brokenness. Letsencrypt may or may not require correct alpn
> negotiation. Should be simple.
>
> I'm happy running the acme client separately and listing my domain instead
> of doing it all on demand inside twisted.
>
>
> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>>
>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
>> >
>> > HOLY REGEX BATMAN
>> >
>> > class _ConnectionProxy(object):
>> >
>> >    def bio_write(self, buf):
>> >        if ACME_TLS_1 in buf:
>> >            self.acme_tls_1 = True
>> >        self.bio_write = self._obj.bio_write
>> >        return self._obj.bio_write(buf)
>> > Now we can choose the acme certificate store in the sni callback and
>> > make letsencrypt happy!
>>
>> 1. Gross
>> 2. Hooray!
>>
>> -g
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/84d6e374/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Mar 24 14:32:52 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Mar 2019 13:32:52 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
Message-ID: <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>

Any chance you could include a link to the relevant PR?  Pulling this out of the raging tire-fire of my Github notifications would take an unfortunately non-trivial amount of time - and I imagine that not everyone subscribed might even be on the appropriate repos :).

-g

> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
> 
> The cleaned up pull request should be really easy to try, with a dehydrated:(basedir) string port. Go get some certs people!
> 
> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.
> 
> -g
> 
>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>> 
>> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple. 
>> 
>> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
>> 
>> 
>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>> > 
>> > HOLY REGEX BATMAN
>> > 
>> > class _ConnectionProxy(object):
>> > 
>> >    def bio_write(self, buf):
>> >        if ACME_TLS_1 in buf:
>> >            self.acme_tls_1 = True
>> >        self.bio_write = self._obj.bio_write
>> >        return self._obj.bio_write(buf)
>> > Now we can choose the acme certificate store in the sni callback and
>> > make letsencrypt happy!
>> 
>> 1. Gross
>> 2. Hooray!
>> 
>> -g
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/cb965498/attachment-0002.html>

From dholth at gmail.com  Sun Mar 24 14:59:38 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sun, 24 Mar 2019 16:59:38 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
Message-ID: <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>

Pull request for txsni acme https://github.com/glyph/txsni/pull/28

On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com> wrote:

> Any chance you could include a link to the relevant PR?  Pulling this out
> of the raging tire-fire of my Github notifications would take an
> unfortunately non-trivial amount of time - and I imagine that not everyone
> subscribed might even be on the appropriate repos :).
>
> -g
>
> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
>
> The cleaned up pull request should be really easy to try, with a
> dehydrated:(basedir) string port. Go get some certs people!
>
> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:
>
>> I think ACME_TLS_1 is a sufficiently high-entropy string that the
>> likelihood of brokenness from this approach is basically zero.
>>
>> -g
>>
>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
>>
>> All we have to do is have some kind of per connection certificate store
>> or flag. If acme is in the first packet and the special certificate exists,
>> send it. Otherwise send the normal certificate, for a very short window of
>> possible brokenness. Letsencrypt may or may not require correct alpn
>> negotiation. Should be simple.
>>
>> I'm happy running the acme client separately and listing my domain
>> instead of doing it all on demand inside twisted.
>>
>>
>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
>>
>>>
>>>
>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
>>> >
>>> > HOLY REGEX BATMAN
>>> >
>>> > class _ConnectionProxy(object):
>>> >
>>> >    def bio_write(self, buf):
>>> >        if ACME_TLS_1 in buf:
>>> >            self.acme_tls_1 = True
>>> >        self.bio_write = self._obj.bio_write
>>> >        return self._obj.bio_write(buf)
>>> > Now we can choose the acme certificate store in the sni callback and
>>> > make letsencrypt happy!
>>>
>>> 1. Gross
>>> 2. Hooray!
>>>
>>> -g
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/1a7410f0/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Mar 24 15:38:33 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Mar 2019 14:38:33 -0700
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
 <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
Message-ID: <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>

Thanks! I put some review comments on it.  I would encourage others with interest in this area to have a look; I might not get back to this for a couple of weeks, but I'd be happy to give people collaborator permissions on the repo if they'd like to help out.

(Frankly it's probably time that this project grew up and moved over to the Twisted org anyway, given that txacme depends on it...)

-g

> On Mar 24, 2019, at 1:59 PM, Daniel Holth <dholth at gmail.com> wrote:
> 
> Pull request for txsni acme https://github.com/glyph/txsni/pull/28 <https://github.com/glyph/txsni/pull/28>
> On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Any chance you could include a link to the relevant PR?  Pulling this out of the raging tire-fire of my Github notifications would take an unfortunately non-trivial amount of time - and I imagine that not everyone subscribed might even be on the appropriate repos :).
> 
> -g
> 
>> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>> 
>> The cleaned up pull request should be really easy to try, with a dehydrated:(basedir) string port. Go get some certs people!
>> 
>> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.
>> 
>> -g
>> 
>>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>>> 
>>> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple. 
>>> 
>>> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
>>> 
>>> 
>>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>>> 
>>> 
>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com <mailto:dholth at gmail.com>> wrote:
>>> > 
>>> > HOLY REGEX BATMAN
>>> > 
>>> > class _ConnectionProxy(object):
>>> > 
>>> >    def bio_write(self, buf):
>>> >        if ACME_TLS_1 in buf:
>>> >            self.acme_tls_1 = True
>>> >        self.bio_write = self._obj.bio_write
>>> >        return self._obj.bio_write(buf)
>>> > Now we can choose the acme certificate store in the sni callback and
>>> > make letsencrypt happy!
>>> 
>>> 1. Gross
>>> 2. Hooray!
>>> 
>>> -g
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/bc6f62e8/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Mar 24 16:40:24 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Mar 2019 15:40:24 -0700
Subject: [Twisted-Python] optimizing for engagement
Message-ID: <824DD4E6-62A4-4836-80DB-B24D6514332F@twistedmatrix.com>

Hello Twistors,

It's been a good weekend for the Twisted ecosystem!  Despite spending rather more time on email than is usual for a weekend, I've been enjoying the mailing list activity so thanks to everyone for your contributions.

We had a good chat on IRC about some potential ways to increase contribution to the project.  (I'll let the authors of these proposals raise them themselves, if they want to bring it to the broader forum of this list.)  These proposals largely focused on structural issues with the way the project is maintained or the way the code is organized.

However, we have relatively few people who do much in the way of social organizing of Twisted and its constellation of ancillary projects.  We have ad-hoc presences at a few regional conferences, a sometimes presence at the PyCon sprints (which, unfortunately, I don't think I'll be able to make this year).

One thing I'd like to propose I think would really help us get more engagement with the project and the ecosystem, possibly in addition to and in concert with some of the aforementioned structural/technical changes, is some dedicated, intentional social organization, particularly of our distributed online community.

Hackathons and sprints (which have probably provoked the majority of Twisted's development over the years) are not a lot more than "let's get together and do X at Y time".  They can be organized online as well as in person.  Still, a successful sprint requires someone to thoughtfully select variables X and Y and then effectively communicate about the event, both to people already involved in the project and also to potential audiences of newcomers.  This involves finding students looking for projects to learn on, and finding users who might want get bugs that they have encountered fixed; in other words, "outreach".

It also involves some amount of celebrating accomplishments that come out of these events, to build enthusiasm for the next one.  (If you've been organizing local events that we're not aware of, it would be great to hear about them!)

So I'd like to encourage anyone who might be wondering what they can do to contribute to the project but find the prospect of debugging IMAP serialization or use-after-free IO completion port debugging to be bewildering, "online sprint organizing" is a potentially very rich seam to mine for potential contributions.

If you are interested in trying to do this but need access to any Twisted resources in support of doing this - the main ones I can think of being our Twitter (https://twitter.com/twistedmatrix <https://twitter.com/twistedmatrix>) or Blogger (https://labs.twistedmatrix.com <https://labs.twistedmatrix.com/>) accounts - just let me know and I'd be happy to provide access.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/123a2f49/attachment-0002.html>

From dholth at gmail.com  Sun Mar 24 19:17:04 2019
From: dholth at gmail.com (Daniel Holth)
Date: Sun, 24 Mar 2019 21:17:04 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
 <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
 <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>
Message-ID: <CAG8k2+7AOUam+Ua0k+AD=dnBMM11UyFo-jhCYBnEy09s9vBadg@mail.gmail.com>

Do move it to twisted. I was surprised it wasn't already there.

On Sun, Mar 24, 2019, 17:39 Glyph <glyph at twistedmatrix.com> wrote:

> Thanks! I put some review comments on it.  I would encourage others with
> interest in this area to have a look; I might not get back to this for a
> couple of weeks, but I'd be happy to give people collaborator permissions
> on the repo if they'd like to help out.
>
> (Frankly it's probably time that this project grew up and moved over to
> the Twisted org anyway, given that txacme depends on it...)
>
> -g
>
> On Mar 24, 2019, at 1:59 PM, Daniel Holth <dholth at gmail.com> wrote:
>
> Pull request for txsni acme https://github.com/glyph/txsni/pull/28
>
> On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com> wrote:
>
>> Any chance you could include a link to the relevant PR?  Pulling this out
>> of the raging tire-fire of my Github notifications would take an
>> unfortunately non-trivial amount of time - and I imagine that not everyone
>> subscribed might even be on the appropriate repos :).
>>
>> -g
>>
>> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
>>
>> The cleaned up pull request should be really easy to try, with a
>> dehydrated:(basedir) string port. Go get some certs people!
>>
>> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:
>>
>>> I think ACME_TLS_1 is a sufficiently high-entropy string that the
>>> likelihood of brokenness from this approach is basically zero.
>>>
>>> -g
>>>
>>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
>>>
>>> All we have to do is have some kind of per connection certificate store
>>> or flag. If acme is in the first packet and the special certificate exists,
>>> send it. Otherwise send the normal certificate, for a very short window of
>>> possible brokenness. Letsencrypt may or may not require correct alpn
>>> negotiation. Should be simple.
>>>
>>> I'm happy running the acme client separately and listing my domain
>>> instead of doing it all on demand inside twisted.
>>>
>>>
>>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
>>>
>>>>
>>>>
>>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
>>>> >
>>>> > HOLY REGEX BATMAN
>>>> >
>>>> > class _ConnectionProxy(object):
>>>> >
>>>> >    def bio_write(self, buf):
>>>> >        if ACME_TLS_1 in buf:
>>>> >            self.acme_tls_1 = True
>>>> >        self.bio_write = self._obj.bio_write
>>>> >        return self._obj.bio_write(buf)
>>>> > Now we can choose the acme certificate store in the sni callback and
>>>> > make letsencrypt happy!
>>>>
>>>> 1. Gross
>>>> 2. Hooray!
>>>>
>>>> -g
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190324/7d2dff6d/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Mar 25 04:15:22 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Mon, 25 Mar 2019 21:15:22 +1100
Subject: [Twisted-Python] A Proposal for reducing the burden of developing
 on Twisted by dropping Python 2 support
Message-ID: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>

Hi everyone,

Since the Python 2 EOL date is rapidly approaching, I thought it was 
time we consider dropping Python 2 support.

I personally find that Python 2 compat adds a huge amount of overhead 
when working on and maintaining Twisted, and think that with the current 
maintainer availability, dropping it sooner rather than later would have 
a beneficial effect on how much work we spend on shims/compat, 
complexity, and our ability to ship new features, as well as onboarding 
people who are interested in the project, but have no interest (or 
experience!) in Python 2.7.

It is basically summed up by doing a feature freeze on an agreed-upon 
version of Twisted, that will be the last version released for 2.7. It 
would be abnormal in that it would get security fixes (our current 
policy is to only release them for current versions) and critical 
bugfixes, but would otherwise be frozen.

One of my rationales is that from some analysis of PyPI download 
statistics, the vast majority of Python 2 users are using old versions 
of Twisted, while nearly all our Python 3 users are on the latest 
version. As such, I believe freezing a version that will get security 
updates but no new features would not be a massive loss to those stuck 
on Python 2 for whatever reason.

Twisted's compatibility policy would still apply, ensuring that Python 
2/3 compatible software using Twisted would be able to use the older 
Twisted version on Python 2, and the newer version on Python 3, as you 
would usually expect.

You can find the proposal here, in this handy-dandy Google Doc: 
https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit

Comments are welcome, as well as which timeline seems reasonable.

- Amber



From maarten at treewalker.org  Mon Mar 25 04:55:53 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Mon, 25 Mar 2019 11:55:53 +0100
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <16204375.eClh2f66oM@hyperion>

On Monday, 25 March 2019 11:15:22 CET Amber Brown wrote:

> One of my rationales is that from some analysis of PyPI download
> statistics, the vast majority of Python 2 users are using old versions
> of Twisted, while nearly all our Python 3 users are on the latest
> version. As such, I believe freezing a version that will get security
> updates but no new features would not be a massive loss to those
> stuck on Python 2 for whatever reason.

I think this makes sense: applications that are still gaining new 
features should be on Python 3 by now. For applications on Python 2 the 
main concern would be to keep them running while the world around them 
updates (new OS versions etc).

> Comments are welcome, as well as which timeline seems reasonable.

Python 2.7 support will end early 2020. In my opinion it is unnecessary 
to support Twisted on Python 2.7 for longer than Python 2.7 itself is 
supported. So all of the proposed timelines are generous, in my opinion.

Bye,
		Maarten





From donal.mcmullan at gmail.com  Mon Mar 25 08:11:50 2019
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Mon, 25 Mar 2019 14:11:50 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <CADf-aJFGr8Uwrpm=rWMYg6tiMY3DTU3vxtU+uwHPWvOxO8m41A@mail.gmail.com>

Hi Amber -

Notwithstanding the fact that VFX/Anim will be stuck on PY2 for a few more
years, this all sounds very reasonable. None of the proposed timelines
would cause problems for my team.

Many thanks

DJM

On Mon, 25 Mar 2019 at 10:15, Amber Brown <hawkowl at atleastfornow.net> wrote:

> Hi everyone,
>
> Since the Python 2 EOL date is rapidly approaching, I thought it was
> time we consider dropping Python 2 support.
>
> I personally find that Python 2 compat adds a huge amount of overhead
> when working on and maintaining Twisted, and think that with the current
> maintainer availability, dropping it sooner rather than later would have
> a beneficial effect on how much work we spend on shims/compat,
> complexity, and our ability to ship new features, as well as onboarding
> people who are interested in the project, but have no interest (or
> experience!) in Python 2.7.
>
> It is basically summed up by doing a feature freeze on an agreed-upon
> version of Twisted, that will be the last version released for 2.7. It
> would be abnormal in that it would get security fixes (our current
> policy is to only release them for current versions) and critical
> bugfixes, but would otherwise be frozen.
>
> One of my rationales is that from some analysis of PyPI download
> statistics, the vast majority of Python 2 users are using old versions
> of Twisted, while nearly all our Python 3 users are on the latest
> version. As such, I believe freezing a version that will get security
> updates but no new features would not be a massive loss to those stuck
> on Python 2 for whatever reason.
>
> Twisted's compatibility policy would still apply, ensuring that Python
> 2/3 compatible software using Twisted would be able to use the older
> Twisted version on Python 2, and the newer version on Python 3, as you
> would usually expect.
>
> You can find the proposal here, in this handy-dandy Google Doc:
>
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
> Comments are welcome, as well as which timeline seems reasonable.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190325/0f3b167b/attachment-0002.html>

From adi at roiban.ro  Mon Mar 25 08:33:48 2019
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 25 Mar 2019 14:33:48 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <CAFycZ9fYjc0Cmvmvej3FOBhkMChHfs0iVXu=_3YjkTadvdgTMA@mail.gmail.com>

On Mon, 25 Mar 2019 at 10:15, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
> Hi everyone,
>
> Since the Python 2 EOL date is rapidly approaching, I thought it was
> time we consider dropping Python 2 support.
>

[snip]

> You can find the proposal here, in this handy-dandy Google Doc:
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
> Comments are welcome, as well as which timeline seems reasonable.
>
> - Amber

Many thanks Amber for putting this together.

I would vote for option 3. ... as it will take some time to clean the code.






--
Adi Roiban



From barry.scott at forcepoint.com  Mon Mar 25 11:06:23 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Mon, 25 Mar 2019 17:06:23 +0000
Subject: [Twisted-Python] ANN: Eliot 1.7, the causal logging library,
 now with inlineCallbacks support
In-Reply-To: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
Message-ID: <14522251.sWHKtWim9z@barry-scott-desktop>

On Thursday, 21 March 2019 15:27:35 GMT Itamar Turner-Trauring wrote:
> Python and Twisted's built-in `logging` output a stream of factoids: they’re
> interesting, but you can’t really tell what’s going on.
> 
>  * Why is your application slow?
>  * What caused this code path to be chosen?
>  * Why did this error happen?
> Standard logging can’t answer these questions.
> 
> But with a better model you could understand what and why things happened in
> your application. You could pinpoint performance bottlenecks, you could
> understand what happened when, who called what.
> 
> That is what Eliot does. `Eliot` is a Python logging system that outputs
> causal chains of *actions*: actions can spawn other actions, and eventually
> they either *succeed or fail*. The resulting logs tell you the story of
> what your software did: what happened, and what caused it.
> 
> 
> Eliot has had good Twisted support from the start, but the latest release
> also supports inlineCallbacks, thanks to Jean-Paul Calderone.
> 
> You can learn more about Eliot at https://eliot.readthedocs.io/en/stable/

Interesting library.

It seems that I cannot have a action finish with an error unless I raise an
exception. That seems limiting, there are lots of cases where I have code
that hits an error condition and does not raise an exception. For example
an HTTP request that gets a non 200 status.

Have I missed something?

Barry




From itamar at itamarst.org  Mon Mar 25 11:23:19 2019
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 25 Mar 2019 13:23:19 -0400
Subject: [Twisted-Python] 
 =?utf-8?q?ANN=3A_Eliot_1=2E7=2C_the_causal_logg?=
 =?utf-8?q?ing_library=2C_now_with_inlineCallbacks_support?=
In-Reply-To: <14522251.sWHKtWim9z@barry-scott-desktop>
References: <62f1f6f1-e043-45d7-b81f-31133affd2e9@www.fastmail.com>
 <14522251.sWHKtWim9z@barry-scott-desktop>
Message-ID: <4e4aeaeb-0103-4a89-8ba1-0023f4696fa2@www.fastmail.com>

> Interesting library.
> 
> It seems that I cannot have a action finish with an error unless I raise an
> exception. That seems limiting, there are lots of cases where I have code
> that hits an error condition and does not raise an exception. For example
> an HTTP request that gets a non 200 status.
> 
> Have I missed something?

You don't have to raise an exception, though the current API requires you to create an exception instance:
---

from eliot import start_action

action = start_action(action_type="http_request"):
with action.context():
    response = http_request()
    if response.code == 200:
        action.finish()
        return response.json
    else:
        action.finish(HTTPError(code=response.code))
        return None 

---
The Twisted APIs for Eliot likewise support Deferreds using a DeferredContext object, again with no need to raise an exception:

https://eliot.readthedocs.io/en/stable/generating/twisted.html#actions-and-deferreds
    
-Itamar    



From barry.scott at forcepoint.com  Mon Mar 25 11:22:46 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Mon, 25 Mar 2019 17:22:46 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <64733852.0XqjMW6x9D@barry-scott-desktop>

On Monday, 25 March 2019 10:15:22 GMT Amber Brown wrote:
> Hi everyone,
> 
> Since the Python 2 EOL date is rapidly approaching, I thought it was
> time we consider dropping Python 2 support.
> 
> I personally find that Python 2 compat adds a huge amount of overhead
> when working on and maintaining Twisted, and think that with the current
> maintainer availability, dropping it sooner rather than later would have
> a beneficial effect on how much work we spend on shims/compat,
> complexity, and our ability to ship new features, as well as onboarding
> people who are interested in the project, but have no interest (or
> experience!) in Python 2.7.
> 
> It is basically summed up by doing a feature freeze on an agreed-upon
> version of Twisted, that will be the last version released for 2.7. It
> would be abnormal in that it would get security fixes (our current
> policy is to only release them for current versions) and critical
> bugfixes, but would otherwise be frozen.
> 
> One of my rationales is that from some analysis of PyPI download
> statistics, the vast majority of Python 2 users are using old versions
> of Twisted, while nearly all our Python 3 users are on the latest
> version. As such, I believe freezing a version that will get security
> updates but no new features would not be a massive loss to those stuck
> on Python 2 for whatever reason.
> 
> Twisted's compatibility policy would still apply, ensuring that Python
> 2/3 compatible software using Twisted would be able to use the older
> Twisted version on Python 2, and the newer version on Python 3, as you
> would usually expect.
> 
> You can find the proposal here, in this handy-dandy Google Doc:
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0
> lik/edit
> 
> Comments are welcome, as well as which timeline seems reasonable.

We are stuck on python2.7 for the foreseeable future and you will not see us 
in the PyPi stats. We download your release tar ball and build an RPM from it.
We also have to build python2.7 our selves as we are stuck on Centos 6.8.

Having a legacy twisted with critical bugs and security fixes would work for 
us.

Barry





From werner at thieprojects.ch  Mon Mar 25 13:57:54 2019
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 25 Mar 2019 09:57:54 -1000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <64733852.0XqjMW6x9D@barry-scott-desktop>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
 <64733852.0XqjMW6x9D@barry-scott-desktop>
Message-ID: <abd27833-7bef-e41a-f9c4-ca311ff25f13@thieprojects.ch>

+1

Werner

On 3/25/19 07:22, Scott, Barry wrote:
> On Monday, 25 March 2019 10:15:22 GMT Amber Brown wrote:
>> Hi everyone,
>>
>> Since the Python 2 EOL date is rapidly approaching, I thought it was
>> time we consider dropping Python 2 support.
>>
>> I personally find that Python 2 compat adds a huge amount of overhead
>> when working on and maintaining Twisted, and think that with the current
>> maintainer availability, dropping it sooner rather than later would have
>> a beneficial effect on how much work we spend on shims/compat,
>> complexity, and our ability to ship new features, as well as onboarding
>> people who are interested in the project, but have no interest (or
>> experience!) in Python 2.7.
>>
>> It is basically summed up by doing a feature freeze on an agreed-upon
>> version of Twisted, that will be the last version released for 2.7. It
>> would be abnormal in that it would get security fixes (our current
>> policy is to only release them for current versions) and critical
>> bugfixes, but would otherwise be frozen.
>>
>> One of my rationales is that from some analysis of PyPI download
>> statistics, the vast majority of Python 2 users are using old versions
>> of Twisted, while nearly all our Python 3 users are on the latest
>> version. As such, I believe freezing a version that will get security
>> updates but no new features would not be a massive loss to those stuck
>> on Python 2 for whatever reason.
>>
>> Twisted's compatibility policy would still apply, ensuring that Python
>> 2/3 compatible software using Twisted would be able to use the older
>> Twisted version on Python 2, and the newer version on Python 3, as you
>> would usually expect.
>>
>> You can find the proposal here, in this handy-dandy Google Doc:
>> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0
>> lik/edit
>>
>> Comments are welcome, as well as which timeline seems reasonable.
> We are stuck on python2.7 for the foreseeable future and you will not see us 
> in the PyPi stats. We download your release tar ball and build an RPM from it.
> We also have to build python2.7 our selves as we are stuck on Centos 6.8.
>
> Having a legacy twisted with critical bugs and security fixes would work for 
> us.
>
> Barry
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From john at egh.com  Mon Mar 25 14:21:26 2019
From: john at egh.com (John Santos)
Date: Mon, 25 Mar 2019 16:21:26 -0400
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <fa199b33-b837-be6d-3c7d-841b6ae09575@egh.com>

My application works on both Python 2.7 and 3.  All my and my customer 
sites are now on Python 3 (there was a year or so of both), so I've 
stopped testing on 2.7, though I haven't done anything deliberate to 
break it.

I hope/expect that none of my code changes to make my source compatible 
with both 2.7 and 3 will break when Twisted support for 2.7 goes away!  
(It seems to me the Twisted compatibility policy would guarantee that.)

Most of my customer systems are on Red Hat or CentOS where the default 
Python, as of a few weeks ago, is 2.7.  I've installed Python 3.6 in a 
virtual environment and that has worked fine. (Replacing 2.7 with 3.6 
breaks many system tools, don't ask me how I know this!)

So I no longer have any problem with 2.7 support going away in Twisted.

- John Santos

On 3/25/2019 6:15 AM, Amber Brown wrote:
> Hi everyone,
>
> Since the Python 2 EOL date is rapidly approaching, I thought it was 
> time we consider dropping Python 2 support.
>
> I personally find that Python 2 compat adds a huge amount of overhead 
> when working on and maintaining Twisted, and think that with the 
> current maintainer availability, dropping it sooner rather than later 
> would have a beneficial effect on how much work we spend on 
> shims/compat, complexity, and our ability to ship new features, as 
> well as onboarding people who are interested in the project, but have 
> no interest (or experience!) in Python 2.7.
>
> It is basically summed up by doing a feature freeze on an agreed-upon 
> version of Twisted, that will be the last version released for 2.7. It 
> would be abnormal in that it would get security fixes (our current 
> policy is to only release them for current versions) and critical 
> bugfixes, but would otherwise be frozen.
>
> One of my rationales is that from some analysis of PyPI download 
> statistics, the vast majority of Python 2 users are using old versions 
> of Twisted, while nearly all our Python 3 users are on the latest 
> version. As such, I believe freezing a version that will get security 
> updates but no new features would not be a massive loss to those stuck 
> on Python 2 for whatever reason.
>
> Twisted's compatibility policy would still apply, ensuring that Python 
> 2/3 compatible software using Twisted would be able to use the older 
> Twisted version on Python 2, and the newer version on Python 3, as you 
> would usually expect.
>
> You can find the proposal here, in this handy-dandy Google Doc: 
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
> Comments are welcome, as well as which timeline seems reasonable.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539



From glyph at twistedmatrix.com  Mon Mar 25 22:52:03 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2019 21:52:03 -0700
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <3F533AD3-7485-42E3-B77B-35024CF918CA@twistedmatrix.com>

> On Mar 25, 2019, at 3:15 AM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> Since the Python 2 EOL date is rapidly approaching, I thought it was time we consider dropping Python 2 support.
> 
> I personally find that Python 2 compat adds a huge amount of overhead when working on and maintaining Twisted, and think that with the current maintainer availability, dropping it sooner rather than later would have a beneficial effect on how much work we spend on shims/compat, complexity, and our ability to ship new features, as well as onboarding people who are interested in the project, but have no interest (or experience!) in Python 2.7.

Personally, I don't have this problem, but I'm certainly willing to believe it's a bigger deal for others; especially others who perhaps have not even learned Python 2 at this point.

> It is basically summed up by doing a feature freeze on an agreed-upon version of Twisted, that will be the last version released for 2.7. It would be abnormal in that it would get security fixes (our current policy is to only release them for current versions) and critical bugfixes, but would otherwise be frozen.

Here's my question about this:

Who will do this work?

Personally, I'm not willing to commit to this.  I know from experience both on Twisted and other projects that maintaining multiple release branches, even one that's "maintenance only", requires at least one point-person for each branch at all times (usually a "release manager").  And backporting fixes inevitably gets harder and harder as the "maintenance" branch diverges from top-of-tree.  If I have time to work on Twisted in my increasingly scarce spare time, I want it to be on something at least plausibly interesting, and manually backporting manual fixes to an unmaintained py2 branch that I don't even use doesn't qualify.

("But glyph", I hear you ask, "then why are you willing to write py2 code as it is?".  Well, hypothetical reader, it's because I find it easily an order of magnitude easier to fix version discrepancies in the same change where they creep in, and CI is yelling me about them, than it is to fix them in a big tangled morass six months later with no idea which part of the code I'm backporting is the issue.)

Do we have py2-only users who are willing to take ownership of this branch?  Specific people willing to sign up for this responsibility for the next... how long?  Three years?  Five years?

So I'd rather be quite explicit that while we would not object to anyone filling these roles, someone still needs to step forward and fill them, and I'm not willing to commit the current team, such as it is, to work that I myself am unwilling to do.  If nobody does step forward we should not claim to have security support for a dead / unmaintained branch.

> One of my rationales is that from some analysis of PyPI download statistics, the vast majority of Python 2 users are using old versions of Twisted, while nearly all our Python 3 users are on the latest version. As such, I believe freezing a version that will get security updates but no new features would not be a massive loss to those stuck on Python 2 for whatever reason.

I know that you detailed some of this on IRC, but: how old?

My sense would be that of course users stuck on py2 would have a more conservative upgrade cadence than py3 users, but that doesn't mean they never upgrade.  How far behind are these py2 users, and does the curve suggest they're catching up or are most twisted downloads just like, version 1.3 on python 1.5.2 forever?

> Twisted's compatibility policy would still apply, ensuring that Python 2/3 compatible software using Twisted would be able to use the older Twisted version on Python 2, and the newer version on Python 3, as you would usually expect.

We have 2 big blockers here right now that would prevent doing this as things stand right now:

Twisted is not yet fully ported to Python 3, so there's no version where you can use all of Twisted on Python 3.  This picture is way, way smaller than it has ever been, though - grab a module and start porting: http://blog.habnab.it/twisted-depgraph/ <http://blog.habnab.it/twisted-depgraph/>
We still have Python 2 in production ourselves that requires Twisted; specifically:
Trac and several of our ancillary utilities around it.  Happily this does seem to be fairly actively worked on: "opened 4 years ago, last modified 12 days ago" https://trac.edgewall.org/ticket/12130 <https://trac.edgewall.org/ticket/12130>
Dogfood DNS: twisted.names doesn't work on python 3: https://twistedmatrix.com/trac/ticket/9496 <https://twistedmatrix.com/trac/ticket/9496>
Our front-end webserver might work on pypy3, but we have yet to move it over.  Maybe that would be a good place to start?

If this proposal lights a fire under some folks to drive any of these projects to completion, that would be great!

> You can find the proposal here, in this handy-dandy Google Doc: https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
> 
> Comments are welcome, as well as which timeline seems reasonable.

Personally I feel like Option 1 is the most reasonable.  We can't do option 3 because of the above blockers, and option 2 just seems random to me - why commit to 4 months of additional maintenance beyond when py2 itself is EOL?  Maybe there's an option like, 1.5, where we de-support py2 at max(2020-01-01, "the date at which we no longer have any py2 code in production ourselves")?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190325/b3d2a821/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Mar 25 22:57:57 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Mar 2019 21:57:57 -0700
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <64733852.0XqjMW6x9D@barry-scott-desktop>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
 <64733852.0XqjMW6x9D@barry-scott-desktop>
Message-ID: <B023933C-AB12-4C15-916D-4E195394AAF8@twistedmatrix.com>

Hi Barry!

Thanks for your feedback.

> On Mar 25, 2019, at 10:22 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> We are stuck on python2.7 for the foreseeable future and you will not see us 
> in the PyPi stats. We download your release tar ball and build an RPM from it.
> We also have to build python2.7 our selves as we are stuck on Centos 6.8.

Given the nature of your product I'm curious: isn't the inability to maintain certifications like PCI / HIPAA due to the lack of upstream support for python 2.7 a problem for a security application?

> Having a legacy twisted with critical bugs and security fixes would work for 
> us.

Apropos of the question in my other response - would you (or any of your colleagues) be willing to take responsibility for such a branch and do the security triage / backport work there?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190325/2492dd65/attachment-0002.html>

From chris at withers.org  Tue Mar 26 01:14:18 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 26 Mar 2019 07:14:18 +0000
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
Message-ID: <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>

On 24/03/2019 04:30, Glyph wrote:
> I'd further note that ClientService is /generally/ the new, good way to 
> do things and ReconnectingClientFactory is the old, bad way.  Our hope 
> is to eventually deprecate ReconnectingClientFactory and most of the 
> APIs that it uses, but this is a big project that we have not been able 
> to make much progress on in the last, ahem, decade or so.

What's the big advantage(s) of ClientService over 
ReconnectingClientFactory?

The Autobahn guys still show ReconnectingClientFactory in their docs, 
and I remember looking at this before and ending up going with 
ReconnectingClientFactory because it works and didn't look like it'd 
need much effort to integrated into an existing code base.

cheers,

Chris



From chris at withers.org  Tue Mar 26 01:28:26 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 26 Mar 2019 07:28:26 +0000
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <000201d4e106$ab0cc060$01264120$@cmsconstruct.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>
 <000201d4e106$ab0cc060$01264120$@cmsconstruct.com>
Message-ID: <664a2b76-656a-333e-49d5-bcdd32cec4eb@withers.org>

On 22/03/2019 23:26, Chris Satterthwaite wrote:
> Hi Chris,
> 
> The files I attached (with the full classes) made it through to my email, but I wondered if they would they go through to everyone.
> 
> Here's a gist with the same scripts:
> https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f
> 
> And yep, as you mentioned, a 'sleep' is definitely blocking.  That's not in the production version; I just dropped it in here for the test script to simulate something.

Observations:

- Your super call at 
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L46, 
I'd expect that to be super(ServiceClientFactory, self).__init__(), but 
your spelling may be a python 3 only thing that works?

- Those sleeps are going to cause you more problems than they solve.

- What does this seek to achieve? 
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L88-L89

- Why not use twisted logging instead of print? By setting it to debug, 
you'll get lots of into about what twisted is doing, and by using 
logging you won't need to do all that manual traceback printing.

- when you say "When the client hits a problem, it calls 
transport.loseConnection()", where is that call to transport.loseConnection?

- when you noticed some Twisted source code that works off 
factory.numPorts, where is that code? Can you provide a link? This 
doesn't sound right...

Now, as to what your problem is, I suspect it's this call to stopTrying:
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L87

The factory is stopped and started again by ReconnectingClientFactory, 
so you don't want that there as it means you stop trying every time 
there's a disconnection.

cheers,

Chris



From glyph at twistedmatrix.com  Tue Mar 26 02:32:36 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2019 01:32:36 -0700
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
Message-ID: <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>



> On Mar 26, 2019, at 12:14 AM, Chris Withers <chris at withers.org> wrote:
> 
> On 24/03/2019 04:30, Glyph wrote:
>> I'd further note that ClientService is /generally/ the new, good way to do things and ReconnectingClientFactory is the old, bad way.  Our hope is to eventually deprecate ReconnectingClientFactory and most of the APIs that it uses, but this is a big project that we have not been able to make much progress on in the last, ahem, decade or so.
> 
> What's the big advantage(s) of ClientService over ReconnectingClientFactory?
> 
> The Autobahn guys still show ReconnectingClientFactory in their docs, and I remember looking at this before and ending up going with ReconnectingClientFactory because it works and didn't look like it'd need much effort to integrated into an existing code base.

Let me count the ways.

ReconnectingClientFactory is destined for deprecation, eventually.  You should just adopt the "new" thing now so that if we get more energy to cycle the APIs and delete the old stuff, you'll have less hassle to deal with.  ("New" is in quotes here since it's been around for well over 3 years at this point; Autobahn should update too, not just you.)
ClientService works with endpoints, which means you can use it with any kind of transport, like SSH transports, subprocesses, etc.  Most practically, it works with HostnameEndpoint which is a much better way to get TLS than connectSSL; ReconnectingClientFactory works, kind of accidentally, with TLS since connectSSL is on the reactor, but it won't use happy eyeballs and it won't connect over IPv6, so connections will be slower and less reliable.
Conceptually, ClientService has a much clearer and more useful responsibility: its job is to maintain a state (i.e.: that there is a single connection, that it is connected) rather than to do a thing.  For example, 
if you want to shut down a ReconnectingClientFactory:
you have to call stopTrying, then uh...
find the last protocol it built with buildProtocol, then
grab its transport (hope it's saving that transport as '.transport', because it doesn't actually have to) 
call loseConnection
remember to trap connectionLost so you can see when its done.
if you want to shut down a ClientService
call stopService
wait for the Deferred that it returned to fire
ClientService is (mostly) implemented using composition rather than inheritance, so much less of the guts of the internal implementation is hanging around where you might accidentally twiddle it and break its assumptions, so you can trust its guarantees more.
other benefits of composition: you don't have to override attributes of your Protocol and thereby indulge in subclassing yourself to get notifications; consider 'prepareConnection', 'whenConnected'.
the retry policy mechanics are better documented and much easier to customize
it's backed by a formal state machine - not that I'm aware of any specific bugs in ReconnectingClientFactory but do you think it got all of these state transitions correct: https://gist.github.com/glyph/614be03151556333efe04b849fa05930 <https://gist.github.com/glyph/614be03151556333efe04b849fa05930>
It's more testable because it just takes its clock and reactor as constructor parameters, rather than requiring post-hoc poorly-documented attribute patching to become testable.

Hopefully at least some of this is convincing :)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190326/143f0701/attachment-0002.html>

From tobias.oberstein at crossbario.com  Tue Mar 26 03:53:07 2019
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Tue, 26 Mar 2019 10:53:07 +0100
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
Message-ID: <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>

>> The Autobahn guys still show ReconnectingClientFactory in their docs, 

Where did you find that? That would be a doc bug, but in the _docs_, 
there is no reference to ReconnectingClientFactory

(cpy372_3) oberstet at intel-nuci7:~$ find 
~/scm/crossbario/autobahn-python/docs/ -type f -exec grep -Hi 
"ReconnectingClientFactory" {} \;
(cpy372_3) oberstet at intel-nuci7:~$

We do have some example code using ReconnectingClientFactory though:

(cpy372_3) oberstet at intel-nuci7:~$ find 
~/scm/crossbario/autobahn-python/examples/ -type f -exec grep -Hi 
"ReconnectingClientFactory" {} \; | wc -l
8

>> and I remember looking at this before and ending up going with 
>> ReconnectingClientFactory because it works and didn't look like it'd 
>> need much effort to integrated into an existing code base.
> 
> Let me count the ways.
> 
>  1. ReconnectingClientFactory is destined for deprecation, eventually.
>       You should just adopt the "new" thing now so that if we get more
>     energy to cycle the APIs and delete the old stuff, you'll have less
>     hassle to deal with.  ("New" is in quotes here since it's been
>     around for well over 3 years at this point; Autobahn should update
>     too, not just you.)

Autobahn will automatically use

twisted.application.internet.ClientService

for auto-reconnect when on Twisted 16.1.0+

https://github.com/crossbario/autobahn-python/blob/master/autobahn/twisted/wamp.py#L349

>  2. ClientService works with endpoints, which means you can use it with
>     /any/ kind of transport, like SSH transports, subprocesses, etc.
>       Most practically, it works with HostnameEndpoint which is a much
>     better way to get TLS than connectSSL; ReconnectingClientFactory
>     works, kind of accidentally, with TLS since connectSSL is on the
>     reactor, but it won't use happy eyeballs and it won't connect over
>     IPv6, so connections will be slower and less reliable.
>  3. Conceptually, ClientService has a much clearer and more useful
>     responsibility: its job is to /maintain a state/ (i.e.: that there
>     is a single connection, that it is connected) rather than to /do a
>     thing/.  For example,
>      1. if you want to shut down a ReconnectingClientFactory:
>          1. you have to call stopTrying, then uh...
>          2. find the last protocol it built with buildProtocol, then
>          3. grab its transport (hope it's saving that transport as
>             '.transport', because it doesn't actually have to)
>          4. call loseConnection
>          5. remember to trap connectionLost so you can see when its done.
>      2. if you want to shut down a ClientService
>          1. call stopService
>          2. wait for the Deferred that it returned to fire
>  4. ClientService is (mostly) implemented using composition rather than
>     inheritance, so much less of the guts of the internal implementation
>     is hanging around where you might accidentally twiddle it and break
>     its assumptions, so you can trust its guarantees more.

++1

(note: Autobahn is a culprit to the overuse of inheritance vs 
composition too .. but the so-called "new API" (for WAMP) is following 
composition + observer pattern, while the "old API" (that is inheriting 
from ApplicationSession) is still pretty much around. we have some 
legacy already ..)

>      1. other benefits of composition: you don't have to override
>         attributes of your Protocol and thereby indulge in subclassing
>         yourself to get notifications; consider 'prepareConnection',
>         'whenConnected'.
>      2. the retry policy mechanics are better documented and much easier
>         to customize
>      3. it's backed by a formal state machine - not that I'm aware of
>         any specific bugs in ReconnectingClientFactory but do you think
>         it got /all/ of these state transitions correct:
>         https://gist.github.com/glyph/614be03151556333efe04b849fa05930
>  5. It's more testable because it just takes its clock and reactor as
>     constructor parameters, rather than requiring post-hoc
>     poorly-documented attribute patching to become testable.
> 
> 
> Hopefully at least some of this is convincing :)

all and each of them is convincing;)

> 
> -g
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 

Tobias Oberstein - phone +49 176 2375 2055 - tobias.oberstein at crossbario.com
Crossbar.io GmbH - Waldstrasse 18 - 91054 Erlangen
HRB 15870 - Amtsgericht Fuerth - Geschäftsfuehrer/CEO - Tobias Oberstein

https://crossbar.io
https://crossbario.com



From chris at cmsconstruct.com  Tue Mar 26 07:34:40 2019
From: chris at cmsconstruct.com (Chris Satterthwaite)
Date: Tue, 26 Mar 2019 08:34:40 -0500
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <664a2b76-656a-333e-49d5-bcdd32cec4eb@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <b6fd0b6f-70aa-7cbb-a068-d9f188883db5@withers.org>
 <000201d4e106$ab0cc060$01264120$@cmsconstruct.com>
 <664a2b76-656a-333e-49d5-bcdd32cec4eb@withers.org>
Message-ID: <002b01d4e3d8$aa6369f0$ff2a3dd0$@cmsconstruct.com>

Hi Chris,

The print and sleep statements are just my efforts at converting something big down to something small for a test case.  In the actual client I'm using twisted.logger for FilteringLogObserver's and Logger's.  The looping call for system health was also a shorted version; I wasn't sure if looping calls were the culprit at the start.  I appologise for the fluff and if I introduced confusion.  I just figured that posting multiple classes and thousands of lines would get less response than an attempted short test sample.


> when you say "When the client hits a problem, it calls transport.loseConnection()", where is that call to transport.loseConnection?

The transport.loseConnection call is on line 82 of the test client code; it's inside the cleanup() function.


> Now, as to what your problem is, I suspect it's this call to stopTrying:
> https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L87

I may be missing this from the Twisted side, but I understood that stopFactory was only called when the reactor was cleaning up.  So I added stopTrying in there for the ReconnectingClientFactory portion, amongst many other lines (that I removed for the example) for stopping external dependencies.  All that seemed to work fine.


When I called loseConnection with just a single established connection, stopFactory was called and ReconnectingClientFactory was not restarted or reconnected.  Seemed like ReconnectingClientFactory was not expecting a new connection attempt after the loseConnection call.  Additionally, it seemed like the factory expected to clean up and stop the reactor whenever loseConnection was called with that single connection.  And of course in most use-cases, that makes sense.  But my goal was to hang on to the factory after loseConnection, and continue work after external dependencies came back online.


> when you noticed some Twisted source code that works off factory.numPorts, where is that code?

To troubleshoot, I used __dict__ to start investigating variable values with the factory and client.  And I used that to start searching through the twisted code in site-packages.  I noticed at least one function which conditionally worked off numPorts in order to shut things down (twisted.internet.protocol.AbstractDatagramProtocol.doStop).  Here's the code:
        assert self.numPorts > 0
        self.numPorts = self.numPorts - 1
        self.transport = None
        if not self.numPorts:
            if self.noisy:
                log.msg("Stopping protocol %s" % self)
            self.stopProtocol()

And so the work around I implemented was to conditionally increase this number while I controlled the disconnect/reconnect.  Seemed to work fine in practice.


Thanks again for the responses.  Given all the benefits Glyph mentioned of ClientService - I've added that migration into my roadmap.

-Chris


-----Original Message-----
From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of Chris Withers
Sent: Tuesday, March 26, 2019 2:28 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] stop/start client connections with loseConnection in ReconnectingClientFactory

On 22/03/2019 23:26, Chris Satterthwaite wrote:
> Hi Chris,
> 
> The files I attached (with the full classes) made it through to my email, but I wondered if they would they go through to everyone.
> 
> Here's a gist with the same scripts:
> https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519
> f
> 
> And yep, as you mentioned, a 'sleep' is definitely blocking.  That's not in the production version; I just dropped it in here for the test script to simulate something.

Observations:

- Your super call at
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L46,
I'd expect that to be super(ServiceClientFactory, self).__init__(), but your spelling may be a python 3 only thing that works?

- Those sleeps are going to cause you more problems than they solve.

- What does this seek to achieve? 
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L88-L89

- Why not use twisted logging instead of print? By setting it to debug, you'll get lots of into about what twisted is doing, and by using logging you won't need to do all that manual traceback printing.

- when you say "When the client hits a problem, it calls transport.loseConnection()", where is that call to transport.loseConnection?

- when you noticed some Twisted source code that works off factory.numPorts, where is that code? Can you provide a link? This doesn't sound right...

Now, as to what your problem is, I suspect it's this call to stopTrying:
https://gist.github.com/codingadvocate/f732da79ddf6cef4b7a0b6b3679f519f#file-testclient-py-L87

The factory is stopped and started again by ReconnectingClientFactory, so you don't want that there as it means you stop trying every time there's a disconnection.

cheers,

Chris

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From rodrigc at crodrigues.org  Tue Mar 26 20:35:58 2019
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 26 Mar 2019 19:35:58 -0700
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <CAG=rPVfLmZQrkEwoHzu8Rm-Xh9jhqBPOoDjA2NHhLGuMBoQN_g@mail.gmail.com>

On Mon, Mar 25, 2019 at 3:15 AM Amber Brown <hawkowl at atleastfornow.net>
wrote:

>
>
>
> You can find the proposal here, in this handy-dandy Google Doc:
>
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
>
>
Thanks for writing that doc.
I think option 3 of making Twisted 19.4 the last Python 2 release, with
security updates until 2021 is
actually pretty reasonable.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190326/3f957809/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Mar 26 20:59:01 2019
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 26 Mar 2019 19:59:01 -0700
Subject: [Twisted-Python] Drop support for Python 3.4?
Message-ID: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>

What do people think of dropping Twisted support for Python 3.4?

According to https://devguide.python.org/#status-of-python-branches

Python 3.4 EOL'd on March 19, 2019.

In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
the end of this year we will have Python 3.8.

That's quite a lot of Python versions to support.

Python 3.5 introduced async/await keywords, which are very relevant to
Twisted:
https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492

If it makes sense, it would be nice to use these keywords as first-level
features in Twisted.

Since Amber brought up discussion of dropping Python 2.7 here:
https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html

I thought I would raise dropping Python 3.4 also.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190326/09bf50b8/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Mar 26 23:04:17 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 26 Mar 2019 22:04:17 -0700
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
Message-ID: <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>



> On Mar 26, 2019, at 7:59 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> What do people think of dropping Twisted support for Python 3.4?
> 
> According to https://devguide.python.org/#status-of-python-branches <https://devguide.python.org/#status-of-python-branches>
> 
> Python 3.4 EOL'd on March 19, 2019.
> 
> In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> the end of this year we will have Python 3.8.
> 
> That's quite a lot of Python versions to support.
> 
> Python 3.5 introduced async/await keywords, which are very relevant to Twisted:
> https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492 <https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492>
> 
> If it makes sense, it would be nice to use these keywords as first-level features in Twisted.
> 
> Since Amber brought up discussion of dropping Python 2.7 here:
> https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html <https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html>
> 
> I thought I would raise dropping Python 3.4 also.

I'll let any 3.4 users speak for themselves if they're out there, but while I can imagine a host of reasons we might want to still support 2.7, I can't think of any that we'd want to hang on to 3.4 any longer than necessary.  3.5 still has the lingering benefit of a production(-ish) pypy, so we might not want to jump to 3.6-only anyway, but if it's unsupported by python core, let's get rid of it.  Faster round trips through CI are reason enough :-).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190326/1f6d6258/attachment-0002.html>

From adi at roiban.ro  Wed Mar 27 02:45:13 2019
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 27 Mar 2019 08:45:13 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <3F533AD3-7485-42E3-B77B-35024CF918CA@twistedmatrix.com>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
 <3F533AD3-7485-42E3-B77B-35024CF918CA@twistedmatrix.com>
Message-ID: <CAFycZ9eT10=N3rcKch1N-7BQ6fEJra4NFd1WGuvKuLQtqaybjQ@mail.gmail.com>

On Tue, 26 Mar 2019 at 04:52, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Mar 25, 2019, at 3:15 AM, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
>
> Hi everyone,
>
> Since the Python 2 EOL date is rapidly approaching, I thought it was time we consider dropping Python 2 support.
>
> I personally find that Python 2 compat adds a huge amount of overhead when working on and maintaining Twisted, and think that with the current maintainer availability, dropping it sooner rather than later would have a beneficial effect on how much work we spend on shims/compat, complexity, and our ability to ship new features, as well as onboarding people who are interested in the project, but have no interest (or experience!) in Python 2.7.
>
>
> Personally, I don't have this problem, but I'm certainly willing to believe it's a bigger deal for others; especially others who perhaps have not even learned Python 2 at this point.

I am still using python 2.7 on all my projects, and I remember the
sending patches supporting python 3 was an extra effort... I had to
learn python 3 things, and then search for ways / workaround to
implement something in a py2 + py3 way... read six documentation.

I guess that many Twisted developers don't have too much free time,
this can add up.

For me learning py3 was ok as at some point I will use it...but I
guess that for people who will never use py2 is just unwanted work.

>
>
> Here's my question about this:
>
> Who will do this work?
>
> Personally, I'm not willing to commit to this.  I know from experience both on Twisted and other projects that maintaining multiple release branches, even one that's "maintenance only", requires at least one point-person for each branch at all times (usually a "release manager").  And backporting fixes inevitably gets harder and harder as the "maintenance" branch diverges from top-of-tree.  If I have time to work on Twisted in my increasingly scarce spare time, I want it to be on something at least plausibly interesting, and manually backporting manual fixes to an unmaintained py2 branch that I don't even use doesn't qualify.
>
[SNIP]
>
> Do we have py2-only users who are willing to take ownership of this branch?  Specific people willing to sign up for this responsibility for the next... how long?  Three years?  Five years?
>


I can help with backporting security fixed for the next 5 years, as I
will use it.

I am still using 15.5 due to lack of python cryptography on all
systems, and I have a fork for twisted.web with support for resources
which can add custom `Expect: 100-continue` behaviour.

I am doing backporting and as long as there is a CI, is not that hard.

I hope there will be at least another person to help reviewing the backports.

> So I'd rather be quite explicit that while we would not object to anyone filling these roles, someone still needs to step forward and fill them, and I'm not willing to commit the current team, such as it is, to work that I myself am unwilling to do.  If nobody does step forward we should not claim to have security support for a dead / unmaintained branch.

Well.. this is free/libre software so I guess that nobody will be sued
if we commit to something, and later we found out that this can't be
done.

> One of my rationales is that from some analysis of PyPI download statistics, the vast majority of Python 2 users are using old versions of Twisted, while nearly all our Python 3 users are on the latest version. As such, I believe freezing a version that will get security updates but no new features would not be a massive loss to those stuck on Python 2 for whatever reason.
>
>
> I know that you detailed some of this on IRC, but: how old?
>
> My sense would be that of course users stuck on py2 would have a more conservative upgrade cadence than py3 users, but that doesn't mean they never upgrade.  How far behind are these py2 users, and does the curve suggest they're catching up or are most twisted downloads just like, version 1.3 on python 1.5.2 forever?
>

>From my experience the upgrade is between 5 to 10 years.
But the upgrade is done only because the system will be obsolete.
Old version run in private networks, without Internet access with
nobody willing to touch a working system.

PCI don't help. So far, they have only asked for TLS1.2 and removal of
CBC Mode ciphers in SSH...and that is all.
They have never complained about old OpenSSH or OpenSSL versions...
and when you have custom old software, the PCI auditor have no clue.

I know more than 3 big companies which still have not upgraded to TLS
1.2 even with all the PCI audits...they always get extensions and
workarounds.

> Twisted's compatibility policy would still apply, ensuring that Python 2/3 compatible software using Twisted would be able to use the older Twisted version on Python 2, and the newer version on Python 3, as you would usually expect.
>
>
> We have 2 big blockers here right now that would prevent doing this as things stand right now:
>
> Twisted is not yet fully ported to Python 3, so there's no version where you can use all of Twisted on Python 3.  This picture is way, way smaller than it has ever been, though - grab a module and start porting: http://blog.habnab.it/twisted-depgraph/
> We still have Python 2 in production ourselves that requires Twisted; specifically:
>
> Trac and several of our ancillary utilities around it.  Happily this does seem to be fairly actively worked on: "opened 4 years ago, last modified 12 days ago" https://trac.edgewall.org/ticket/12130

Do we really need Trac?
Maybe is time to move the tickets and wiki to GitHub.

> Dogfood DNS: twisted.names doesn't work on python 3: https://twistedmatrix.com/trac/ticket/9496

I have never used Twisted.names in production.
I tried to help with the review of twisted.names patches, and I
remember there was not much interest for twisted.names
So maybe we can get rid of it and move it to a separate project.

I don't think that we need to have everything in twisted core... if
ldaptor is an external project, why we can't have twisted.names


> Our front-end webserver might work on pypy3, but we have yet to move it over.  Maybe that would be a good place to start?
>
>
> If this proposal lights a fire under some folks to drive any of these projects to completion, that would be great!

My hope is that this proposal will light a fire and people using
Twisted will more about Twisted.

I feel that Twisted stability and reduce number of defects is not
helping the open source dev model.
People will use Twisted, it just work and they forget about it.
Or if it doesn't work, they can fix something on their project
relatively easy...but takes a lot of effort to send upstream..so they
will never put the effort required to have a fix upstream.

> You can find the proposal here, in this handy-dandy Google Doc: https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>
> Comments are welcome, as well as which timeline seems reasonable.
>
>
> Personally I feel like Option 1 is the most reasonable.  We can't do option 3 because of the above blockers, and option 2 just seems random to me - why commit to 4 months of additional maintenance beyond when py2 itself is EOL?  Maybe there's an option like, 1.5, where we de-support py2 at max(2020-01-01, "the date at which we no longer have any py2 code in production ourselves")?

If we keep the current prod infrastructure, I am not confident that we
will no longer have py2 code in prod by the end of this year.

I don't feel that the current Twisted team have resource to maintain a
custom infrastructure.
I think that things will be better for everyone if for example of
Twisted names we will just use the credit on Azure to keep the DNS and
use more Software as a Service so that the team will spend more time
on developing new feature than doing sysadmin work.

Dogfooding is a good thing, but in this case, I fell that it does not help.

--
Adi Roiban



From hawkowl at atleastfornow.net  Wed Mar 27 03:59:54 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Wed, 27 Mar 2019 20:59:54 +1100
Subject: [Twisted-Python] Twisted 19.2.0rc2 Release Candidate Announcement
Message-ID: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>

Hello everyone! 19.2.0rc2 is now out. Sorry for the delay!

This fixes the Cryptography dependency being set to 1.5, when we 
actually require at least 2.5.

You can get the tarball and the NEWS file at 
https://twistedmatrix.com/Releases/rc/19.2.0rc2/ , or you can try it out 
from PyPI:

     python -m pip install Twisted==19.2.0rc2

Please test it, and let me know how your applications fare, good or bad! 
If nothing comes up, 19.2 will release in a week.

Twisted regards,

Amber Brown (hawkowl)



From julian at grayvines.com  Wed Mar 27 06:32:31 2019
From: julian at grayvines.com (Julian Berman)
Date: Wed, 27 Mar 2019 08:32:31 -0400
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support (Craig Rodrigues)
In-Reply-To: <mailman.24.1553676330.2410.twisted-python@twistedmatrix.com>
References: <mailman.24.1553676330.2410.twisted-python@twistedmatrix.com>
Message-ID: <CABJQSkkQtEFRJevCrKUr6cCgBBUdudEyXJiyhyPgpVwdHmKxKQ@mail.gmail.com>

Hi!

Figured it might be helpful to just throw in the other viewpoint (that I'd
hold).

Which is -- I use a Python 2.7 [PyPy] not end of lifing in 2020 (or in the
forseeable future -- and one by the way I'd wholeheartedly have recommended
more of us use even before now :). At work, we develop even new
applications on it, and likely will not have any plans to move anything
really until at least a year or two, until PyPy3 matures and until we have
time to do extensive benchmarking showing it isn't slower than PyPy2.

So my personal opinion would be obviously "drop Py2 support immediately" --
nope kidding, just making sure you're still reading -- it's "keep it
forever and we all suffer, hooray".

I don't contribute to Twisted as much as I'd like (or should), and I fully
recognize the huge efforts of others who hey shouldn't do free work just on
my behalf -- but, in case it's valuable, FWIW dropping Py2 support would
make me *less* likely to contribute :), since I couldn't rely on being able
to use my own contributions -- perhaps though a decent solution to this
side of things is for twisted to continue to pursue being more modular than
it is today (i.e. break it up).

-J

On Wed, Mar 27, 2019 at 4:45 AM <twisted-python-request at twistedmatrix.com>
wrote:

> Send Twisted-Python mailing list submissions to
>         twisted-python at twistedmatrix.com
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> or, via email, send a message with subject or body 'help' to
>         twisted-python-request at twistedmatrix.com
>
> You can reach the person managing the list at
>         twisted-python-owner at twistedmatrix.com
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-Python digest..."
> Today's Topics:
>
>    1. Re: A Proposal for reducing the burden of developing on
>       Twisted by dropping Python 2 support (Craig Rodrigues)
>    2. Drop support for Python 3.4? (Craig Rodrigues)
>    3. Re: Drop support for Python 3.4? (Glyph)
>    4. Re: A Proposal for reducing the burden of developing on
>       Twisted by dropping Python 2 support (Adi Roiban)
>
>
>
> ---------- Forwarded message ----------
> From: Craig Rodrigues <rodrigc at crodrigues.org>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Cc:
> Bcc:
> Date: Tue, 26 Mar 2019 19:35:58 -0700
> Subject: Re: [Twisted-Python] A Proposal for reducing the burden of
> developing on Twisted by dropping Python 2 support
>
>
> On Mon, Mar 25, 2019 at 3:15 AM Amber Brown <hawkowl at atleastfornow.net>
> wrote:
>
>>
>>
>>
>> You can find the proposal here, in this handy-dandy Google Doc:
>>
>> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
>>
>>
>>
> Thanks for writing that doc.
> I think option 3 of making Twisted 19.4 the last Python 2 release, with
> security updates until 2021 is
> actually pretty reasonable.
>
> --
> Craig
>
>
>
> ---------- Forwarded message ----------
> From: Craig Rodrigues <rodrigc at crodrigues.org>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Cc:
> Bcc:
> Date: Tue, 26 Mar 2019 19:59:01 -0700
> Subject: [Twisted-Python] Drop support for Python 3.4?
> What do people think of dropping Twisted support for Python 3.4?
>
> According to https://devguide.python.org/#status-of-python-branches
>
> Python 3.4 EOL'd on March 19, 2019.
>
> In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> the end of this year we will have Python 3.8.
>
> That's quite a lot of Python versions to support.
>
> Python 3.5 introduced async/await keywords, which are very relevant to
> Twisted:
> https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492
>
> If it makes sense, it would be nice to use these keywords as first-level
> features in Twisted.
>
> Since Amber brought up discussion of dropping Python 2.7 here:
> https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html
>
> I thought I would raise dropping Python 3.4 also.
> --
> Craig
>
>
>
> ---------- Forwarded message ----------
> From: Glyph <glyph at twistedmatrix.com>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Cc:
> Bcc:
> Date: Tue, 26 Mar 2019 22:04:17 -0700
> Subject: Re: [Twisted-Python] Drop support for Python 3.4?
>
>
> On Mar 26, 2019, at 7:59 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> What do people think of dropping Twisted support for Python 3.4?
>
> According to https://devguide.python.org/#status-of-python-branches
>
> Python 3.4 EOL'd on March 19, 2019.
>
> In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> the end of this year we will have Python 3.8.
>
> That's quite a lot of Python versions to support.
>
> Python 3.5 introduced async/await keywords, which are very relevant to
> Twisted:
> https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492
>
> If it makes sense, it would be nice to use these keywords as first-level
> features in Twisted.
>
> Since Amber brought up discussion of dropping Python 2.7 here:
> https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html
>
> I thought I would raise dropping Python 3.4 also.
>
>
> I'll let any 3.4 users speak for themselves if they're out there, but
> while I can imagine a host of reasons we might want to still support 2.7, I
> can't think of any that we'd want to hang on to 3.4 any longer than
> necessary.  3.5 still has the lingering benefit of a production(-ish) pypy,
> so we might not want to jump to 3.6-only anyway, but if it's unsupported by
> python core, let's get rid of it.  Faster round trips through CI are reason
> enough :-).
>
> -g
>
>
>
>
> ---------- Forwarded message ----------
> From: Adi Roiban <adi at roiban.ro>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Cc:
> Bcc:
> Date: Wed, 27 Mar 2019 08:45:13 +0000
> Subject: Re: [Twisted-Python] A Proposal for reducing the burden of
> developing on Twisted by dropping Python 2 support
> On Tue, 26 Mar 2019 at 04:52, Glyph <glyph at twistedmatrix.com> wrote:
> >
> > On Mar 25, 2019, at 3:15 AM, Amber Brown <hawkowl at atleastfornow.net>
> wrote:
> >
> >
> > Hi everyone,
> >
> > Since the Python 2 EOL date is rapidly approaching, I thought it was
> time we consider dropping Python 2 support.
> >
> > I personally find that Python 2 compat adds a huge amount of overhead
> when working on and maintaining Twisted, and think that with the current
> maintainer availability, dropping it sooner rather than later would have a
> beneficial effect on how much work we spend on shims/compat, complexity,
> and our ability to ship new features, as well as onboarding people who are
> interested in the project, but have no interest (or experience!) in Python
> 2.7.
> >
> >
> > Personally, I don't have this problem, but I'm certainly willing to
> believe it's a bigger deal for others; especially others who perhaps have
> not even learned Python 2 at this point.
>
> I am still using python 2.7 on all my projects, and I remember the
> sending patches supporting python 3 was an extra effort... I had to
> learn python 3 things, and then search for ways / workaround to
> implement something in a py2 + py3 way... read six documentation.
>
> I guess that many Twisted developers don't have too much free time,
> this can add up.
>
> For me learning py3 was ok as at some point I will use it...but I
> guess that for people who will never use py2 is just unwanted work.
>
> >
> >
> > Here's my question about this:
> >
> > Who will do this work?
> >
> > Personally, I'm not willing to commit to this.  I know from experience
> both on Twisted and other projects that maintaining multiple release
> branches, even one that's "maintenance only", requires at least one
> point-person for each branch at all times (usually a "release manager").
> And backporting fixes inevitably gets harder and harder as the
> "maintenance" branch diverges from top-of-tree.  If I have time to work on
> Twisted in my increasingly scarce spare time, I want it to be on something
> at least plausibly interesting, and manually backporting manual fixes to an
> unmaintained py2 branch that I don't even use doesn't qualify.
> >
> [SNIP]
> >
> > Do we have py2-only users who are willing to take ownership of this
> branch?  Specific people willing to sign up for this responsibility for the
> next... how long?  Three years?  Five years?
> >
>
>
> I can help with backporting security fixed for the next 5 years, as I
> will use it.
>
> I am still using 15.5 due to lack of python cryptography on all
> systems, and I have a fork for twisted.web with support for resources
> which can add custom `Expect: 100-continue` behaviour.
>
> I am doing backporting and as long as there is a CI, is not that hard.
>
> I hope there will be at least another person to help reviewing the
> backports.
>
> > So I'd rather be quite explicit that while we would not object to anyone
> filling these roles, someone still needs to step forward and fill them, and
> I'm not willing to commit the current team, such as it is, to work that I
> myself am unwilling to do.  If nobody does step forward we should not claim
> to have security support for a dead / unmaintained branch.
>
> Well.. this is free/libre software so I guess that nobody will be sued
> if we commit to something, and later we found out that this can't be
> done.
>
> > One of my rationales is that from some analysis of PyPI download
> statistics, the vast majority of Python 2 users are using old versions of
> Twisted, while nearly all our Python 3 users are on the latest version. As
> such, I believe freezing a version that will get security updates but no
> new features would not be a massive loss to those stuck on Python 2 for
> whatever reason.
> >
> >
> > I know that you detailed some of this on IRC, but: how old?
> >
> > My sense would be that of course users stuck on py2 would have a more
> conservative upgrade cadence than py3 users, but that doesn't mean they
> never upgrade.  How far behind are these py2 users, and does the curve
> suggest they're catching up or are most twisted downloads just like,
> version 1.3 on python 1.5.2 forever?
> >
>
> >From my experience the upgrade is between 5 to 10 years.
> But the upgrade is done only because the system will be obsolete.
> Old version run in private networks, without Internet access with
> nobody willing to touch a working system.
>
> PCI don't help. So far, they have only asked for TLS1.2 and removal of
> CBC Mode ciphers in SSH...and that is all.
> They have never complained about old OpenSSH or OpenSSL versions...
> and when you have custom old software, the PCI auditor have no clue.
>
> I know more than 3 big companies which still have not upgraded to TLS
> 1.2 even with all the PCI audits...they always get extensions and
> workarounds.
>
> > Twisted's compatibility policy would still apply, ensuring that Python
> 2/3 compatible software using Twisted would be able to use the older
> Twisted version on Python 2, and the newer version on Python 3, as you
> would usually expect.
> >
> >
> > We have 2 big blockers here right now that would prevent doing this as
> things stand right now:
> >
> > Twisted is not yet fully ported to Python 3, so there's no version where
> you can use all of Twisted on Python 3.  This picture is way, way smaller
> than it has ever been, though - grab a module and start porting:
> http://blog.habnab.it/twisted-depgraph/
> > We still have Python 2 in production ourselves that requires Twisted;
> specifically:
> >
> > Trac and several of our ancillary utilities around it.  Happily this
> does seem to be fairly actively worked on: "opened 4 years ago, last
> modified 12 days ago" https://trac.edgewall.org/ticket/12130
>
> Do we really need Trac?
> Maybe is time to move the tickets and wiki to GitHub.
>
> > Dogfood DNS: twisted.names doesn't work on python 3:
> https://twistedmatrix.com/trac/ticket/9496
>
> I have never used Twisted.names in production.
> I tried to help with the review of twisted.names patches, and I
> remember there was not much interest for twisted.names
> So maybe we can get rid of it and move it to a separate project.
>
> I don't think that we need to have everything in twisted core... if
> ldaptor is an external project, why we can't have twisted.names
>
>
> > Our front-end webserver might work on pypy3, but we have yet to move it
> over.  Maybe that would be a good place to start?
> >
> >
> > If this proposal lights a fire under some folks to drive any of these
> projects to completion, that would be great!
>
> My hope is that this proposal will light a fire and people using
> Twisted will more about Twisted.
>
> I feel that Twisted stability and reduce number of defects is not
> helping the open source dev model.
> People will use Twisted, it just work and they forget about it.
> Or if it doesn't work, they can fix something on their project
> relatively easy...but takes a lot of effort to send upstream..so they
> will never put the effort required to have a fix upstream.
>
> > You can find the proposal here, in this handy-dandy Google Doc:
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
> >
> > Comments are welcome, as well as which timeline seems reasonable.
> >
> >
> > Personally I feel like Option 1 is the most reasonable.  We can't do
> option 3 because of the above blockers, and option 2 just seems random to
> me - why commit to 4 months of additional maintenance beyond when py2
> itself is EOL?  Maybe there's an option like, 1.5, where we de-support py2
> at max(2020-01-01, "the date at which we no longer have any py2 code in
> production ourselves")?
>
> If we keep the current prod infrastructure, I am not confident that we
> will no longer have py2 code in prod by the end of this year.
>
> I don't feel that the current Twisted team have resource to maintain a
> custom infrastructure.
> I think that things will be better for everyone if for example of
> Twisted names we will just use the credit on Azure to keep the DNS and
> use more Software as a Service so that the team will spend more time
> on developing new feature than doing sysadmin work.
>
> Dogfooding is a good thing, but in this case, I fell that it does not help.
>
> --
> Adi Roiban
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190327/69273bba/attachment-0002.html>

From maarten at treewalker.org  Wed Mar 27 12:55:19 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 27 Mar 2019 19:55:19 +0100
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
 <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>
Message-ID: <4047129.1hCDKizrtX@hyperion>

On Wednesday, 27 March 2019 06:04:17 CET Glyph wrote:
> > On Mar 26, 2019, at 7:59 PM, Craig Rodrigues
> > <rodrigc at crodrigues.org> wrote:
> > 
> > What do people think of dropping Twisted support for Python 3.4?
> > 
> > According to https://devguide.python.org/#status-of-python-branches
> > <https://devguide.python.org/#status-of-python-branches>
> > 
> > Python 3.4 EOL'd on March 19, 2019.
> > 
> > In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> > the end of this year we will have Python 3.8.
> > 
> > That's quite a lot of Python versions to support.
> > 
> > Python 3.5 introduced async/await keywords, which are very relevant
> > to Twisted:
> > https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492
> > <https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492>
> > 
> > If it makes sense, it would be nice to use these keywords as
> > first-level features in Twisted.
> > 
> > Since Amber brought up discussion of dropping Python 2.7 here:
> > https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234
> > .html
> > <https://twistedmatrix.com/pipermail/twisted-python/2019-March/0322
> > 34.html>
> > 
> > I thought I would raise dropping Python 3.4 also.
> 
> I'll let any 3.4 users speak for themselves if they're out there, but
> while I can imagine a host of reasons we might want to still support
> 2.7, I can't think of any that we'd want to hang on to 3.4 any longer
> than necessary.  3.5 still has the lingering benefit of a
> production(-ish) pypy, so we might not want to jump to 3.6-only
> anyway, but if it's unsupported by python core, let's get rid of it. 
> Faster round trips through CI are reason enough :-).

Python 3.5 is still the default python3 version in Debian stable, so 
updating beyond that might make it more complex for Debian users to 
install Twisted.

One advantage of 3.5 over 3.4 is that support for type annotations is 
included (with some limitations compared to 3.6). Is this something that 
Twisted plans to adopt?

My personal experience with type annotations so far as that they 
occasionally uncover a bug, but the main benefit is in having formal 
documentation of types that can be verified by tooling (mypy).

Bye,
		Maarten





From tobias.oberstein at crossbario.com  Wed Mar 27 14:32:59 2019
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Wed, 27 Mar 2019 21:32:59 +0100
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <4047129.1hCDKizrtX@hyperion>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
 <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>
 <4047129.1hCDKizrtX@hyperion>
Message-ID: <03028a69-8991-f772-bfcd-398977b1d2db@crossbario.com>

> Python 3.5 is still the default python3 version in Debian stable, so
> updating beyond that might make it more complex for Debian users to
> install Twisted.

yeah, that, and: as of today, pypy3 is at python 3.5

so _not_ supporting 3.5 would definitely be a problem for us (crossbar.io)

dropping 3.4: no problem with that, same with 3.3

dropping 2.7: np .. even though there are users of autobahn (a 
websocket/wamp library) still on py2.7, and we fully support that right 
now and have no plans (yet) to retire it

cheers,
/Tobias



From donal.mcmullan at gmail.com  Thu Mar 28 08:01:39 2019
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Thu, 28 Mar 2019 14:01:39 +0000
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <03028a69-8991-f772-bfcd-398977b1d2db@crossbario.com>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
 <DCDF2B51-8F80-4671-B9DC-6EEEB335563B@twistedmatrix.com>
 <4047129.1hCDKizrtX@hyperion>
 <03028a69-8991-f772-bfcd-398977b1d2db@crossbario.com>
Message-ID: <CADf-aJEtXQU_RqfTK6brwWr5gmswTZF1Wc_OeqrFB=9q79h7+A@mail.gmail.com>

Twisted on pypy is important for us. We don't care about 3.4 support at all.

Thanks

DJM

On Wed, 27 Mar 2019 at 20:55, Tobias Oberstein <
tobias.oberstein at crossbario.com> wrote:

> > Python 3.5 is still the default python3 version in Debian stable, so
> > updating beyond that might make it more complex for Debian users to
> > install Twisted.
>
> yeah, that, and: as of today, pypy3 is at python 3.5
>
> so _not_ supporting 3.5 would definitely be a problem for us (crossbar.io)
>
> dropping 3.4: no problem with that, same with 3.3
>
> dropping 2.7: np .. even though there are users of autobahn (a
> websocket/wamp library) still on py2.7, and we fully support that right
> now and have no plans (yet) to retire it
>
> cheers,
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190328/478aefb8/attachment-0002.html>

From grimmtooth at gmail.com  Fri Mar 29 11:20:35 2019
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Fri, 29 Mar 2019 13:20:35 -0400
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <CA+1iZEcUe3T=2zt2Tkn4H_gSOgQ=9GE-TfN75pOT-98PLEnVUQ@mail.gmail.com>

 I don't have any skin in this game other than as a consumer, but I agree
that the proposed plan makes sense, FWIW.

Freezing at a specific version in sync (ish) with the Py2 support
notification has a certain symmetry to it :)

Regards,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190329/a6faeaec/attachment-0002.html>

From twm at freecog.net  Fri Mar 29 12:13:46 2019
From: twm at freecog.net (Tom Most)
Date: Fri, 29 Mar 2019 14:13:46 -0400
Subject: [Twisted-Python] 
 =?utf-8?q?A_Proposal_for_reducing_the_burden_of?=
 =?utf-8?q?_developing_on_Twisted_by_dropping_Python_2_support?=
In-Reply-To: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
Message-ID: <b7de3b7c-f882-4c0e-839c-d4eddcc24267@www.fastmail.com>

This also works for me and at $EMPLOYER. We expect the same or similar to happen in many more parts of the Python ecosystem.

-- 
  Tom Most
  twm at freecog.net

On Mon, Mar 25, 2019, at 3:15 AM, Amber Brown wrote:
> Hi everyone,
> 
> Since the Python 2 EOL date is rapidly approaching, I thought it was 
> time we consider dropping Python 2 support.
> 
> I personally find that Python 2 compat adds a huge amount of overhead 
> when working on and maintaining Twisted, and think that with the current 
> maintainer availability, dropping it sooner rather than later would have 
> a beneficial effect on how much work we spend on shims/compat, 
> complexity, and our ability to ship new features, as well as onboarding 
> people who are interested in the project, but have no interest (or 
> experience!) in Python 2.7.
> 
> It is basically summed up by doing a feature freeze on an agreed-upon 
> version of Twisted, that will be the last version released for 2.7. It 
> would be abnormal in that it would get security fixes (our current 
> policy is to only release them for current versions) and critical 
> bugfixes, but would otherwise be frozen.
> 
> One of my rationales is that from some analysis of PyPI download 
> statistics, the vast majority of Python 2 users are using old versions 
> of Twisted, while nearly all our Python 3 users are on the latest 
> version. As such, I believe freezing a version that will get security 
> updates but no new features would not be a massive loss to those stuck 
> on Python 2 for whatever reason.
> 
> Twisted's compatibility policy would still apply, ensuring that Python 
> 2/3 compatible software using Twisted would be able to use the older 
> Twisted version on Python 2, and the newer version on Python 3, as you 
> would usually expect.
> 
> You can find the proposal here, in this handy-dandy Google Doc: 
> https://docs.google.com/document/d/1S4CGgZC09blLIdk3Zo7wBa75A9_JuuH_3akkyjN0lik/edit
> 
> Comments are welcome, as well as which timeline seems reasonable.
> 
> - Amber
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From twm at freecog.net  Fri Mar 29 12:19:25 2019
From: twm at freecog.net (Tom Most)
Date: Fri, 29 Mar 2019 14:19:25 -0400
Subject: [Twisted-Python] Drop support for Python 3.4?
In-Reply-To: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
References: <CAG=rPVdEZrCGm-5LgW0EvGcdsHBF7Cqxc2SrpOT8wBjbn02bZg@mail.gmail.com>
Message-ID: <9fbdfb3b-b6f6-42cc-a65d-03a96794cbc5@www.fastmail.com>

I'm happy to drop 3.4 support and prune our build matrix a bit, as well as that in downstream projects.

--
 Tom Most
 twm at freecog.net



On Tue, Mar 26, 2019, at 7:59 PM, Craig Rodrigues wrote:
> What do people think of dropping Twisted support for Python 3.4?
> 
> According to https://devguide.python.org/#status-of-python-branches
> 
> Python 3.4 EOL'd on March 19, 2019.
> 
> In the Python 3 world, we have Python 3.4, 3.5, 3.6, 3.7, and at
> the end of this year we will have Python 3.8.
> 
> That's quite a lot of Python versions to support.
> 
> Python 3.5 introduced async/await keywords, which are very relevant to Twisted:
> https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-492
> 
> If it makes sense, it would be nice to use these keywords as first-level features in Twisted.
> 
> Since Amber brought up discussion of dropping Python 2.7 here:
> https://twistedmatrix.com/pipermail/twisted-python/2019-March/032234.html
> 
> I thought I would raise dropping Python 3.4 also.
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190329/fe522204/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar 31 00:05:24 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 31 Mar 2019 06:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1554012324.64.5799705070018996643@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190331/04393fb2/attachment-0002.html>

