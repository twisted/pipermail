From glyph at twistedmatrix.com  Fri Jan  1 05:05:00 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 1 Jan 2010 05:05:00 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <562bcc10912301607t14df31md1ce470ddc1f1d8b@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<562bcc10912301607t14df31md1ce470ddc1f1d8b@mail.gmail.com>
Message-ID: <CA55AE11-833B-45F9-AD2F-11DBE0D109C8@twistedmatrix.com>


On Dec 30, 2009, at 7:07 PM, Kevin Horn wrote:

> Another quick update...

Keep up the good work!

> - added "stub" sphinx projects for Divmod Nevow, Mantissa, and Epsilon.  I've converted the docs for these projects and built them (mostly) successfully, but I haven't published them anywhere yet (coming soon).  Have I missed any other Divmod projects with Lore docs?

Nope, that's all of them.



From glyph at twistedmatrix.com  Fri Jan  1 05:10:25 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 1 Jan 2010 05:10:25 -0500
Subject: [Twisted-Python] how manual run LoopingCall.f
In-Reply-To: <d59a94870912280505i4f32e7b6vcb9f197fb47c9833@mail.gmail.com>
References: <d59a94870912280505i4f32e7b6vcb9f197fb47c9833@mail.gmail.com>
Message-ID: <A326B8CC-44FA-47C6-9FFD-C32B81895172@twistedmatrix.com>


On Dec 28, 2009, at 8:05 AM, ploutosss ploutosss wrote:

> When I need to perform some function with a time interval of less than
> one second, LoopingCall too slow.

LoopingCall was originally designed for playback of voice samples, in an application which did that once every 10ms, or 0.01 seconds.  It should really be fast enough for you: if it is really too slow, I am guessing that something else is wrong.

> I try use my ticking, but for
> function is not executed too often, I used the following code:
> 
>    def some_function(self):
>        looping_instance = self.looping
>        call = looping_instance.call
>        if call and call.time - call.seconds() <= 0:
>            looping_instance()

This example isn't complete, so I am not sure what the problem is, but I can guess that 'looping_instance' is a LoopingCall instance.  You should not be calling it using __call__ (really, this method is just a cute hack so that the LoopingCall instance can be passed directly to callLater, and show up in the DelayedCall repr, among other things), you should be using its "start" method.

Good luck!

From terry at jon.es  Sat Jan  2 09:34:09 2010
From: terry at jon.es (Terry Jones)
Date: Sat, 2 Jan 2010 15:34:09 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
Message-ID: <19263.22881.934832.166484@jon.es>

I've run into a problem fetching an HTTP page with t.w.client.getPage. It's
not simple to make standalone code showing what's going wrong, but the
following summarizes where I am and why I find this puzzling.

After some setup, I have some a url path, and some headers I want to
send. A summary:

    host = 'ec2.amazon.com'
    port = 443
    path = '/?some=params&are=here&etc=etc'
    method = 'GET'
    data = ''
    headers = { 'some' : 'headers', 'Content-Length' : '0' }
    url = 'https://%s:%d%s' % (host, port, path)

the actual details don't matter right now, I don't think.  When I call

  d = getPage(url, headers=headers)

d's errback fires with a twisted.web.error.Error with a 403 status. So
you'd think I had something wrong in my headers, or was trying to access a
forbidden resource, etc.

But.... when I drop this code in instead of the call to getPage:

    import httplib
    cx = httplib.HTTPSConnection(host, port)
    cx.request(method, path, data, headers)
    response = cx.getresponse()
    print 'response status:', response.status
    body = response.read()
    print 'body:', body

I get a 200 status, and the body is exactly as expected.

BTW, the path above does start with a slash. I've tried using
HTTPClientFactory and reactor.connectSSL directly.  I've tried with and
without the '' postdata and Content-Length header. I've tried with Twisted
8.2.0 and 9.0.0.  And of course I've checked many times that the URL and
its query params requested by httplib and getPage are identical (apart from
the time-sensitive signature).

The reason it's not easy to provide a simple example is that the URL and
headers have signed components, based in part on a timestamp, and based in
part on Amazon secret keys, etc. It's not easy to separate all that, and if
I did I'd be posting at least 100 lines of code that would only run if you
had your Amazon AWS details provided etc.

In any case, it looks like the problem is not in the setup of the request.
Can anyone offer a reason why httplib might be able to fetch the page
whereas getPage receives an error?  I'm stumped.

Terry


From ssteinerx at gmail.com  Sat Jan  2 10:03:16 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 2 Jan 2010 10:03:16 -0500
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: <19263.22881.934832.166484@jon.es>
References: <19263.22881.934832.166484@jon.es>
Message-ID: <28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>


On Jan 2, 2010, at 9:34 AM, Terry Jones wrote:
> In any case, it looks like the problem is not in the setup of the request.
> Can anyone offer a reason why httplib might be able to fetch the page
> whereas getPage receives an error?  I'm stumped.

I've had to debug things like this recently and I have two suggestions:

1> Recreate the headers and make it work with curl.  Curl won't add anything to your headers and such and you'll be sure that you're getting the result you want with completely stripped down case.

2>	Get Charles http://www.charlesproxy.com/ if you're on OS X.  It rocks.  Otherwise, get one of the Windows tools (sorry, no recos from me on that), and watch exactly what goes by.

I had a situation where python's HTTPlib stuff was adding an Accept Encoding header that didn't put there, and it exposed a bug in the API I was using.  When I ran it with curl, worked fine since no additional headers were added.  Charles helped me see what was going on (unfortunately, long after they had fixed that particular bug in the API.

S
aka/Steve Steiner
aka/ssteinerX



From ssteinerx at gmail.com  Sat Jan  2 10:07:02 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 2 Jan 2010 10:07:02 -0500
Subject: [Twisted-Python] Fwd:  Problem fetching page with getPage
References: <mailman.121033.1262444732.23374.twisted-python@twistedmatrix.com>
Message-ID: <B5E47A4C-55AA-4C36-B8B4-BD3741F2EABA@gmail.com>


Sorry...

>> I had a situation where python's HTTPlib stuff was adding an Accept Encoding header
>> that didn't put there,

that I didn't put there,




From andreas at kostyrka.org  Sat Jan  2 10:36:09 2010
From: andreas at kostyrka.org (Andreas Kostyrka)
Date: Sat, 02 Jan 2010 16:36:09 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: <28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
References: <19263.22881.934832.166484@jon.es>
	<28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
Message-ID: <1262446569.9296.1045.camel@andidesk.lan>

Am Samstag, den 02.01.2010, 10:03 -0500 schrieb ssteinerX at gmail.com:
> On Jan 2, 2010, at 9:34 AM, Terry Jones wrote:
> > In any case, it looks like the problem is not in the setup of the request.
> > Can anyone offer a reason why httplib might be able to fetch the page
> > whereas getPage receives an error?  I'm stumped.
> 
> I've had to debug things like this recently and I have two suggestions:
> 
> 1> Recreate the headers and make it work with curl.  Curl won't add anything to your headers and such and you'll be sure that you're getting the result you want with completely stripped down case.
> 
> 2>	Get Charles http://www.charlesproxy.com/ if you're on OS X.  It rocks.  Otherwise, get one of the Windows tools (sorry, no recos from me on that), and watch exactly what goes by.

Actually, CharlesProxy is a Java tool, AFAIK. And personally I'm really
not that sure that it rocks, but personal opinions do vary :) 

As a free alternative, webscarab can handle the man-in-the-middle
interception too.

Consider also using FoxyProxy (a FF addon), to direct only the URLs you
are interested into a the logging proxy.

Andreas



From glyph at twistedmatrix.com  Sat Jan  2 15:58:10 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 2 Jan 2010 15:58:10 -0500
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: <19263.22881.934832.166484@jon.es>
References: <19263.22881.934832.166484@jon.es>
Message-ID: <30AD70A7-8D5B-4A37-8D5D-0A77D68E64A4@twistedmatrix.com>


On Jan 2, 2010, at 9:34 AM, Terry Jones wrote:


> In any case, it looks like the problem is not in the setup of the request.
> Can anyone offer a reason why httplib might be able to fetch the page
> whereas getPage receives an error?  I'm stumped.

Well, I know this isn't terribly helpful, but "a bug in getPage" is really the only thing that comes to mind.  Or, some legal-but-unusual behavior in getPage which triggers a bug on the EC2 side of things.

The only thing I can suggest is to start wireshark, do a byte-for-byte comparison of the requests that getPage and httplib emit, and see if you can find any of the differences which might be significant.  I would look carefully at any place in the request or response where data is being quoted or unquoted.  Based on the other stuff you've said, nothing jumps out at me.



From terry at jon.es  Sat Jan  2 16:14:12 2010
From: terry at jon.es (Terry Jones)
Date: Sat, 2 Jan 2010 22:14:12 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: Your message at 10:03:16 on Saturday, 2 January 2010
References: <19263.22881.934832.166484@jon.es>
	<28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
Message-ID: <19263.46884.696121.912738@jon.es>

>>>>> "Steve" == ssteinerX at gmail com <ssteinerx at gmail.com> writes:
Steve> On Jan 2, 2010, at 9:34 AM, Terry Jones wrote:
>> In any case, it looks like the problem is not in the setup of the request.
>> Can anyone offer a reason why httplib might be able to fetch the page
>> whereas getPage receives an error?  I'm stumped.
Steve> 
Steve> I've had to debug things like this recently and I have two suggestions:

Hi Steve

Thanks for the helpful reply - I can now make the call successfully.  The
difference turned out to be that httplib puts a Host: hostname:port header
into its calls, whereas getPage uses just Host: hostname. Plus there was
something else going on in some other code I'm using that made this a
problem (it was calculating a signature based on host:port).

Steve> 1> Recreate the headers and make it work with curl.  Curl won't add
Steve>    anything to your headers and such and you'll be sure that you're
Steve>    getting the result you want with completely stripped down case.

At least on my machine (curl 7.18.0 on Linux Ubuntu/Hardy) it adds a
User-agent, an Accept: */*, and also the Host header.

Steve> 2> Get Charles http://www.charlesproxy.com/ if you're on OS X.  It
Steve>    rocks.  Otherwise, get one of the Windows tools (sorry, no recos
Steve>    from me on that), and watch exactly what goes by.

It's available for Linux & Windows too. I tried it, but didn't make it work
fully when sending requests from the command line (with SSL, spoofing DNS,
etc). So in the end I just used netcat -l -p 443 and changed to HTTP to see
what was being sent. I wouldn't have thought of doing that without your
suggestion, so thanks a lot for the tip.

Terry


From glyph at twistedmatrix.com  Sat Jan  2 16:21:04 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 2 Jan 2010 16:21:04 -0500
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: <19263.46884.696121.912738@jon.es>
References: <19263.22881.934832.166484@jon.es>
	<28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
	<19263.46884.696121.912738@jon.es>
Message-ID: <7CF0B66C-98C1-443E-881D-4EED057F7237@twistedmatrix.com>


On Jan 2, 2010, at 4:14 PM, Terry Jones wrote:

> Thanks for the helpful reply - I can now make the call successfully.  The
> difference turned out to be that httplib puts a Host: hostname:port header
> into its calls, whereas getPage uses just Host: hostname. Plus there was
> something else going on in some other code I'm using that made this a
> problem (it was calculating a signature based on host:port).

I'm glad that you tracked this down!

According to comments on <http://twistedmatrix.com/trac/ticket/886>, this problem was addressed in the new HTTP client implementation.  Have you considered using the new twisted.web.client.Agent instead of getPage?



From terry at jon.es  Sat Jan  2 16:28:14 2010
From: terry at jon.es (Terry Jones)
Date: Sat, 2 Jan 2010 22:28:14 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: Your message at 15:58:10 on Saturday, 2 January 2010
References: <19263.22881.934832.166484@jon.es>
	<30AD70A7-8D5B-4A37-8D5D-0A77D68E64A4@twistedmatrix.com>
Message-ID: <19263.47726.73843.922977@jon.es>

Hi Glyph

Thanks for the reply. I just sent another mail in the thread.

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> Well, I know this isn't terribly helpful, but "a bug in getPage" is
Glyph> really the only thing that comes to mind.  Or, some
Glyph> legal-but-unusual behavior in getPage which triggers a bug on the
Glyph> EC2 side of things.

The error arose from a combination of things (signing a string that
included a host:port but then only sending a host in the Host header).
Turns out you can resolve it either way - using a port in both, or omitting
the port from both.


BTW, in reading about the Host header, it seems like getPage (more
specifically HTTPPageGetter) should be sending a port number in the header,
at least when the port is not 80. I base that remark on these:

  http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23
  http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2

That's a 1.1 spec as you surely know, and http.py sends an HTTP/1.0 header,
so you could argue that sending the Host is therefore just a nicety and
there's no need for a port. But the Host header isn't described in the HTTP
1.0 RFC, so it seems more like if you're going to send it you may as well
conform to HTTP 1.1.

But I guess that argument is somehow incorrect. I say that because a
comment in some other code I'm looking at that uses httplib, says that
prior to 2.6, httplib *used* to append a ":443" to SSL requests, but that
it no longer does. I guess sending the port was dropped from httplib for
good reason, and so HTTPPageGetter shouldn't add it. But I don't know.

I'm very far from being an expert on HTTP headers though. Not as far as I'd
like to be, though :-)

Thanks again for the reply.

Terry


From terry at jon.es  Sat Jan  2 16:44:41 2010
From: terry at jon.es (Terry Jones)
Date: Sat, 2 Jan 2010 22:44:41 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: Your message at 16:21:04 on Saturday, 2 January 2010
References: <19263.22881.934832.166484@jon.es>
	<28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
	<19263.46884.696121.912738@jon.es>
	<7CF0B66C-98C1-443E-881D-4EED057F7237@twistedmatrix.com>
Message-ID: <19263.48713.658135.198572@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

Glyph> I'm glad that you tracked this down!

Me too.

Glyph> According to comments on <http://twistedmatrix.com/trac/ticket/886>,
Glyph> this problem was addressed in the new HTTP client implementation.
Glyph> Have you considered using the new twisted.web.client.Agent instead
Glyph> of getPage?

I hadn't looked at it, but now have. The _computeHostValue method looks
very promising :-)  We've yet to switch to 9.0.0.

So httplib (apparently) changed to drop the :port part of the Host header
in Python 2.6, and now the Twisted client has added it. I think you guys
are right, so I wonder why httplib dropped it.

Terry


From exarkun at twistedmatrix.com  Sun Jan  3 00:05:12 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Jan 2010 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1262495112.35.1035195980@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100103/534be5aa/attachment.htm 

From kevin.horn at gmail.com  Mon Jan  4 19:08:17 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 4 Jan 2010 18:08:17 -0600
Subject: [Twisted-Python] lore2sphinx table handling?
Message-ID: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>

Sphinx uses plain ReST tables, and from what I can tell, ReST has 4 (yes,
4!) ways of marking up tables:

Grid tables
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables
- ASCII-art style tables

Simple Tables
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables
- A different style of ASCII-art table, simpler but less powerful than Grid
Tables

CSV Tables
http://docutils.sourceforge.net/docs/ref/rst/directives.html#csv-table
- data is provided in CSV format in the body of a ReST directive

List Tables
http://docutils.sourceforge.net/docs/ref/rst/directives.html#list-table
- data is provided as nested lists in the body of a ReST directive

My question is, what format should the lore2sphinx tool target?

Any of these formats should work fine, but I'm curious as to what people (in
particular the core devs) think as to which should be the preferred method
in the Sphinx documentation.

Keep in mind that there are only 2 tables in all of the Twisted docs, and
one of them is in the documentation for Lore, which (hopefully!) should be
going away once this project is completed.  So it's not like it would be a
whole lot of work to change the preferred format later.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100104/e3d721d7/attachment.htm 

From kevin.horn at gmail.com  Mon Jan  4 19:18:42 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 4 Jan 2010 18:18:42 -0600
Subject: [Twisted-Python] lore2sphinx themeing
Message-ID: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>

Thanks to a quick patch from Michael Thompson, the current output of the
Sphinx conversion [1] now matches the color scheme and typographic style of
the main twisted site.  It's using the layout of the 'default' sphinx theme
(previously was using the 'sphinxdoc' theme).

I'd like to know what people out there want/expect the final theme of the
Sphinx version of the Twisted docs to look like.

The floor is open...please offer your suggestions!

[1] http://twistedsphinx.funsize.net/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100104/866bb3ad/attachment.htm 

From rlotun at gmail.com  Mon Jan  4 19:37:36 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Tue, 5 Jan 2010 00:37:36 +0000
Subject: [Twisted-Python] lore2sphinx themeing
In-Reply-To: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
References: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
Message-ID: <8AB09167-E498-48E9-95AD-3B1A452EB1B3@gmail.com>

Hi Kevin,

> Thanks to a quick patch from Michael Thompson, the current output of  
> the Sphinx conversion [1] now matches the color scheme and  
> typographic style of the main twisted site.  It's using the layout  
> of the 'default' sphinx theme (previously was using the 'sphinxdoc'  
> theme).
>
> I'd like to know what people out there want/expect the final theme  
> of the Sphinx version of the Twisted docs to look like.
>
> The floor is open...please offer your

No suggestions really. Just wanted to say this is looking really  
fantastic. Great work so far! Keep it up.

Cheers,
Reza


From micahel at gmail.com  Mon Jan  4 20:21:48 2010
From: micahel at gmail.com (Michael Hudson-Doyle)
Date: Tue, 5 Jan 2010 14:21:48 +1300
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
Message-ID: <aa0dfd861001041721y7078b881hf8b03414842c42d0@mail.gmail.com>

2010/1/5 Kevin Horn <kevin.horn at gmail.com>:
> Sphinx uses plain ReST tables, and from what I can tell, ReST has 4 (yes,
> 4!) ways of marking up tables:
>
> Grid tables
> http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables
> - ASCII-art style tables

I tend to use these, because they're what emacs' table-mode supports.
But my opinion probably shouldn't count for all that much :-)

Cheers,
mwh


From glyph at twistedmatrix.com  Mon Jan  4 20:31:53 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Jan 2010 20:31:53 -0500
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <aa0dfd861001041721y7078b881hf8b03414842c42d0@mail.gmail.com>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
	<aa0dfd861001041721y7078b881hf8b03414842c42d0@mail.gmail.com>
Message-ID: <4B1B31BE-530B-4CA6-B826-CC116C2F9011@twistedmatrix.com>


On Jan 4, 2010, at 8:21 PM, Michael Hudson-Doyle wrote:

> 2010/1/5 Kevin Horn <kevin.horn at gmail.com>:
>> Sphinx uses plain ReST tables, and from what I can tell, ReST has 4 (yes,
>> 4!) ways of marking up tables:
>> 
>> Grid tables
>> http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables
>> - ASCII-art style tables
> 
> I tend to use these, because they're what emacs' table-mode supports.
> But my opinion probably shouldn't count for all that much :-)

That's what I was going to say as well.  I'm assuming that docutils has support for building and emitting grid tables already, though.  If it's difficult to format them in the output, or the output looks weird, then I would recommend just going with CSV tables for now instead.



From screwtape at froup.com  Mon Jan  4 20:32:05 2010
From: screwtape at froup.com (Tim Allen)
Date: Tue, 5 Jan 2010 12:32:05 +1100
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
Message-ID: <20100105013205.GG1637@thristian.org>

On Mon, Jan 04, 2010 at 06:08:17PM -0600, Kevin Horn wrote:
> Any of these formats should work fine, but I'm curious as to what people (in
> particular the core devs) think as to which should be the preferred method
> in the Sphinx documentation.

I'm not a core dev, but I'll chime in so that at least you'll have some
feedback if nobody else does. :) 

I think the List Table format is probably the easiest to maintain in
a simple text editor, followed by the Simple Table format. CSV mode
looks like it's really designed for you to keep the table in an external
file and edit it in a spreadsheet, or regenerate it from a database, and
while Grid Tables look pretty, actually editing them requires an Emacs
mode, or a lot of patience.


From terry at jon.es  Mon Jan  4 21:22:53 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 03:22:53 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
Message-ID: <19266.41597.624446.721449@jon.es>

I just wrote the below for fun.  It's untested :-)

It's a class that you initialize with a callable (f), and which gives you
back a deferred (d) that will fire when f fires. Alternately, you can fire
d yourself by calling 'callback' or 'errback' on the class instance and
passing a value.  That value is returned via d.

The reason this is useful is that normally when you call a function that
returns a deferred, you can't easily "cancel" the deferred because it is
made and controlled by the function you called. The callback or errback on
the deferred is (very likely) going to be called at some point.  OTOH, in
the class below you get to "cancel" the deferred by triggering it yourself.
If you fire d in this way, then when the original deferred fires (if ever),
its result is ignored.

I don't know why defer.Deferred.setTimeout is deprecated, but I guess it's
partly to do with this control issue. If a timeout function you add to a
deferred calls its errback (the default behavior), the deferred is still
nevertheless going to be called by the code that created it. That code
doesn't know and shouldn't have to check if a timeout happened from the POV
of its caller. The setTimeout approach also only allows one timeout. With
the below, any code can call the callback/errback function at any time. If
you do want to cancel the deferred based simply on a timeout, you can do
this (with as many different timeouts as you like - only the earliest will
have any effect, supposing the original deferred still hasn't fired):

   cd = CancellableDeferred(func)
   deferred = cd.call()
   reactor.callLater(5, cd.errback, None)

I post this partly because it seems cute, but more because it seems like
issue that's probably been solved by many people. Is there a general
utility in Twisted for doing this? A better way?

Terry

----

from twisted.internet import defer


class CancellableDeferred(object):
    def __init__(self, f, *args, **kw):
        self._f = f
        self._args = args
        self._kw = kw
        self._calld = None
        self.called = False

    def _fire(self, result):
        if not self.called:
            self.called = True
            self._calld.chainDeferred(self._resultd)

    def call(self):
        if self._calld:
            raise Exception('Already called.')
        self._resultd = defer.Deferred()
        self._calld = defer.maybeDeferred(self.f, *self._args, **self._kw)
        self._calld.addBoth(self._fire)
        return self._resultd

    def callback(self, value=None):
        if not self.called:
            self.called = True
            self._resultd.callback(value)

    def errback(self, value=None):
        if not self.called:
            self.called = True
            self._resultd.errback(value)


From glyph at twistedmatrix.com  Mon Jan  4 21:46:35 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Jan 2010 21:46:35 -0500
Subject: [Twisted-Python] lore2sphinx themeing
In-Reply-To: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
References: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
Message-ID: <6BA2FE82-7920-4F38-A684-79A8752714B3@twistedmatrix.com>


On Jan 4, 2010, at 7:18 PM, Kevin Horn wrote:

> Thanks to a quick patch from Michael Thompson, the current output of the Sphinx conversion [1] now matches the color scheme and typographic style of the main twisted site.  It's using the layout of the 'default' sphinx theme (previously was using the 'sphinxdoc' theme).

This is an improvement, but it looks like a very rough cut to me.  The link colors are wrong, it's missing the subtle top/bottom gradients, there's no Twisted logo anywhere, etc etc.  

> I'd like to know what people out there want/expect the final theme of the Sphinx version of the Twisted docs to look like.

Well, if it ended up looking more or less like it does now, but with a bit more attention to detail (at a minimum: some gradients, matching colors, a little global navigation to get you back to some Trac pages) I'd be happy, and it would be an upgrade.

However, ideally, the page would include links to <http://twistedmatrix.com/trac/chrome/common/css/trac.css> and <http://twistedmatrix.com/trac/chrome/common/css/wiki.css>, and use the CSS classes defined there in its own HTML templates.

While this isn't the cleanest CSS in the world, using it would have two significant benefits:

  1. lots of little details, like fonts, colors, sizes, etc, which would be exhausting for anyone to investigate and enumerate completely, would line up correctly and make it look more polished, and
  2. if we changed the CSS to adjust the look of the trac site, the docs would adjust with it.

I don't mind if this means that some HTML needs to be copied and pasted directly from either Trac's templates or Trac's output, as long as it is a quick 2-minute cut/paste/edit job that can be quickly explained in a comment for someone wanting to update it to a new theme.  I'd much rather have a still-slightly-inconsistent documentation theme than burn weeks copy/pasting hundreds of little things out of the trac HTML and pain-stakingly re-creating every minor effect on the Trac site.

Thanks for all the good work!



From glyph at twistedmatrix.com  Mon Jan  4 21:58:32 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Jan 2010 21:58:32 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19266.41597.624446.721449@jon.es>
References: <19266.41597.624446.721449@jon.es>
Message-ID: <525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>

On Jan 4, 2010, at 9:22 PM, Terry Jones wrote:

> I just wrote the below for fun.  It's untested :-)


> It's a class that you initialize with a callable (f), and which gives you
> back a deferred (d) that will fire when f fires. Alternately, you can fire
> d yourself by calling 'callback' or 'errback' on the class instance and
> passing a value.  That value is returned via d.

I already lost you at the first sentence.  The class below never appears to use 'self._f', and ... Deferreds are things that fire, I don't see how the callable (f) can fire.  Can you rephrase your intent?

> The reason this is useful is that normally when you call a function that
> returns a deferred, you can't easily "cancel" the deferred because it is
> made and controlled by the function you called. The callback or errback on
> the deferred is (very likely) going to be called at some point.  OTOH, in
> the class below you get to "cancel" the deferred by triggering it yourself.
> If you fire d in this way, then when the original deferred fires (if ever),
> its result is ignored.

I'm glad you're thinking about this, because it is an *extremely* thorny issue which I would really like to address one day.  Many of the issues you're talking about were brought up, and various solutions suggested, then found problematic, then modified ad nauseam on <http://twistedmatrix.com/trac/ticket/990>.  If you can read that discussion and make some sense of it, perhaps you can post a recommendation there, or at least a summary of the discussion so far so that I don't have to read the whole discussion again to remember what I think should happen next? :)

> I don't know why defer.Deferred.setTimeout is deprecated, but I guess it's
> partly to do with this control issue.

This is one of the reasons, but another major reason is that 'setTimeout' does not belong as a method of Deferred.  If we did support cancellation somehow, the way to set a timeout would be to do 'reactor.callLater(5.0, myDeferred.cancel)'.  Deferred was originally in twisted.python and it really should have remained there, decoupled from twisted.internet.



From terry at jon.es  Mon Jan  4 22:54:46 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 04:54:46 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 21:58:32 on Monday, 4 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
Message-ID: <19266.47110.91484.34919@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> I already lost you at the first sentence.

:-)  Sorry.

Glyph> The class below never appears to use 'self._f'

Oops, that should have been a self._f in the call method.

Glyph> and ... Deferreds are things that fire, I don't see how the callable
Glyph> (f) can fire.  Can you rephrase your intent?

Yes.

I wanted a way to be able to call something (anything) that returns a
deferred and then, at some later point, to be able to decide that I no
longer want the deferred to fire in the way the original function would
have done it. Instead I want to fire it myself, to in some sense cancel the
outstanding call (by ignoring its result and instead returning a result of
my choosing, right now).

E.g., I call twisted.web.client.getPage and get a deferred (d) back. I add
a callback to d. If sometime later (perhaps just due to too much time
elapsing, but perhaps for another reason - e.g., maybe I'm shutting down a
service, who knows) I want to effectively cancel that deferred, what choice
do I have?  The deferred was made elsewhere (in HTTPClientFactory in this
case), which is presumably going to fire it at some point. Somewhere else
in my code I've now got a callback function that's going to get the result,
though I now don't want that to happen.  I could set a flag somewhere to
indicate to my own callback(s) that it(they) should ignore any incoming
result and/or fail, but that's pretty messy.  Instead I'd like to just
manually cancel the deferred myself - where by "cancel" I mean fire it with
a value of my choosing. Most convenient, probably, is to call its errback
with a TimeoutError of some kind (just as defer.timeout does) which I can
just absorb or log etc.  I can't do this though with the deferred I got
back from getPage.

So the (untested) class I posted sits in the middle. If the original
deferred (from getPage, in our example) fires first, it passes (via
chainDeferred) the result along to the deferred it gave me. If instead I
trigger the deferred myself (by calling 'callback' or 'errback' *on the
CancellableDeferred instance*) then it fires the deferred it gave me back
and will later ignore the result from getPage (if any).

Glyph> I'm glad you're thinking about this, because it is an *extremely*
Glyph> thorny issue which I would really like to address one day.  Many of
Glyph> the issues you're talking about were brought up, and various
Glyph> solutions suggested, then found problematic, then modified ad
Glyph> nauseam on <http://twistedmatrix.com/trac/ticket/990>.  If you can
Glyph> read that discussion and make some sense of it, perhaps you can post
Glyph> a recommendation there, or at least a summary of the discussion so
Glyph> far so that I don't have to read the whole discussion again to
Glyph> remember what I think should happen next? :)

OK, I'll take a look (in my copious spare time, etc).

>> I don't know why defer.Deferred.setTimeout is deprecated, but I guess
>> it's partly to do with this control issue.

Glyph> This is one of the reasons, but another major reason is that
Glyph> 'setTimeout' does not belong as a method of Deferred.  If we did
Glyph> support cancellation somehow, the way to set a timeout would be to
Glyph> do 'reactor.callLater(5.0, myDeferred.cancel)'.  Deferred was
Glyph> originally in twisted.python and it really should have remained
Glyph> there, decoupled from twisted.internet.

OK, I agree with that aim.  Cancelation (if you want to call it that) using
my class is, IMO, decoupled from normal deferreds.  Under normal
circumstances you don't want to cancel a deferred you've asked for. But if
you might, you can get yourself an instance of CancellableDeferred and use
it instead. It provides you with a way to cancel the deferred (by which I
mean: manually trigger it yourself with a value of your choosing, and
thereafter ignore anything that might eventually come back from whatever it
was you originally called (and which it is presumably now too late to
undo)).  You can do the canceling via reactor.callLater, just as you
describe, but you call a method on the CancellableDeferred instance, not on
the deferred.  That keeps the canceling functionality out of the deferred
class.

Is that any clearer?  Sorry the code was untested - it was meant to be so
simple that it couldn't possibly be wrong :-)

Terry


From foom at fuhm.net  Mon Jan  4 23:23:37 2010
From: foom at fuhm.net (James Y Knight)
Date: Mon, 4 Jan 2010 23:23:37 -0500
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <20100105013205.GG1637@thristian.org>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
	<20100105013205.GG1637@thristian.org>
Message-ID: <3D5EF69F-D372-4581-B483-B85114F65CBB@fuhm.net>


On Jan 4, 2010, at 8:32 PM, Tim Allen wrote:

> I think the List Table format is probably the easiest to maintain in
> a simple text editor, followed by the Simple Table format. CSV mode
> looks like it's really designed for you to keep the table in an  
> external
> file and edit it in a spreadsheet, or regenerate it from a database,  
> and
> while Grid Tables look pretty, actually editing them requires an Emacs
> mode, or a lot of patience.

But when you *do* have an emacs mode (and, really, doesn't everynoe?)  
it's the easiest to use.

James


From terry at jon.es  Mon Jan  4 23:29:17 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 05:29:17 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 21:58:32 on Monday, 4 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
Message-ID: <19266.49182.1607.537978@jon.es>

Hi Glyph

I read through <http://twistedmatrix.com/trac/ticket/990> without trying to
get all the details (some are not relevant to me, see below).

I'll make a few comments here, then continue in the ticket, supposing
there's interest.

- It would simplify things to separate discussion of canceling deferreds
from discussion of timeouts, which I think you were saying too. The timeout
issue seemed to fade in that ticket, which is good.  The stuff I posted is
just about cancelation, nothing to do with timeouts.

- Deferreds are fairly simple, would be good to keep them that way (i.e.,
  not add to the class). Deferreds are very general, you can use them as
  building blocks to do more complex things, which is what my class does -
  it's just a deferred in the middle.

- Once someone has made a function call, gotten a deferred, added
  call/errbacks to it, etc., it's gone. It's in flight. Forget about it.
  Relax and let it happen, etc. It's too complicated to try to stop things
  from happening that someone else set up to happen in some potentially
  complex manner. Other code, that the Deferred class itself can't possibly
  be aware of, may be relying on the deferred firing and at least part of
  its callback chain being run, etc. The simplest thing to do is to just
  provide a mechanism whereby the eventual holder of the deferred can opt
  to trigger their deferred immediately and ignore the final result of the
  original call (supposing there ever is one).

- My class seems a bit like the Operation class proposed by Peaker. But
  it's simpler because you still only work with normal deferreds. You just
  get to fire a deferred any time you want to, with any value you want, and
  to ignore what would have been the result had you not preempively fired
  it.

Those are some reactions to the thread. I'm happy to continue there.

Terry


From terry at jon.es  Mon Jan  4 23:45:56 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 05:45:56 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 05:29:17 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
Message-ID: <19266.50180.642710.446097@jon.es>

As a final followup before bed...

I chose not to have a 'cancel' method on my class because that seemed
misleading. You're not really canceling anything. You're just asking that a
deferred that you got earlier be fired right now with a value of your
choosing. So I made 2 methods, and named them 'callback' and 'errback'.
The Subject above is reasonably accurate, it's like a pseudo-Deferred
class. Everyone works with regular deferreds, as usual, but if you know you
might want to "cancel" a deferred by firing it early, you can call the
call/errback methods on an instance of CancellableDeferred. Because the
deferred you're holding is not the one that was obtained by calling
self._f, it will fire immediately, which is surely part of the point of
cancellation.  In other words, using the word "cancel" is just a convenient
short / casual description of what's actually being done.

I hope all these words are making things more clear, not less...

Terry


From screwtape at froup.com  Mon Jan  4 23:53:41 2010
From: screwtape at froup.com (Tim Allen)
Date: Tue, 5 Jan 2010 15:53:41 +1100
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <3D5EF69F-D372-4581-B483-B85114F65CBB@fuhm.net>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
	<20100105013205.GG1637@thristian.org>
	<3D5EF69F-D372-4581-B483-B85114F65CBB@fuhm.net>
Message-ID: <20100105045340.GH1637@thristian.org>

On Mon, Jan 04, 2010 at 11:23:37PM -0500, James Y Knight wrote:
> On Jan 4, 2010, at 8:32 PM, Tim Allen wrote:
> > while Grid Tables look pretty, actually editing them requires an Emacs
> > mode, or a lot of patience.
> 
> But when you *do* have an emacs mode (and, really, doesn't everynoe?)  

Well, no, no I don't. Does that mean I don't have to supply
documentation changes with any patches I supply in future? ;)


From kevin.horn at gmail.com  Tue Jan  5 00:36:13 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 4 Jan 2010 23:36:13 -0600
Subject: [Twisted-Python] lore2sphinx themeing
In-Reply-To: <6BA2FE82-7920-4F38-A684-79A8752714B3@twistedmatrix.com>
References: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
	<6BA2FE82-7920-4F38-A684-79A8752714B3@twistedmatrix.com>
Message-ID: <562bcc11001042136gfdfdab4lcce31745ba93a7f9@mail.gmail.com>

On Mon, Jan 4, 2010 at 8:46 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 4, 2010, at 7:18 PM, Kevin Horn wrote:
>
> > Thanks to a quick patch from Michael Thompson, the current output of the
> Sphinx conversion [1] now matches the color scheme and typographic style of
> the main twisted site.  It's using the layout of the 'default' sphinx theme
> (previously was using the 'sphinxdoc' theme).
>
> This is an improvement, but it looks like a very rough cut to me.


Like I said, this is the default sphinx theme with some different colors and
text styling.  Yes, very rough.


> The link colors are wrong, it's missing the subtle top/bottom gradients,
> there's no Twisted logo anywhere, etc etc.
>

I'm not sure I understand what you mean about the link colors being
wrong...unless you mean the hover/active/visited colors?  The colors for
links both in the text and in the navigation areas are identical to that in
Trac...

Logo, gradients, etc. were put off until there was a clear understanding of
what exactly was desired.

Spihnx has three "levels" of theme customization.
1. theme options - themes can be set up to take options, which are basically
configurable variables in the templates and css.  This is what's been done
so far.  Just set some colors and fonts.
2. user templates/static files - here you can override templates from the
theme you are using and put things like your own image files, javascript,
css, etc.
3. user themes - a directory or zip file of user templates and static files,
basically as (2), except packaged up nicely to be reusable.


>
> > I'd like to know what people out there want/expect the final theme of the
> Sphinx version of the Twisted docs to look like.
>
> Well, if it ended up looking more or less like it does now, but with a bit
> more attention to detail (at a minimum: some gradients, matching colors, a
> little global navigation to get you back to some Trac pages) I'd be happy,
> and it would be an upgrade.
>
> However, ideally, the page would include links to <
> http://twistedmatrix.com/trac/chrome/common/css/trac.css> and <
> http://twistedmatrix.com/trac/chrome/common/css/wiki.css>, and use the CSS
> classes defined there in its own HTML templates.
>
> While this isn't the cleanest CSS in the world, using it would have two
> significant benefits:
>
>  1. lots of little details, like fonts, colors, sizes, etc, which would be
> exhausting for anyone to investigate and enumerate completely, would line up
> correctly and make it look more polished, and
>  2. if we changed the CSS to adjust the look of the trac site, the docs
> would adjust with it.
>
> I don't mind if this means that some HTML needs to be copied and pasted
> directly from either Trac's templates or Trac's output, as long as it is a
> quick 2-minute cut/paste/edit job that can be quickly explained in a comment
> for someone wanting to update it to a new theme.  I'd much rather have a
> still-slightly-inconsistent documentation theme than burn weeks copy/pasting
> hundreds of little things out of the trac HTML and pain-stakingly
> re-creating every minor effect on the Trac site.
>
>
Groovy, this is exactly the kind of feedback I was looking for.

As far as the CSS goes, I think the best way to handle this would be to
create a stylesheet for the theme, that uses @import to pull in the trac.css
and wiki.css files, and the add or override whatever is necessary.
Templates might be a bit harder to reuse, but we still might be able to do
it.

Thanks for all the good work!
>
>
It's like an addiction. :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100104/b2644a50/attachment.htm 

From andrew at bemusement.org  Tue Jan  5 02:01:54 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 5 Jan 2010 18:01:54 +1100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19266.41597.624446.721449@jon.es>
References: <19266.41597.624446.721449@jon.es>
Message-ID: <20100105070154.GB23140@steerpike.home.puzzling.org>

Terry Jones wrote:
> I just wrote the below for fun.  It's untested :-)
> 
> It's a class that you initialize with a callable (f), and which gives you
> back a deferred (d) that will fire when f fires. Alternately, you can fire
> d yourself by calling 'callback' or 'errback' on the class instance and
> passing a value.  That value is returned via d.
> 
> The reason this is useful is that normally when you call a function that
> returns a deferred, you can't easily "cancel" the deferred because it is
> made and controlled by the function you called. The callback or errback on

I think the key thing is to remember there are two distinct parts:

  1) an operation (which eventually will have a result or failure)
  2) a result 
  
A Deferred takes care of managing 2.  It's a placeholder for that
result, and it can track callbacks that need to be called when it
arrives, etc.

We currently don't have any formal idioms for 1.  I think this is what
you're trying to address.  After all, it's not the result that times out
or that you might want to cancel, it's the operation that is expected to
generate it.

I don't think it's wise to conflate the two concepts, so I think
CancellableDeferred is a poor name.

In an ideal world perhaps every Deferred would have a .operation
attribute, so maybe ?d.operation.cancel()? and even
?d.operation.getProgressReport()? would be possible, but I doubt that
every piece of code that creates a Deferred would want to pay the cost
of that bookkeepping.  But hopefully you see my point that it's a
connected but distinct concept to the very simple, single-purpose
callback managing object that a Deferred is.

[...]
> I post this partly because it seems cute, but more because it seems like
> issue that's probably been solved by many people. Is there a general
> utility in Twisted for doing this? A better way?

It feels like there should be, but so far people have basically been
managing the logic that fires Deferreds ad hoc.  I don't think this is
an ideal state of affairs, but it seems it's Good Enough most of the
time.

If I were to try improve the situation, I'd be trying to make an
Operation object or something like that, I think.  I think you'd want to
make it support cancellation (and timeouts) when the underlying code
supports it (network requests are often easy to cancel ? just close the
socket), and I'm not sure what would be best when the underlying code is
not cancellable (deferToThread is in general impossible to cancel, etc).

So currently your class isn't something I'd use, because I don't think
it helps with any of this.

-Andrew.



From devraj at gmail.com  Tue Jan  5 02:29:04 2010
From: devraj at gmail.com (Devraj Mukherjee)
Date: Tue, 5 Jan 2010 18:29:04 +1100
Subject: [Twisted-Python] Running twisted app in a different thread
Message-ID: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>

Hi all,

I am new to Twisted, please be gentle :)

The Twisted application I am dealing with is python-vnc-viewer
(http://python-vnc.viewer.googlecode.com). We are attempting the RFB
library implemented using Twisted in our application, to bring up a
customer viewer. Our  uses a threading model that is quite centric to
our application.

Is it possible to ask the Twisted application to run in a sea prate thread?

Thanks.

-- 
"The secret impresses no-one, the trick you use it for is everything"
- Alfred Borden (The Prestiege)


From terry at jon.es  Tue Jan  5 06:25:33 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 12:25:33 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 18:01:54 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<20100105070154.GB23140@steerpike.home.puzzling.org>
Message-ID: <19267.8621.348279.968272@jon.es>

>>>>> "Andrew" == Andrew Bennetts <andrew at bemusement.org> writes:

Andrew> I think the key thing is to remember there are two distinct parts:

Andrew> 1) an operation (which eventually will have a result or failure)
Andrew> 2) a result 
  
Andrew> A Deferred takes care of managing 2.  It's a placeholder for that
Andrew> result, and it can track callbacks that need to be called when it
Andrew> arrives, etc.

Andrew> We currently don't have any formal idioms for 1.  I think this is
Andrew> what you're trying to address.  After all, it's not the result that
Andrew> times out or that you might want to cancel, it's the operation that
Andrew> is expected to generate it.

No, I'm only dealing with 2, not at all with 1. 1 is too complicated and in
a later posting I wrote that I didn't think we should be trying to
interfere with the deferred processing and that cancel is not really a good
name.

Andrew> I don't think it's wise to conflate the two concepts, so I think
Andrew> CancellableDeferred is a poor name.

OK, I think I agree.

Anyway, your mail gave me an idea for how to make the class more
useful. I'll code it, maybe even test it :-), and will post again.

Terry


From ssteinerx at gmail.com  Tue Jan  5 07:36:38 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Tue, 5 Jan 2010 07:36:38 -0500
Subject: [Twisted-Python] Running twisted app in a different thread
In-Reply-To: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>
References: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>
Message-ID: <944BD9BF-14F4-4698-BE33-2393C44A34AB@gmail.com>


On Jan 5, 2010, at 2:29 AM, Devraj Mukherjee wrote:

> Hi all,
> 
> I am new to Twisted, please be gentle :)
> 
> Is it possible to ask the Twisted application to run in a sea prate thread?

There are no sea pirates in Twisted.

S



From terry at jon.es  Tue Jan  5 07:47:50 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 13:47:50 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 21:58:32 on Monday, 4 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
Message-ID: <19267.13558.486114.470310@jon.es>

Hi again Glyph, Andrew

Below is a simpler and more flexible ControllableDeferred class.

The idea is simple: you want a deferred that you can call/errback yourself,
and which you can also deactivate so that it never fires.  This is done by
manipulating two normal deferreds (self, and a deferred received from
maybeDeferred). This ControllableDeferred class sits in the middle and will
(a) pass on the normal result (via chainDeferred) if it arrives first, or
(b) if called by the user, fire with the user-supplied value, or (c) if
deactivated by the user, never fire. In cases b and c it will ignore the
result (if any ever arrives) from the function originally called.

In summary, this provides two things you can't ordinarily do when you get a
deferred (d) back from calling a function:

  - Call d yourself, thereby firing it immediately.
  - Deactivate d, so that it never fires.

The code below could be a bit more sophisticated. E.g., it could tell you
if you try to call a deferred you've deactivated. It should probably use an
attribute name other than _called.  I've kept it sparse for now though so
the general idea is clearer.  I changed its name to reflect that the
deferred is more controllable.

Terry

---

from twisted.internet import defer


class ControllableDeferred(defer.Deferred):    
    def __init__(self, f, *args, **kw):
        defer.Deferred.__init__(self)
        self._called = False
        self._calld = defer.maybeDeferred(f, *args, **kw).addBoth(self._fire)

    def _fire(self, ign):
        if not self._called:
            self._called = True
            self._calld.chainDeferred(self)

    def callback(self, result):
        if not self._called:
            self._called = True
            defer.Deferred.callback(self, result)

    def errback(self, fail=None):
        if not self._called:
            self._called = True
            defer.Deferred.callback(self, fail)

    def deactivate(self):
        self._called = True


From terry at jon.es  Tue Jan  5 07:55:31 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 13:55:31 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 13:47:50 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19267.13558.486114.470310@jon.es>
Message-ID: <19267.14019.905114.977240@jon.es>

Argh..... sorry, there was a trivial cut & paste error in the code I just
posted.  The errback method should of course be:

    def errback(self, fail=None):
        if not self._called:
            self._called = True
            defer.Deferred.errback(self, fail)

Terry


From rlotun at gmail.com  Tue Jan  5 11:46:37 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Tue, 5 Jan 2010 16:46:37 +0000
Subject: [Twisted-Python] Running twisted app in a different thread
In-Reply-To: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>
References: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>
Message-ID: <95bb10691001050846k38774c0dm5c2fbf7ea3d75495@mail.gmail.com>

Hi Devraj,

> Is it possible to ask the Twisted application to run in a sea prate thread?

Yes it is possible. Simply start the reactor in a thread, but run it as:

reactor.run(installSignalHandlers=False)

If you do it this way you're going to have to handle signals yourself.

You're going to have to be very careful about calling code in the
Twisted thread from other threads as Twisted isn't threadsafe. To do
this properly take a look at reactor.callFromThread.

Cheers,
Reza


-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From grickert at coldstorage.com  Tue Jan  5 12:01:23 2010
From: grickert at coldstorage.com (Gerrat Rickert)
Date: Tue, 5 Jan 2010 12:01:23 -0500
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <20091228025254.GE1637@thristian.org>
References: <20091224053747.GC1637@thristian.org><BB13E4C4D649234F84A01F6DF64BB87F050E8AA0@ccs-ex01.coldstorage.com>
	<20091228025254.GE1637@thristian.org>
Message-ID: <BB13E4C4D649234F84A01F6DF64BB87F0515B68B@ccs-ex01.coldstorage.com>

>On Thu, Dec 24, 2009 at 09:41:11AM -0500, Gerrat Rickert wrote:
>> [snip]
>> >http://twistedmatrix.com/trac/ticket/3956
>> >Add arraysize option to runQuery in adbapi
>>
>> Well, as the guy who initiated this ticket, I'm certainly using
>> adbapi.ConnectionPool with cx_Oracle.  I'm not currently using any
>> placeholders named "arraysize" or "cp_arraysize".
>
>But you are using the keyword-parameters-as-query-parameters extension
>that cx_Oracle provides?

No, I am not.  I probably didn't even notice this style was allowed, and

likely wouldn't have used them even if I noticed.  ('davep' mentioned
on the ticket that he was using named binds, but didn't have an issue
with using cp_arraysize as a keyword in runQuery)

[snip]

>I think the two positions here would be:
>
> a: adbapi.ConnectionPool is designed to wrap DBAPI2 modules; keyword
>    parameters to cursor.execute() are not allowed in DBAPI2; therefore
>    adbapi.ConnectionPool can use keyword parameters for itself.
> b: adbapi.ConnectionPool has never really enforced DBAPI2 compliance,
>    so people have been using it with all kinds of crazy DBAPI2
>    extensions and we should allow people to keep doing so as much as
>    possible.
>
>My cunning plan (which has somewhat backfired) was that one of these
>alternatives would seem sane, and one would seem ridiculous, and once
>the mailing list decided which was which I could go back to the ticket
>with that decision.
>
>The way things are at the moment, I'm leaning towards (b), but I
believe
>the developer who's worked on the patch leans towards (a) and I don't
>feel I have the authority to demand a change of approach. I left the
>ticket awaiting review, in the hope that somebody with more authority
or
>firmer opinions would come along to review it (it's a pretty small
>change!), but the ticket's been sitting there for weeks now - I felt
>I needed to do something more drastic to help it make progress.

Thanks for trying to help push this along, Tim.  I have no firm opinion
either way.  For me any solution is better than none.  There doesn't
seem
to be any huge objections to using a "cp_arraysize" keyword param in
runQuery, 
so it might not be the purest solution, but does seem practical.



From kevin.horn at gmail.com  Tue Jan  5 13:23:01 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 5 Jan 2010 12:23:01 -0600
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <20100105045340.GH1637@thristian.org>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
	<20100105013205.GG1637@thristian.org>
	<3D5EF69F-D372-4581-B483-B85114F65CBB@fuhm.net>
	<20100105045340.GH1637@thristian.org>
Message-ID: <562bcc11001051023l69d7a563y9468f7e9368d70c9@mail.gmail.com>

On Mon, Jan 4, 2010 at 10:53 PM, Tim Allen <screwtape at froup.com> wrote:

> On Mon, Jan 04, 2010 at 11:23:37PM -0500, James Y Knight wrote:
> > On Jan 4, 2010, at 8:32 PM, Tim Allen wrote:
> > > while Grid Tables look pretty, actually editing them requires an Emacs
> > > mode, or a lot of patience.
> >
> > But when you *do* have an emacs mode (and, really, doesn't everynoe?)
>
> Well, no, no I don't. Does that mean I don't have to supply
> documentation changes with any patches I supply in future? ;)
>
>
Well, I don't use Emacs (at least I haven't in about 12+ years) but seeing
as how there will only be 1 relatively modest table in the docs (unless
someone adds more), I think we can live with the pain of hand-editing Grid
tables, so I'll likely use eitehr them or simple tables.

Thanks for the feedback everyone!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100105/a467ac6d/attachment.htm 

From mithrandi at mithrandi.net  Tue Jan  5 14:12:34 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 5 Jan 2010 21:12:34 +0200
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19266.49182.1607.537978@jon.es>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
Message-ID: <f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>

On Tue, Jan 5, 2010 at 6:29 AM, Terry Jones <terry at jon.es> wrote:
> - Once someone has made a function call, gotten a deferred, added
> ?call/errbacks to it, etc., it's gone. It's in flight. Forget about it.

The thing is, this attitude isn't always reasonable. Deferred is not
necessarily the place to implement cancellation, but I think the idiom
itself is important. Certainly there are some operations where
cancellation is not feasible; perhaps because the underlying APIs do
not support cancellation, or because allowing the operation to
complete is quicker/easier than trying to interrupt it. But, consider
something like the transfer of a 512 TB file; cancellation /is/
possible, through closing the TCP connection, and the operation is
significantly expensive, so "just forget it and let it finish" is a
somewhat cavalier attitude to take.

> ?complex manner. Other code, that the Deferred class itself can't possibly
> ?be aware of, may be relying on the deferred firing and at least part of
> ?its callback chain being run, etc. The simplest thing to do is to just
> ?provide a mechanism whereby the eventual holder of the deferred can opt
> ?to trigger their deferred immediately and ignore the final result of the
> ?original call (supposing there ever is one).

I would imagine that you would errback the deferred in the general
case of cancellation; if your callback chain doesn't handle errors,
well...
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From glyph at twistedmatrix.com  Tue Jan  5 15:27:16 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Jan 2010 15:27:16 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
Message-ID: <73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>


On Jan 5, 2010, at 2:12 PM, Tristan Seligmann wrote:

> On Tue, Jan 5, 2010 at 6:29 AM, Terry Jones <terry at jon.es> wrote:
>> - Once someone has made a function call, gotten a deferred, added
>>  call/errbacks to it, etc., it's gone. It's in flight. Forget about it.
> 
> The thing is, this attitude isn't always reasonable. Deferred is not
> necessarily the place to implement cancellation, but I think the idiom
> itself is important. Certainly there are some operations where
> cancellation is not feasible; perhaps because the underlying APIs do
> not support cancellation, or because allowing the operation to
> complete is quicker/easier than trying to interrupt it. But, consider
> something like the transfer of a 512 TB file; cancellation /is/
> possible, through closing the TCP connection, and the operation is
> significantly expensive, so "just forget it and let it finish" is a
> somewhat cavalier attitude to take.

And let's not forget, in long-running servers, it's possible to "leak" operations, and the associated resources like file descriptors.  When the caller says that they're not interested in the result of an operation any more, the library should clean up as much as possible, otherwise you'll start running out of those resources eventually.



From drken567 at gmail.com  Tue Jan  5 15:48:26 2010
From: drken567 at gmail.com (Ken MacDonald)
Date: Tue, 5 Jan 2010 15:48:26 -0500
Subject: [Twisted-Python] Assistance with using Twisted with "pyinstaller"
Message-ID: <3468cae11001051248j77e19aefhcb941978338f5222@mail.gmail.com>

Hi, we're trying to using pyinstaller to create single-directory
distributions of our Twisted/python server on Linux. Wondering if anyone has
accomplished this? I googled and checked the archives, but there seems to be
no concrete information available.

I'm real new to pyinstaller and not really familiar with twisted internals,
so not sure where to start with this, particularly whether to package
our_server.tac, or the twistd script, or the our_server.py as the starting
point to bundle all of this stuff together. If anyone's done this
successfully, or failed miserably, would be interested in getting details.
Thanks,
Ken
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100105/24dba9f8/attachment.htm 

From terry at jon.es  Tue Jan  5 16:47:51 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 22:47:51 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 21:12:34 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
Message-ID: <19267.45959.952860.661333@jon.es>

>>>>> "Tristan" == Tristan Seligmann <mithrandi at mithrandi.net> writes:

Tristan> On Tue, Jan 5, 2010 at 6:29 AM, Terry Jones <terry at jon.es> wrote:
>> - Once someone has made a function call, gotten a deferred, added
>> ?call/errbacks to it, etc., it's gone. It's in flight. Forget about it.

Tristan> The thing is, this attitude isn't always reasonable.

Yes, I was being a bit deliberately flippant, and was speaking in the
context of deferred processing. Reading through
http://twistedmatrix.com/trac/ticket/990 there are lots of issues. It feels
to me like it's too complicated to tackle in a clean / simple manner inside
the Deferred class.

Tristan> Deferred is not necessarily the place to implement cancellation,
Tristan> but I think the idiom itself is important.

Yes, agreed.

Tristan> But, consider something like the transfer of a 512 TB file;
Tristan> cancellation /is/ possible, through closing the TCP connection,
Tristan> and the operation is significantly expensive, so "just forget it
Tristan> and let it finish" is a somewhat cavalier attitude to take.

I didn't mean to imply that cancellation isn't important or isn't possible
etc.

Tristan> I would imagine that you would errback the deferred in the general
Tristan> case of cancellation; if your callback chain doesn't handle
Tristan> errors, well...

Yes, you'd see an exception just as you would if some other error
happened. But errbacking the deferred is just one option. You can also
callback it or, in the most recent code I posted, just tell the deferred to
never fire.  They're all options. The point is to give the caller those
options.

Terry


From terry at jon.es  Tue Jan  5 16:53:37 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 22:53:37 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 15:27:16 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
Message-ID: <19267.46305.908634.631822@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

Glyph> And let's not forget, in long-running servers, it's possible to
Glyph> "leak" operations, and the associated resources like file
Glyph> descriptors.  When the caller says that they're not interested in
Glyph> the result of an operation any more, the library should clean up as
Glyph> much as possible, otherwise you'll start running out of those
Glyph> resources eventually.

Yes, but it shouldn't be the job of the caller to clean up something it has
no knowledge of.

I'm not sure if it's yet clear that I'm not trying *at all* to address
somehow stopping operations that are in progress. On the contrary, my code
always lets them run to their natural conclusion. It's just that if the
caller decides they're no longer interested in the result or that they want
the thing to fire right now, they can arrange for it. The originally called
code, including any err/callbacks that may be on the deferred it gave you,
is unaffected.

Using the word "cancel" in my original posting & class name was I guess
quite misleading.  Apologies for that. As usual I thought everyone would
know what I was talking about :-)

Is the simplified class that really is a Deferred (subclass) clearer?

Terry


From spongelavapaul at googlemail.com  Wed Jan  6 05:03:24 2010
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 6 Jan 2010 10:03:24 +0000
Subject: [Twisted-Python] Assistance with using Twisted with
	"pyinstaller"
In-Reply-To: <3468cae11001051248j77e19aefhcb941978338f5222@mail.gmail.com>
References: <3468cae11001051248j77e19aefhcb941978338f5222@mail.gmail.com>
Message-ID: <7129590B-4CD7-46F3-B1FE-717BE8E268E6@googlemail.com>


On 5 Jan 2010, at 20:48, Ken MacDonald wrote:

> Hi, we're trying to using pyinstaller to create single-directory  
> distributions of our Twisted/python server on Linux. Wondering if  
> anyone has accomplished this? I googled and checked the archives,  
> but there seems to be no concrete information available.

Sorry to be negative, but I've not managed to get pyinstaller working  
with twisted.

The reason I'm posting is that I have managed to get bbfreeze and  
cx_freeze working. This is all about 6 months old, so newer versions  
might be different, but to summarise:

cx_Freeze put everything into an executable zip file so you are left  
with one main binary and a handful of .so objects for python C modules  
(unless you patch the Python build to build static). I had to switch  
to bbfreeze because I needed to use Nevow and there were too many  
hoops to jump through to make it work with the data files accessed  
relative to __file__.

bbfreeze works with eggs, so it works with Nevow or anything else that  
uses data files, but the down side is that the result isn't zipped up  
into one executable.

I'm about to reopen the whole freezing thing for a new project, so I  
may be able to report back in a few weeks.


>
> I'm real new to pyinstaller and not really familiar with twisted  
> internals, so not sure where to start with this, particularly  
> whether to package our_server.tac, or the twistd script, or the  
> our_server.py as the starting point to bundle all of this stuff  
> together. If anyone's done this successfully, or failed miserably,  
> would be interested in getting details.

I dropped the tac file to make it easier to specify the entrypoint. To  
do this while still getting all the twistd goodness requires some  
hacking, but it isn't really necessary. You can use the tac file  
(better to change the extension to .py though) and put a few imports  
in the file that are only there to pull in dependencies that the  
freezing program can't find. It's basically an iterative thing - build  
it, note the missing dependencies, import them, repeat.

Good luck.



From glyph at twistedmatrix.com  Wed Jan  6 05:23:27 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 6 Jan 2010 05:23:27 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19267.46305.908634.631822@jon.es>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
Message-ID: <E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>


On Jan 5, 2010, at 4:53 PM, Terry Jones wrote:

> I'm not sure if it's yet clear that I'm not trying *at all* to address
> somehow stopping operations that are in progress. On the contrary, my code
> always lets them run to their natural conclusion. It's just that if the
> caller decides they're no longer interested in the result or that they want
> the thing to fire right now, they can arrange for it. The originally called
> code, including any err/callbacks that may be on the deferred it gave you,
> is unaffected.

I understand what you're saying: you're interested in a subset of what I'm interested in, here.  The point I'm trying to make is that once you've gone to the trouble of providing an API for *clients* of an operation to declare that they are no longer interested in its results, then it's wasteful for the underlying engine to continue executing the operation only to discard its result.  I think that coming up with a good API and semantics for "I no longer care about the result here" has a huge amount of overlap with this anyway.

I grant that it may well be easier to implement without worrying about the underlying operation though, and the semantics you've defined by explicitly ignoring the actually-stopping case are much simpler.  But that also means that you still have to go to the trouble of figuring out when you're no longer interested in the result any more, but after going to the trobule ... what's the benefit?

I know what the use-cases are for stopping the underlying operation (notifying the peer that you're not going to accept it, reclaiming the resources); but if you're just going to let the operation complete eventually anyway, why wouldn't you want to just finish processing the result when it arrives regardless?



From terry at jon.es  Wed Jan  6 07:09:35 2010
From: terry at jon.es (Terry Jones)
Date: Wed, 6 Jan 2010 13:09:35 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 05:23:27 on Wednesday, 6 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
Message-ID: <19268.32127.274082.288200@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> On Jan 5, 2010, at 4:53 PM, Terry Jones wrote:

Glyph> I understand what you're saying: you're interested in a subset of
Glyph> what I'm interested in, here.

Yes.

Glyph> The point I'm trying to make is that once you've gone to the trouble
Glyph> of providing an API for *clients* of an operation to declare that
Glyph> they are no longer interested in its results, then it's wasteful for
Glyph> the underlying engine to continue executing the operation only to
Glyph> discard its result.

Yes, agreed. But it's not at all clear to me how one should go about
stopping things in general. That's a much harder task than ignoring a
result or triggering a call/errback result yourself. My class just takes a
couple of small client-side pieces out of the way. I know you know all
this, I'm just trying to be clear for others / for the record, etc.

Glyph> I think that coming up with a good API and semantics for "I no
Glyph> longer care about the result here" has a huge amount of overlap with
Glyph> this anyway.

Hmmmm. I'm not sure about that. I agree if you s/huge amount/tiny/ :-)

Naively perhaps, it seems like the client declaring they're no longer
interested in a result is just a single bit of information. My class sits
between the chain of steps (callbacks) leading to the production of a
result and the chain of steps (callbacks) involved client-side in
post-processing the result. It's a nice/simple way for the client to snip
the overall chain. If I were going to try to push it further, I would start
thinking about how to (figuratively) propagate this bit of information
("your result is no longer relevant / needed" back up the chain of as-yet
unfired callbacks. If callbacks had access to that information, they could
act accordingly.

I don't think the running of the callback chain should be interrupted. As a
small example, one callback function might do some setup operation (let's
say open a file, or print an opening HTML tag) that a later one makes sure
is wrapped up, using addBoth. It seems like there are two things that it
would be nice to have: a way for a callback to know that its result will
ultimately be ignored, and a mechanism for a callback to register a
function to be called if an operation is canceled while it is running. In
the case that an operation was canceled, its current callback would have
its cancel function (if any) called, and subsequent callbacks would all
find the resultWillBeIgnored to be True.  Something like that.

I'm happy to go into that discussion too, if you want. I do have a use for
it as well (see below).

Glyph> I grant that it may well be easier to implement without worrying
Glyph> about the underlying operation though, and the semantics you've
Glyph> defined by explicitly ignoring the actually-stopping case are much
Glyph> simpler.

Yes, agreed. I like the fact that the class is simple and that it deals
with the client-side issues, allowing ignoring, timing out, early firing,
etc.  As you say, the much harder problem remains. But the harder problem
is a bit less messy now (at least in my mind): it's "just" cancellation.
Responsibilities are cleanly divided by my class - the client takes care of
itself, and cancellation has *only* to deal with callbacks placed on a
deferred that was generated by what the client called.

Looked at from this POV, an approach to cancellation would be for code that
is able to cancel operations it has begun to also provide a cancel method.
One way to think about doing this would be to have the cancel method take a
deferred as an argument. Something like my class could then hand the
deferred back, effectively saying "my client is no longer interested in
this deferred. You can call/errback it, or not, it makes no difference to
us". If you've done that once, you can do it multiple times - by which I
mean that I might write code that's a client of getPage, and getPage is a
client of XXX, and XXX is a client of YYY, etc. Each could in turn pass the
deferred it got back to the thing that created it. If there's no cancel
method, then that's as far as can be gone with canceling. At that point the
result is no longer passed because the first ControllableDeferred instance
that's involved will effectively snip the link (or send an early result) in
the sequence of steps that would originally have been done.

Deferred producing code that's capable of cancellation might simply keep a
dictionary of outstanding deferreds, and itself use a callback to remove
things from its dictionary once a result is calculated and about to be
passed on. My resizable dispatch queue code uses that approach. Or it could
be more sophisticated and be a state machine, that transitions to new
states as the callbacks that it put onto the deferred are called. Done this
way, the business of cancellation is not handled by the Deferred class at
all, which I think is a good thing because Deferreds are simple and don't
have any idea of the operational connections between the functions in their
call/errback chains. But the code that obtained the deferred and put
callbacks onto it does.

So, concretely, you could imagine something like this:

  - a getPageFactory class with a getPage method that returns a deferred,
    and a cancel method that accepts a deferred.

  - I'd add a cancelFunc argument (default None) to my ControllableDeferred
    class.  If not None, that gets called with a deferred from getPage in
    case its client decides to ignore the operation or get an early result.

That's pretty simple, I think. And it keeps all code for doing cancellation
out of the Deferred class. Any client code that wants to be able to control
the deferreds its getting can use a ControllableDeferred. And any code that
produces deferreds and wants to offer the possibility of cancellation of
underway operations can provide / advertise some kind of cancel function.
That keeps cancellation split into logical pieces, wherein each piece
doesn't know or care where its deferred came and safely knows that its
result will be ignored. The important piece of the overall operation that's
provided by ControllableDeferred is that it keeps all these pieces
separate, only passing on results when they're ready.

We'd generalize some of this, use an interface, etc.


Glyph> But that also means that you still have to go to the trouble of
Glyph> figuring out when you're no longer interested in the result any
Glyph> more, but after going to the trobule ... what's the benefit?

It's partly as you said in an earlier reply: releasing resources. It's also
so that the client code can move on (see below).

Glyph> I know what the use-cases are for stopping the underlying operation
Glyph> (notifying the peer that you're not going to accept it, reclaiming
Glyph> the resources); but if you're just going to let the operation
Glyph> complete eventually anyway, why wouldn't you want to just finish
Glyph> processing the result when it arrives regardless?

Because it may not arrive at all, or it may arrive at a point when I'm no
longer able to deal with a result. And because the non-arrival might be
holding up some other part of a system (thereby consuming a resource).

In the case I'm dealing with right now, I'm using my resizable dispatch
queue code to process jobs that are submitted via a web form. To be more
concrete, a user of my app can enter a Twitter user name and my code then
goes and does a bunch of work. The processing of that Twitter user is a
"job" here, and it may involve thousands of network API calls, to Twitter,
to FluidDB, to other services. Because processing a job can create a lot of
traffic, I use my dispatch queue class to keep a limit on the number of
jobs that are being done in parallel. So there are a finite number of slots
available for processing jobs. I know when a job is done because a deferred
fires, and one of the callbacks in that deferred takes the job out of the
list of currently outstanding jobs. It all works nicely.

But the queue code just fires jobs and doesn't have any idea what they do.
If they never fire, it continues to think the job is underway. This is
generally true for any client that gets given a deferred - your continued
processing is in the hands of the thing that made the deferred. In my case,
a slot in a finite table is occupied. If I want to give up on it, I need to
do some clean-up and may therefore not want the callbacks I added to the
deferred to ever be called (e.g., data structs that could have processed
the result may be changed or gone).

I.e., I want my client to have more control over how / when / if its
callbacks are called. That's totally not under my control if I call an
unknown black-box deferred-producing code that may or may not call me back.

In my particular case, it seems like I sometimes make a call to the Twitter
API and that call never completes. I don't know what's going on, I suspect
the connection is made and then held open and never processed by Twitter.
So a deferred, or multiple deferreds, simply don't fire. I want to give up
on them, clean up, and move on. From the client POV I don't know or care
what went wrong with the call, I just know that it's time to do something
else.

I'm also interested in the wider problem (cancellation), because I'd like
to tell a job to cancel itself. In my case this could in part take the form
of a test inside a generator that was yielding deferreds to process the
Twitter user.  That would be a simple way to cancel the outstanding work
for a job, even if I still couldn't reach out to the code that gave me a
deferred to tell it to lose a connection etc. I hope that makes sense.

OK, sorry for so many words. I hope this seems like it's heading in a
useful direction. It does to me.

Terry


From ssteinerx at gmail.com  Wed Jan  6 09:46:46 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Wed, 6 Jan 2010 09:46:46 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
Message-ID: <CB7A5294-8731-4D26-BBC7-9D8B72FEA5C5@gmail.com>


On Jan 6, 2010, at 5:23 AM, Glyph Lefkowitz wrote:

> I know what the use-cases are for stopping the underlying operation (notifying the peer that you're not going to accept it, reclaiming the resources); but if you're just going to let the operation complete eventually anyway, why wouldn't you want to just finish processing the result when it arrives regardless?

Please forgive an old real-time jock here, but one way of handling this, and yes, I know how nasty, dirty, and ugly it is, is to patch the response chain so that all further notifications route to an ABORT handler that explicitly knows the details of how to clean old things up and stop new things from happening.

I have had to use a mechanism like this in multi-processor, low bandwidth, high priority systems where a corrupted message can not be allowed to propagate and use up bandwidth or processor time that could be used to regenerate a correct message (think naval guidance system where one or more transducers just stopped working properly, like, got hit by a torpedo or started taking on sea water under pressure)

Obviously, this is very radical and the ABORT handler needs to be completely aware of exactly how to interrupt all things in the chain properly in all possible states, but if it's that important that the process be interrupted, then it is.

As far as I know, in my limited spelunking into Twisted's guts, Deferred's pretty much only know about themselves and their callbacks so I'm not sure whether there's a "ringmaster" that knows any more than that that could make sure that all things are cleaned up properly.

S



From glyph at twistedmatrix.com  Wed Jan  6 22:32:08 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 6 Jan 2010 22:32:08 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19268.32127.274082.288200@jon.es>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
	<19268.32127.274082.288200@jon.es>
Message-ID: <F21B04EB-3295-42A5-815D-515AACC97096@twistedmatrix.com>


On Jan 6, 2010, at 7:09 AM, Terry Jones wrote:

>>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
> Glyph> On Jan 5, 2010, at 4:53 PM, Terry Jones wrote:
> 
> Glyph> I understand what you're saying: you're interested in a subset of
> Glyph> what I'm interested in, here.
> 
> Yes.

> Glyph> I think that coming up with a good API and semantics for "I no
> Glyph> longer care about the result here" has a huge amount of overlap with
> Glyph> this anyway.
> 
> Hmmmm. I'm not sure about that. I agree if you s/huge amount/tiny/ :-)

Okay, "a huge amount" was not usefully descriptive :).

What I mean is, there are a lot of weird little edge-cases in how multiple layers of the stack interact when they're dealing with a shared Deferred, and if we're 

However, upon further inspection I think that they key distinction between what you've proposed and what I'm talking about is the distinction between cancelling *one* layer of the callback chain and cancelling *all* layers of the callback chain.

Your description (elided for brevity's sake) was very helpful.  You've got resources which your callbacks are consuming by way of being "currently outstanding", and you want to be able to free *those* resources, without necessarily worrying about 

> Yes, agreed. I like the fact that the class is simple and that it deals
> with the client-side issues, allowing ignoring, timing out, early firing,
> etc.  As you say, the much harder problem remains. But the harder problem
> is a bit less messy now (at least in my mind): it's "just" cancellation.
> Responsibilities are cleanly divided by my class - the client takes care of
> itself, and cancellation has *only* to deal with callbacks placed on a
> deferred that was generated by what the client called.

I don't think that you can completely separate the problems.  You seem to have a reasonable solution to the problem of one layer of the Deferred stack, but once you're trying to deal with multiple layers of the stack at once, interactions occur which can be difficult to reconcile with the same API, many of which are already documented in the ticket's discussion.

> Looked at from this POV, an approach to cancellation would be for code that
> is able to cancel operations it has begun to also provide a cancel method.
> One way to think about doing this would be to have the cancel method take a
> deferred as an argument.

This is a *very* interesting idea, although I don't like the API that you propose for it.  By separating the cancel method from the Deferred itself, you remove the ability for a trivial client of that Deferred to say "forget about it" without also maintaining a reference to the thing that gave it the Deferred in the first place.  That means that you need a new 'operation' API, and your code needs to take twice as many parameters, and it generally gets ugly.

> Something like my class could then hand the
> deferred back, effectively saying "my client is no longer interested in
> this deferred. You can call/errback it, or not, it makes no difference to
> us". If you've done that once, you can do it multiple times - by which I
> mean that I might write code that's a client of getPage, and getPage is a
> client of XXX, and XXX is a client of YYY, etc. Each could in turn pass the
> deferred it got back to the thing that created it.

This implies, to me, that the cancellation callback would be better passed to addCallbacks(): effectively creating a third callback chain going from invoker to responder rather than the other way 'round as callbacks and errbacks do.

I have stumbled in the direction of this thought a few times already but this is the first time I've had a really clear grasp of how it would work.  Now I can see that each layer of the stack may have its own resources that it might want to clean up... previously I thought this could be done entirely with errbacks, but in this version, it doesn't matter if the base deferred doesn't know how to kick off the errback chain: all the resources on the *rest* of the callback chain can be cleaned up.

I'm going to need to figure out some good values for XXX and YYY here in order to truly dispel the fog, though.  The examples you provided are good but I still don't have a good feel for what might be a good general description of what resources could be used in different parts of the callback chain.

> If there's no cancel method, then that's as far as can be gone with canceling.

This is one of the really tricky issues that has faced this feature all along: what happens when some part of the chain involved doesn't know what to do with a canceller?  And your solution here seems like it may be a very elegant hack: do exactly the same thing as other parts of the callback chain.  What I mean is: currently, if a particular callback pair doesn't have a callback or an errback, the behavior is to do nothing and pass the result through.  Cancellation could do exactly the same thing!

> At that point the
> result is no longer passed because the first ControllableDeferred instance
> that's involved will effectively snip the link (or send an early result) in
> the sequence of steps that would originally have been done.

Severing the link seems like a problem though; if we do that, then introducing any non-cancellation-aware Deferred - or callback, for that matter - into a cancellation-aware pipeline will prevent cancellations from propagating further up, and there should be no reason to do that.

> And it keeps all code for doing cancellation out of the Deferred class.

Why is it that you want to keep the cancellation code out of Deferred?  It seems very useful to me to have one object that you can say "stop" to, without necessarily knowing what's going on above it or where it came from.

> OK, sorry for so many words. I hope this seems like it's heading in a
> useful direction. It does to me.

Yes, this has been very useful.  I hope we can distill this into some useful conclusions soon. :)

From glyph at twistedmatrix.com  Wed Jan  6 22:35:10 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 6 Jan 2010 22:35:10 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <CB7A5294-8731-4D26-BBC7-9D8B72FEA5C5@gmail.com>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
	<CB7A5294-8731-4D26-BBC7-9D8B72FEA5C5@gmail.com>
Message-ID: <7C76934F-E446-4E41-9A0E-D4C786E1BDE9@twistedmatrix.com>


On Jan 6, 2010, at 9:46 AM, ssteinerX at gmail.com wrote:

> As far as I know, in my limited spelunking into Twisted's guts, Deferred's pretty much only know about themselves and their callbacks so I'm not sure whether there's a "ringmaster" that knows any more than that that could make sure that all things are cleaned up properly.

Indeed not.  And I don't think there could be; in your ABORT handler description, you are describing a system where pretty much all the constraints are known, and all the code is being integrated into a single unit, together with hardware.  Twisted is supposed to be general-purpose enough that a "ringmaster" packaged with Twisted could not know about every possible different thing that might need to be cancelled and could not account for them...

(Unless of course you're talking about having a plugin API where things could register interest in cancellation, and that's pretty much what Terry and I seem to be converging on in the other fork of this thread.)




From terry at jon.es  Wed Jan  6 23:55:30 2010
From: terry at jon.es (Terry Jones)
Date: Thu, 7 Jan 2010 05:55:30 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 22:32:08 on Wednesday, 6 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
	<19268.32127.274082.288200@jon.es>
	<F21B04EB-3295-42A5-815D-515AACC97096@twistedmatrix.com>
Message-ID: <19269.26946.281676.959849@jon.es>

Hi Glyph

It's very late here, so I'll limit myself to a few thousand lines of reply.

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> On Jan 6, 2010, at 7:09 AM, Terry Jones wrote:

Glyph> What I mean is, there are a lot of weird little edge-cases in how
Glyph> multiple layers of the stack interact when they're dealing with a
Glyph> shared Deferred, and if we're

The above was truncated.

Glyph> However, upon further inspection I think that they key distinction
Glyph> between what you've proposed and what I'm talking about is the
Glyph> distinction between cancelling *one* layer of the callback chain and
Glyph> cancelling *all* layers of the callback chain.

Yes, that's right. I nearly made a diagram for people today, but didn't
know if anyone would be interested. But here's one way to look at it.

In today's deferred world, you have (in general) situations like this:

  func makes d -> c1 -> c2 -> c3 -> c4 -> c5 -> c6 -> c7 -> client -> c8 -> c9

I.e., the client makes a call, gets its hands on a deferred (which already
has zero or more call/errbacks on its chain) and adds its own callbacks.

At that point cancellation is very hard. Neither the client, nor the
deferred itself, or the original function, can know how to cancel the
operation. From the POV of the client and the deferred, that callback chain
is just a bunch of indistinguishable functions.

My ControllableDeferred class, if used by just the client, makes it
possible for the client to cut the link between c7 and c8, either by iself
(the client) calling the deferred it receives, which causes c8 to fire/err,
or by deactivating it, thereby arranging that c8 is never called.

So the ControllableDeferred in some sense introduces a cut point between
two callbacks in the original chain. And the cut point is in a sensible
logical position because the client added c8 and c9 and can be expected to
know what to do to clean them up if it decides it's done waiting for the
original d to fire.

But the above picture is more uniform than the reality: it hides the fact
that the callbacks were added to the deferred in groups (of zero or more).
That is, the chain really looks like this:

  func makes d -> w1 -> w2 -> x1 -> x2 -> y1 -> y2 -> y3 -> client -> c8 -> c9

which is to say that the client in fact called function Y. Y called X. X
called W, and W called something that returned a deferred. W then adds w1,
and w2 to d and returns it to X. X adds x1 and x2 to d and returns it to Y.
Y adds y1-3 and returns it to C.

So you can imagine now that we insert a cut point at each logical boundary,
and then the cancel information can flow back up the chain and each logical
unit presumably knows how to discard / abort etc., whatever it may have in
progress.

That picture is mainly for clarity. I'm sure you're miles ahead already...


Glyph> Your description (elided for brevity's sake) was very helpful.
Glyph> You've got resources which your callbacks are consuming by way of
Glyph> being "currently outstanding", and you want to be able to free
Glyph> *those* resources, without necessarily worrying about

However you were going to finish that sentence, I agree :-)

I want to free the resources, and I want to be able to get on with whatever
it is I'm supposed to be doing.

>> Yes, agreed. I like the fact that the class is simple and that it deals
>> with the client-side issues, allowing ignoring, timing out, early firing,
>> etc.  As you say, the much harder problem remains. But the harder problem
>> is a bit less messy now (at least in my mind): it's "just" cancellation.
>> Responsibilities are cleanly divided by my class - the client takes care of
>> itself, and cancellation has *only* to deal with callbacks placed on a
>> deferred that was generated by what the client called.

Glyph> I don't think that you can completely separate the problems.  You
Glyph> seem to have a reasonable solution to the problem of one layer of
Glyph> the Deferred stack, but once you're trying to deal with multiple
Glyph> layers of the stack at once, interactions occur which can be
Glyph> difficult to reconcile with the same API, many of which are already
Glyph> documented in the ticket's discussion.

It may be that there are interactions between W and Y (for example) in my
above (2nd) diagram, but I expect that would be infrequent. E.g., W might
decide to attach a callback to d after it has been returned to (and added
to by) X, Y, etc.  That seems to be a problem, but if W were to add those
extra callbacks within another logical unit of the callback chain, it would
be alerted of the cancellation in the normal fashion (twice). Make sense?

>> Looked at from this POV, an approach to cancellation would be for code that
>> is able to cancel operations it has begun to also provide a cancel method.
>> One way to think about doing this would be to have the cancel method take a
>> deferred as an argument.

Glyph> This is a *very* interesting idea, although I don't like the API
Glyph> that you propose for it.  By separating the cancel method from the
Glyph> Deferred itself, you remove the ability for a trivial client of that
Glyph> Deferred to say "forget about it" without also maintaining a
Glyph> reference to the thing that gave it the Deferred in the first place.

I agree that's less desirable, but I'm not sure it's a necessary
consequence of the approach. Or maybe it is.

Today I modified my ControllableDeferred class to allow a cancelFunc
argument. The __init__ is a tiny bit more clunky, but it has methods just
like the old class, e.g.

    def callback(self, result):
        if not self._called:
            self._called = True
            if self.cancelFunc:
                self.cancelFunc(self._calld)
            defer.Deferred.callback(self, result)

    def deactivate(self):
        if not self._called:
            self._called = True
            if self.cancelFunc:
                self.cancelFunc(self._calld)

This is just what you suggest - the cancel function is inside the deferred
class (my ControllableDeferred is a subclass of Deferred, so that's
literally true).  The client, receiving an instance of this class, can just
say "forget about it" and the cancel goes back to wherever it should go, if
anywhere.  So you can imagine writing a getPage function (or class) that
returns ControllableDeferred instances. Calling the deferred or
deactivating it would then result in a HTTPClientFactory instance calling
transport.loseConnection.

>> Something like my class could then hand the deferred back, effectively
>> saying "my client is no longer interested in this deferred. You can
>> call/errback it, or not, it makes no difference to us". If you've done
>> that once, you can do it multiple times - by which I mean that I might
>> write code that's a client of getPage, and getPage is a client of XXX,
>> and XXX is a client of YYY, etc. Each could in turn pass the deferred it
>> got back to the thing that created it.

Glyph> This implies, to me, that the cancellation callback would be better
Glyph> passed to addCallbacks(): effectively creating a third callback
Glyph> chain going from invoker to responder rather than the other way
Glyph> 'round as callbacks and errbacks do.

Yes, I like that a lot, at least in a 5:30am superficial kinda way.

A key difference between what I'd imagined and what you're suggesting is
that in my approach, the cancel call goes directly to the thing (it would
need to be a class instance, I suspect) that got the deferred. I.e. from my
2nd diagram, if the client calls cancel (or deactivate, as in the code),
then the thing that added y1 to the chain is going to have its cancel
method called (or some method that it asked to have called). So the control
in a sense jumps back over y3, y2 and y1 to the root of the logical Y
section.

Your approach passes the signal back up the chain. Most secondary steps,
like y3 and y2, will pass the call along without taking any action. But
they don't have to, which is good. And the first callback of a logical unit
can always do exactly what would have been done in my approach above.

I think your approach is better.

Glyph> I have stumbled in the direction of this thought a few times already
Glyph> but this is the first time I've had a really clear grasp of how it
Glyph> would work.  Now I can see that each layer of the stack may have its
Glyph> own resources that it might want to clean up... previously I thought
Glyph> this could be done entirely with errbacks, but in this version, it
Glyph> doesn't matter if the base deferred doesn't know how to kick off the
Glyph> errback chain: all the resources on the *rest* of the callback chain
Glyph> can be cleaned up.

Yes. And the logical divisions of the call/errback chain are going to
ignore each other in any case. Once a further-down-the-chain function has
either called or deactivated the deferred (to put it simply - it's actually
not just one deferred, at least in my implementation), it doesn't matter at
all what the upstream (earlier) functions do - the result, if any, is not
going through.

Glyph> I'm going to need to figure out some good values for XXX and YYY
Glyph> here in order to truly dispel the fog, though.

I'm a bit foggy too. That's why I started playing with getPage to try to
use a common example with at least a few levels of processing. But I didn't
have time to think about it clearly. I wrote some foggy code, which I wont
inflict on you. I'm pretty sure there's a clean solution in here though,
that we can get to with a bit more back & forth.

>> If there's no cancel method, then that's as far as can be gone with
>> canceling.

Glyph> This is one of the really tricky issues that has faced this feature
Glyph> all along: what happens when some part of the chain involved doesn't
Glyph> know what to do with a canceller?  And your solution here seems like
Glyph> it may be a very elegant hack: do exactly the same thing as other
Glyph> parts of the callback chain.  What I mean is: currently, if a
Glyph> particular callback pair doesn't have a callback or an errback, the
Glyph> behavior is to do nothing and pass the result through.  Cancellation
Glyph> could do exactly the same thing!

Yes, that's great. That's *your* solution, btw :-)

>> At that point the result is no longer passed because the first
>> ControllableDeferred instance that's involved will effectively snip the
>> link (or send an early result) in the sequence of steps that would
>> originally have been done.

Glyph> Severing the link seems like a problem though; if we do that, then
Glyph> introducing any non-cancellation-aware Deferred - or callback, for
Glyph> that matter - into a cancellation-aware pipeline will prevent
Glyph> cancellations from propagating further up, and there should be no
Glyph> reason to do that.

Yes, agreed.

>> And it keeps all code for doing cancellation out of the Deferred class.

Glyph> Why is it that you want to keep the cancellation code out of
Glyph> Deferred?  It seems very useful to me to have one object that you
Glyph> can say "stop" to, without necessarily knowing what's going on above
Glyph> it or where it came from.

Yes, I guess I didn't want to keep it out of there - especially since I
already put it in today.... I guess what I really meant was that I wanted
it to be clean / simple, because Deferreds are that way already (once
you've spent a couple of years thinking about them).

>> OK, sorry for so many words. I hope this seems like it's heading in a
>> useful direction. It does to me.

Glyph> Yes, this has been very useful.  I hope we can distill this into
Glyph> some useful conclusions soon. :)

I think we can / will.  It should be fairly easy to build an example based
on getPage. I badly wanted to today, but we have a ton of stuff going on
right now and I forced myself to put this aside for some hours.

Terry


From terry at jon.es  Thu Jan  7 08:48:09 2010
From: terry at jon.es (Terry Jones)
Date: Thu, 7 Jan 2010 14:48:09 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 22:32:08 on Wednesday, 6 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
	<19268.32127.274082.288200@jon.es>
	<F21B04EB-3295-42A5-815D-515AACC97096@twistedmatrix.com>
Message-ID: <19269.58905.938437.518724@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

Glyph> This implies, to me, that the cancellation callback would be better
Glyph> passed to addCallbacks(): effectively creating a third callback
Glyph> chain going from invoker to responder rather than the other way
Glyph> 'round as callbacks and errbacks do.

After I went to bed I realized that someone is immediately going to want to
have a cancel function that returns a deferred. And what happens if
something goes wrong in a cancel function?

So you could end up with four chains, not two. And you could have
addCancelback *prepend* its functions to its chains, so that when the chain
is fired using the normal mechanism, it runs backwards.

So a deferred is running its callbacks from one end, and a client at the
other end calls the cancelback, which starts running callbacks from its
end.  And when the two meet? It's like the moment in Ghostbusters, when
they're screaming "Don't cross the streams! Don't cross the streams!"

The mind begins to boggle...  does madness that way lie?  Maybe not.

T


From drken567 at gmail.com  Thu Jan  7 12:49:21 2010
From: drken567 at gmail.com (Ken MacDonald)
Date: Thu, 7 Jan 2010 12:49:21 -0500
Subject: [Twisted-Python] Assistance with using Twisted with
	"pyinstaller"
In-Reply-To: <7129590B-4CD7-46F3-B1FE-717BE8E268E6@googlemail.com>
References: <3468cae11001051248j77e19aefhcb941978338f5222@mail.gmail.com> 
	<7129590B-4CD7-46F3-B1FE-717BE8E268E6@googlemail.com>
Message-ID: <3468cae11001070949o9b34843h91dcffa437cc36d6@mail.gmail.com>

Thanks, I'll keep cx/bb-Freeze in mind if pyinstaller doesn't work out. I
did get some tips from one of our internal guys;  they had built a project
successfully with Twisted & pyinstaller some time back. I'm trying to figure
out the details of what went on there. Seems that they made an <appname>.py
which imported Twisted's UnixApplicationRunner() which then imported what
had been the .tac file (renamed to <appname>tac.py) to launch the server.
Still working out the details, imports, etc., but appears that <appname>.py
took over much of the functionality that twistd was providing and made it
into more of a straightforward python app. We'll see how this goes.
Ken

On Wed, Jan 6, 2010 at 5:03 AM, Paul Thomas
<spongelavapaul at googlemail.com>wrote:

>
> On 5 Jan 2010, at 20:48, Ken MacDonald wrote:
>
> > Hi, we're trying to using pyinstaller to create single-directory
> > distributions of our Twisted/python server on Linux. Wondering if
> > anyone has accomplished this? I googled and checked the archives,
> > but there seems to be no concrete information available.
>
> Sorry to be negative, but I've not managed to get pyinstaller working
> with twisted.
>
> The reason I'm posting is that I have managed to get bbfreeze and
> cx_freeze working. This is all about 6 months old, so newer versions
> might be different, but to summarise:
>
> cx_Freeze put everything into an executable zip file so you are left
> with one main binary and a handful of .so objects for python C modules
> (unless you patch the Python build to build static). I had to switch
> to bbfreeze because I needed to use Nevow and there were too many
> hoops to jump through to make it work with the data files accessed
> relative to __file__.
>
> bbfreeze works with eggs, so it works with Nevow or anything else that
> uses data files, but the down side is that the result isn't zipped up
> into one executable.
>
> I'm about to reopen the whole freezing thing for a new project, so I
> may be able to report back in a few weeks.
>
>
> >
> > I'm real new to pyinstaller and not really familiar with twisted
> > internals, so not sure where to start with this, particularly
> > whether to package our_server.tac, or the twistd script, or the
> > our_server.py as the starting point to bundle all of this stuff
> > together. If anyone's done this successfully, or failed miserably,
> > would be interested in getting details.
>
> I dropped the tac file to make it easier to specify the entrypoint. To
> do this while still getting all the twistd goodness requires some
> hacking, but it isn't really necessary. You can use the tac file
> (better to change the extension to .py though) and put a few imports
> in the file that are only there to pull in dependencies that the
> freezing program can't find. It's basically an iterative thing - build
> it, note the missing dependencies, import them, repeat.
>
> Good luck.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100107/d83c7ba7/attachment.htm 

From warner at lothar.com  Thu Jan  7 17:29:04 2010
From: warner at lothar.com (Brian Warner)
Date: Thu, 07 Jan 2010 14:29:04 -0800
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19269.58905.938437.518724@jon.es>
References: <19266.41597.624446.721449@jon.es>	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>	<19266.49182.1607.537978@jon.es>	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>	<19267.46305.908634.631822@jon.es>	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>	<19268.32127.274082.288200@jon.es>	<F21B04EB-3295-42A5-815D-515AACC97096@twistedmatrix.com>
	<19269.58905.938437.518724@jon.es>
Message-ID: <4B466030.1000303@lothar.com>

Terry Jones wrote:

> After I went to bed I realized that someone is immediately going to
> want to have a cancel function that returns a deferred. And what
> happens if something goes wrong in a cancel function?

FWIW, the way I've dealt with these sorts of things (in Tahoe, at least)
has been to set a flag that is checked at a variety of useful stopping
points, and if the flag is set, raise some sort of "Interrupted"
exception, which bypasses the rest of the callback chain. Then, at the
end, I add an errback which only catches Interrupted and ignores it. I
think of this as the Deferred equivalent of returning early from a
subroutine. It has the nice property that anything that goes wrong in
the interrupt/cancellation process will be reported in the same place as
any other errors.

Something like:

 class Interrupted(Exception): pass

 class Foo:
   interrupted = False
   def start(self):
     d = self.do_one()
     d.addCallback(self.do_two)
     d.addCallback(self.do_three)
     d.addErrback(self.eat_interrupt)
     return d
   def interrupt(self):
     self.interrupted = True
   def do_one(self):
     return startSomething()
   def do_two(self, res):
     if self.interrupted: raise Interrupted()
     return startSomethingElse()
   def do_three(self, res):
     if self.interrupted: raise Interrupted()
     return startSomethingOther()
   def eat_interrupt(self, f):
     f.trap(Interrupted)
     return None

 d = Foo().start()

This doesn't explicitly cancel whatever step is currently in progress,
but it makes sure that we won't move on to the next step. When the steps
are small and reasonably side-effect free, this seems to work pretty
well.

If the steps were larger, then I'd have do_one/do_two/do_three record a
counter to indicate what step was currently in progress, and then change
interrupt() to perform whatever sort of cancellation was appropriate for
that particular step. This usually makes it more obvious what sorts of
references or objects or whatever you'll be needing to cancel the work
that's been started, because you have to stash them (for use by
interrupt()) at the same time that you start the work:

   def do_two(self, res):
     if self.interrupted: raise Interrupted()
     self.current_step = 2
     handle = self.start_something_long()
     self.handle_to_cancel_step_2 = handle
     return handle.start()
  def interrupt(self):
     self.interrupted = True
     ...
     if self.current_step == 2:
       self.handle_to_cancel_step_2.cancel()

I've also had systems (somewhere in Buildbot, I think) where interrupt()
took and stashed a Failure argument, and made sure that the
already-running Deferred chain errbacked with that, by using:

 if self.interrupted: raise self.interrupted

but I'm not fond of that technique anymore, since the Failure that pops
out of the chain won't have a stack trace that references anything in
the chain. It's a tricky subject: you care both about who called
interrupt() and at what point in the chain was the interrupt recognized.
One other trick I've used is to have self.interrupted be a string,
recording "why" the process was interrupted, and arrange for the
Interrupt() class to include that string in its repr.


All that said, the handful of places where I've used these techniques
have since grown large enough that I'm planning to rewrite them in terms
of state machines, and to have exactly one Deferred (used to indicate
overall completion). The immediate problem that the big Deferred chain
is causing me is that remote Foolscap calls to hosts that have silently
disconnected (e.g. they got unplugged from the network) will stall for
20 minutes, causing the rest of the chain to stall, and a state machine
approach will make it easier to build adaptive timeouts around these
calls.

cheers,
 -Brian


From exarkun at twistedmatrix.com  Sun Jan 10 00:05:12 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Jan 2010 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1263099912.43.1875584702@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100110/4c91806e/attachment.htm 

From kevin.horn at gmail.com  Sun Jan 10 02:22:16 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sun, 10 Jan 2010 01:22:16 -0600
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <1263099912.43.1875584702@twistedmatrix.com>
References: <1263099912.43.1875584702@twistedmatrix.com>
Message-ID: <562bcc11001092322g21a63f48j1458822e222aaa7c@mail.gmail.com>

I'd like to point out that for three of the last four weeks, more tickets
have been closed than have been opened.

Go team!  (especially exarkun and jesstess).

Kevin Horn

On Sat, Jan 9, 2010 at 11:05 PM, <exarkun at twistedmatrix.com> wrote:

>  Bug summary
> ______________________
> Summary for 2010-01-03 through 2010-01-10
> Bugs opened: 6    Bugs closed: 7  Total open bugs: 1217 (-1)
>
> |== Type Changes   |== Priority Changes   |== Component Changes
> |Defect:       -2  |Highest:  -1          |Conch:               +0
> |Enhancement:  +1  |Normal:   -1          |Core:                +1
>                    |Low:      +1          |Mail:                +0
>                                           |Release Management:  -1
>                                           |Trial:               -1
>
>
> Total TicketsOpen Tickets
>
>
> New / Reopened Bugs
> ______________________
>                     ===== Normal =====
> [#4197] t.conch.insults.window.ScrolledArea is not instantiable. (opened by ali)
>     defect          conch      http://twistedmatrix.com/trac/ticket/4197
>
> [#4199] spawnProcess should reset signal handlers to default before exec()ing new executable (opened by itamarst)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4199
>
> [#4200] SMTP Client tutorial uses bad markup (opened by khorn) (CLOSED, fixed)
>     enhancement     mail       http://twistedmatrix.com/trac/ticket/4200
>
> [#4201] Broken link in core/howto/tutorial/intro (opened by khorn) (CLOSED, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4201
>
> [#4202] Bad markup in doc/web2/howto.object-traversal (opened by khorn)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4202
>
>                     ===== Low =====
> [#4198] twisted.protocols.sip assumes DelayedCalls are scheduled by wallclock time (opened by ivank)
>     defect          core       http://twistedmatrix.com/trac/ticket/4198
>
>
>
> Closed Bugs
> ______________________
>                     ===== Highest =====
> [#3251] Web2 tarball install doesn't jive with setuptools of integrated tarball (opened by ralphm, closed by thijs, wontfix)
>     defect          release management http://twistedmatrix.com/trac/ticket/3251
>
>                     ===== Normal =====
> [#3848] twisted.test.test_randbytes.ConditionalSecureRandomTestCase fails on Python trunk at HEAD (opened by ivank, closed by ivank, fixed)
>     defect          core       http://twistedmatrix.com/trac/ticket/3848
>
> [#4200] SMTP Client tutorial uses bad markup (opened by khorn, closed by jesstess, fixed)
>     enhancement     mail       http://twistedmatrix.com/trac/ticket/4200
>
> [#4201] Broken link in core/howto/tutorial/intro (opened by khorn, closed by jesstess, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4201
>
> [#2689] twisted.test.test_assertions is lonely (opened by exarkun, closed by jesstess, fixed)
>     defect          trial      http://twistedmatrix.com/trac/ticket/2689
>
> [#4157] non-local inlineCallbacks exit from returnValue being called in the wrong function is very confusing (opened by glyph, closed by glyph, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4157
>
> [#2116] sshsimpleserver.py on Windows (opened by synapsis, closed by exarkun, worksforme)
>     defect          conch      http://twistedmatrix.com/trac/ticket/2116
>
>
>
> Ticket Lifetime Stats
> ______________________
> Oldest open ticket - [#50] conch command-line client doesn't work in win32 (since 2003-07-12 16:41:06).
> Newest open ticket - [#4202] Bad markup in doc/web2/howto.object-traversal (since 2010-01-08 15:41:02).
>
> Mean open ticket age: 878 days, 16:53:23.432636.
> Median: 854 days, 5:55:22.572324.
> Standard deviation: 616 days, 6:48:49.855952.
> Interquartile range: 941 days, 17:33:57.
>
> Mean time between ticket creation and ticket resolution: 211 days, 6:59:00.709972.
> Median: 27 days, 11:22:47.
> Standard deviation is 358 days, 16:38:52.703477.
> The interquartile range is 249 days, 7:15:45.
>
> Mean time spent in review: 79 days, 8:39:32.040875.
> Median: 4 days, 5:07:43.
> Standard deviation: 273 days, 2:02:52.068017.
> Interquartile range: 16 days, 20:07:21.
>
> Mean number of times a ticket is reviewed: 2.05202312139.
> Median: 1
> Standard deviation: 1.69219379922.
> Interquartile range: 1.
>
>
> Contributor Stats
> ______________________
> In the last 4 weeks,
>     20 unique ticket reporters
>     10 unique ticket reviewers
>     10 unique ticket resolvers
> In the last 24 weeks,
>     103 unique ticket reporters
>     19 unique ticket reviewers
>     20 unique ticket resolvers
> In the last 48 weeks,
>     179 unique ticket reporters
>     24 unique ticket reviewers
>     25 unique ticket resolvers
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100110/2999abf3/attachment.htm 

From gabriel.rossetti at arimaz.com  Mon Jan 11 08:33:01 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Mon, 11 Jan 2010 14:33:01 +0100
Subject: [Twisted-Python] Proxy support through urllib2?
Message-ID: <4B4B288D.6020308@arimaz.com>

Hello everyone,

Is it possible to use a proxy with Twisted? I can do this with urllib2 :

proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
opener = urllib2.build_opener(proxy)
urllib2.install_opener(opener)

will that suffice? I'd need SOCKSv5 and HTTP proxy support.

Thanks,
Gabriel


From exarkun at twistedmatrix.com  Mon Jan 11 09:18:31 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 11 Jan 2010 14:18:31 -0000
Subject: [Twisted-Python] Proxy support through urllib2?
In-Reply-To: <4B4B288D.6020308@arimaz.com>
References: <4B4B288D.6020308@arimaz.com>
Message-ID: <20100111141831.1898.925027669.divmod.xquotient.23@localhost.localdomain>

On 01:33 pm, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>Is it possible to use a proxy with Twisted? I can do this with urllib2 
>:
>
>proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
>opener = urllib2.build_opener(proxy)
>urllib2.install_opener(opener)
>
>will that suffice? I'd need SOCKSv5 and HTTP proxy support.

This is one of the features the new HTTP client is intended to make 
easier to implement.  The very short twisted.web.client.Agent is 
responsible for all the things which differ when connecting to a proxy 
instead of doing the usual thing.  At some point, twisted.web.client 
should offer something like Agent which provides the proxy 
functionality.  Do you want to take a stab at implementing it?

Jean-Paul


From kevin.horn at gmail.com  Mon Jan 11 11:40:55 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 11 Jan 2010 10:40:55 -0600
Subject: [Twisted-Python] Proxy support through urllib2?
In-Reply-To: <4B4B288D.6020308@arimaz.com>
References: <4B4B288D.6020308@arimaz.com>
Message-ID: <562bcc11001110840p39d3454cv6e6e63cc9fbd04be@mail.gmail.com>

On Mon, Jan 11, 2010 at 7:33 AM, Gabriel Rossetti <
gabriel.rossetti at arimaz.com> wrote:

> Hello everyone,
>
> Is it possible to use a proxy with Twisted? I can do this with urllib2 :
>
> proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
> opener = urllib2.build_opener(proxy)
> urllib2.install_opener(opener)
>
> will that suffice? I'd need SOCKSv5 and HTTP proxy support.
>
> Thanks,
> Gabriel
>
>
When you say you want to "use a proxy with Twisted", do you mean that you
want Your Twisted applicatino to provide a proxy to other applications, or
do you mean that you want your Twisted application to use a (separate)
proxy?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100111/c7622267/attachment.htm 

From anthony-twisted at hogan.id.au  Wed Jan 13 15:00:08 2010
From: anthony-twisted at hogan.id.au (Anthony)
Date: Thu, 14 Jan 2010 07:00:08 +1100
Subject: [Twisted-Python] Signalling twistd with SIGUSR1 to rotate also
	interrupts txAMQP connections
Message-ID: <1bf8be121001131200u214cbc39kfaa7c8b1e98f3959@mail.gmail.com>

We run some services that use txAMQP within twistd to connect to an AMQP
bus.

When we send twistd a SIGUSR1 to rotate its logs, it appears our application
loses connection to the AMQP bus and needs to reconnect. This doesn't crash
the app, but means the app may be offline momentarily when it should be
available to process data.

Is it possible that twistd is processing the SIGUSR1 and then passing it
onto our app and txAMQP?

We want to be able to force a log rotate without the entire app, or the
connections it has open, resetting.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100114/6bf46b97/attachment.htm 

From ltaylor.volks at gmail.com  Fri Jan 15 13:01:44 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Fri, 15 Jan 2010 11:01:44 -0700
Subject: [Twisted-Python] Signalling twistd with SIGUSR1 to rotate also
 interrupts txAMQP connections
In-Reply-To: <1bf8be121001131200u214cbc39kfaa7c8b1e98f3959@mail.gmail.com>
References: <1bf8be121001131200u214cbc39kfaa7c8b1e98f3959@mail.gmail.com>
Message-ID: <4B50AD88.40602@gmail.com>

On 1/13/10 1:00 PM, Anthony wrote:
> We run some services that use txAMQP within twistd to connect to an AMQP
> bus.
> 
> When we send twistd a SIGUSR1 to rotate its logs, it appears our
> application loses connection to the AMQP bus and needs to reconnect.
> This doesn't crash the app, but means the app may be offline momentarily
> when it should be available to process data.
> 
> Is it possible that twistd is processing the SIGUSR1 and then passing it
> onto our app and txAMQP?
> 
> We want to be able to force a log rotate without the entire app, or the
> connections it has open, resetting.
> 

AFAICT, twistd just registers a signal handler for SIGUSR1 that calls
t.p.logfile.Logfile.rotate. I don't see it propagating anywhere else in
a manner that would cause dropped connections.

Maybe os operations in rotate are blocking while they are doing the
remove/rename dance? Are you infrequently rotating (large files)?

If you setup your own handler for SIGUSR1, twistd will not register the
log rotation function, giving you an alternative to explore the issue.




From reddaly at gmail.com  Fri Jan 15 17:58:10 2010
From: reddaly at gmail.com (Red Daly)
Date: Fri, 15 Jan 2010 14:58:10 -0800
Subject: [Twisted-Python] Accessing the request object from a different
	thread
Message-ID: <f6700f0c1001151458ibcb4b47wffd5614ef663fd8e@mail.gmail.com>

I have an application that uses synchronous access to a MySQL database
through SQLAlchemy.  Unwilling to part with this synchronous access,
our application uses threads to perform database I/O outside of the
main Twisted thread.  It would be nice to still have some access to
the request object while processing a request in a new thread.  Is
there any thread-safe way to access the request object data?

Here is a typical Resource subclass:

    def parseRequest(self, request, session):
        try:
            # parse the relevant portion of the path
            namingPortionOfPath = self.idParserRE.match(request.path).group(1)

            cls = self.dbClass()
            return cls.getAllInstances(namingPortionOfPath)
        except:
            return None
        return None

    def render_GET(self, request):
        def sessionFn(session):
            instance = self.parseRequest(request, session)
            rendered = None
            if instance:
                stream = self.template.generate(object=instance,
                                                resource=self,
                                                session=session)

                rendered = stream.render('html', doctype='html',
encoding='latin1')
            else:
                rendered = "finished"

            return rendered

        def otherThreadFn():
            return pulse.web.mainStore().withSession(sessionFn)

        def deferedCallback(r):
            request.write(r)
            request.finish()

        twisted.internet.threads.deferToThread(otherThreadFn).addCallback(deferedCallback)

        return NOT_DONE_YET


All of the accesses to the request object are read operations.  If
those read operations occur on data that does not get messed with by
the main thread, then this should be thread-safe code.  However, it
seems that the official word is "do not use request objects from other
threads."  Maybe I am mistaken.  In any case, is there a safe way to
get at request headers and parameter values outside of the reactor
loop.

Thanks,
Red


From p.mayers at imperial.ac.uk  Sat Jan 16 07:54:07 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 16 Jan 2010 12:54:07 +0000
Subject: [Twisted-Python] Accessing the request object from a different
 thread
In-Reply-To: <f6700f0c1001151458ibcb4b47wffd5614ef663fd8e@mail.gmail.com>
References: <f6700f0c1001151458ibcb4b47wffd5614ef663fd8e@mail.gmail.com>
Message-ID: <4B51B6EF.70008@imperial.ac.uk>

> 
> All of the accesses to the request object are read operations.  If
> those read operations occur on data that does not get messed with by
> the main thread, then this should be thread-safe code.  However, it
> seems that the official word is "do not use request objects from other
> threads."  Maybe I am mistaken.  In any case, is there a safe way to
> get at request headers and parameter values outside of the reactor
> loop.

The rule is not to call any twisted functions IIRC.

You can do this safely:

   args_copy = dict(request.args)
   hdr_copy = dict(request.requestHeaders.getAllRawHeaders())
   deferToThread(func, args_copy, hdr_copy)


From exarkun at twistedmatrix.com  Sun Jan 17 00:05:12 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Jan 2010 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1263704712.41.903773404@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100117/bf578cb5/attachment.htm 

From dgriff1 at gmail.com  Sun Jan 17 18:25:35 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 17 Jan 2010 17:25:35 -0600
Subject: [Twisted-Python] Plain windows sockets and twisted
Message-ID: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>

Hi,

I am using twisted in a cross-platform manner. I have written both the
client and server. The client is twisted and the server uses python threads.
I am using the select reactor and plain old TCP connections. I encode my
messages to JSON to send them.

On Windows I get tons of un-clean connectionlost events, on Mac everything
works perfectly. I am using the same data set in each case.

If I use the threaded server on windows and the twisted client on mac then I
still get tons of errors. 99% of these times these errors happen after the
last dataReceived when the socket should be closed cleanly.

My threaded code is:
        try:
            (clientsocket, address) = serversocket.accept()
        except Exception, e:
            print "Exception ", e, clientsocket
        try:
            p = processrequest()
            p.set_socket(clientsocket)
            p.start()

and in processrequest
self.sock.send_all(my_json_message)
self.sock.close()

Is this the correct behavior for using plain sockets with twisted? Any
reason why this would be perfectly fine on OSX and not Windows? Sorry for
the long email.

Thank you very very much,
Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100117/302b314b/attachment.htm 

From glyph at twistedmatrix.com  Sun Jan 17 19:52:19 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 17 Jan 2010 19:52:19 -0500
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
Message-ID: <A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>


On Jan 17, 2010, at 6:25 PM, Daniel Griffin wrote:

> I am using twisted in a cross-platform manner. I have written both the client and server. The client is twisted and the server uses python threads. I am using the select reactor and plain old TCP connections. I encode my messages to JSON to send them.
> 
> On Windows I get tons of un-clean connectionlost events, on Mac everything works perfectly. I am using the same data set in each case. 

You should use Twisted for your server and get rid of threads, or you should very carefully read <http://itamarst.org/writings/win32sockets.html> and understand the differences between what windows calls "sockets" and what the rest of the world does.

> If I use the threaded server on windows and the twisted client on mac then I still get tons of errors. 99% of these times these errors happen after the last dataReceived when the socket should be closed cleanly. 
 .
 .
 .
> 
> Is this the correct behavior for using plain sockets with twisted? Any reason why this would be perfectly fine on OSX and not Windows? Sorry for the long email. 

You'll need to give some more detail.  What errors are you seeing?  Please post a complete traceback, along with enough code to actually trigger the error.  (<http://sscce.org/> is a good resource explaining desirable attributes of such an example.)

What version of Twisted are you using?  What version of Python?  What is the protocol?  Are the errors occurring in your threaded server or your twisted client?

The quick answer to your question is: no, this behavior is not expected.  Sockets are sockets.  Twisted should work fine talking to sockets in threads, sockets in other programming languages, other operating systems, etc.  Of course, that's just what's *supposed* to happen: there's a bug here, and with the information I have now, I can't say whether it's in your threaded code, your Twisted code, Twisted, or even Python.

Good luck?




From dgriff1 at gmail.com  Sun Jan 17 21:55:22 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 17 Jan 2010 20:55:22 -0600
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
	<A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
Message-ID: <3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>

Thank you for the response. I am using twisted 9.0 and tried 8.2. The python
version is 2.6. When I print the reason sent to connection lost I get
"[Failure instance: Traceback (failure with no frames): <class 't
wisted.internet.error.ConnectionLost' Connection to the other side was lost
in
 a non-clean fashion.". I am using IP4 TCP sockets.

I realize python threads are defective but in this case they are easier to
deal with.

I will create a chunk of sample code and send it to the list.

Thanks,
Dan



On Sun, Jan 17, 2010 at 6:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 17, 2010, at 6:25 PM, Daniel Griffin wrote:
>
> > I am using twisted in a cross-platform manner. I have written both the
> client and server. The client is twisted and the server uses python threads.
> I am using the select reactor and plain old TCP connections. I encode my
> messages to JSON to send them.
> >
> > On Windows I get tons of un-clean connectionlost events, on Mac
> everything works perfectly. I am using the same data set in each case.
>
> You should use Twisted for your server and get rid of threads, or you
> should very carefully read <http://itamarst.org/writings/win32sockets.html>
> and understand the differences between what windows calls "sockets" and what
> the rest of the world does.
>
> > If I use the threaded server on windows and the twisted client on mac
> then I still get tons of errors. 99% of these times these errors happen
> after the last dataReceived when the socket should be closed cleanly.
>  .
>  .
>  .
> >
> > Is this the correct behavior for using plain sockets with twisted? Any
> reason why this would be perfectly fine on OSX and not Windows? Sorry for
> the long email.
>
> You'll need to give some more detail.  What errors are you seeing?  Please
> post a complete traceback, along with enough code to actually trigger the
> error.  (<http://sscce.org/> is a good resource explaining desirable
> attributes of such an example.)
>
> What version of Twisted are you using?  What version of Python?  What is
> the protocol?  Are the errors occurring in your threaded server or your
> twisted client?
>
> The quick answer to your question is: no, this behavior is not expected.
>  Sockets are sockets.  Twisted should work fine talking to sockets in
> threads, sockets in other programming languages, other operating systems,
> etc.  Of course, that's just what's *supposed* to happen: there's a bug
> here, and with the information I have now, I can't say whether it's in your
> threaded code, your Twisted code, Twisted, or even Python.
>
> Good luck?
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100117/60ebcafa/attachment.htm 

From dgriff1 at gmail.com  Sun Jan 17 22:45:46 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 17 Jan 2010 21:45:46 -0600
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
	<A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
	<3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>
Message-ID: <3db160681001171945y1fb937eaua9bb78845ae6de43@mail.gmail.com>

Here are two tiny apps. They run perfectly on OSX and error like this on
windows:

Log conenction  [Failure instance: Traceback (failure with no frames):
<class 't
wisted.internet.error.ConnectionLost' Connection to the other side was lost
in
 a non-clean fashion.
] Log conenction  [Failure instance: Traceback (failure with no frames):
<class
'twisted.internet.error.ConnectionLost' Connection to the other side was
lost
in a non-clean fashion.
....

Start server.py then run tclient.py.

Dan



On Sun, Jan 17, 2010 at 8:55 PM, Daniel Griffin <dgriff1 at gmail.com> wrote:

> Thank you for the response. I am using twisted 9.0 and tried 8.2. The
> python version is 2.6. When I print the reason sent to connection lost I get
> "[Failure instance: Traceback (failure with no frames): <class 't
> wisted.internet.error.ConnectionLost' Connection to the other side was lost
> in
>  a non-clean fashion.". I am using IP4 TCP sockets.
>
> I realize python threads are defective but in this case they are easier to
> deal with.
>
> I will create a chunk of sample code and send it to the list.
>
> Thanks,
> Dan
>
>
>
> On Sun, Jan 17, 2010 at 6:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>>
>> On Jan 17, 2010, at 6:25 PM, Daniel Griffin wrote:
>>
>> > I am using twisted in a cross-platform manner. I have written both the
>> client and server. The client is twisted and the server uses python threads.
>> I am using the select reactor and plain old TCP connections. I encode my
>> messages to JSON to send them.
>> >
>> > On Windows I get tons of un-clean connectionlost events, on Mac
>> everything works perfectly. I am using the same data set in each case.
>>
>> You should use Twisted for your server and get rid of threads, or you
>> should very carefully read <
>> http://itamarst.org/writings/win32sockets.html> and understand the
>> differences between what windows calls "sockets" and what the rest of the
>> world does.
>>
>> > If I use the threaded server on windows and the twisted client on mac
>> then I still get tons of errors. 99% of these times these errors happen
>> after the last dataReceived when the socket should be closed cleanly.
>>  .
>>  .
>>  .
>> >
>> > Is this the correct behavior for using plain sockets with twisted? Any
>> reason why this would be perfectly fine on OSX and not Windows? Sorry for
>> the long email.
>>
>> You'll need to give some more detail.  What errors are you seeing?  Please
>> post a complete traceback, along with enough code to actually trigger the
>> error.  (<http://sscce.org/> is a good resource explaining desirable
>> attributes of such an example.)
>>
>> What version of Twisted are you using?  What version of Python?  What is
>> the protocol?  Are the errors occurring in your threaded server or your
>> twisted client?
>>
>> The quick answer to your question is: no, this behavior is not expected.
>>  Sockets are sockets.  Twisted should work fine talking to sockets in
>> threads, sockets in other programming languages, other operating systems,
>> etc.  Of course, that's just what's *supposed* to happen: there's a bug
>> here, and with the information I have now, I can't say whether it's in your
>> threaded code, your Twisted code, Twisted, or even Python.
>>
>> Good luck?
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100117/8d7e08a7/attachment-0001.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: application/octet-stream
Size: 925 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100117/8d7e08a7/attachment-0002.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: tclient.py
Type: application/octet-stream
Size: 754 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100117/8d7e08a7/attachment-0003.obj 

From glyph at twistedmatrix.com  Mon Jan 18 00:55:53 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jan 2010 00:55:53 -0500
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <3db160681001171945y1fb937eaua9bb78845ae6de43@mail.gmail.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
	<A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
	<3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>
	<3db160681001171945y1fb937eaua9bb78845ae6de43@mail.gmail.com>
Message-ID: <60CC8333-817A-41A2-8EB5-FA38CFFD4485@twistedmatrix.com>


On Jan 17, 2010, at 10:45 PM, Daniel Griffin wrote:

> Here are two tiny apps. They run perfectly on OSX and error like this on windows:
> 
> Log conenction  [Failure instance: Traceback (failure with no frames): <class 't
> wisted.internet.error.ConnectionLost' Connection to the other side was lost in
>  a non-clean fashion.
> ] Log conenction  [Failure instance: Traceback (failure with no frames): <class
> 'twisted.internet.error.ConnectionLost' Connection to the other side was lost
> in a non-clean fashion.

Ah.  This is very simple, and luckily has nothing to do with threads.

The simplest explanation is that these errors are showing up because you are printing them out :).  If you stop printing them out, they won't show up.

More specifically: You generally shouldn't worry about "clean" vs. "non-clean" connection shutdown.  There are lots of things that can cause "clean" shutdowns to still lose data, and there are many cases where a "non-clean" shutdown is actually fine.  Your application protocol should be framing messages such that you can tell which ones have been responded to.

That said, what's going on here is pretty simple.  A "clean" shutdown is, broadly speaking, when both ends of the TCP connection agree on where the stream of bytes begins and ends.  I send you some data, you read all of it, I shut down the connection, you shut down the connection.  If I send you some data, and you *don't* read all of it, then I shut the connection down, the result will be a "non-clean" shutdown, because there is still data outstanding when the connection dies.

In this case, you are calling recv(5) in your server, but your client is writing "RESPOND" to its transport.  As you can see,

   >>> len("RESPOND")
   7

"RESPOND" is more than 5 bytes.

If you were using Twisted for your server, this wouldn't happen because Twisted always reads all the bytes that are available and delivers them to dataReceived.



From dgriff1 at gmail.com  Mon Jan 18 01:29:15 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Mon, 18 Jan 2010 00:29:15 -0600
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <60CC8333-817A-41A2-8EB5-FA38CFFD4485@twistedmatrix.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
	<A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
	<3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>
	<3db160681001171945y1fb937eaua9bb78845ae6de43@mail.gmail.com>
	<60CC8333-817A-41A2-8EB5-FA38CFFD4485@twistedmatrix.com>
Message-ID: <3db160681001172229t3643077qaec97831f5657a5d@mail.gmail.com>

Awesome, in my actual code I already implemented something to see if I was
"done" with the socket conversation. I was just getting really worried about
the "non-clean" messages. Your explanation makes perfect sense. Thanks for
the help.

Dan

On Sun, Jan 17, 2010 at 11:55 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

>
> On Jan 17, 2010, at 10:45 PM, Daniel Griffin wrote:
>
> > Here are two tiny apps. They run perfectly on OSX and error like this on
> windows:
> >
> > Log conenction  [Failure instance: Traceback (failure with no frames):
> <class 't
> > wisted.internet.error.ConnectionLost' Connection to the other side was
> lost in
> >  a non-clean fashion.
> > ] Log conenction  [Failure instance: Traceback (failure with no frames):
> <class
> > 'twisted.internet.error.ConnectionLost' Connection to the other side was
> lost
> > in a non-clean fashion.
>
> Ah.  This is very simple, and luckily has nothing to do with threads.
>
> The simplest explanation is that these errors are showing up because you
> are printing them out :).  If you stop printing them out, they won't show
> up.
>
> More specifically: You generally shouldn't worry about "clean" vs.
> "non-clean" connection shutdown.  There are lots of things that can cause
> "clean" shutdowns to still lose data, and there are many cases where a
> "non-clean" shutdown is actually fine.  Your application protocol should be
> framing messages such that you can tell which ones have been responded to.
>
> That said, what's going on here is pretty simple.  A "clean" shutdown is,
> broadly speaking, when both ends of the TCP connection agree on where the
> stream of bytes begins and ends.  I send you some data, you read all of it,
> I shut down the connection, you shut down the connection.  If I send you
> some data, and you *don't* read all of it, then I shut the connection down,
> the result will be a "non-clean" shutdown, because there is still data
> outstanding when the connection dies.
>
> In this case, you are calling recv(5) in your server, but your client is
> writing "RESPOND" to its transport.  As you can see,
>
>   >>> len("RESPOND")
>   7
>
> "RESPOND" is more than 5 bytes.
>
> If you were using Twisted for your server, this wouldn't happen because
> Twisted always reads all the bytes that are available and delivers them to
> dataReceived.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100118/2ffa2ef3/attachment.htm 

From clawsicus at gmail.com  Mon Jan 18 09:32:05 2010
From: clawsicus at gmail.com (Chris Laws)
Date: Tue, 19 Jan 2010 01:02:05 +1030
Subject: [Twisted-Python] deferring result to PB a callRemote method
Message-ID: <3ff1f41d1001180632v3154b996q46c93704fec5ed9c@mail.gmail.com>

I am writing a tool for work that will run various software development aids
such as message capturing and diagnostic control of system processes.
My current design strategy is to implement these aids as plugins (not
twisted plugins) to a generic plugin runner rather than stand alone
applications.
The plugins are spawned as separate processes by the plugin-runner and
communicate using Perspective Broker during the plugin installation and
shutdown phases.

Some plugins may take a while to shutdown as they need to close
sockets, finalize files, move large files, etc.
I would like to instruct the plugin to shutdown and be told when it is
finally ready to be shut down.

To date all my callRemote methods have effectively returned immediately. For
example:

def remote_get_name(self):
    return self.name

My question to the list was going to be: Is there a pattern/example I could
follow where I could call plugin.callRemote("shutdown") on a plugin and not
return a result to the plugin-runner until the plugin has completed all
it's, potentially, long running activities? However, while I was trying to
write a small code snippet that would demonstrate what I was wanting, I
think I got it working.
I think the simple answer to my question is to just return a deferred as the
result to the callRemote("shutdown") method and trigger it as normal.
Google is my friend but I could not find examples of this usage. Is there
any references to this usage in the twisted docs?

Below (and attached in case the formatting goes screwy) is a short example
which emulates a long running shutdown activity performed by the plugin
prior to shutdown.
It seems to delay the processing of the callRemote("shutdown") result until
the plugin has completed it's long running activity.
I have omitted the separate process stuff as it didn't seem relevant for
this snippet.

Is the following code snippet the standard/normal way to defer the return
result of a callRemote method call?
If this is the normal way, how does triggering the deferred on the plugin
(client) side also trigger the same/copy deferred returned to the
plugin-runner (server)?
Is this PB magic, somehow managing deferreds across the PB interface?

Regards,
Chris



from twisted.internet import reactor, defer
from twisted.spread import pb
import datetime

class PluginClient(pb.Referenceable):
    """ Plugin client interface exposed to PluginServer's """

    def __init__(self, shutdownCallback):
        self.shutdownHandler = shutdownCallback

    def remote_shutdown(self):
        """ Instruct Plugin to shutdown """
        print "plugin instructed to shutdown"
        d = defer.Deferred()
        self.shutdownHandler(d)
        return d

class PluginServer(pb.Root):
    """ Plugin server interface exposed to PluginClient's """

    def remote_set_client_perspective(self, pluginRef):
        print "plugin-runner got client reference"
        reactor.callLater(1.0, self.shutdown_plugin, pluginRef)

    def shutdown_plugin(self, pluginRef):

        def pluginShutdownCompleted(result, startTime):
            endTime = datetime.datetime.now()
            print "Plugin shutdown took %s to complete." % (endTime -
startTime)
            return result

        print "plugin-runner asking plugin to shutdown"
        d = pluginRef.callRemote("shutdown")
        d.addCallback(pluginShutdownCompleted, datetime.datetime.now())
        d.addCallback(self.shutdown)

    def shutdown(self, _):
        reactor.stop()


def startPluginServer(port):
    """ Start a plugin communications server """
    print "starting server"
    reactor.listenTCP(port=port,
                      factory=pb.PBServerFactory(PluginServer()),
                      interface='localhost')


def startPluginClient(port, shutdownHandler):
    """ Start a plugin communications client """

    def gotServerPerspective(serverPerspective, pluginPerspective):
        """ Give the plugin-runner this client's perspective """
        serverPerspective.callRemote("set_client_perspective",
pluginPerspective)
        return serverPerspective

    print "starting plugin"
    client = PluginClient(shutdownHandler)
    factory = pb.PBClientFactory()
    reactor.connectTCP(host='localhost', port=port, factory=factory)
    return factory.getRootObject().addCallback(gotServerPerspective, client)

if __name__ == "__main__":
    port = 42155

    def longRunningAction(d, countDown=10):
        """ Emulate long running shutdown activities """
        print "shuting down in %i seconds" % countDown
        if countDown == 0:
            d.callback(True)
        else:
            countDown -= 1
            reactor.callLater(1, longRunningAction, d, countDown)


    # start plugin-runner
    reactor.callWhenRunning(startPluginServer, port)
    # start plugin
    reactor.callLater(2.0, startPluginClient, port, longRunningAction)
    reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100119/a35c15fe/attachment-0001.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test_shutdown.py
Type: application/octet-stream
Size: 2856 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100119/a35c15fe/attachment-0001.obj 

From abierbaum at gmail.com  Mon Jan 18 16:06:36 2010
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 18 Jan 2010 15:06:36 -0600
Subject: [Twisted-Python] Timeout with pb callRemote
Message-ID: <bea9869d1001181306t1f70833ap763f62cca4b5485e@mail.gmail.com>

I just tracked down a bug in one of our servers that uses twisted PB.
The long and short of it was that the server made remote calls to
clients that connected in and in some cases those clients would fall
off the network (disconnected network cable, etc) but the server would
not detect this.

I tracked this down to TCP timeouts not telling twisted rapidly enough
that the clients were offline.  What I was going to use to solve this
was to put a timeout on the remoteCall() by calling setTimeout on the
deferred returned when making the call.  Then if the deferred does not
fire soon enough I could treat this as a dead client detection and
clean up it's resources.

The problem is that it looks like Deferred.setTimeout is deprecated.
(see: http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/defer.py#L350)

Is there some other suitable way to set a timeout on a remoteCall when using PB?

-Allen


From db3l.net at gmail.com  Mon Jan 18 16:54:34 2010
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 18 Jan 2010 16:54:34 -0500
Subject: [Twisted-Python] Timeout with pb callRemote
References: <bea9869d1001181306t1f70833ap763f62cca4b5485e@mail.gmail.com>
Message-ID: <m2aawb3wpx.fsf@valheru.db3l.homeip.net>

Allen Bierbaum <abierbaum at gmail.com> writes:

> I just tracked down a bug in one of our servers that uses twisted PB.
> The long and short of it was that the server made remote calls to
> clients that connected in and in some cases those clients would fall
> off the network (disconnected network cable, etc) but the server would
> not detect this.

Right - by default (sans enabling keepalives at the TCP level), TCP
can only detect a problem when it is attempting to transmit data, or
when it receives data from a system that has been restarted.  That's
by design, since it can't tell if the idle time is expected or not.

So if your request to the client makes it through but the connection
breaks before the server needs to send any further data (such as
waiting for a response) the server - waiting to receive - can
essentially remain in that state forever.

Even with keepalives turned on at the TCP level, the total time to
declare a failure with default timers is often in the 2+ hour range.

> Is there some other suitable way to set a timeout on a remoteCall
> when using PB?

I'd probably suggest implementing some connection monitoring mechanism
in general for each client<->server connection, rather than trying to
time out individual calls.  The advantage to this is that it covers all
sorts of failures in either direction and let's both sides fail any
pending operations gracefully.

What we did in one of our larger PB systems was have our client
object, after connecting, set up a periodic ping request to the
server.  Failure of that request (in addition to a network failure of
other requestss) would cause the client to disconnect (after
generating an internal signal) and then fall into an automatic
reconnection process.  Since the ping is transmitting data over the
session, failures will be detected much more rapidly (though still not
instantaneously) when the TCP retransmit timers fail to deliver the
data.  We also had separate signaling and reconnect logic that allowed
the client to reattach all of its existing remote object handles if it
reconnected to a server that hadn't restarted (e.g., just a network
outage), but that's more complicated and not suitable for all types
of remote object references.
 
While we didn't have requests originating from the server, you could
have a mirror approach running on the server for each client, or you
could just have a watchdog timer running on the server that
disconnects a client if it hasn't heard a ping request from it in a
given amount of time.

On either side, explicitly disconnecting the connection will also
cause any pending deferreds for PB requests to fail and trigger their
errbacks.

If you really wanted to implement a timeout for a specific request,
you could still use a watchdog timer - start a callLater with the
appropriate timeout, save the response object, and cancel it in the
callback chain for the response once it is received.

What you should do if the callLater does fire is less clear.
Personally I'd probably do something internal so any eventual response
to the pending deferred was ignored.  You probably don't want to
actually fire it yourself, since PB still references it and in theory
could still get a response about it over the stream which would try to
double-fire the deferred.  That's part of why setTimeout on the
deferred itself can be a bad idea - someone else probably also
references that deferred and won't know it has already fired if the
timeout expires.

Disconnecting the client would work, as similar to the above keepalive
approach, it would fire the errback on all pending deferreds over that
session.

-- David




From andrew at bemusement.org  Mon Jan 18 20:19:01 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 19 Jan 2010 12:19:01 +1100
Subject: [Twisted-Python] deferring result to PB a callRemote method
In-Reply-To: <3ff1f41d1001180632v3154b996q46c93704fec5ed9c@mail.gmail.com>
References: <3ff1f41d1001180632v3154b996q46c93704fec5ed9c@mail.gmail.com>
Message-ID: <20100119011901.GF12274@steerpike.home.puzzling.org>

Chris Laws wrote:
[...]
>    I think the simple answer to my question is to just return a deferred as
>    the result to the callRemote("shutdown")?method and trigger it as normal.

Yes, that's right.  You can return Deferreds from your PB server's methods.  So
long as the eventual result is something serializable over PB (e.g. a
Referenceable or a Copyable), it will work.

>    Google is my friend but I could not find examples of this usage. Is there
>    any references to this usage in the twisted docs?

Huh, surprisingly not in the primary PB docs.  The Twisted ?finger? tutorial
does do this, though, if you read it carefully enough.  See finger21.tac in
<http://twistedmatrix.com/documents/current/core/howto/tutorial/pb.html>; the
remote_* methods of PerspectiveFingerFromService delegate to self.service, which
is FingerService, which returns Deferreds from its getUser and getUsers methods.

[...]
>    Is the following code snippet the standard/normal way to defer the return
>    result of a callRemote method call?

It's a bit odd.  e.g. You do this:

    def remote_shutdown(self):
        """ Instruct Plugin to shutdown """
        print "plugin instructed to shutdown"
        d = defer.Deferred()
        self.shutdownHandler(d)
        return d

This can work, so long as on what self.shutdownHandler calls d.callback/errback,
as yours does.  But typically it would be written as:

    def remote_shutdown(self):
        """ Instruct Plugin to shutdown """
        print "plugin instructed to shutdown"
        return self.shutdownHandler()

i.e. typically the code that is calling d.callback is also responsible for
creating d.

>    If this is the normal way, how does triggering the deferred on the plugin
>    (client) side also trigger the same/copy deferred returned to the
>    plugin-runner (server)?
>    Is this PB magic, somehow managing deferreds across the PB interface?

PB doesn't actually send the Deferred over the network, but it does manage the
deferred for you.  It works because when you return a Deferred, PB on the server
will add a callback to it that will send that eventual result over the network,
rather than sending one immediately.

On the client side, as the PB docs point out: ?because of the delay involved
[waiting for a network connection], callRemote() returns a Deferred.?  (From
<http://twistedmatrix.com/documents/current/core/howto/pb-usage.html>).

The client doesn't know or care if the server used a Deferred or not, the bytes
on the wire are the same.  (And a delay caused by the server waiting for a
Deferred to fire could just as easily be a delay caused by network congestion.)

I wouldn't describe it as ?magic? so much as ?a really convenient API?.

-Andrew.



From gabriel.rossetti at arimaz.com  Tue Jan 19 04:15:19 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Tue, 19 Jan 2010 10:15:19 +0100
Subject: [Twisted-Python] Proxy support through urllib2?
In-Reply-To: <20100111141831.1898.925027669.divmod.xquotient.23@localhost.localdomain>
References: <4B4B288D.6020308@arimaz.com>
	<20100111141831.1898.925027669.divmod.xquotient.23@localhost.localdomain>
Message-ID: <4B557827.4050905@arimaz.com>

exarkun at twistedmatrix.com wrote:
> On 01:33 pm, gabriel.rossetti at arimaz.com wrote:
>   
>> Hello everyone,
>>
>> Is it possible to use a proxy with Twisted? I can do this with urllib2 
>> :
>>
>> proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
>> opener = urllib2.build_opener(proxy)
>> urllib2.install_opener(opener)
>>
>> will that suffice? I'd need SOCKSv5 and HTTP proxy support.
>>     
>
> This is one of the features the new HTTP client is intended to make 
> easier to implement.  The very short twisted.web.client.Agent is 
> responsible for all the things which differ when connecting to a proxy 
> instead of doing the usual thing.  At some point, twisted.web.client 
> should offer something like Agent which provides the proxy 
> functionality.  Do you want to take a stab at implementing it?
>
> Jean-Paul
>   
Ok, thanks for the info. I can have a try, right now we use Twisted 
8.1.0 though, I have to get something working with that version first 
and then whe we've tested our app with version 9.0 I'll try.

Gabriel




From gabriel.rossetti at arimaz.com  Tue Jan 19 04:17:41 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Tue, 19 Jan 2010 10:17:41 +0100
Subject: [Twisted-Python] Proxy support through urllib2?
In-Reply-To: <562bcc11001110840p39d3454cv6e6e63cc9fbd04be@mail.gmail.com>
References: <4B4B288D.6020308@arimaz.com>
	<562bcc11001110840p39d3454cv6e6e63cc9fbd04be@mail.gmail.com>
Message-ID: <4B5578B5.2000705@arimaz.com>

Kevin Horn wrote:
> On Mon, Jan 11, 2010 at 7:33 AM, Gabriel Rossetti 
> <gabriel.rossetti at arimaz.com <mailto:gabriel.rossetti at arimaz.com>> wrote:
>
>     Hello everyone,
>
>     Is it possible to use a proxy with Twisted? I can do this with
>     urllib2 :
>
>     proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
>     opener = urllib2.build_opener(proxy)
>     urllib2.install_opener(opener)
>
>     will that suffice? I'd need SOCKSv5 and HTTP proxy support.
>
>     Thanks,
>     Gabriel
>
>
> When you say you want to "use a proxy with Twisted", do you mean that 
> you want Your Twisted applicatino to provide a proxy to other 
> applications, or do you mean that you want your Twisted application to 
> use a (separate) proxy?
>
> Kevin Horn
>   
I mean have the Twisted app (client) connect to a server outside the 
network by going through an http proxy server, like it's often the caser 
in company networks.

Gabriel


From kevin.horn at gmail.com  Tue Jan 19 11:15:15 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 19 Jan 2010 10:15:15 -0600
Subject: [Twisted-Python] deferring result to PB a callRemote method
In-Reply-To: <20100119011901.GF12274@steerpike.home.puzzling.org>
References: <3ff1f41d1001180632v3154b996q46c93704fec5ed9c@mail.gmail.com>
	<20100119011901.GF12274@steerpike.home.puzzling.org>
Message-ID: <562bcc11001190815h4f4c195ep9a5b4cb6c4847d26@mail.gmail.com>

On Mon, Jan 18, 2010 at 7:19 PM, Andrew Bennetts <andrew at bemusement.org>wrote:

> >    Google is my friend but I could not find examples of this usage. Is
> there
> >    any references to this usage in the twisted docs?
>
>
> Huh, surprisingly not in the primary PB docs.  The Twisted ?finger?
> tutorial
> does do this, though, if you read it carefully enough.  See finger21.tac in
> <http://twistedmatrix.com/documents/current/core/howto/tutorial/pb.html>;
> the
> remote_* methods of PerspectiveFingerFromService delegate to self.service,
> which
> is FingerService, which returns Deferreds from its getUser and getUsers
> methods.
>
>
>
It sems like this should be discussed in the PB docs.  Maybe someone should
file a ticket..

(hint, hint)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100119/22ae2d62/attachment.htm 

From warner at lothar.com  Tue Jan 19 14:19:03 2010
From: warner at lothar.com (Brian Warner)
Date: Tue, 19 Jan 2010 11:19:03 -0800
Subject: [Twisted-Python] [ANN] Foolscap-0.5.0 released
Message-ID: <4B5605A7.3050803@lothar.com>


I'm pleased to announce the release of Foolscap-0.5.0 . This is a fairly
minor release: the biggest difference from the previous 0.4.2 is a
change to the preferred main entry point: application code should use
e.g. "from foolscap.api import Tub" instead of "from foolscap import
Tub". A DeprecationWarning will be raised for code that continues to
import from the main "foolscap" module, which will become an error in a
future foolscap-0.6.0. (this was done to avoid annoying circular
dependencies within foolscap itself)

In addition, many tools received minor improvements, and the "sets is
deprecated in python2.6" warning was fixed.

 Bugs, docs, discussion: http://foolscap.lothar.com/trac
 Download:
  PyPI: http://pypi.python.org/pypi/foolscap/0.5.0
  home page: http://foolscap.lothar.com/releases/foolscap-0.5.0.tar.gz
  Releases are signed with my GPG key 0x1514A7BD, recently renewed
  (expiration date extended to jan-2011, please re-download from
  keyservers)

Foolscap is a Twisted-friendly remote object protocol, a descendant of
Perspective Broker, with improved security properties, third-party
references, adaptable serialization, remote logging, and other useful
features. Please visit http://foolscap.lothar.com/trac for more details.


have a importable day,
 -Brian




* Release 0.5.0 (18 Jan 2010)

** Compatibility

The wire format remains the same as in earlier releases. The preferred
API import path has changed, see below.

** API changes: import statements, foolscap.api

To reduce circular dependencies in Foolscap's internal code, a new
"foolscap.api" module has been created. Applications should use:

 from foolscap.api import Tub

instead of e.g. "from foolscap import Tub". Deprecation warnings will be
raised for code which imports symbols directly from the "foolscap"
module. These warnings will turn into errors in the 0.6.0 release. (see
ticket #122 for details)

The nearly-useless getRemoteURL_TCP() function was removed.

** setup.py is more windows-friendly

The main setup.py script has been modified to use setuptools
"entry_points=" on windows, which should help create runnable
executables of "flogtool" and "flappserver", with proper extensions.
Entry-point scripts are not used on non-windows platforms, but
setuptools still creates fairly opaque executable scripts (which makes
it hard to figure out that e.g. /usr/bin/flogtool wants to import the
"foolscap" module). To get non-opaque scripts, install with "setup.py
install --single-version-externally-managed". (#109)

** tool changes

*** flappserver

"flappserver create" now records the umask value from its environment,
and uses it later when the server is started (since normally twistd
resets the umask to a very restrictive value). A new --umask argument
was added to override this. The server's base directory is chmod go-rwx
to protect the private key from other users.

The "flappserver start" command uses twisted.scripts.twistd.run(),
instead of spawning an intermediate "twistd" process with os.execvp().
This should make things work better in environments where Twisted is not
fully installed (especially on windows) and correctly launching "twistd"
is non-trivial, such as when some other package is installing it as a
setuptools dependency.

"flappclient upload-file ~/foo.txt" will use os.path.expanduser() on the
filename, even if your shell does not. This should make it easier to use
from e.g. buildbot upload commands. (#134)

*** logging

The "flogtool dump" and "flogtool web-viewer" commands now have a
--timestamps argument, which controls how timestamps are expressed (UTC
vs localtime, ISO-9601, etc). The web-viewer HTML pages now have more
timestamp and sorting options, and hyperlinks to select each. (#100)

"flogtool web-viewer --open" will tell your local web browser to open to
the correct page, using the Python stdlib "webbrowser" module.

"flogtool dump" now emits a better error when told to open a missing
file.

*** examples

Examples of running the Git version-control-system over a
flappserver-based secure connection have been added to doc/examples/ .
This enables remote-update authority to be expressed as a FURL with no
other shell privileges. To accomplish the same with ssh
"authorized_keys" command restrictions is annoying and error-prone. See
doc/examples/git-proxy-flappclient for setup instructions. This will
probably be simplified to a single "git-furl" executable in a later
release.

The xfer-client/xfer-server/command-client examples have been removed,
obsoleted by the flappserver/flappclient tools.

** Other changes

The DeprecationWarning for the obsolete "sets" module is now removed on
python2.6 (#124)

When a getReference() call fails because the remote Tub does not
recognize the FURL, it now only emits the first two letters of the
secret swissnum in the exception, instead of the whole thing. This
reduces information leakage into e.g. stderr logs from a "flappclient
--furlfile=X upload-file" command.

DeadReferenceError now includes the remote tubid, interfacename, and
remote method name of the message that was being sent when the lost
connection was discovered, so log.err() calls which record a
DeadReferenceError should include this information. This may make it
easier to locate the code that provoked the error.


From kevin.horn at gmail.com  Tue Jan 19 16:33:57 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 19 Jan 2010 15:33:57 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
Message-ID: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>

This time I think I'm gonna skip saying how I haven't gotten as much done as
I would like...oh darn.

Anyways, time for another gripping installment...

Progress:
  - tables are now handled (mostly) properly, thanks to Zeth at
http://commandline.org.uk/
  - blockquote tags handled
  - much improved whitespace/indentation handling
  - some nicer styling thanks to Michael Thompson
  - I've managed to convert the docs for the 3 Divmod projects with Lore
    docs, though I've yet to put them up anywhere.


Oustanding issues:
  - two files in the Lore source are not yet being converted, but it looks
like
    one of them is about to be removed
    (http://twistedmatrix.com/trac/ticket/4188), and it's not really a
    Lore doc anyways.
  - due to ReST's insistence on "inline markup" being surrounded by
    whitespace or certain special characters, there are a lot of places
where
    such inline markup gets jacked up, by not including whitespace in front
of
    it.  If I put whitespace in front of everything though, my indentation
    handling gets jacked up and about 400+ Sphinx build warning result.
    Not sure if I should spend the time to make whitespace handling really
    smart or if these should just be fixed manually post-conversion.
  - cite tags still need handling...not hard, just haven't decided the best
    way to do it yet.
  - Themeing/styling: still mostly a TODO, though new styling looks a lot
    better than the default to my eyes.  I'm starting to think that
    eventually we might want to have 2 themes/styles...one to match the
    trac-based website, and one for bundled docs (docs tarballs, CHM files,
etc.)
  - auto-generated toctree directives are currently generated in
alphabetical
    order, which makes the "prev" and "next" links mostly make no sense
  - some of the Lore source files have nested "inline markup", which ReST
    disallows.  This can be handled by:
      - fix the markup in the Lore source
      - figure out some kind of supersmart auto-conversion for every
possible
        combination of nesting
      - just handle the outside level of nesting (what I'm doing now) and
        fix any problems manually post-conversion.
  - xhtml entities are not currently resolved...mostly because it makes
    the build take a LOOOONG time.  They can be though.  This shouldn't
    be a problem.
  - xhtml comments still need to be handled
  - <code class="API"> tags need something better..right now they are just
    the same as <code> tags...Sphinx has an upcoming feature coming in 1.0
    that would make this nice and maintainable in the long run, but I don't
    know that I want to wait for it.  I may try to "backport" the extension
    or just come up with a separate solution.
  - some of the generated links need fixing
    (e.g. links to directories, .py files)

In other news:

  - Foolscap 0.5 was released today, which made me wonder what they use for
    docs...and it's Lore.  I brought this up on IRC, and it was suggested
    by many that Lore should stick around even after the conversion
according
    to the standard Twisted compatibility policy, to give anyone who still
    uses it time to migrate.  This sounds like a fine idea to me.
    Any thoughts?


As always, the lore2sphinx code is here:
http://bitbucket.org/khorn/lore2sphinx/

And the sample output of the conversion process is here:
http://twistedsphinx.funsize.net/

Cheers,

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100119/811174b1/attachment.htm 

From clawsicus at gmail.com  Tue Jan 19 19:58:44 2010
From: clawsicus at gmail.com (Chris Laws)
Date: Wed, 20 Jan 2010 11:28:44 +1030
Subject: [Twisted-Python] deferring result to PB a callRemote method
Message-ID: <3ff1f41d1001191658p62177a3m151f7449b0564ed0@mail.gmail.com>

> >* >    Google is my friend but I could not find examples of this usage.
Is
*> >* there
*> >* >    any references to this usage in the twisted docs?
*> >*
*> >*
*> >* Huh, surprisingly not in the primary PB docs.  The Twisted ?finger?
*> >* tutorial
*> >* does do this, though, if you read it carefully enough.  See
finger21.tac in
*> >* <
http://twistedmatrix.com/documents/current/core/howto/tutorial/pb.html>;
*> >* the
*> >* remote_* methods of PerspectiveFingerFromService delegate to
self.service,
*> >* which
*> >* is FingerService, which returns Deferreds from its getUser and
getUsers
*> >* methods.
*> >*
*> >*
*> >*
*> It sems like this should be discussed in the PB docs.  Maybe someone
should
> file a ticket..
>
> (hint, hint)

Done, #4228.

Thanks for the informative response to my question.

Regards,
Chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100120/fde5d26c/attachment.htm 

From petshmidt at googlemail.com  Wed Jan 20 07:35:34 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 20 Jan 2010 13:35:34 +0100
Subject: [Twisted-Python] Log rotates not as expected
Message-ID: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>

Hi,

in code below I try to rotate log files if they reach 5000000 limit,
but this happens only to every 5 files, ls -althr:

-rw-r--r-- 1 root root 977K 2010-01-19 19:03 /var/log/my.log.12
-rw-r--r-- 1 root root 977K 2010-01-19 19:55 /var/log/my.log.10
-rw-r--r-- 1 root root 977K 2010-01-19 20:41 /var/log/my.log.9
-rw-r--r-- 1 root root 977K 2010-01-19 21:30 /var/log/my.log.8
-rw-r--r-- 1 root root 977K 2010-01-19 22:46 /var/log/my.log.7
-rw-r--r-- 1 root root 4.8M 2010-01-20 00:19 /var/log/my.log.11
-rw-r--r-- 1 root root 977K 2010-01-20 00:19 /var/log/my.log.6
-rw-r--r-- 1 root root 977K 2010-01-20 09:17 /var/log/my.log.4
-rw-r--r-- 1 root root 977K 2010-01-20 10:45 /var/log/my.log.3
-rw-r--r-- 1 root root 977K 2010-01-20 12:04 /var/log/my.log.2
-rw-r--r-- 1 root root 977K 2010-01-20 12:59 /var/log/my.log.1
-rw-r--r-- 1 root root 4.2M 2010-01-20 13:26 /var/log/my.log.5
-rw-r--r-- 1 root root 301K 2010-01-20 13:26 /var/log/my.log


it writes simultaneously to both my.log.5 and my.log. It is not big
problem, but in this way I have only recent files, because they grows
quickly

Pet


from twisted.python import log
from twisted.python import logfile
from twisted.application import service

class MyLog(log.FileLogObserver):

    def emit(self, logEntryDict):
        log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
        log.FileLogObserver.emit(self, logEntryDict)


class MyLogService(service.Service):

    def __init__(self, logName, logDir):
        self.logName = logName
        self.logDir = logDir
        # near 5mb
        self.maxLogSize = 5000000

    def startService(self):
        # logfile is a file-like object that supports rotation
        self.logFile = logfile.LogFile(
            self.logName, self.logDir, rotateLength=self.maxLogSize,
maxRotatedFiles=50)
        #self.logFile.rotate() # force rotation each time restarted
        self.loclog = MyLog(self.logFile)
        self.loclog.start()

    def stopService(self):
        self.loclog.stop()
        self.logFile.close()
        del(self.logFile)


From theiklabs at gmail.com  Wed Jan 20 09:58:33 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Wed, 20 Jan 2010 09:58:33 -0500
Subject: [Twisted-Python] WSGI Question
Message-ID: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>

I deploy code. Then I modify the code on my file system. The code does not
automatically change on the server. It does this on the django dev server.
How can I make this happen?

I start the server as follows

twistd -ny server.py

# Django and static file server:
root_resource = get_root_resource()
root_resource.putChild("static", static.File("static"))
http_factory = server.Site(root_resource, logPath="http.log")
internet.TCPServer(STATIC_PORT, http_factory,
interface=INTERFACE).setServiceParent(serviceCollection)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100120/e600aba8/attachment.htm 

From phil at bubblehouse.org  Wed Jan 20 10:37:48 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 20 Jan 2010 10:37:48 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
Message-ID: <13FBB5FB-5EF7-4DC3-8123-4EF40E9CF565@bubblehouse.org>

On Jan 20, 2010, at 9:58 AM, adamjamesdrew same wrote:
> I deploy code. Then I modify the code on my file system. The code does not automatically change on the server. It does this on the django dev server. How can I make this happen?

This is a Django-specific feature that doesn't exist in Twisted.

It wouldn't be too hard to write, but it's the kind of feature that tends to be useful more to web developers than authors of other kinds of applications.

As it is, automatic code reloading is tricky to achieve in Python, since reload(modulename) only reloads modulename in the current scope, and must be reloaded everywhere that module is used.

It looks to me like Django's dev server gets around this by forking a child process before loading any external modules, and killing that child any time a reload is needed. Then the child is re-spawned, and since the parent has yet to load any external modules, any attempt to do so in the child causes the modules to be loaded for the first time (for that child).

Pretty clever, IMO...

-phil

From landreville at deadtreepages.com  Wed Jan 20 10:40:34 2010
From: landreville at deadtreepages.com (Landreville)
Date: Wed, 20 Jan 2010 10:40:34 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
Message-ID: <9d748c781001200740rdb86638w149a8860c8092bc7@mail.gmail.com>

On Wed, Jan 20, 2010 at 9:58 AM, adamjamesdrew same <theiklabs at gmail.com> wrote:
> I deploy code. Then I modify the code on my file system. The code does not
> automatically change on the server. It does this on the django dev server.
> How can I make this happen?
>
> I start the server as follows
>
> twistd -ny server.py
>
> # Django and static file server:
> root_resource = get_root_resource()
> root_resource.putChild("static", static.File("static"))
> http_factory = server.Site(root_resource, logPath="http.log")
> internet.TCPServer(STATIC_PORT, http_factory,
> interface=INTERFACE).setServiceParent(serviceCollection)
>


The twisted modules are only loaded once because it asynchronous, so
the twisted server is persistent in memory. You only load your twisted
app once, whereas in django the modules are reloaded on every page
refresh on the dev server.

There are some nifty live reloading things you can do. One of them is
to just reload the module (i think its a builtin method called reload)
but only new objects will use the reloaded module. There is a module
in twisted.python somewhere that does some live reloading magic to try
and replace all the references with the newly loaded module.

It's actually fairly complicated and if your in a development
environment it is probably easier to reload twisted than add all the
reloading stuff to your classes. I haven't used the twisted reloading
stuff though. In my case I tore down some of the objects that were
created with the classes in the module, reloaded the associated
modules, then rebuilt those objects. And if you're doing that to your
whole project, it would be about the same as just restarting the
server.

Someone from the twisted project can probably give you better
information about reloading changes.


From ssteinerx at gmail.com  Wed Jan 20 11:04:26 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Wed, 20 Jan 2010 11:04:26 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <13FBB5FB-5EF7-4DC3-8123-4EF40E9CF565@bubblehouse.org>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<13FBB5FB-5EF7-4DC3-8123-4EF40E9CF565@bubblehouse.org>
Message-ID: <C47B1644-6EA1-479F-986E-8D1037254647@gmail.com>


On Jan 20, 2010, at 10:37 AM, Phil Christensen wrote:

> On Jan 20, 2010, at 9:58 AM, adamjamesdrew same wrote:
>> I deploy code. Then I modify the code on my file system. The code does not automatically change on the server. It does this on the django dev server. How can I make this happen?
> 
> This is a Django-specific feature that doesn't exist in Twisted.
> 
> It wouldn't be too hard to write, but it's the kind of feature that tends to be useful more to web developers than authors of other kinds of applications.
> 
> As it is, automatic code reloading is tricky to achieve in Python, since reload(modulename) only reloads modulename in the current scope, and must be reloaded everywhere that module is used.

There is/was a Twisted ticket about this and a quick sketch of how it might be done for Twisted by using the Django module itself by one of the Twisted devs.  

I gave it a brief shot, but couldn't get it working in the time I had to spend on it.  

Sure would be handy, though...

S



From theiklabs at gmail.com  Wed Jan 20 13:17:58 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Wed, 20 Jan 2010 13:17:58 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <C47B1644-6EA1-479F-986E-8D1037254647@gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<13FBB5FB-5EF7-4DC3-8123-4EF40E9CF565@bubblehouse.org>
	<C47B1644-6EA1-479F-986E-8D1037254647@gmail.com>
Message-ID: <2a30f70a1001201017o23d8612cw66e96ff62276c66a@mail.gmail.com>

Thanks for the help.

On Wed, Jan 20, 2010 at 11:04 AM, ssteinerX at gmail.com
<ssteinerx at gmail.com>wrote:

>
> On Jan 20, 2010, at 10:37 AM, Phil Christensen wrote:
>
> > On Jan 20, 2010, at 9:58 AM, adamjamesdrew same wrote:
> >> I deploy code. Then I modify the code on my file system. The code does
> not automatically change on the server. It does this on the django dev
> server. How can I make this happen?
> >
> > This is a Django-specific feature that doesn't exist in Twisted.
> >
> > It wouldn't be too hard to write, but it's the kind of feature that tends
> to be useful more to web developers than authors of other kinds of
> applications.
> >
> > As it is, automatic code reloading is tricky to achieve in Python, since
> reload(modulename) only reloads modulename in the current scope, and must be
> reloaded everywhere that module is used.
>
> There is/was a Twisted ticket about this and a quick sketch of how it might
> be done for Twisted by using the Django module itself by one of the Twisted
> devs.
>
> I gave it a brief shot, but couldn't get it working in the time I had to
> spend on it.
>
> Sure would be handy, though...
>
> S
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100120/db870bbd/attachment.htm 

From theiklabs at gmail.com  Wed Jan 20 13:19:34 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Wed, 20 Jan 2010 13:19:34 -0500
Subject: [Twisted-Python] WSGI Production ready
Message-ID: <2a30f70a1001201019i55011ba0ne40c7dd81f05aa78@mail.gmail.com>

Is twisted WSGI production ready as compared to apache and mod_wsgi

For a simple server with 4 cores would you simple start 4 instances and load
balance between them?
How would you recommend a production deploy of twisted wsgi?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100120/f4b7d510/attachment.htm 

From phil at bubblehouse.org  Wed Jan 20 13:51:49 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 20 Jan 2010 13:51:49 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <9d748c781001200740rdb86638w149a8860c8092bc7@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<9d748c781001200740rdb86638w149a8860c8092bc7@mail.gmail.com>
Message-ID: <209EC006-FD69-41E5-91DE-AD31FF7D69BC@bubblehouse.org>

On Jan 20, 2010, at 10:40 AM, Landreville wrote:
> On Wed, Jan 20, 2010 at 9:58 AM, adamjamesdrew same <theiklabs at gmail.com> wrote:
>> I deploy code. Then I modify the code on my file system. The code does not
>> automatically change on the server. It does this on the django dev server.
>> How can I make this happen?
> The twisted modules are only loaded once because it asynchronous, so
> the twisted server is persistent in memory. You only load your twisted
> app once, whereas in django the modules are reloaded on every page
> refresh on the dev server.

No, this is not the case.

Twisted's function in this regard is because there's no autoreload functionality, not because of anything to do with its asynchronous development style.

The Django dev server *does not* reload on every page request, it only does so when the files in question have been modified. The Django dev server is also persistent in memory, and uses forking to isolate reloadable code into its own process. When the code fails, or needs to be reloaded, the child is killed and respawned.

-phil

From phil at bubblehouse.org  Wed Jan 20 13:58:29 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 20 Jan 2010 13:58:29 -0500
Subject: [Twisted-Python] WSGI Production ready
In-Reply-To: <2a30f70a1001201019i55011ba0ne40c7dd81f05aa78@mail.gmail.com>
References: <2a30f70a1001201019i55011ba0ne40c7dd81f05aa78@mail.gmail.com>
Message-ID: <962C0788-D6EE-4CE9-8FBA-B8D61AE8F7E0@bubblehouse.org>

On Jan 20, 2010, at 1:19 PM, adamjamesdrew same wrote:
> Is twisted WSGI production ready as compared to apache and mod_wsgi
> 
> For a simple server with 4 cores would you simple start 4 instances and load balance between them?
> How would you recommend a production deploy of twisted wsgi?

Twisted's WSGI support is definitely production-ready; I'm currently using it in several production environments at work.

However, performance can be limited by its use of Python threads, and the impact of the Global Interpreter Lock (which would be somewhat negated by your plan of running 4 instances in a load-balancing pool).

If you need extremely high performance (and I mean really need -- Twisted WSGI is fast enough for many many scenarios), you will probably want to use another WSGI container.

But of course, that's the benefit of coding to the WSGI spec. Personally, I use Twisted's WSGI for development, and for medium-load production deployments where I need a web server directly integrated with other Twisted code.

For production, I've had great success with mod_wsgi on Apache 2.2, which I believe is the standard deployment environment for Django, as well.

-phil

From landreville at deadtreepages.com  Wed Jan 20 14:01:27 2010
From: landreville at deadtreepages.com (Landreville)
Date: Wed, 20 Jan 2010 14:01:27 -0500
Subject: [Twisted-Python] SIP and RTP
Message-ID: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>

Hello,
I need to make a SIP call and play a wav file  over the RTP stream
from a twisted server. This is a sort of visual voicemail application.

Has anyone set this up using twisted before?
I saw the SIP protocol support in twisted, but I'm not sure how
complete it is.  Do you think it would be difficult to make this
solution a reality?

I heard of the Shtoom project which did this using Twisted, but it
appears dead I can't find the source code for it.


From landreville at deadtreepages.com  Wed Jan 20 14:03:25 2010
From: landreville at deadtreepages.com (Landreville)
Date: Wed, 20 Jan 2010 14:03:25 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <209EC006-FD69-41E5-91DE-AD31FF7D69BC@bubblehouse.org>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<9d748c781001200740rdb86638w149a8860c8092bc7@mail.gmail.com>
	<209EC006-FD69-41E5-91DE-AD31FF7D69BC@bubblehouse.org>
Message-ID: <9d748c781001201103s32163c44gb2028abd39967fc7@mail.gmail.com>

On Wed, Jan 20, 2010 at 1:51 PM, Phil Christensen <phil at bubblehouse.org> wrote:
> On Jan 20, 2010, at 10:40 AM, Landreville wrote:
>> On Wed, Jan 20, 2010 at 9:58 AM, adamjamesdrew same <theiklabs at gmail.com> wrote:
>>> I deploy code. Then I modify the code on my file system. The code does not
>>> automatically change on the server. It does this on the django dev server.
>>> How can I make this happen?
>> The twisted modules are only loaded once because it asynchronous, so
>> the twisted server is persistent in memory. You only load your twisted
>> app once, whereas in django the modules are reloaded on every page
>> refresh on the dev server.
>
> No, this is not the case.
>
> Twisted's function in this regard is because there's no autoreload functionality, not because of anything to do with its asynchronous development style.
>
> The Django dev server *does not* reload on every page request, it only does so when the files in question have been modified. The Django dev server is also persistent in memory, and uses forking to isolate reloadable code into its own process. When the code fails, or needs to be reloaded, the child is killed and respawned.
>
> -phil

Oh cool, this is good stuff to know.


From termim at gmail.com  Wed Jan 20 15:20:32 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Wed, 20 Jan 2010 15:20:32 -0500
Subject: [Twisted-Python] 9.0.0 question
Message-ID: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>

Hi,

I've switched recently from 8.2 to 9.0 and noticed that some of my
client scripts
hang in reactor.stop() on exit sometimes. That never happened before. For
example if I run the gethostbyname.py from the twisted-names examples directory
it prints the correct result and hangs forever until I press Cntrl-C.
Then it prints the
following traceback:

terekhov at linux:/home/terekhov/python/twisted/9.0/Twisted-9.0.0/doc/names/examples
>python gethostbyname.py localhost
127.0.0.1
^CUnhandled error in Deferred:
Traceback (most recent call last):
  File "gethostbyname.py", line 19, in <module>
    d.addCallbacks(gotResult, gotFailure)
  File "/usr/lib64/python2.5/site-packages/twisted/internet/defer.py",
line 181, in addCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/usr/lib64/python2.5/site-packages/twisted/internet/defer.py",
line 323, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "gethostbyname.py", line 12, in gotResult
    reactor.stop()
  File "/usr/lib64/python2.5/site-packages/twisted/internet/base.py",
line 553, in stop
    "Can't stop reactor that isn't running.")
twisted.internet.error.ReactorNotRunning: Can't stop reactor that isn't running.
terekhov at linux:/home/terekhov/python/twisted/9.0/Twisted-9.0.0/doc/names/examples
>

At the same time echo client/server example from the twisted core
works as expected.
Any hint would be appreciated.
BTW I use SuSE 11.0  on x86_64 with python 2.5.2

Regards,
-- 
Mikhail Terekhov


From clemesha at gmail.com  Wed Jan 20 15:23:14 2010
From: clemesha at gmail.com (Alex Clemesha)
Date: Wed, 20 Jan 2010 12:23:14 -0800
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
Message-ID: <d272f0691001201223p3f1f61d6rb7d090f87e8a7fd4@mail.gmail.com>

On Wed, Jan 20, 2010 at 6:58 AM, adamjamesdrew same <theiklabs at gmail.com> wrote:
> I deploy code. Then I modify the code on my file system. The code does not
> automatically change on the server. It does this on the django dev server.
> How can I make this happen?
>
> I start the server as follows
>
> twistd -ny server.py
>
> # Django and static file server:
> root_resource = get_root_resource()
> root_resource.putChild("static", static.File("static"))
> http_factory = server.Site(root_resource, logPath="http.log")
> internet.TCPServer(STATIC_PORT, http_factory,
> interface=INTERFACE).setServiceParent(serviceCollection)
That's my code ;-) and thanks for trying out Hotdot [1]!

I really want to getting reloading going.  I already have a ticket here:
http://github.com/clemesha/hotdot/issues#issue/2
that describes this issue, with a couple of notes.  Please add to this
ticket / post any patches if you getting anywhere with this.

thanks!
-Alex



[1] http://github.com/clemesha/hotdot




> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



-- 
Alex Clemesha
clemesha.org


From clemesha at gmail.com  Wed Jan 20 15:26:37 2010
From: clemesha at gmail.com (Alex Clemesha)
Date: Wed, 20 Jan 2010 12:26:37 -0800
Subject: [Twisted-Python] WSGI Production ready
In-Reply-To: <962C0788-D6EE-4CE9-8FBA-B8D61AE8F7E0@bubblehouse.org>
References: <2a30f70a1001201019i55011ba0ne40c7dd81f05aa78@mail.gmail.com>
	<962C0788-D6EE-4CE9-8FBA-B8D61AE8F7E0@bubblehouse.org>
Message-ID: <d272f0691001201226g1df8fcf2ncf38de133fd3ea31@mail.gmail.com>

On Wed, Jan 20, 2010 at 10:58 AM, Phil Christensen <phil at bubblehouse.org> wrote:
> On Jan 20, 2010, at 1:19 PM, adamjamesdrew same wrote:
>> Is twisted WSGI production ready as compared to apache and mod_wsgi
>>
>> For a simple server with 4 cores would you simple start 4 instances and load balance between them?
>> How would you recommend a production deploy of twisted wsgi?
>
> Twisted's WSGI support is definitely production-ready; I'm currently using it in several production environments at work.
>
> However, performance can be limited by its use of Python threads, and the impact of the Global Interpreter Lock (which would be somewhat negated by your plan of running 4 instances in a load-balancing pool).
>
> If you need extremely high performance (and I mean really need -- Twisted WSGI is fast enough for many many scenarios), you will probably want to use another WSGI container.
Yes, twisted performs great for normal loads.  And, if you are so
lucky to suddenly have a massive amount of users and you need to scale
up,
I'd suggest trying out the Nginx wsgi support, which I use in a couple
apps and works great.

-Alex




>
> But of course, that's the benefit of coding to the WSGI spec. Personally, I use Twisted's WSGI for development, and for medium-load production deployments where I need a web server directly integrated with other Twisted code.
>
> For production, I've had great success with mod_wsgi on Apache 2.2, which I believe is the standard deployment environment for Django, as well.
>
> -phil
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org


From phil at bubblehouse.org  Wed Jan 20 15:43:11 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 20 Jan 2010 15:43:11 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <d272f0691001201223p3f1f61d6rb7d090f87e8a7fd4@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<d272f0691001201223p3f1f61d6rb7d090f87e8a7fd4@mail.gmail.com>
Message-ID: <EFC999BC-C07D-4195-A380-A9AA531F90D8@bubblehouse.org>

On Jan 20, 2010, at 3:23 PM, Alex Clemesha wrote:
> I really want to getting reloading going.  I already have a ticket here:
> http://github.com/clemesha/hotdot/issues#issue/2
> that describes this issue, with a couple of notes.  Please add to this
> ticket / post any patches if you getting anywhere with this.

I don't think it gets much better than Django's approach. Basically, the server code loads everything it needs to bootstrap, and then forks.

All the request handling and subsequent code execution takes place in the child process, so that when modules are loaded, they are only loaded into the child's memory space.

Then, before any request is processed, the child checks the originating files for all of the modules in sys.modules, and sees if any of them have a new modification date.

If so, the child process is killed, which is detected by the parent, which respawns the child. The respawned child has the state of the parent process (which hasn't loaded any external modules), so modules get freshly imported.

t.p.rebuild() is a big improvement over the stock reload() function, but in addition to requiring modules to be marked with the "ALLOW_TWISTED_REBUILD" flag, it suffers from the same issue that it's only able to reload modules that are in the current scope.

-phil

From theiklabs at gmail.com  Wed Jan 20 17:17:21 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Wed, 20 Jan 2010 17:17:21 -0500
Subject: [Twisted-Python] HOTDOT , Love the code,
	I'm curious about your thought's on it's goals and some other
	solutions with orbited
Message-ID: <2a30f70a1001201417p45515abcq66d89943938638a7@mail.gmail.com>

I c that you have used the embedded morbiq with the restq interface.

To replace the morbidQ restq.py would I just create an activeMQ.py factory
class?

Since twisted is hosting both django and orbited you have access to the
session data. If you had an architecture like so what are some strategies
for handling security of orbited

apache->mod_wsgi->django

javascript->orbited->twisted->activemq or rabbitmq

Here are some potential use cases.
Case #1
Everyone has access to read any Q
Write's to the Q are done via a secret account on the server side code can
be called an authenticated via standard ajax

Case #2
Only logged in users have access to a private Q
Write's to the Q are done via a secret account on the server side code can
be called an authenticated via standard ajax

Thanks a lot
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100120/13b28c74/attachment.htm 

From brad.milne at devx.runthered.com  Wed Jan 20 22:36:20 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 21 Jan 2010 16:36:20 +1300
Subject: [Twisted-Python] reactor start/stop frustrations in tests
Message-ID: <19ae58271001201936m72f86e4uc8ad7abfa4f02c31@mail.gmail.com>

Hi all

I know this has been discussed numerous times, but I need some extra help. I
have used nose.twistedtools' @deferred decorator to run the reactor within a
test method to date. Now I am writing some performance tests for our
application and need better control over the reactor.

nose has threaded_reactor() and reactor_stop() to control things, but
regardless, it still doesn't seem to shut down. I need to shut down the
reactor between tests so that requests are dropped (ie get a real
representation of completed tasks within test time). Would you recommend
trial instead?

Many thanks
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100121/84b8076c/attachment.htm 

From glyph at twistedmatrix.com  Wed Jan 20 22:40:15 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jan 2010 22:40:15 -0500
Subject: [Twisted-Python] reactor start/stop frustrations in tests
In-Reply-To: <19ae58271001201936m72f86e4uc8ad7abfa4f02c31@mail.gmail.com>
References: <19ae58271001201936m72f86e4uc8ad7abfa4f02c31@mail.gmail.com>
Message-ID: <9D0CFD19-E03B-443B-860D-C794080C2F62@twistedmatrix.com>


On Jan 20, 2010, at 10:36 PM, Brad Milne wrote:

> Hi all
> 
> I know this has been discussed numerous times, but I need some extra help. I have used nose.twistedtools' @deferred decorator to run the reactor within a test method to date. Now I am writing some performance tests for our application and need better control over the reactor.
> 
> nose has threaded_reactor() and reactor_stop() to control things, but regardless, it still doesn't seem to shut down. I need to shut down the reactor between tests so that requests are dropped (ie get a real representation of completed tasks within test time). Would you recommend trial instead?

Trial would work better with tests that want a "real" reactor though, yes, but it still won't let you shut down the reactor.

If you really want to do that, please re-open this ticket by attaching a patch: <http://twistedmatrix.com/trac/ticket/3518> - and remember to add the 'review' keyword so someone will notice it :)

From glyph at twistedmatrix.com  Wed Jan 20 22:43:37 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jan 2010 22:43:37 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
Message-ID: <C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>


On Jan 20, 2010, at 3:20 PM, Mikhail Terekhov wrote:

> Hi,
> 
> I've switched recently from 8.2 to 9.0 and noticed that some of my
> client scripts
> hang in reactor.stop() on exit sometimes. That never happened before. For
> example if I run the gethostbyname.py from the twisted-names examples directory
> it prints the correct result and hangs forever until I press Cntrl-C.
> Then it prints the
> following traceback:


I don't see the behavior you describe, but I do see this traceback on trunk with every 3rd run or so of that example - maybe the example is buggy?

doc/names/examples$ python gethostbyname.py  twistedmatrix.com
twisted/names/dns.py:1670: DeprecationWarning: Please only pass IPs to write(), not hostnames
  self.transport.write(message.toStr(), address)
Traceback (most recent call last):
  File "twisted/internet/udp.py", line 121, in doRead
    self.protocol.datagramReceived(data, addr)
  File "twisted/names/dns.py", line 1700, in datagramReceived
    d.callback(m)
  File "twisted/internet/defer.py", line 239, in callback
    self._startRunCallbacks(result)
  File "twisted/internet/defer.py", line 308, in _startRunCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "twisted/internet/defer.py", line 324, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/names/common.py", line 239, in <lambda>
    ).addBoth(lambda passthrough: (r.protocol.transport.stopListening(), passthrough)[1])
exceptions.AttributeError: 'NoneType' object has no attribute 'stopListening'

Can you provide a simpler, more streamlined example of the problem you're describing?



From glyph at twistedmatrix.com  Wed Jan 20 22:57:21 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jan 2010 22:57:21 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
In-Reply-To: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
References: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
Message-ID: <4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>

On Jan 19, 2010, at 4:33 PM, Kevin Horn wrote:

> This time I think I'm gonna skip saying how I haven't gotten as much done as I would like...oh darn.
> 
> Anyways, time for another gripping installment...
> 
> Progress:
>   - tables are now handled (mostly) properly, thanks to Zeth at http://commandline.org.uk/
>   - blockquote tags handled
>   - much improved whitespace/indentation handling
>   - some nicer styling thanks to Michael Thompson
>   - I've managed to convert the docs for the 3 Divmod projects with Lore 
>     docs, though I've yet to put them up anywhere.

Yay!

>   - due to ReST's insistence on "inline markup" being surrounded by 
>     whitespace or certain special characters, there are a lot of places where
>     such inline markup gets jacked up, by not including whitespace in front of 
>     it.  If I put whitespace in front of everything though, my indentation 
>     handling gets jacked up and about 400+ Sphinx build warning result.
>     Not sure if I should spend the time to make whitespace handling really 
>     smart or if these should just be fixed manually post-conversion.

I don't really understand this problem.  What do you mean about making whitespace handling really smart?  Isn't this the sort of detail that docutils is supposed to handle for you?

>   - Themeing/styling: still mostly a TODO, though new styling looks a lot 
>     better than the default to my eyes.  I'm starting to think that 
>     eventually we might want to have 2 themes/styles...one to match the 
>     trac-based website, and one for bundled docs (docs tarballs, CHM files, etc.)

That would certainly be nice, but is in no way required for the initial migration.  Still, we should have a workable theme in order before we pull the trigger :).
> 
>   - some of the Lore source files have nested "inline markup", which ReST 
>     disallows.  

Ugh.  So ReST can't do this?  That's pretty lame.

>       - just handle the outside level of nesting (what I'm doing now) and 
>         fix any problems manually post-conversion.

I'm assuming there are very few instances of this, so that sounds fine.

>   - xhtml entities are not currently resolved...mostly because it makes 
>     the build take a LOOOONG time.  They can be though.  This shouldn't 
>     be a problem.

Are you resolving them by downloading all the DTDs or something?

>   - Foolscap 0.5 was released today, which made me wonder what they use for
>     docs...and it's Lore.  I brought this up on IRC, and it was suggested 
>     by many that Lore should stick around even after the conversion according 
>     to the standard Twisted compatibility policy, to give anyone who still 
>     uses it time to migrate.  This sounds like a fine idea to me.  
>     Any thoughts?

Since nobody really uses lore's API, the same compatibility policy doesn't really apply.  In lore's case, I would say that the policy should be that we include it with X more releases just for packaging convenience, but stop doing maintenance immediately.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100120/d90561fe/attachment.htm 

From godson.g at gmail.com  Thu Jan 21 00:10:25 2010
From: godson.g at gmail.com (Godson Gera)
Date: Thu, 21 Jan 2010 10:40:25 +0530
Subject: [Twisted-Python] SIP and RTP
In-Reply-To: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
References: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
Message-ID: <f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>

There is no direct RTP support in Twisted. Shtoom did that but its dead long
back. I've seen people using the same RTP code implemented by shtoom here
and there. Also SIP implementation in Twisted is not 100%. There is one more
project called Sine made by divmod which uses Twsited and it has implemented
more SIP protocol features.

On Thu, Jan 21, 2010 at 12:31 AM, Landreville <landreville at deadtreepages.com
> wrote:

> Hello,
> I need to make a SIP call and play a wav file  over the RTP stream
> from a twisted server. This is a sort of visual voicemail application.
>
> Has anyone set this up using twisted before?
> I saw the SIP protocol support in twisted, but I'm not sure how
> complete it is.  Do you think it would be difficult to make this
> solution a reality?
>
> I heard of the Shtoom project which did this using Twisted, but it
> appears dead I can't find the source code for it.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Thanks & Regards,
Godson Gera
Asterisk FreeSWITCH Consultant India <http://godson.in>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100121/3ea5dd4e/attachment.htm 

From exarkun at twistedmatrix.com  Thu Jan 21 03:58:42 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 Jan 2010 08:58:42 -0000
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
Message-ID: <20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>

On 03:43 am, glyph at twistedmatrix.com wrote:
>
>On Jan 20, 2010, at 3:20 PM, Mikhail Terekhov wrote:
>>Hi,
>>
>>I've switched recently from 8.2 to 9.0 and noticed that some of my
>>client scripts
>>hang in reactor.stop() on exit sometimes. That never happened before. 
>>For
>>example if I run the gethostbyname.py from the twisted-names examples 
>>directory
>>it prints the correct result and hangs forever until I press Cntrl-C.
>>Then it prints the
>>following traceback:
>
>
>I don't see the behavior you describe, but I do see this traceback on 
>trunk with every 3rd run or so of that example - maybe the example is 
>buggy?
>
>doc/names/examples$ python gethostbyname.py  twistedmatrix.com
>twisted/names/dns.py:1670: DeprecationWarning: Please only pass IPs to 
>write(), not hostnames
>  self.transport.write(message.toStr(), address)
>Traceback (most recent call last):
>  File "twisted/internet/udp.py", line 121, in doRead
>    self.protocol.datagramReceived(data, addr)
>  File "twisted/names/dns.py", line 1700, in datagramReceived
>    d.callback(m)
>  File "twisted/internet/defer.py", line 239, in callback
>    self._startRunCallbacks(result)
>  File "twisted/internet/defer.py", line 308, in _startRunCallbacks
>    self._runCallbacks()
>--- <exception caught here> ---
>  File "twisted/internet/defer.py", line 324, in _runCallbacks
>    self.result = callback(self.result, *args, **kw)
>  File "twisted/names/common.py", line 239, in <lambda>
>    ).addBoth(lambda passthrough: (r.protocol.transport.stopListening(), 
>passthrough)[1])
>exceptions.AttributeError: 'NoneType' object has no attribute 
>'stopListening'

http://twistedmatrix.com/trac/ticket/4210

Jean-Paul
>
>Can you provide a simpler, more streamlined example of the problem 
>you're describing?
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Thu Jan 21 04:03:04 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 Jan 2010 09:03:04 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
In-Reply-To: <4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
References: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
	<4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
Message-ID: <20100121090304.1898.181375491.divmod.xquotient.455@localhost.localdomain>

On 03:57 am, glyph at twistedmatrix.com wrote:
>On Jan 19, 2010, at 4:33 PM, Kevin Horn wrote:
>>This time I think I'm gonna skip saying how I haven't gotten as much 
>>done as I would like...oh darn.
>>
>>Anyways, time for another gripping installment...
>>
>>   - due to ReST's insistence on "inline markup" being surrounded by
>>     whitespace or certain special characters, there are a lot of 
>>places where
>>     such inline markup gets jacked up, by not including whitespace in 
>>front of
>>     it.  If I put whitespace in front of everything though, my 
>>indentation
>>     handling gets jacked up and about 400+ Sphinx build warning 
>>result.
>>     Not sure if I should spend the time to make whitespace handling 
>>really
>>     smart or if these should just be fixed manually post-conversion.
>
>I don't really understand this problem.  What do you mean about making 
>whitespace handling really smart?  Isn't this the sort of detail that 
>docutils is supposed to handle for you?
>>
>>   - some of the Lore source files have nested "inline markup", which 
>>ReST
>>     disallows.
>
>Ugh.  So ReST can't do this?  That's pretty lame.
>>       - just handle the outside level of nesting (what I'm doing now) 
>>and
>>         fix any problems manually post-conversion.
>
>I'm assuming there are very few instances of this, so that sounds fine.

On IRC last night I brought up the idea that we could skip the 
conversion to ReST and use Sphinx with xhtml input documents.  The 
conclusion seemed to be that this might be difficult, but no one was 
really sure what work would be involved in this approach.  Kevin's 
already put a lot of effort into the conversion.  It would be nice if 
someone else could investigate this.
>
>>   - Foolscap 0.5 was released today, which made me wonder what they 
>>use for
>>     docs...and it's Lore.  I brought this up on IRC, and it was 
>>suggested
>>     by many that Lore should stick around even after the conversion 
>>according
>>     to the standard Twisted compatibility policy, to give anyone who 
>>still
>>     uses it time to migrate.  This sounds like a fine idea to me.
>>     Any thoughts?
>
>Since nobody really uses lore's API, the same compatibility policy 
>doesn't really apply.  In lore's case, I would say that the policy 
>should be that we include it with X more releases just for packaging 
>convenience, but stop doing maintenance immediately.

As long as someone wants to do maintenance, I don't see any reason to 
stop them from doing it.  We might mark all the Lore tickets lowest 
priority or otherwise signal that some subset of the "core" developers 
aren't interested in maintaining it.... but then, how would that be any 
different from the status quo?

Jean-Paul


From termim at gmail.com  Thu Jan 21 10:30:35 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Thu, 21 Jan 2010 10:30:35 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
Message-ID: <12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>

On Thu, Jan 21, 2010 at 3:58 AM,  <exarkun at twistedmatrix.com> wrote:
> On 03:43 am, glyph at twistedmatrix.com wrote:
>>
>>On Jan 20, 2010, at 3:20 PM, Mikhail Terekhov wrote:
>>>Hi,
>>>
>>>I've switched recently from 8.2 to 9.0 and noticed that some of my
>>>client scripts
>>>hang in reactor.stop() on exit sometimes. That never happened before.
>>>For
>>>example if I run the gethostbyname.py from the twisted-names examples
>>>directory
>>>it prints the correct result and hangs forever until I press Cntrl-C.
>>>Then it prints the
>>>following traceback:
>>
>>
>>I don't see the behavior you describe, but I do see this traceback on
>>trunk with every 3rd run or so of that example - maybe the example is
>>buggy?
>>
>>doc/names/examples$ python gethostbyname.py ?twistedmatrix.com
>>twisted/names/dns.py:1670: DeprecationWarning: Please only pass IPs to
>>write(), not hostnames
>> ?self.transport.write(message.toStr(), address)
>>Traceback (most recent call last):
>> ?File "twisted/internet/udp.py", line 121, in doRead
>> ? ?self.protocol.datagramReceived(data, addr)
>> ?File "twisted/names/dns.py", line 1700, in datagramReceived
>> ? ?d.callback(m)
>> ?File "twisted/internet/defer.py", line 239, in callback
>> ? ?self._startRunCallbacks(result)
>> ?File "twisted/internet/defer.py", line 308, in _startRunCallbacks
>> ? ?self._runCallbacks()
>>--- <exception caught here> ---
>> ?File "twisted/internet/defer.py", line 324, in _runCallbacks
>> ? ?self.result = callback(self.result, *args, **kw)
>> ?File "twisted/names/common.py", line 239, in <lambda>
>> ? ?).addBoth(lambda passthrough: (r.protocol.transport.stopListening(),
>>passthrough)[1])
>>exceptions.AttributeError: 'NoneType' object has no attribute
>>'stopListening'
>
> http://twistedmatrix.com/trac/ticket/4210
>

I think I found it, it is somewhat different IMHO. When you run

   python gethostbyname.py localhost

notice the '''localhost''' there, the getHostByName('localhost') returns
defer.succeed(..) so the callback gotResult and hence reactor.stop()
is called even before reactor is run and for some reason it hangs there
inside reactor.stop().

So there are actually two points here:

1. the gethostbyname.py example should probably be changed something
    like this

--- gethostbyname.py.orig       2010-01-21 10:01:30.000000000 -0500
+++ gethostbyname.py    2010-01-21 10:02:55.000000000 -0500
@@ -15,7 +15,9 @@
     failure.printTraceback()
     reactor.stop()

-d = client.getHostByName(sys.argv[1])
-d.addCallbacks(gotResult, gotFailure)
+def main():
+    d = client.getHostByName(sys.argv[1])
+    d.addCallbacks(gotResult, gotFailure)

+reactor.addSystemEventTrigger("after", "startup", main)
 reactor.run()

2. Why reactor.stop() hangs if it is called before reactor.run()?

Are they worth a tickets?

Regards,
-- 
Mikhail Terekhov


From kevin.horn at gmail.com  Thu Jan 21 11:55:14 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 21 Jan 2010 10:55:14 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
In-Reply-To: <4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
References: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
	<4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
Message-ID: <562bcc11001210855m3cd80635jbe99f12baf8b658b@mail.gmail.com>

On Wed, Jan 20, 2010 at 9:57 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Jan 19, 2010, at 4:33 PM, Kevin Horn wrote:
>
> This time I think I'm gonna skip saying how I haven't gotten as much done
> as I would like...oh darn.
>
> Anyways, time for another gripping installment...
>
> Progress:
>   - tables are now handled (mostly) properly, thanks to Zeth at
> http://commandline.org.uk/
>   - blockquote tags handled
>   - much improved whitespace/indentation handling
>   - some nicer styling thanks to Michael Thompson
>   - I've managed to convert the docs for the 3 Divmod projects with Lore
>     docs, though I've yet to put them up anywhere.
>
>
> Yay!
>
>   - due to ReST's insistence on "inline markup" being surrounded by
>     whitespace or certain special characters, there are a lot of places
> where
>     such inline markup gets jacked up, by not including whitespace in front
> of
>     it.  If I put whitespace in front of everything though, my indentation
>     handling gets jacked up and about 400+ Sphinx build warning result.
>     Not sure if I should spend the time to make whitespace handling really
>     smart or if these should just be fixed manually post-conversion.
>
>
> I don't really understand this problem.  What do you mean about making
> whitespace handling really smart?  Isn't this the sort of detail that
> docutils is supposed to handle for you?
>
>
OK, lemme esplain...no, would take too long, lemme sum up.

In some of the Lore docs, you have stuff like:

    some<em>stuff</em>

which naively translated to ReST looks like:

    some*stuff*

but since ReST wants whitespace and/or special characters surrounding
"inline markup",  docutils/Sphinx doesn't recognize it properly as markup
and just sends it unmodified to the HTML (or whatever) output..

The obvious solution is to just surround all inline markup with spaces,
since we're mainly targeting HTML output at the moment and a few extra
spaces shouldn't hurt.  Which would look like this:

    some *stuff*

But this turns out to cause other problems, specifically in the case where
inline markup occurs on the beginning of a line, and the extra space jacks
up the indentation (which ReST considers significant).

So the whitespace handling I was referring to was the output of whitespace
from lore2sphinx.


>   - Themeing/styling: still mostly a TODO, though new styling looks a lot
>     better than the default to my eyes.  I'm starting to think that
>     eventually we might want to have 2 themes/styles...one to match the
>     trac-based website, and one for bundled docs (docs tarballs, CHM files,
> etc.)
>
>
> That would certainly be nice, but is in no way required for the initial
> migration.  Still, we should have a workable theme in order before we pull
> the trigger :).
>

Right, as I said "eventually".


>
>   - some of the Lore source files have nested "inline markup", which ReST
>     disallows.
>
>
> Ugh.  So ReST *can't do this?*  That's pretty lame.
>

It's a little bit lame, but I've found that it doesn't occur all that often
in practice.  Every markup language has it's limitations, and this is one I
can live with.


>       - just handle the outside level of nesting (what I'm doing now) and
>         fix any problems manually post-conversion.
>
>
> I'm assuming there are very few instances of this, so that sounds fine.
>

That's pretty much my plan.


>
>   - xhtml entities are not currently resolved...mostly because it makes
>     the build take a LOOOONG time.  They can be though.  This shouldn't
>     be a problem.
>
>
> Are you resolving them by downloading all the DTDs or something?
>

The lxml parser can download DTDs in order to resolve external entities, but
the way things are currently set up, it would end up doing this once for
each Lore source file, which ends up making my build process take much
longer.  Because I didn't want to deal with this during development, and
since there are only like 4 external entities in all of the Lore docs, I
turned this off and told lxml to ignore the errors. It may be that there is
a better way to do this (maybe cache the DTDs somehow), but I haven't really
bothered with it yet.  It's a simple matter to turn it back on when we're
ready, even if there isn't an easy/convenient way to avoid the repeated
downloads of the DTDs.


>
>   - Foolscap 0.5 was released today, which made me wonder what they use for
>
>     docs...and it's Lore.  I brought this up on IRC, and it was suggested
>     by many that Lore should stick around even after the conversion
> according
>     to the standard Twisted compatibility policy, to give anyone who still
>     uses it time to migrate.  This sounds like a fine idea to me.
>     Any thoughts?
>
>
> Since nobody really uses lore's API, the same compatibility policy doesn't
> really apply.  In lore's case, I would say that the policy should be that we
> include it with X more releases just for packaging convenience, but stop
> doing maintenance immediately.
>
>
>
Fine with me.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100121/12501b1e/attachment.htm 

From lehmann at cnm.de  Thu Jan 21 12:08:47 2010
From: lehmann at cnm.de (Marten Lehmann)
Date: Thu, 21 Jan 2010 18:08:47 +0100
Subject: [Twisted-Python] LDAP server based on python
Message-ID: <4B588A1F.6090106@cnm.de>

Hi,

I'm refering to an older post of Xavier Dutoit on this list (in early 
2008), in which he asked about the state of the ldap-server (ldaptor) 
plug-in for Twisted.

What he needed this for was virtually the same as the way we intend to 
use it: Our users shall be able to integrate all contacts of their 
collaboration account in Outlook, Thunderbird, Evolution etc. by LDAP.

For easy configuration and security purposes we want to provide a short 
LDAP tree which returns all the contacts of the user, so he can use his 
contacts everywhere, not just in the web application of the groupware.

The backend is not 100% clear yet, it may be a SQL call to a database, 
it may be a special search within a less secured master LDAP address 
book, it may be a REST call returning JSON data or whatever.

Since we are doing most of our current work in python, we don't want to 
manually extend OpenLDAP's sql backend, but rather help ldaptor's ldap 
server to reach the production level (in case it hasn't done so already).

Does someone know about the current state of the ldaptor's ldap server 
plug-in?

Kind regards
Marten


From kevin.horn at gmail.com  Thu Jan 21 12:11:33 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 21 Jan 2010 11:11:33 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
In-Reply-To: <20100121090304.1898.181375491.divmod.xquotient.455@localhost.localdomain>
References: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
	<4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
	<20100121090304.1898.181375491.divmod.xquotient.455@localhost.localdomain>
Message-ID: <562bcc11001210911o1b9affa4rb8474dec1126fcac@mail.gmail.com>

On Thu, Jan 21, 2010 at 3:03 AM, <exarkun at twistedmatrix.com> wrote:

>
> On IRC last night I brought up the idea that we could skip the
> conversion to ReST and use Sphinx with xhtml input documents.  The
> conclusion seemed to be that this might be difficult, but no one was
> really sure what work would be involved in this approach.  Kevin's
> already put a lot of effort into the conversion.  It would be nice if
> someone else could investigate this.
>


From ltaylor.volks at gmail.com  Thu Jan 21 12:50:23 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Thu, 21 Jan 2010 10:50:23 -0700
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
Message-ID: <4B5893DF.60600@gmail.com>

On 1/20/10 5:35 AM, Pet wrote:
> Hi,
> 
> in code below I try to rotate log files if they reach 5000000 limit,
> but this happens only to every 5 files, ls -althr:
> 
> -rw-r--r-- 1 root root 977K 2010-01-19 19:03 /var/log/my.log.12
> -rw-r--r-- 1 root root 977K 2010-01-19 19:55 /var/log/my.log.10
> -rw-r--r-- 1 root root 977K 2010-01-19 20:41 /var/log/my.log.9
> -rw-r--r-- 1 root root 977K 2010-01-19 21:30 /var/log/my.log.8
> -rw-r--r-- 1 root root 977K 2010-01-19 22:46 /var/log/my.log.7
> -rw-r--r-- 1 root root 4.8M 2010-01-20 00:19 /var/log/my.log.11
> -rw-r--r-- 1 root root 977K 2010-01-20 00:19 /var/log/my.log.6
> -rw-r--r-- 1 root root 977K 2010-01-20 09:17 /var/log/my.log.4
> -rw-r--r-- 1 root root 977K 2010-01-20 10:45 /var/log/my.log.3
> -rw-r--r-- 1 root root 977K 2010-01-20 12:04 /var/log/my.log.2
> -rw-r--r-- 1 root root 977K 2010-01-20 12:59 /var/log/my.log.1
> -rw-r--r-- 1 root root 4.2M 2010-01-20 13:26 /var/log/my.log.5
> -rw-r--r-- 1 root root 301K 2010-01-20 13:26 /var/log/my.log
> 
> 
> it writes simultaneously to both my.log.5 and my.log. It is not big
> problem, but in this way I have only recent files, because they grows
> quickly
> 
> Pet
> 
<snip>

This can occur if you have multiple instances of logfile.LogFile setup
to manage the same file. The default rotation is 1MB, so maybe you have
another logfile.LogFile somewhere?


From maarten at treewalker.org  Thu Jan 21 13:02:06 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Thu, 21 Jan 2010 19:02:06 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <4B5893DF.60600@gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com>
Message-ID: <201001211902.06589.maarten@treewalker.org>

On Thursday 21 January 2010, Lucas Taylor wrote:

> This can occur if you have multiple instances of logfile.LogFile setup
> to manage the same file. The default rotation is 1MB, so maybe you have
> another logfile.LogFile somewhere?

Maybe twistd's log rotation?

Bye,
		Maarten


From petshmidt at googlemail.com  Thu Jan 21 13:17:11 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 21 Jan 2010 19:17:11 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <201001211902.06589.maarten@treewalker.org>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com> 
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org>
Message-ID: <b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>

On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
<maarten at treewalker.org> wrote:
> On Thursday 21 January 2010, Lucas Taylor wrote:
>
>> This can occur if you have multiple instances of logfile.LogFile setup
>> to manage the same file. The default rotation is 1MB, so maybe you have
>> another logfile.LogFile somewhere?
>
> Maybe twistd's log rotation?

Yes, may be. I start my daemon with
/usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
--pidfile=/var/lock/mydaemon.pid

How do I start twistd, so it doesn't produce own log file?

Thanks for help!

Pet

>
> Bye,
> ? ? ? ? ? ? ? ?Maarten
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From landreville at deadtreepages.com  Thu Jan 21 13:32:53 2010
From: landreville at deadtreepages.com (Landreville)
Date: Thu, 21 Jan 2010 13:32:53 -0500
Subject: [Twisted-Python] SIP and RTP
In-Reply-To: <f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>
References: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
	<f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>
Message-ID: <9d748c781001211032x5c2e8b2s2ff2a1e66692859b@mail.gmail.com>

On Thu, Jan 21, 2010 at 12:10 AM, Godson Gera <godson.g at gmail.com> wrote:
> There is no direct RTP support in Twisted. Shtoom did that but its dead long
> back. I've seen people using the same RTP code implemented by shtoom here
> and there. Also SIP implementation in Twisted is not 100%. There is one more
> project called Sine made by divmod which uses Twsited and it has implemented
> more SIP protocol features.

You wouldn't happend to know where to find the Shtoom source?

I'm going to try to make a simpler client that will just subscribe to
another user on a sip server and listen to notify events (any not try
any RTP at all for starters).


From ltaylor.volks at gmail.com  Thu Jan 21 18:13:03 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Thu, 21 Jan 2010 16:13:03 -0700
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com>
	<201001211902.06589.maarten@treewalker.org>
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
Message-ID: <4B58DF7F.6090301@gmail.com>

On 1/21/10 11:17 AM, Pet wrote:
> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
> <maarten at treewalker.org> wrote:
>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>
>>> This can occur if you have multiple instances of logfile.LogFile setup
>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>> another logfile.LogFile somewhere?
>> Maybe twistd's log rotation?
> 
> Yes, may be. I start my daemon with
> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
> --pidfile=/var/lock/mydaemon.pid
> 
> How do I start twistd, so it doesn't produce own log file?
> 
> Thanks for help!
> 
> Pet
> 

You can customize the application to use your logfile and observer:
http://twistedmatrix.com/documents/current/core/howto/application.html#auto6

e.g
class MyLog(log.FileLogObserver):
    def emit(self, logEntryDict):
        log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
        log.FileLogObserver.emit(self, logEntryDict)

maxLogSize = 5000000
logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
maxRotatedFiles=50)

application = service.Application("myapp")
application.setComponent(log.ILogObserver, MyLog(logFile).emit)





From washort at twistedmatrix.com  Thu Jan 21 21:58:12 2010
From: washort at twistedmatrix.com (Allen Short)
Date: Thu, 21 Jan 2010 18:58:12 -0800
Subject: [Twisted-Python] SIP and RTP
In-Reply-To: <9d748c781001211032x5c2e8b2s2ff2a1e66692859b@mail.gmail.com>
References: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
	<f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>
	<9d748c781001211032x5c2e8b2s2ff2a1e66692859b@mail.gmail.com>
Message-ID: <f147f7e11001211858u6821bfc2nfd69336598fc88b5@mail.gmail.com>

Your best bet is probably going to be looking at the code in Divmod Sine.
You can access the code at: http://divmod.org/svn/Divmod/trunk/Sine/

Unfortunately it isn't very polished -- documentation, especially for the
user agent pieces, is rather minimal.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100121/bc1ad475/attachment.htm 

From petshmidt at googlemail.com  Fri Jan 22 05:15:18 2010
From: petshmidt at googlemail.com (Pet)
Date: Fri, 22 Jan 2010 11:15:18 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <4B58DF7F.6090301@gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com> 
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org> 
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com> 
	<4B58DF7F.6090301@gmail.com>
Message-ID: <b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>

On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
> On 1/21/10 11:17 AM, Pet wrote:
>> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>> <maarten at treewalker.org> wrote:
>>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>>
>>>> This can occur if you have multiple instances of logfile.LogFile setup
>>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>>> another logfile.LogFile somewhere?
>>> Maybe twistd's log rotation?
>>
>> Yes, may be. I start my daemon with
>> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>> --pidfile=/var/lock/mydaemon.pid
>>
>> How do I start twistd, so it doesn't produce own log file?
>>
>> Thanks for help!
>>
>> Pet
>>
>
> You can customize the application to use your logfile and observer:
> http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>
> e.g
> class MyLog(log.FileLogObserver):
> ? ?def emit(self, logEntryDict):
> ? ? ? ?log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
> ? ? ? ?log.FileLogObserver.emit(self, logEntryDict)
>
> maxLogSize = 5000000
> logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
> maxRotatedFiles=50)
>
> application = service.Application("myapp")
> application.setComponent(log.ILogObserver, MyLog(logFile).emit)

Thanks for suggestion. I'll try it out as soon as I can. Currently I
do it in that way:

application = service.Application("MyService")
myLogService = myLogService(LOG_NAME, LOG_DIR)
myLogService.setServiceParent(application)


what is the difference between creating service and setting
setServiceParent and setComponent?

Pet

>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From landreville at deadtreepages.com  Fri Jan 22 12:52:30 2010
From: landreville at deadtreepages.com (Landreville)
Date: Fri, 22 Jan 2010 12:52:30 -0500
Subject: [Twisted-Python] SIP and RTP
In-Reply-To: <f147f7e11001211858u6821bfc2nfd69336598fc88b5@mail.gmail.com>
References: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
	<f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>
	<9d748c781001211032x5c2e8b2s2ff2a1e66692859b@mail.gmail.com>
	<f147f7e11001211858u6821bfc2nfd69336598fc88b5@mail.gmail.com>
Message-ID: <9d748c781001220952s55196e77m6b5cb553dfa36c8c@mail.gmail.com>

On Thu, Jan 21, 2010 at 9:58 PM, Allen Short <washort at twistedmatrix.com> wrote:
>
> Your best bet is probably going to be looking at the code in Divmod Sine.
> You can access the code at:?http://divmod.org/svn/Divmod/trunk/Sine/
> Unfortunately it isn't very polished -- documentation, especially for the
> user agent pieces, is rather minimal.
>

Actually I've decided to build it up from the sip code in twisted and
just write everything I need from scratch. I don't need that much --
and getting the client registration working wasn't as complicated as I
thought it was going to be.

If I get a bunch of functionality maybe I can put it up somewhere eventually.


From exarkun at twistedmatrix.com  Fri Jan 22 15:52:35 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 22 Jan 2010 20:52:35 -0000
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com>
	<201001211902.06589.maarten@treewalker.org>
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
Message-ID: <20100122205235.1898.393355965.divmod.xquotient.458@localhost.localdomain>

On 10:15 am, petshmidt at googlemail.com wrote:
>On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor 
><ltaylor.volks at gmail.com> wrote:
>>On 1/21/10 11:17 AM, Pet wrote:
>>>On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>>><maarten at treewalker.org> wrote:
>>>>On Thursday 21 January 2010, Lucas Taylor wrote:
>>>>>This can occur if you have multiple instances of logfile.LogFile 
>>>>>setup
>>>>>to manage the same file. The default rotation is 1MB, so maybe you 
>>>>>have
>>>>>another logfile.LogFile somewhere?
>>>>Maybe twistd's log rotation?
>>>
>>>Yes, may be. I start my daemon with
>>>/usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>>>--pidfile=/var/lock/mydaemon.pid
>>>
>>>How do I start twistd, so it doesn't produce own log file?
>>>
>>>Thanks for help!
>>>
>>>Pet
>>
>>You can customize the application to use your logfile and observer:
>>http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>>
>>e.g
>>class MyLog(log.FileLogObserver):
>>? ?def emit(self, logEntryDict):
>>? ? ? ?log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
>>? ? ? ?log.FileLogObserver.emit(self, logEntryDict)
>>
>>maxLogSize = 5000000
>>logFile = logfile.LogFile("my.log", "/var/log", 
>>rotateLength=maxLogSize,
>>maxRotatedFiles=50)
>>
>>application = service.Application("myapp")
>>application.setComponent(log.ILogObserver, MyLog(logFile).emit)
>
>Thanks for suggestion. I'll try it out as soon as I can. Currently I
>do it in that way:
>
>application = service.Application("MyService")
>myLogService = myLogService(LOG_NAME, LOG_DIR)
>myLogService.setServiceParent(application)
>
>
>what is the difference between creating service and setting
>setServiceParent and setComponent?

Just that if there's an ILogObserver component on the application, then 
twistd doesn't bother to set up the default log observer.

Jean-Paul


From ltaylor.volks at gmail.com  Fri Jan 22 16:21:36 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Fri, 22 Jan 2010 14:21:36 -0700
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com>
	<201001211902.06589.maarten@treewalker.org>
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
Message-ID: <4B5A16E0.4040206@gmail.com>

On 1/22/10 3:15 AM, Pet wrote:
> On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
>> On 1/21/10 11:17 AM, Pet wrote:
>>> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>>> <maarten at treewalker.org> wrote:
>>>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>>>
>>>>> This can occur if you have multiple instances of logfile.LogFile setup
>>>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>>>> another logfile.LogFile somewhere?
>>>> Maybe twistd's log rotation?
>>> Yes, may be. I start my daemon with
>>> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>>> --pidfile=/var/lock/mydaemon.pid
>>>
>>> How do I start twistd, so it doesn't produce own log file?
>>>
>>> Thanks for help!
>>>
>>> Pet
>>>
>> You can customize the application to use your logfile and observer:
>> http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>>
>> e.g
>> class MyLog(log.FileLogObserver):
>>    def emit(self, logEntryDict):
>>        log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
>>        log.FileLogObserver.emit(self, logEntryDict)
>>
>> maxLogSize = 5000000
>> logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
>> maxRotatedFiles=50)
>>
>> application = service.Application("myapp")
>> application.setComponent(log.ILogObserver, MyLog(logFile).emit)
> 
> Thanks for suggestion. I'll try it out as soon as I can. Currently I
> do it in that way:
> 
> application = service.Application("MyService")
> myLogService = myLogService(LOG_NAME, LOG_DIR)
> myLogService.setServiceParent(application)
> 
> 
> what is the difference between creating service and setting
> setServiceParent and setComponent?
> 
> Pet
> 
http://twistedmatrix.com/documents/current/core/howto/application.html

The important aspect is the setComponent api. This is the part that lets
you override the default logging behavior of twistd. It has nothing to
do with the services that you register with the application using
setServiceParent.

If your MyLogService only does what you originally posted, you probably
don't need all of that machinery. Using twistd will take care of
starting and stopping logging for you.

But, if you really want to use your service (say you want to force
rotation on a restart), then you can do so. You just need to set the
ILogObserver component on the application using your observer's emit
function.

e.g

application = service.Application("MyService")
myLogService = myLogService(LOG_NAME, LOG_DIR)
myLogService.setServiceParent(application)
application.setComponent(log.ILogObserver, myLogService.loclog.emit)

Note that this won't work with your original MyLogService implementation
without some reorganization (move logfile and loclog creation up to
__init__)



From exarkun at twistedmatrix.com  Fri Jan 22 16:40:38 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 22 Jan 2010 21:40:38 -0000
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
Message-ID: <20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>

On 21 Jan, 03:30 pm, termim at gmail.com wrote:
>On Thu, Jan 21, 2010 at 3:58 AM,  <exarkun at twistedmatrix.com> wrote:
>>On 03:43 am, glyph at twistedmatrix.com wrote:
>>>
>>>On Jan 20, 2010, at 3:20 PM, Mikhail Terekhov wrote:
>>>>Hi,
>>>>
>>>>I've switched recently from 8.2 to 9.0 and noticed that some of my
>>>>client scripts
>>>>hang in reactor.stop() on exit sometimes. That never happened 
>>>>before.
>>>>For
>>>>example if I run the gethostbyname.py from the twisted-names 
>>>>examples
>>>>directory
>>>>it prints the correct result and hangs forever until I press 
>>>>Cntrl-C.
>>>>Then it prints the
>>>>following traceback:
>>>
>>>
>>>I don't see the behavior you describe, but I do see this traceback on
>>>trunk with every 3rd run or so of that example - maybe the example is
>>>buggy?
>>>
>>>doc/names/examples$ python gethostbyname.py ?twistedmatrix.com
>>>twisted/names/dns.py:1670: DeprecationWarning: Please only pass IPs 
>>>to
>>>write(), not hostnames
>>>?self.transport.write(message.toStr(), address)
>>>Traceback (most recent call last):
>>>?File "twisted/internet/udp.py", line 121, in doRead
>>>? ?self.protocol.datagramReceived(data, addr)
>>>?File "twisted/names/dns.py", line 1700, in datagramReceived
>>>? ?d.callback(m)
>>>?File "twisted/internet/defer.py", line 239, in callback
>>>? ?self._startRunCallbacks(result)
>>>?File "twisted/internet/defer.py", line 308, in _startRunCallbacks
>>>? ?self._runCallbacks()
>>>--- <exception caught here> ---
>>>?File "twisted/internet/defer.py", line 324, in _runCallbacks
>>>? ?self.result = callback(self.result, *args, **kw)
>>>?File "twisted/names/common.py", line 239, in <lambda>
>>>? ?).addBoth(lambda passthrough: 
>>>(r.protocol.transport.stopListening(),
>>>passthrough)[1])
>>>exceptions.AttributeError: 'NoneType' object has no attribute
>>>'stopListening'
>>
>>http://twistedmatrix.com/trac/ticket/4210
>
>I think I found it, it is somewhat different IMHO. When you run
>
>   python gethostbyname.py localhost
>
>notice the '''localhost''' there, the getHostByName('localhost') 
>returns
>defer.succeed(..) so the callback gotResult and hence reactor.stop()
>is called even before reactor is run and for some reason it hangs there
>inside reactor.stop().
>
>So there are actually two points here:
>
>1. the gethostbyname.py example should probably be changed something
>    like this

This sounds a lot like another example of the problem described in 
<http://twistedmatrix.com/trac/ticket/3270>.
>[snip]
>
>2. Why reactor.stop() hangs if it is called before reactor.run()?

It doesn't.  It raises an exception.  The reason the example hangs is 
that since reactor.stop() was called before reactor.run(), it's not 
called *after* reactor.run().  So the reactor never stops.

Jean-Paul


From termim at gmail.com  Fri Jan 22 17:42:19 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 22 Jan 2010 17:42:19 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
Message-ID: <12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>

On Fri, Jan 22, 2010 at 4:40 PM,  <exarkun at twistedmatrix.com> wrote:
> On 21 Jan, 03:30 pm, termim at gmail.com wrote:
>> [snip]
>>
>> 2. Why reactor.stop() hangs if it is called before reactor.run()?
>
> It doesn't. ?It raises an exception. ?The reason the example hangs is that

Care to elaborate? Who hangs then and why python exits and I see this
exception only after I hit Cntl-C?

Actually I noticed this problem in my old wxPython/Twisted application.
Before upgrade everything was sweet and shiny but when I upgraded
Twisted to 9.0 my application suddenly started to hang on exit. BTW
I use wxreactor and install it exactly as in doc/core/examples/wxdemo.py

It is interesting that doc/core/examples/wxacceptance.py has no such a problem,
but doc/core/examples/wxdemo.py has! If I start it, wait till it
prints to stdout
"two seconds passed" and then try to quit it either by File->Exit or by clicking
on the WM close button it does not respond, even if I hit Cntrl-C in the
terminal from where I run it, but if after Cntrl-C I go to the
File->Exit it quits
after printing "Received SIGINT, shutting down."

terekhov at _:~/Twisted-9.0.0/doc/core/examples >python wxdemo.py
2010-01-22 17:16:03-0500 [-] Log opened.
2010-01-22 17:16:05-0500 [-] two seconds passed
^C
^C
2010-01-22 17:21:03-0500 [-] Received SIGINT, shutting down.
terekhov at _:~/Twisted-9.0.0/doc/core/examples >

Another clue is that if I'm fast enough and can click on the close button
_before_ it prints "two seconds passed", then everything is fine and it
quits without problem:

terekhov at _:~/Twisted-9.0.0/doc/core/examples >python wxdemo.py
2010-01-22 17:23:59-0500 [-] Log opened.
2010-01-22 17:24:01-0500 [-] two seconds passed
terekhov at _:~/Twisted-9.0.0/doc/core/examples >

On the same note may be doc/core/examples/wxacceptance.py has no
such a problem because it uses reactor.callLater(0.1,helloWorld)?

I used gethostbyname.py as an example only because it is much smaller
and the behavior is very similar. May be it is something different.

> since reactor.stop() was called before reactor.run(), it's not called
> *after* reactor.run(). ?So the reactor never stops.
>
That is nice :)

Regards,
-- 
Mikhail Terekhov


From exarkun at twistedmatrix.com  Fri Jan 22 18:15:20 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 22 Jan 2010 23:15:20 -0000
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
	<12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
Message-ID: <20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>

On 10:42 pm, termim at gmail.com wrote:
>On Fri, Jan 22, 2010 at 4:40 PM,  <exarkun at twistedmatrix.com> wrote:
>>On 21 Jan, 03:30 pm, termim at gmail.com wrote:
>>>[snip]
>>>
>>>2. Why reactor.stop() hangs if it is called before reactor.run()?
>>
>>It doesn't. ?It raises an exception. ?The reason the example hangs is 
>>that
>
>Care to elaborate? Who hangs then and why python exits and I see this
>exception only after I hit Cntl-C?

I think that's what I explained in the rest of the sentence that is cut 
off above.  You may only see the exception reported later on because the 
example is relying on garbage collection for that reporting.
>
>Actually I noticed this problem in my old wxPython/Twisted application.
>Before upgrade everything was sweet and shiny but when I upgraded
>Twisted to 9.0 my application suddenly started to hang on exit. BTW
>I use wxreactor and install it exactly as in 
>doc/core/examples/wxdemo.py
>
>It is interesting that doc/core/examples/wxacceptance.py has no such a 
>problem,
>but doc/core/examples/wxdemo.py has! If I start it, wait till it
>prints to stdout
>"two seconds passed" and then try to quit it either by File->Exit or by 
>clicking
>on the WM close button it does not respond, even if I hit Cntrl-C in 
>the
>terminal from where I run it, but if after Cntrl-C I go to the
>File->Exit it quits
>after printing "Received SIGINT, shutting down."

This sounds familiar.  I think wxreactor has some wake-up issues.  It's 
not a very reliable reactor.  wxPython differs in various ways on 
different platforms and from release to release in ways which wxreactor 
doesn't account for.

I think the problem with the dns example is probably not related to your 
wxreactor issues at all.

Jean-Paul


From termim at gmail.com  Fri Jan 22 18:40:57 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 22 Jan 2010 18:40:57 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
	<12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
	<20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>
Message-ID: <12aaa0811001221540y6fe47f14ma73bd0fe514aad71@mail.gmail.com>

>>>> 2. Why reactor.stop() hangs if it is called before reactor.run()?
>>>
>>> It doesn't. ?It raises an exception. ?The reason the example hangs is
>>> that
>>
>> Care to elaborate? Who hangs then and why python exits and I see this
>> exception only after I hit Cntl-C?
>
> I think that's what I explained in the rest of the sentence that is cut off
> above. ?You may only see the exception reported later on because the example
> is relying on garbage collection for that reporting.

Please bear with me as I still can't get it. Here is your explanation
for convenience:

> It doesn't.  It raises an exception.  The reason the example hangs is
> that since reactor.stop() was called before reactor.run(), it's not called
> *after* reactor.run().  So the reactor never stops.

So why reactor never stops if it was never run? What it is doing?

-- 
Mikhail Terekhov


From mithrandi at mithrandi.net  Fri Jan 22 20:04:04 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 23 Jan 2010 03:04:04 +0200
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <12aaa0811001221540y6fe47f14ma73bd0fe514aad71@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
	<12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
	<20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>
	<12aaa0811001221540y6fe47f14ma73bd0fe514aad71@mail.gmail.com>
Message-ID: <f5eea9171001221704q7468bbf9ya5edc6adf5a8203e@mail.gmail.com>

On Sat, Jan 23, 2010 at 1:40 AM, Mikhail Terekhov <termim at gmail.com> wrote:
> So why reactor never stops if it was never run? What it is doing?

You call reactor.stop(); this does nothing but produce a delayed
exception. You then call reactor.run(), which runs the reactor. You
then never call reactor.stop() again, and thus the reactor continues
running forever.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From termim at gmail.com  Sat Jan 23 14:40:15 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Sat, 23 Jan 2010 14:40:15 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <f5eea9171001221704q7468bbf9ya5edc6adf5a8203e@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
	<12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
	<20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>
	<12aaa0811001221540y6fe47f14ma73bd0fe514aad71@mail.gmail.com>
	<f5eea9171001221704q7468bbf9ya5edc6adf5a8203e@mail.gmail.com>
Message-ID: <12aaa0811001231140u9926f1u32df465380877726@mail.gmail.com>

On Fri, Jan 22, 2010 at 8:04 PM, Tristan Seligmann
<mithrandi at mithrandi.net> wrote:
> On Sat, Jan 23, 2010 at 1:40 AM, Mikhail Terekhov <termim at gmail.com> wrote:
>> So why reactor never stops if it was never run? What it is doing?
>
> You call reactor.stop(); this does nothing but produce a delayed
> exception. You then call reactor.run(), which runs the reactor. You
> then never call reactor.stop() again, and thus the reactor continues
> running forever.

Tank you! I see now, it is very simple indeed!


-- 
Mikhail Terekhov


From exarkun at twistedmatrix.com  Sun Jan 24 00:05:21 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Jan 2010 05:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1264309521.01.128113016@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100124/5211641a/attachment.htm 

From alexandre at quessy.net  Sun Jan 24 23:40:16 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 24 Jan 2010 23:40:16 -0500
Subject: [Twisted-Python] python-purity
Message-ID: <72236ba91001242040q370e7263o27789f67cecfddab@mail.gmail.com>

Hello eveyone,
I think it is nice to mention this announce here, since Purity heavily
uses Twisted. (as well all my other Python projects, such as Toonloop,
and others)

Purity is a Python library for Pure Data dynamic patching. The idea is
to be able to harness the power of Pure Data for audio programming
without having to use its graphical interface, and without the need to
create external objects in C. Python's clear and intuitive syntax can
be used with profit in order to create intricate patches with advanced
string handling, graphical user interfaces and asynchronous network
operations. Purity uses Twisted, an event-driven Python framework.

Pure Data is a real-time graphical programming environment mainly for
audio processing. See http://puredata.info/ to learn more about Pure
Data.

It seems like there are people interested in using Purity, so I have
created a mailing list to discuss its further developments. I am ready
to put some time and efforts in Purity, and even to explain basic of
the Twisted library, if there are people who help me to make design
decisions and to test it. You can find out how to subscribe to the
mailing list by visiting the official wiki portal of Purity at
http://wiki.dataflow.ws/Purity

-- 
Alexandre Quessy
http://alexandre.quessy.net/


From wolfgang at rohdewald.de  Mon Jan 25 03:35:03 2010
From: wolfgang at rohdewald.de (Wolfgang Rohdewald)
Date: Mon, 25 Jan 2010 09:35:03 +0100
Subject: [Twisted-Python] Kajongg - a new game base on PyQt and twisted
Message-ID: <201001250935.14324.wolfgang@rohdewald.de>

I would like to announce Kajongg - it is a Mah Jongg game 
(not yet another solitaire but the real game for four 
players). It is written 100% in python and regular
expressions. The GUI is done with PyQt4, and the
network part is written using twisted.

Dear twisted people - you have a list of projects using
twisted - if you want to add Kajongg, please go ahead!

http://www.kde-apps.org/content/show.php/kajongg?content=103206

source code:

svn co svn://anonsvn.kde.org/home/kde/trunk/playground/games/kajongg

-- 
Wolfgang


From k_r_a_j_kumar at yahoo.co.in  Mon Jan 25 10:40:15 2010
From: k_r_a_j_kumar at yahoo.co.in (Raj kumar)
Date: Mon, 25 Jan 2010 21:10:15 +0530 (IST)
Subject: [Twisted-Python] upload and receive
Message-ID: <50253.9632.qm@web8706.mail.in.yahoo.com>

Hi,
Currently I'm using twisted.web api for my http server.
If I have to implement a file upload from client, is it possible to receive a file at server end using twisted.web? or should I move to twisted.web2?
but I read twisted.web2 is not stable(that too, I may have to change my code for a shift).
Any sample references (using twisted.web api) to receive a file from client is appreciated.

Thanks in advance.

Raj.



      The INTERNET now has a personality. YOURS! See your Yahoo! Homepage. http://in.yahoo.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100125/94563646/attachment.htm 

From gabriel.rossetti at arimaz.com  Tue Jan 26 04:52:09 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Tue, 26 Jan 2010 10:52:09 +0100
Subject: [Twisted-Python] How to diagnose slowness
Message-ID: <4B5EBB49.9070504@arimaz.com>

Hello everyone,

I have noticed slowness sometimes in between two twisted apps. It 
doesn't happen often,
and I'm not sure where it comes from. It may either be when the msg is 
sent, that it really
isn't sent until after a delay (why?), or when the other service 
receives it, it takes time to
process the msg. The second idea may be easier to find, I haven't been 
able to though. If
I send the same msg, sometimes it's slowed down, and sometimes not. From 
what I see
both of my suggestions may be happening. These msgs are XMPP based and 
I'm using
Twisted 8.1.0. Does anyone have any tips on diagnosing this problem?

Thank you,
Gabriel


From exarkun at twistedmatrix.com  Tue Jan 26 07:43:58 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 26 Jan 2010 12:43:58 -0000
Subject: [Twisted-Python] How to diagnose slowness
In-Reply-To: <4B5EBB49.9070504@arimaz.com>
References: <4B5EBB49.9070504@arimaz.com>
Message-ID: <20100126124358.1898.199587131.divmod.xquotient.660@localhost.localdomain>

On 09:52 am, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>I have noticed slowness sometimes in between two twisted apps. It
>doesn't happen often,
>and I'm not sure where it comes from. It may either be when the msg is
>sent, that it really
>isn't sent until after a delay (why?), or when the other service
>receives it, it takes time to
>process the msg. The second idea may be easier to find, I haven't been
>able to though. If
>I send the same msg, sometimes it's slowed down, and sometimes not. 
>From
>what I see
>both of my suggestions may be happening. These msgs are XMPP based and
>I'm using
>Twisted 8.1.0. Does anyone have any tips on diagnosing this problem?

Instrument the programs involved until you can isolate where the delay 
actually happens.

Jean-Paul


From theiklabs at gmail.com  Tue Jan 26 16:40:43 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Tue, 26 Jan 2010 16:40:43 -0500
Subject: [Twisted-Python] Twisted newb I can't add a cred checker to a
	Factory class
Message-ID: <2a30f70a1001261340r55c17dd2x98f5df7332815f8e@mail.gmail.com>

class ProxyIncomingProtocol(Protocol):
.....

class ProxyOutgoingProtocol(Protocol):
.....

class ProxyFactory(Factory):

    protocol = ProxyIncomingProtocol

class SimplePerspective(pb.Avatar):

    def perspective_echo(self, text):
        print 'echoing',text
        return text

    def logout(self):
        print self, "logged out"


class SimpleRealm:
    implements(IRealm)

    def requestAvatar(self, avatarId, mind, *interfaces):
        if pb.IPerspective in interfaces:
            avatar = SimplePerspective()
            return pb.IPerspective, avatar, avatar.logout
        else:
            raise NotImplementedError("no interface")

portal = Portal(SimpleRealm())
checker = InMemoryUsernamePasswordDatabaseDontUse()
checker.addUser("guest", "password")
portal.registerChecker(checker)


proxy_factory = proxy.ProxyFactory()
# ??????? how can I add the portal to the factory?
internet.GenericServer(cometsession.Port, factory=proxy_factory,
resource=root_resource, childName="tcp",
interface=INTERFACE).setServiceParent(serviceCollection)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100126/239412c6/attachment.htm 

From donal.mcmullan at gmail.com  Tue Jan 26 23:50:14 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Wed, 27 Jan 2010 17:50:14 +1300
Subject: [Twisted-Python] Many connections and TIME_WAIT
Message-ID: <634095dc1001262050t5b5e54eayd2de93afa013f3b2@mail.gmail.com>

I've been prototyping a client that connects to thousands of servers and
calls some method. It's not real important to me at this stage whether
that's via xmlrpc, perspective broker, or something else.

What seems to happen on the client machine is that each network connection
that gets opened and then closed goes into a TIME_WAIT state, and eventually
there are so many connections in that state that it's impossible to create
any more.

I'm keeping an eye on the output of
netstat -an | wc -l
Initially I've got 569 entries there. When I run my test client, that ramps
up really quickly and peaks at about 2824. At that point, the client reports
a callRemoteFailure:

callRemoteFailure [Failure instance: Traceback (failure with no frames):
<class 'twisted.internet.error.ConnectionLost'>: Connection to the other
side was lost in a non-clean fashion: Connection lost.

Increasing the file descriptor limits doesn't seem to have any effect on
this.

Is there an established Twisted sanctioned canonical way to free up this
resource? Or am I doing something wrong? I'm looking into tweaking
SO_REUSEADDR and SO_LINGER - that sound sane?

Just tapping the lazywebs to see if anyone's already seen this in the wild.

Thanks guys

Donal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100127/68ab5c5b/attachment.htm 

From exarkun at twistedmatrix.com  Wed Jan 27 07:51:42 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 27 Jan 2010 12:51:42 -0000
Subject: [Twisted-Python] Twisted newb I can't add a cred checker to
	a	Factory class
In-Reply-To: <2a30f70a1001261340r55c17dd2x98f5df7332815f8e@mail.gmail.com>
References: <2a30f70a1001261340r55c17dd2x98f5df7332815f8e@mail.gmail.com>
Message-ID: <20100127125142.1898.431074259.divmod.xquotient.791@localhost.localdomain>

On 26 Jan, 09:40 pm, theiklabs at gmail.com wrote:
>class ProxyIncomingProtocol(Protocol):
>.....
>
>class ProxyOutgoingProtocol(Protocol):
>.....
>
>class ProxyFactory(Factory):
>
>    protocol = ProxyIncomingProtocol
>
>class SimplePerspective(pb.Avatar):
>
>    def perspective_echo(self, text):
>        print 'echoing',text
>        return text
>
>    def logout(self):
>        print self, "logged out"
>
>
>class SimpleRealm:
>    implements(IRealm)
>
>    def requestAvatar(self, avatarId, mind, *interfaces):
>        if pb.IPerspective in interfaces:
>            avatar = SimplePerspective()
>            return pb.IPerspective, avatar, avatar.logout
>        else:
>            raise NotImplementedError("no interface")
>
>portal = Portal(SimpleRealm())
>checker = InMemoryUsernamePasswordDatabaseDontUse()
>checker.addUser("guest", "password")
>portal.registerChecker(checker)
>
>
>proxy_factory = proxy.ProxyFactory()
># ??????? how can I add the portal to the factory?
>internet.GenericServer(cometsession.Port, factory=proxy_factory,
>resource=root_resource, childName="tcp",
>interface=INTERFACE).setServiceParent(serviceCollection)

It doesn't make any sense to ask how to "add a portal to a factory". 
Your protocol implementation needs to support twisted.cred.  In the code 
you included, I don't see any evidence of such support.

Also, with the unexplained mix of two "proxying" protocols (with their 
implementations omitted), various classes from Twisted Spread (but not 
enough to actually establish a PB connection as far as I can tell), and 
something called "cometsession", it's hard to tell what you're actually 
trying to accomplish, so I don't have any more specific suggestions to 
make.

Jean-Paul


From exarkun at twistedmatrix.com  Wed Jan 27 08:05:16 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 27 Jan 2010 13:05:16 -0000
Subject: [Twisted-Python] Many connections and TIME_WAIT
In-Reply-To: <634095dc1001262050t5b5e54eayd2de93afa013f3b2@mail.gmail.com>
References: <634095dc1001262050t5b5e54eayd2de93afa013f3b2@mail.gmail.com>
Message-ID: <20100127130516.1898.1655832039.divmod.xquotient.807@localhost.localdomain>

On 04:50 am, donal.mcmullan at gmail.com wrote:
>I've been prototyping a client that connects to thousands of servers 
>and
>calls some method. It's not real important to me at this stage whether
>that's via xmlrpc, perspective broker, or something else.
>
>What seems to happen on the client machine is that each network 
>connection
>that gets opened and then closed goes into a TIME_WAIT state, and 
>eventually
>there are so many connections in that state that it's impossible to 
>create
>any more.

Yep.  That's what happens to a TCP connection when you close it.
>
>I'm keeping an eye on the output of
>netstat -an | wc -l
>Initially I've got 569 entries there. When I run my test client, that 
>ramps
>up really quickly and peaks at about 2824. At that point, the client 
>reports
>a callRemoteFailure:

Presumably these numbers have something to do with how quickly you're 
opening and closing new connections.  TIME_WAIT lasts for 2MSL (4 
minutes) to ensure that a future connection doesn't receive data 
intended for a previous connection (clearly a bad thing).

However... 2824 is a pretty low number at which to run out of sockets. 
Perhaps you're running this software on Windows?  I think Windows has a 
ridiculously small number of "client sockets" allocated by default.  I 
seem to recall this being something you can change with a registry edit 
or something like that.

Another option would be to switch to a POSIX-platform instead.

If you're *not* on Windows, then this is odd and perhaps bears further 
scrutiny.
>
>callRemoteFailure [Failure instance: Traceback (failure with no 
>frames):
><class 'twisted.internet.error.ConnectionLost'>: Connection to the 
>other
>side was lost in a non-clean fashion: Connection lost.

This isn't exactly how I'd expect it to fail, but I also don't know what 
"callRemoteFailure" is or where it comes from, so maybe that's not too 
surprising.
>Increasing the file descriptor limits doesn't seem to have any effect 
>on
>this.

Quite so.  The process has, after all, already closed these sockets. 
They no longer count towards the process's file descriptor limit (oh 
dear, I suppose you're not using Windows if you have a file descriptor 
limit to raise).
>
>Is there an established Twisted sanctioned canonical way to free up 
>this
>resource? Or am I doing something wrong? I'm looking into tweaking
>SO_REUSEADDR and SO_LINGER - that sound sane?
>
>Just tapping the lazywebs to see if anyone's already seen this in the 
>wild.

On most reasonably configured Linux machines, you shouldn't run into 
this problem until you're doing at least an order of magnitude more 
work.  Many times, I have run clients that do many thousands of new 
connections per second, resulting in tens of thousands of TIME_WAIT 
sockets on the system with no problem.  So, I'm not sure why you're 
running into this after only a few thousand.

Jean-Paul


From petshmidt at googlemail.com  Thu Jan 28 03:46:19 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 28 Jan 2010 09:46:19 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <4B5A16E0.4040206@gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com> 
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org> 
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com> 
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com> 
	<4B5A16E0.4040206@gmail.com>
Message-ID: <b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>

On Fri, Jan 22, 2010 at 10:21 PM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
> On 1/22/10 3:15 AM, Pet wrote:
>> On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
>>> On 1/21/10 11:17 AM, Pet wrote:
>>>> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>>>> <maarten at treewalker.org> wrote:
>>>>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>>>>
>>>>>> This can occur if you have multiple instances of logfile.LogFile setup
>>>>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>>>>> another logfile.LogFile somewhere?
>>>>> Maybe twistd's log rotation?
>>>> Yes, may be. I start my daemon with
>>>> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>>>> --pidfile=/var/lock/mydaemon.pid
>>>>
>>>> How do I start twistd, so it doesn't produce own log file?
>>>>
>>>> Thanks for help!
>>>>
>>>> Pet
>>>>
>>> You can customize the application to use your logfile and observer:
>>> http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>>>
>>> e.g
>>> class MyLog(log.FileLogObserver):
>>> ? ?def emit(self, logEntryDict):
>>> ? ? ? ?log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
>>> ? ? ? ?log.FileLogObserver.emit(self, logEntryDict)
>>>
>>> maxLogSize = 5000000
>>> logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
>>> maxRotatedFiles=50)
>>>
>>> application = service.Application("myapp")
>>> application.setComponent(log.ILogObserver, MyLog(logFile).emit)
>>
>> Thanks for suggestion. I'll try it out as soon as I can. Currently I
>> do it in that way:
>>
>> application = service.Application("MyService")
>> myLogService = myLogService(LOG_NAME, LOG_DIR)
>> myLogService.setServiceParent(application)
>>
>>
>> what is the difference between creating service and setting
>> setServiceParent and setComponent?
>>
>> Pet
>>
> http://twistedmatrix.com/documents/current/core/howto/application.html
>
> The important aspect is the setComponent api. This is the part that lets
> you override the default logging behavior of twistd. It has nothing to
> do with the services that you register with the application using
> setServiceParent.
>
> If your MyLogService only does what you originally posted, you probably
> don't need all of that machinery. Using twistd will take care of
> starting and stopping logging for you.
>
> But, if you really want to use your service (say you want to force
> rotation on a restart), then you can do so. You just need to set the
> ILogObserver component on the application using your observer's emit
> function.
>
> e.g
>
> application = service.Application("MyService")
> myLogService = myLogService(LOG_NAME, LOG_DIR)
> myLogService.setServiceParent(application)
> application.setComponent(log.ILogObserver, myLogService.loclog.emit)
>
> Note that this won't work with your original MyLogService implementation
> without some reorganization (move logfile and loclog creation up to
> __init__)
>

Hi,

I'm getting an error while starting my service:

Failed to load application: 'module' object has no attribute 'ILogObserver'

I've imported log with

from twisted.python import log


Have no idea what is wrong...


Pet


>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From twisted at ralphm.ik.nu  Thu Jan 28 03:58:45 2010
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Thu, 28 Jan 2010 09:58:45 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org>
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
	<4B5A16E0.4040206@gmail.com>
	<b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>
Message-ID: <1264669125.2486.33.camel@dwaal>

On Thu, 2010-01-28 at 09:46 +0100, Pet wrote:
> [..]
>
> I'm getting an error while starting my service:
> 
> Failed to load application: 'module' object has no attribute 'ILogObserver'

ILogObserver was introduced in Twisted 8.2. You are probably using an
older version.

ralphm



From petshmidt at googlemail.com  Thu Jan 28 03:58:34 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 28 Jan 2010 09:58:34 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com> 
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org> 
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com> 
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com> 
	<4B5A16E0.4040206@gmail.com>
	<b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>
Message-ID: <b460e9631001280058s4c6678a3ufe83135135ac4208@mail.gmail.com>

On Thu, Jan 28, 2010 at 9:46 AM, Pet <petshmidt at googlemail.com> wrote:
> On Fri, Jan 22, 2010 at 10:21 PM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
>> On 1/22/10 3:15 AM, Pet wrote:
>>> On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
>>>> On 1/21/10 11:17 AM, Pet wrote:
>>>>> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>>>>> <maarten at treewalker.org> wrote:
>>>>>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>>>>>
>>>>>>> This can occur if you have multiple instances of logfile.LogFile setup
>>>>>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>>>>>> another logfile.LogFile somewhere?
>>>>>> Maybe twistd's log rotation?
>>>>> Yes, may be. I start my daemon with
>>>>> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>>>>> --pidfile=/var/lock/mydaemon.pid
>>>>>
>>>>> How do I start twistd, so it doesn't produce own log file?
>>>>>
>>>>> Thanks for help!
>>>>>
>>>>> Pet
>>>>>
>>>> You can customize the application to use your logfile and observer:
>>>> http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>>>>
>>>> e.g
>>>> class MyLog(log.FileLogObserver):
>>>> ? ?def emit(self, logEntryDict):
>>>> ? ? ? ?log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
>>>> ? ? ? ?log.FileLogObserver.emit(self, logEntryDict)
>>>>
>>>> maxLogSize = 5000000
>>>> logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
>>>> maxRotatedFiles=50)
>>>>
>>>> application = service.Application("myapp")
>>>> application.setComponent(log.ILogObserver, MyLog(logFile).emit)
>>>
>>> Thanks for suggestion. I'll try it out as soon as I can. Currently I
>>> do it in that way:
>>>
>>> application = service.Application("MyService")
>>> myLogService = myLogService(LOG_NAME, LOG_DIR)
>>> myLogService.setServiceParent(application)
>>>
>>>
>>> what is the difference between creating service and setting
>>> setServiceParent and setComponent?
>>>
>>> Pet
>>>
>> http://twistedmatrix.com/documents/current/core/howto/application.html
>>
>> The important aspect is the setComponent api. This is the part that lets
>> you override the default logging behavior of twistd. It has nothing to
>> do with the services that you register with the application using
>> setServiceParent.
>>
>> If your MyLogService only does what you originally posted, you probably
>> don't need all of that machinery. Using twistd will take care of
>> starting and stopping logging for you.
>>
>> But, if you really want to use your service (say you want to force
>> rotation on a restart), then you can do so. You just need to set the
>> ILogObserver component on the application using your observer's emit
>> function.
>>
>> e.g
>>
>> application = service.Application("MyService")
>> myLogService = myLogService(LOG_NAME, LOG_DIR)
>> myLogService.setServiceParent(application)
>> application.setComponent(log.ILogObserver, myLogService.loclog.emit)
>>
>> Note that this won't work with your original MyLogService implementation
>> without some reorganization (move logfile and loclog creation up to
>> __init__)
>>
>
> Hi,
>
> I'm getting an error while starting my service:
>
> Failed to load application: 'module' object has no attribute 'ILogObserver'
>
> I've imported log with
>
> from twisted.python import log
>
>
> Have no idea what is wrong...

Ok, there is no ILogObserver in log module.
I've Twisted 8.1.0 installed.

>
>
> Pet
>
>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>


From msoulier at digitaltorque.ca  Thu Jan 28 17:28:38 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Thu, 28 Jan 2010 17:28:38 -0500
Subject: [Twisted-Python] understanding deferreds
Message-ID: <20100128222837.GA5449@anton.digitaltorque.ca>

Hello,

I've been reading up on this

http://twistedmatrix.com/documents/current/core/howto/defer.html

I'm a bit confused as to the "visual explanation". It seems like if you have a
single callback and errback, that if the errback wants to swallow the error,
the callback will not be called at all, since deferred processing will look
for the second callback at that point by the diagram.

So, right now I'm calling my own callback from the errback if I want to
swallow the error. Is there a better way?

Thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 190 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100128/8f61cf29/attachment.pgp 

From exarkun at twistedmatrix.com  Thu Jan 28 17:39:03 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 28 Jan 2010 22:39:03 -0000
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <20100128222837.GA5449@anton.digitaltorque.ca>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
Message-ID: <20100128223903.1898.823072942.divmod.xquotient.930@localhost.localdomain>

On 10:28 pm, msoulier at digitaltorque.ca wrote:
>Hello,
>
>I've been reading up on this
>
>http://twistedmatrix.com/documents/current/core/howto/defer.html
>
>I'm a bit confused as to the "visual explanation". It seems like if you 
>have a
>single callback and errback, that if the errback wants to swallow the 
>error,
>the callback will not be called at all, since deferred processing will 
>look
>for the second callback at that point by the diagram.

There are at least three ways you can have a single callback and 
errback:

   d.addCallback(cb)
   d.addErrback(eb)

or

   d.addErrback(eb)
   d.addCallback(cb)

or

   d.addCallbacks(cb, eb)

All three of these do something different.
>So, right now I'm calling my own callback from the errback if I want to
>swallow the error. Is there a better way?

It sounds like you want the middle option above.

Jean-Paul


From terry at jon.es  Thu Jan 28 17:46:08 2010
From: terry at jon.es (Terry Jones)
Date: Thu, 28 Jan 2010 17:46:08 -0500
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: Your message at 17:28:38 on Thursday, 28 January 2010
References: <20100128222837.GA5449@anton.digitaltorque.ca>
Message-ID: <19298.5040.965899.805489@jon.es>

>>>>> "Michael" == Michael P Soulier <msoulier at digitaltorque.ca> writes:

Michael> I'm a bit confused as to the "visual explanation". It seems like
Michael> if you have a single callback and errback, that if the errback
Michael> wants to swallow the error, the callback will not be called at
Michael> all, since deferred processing will look for the second callback
Michael> at that point by the diagram.

Michael> So, right now I'm calling my own callback from the errback if I
Michael> want to swallow the error. Is there a better way?

Yes. Add the errback to the deferred and then add the callback.

  d = somethingReturningADeferred()
  d.addErrback(cleanup)
  d.addCallback(dealWithResult)

If cleanup doesn't return the failure object it's passed or raise some an
exception, processing will pass to dealWithResult. Note that dealWithResult
will get as an argument whatever cleanup returns (that means None if cleanup
doesn't explicitly return something).

You're thinking about this in the right way. Understanding the difference
between the above and 

  d = somethingReturningADeferred()
  d.addCallbacks(dealWithResult, cleanup)

is important.

Terry


From mithrandi at mithrandi.net  Thu Jan 28 17:56:55 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 29 Jan 2010 00:56:55 +0200
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <20100128223903.1898.823072942.divmod.xquotient.930@localhost.localdomain>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<20100128223903.1898.823072942.divmod.xquotient.930@localhost.localdomain>
Message-ID: <f5eea9171001281456y2d54a967ja01fdf0b9519db3c@mail.gmail.com>

On Fri, Jan 29, 2010 at 12:39 AM,  <exarkun at twistedmatrix.com> wrote:
> There are at least three ways you can have a single callback and
> errback:
>
> ? d.addCallback(cb)
> ? d.addErrback(eb)
>
> or
>
> ? d.addErrback(eb)
> ? d.addCallback(cb)

Just to expand on exarkun's answer a little, it might help to
understand that addCallback and addErrback are simply implemented in
terms of addCallbacks. Roughly:

def passthru(arg):
    return arg

d.addCallback(cb) is equivalent to d.addCallbacks(cb, passthru)

d.addErrback(eb) is equivalent to d.addCallbacks(passthru, eb)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From msoulier at digitaltorque.ca  Thu Jan 28 20:57:13 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Thu, 28 Jan 2010 20:57:13 -0500
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <f5eea9171001281456y2d54a967ja01fdf0b9519db3c@mail.gmail.com>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<20100128223903.1898.823072942.divmod.xquotient.930@localhost.localdomain>
	<f5eea9171001281456y2d54a967ja01fdf0b9519db3c@mail.gmail.com>
Message-ID: <20100129015713.GB11163@kostya.digitaltorque.ca>

On 29/01/10 Tristan Seligmann said:

> Just to expand on exarkun's answer a little, it might help to
> understand that addCallback and addErrback are simply implemented in
> terms of addCallbacks. Roughly:
> 
> def passthru(arg):
>     return arg
> 
> d.addCallback(cb) is equivalent to d.addCallbacks(cb, passthru)
> 
> d.addErrback(eb) is equivalent to d.addCallbacks(passthru, eb)

I think I understand now. I don't think it's adequately explained here

http://twistedmatrix.com/documents/current/core/howto/defer.html

but the diagram makes more sense now.

Thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100128/55e7bcbe/attachment.pgp 

From twisted-web at udmvt.ru  Fri Jan 29 05:17:22 2010
From: twisted-web at udmvt.ru (twisted-web at udmvt.ru)
Date: Fri, 29 Jan 2010 14:17:22 +0400
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <19298.5040.965899.805489@jon.es>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
Message-ID: <20100129101722.GX23607@ruber.office.udmvt.ru>

On Thu, Jan 28, 2010 at 05:46:08PM -0500, Terry Jones wrote:
> >>>>> "Michael" == Michael P Soulier <msoulier at digitaltorque.ca> writes:
> 
> Michael> I'm a bit confused as to the "visual explanation". It seems like
> Michael> if you have a single callback and errback, that if the errback
> Michael> wants to swallow the error, the callback will not be called at
> Michael> all, since deferred processing will look for the second callback
> Michael> at that point by the diagram.
> 
> Michael> So, right now I'm calling my own callback from the errback if I
> Michael> want to swallow the error. Is there a better way?
> 
> Yes. Add the errback to the deferred and then add the callback.
> 
>   d = somethingReturningADeferred()
>   d.addErrback(cleanup)
>   d.addCallback(dealWithResult)
> 
> If cleanup doesn't return the failure object it's passed or raise some an
> exception, processing will pass to dealWithResult. Note that dealWithResult
> will get as an argument whatever cleanup returns (that means None if cleanup
> doesn't explicitly return something).
> 
> You're thinking about this in the right way. Understanding the difference
> between the above and 
> 
>   d = somethingReturningADeferred()
>   d.addCallbacks(dealWithResult, cleanup)
> 
> is important.

Is it true, that adding many callback functions as filters is elegant,
but impractical solution?
Since there is only a [linear] list of pairs (callback, errback), the last errbacks
have to be complex to distinguish the failures, that came from the previous callback
from failures, that traverse the errback chain from the beginning.

Should I only use errbacks as a means of catching errors only from who have produced the Deferred?
And never use them to catch errors, that came from my callbacks?

Nevertheless the Deferred mechanism always catch the exceptions in my callbacks,
I have to always catch them myself and never let them out uncontrolled (since I cannot
distinguish, say TypeError that came from the first callback from TypeError, that came
from the next callback, and they are not the same for me, since I try to do a cleanup)?
But then I have to translate all errors to my invented exceptions, so they will differ.

Or may I pause() a Deferred in a errback, after I have processed the error and want no
error propagation any further?
If I can pause(), what can I do if my code is not the final consumer of the Deferred's
result, but lives in the middle of the processing chain and have to pass the signal, that there
will be no further result, so the consumer will do appropriately?

Maybe we need graph of callbacks (or just tree)? 
Or, said in other words, groups of callbacks (to be able to exit the processing
of the current group on some failures)?

Or just tell me, that I have missed something, I'm still getting into the theme!

Thanks!

> 
> Terry
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Alexey S


From eric.mangold at nunatak.com.au  Fri Jan 29 10:19:42 2010
From: eric.mangold at nunatak.com.au (Eric Mangold)
Date: Fri, 29 Jan 2010 09:19:42 -0600
Subject: [Twisted-Python] exarkun changed [#3078 - Dynamic ZSH tab
	completion for any commands using t.p.usage]
In-Reply-To: <E1NarsS-00033s-CR@cube.twistedmatrix.com>
References: <E1NarsS-00033s-CR@cube.twistedmatrix.com>
Message-ID: <481d6b881001290719l6abdccdexbf4c0cf204a118b@mail.gmail.com>

top o' the mornin' to all

willfix. need a few days yet, but i'll correct the outstanding issues,
forward-merge my branch, and try to cross every T and dot every I and
maybe someone will just unmerge the whole thing for me in the
mean-time.

On Fri, Jan 29, 2010 at 8:31 AM,  <trac at twistedmatrix.com> wrote:
> Ticket [#3078 - Dynamic ZSH tab completion for any commands using t.p.usage] changed by exarkun <exarkun at twistedmatrix.com>:
>
> `twisted/python/zshcomp.py` no longer works in trunk.
>
> ---------
>
> ---------
> http://twistedmatrix.com/trac/ticket/3078
>


From andrew at bemusement.org  Sat Jan 30 02:16:01 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sat, 30 Jan 2010 18:16:01 +1100
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <20100129101722.GX23607@ruber.office.udmvt.ru>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
	<20100129101722.GX23607@ruber.office.udmvt.ru>
Message-ID: <20100130071601.GC2456@steerpike.home.puzzling.org>

twisted-web at udmvt.ru wrote:
[...]
> Is it true, that adding many callback functions as filters is elegant,
> but impractical solution?
> Since there is only a [linear] list of pairs (callback, errback), the last errbacks
> have to be complex to distinguish the failures, that came from the previous callback
> from failures, that traverse the errback chain from the beginning.

This is no different to regular Python code, which has a linear call stack which
can have exception handlers at any point on the stack.  The exact same tradeoffs
apply about which exceptions to raise and which to catch, and at what points.

-Andrew.



From exarkun at twistedmatrix.com  Sun Jan 31 00:05:35 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 31 Jan 2010 05:05:35 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1264914335.71.75690667@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100131/b9fcaafa/attachment.htm 

From exarkun at twistedmatrix.com  Sun Jan 31 17:26:14 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 31 Jan 2010 22:26:14 -0000
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
Message-ID: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>

Hi all,

If there are enough interested people, there will be a Twisted sprint at 
PyCon this year.  If you'll be at PyCon and are interested in sprinting 
on some Twisted topic, give a shout.  Also, let us know what specific 
topics you're interested in so we can let other people know what to 
expect in the general announcement.

Jean-Paul


From glyph at twistedmatrix.com  Sun Jan 31 19:05:00 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 31 Jan 2010 19:05:00 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <D685EBDD-3589-43CF-A838-CA02408D5F42@twistedmatrix.com>

On Jan 31, 2010, at 5:26 PM, exarkun at twistedmatrix.com wrote:

> If there are enough interested people, there will be a Twisted sprint at 
> PyCon this year.  If you'll be at PyCon and are interested in sprinting 
> on some Twisted topic, give a shout.  Also, let us know what specific 
> topics you're interested in so we can let other people know what to 
> expect in the general announcement.

I will be there for one day of the sprints.  I'm interested in web2, deferred cancellation, endpoints, and getting a new release out.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100131/822125c1/attachment.htm 

From terry at jon.es  Sun Jan 31 19:19:19 2010
From: terry at jon.es (Terry Jones)
Date: Sun, 31 Jan 2010 19:19:19 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: Your message at 19:05:00 on Sunday, 31 January 2010
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<D685EBDD-3589-43CF-A838-CA02408D5F42@twistedmatrix.com>
Message-ID: <19302.7687.439727.472561@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> I will be there for one day of the sprints.  I'm interested in web2,
Glyph> deferred cancellation, endpoints, and getting a new release out.

I could probably stay for most/all of the 22nd. Doing some work on deferred
cancellation would be good.

Terry


From glyph at twistedmatrix.com  Fri Jan  1 03:05:00 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 1 Jan 2010 05:05:00 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 3
In-Reply-To: <562bcc10912301607t14df31md1ce470ddc1f1d8b@mail.gmail.com>
References: <562bcc10912301205n5e44995tb2eb04e3da9805cc@mail.gmail.com>
	<562bcc10912301607t14df31md1ce470ddc1f1d8b@mail.gmail.com>
Message-ID: <CA55AE11-833B-45F9-AD2F-11DBE0D109C8@twistedmatrix.com>


On Dec 30, 2009, at 7:07 PM, Kevin Horn wrote:

> Another quick update...

Keep up the good work!

> - added "stub" sphinx projects for Divmod Nevow, Mantissa, and Epsilon.  I've converted the docs for these projects and built them (mostly) successfully, but I haven't published them anywhere yet (coming soon).  Have I missed any other Divmod projects with Lore docs?

Nope, that's all of them.




From glyph at twistedmatrix.com  Fri Jan  1 03:10:25 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 1 Jan 2010 05:10:25 -0500
Subject: [Twisted-Python] how manual run LoopingCall.f
In-Reply-To: <d59a94870912280505i4f32e7b6vcb9f197fb47c9833@mail.gmail.com>
References: <d59a94870912280505i4f32e7b6vcb9f197fb47c9833@mail.gmail.com>
Message-ID: <A326B8CC-44FA-47C6-9FFD-C32B81895172@twistedmatrix.com>


On Dec 28, 2009, at 8:05 AM, ploutosss ploutosss wrote:

> When I need to perform some function with a time interval of less than
> one second, LoopingCall too slow.

LoopingCall was originally designed for playback of voice samples, in an application which did that once every 10ms, or 0.01 seconds.  It should really be fast enough for you: if it is really too slow, I am guessing that something else is wrong.

> I try use my ticking, but for
> function is not executed too often, I used the following code:
> 
>    def some_function(self):
>        looping_instance = self.looping
>        call = looping_instance.call
>        if call and call.time - call.seconds() <= 0:
>            looping_instance()

This example isn't complete, so I am not sure what the problem is, but I can guess that 'looping_instance' is a LoopingCall instance.  You should not be calling it using __call__ (really, this method is just a cute hack so that the LoopingCall instance can be passed directly to callLater, and show up in the DelayedCall repr, among other things), you should be using its "start" method.

Good luck!


From terry at jon.es  Sat Jan  2 07:34:09 2010
From: terry at jon.es (Terry Jones)
Date: Sat, 2 Jan 2010 15:34:09 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
Message-ID: <19263.22881.934832.166484@jon.es>

I've run into a problem fetching an HTTP page with t.w.client.getPage. It's
not simple to make standalone code showing what's going wrong, but the
following summarizes where I am and why I find this puzzling.

After some setup, I have some a url path, and some headers I want to
send. A summary:

    host = 'ec2.amazon.com'
    port = 443
    path = '/?some=params&are=here&etc=etc'
    method = 'GET'
    data = ''
    headers = { 'some' : 'headers', 'Content-Length' : '0' }
    url = 'https://%s:%d%s' % (host, port, path)

the actual details don't matter right now, I don't think.  When I call

  d = getPage(url, headers=headers)

d's errback fires with a twisted.web.error.Error with a 403 status. So
you'd think I had something wrong in my headers, or was trying to access a
forbidden resource, etc.

But.... when I drop this code in instead of the call to getPage:

    import httplib
    cx = httplib.HTTPSConnection(host, port)
    cx.request(method, path, data, headers)
    response = cx.getresponse()
    print 'response status:', response.status
    body = response.read()
    print 'body:', body

I get a 200 status, and the body is exactly as expected.

BTW, the path above does start with a slash. I've tried using
HTTPClientFactory and reactor.connectSSL directly.  I've tried with and
without the '' postdata and Content-Length header. I've tried with Twisted
8.2.0 and 9.0.0.  And of course I've checked many times that the URL and
its query params requested by httplib and getPage are identical (apart from
the time-sensitive signature).

The reason it's not easy to provide a simple example is that the URL and
headers have signed components, based in part on a timestamp, and based in
part on Amazon secret keys, etc. It's not easy to separate all that, and if
I did I'd be posting at least 100 lines of code that would only run if you
had your Amazon AWS details provided etc.

In any case, it looks like the problem is not in the setup of the request.
Can anyone offer a reason why httplib might be able to fetch the page
whereas getPage receives an error?  I'm stumped.

Terry



From ssteinerx at gmail.com  Sat Jan  2 08:03:16 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 2 Jan 2010 10:03:16 -0500
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: <19263.22881.934832.166484@jon.es>
References: <19263.22881.934832.166484@jon.es>
Message-ID: <28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>


On Jan 2, 2010, at 9:34 AM, Terry Jones wrote:
> In any case, it looks like the problem is not in the setup of the request.
> Can anyone offer a reason why httplib might be able to fetch the page
> whereas getPage receives an error?  I'm stumped.

I've had to debug things like this recently and I have two suggestions:

1> Recreate the headers and make it work with curl.  Curl won't add anything to your headers and such and you'll be sure that you're getting the result you want with completely stripped down case.

2>	Get Charles http://www.charlesproxy.com/ if you're on OS X.  It rocks.  Otherwise, get one of the Windows tools (sorry, no recos from me on that), and watch exactly what goes by.

I had a situation where python's HTTPlib stuff was adding an Accept Encoding header that didn't put there, and it exposed a bug in the API I was using.  When I ran it with curl, worked fine since no additional headers were added.  Charles helped me see what was going on (unfortunately, long after they had fixed that particular bug in the API.

S
aka/Steve Steiner
aka/ssteinerX




From ssteinerx at gmail.com  Sat Jan  2 08:07:02 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 2 Jan 2010 10:07:02 -0500
Subject: [Twisted-Python] Fwd:  Problem fetching page with getPage
References: <mailman.121033.1262444732.23374.twisted-python@twistedmatrix.com>
Message-ID: <B5E47A4C-55AA-4C36-B8B4-BD3741F2EABA@gmail.com>


Sorry...

>> I had a situation where python's HTTPlib stuff was adding an Accept Encoding header
>> that didn't put there,

that I didn't put there,





From andreas at kostyrka.org  Sat Jan  2 08:36:09 2010
From: andreas at kostyrka.org (Andreas Kostyrka)
Date: Sat, 02 Jan 2010 16:36:09 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: <28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
References: <19263.22881.934832.166484@jon.es>
	<28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
Message-ID: <1262446569.9296.1045.camel@andidesk.lan>

Am Samstag, den 02.01.2010, 10:03 -0500 schrieb ssteinerX at gmail.com:
> On Jan 2, 2010, at 9:34 AM, Terry Jones wrote:
> > In any case, it looks like the problem is not in the setup of the request.
> > Can anyone offer a reason why httplib might be able to fetch the page
> > whereas getPage receives an error?  I'm stumped.
> 
> I've had to debug things like this recently and I have two suggestions:
> 
> 1> Recreate the headers and make it work with curl.  Curl won't add anything to your headers and such and you'll be sure that you're getting the result you want with completely stripped down case.
> 
> 2>	Get Charles http://www.charlesproxy.com/ if you're on OS X.  It rocks.  Otherwise, get one of the Windows tools (sorry, no recos from me on that), and watch exactly what goes by.

Actually, CharlesProxy is a Java tool, AFAIK. And personally I'm really
not that sure that it rocks, but personal opinions do vary :) 

As a free alternative, webscarab can handle the man-in-the-middle
interception too.

Consider also using FoxyProxy (a FF addon), to direct only the URLs you
are interested into a the logging proxy.

Andreas




From glyph at twistedmatrix.com  Sat Jan  2 13:58:10 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 2 Jan 2010 15:58:10 -0500
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: <19263.22881.934832.166484@jon.es>
References: <19263.22881.934832.166484@jon.es>
Message-ID: <30AD70A7-8D5B-4A37-8D5D-0A77D68E64A4@twistedmatrix.com>


On Jan 2, 2010, at 9:34 AM, Terry Jones wrote:


> In any case, it looks like the problem is not in the setup of the request.
> Can anyone offer a reason why httplib might be able to fetch the page
> whereas getPage receives an error?  I'm stumped.

Well, I know this isn't terribly helpful, but "a bug in getPage" is really the only thing that comes to mind.  Or, some legal-but-unusual behavior in getPage which triggers a bug on the EC2 side of things.

The only thing I can suggest is to start wireshark, do a byte-for-byte comparison of the requests that getPage and httplib emit, and see if you can find any of the differences which might be significant.  I would look carefully at any place in the request or response where data is being quoted or unquoted.  Based on the other stuff you've said, nothing jumps out at me.




From terry at jon.es  Sat Jan  2 14:14:12 2010
From: terry at jon.es (Terry Jones)
Date: Sat, 2 Jan 2010 22:14:12 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: Your message at 10:03:16 on Saturday, 2 January 2010
References: <19263.22881.934832.166484@jon.es>
	<28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
Message-ID: <19263.46884.696121.912738@jon.es>

>>>>> "Steve" == ssteinerX at gmail com <ssteinerx at gmail.com> writes:
Steve> On Jan 2, 2010, at 9:34 AM, Terry Jones wrote:
>> In any case, it looks like the problem is not in the setup of the request.
>> Can anyone offer a reason why httplib might be able to fetch the page
>> whereas getPage receives an error?  I'm stumped.
Steve> 
Steve> I've had to debug things like this recently and I have two suggestions:

Hi Steve

Thanks for the helpful reply - I can now make the call successfully.  The
difference turned out to be that httplib puts a Host: hostname:port header
into its calls, whereas getPage uses just Host: hostname. Plus there was
something else going on in some other code I'm using that made this a
problem (it was calculating a signature based on host:port).

Steve> 1> Recreate the headers and make it work with curl.  Curl won't add
Steve>    anything to your headers and such and you'll be sure that you're
Steve>    getting the result you want with completely stripped down case.

At least on my machine (curl 7.18.0 on Linux Ubuntu/Hardy) it adds a
User-agent, an Accept: */*, and also the Host header.

Steve> 2> Get Charles http://www.charlesproxy.com/ if you're on OS X.  It
Steve>    rocks.  Otherwise, get one of the Windows tools (sorry, no recos
Steve>    from me on that), and watch exactly what goes by.

It's available for Linux & Windows too. I tried it, but didn't make it work
fully when sending requests from the command line (with SSL, spoofing DNS,
etc). So in the end I just used netcat -l -p 443 and changed to HTTP to see
what was being sent. I wouldn't have thought of doing that without your
suggestion, so thanks a lot for the tip.

Terry



From glyph at twistedmatrix.com  Sat Jan  2 14:21:04 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 2 Jan 2010 16:21:04 -0500
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: <19263.46884.696121.912738@jon.es>
References: <19263.22881.934832.166484@jon.es>
	<28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
	<19263.46884.696121.912738@jon.es>
Message-ID: <7CF0B66C-98C1-443E-881D-4EED057F7237@twistedmatrix.com>


On Jan 2, 2010, at 4:14 PM, Terry Jones wrote:

> Thanks for the helpful reply - I can now make the call successfully.  The
> difference turned out to be that httplib puts a Host: hostname:port header
> into its calls, whereas getPage uses just Host: hostname. Plus there was
> something else going on in some other code I'm using that made this a
> problem (it was calculating a signature based on host:port).

I'm glad that you tracked this down!

According to comments on <http://twistedmatrix.com/trac/ticket/886>, this problem was addressed in the new HTTP client implementation.  Have you considered using the new twisted.web.client.Agent instead of getPage?




From terry at jon.es  Sat Jan  2 14:28:14 2010
From: terry at jon.es (Terry Jones)
Date: Sat, 2 Jan 2010 22:28:14 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: Your message at 15:58:10 on Saturday, 2 January 2010
References: <19263.22881.934832.166484@jon.es>
	<30AD70A7-8D5B-4A37-8D5D-0A77D68E64A4@twistedmatrix.com>
Message-ID: <19263.47726.73843.922977@jon.es>

Hi Glyph

Thanks for the reply. I just sent another mail in the thread.

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> Well, I know this isn't terribly helpful, but "a bug in getPage" is
Glyph> really the only thing that comes to mind.  Or, some
Glyph> legal-but-unusual behavior in getPage which triggers a bug on the
Glyph> EC2 side of things.

The error arose from a combination of things (signing a string that
included a host:port but then only sending a host in the Host header).
Turns out you can resolve it either way - using a port in both, or omitting
the port from both.


BTW, in reading about the Host header, it seems like getPage (more
specifically HTTPPageGetter) should be sending a port number in the header,
at least when the port is not 80. I base that remark on these:

  http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23
  http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2

That's a 1.1 spec as you surely know, and http.py sends an HTTP/1.0 header,
so you could argue that sending the Host is therefore just a nicety and
there's no need for a port. But the Host header isn't described in the HTTP
1.0 RFC, so it seems more like if you're going to send it you may as well
conform to HTTP 1.1.

But I guess that argument is somehow incorrect. I say that because a
comment in some other code I'm looking at that uses httplib, says that
prior to 2.6, httplib *used* to append a ":443" to SSL requests, but that
it no longer does. I guess sending the port was dropped from httplib for
good reason, and so HTTPPageGetter shouldn't add it. But I don't know.

I'm very far from being an expert on HTTP headers though. Not as far as I'd
like to be, though :-)

Thanks again for the reply.

Terry



From terry at jon.es  Sat Jan  2 14:44:41 2010
From: terry at jon.es (Terry Jones)
Date: Sat, 2 Jan 2010 22:44:41 +0100
Subject: [Twisted-Python] Problem fetching page with getPage
In-Reply-To: Your message at 16:21:04 on Saturday, 2 January 2010
References: <19263.22881.934832.166484@jon.es>
	<28564E6C-329D-4B14-927B-BA8358DA4E8D@gmail.com>
	<19263.46884.696121.912738@jon.es>
	<7CF0B66C-98C1-443E-881D-4EED057F7237@twistedmatrix.com>
Message-ID: <19263.48713.658135.198572@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

Glyph> I'm glad that you tracked this down!

Me too.

Glyph> According to comments on <http://twistedmatrix.com/trac/ticket/886>,
Glyph> this problem was addressed in the new HTTP client implementation.
Glyph> Have you considered using the new twisted.web.client.Agent instead
Glyph> of getPage?

I hadn't looked at it, but now have. The _computeHostValue method looks
very promising :-)  We've yet to switch to 9.0.0.

So httplib (apparently) changed to drop the :port part of the Host header
in Python 2.6, and now the Twisted client has added it. I think you guys
are right, so I wonder why httplib dropped it.

Terry



From exarkun at twistedmatrix.com  Sat Jan  2 22:05:12 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 Jan 2010 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1262495112.35.1035195980@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100103/534be5aa/attachment-0001.html>

From kevin.horn at gmail.com  Mon Jan  4 17:08:17 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 4 Jan 2010 18:08:17 -0600
Subject: [Twisted-Python] lore2sphinx table handling?
Message-ID: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>

Sphinx uses plain ReST tables, and from what I can tell, ReST has 4 (yes,
4!) ways of marking up tables:

Grid tables
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables
- ASCII-art style tables

Simple Tables
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables
- A different style of ASCII-art table, simpler but less powerful than Grid
Tables

CSV Tables
http://docutils.sourceforge.net/docs/ref/rst/directives.html#csv-table
- data is provided in CSV format in the body of a ReST directive

List Tables
http://docutils.sourceforge.net/docs/ref/rst/directives.html#list-table
- data is provided as nested lists in the body of a ReST directive

My question is, what format should the lore2sphinx tool target?

Any of these formats should work fine, but I'm curious as to what people (in
particular the core devs) think as to which should be the preferred method
in the Sphinx documentation.

Keep in mind that there are only 2 tables in all of the Twisted docs, and
one of them is in the documentation for Lore, which (hopefully!) should be
going away once this project is completed.  So it's not like it would be a
whole lot of work to change the preferred format later.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100104/e3d721d7/attachment.html>

From kevin.horn at gmail.com  Mon Jan  4 17:18:42 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 4 Jan 2010 18:18:42 -0600
Subject: [Twisted-Python] lore2sphinx themeing
Message-ID: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>

Thanks to a quick patch from Michael Thompson, the current output of the
Sphinx conversion [1] now matches the color scheme and typographic style of
the main twisted site.  It's using the layout of the 'default' sphinx theme
(previously was using the 'sphinxdoc' theme).

I'd like to know what people out there want/expect the final theme of the
Sphinx version of the Twisted docs to look like.

The floor is open...please offer your suggestions!

[1] http://twistedsphinx.funsize.net/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100104/866bb3ad/attachment.html>

From rlotun at gmail.com  Mon Jan  4 17:37:36 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Tue, 5 Jan 2010 00:37:36 +0000
Subject: [Twisted-Python] lore2sphinx themeing
In-Reply-To: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
References: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
Message-ID: <8AB09167-E498-48E9-95AD-3B1A452EB1B3@gmail.com>

Hi Kevin,

> Thanks to a quick patch from Michael Thompson, the current output of  
> the Sphinx conversion [1] now matches the color scheme and  
> typographic style of the main twisted site.  It's using the layout  
> of the 'default' sphinx theme (previously was using the 'sphinxdoc'  
> theme).
>
> I'd like to know what people out there want/expect the final theme  
> of the Sphinx version of the Twisted docs to look like.
>
> The floor is open...please offer your

No suggestions really. Just wanted to say this is looking really  
fantastic. Great work so far! Keep it up.

Cheers,
Reza



From micahel at gmail.com  Mon Jan  4 18:21:48 2010
From: micahel at gmail.com (Michael Hudson-Doyle)
Date: Tue, 5 Jan 2010 14:21:48 +1300
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
Message-ID: <aa0dfd861001041721y7078b881hf8b03414842c42d0@mail.gmail.com>

2010/1/5 Kevin Horn <kevin.horn at gmail.com>:
> Sphinx uses plain ReST tables, and from what I can tell, ReST has 4 (yes,
> 4!) ways of marking up tables:
>
> Grid tables
> http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables
> - ASCII-art style tables

I tend to use these, because they're what emacs' table-mode supports.
But my opinion probably shouldn't count for all that much :-)

Cheers,
mwh



From glyph at twistedmatrix.com  Mon Jan  4 18:31:53 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Jan 2010 20:31:53 -0500
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <aa0dfd861001041721y7078b881hf8b03414842c42d0@mail.gmail.com>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
	<aa0dfd861001041721y7078b881hf8b03414842c42d0@mail.gmail.com>
Message-ID: <4B1B31BE-530B-4CA6-B826-CC116C2F9011@twistedmatrix.com>


On Jan 4, 2010, at 8:21 PM, Michael Hudson-Doyle wrote:

> 2010/1/5 Kevin Horn <kevin.horn at gmail.com>:
>> Sphinx uses plain ReST tables, and from what I can tell, ReST has 4 (yes,
>> 4!) ways of marking up tables:
>> 
>> Grid tables
>> http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables
>> - ASCII-art style tables
> 
> I tend to use these, because they're what emacs' table-mode supports.
> But my opinion probably shouldn't count for all that much :-)

That's what I was going to say as well.  I'm assuming that docutils has support for building and emitting grid tables already, though.  If it's difficult to format them in the output, or the output looks weird, then I would recommend just going with CSV tables for now instead.




From screwtape at froup.com  Mon Jan  4 18:32:05 2010
From: screwtape at froup.com (Tim Allen)
Date: Tue, 5 Jan 2010 12:32:05 +1100
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
Message-ID: <20100105013205.GG1637@thristian.org>

On Mon, Jan 04, 2010 at 06:08:17PM -0600, Kevin Horn wrote:
> Any of these formats should work fine, but I'm curious as to what people (in
> particular the core devs) think as to which should be the preferred method
> in the Sphinx documentation.

I'm not a core dev, but I'll chime in so that at least you'll have some
feedback if nobody else does. :) 

I think the List Table format is probably the easiest to maintain in
a simple text editor, followed by the Simple Table format. CSV mode
looks like it's really designed for you to keep the table in an external
file and edit it in a spreadsheet, or regenerate it from a database, and
while Grid Tables look pretty, actually editing them requires an Emacs
mode, or a lot of patience.



From terry at jon.es  Mon Jan  4 19:22:53 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 03:22:53 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
Message-ID: <19266.41597.624446.721449@jon.es>

I just wrote the below for fun.  It's untested :-)

It's a class that you initialize with a callable (f), and which gives you
back a deferred (d) that will fire when f fires. Alternately, you can fire
d yourself by calling 'callback' or 'errback' on the class instance and
passing a value.  That value is returned via d.

The reason this is useful is that normally when you call a function that
returns a deferred, you can't easily "cancel" the deferred because it is
made and controlled by the function you called. The callback or errback on
the deferred is (very likely) going to be called at some point.  OTOH, in
the class below you get to "cancel" the deferred by triggering it yourself.
If you fire d in this way, then when the original deferred fires (if ever),
its result is ignored.

I don't know why defer.Deferred.setTimeout is deprecated, but I guess it's
partly to do with this control issue. If a timeout function you add to a
deferred calls its errback (the default behavior), the deferred is still
nevertheless going to be called by the code that created it. That code
doesn't know and shouldn't have to check if a timeout happened from the POV
of its caller. The setTimeout approach also only allows one timeout. With
the below, any code can call the callback/errback function at any time. If
you do want to cancel the deferred based simply on a timeout, you can do
this (with as many different timeouts as you like - only the earliest will
have any effect, supposing the original deferred still hasn't fired):

   cd = CancellableDeferred(func)
   deferred = cd.call()
   reactor.callLater(5, cd.errback, None)

I post this partly because it seems cute, but more because it seems like
issue that's probably been solved by many people. Is there a general
utility in Twisted for doing this? A better way?

Terry

----

from twisted.internet import defer


class CancellableDeferred(object):
    def __init__(self, f, *args, **kw):
        self._f = f
        self._args = args
        self._kw = kw
        self._calld = None
        self.called = False

    def _fire(self, result):
        if not self.called:
            self.called = True
            self._calld.chainDeferred(self._resultd)

    def call(self):
        if self._calld:
            raise Exception('Already called.')
        self._resultd = defer.Deferred()
        self._calld = defer.maybeDeferred(self.f, *self._args, **self._kw)
        self._calld.addBoth(self._fire)
        return self._resultd

    def callback(self, value=None):
        if not self.called:
            self.called = True
            self._resultd.callback(value)

    def errback(self, value=None):
        if not self.called:
            self.called = True
            self._resultd.errback(value)



From glyph at twistedmatrix.com  Mon Jan  4 19:46:35 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Jan 2010 21:46:35 -0500
Subject: [Twisted-Python] lore2sphinx themeing
In-Reply-To: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
References: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
Message-ID: <6BA2FE82-7920-4F38-A684-79A8752714B3@twistedmatrix.com>


On Jan 4, 2010, at 7:18 PM, Kevin Horn wrote:

> Thanks to a quick patch from Michael Thompson, the current output of the Sphinx conversion [1] now matches the color scheme and typographic style of the main twisted site.  It's using the layout of the 'default' sphinx theme (previously was using the 'sphinxdoc' theme).

This is an improvement, but it looks like a very rough cut to me.  The link colors are wrong, it's missing the subtle top/bottom gradients, there's no Twisted logo anywhere, etc etc.  

> I'd like to know what people out there want/expect the final theme of the Sphinx version of the Twisted docs to look like.

Well, if it ended up looking more or less like it does now, but with a bit more attention to detail (at a minimum: some gradients, matching colors, a little global navigation to get you back to some Trac pages) I'd be happy, and it would be an upgrade.

However, ideally, the page would include links to <http://twistedmatrix.com/trac/chrome/common/css/trac.css> and <http://twistedmatrix.com/trac/chrome/common/css/wiki.css>, and use the CSS classes defined there in its own HTML templates.

While this isn't the cleanest CSS in the world, using it would have two significant benefits:

  1. lots of little details, like fonts, colors, sizes, etc, which would be exhausting for anyone to investigate and enumerate completely, would line up correctly and make it look more polished, and
  2. if we changed the CSS to adjust the look of the trac site, the docs would adjust with it.

I don't mind if this means that some HTML needs to be copied and pasted directly from either Trac's templates or Trac's output, as long as it is a quick 2-minute cut/paste/edit job that can be quickly explained in a comment for someone wanting to update it to a new theme.  I'd much rather have a still-slightly-inconsistent documentation theme than burn weeks copy/pasting hundreds of little things out of the trac HTML and pain-stakingly re-creating every minor effect on the Trac site.

Thanks for all the good work!




From glyph at twistedmatrix.com  Mon Jan  4 19:58:32 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Jan 2010 21:58:32 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19266.41597.624446.721449@jon.es>
References: <19266.41597.624446.721449@jon.es>
Message-ID: <525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>

On Jan 4, 2010, at 9:22 PM, Terry Jones wrote:

> I just wrote the below for fun.  It's untested :-)


> It's a class that you initialize with a callable (f), and which gives you
> back a deferred (d) that will fire when f fires. Alternately, you can fire
> d yourself by calling 'callback' or 'errback' on the class instance and
> passing a value.  That value is returned via d.

I already lost you at the first sentence.  The class below never appears to use 'self._f', and ... Deferreds are things that fire, I don't see how the callable (f) can fire.  Can you rephrase your intent?

> The reason this is useful is that normally when you call a function that
> returns a deferred, you can't easily "cancel" the deferred because it is
> made and controlled by the function you called. The callback or errback on
> the deferred is (very likely) going to be called at some point.  OTOH, in
> the class below you get to "cancel" the deferred by triggering it yourself.
> If you fire d in this way, then when the original deferred fires (if ever),
> its result is ignored.

I'm glad you're thinking about this, because it is an *extremely* thorny issue which I would really like to address one day.  Many of the issues you're talking about were brought up, and various solutions suggested, then found problematic, then modified ad nauseam on <http://twistedmatrix.com/trac/ticket/990>.  If you can read that discussion and make some sense of it, perhaps you can post a recommendation there, or at least a summary of the discussion so far so that I don't have to read the whole discussion again to remember what I think should happen next? :)

> I don't know why defer.Deferred.setTimeout is deprecated, but I guess it's
> partly to do with this control issue.

This is one of the reasons, but another major reason is that 'setTimeout' does not belong as a method of Deferred.  If we did support cancellation somehow, the way to set a timeout would be to do 'reactor.callLater(5.0, myDeferred.cancel)'.  Deferred was originally in twisted.python and it really should have remained there, decoupled from twisted.internet.




From terry at jon.es  Mon Jan  4 20:54:46 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 04:54:46 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 21:58:32 on Monday, 4 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
Message-ID: <19266.47110.91484.34919@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> I already lost you at the first sentence.

:-)  Sorry.

Glyph> The class below never appears to use 'self._f'

Oops, that should have been a self._f in the call method.

Glyph> and ... Deferreds are things that fire, I don't see how the callable
Glyph> (f) can fire.  Can you rephrase your intent?

Yes.

I wanted a way to be able to call something (anything) that returns a
deferred and then, at some later point, to be able to decide that I no
longer want the deferred to fire in the way the original function would
have done it. Instead I want to fire it myself, to in some sense cancel the
outstanding call (by ignoring its result and instead returning a result of
my choosing, right now).

E.g., I call twisted.web.client.getPage and get a deferred (d) back. I add
a callback to d. If sometime later (perhaps just due to too much time
elapsing, but perhaps for another reason - e.g., maybe I'm shutting down a
service, who knows) I want to effectively cancel that deferred, what choice
do I have?  The deferred was made elsewhere (in HTTPClientFactory in this
case), which is presumably going to fire it at some point. Somewhere else
in my code I've now got a callback function that's going to get the result,
though I now don't want that to happen.  I could set a flag somewhere to
indicate to my own callback(s) that it(they) should ignore any incoming
result and/or fail, but that's pretty messy.  Instead I'd like to just
manually cancel the deferred myself - where by "cancel" I mean fire it with
a value of my choosing. Most convenient, probably, is to call its errback
with a TimeoutError of some kind (just as defer.timeout does) which I can
just absorb or log etc.  I can't do this though with the deferred I got
back from getPage.

So the (untested) class I posted sits in the middle. If the original
deferred (from getPage, in our example) fires first, it passes (via
chainDeferred) the result along to the deferred it gave me. If instead I
trigger the deferred myself (by calling 'callback' or 'errback' *on the
CancellableDeferred instance*) then it fires the deferred it gave me back
and will later ignore the result from getPage (if any).

Glyph> I'm glad you're thinking about this, because it is an *extremely*
Glyph> thorny issue which I would really like to address one day.  Many of
Glyph> the issues you're talking about were brought up, and various
Glyph> solutions suggested, then found problematic, then modified ad
Glyph> nauseam on <http://twistedmatrix.com/trac/ticket/990>.  If you can
Glyph> read that discussion and make some sense of it, perhaps you can post
Glyph> a recommendation there, or at least a summary of the discussion so
Glyph> far so that I don't have to read the whole discussion again to
Glyph> remember what I think should happen next? :)

OK, I'll take a look (in my copious spare time, etc).

>> I don't know why defer.Deferred.setTimeout is deprecated, but I guess
>> it's partly to do with this control issue.

Glyph> This is one of the reasons, but another major reason is that
Glyph> 'setTimeout' does not belong as a method of Deferred.  If we did
Glyph> support cancellation somehow, the way to set a timeout would be to
Glyph> do 'reactor.callLater(5.0, myDeferred.cancel)'.  Deferred was
Glyph> originally in twisted.python and it really should have remained
Glyph> there, decoupled from twisted.internet.

OK, I agree with that aim.  Cancelation (if you want to call it that) using
my class is, IMO, decoupled from normal deferreds.  Under normal
circumstances you don't want to cancel a deferred you've asked for. But if
you might, you can get yourself an instance of CancellableDeferred and use
it instead. It provides you with a way to cancel the deferred (by which I
mean: manually trigger it yourself with a value of your choosing, and
thereafter ignore anything that might eventually come back from whatever it
was you originally called (and which it is presumably now too late to
undo)).  You can do the canceling via reactor.callLater, just as you
describe, but you call a method on the CancellableDeferred instance, not on
the deferred.  That keeps the canceling functionality out of the deferred
class.

Is that any clearer?  Sorry the code was untested - it was meant to be so
simple that it couldn't possibly be wrong :-)

Terry



From foom at fuhm.net  Mon Jan  4 21:23:37 2010
From: foom at fuhm.net (James Y Knight)
Date: Mon, 4 Jan 2010 23:23:37 -0500
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <20100105013205.GG1637@thristian.org>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
	<20100105013205.GG1637@thristian.org>
Message-ID: <3D5EF69F-D372-4581-B483-B85114F65CBB@fuhm.net>


On Jan 4, 2010, at 8:32 PM, Tim Allen wrote:

> I think the List Table format is probably the easiest to maintain in
> a simple text editor, followed by the Simple Table format. CSV mode
> looks like it's really designed for you to keep the table in an  
> external
> file and edit it in a spreadsheet, or regenerate it from a database,  
> and
> while Grid Tables look pretty, actually editing them requires an Emacs
> mode, or a lot of patience.

But when you *do* have an emacs mode (and, really, doesn't everynoe?)  
it's the easiest to use.

James



From terry at jon.es  Mon Jan  4 21:29:17 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 05:29:17 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 21:58:32 on Monday, 4 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
Message-ID: <19266.49182.1607.537978@jon.es>

Hi Glyph

I read through <http://twistedmatrix.com/trac/ticket/990> without trying to
get all the details (some are not relevant to me, see below).

I'll make a few comments here, then continue in the ticket, supposing
there's interest.

- It would simplify things to separate discussion of canceling deferreds
from discussion of timeouts, which I think you were saying too. The timeout
issue seemed to fade in that ticket, which is good.  The stuff I posted is
just about cancelation, nothing to do with timeouts.

- Deferreds are fairly simple, would be good to keep them that way (i.e.,
  not add to the class). Deferreds are very general, you can use them as
  building blocks to do more complex things, which is what my class does -
  it's just a deferred in the middle.

- Once someone has made a function call, gotten a deferred, added
  call/errbacks to it, etc., it's gone. It's in flight. Forget about it.
  Relax and let it happen, etc. It's too complicated to try to stop things
  from happening that someone else set up to happen in some potentially
  complex manner. Other code, that the Deferred class itself can't possibly
  be aware of, may be relying on the deferred firing and at least part of
  its callback chain being run, etc. The simplest thing to do is to just
  provide a mechanism whereby the eventual holder of the deferred can opt
  to trigger their deferred immediately and ignore the final result of the
  original call (supposing there ever is one).

- My class seems a bit like the Operation class proposed by Peaker. But
  it's simpler because you still only work with normal deferreds. You just
  get to fire a deferred any time you want to, with any value you want, and
  to ignore what would have been the result had you not preempively fired
  it.

Those are some reactions to the thread. I'm happy to continue there.

Terry



From terry at jon.es  Mon Jan  4 21:45:56 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 05:45:56 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 05:29:17 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
Message-ID: <19266.50180.642710.446097@jon.es>

As a final followup before bed...

I chose not to have a 'cancel' method on my class because that seemed
misleading. You're not really canceling anything. You're just asking that a
deferred that you got earlier be fired right now with a value of your
choosing. So I made 2 methods, and named them 'callback' and 'errback'.
The Subject above is reasonably accurate, it's like a pseudo-Deferred
class. Everyone works with regular deferreds, as usual, but if you know you
might want to "cancel" a deferred by firing it early, you can call the
call/errback methods on an instance of CancellableDeferred. Because the
deferred you're holding is not the one that was obtained by calling
self._f, it will fire immediately, which is surely part of the point of
cancellation.  In other words, using the word "cancel" is just a convenient
short / casual description of what's actually being done.

I hope all these words are making things more clear, not less...

Terry



From screwtape at froup.com  Mon Jan  4 21:53:41 2010
From: screwtape at froup.com (Tim Allen)
Date: Tue, 5 Jan 2010 15:53:41 +1100
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <3D5EF69F-D372-4581-B483-B85114F65CBB@fuhm.net>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
	<20100105013205.GG1637@thristian.org>
	<3D5EF69F-D372-4581-B483-B85114F65CBB@fuhm.net>
Message-ID: <20100105045340.GH1637@thristian.org>

On Mon, Jan 04, 2010 at 11:23:37PM -0500, James Y Knight wrote:
> On Jan 4, 2010, at 8:32 PM, Tim Allen wrote:
> > while Grid Tables look pretty, actually editing them requires an Emacs
> > mode, or a lot of patience.
> 
> But when you *do* have an emacs mode (and, really, doesn't everynoe?)  

Well, no, no I don't. Does that mean I don't have to supply
documentation changes with any patches I supply in future? ;)



From kevin.horn at gmail.com  Mon Jan  4 22:36:13 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 4 Jan 2010 23:36:13 -0600
Subject: [Twisted-Python] lore2sphinx themeing
In-Reply-To: <6BA2FE82-7920-4F38-A684-79A8752714B3@twistedmatrix.com>
References: <562bcc11001041618u72c4cc6eh390b6169d189fe18@mail.gmail.com>
	<6BA2FE82-7920-4F38-A684-79A8752714B3@twistedmatrix.com>
Message-ID: <562bcc11001042136gfdfdab4lcce31745ba93a7f9@mail.gmail.com>

On Mon, Jan 4, 2010 at 8:46 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 4, 2010, at 7:18 PM, Kevin Horn wrote:
>
> > Thanks to a quick patch from Michael Thompson, the current output of the
> Sphinx conversion [1] now matches the color scheme and typographic style of
> the main twisted site.  It's using the layout of the 'default' sphinx theme
> (previously was using the 'sphinxdoc' theme).
>
> This is an improvement, but it looks like a very rough cut to me.


Like I said, this is the default sphinx theme with some different colors and
text styling.  Yes, very rough.


> The link colors are wrong, it's missing the subtle top/bottom gradients,
> there's no Twisted logo anywhere, etc etc.
>

I'm not sure I understand what you mean about the link colors being
wrong...unless you mean the hover/active/visited colors?  The colors for
links both in the text and in the navigation areas are identical to that in
Trac...

Logo, gradients, etc. were put off until there was a clear understanding of
what exactly was desired.

Spihnx has three "levels" of theme customization.
1. theme options - themes can be set up to take options, which are basically
configurable variables in the templates and css.  This is what's been done
so far.  Just set some colors and fonts.
2. user templates/static files - here you can override templates from the
theme you are using and put things like your own image files, javascript,
css, etc.
3. user themes - a directory or zip file of user templates and static files,
basically as (2), except packaged up nicely to be reusable.


>
> > I'd like to know what people out there want/expect the final theme of the
> Sphinx version of the Twisted docs to look like.
>
> Well, if it ended up looking more or less like it does now, but with a bit
> more attention to detail (at a minimum: some gradients, matching colors, a
> little global navigation to get you back to some Trac pages) I'd be happy,
> and it would be an upgrade.
>
> However, ideally, the page would include links to <
> http://twistedmatrix.com/trac/chrome/common/css/trac.css> and <
> http://twistedmatrix.com/trac/chrome/common/css/wiki.css>, and use the CSS
> classes defined there in its own HTML templates.
>
> While this isn't the cleanest CSS in the world, using it would have two
> significant benefits:
>
>  1. lots of little details, like fonts, colors, sizes, etc, which would be
> exhausting for anyone to investigate and enumerate completely, would line up
> correctly and make it look more polished, and
>  2. if we changed the CSS to adjust the look of the trac site, the docs
> would adjust with it.
>
> I don't mind if this means that some HTML needs to be copied and pasted
> directly from either Trac's templates or Trac's output, as long as it is a
> quick 2-minute cut/paste/edit job that can be quickly explained in a comment
> for someone wanting to update it to a new theme.  I'd much rather have a
> still-slightly-inconsistent documentation theme than burn weeks copy/pasting
> hundreds of little things out of the trac HTML and pain-stakingly
> re-creating every minor effect on the Trac site.
>
>
Groovy, this is exactly the kind of feedback I was looking for.

As far as the CSS goes, I think the best way to handle this would be to
create a stylesheet for the theme, that uses @import to pull in the trac.css
and wiki.css files, and the add or override whatever is necessary.
Templates might be a bit harder to reuse, but we still might be able to do
it.

Thanks for all the good work!
>
>
It's like an addiction. :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100104/b2644a50/attachment.html>

From andrew at bemusement.org  Tue Jan  5 00:01:54 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 5 Jan 2010 18:01:54 +1100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19266.41597.624446.721449@jon.es>
References: <19266.41597.624446.721449@jon.es>
Message-ID: <20100105070154.GB23140@steerpike.home.puzzling.org>

Terry Jones wrote:
> I just wrote the below for fun.  It's untested :-)
> 
> It's a class that you initialize with a callable (f), and which gives you
> back a deferred (d) that will fire when f fires. Alternately, you can fire
> d yourself by calling 'callback' or 'errback' on the class instance and
> passing a value.  That value is returned via d.
> 
> The reason this is useful is that normally when you call a function that
> returns a deferred, you can't easily "cancel" the deferred because it is
> made and controlled by the function you called. The callback or errback on

I think the key thing is to remember there are two distinct parts:

  1) an operation (which eventually will have a result or failure)
  2) a result 
  
A Deferred takes care of managing 2.  It's a placeholder for that
result, and it can track callbacks that need to be called when it
arrives, etc.

We currently don't have any formal idioms for 1.  I think this is what
you're trying to address.  After all, it's not the result that times out
or that you might want to cancel, it's the operation that is expected to
generate it.

I don't think it's wise to conflate the two concepts, so I think
CancellableDeferred is a poor name.

In an ideal world perhaps every Deferred would have a .operation
attribute, so maybe “d.operation.cancel()” and even
“d.operation.getProgressReport()” would be possible, but I doubt that
every piece of code that creates a Deferred would want to pay the cost
of that bookkeepping.  But hopefully you see my point that it's a
connected but distinct concept to the very simple, single-purpose
callback managing object that a Deferred is.

[...]
> I post this partly because it seems cute, but more because it seems like
> issue that's probably been solved by many people. Is there a general
> utility in Twisted for doing this? A better way?

It feels like there should be, but so far people have basically been
managing the logic that fires Deferreds ad hoc.  I don't think this is
an ideal state of affairs, but it seems it's Good Enough most of the
time.

If I were to try improve the situation, I'd be trying to make an
Operation object or something like that, I think.  I think you'd want to
make it support cancellation (and timeouts) when the underlying code
supports it (network requests are often easy to cancel — just close the
socket), and I'm not sure what would be best when the underlying code is
not cancellable (deferToThread is in general impossible to cancel, etc).

So currently your class isn't something I'd use, because I don't think
it helps with any of this.

-Andrew.




From devraj at gmail.com  Tue Jan  5 00:29:04 2010
From: devraj at gmail.com (Devraj Mukherjee)
Date: Tue, 5 Jan 2010 18:29:04 +1100
Subject: [Twisted-Python] Running twisted app in a different thread
Message-ID: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>

Hi all,

I am new to Twisted, please be gentle :)

The Twisted application I am dealing with is python-vnc-viewer
(http://python-vnc.viewer.googlecode.com). We are attempting the RFB
library implemented using Twisted in our application, to bring up a
customer viewer. Our  uses a threading model that is quite centric to
our application.

Is it possible to ask the Twisted application to run in a sea prate thread?

Thanks.

-- 
"The secret impresses no-one, the trick you use it for is everything"
- Alfred Borden (The Prestiege)



From terry at jon.es  Tue Jan  5 04:25:33 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 12:25:33 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 18:01:54 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<20100105070154.GB23140@steerpike.home.puzzling.org>
Message-ID: <19267.8621.348279.968272@jon.es>

>>>>> "Andrew" == Andrew Bennetts <andrew at bemusement.org> writes:

Andrew> I think the key thing is to remember there are two distinct parts:

Andrew> 1) an operation (which eventually will have a result or failure)
Andrew> 2) a result 
  
Andrew> A Deferred takes care of managing 2.  It's a placeholder for that
Andrew> result, and it can track callbacks that need to be called when it
Andrew> arrives, etc.

Andrew> We currently don't have any formal idioms for 1.  I think this is
Andrew> what you're trying to address.  After all, it's not the result that
Andrew> times out or that you might want to cancel, it's the operation that
Andrew> is expected to generate it.

No, I'm only dealing with 2, not at all with 1. 1 is too complicated and in
a later posting I wrote that I didn't think we should be trying to
interfere with the deferred processing and that cancel is not really a good
name.

Andrew> I don't think it's wise to conflate the two concepts, so I think
Andrew> CancellableDeferred is a poor name.

OK, I think I agree.

Anyway, your mail gave me an idea for how to make the class more
useful. I'll code it, maybe even test it :-), and will post again.

Terry



From ssteinerx at gmail.com  Tue Jan  5 05:36:38 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Tue, 5 Jan 2010 07:36:38 -0500
Subject: [Twisted-Python] Running twisted app in a different thread
In-Reply-To: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>
References: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>
Message-ID: <944BD9BF-14F4-4698-BE33-2393C44A34AB@gmail.com>


On Jan 5, 2010, at 2:29 AM, Devraj Mukherjee wrote:

> Hi all,
> 
> I am new to Twisted, please be gentle :)
> 
> Is it possible to ask the Twisted application to run in a sea prate thread?

There are no sea pirates in Twisted.

S




From terry at jon.es  Tue Jan  5 05:47:50 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 13:47:50 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 21:58:32 on Monday, 4 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
Message-ID: <19267.13558.486114.470310@jon.es>

Hi again Glyph, Andrew

Below is a simpler and more flexible ControllableDeferred class.

The idea is simple: you want a deferred that you can call/errback yourself,
and which you can also deactivate so that it never fires.  This is done by
manipulating two normal deferreds (self, and a deferred received from
maybeDeferred). This ControllableDeferred class sits in the middle and will
(a) pass on the normal result (via chainDeferred) if it arrives first, or
(b) if called by the user, fire with the user-supplied value, or (c) if
deactivated by the user, never fire. In cases b and c it will ignore the
result (if any ever arrives) from the function originally called.

In summary, this provides two things you can't ordinarily do when you get a
deferred (d) back from calling a function:

  - Call d yourself, thereby firing it immediately.
  - Deactivate d, so that it never fires.

The code below could be a bit more sophisticated. E.g., it could tell you
if you try to call a deferred you've deactivated. It should probably use an
attribute name other than _called.  I've kept it sparse for now though so
the general idea is clearer.  I changed its name to reflect that the
deferred is more controllable.

Terry

---

from twisted.internet import defer


class ControllableDeferred(defer.Deferred):    
    def __init__(self, f, *args, **kw):
        defer.Deferred.__init__(self)
        self._called = False
        self._calld = defer.maybeDeferred(f, *args, **kw).addBoth(self._fire)

    def _fire(self, ign):
        if not self._called:
            self._called = True
            self._calld.chainDeferred(self)

    def callback(self, result):
        if not self._called:
            self._called = True
            defer.Deferred.callback(self, result)

    def errback(self, fail=None):
        if not self._called:
            self._called = True
            defer.Deferred.callback(self, fail)

    def deactivate(self):
        self._called = True



From terry at jon.es  Tue Jan  5 05:55:31 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 13:55:31 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 13:47:50 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19267.13558.486114.470310@jon.es>
Message-ID: <19267.14019.905114.977240@jon.es>

Argh..... sorry, there was a trivial cut & paste error in the code I just
posted.  The errback method should of course be:

    def errback(self, fail=None):
        if not self._called:
            self._called = True
            defer.Deferred.errback(self, fail)

Terry



From rlotun at gmail.com  Tue Jan  5 09:46:37 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Tue, 5 Jan 2010 16:46:37 +0000
Subject: [Twisted-Python] Running twisted app in a different thread
In-Reply-To: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>
References: <2d57c6571001042329x69f3a882yb5c14d081e843dc1@mail.gmail.com>
Message-ID: <95bb10691001050846k38774c0dm5c2fbf7ea3d75495@mail.gmail.com>

Hi Devraj,

> Is it possible to ask the Twisted application to run in a sea prate thread?

Yes it is possible. Simply start the reactor in a thread, but run it as:

reactor.run(installSignalHandlers=False)

If you do it this way you're going to have to handle signals yourself.

You're going to have to be very careful about calling code in the
Twisted thread from other threads as Twisted isn't threadsafe. To do
this properly take a look at reactor.callFromThread.

Cheers,
Reza


-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From grickert at coldstorage.com  Tue Jan  5 10:01:23 2010
From: grickert at coldstorage.com (Gerrat Rickert)
Date: Tue, 5 Jan 2010 12:01:23 -0500
Subject: [Twisted-Python] Some news about currently-pending code-reviews
In-Reply-To: <20091228025254.GE1637@thristian.org>
References: <20091224053747.GC1637@thristian.org><BB13E4C4D649234F84A01F6DF64BB87F050E8AA0@ccs-ex01.coldstorage.com>
	<20091228025254.GE1637@thristian.org>
Message-ID: <BB13E4C4D649234F84A01F6DF64BB87F0515B68B@ccs-ex01.coldstorage.com>

>On Thu, Dec 24, 2009 at 09:41:11AM -0500, Gerrat Rickert wrote:
>> [snip]
>> >http://twistedmatrix.com/trac/ticket/3956
>> >Add arraysize option to runQuery in adbapi
>>
>> Well, as the guy who initiated this ticket, I'm certainly using
>> adbapi.ConnectionPool with cx_Oracle.  I'm not currently using any
>> placeholders named "arraysize" or "cp_arraysize".
>
>But you are using the keyword-parameters-as-query-parameters extension
>that cx_Oracle provides?

No, I am not.  I probably didn't even notice this style was allowed, and

likely wouldn't have used them even if I noticed.  ('davep' mentioned
on the ticket that he was using named binds, but didn't have an issue
with using cp_arraysize as a keyword in runQuery)

[snip]

>I think the two positions here would be:
>
> a: adbapi.ConnectionPool is designed to wrap DBAPI2 modules; keyword
>    parameters to cursor.execute() are not allowed in DBAPI2; therefore
>    adbapi.ConnectionPool can use keyword parameters for itself.
> b: adbapi.ConnectionPool has never really enforced DBAPI2 compliance,
>    so people have been using it with all kinds of crazy DBAPI2
>    extensions and we should allow people to keep doing so as much as
>    possible.
>
>My cunning plan (which has somewhat backfired) was that one of these
>alternatives would seem sane, and one would seem ridiculous, and once
>the mailing list decided which was which I could go back to the ticket
>with that decision.
>
>The way things are at the moment, I'm leaning towards (b), but I
believe
>the developer who's worked on the patch leans towards (a) and I don't
>feel I have the authority to demand a change of approach. I left the
>ticket awaiting review, in the hope that somebody with more authority
or
>firmer opinions would come along to review it (it's a pretty small
>change!), but the ticket's been sitting there for weeks now - I felt
>I needed to do something more drastic to help it make progress.

Thanks for trying to help push this along, Tim.  I have no firm opinion
either way.  For me any solution is better than none.  There doesn't
seem
to be any huge objections to using a "cp_arraysize" keyword param in
runQuery, 
so it might not be the purest solution, but does seem practical.




From kevin.horn at gmail.com  Tue Jan  5 11:23:01 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 5 Jan 2010 12:23:01 -0600
Subject: [Twisted-Python] lore2sphinx table handling?
In-Reply-To: <20100105045340.GH1637@thristian.org>
References: <562bcc11001041608o4eae1afeh700c4a072d52e9fb@mail.gmail.com>
	<20100105013205.GG1637@thristian.org>
	<3D5EF69F-D372-4581-B483-B85114F65CBB@fuhm.net>
	<20100105045340.GH1637@thristian.org>
Message-ID: <562bcc11001051023l69d7a563y9468f7e9368d70c9@mail.gmail.com>

On Mon, Jan 4, 2010 at 10:53 PM, Tim Allen <screwtape at froup.com> wrote:

> On Mon, Jan 04, 2010 at 11:23:37PM -0500, James Y Knight wrote:
> > On Jan 4, 2010, at 8:32 PM, Tim Allen wrote:
> > > while Grid Tables look pretty, actually editing them requires an Emacs
> > > mode, or a lot of patience.
> >
> > But when you *do* have an emacs mode (and, really, doesn't everynoe?)
>
> Well, no, no I don't. Does that mean I don't have to supply
> documentation changes with any patches I supply in future? ;)
>
>
Well, I don't use Emacs (at least I haven't in about 12+ years) but seeing
as how there will only be 1 relatively modest table in the docs (unless
someone adds more), I think we can live with the pain of hand-editing Grid
tables, so I'll likely use eitehr them or simple tables.

Thanks for the feedback everyone!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100105/a467ac6d/attachment.html>

From mithrandi at mithrandi.net  Tue Jan  5 12:12:34 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 5 Jan 2010 21:12:34 +0200
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19266.49182.1607.537978@jon.es>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
Message-ID: <f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>

On Tue, Jan 5, 2010 at 6:29 AM, Terry Jones <terry at jon.es> wrote:
> - Once someone has made a function call, gotten a deferred, added
>  call/errbacks to it, etc., it's gone. It's in flight. Forget about it.

The thing is, this attitude isn't always reasonable. Deferred is not
necessarily the place to implement cancellation, but I think the idiom
itself is important. Certainly there are some operations where
cancellation is not feasible; perhaps because the underlying APIs do
not support cancellation, or because allowing the operation to
complete is quicker/easier than trying to interrupt it. But, consider
something like the transfer of a 512 TB file; cancellation /is/
possible, through closing the TCP connection, and the operation is
significantly expensive, so "just forget it and let it finish" is a
somewhat cavalier attitude to take.

>  complex manner. Other code, that the Deferred class itself can't possibly
>  be aware of, may be relying on the deferred firing and at least part of
>  its callback chain being run, etc. The simplest thing to do is to just
>  provide a mechanism whereby the eventual holder of the deferred can opt
>  to trigger their deferred immediately and ignore the final result of the
>  original call (supposing there ever is one).

I would imagine that you would errback the deferred in the general
case of cancellation; if your callback chain doesn't handle errors,
well...
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From glyph at twistedmatrix.com  Tue Jan  5 13:27:16 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Jan 2010 15:27:16 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
Message-ID: <73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>


On Jan 5, 2010, at 2:12 PM, Tristan Seligmann wrote:

> On Tue, Jan 5, 2010 at 6:29 AM, Terry Jones <terry at jon.es> wrote:
>> - Once someone has made a function call, gotten a deferred, added
>>  call/errbacks to it, etc., it's gone. It's in flight. Forget about it.
> 
> The thing is, this attitude isn't always reasonable. Deferred is not
> necessarily the place to implement cancellation, but I think the idiom
> itself is important. Certainly there are some operations where
> cancellation is not feasible; perhaps because the underlying APIs do
> not support cancellation, or because allowing the operation to
> complete is quicker/easier than trying to interrupt it. But, consider
> something like the transfer of a 512 TB file; cancellation /is/
> possible, through closing the TCP connection, and the operation is
> significantly expensive, so "just forget it and let it finish" is a
> somewhat cavalier attitude to take.

And let's not forget, in long-running servers, it's possible to "leak" operations, and the associated resources like file descriptors.  When the caller says that they're not interested in the result of an operation any more, the library should clean up as much as possible, otherwise you'll start running out of those resources eventually.




From drken567 at gmail.com  Tue Jan  5 13:48:26 2010
From: drken567 at gmail.com (Ken MacDonald)
Date: Tue, 5 Jan 2010 15:48:26 -0500
Subject: [Twisted-Python] Assistance with using Twisted with "pyinstaller"
Message-ID: <3468cae11001051248j77e19aefhcb941978338f5222@mail.gmail.com>

Hi, we're trying to using pyinstaller to create single-directory
distributions of our Twisted/python server on Linux. Wondering if anyone has
accomplished this? I googled and checked the archives, but there seems to be
no concrete information available.

I'm real new to pyinstaller and not really familiar with twisted internals,
so not sure where to start with this, particularly whether to package
our_server.tac, or the twistd script, or the our_server.py as the starting
point to bundle all of this stuff together. If anyone's done this
successfully, or failed miserably, would be interested in getting details.
Thanks,
Ken
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100105/24dba9f8/attachment.html>

From terry at jon.es  Tue Jan  5 14:47:51 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 22:47:51 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 21:12:34 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
Message-ID: <19267.45959.952860.661333@jon.es>

>>>>> "Tristan" == Tristan Seligmann <mithrandi at mithrandi.net> writes:

Tristan> On Tue, Jan 5, 2010 at 6:29 AM, Terry Jones <terry at jon.es> wrote:
>> - Once someone has made a function call, gotten a deferred, added
>> �call/errbacks to it, etc., it's gone. It's in flight. Forget about it.

Tristan> The thing is, this attitude isn't always reasonable.

Yes, I was being a bit deliberately flippant, and was speaking in the
context of deferred processing. Reading through
http://twistedmatrix.com/trac/ticket/990 there are lots of issues. It feels
to me like it's too complicated to tackle in a clean / simple manner inside
the Deferred class.

Tristan> Deferred is not necessarily the place to implement cancellation,
Tristan> but I think the idiom itself is important.

Yes, agreed.

Tristan> But, consider something like the transfer of a 512 TB file;
Tristan> cancellation /is/ possible, through closing the TCP connection,
Tristan> and the operation is significantly expensive, so "just forget it
Tristan> and let it finish" is a somewhat cavalier attitude to take.

I didn't mean to imply that cancellation isn't important or isn't possible
etc.

Tristan> I would imagine that you would errback the deferred in the general
Tristan> case of cancellation; if your callback chain doesn't handle
Tristan> errors, well...

Yes, you'd see an exception just as you would if some other error
happened. But errbacking the deferred is just one option. You can also
callback it or, in the most recent code I posted, just tell the deferred to
never fire.  They're all options. The point is to give the caller those
options.

Terry



From terry at jon.es  Tue Jan  5 14:53:37 2010
From: terry at jon.es (Terry Jones)
Date: Tue, 5 Jan 2010 22:53:37 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 15:27:16 on Tuesday, 5 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
Message-ID: <19267.46305.908634.631822@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

Glyph> And let's not forget, in long-running servers, it's possible to
Glyph> "leak" operations, and the associated resources like file
Glyph> descriptors.  When the caller says that they're not interested in
Glyph> the result of an operation any more, the library should clean up as
Glyph> much as possible, otherwise you'll start running out of those
Glyph> resources eventually.

Yes, but it shouldn't be the job of the caller to clean up something it has
no knowledge of.

I'm not sure if it's yet clear that I'm not trying *at all* to address
somehow stopping operations that are in progress. On the contrary, my code
always lets them run to their natural conclusion. It's just that if the
caller decides they're no longer interested in the result or that they want
the thing to fire right now, they can arrange for it. The originally called
code, including any err/callbacks that may be on the deferred it gave you,
is unaffected.

Using the word "cancel" in my original posting & class name was I guess
quite misleading.  Apologies for that. As usual I thought everyone would
know what I was talking about :-)

Is the simplified class that really is a Deferred (subclass) clearer?

Terry



From spongelavapaul at googlemail.com  Wed Jan  6 03:03:24 2010
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 6 Jan 2010 10:03:24 +0000
Subject: [Twisted-Python] Assistance with using Twisted with
	"pyinstaller"
In-Reply-To: <3468cae11001051248j77e19aefhcb941978338f5222@mail.gmail.com>
References: <3468cae11001051248j77e19aefhcb941978338f5222@mail.gmail.com>
Message-ID: <7129590B-4CD7-46F3-B1FE-717BE8E268E6@googlemail.com>


On 5 Jan 2010, at 20:48, Ken MacDonald wrote:

> Hi, we're trying to using pyinstaller to create single-directory  
> distributions of our Twisted/python server on Linux. Wondering if  
> anyone has accomplished this? I googled and checked the archives,  
> but there seems to be no concrete information available.

Sorry to be negative, but I've not managed to get pyinstaller working  
with twisted.

The reason I'm posting is that I have managed to get bbfreeze and  
cx_freeze working. This is all about 6 months old, so newer versions  
might be different, but to summarise:

cx_Freeze put everything into an executable zip file so you are left  
with one main binary and a handful of .so objects for python C modules  
(unless you patch the Python build to build static). I had to switch  
to bbfreeze because I needed to use Nevow and there were too many  
hoops to jump through to make it work with the data files accessed  
relative to __file__.

bbfreeze works with eggs, so it works with Nevow or anything else that  
uses data files, but the down side is that the result isn't zipped up  
into one executable.

I'm about to reopen the whole freezing thing for a new project, so I  
may be able to report back in a few weeks.


>
> I'm real new to pyinstaller and not really familiar with twisted  
> internals, so not sure where to start with this, particularly  
> whether to package our_server.tac, or the twistd script, or the  
> our_server.py as the starting point to bundle all of this stuff  
> together. If anyone's done this successfully, or failed miserably,  
> would be interested in getting details.

I dropped the tac file to make it easier to specify the entrypoint. To  
do this while still getting all the twistd goodness requires some  
hacking, but it isn't really necessary. You can use the tac file  
(better to change the extension to .py though) and put a few imports  
in the file that are only there to pull in dependencies that the  
freezing program can't find. It's basically an iterative thing - build  
it, note the missing dependencies, import them, repeat.

Good luck.




From glyph at twistedmatrix.com  Wed Jan  6 03:23:27 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 6 Jan 2010 05:23:27 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19267.46305.908634.631822@jon.es>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
Message-ID: <E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>


On Jan 5, 2010, at 4:53 PM, Terry Jones wrote:

> I'm not sure if it's yet clear that I'm not trying *at all* to address
> somehow stopping operations that are in progress. On the contrary, my code
> always lets them run to their natural conclusion. It's just that if the
> caller decides they're no longer interested in the result or that they want
> the thing to fire right now, they can arrange for it. The originally called
> code, including any err/callbacks that may be on the deferred it gave you,
> is unaffected.

I understand what you're saying: you're interested in a subset of what I'm interested in, here.  The point I'm trying to make is that once you've gone to the trouble of providing an API for *clients* of an operation to declare that they are no longer interested in its results, then it's wasteful for the underlying engine to continue executing the operation only to discard its result.  I think that coming up with a good API and semantics for "I no longer care about the result here" has a huge amount of overlap with this anyway.

I grant that it may well be easier to implement without worrying about the underlying operation though, and the semantics you've defined by explicitly ignoring the actually-stopping case are much simpler.  But that also means that you still have to go to the trouble of figuring out when you're no longer interested in the result any more, but after going to the trobule ... what's the benefit?

I know what the use-cases are for stopping the underlying operation (notifying the peer that you're not going to accept it, reclaiming the resources); but if you're just going to let the operation complete eventually anyway, why wouldn't you want to just finish processing the result when it arrives regardless?




From terry at jon.es  Wed Jan  6 05:09:35 2010
From: terry at jon.es (Terry Jones)
Date: Wed, 6 Jan 2010 13:09:35 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 05:23:27 on Wednesday, 6 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
Message-ID: <19268.32127.274082.288200@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> On Jan 5, 2010, at 4:53 PM, Terry Jones wrote:

Glyph> I understand what you're saying: you're interested in a subset of
Glyph> what I'm interested in, here.

Yes.

Glyph> The point I'm trying to make is that once you've gone to the trouble
Glyph> of providing an API for *clients* of an operation to declare that
Glyph> they are no longer interested in its results, then it's wasteful for
Glyph> the underlying engine to continue executing the operation only to
Glyph> discard its result.

Yes, agreed. But it's not at all clear to me how one should go about
stopping things in general. That's a much harder task than ignoring a
result or triggering a call/errback result yourself. My class just takes a
couple of small client-side pieces out of the way. I know you know all
this, I'm just trying to be clear for others / for the record, etc.

Glyph> I think that coming up with a good API and semantics for "I no
Glyph> longer care about the result here" has a huge amount of overlap with
Glyph> this anyway.

Hmmmm. I'm not sure about that. I agree if you s/huge amount/tiny/ :-)

Naively perhaps, it seems like the client declaring they're no longer
interested in a result is just a single bit of information. My class sits
between the chain of steps (callbacks) leading to the production of a
result and the chain of steps (callbacks) involved client-side in
post-processing the result. It's a nice/simple way for the client to snip
the overall chain. If I were going to try to push it further, I would start
thinking about how to (figuratively) propagate this bit of information
("your result is no longer relevant / needed" back up the chain of as-yet
unfired callbacks. If callbacks had access to that information, they could
act accordingly.

I don't think the running of the callback chain should be interrupted. As a
small example, one callback function might do some setup operation (let's
say open a file, or print an opening HTML tag) that a later one makes sure
is wrapped up, using addBoth. It seems like there are two things that it
would be nice to have: a way for a callback to know that its result will
ultimately be ignored, and a mechanism for a callback to register a
function to be called if an operation is canceled while it is running. In
the case that an operation was canceled, its current callback would have
its cancel function (if any) called, and subsequent callbacks would all
find the resultWillBeIgnored to be True.  Something like that.

I'm happy to go into that discussion too, if you want. I do have a use for
it as well (see below).

Glyph> I grant that it may well be easier to implement without worrying
Glyph> about the underlying operation though, and the semantics you've
Glyph> defined by explicitly ignoring the actually-stopping case are much
Glyph> simpler.

Yes, agreed. I like the fact that the class is simple and that it deals
with the client-side issues, allowing ignoring, timing out, early firing,
etc.  As you say, the much harder problem remains. But the harder problem
is a bit less messy now (at least in my mind): it's "just" cancellation.
Responsibilities are cleanly divided by my class - the client takes care of
itself, and cancellation has *only* to deal with callbacks placed on a
deferred that was generated by what the client called.

Looked at from this POV, an approach to cancellation would be for code that
is able to cancel operations it has begun to also provide a cancel method.
One way to think about doing this would be to have the cancel method take a
deferred as an argument. Something like my class could then hand the
deferred back, effectively saying "my client is no longer interested in
this deferred. You can call/errback it, or not, it makes no difference to
us". If you've done that once, you can do it multiple times - by which I
mean that I might write code that's a client of getPage, and getPage is a
client of XXX, and XXX is a client of YYY, etc. Each could in turn pass the
deferred it got back to the thing that created it. If there's no cancel
method, then that's as far as can be gone with canceling. At that point the
result is no longer passed because the first ControllableDeferred instance
that's involved will effectively snip the link (or send an early result) in
the sequence of steps that would originally have been done.

Deferred producing code that's capable of cancellation might simply keep a
dictionary of outstanding deferreds, and itself use a callback to remove
things from its dictionary once a result is calculated and about to be
passed on. My resizable dispatch queue code uses that approach. Or it could
be more sophisticated and be a state machine, that transitions to new
states as the callbacks that it put onto the deferred are called. Done this
way, the business of cancellation is not handled by the Deferred class at
all, which I think is a good thing because Deferreds are simple and don't
have any idea of the operational connections between the functions in their
call/errback chains. But the code that obtained the deferred and put
callbacks onto it does.

So, concretely, you could imagine something like this:

  - a getPageFactory class with a getPage method that returns a deferred,
    and a cancel method that accepts a deferred.

  - I'd add a cancelFunc argument (default None) to my ControllableDeferred
    class.  If not None, that gets called with a deferred from getPage in
    case its client decides to ignore the operation or get an early result.

That's pretty simple, I think. And it keeps all code for doing cancellation
out of the Deferred class. Any client code that wants to be able to control
the deferreds its getting can use a ControllableDeferred. And any code that
produces deferreds and wants to offer the possibility of cancellation of
underway operations can provide / advertise some kind of cancel function.
That keeps cancellation split into logical pieces, wherein each piece
doesn't know or care where its deferred came and safely knows that its
result will be ignored. The important piece of the overall operation that's
provided by ControllableDeferred is that it keeps all these pieces
separate, only passing on results when they're ready.

We'd generalize some of this, use an interface, etc.


Glyph> But that also means that you still have to go to the trouble of
Glyph> figuring out when you're no longer interested in the result any
Glyph> more, but after going to the trobule ... what's the benefit?

It's partly as you said in an earlier reply: releasing resources. It's also
so that the client code can move on (see below).

Glyph> I know what the use-cases are for stopping the underlying operation
Glyph> (notifying the peer that you're not going to accept it, reclaiming
Glyph> the resources); but if you're just going to let the operation
Glyph> complete eventually anyway, why wouldn't you want to just finish
Glyph> processing the result when it arrives regardless?

Because it may not arrive at all, or it may arrive at a point when I'm no
longer able to deal with a result. And because the non-arrival might be
holding up some other part of a system (thereby consuming a resource).

In the case I'm dealing with right now, I'm using my resizable dispatch
queue code to process jobs that are submitted via a web form. To be more
concrete, a user of my app can enter a Twitter user name and my code then
goes and does a bunch of work. The processing of that Twitter user is a
"job" here, and it may involve thousands of network API calls, to Twitter,
to FluidDB, to other services. Because processing a job can create a lot of
traffic, I use my dispatch queue class to keep a limit on the number of
jobs that are being done in parallel. So there are a finite number of slots
available for processing jobs. I know when a job is done because a deferred
fires, and one of the callbacks in that deferred takes the job out of the
list of currently outstanding jobs. It all works nicely.

But the queue code just fires jobs and doesn't have any idea what they do.
If they never fire, it continues to think the job is underway. This is
generally true for any client that gets given a deferred - your continued
processing is in the hands of the thing that made the deferred. In my case,
a slot in a finite table is occupied. If I want to give up on it, I need to
do some clean-up and may therefore not want the callbacks I added to the
deferred to ever be called (e.g., data structs that could have processed
the result may be changed or gone).

I.e., I want my client to have more control over how / when / if its
callbacks are called. That's totally not under my control if I call an
unknown black-box deferred-producing code that may or may not call me back.

In my particular case, it seems like I sometimes make a call to the Twitter
API and that call never completes. I don't know what's going on, I suspect
the connection is made and then held open and never processed by Twitter.
So a deferred, or multiple deferreds, simply don't fire. I want to give up
on them, clean up, and move on. From the client POV I don't know or care
what went wrong with the call, I just know that it's time to do something
else.

I'm also interested in the wider problem (cancellation), because I'd like
to tell a job to cancel itself. In my case this could in part take the form
of a test inside a generator that was yielding deferreds to process the
Twitter user.  That would be a simple way to cancel the outstanding work
for a job, even if I still couldn't reach out to the code that gave me a
deferred to tell it to lose a connection etc. I hope that makes sense.

OK, sorry for so many words. I hope this seems like it's heading in a
useful direction. It does to me.

Terry



From ssteinerx at gmail.com  Wed Jan  6 07:46:46 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Wed, 6 Jan 2010 09:46:46 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
Message-ID: <CB7A5294-8731-4D26-BBC7-9D8B72FEA5C5@gmail.com>


On Jan 6, 2010, at 5:23 AM, Glyph Lefkowitz wrote:

> I know what the use-cases are for stopping the underlying operation (notifying the peer that you're not going to accept it, reclaiming the resources); but if you're just going to let the operation complete eventually anyway, why wouldn't you want to just finish processing the result when it arrives regardless?

Please forgive an old real-time jock here, but one way of handling this, and yes, I know how nasty, dirty, and ugly it is, is to patch the response chain so that all further notifications route to an ABORT handler that explicitly knows the details of how to clean old things up and stop new things from happening.

I have had to use a mechanism like this in multi-processor, low bandwidth, high priority systems where a corrupted message can not be allowed to propagate and use up bandwidth or processor time that could be used to regenerate a correct message (think naval guidance system where one or more transducers just stopped working properly, like, got hit by a torpedo or started taking on sea water under pressure)

Obviously, this is very radical and the ABORT handler needs to be completely aware of exactly how to interrupt all things in the chain properly in all possible states, but if it's that important that the process be interrupted, then it is.

As far as I know, in my limited spelunking into Twisted's guts, Deferred's pretty much only know about themselves and their callbacks so I'm not sure whether there's a "ringmaster" that knows any more than that that could make sure that all things are cleaned up properly.

S




From glyph at twistedmatrix.com  Wed Jan  6 20:32:08 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 6 Jan 2010 22:32:08 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19268.32127.274082.288200@jon.es>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
	<19268.32127.274082.288200@jon.es>
Message-ID: <F21B04EB-3295-42A5-815D-515AACC97096@twistedmatrix.com>


On Jan 6, 2010, at 7:09 AM, Terry Jones wrote:

>>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
> Glyph> On Jan 5, 2010, at 4:53 PM, Terry Jones wrote:
> 
> Glyph> I understand what you're saying: you're interested in a subset of
> Glyph> what I'm interested in, here.
> 
> Yes.

> Glyph> I think that coming up with a good API and semantics for "I no
> Glyph> longer care about the result here" has a huge amount of overlap with
> Glyph> this anyway.
> 
> Hmmmm. I'm not sure about that. I agree if you s/huge amount/tiny/ :-)

Okay, "a huge amount" was not usefully descriptive :).

What I mean is, there are a lot of weird little edge-cases in how multiple layers of the stack interact when they're dealing with a shared Deferred, and if we're 

However, upon further inspection I think that they key distinction between what you've proposed and what I'm talking about is the distinction between cancelling *one* layer of the callback chain and cancelling *all* layers of the callback chain.

Your description (elided for brevity's sake) was very helpful.  You've got resources which your callbacks are consuming by way of being "currently outstanding", and you want to be able to free *those* resources, without necessarily worrying about 

> Yes, agreed. I like the fact that the class is simple and that it deals
> with the client-side issues, allowing ignoring, timing out, early firing,
> etc.  As you say, the much harder problem remains. But the harder problem
> is a bit less messy now (at least in my mind): it's "just" cancellation.
> Responsibilities are cleanly divided by my class - the client takes care of
> itself, and cancellation has *only* to deal with callbacks placed on a
> deferred that was generated by what the client called.

I don't think that you can completely separate the problems.  You seem to have a reasonable solution to the problem of one layer of the Deferred stack, but once you're trying to deal with multiple layers of the stack at once, interactions occur which can be difficult to reconcile with the same API, many of which are already documented in the ticket's discussion.

> Looked at from this POV, an approach to cancellation would be for code that
> is able to cancel operations it has begun to also provide a cancel method.
> One way to think about doing this would be to have the cancel method take a
> deferred as an argument.

This is a *very* interesting idea, although I don't like the API that you propose for it.  By separating the cancel method from the Deferred itself, you remove the ability for a trivial client of that Deferred to say "forget about it" without also maintaining a reference to the thing that gave it the Deferred in the first place.  That means that you need a new 'operation' API, and your code needs to take twice as many parameters, and it generally gets ugly.

> Something like my class could then hand the
> deferred back, effectively saying "my client is no longer interested in
> this deferred. You can call/errback it, or not, it makes no difference to
> us". If you've done that once, you can do it multiple times - by which I
> mean that I might write code that's a client of getPage, and getPage is a
> client of XXX, and XXX is a client of YYY, etc. Each could in turn pass the
> deferred it got back to the thing that created it.

This implies, to me, that the cancellation callback would be better passed to addCallbacks(): effectively creating a third callback chain going from invoker to responder rather than the other way 'round as callbacks and errbacks do.

I have stumbled in the direction of this thought a few times already but this is the first time I've had a really clear grasp of how it would work.  Now I can see that each layer of the stack may have its own resources that it might want to clean up... previously I thought this could be done entirely with errbacks, but in this version, it doesn't matter if the base deferred doesn't know how to kick off the errback chain: all the resources on the *rest* of the callback chain can be cleaned up.

I'm going to need to figure out some good values for XXX and YYY here in order to truly dispel the fog, though.  The examples you provided are good but I still don't have a good feel for what might be a good general description of what resources could be used in different parts of the callback chain.

> If there's no cancel method, then that's as far as can be gone with canceling.

This is one of the really tricky issues that has faced this feature all along: what happens when some part of the chain involved doesn't know what to do with a canceller?  And your solution here seems like it may be a very elegant hack: do exactly the same thing as other parts of the callback chain.  What I mean is: currently, if a particular callback pair doesn't have a callback or an errback, the behavior is to do nothing and pass the result through.  Cancellation could do exactly the same thing!

> At that point the
> result is no longer passed because the first ControllableDeferred instance
> that's involved will effectively snip the link (or send an early result) in
> the sequence of steps that would originally have been done.

Severing the link seems like a problem though; if we do that, then introducing any non-cancellation-aware Deferred - or callback, for that matter - into a cancellation-aware pipeline will prevent cancellations from propagating further up, and there should be no reason to do that.

> And it keeps all code for doing cancellation out of the Deferred class.

Why is it that you want to keep the cancellation code out of Deferred?  It seems very useful to me to have one object that you can say "stop" to, without necessarily knowing what's going on above it or where it came from.

> OK, sorry for so many words. I hope this seems like it's heading in a
> useful direction. It does to me.

Yes, this has been very useful.  I hope we can distill this into some useful conclusions soon. :)


From glyph at twistedmatrix.com  Wed Jan  6 20:35:10 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 6 Jan 2010 22:35:10 -0500
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <CB7A5294-8731-4D26-BBC7-9D8B72FEA5C5@gmail.com>
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
	<CB7A5294-8731-4D26-BBC7-9D8B72FEA5C5@gmail.com>
Message-ID: <7C76934F-E446-4E41-9A0E-D4C786E1BDE9@twistedmatrix.com>


On Jan 6, 2010, at 9:46 AM, ssteinerX at gmail.com wrote:

> As far as I know, in my limited spelunking into Twisted's guts, Deferred's pretty much only know about themselves and their callbacks so I'm not sure whether there's a "ringmaster" that knows any more than that that could make sure that all things are cleaned up properly.

Indeed not.  And I don't think there could be; in your ABORT handler description, you are describing a system where pretty much all the constraints are known, and all the code is being integrated into a single unit, together with hardware.  Twisted is supposed to be general-purpose enough that a "ringmaster" packaged with Twisted could not know about every possible different thing that might need to be cancelled and could not account for them...

(Unless of course you're talking about having a plugin API where things could register interest in cancellation, and that's pretty much what Terry and I seem to be converging on in the other fork of this thread.)





From terry at jon.es  Wed Jan  6 21:55:30 2010
From: terry at jon.es (Terry Jones)
Date: Thu, 7 Jan 2010 05:55:30 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 22:32:08 on Wednesday, 6 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
	<19268.32127.274082.288200@jon.es>
	<F21B04EB-3295-42A5-815D-515AACC97096@twistedmatrix.com>
Message-ID: <19269.26946.281676.959849@jon.es>

Hi Glyph

It's very late here, so I'll limit myself to a few thousand lines of reply.

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> On Jan 6, 2010, at 7:09 AM, Terry Jones wrote:

Glyph> What I mean is, there are a lot of weird little edge-cases in how
Glyph> multiple layers of the stack interact when they're dealing with a
Glyph> shared Deferred, and if we're

The above was truncated.

Glyph> However, upon further inspection I think that they key distinction
Glyph> between what you've proposed and what I'm talking about is the
Glyph> distinction between cancelling *one* layer of the callback chain and
Glyph> cancelling *all* layers of the callback chain.

Yes, that's right. I nearly made a diagram for people today, but didn't
know if anyone would be interested. But here's one way to look at it.

In today's deferred world, you have (in general) situations like this:

  func makes d -> c1 -> c2 -> c3 -> c4 -> c5 -> c6 -> c7 -> client -> c8 -> c9

I.e., the client makes a call, gets its hands on a deferred (which already
has zero or more call/errbacks on its chain) and adds its own callbacks.

At that point cancellation is very hard. Neither the client, nor the
deferred itself, or the original function, can know how to cancel the
operation. From the POV of the client and the deferred, that callback chain
is just a bunch of indistinguishable functions.

My ControllableDeferred class, if used by just the client, makes it
possible for the client to cut the link between c7 and c8, either by iself
(the client) calling the deferred it receives, which causes c8 to fire/err,
or by deactivating it, thereby arranging that c8 is never called.

So the ControllableDeferred in some sense introduces a cut point between
two callbacks in the original chain. And the cut point is in a sensible
logical position because the client added c8 and c9 and can be expected to
know what to do to clean them up if it decides it's done waiting for the
original d to fire.

But the above picture is more uniform than the reality: it hides the fact
that the callbacks were added to the deferred in groups (of zero or more).
That is, the chain really looks like this:

  func makes d -> w1 -> w2 -> x1 -> x2 -> y1 -> y2 -> y3 -> client -> c8 -> c9

which is to say that the client in fact called function Y. Y called X. X
called W, and W called something that returned a deferred. W then adds w1,
and w2 to d and returns it to X. X adds x1 and x2 to d and returns it to Y.
Y adds y1-3 and returns it to C.

So you can imagine now that we insert a cut point at each logical boundary,
and then the cancel information can flow back up the chain and each logical
unit presumably knows how to discard / abort etc., whatever it may have in
progress.

That picture is mainly for clarity. I'm sure you're miles ahead already...


Glyph> Your description (elided for brevity's sake) was very helpful.
Glyph> You've got resources which your callbacks are consuming by way of
Glyph> being "currently outstanding", and you want to be able to free
Glyph> *those* resources, without necessarily worrying about

However you were going to finish that sentence, I agree :-)

I want to free the resources, and I want to be able to get on with whatever
it is I'm supposed to be doing.

>> Yes, agreed. I like the fact that the class is simple and that it deals
>> with the client-side issues, allowing ignoring, timing out, early firing,
>> etc.  As you say, the much harder problem remains. But the harder problem
>> is a bit less messy now (at least in my mind): it's "just" cancellation.
>> Responsibilities are cleanly divided by my class - the client takes care of
>> itself, and cancellation has *only* to deal with callbacks placed on a
>> deferred that was generated by what the client called.

Glyph> I don't think that you can completely separate the problems.  You
Glyph> seem to have a reasonable solution to the problem of one layer of
Glyph> the Deferred stack, but once you're trying to deal with multiple
Glyph> layers of the stack at once, interactions occur which can be
Glyph> difficult to reconcile with the same API, many of which are already
Glyph> documented in the ticket's discussion.

It may be that there are interactions between W and Y (for example) in my
above (2nd) diagram, but I expect that would be infrequent. E.g., W might
decide to attach a callback to d after it has been returned to (and added
to by) X, Y, etc.  That seems to be a problem, but if W were to add those
extra callbacks within another logical unit of the callback chain, it would
be alerted of the cancellation in the normal fashion (twice). Make sense?

>> Looked at from this POV, an approach to cancellation would be for code that
>> is able to cancel operations it has begun to also provide a cancel method.
>> One way to think about doing this would be to have the cancel method take a
>> deferred as an argument.

Glyph> This is a *very* interesting idea, although I don't like the API
Glyph> that you propose for it.  By separating the cancel method from the
Glyph> Deferred itself, you remove the ability for a trivial client of that
Glyph> Deferred to say "forget about it" without also maintaining a
Glyph> reference to the thing that gave it the Deferred in the first place.

I agree that's less desirable, but I'm not sure it's a necessary
consequence of the approach. Or maybe it is.

Today I modified my ControllableDeferred class to allow a cancelFunc
argument. The __init__ is a tiny bit more clunky, but it has methods just
like the old class, e.g.

    def callback(self, result):
        if not self._called:
            self._called = True
            if self.cancelFunc:
                self.cancelFunc(self._calld)
            defer.Deferred.callback(self, result)

    def deactivate(self):
        if not self._called:
            self._called = True
            if self.cancelFunc:
                self.cancelFunc(self._calld)

This is just what you suggest - the cancel function is inside the deferred
class (my ControllableDeferred is a subclass of Deferred, so that's
literally true).  The client, receiving an instance of this class, can just
say "forget about it" and the cancel goes back to wherever it should go, if
anywhere.  So you can imagine writing a getPage function (or class) that
returns ControllableDeferred instances. Calling the deferred or
deactivating it would then result in a HTTPClientFactory instance calling
transport.loseConnection.

>> Something like my class could then hand the deferred back, effectively
>> saying "my client is no longer interested in this deferred. You can
>> call/errback it, or not, it makes no difference to us". If you've done
>> that once, you can do it multiple times - by which I mean that I might
>> write code that's a client of getPage, and getPage is a client of XXX,
>> and XXX is a client of YYY, etc. Each could in turn pass the deferred it
>> got back to the thing that created it.

Glyph> This implies, to me, that the cancellation callback would be better
Glyph> passed to addCallbacks(): effectively creating a third callback
Glyph> chain going from invoker to responder rather than the other way
Glyph> 'round as callbacks and errbacks do.

Yes, I like that a lot, at least in a 5:30am superficial kinda way.

A key difference between what I'd imagined and what you're suggesting is
that in my approach, the cancel call goes directly to the thing (it would
need to be a class instance, I suspect) that got the deferred. I.e. from my
2nd diagram, if the client calls cancel (or deactivate, as in the code),
then the thing that added y1 to the chain is going to have its cancel
method called (or some method that it asked to have called). So the control
in a sense jumps back over y3, y2 and y1 to the root of the logical Y
section.

Your approach passes the signal back up the chain. Most secondary steps,
like y3 and y2, will pass the call along without taking any action. But
they don't have to, which is good. And the first callback of a logical unit
can always do exactly what would have been done in my approach above.

I think your approach is better.

Glyph> I have stumbled in the direction of this thought a few times already
Glyph> but this is the first time I've had a really clear grasp of how it
Glyph> would work.  Now I can see that each layer of the stack may have its
Glyph> own resources that it might want to clean up... previously I thought
Glyph> this could be done entirely with errbacks, but in this version, it
Glyph> doesn't matter if the base deferred doesn't know how to kick off the
Glyph> errback chain: all the resources on the *rest* of the callback chain
Glyph> can be cleaned up.

Yes. And the logical divisions of the call/errback chain are going to
ignore each other in any case. Once a further-down-the-chain function has
either called or deactivated the deferred (to put it simply - it's actually
not just one deferred, at least in my implementation), it doesn't matter at
all what the upstream (earlier) functions do - the result, if any, is not
going through.

Glyph> I'm going to need to figure out some good values for XXX and YYY
Glyph> here in order to truly dispel the fog, though.

I'm a bit foggy too. That's why I started playing with getPage to try to
use a common example with at least a few levels of processing. But I didn't
have time to think about it clearly. I wrote some foggy code, which I wont
inflict on you. I'm pretty sure there's a clean solution in here though,
that we can get to with a bit more back & forth.

>> If there's no cancel method, then that's as far as can be gone with
>> canceling.

Glyph> This is one of the really tricky issues that has faced this feature
Glyph> all along: what happens when some part of the chain involved doesn't
Glyph> know what to do with a canceller?  And your solution here seems like
Glyph> it may be a very elegant hack: do exactly the same thing as other
Glyph> parts of the callback chain.  What I mean is: currently, if a
Glyph> particular callback pair doesn't have a callback or an errback, the
Glyph> behavior is to do nothing and pass the result through.  Cancellation
Glyph> could do exactly the same thing!

Yes, that's great. That's *your* solution, btw :-)

>> At that point the result is no longer passed because the first
>> ControllableDeferred instance that's involved will effectively snip the
>> link (or send an early result) in the sequence of steps that would
>> originally have been done.

Glyph> Severing the link seems like a problem though; if we do that, then
Glyph> introducing any non-cancellation-aware Deferred - or callback, for
Glyph> that matter - into a cancellation-aware pipeline will prevent
Glyph> cancellations from propagating further up, and there should be no
Glyph> reason to do that.

Yes, agreed.

>> And it keeps all code for doing cancellation out of the Deferred class.

Glyph> Why is it that you want to keep the cancellation code out of
Glyph> Deferred?  It seems very useful to me to have one object that you
Glyph> can say "stop" to, without necessarily knowing what's going on above
Glyph> it or where it came from.

Yes, I guess I didn't want to keep it out of there - especially since I
already put it in today.... I guess what I really meant was that I wanted
it to be clean / simple, because Deferreds are that way already (once
you've spent a couple of years thinking about them).

>> OK, sorry for so many words. I hope this seems like it's heading in a
>> useful direction. It does to me.

Glyph> Yes, this has been very useful.  I hope we can distill this into
Glyph> some useful conclusions soon. :)

I think we can / will.  It should be fairly easy to build an example based
on getPage. I badly wanted to today, but we have a ton of stuff going on
right now and I forced myself to put this aside for some hours.

Terry



From terry at jon.es  Thu Jan  7 06:48:09 2010
From: terry at jon.es (Terry Jones)
Date: Thu, 7 Jan 2010 14:48:09 +0100
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: Your message at 22:32:08 on Wednesday, 6 January 2010
References: <19266.41597.624446.721449@jon.es>
	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>
	<19266.49182.1607.537978@jon.es>
	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>
	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>
	<19267.46305.908634.631822@jon.es>
	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>
	<19268.32127.274082.288200@jon.es>
	<F21B04EB-3295-42A5-815D-515AACC97096@twistedmatrix.com>
Message-ID: <19269.58905.938437.518724@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

Glyph> This implies, to me, that the cancellation callback would be better
Glyph> passed to addCallbacks(): effectively creating a third callback
Glyph> chain going from invoker to responder rather than the other way
Glyph> 'round as callbacks and errbacks do.

After I went to bed I realized that someone is immediately going to want to
have a cancel function that returns a deferred. And what happens if
something goes wrong in a cancel function?

So you could end up with four chains, not two. And you could have
addCancelback *prepend* its functions to its chains, so that when the chain
is fired using the normal mechanism, it runs backwards.

So a deferred is running its callbacks from one end, and a client at the
other end calls the cancelback, which starts running callbacks from its
end.  And when the two meet? It's like the moment in Ghostbusters, when
they're screaming "Don't cross the streams! Don't cross the streams!"

The mind begins to boggle...  does madness that way lie?  Maybe not.

T



From drken567 at gmail.com  Thu Jan  7 10:49:21 2010
From: drken567 at gmail.com (Ken MacDonald)
Date: Thu, 7 Jan 2010 12:49:21 -0500
Subject: [Twisted-Python] Assistance with using Twisted with
	"pyinstaller"
In-Reply-To: <7129590B-4CD7-46F3-B1FE-717BE8E268E6@googlemail.com>
References: <3468cae11001051248j77e19aefhcb941978338f5222@mail.gmail.com> 
	<7129590B-4CD7-46F3-B1FE-717BE8E268E6@googlemail.com>
Message-ID: <3468cae11001070949o9b34843h91dcffa437cc36d6@mail.gmail.com>

Thanks, I'll keep cx/bb-Freeze in mind if pyinstaller doesn't work out. I
did get some tips from one of our internal guys;  they had built a project
successfully with Twisted & pyinstaller some time back. I'm trying to figure
out the details of what went on there. Seems that they made an <appname>.py
which imported Twisted's UnixApplicationRunner() which then imported what
had been the .tac file (renamed to <appname>tac.py) to launch the server.
Still working out the details, imports, etc., but appears that <appname>.py
took over much of the functionality that twistd was providing and made it
into more of a straightforward python app. We'll see how this goes.
Ken

On Wed, Jan 6, 2010 at 5:03 AM, Paul Thomas
<spongelavapaul at googlemail.com>wrote:

>
> On 5 Jan 2010, at 20:48, Ken MacDonald wrote:
>
> > Hi, we're trying to using pyinstaller to create single-directory
> > distributions of our Twisted/python server on Linux. Wondering if
> > anyone has accomplished this? I googled and checked the archives,
> > but there seems to be no concrete information available.
>
> Sorry to be negative, but I've not managed to get pyinstaller working
> with twisted.
>
> The reason I'm posting is that I have managed to get bbfreeze and
> cx_freeze working. This is all about 6 months old, so newer versions
> might be different, but to summarise:
>
> cx_Freeze put everything into an executable zip file so you are left
> with one main binary and a handful of .so objects for python C modules
> (unless you patch the Python build to build static). I had to switch
> to bbfreeze because I needed to use Nevow and there were too many
> hoops to jump through to make it work with the data files accessed
> relative to __file__.
>
> bbfreeze works with eggs, so it works with Nevow or anything else that
> uses data files, but the down side is that the result isn't zipped up
> into one executable.
>
> I'm about to reopen the whole freezing thing for a new project, so I
> may be able to report back in a few weeks.
>
>
> >
> > I'm real new to pyinstaller and not really familiar with twisted
> > internals, so not sure where to start with this, particularly
> > whether to package our_server.tac, or the twistd script, or the
> > our_server.py as the starting point to bundle all of this stuff
> > together. If anyone's done this successfully, or failed miserably,
> > would be interested in getting details.
>
> I dropped the tac file to make it easier to specify the entrypoint. To
> do this while still getting all the twistd goodness requires some
> hacking, but it isn't really necessary. You can use the tac file
> (better to change the extension to .py though) and put a few imports
> in the file that are only there to pull in dependencies that the
> freezing program can't find. It's basically an iterative thing - build
> it, note the missing dependencies, import them, repeat.
>
> Good luck.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100107/d83c7ba7/attachment-0001.html>

From warner at lothar.com  Thu Jan  7 15:29:04 2010
From: warner at lothar.com (Brian Warner)
Date: Thu, 07 Jan 2010 14:29:04 -0800
Subject: [Twisted-Python] A pseudo-deferred class that can be canceled
In-Reply-To: <19269.58905.938437.518724@jon.es>
References: <19266.41597.624446.721449@jon.es>	<525B6979-B9B2-498A-A292-57551D550968@twistedmatrix.com>	<19266.49182.1607.537978@jon.es>	<f5eea9171001051112n559f873m70b6f1867a8b2bd5@mail.gmail.com>	<73C34D9F-7A6B-4CCC-A213-CE71AE242AD4@twistedmatrix.com>	<19267.46305.908634.631822@jon.es>	<E47113FD-92DB-46A0-900E-9DFCDC0187B3@twistedmatrix.com>	<19268.32127.274082.288200@jon.es>	<F21B04EB-3295-42A5-815D-515AACC97096@twistedmatrix.com>
	<19269.58905.938437.518724@jon.es>
Message-ID: <4B466030.1000303@lothar.com>

Terry Jones wrote:

> After I went to bed I realized that someone is immediately going to
> want to have a cancel function that returns a deferred. And what
> happens if something goes wrong in a cancel function?

FWIW, the way I've dealt with these sorts of things (in Tahoe, at least)
has been to set a flag that is checked at a variety of useful stopping
points, and if the flag is set, raise some sort of "Interrupted"
exception, which bypasses the rest of the callback chain. Then, at the
end, I add an errback which only catches Interrupted and ignores it. I
think of this as the Deferred equivalent of returning early from a
subroutine. It has the nice property that anything that goes wrong in
the interrupt/cancellation process will be reported in the same place as
any other errors.

Something like:

 class Interrupted(Exception): pass

 class Foo:
   interrupted = False
   def start(self):
     d = self.do_one()
     d.addCallback(self.do_two)
     d.addCallback(self.do_three)
     d.addErrback(self.eat_interrupt)
     return d
   def interrupt(self):
     self.interrupted = True
   def do_one(self):
     return startSomething()
   def do_two(self, res):
     if self.interrupted: raise Interrupted()
     return startSomethingElse()
   def do_three(self, res):
     if self.interrupted: raise Interrupted()
     return startSomethingOther()
   def eat_interrupt(self, f):
     f.trap(Interrupted)
     return None

 d = Foo().start()

This doesn't explicitly cancel whatever step is currently in progress,
but it makes sure that we won't move on to the next step. When the steps
are small and reasonably side-effect free, this seems to work pretty
well.

If the steps were larger, then I'd have do_one/do_two/do_three record a
counter to indicate what step was currently in progress, and then change
interrupt() to perform whatever sort of cancellation was appropriate for
that particular step. This usually makes it more obvious what sorts of
references or objects or whatever you'll be needing to cancel the work
that's been started, because you have to stash them (for use by
interrupt()) at the same time that you start the work:

   def do_two(self, res):
     if self.interrupted: raise Interrupted()
     self.current_step = 2
     handle = self.start_something_long()
     self.handle_to_cancel_step_2 = handle
     return handle.start()
  def interrupt(self):
     self.interrupted = True
     ...
     if self.current_step == 2:
       self.handle_to_cancel_step_2.cancel()

I've also had systems (somewhere in Buildbot, I think) where interrupt()
took and stashed a Failure argument, and made sure that the
already-running Deferred chain errbacked with that, by using:

 if self.interrupted: raise self.interrupted

but I'm not fond of that technique anymore, since the Failure that pops
out of the chain won't have a stack trace that references anything in
the chain. It's a tricky subject: you care both about who called
interrupt() and at what point in the chain was the interrupt recognized.
One other trick I've used is to have self.interrupted be a string,
recording "why" the process was interrupted, and arrange for the
Interrupt() class to include that string in its repr.


All that said, the handful of places where I've used these techniques
have since grown large enough that I'm planning to rewrite them in terms
of state machines, and to have exactly one Deferred (used to indicate
overall completion). The immediate problem that the big Deferred chain
is causing me is that remote Foolscap calls to hosts that have silently
disconnected (e.g. they got unplugged from the network) will stall for
20 minutes, causing the rest of the chain to stall, and a state machine
approach will make it easier to build adaptive timeouts around these
calls.

cheers,
 -Brian



From exarkun at twistedmatrix.com  Sat Jan  9 22:05:12 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Jan 2010 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1263099912.43.1875584702@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100110/4c91806e/attachment-0001.html>

From kevin.horn at gmail.com  Sun Jan 10 00:22:16 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sun, 10 Jan 2010 01:22:16 -0600
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <1263099912.43.1875584702@twistedmatrix.com>
References: <1263099912.43.1875584702@twistedmatrix.com>
Message-ID: <562bcc11001092322g21a63f48j1458822e222aaa7c@mail.gmail.com>

I'd like to point out that for three of the last four weeks, more tickets
have been closed than have been opened.

Go team!  (especially exarkun and jesstess).

Kevin Horn

On Sat, Jan 9, 2010 at 11:05 PM, <exarkun at twistedmatrix.com> wrote:

>  Bug summary
> ______________________
> Summary for 2010-01-03 through 2010-01-10
> Bugs opened: 6    Bugs closed: 7  Total open bugs: 1217 (-1)
>
> |== Type Changes   |== Priority Changes   |== Component Changes
> |Defect:       -2  |Highest:  -1          |Conch:               +0
> |Enhancement:  +1  |Normal:   -1          |Core:                +1
>                    |Low:      +1          |Mail:                +0
>                                           |Release Management:  -1
>                                           |Trial:               -1
>
>
> Total TicketsOpen Tickets
>
>
> New / Reopened Bugs
> ______________________
>                     ===== Normal =====
> [#4197] t.conch.insults.window.ScrolledArea is not instantiable. (opened by ali)
>     defect          conch      http://twistedmatrix.com/trac/ticket/4197
>
> [#4199] spawnProcess should reset signal handlers to default before exec()ing new executable (opened by itamarst)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4199
>
> [#4200] SMTP Client tutorial uses bad markup (opened by khorn) (CLOSED, fixed)
>     enhancement     mail       http://twistedmatrix.com/trac/ticket/4200
>
> [#4201] Broken link in core/howto/tutorial/intro (opened by khorn) (CLOSED, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4201
>
> [#4202] Bad markup in doc/web2/howto.object-traversal (opened by khorn)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4202
>
>                     ===== Low =====
> [#4198] twisted.protocols.sip assumes DelayedCalls are scheduled by wallclock time (opened by ivank)
>     defect          core       http://twistedmatrix.com/trac/ticket/4198
>
>
>
> Closed Bugs
> ______________________
>                     ===== Highest =====
> [#3251] Web2 tarball install doesn't jive with setuptools of integrated tarball (opened by ralphm, closed by thijs, wontfix)
>     defect          release management http://twistedmatrix.com/trac/ticket/3251
>
>                     ===== Normal =====
> [#3848] twisted.test.test_randbytes.ConditionalSecureRandomTestCase fails on Python trunk at HEAD (opened by ivank, closed by ivank, fixed)
>     defect          core       http://twistedmatrix.com/trac/ticket/3848
>
> [#4200] SMTP Client tutorial uses bad markup (opened by khorn, closed by jesstess, fixed)
>     enhancement     mail       http://twistedmatrix.com/trac/ticket/4200
>
> [#4201] Broken link in core/howto/tutorial/intro (opened by khorn, closed by jesstess, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4201
>
> [#2689] twisted.test.test_assertions is lonely (opened by exarkun, closed by jesstess, fixed)
>     defect          trial      http://twistedmatrix.com/trac/ticket/2689
>
> [#4157] non-local inlineCallbacks exit from returnValue being called in the wrong function is very confusing (opened by glyph, closed by glyph, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4157
>
> [#2116] sshsimpleserver.py on Windows (opened by synapsis, closed by exarkun, worksforme)
>     defect          conch      http://twistedmatrix.com/trac/ticket/2116
>
>
>
> Ticket Lifetime Stats
> ______________________
> Oldest open ticket - [#50] conch command-line client doesn't work in win32 (since 2003-07-12 16:41:06).
> Newest open ticket - [#4202] Bad markup in doc/web2/howto.object-traversal (since 2010-01-08 15:41:02).
>
> Mean open ticket age: 878 days, 16:53:23.432636.
> Median: 854 days, 5:55:22.572324.
> Standard deviation: 616 days, 6:48:49.855952.
> Interquartile range: 941 days, 17:33:57.
>
> Mean time between ticket creation and ticket resolution: 211 days, 6:59:00.709972.
> Median: 27 days, 11:22:47.
> Standard deviation is 358 days, 16:38:52.703477.
> The interquartile range is 249 days, 7:15:45.
>
> Mean time spent in review: 79 days, 8:39:32.040875.
> Median: 4 days, 5:07:43.
> Standard deviation: 273 days, 2:02:52.068017.
> Interquartile range: 16 days, 20:07:21.
>
> Mean number of times a ticket is reviewed: 2.05202312139.
> Median: 1
> Standard deviation: 1.69219379922.
> Interquartile range: 1.
>
>
> Contributor Stats
> ______________________
> In the last 4 weeks,
>     20 unique ticket reporters
>     10 unique ticket reviewers
>     10 unique ticket resolvers
> In the last 24 weeks,
>     103 unique ticket reporters
>     19 unique ticket reviewers
>     20 unique ticket resolvers
> In the last 48 weeks,
>     179 unique ticket reporters
>     24 unique ticket reviewers
>     25 unique ticket resolvers
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100110/2999abf3/attachment.html>

From gabriel.rossetti at arimaz.com  Mon Jan 11 06:33:01 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Mon, 11 Jan 2010 14:33:01 +0100
Subject: [Twisted-Python] Proxy support through urllib2?
Message-ID: <4B4B288D.6020308@arimaz.com>

Hello everyone,

Is it possible to use a proxy with Twisted? I can do this with urllib2 :

proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
opener = urllib2.build_opener(proxy)
urllib2.install_opener(opener)

will that suffice? I'd need SOCKSv5 and HTTP proxy support.

Thanks,
Gabriel



From exarkun at twistedmatrix.com  Mon Jan 11 07:18:31 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 11 Jan 2010 14:18:31 -0000
Subject: [Twisted-Python] Proxy support through urllib2?
In-Reply-To: <4B4B288D.6020308@arimaz.com>
References: <4B4B288D.6020308@arimaz.com>
Message-ID: <20100111141831.1898.925027669.divmod.xquotient.23@localhost.localdomain>

On 01:33 pm, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>Is it possible to use a proxy with Twisted? I can do this with urllib2 
>:
>
>proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
>opener = urllib2.build_opener(proxy)
>urllib2.install_opener(opener)
>
>will that suffice? I'd need SOCKSv5 and HTTP proxy support.

This is one of the features the new HTTP client is intended to make 
easier to implement.  The very short twisted.web.client.Agent is 
responsible for all the things which differ when connecting to a proxy 
instead of doing the usual thing.  At some point, twisted.web.client 
should offer something like Agent which provides the proxy 
functionality.  Do you want to take a stab at implementing it?

Jean-Paul



From kevin.horn at gmail.com  Mon Jan 11 09:40:55 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 11 Jan 2010 10:40:55 -0600
Subject: [Twisted-Python] Proxy support through urllib2?
In-Reply-To: <4B4B288D.6020308@arimaz.com>
References: <4B4B288D.6020308@arimaz.com>
Message-ID: <562bcc11001110840p39d3454cv6e6e63cc9fbd04be@mail.gmail.com>

On Mon, Jan 11, 2010 at 7:33 AM, Gabriel Rossetti <
gabriel.rossetti at arimaz.com> wrote:

> Hello everyone,
>
> Is it possible to use a proxy with Twisted? I can do this with urllib2 :
>
> proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
> opener = urllib2.build_opener(proxy)
> urllib2.install_opener(opener)
>
> will that suffice? I'd need SOCKSv5 and HTTP proxy support.
>
> Thanks,
> Gabriel
>
>
When you say you want to "use a proxy with Twisted", do you mean that you
want Your Twisted applicatino to provide a proxy to other applications, or
do you mean that you want your Twisted application to use a (separate)
proxy?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100111/c7622267/attachment-0001.html>

From anthony-twisted at hogan.id.au  Wed Jan 13 13:00:08 2010
From: anthony-twisted at hogan.id.au (Anthony)
Date: Thu, 14 Jan 2010 07:00:08 +1100
Subject: [Twisted-Python] Signalling twistd with SIGUSR1 to rotate also
	interrupts txAMQP connections
Message-ID: <1bf8be121001131200u214cbc39kfaa7c8b1e98f3959@mail.gmail.com>

We run some services that use txAMQP within twistd to connect to an AMQP
bus.

When we send twistd a SIGUSR1 to rotate its logs, it appears our application
loses connection to the AMQP bus and needs to reconnect. This doesn't crash
the app, but means the app may be offline momentarily when it should be
available to process data.

Is it possible that twistd is processing the SIGUSR1 and then passing it
onto our app and txAMQP?

We want to be able to force a log rotate without the entire app, or the
connections it has open, resetting.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100114/6bf46b97/attachment.html>

From ltaylor.volks at gmail.com  Fri Jan 15 11:01:44 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Fri, 15 Jan 2010 11:01:44 -0700
Subject: [Twisted-Python] Signalling twistd with SIGUSR1 to rotate also
 interrupts txAMQP connections
In-Reply-To: <1bf8be121001131200u214cbc39kfaa7c8b1e98f3959@mail.gmail.com>
References: <1bf8be121001131200u214cbc39kfaa7c8b1e98f3959@mail.gmail.com>
Message-ID: <4B50AD88.40602@gmail.com>

On 1/13/10 1:00 PM, Anthony wrote:
> We run some services that use txAMQP within twistd to connect to an AMQP
> bus.
> 
> When we send twistd a SIGUSR1 to rotate its logs, it appears our
> application loses connection to the AMQP bus and needs to reconnect.
> This doesn't crash the app, but means the app may be offline momentarily
> when it should be available to process data.
> 
> Is it possible that twistd is processing the SIGUSR1 and then passing it
> onto our app and txAMQP?
> 
> We want to be able to force a log rotate without the entire app, or the
> connections it has open, resetting.
> 

AFAICT, twistd just registers a signal handler for SIGUSR1 that calls
t.p.logfile.Logfile.rotate. I don't see it propagating anywhere else in
a manner that would cause dropped connections.

Maybe os operations in rotate are blocking while they are doing the
remove/rename dance? Are you infrequently rotating (large files)?

If you setup your own handler for SIGUSR1, twistd will not register the
log rotation function, giving you an alternative to explore the issue.





From reddaly at gmail.com  Fri Jan 15 15:58:10 2010
From: reddaly at gmail.com (Red Daly)
Date: Fri, 15 Jan 2010 14:58:10 -0800
Subject: [Twisted-Python] Accessing the request object from a different
	thread
Message-ID: <f6700f0c1001151458ibcb4b47wffd5614ef663fd8e@mail.gmail.com>

I have an application that uses synchronous access to a MySQL database
through SQLAlchemy.  Unwilling to part with this synchronous access,
our application uses threads to perform database I/O outside of the
main Twisted thread.  It would be nice to still have some access to
the request object while processing a request in a new thread.  Is
there any thread-safe way to access the request object data?

Here is a typical Resource subclass:

    def parseRequest(self, request, session):
        try:
            # parse the relevant portion of the path
            namingPortionOfPath = self.idParserRE.match(request.path).group(1)

            cls = self.dbClass()
            return cls.getAllInstances(namingPortionOfPath)
        except:
            return None
        return None

    def render_GET(self, request):
        def sessionFn(session):
            instance = self.parseRequest(request, session)
            rendered = None
            if instance:
                stream = self.template.generate(object=instance,
                                                resource=self,
                                                session=session)

                rendered = stream.render('html', doctype='html',
encoding='latin1')
            else:
                rendered = "finished"

            return rendered

        def otherThreadFn():
            return pulse.web.mainStore().withSession(sessionFn)

        def deferedCallback(r):
            request.write(r)
            request.finish()

        twisted.internet.threads.deferToThread(otherThreadFn).addCallback(deferedCallback)

        return NOT_DONE_YET


All of the accesses to the request object are read operations.  If
those read operations occur on data that does not get messed with by
the main thread, then this should be thread-safe code.  However, it
seems that the official word is "do not use request objects from other
threads."  Maybe I am mistaken.  In any case, is there a safe way to
get at request headers and parameter values outside of the reactor
loop.

Thanks,
Red



From p.mayers at imperial.ac.uk  Sat Jan 16 05:54:07 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 16 Jan 2010 12:54:07 +0000
Subject: [Twisted-Python] Accessing the request object from a different
 thread
In-Reply-To: <f6700f0c1001151458ibcb4b47wffd5614ef663fd8e@mail.gmail.com>
References: <f6700f0c1001151458ibcb4b47wffd5614ef663fd8e@mail.gmail.com>
Message-ID: <4B51B6EF.70008@imperial.ac.uk>

> 
> All of the accesses to the request object are read operations.  If
> those read operations occur on data that does not get messed with by
> the main thread, then this should be thread-safe code.  However, it
> seems that the official word is "do not use request objects from other
> threads."  Maybe I am mistaken.  In any case, is there a safe way to
> get at request headers and parameter values outside of the reactor
> loop.

The rule is not to call any twisted functions IIRC.

You can do this safely:

   args_copy = dict(request.args)
   hdr_copy = dict(request.requestHeaders.getAllRawHeaders())
   deferToThread(func, args_copy, hdr_copy)



From exarkun at twistedmatrix.com  Sat Jan 16 22:05:12 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 Jan 2010 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1263704712.41.903773404@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100117/bf578cb5/attachment-0001.html>

From dgriff1 at gmail.com  Sun Jan 17 16:25:35 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 17 Jan 2010 17:25:35 -0600
Subject: [Twisted-Python] Plain windows sockets and twisted
Message-ID: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>

Hi,

I am using twisted in a cross-platform manner. I have written both the
client and server. The client is twisted and the server uses python threads.
I am using the select reactor and plain old TCP connections. I encode my
messages to JSON to send them.

On Windows I get tons of un-clean connectionlost events, on Mac everything
works perfectly. I am using the same data set in each case.

If I use the threaded server on windows and the twisted client on mac then I
still get tons of errors. 99% of these times these errors happen after the
last dataReceived when the socket should be closed cleanly.

My threaded code is:
        try:
            (clientsocket, address) = serversocket.accept()
        except Exception, e:
            print "Exception ", e, clientsocket
        try:
            p = processrequest()
            p.set_socket(clientsocket)
            p.start()

and in processrequest
self.sock.send_all(my_json_message)
self.sock.close()

Is this the correct behavior for using plain sockets with twisted? Any
reason why this would be perfectly fine on OSX and not Windows? Sorry for
the long email.

Thank you very very much,
Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100117/302b314b/attachment.html>

From glyph at twistedmatrix.com  Sun Jan 17 17:52:19 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 17 Jan 2010 19:52:19 -0500
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
Message-ID: <A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>


On Jan 17, 2010, at 6:25 PM, Daniel Griffin wrote:

> I am using twisted in a cross-platform manner. I have written both the client and server. The client is twisted and the server uses python threads. I am using the select reactor and plain old TCP connections. I encode my messages to JSON to send them.
> 
> On Windows I get tons of un-clean connectionlost events, on Mac everything works perfectly. I am using the same data set in each case. 

You should use Twisted for your server and get rid of threads, or you should very carefully read <http://itamarst.org/writings/win32sockets.html> and understand the differences between what windows calls "sockets" and what the rest of the world does.

> If I use the threaded server on windows and the twisted client on mac then I still get tons of errors. 99% of these times these errors happen after the last dataReceived when the socket should be closed cleanly. 
 .
 .
 .
> 
> Is this the correct behavior for using plain sockets with twisted? Any reason why this would be perfectly fine on OSX and not Windows? Sorry for the long email. 

You'll need to give some more detail.  What errors are you seeing?  Please post a complete traceback, along with enough code to actually trigger the error.  (<http://sscce.org/> is a good resource explaining desirable attributes of such an example.)

What version of Twisted are you using?  What version of Python?  What is the protocol?  Are the errors occurring in your threaded server or your twisted client?

The quick answer to your question is: no, this behavior is not expected.  Sockets are sockets.  Twisted should work fine talking to sockets in threads, sockets in other programming languages, other operating systems, etc.  Of course, that's just what's *supposed* to happen: there's a bug here, and with the information I have now, I can't say whether it's in your threaded code, your Twisted code, Twisted, or even Python.

Good luck?





From dgriff1 at gmail.com  Sun Jan 17 19:55:22 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 17 Jan 2010 20:55:22 -0600
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
	<A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
Message-ID: <3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>

Thank you for the response. I am using twisted 9.0 and tried 8.2. The python
version is 2.6. When I print the reason sent to connection lost I get
"[Failure instance: Traceback (failure with no frames): <class 't
wisted.internet.error.ConnectionLost' Connection to the other side was lost
in
 a non-clean fashion.". I am using IP4 TCP sockets.

I realize python threads are defective but in this case they are easier to
deal with.

I will create a chunk of sample code and send it to the list.

Thanks,
Dan



On Sun, Jan 17, 2010 at 6:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 17, 2010, at 6:25 PM, Daniel Griffin wrote:
>
> > I am using twisted in a cross-platform manner. I have written both the
> client and server. The client is twisted and the server uses python threads.
> I am using the select reactor and plain old TCP connections. I encode my
> messages to JSON to send them.
> >
> > On Windows I get tons of un-clean connectionlost events, on Mac
> everything works perfectly. I am using the same data set in each case.
>
> You should use Twisted for your server and get rid of threads, or you
> should very carefully read <http://itamarst.org/writings/win32sockets.html>
> and understand the differences between what windows calls "sockets" and what
> the rest of the world does.
>
> > If I use the threaded server on windows and the twisted client on mac
> then I still get tons of errors. 99% of these times these errors happen
> after the last dataReceived when the socket should be closed cleanly.
>  .
>  .
>  .
> >
> > Is this the correct behavior for using plain sockets with twisted? Any
> reason why this would be perfectly fine on OSX and not Windows? Sorry for
> the long email.
>
> You'll need to give some more detail.  What errors are you seeing?  Please
> post a complete traceback, along with enough code to actually trigger the
> error.  (<http://sscce.org/> is a good resource explaining desirable
> attributes of such an example.)
>
> What version of Twisted are you using?  What version of Python?  What is
> the protocol?  Are the errors occurring in your threaded server or your
> twisted client?
>
> The quick answer to your question is: no, this behavior is not expected.
>  Sockets are sockets.  Twisted should work fine talking to sockets in
> threads, sockets in other programming languages, other operating systems,
> etc.  Of course, that's just what's *supposed* to happen: there's a bug
> here, and with the information I have now, I can't say whether it's in your
> threaded code, your Twisted code, Twisted, or even Python.
>
> Good luck?
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100117/60ebcafa/attachment.html>

From dgriff1 at gmail.com  Sun Jan 17 20:45:46 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 17 Jan 2010 21:45:46 -0600
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
	<A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
	<3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>
Message-ID: <3db160681001171945y1fb937eaua9bb78845ae6de43@mail.gmail.com>

Here are two tiny apps. They run perfectly on OSX and error like this on
windows:

Log conenction  [Failure instance: Traceback (failure with no frames):
<class 't
wisted.internet.error.ConnectionLost' Connection to the other side was lost
in
 a non-clean fashion.
] Log conenction  [Failure instance: Traceback (failure with no frames):
<class
'twisted.internet.error.ConnectionLost' Connection to the other side was
lost
in a non-clean fashion.
....

Start server.py then run tclient.py.

Dan



On Sun, Jan 17, 2010 at 8:55 PM, Daniel Griffin <dgriff1 at gmail.com> wrote:

> Thank you for the response. I am using twisted 9.0 and tried 8.2. The
> python version is 2.6. When I print the reason sent to connection lost I get
> "[Failure instance: Traceback (failure with no frames): <class 't
> wisted.internet.error.ConnectionLost' Connection to the other side was lost
> in
>  a non-clean fashion.". I am using IP4 TCP sockets.
>
> I realize python threads are defective but in this case they are easier to
> deal with.
>
> I will create a chunk of sample code and send it to the list.
>
> Thanks,
> Dan
>
>
>
> On Sun, Jan 17, 2010 at 6:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>>
>> On Jan 17, 2010, at 6:25 PM, Daniel Griffin wrote:
>>
>> > I am using twisted in a cross-platform manner. I have written both the
>> client and server. The client is twisted and the server uses python threads.
>> I am using the select reactor and plain old TCP connections. I encode my
>> messages to JSON to send them.
>> >
>> > On Windows I get tons of un-clean connectionlost events, on Mac
>> everything works perfectly. I am using the same data set in each case.
>>
>> You should use Twisted for your server and get rid of threads, or you
>> should very carefully read <
>> http://itamarst.org/writings/win32sockets.html> and understand the
>> differences between what windows calls "sockets" and what the rest of the
>> world does.
>>
>> > If I use the threaded server on windows and the twisted client on mac
>> then I still get tons of errors. 99% of these times these errors happen
>> after the last dataReceived when the socket should be closed cleanly.
>>  .
>>  .
>>  .
>> >
>> > Is this the correct behavior for using plain sockets with twisted? Any
>> reason why this would be perfectly fine on OSX and not Windows? Sorry for
>> the long email.
>>
>> You'll need to give some more detail.  What errors are you seeing?  Please
>> post a complete traceback, along with enough code to actually trigger the
>> error.  (<http://sscce.org/> is a good resource explaining desirable
>> attributes of such an example.)
>>
>> What version of Twisted are you using?  What version of Python?  What is
>> the protocol?  Are the errors occurring in your threaded server or your
>> twisted client?
>>
>> The quick answer to your question is: no, this behavior is not expected.
>>  Sockets are sockets.  Twisted should work fine talking to sockets in
>> threads, sockets in other programming languages, other operating systems,
>> etc.  Of course, that's just what's *supposed* to happen: there's a bug
>> here, and with the information I have now, I can't say whether it's in your
>> threaded code, your Twisted code, Twisted, or even Python.
>>
>> Good luck?
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100117/8d7e08a7/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: application/octet-stream
Size: 926 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100117/8d7e08a7/attachment-0004.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: tclient.py
Type: application/octet-stream
Size: 755 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100117/8d7e08a7/attachment-0005.obj>

From glyph at twistedmatrix.com  Sun Jan 17 22:55:53 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jan 2010 00:55:53 -0500
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <3db160681001171945y1fb937eaua9bb78845ae6de43@mail.gmail.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
	<A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
	<3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>
	<3db160681001171945y1fb937eaua9bb78845ae6de43@mail.gmail.com>
Message-ID: <60CC8333-817A-41A2-8EB5-FA38CFFD4485@twistedmatrix.com>


On Jan 17, 2010, at 10:45 PM, Daniel Griffin wrote:

> Here are two tiny apps. They run perfectly on OSX and error like this on windows:
> 
> Log conenction  [Failure instance: Traceback (failure with no frames): <class 't
> wisted.internet.error.ConnectionLost' Connection to the other side was lost in
>  a non-clean fashion.
> ] Log conenction  [Failure instance: Traceback (failure with no frames): <class
> 'twisted.internet.error.ConnectionLost' Connection to the other side was lost
> in a non-clean fashion.

Ah.  This is very simple, and luckily has nothing to do with threads.

The simplest explanation is that these errors are showing up because you are printing them out :).  If you stop printing them out, they won't show up.

More specifically: You generally shouldn't worry about "clean" vs. "non-clean" connection shutdown.  There are lots of things that can cause "clean" shutdowns to still lose data, and there are many cases where a "non-clean" shutdown is actually fine.  Your application protocol should be framing messages such that you can tell which ones have been responded to.

That said, what's going on here is pretty simple.  A "clean" shutdown is, broadly speaking, when both ends of the TCP connection agree on where the stream of bytes begins and ends.  I send you some data, you read all of it, I shut down the connection, you shut down the connection.  If I send you some data, and you *don't* read all of it, then I shut the connection down, the result will be a "non-clean" shutdown, because there is still data outstanding when the connection dies.

In this case, you are calling recv(5) in your server, but your client is writing "RESPOND" to its transport.  As you can see,

   >>> len("RESPOND")
   7

"RESPOND" is more than 5 bytes.

If you were using Twisted for your server, this wouldn't happen because Twisted always reads all the bytes that are available and delivers them to dataReceived.




From dgriff1 at gmail.com  Sun Jan 17 23:29:15 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Mon, 18 Jan 2010 00:29:15 -0600
Subject: [Twisted-Python] Plain windows sockets and twisted
In-Reply-To: <60CC8333-817A-41A2-8EB5-FA38CFFD4485@twistedmatrix.com>
References: <3db160681001171525t2105d051icc2539db8831ab3@mail.gmail.com>
	<A2D1E349-FACE-4320-A979-170B375C5A5C@twistedmatrix.com>
	<3db160681001171855vf5d09afpe79e833dd2819510@mail.gmail.com>
	<3db160681001171945y1fb937eaua9bb78845ae6de43@mail.gmail.com>
	<60CC8333-817A-41A2-8EB5-FA38CFFD4485@twistedmatrix.com>
Message-ID: <3db160681001172229t3643077qaec97831f5657a5d@mail.gmail.com>

Awesome, in my actual code I already implemented something to see if I was
"done" with the socket conversation. I was just getting really worried about
the "non-clean" messages. Your explanation makes perfect sense. Thanks for
the help.

Dan

On Sun, Jan 17, 2010 at 11:55 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

>
> On Jan 17, 2010, at 10:45 PM, Daniel Griffin wrote:
>
> > Here are two tiny apps. They run perfectly on OSX and error like this on
> windows:
> >
> > Log conenction  [Failure instance: Traceback (failure with no frames):
> <class 't
> > wisted.internet.error.ConnectionLost' Connection to the other side was
> lost in
> >  a non-clean fashion.
> > ] Log conenction  [Failure instance: Traceback (failure with no frames):
> <class
> > 'twisted.internet.error.ConnectionLost' Connection to the other side was
> lost
> > in a non-clean fashion.
>
> Ah.  This is very simple, and luckily has nothing to do with threads.
>
> The simplest explanation is that these errors are showing up because you
> are printing them out :).  If you stop printing them out, they won't show
> up.
>
> More specifically: You generally shouldn't worry about "clean" vs.
> "non-clean" connection shutdown.  There are lots of things that can cause
> "clean" shutdowns to still lose data, and there are many cases where a
> "non-clean" shutdown is actually fine.  Your application protocol should be
> framing messages such that you can tell which ones have been responded to.
>
> That said, what's going on here is pretty simple.  A "clean" shutdown is,
> broadly speaking, when both ends of the TCP connection agree on where the
> stream of bytes begins and ends.  I send you some data, you read all of it,
> I shut down the connection, you shut down the connection.  If I send you
> some data, and you *don't* read all of it, then I shut the connection down,
> the result will be a "non-clean" shutdown, because there is still data
> outstanding when the connection dies.
>
> In this case, you are calling recv(5) in your server, but your client is
> writing "RESPOND" to its transport.  As you can see,
>
>   >>> len("RESPOND")
>   7
>
> "RESPOND" is more than 5 bytes.
>
> If you were using Twisted for your server, this wouldn't happen because
> Twisted always reads all the bytes that are available and delivers them to
> dataReceived.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100118/2ffa2ef3/attachment.html>

From clawsicus at gmail.com  Mon Jan 18 07:32:05 2010
From: clawsicus at gmail.com (Chris Laws)
Date: Tue, 19 Jan 2010 01:02:05 +1030
Subject: [Twisted-Python] deferring result to PB a callRemote method
Message-ID: <3ff1f41d1001180632v3154b996q46c93704fec5ed9c@mail.gmail.com>

I am writing a tool for work that will run various software development aids
such as message capturing and diagnostic control of system processes.
My current design strategy is to implement these aids as plugins (not
twisted plugins) to a generic plugin runner rather than stand alone
applications.
The plugins are spawned as separate processes by the plugin-runner and
communicate using Perspective Broker during the plugin installation and
shutdown phases.

Some plugins may take a while to shutdown as they need to close
sockets, finalize files, move large files, etc.
I would like to instruct the plugin to shutdown and be told when it is
finally ready to be shut down.

To date all my callRemote methods have effectively returned immediately. For
example:

def remote_get_name(self):
    return self.name

My question to the list was going to be: Is there a pattern/example I could
follow where I could call plugin.callRemote("shutdown") on a plugin and not
return a result to the plugin-runner until the plugin has completed all
it's, potentially, long running activities? However, while I was trying to
write a small code snippet that would demonstrate what I was wanting, I
think I got it working.
I think the simple answer to my question is to just return a deferred as the
result to the callRemote("shutdown") method and trigger it as normal.
Google is my friend but I could not find examples of this usage. Is there
any references to this usage in the twisted docs?

Below (and attached in case the formatting goes screwy) is a short example
which emulates a long running shutdown activity performed by the plugin
prior to shutdown.
It seems to delay the processing of the callRemote("shutdown") result until
the plugin has completed it's long running activity.
I have omitted the separate process stuff as it didn't seem relevant for
this snippet.

Is the following code snippet the standard/normal way to defer the return
result of a callRemote method call?
If this is the normal way, how does triggering the deferred on the plugin
(client) side also trigger the same/copy deferred returned to the
plugin-runner (server)?
Is this PB magic, somehow managing deferreds across the PB interface?

Regards,
Chris



from twisted.internet import reactor, defer
from twisted.spread import pb
import datetime

class PluginClient(pb.Referenceable):
    """ Plugin client interface exposed to PluginServer's """

    def __init__(self, shutdownCallback):
        self.shutdownHandler = shutdownCallback

    def remote_shutdown(self):
        """ Instruct Plugin to shutdown """
        print "plugin instructed to shutdown"
        d = defer.Deferred()
        self.shutdownHandler(d)
        return d

class PluginServer(pb.Root):
    """ Plugin server interface exposed to PluginClient's """

    def remote_set_client_perspective(self, pluginRef):
        print "plugin-runner got client reference"
        reactor.callLater(1.0, self.shutdown_plugin, pluginRef)

    def shutdown_plugin(self, pluginRef):

        def pluginShutdownCompleted(result, startTime):
            endTime = datetime.datetime.now()
            print "Plugin shutdown took %s to complete." % (endTime -
startTime)
            return result

        print "plugin-runner asking plugin to shutdown"
        d = pluginRef.callRemote("shutdown")
        d.addCallback(pluginShutdownCompleted, datetime.datetime.now())
        d.addCallback(self.shutdown)

    def shutdown(self, _):
        reactor.stop()


def startPluginServer(port):
    """ Start a plugin communications server """
    print "starting server"
    reactor.listenTCP(port=port,
                      factory=pb.PBServerFactory(PluginServer()),
                      interface='localhost')


def startPluginClient(port, shutdownHandler):
    """ Start a plugin communications client """

    def gotServerPerspective(serverPerspective, pluginPerspective):
        """ Give the plugin-runner this client's perspective """
        serverPerspective.callRemote("set_client_perspective",
pluginPerspective)
        return serverPerspective

    print "starting plugin"
    client = PluginClient(shutdownHandler)
    factory = pb.PBClientFactory()
    reactor.connectTCP(host='localhost', port=port, factory=factory)
    return factory.getRootObject().addCallback(gotServerPerspective, client)

if __name__ == "__main__":
    port = 42155

    def longRunningAction(d, countDown=10):
        """ Emulate long running shutdown activities """
        print "shuting down in %i seconds" % countDown
        if countDown == 0:
            d.callback(True)
        else:
            countDown -= 1
            reactor.callLater(1, longRunningAction, d, countDown)


    # start plugin-runner
    reactor.callWhenRunning(startPluginServer, port)
    # start plugin
    reactor.callLater(2.0, startPluginClient, port, longRunningAction)
    reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100119/a35c15fe/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test_shutdown.py
Type: application/octet-stream
Size: 2857 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100119/a35c15fe/attachment-0002.obj>

From abierbaum at gmail.com  Mon Jan 18 14:06:36 2010
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 18 Jan 2010 15:06:36 -0600
Subject: [Twisted-Python] Timeout with pb callRemote
Message-ID: <bea9869d1001181306t1f70833ap763f62cca4b5485e@mail.gmail.com>

I just tracked down a bug in one of our servers that uses twisted PB.
The long and short of it was that the server made remote calls to
clients that connected in and in some cases those clients would fall
off the network (disconnected network cable, etc) but the server would
not detect this.

I tracked this down to TCP timeouts not telling twisted rapidly enough
that the clients were offline.  What I was going to use to solve this
was to put a timeout on the remoteCall() by calling setTimeout on the
deferred returned when making the call.  Then if the deferred does not
fire soon enough I could treat this as a dead client detection and
clean up it's resources.

The problem is that it looks like Deferred.setTimeout is deprecated.
(see: http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/defer.py#L350)

Is there some other suitable way to set a timeout on a remoteCall when using PB?

-Allen



From db3l.net at gmail.com  Mon Jan 18 14:54:34 2010
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 18 Jan 2010 16:54:34 -0500
Subject: [Twisted-Python] Timeout with pb callRemote
References: <bea9869d1001181306t1f70833ap763f62cca4b5485e@mail.gmail.com>
Message-ID: <m2aawb3wpx.fsf@valheru.db3l.homeip.net>

Allen Bierbaum <abierbaum at gmail.com> writes:

> I just tracked down a bug in one of our servers that uses twisted PB.
> The long and short of it was that the server made remote calls to
> clients that connected in and in some cases those clients would fall
> off the network (disconnected network cable, etc) but the server would
> not detect this.

Right - by default (sans enabling keepalives at the TCP level), TCP
can only detect a problem when it is attempting to transmit data, or
when it receives data from a system that has been restarted.  That's
by design, since it can't tell if the idle time is expected or not.

So if your request to the client makes it through but the connection
breaks before the server needs to send any further data (such as
waiting for a response) the server - waiting to receive - can
essentially remain in that state forever.

Even with keepalives turned on at the TCP level, the total time to
declare a failure with default timers is often in the 2+ hour range.

> Is there some other suitable way to set a timeout on a remoteCall
> when using PB?

I'd probably suggest implementing some connection monitoring mechanism
in general for each client<->server connection, rather than trying to
time out individual calls.  The advantage to this is that it covers all
sorts of failures in either direction and let's both sides fail any
pending operations gracefully.

What we did in one of our larger PB systems was have our client
object, after connecting, set up a periodic ping request to the
server.  Failure of that request (in addition to a network failure of
other requestss) would cause the client to disconnect (after
generating an internal signal) and then fall into an automatic
reconnection process.  Since the ping is transmitting data over the
session, failures will be detected much more rapidly (though still not
instantaneously) when the TCP retransmit timers fail to deliver the
data.  We also had separate signaling and reconnect logic that allowed
the client to reattach all of its existing remote object handles if it
reconnected to a server that hadn't restarted (e.g., just a network
outage), but that's more complicated and not suitable for all types
of remote object references.
 
While we didn't have requests originating from the server, you could
have a mirror approach running on the server for each client, or you
could just have a watchdog timer running on the server that
disconnects a client if it hasn't heard a ping request from it in a
given amount of time.

On either side, explicitly disconnecting the connection will also
cause any pending deferreds for PB requests to fail and trigger their
errbacks.

If you really wanted to implement a timeout for a specific request,
you could still use a watchdog timer - start a callLater with the
appropriate timeout, save the response object, and cancel it in the
callback chain for the response once it is received.

What you should do if the callLater does fire is less clear.
Personally I'd probably do something internal so any eventual response
to the pending deferred was ignored.  You probably don't want to
actually fire it yourself, since PB still references it and in theory
could still get a response about it over the stream which would try to
double-fire the deferred.  That's part of why setTimeout on the
deferred itself can be a bad idea - someone else probably also
references that deferred and won't know it has already fired if the
timeout expires.

Disconnecting the client would work, as similar to the above keepalive
approach, it would fire the errback on all pending deferreds over that
session.

-- David





From andrew at bemusement.org  Mon Jan 18 18:19:01 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 19 Jan 2010 12:19:01 +1100
Subject: [Twisted-Python] deferring result to PB a callRemote method
In-Reply-To: <3ff1f41d1001180632v3154b996q46c93704fec5ed9c@mail.gmail.com>
References: <3ff1f41d1001180632v3154b996q46c93704fec5ed9c@mail.gmail.com>
Message-ID: <20100119011901.GF12274@steerpike.home.puzzling.org>

Chris Laws wrote:
[...]
>    I think the simple answer to my question is to just return a deferred as
>    the result to the callRemote("shutdown")�method and trigger it as normal.

Yes, that's right.  You can return Deferreds from your PB server's methods.  So
long as the eventual result is something serializable over PB (e.g. a
Referenceable or a Copyable), it will work.

>    Google is my friend but I could not find examples of this usage. Is there
>    any references to this usage in the twisted docs?

Huh, surprisingly not in the primary PB docs.  The Twisted “finger” tutorial
does do this, though, if you read it carefully enough.  See finger21.tac in
<http://twistedmatrix.com/documents/current/core/howto/tutorial/pb.html>; the
remote_* methods of PerspectiveFingerFromService delegate to self.service, which
is FingerService, which returns Deferreds from its getUser and getUsers methods.

[...]
>    Is the following code snippet the standard/normal way to defer the return
>    result of a callRemote method call?

It's a bit odd.  e.g. You do this:

    def remote_shutdown(self):
        """ Instruct Plugin to shutdown """
        print "plugin instructed to shutdown"
        d = defer.Deferred()
        self.shutdownHandler(d)
        return d

This can work, so long as on what self.shutdownHandler calls d.callback/errback,
as yours does.  But typically it would be written as:

    def remote_shutdown(self):
        """ Instruct Plugin to shutdown """
        print "plugin instructed to shutdown"
        return self.shutdownHandler()

i.e. typically the code that is calling d.callback is also responsible for
creating d.

>    If this is the normal way, how does triggering the deferred on the plugin
>    (client) side also trigger the same/copy deferred returned to the
>    plugin-runner (server)?
>    Is this PB magic, somehow managing deferreds across the PB interface?

PB doesn't actually send the Deferred over the network, but it does manage the
deferred for you.  It works because when you return a Deferred, PB on the server
will add a callback to it that will send that eventual result over the network,
rather than sending one immediately.

On the client side, as the PB docs point out: “because of the delay involved
[waiting for a network connection], callRemote() returns a Deferred.”  (From
<http://twistedmatrix.com/documents/current/core/howto/pb-usage.html>).

The client doesn't know or care if the server used a Deferred or not, the bytes
on the wire are the same.  (And a delay caused by the server waiting for a
Deferred to fire could just as easily be a delay caused by network congestion.)

I wouldn't describe it as “magic” so much as “a really convenient API”.

-Andrew.




From gabriel.rossetti at arimaz.com  Tue Jan 19 02:15:19 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Tue, 19 Jan 2010 10:15:19 +0100
Subject: [Twisted-Python] Proxy support through urllib2?
In-Reply-To: <20100111141831.1898.925027669.divmod.xquotient.23@localhost.localdomain>
References: <4B4B288D.6020308@arimaz.com>
	<20100111141831.1898.925027669.divmod.xquotient.23@localhost.localdomain>
Message-ID: <4B557827.4050905@arimaz.com>

exarkun at twistedmatrix.com wrote:
> On 01:33 pm, gabriel.rossetti at arimaz.com wrote:
>   
>> Hello everyone,
>>
>> Is it possible to use a proxy with Twisted? I can do this with urllib2 
>> :
>>
>> proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
>> opener = urllib2.build_opener(proxy)
>> urllib2.install_opener(opener)
>>
>> will that suffice? I'd need SOCKSv5 and HTTP proxy support.
>>     
>
> This is one of the features the new HTTP client is intended to make 
> easier to implement.  The very short twisted.web.client.Agent is 
> responsible for all the things which differ when connecting to a proxy 
> instead of doing the usual thing.  At some point, twisted.web.client 
> should offer something like Agent which provides the proxy 
> functionality.  Do you want to take a stab at implementing it?
>
> Jean-Paul
>   
Ok, thanks for the info. I can have a try, right now we use Twisted 
8.1.0 though, I have to get something working with that version first 
and then whe we've tested our app with version 9.0 I'll try.

Gabriel





From gabriel.rossetti at arimaz.com  Tue Jan 19 02:17:41 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Tue, 19 Jan 2010 10:17:41 +0100
Subject: [Twisted-Python] Proxy support through urllib2?
In-Reply-To: <562bcc11001110840p39d3454cv6e6e63cc9fbd04be@mail.gmail.com>
References: <4B4B288D.6020308@arimaz.com>
	<562bcc11001110840p39d3454cv6e6e63cc9fbd04be@mail.gmail.com>
Message-ID: <4B5578B5.2000705@arimaz.com>

Kevin Horn wrote:
> On Mon, Jan 11, 2010 at 7:33 AM, Gabriel Rossetti 
> <gabriel.rossetti at arimaz.com <mailto:gabriel.rossetti at arimaz.com>> wrote:
>
>     Hello everyone,
>
>     Is it possible to use a proxy with Twisted? I can do this with
>     urllib2 :
>
>     proxy = urllib2.ProxyHandler({"http": "http://my.proxy.com:8080"})
>     opener = urllib2.build_opener(proxy)
>     urllib2.install_opener(opener)
>
>     will that suffice? I'd need SOCKSv5 and HTTP proxy support.
>
>     Thanks,
>     Gabriel
>
>
> When you say you want to "use a proxy with Twisted", do you mean that 
> you want Your Twisted applicatino to provide a proxy to other 
> applications, or do you mean that you want your Twisted application to 
> use a (separate) proxy?
>
> Kevin Horn
>   
I mean have the Twisted app (client) connect to a server outside the 
network by going through an http proxy server, like it's often the caser 
in company networks.

Gabriel



From kevin.horn at gmail.com  Tue Jan 19 09:15:15 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 19 Jan 2010 10:15:15 -0600
Subject: [Twisted-Python] deferring result to PB a callRemote method
In-Reply-To: <20100119011901.GF12274@steerpike.home.puzzling.org>
References: <3ff1f41d1001180632v3154b996q46c93704fec5ed9c@mail.gmail.com>
	<20100119011901.GF12274@steerpike.home.puzzling.org>
Message-ID: <562bcc11001190815h4f4c195ep9a5b4cb6c4847d26@mail.gmail.com>

On Mon, Jan 18, 2010 at 7:19 PM, Andrew Bennetts <andrew at bemusement.org>wrote:

> >    Google is my friend but I could not find examples of this usage. Is
> there
> >    any references to this usage in the twisted docs?
>
>
> Huh, surprisingly not in the primary PB docs.  The Twisted “finger”
> tutorial
> does do this, though, if you read it carefully enough.  See finger21.tac in
> <http://twistedmatrix.com/documents/current/core/howto/tutorial/pb.html>;
> the
> remote_* methods of PerspectiveFingerFromService delegate to self.service,
> which
> is FingerService, which returns Deferreds from its getUser and getUsers
> methods.
>
>
>
It sems like this should be discussed in the PB docs.  Maybe someone should
file a ticket..

(hint, hint)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100119/22ae2d62/attachment.html>

From warner at lothar.com  Tue Jan 19 12:19:03 2010
From: warner at lothar.com (Brian Warner)
Date: Tue, 19 Jan 2010 11:19:03 -0800
Subject: [Twisted-Python] [ANN] Foolscap-0.5.0 released
Message-ID: <4B5605A7.3050803@lothar.com>


I'm pleased to announce the release of Foolscap-0.5.0 . This is a fairly
minor release: the biggest difference from the previous 0.4.2 is a
change to the preferred main entry point: application code should use
e.g. "from foolscap.api import Tub" instead of "from foolscap import
Tub". A DeprecationWarning will be raised for code that continues to
import from the main "foolscap" module, which will become an error in a
future foolscap-0.6.0. (this was done to avoid annoying circular
dependencies within foolscap itself)

In addition, many tools received minor improvements, and the "sets is
deprecated in python2.6" warning was fixed.

 Bugs, docs, discussion: http://foolscap.lothar.com/trac
 Download:
  PyPI: http://pypi.python.org/pypi/foolscap/0.5.0
  home page: http://foolscap.lothar.com/releases/foolscap-0.5.0.tar.gz
  Releases are signed with my GPG key 0x1514A7BD, recently renewed
  (expiration date extended to jan-2011, please re-download from
  keyservers)

Foolscap is a Twisted-friendly remote object protocol, a descendant of
Perspective Broker, with improved security properties, third-party
references, adaptable serialization, remote logging, and other useful
features. Please visit http://foolscap.lothar.com/trac for more details.


have a importable day,
 -Brian




* Release 0.5.0 (18 Jan 2010)

** Compatibility

The wire format remains the same as in earlier releases. The preferred
API import path has changed, see below.

** API changes: import statements, foolscap.api

To reduce circular dependencies in Foolscap's internal code, a new
"foolscap.api" module has been created. Applications should use:

 from foolscap.api import Tub

instead of e.g. "from foolscap import Tub". Deprecation warnings will be
raised for code which imports symbols directly from the "foolscap"
module. These warnings will turn into errors in the 0.6.0 release. (see
ticket #122 for details)

The nearly-useless getRemoteURL_TCP() function was removed.

** setup.py is more windows-friendly

The main setup.py script has been modified to use setuptools
"entry_points=" on windows, which should help create runnable
executables of "flogtool" and "flappserver", with proper extensions.
Entry-point scripts are not used on non-windows platforms, but
setuptools still creates fairly opaque executable scripts (which makes
it hard to figure out that e.g. /usr/bin/flogtool wants to import the
"foolscap" module). To get non-opaque scripts, install with "setup.py
install --single-version-externally-managed". (#109)

** tool changes

*** flappserver

"flappserver create" now records the umask value from its environment,
and uses it later when the server is started (since normally twistd
resets the umask to a very restrictive value). A new --umask argument
was added to override this. The server's base directory is chmod go-rwx
to protect the private key from other users.

The "flappserver start" command uses twisted.scripts.twistd.run(),
instead of spawning an intermediate "twistd" process with os.execvp().
This should make things work better in environments where Twisted is not
fully installed (especially on windows) and correctly launching "twistd"
is non-trivial, such as when some other package is installing it as a
setuptools dependency.

"flappclient upload-file ~/foo.txt" will use os.path.expanduser() on the
filename, even if your shell does not. This should make it easier to use
from e.g. buildbot upload commands. (#134)

*** logging

The "flogtool dump" and "flogtool web-viewer" commands now have a
--timestamps argument, which controls how timestamps are expressed (UTC
vs localtime, ISO-9601, etc). The web-viewer HTML pages now have more
timestamp and sorting options, and hyperlinks to select each. (#100)

"flogtool web-viewer --open" will tell your local web browser to open to
the correct page, using the Python stdlib "webbrowser" module.

"flogtool dump" now emits a better error when told to open a missing
file.

*** examples

Examples of running the Git version-control-system over a
flappserver-based secure connection have been added to doc/examples/ .
This enables remote-update authority to be expressed as a FURL with no
other shell privileges. To accomplish the same with ssh
"authorized_keys" command restrictions is annoying and error-prone. See
doc/examples/git-proxy-flappclient for setup instructions. This will
probably be simplified to a single "git-furl" executable in a later
release.

The xfer-client/xfer-server/command-client examples have been removed,
obsoleted by the flappserver/flappclient tools.

** Other changes

The DeprecationWarning for the obsolete "sets" module is now removed on
python2.6 (#124)

When a getReference() call fails because the remote Tub does not
recognize the FURL, it now only emits the first two letters of the
secret swissnum in the exception, instead of the whole thing. This
reduces information leakage into e.g. stderr logs from a "flappclient
--furlfile=X upload-file" command.

DeadReferenceError now includes the remote tubid, interfacename, and
remote method name of the message that was being sent when the lost
connection was discovered, so log.err() calls which record a
DeadReferenceError should include this information. This may make it
easier to locate the code that provoked the error.



From kevin.horn at gmail.com  Tue Jan 19 14:33:57 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 19 Jan 2010 15:33:57 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
Message-ID: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>

This time I think I'm gonna skip saying how I haven't gotten as much done as
I would like...oh darn.

Anyways, time for another gripping installment...

Progress:
  - tables are now handled (mostly) properly, thanks to Zeth at
http://commandline.org.uk/
  - blockquote tags handled
  - much improved whitespace/indentation handling
  - some nicer styling thanks to Michael Thompson
  - I've managed to convert the docs for the 3 Divmod projects with Lore
    docs, though I've yet to put them up anywhere.


Oustanding issues:
  - two files in the Lore source are not yet being converted, but it looks
like
    one of them is about to be removed
    (http://twistedmatrix.com/trac/ticket/4188), and it's not really a
    Lore doc anyways.
  - due to ReST's insistence on "inline markup" being surrounded by
    whitespace or certain special characters, there are a lot of places
where
    such inline markup gets jacked up, by not including whitespace in front
of
    it.  If I put whitespace in front of everything though, my indentation
    handling gets jacked up and about 400+ Sphinx build warning result.
    Not sure if I should spend the time to make whitespace handling really
    smart or if these should just be fixed manually post-conversion.
  - cite tags still need handling...not hard, just haven't decided the best
    way to do it yet.
  - Themeing/styling: still mostly a TODO, though new styling looks a lot
    better than the default to my eyes.  I'm starting to think that
    eventually we might want to have 2 themes/styles...one to match the
    trac-based website, and one for bundled docs (docs tarballs, CHM files,
etc.)
  - auto-generated toctree directives are currently generated in
alphabetical
    order, which makes the "prev" and "next" links mostly make no sense
  - some of the Lore source files have nested "inline markup", which ReST
    disallows.  This can be handled by:
      - fix the markup in the Lore source
      - figure out some kind of supersmart auto-conversion for every
possible
        combination of nesting
      - just handle the outside level of nesting (what I'm doing now) and
        fix any problems manually post-conversion.
  - xhtml entities are not currently resolved...mostly because it makes
    the build take a LOOOONG time.  They can be though.  This shouldn't
    be a problem.
  - xhtml comments still need to be handled
  - <code class="API"> tags need something better..right now they are just
    the same as <code> tags...Sphinx has an upcoming feature coming in 1.0
    that would make this nice and maintainable in the long run, but I don't
    know that I want to wait for it.  I may try to "backport" the extension
    or just come up with a separate solution.
  - some of the generated links need fixing
    (e.g. links to directories, .py files)

In other news:

  - Foolscap 0.5 was released today, which made me wonder what they use for
    docs...and it's Lore.  I brought this up on IRC, and it was suggested
    by many that Lore should stick around even after the conversion
according
    to the standard Twisted compatibility policy, to give anyone who still
    uses it time to migrate.  This sounds like a fine idea to me.
    Any thoughts?


As always, the lore2sphinx code is here:
http://bitbucket.org/khorn/lore2sphinx/

And the sample output of the conversion process is here:
http://twistedsphinx.funsize.net/

Cheers,

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100119/811174b1/attachment.html>

From clawsicus at gmail.com  Tue Jan 19 17:58:44 2010
From: clawsicus at gmail.com (Chris Laws)
Date: Wed, 20 Jan 2010 11:28:44 +1030
Subject: [Twisted-Python] deferring result to PB a callRemote method
Message-ID: <3ff1f41d1001191658p62177a3m151f7449b0564ed0@mail.gmail.com>

> >* >    Google is my friend but I could not find examples of this usage.
Is
*> >* there
*> >* >    any references to this usage in the twisted docs?
*> >*
*> >*
*> >* Huh, surprisingly not in the primary PB docs.  The Twisted “finger”
*> >* tutorial
*> >* does do this, though, if you read it carefully enough.  See
finger21.tac in
*> >* <
http://twistedmatrix.com/documents/current/core/howto/tutorial/pb.html>;
*> >* the
*> >* remote_* methods of PerspectiveFingerFromService delegate to
self.service,
*> >* which
*> >* is FingerService, which returns Deferreds from its getUser and
getUsers
*> >* methods.
*> >*
*> >*
*> >*
*> It sems like this should be discussed in the PB docs.  Maybe someone
should
> file a ticket..
>
> (hint, hint)

Done, #4228.

Thanks for the informative response to my question.

Regards,
Chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100120/fde5d26c/attachment.html>

From petshmidt at googlemail.com  Wed Jan 20 05:35:34 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 20 Jan 2010 13:35:34 +0100
Subject: [Twisted-Python] Log rotates not as expected
Message-ID: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>

Hi,

in code below I try to rotate log files if they reach 5000000 limit,
but this happens only to every 5 files, ls -althr:

-rw-r--r-- 1 root root 977K 2010-01-19 19:03 /var/log/my.log.12
-rw-r--r-- 1 root root 977K 2010-01-19 19:55 /var/log/my.log.10
-rw-r--r-- 1 root root 977K 2010-01-19 20:41 /var/log/my.log.9
-rw-r--r-- 1 root root 977K 2010-01-19 21:30 /var/log/my.log.8
-rw-r--r-- 1 root root 977K 2010-01-19 22:46 /var/log/my.log.7
-rw-r--r-- 1 root root 4.8M 2010-01-20 00:19 /var/log/my.log.11
-rw-r--r-- 1 root root 977K 2010-01-20 00:19 /var/log/my.log.6
-rw-r--r-- 1 root root 977K 2010-01-20 09:17 /var/log/my.log.4
-rw-r--r-- 1 root root 977K 2010-01-20 10:45 /var/log/my.log.3
-rw-r--r-- 1 root root 977K 2010-01-20 12:04 /var/log/my.log.2
-rw-r--r-- 1 root root 977K 2010-01-20 12:59 /var/log/my.log.1
-rw-r--r-- 1 root root 4.2M 2010-01-20 13:26 /var/log/my.log.5
-rw-r--r-- 1 root root 301K 2010-01-20 13:26 /var/log/my.log


it writes simultaneously to both my.log.5 and my.log. It is not big
problem, but in this way I have only recent files, because they grows
quickly

Pet


from twisted.python import log
from twisted.python import logfile
from twisted.application import service

class MyLog(log.FileLogObserver):

    def emit(self, logEntryDict):
        log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
        log.FileLogObserver.emit(self, logEntryDict)


class MyLogService(service.Service):

    def __init__(self, logName, logDir):
        self.logName = logName
        self.logDir = logDir
        # near 5mb
        self.maxLogSize = 5000000

    def startService(self):
        # logfile is a file-like object that supports rotation
        self.logFile = logfile.LogFile(
            self.logName, self.logDir, rotateLength=self.maxLogSize,
maxRotatedFiles=50)
        #self.logFile.rotate() # force rotation each time restarted
        self.loclog = MyLog(self.logFile)
        self.loclog.start()

    def stopService(self):
        self.loclog.stop()
        self.logFile.close()
        del(self.logFile)



From theiklabs at gmail.com  Wed Jan 20 07:58:33 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Wed, 20 Jan 2010 09:58:33 -0500
Subject: [Twisted-Python] WSGI Question
Message-ID: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>

I deploy code. Then I modify the code on my file system. The code does not
automatically change on the server. It does this on the django dev server.
How can I make this happen?

I start the server as follows

twistd -ny server.py

# Django and static file server:
root_resource = get_root_resource()
root_resource.putChild("static", static.File("static"))
http_factory = server.Site(root_resource, logPath="http.log")
internet.TCPServer(STATIC_PORT, http_factory,
interface=INTERFACE).setServiceParent(serviceCollection)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100120/e600aba8/attachment.html>

From phil at bubblehouse.org  Wed Jan 20 08:37:48 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 20 Jan 2010 10:37:48 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
Message-ID: <13FBB5FB-5EF7-4DC3-8123-4EF40E9CF565@bubblehouse.org>

On Jan 20, 2010, at 9:58 AM, adamjamesdrew same wrote:
> I deploy code. Then I modify the code on my file system. The code does not automatically change on the server. It does this on the django dev server. How can I make this happen?

This is a Django-specific feature that doesn't exist in Twisted.

It wouldn't be too hard to write, but it's the kind of feature that tends to be useful more to web developers than authors of other kinds of applications.

As it is, automatic code reloading is tricky to achieve in Python, since reload(modulename) only reloads modulename in the current scope, and must be reloaded everywhere that module is used.

It looks to me like Django's dev server gets around this by forking a child process before loading any external modules, and killing that child any time a reload is needed. Then the child is re-spawned, and since the parent has yet to load any external modules, any attempt to do so in the child causes the modules to be loaded for the first time (for that child).

Pretty clever, IMO...

-phil


From landreville at deadtreepages.com  Wed Jan 20 08:40:34 2010
From: landreville at deadtreepages.com (Landreville)
Date: Wed, 20 Jan 2010 10:40:34 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
Message-ID: <9d748c781001200740rdb86638w149a8860c8092bc7@mail.gmail.com>

On Wed, Jan 20, 2010 at 9:58 AM, adamjamesdrew same <theiklabs at gmail.com> wrote:
> I deploy code. Then I modify the code on my file system. The code does not
> automatically change on the server. It does this on the django dev server.
> How can I make this happen?
>
> I start the server as follows
>
> twistd -ny server.py
>
> # Django and static file server:
> root_resource = get_root_resource()
> root_resource.putChild("static", static.File("static"))
> http_factory = server.Site(root_resource, logPath="http.log")
> internet.TCPServer(STATIC_PORT, http_factory,
> interface=INTERFACE).setServiceParent(serviceCollection)
>


The twisted modules are only loaded once because it asynchronous, so
the twisted server is persistent in memory. You only load your twisted
app once, whereas in django the modules are reloaded on every page
refresh on the dev server.

There are some nifty live reloading things you can do. One of them is
to just reload the module (i think its a builtin method called reload)
but only new objects will use the reloaded module. There is a module
in twisted.python somewhere that does some live reloading magic to try
and replace all the references with the newly loaded module.

It's actually fairly complicated and if your in a development
environment it is probably easier to reload twisted than add all the
reloading stuff to your classes. I haven't used the twisted reloading
stuff though. In my case I tore down some of the objects that were
created with the classes in the module, reloaded the associated
modules, then rebuilt those objects. And if you're doing that to your
whole project, it would be about the same as just restarting the
server.

Someone from the twisted project can probably give you better
information about reloading changes.



From ssteinerx at gmail.com  Wed Jan 20 09:04:26 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Wed, 20 Jan 2010 11:04:26 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <13FBB5FB-5EF7-4DC3-8123-4EF40E9CF565@bubblehouse.org>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<13FBB5FB-5EF7-4DC3-8123-4EF40E9CF565@bubblehouse.org>
Message-ID: <C47B1644-6EA1-479F-986E-8D1037254647@gmail.com>


On Jan 20, 2010, at 10:37 AM, Phil Christensen wrote:

> On Jan 20, 2010, at 9:58 AM, adamjamesdrew same wrote:
>> I deploy code. Then I modify the code on my file system. The code does not automatically change on the server. It does this on the django dev server. How can I make this happen?
> 
> This is a Django-specific feature that doesn't exist in Twisted.
> 
> It wouldn't be too hard to write, but it's the kind of feature that tends to be useful more to web developers than authors of other kinds of applications.
> 
> As it is, automatic code reloading is tricky to achieve in Python, since reload(modulename) only reloads modulename in the current scope, and must be reloaded everywhere that module is used.

There is/was a Twisted ticket about this and a quick sketch of how it might be done for Twisted by using the Django module itself by one of the Twisted devs.  

I gave it a brief shot, but couldn't get it working in the time I had to spend on it.  

Sure would be handy, though...

S




From theiklabs at gmail.com  Wed Jan 20 11:17:58 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Wed, 20 Jan 2010 13:17:58 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <C47B1644-6EA1-479F-986E-8D1037254647@gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<13FBB5FB-5EF7-4DC3-8123-4EF40E9CF565@bubblehouse.org>
	<C47B1644-6EA1-479F-986E-8D1037254647@gmail.com>
Message-ID: <2a30f70a1001201017o23d8612cw66e96ff62276c66a@mail.gmail.com>

Thanks for the help.

On Wed, Jan 20, 2010 at 11:04 AM, ssteinerX at gmail.com
<ssteinerx at gmail.com>wrote:

>
> On Jan 20, 2010, at 10:37 AM, Phil Christensen wrote:
>
> > On Jan 20, 2010, at 9:58 AM, adamjamesdrew same wrote:
> >> I deploy code. Then I modify the code on my file system. The code does
> not automatically change on the server. It does this on the django dev
> server. How can I make this happen?
> >
> > This is a Django-specific feature that doesn't exist in Twisted.
> >
> > It wouldn't be too hard to write, but it's the kind of feature that tends
> to be useful more to web developers than authors of other kinds of
> applications.
> >
> > As it is, automatic code reloading is tricky to achieve in Python, since
> reload(modulename) only reloads modulename in the current scope, and must be
> reloaded everywhere that module is used.
>
> There is/was a Twisted ticket about this and a quick sketch of how it might
> be done for Twisted by using the Django module itself by one of the Twisted
> devs.
>
> I gave it a brief shot, but couldn't get it working in the time I had to
> spend on it.
>
> Sure would be handy, though...
>
> S
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100120/db870bbd/attachment.html>

From theiklabs at gmail.com  Wed Jan 20 11:19:34 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Wed, 20 Jan 2010 13:19:34 -0500
Subject: [Twisted-Python] WSGI Production ready
Message-ID: <2a30f70a1001201019i55011ba0ne40c7dd81f05aa78@mail.gmail.com>

Is twisted WSGI production ready as compared to apache and mod_wsgi

For a simple server with 4 cores would you simple start 4 instances and load
balance between them?
How would you recommend a production deploy of twisted wsgi?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100120/f4b7d510/attachment.html>

From phil at bubblehouse.org  Wed Jan 20 11:51:49 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 20 Jan 2010 13:51:49 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <9d748c781001200740rdb86638w149a8860c8092bc7@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<9d748c781001200740rdb86638w149a8860c8092bc7@mail.gmail.com>
Message-ID: <209EC006-FD69-41E5-91DE-AD31FF7D69BC@bubblehouse.org>

On Jan 20, 2010, at 10:40 AM, Landreville wrote:
> On Wed, Jan 20, 2010 at 9:58 AM, adamjamesdrew same <theiklabs at gmail.com> wrote:
>> I deploy code. Then I modify the code on my file system. The code does not
>> automatically change on the server. It does this on the django dev server.
>> How can I make this happen?
> The twisted modules are only loaded once because it asynchronous, so
> the twisted server is persistent in memory. You only load your twisted
> app once, whereas in django the modules are reloaded on every page
> refresh on the dev server.

No, this is not the case.

Twisted's function in this regard is because there's no autoreload functionality, not because of anything to do with its asynchronous development style.

The Django dev server *does not* reload on every page request, it only does so when the files in question have been modified. The Django dev server is also persistent in memory, and uses forking to isolate reloadable code into its own process. When the code fails, or needs to be reloaded, the child is killed and respawned.

-phil


From phil at bubblehouse.org  Wed Jan 20 11:58:29 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 20 Jan 2010 13:58:29 -0500
Subject: [Twisted-Python] WSGI Production ready
In-Reply-To: <2a30f70a1001201019i55011ba0ne40c7dd81f05aa78@mail.gmail.com>
References: <2a30f70a1001201019i55011ba0ne40c7dd81f05aa78@mail.gmail.com>
Message-ID: <962C0788-D6EE-4CE9-8FBA-B8D61AE8F7E0@bubblehouse.org>

On Jan 20, 2010, at 1:19 PM, adamjamesdrew same wrote:
> Is twisted WSGI production ready as compared to apache and mod_wsgi
> 
> For a simple server with 4 cores would you simple start 4 instances and load balance between them?
> How would you recommend a production deploy of twisted wsgi?

Twisted's WSGI support is definitely production-ready; I'm currently using it in several production environments at work.

However, performance can be limited by its use of Python threads, and the impact of the Global Interpreter Lock (which would be somewhat negated by your plan of running 4 instances in a load-balancing pool).

If you need extremely high performance (and I mean really need -- Twisted WSGI is fast enough for many many scenarios), you will probably want to use another WSGI container.

But of course, that's the benefit of coding to the WSGI spec. Personally, I use Twisted's WSGI for development, and for medium-load production deployments where I need a web server directly integrated with other Twisted code.

For production, I've had great success with mod_wsgi on Apache 2.2, which I believe is the standard deployment environment for Django, as well.

-phil


From landreville at deadtreepages.com  Wed Jan 20 12:01:27 2010
From: landreville at deadtreepages.com (Landreville)
Date: Wed, 20 Jan 2010 14:01:27 -0500
Subject: [Twisted-Python] SIP and RTP
Message-ID: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>

Hello,
I need to make a SIP call and play a wav file  over the RTP stream
from a twisted server. This is a sort of visual voicemail application.

Has anyone set this up using twisted before?
I saw the SIP protocol support in twisted, but I'm not sure how
complete it is.  Do you think it would be difficult to make this
solution a reality?

I heard of the Shtoom project which did this using Twisted, but it
appears dead I can't find the source code for it.



From landreville at deadtreepages.com  Wed Jan 20 12:03:25 2010
From: landreville at deadtreepages.com (Landreville)
Date: Wed, 20 Jan 2010 14:03:25 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <209EC006-FD69-41E5-91DE-AD31FF7D69BC@bubblehouse.org>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<9d748c781001200740rdb86638w149a8860c8092bc7@mail.gmail.com>
	<209EC006-FD69-41E5-91DE-AD31FF7D69BC@bubblehouse.org>
Message-ID: <9d748c781001201103s32163c44gb2028abd39967fc7@mail.gmail.com>

On Wed, Jan 20, 2010 at 1:51 PM, Phil Christensen <phil at bubblehouse.org> wrote:
> On Jan 20, 2010, at 10:40 AM, Landreville wrote:
>> On Wed, Jan 20, 2010 at 9:58 AM, adamjamesdrew same <theiklabs at gmail.com> wrote:
>>> I deploy code. Then I modify the code on my file system. The code does not
>>> automatically change on the server. It does this on the django dev server.
>>> How can I make this happen?
>> The twisted modules are only loaded once because it asynchronous, so
>> the twisted server is persistent in memory. You only load your twisted
>> app once, whereas in django the modules are reloaded on every page
>> refresh on the dev server.
>
> No, this is not the case.
>
> Twisted's function in this regard is because there's no autoreload functionality, not because of anything to do with its asynchronous development style.
>
> The Django dev server *does not* reload on every page request, it only does so when the files in question have been modified. The Django dev server is also persistent in memory, and uses forking to isolate reloadable code into its own process. When the code fails, or needs to be reloaded, the child is killed and respawned.
>
> -phil

Oh cool, this is good stuff to know.



From termim at gmail.com  Wed Jan 20 13:20:32 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Wed, 20 Jan 2010 15:20:32 -0500
Subject: [Twisted-Python] 9.0.0 question
Message-ID: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>

Hi,

I've switched recently from 8.2 to 9.0 and noticed that some of my
client scripts
hang in reactor.stop() on exit sometimes. That never happened before. For
example if I run the gethostbyname.py from the twisted-names examples directory
it prints the correct result and hangs forever until I press Cntrl-C.
Then it prints the
following traceback:

terekhov at linux:/home/terekhov/python/twisted/9.0/Twisted-9.0.0/doc/names/examples
>python gethostbyname.py localhost
127.0.0.1
^CUnhandled error in Deferred:
Traceback (most recent call last):
  File "gethostbyname.py", line 19, in <module>
    d.addCallbacks(gotResult, gotFailure)
  File "/usr/lib64/python2.5/site-packages/twisted/internet/defer.py",
line 181, in addCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/usr/lib64/python2.5/site-packages/twisted/internet/defer.py",
line 323, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "gethostbyname.py", line 12, in gotResult
    reactor.stop()
  File "/usr/lib64/python2.5/site-packages/twisted/internet/base.py",
line 553, in stop
    "Can't stop reactor that isn't running.")
twisted.internet.error.ReactorNotRunning: Can't stop reactor that isn't running.
terekhov at linux:/home/terekhov/python/twisted/9.0/Twisted-9.0.0/doc/names/examples
>

At the same time echo client/server example from the twisted core
works as expected.
Any hint would be appreciated.
BTW I use SuSE 11.0  on x86_64 with python 2.5.2

Regards,
-- 
Mikhail Terekhov



From clemesha at gmail.com  Wed Jan 20 13:23:14 2010
From: clemesha at gmail.com (Alex Clemesha)
Date: Wed, 20 Jan 2010 12:23:14 -0800
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
Message-ID: <d272f0691001201223p3f1f61d6rb7d090f87e8a7fd4@mail.gmail.com>

On Wed, Jan 20, 2010 at 6:58 AM, adamjamesdrew same <theiklabs at gmail.com> wrote:
> I deploy code. Then I modify the code on my file system. The code does not
> automatically change on the server. It does this on the django dev server.
> How can I make this happen?
>
> I start the server as follows
>
> twistd -ny server.py
>
> # Django and static file server:
> root_resource = get_root_resource()
> root_resource.putChild("static", static.File("static"))
> http_factory = server.Site(root_resource, logPath="http.log")
> internet.TCPServer(STATIC_PORT, http_factory,
> interface=INTERFACE).setServiceParent(serviceCollection)
That's my code ;-) and thanks for trying out Hotdot [1]!

I really want to getting reloading going.  I already have a ticket here:
http://github.com/clemesha/hotdot/issues#issue/2
that describes this issue, with a couple of notes.  Please add to this
ticket / post any patches if you getting anywhere with this.

thanks!
-Alex



[1] http://github.com/clemesha/hotdot




> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



-- 
Alex Clemesha
clemesha.org



From clemesha at gmail.com  Wed Jan 20 13:26:37 2010
From: clemesha at gmail.com (Alex Clemesha)
Date: Wed, 20 Jan 2010 12:26:37 -0800
Subject: [Twisted-Python] WSGI Production ready
In-Reply-To: <962C0788-D6EE-4CE9-8FBA-B8D61AE8F7E0@bubblehouse.org>
References: <2a30f70a1001201019i55011ba0ne40c7dd81f05aa78@mail.gmail.com>
	<962C0788-D6EE-4CE9-8FBA-B8D61AE8F7E0@bubblehouse.org>
Message-ID: <d272f0691001201226g1df8fcf2ncf38de133fd3ea31@mail.gmail.com>

On Wed, Jan 20, 2010 at 10:58 AM, Phil Christensen <phil at bubblehouse.org> wrote:
> On Jan 20, 2010, at 1:19 PM, adamjamesdrew same wrote:
>> Is twisted WSGI production ready as compared to apache and mod_wsgi
>>
>> For a simple server with 4 cores would you simple start 4 instances and load balance between them?
>> How would you recommend a production deploy of twisted wsgi?
>
> Twisted's WSGI support is definitely production-ready; I'm currently using it in several production environments at work.
>
> However, performance can be limited by its use of Python threads, and the impact of the Global Interpreter Lock (which would be somewhat negated by your plan of running 4 instances in a load-balancing pool).
>
> If you need extremely high performance (and I mean really need -- Twisted WSGI is fast enough for many many scenarios), you will probably want to use another WSGI container.
Yes, twisted performs great for normal loads.  And, if you are so
lucky to suddenly have a massive amount of users and you need to scale
up,
I'd suggest trying out the Nginx wsgi support, which I use in a couple
apps and works great.

-Alex




>
> But of course, that's the benefit of coding to the WSGI spec. Personally, I use Twisted's WSGI for development, and for medium-load production deployments where I need a web server directly integrated with other Twisted code.
>
> For production, I've had great success with mod_wsgi on Apache 2.2, which I believe is the standard deployment environment for Django, as well.
>
> -phil
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From phil at bubblehouse.org  Wed Jan 20 13:43:11 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 20 Jan 2010 15:43:11 -0500
Subject: [Twisted-Python] WSGI Question
In-Reply-To: <d272f0691001201223p3f1f61d6rb7d090f87e8a7fd4@mail.gmail.com>
References: <2a30f70a1001200658k1cc89b6cie4403453d361e344@mail.gmail.com>
	<d272f0691001201223p3f1f61d6rb7d090f87e8a7fd4@mail.gmail.com>
Message-ID: <EFC999BC-C07D-4195-A380-A9AA531F90D8@bubblehouse.org>

On Jan 20, 2010, at 3:23 PM, Alex Clemesha wrote:
> I really want to getting reloading going.  I already have a ticket here:
> http://github.com/clemesha/hotdot/issues#issue/2
> that describes this issue, with a couple of notes.  Please add to this
> ticket / post any patches if you getting anywhere with this.

I don't think it gets much better than Django's approach. Basically, the server code loads everything it needs to bootstrap, and then forks.

All the request handling and subsequent code execution takes place in the child process, so that when modules are loaded, they are only loaded into the child's memory space.

Then, before any request is processed, the child checks the originating files for all of the modules in sys.modules, and sees if any of them have a new modification date.

If so, the child process is killed, which is detected by the parent, which respawns the child. The respawned child has the state of the parent process (which hasn't loaded any external modules), so modules get freshly imported.

t.p.rebuild() is a big improvement over the stock reload() function, but in addition to requiring modules to be marked with the "ALLOW_TWISTED_REBUILD" flag, it suffers from the same issue that it's only able to reload modules that are in the current scope.

-phil


From theiklabs at gmail.com  Wed Jan 20 15:17:21 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Wed, 20 Jan 2010 17:17:21 -0500
Subject: [Twisted-Python] HOTDOT , Love the code,
	I'm curious about your thought's on it's goals and some other
	solutions with orbited
Message-ID: <2a30f70a1001201417p45515abcq66d89943938638a7@mail.gmail.com>

I c that you have used the embedded morbiq with the restq interface.

To replace the morbidQ restq.py would I just create an activeMQ.py factory
class?

Since twisted is hosting both django and orbited you have access to the
session data. If you had an architecture like so what are some strategies
for handling security of orbited

apache->mod_wsgi->django

javascript->orbited->twisted->activemq or rabbitmq

Here are some potential use cases.
Case #1
Everyone has access to read any Q
Write's to the Q are done via a secret account on the server side code can
be called an authenticated via standard ajax

Case #2
Only logged in users have access to a private Q
Write's to the Q are done via a secret account on the server side code can
be called an authenticated via standard ajax

Thanks a lot
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100120/13b28c74/attachment.html>

From brad.milne at devx.runthered.com  Wed Jan 20 20:36:20 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 21 Jan 2010 16:36:20 +1300
Subject: [Twisted-Python] reactor start/stop frustrations in tests
Message-ID: <19ae58271001201936m72f86e4uc8ad7abfa4f02c31@mail.gmail.com>

Hi all

I know this has been discussed numerous times, but I need some extra help. I
have used nose.twistedtools' @deferred decorator to run the reactor within a
test method to date. Now I am writing some performance tests for our
application and need better control over the reactor.

nose has threaded_reactor() and reactor_stop() to control things, but
regardless, it still doesn't seem to shut down. I need to shut down the
reactor between tests so that requests are dropped (ie get a real
representation of completed tasks within test time). Would you recommend
trial instead?

Many thanks
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100121/84b8076c/attachment.html>

From glyph at twistedmatrix.com  Wed Jan 20 20:40:15 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jan 2010 22:40:15 -0500
Subject: [Twisted-Python] reactor start/stop frustrations in tests
In-Reply-To: <19ae58271001201936m72f86e4uc8ad7abfa4f02c31@mail.gmail.com>
References: <19ae58271001201936m72f86e4uc8ad7abfa4f02c31@mail.gmail.com>
Message-ID: <9D0CFD19-E03B-443B-860D-C794080C2F62@twistedmatrix.com>


On Jan 20, 2010, at 10:36 PM, Brad Milne wrote:

> Hi all
> 
> I know this has been discussed numerous times, but I need some extra help. I have used nose.twistedtools' @deferred decorator to run the reactor within a test method to date. Now I am writing some performance tests for our application and need better control over the reactor.
> 
> nose has threaded_reactor() and reactor_stop() to control things, but regardless, it still doesn't seem to shut down. I need to shut down the reactor between tests so that requests are dropped (ie get a real representation of completed tasks within test time). Would you recommend trial instead?

Trial would work better with tests that want a "real" reactor though, yes, but it still won't let you shut down the reactor.

If you really want to do that, please re-open this ticket by attaching a patch: <http://twistedmatrix.com/trac/ticket/3518> - and remember to add the 'review' keyword so someone will notice it :)


From glyph at twistedmatrix.com  Wed Jan 20 20:43:37 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jan 2010 22:43:37 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
Message-ID: <C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>


On Jan 20, 2010, at 3:20 PM, Mikhail Terekhov wrote:

> Hi,
> 
> I've switched recently from 8.2 to 9.0 and noticed that some of my
> client scripts
> hang in reactor.stop() on exit sometimes. That never happened before. For
> example if I run the gethostbyname.py from the twisted-names examples directory
> it prints the correct result and hangs forever until I press Cntrl-C.
> Then it prints the
> following traceback:


I don't see the behavior you describe, but I do see this traceback on trunk with every 3rd run or so of that example - maybe the example is buggy?

doc/names/examples$ python gethostbyname.py  twistedmatrix.com
twisted/names/dns.py:1670: DeprecationWarning: Please only pass IPs to write(), not hostnames
  self.transport.write(message.toStr(), address)
Traceback (most recent call last):
  File "twisted/internet/udp.py", line 121, in doRead
    self.protocol.datagramReceived(data, addr)
  File "twisted/names/dns.py", line 1700, in datagramReceived
    d.callback(m)
  File "twisted/internet/defer.py", line 239, in callback
    self._startRunCallbacks(result)
  File "twisted/internet/defer.py", line 308, in _startRunCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "twisted/internet/defer.py", line 324, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/names/common.py", line 239, in <lambda>
    ).addBoth(lambda passthrough: (r.protocol.transport.stopListening(), passthrough)[1])
exceptions.AttributeError: 'NoneType' object has no attribute 'stopListening'

Can you provide a simpler, more streamlined example of the problem you're describing?




From glyph at twistedmatrix.com  Wed Jan 20 20:57:21 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jan 2010 22:57:21 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
In-Reply-To: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
References: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
Message-ID: <4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>

On Jan 19, 2010, at 4:33 PM, Kevin Horn wrote:

> This time I think I'm gonna skip saying how I haven't gotten as much done as I would like...oh darn.
> 
> Anyways, time for another gripping installment...
> 
> Progress:
>   - tables are now handled (mostly) properly, thanks to Zeth at http://commandline.org.uk/
>   - blockquote tags handled
>   - much improved whitespace/indentation handling
>   - some nicer styling thanks to Michael Thompson
>   - I've managed to convert the docs for the 3 Divmod projects with Lore 
>     docs, though I've yet to put them up anywhere.

Yay!

>   - due to ReST's insistence on "inline markup" being surrounded by 
>     whitespace or certain special characters, there are a lot of places where
>     such inline markup gets jacked up, by not including whitespace in front of 
>     it.  If I put whitespace in front of everything though, my indentation 
>     handling gets jacked up and about 400+ Sphinx build warning result.
>     Not sure if I should spend the time to make whitespace handling really 
>     smart or if these should just be fixed manually post-conversion.

I don't really understand this problem.  What do you mean about making whitespace handling really smart?  Isn't this the sort of detail that docutils is supposed to handle for you?

>   - Themeing/styling: still mostly a TODO, though new styling looks a lot 
>     better than the default to my eyes.  I'm starting to think that 
>     eventually we might want to have 2 themes/styles...one to match the 
>     trac-based website, and one for bundled docs (docs tarballs, CHM files, etc.)

That would certainly be nice, but is in no way required for the initial migration.  Still, we should have a workable theme in order before we pull the trigger :).
> 
>   - some of the Lore source files have nested "inline markup", which ReST 
>     disallows.  

Ugh.  So ReST can't do this?  That's pretty lame.

>       - just handle the outside level of nesting (what I'm doing now) and 
>         fix any problems manually post-conversion.

I'm assuming there are very few instances of this, so that sounds fine.

>   - xhtml entities are not currently resolved...mostly because it makes 
>     the build take a LOOOONG time.  They can be though.  This shouldn't 
>     be a problem.

Are you resolving them by downloading all the DTDs or something?

>   - Foolscap 0.5 was released today, which made me wonder what they use for
>     docs...and it's Lore.  I brought this up on IRC, and it was suggested 
>     by many that Lore should stick around even after the conversion according 
>     to the standard Twisted compatibility policy, to give anyone who still 
>     uses it time to migrate.  This sounds like a fine idea to me.  
>     Any thoughts?

Since nobody really uses lore's API, the same compatibility policy doesn't really apply.  In lore's case, I would say that the policy should be that we include it with X more releases just for packaging convenience, but stop doing maintenance immediately.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100120/d90561fe/attachment.html>

From godson.g at gmail.com  Wed Jan 20 22:10:25 2010
From: godson.g at gmail.com (Godson Gera)
Date: Thu, 21 Jan 2010 10:40:25 +0530
Subject: [Twisted-Python] SIP and RTP
In-Reply-To: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
References: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
Message-ID: <f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>

There is no direct RTP support in Twisted. Shtoom did that but its dead long
back. I've seen people using the same RTP code implemented by shtoom here
and there. Also SIP implementation in Twisted is not 100%. There is one more
project called Sine made by divmod which uses Twsited and it has implemented
more SIP protocol features.

On Thu, Jan 21, 2010 at 12:31 AM, Landreville <landreville at deadtreepages.com
> wrote:

> Hello,
> I need to make a SIP call and play a wav file  over the RTP stream
> from a twisted server. This is a sort of visual voicemail application.
>
> Has anyone set this up using twisted before?
> I saw the SIP protocol support in twisted, but I'm not sure how
> complete it is.  Do you think it would be difficult to make this
> solution a reality?
>
> I heard of the Shtoom project which did this using Twisted, but it
> appears dead I can't find the source code for it.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Thanks & Regards,
Godson Gera
Asterisk FreeSWITCH Consultant India <http://godson.in>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100121/3ea5dd4e/attachment.html>

From exarkun at twistedmatrix.com  Thu Jan 21 01:58:42 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 Jan 2010 08:58:42 -0000
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
Message-ID: <20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>

On 03:43 am, glyph at twistedmatrix.com wrote:
>
>On Jan 20, 2010, at 3:20 PM, Mikhail Terekhov wrote:
>>Hi,
>>
>>I've switched recently from 8.2 to 9.0 and noticed that some of my
>>client scripts
>>hang in reactor.stop() on exit sometimes. That never happened before. 
>>For
>>example if I run the gethostbyname.py from the twisted-names examples 
>>directory
>>it prints the correct result and hangs forever until I press Cntrl-C.
>>Then it prints the
>>following traceback:
>
>
>I don't see the behavior you describe, but I do see this traceback on 
>trunk with every 3rd run or so of that example - maybe the example is 
>buggy?
>
>doc/names/examples$ python gethostbyname.py  twistedmatrix.com
>twisted/names/dns.py:1670: DeprecationWarning: Please only pass IPs to 
>write(), not hostnames
>  self.transport.write(message.toStr(), address)
>Traceback (most recent call last):
>  File "twisted/internet/udp.py", line 121, in doRead
>    self.protocol.datagramReceived(data, addr)
>  File "twisted/names/dns.py", line 1700, in datagramReceived
>    d.callback(m)
>  File "twisted/internet/defer.py", line 239, in callback
>    self._startRunCallbacks(result)
>  File "twisted/internet/defer.py", line 308, in _startRunCallbacks
>    self._runCallbacks()
>--- <exception caught here> ---
>  File "twisted/internet/defer.py", line 324, in _runCallbacks
>    self.result = callback(self.result, *args, **kw)
>  File "twisted/names/common.py", line 239, in <lambda>
>    ).addBoth(lambda passthrough: (r.protocol.transport.stopListening(), 
>passthrough)[1])
>exceptions.AttributeError: 'NoneType' object has no attribute 
>'stopListening'

http://twistedmatrix.com/trac/ticket/4210

Jean-Paul
>
>Can you provide a simpler, more streamlined example of the problem 
>you're describing?
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Thu Jan 21 02:03:04 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 Jan 2010 09:03:04 -0000
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
In-Reply-To: <4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
References: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
	<4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
Message-ID: <20100121090304.1898.181375491.divmod.xquotient.455@localhost.localdomain>

On 03:57 am, glyph at twistedmatrix.com wrote:
>On Jan 19, 2010, at 4:33 PM, Kevin Horn wrote:
>>This time I think I'm gonna skip saying how I haven't gotten as much 
>>done as I would like...oh darn.
>>
>>Anyways, time for another gripping installment...
>>
>>   - due to ReST's insistence on "inline markup" being surrounded by
>>     whitespace or certain special characters, there are a lot of 
>>places where
>>     such inline markup gets jacked up, by not including whitespace in 
>>front of
>>     it.  If I put whitespace in front of everything though, my 
>>indentation
>>     handling gets jacked up and about 400+ Sphinx build warning 
>>result.
>>     Not sure if I should spend the time to make whitespace handling 
>>really
>>     smart or if these should just be fixed manually post-conversion.
>
>I don't really understand this problem.  What do you mean about making 
>whitespace handling really smart?  Isn't this the sort of detail that 
>docutils is supposed to handle for you?
>>
>>   - some of the Lore source files have nested "inline markup", which 
>>ReST
>>     disallows.
>
>Ugh.  So ReST can't do this?  That's pretty lame.
>>       - just handle the outside level of nesting (what I'm doing now) 
>>and
>>         fix any problems manually post-conversion.
>
>I'm assuming there are very few instances of this, so that sounds fine.

On IRC last night I brought up the idea that we could skip the 
conversion to ReST and use Sphinx with xhtml input documents.  The 
conclusion seemed to be that this might be difficult, but no one was 
really sure what work would be involved in this approach.  Kevin's 
already put a lot of effort into the conversion.  It would be nice if 
someone else could investigate this.
>
>>   - Foolscap 0.5 was released today, which made me wonder what they 
>>use for
>>     docs...and it's Lore.  I brought this up on IRC, and it was 
>>suggested
>>     by many that Lore should stick around even after the conversion 
>>according
>>     to the standard Twisted compatibility policy, to give anyone who 
>>still
>>     uses it time to migrate.  This sounds like a fine idea to me.
>>     Any thoughts?
>
>Since nobody really uses lore's API, the same compatibility policy 
>doesn't really apply.  In lore's case, I would say that the policy 
>should be that we include it with X more releases just for packaging 
>convenience, but stop doing maintenance immediately.

As long as someone wants to do maintenance, I don't see any reason to 
stop them from doing it.  We might mark all the Lore tickets lowest 
priority or otherwise signal that some subset of the "core" developers 
aren't interested in maintaining it.... but then, how would that be any 
different from the status quo?

Jean-Paul



From termim at gmail.com  Thu Jan 21 08:30:35 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Thu, 21 Jan 2010 10:30:35 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
Message-ID: <12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>

On Thu, Jan 21, 2010 at 3:58 AM,  <exarkun at twistedmatrix.com> wrote:
> On 03:43 am, glyph at twistedmatrix.com wrote:
>>
>>On Jan 20, 2010, at 3:20 PM, Mikhail Terekhov wrote:
>>>Hi,
>>>
>>>I've switched recently from 8.2 to 9.0 and noticed that some of my
>>>client scripts
>>>hang in reactor.stop() on exit sometimes. That never happened before.
>>>For
>>>example if I run the gethostbyname.py from the twisted-names examples
>>>directory
>>>it prints the correct result and hangs forever until I press Cntrl-C.
>>>Then it prints the
>>>following traceback:
>>
>>
>>I don't see the behavior you describe, but I do see this traceback on
>>trunk with every 3rd run or so of that example - maybe the example is
>>buggy?
>>
>>doc/names/examples$ python gethostbyname.py  twistedmatrix.com
>>twisted/names/dns.py:1670: DeprecationWarning: Please only pass IPs to
>>write(), not hostnames
>>  self.transport.write(message.toStr(), address)
>>Traceback (most recent call last):
>>  File "twisted/internet/udp.py", line 121, in doRead
>>    self.protocol.datagramReceived(data, addr)
>>  File "twisted/names/dns.py", line 1700, in datagramReceived
>>    d.callback(m)
>>  File "twisted/internet/defer.py", line 239, in callback
>>    self._startRunCallbacks(result)
>>  File "twisted/internet/defer.py", line 308, in _startRunCallbacks
>>    self._runCallbacks()
>>--- <exception caught here> ---
>>  File "twisted/internet/defer.py", line 324, in _runCallbacks
>>    self.result = callback(self.result, *args, **kw)
>>  File "twisted/names/common.py", line 239, in <lambda>
>>    ).addBoth(lambda passthrough: (r.protocol.transport.stopListening(),
>>passthrough)[1])
>>exceptions.AttributeError: 'NoneType' object has no attribute
>>'stopListening'
>
> http://twistedmatrix.com/trac/ticket/4210
>

I think I found it, it is somewhat different IMHO. When you run

   python gethostbyname.py localhost

notice the '''localhost''' there, the getHostByName('localhost') returns
defer.succeed(..) so the callback gotResult and hence reactor.stop()
is called even before reactor is run and for some reason it hangs there
inside reactor.stop().

So there are actually two points here:

1. the gethostbyname.py example should probably be changed something
    like this

--- gethostbyname.py.orig       2010-01-21 10:01:30.000000000 -0500
+++ gethostbyname.py    2010-01-21 10:02:55.000000000 -0500
@@ -15,7 +15,9 @@
     failure.printTraceback()
     reactor.stop()

-d = client.getHostByName(sys.argv[1])
-d.addCallbacks(gotResult, gotFailure)
+def main():
+    d = client.getHostByName(sys.argv[1])
+    d.addCallbacks(gotResult, gotFailure)

+reactor.addSystemEventTrigger("after", "startup", main)
 reactor.run()

2. Why reactor.stop() hangs if it is called before reactor.run()?

Are they worth a tickets?

Regards,
-- 
Mikhail Terekhov



From kevin.horn at gmail.com  Thu Jan 21 09:55:14 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 21 Jan 2010 10:55:14 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
In-Reply-To: <4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
References: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
	<4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
Message-ID: <562bcc11001210855m3cd80635jbe99f12baf8b658b@mail.gmail.com>

On Wed, Jan 20, 2010 at 9:57 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Jan 19, 2010, at 4:33 PM, Kevin Horn wrote:
>
> This time I think I'm gonna skip saying how I haven't gotten as much done
> as I would like...oh darn.
>
> Anyways, time for another gripping installment...
>
> Progress:
>   - tables are now handled (mostly) properly, thanks to Zeth at
> http://commandline.org.uk/
>   - blockquote tags handled
>   - much improved whitespace/indentation handling
>   - some nicer styling thanks to Michael Thompson
>   - I've managed to convert the docs for the 3 Divmod projects with Lore
>     docs, though I've yet to put them up anywhere.
>
>
> Yay!
>
>   - due to ReST's insistence on "inline markup" being surrounded by
>     whitespace or certain special characters, there are a lot of places
> where
>     such inline markup gets jacked up, by not including whitespace in front
> of
>     it.  If I put whitespace in front of everything though, my indentation
>     handling gets jacked up and about 400+ Sphinx build warning result.
>     Not sure if I should spend the time to make whitespace handling really
>     smart or if these should just be fixed manually post-conversion.
>
>
> I don't really understand this problem.  What do you mean about making
> whitespace handling really smart?  Isn't this the sort of detail that
> docutils is supposed to handle for you?
>
>
OK, lemme esplain...no, would take too long, lemme sum up.

In some of the Lore docs, you have stuff like:

    some<em>stuff</em>

which naively translated to ReST looks like:

    some*stuff*

but since ReST wants whitespace and/or special characters surrounding
"inline markup",  docutils/Sphinx doesn't recognize it properly as markup
and just sends it unmodified to the HTML (or whatever) output..

The obvious solution is to just surround all inline markup with spaces,
since we're mainly targeting HTML output at the moment and a few extra
spaces shouldn't hurt.  Which would look like this:

    some *stuff*

But this turns out to cause other problems, specifically in the case where
inline markup occurs on the beginning of a line, and the extra space jacks
up the indentation (which ReST considers significant).

So the whitespace handling I was referring to was the output of whitespace
from lore2sphinx.


>   - Themeing/styling: still mostly a TODO, though new styling looks a lot
>     better than the default to my eyes.  I'm starting to think that
>     eventually we might want to have 2 themes/styles...one to match the
>     trac-based website, and one for bundled docs (docs tarballs, CHM files,
> etc.)
>
>
> That would certainly be nice, but is in no way required for the initial
> migration.  Still, we should have a workable theme in order before we pull
> the trigger :).
>

Right, as I said "eventually".


>
>   - some of the Lore source files have nested "inline markup", which ReST
>     disallows.
>
>
> Ugh.  So ReST *can't do this?*  That's pretty lame.
>

It's a little bit lame, but I've found that it doesn't occur all that often
in practice.  Every markup language has it's limitations, and this is one I
can live with.


>       - just handle the outside level of nesting (what I'm doing now) and
>         fix any problems manually post-conversion.
>
>
> I'm assuming there are very few instances of this, so that sounds fine.
>

That's pretty much my plan.


>
>   - xhtml entities are not currently resolved...mostly because it makes
>     the build take a LOOOONG time.  They can be though.  This shouldn't
>     be a problem.
>
>
> Are you resolving them by downloading all the DTDs or something?
>

The lxml parser can download DTDs in order to resolve external entities, but
the way things are currently set up, it would end up doing this once for
each Lore source file, which ends up making my build process take much
longer.  Because I didn't want to deal with this during development, and
since there are only like 4 external entities in all of the Lore docs, I
turned this off and told lxml to ignore the errors. It may be that there is
a better way to do this (maybe cache the DTDs somehow), but I haven't really
bothered with it yet.  It's a simple matter to turn it back on when we're
ready, even if there isn't an easy/convenient way to avoid the repeated
downloads of the DTDs.


>
>   - Foolscap 0.5 was released today, which made me wonder what they use for
>
>     docs...and it's Lore.  I brought this up on IRC, and it was suggested
>     by many that Lore should stick around even after the conversion
> according
>     to the standard Twisted compatibility policy, to give anyone who still
>     uses it time to migrate.  This sounds like a fine idea to me.
>     Any thoughts?
>
>
> Since nobody really uses lore's API, the same compatibility policy doesn't
> really apply.  In lore's case, I would say that the policy should be that we
> include it with X more releases just for packaging convenience, but stop
> doing maintenance immediately.
>
>
>
Fine with me.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100121/12501b1e/attachment-0001.html>

From lehmann at cnm.de  Thu Jan 21 10:08:47 2010
From: lehmann at cnm.de (Marten Lehmann)
Date: Thu, 21 Jan 2010 18:08:47 +0100
Subject: [Twisted-Python] LDAP server based on python
Message-ID: <4B588A1F.6090106@cnm.de>

Hi,

I'm refering to an older post of Xavier Dutoit on this list (in early 
2008), in which he asked about the state of the ldap-server (ldaptor) 
plug-in for Twisted.

What he needed this for was virtually the same as the way we intend to 
use it: Our users shall be able to integrate all contacts of their 
collaboration account in Outlook, Thunderbird, Evolution etc. by LDAP.

For easy configuration and security purposes we want to provide a short 
LDAP tree which returns all the contacts of the user, so he can use his 
contacts everywhere, not just in the web application of the groupware.

The backend is not 100% clear yet, it may be a SQL call to a database, 
it may be a special search within a less secured master LDAP address 
book, it may be a REST call returning JSON data or whatever.

Since we are doing most of our current work in python, we don't want to 
manually extend OpenLDAP's sql backend, but rather help ldaptor's ldap 
server to reach the production level (in case it hasn't done so already).

Does someone know about the current state of the ldaptor's ldap server 
plug-in?

Kind regards
Marten



From kevin.horn at gmail.com  Thu Jan 21 10:11:33 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 21 Jan 2010 11:11:33 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 4
In-Reply-To: <20100121090304.1898.181375491.divmod.xquotient.455@localhost.localdomain>
References: <562bcc11001191333mde9cda3kc707640645245c8f@mail.gmail.com>
	<4ACFD295-E621-47F4-B665-4EF9D2B7637F@twistedmatrix.com>
	<20100121090304.1898.181375491.divmod.xquotient.455@localhost.localdomain>
Message-ID: <562bcc11001210911o1b9affa4rb8474dec1126fcac@mail.gmail.com>

On Thu, Jan 21, 2010 at 3:03 AM, <exarkun at twistedmatrix.com> wrote:

>
> On IRC last night I brought up the idea that we could skip the
> conversion to ReST and use Sphinx with xhtml input documents.  The
> conclusion seemed to be that this might be difficult, but no one was
> really sure what work would be involved in this approach.  Kevin's
> already put a lot of effort into the conversion.  It would be nice if
> someone else could investigate this.
>

>From a docutils point of view, I _think_ it would involve creating a
docutisl "Parser" object, which could read the Lore sources and translate it
into a "doctree" of nodes.  From there you could generate the output in
whatever format is supported by docutils.  This would be doable in theory,
but I don't think it would be trivial or even easy, and then you'd have
another tool to maintain until the end of time.

Sphinx adds a bunch of extensions and conventions on top of docutils proper,
and I have little to no idea of what would be involved in handling those
issues.



> >
> >>   - Foolscap 0.5 was released today, which made me wonder what they
> >>use for
> >>     docs...and it's Lore.  I brought this up on IRC, and it was
> >>suggested
> >>     by many that Lore should stick around even after the conversion
> >>according
> >>     to the standard Twisted compatibility policy, to give anyone who
> >>still
> >>     uses it time to migrate.  This sounds like a fine idea to me.
> >>     Any thoughts?
> >
> >Since nobody really uses lore's API, the same compatibility policy
> >doesn't really apply.  In lore's case, I would say that the policy
> >should be that we include it with X more releases just for packaging
> >convenience, but stop doing maintenance immediately.
>
> As long as someone wants to do maintenance, I don't see any reason to
> stop them from doing it.  We might mark all the Lore tickets lowest
> priority or otherwise signal that some subset of the "core" developers
> aren't interested in maintaining it.... but then, how would that be any
> different from the status quo?
>
> Jean-Paul
>
>
If someone wants to maintain Lore, I certainly have no objection, but I
don't think anyone really does.  And it's not like it won't still be in the
SVN repos back in the history someplace, even if it were to be "removed"
from trunk.

I don't have strong feelings about it either way, but my feeling is Lore
should maybe be officially deprecated for a release (or 2, 3, etc.) and then
"removed" from trunk, and if someone wants to maintain it themselves, they
can fork it and deal with it outside the Twisted project.  Or it can be
"resurrected" later on if someone wants.  At the very least, don't force
users to install Lore along with the rest of Twisted once Lore is out of
general use.  Maybe it could be a separate package like web2?

But if it were just up to me, I would just get rid of it, to avoid taking up
developer time, cluttering up trac with open tickets, etc.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100121/2d810c8b/attachment.html>

From ltaylor.volks at gmail.com  Thu Jan 21 10:50:23 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Thu, 21 Jan 2010 10:50:23 -0700
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
Message-ID: <4B5893DF.60600@gmail.com>

On 1/20/10 5:35 AM, Pet wrote:
> Hi,
> 
> in code below I try to rotate log files if they reach 5000000 limit,
> but this happens only to every 5 files, ls -althr:
> 
> -rw-r--r-- 1 root root 977K 2010-01-19 19:03 /var/log/my.log.12
> -rw-r--r-- 1 root root 977K 2010-01-19 19:55 /var/log/my.log.10
> -rw-r--r-- 1 root root 977K 2010-01-19 20:41 /var/log/my.log.9
> -rw-r--r-- 1 root root 977K 2010-01-19 21:30 /var/log/my.log.8
> -rw-r--r-- 1 root root 977K 2010-01-19 22:46 /var/log/my.log.7
> -rw-r--r-- 1 root root 4.8M 2010-01-20 00:19 /var/log/my.log.11
> -rw-r--r-- 1 root root 977K 2010-01-20 00:19 /var/log/my.log.6
> -rw-r--r-- 1 root root 977K 2010-01-20 09:17 /var/log/my.log.4
> -rw-r--r-- 1 root root 977K 2010-01-20 10:45 /var/log/my.log.3
> -rw-r--r-- 1 root root 977K 2010-01-20 12:04 /var/log/my.log.2
> -rw-r--r-- 1 root root 977K 2010-01-20 12:59 /var/log/my.log.1
> -rw-r--r-- 1 root root 4.2M 2010-01-20 13:26 /var/log/my.log.5
> -rw-r--r-- 1 root root 301K 2010-01-20 13:26 /var/log/my.log
> 
> 
> it writes simultaneously to both my.log.5 and my.log. It is not big
> problem, but in this way I have only recent files, because they grows
> quickly
> 
> Pet
> 
<snip>

This can occur if you have multiple instances of logfile.LogFile setup
to manage the same file. The default rotation is 1MB, so maybe you have
another logfile.LogFile somewhere?



From maarten at treewalker.org  Thu Jan 21 11:02:06 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Thu, 21 Jan 2010 19:02:06 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <4B5893DF.60600@gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com>
Message-ID: <201001211902.06589.maarten@treewalker.org>

On Thursday 21 January 2010, Lucas Taylor wrote:

> This can occur if you have multiple instances of logfile.LogFile setup
> to manage the same file. The default rotation is 1MB, so maybe you have
> another logfile.LogFile somewhere?

Maybe twistd's log rotation?

Bye,
		Maarten



From petshmidt at googlemail.com  Thu Jan 21 11:17:11 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 21 Jan 2010 19:17:11 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <201001211902.06589.maarten@treewalker.org>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com> 
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org>
Message-ID: <b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>

On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
<maarten at treewalker.org> wrote:
> On Thursday 21 January 2010, Lucas Taylor wrote:
>
>> This can occur if you have multiple instances of logfile.LogFile setup
>> to manage the same file. The default rotation is 1MB, so maybe you have
>> another logfile.LogFile somewhere?
>
> Maybe twistd's log rotation?

Yes, may be. I start my daemon with
/usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
--pidfile=/var/lock/mydaemon.pid

How do I start twistd, so it doesn't produce own log file?

Thanks for help!

Pet

>
> Bye,
>                Maarten
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From landreville at deadtreepages.com  Thu Jan 21 11:32:53 2010
From: landreville at deadtreepages.com (Landreville)
Date: Thu, 21 Jan 2010 13:32:53 -0500
Subject: [Twisted-Python] SIP and RTP
In-Reply-To: <f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>
References: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
	<f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>
Message-ID: <9d748c781001211032x5c2e8b2s2ff2a1e66692859b@mail.gmail.com>

On Thu, Jan 21, 2010 at 12:10 AM, Godson Gera <godson.g at gmail.com> wrote:
> There is no direct RTP support in Twisted. Shtoom did that but its dead long
> back. I've seen people using the same RTP code implemented by shtoom here
> and there. Also SIP implementation in Twisted is not 100%. There is one more
> project called Sine made by divmod which uses Twsited and it has implemented
> more SIP protocol features.

You wouldn't happend to know where to find the Shtoom source?

I'm going to try to make a simpler client that will just subscribe to
another user on a sip server and listen to notify events (any not try
any RTP at all for starters).



From ltaylor.volks at gmail.com  Thu Jan 21 16:13:03 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Thu, 21 Jan 2010 16:13:03 -0700
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com>
	<201001211902.06589.maarten@treewalker.org>
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
Message-ID: <4B58DF7F.6090301@gmail.com>

On 1/21/10 11:17 AM, Pet wrote:
> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
> <maarten at treewalker.org> wrote:
>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>
>>> This can occur if you have multiple instances of logfile.LogFile setup
>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>> another logfile.LogFile somewhere?
>> Maybe twistd's log rotation?
> 
> Yes, may be. I start my daemon with
> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
> --pidfile=/var/lock/mydaemon.pid
> 
> How do I start twistd, so it doesn't produce own log file?
> 
> Thanks for help!
> 
> Pet
> 

You can customize the application to use your logfile and observer:
http://twistedmatrix.com/documents/current/core/howto/application.html#auto6

e.g
class MyLog(log.FileLogObserver):
    def emit(self, logEntryDict):
        log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
        log.FileLogObserver.emit(self, logEntryDict)

maxLogSize = 5000000
logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
maxRotatedFiles=50)

application = service.Application("myapp")
application.setComponent(log.ILogObserver, MyLog(logFile).emit)






From washort at twistedmatrix.com  Thu Jan 21 19:58:12 2010
From: washort at twistedmatrix.com (Allen Short)
Date: Thu, 21 Jan 2010 18:58:12 -0800
Subject: [Twisted-Python] SIP and RTP
In-Reply-To: <9d748c781001211032x5c2e8b2s2ff2a1e66692859b@mail.gmail.com>
References: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
	<f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>
	<9d748c781001211032x5c2e8b2s2ff2a1e66692859b@mail.gmail.com>
Message-ID: <f147f7e11001211858u6821bfc2nfd69336598fc88b5@mail.gmail.com>

Your best bet is probably going to be looking at the code in Divmod Sine.
You can access the code at: http://divmod.org/svn/Divmod/trunk/Sine/

Unfortunately it isn't very polished -- documentation, especially for the
user agent pieces, is rather minimal.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100121/bc1ad475/attachment.html>

From petshmidt at googlemail.com  Fri Jan 22 03:15:18 2010
From: petshmidt at googlemail.com (Pet)
Date: Fri, 22 Jan 2010 11:15:18 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <4B58DF7F.6090301@gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com> 
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org> 
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com> 
	<4B58DF7F.6090301@gmail.com>
Message-ID: <b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>

On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
> On 1/21/10 11:17 AM, Pet wrote:
>> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>> <maarten at treewalker.org> wrote:
>>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>>
>>>> This can occur if you have multiple instances of logfile.LogFile setup
>>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>>> another logfile.LogFile somewhere?
>>> Maybe twistd's log rotation?
>>
>> Yes, may be. I start my daemon with
>> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>> --pidfile=/var/lock/mydaemon.pid
>>
>> How do I start twistd, so it doesn't produce own log file?
>>
>> Thanks for help!
>>
>> Pet
>>
>
> You can customize the application to use your logfile and observer:
> http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>
> e.g
> class MyLog(log.FileLogObserver):
>    def emit(self, logEntryDict):
>        log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
>        log.FileLogObserver.emit(self, logEntryDict)
>
> maxLogSize = 5000000
> logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
> maxRotatedFiles=50)
>
> application = service.Application("myapp")
> application.setComponent(log.ILogObserver, MyLog(logFile).emit)

Thanks for suggestion. I'll try it out as soon as I can. Currently I
do it in that way:

application = service.Application("MyService")
myLogService = myLogService(LOG_NAME, LOG_DIR)
myLogService.setServiceParent(application)


what is the difference between creating service and setting
setServiceParent and setComponent?

Pet

>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From landreville at deadtreepages.com  Fri Jan 22 10:52:30 2010
From: landreville at deadtreepages.com (Landreville)
Date: Fri, 22 Jan 2010 12:52:30 -0500
Subject: [Twisted-Python] SIP and RTP
In-Reply-To: <f147f7e11001211858u6821bfc2nfd69336598fc88b5@mail.gmail.com>
References: <9d748c781001201101h7a037cc5ub9f4c017afd55337@mail.gmail.com>
	<f9822b401001202110x7b52f9b0v5c2307ada6a41ad2@mail.gmail.com>
	<9d748c781001211032x5c2e8b2s2ff2a1e66692859b@mail.gmail.com>
	<f147f7e11001211858u6821bfc2nfd69336598fc88b5@mail.gmail.com>
Message-ID: <9d748c781001220952s55196e77m6b5cb553dfa36c8c@mail.gmail.com>

On Thu, Jan 21, 2010 at 9:58 PM, Allen Short <washort at twistedmatrix.com> wrote:
>
> Your best bet is probably going to be looking at the code in Divmod Sine.
> You can access the code at: http://divmod.org/svn/Divmod/trunk/Sine/
> Unfortunately it isn't very polished -- documentation, especially for the
> user agent pieces, is rather minimal.
>

Actually I've decided to build it up from the sip code in twisted and
just write everything I need from scratch. I don't need that much --
and getting the client registration working wasn't as complicated as I
thought it was going to be.

If I get a bunch of functionality maybe I can put it up somewhere eventually.



From exarkun at twistedmatrix.com  Fri Jan 22 13:52:35 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 22 Jan 2010 20:52:35 -0000
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com>
	<201001211902.06589.maarten@treewalker.org>
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
Message-ID: <20100122205235.1898.393355965.divmod.xquotient.458@localhost.localdomain>

On 10:15 am, petshmidt at googlemail.com wrote:
>On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor 
><ltaylor.volks at gmail.com> wrote:
>>On 1/21/10 11:17 AM, Pet wrote:
>>>On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>>><maarten at treewalker.org> wrote:
>>>>On Thursday 21 January 2010, Lucas Taylor wrote:
>>>>>This can occur if you have multiple instances of logfile.LogFile 
>>>>>setup
>>>>>to manage the same file. The default rotation is 1MB, so maybe you 
>>>>>have
>>>>>another logfile.LogFile somewhere?
>>>>Maybe twistd's log rotation?
>>>
>>>Yes, may be. I start my daemon with
>>>/usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>>>--pidfile=/var/lock/mydaemon.pid
>>>
>>>How do I start twistd, so it doesn't produce own log file?
>>>
>>>Thanks for help!
>>>
>>>Pet
>>
>>You can customize the application to use your logfile and observer:
>>http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>>
>>e.g
>>class MyLog(log.FileLogObserver):
>>� �def emit(self, logEntryDict):
>>� � � �log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
>>� � � �log.FileLogObserver.emit(self, logEntryDict)
>>
>>maxLogSize = 5000000
>>logFile = logfile.LogFile("my.log", "/var/log", 
>>rotateLength=maxLogSize,
>>maxRotatedFiles=50)
>>
>>application = service.Application("myapp")
>>application.setComponent(log.ILogObserver, MyLog(logFile).emit)
>
>Thanks for suggestion. I'll try it out as soon as I can. Currently I
>do it in that way:
>
>application = service.Application("MyService")
>myLogService = myLogService(LOG_NAME, LOG_DIR)
>myLogService.setServiceParent(application)
>
>
>what is the difference between creating service and setting
>setServiceParent and setComponent?

Just that if there's an ILogObserver component on the application, then 
twistd doesn't bother to set up the default log observer.

Jean-Paul



From ltaylor.volks at gmail.com  Fri Jan 22 14:21:36 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Fri, 22 Jan 2010 14:21:36 -0700
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com>
	<201001211902.06589.maarten@treewalker.org>
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
Message-ID: <4B5A16E0.4040206@gmail.com>

On 1/22/10 3:15 AM, Pet wrote:
> On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
>> On 1/21/10 11:17 AM, Pet wrote:
>>> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>>> <maarten at treewalker.org> wrote:
>>>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>>>
>>>>> This can occur if you have multiple instances of logfile.LogFile setup
>>>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>>>> another logfile.LogFile somewhere?
>>>> Maybe twistd's log rotation?
>>> Yes, may be. I start my daemon with
>>> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>>> --pidfile=/var/lock/mydaemon.pid
>>>
>>> How do I start twistd, so it doesn't produce own log file?
>>>
>>> Thanks for help!
>>>
>>> Pet
>>>
>> You can customize the application to use your logfile and observer:
>> http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>>
>> e.g
>> class MyLog(log.FileLogObserver):
>>    def emit(self, logEntryDict):
>>        log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
>>        log.FileLogObserver.emit(self, logEntryDict)
>>
>> maxLogSize = 5000000
>> logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
>> maxRotatedFiles=50)
>>
>> application = service.Application("myapp")
>> application.setComponent(log.ILogObserver, MyLog(logFile).emit)
> 
> Thanks for suggestion. I'll try it out as soon as I can. Currently I
> do it in that way:
> 
> application = service.Application("MyService")
> myLogService = myLogService(LOG_NAME, LOG_DIR)
> myLogService.setServiceParent(application)
> 
> 
> what is the difference between creating service and setting
> setServiceParent and setComponent?
> 
> Pet
> 
http://twistedmatrix.com/documents/current/core/howto/application.html

The important aspect is the setComponent api. This is the part that lets
you override the default logging behavior of twistd. It has nothing to
do with the services that you register with the application using
setServiceParent.

If your MyLogService only does what you originally posted, you probably
don't need all of that machinery. Using twistd will take care of
starting and stopping logging for you.

But, if you really want to use your service (say you want to force
rotation on a restart), then you can do so. You just need to set the
ILogObserver component on the application using your observer's emit
function.

e.g

application = service.Application("MyService")
myLogService = myLogService(LOG_NAME, LOG_DIR)
myLogService.setServiceParent(application)
application.setComponent(log.ILogObserver, myLogService.loclog.emit)

Note that this won't work with your original MyLogService implementation
without some reorganization (move logfile and loclog creation up to
__init__)




From exarkun at twistedmatrix.com  Fri Jan 22 14:40:38 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 22 Jan 2010 21:40:38 -0000
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
Message-ID: <20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>

On 21 Jan, 03:30 pm, termim at gmail.com wrote:
>On Thu, Jan 21, 2010 at 3:58 AM,  <exarkun at twistedmatrix.com> wrote:
>>On 03:43 am, glyph at twistedmatrix.com wrote:
>>>
>>>On Jan 20, 2010, at 3:20 PM, Mikhail Terekhov wrote:
>>>>Hi,
>>>>
>>>>I've switched recently from 8.2 to 9.0 and noticed that some of my
>>>>client scripts
>>>>hang in reactor.stop() on exit sometimes. That never happened 
>>>>before.
>>>>For
>>>>example if I run the gethostbyname.py from the twisted-names 
>>>>examples
>>>>directory
>>>>it prints the correct result and hangs forever until I press 
>>>>Cntrl-C.
>>>>Then it prints the
>>>>following traceback:
>>>
>>>
>>>I don't see the behavior you describe, but I do see this traceback on
>>>trunk with every 3rd run or so of that example - maybe the example is
>>>buggy?
>>>
>>>doc/names/examples$ python gethostbyname.py �twistedmatrix.com
>>>twisted/names/dns.py:1670: DeprecationWarning: Please only pass IPs 
>>>to
>>>write(), not hostnames
>>>�self.transport.write(message.toStr(), address)
>>>Traceback (most recent call last):
>>>�File "twisted/internet/udp.py", line 121, in doRead
>>>� �self.protocol.datagramReceived(data, addr)
>>>�File "twisted/names/dns.py", line 1700, in datagramReceived
>>>� �d.callback(m)
>>>�File "twisted/internet/defer.py", line 239, in callback
>>>� �self._startRunCallbacks(result)
>>>�File "twisted/internet/defer.py", line 308, in _startRunCallbacks
>>>� �self._runCallbacks()
>>>--- <exception caught here> ---
>>>�File "twisted/internet/defer.py", line 324, in _runCallbacks
>>>� �self.result = callback(self.result, *args, **kw)
>>>�File "twisted/names/common.py", line 239, in <lambda>
>>>� �).addBoth(lambda passthrough: 
>>>(r.protocol.transport.stopListening(),
>>>passthrough)[1])
>>>exceptions.AttributeError: 'NoneType' object has no attribute
>>>'stopListening'
>>
>>http://twistedmatrix.com/trac/ticket/4210
>
>I think I found it, it is somewhat different IMHO. When you run
>
>   python gethostbyname.py localhost
>
>notice the '''localhost''' there, the getHostByName('localhost') 
>returns
>defer.succeed(..) so the callback gotResult and hence reactor.stop()
>is called even before reactor is run and for some reason it hangs there
>inside reactor.stop().
>
>So there are actually two points here:
>
>1. the gethostbyname.py example should probably be changed something
>    like this

This sounds a lot like another example of the problem described in 
<http://twistedmatrix.com/trac/ticket/3270>.
>[snip]
>
>2. Why reactor.stop() hangs if it is called before reactor.run()?

It doesn't.  It raises an exception.  The reason the example hangs is 
that since reactor.stop() was called before reactor.run(), it's not 
called *after* reactor.run().  So the reactor never stops.

Jean-Paul



From termim at gmail.com  Fri Jan 22 15:42:19 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 22 Jan 2010 17:42:19 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
Message-ID: <12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>

On Fri, Jan 22, 2010 at 4:40 PM,  <exarkun at twistedmatrix.com> wrote:
> On 21 Jan, 03:30 pm, termim at gmail.com wrote:
>> [snip]
>>
>> 2. Why reactor.stop() hangs if it is called before reactor.run()?
>
> It doesn't.  It raises an exception.  The reason the example hangs is that

Care to elaborate? Who hangs then and why python exits and I see this
exception only after I hit Cntl-C?

Actually I noticed this problem in my old wxPython/Twisted application.
Before upgrade everything was sweet and shiny but when I upgraded
Twisted to 9.0 my application suddenly started to hang on exit. BTW
I use wxreactor and install it exactly as in doc/core/examples/wxdemo.py

It is interesting that doc/core/examples/wxacceptance.py has no such a problem,
but doc/core/examples/wxdemo.py has! If I start it, wait till it
prints to stdout
"two seconds passed" and then try to quit it either by File->Exit or by clicking
on the WM close button it does not respond, even if I hit Cntrl-C in the
terminal from where I run it, but if after Cntrl-C I go to the
File->Exit it quits
after printing "Received SIGINT, shutting down."

terekhov at _:~/Twisted-9.0.0/doc/core/examples >python wxdemo.py
2010-01-22 17:16:03-0500 [-] Log opened.
2010-01-22 17:16:05-0500 [-] two seconds passed
^C
^C
2010-01-22 17:21:03-0500 [-] Received SIGINT, shutting down.
terekhov at _:~/Twisted-9.0.0/doc/core/examples >

Another clue is that if I'm fast enough and can click on the close button
_before_ it prints "two seconds passed", then everything is fine and it
quits without problem:

terekhov at _:~/Twisted-9.0.0/doc/core/examples >python wxdemo.py
2010-01-22 17:23:59-0500 [-] Log opened.
2010-01-22 17:24:01-0500 [-] two seconds passed
terekhov at _:~/Twisted-9.0.0/doc/core/examples >

On the same note may be doc/core/examples/wxacceptance.py has no
such a problem because it uses reactor.callLater(0.1,helloWorld)?

I used gethostbyname.py as an example only because it is much smaller
and the behavior is very similar. May be it is something different.

> since reactor.stop() was called before reactor.run(), it's not called
> *after* reactor.run().  So the reactor never stops.
>
That is nice :)

Regards,
-- 
Mikhail Terekhov



From exarkun at twistedmatrix.com  Fri Jan 22 16:15:20 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 22 Jan 2010 23:15:20 -0000
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
	<12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
Message-ID: <20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>

On 10:42 pm, termim at gmail.com wrote:
>On Fri, Jan 22, 2010 at 4:40 PM,  <exarkun at twistedmatrix.com> wrote:
>>On 21 Jan, 03:30 pm, termim at gmail.com wrote:
>>>[snip]
>>>
>>>2. Why reactor.stop() hangs if it is called before reactor.run()?
>>
>>It doesn't. �It raises an exception. �The reason the example hangs is 
>>that
>
>Care to elaborate? Who hangs then and why python exits and I see this
>exception only after I hit Cntl-C?

I think that's what I explained in the rest of the sentence that is cut 
off above.  You may only see the exception reported later on because the 
example is relying on garbage collection for that reporting.
>
>Actually I noticed this problem in my old wxPython/Twisted application.
>Before upgrade everything was sweet and shiny but when I upgraded
>Twisted to 9.0 my application suddenly started to hang on exit. BTW
>I use wxreactor and install it exactly as in 
>doc/core/examples/wxdemo.py
>
>It is interesting that doc/core/examples/wxacceptance.py has no such a 
>problem,
>but doc/core/examples/wxdemo.py has! If I start it, wait till it
>prints to stdout
>"two seconds passed" and then try to quit it either by File->Exit or by 
>clicking
>on the WM close button it does not respond, even if I hit Cntrl-C in 
>the
>terminal from where I run it, but if after Cntrl-C I go to the
>File->Exit it quits
>after printing "Received SIGINT, shutting down."

This sounds familiar.  I think wxreactor has some wake-up issues.  It's 
not a very reliable reactor.  wxPython differs in various ways on 
different platforms and from release to release in ways which wxreactor 
doesn't account for.

I think the problem with the dns example is probably not related to your 
wxreactor issues at all.

Jean-Paul



From termim at gmail.com  Fri Jan 22 16:40:57 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 22 Jan 2010 18:40:57 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
	<12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
	<20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>
Message-ID: <12aaa0811001221540y6fe47f14ma73bd0fe514aad71@mail.gmail.com>

>>>> 2. Why reactor.stop() hangs if it is called before reactor.run()?
>>>
>>> It doesn't.  It raises an exception.  The reason the example hangs is
>>> that
>>
>> Care to elaborate? Who hangs then and why python exits and I see this
>> exception only after I hit Cntl-C?
>
> I think that's what I explained in the rest of the sentence that is cut off
> above.  You may only see the exception reported later on because the example
> is relying on garbage collection for that reporting.

Please bear with me as I still can't get it. Here is your explanation
for convenience:

> It doesn't.  It raises an exception.  The reason the example hangs is
> that since reactor.stop() was called before reactor.run(), it's not called
> *after* reactor.run().  So the reactor never stops.

So why reactor never stops if it was never run? What it is doing?

-- 
Mikhail Terekhov



From mithrandi at mithrandi.net  Fri Jan 22 18:04:04 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 23 Jan 2010 03:04:04 +0200
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <12aaa0811001221540y6fe47f14ma73bd0fe514aad71@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
	<12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
	<20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>
	<12aaa0811001221540y6fe47f14ma73bd0fe514aad71@mail.gmail.com>
Message-ID: <f5eea9171001221704q7468bbf9ya5edc6adf5a8203e@mail.gmail.com>

On Sat, Jan 23, 2010 at 1:40 AM, Mikhail Terekhov <termim at gmail.com> wrote:
> So why reactor never stops if it was never run? What it is doing?

You call reactor.stop(); this does nothing but produce a delayed
exception. You then call reactor.run(), which runs the reactor. You
then never call reactor.stop() again, and thus the reactor continues
running forever.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From termim at gmail.com  Sat Jan 23 12:40:15 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Sat, 23 Jan 2010 14:40:15 -0500
Subject: [Twisted-Python] 9.0.0 question
In-Reply-To: <f5eea9171001221704q7468bbf9ya5edc6adf5a8203e@mail.gmail.com>
References: <12aaa0811001201220n4942180due83599005a88e0c9@mail.gmail.com>
	<C789ED75-19A3-470E-B4EC-70022FDAD590@twistedmatrix.com>
	<20100121085842.1898.57654869.divmod.xquotient.447@localhost.localdomain>
	<12aaa0811001210730p4ab8c299oc7e00c8b4b53e8ef@mail.gmail.com>
	<20100122214038.1898.1478134810.divmod.xquotient.548@localhost.localdomain>
	<12aaa0811001221442u78fa5ecdge1986192d0411a4c@mail.gmail.com>
	<20100122231520.1898.596944869.divmod.xquotient.581@localhost.localdomain>
	<12aaa0811001221540y6fe47f14ma73bd0fe514aad71@mail.gmail.com>
	<f5eea9171001221704q7468bbf9ya5edc6adf5a8203e@mail.gmail.com>
Message-ID: <12aaa0811001231140u9926f1u32df465380877726@mail.gmail.com>

On Fri, Jan 22, 2010 at 8:04 PM, Tristan Seligmann
<mithrandi at mithrandi.net> wrote:
> On Sat, Jan 23, 2010 at 1:40 AM, Mikhail Terekhov <termim at gmail.com> wrote:
>> So why reactor never stops if it was never run? What it is doing?
>
> You call reactor.stop(); this does nothing but produce a delayed
> exception. You then call reactor.run(), which runs the reactor. You
> then never call reactor.stop() again, and thus the reactor continues
> running forever.

Tank you! I see now, it is very simple indeed!


-- 
Mikhail Terekhov



From exarkun at twistedmatrix.com  Sat Jan 23 22:05:21 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Jan 2010 05:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1264309521.01.128113016@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100124/5211641a/attachment-0001.html>

From alexandre at quessy.net  Sun Jan 24 21:40:16 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 24 Jan 2010 23:40:16 -0500
Subject: [Twisted-Python] python-purity
Message-ID: <72236ba91001242040q370e7263o27789f67cecfddab@mail.gmail.com>

Hello eveyone,
I think it is nice to mention this announce here, since Purity heavily
uses Twisted. (as well all my other Python projects, such as Toonloop,
and others)

Purity is a Python library for Pure Data dynamic patching. The idea is
to be able to harness the power of Pure Data for audio programming
without having to use its graphical interface, and without the need to
create external objects in C. Python's clear and intuitive syntax can
be used with profit in order to create intricate patches with advanced
string handling, graphical user interfaces and asynchronous network
operations. Purity uses Twisted, an event-driven Python framework.

Pure Data is a real-time graphical programming environment mainly for
audio processing. See http://puredata.info/ to learn more about Pure
Data.

It seems like there are people interested in using Purity, so I have
created a mailing list to discuss its further developments. I am ready
to put some time and efforts in Purity, and even to explain basic of
the Twisted library, if there are people who help me to make design
decisions and to test it. You can find out how to subscribe to the
mailing list by visiting the official wiki portal of Purity at
http://wiki.dataflow.ws/Purity

-- 
Alexandre Quessy
http://alexandre.quessy.net/



From wolfgang at rohdewald.de  Mon Jan 25 01:35:03 2010
From: wolfgang at rohdewald.de (Wolfgang Rohdewald)
Date: Mon, 25 Jan 2010 09:35:03 +0100
Subject: [Twisted-Python] Kajongg - a new game base on PyQt and twisted
Message-ID: <201001250935.14324.wolfgang@rohdewald.de>

I would like to announce Kajongg - it is a Mah Jongg game 
(not yet another solitaire but the real game for four 
players). It is written 100% in python and regular
expressions. The GUI is done with PyQt4, and the
network part is written using twisted.

Dear twisted people - you have a list of projects using
twisted - if you want to add Kajongg, please go ahead!

http://www.kde-apps.org/content/show.php/kajongg?content=103206

source code:

svn co svn://anonsvn.kde.org/home/kde/trunk/playground/games/kajongg

-- 
Wolfgang



From k_r_a_j_kumar at yahoo.co.in  Mon Jan 25 08:40:15 2010
From: k_r_a_j_kumar at yahoo.co.in (Raj kumar)
Date: Mon, 25 Jan 2010 21:10:15 +0530 (IST)
Subject: [Twisted-Python] upload and receive
Message-ID: <50253.9632.qm@web8706.mail.in.yahoo.com>

Hi,
Currently I'm using twisted.web api for my http server.
If I have to implement a file upload from client, is it possible to receive a file at server end using twisted.web? or should I move to twisted.web2?
but I read twisted.web2 is not stable(that too, I may have to change my code for a shift).
Any sample references (using twisted.web api) to receive a file from client is appreciated.

Thanks in advance.

Raj.



      The INTERNET now has a personality. YOURS! See your Yahoo! Homepage. http://in.yahoo.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100125/94563646/attachment-0001.html>

From gabriel.rossetti at arimaz.com  Tue Jan 26 02:52:09 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Tue, 26 Jan 2010 10:52:09 +0100
Subject: [Twisted-Python] How to diagnose slowness
Message-ID: <4B5EBB49.9070504@arimaz.com>

Hello everyone,

I have noticed slowness sometimes in between two twisted apps. It 
doesn't happen often,
and I'm not sure where it comes from. It may either be when the msg is 
sent, that it really
isn't sent until after a delay (why?), or when the other service 
receives it, it takes time to
process the msg. The second idea may be easier to find, I haven't been 
able to though. If
I send the same msg, sometimes it's slowed down, and sometimes not. From 
what I see
both of my suggestions may be happening. These msgs are XMPP based and 
I'm using
Twisted 8.1.0. Does anyone have any tips on diagnosing this problem?

Thank you,
Gabriel



From exarkun at twistedmatrix.com  Tue Jan 26 05:43:58 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 26 Jan 2010 12:43:58 -0000
Subject: [Twisted-Python] How to diagnose slowness
In-Reply-To: <4B5EBB49.9070504@arimaz.com>
References: <4B5EBB49.9070504@arimaz.com>
Message-ID: <20100126124358.1898.199587131.divmod.xquotient.660@localhost.localdomain>

On 09:52 am, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>I have noticed slowness sometimes in between two twisted apps. It
>doesn't happen often,
>and I'm not sure where it comes from. It may either be when the msg is
>sent, that it really
>isn't sent until after a delay (why?), or when the other service
>receives it, it takes time to
>process the msg. The second idea may be easier to find, I haven't been
>able to though. If
>I send the same msg, sometimes it's slowed down, and sometimes not. 
>From
>what I see
>both of my suggestions may be happening. These msgs are XMPP based and
>I'm using
>Twisted 8.1.0. Does anyone have any tips on diagnosing this problem?

Instrument the programs involved until you can isolate where the delay 
actually happens.

Jean-Paul



From theiklabs at gmail.com  Tue Jan 26 14:40:43 2010
From: theiklabs at gmail.com (adamjamesdrew same)
Date: Tue, 26 Jan 2010 16:40:43 -0500
Subject: [Twisted-Python] Twisted newb I can't add a cred checker to a
	Factory class
Message-ID: <2a30f70a1001261340r55c17dd2x98f5df7332815f8e@mail.gmail.com>

class ProxyIncomingProtocol(Protocol):
.....

class ProxyOutgoingProtocol(Protocol):
.....

class ProxyFactory(Factory):

    protocol = ProxyIncomingProtocol

class SimplePerspective(pb.Avatar):

    def perspective_echo(self, text):
        print 'echoing',text
        return text

    def logout(self):
        print self, "logged out"


class SimpleRealm:
    implements(IRealm)

    def requestAvatar(self, avatarId, mind, *interfaces):
        if pb.IPerspective in interfaces:
            avatar = SimplePerspective()
            return pb.IPerspective, avatar, avatar.logout
        else:
            raise NotImplementedError("no interface")

portal = Portal(SimpleRealm())
checker = InMemoryUsernamePasswordDatabaseDontUse()
checker.addUser("guest", "password")
portal.registerChecker(checker)


proxy_factory = proxy.ProxyFactory()
# ??????? how can I add the portal to the factory?
internet.GenericServer(cometsession.Port, factory=proxy_factory,
resource=root_resource, childName="tcp",
interface=INTERFACE).setServiceParent(serviceCollection)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100126/239412c6/attachment.html>

From donal.mcmullan at gmail.com  Tue Jan 26 21:50:14 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Wed, 27 Jan 2010 17:50:14 +1300
Subject: [Twisted-Python] Many connections and TIME_WAIT
Message-ID: <634095dc1001262050t5b5e54eayd2de93afa013f3b2@mail.gmail.com>

I've been prototyping a client that connects to thousands of servers and
calls some method. It's not real important to me at this stage whether
that's via xmlrpc, perspective broker, or something else.

What seems to happen on the client machine is that each network connection
that gets opened and then closed goes into a TIME_WAIT state, and eventually
there are so many connections in that state that it's impossible to create
any more.

I'm keeping an eye on the output of
netstat -an | wc -l
Initially I've got 569 entries there. When I run my test client, that ramps
up really quickly and peaks at about 2824. At that point, the client reports
a callRemoteFailure:

callRemoteFailure [Failure instance: Traceback (failure with no frames):
<class 'twisted.internet.error.ConnectionLost'>: Connection to the other
side was lost in a non-clean fashion: Connection lost.

Increasing the file descriptor limits doesn't seem to have any effect on
this.

Is there an established Twisted sanctioned canonical way to free up this
resource? Or am I doing something wrong? I'm looking into tweaking
SO_REUSEADDR and SO_LINGER - that sound sane?

Just tapping the lazywebs to see if anyone's already seen this in the wild.

Thanks guys

Donal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100127/68ab5c5b/attachment.html>

From exarkun at twistedmatrix.com  Wed Jan 27 05:51:42 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 27 Jan 2010 12:51:42 -0000
Subject: [Twisted-Python] Twisted newb I can't add a cred checker to
	a	Factory class
In-Reply-To: <2a30f70a1001261340r55c17dd2x98f5df7332815f8e@mail.gmail.com>
References: <2a30f70a1001261340r55c17dd2x98f5df7332815f8e@mail.gmail.com>
Message-ID: <20100127125142.1898.431074259.divmod.xquotient.791@localhost.localdomain>

On 26 Jan, 09:40 pm, theiklabs at gmail.com wrote:
>class ProxyIncomingProtocol(Protocol):
>.....
>
>class ProxyOutgoingProtocol(Protocol):
>.....
>
>class ProxyFactory(Factory):
>
>    protocol = ProxyIncomingProtocol
>
>class SimplePerspective(pb.Avatar):
>
>    def perspective_echo(self, text):
>        print 'echoing',text
>        return text
>
>    def logout(self):
>        print self, "logged out"
>
>
>class SimpleRealm:
>    implements(IRealm)
>
>    def requestAvatar(self, avatarId, mind, *interfaces):
>        if pb.IPerspective in interfaces:
>            avatar = SimplePerspective()
>            return pb.IPerspective, avatar, avatar.logout
>        else:
>            raise NotImplementedError("no interface")
>
>portal = Portal(SimpleRealm())
>checker = InMemoryUsernamePasswordDatabaseDontUse()
>checker.addUser("guest", "password")
>portal.registerChecker(checker)
>
>
>proxy_factory = proxy.ProxyFactory()
># ??????? how can I add the portal to the factory?
>internet.GenericServer(cometsession.Port, factory=proxy_factory,
>resource=root_resource, childName="tcp",
>interface=INTERFACE).setServiceParent(serviceCollection)

It doesn't make any sense to ask how to "add a portal to a factory". 
Your protocol implementation needs to support twisted.cred.  In the code 
you included, I don't see any evidence of such support.

Also, with the unexplained mix of two "proxying" protocols (with their 
implementations omitted), various classes from Twisted Spread (but not 
enough to actually establish a PB connection as far as I can tell), and 
something called "cometsession", it's hard to tell what you're actually 
trying to accomplish, so I don't have any more specific suggestions to 
make.

Jean-Paul



From exarkun at twistedmatrix.com  Wed Jan 27 06:05:16 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 27 Jan 2010 13:05:16 -0000
Subject: [Twisted-Python] Many connections and TIME_WAIT
In-Reply-To: <634095dc1001262050t5b5e54eayd2de93afa013f3b2@mail.gmail.com>
References: <634095dc1001262050t5b5e54eayd2de93afa013f3b2@mail.gmail.com>
Message-ID: <20100127130516.1898.1655832039.divmod.xquotient.807@localhost.localdomain>

On 04:50 am, donal.mcmullan at gmail.com wrote:
>I've been prototyping a client that connects to thousands of servers 
>and
>calls some method. It's not real important to me at this stage whether
>that's via xmlrpc, perspective broker, or something else.
>
>What seems to happen on the client machine is that each network 
>connection
>that gets opened and then closed goes into a TIME_WAIT state, and 
>eventually
>there are so many connections in that state that it's impossible to 
>create
>any more.

Yep.  That's what happens to a TCP connection when you close it.
>
>I'm keeping an eye on the output of
>netstat -an | wc -l
>Initially I've got 569 entries there. When I run my test client, that 
>ramps
>up really quickly and peaks at about 2824. At that point, the client 
>reports
>a callRemoteFailure:

Presumably these numbers have something to do with how quickly you're 
opening and closing new connections.  TIME_WAIT lasts for 2MSL (4 
minutes) to ensure that a future connection doesn't receive data 
intended for a previous connection (clearly a bad thing).

However... 2824 is a pretty low number at which to run out of sockets. 
Perhaps you're running this software on Windows?  I think Windows has a 
ridiculously small number of "client sockets" allocated by default.  I 
seem to recall this being something you can change with a registry edit 
or something like that.

Another option would be to switch to a POSIX-platform instead.

If you're *not* on Windows, then this is odd and perhaps bears further 
scrutiny.
>
>callRemoteFailure [Failure instance: Traceback (failure with no 
>frames):
><class 'twisted.internet.error.ConnectionLost'>: Connection to the 
>other
>side was lost in a non-clean fashion: Connection lost.

This isn't exactly how I'd expect it to fail, but I also don't know what 
"callRemoteFailure" is or where it comes from, so maybe that's not too 
surprising.
>Increasing the file descriptor limits doesn't seem to have any effect 
>on
>this.

Quite so.  The process has, after all, already closed these sockets. 
They no longer count towards the process's file descriptor limit (oh 
dear, I suppose you're not using Windows if you have a file descriptor 
limit to raise).
>
>Is there an established Twisted sanctioned canonical way to free up 
>this
>resource? Or am I doing something wrong? I'm looking into tweaking
>SO_REUSEADDR and SO_LINGER - that sound sane?
>
>Just tapping the lazywebs to see if anyone's already seen this in the 
>wild.

On most reasonably configured Linux machines, you shouldn't run into 
this problem until you're doing at least an order of magnitude more 
work.  Many times, I have run clients that do many thousands of new 
connections per second, resulting in tens of thousands of TIME_WAIT 
sockets on the system with no problem.  So, I'm not sure why you're 
running into this after only a few thousand.

Jean-Paul



From petshmidt at googlemail.com  Thu Jan 28 01:46:19 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 28 Jan 2010 09:46:19 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <4B5A16E0.4040206@gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com> 
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org> 
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com> 
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com> 
	<4B5A16E0.4040206@gmail.com>
Message-ID: <b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>

On Fri, Jan 22, 2010 at 10:21 PM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
> On 1/22/10 3:15 AM, Pet wrote:
>> On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
>>> On 1/21/10 11:17 AM, Pet wrote:
>>>> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>>>> <maarten at treewalker.org> wrote:
>>>>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>>>>
>>>>>> This can occur if you have multiple instances of logfile.LogFile setup
>>>>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>>>>> another logfile.LogFile somewhere?
>>>>> Maybe twistd's log rotation?
>>>> Yes, may be. I start my daemon with
>>>> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>>>> --pidfile=/var/lock/mydaemon.pid
>>>>
>>>> How do I start twistd, so it doesn't produce own log file?
>>>>
>>>> Thanks for help!
>>>>
>>>> Pet
>>>>
>>> You can customize the application to use your logfile and observer:
>>> http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>>>
>>> e.g
>>> class MyLog(log.FileLogObserver):
>>>    def emit(self, logEntryDict):
>>>        log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
>>>        log.FileLogObserver.emit(self, logEntryDict)
>>>
>>> maxLogSize = 5000000
>>> logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
>>> maxRotatedFiles=50)
>>>
>>> application = service.Application("myapp")
>>> application.setComponent(log.ILogObserver, MyLog(logFile).emit)
>>
>> Thanks for suggestion. I'll try it out as soon as I can. Currently I
>> do it in that way:
>>
>> application = service.Application("MyService")
>> myLogService = myLogService(LOG_NAME, LOG_DIR)
>> myLogService.setServiceParent(application)
>>
>>
>> what is the difference between creating service and setting
>> setServiceParent and setComponent?
>>
>> Pet
>>
> http://twistedmatrix.com/documents/current/core/howto/application.html
>
> The important aspect is the setComponent api. This is the part that lets
> you override the default logging behavior of twistd. It has nothing to
> do with the services that you register with the application using
> setServiceParent.
>
> If your MyLogService only does what you originally posted, you probably
> don't need all of that machinery. Using twistd will take care of
> starting and stopping logging for you.
>
> But, if you really want to use your service (say you want to force
> rotation on a restart), then you can do so. You just need to set the
> ILogObserver component on the application using your observer's emit
> function.
>
> e.g
>
> application = service.Application("MyService")
> myLogService = myLogService(LOG_NAME, LOG_DIR)
> myLogService.setServiceParent(application)
> application.setComponent(log.ILogObserver, myLogService.loclog.emit)
>
> Note that this won't work with your original MyLogService implementation
> without some reorganization (move logfile and loclog creation up to
> __init__)
>

Hi,

I'm getting an error while starting my service:

Failed to load application: 'module' object has no attribute 'ILogObserver'

I've imported log with

from twisted.python import log


Have no idea what is wrong...


Pet


>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From twisted at ralphm.ik.nu  Thu Jan 28 01:58:45 2010
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Thu, 28 Jan 2010 09:58:45 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com>
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org>
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com>
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com>
	<4B5A16E0.4040206@gmail.com>
	<b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>
Message-ID: <1264669125.2486.33.camel@dwaal>

On Thu, 2010-01-28 at 09:46 +0100, Pet wrote:
> [..]
>
> I'm getting an error while starting my service:
> 
> Failed to load application: 'module' object has no attribute 'ILogObserver'

ILogObserver was introduced in Twisted 8.2. You are probably using an
older version.

ralphm




From petshmidt at googlemail.com  Thu Jan 28 01:58:34 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 28 Jan 2010 09:58:34 +0100
Subject: [Twisted-Python] Log rotates not as expected
In-Reply-To: <b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>
References: <b460e9631001200435v4aed85b0se75a3913c04bb186@mail.gmail.com> 
	<4B5893DF.60600@gmail.com> <201001211902.06589.maarten@treewalker.org> 
	<b460e9631001211017p4cce40b4ud7430da03034fbc3@mail.gmail.com> 
	<4B58DF7F.6090301@gmail.com>
	<b460e9631001220215l13791afet5cdc62116224bb55@mail.gmail.com> 
	<4B5A16E0.4040206@gmail.com>
	<b460e9631001280046o1dfedf2dyec0bc39e89df56c8@mail.gmail.com>
Message-ID: <b460e9631001280058s4c6678a3ufe83135135ac4208@mail.gmail.com>

On Thu, Jan 28, 2010 at 9:46 AM, Pet <petshmidt at googlemail.com> wrote:
> On Fri, Jan 22, 2010 at 10:21 PM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
>> On 1/22/10 3:15 AM, Pet wrote:
>>> On Fri, Jan 22, 2010 at 12:13 AM, Lucas Taylor <ltaylor.volks at gmail.com> wrote:
>>>> On 1/21/10 11:17 AM, Pet wrote:
>>>>> On Thu, Jan 21, 2010 at 7:02 PM, Maarten ter Huurne
>>>>> <maarten at treewalker.org> wrote:
>>>>>> On Thursday 21 January 2010, Lucas Taylor wrote:
>>>>>>
>>>>>>> This can occur if you have multiple instances of logfile.LogFile setup
>>>>>>> to manage the same file. The default rotation is 1MB, so maybe you have
>>>>>>> another logfile.LogFile somewhere?
>>>>>> Maybe twistd's log rotation?
>>>>> Yes, may be. I start my daemon with
>>>>> /usr/bin/twistd -y mydaemon.py --logfile=/var/log/my.log
>>>>> --pidfile=/var/lock/mydaemon.pid
>>>>>
>>>>> How do I start twistd, so it doesn't produce own log file?
>>>>>
>>>>> Thanks for help!
>>>>>
>>>>> Pet
>>>>>
>>>> You can customize the application to use your logfile and observer:
>>>> http://twistedmatrix.com/documents/current/core/howto/application.html#auto6
>>>>
>>>> e.g
>>>> class MyLog(log.FileLogObserver):
>>>>    def emit(self, logEntryDict):
>>>>        log.FileLogObserver.timeFormat = '%Y-%m-%d %H:%M:%S'
>>>>        log.FileLogObserver.emit(self, logEntryDict)
>>>>
>>>> maxLogSize = 5000000
>>>> logFile = logfile.LogFile("my.log", "/var/log", rotateLength=maxLogSize,
>>>> maxRotatedFiles=50)
>>>>
>>>> application = service.Application("myapp")
>>>> application.setComponent(log.ILogObserver, MyLog(logFile).emit)
>>>
>>> Thanks for suggestion. I'll try it out as soon as I can. Currently I
>>> do it in that way:
>>>
>>> application = service.Application("MyService")
>>> myLogService = myLogService(LOG_NAME, LOG_DIR)
>>> myLogService.setServiceParent(application)
>>>
>>>
>>> what is the difference between creating service and setting
>>> setServiceParent and setComponent?
>>>
>>> Pet
>>>
>> http://twistedmatrix.com/documents/current/core/howto/application.html
>>
>> The important aspect is the setComponent api. This is the part that lets
>> you override the default logging behavior of twistd. It has nothing to
>> do with the services that you register with the application using
>> setServiceParent.
>>
>> If your MyLogService only does what you originally posted, you probably
>> don't need all of that machinery. Using twistd will take care of
>> starting and stopping logging for you.
>>
>> But, if you really want to use your service (say you want to force
>> rotation on a restart), then you can do so. You just need to set the
>> ILogObserver component on the application using your observer's emit
>> function.
>>
>> e.g
>>
>> application = service.Application("MyService")
>> myLogService = myLogService(LOG_NAME, LOG_DIR)
>> myLogService.setServiceParent(application)
>> application.setComponent(log.ILogObserver, myLogService.loclog.emit)
>>
>> Note that this won't work with your original MyLogService implementation
>> without some reorganization (move logfile and loclog creation up to
>> __init__)
>>
>
> Hi,
>
> I'm getting an error while starting my service:
>
> Failed to load application: 'module' object has no attribute 'ILogObserver'
>
> I've imported log with
>
> from twisted.python import log
>
>
> Have no idea what is wrong...

Ok, there is no ILogObserver in log module.
I've Twisted 8.1.0 installed.

>
>
> Pet
>
>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>



From msoulier at digitaltorque.ca  Thu Jan 28 15:28:38 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Thu, 28 Jan 2010 17:28:38 -0500
Subject: [Twisted-Python] understanding deferreds
Message-ID: <20100128222837.GA5449@anton.digitaltorque.ca>

Hello,

I've been reading up on this

http://twistedmatrix.com/documents/current/core/howto/defer.html

I'm a bit confused as to the "visual explanation". It seems like if you have a
single callback and errback, that if the errback wants to swallow the error,
the callback will not be called at all, since deferred processing will look
for the second callback at that point by the diagram.

So, right now I'm calling my own callback from the errback if I want to
swallow the error. Is there a better way?

Thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 190 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100128/8f61cf29/attachment.sig>

From exarkun at twistedmatrix.com  Thu Jan 28 15:39:03 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 28 Jan 2010 22:39:03 -0000
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <20100128222837.GA5449@anton.digitaltorque.ca>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
Message-ID: <20100128223903.1898.823072942.divmod.xquotient.930@localhost.localdomain>

On 10:28 pm, msoulier at digitaltorque.ca wrote:
>Hello,
>
>I've been reading up on this
>
>http://twistedmatrix.com/documents/current/core/howto/defer.html
>
>I'm a bit confused as to the "visual explanation". It seems like if you 
>have a
>single callback and errback, that if the errback wants to swallow the 
>error,
>the callback will not be called at all, since deferred processing will 
>look
>for the second callback at that point by the diagram.

There are at least three ways you can have a single callback and 
errback:

   d.addCallback(cb)
   d.addErrback(eb)

or

   d.addErrback(eb)
   d.addCallback(cb)

or

   d.addCallbacks(cb, eb)

All three of these do something different.
>So, right now I'm calling my own callback from the errback if I want to
>swallow the error. Is there a better way?

It sounds like you want the middle option above.

Jean-Paul



From terry at jon.es  Thu Jan 28 15:46:08 2010
From: terry at jon.es (Terry Jones)
Date: Thu, 28 Jan 2010 17:46:08 -0500
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: Your message at 17:28:38 on Thursday, 28 January 2010
References: <20100128222837.GA5449@anton.digitaltorque.ca>
Message-ID: <19298.5040.965899.805489@jon.es>

>>>>> "Michael" == Michael P Soulier <msoulier at digitaltorque.ca> writes:

Michael> I'm a bit confused as to the "visual explanation". It seems like
Michael> if you have a single callback and errback, that if the errback
Michael> wants to swallow the error, the callback will not be called at
Michael> all, since deferred processing will look for the second callback
Michael> at that point by the diagram.

Michael> So, right now I'm calling my own callback from the errback if I
Michael> want to swallow the error. Is there a better way?

Yes. Add the errback to the deferred and then add the callback.

  d = somethingReturningADeferred()
  d.addErrback(cleanup)
  d.addCallback(dealWithResult)

If cleanup doesn't return the failure object it's passed or raise some an
exception, processing will pass to dealWithResult. Note that dealWithResult
will get as an argument whatever cleanup returns (that means None if cleanup
doesn't explicitly return something).

You're thinking about this in the right way. Understanding the difference
between the above and 

  d = somethingReturningADeferred()
  d.addCallbacks(dealWithResult, cleanup)

is important.

Terry



From mithrandi at mithrandi.net  Thu Jan 28 15:56:55 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 29 Jan 2010 00:56:55 +0200
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <20100128223903.1898.823072942.divmod.xquotient.930@localhost.localdomain>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<20100128223903.1898.823072942.divmod.xquotient.930@localhost.localdomain>
Message-ID: <f5eea9171001281456y2d54a967ja01fdf0b9519db3c@mail.gmail.com>

On Fri, Jan 29, 2010 at 12:39 AM,  <exarkun at twistedmatrix.com> wrote:
> There are at least three ways you can have a single callback and
> errback:
>
>   d.addCallback(cb)
>   d.addErrback(eb)
>
> or
>
>   d.addErrback(eb)
>   d.addCallback(cb)

Just to expand on exarkun's answer a little, it might help to
understand that addCallback and addErrback are simply implemented in
terms of addCallbacks. Roughly:

def passthru(arg):
    return arg

d.addCallback(cb) is equivalent to d.addCallbacks(cb, passthru)

d.addErrback(eb) is equivalent to d.addCallbacks(passthru, eb)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From msoulier at digitaltorque.ca  Thu Jan 28 18:57:13 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Thu, 28 Jan 2010 20:57:13 -0500
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <f5eea9171001281456y2d54a967ja01fdf0b9519db3c@mail.gmail.com>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<20100128223903.1898.823072942.divmod.xquotient.930@localhost.localdomain>
	<f5eea9171001281456y2d54a967ja01fdf0b9519db3c@mail.gmail.com>
Message-ID: <20100129015713.GB11163@kostya.digitaltorque.ca>

On 29/01/10 Tristan Seligmann said:

> Just to expand on exarkun's answer a little, it might help to
> understand that addCallback and addErrback are simply implemented in
> terms of addCallbacks. Roughly:
> 
> def passthru(arg):
>     return arg
> 
> d.addCallback(cb) is equivalent to d.addCallbacks(cb, passthru)
> 
> d.addErrback(eb) is equivalent to d.addCallbacks(passthru, eb)

I think I understand now. I don't think it's adequately explained here

http://twistedmatrix.com/documents/current/core/howto/defer.html

but the diagram makes more sense now.

Thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20100128/55e7bcbe/attachment.sig>

From twisted-web at udmvt.ru  Fri Jan 29 03:17:22 2010
From: twisted-web at udmvt.ru (twisted-web at udmvt.ru)
Date: Fri, 29 Jan 2010 14:17:22 +0400
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <19298.5040.965899.805489@jon.es>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
Message-ID: <20100129101722.GX23607@ruber.office.udmvt.ru>

On Thu, Jan 28, 2010 at 05:46:08PM -0500, Terry Jones wrote:
> >>>>> "Michael" == Michael P Soulier <msoulier at digitaltorque.ca> writes:
> 
> Michael> I'm a bit confused as to the "visual explanation". It seems like
> Michael> if you have a single callback and errback, that if the errback
> Michael> wants to swallow the error, the callback will not be called at
> Michael> all, since deferred processing will look for the second callback
> Michael> at that point by the diagram.
> 
> Michael> So, right now I'm calling my own callback from the errback if I
> Michael> want to swallow the error. Is there a better way?
> 
> Yes. Add the errback to the deferred and then add the callback.
> 
>   d = somethingReturningADeferred()
>   d.addErrback(cleanup)
>   d.addCallback(dealWithResult)
> 
> If cleanup doesn't return the failure object it's passed or raise some an
> exception, processing will pass to dealWithResult. Note that dealWithResult
> will get as an argument whatever cleanup returns (that means None if cleanup
> doesn't explicitly return something).
> 
> You're thinking about this in the right way. Understanding the difference
> between the above and 
> 
>   d = somethingReturningADeferred()
>   d.addCallbacks(dealWithResult, cleanup)
> 
> is important.

Is it true, that adding many callback functions as filters is elegant,
but impractical solution?
Since there is only a [linear] list of pairs (callback, errback), the last errbacks
have to be complex to distinguish the failures, that came from the previous callback
from failures, that traverse the errback chain from the beginning.

Should I only use errbacks as a means of catching errors only from who have produced the Deferred?
And never use them to catch errors, that came from my callbacks?

Nevertheless the Deferred mechanism always catch the exceptions in my callbacks,
I have to always catch them myself and never let them out uncontrolled (since I cannot
distinguish, say TypeError that came from the first callback from TypeError, that came
from the next callback, and they are not the same for me, since I try to do a cleanup)?
But then I have to translate all errors to my invented exceptions, so they will differ.

Or may I pause() a Deferred in a errback, after I have processed the error and want no
error propagation any further?
If I can pause(), what can I do if my code is not the final consumer of the Deferred's
result, but lives in the middle of the processing chain and have to pass the signal, that there
will be no further result, so the consumer will do appropriately?

Maybe we need graph of callbacks (or just tree)? 
Or, said in other words, groups of callbacks (to be able to exit the processing
of the current group on some failures)?

Or just tell me, that I have missed something, I'm still getting into the theme!

Thanks!

> 
> Terry
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Alexey S



From eric.mangold at nunatak.com.au  Fri Jan 29 08:19:42 2010
From: eric.mangold at nunatak.com.au (Eric Mangold)
Date: Fri, 29 Jan 2010 09:19:42 -0600
Subject: [Twisted-Python] exarkun changed [#3078 - Dynamic ZSH tab
	completion for any commands using t.p.usage]
In-Reply-To: <E1NarsS-00033s-CR@cube.twistedmatrix.com>
References: <E1NarsS-00033s-CR@cube.twistedmatrix.com>
Message-ID: <481d6b881001290719l6abdccdexbf4c0cf204a118b@mail.gmail.com>

top o' the mornin' to all

willfix. need a few days yet, but i'll correct the outstanding issues,
forward-merge my branch, and try to cross every T and dot every I and
maybe someone will just unmerge the whole thing for me in the
mean-time.

On Fri, Jan 29, 2010 at 8:31 AM,  <trac at twistedmatrix.com> wrote:
> Ticket [#3078 - Dynamic ZSH tab completion for any commands using t.p.usage] changed by exarkun <exarkun at twistedmatrix.com>:
>
> `twisted/python/zshcomp.py` no longer works in trunk.
>
> ---------
>
> ---------
> http://twistedmatrix.com/trac/ticket/3078
>



From andrew at bemusement.org  Sat Jan 30 00:16:01 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sat, 30 Jan 2010 18:16:01 +1100
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <20100129101722.GX23607@ruber.office.udmvt.ru>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
	<20100129101722.GX23607@ruber.office.udmvt.ru>
Message-ID: <20100130071601.GC2456@steerpike.home.puzzling.org>

twisted-web at udmvt.ru wrote:
[...]
> Is it true, that adding many callback functions as filters is elegant,
> but impractical solution?
> Since there is only a [linear] list of pairs (callback, errback), the last errbacks
> have to be complex to distinguish the failures, that came from the previous callback
> from failures, that traverse the errback chain from the beginning.

This is no different to regular Python code, which has a linear call stack which
can have exception handlers at any point on the stack.  The exact same tradeoffs
apply about which exceptions to raise and which to catch, and at what points.

-Andrew.




From exarkun at twistedmatrix.com  Sat Jan 30 22:05:35 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 31 Jan 2010 05:05:35 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1264914335.71.75690667@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100131/b9fcaafa/attachment-0001.html>

From exarkun at twistedmatrix.com  Sun Jan 31 15:26:14 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 31 Jan 2010 22:26:14 -0000
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
Message-ID: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>

Hi all,

If there are enough interested people, there will be a Twisted sprint at 
PyCon this year.  If you'll be at PyCon and are interested in sprinting 
on some Twisted topic, give a shout.  Also, let us know what specific 
topics you're interested in so we can let other people know what to 
expect in the general announcement.

Jean-Paul



From glyph at twistedmatrix.com  Sun Jan 31 17:05:00 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 31 Jan 2010 19:05:00 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <D685EBDD-3589-43CF-A838-CA02408D5F42@twistedmatrix.com>

On Jan 31, 2010, at 5:26 PM, exarkun at twistedmatrix.com wrote:

> If there are enough interested people, there will be a Twisted sprint at 
> PyCon this year.  If you'll be at PyCon and are interested in sprinting 
> on some Twisted topic, give a shout.  Also, let us know what specific 
> topics you're interested in so we can let other people know what to 
> expect in the general announcement.

I will be there for one day of the sprints.  I'm interested in web2, deferred cancellation, endpoints, and getting a new release out.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100131/822125c1/attachment-0001.html>

From terry at jon.es  Sun Jan 31 17:19:19 2010
From: terry at jon.es (Terry Jones)
Date: Sun, 31 Jan 2010 19:19:19 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: Your message at 19:05:00 on Sunday, 31 January 2010
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<D685EBDD-3589-43CF-A838-CA02408D5F42@twistedmatrix.com>
Message-ID: <19302.7687.439727.472561@jon.es>

>>>>> "Glyph" == Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
Glyph> I will be there for one day of the sprints.  I'm interested in web2,
Glyph> deferred cancellation, endpoints, and getting a new release out.

I could probably stay for most/all of the 22nd. Doing some work on deferred
cancellation would be good.

Terry



