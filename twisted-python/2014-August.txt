From glyph at twistedmatrix.com  Fri Aug  1 04:17:12 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Aug 2014 03:17:12 -0700
Subject: [Twisted-Python] TerminalSession instance has no attribute
	'windowChanged'
In-Reply-To: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>
References: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>
Message-ID: <6A824434-3F36-41D0-AADD-AB20BADB5E29@twistedmatrix.com>

On Jul 31, 2014, at 3:03 AM, Maxim Lacrima <lacrima.maxim at gmail.com> wrote:

> Hello!
> 
> When size of terminal window of ssh client is changed, then twisted ssh server throws an exception:
> 
> exceptions.AttributeError: TerminalSession instance has no attribute 'windowChanged'
> 
> `manhole_ssh.TerminalSession` doesn't implement this method, but according to ISession interface it should.
> 
> Is this a bug?

Yes, this is definitely a bug.  The interface says it should be there, it's called by a user of the interface, and it is not present.  Pretty clearly wrong.  Can you file a ticket?

> I use insults to create some curses-like ui and I need widgets to be redrawn when the size of window is changed.


This is definitely possible.  Just to get yourself unblocked right now, you can probably give your TerminalRealm a different sessionFactory programmatically, one that subclasses TerminalSession and hacks in the requisite method.

But please help us fix this for real going forward too ;).

-glyph



From exarkun at twistedmatrix.com  Fri Aug  1 06:06:34 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 01 Aug 2014 12:06:34 -0000
Subject: [Twisted-Python] TerminalSession instance has no attribute
 'windowChanged'
In-Reply-To: <6A824434-3F36-41D0-AADD-AB20BADB5E29@twistedmatrix.com>
References: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>
 <6A824434-3F36-41D0-AADD-AB20BADB5E29@twistedmatrix.com>
Message-ID: <20140801120634.20413.1711637394.divmod.xquotient.751@top>

On 10:17 am, glyph at twistedmatrix.com wrote:
>On Jul 31, 2014, at 3:03 AM, Maxim Lacrima <lacrima.maxim at gmail.com> 
>wrote:
>>Hello!
>>
>>When size of terminal window of ssh client is changed, then twisted 
>>ssh server throws an exception:
>>
>>exceptions.AttributeError: TerminalSession instance has no attribute 
>>'windowChanged'
>>
>>`manhole_ssh.TerminalSession` doesn't implement this method, but 
>>according to ISession interface it should.
>>
>>Is this a bug?
>
>Yes, this is definitely a bug.  The interface says it should be there, 
>it's called by a user of the interface, and it is not present.  Pretty 
>clearly wrong.  Can you file a ticket?

Good news.  No need to file a ticket:

    https://twistedmatrix.com/trac/ticket/3303

Just need to resolve it.

Jean-Paul


From glyph at twistedmatrix.com  Fri Aug  1 12:04:39 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 1 Aug 2014 11:04:39 -0700
Subject: [Twisted-Python] TerminalSession instance has no attribute
	'windowChanged'
In-Reply-To: <20140801120634.20413.1711637394.divmod.xquotient.751@top>
References: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>
 <6A824434-3F36-41D0-AADD-AB20BADB5E29@twistedmatrix.com>
 <20140801120634.20413.1711637394.divmod.xquotient.751@top>
Message-ID: <E86D134E-3178-4B60-B33F-28CF3C68475C@twistedmatrix.com>


On Aug 1, 2014, at 5:06 AM, exarkun at twistedmatrix.com wrote:

> On 10:17 am, glyph at twistedmatrix.com wrote:
>> On Jul 31, 2014, at 3:03 AM, Maxim Lacrima <lacrima.maxim at gmail.com> wrote:
>>> Hello!
>>> 
>>> When size of terminal window of ssh client is changed, then twisted ssh server throws an exception:
>>> 
>>> exceptions.AttributeError: TerminalSession instance has no attribute 'windowChanged'
>>> 
>>> `manhole_ssh.TerminalSession` doesn't implement this method, but according to ISession interface it should.
>>> 
>>> Is this a bug?
>> 
>> Yes, this is definitely a bug.  The interface says it should be there, it's called by a user of the interface, and it is not present.  Pretty clearly wrong.  Can you file a ticket?
> 
> Good news.  No need to file a ticket:
> 
>   https://twistedmatrix.com/trac/ticket/3303
> 
> Just need to resolve it.
> 
> Jean-Paul

Thanks for digging this one up.  Always nice to avoid a dup :).

-glyph




From trac at twistedmatrix.com  Sun Aug  3 00:05:17 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Aug 2014 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1407045917.73.2796446538767703902@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140803/d1dc24dc/attachment.html>

From glyph at twistedmatrix.com  Mon Aug  4 15:34:13 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Aug 2014 14:34:13 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
Message-ID: <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>


On Jul 27, 2014, at 7:26 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> I've been trying to address ticket 7274
> 
> https://twistedmatrix.com/trac/ticket/7274
> 
> To do this, I am trying to understand the PB protocol. While I found a spec for banana in twisted-daniel/docs/core/specifications/banana.rst, I have not found anything similar for pb. I've been piecing it together by writing little test scripts, but it is slow going. In particular, it is very difficult to understand the meaning of verbs like "cook" and "preserve" and nouns like "persistent store" without some global picture of what's going on.
> 
> 1. Is there some kind of narrative documentation on how pb works under the hood?

I don't believe there is.

> 2. Is there a specification for the pb dialect of banana?

Beyond the code, no.

> 3. Is there anyone else out there interested enough in pb to want to work with me to figure things out and produce documentation if there isn't any currently?

I would be happy to answer questions, but obviously I'm not super responsive :).  Let me know what you need.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140804/57ac1865/attachment.html>

From sank.daniel at gmail.com  Mon Aug  4 22:47:41 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 4 Aug 2014 21:47:41 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
Message-ID: <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>

glyph,

>> 2. Is there a specification for the pb dialect of banana?
>>
> Beyond the code, no.

Ok.

> I would be happy to answer questions, but obviously I'm not super
responsive :).
> Let me know what you need.

For two personal projects, I would like to have a reasonable remote objects
library in python. I need something which can announce state changes to
clients, and receive state change requests from clients. My solution:

1. Make server side class which can spawn Cacheables when it wants to tell
clients of its existence.
2. Give RemoteCaches to clients and use observe_* methods as appropriate.
3. Stuff a Viewable into the RemoteCaches so that clients can request state
changes.

Question #1: Is this a reasonable use of pb?

This all worked great until I ran into a bug. In trying to fix the bug, I
found that

1. pb code is really hard to understand
2. exarkun's thinks pb is bad and that I should implement what I need in
AMP.
3. exarkun thinks banana and jelly are reasonable.

Question #2: Would you recommend implementing a simplified replacement for
pb on top of banana/jelly, or starting over from AMP? I favor the
banana/jelly route because the protocol seems intrinsically flexible, but I
read your blog explaining why protocols like banana are bad, so I'm
confused about what I "should" do.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140804/cd020ed4/attachment.html>

From sank.daniel at gmail.com  Mon Aug  4 23:07:16 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 4 Aug 2014 22:07:16 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
Message-ID: <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>

glyph

> I would be happy to answer questions, but obviously I'm not super
responsive :).
> Let me know what you need.

I am trying to understand jelly's serialization strategy:

1. In t.s.jelly._Jellier, what is the meaning of persistentStore?
2. In t.s.jelly._Jellier, what is the meaning of cooked? The comment here
doesn't make sense to me yet.
3. In t.s.jelly._Jellier, what is the meaning of cooker?

A short, narrative explanation of what _Jellier does would be very useful,
and if you provide it I will submit a patch to the documentation.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140804/127187da/attachment.html>

From glyph at twistedmatrix.com  Tue Aug  5 12:55:59 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Aug 2014 11:55:59 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
Message-ID: <6FDA6624-A4D8-4614-B981-5EC15EFD26E3@twistedmatrix.com>


On Aug 4, 2014, at 9:47 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> >> 2. Is there a specification for the pb dialect of banana?
> >>
> > Beyond the code, no.
> 
> Ok.
> 
> > I would be happy to answer questions, but obviously I'm not super responsive :).
> > Let me know what you need.
> 
> For two personal projects, I would like to have a reasonable remote objects library in python. I need something which can announce state changes to clients, and receive state change requests from clients. My solution:
> 
> 1. Make server side class which can spawn Cacheables when it wants to tell clients of its existence.
> 2. Give RemoteCaches to clients and use observe_* methods as appropriate.
> 3. Stuff a Viewable into the RemoteCaches so that clients can request state changes.
> 
> Question #1: Is this a reasonable use of pb?

Yes.

> This all worked great until I ran into a bug. In trying to fix the bug, I found that
> 
> 1. pb code is really hard to understand

Sorry about that.

> 2. exarkun's thinks pb is bad and that I should implement what I need in AMP.

I really wish we would stop calling things "bad" and "good".  This isn't a helpful classification.  PB is adequate for a particular set of requirements.  Those requirements are somewhat unusual, and AMP is better for a lot of use-cases.

It sounds to me like you are a lot more interested in 

> 3. exarkun thinks banana and jelly are reasonable.

Again, what does "reasonable" mean in this context?

Let me explain my own opinion about this.

Banana is a perfectly serviceable low-level marshaling format.  It's pretty efficient when compared to something like JSON, and has compression mechanisms which can make it even more efficient (the "dialect" support you referred to).  The only thing about it that isn't very general is that its implementation (although not the protocol specification) hard-codes the PB abbreviated-string dialect.

Jelly is higher level, but more language-specific. Its specification implicitly encodes numerous Python implementation details, like the distinction between "tuple" and "list".  It also couples very tightly to your program's structure.  This can be a real benefit to getting a protocol up and running quickly, but it still allows you to create protocols where you don't really know what the wire format is, where you develop hidden dependencies.  In more complex protocols (where the "ease of getting up and running quickly" thing really starts to shine) this attribute of Jelly can cause real difficulty in any kind of cross-system communication: communicating with a peer from a different language, or even in Python without access to all the protocol class definitions from the original system, is hard because it requires reverse-engineering.  This is where it becomes "bad".  Still, it isn't as big of a disaster security- and maintenance-wise as Pickle.  The information you need is recorded in the code, it's just spread out, you don't need to work backwards from protocol dumps.  If I were going to spend some time maintaining PB, this is where I'd focus: if the schemas were a bit more explicit, could be collected into one place more easily, and were all validated in advance (before passing deserialized objects to the application code, or serializing them across the wire), then these problems could be addressed without changing the API too much.

PB basically just inherits all of the benefits and caveats of Jelly.  It's a trivial serialization of remote references to objects.

> Question #2: Would you recommend implementing a simplified replacement for pb on top of banana/jelly, or starting over from AMP? I favor the banana/jelly route because the protocol seems intrinsically flexible, but I read your blog explaining why protocols like banana are bad, so I'm confused about what I "should" do.

First of all, don't take my development advice as gospel.  When I write an article and publish it, I'm just trying to make people aware of issues they may not have considered; make your own decisions about how to write your own code.

(Unless your decision is to write it yourself in PHP, of course, in which case you are a danger to yourself and others and should be remanded to compulsory treatment.)

It seems like PB fits your style, and the problems with it are all tractable and fixable.  I am sad that you're not getting the development support you need to maintain it (most of all I'm sad you're not getting it from me!) but let's see if we can fix that.  I'll start by replying to your other email.

One thing that might speed things along is if you can help out with some code reviews.  We've got a _really_ long queue right now and that's making it hard for me to spend any focused effort in one particular area.  I'm happy to trade 2-for-1 - if you do two code reviews, I will regard it as an immediate obligation for me to review a ticket you direct me to ;).

It might also help to write more small, simple patches for PB.  Especially adding docstrings to make the nature of your other, more complex changes easier for reviewers to understand.  These would also be easier to land, and a couple of decades in open source has taught me that nothing motivates development activity like successful development activity ;).

Good luck,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140805/c5b9de65/attachment.html>

From glyph at twistedmatrix.com  Tue Aug  5 13:41:44 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Aug 2014 12:41:44 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
Message-ID: <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>


On Aug 4, 2014, at 10:07 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph
> 
> > I would be happy to answer questions, but obviously I'm not super responsive :).
> > Let me know what you need.
> 
> I am trying to understand jelly's serialization strategy:
> 
> 1. In t.s.jelly._Jellier, what is the meaning of persistentStore?

From the perspective of PB, you can ignore this completely.  It's effectively an unused feature.

There are two entry-point call-sites for jelly in Pb.  Broker.unserialize and Broker.serialize.  Both explicitly pass "None" for the "persistent" argument, "persistentStore" and "persistentLoad" respectively.

Reaching back into my dim and distant memory of the ancient past, I believe that the purpose of these callables was to allow you to use Jelly (and perhaps PB) to refer to objects in some kind of pluggable long-term storage.  The reason they're called "persistent" was that "ephemeral" storage was local to the connection, and therefore short-lived enough that we could trust that an in-memory Python dictionary would be both large enough and long-lived enough to serve it.

But if you have your objects in a database, you might want a different database backend with an application-provided callable for loading objects by ID.

Again, this was never really used, so you can probably ignore it.  (I think there might have been a 4X massively multiplayer video game which used it in 2002 or so, but nothing since then that I'm aware of, especially since PB doesn't even have a way to pass in your own without subclassing and overriding 'serialize'.)

> 2. In t.s.jelly._Jellier, what is the meaning of cooked? The comment here doesn't make sense to me yet.

I just read the comment in _cook, and I hate my younger self right now.  Seriously.  Screw that guy.

When you make a jelly, you have to cook the fruit first.  So part of the metaphor here is that you are "cooking" the objects as you're serialize them.

The "cooked" attribute maps object IDs (integers representing pointers, at least in CPython) to "dereference" jelly expressions.  It is said to be "cooked" at that point because you no longer need to put in the energy (I guess heat, in this metaphor?) to serialize the internal state.  A "dereference" expression is one that points at an object within the same Jelly, so this is not like something pointing at a remote reference.

It uses object IDs for keys and not the objects themselves because these objects are (since they can participate in circular references) implicitly mutable, and mutable objects often don't have a working __hash__ implementation, so we can't rely on that.

This happens in a weird order because an object may circularly refer to itself, so we prepare it and put it in the "preserved" map before actually beginning the serialization process of its initial state.

We also don't want to pollute the jelly output with reference IDs for every single object that _might_ be referenced more than once, we only want to add the ['reference'] expression if we actually refer to it twice.

If you look at this example:

>>> from twisted.spread.jelly import jelly
>>> circular = [1, 2]
>>> circular.append(circular)
>>> jelly(circular)
['reference', 1, ['list', 1, 2, ['dereference', 1]]]
>>> acyclic = [1, 2]
>>> jelly(acyclic)
['list', 1, 2]

You can see that the circular list allocates a reference ID '1' for the circular list.  The output list there would have been the thing that went into the _Jellier's "cooked" list, keyed by the 'id' for the serialized list, and then 'reference 1' would have been inserted into the beginning and its body appended.

So the steps are:

Here's a mutable object.  Let me remember that I've seen it, just in case I see it again.
Now I'm going to recursively serialize it.
Oh, here it is again, I know it's the same object because it has the same ID.  Instead of serializing it, I'll change the ['list'] into a ['reference', 1] and stick in a ['dereference', 1] here.

If we never get to step 3, we never see the ['reference'] at all, and it's as if this functionality didn't exist.

> 3. In t.s.jelly._Jellier, what is the meaning of cooker?

The "cooker" attribute is a hack related to the use of "id" for the unique IDs.  If we used the object itself as the key (which we shouldn't do, for reasons I mentioned above), then we could just rely on it sticking around until the end of the 'jelly' call.  But instead, we use its 'id', which is its pointer address, so we need to make sure that it lives on until the end of the _Jellier's lifetime, so we just stick it into the "cooker" map as the value.  You'll notice that there's no store of the object itself anywhere else: in "cooked" the key is the ID, and the value is the serialized output value that Jelly is going to write out.

If we didn't make sure the object stuck around, a different object might get the same ID, and that would produce spurious back-references (like, we might get a ['dereference'] where something harmless like a string should go).

> A short, narrative explanation of what _Jellier does would be very useful, and if you provide it I will submit a patch to the documentation.

A _Jellier jellies objects of course, isn't it obvious ;-).

Hopefully you can make sense out of the explanations above and your own existing knowledge.  Are there any other phases of the process which are confusing?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140805/f6e94323/attachment-0001.html>

From lacrima.maxim at gmail.com  Wed Aug  6 12:14:20 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Wed, 6 Aug 2014 21:14:20 +0300
Subject: [Twisted-Python] Embedding manhole interpreter into insults widget.
Message-ID: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>

Hello,

I have been trying to create a widget that encloses manhole interpreter.
Here is somewhat hacky implementation that I came up with at this moment:

  1 from twisted.conch.insults import insults
  2 from twisted.conch.insults import window
  3 from twisted.conch.insults import helper
  4 from twisted.conch import manhole
  5
  6
  7 class TerminalBufferLastWrite(helper.TerminalBuffer):
  8
  9     lastWrite = ''
 10
 11     def write(self, bytes):
 12         self.lastWrite = bytes
 13         helper.TerminalBuffer.write(self, bytes)
 14
 15 for name, const in zip(insults._KEY_NAMES, insults.FUNCTION_KEYS):
 16     setattr(TerminalBufferLastWrite, name, const)
 17
 18
 19 class ManholeWidget(window.Widget):
 20
 21     def __init__(self, namespace, width, height):
 22         self._buf = TerminalBufferLastWrite()
 23         self._buf.width = width
 24         self._buf.height = height
 25         self._buf.connectionMade()
 26
 27         self.manholeProto = manhole.Manhole(namespace)
 28         self.manholeProto.makeConnection(self._buf)
 29
 30     def keystrokeReceived(self, keyID, modifier):
 31         super(ManholeWidget, self).keystrokeReceived(keyID, modifier)
 32         self.manholeProto.keystrokeReceived(keyID, modifier)
 33         self.repaint()
 34
 35     def render(self, width, height, terminal):
 36         for y, line in enumerate(self._buf.lines[0:height]):
 37             terminal.cursorPosition(0, y)
 38             n = 0
 39             for n, (ch, attr) in enumerate(line[0:width]):
 40                 if ch is self._buf.void:
 41                     ch = ' '
 42                 else:
 43                     cursorRow = y
 44                 terminal.write(ch)
 45             if n < width:
 46                 terminal.write(' ' * (width - n - 1))
 47             terminal.cursorPosition(self.manholeProto.lineBufferIndex +
4,
 48                                     cursorRow)


Basically, I substitute real terminal (`insults.ServerProtocol`) with
slightly extended `TerminalBuffer`, which is used by manhole interpreter to
write its output. `ManholeWidget.render` method is almost entirely reuses
code from `window.Viewport`.

This widget appears to work.

However, here is the problem: if terminal size is large enough (say,
200x50), then there are some io lags (similar to ssh session over slow
internet connection).

The reason is that on each keystroke, the whole terminal buffer is redrawn.
I wonder how I can optimize this. Currently I don't see a solution. Also I
am wondering if I took right approach to embed manhole interpreter into a
widget in the first place, but I don't see a solution, except using
`TerminalBuffer` to capture manhole output.

Thanks.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140806/036ea576/attachment.html>

From glyph at twistedmatrix.com  Wed Aug  6 13:48:42 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 6 Aug 2014 12:48:42 -0700
Subject: [Twisted-Python] Embedding manhole interpreter into insults
	widget.
In-Reply-To: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
References: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
Message-ID: <C1FC8795-6D26-4900-9D71-5E5104C9822D@twistedmatrix.com>


On Aug 6, 2014, at 11:14 AM, Maxim Lacrima <lacrima.maxim at gmail.com> wrote:

> The reason is that on each keystroke, the whole terminal buffer is redrawn. I wonder how I can optimize this. Currently I don't see a solution. Also I am wondering if I took right approach to embed manhole interpreter into a widget in the first place, but I don't see a solution, except using `TerminalBuffer` to capture manhole output.

Optimizing this will almost certainly involve patching Twisted.  Which you should definitely do :).

The reason the entire screen is redrawn is that a general implementation of a widget, i.e. one that can be displayed anywhere on the terminal, you do just have to redraw the entire widget when certain things happen, like when the screen scrolls.  You can see this in other software by observing the fairly significant performance difference between a vertical split and a horizontal split in tmux.  Nothing to do with Twisted there, just a general limitation of terminals.

The optimizations you could implement are one where inputting individual characters doesn't cause a full screen redraw, and avoiding a full screen redraw when scrolling if the edges of the widget touch the edges of the full terminal (setting up a scroll area for that case).

I think that using a widget for this case does indeed make sense (just as I'm super glad that tmux has vertical splits, even if they're kinda slow), and it would be great to get these optimizations into Twisted.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140806/6e9447a0/attachment.html>

From kebin70 at gmail.com  Wed Aug  6 15:12:32 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 6 Aug 2014 14:12:32 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <6FDA6624-A4D8-4614-B981-5EC15EFD26E3@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <6FDA6624-A4D8-4614-B981-5EC15EFD26E3@twistedmatrix.com>
Message-ID: <CAA-sNEZB9NuEn5_LfoSdB7UqgPfOWzNfDXdF8RpO2G+Y3-vjgw@mail.gmail.com>

This discussion seems relevant to a design pattern "Yearbook Lifecycle"
that I'm using for athleets.com and junkeet.com.

Design Goal:

1) Maintain yearbooks across state, allowing students to delegate access
control to classmates as a series of transformations (recursive web
renders) - here sign my yearbook...here read what so-and-so wrote..can I
take your yearbook to PE, we might skip class.

2) Persist inside a context indexer that answers yearbook queries, with
generic access to the t0 and viewable access to t1+ transforms with request
controls for represented as e0, e1 being another recursive web template
kept within the master at t-1

So a complex use case would be a yearbook message like "OMG - did you read
{s1.p3.t4}? cause {e4.s3} said f_td(after|before) {e2.s6} was kissing
behind {p3.t0.a4}.  See you this summer good luck at
{owner.ext['college']}! BFF, {s3}"

Fake Model

YearbookPage(Element):
SignedYearbookPage(YearbookPage):

Yearbook(pb.Copyable)
-pages
-accessControlLog
StudentYearbook(pb.Viewable)
--transformation

YearbookServiceTransformer(??)

Publish(pb.Root)
    remote_issue_yearbook(studentid=None): // none can read but not signed

Athleets.com is ready(ing) for yearbook-ish events, ie when a players get
traded or hurt.  Other events act across yearbook motif regenerating the
t0 when athlete data changes which republishes all copies non t0 that exist.

The Sender Receiver Model from the example is difficult to follow cause I
tend to think of Originator only.  The originator being a service that
waits for clients in need of a working copy.  A sender, doesn't exist...it
would be more of a challenger, that if recognized as more authoritative,
replaces the rb.Root service.  Outside of the copyable I'm trying to
upstream via remotes pieces within the copyable that need updating.  I'm
delving into viewable to bring caller identity data to the web templating
process not necessary restrict access.  But also to build a system that
maintains audit history within the yearbook model. Getting to areas of
non-working code, so let me report back any success.

Cheers
Kevin



On Tue, Aug 5, 2014 at 11:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Aug 4, 2014, at 9:47 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
>
> glyph,
>
> >> 2. Is there a specification for the pb dialect of banana?
> >>
> > Beyond the code, no.
>
> Ok.
>
> > I would be happy to answer questions, but obviously I'm not super
> responsive :).
> > Let me know what you need.
>
> For two personal projects, I would like to have a reasonable remote
> objects library in python. I need something which can announce state
> changes to clients, and receive state change requests from clients. My
> solution:
>
> 1. Make server side class which can spawn Cacheables when it wants to tell
> clients of its existence.
> 2. Give RemoteCaches to clients and use observe_* methods as appropriate.
> 3. Stuff a Viewable into the RemoteCaches so that clients can request
> state changes.
>
> Question #1: Is this a reasonable use of pb?
>
>
> Yes.
>
> This all worked great until I ran into a bug. In trying to fix the bug, I
> found that
>
> 1. pb code is really hard to understand
>
>
> Sorry about that.
>
> 2. exarkun's thinks pb is bad and that I should implement what I need in
> AMP.
>
>
> I really wish we would stop calling things "bad" and "good".  This isn't a
> helpful classification.  PB is adequate for a particular set of
> requirements.  Those requirements are somewhat unusual, and AMP is better
> for a lot of use-cases.
>
> It sounds to me like you are a lot more interested in
>
> 3. exarkun thinks banana and jelly are reasonable.
>
>
> Again, what does "reasonable" mean in this context?
>
> Let me explain my own opinion about this.
>
> Banana is a perfectly serviceable low-level marshaling format.  It's
> pretty efficient when compared to something like JSON, and has compression
> mechanisms which can make it even more efficient (the "dialect" support you
> referred to).  The only thing about it that isn't very general is that its
> implementation (although not the protocol specification) hard-codes the PB
> abbreviated-string dialect.
>
> Jelly is higher level, but more language-specific. Its specification
> implicitly encodes numerous Python implementation details, like the
> distinction between "tuple" and "list".  It also couples very tightly to
> your program's structure.  This can be a real benefit to getting a protocol
> up and running quickly, but it still allows you to create protocols where
> you don't really know what the wire format is, where you develop hidden
> dependencies.  In more complex protocols (where the "ease of getting up and
> running quickly" thing really starts to shine) this attribute of Jelly can
> cause real difficulty in any kind of cross-system communication:
> communicating with a peer from a different language, or even in Python
> without access to all the protocol class definitions from the original
> system, is hard because it requires reverse-engineering.  This is where it
> becomes "bad".  Still, it isn't as big of a disaster security- and
> maintenance-wise as Pickle.  The information you need *is* recorded in
> the code, it's just spread out, you don't need to work backwards from
> protocol dumps.  If I were going to spend some time maintaining PB, this is
> where I'd focus: if the schemas were a bit more explicit, could be
> collected into one place more easily, and were all validated in advance
> (before passing deserialized objects to the application code, or
> serializing them across the wire), then these problems could be addressed
> without changing the API too much.
>
> PB basically just inherits all of the benefits and caveats of Jelly.  It's
> a trivial serialization of remote references to objects.
>
> Question #2: Would you recommend implementing a simplified replacement for
> pb on top of banana/jelly, or starting over from AMP? I favor the
> banana/jelly route because the protocol seems intrinsically flexible, but I
> read your blog explaining why protocols like banana are bad, so I'm
> confused about what I "should" do.
>
>
> First of all, don't take my development advice as gospel.  When I write an
> article and publish it, I'm just trying to make people aware of issues they
> may not have considered; make your own decisions about how to write your
> own code.
>
> (Unless your decision is to write it yourself in PHP, of course, in which
> case you are a danger to yourself and others and should be remanded to
> compulsory treatment.)
>
> It seems like PB fits your style, and the problems with it are all
> tractable and fixable.  I am sad that you're not getting the development
> support you need to maintain it (most of all I'm sad you're not getting it
> from me!) but let's see if we can fix that.  I'll start by replying to your
> other email.
>
> One thing that might speed things along is if you can help out with some
> code reviews.  We've got a _really_ long queue right now and that's making
> it hard for me to spend any focused effort in one particular area.  I'm
> happy to trade 2-for-1 - if you do two code reviews, I will regard it as an
> immediate obligation for me to review a ticket you direct me to ;).
>
> It might also help to write more small, simple patches for PB.  Especially
> adding docstrings to make the nature of your other, more complex changes
> easier for reviewers to understand.  These would also be easier to land,
> and a couple of decades in open source has taught me that nothing motivates
> development activity like successful development activity ;).
>
> Good luck,
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140806/86e2b500/attachment-0001.html>

From lacrima.maxim at gmail.com  Thu Aug  7 03:00:20 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Thu, 7 Aug 2014 12:00:20 +0300
Subject: [Twisted-Python] Embedding manhole interpreter into insults
	widget.
In-Reply-To: <C1FC8795-6D26-4900-9D71-5E5104C9822D@twistedmatrix.com>
References: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
 <C1FC8795-6D26-4900-9D71-5E5104C9822D@twistedmatrix.com>
Message-ID: <CAKef57Pyk30bOGZAfp8QpPuHJP37j3KAwj_ycKzv11STWfN2wQ@mail.gmail.com>

On 6 August 2014 22:48, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>
> Optimizing this will almost certainly involve patching Twisted.  Which you
> should definitely do :).
>
> The reason the entire screen is redrawn is that a *general* implementation
> of a widget, i.e. one that can be displayed anywhere on the terminal, you
> do just have to redraw the entire widget when certain things happen, like
> when the screen scrolls.  You can see this in other software by observing
> the fairly significant performance difference between a vertical split and
> a horizontal split in tmux.  Nothing to do with Twisted there, just a
> general limitation of terminals.
>

> The optimizations you could implement are one where inputting individual
> characters doesn't cause a full screen redraw, and avoiding a full screen
> redraw when scrolling if the edges of the widget touch the edges of the
> full terminal (setting up a scroll area for that case).
>

When manhole is used directly, then it is very responsive, and the
performance doesn't degrade with increase of screen size. It holds only
what user entered and writes the input line and command output directly to
its transport, without bothering itself with processing of the whole
screen. When I embed manhole into the widget like above, then the
performance suffers. I think this is due to `TerminalBuffer` having to hold
whole widget area (columns * rows) in memory, even if only a small portion
of it is actually occupied by user input and command output. Rendering the
whole buffer on each keystroke is slow. After experimenting a little bit, I
think optimizations that you described mostly apply to
`ManholeWidget.render` method, which shouldn't traverse the whole buffer on
each keystroke. Currently I don't see how this involves patching widget
implementation in Twisted. What is more important to me is that
`TerminalBuffer` implementation is slightly incomplete. I think it misses
color support, because I couldn't make it work with `ColoredManhole`.


>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/19bfd0ef/attachment.html>

From exarkun at twistedmatrix.com  Thu Aug  7 05:53:49 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 07 Aug 2014 11:53:49 -0000
Subject: [Twisted-Python] Embedding manhole interpreter into insults
 widget.
In-Reply-To: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
References: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
Message-ID: <20140807115349.20413.1135784104.divmod.xquotient.928@top>

On 6 Aug, 06:14 pm, lacrima.maxim at gmail.com wrote:
>Hello,
>
>I have been trying to create a widget that encloses manhole 
>interpreter.
>Here is somewhat hacky implementation that I came up with at this 
>moment:

Widgets and the manhole interpreter are implemented using two pretty 
distinct approaches.

As you've figured out, these approaches can be integrated (at least in 
one direction) using a terminal emulator - 
`twisted.conch.insults.helper.TerminalBuffer`.

However, `TerminalBuffer` is an extremely low quality terminal emulator. 
Among its many flaws is that it uses a number of incredibly inefficient 
implementations for common terminal operations (many of its other flaws 
are along the lines of "it has a bug in the implementation of X").

If I were going to create a manhole widget then I would do it "natively" 
- not by bridging the existing manhole protocol to the widget system 
with TerminalBuffer but by writing a new widget that does manhole stuff 
all by itself.

I suggest that you might want to pursue this approach instead of trying 
to optimize and fix bugs in TerminalBuffer.

Ultimately it would be nice if a widget-based manhole were *the* manhole 
and the current implementation went away.

However, that said, as far as I know, no vt-style terminals support 
efficient redrawing for the "vertically scroll one portion of the 
terminal separated from another portion by a vertical divider".

You will be able to avoid the redundant work of re-rendering the Python 
buffer representing the terminal state but you'll still have to re- 
transmit the bytes representing the entire terminal display to the 
terminal on each redraw - unless you avoid vertical dividers.

Jean-Paul


From sank.daniel at gmail.com  Thu Aug  7 11:42:05 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 7 Aug 2014 10:42:05 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
Message-ID: <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>

glyph,

> I really wish we would stop calling things "bad" and "good".

My wording of exarkun's wording. He gave a much more detailed description
of what he think's is "crazy" about pb.

> make your own decisions about how to write your own code.

Indeed, but gathering information from wiser folks is always a good idea,
and usually best done _often_ during development :)

> I'm happy to trade 2-for-1 - if you do two code reviews, I will regard it
as an immediate obligation for
> me to review a ticket you direct me to ;).

Deal. However, rather than direct your attention to tickets, at this stage
I would rather trade reviews for discussion. I'll do two reviews and then
post a few questions to this mailing list thread. Once I start actually
writing patches/new code we can trade reviews for attention to tickets. Ok?

> These would also be easier to land, and a couple of decades in open
source has taught me that nothing
> motivates development activity like successful development activity ;).

Indeed. There are one or two architectural issues I want to understand
before moving on to real coding. I will try to get through that asap by
reviewing tickets and trading for discussion of those architectural issues.

> Hopefully you can make sense out of the explanations above and your own
existing knowledge.
> Are there any other phases of the process which are confusing?

This all makes sense now. I hadn't understood the point of the cooker, but
now that you've explained it, I understand what's going on. I will
transform your mailing list explanation to documentation shortly.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/f4263d2c/attachment.html>

From kebin70 at gmail.com  Fri Aug  8 00:29:04 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Thu, 7 Aug 2014 23:29:04 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
Message-ID: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>

goal: Give knowitall.py awareness of wordsmith.py addition.

to run
./library.sh # opens 7999 for remote_dictionary and remote_define methods
then both:
python knowitall.py
python wordsmith.py

library.sh due to main/jelly issues
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/dc055132/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: example.py
Type: text/x-python
Size: 2329 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/dc055132/attachment.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: knowitall.py
Type: text/x-python
Size: 814 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/dc055132/attachment-0001.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: library.sh
Type: application/x-sh
Size: 292 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/dc055132/attachment.sh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: wordsmith.py
Type: text/x-python
Size: 836 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/dc055132/attachment-0002.py>

From kebin70 at gmail.com  Fri Aug  8 00:42:23 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Thu, 7 Aug 2014 23:42:23 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
Message-ID: <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>

wordsmith argument order issues re-take.

Cheers,
Kevin


On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> goal: Give knowitall.py awareness of wordsmith.py addition.
>
> to run
> ./library.sh # opens 7999 for remote_dictionary and remote_define methods
> then both:
> python knowitall.py
> python wordsmith.py
>
> library.sh due to main/jelly issues
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/9060029c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: example.py
Type: text/x-python
Size: 2329 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/9060029c/attachment.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: knowitall.py
Type: text/x-python
Size: 814 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/9060029c/attachment-0001.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: library.sh
Type: application/x-sh
Size: 292 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/9060029c/attachment.sh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: wordsmith.py
Type: text/x-python
Size: 912 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140807/9060029c/attachment-0002.py>

From lacrima.maxim at gmail.com  Fri Aug  8 00:47:56 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Fri, 8 Aug 2014 09:47:56 +0300
Subject: [Twisted-Python] Embedding manhole interpreter into insults
	widget.
In-Reply-To: <20140807115349.20413.1135784104.divmod.xquotient.928@top>
References: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
 <20140807115349.20413.1135784104.divmod.xquotient.928@top>
Message-ID: <CAKef57P5BDvK4q4B8N7zjnp2RQhAYrYYpZGrFRPhE3+S1sEHyQ@mail.gmail.com>

Hi,

Thanks for your explanation. Now I understand a lot better how things work.
I will try to implement "native" manhole widget. I think this will be a
good exercise for me to learn how terminals and `twisted.conch` work.

Thanks.


On 7 August 2014 14:53, <exarkun at twistedmatrix.com> wrote:

> On 6 Aug, 06:14 pm, lacrima.maxim at gmail.com wrote:
>
>> Hello,
>>
>> I have been trying to create a widget that encloses manhole interpreter.
>> Here is somewhat hacky implementation that I came up with at this moment:
>>
>
> Widgets and the manhole interpreter are implemented using two pretty
> distinct approaches.
>
> As you've figured out, these approaches can be integrated (at least in one
> direction) using a terminal emulator - `twisted.conch.insults.helper.
> TerminalBuffer`.
>
> However, `TerminalBuffer` is an extremely low quality terminal emulator.
> Among its many flaws is that it uses a number of incredibly inefficient
> implementations for common terminal operations (many of its other flaws are
> along the lines of "it has a bug in the implementation of X").
>
> If I were going to create a manhole widget then I would do it "natively" -
> not by bridging the existing manhole protocol to the widget system with
> TerminalBuffer but by writing a new widget that does manhole stuff all by
> itself.
>
> I suggest that you might want to pursue this approach instead of trying to
> optimize and fix bugs in TerminalBuffer.
>
> Ultimately it would be nice if a widget-based manhole were *the* manhole
> and the current implementation went away.
>
> However, that said, as far as I know, no vt-style terminals support
> efficient redrawing for the "vertically scroll one portion of the terminal
> separated from another portion by a vertical divider".
>
> You will be able to avoid the redundant work of re-rendering the Python
> buffer representing the terminal state but you'll still have to re-
> transmit the bytes representing the entire terminal display to the terminal
> on each redraw - unless you avoid vertical dividers.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/1537ec5e/attachment.html>

From sank.daniel at gmail.com  Fri Aug  8 01:30:37 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 8 Aug 2014 00:30:37 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
Message-ID: <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>

Kevin,

Is there a question there? I'd be happy to try to help if I knew what you
were asking.


On Thu, Aug 7, 2014 at 11:42 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> wordsmith argument order issues re-take.
>
> Cheers,
> Kevin
>
>
> On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
>> goal: Give knowitall.py awareness of wordsmith.py addition.
>>
>> to run
>> ./library.sh # opens 7999 for remote_dictionary and remote_define methods
>> then both:
>> python knowitall.py
>> python wordsmith.py
>>
>> library.sh due to main/jelly issues
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/945ee9c2/attachment-0001.html>

From kebin70 at gmail.com  Fri Aug  8 09:01:24 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 8 Aug 2014 08:01:24 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
Message-ID: <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>

The question is what's necessary to get knowitall.py to receive updates to
held copy.

I start server, start knowitall, run wordsmith.  Knowitall doesn't receive
updates.  I understand why, setCopyableState only gets fired once.
Guessing jelly doesn't hold onto the RemoteCopy or a reference to
RemoteCopy.

Is the next step to add pb.Referenceable to Dictionary class, and use
observe_?



On Fri, Aug 8, 2014 at 12:30 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Kevin,
>
> Is there a question there? I'd be happy to try to help if I knew what you
> were asking.
>
>
> On Thu, Aug 7, 2014 at 11:42 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
>> wordsmith argument order issues re-take.
>>
>> Cheers,
>> Kevin
>>
>>
>> On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com>
>> wrote:
>>
>>> goal: Give knowitall.py awareness of wordsmith.py addition.
>>>
>>> to run
>>> ./library.sh # opens 7999 for remote_dictionary and remote_define methods
>>> then both:
>>> python knowitall.py
>>> python wordsmith.py
>>>
>>> library.sh due to main/jelly issues
>>>
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/f444693e/attachment.html>

From sank.daniel at gmail.com  Fri Aug  8 10:04:30 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 8 Aug 2014 09:04:30 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
Message-ID: <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>

I think Cacheable exists to handle the case you want. Beware there are some
funny issues with Cacheable

https://twistedmatrix.com/trac/ticket/7274

Daniel


On Fri, Aug 8, 2014 at 8:01 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> The question is what's necessary to get knowitall.py to receive updates to
> held copy.
>
> I start server, start knowitall, run wordsmith.  Knowitall doesn't receive
> updates.  I understand why, setCopyableState only gets fired once.
> Guessing jelly doesn't hold onto the RemoteCopy or a reference to
> RemoteCopy.
>
> Is the next step to add pb.Referenceable to Dictionary class, and use
> observe_?
>
>
>
> On Fri, Aug 8, 2014 at 12:30 AM, Daniel Sank <sank.daniel at gmail.com>
> wrote:
>
>> Kevin,
>>
>> Is there a question there? I'd be happy to try to help if I knew what you
>> were asking.
>>
>>
>> On Thu, Aug 7, 2014 at 11:42 PM, Kevin Mcintyre <kebin70 at gmail.com>
>> wrote:
>>
>>> wordsmith argument order issues re-take.
>>>
>>> Cheers,
>>> Kevin
>>>
>>>
>>> On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com>
>>> wrote:
>>>
>>>> goal: Give knowitall.py awareness of wordsmith.py addition.
>>>>
>>>> to run
>>>> ./library.sh # opens 7999 for remote_dictionary and remote_define
>>>> methods
>>>> then both:
>>>> python knowitall.py
>>>> python wordsmith.py
>>>>
>>>> library.sh due to main/jelly issues
>>>>
>>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>>
>> --
>> Daniel Sank
>> Department of Physics
>> Broida Hall
>> University of California
>> Santa Barbara, CA 93117
>> (805)893-3899
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/15870582/attachment.html>

From glyph at twistedmatrix.com  Fri Aug  8 11:57:52 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 8 Aug 2014 10:57:52 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
Message-ID: <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>


On Aug 7, 2014, at 10:42 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> > I really wish we would stop calling things "bad" and "good".
> 
> My wording of exarkun's wording. He gave a much more detailed description of what he think's is "crazy" about pb.

This was a complaint about a general trend, not about specific words.  Clearly exarkun gave you the impression that it is "bad", whether he specifically said so or not.

We're all intimately familiar with everything that's terrible about all of our code, and we aren't shy about sharing.  I just would like it if we could really lead with the details and refrain from value judgements :).

> > make your own decisions about how to write your own code.
> 
> Indeed, but gathering information from wiser folks is always a good idea, and usually best done _often_ during development :)

I might quibble with "wiser" but okay.  I'm happy to provide feedback earlier so I don't have to say "what is this disaster" later ;-).

> > I'm happy to trade 2-for-1 - if you do two code reviews, I will regard it as an immediate obligation for
> > me to review a ticket you direct me to ;).
> 
> Deal. However, rather than direct your attention to tickets, at this stage I would rather trade reviews for discussion. I'll do two reviews and then post a few questions to this mailing list thread. Once I start actually writing patches/new code we can trade reviews for attention to tickets. Ok?

I'm happy to do that.

> > These would also be easier to land, and a couple of decades in open source has taught me that nothing
> > motivates development activity like successful development activity ;).
> 
> Indeed. There are one or two architectural issues I want to understand before moving on to real coding. I will try to get through that asap by reviewing tickets and trading for discussion of those architectural issues.

I'll try to respond to these questions regardless.  I would like to help.  It's just that the reviews will create a more tangible sense of commitment :).

> > Hopefully you can make sense out of the explanations above and your own existing knowledge.
> > Are there any other phases of the process which are confusing?
> 
> This all makes sense now. I hadn't understood the point of the cooker, but now that you've explained it, I understand what's going on. I will transform your mailing list explanation to documentation shortly.

Great, glad that helped.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/fc9b4c84/attachment.html>

From exarkun at twistedmatrix.com  Fri Aug  8 12:26:15 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Aug 2014 18:26:15 -0000
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
Message-ID: <20140808182615.20413.83364169.divmod.xquotient.935@top>

On 05:57 pm, glyph at twistedmatrix.com wrote:
>
>On Aug 7, 2014, at 10:42 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
>>glyph,
>>
>> > I really wish we would stop calling things "bad" and "good".
>>
>>My wording of exarkun's wording. He gave a much more detailed 
>>description of what he think's is "crazy" about pb.
>
>This was a complaint about a general trend, not about specific words. 
>Clearly exarkun gave you the impression that it is "bad", whether he 
>specifically said so or not.

I don't understand what you're saying here.

Do you want people to not describe the shortcomings of certain pieces of 
software?

Or do you want people not to conclude from such descriptions that those 
pieces of software are not the most well suited for certain 
applications?

Or do you want people to write two pages of description every time they 
want to refer to the idea that a certain piece of software isn't the 
best choice for a certain application?

Could you clarify what you think the problem here actually is?
>
>We're all intimately familiar with everything that's terrible about all 
>of our code, and we aren't shy about sharing.  I just would like it if 
>we could really lead with the details and refrain from value judgements 
>:).

In this case, it seems like that's exactly what happened.  I led with 
detail.  The value judgement of PB being "bad" (which is a gross over- 
simplification, but a convenient shorthand) came afterwards.

Jean-Paul
>> > make your own decisions about how to write your own code.
>>
>>Indeed, but gathering information from wiser folks is always a good 
>>idea, and usually best done _often_ during development :)
>
>I might quibble with "wiser" but okay.  I'm happy to provide feedback 
>earlier so I don't have to say "what is this disaster" later ;-).
>> > I'm happy to trade 2-for-1 - if you do two code reviews, I will 
>>regard it as an immediate obligation for
>> > me to review a ticket you direct me to ;).
>>
>>Deal. However, rather than direct your attention to tickets, at this 
>>stage I would rather trade reviews for discussion. I'll do two reviews 
>>and then post a few questions to this mailing list thread. Once I 
>>start actually writing patches/new code we can trade reviews for 
>>attention to tickets. Ok?
>
>I'm happy to do that.
>> > These would also be easier to land, and a couple of decades in open 
>>source has taught me that nothing
>> > motivates development activity like successful development activity 
>>;).
>>
>>Indeed. There are one or two architectural issues I want to understand 
>>before moving on to real coding. I will try to get through that asap 
>>by reviewing tickets and trading for discussion of those architectural 
>>issues.
>
>I'll try to respond to these questions regardless.  I would like to 
>help.  It's just that the reviews will create a more tangible sense of 
>commitment :).
>> > Hopefully you can make sense out of the explanations above and your 
>>own existing knowledge.
>> > Are there any other phases of the process which are confusing?
>>
>>This all makes sense now. I hadn't understood the point of the cooker, 
>>but now that you've explained it, I understand what's going on. I will 
>>transform your mailing list explanation to documentation shortly.
>
>Great, glad that helped.
>
>-glyph


From kebin70 at gmail.com  Fri Aug  8 14:31:25 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 8 Aug 2014 13:31:25 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
Message-ID: <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>

I think so too, but I'm starting to lean toward websockets.  The warnings
alone right?

But I will take another pass and report back any success.

Cheers,


On Fri, Aug 8, 2014 at 9:04 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

> I think Cacheable exists to handle the case you want. Beware there are
> some funny issues with Cacheable
>
> https://twistedmatrix.com/trac/ticket/7274
>
> Daniel
>
>
> On Fri, Aug 8, 2014 at 8:01 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
>> The question is what's necessary to get knowitall.py to receive updates
>> to held copy.
>>
>> I start server, start knowitall, run wordsmith.  Knowitall doesn't
>> receive updates.  I understand why, setCopyableState only gets fired once.
>> Guessing jelly doesn't hold onto the RemoteCopy or a reference to
>> RemoteCopy.
>>
>> Is the next step to add pb.Referenceable to Dictionary class, and use
>> observe_?
>>
>>
>>
>> On Fri, Aug 8, 2014 at 12:30 AM, Daniel Sank <sank.daniel at gmail.com>
>> wrote:
>>
>>> Kevin,
>>>
>>> Is there a question there? I'd be happy to try to help if I knew what
>>> you were asking.
>>>
>>>
>>> On Thu, Aug 7, 2014 at 11:42 PM, Kevin Mcintyre <kebin70 at gmail.com>
>>> wrote:
>>>
>>>> wordsmith argument order issues re-take.
>>>>
>>>> Cheers,
>>>> Kevin
>>>>
>>>>
>>>> On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com>
>>>> wrote:
>>>>
>>>>> goal: Give knowitall.py awareness of wordsmith.py addition.
>>>>>
>>>>> to run
>>>>> ./library.sh # opens 7999 for remote_dictionary and remote_define
>>>>> methods
>>>>> then both:
>>>>> python knowitall.py
>>>>> python wordsmith.py
>>>>>
>>>>> library.sh due to main/jelly issues
>>>>>
>>>>>
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>>
>>>
>>>
>>> --
>>> Daniel Sank
>>> Department of Physics
>>> Broida Hall
>>> University of California
>>> Santa Barbara, CA 93117
>>> (805)893-3899
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/e5905395/attachment.html>

From glyph at twistedmatrix.com  Fri Aug  8 15:59:39 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 8 Aug 2014 14:59:39 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <20140808182615.20413.83364169.divmod.xquotient.935@top>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
Message-ID: <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>


On Aug 8, 2014, at 11:26 AM, exarkun at twistedmatrix.com wrote:

>> This was a complaint about a general trend, not about specific words. Clearly exarkun gave you the impression that it is "bad", whether he specifically said so or not.
> 
> Could you clarify what you think the problem here actually is?

I concede I was leaving some stuff out, so that wasn't the clearest description.

In the past six months or so I've been going to lots of events where I talk to people about Twisted, and why they might or might want to use it.

I've participated in this discussion several times:

Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using Tulip because I really like its style of coroutines."
Glyph: "That's interesting. Did you know that Twisted has an equivalent style of coroutines, called inlineCallbacks, that's been around for years?"
HAMISH: "I saw that, and I asked about that a while ago and I heard it was bad.  It haven't heard that Tulip has the same problems, though."
Glyph: "Really? What problems does inlineCallbacks have that Tulip's coroutines don't?"
HAMISH: "When I asked about it everybody told me I have to use Deferreds instead, but Deferreds are really confusing and they make your code look all gross, so I didn't want to do that.  With Tulip I don't have to!"
Glyph: <facepalm>

Of course the problems that we describe with inlineCallbacks are the exact same problems that you will have with Tulip-style coroutines, and in fact in one of the conversations that was averaged out to produce the above composite, my interlocutor specifically mentioned that they'd already had the kind of bug that explicit-yield coroutines can sometimes encourage (thoughtlessly putting in too many 'yield's and not considering their consequences) and were wondering how Twisted dealt with that sort of thing.

I don't object to people using Tulip, or for that matter any of Twisted's event-driven competitors - I'm much happier if they're writing event-driven code of any stripe than just spawning a thread and writing until they block - but it does bother me if they select a different project to use or contribute to because of a perceived issue created only by our collective habit of being tersely self-critical.

When anyone directly involved with producing a thing describes that thing as "good", new observers tend to take it with a grain of salt.  "Of course they think X is good, they work on X." When someone involved with a project describes it as "bad", though, even if it's a convenient shorthand for many people in the conversation for a well-understood set of complex issues, those new observers tend to think, "Wow, if even they describe X as bad, it must be really bad, they work on X!".

What I am asking everyone reading here to do is just avoid calling stuff "bad" or "gross" or "complicated".  Even a stock stand-in phrase that more or less just means "bad" would be better.  Even an unexplained "inappropriate for my use-case", for example, least implies that the user might want to consider the system under discussion's appropriateness for their particular use-case.

>> We're all intimately familiar with everything that's terrible about all of our code, and we aren't shy about sharing.  I just would like it if we could really lead with the details and refrain from value judgements :).
> 
> In this case, it seems like that's exactly what happened.  I led with detail.  The value judgement of PB being "bad" (which is a gross over- simplification, but a convenient shorthand) came afterwards.


Keep in mind that my introduction to this interaction was Daniel saying:

>>> exarkun thinks pb is bad and that I should implement what I need in AMP.


You can see how I might have interpreted this to mean that you just said you think PB is bad :-).

Nevertheless, Daniel didn't lead with the details and refrain from a value judgement, so the advice applies equally well to him.  Which is why I filled out all those details, so other readers of the thread will know what "reasonable" and "bad" mean in this context.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/31fb01d0/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Aug  8 16:01:29 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 8 Aug 2014 15:01:29 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
 <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
Message-ID: <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>


On Aug 8, 2014, at 1:31 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> I think so too, but I'm starting to lean toward websockets.  The warnings alone right?  

Websockets are a layer well below what PB does.  In fact you could run PB over websockets, and it would work roughly the same as over TCP.

> But I will take another pass and report back any success.

Please do let us know.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/0a6332f0/attachment.html>

From rowen at uw.edu  Fri Aug  8 16:58:26 2014
From: rowen at uw.edu (Russell E. Owen)
Date: Fri, 08 Aug 2014 15:58:26 -0700
Subject: [Twisted-Python] help with listening to UDP broadcast?
Message-ID: <rowen-63D6EF.15582608082014@news.gmane.org>

I've found an example for UDP broadcasting:
<https://twistedmatrix.com/trac/browser/trunk/docs/projects/core/examples
/udpbroadcast.py?rev=41516>

However, it combines the sender and receiver in a way that I find 
confusing. I figured out how output UDP broadcast packets, but not how 
to make a client that receives to the packets.

Here is what we have, which doesn't work. Based on a comment on the 
broadcast UDP ticket. I suspect the problem is specifying the broadcast 
address using the interface argument to listenUDP, but I'm not sure. In 
any case, no value for interface that I've tried works:
-"<broadcast>" (which is what my senders uses) results in 
twisted.internet.error.InvalidAddressError
-"255.255.255.255" results in twisted.internet.error.CannotListenError: 
Couldn't listen on 255.255.255.255:1235: [Errno 49] Can't assign 
requested address.
- omitting it results in no packets received.
I also tried listenMulticast, but it didn't work (and I didn't expect it 
to, based on comments I saw on the ticket for implementing UDP broadcast 
support).

Any hints would be appreciated.

#!/usr/bin/env python2
"""Attempt to listen to UDP broadcasts
"""
from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor

Port = 1235

class BroadcastUDPClient(DatagramProtocol):
    def startProtocol(self):
        self.transport.setBroadcastAllowed(True)

    def datagramReceived(self, datagram, address):
        print "got a UDP broadcast packet"

class UDPListener(object):
    def __init__(self, port):
        self.port = port
        self.broadcastClient = BroadcastUDPClient()
        self.listener = None
        self.startListening()

    def startListening(self):
        if self.listener is None:
            interface = "255.255.255.255"
            self.listener = reactor.listenUDP(self.port,
                self.broadcastClient, interface)

    def stopListening(self):
        if self.listener is not None:
            self.listener.stopListening()
            self.listener = None

if __name__ == "__main__":
    listener = UDPListener(Port)
    reactor.run()



From ypercube at gmail.com  Fri Aug  8 18:04:31 2014
From: ypercube at gmail.com (Pantelis Theodosiou)
Date: Sat, 9 Aug 2014 01:04:31 +0100
Subject: [Twisted-Python] help with listening to UDP broadcast?
In-Reply-To: <rowen-63D6EF.15582608082014@news.gmane.org>
References: <rowen-63D6EF.15582608082014@news.gmane.org>
Message-ID: <CAE3TBxzddTKSaemEF26VNVRXafac1WAhxA7gLxqacZd2sho0pg@mail.gmail.com>

Hi Russell,

In an old script I've written, I see the following differences with your
code:

I hadn't used at all  allsetBroadcastAllowed()
but joinGroup()   (in startPrtotocol).

And I don't think the 255.255.255.255 will work. You'll need something like
192.168.1.1 or 127.0.0.1

The code (stripped from irrelevant parts) was:

from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor
from twisted.application.internet import MulticastServer

# Set ports and hosts
ip = '224.0.5.228'
port = 8228

# our interface
interface = '192.168.1.1'

class MulticastClientUDP(DatagramProtocol):

    def startProtocol(self):
        # Join the multicast group
        self.transport.joinGroup(ip, interface)
        self.transport.setTTL(255)

    def datagramReceived(self, datagram, address):
        print "got a UDP broadcast packet"


# set reactor to listen on multicast channels
alertsClient = MulticastClientUDP()
reactor.listenMulticast(port, alertsClient)

reactor.run()


Pantelis Theodosiou


On Fri, Aug 8, 2014 at 11:58 PM, Russell E. Owen <rowen at uw.edu> wrote:

> I've found an example for UDP broadcasting:
> <https://twistedmatrix.com/trac/browser/trunk/docs/projects/core/examples
> /udpbroadcast.py?rev=41516
> <https://twistedmatrix.com/trac/browser/trunk/docs/projects/core/examples/udpbroadcast.py?rev=41516>
> >
>
> However, it combines the sender and receiver in a way that I find
> confusing. I figured out how output UDP broadcast packets, but not how
> to make a client that receives to the packets.
>
> Here is what we have, which doesn't work. Based on a comment on the
> broadcast UDP ticket. I suspect the problem is specifying the broadcast
> address using the interface argument to listenUDP, but I'm not sure. In
> any case, no value for interface that I've tried works:
> -"<broadcast>" (which is what my senders uses) results in
> twisted.internet.error.InvalidAddressError
> -"255.255.255.255" results in twisted.internet.error.CannotListenError:
> Couldn't listen on 255.255.255.255:1235: [Errno 49] Can't assign
> requested address.
> - omitting it results in no packets received.
> I also tried listenMulticast, but it didn't work (and I didn't expect it
> to, based on comments I saw on the ticket for implementing UDP broadcast
> support).
>
> Any hints would be appreciated.
>
> #!/usr/bin/env python2
> """Attempt to listen to UDP broadcasts
> """
> from twisted.internet.protocol import DatagramProtocol
> from twisted.internet import reactor
>
> Port = 1235
>
> class BroadcastUDPClient(DatagramProtocol):
>     def startProtocol(self):
>         self.transport.setBroadcastAllowed(True)
>
>     def datagramReceived(self, datagram, address):
>         print "got a UDP broadcast packet"
>
> class UDPListener(object):
>     def __init__(self, port):
>         self.port = port
>         self.broadcastClient = BroadcastUDPClient()
>         self.listener = None
>         self.startListening()
>
>     def startListening(self):
>         if self.listener is None:
>             interface = "255.255.255.255"
>             self.listener = reactor.listenUDP(self.port,
>                 self.broadcastClient, interface)
>
>     def stopListening(self):
>         if self.listener is not None:
>             self.listener.stopListening()
>             self.listener = None
>
> if __name__ == "__main__":
>     listener = UDPListener(Port)
>     reactor.run()
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140809/f86c99db/attachment.html>

From sank.daniel at gmail.com  Fri Aug  8 19:31:00 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 8 Aug 2014 18:31:00 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
Message-ID: <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>

Twisted dev people dudes,

> Nevertheless, *Daniel* didn't lead with the details and refrain from a
value judgement, so the
> advice applies equally well to him.

Lesson learned. Thanks. I agree that this is important.

Now to bring the thread back on-topic, I'd like to ask what pb should do *in
principle*. In other words, what is the specification for the flavors? I
think a discussion of each pb flavor would be helpful and would provide me
material from which I can generate missing docstrings [1]. I'd rather do it
this way instead of backing out what the standing implementation currently
does so that I don't waste time working on something which is a
fundamentally bad idea. This discussion should be a small investment at the
present time.

Copyable:
The functionality provided by Copyable is simple. The sender of the
Copyable just sends it and *forgets*. Therefore, sending a Copyable is
basically just sending atomic data in a particular format. I don't think we
need to discuss this any further.

Referenceable:
When I send you a Referenceable, I send a GUID so that you can later refer
to that object. For example, I send you a message with argument (psuedo
code)

"referenceable-'Joe'"

This is a declaration that I am keeping hold of an object called "Joe" upon
which you may call methods remotely. Specifically, you can send me

"'Joe-foo-4"

which tells me to call Joe.foo(4) and send you the result.

1. How long should the GUID for Joe survive? If Joe is deleted can I reuse
the name "Joe" for an object created later?
2. Do I notify you if Joe disappears on my side?

Let's stop here for now. I owe glyph some reviews [2].

Yours sincerely,
Daniel

[1] I already submitted a patch to the pb documentation and improved the
submission based on review. I hope this provides some indication of my
commitment to make material contributions. I mention this because glyph
made a comment suggesting that showing real work would be valuable.

[2] Is this the beginning of a process which will lead me in the end to
complete servitude and loss of ownership of my own soul?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/1bab4041/attachment-0001.html>

From kebin70 at gmail.com  Fri Aug  8 19:32:19 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 8 Aug 2014 18:32:19 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
 <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
 <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>
Message-ID: <CAA-sNEYttHfAq3r9LUWn4VZ1SS+1T7a6Rqc_RbORsKwrBzyZww@mail.gmail.com>

I experimented today with a table scan from dynamodb.  Taking each record
and converting to a dictionary into a list.  Initial scan and transform
took ~8 seconds from amazon to my house over TCP boto which is soapish? i
think.  ~7800 records.

The next call for the remote copy took 7 seconds across the bus.  Is that
expected?





On Fri, Aug 8, 2014 at 3:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Aug 8, 2014, at 1:31 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
> I think so too, but I'm starting to lean toward websockets.  The warnings
> alone right?
>
>
> Websockets are a layer well below what PB does.  In fact you could run PB
> over websockets, and it would work roughly the same as over TCP.
>
> But I will take another pass and report back any success.
>
>
> Please do let us know.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/858a9349/attachment.html>

From jon at multani.info  Fri Aug  8 21:29:24 2014
From: jon at multani.info (Jonathan Ballet)
Date: Sat, 9 Aug 2014 11:29:24 +0800
Subject: [Twisted-Python] On problems with inlineCallbacks (was Re: Is there
 pb documentation somewhere?)
Message-ID: <20140809032923.GA2431@danio.home>

Sorry for hijacking the thread, but I actually was going to ask
something about this a few days ago, so let's use this reference from
Glyph as a starting point instead :)

On Fri, Aug 08, 2014 at 02:59:39PM -0700, Glyph Lefkowitz wrote:

> I've participated in this discussion several times:
> 
> Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using Tulip because I really like its style of coroutines."
> Glyph: "That's interesting. Did you know that Twisted has an equivalent style of coroutines, called inlineCallbacks, that's been around for years?"
> HAMISH: "I saw that, and I asked about that a while ago and I heard it was bad.  It haven't heard that Tulip has the same problems, though."
> Glyph: "Really? What problems does inlineCallbacks have that Tulip's coroutines don't?"
> HAMISH: "When I asked about it everybody told me I have to use Deferreds instead, but Deferreds are really confusing and they make your code look all gross, so I didn't want to do that.  With Tulip I don't have to!"
> Glyph: <facepalm>
> 
> Of course the problems that we describe with inlineCallbacks are the
> exact same problems that you will have with Tulip-style coroutines,
> and in fact in one of the conversations that was averaged out to
> produce the above composite, my interlocutor specifically mentioned
> that they'd already had the kind of bug that explicit-yield coroutines
> can sometimes encourage (thoughtlessly putting in too many 'yield's
> and not considering their consequences) and were wondering how Twisted
> dealt with that sort of thing.

It's not the first time I'm hearing that there are problems/and or
limitations with inlineCallbacks, and I don't think I ever read
somewhere what they were exactly? And so, each time I'm seeing code
using inlineCallbacks, I'm frowning then realizing I have no idea why I
did...

Is there some place where I could find more information about these
problems/limitations? That would be enlightening.

 Jonathan


From kebin70 at gmail.com  Fri Aug  8 22:17:18 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 8 Aug 2014 21:17:18 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEYttHfAq3r9LUWn4VZ1SS+1T7a6Rqc_RbORsKwrBzyZww@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
 <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
 <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>
 <CAA-sNEYttHfAq3r9LUWn4VZ1SS+1T7a6Rqc_RbORsKwrBzyZww@mail.gmail.com>
Message-ID: <CAA-sNEbfQWDv_NYPBwrexfhri9Czf4wby7fZ3NWcfoPgGwr4ww@mail.gmail.com>

correction.  I was stupidly reprocessing list on remote copy side.  Seeing
much better results now ~10K per second.


On Fri, Aug 8, 2014 at 6:32 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> I experimented today with a table scan from dynamodb.  Taking each record
> and converting to a dictionary into a list.  Initial scan and transform
> took ~8 seconds from amazon to my house over TCP boto which is soapish? i
> think.  ~7800 records.
>
> The next call for the remote copy took 7 seconds across the bus.  Is that
> expected?
>
>
>
>
>
> On Fri, Aug 8, 2014 at 3:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>> On Aug 8, 2014, at 1:31 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>>
>> I think so too, but I'm starting to lean toward websockets.  The warnings
>> alone right?
>>
>>
>> Websockets are a layer well below what PB does.  In fact you could run PB
>> over websockets, and it would work roughly the same as over TCP.
>>
>> But I will take another pass and report back any success.
>>
>>
>> Please do let us know.
>>
>> -glyph
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140808/bb993e55/attachment.html>

From hs at ox.cx  Sat Aug  9 01:50:51 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Sat, 09 Aug 2014 09:50:51 +0200
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
Message-ID: <50FC2843-8B3C-41D0-B0FE-970E889AE12E@ox.cx>

On 8 Aug 2014, at 23:59, Glyph Lefkowitz wrote:

> I've participated in this discussion several times:
>
> Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using 
> Tulip because I really like its style of coroutines."
> Glyph: "That's interesting. Did you know that Twisted has an 
> equivalent style of coroutines, called inlineCallbacks, that's been 
> around for years?"
> HAMISH: "I saw that, and I asked about that a while ago and I heard it 
> was bad.  It haven't heard that Tulip has the same problems, though."
> Glyph: "Really? What problems does inlineCallbacks have that Tulip's 
> coroutines don't?"
> HAMISH: "When I asked about it everybody told me I have to use 
> Deferreds instead, but Deferreds are really confusing and they make 
> your code look all gross, so I didn't want to do that.  With Tulip I 
> don't have to!"
> Glyph: <facepalm>

That btw is something I?m trying to fight on IRC whenever I can for 
months now.  @inlineCallbacks may be worse than pure Deferreds in some 
ways, but they are amazing to get people to give Twisted a chance and 
start appreciating it (most people still have no clue what Twisted 
actually can do for them; hence the ?who needs Twisted when we have 
tulip!?? questions).  And FWIW I have a mid-sized Twisted application 
running on top of @inlineCallbacks for years now and it works just fine.

People finally stopped knee-jerking at async/event-based programming and 
we?re keeping them out by being perfectionist smart-asses.  Next time 
someone asks about them, keep your ?ugh inlineCallbacks? to 
yourself; a future contributor may come out of it.


From sank.daniel at gmail.com  Sat Aug  9 02:39:50 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 9 Aug 2014 01:39:50 -0700
Subject: [Twisted-Python] On problems with inlineCallbacks (was Re: Is
 there pb documentation somewhere?)
In-Reply-To: <20140809032923.GA2431@danio.home>
References: <20140809032923.GA2431@danio.home>
Message-ID: <CAKN9TDLMtE2CFJEo4ztsAqwQ-2j95avuiYZ_6131dTimPg+98Q@mail.gmail.com>

Moved from pb documentation thread.

>> I've participated in this discussion several times:
>>
>> Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using
Tulip because
>> I really like its style of coroutines."
>> Glyph: "That's interesting. Did you know that Twisted has an equivalent
style of coroutines,
>> called inlineCallbacks, that's been around for years?"
>> HAMISH: "I saw that, and I asked about that a while ago and I heard it
was bad.  It haven't
>> heard that Tulip has the same problems, though."
>> Glyph: "Really? What problems does inlineCallbacks have that Tulip's
coroutines don't?"
>> HAMISH: "When I asked about it everybody told me I have to use Deferreds
instead, but
>> Deferreds are really confusing and they make your code look all gross,
so I didn't want to
>> do that.  With Tulip I don't have to!"
>> Glyph: <facepalm>
>>
>>
> People finally stopped knee-jerking at async/event-based programming and
we?re keeping
> them out by being perfectionist smart-asses.  Next time someone asks
about them, keep
> your ?ugh inlineCallbacks? to yourself; a future contributor may come out
of it.

Confirmed. When I first learned about twisted and had no idea what a
"future" was, deferreds made no sense to me [1]. However, when I saw how to
use inlineCallbacks was the first time I went

"Oh, that's neat."

Daniel

[1] For the interested, the crucial element which eluded me was the fact
that when you get a deferred from a function call, the thing which gave you
the deferred probably promises to _fire that deferred for you later_.
Somehow, that simple idea just didn't make it into my brain for a while.
And while I have your attention, oh connoisseur of twisted pedagogy, I
really think David Peticolas's tutorial should be on the front page.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140809/6b257c4c/attachment-0001.html>

From donald at stufft.io  Sat Aug  9 10:13:18 2014
From: donald at stufft.io (Donald Stufft)
Date: Sat, 9 Aug 2014 12:13:18 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <50FC2843-8B3C-41D0-B0FE-970E889AE12E@ox.cx>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <50FC2843-8B3C-41D0-B0FE-970E889AE12E@ox.cx>
Message-ID: <58538CF5-FB5B-4D99-AD2A-4AEEE53242EF@stufft.io>


> On Aug 9, 2014, at 3:50 AM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> On 8 Aug 2014, at 23:59, Glyph Lefkowitz wrote:
> 
>> I've participated in this discussion several times:
>> 
>> Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using Tulip because I really like its style of coroutines."
>> Glyph: "That's interesting. Did you know that Twisted has an equivalent style of coroutines, called inlineCallbacks, that's been around for years?"
>> HAMISH: "I saw that, and I asked about that a while ago and I heard it was bad.  It haven't heard that Tulip has the same problems, though."
>> Glyph: "Really? What problems does inlineCallbacks have that Tulip's coroutines don't?"
>> HAMISH: "When I asked about it everybody told me I have to use Deferreds instead, but Deferreds are really confusing and they make your code look all gross, so I didn't want to do that.  With Tulip I don't have to!"
>> Glyph: <facepalm>
> 
> That btw is something I?m trying to fight on IRC whenever I can for months now.  @inlineCallbacks may be worse than pure Deferreds in some ways, but they are amazing to get people to give Twisted a chance and start appreciating it (most people still have no clue what Twisted actually can do for them; hence the ?who needs Twisted when we have tulip!?? questions).  And FWIW I have a mid-sized Twisted application running on top of @inlineCallbacks for years now and it works just fine.
> 
> People finally stopped knee-jerking at async/event-based programming and we?re keeping them out by being perfectionist smart-asses.  Next time someone asks about them, keep your ?ugh inlineCallbacks? to yourself; a future contributor may come out of it.
> 

+1

I stopped trying to use @inlineCallbacks because I was told it was bad (without much explanation why) anytime I posted a code snippet and asked for help with something that was using it. End result was that I didn?t really want to write much Twisted code because I don?t like the style of code where you?re working with pure Deferreds.

---
Donald Stufft
PGP: 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140809/a3c1ad37/attachment.html>

From sank.daniel at gmail.com  Sat Aug  9 10:15:53 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 9 Aug 2014 09:15:53 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <58538CF5-FB5B-4D99-AD2A-4AEEE53242EF@stufft.io>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <50FC2843-8B3C-41D0-B0FE-970E889AE12E@ox.cx>
 <58538CF5-FB5B-4D99-AD2A-4AEEE53242EF@stufft.io>
Message-ID: <CAKN9TD+VhhnDntswOyJfXF4wbtg5kAk1777CCahHyF6-740E=w@mail.gmail.com>

This discussion about inlineCallbacks has nothing to do with the title of
this thread. Someone already created a spin-off thread talking about
inlineCallbacks. Let's use that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140809/99692d34/attachment.html>

From glyph at twistedmatrix.com  Sat Aug  9 19:58:35 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 Aug 2014 18:58:35 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEbfQWDv_NYPBwrexfhri9Czf4wby7fZ3NWcfoPgGwr4ww@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
 <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
 <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>
 <CAA-sNEYttHfAq3r9LUWn4VZ1SS+1T7a6Rqc_RbORsKwrBzyZww@mail.gmail.com>
 <CAA-sNEbfQWDv_NYPBwrexfhri9Czf4wby7fZ3NWcfoPgGwr4ww@mail.gmail.com>
Message-ID: <F60D4C3D-EF0C-40B8-AF21-A867181AA1B5@twistedmatrix.com>

On Aug 8, 2014, at 9:17 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> correction.  I was stupidly reprocessing list on remote copy side.  Seeing much better results now ~10K per second.

Whew.  I don't know exactly how well I would expect this perform, but those other results looked off by a couple orders of magnitude :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140809/77d6f82f/attachment.html>

From glyph at twistedmatrix.com  Sat Aug  9 22:40:49 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 Aug 2014 21:40:49 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
Message-ID: <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>

On Aug 8, 2014, at 6:31 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Now to bring the thread back on-topic,

Yes, let's get back to it, shall we?

> I'd like to ask what pb should do in principle. In other words, what is the specification for the flavors? I think a discussion of each pb flavor would be helpful and would provide me material from which I can generate missing docstrings [1]. I'd rather do it this way instead of backing out what the standing implementation currently does so that I don't waste time working on something which is a fundamentally bad idea. This discussion should be a small investment at the present time.

That sounds like a good idea.

> Copyable:
> The functionality provided by Copyable is simple. The sender of the Copyable just sends it and *forgets*. Therefore, sending a Copyable is basically just sending atomic data in a particular format. I don't think we need to discuss this any further.

Yes.  There's an important corollary to this: a Copyable ought to be immutable.  A Copyable really represents a "value" in the functional programming sense, and not an "object" in the OO sense.

> Referenceable:
> When I send you a Referenceable, I send a GUID so that you can later refer to that object.

It's not really a GUID.  The "G" in GUID stands for "global", and the IDs in Referenceable specifically draw a distinction: <https://github.com/twisted/twisted/blob/a8227e5562a4f9074bb0d5faf6a10e91069704aa/twisted/spread/pb.py#L507-L511>.  They're named LUIDs throughout.

The ID is connection-local.  When the PB connection goes away, so does the reference to that object.

> For example, I send you a message with argument (psuedo code)
> 
> "referenceable-'Joe'"
> 
> This is a declaration that I am keeping hold of an object called "Joe" upon which you may call methods remotely. Specifically, you can send me
> 
> "'Joe-foo-4"
> 
> which tells me to call Joe.foo(4) and send you the result.
> 
> 1. How long should the GUID for Joe survive? If Joe is deleted can I reuse the name "Joe" for an object created later?

Right now these IDs survive until the end of the connection.  We might want to have other ways to address objects, but that should be something higher-level; a naming service that lets you request an object by some identifier.

The ID is a counter, and since it's a Python integer, it'll never even wrap around, so it won't be re-used within the scope of the same connection.

> 2. Do I notify you if Joe disappears on my side?

Yes. <https://github.com/twisted/twisted/blob/a8227e5562a4f9074bb0d5faf6a10e91069704aa/twisted/spread/pb.py#L365-L369>.

> Let's stop here for now. I owe glyph some reviews [2].
> 
> Yours sincerely,
> Daniel
> 
> [1] I already submitted a patch to the pb documentation and improved the submission based on review. I hope this provides some indication of my commitment to make material contributions. I mention this because glyph made a comment suggesting that showing real work would be valuable.

Thanks for pointing that out.  Stuff is happening, everybody ;-).

> [2] Is this the beginning of a process which will lead me in the end to complete servitude and loss of ownership of my own soul?

Oh, don't worry.  That's not the end.  That is merely the beginning.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140809/1155068d/attachment.html>

From trac at twistedmatrix.com  Sun Aug 10 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Aug 2014 06:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1407650716.89.6454215083093843802@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140810/c0df9e8c/attachment-0001.html>

From tobias.oberstein at tavendo.de  Sun Aug 10 06:16:51 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 05:16:51 -0700
Subject: [Twisted-Python] Scalability of timers
Message-ID: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>

Hi,

I have a question regarding scalability of timers in Twisted.

Say I have a massive number of periodic timers (lets say each with period 1s, but all slightly time shifted to each other).

As far as I understand, timers are implemented ultimately by setting the timeout parameter when calling into OS select/poll/epoll/kqueue.

If this  is true, then the number of timers scales linearly with the number of syscalls. This can get limiting (the total number of syscalls a Linux box can sustain is a couple of 100k's per second). As more and more timers are setup, the timeout essentially will approach 0. On the upside, timers will fire precisely.

However, say I am fine with a precision of 1ms.

Is there a way that limits the syscall rate to 1000/s (given no FD activity happens) _independently_ of the number of timers setup?

Timers that fall into a certain ms slice would all fire roughly at the same time (still ordered).

Is that possible?

Thanks,
Tobias


From itamar at itamarst.org  Sun Aug 10 06:52:35 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 10 Aug 2014 08:52:35 -0400
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>

 

There is only one select() call (or whatever) at any given time,
regardless of how many timers. Syscalls are thus O(1). Timers are stored
in sorted order. When event loop wakes up it removes timers that have
been reached, which is fast because they're sorted so when you hit one
that is still in future you can stop. So that's pretty scalable. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140810/7e53b5f1/attachment.html>

From dw+twisted-python at hmmz.org  Sun Aug 10 08:31:29 2014
From: dw+twisted-python at hmmz.org (dw+twisted-python at hmmz.org)
Date: Sun, 10 Aug 2014 14:31:29 +0000
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20140810143129.GA32138@k2>

Hey Tobias,

Individual OS have their own mechanisms for avoiding the kind of waste
you're describing. For example, Linux quite aggressively rounds up the
expiry of certain classes of timer at progressively less granular
intervals the further in the future they're scheduled ("timer
coalescing").

When Twisted wakes, there is no guarantee that that only one timer has
expired by then. In fact under load you would expect the select loop to
always be running (and thus timing out) late, and so each iteration may
process several timers simultaneously.

Twisted will set the select() timeout to the timer due to expire the
earliest. Finding this timer is a constant time operation. There is only
ever one active select() (or select-equivalent) call active at a time.

The Twisted timer implementation internally uses a heap, so scheduling
and expiry are quite efficint O(logN). With 4 billion timers active,
scheduling a new timer in the worst case would require 32 array elements
to be swapped.


On Sun, Aug 10, 2014 at 05:16:51AM -0700, Tobias Oberstein wrote:
> Hi,
> 
> I have a question regarding scalability of timers in Twisted.
> 
> Say I have a massive number of periodic timers (lets say each with period 1s, but all slightly time shifted to each other).
> 
> As far as I understand, timers are implemented ultimately by setting the timeout parameter when calling into OS select/poll/epoll/kqueue.
> 
> If this  is true, then the number of timers scales linearly with the number of syscalls. This can get limiting (the total number of syscalls a Linux box can sustain is a couple of 100k's per second). As more and more timers are setup, the timeout essentially will approach 0. On the upside, timers will fire precisely.
> 
> However, say I am fine with a precision of 1ms.
> 
> Is there a way that limits the syscall rate to 1000/s (given no FD activity happens) _independently_ of the number of timers setup?
> 
> Timers that fall into a certain ms slice would all fire roughly at the same time (still ordered).
> 
> Is that possible?
> 
> Thanks,
> Tobias
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From tobias.oberstein at tavendo.de  Sun Aug 10 15:38:09 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 14:38:09 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
Message-ID: <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>

>There is only one select() call (or whatever) at any given time, regardless of how many timers.

Yes, I do understand this.

>Syscalls are thus O(1). Timers are stored in sorted order. When event loop wakes up it removes timers that have been reached, which is fast because they're sorted so when you hit one that is still in future you can stop. So that's pretty scalable.

syscalls are O(1). But the constant is non zero. A syscall is still quite expensive. try doing 1 mio. syscalls/sec on any x86 box (Linux, BSD, whatever). DEC Alphas and Itanium might be able to do more, but the context switching overhead of x86 architecture is "huge".

But I feel I failed in formulating what I am asking.

Could you please correct where my thinking below goes wrong?

Let's say I issue 1 mio. timers with expirary times t0, t0+1us, t0+2us, .., t0+1s

That is 1 mio. timers expiring in 1us pitch within 1s.

That will mean 1 mio. select() syscalls done in 1s each with timeout set to 1us

Since it's unlikely that a box supports a rate of 1 mio. syscalls/sec, that means a select with timeout 1us won't return after 1us, but >1us. Twisted will process all timers that have expired in the meantime. But there is no way of letting 1 mio. timers fire in 1us pitch within 1s using a syscall.

What I am after is to explicitly _control_ the maximum syscall rate to select() - not simply max. out the box on syscall rate.

Like: limit syscall rate to select() at 1000Hz - regardless how many timers I issue per second.

In above example, with syscall max set to 1000Hz, each time select() returns 1000 timers would have expired. That's fine. That's what I want.

How can I do that?

Thanks!
Tobias



From tobias.oberstein at tavendo.de  Sun Aug 10 15:51:02 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 14:51:02 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <20140810143129.GA32138@k2>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <20140810143129.GA32138@k2>
Message-ID: <634914A010D0B943A035D226786325D4447940E045@EXVMBX020-12.exch020.serverdata.net>

> Individual OS have their own mechanisms for avoiding the kind of waste you're
> describing. For example, Linux quite aggressively rounds up the expiry of
> certain classes of timer at progressively less granular intervals the further in
> the future they're scheduled ("timer coalescing").

As far as I understand, Twisted implements timers via the timeout parameter to select(), not using Linux explicit timers.

But the coalescing you describe would also apply to those implicit timers (created from select(timeout = ..) within the Linux kernel)?

> When Twisted wakes, there is no guarantee that that only one timer has
> expired by then. In fact under load you would expect the select loop to always
> be running (and thus timing out) late, and so each iteration may process
> several timers simultaneously.
> 
> Twisted will set the select() timeout to the timer due to expire the earliest.
> Finding this timer is a constant time operation. There is only ever one active
> select() (or select-equivalent) call active at a time.
> 
> The Twisted timer implementation internally uses a heap, so scheduling and
> expiry are quite efficint O(logN). With 4 billion timers active, scheduling a new
> timer in the worst case would require 32 array elements to be swapped.

This is all fine. But how do I _explicitly_ limit the rate at which select() is called to say 1000Hz (at the expense of timer precision)?

I don't want to let the box hit it's syscall rate limit. Because the box will spend a fair amount of resources for context switching all the time with to real gain.

Thanks for your hints and patience,
Tobias

> 
> 
> On Sun, Aug 10, 2014 at 05:16:51AM -0700, Tobias Oberstein wrote:
> > Hi,
> >
> > I have a question regarding scalability of timers in Twisted.
> >
> > Say I have a massive number of periodic timers (lets say each with period 1s,
> but all slightly time shifted to each other).
> >
> > As far as I understand, timers are implemented ultimately by setting the
> timeout parameter when calling into OS select/poll/epoll/kqueue.
> >
> > If this  is true, then the number of timers scales linearly with the number of
> syscalls. This can get limiting (the total number of syscalls a Linux box can
> sustain is a couple of 100k's per second). As more and more timers are setup,
> the timeout essentially will approach 0. On the upside, timers will fire
> precisely.
> >
> > However, say I am fine with a precision of 1ms.
> >
> > Is there a way that limits the syscall rate to 1000/s (given no FD activity
> happens) _independently_ of the number of timers setup?
> >
> > Timers that fall into a certain ms slice would all fire roughly at the same time
> (still ordered).
> >
> > Is that possible?
> >
> > Thanks,
> > Tobias
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From dw+twisted-python at hmmz.org  Sun Aug 10 16:11:13 2014
From: dw+twisted-python at hmmz.org (dw+twisted-python at hmmz.org)
Date: Sun, 10 Aug 2014 22:11:13 +0000
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E045@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <20140810143129.GA32138@k2>
 <634914A010D0B943A035D226786325D4447940E045@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20140810221113.GA11902@k2>

On Sun, Aug 10, 2014 at 02:51:02PM -0700, Tobias Oberstein wrote:

> But the coalescing you describe would also apply to those implicit
> timers (created from select(timeout = ..) within the Linux kernel)?

It applies to all kernel timers not created by realtime processes.


> This is all fine. But how do I _explicitly_ limit the rate at which
> select() is called to say 1000Hz (at the expense of timer precision)?

> I don't want to let the box hit it's syscall rate limit. Because the
> box will spend a fair amount of resources for context switching all
> the time with to real gain.

>From a reading of http://lwn.net/Articles/296578/, at time of writing
the default select() implementation coalesces sub-second timeouts to
50us boundaries, and this can be adjusted via prctl(PR_SET_TIMERSLACK)
(http://linux.die.net/man/2/prctl) on a per-process basis.

That article is from 2008, and though the relevant kernel code seems to
match the article content, a huge amount of power-efficiency related
changes went into the kernel since that time. My assumption is nowadays
the kernel rounds more aggressively than the default of 50us documented
by that article.

Short answer is yes, you can set the max hz of select(), but in all
likelihood you won't have to. As always, benchmarking and profiling real
code might reveal this to be a non-issue.


David

> 
> Thanks for your hints and patience,
> Tobias
> 
> > 
> > 
> > On Sun, Aug 10, 2014 at 05:16:51AM -0700, Tobias Oberstein wrote:
> > > Hi,
> > >
> > > I have a question regarding scalability of timers in Twisted.
> > >
> > > Say I have a massive number of periodic timers (lets say each with period 1s,
> > but all slightly time shifted to each other).
> > >
> > > As far as I understand, timers are implemented ultimately by setting the
> > timeout parameter when calling into OS select/poll/epoll/kqueue.
> > >
> > > If this  is true, then the number of timers scales linearly with the number of
> > syscalls. This can get limiting (the total number of syscalls a Linux box can
> > sustain is a couple of 100k's per second). As more and more timers are setup,
> > the timeout essentially will approach 0. On the upside, timers will fire
> > precisely.
> > >
> > > However, say I am fine with a precision of 1ms.
> > >
> > > Is there a way that limits the syscall rate to 1000/s (given no FD activity
> > happens) _independently_ of the number of timers setup?
> > >
> > > Timers that fall into a certain ms slice would all fire roughly at the same time
> > (still ordered).
> > >
> > > Is that possible?
> > >
> > > Thanks,
> > > Tobias
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Sun Aug 10 16:17:16 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Aug 2014 22:17:16 -0000
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
 <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20140810221716.20413.1237452444.divmod.xquotient.937@top>

On 09:38 pm, tobias.oberstein at tavendo.de wrote:
>
>What I am after is to explicitly _control_ the maximum syscall rate to 
>select() - not simply max. out the box on syscall rate.
>
>Like: limit syscall rate to select() at 1000Hz - regardless how many 
>timers I issue per second.

In other words:

If you ask Twisted to wake up N times per second, is there an API to 
make Twisted wake up M (M<N) times per second instead?

Is that what you're looking for?

Jean-Paul


From roberto.polli at babel.it  Sun Aug 10 16:17:14 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Mon, 11 Aug 2014 00:17:14 +0200
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
Message-ID: <1679209.Ym6hcXhRg7@rpolli>

Moving thread here to avoid polluting trac (thx to glyph).

1. the real issue: t.p.syslog doesn't support logLevel
 - if you think it's worth a patch before switching to t.p.logger I'll provide 
a patch (it's quite simple). 
 - if you think we should just move to t.p.logger and get rid of t.p.log and 
t.p.syslog see 2.

2. moving twistd to t.p.logger
 - I've started looking around
 - t.p.logger doesn't still support syslog
 - I'll try to add some tests
 - feedback welcome :D

Ref: https://twistedmatrix.com/trac/ticket/7549

Peace,
R.
-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)

CONFIDENZIALE: Questo messaggio ed i suoi allegati sono di carattere 
confidenziale per i destinatari in indirizzo.
E' vietato l'inoltro non autorizzato a destinatari diversi da quelli indicati 
nel messaggio originale.
Se ricevuto per errore, l'uso del contenuto e' proibito; si prega di 
comunicarlo al mittente e cancellarlo immediatamente.


From tobias.oberstein at tavendo.de  Sun Aug 10 16:23:05 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 15:23:05 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <20140810221716.20413.1237452444.divmod.xquotient.937@top>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
 <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
 <20140810221716.20413.1237452444.divmod.xquotient.937@top>
Message-ID: <634914A010D0B943A035D226786325D4447940E049@EXVMBX020-12.exch020.serverdata.net>

> >What I am after is to explicitly _control_ the maximum syscall rate to
> >select() - not simply max. out the box on syscall rate.
> >
> >Like: limit syscall rate to select() at 1000Hz - regardless how many
> >timers I issue per second.
> 
> In other words:
> 
> If you ask Twisted to wake up N times per second, is there an API to make
> Twisted wake up M (M<N) times per second instead?
> 
> Is that what you're looking for?

Yes, exactly.

I want to trade less precision (timers fire at less exact times) for higher efficiency (less context switches).

/Tobias


From tobias.oberstein at tavendo.de  Sun Aug 10 16:31:11 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 15:31:11 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <20140810221113.GA11902@k2>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <20140810143129.GA32138@k2>
 <634914A010D0B943A035D226786325D4447940E045@EXVMBX020-12.exch020.serverdata.net>
 <20140810221113.GA11902@k2>
Message-ID: <634914A010D0B943A035D226786325D4447940E04A@EXVMBX020-12.exch020.serverdata.net>

> > But the coalescing you describe would also apply to those implicit
> > timers (created from select(timeout = ..) within the Linux kernel)?
> 
> It applies to all kernel timers not created by realtime processes.
> 

Alright. I see.

> 
> > This is all fine. But how do I _explicitly_ limit the rate at which
> > select() is called to say 1000Hz (at the expense of timer precision)?
> 
> > I don't want to let the box hit it's syscall rate limit. Because the
> > box will spend a fair amount of resources for context switching all
> > the time with to real gain.
> 
> From a reading of http://lwn.net/Articles/296578/, at time of writing the
> default select() implementation coalesces sub-second timeouts to 50us
> boundaries, and this can be adjusted via prctl(PR_SET_TIMERSLACK)
> (http://linux.die.net/man/2/prctl) on a per-process basis.

Even more interesting! This might be what I'm looking for .. need to read through.

> 
> That article is from 2008, and though the relevant kernel code seems to match
> the article content, a huge amount of power-efficiency related changes went
> into the kernel since that time. My assumption is nowadays the kernel rounds
> more aggressively than the default of 50us documented by that article.

Ah, ok. 50us corresponds to 20k syscalls/sec .. which seems well below the syscall rate limit on modern boxes.

> 
> Short answer is yes, you can set the max hz of select(), but in all likelihood you
> won't have to. As always, benchmarking and profiling real code might reveal
> this to be a non-issue.

Thanks a lot for those hints! I will read into this material.

/Tobias

> 
> 
> David
> 
> >
> > Thanks for your hints and patience,
> > Tobias
> >
> > >
> > >
> > > On Sun, Aug 10, 2014 at 05:16:51AM -0700, Tobias Oberstein wrote:
> > > > Hi,
> > > >
> > > > I have a question regarding scalability of timers in Twisted.
> > > >
> > > > Say I have a massive number of periodic timers (lets say each with
> > > > period 1s,
> > > but all slightly time shifted to each other).
> > > >
> > > > As far as I understand, timers are implemented ultimately by
> > > > setting the
> > > timeout parameter when calling into OS select/poll/epoll/kqueue.
> > > >
> > > > If this  is true, then the number of timers scales linearly with
> > > > the number of
> > > syscalls. This can get limiting (the total number of syscalls a
> > > Linux box can sustain is a couple of 100k's per second). As more and
> > > more timers are setup, the timeout essentially will approach 0. On
> > > the upside, timers will fire precisely.
> > > >
> > > > However, say I am fine with a precision of 1ms.
> > > >
> > > > Is there a way that limits the syscall rate to 1000/s (given no FD
> > > > activity
> > > happens) _independently_ of the number of timers setup?
> > > >
> > > > Timers that fall into a certain ms slice would all fire roughly at
> > > > the same time
> > > (still ordered).
> > > >
> > > > Is that possible?
> > > >
> > > > Thanks,
> > > > Tobias
> > > >
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From dw+twisted-python at hmmz.org  Sun Aug 10 16:47:08 2014
From: dw+twisted-python at hmmz.org (dw+twisted-python at hmmz.org)
Date: Sun, 10 Aug 2014 22:47:08 +0000
Subject: [Twisted-Python] Scalability of timers
Message-ID: <20140810224708.GB14281@k2>

On Sun, Aug 10, 2014 at 03:31:11PM -0700, Tobias Oberstein wrote:

> Thanks a lot for those hints! I will read into this material.

Just a final note.. a single no-fds call to select with a 0 timeout
seems to take around 280ns on my Core 2. Presumably the better
interfaces (e.g. epoll, but not poll) will also take around the same
time.

It's really hard to write even a single Python function that gets
anywhere below 1usec CPU time, and given how function-heavy Twisted is,
I'd be surprised considerations like this factored usefully into a
design at all :)

Adjusting timer coalescing to extreme settings might even worsen your
app's performance, since it'll cause interpreter time and syscalls to
all be compressed around the slack intervals, leaving the CPU idle more
often, rather than running evenly spaced over time. This might produce
less desirable app behavior overall (e.g. it has knock-on effects for
network interface queues, bursts of disk IO/SQL queries, network switch
buffer overruns, or whatever else).


David


From itamar at itamarst.org  Sun Aug 10 17:26:41 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 10 Aug 2014 19:26:41 -0400
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E049@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
 <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
 <20140810221716.20413.1237452444.divmod.xquotient.937@top>
 <634914A010D0B943A035D226786325D4447940E049@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <53E7FFB1.7020207@itamarst.org>

On 08/10/2014 06:23 PM, Tobias Oberstein wrote:
> I want to trade less precision (timers fire at less exact times) for 
> higher efficiency (less context switches).

It's easy enough to write one yourself. This might work:

    from twisted.internet.task import Clock, LoopingCall

    clock = Clock()
    LoopingCall(lambda: clock.advance(0.001)).start(0.001)

Now just do "clock.callLater" instead of "reactor.callLater".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140810/c29d3a7e/attachment.html>

From tobias.oberstein at tavendo.de  Sun Aug 10 17:51:40 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 16:51:40 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <53E7FFB1.7020207@itamarst.org>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
 <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
 <20140810221716.20413.1237452444.divmod.xquotient.937@top>
 <634914A010D0B943A035D226786325D4447940E049@EXVMBX020-12.exch020.serverdata.net>
 <53E7FFB1.7020207@itamarst.org>
Message-ID: <634914A010D0B943A035D226786325D4447940E051@EXVMBX020-12.exch020.serverdata.net>

>>I want to trade less precision (timers fire at less exact times) for higher efficiency (less context switches). 

>It's easy enough to write one yourself. This might work:
>from twisted.internet.task import Clock, LoopingCall
>
>clock = Clock()
>LoopingCall(lambda: clock.advance(0.001)).start(0.001)
>Now just do "clock.callLater" instead of "reactor.callLater".

Oh, cool. That make me smile;)

Does what I want, is simple and portable. Great.

Only worry is

http://twistedmatrix.com/trac/browser/tags/releases/twisted-14.0.0/twisted/internet/task.py#L767

Why does it sort after each and every callLater?

And:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-14.0.0/twisted/internet/task.py#L793

It also sorts after each firing of a delayed call. Presumably because that delayed call might reschedule another call that might also fire in same time period?

/Tobias


From tobias.oberstein at tavendo.de  Sun Aug 10 17:52:26 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 16:52:26 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <20140810224708.GB14281@k2>
References: <20140810224708.GB14281@k2>
Message-ID: <634914A010D0B943A035D226786325D4447940E052@EXVMBX020-12.exch020.serverdata.net>

> Just a final note.. a single no-fds call to select with a 0 timeout seems to take
> around 280ns on my Core 2. Presumably the better interfaces (e.g. epoll, but

Are you sure there is actually a context switch happening with this syscall using no FDs and timeout 0?

280ns means your machine can do 3.5 millions selects() per second. Mmh. I have a hard time believing this would sustain with timeout>0 and/or FDs - anywhere near that magnitude. 

http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html
 
> not poll) will also take around the same time.
> 
> It's really hard to write even a single Python function that gets anywhere below
> 1usec CPU time, and given how function-heavy Twisted is, I'd be surprised

PyPy:


import timeit
import time

def f1():
   pass

def f2(x = 3):
   return x*x

def f3():
   return map(lambda x: x^2, range(10))

for f in [f1, f2, f3]:
   for i in range(5):
      print f, timeit.timeit(f, number = 1000000)
      time.sleep(2)


oberstet at vbox-ubuntu1310:~/scm/scratchbox/python/twisted/timers$ ~/pypy-2.3-linux64/bin/pypy test2.py 
<function f1 at 0x00007f219ff0bd30> 0.00407981872559
<function f1 at 0x00007f219ff0bd30> 0.00138401985168
<function f1 at 0x00007f219ff0bd30> 0.00138092041016
<function f1 at 0x00007f219ff0bd30> 0.00148296356201
<function f1 at 0x00007f219ff0bd30> 0.00153708457947
<function f2 at 0x00007f219ff0bda8> 0.0269131660461
<function f2 at 0x00007f219ff0bda8> 0.0319480895996
<function f2 at 0x00007f219ff0bda8> 0.0243380069733
<function f2 at 0x00007f219ff0bda8> 0.0251939296722
<function f2 at 0x00007f219ff0bda8> 0.025454044342
<function f3 at 0x00007f219ff0be20> 0.474506855011
<function f3 at 0x00007f219ff0be20> 0.452003002167
<function f3 at 0x00007f219ff0be20> 0.446584939957
<function f3 at 0x00007f219ff0be20> 0.441245079041
<function f3 at 0x00007f219ff0be20> 0.467758893967


This is in a VM on low-end gear. My notebook actually.

With trivial functions like above, PyPy might even optimize away funs altogether and inline those. Not sure though.

> considerations like this factored usefully into a design at all :)
> 
> Adjusting timer coalescing to extreme settings might even worsen your app's
> performance, since it'll cause interpreter time and syscalls to all be
> compressed around the slack intervals, leaving the CPU idle more often, rather
> than running evenly spaced over time. This might produce less desirable app
> behavior overall (e.g. it has knock-on effects for network interface queues,
> bursts of disk IO/SQL queries, network switch buffer overruns, or whatever
> else).

I can see those points. Will keep in mind and measure.

However, I am running a multi-process server, so as long as those processes tick slightly pitched w.r.t. each other, and there are more processes than cores, I guess I can saturate the CPUs.

And then this is a network server, so there will be FD activity (lots of).

It's just that I want to limit the impacts of having massive amounts of timers associated with network connections (ping/pong to detect lost TCP).

In any case: thanks a lot for all your hints!

/Tobias

> 
> 
> David
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Mon Aug 11 00:09:15 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 10 Aug 2014 23:09:15 -0700
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <1679209.Ym6hcXhRg7@rpolli>
References: <1679209.Ym6hcXhRg7@rpolli>
Message-ID: <E346553E-BB6E-4EAD-8618-504FB9BD477C@twistedmatrix.com>


On Aug 10, 2014, at 3:17 PM, Roberto Polli <roberto.polli at babel.it> wrote:

> Moving thread here to avoid polluting trac (thx to glyph).
> 
> 1. the real issue: t.p.syslog doesn't support logLevel

For me, the biggest issue is that t.p.syslog defaults to logging at INFO, which means that on many platforms, all the messages get filtered and don't actually get logs.  This is particularly true on OS X, where I think filtering works slightly differently and the INFO filtering happens in the process itself, before it even gets sent to the log server.  I haven't even figured out how to configure it not to get filtered.

It seems like getting t.p.syslog to support logLevel is a necessary part of a clean fix, but since most Twisted log messages don't set a level, we would still need better handling on the commandline to make this practically useful to users.

> - if you think it's worth a patch before switching to t.p.logger I'll provide 
> a patch (it's quite simple).
> - if you think we should just move to t.p.logger and get rid of t.p.log and 
> t.p.syslog see 2.

We definitely can't "get rid of" either of these things.  As per the compatibility policy <https://twistedmatrix.com/trac/wiki/CompatibilityPolicy> we would need to deprecate them.

However, "twistd --syslog" could be implemented in terms of t.p.logger instead.

Also, since messages are fairly carefully relayed between new and old logging systems, I think it might be a compatible change to make twisted.python.syslog.startLogging use a new-style (twisted.python.logging) observer, rather than fixing SyslogObserver.  The benefit here would be that the new logging system consistently uses levels everywhere.  On the other hand, any code written to the new API should be populating the old logLevels key via <https://github.com/twisted/twisted/blob/bd7f43fa202cb78d23098dee165df58737ff9192/twisted/python/logger/_legacy.py#L166-L167>.

> 2. moving twistd to t.p.logger
> - I've started looking around
> - t.p.logger doesn't still support syslog

Yes, we could definitely say that is a blocker :-).

> - I'll try to add some tests
> - feedback welcome :D

I hope some other folks have some ideas :-).

> Ref: https://twistedmatrix.com/trac/ticket/7549

> CONFIDENZIALE: ?

I'd like to make it clear that messages sent to this list are NOT confidential - they are publicly archived in multiple places :-).  If you can disable a message like this when sending here that would be nice.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140810/4ac2d47c/attachment.html>

From ccx at webprojekty.cz  Mon Aug 11 07:51:04 2014
From: ccx at webprojekty.cz (ccx at webprojekty.cz)
Date: Mon, 11 Aug 2014 15:51:04 +0200
Subject: [Twisted-Python] Experimenting with tubes
Message-ID: <84AC8E3500000000.9827000000000000.reformail@dorje>

Hello, I've been playing with the new tubes that are being implemented:
http://comments.gmane.org/gmane.comp.python.twisted/27248
https://twistedmatrix.com/trac/ticket/1956

Here are few things that I did with it. I won't publish the full code now,
as in it's current shape it could implode eyeballs of twisted devs and
possibly make them summon some of the elder gods, but I'll see if I can
produce something less vile as I merge the ongoing changes to the tubes
branch.

So far I wrote relatively simple app that read logfiles, parse them and
insert what they got out of them into a database. First issue that I've
dealt with is stopping the tubes. When I read the whole of the input I want
to wait until all of it was parsed (atm synchronous code, but I can imagine
eg. some expensive processing being done in thread / external process) and
then wait until it's commited to the database before shutting the reactor
down cleanly.

As of #42908 which I pulled for experimenting the support for passing
flowStopped(reason) through pipeline (or series if you want) was not
working, an issue with None being returned from stopped() ended the
processing prematurely, which I fixed with:

=== modified file 'tubes7/tube.py'
--- tubes7/tube.py	2014-08-01 18:32:48 +0000
+++ tubes7/tube.py	2014-08-01 21:20:44 +0000
@@ -441,6 +446,8 @@
                 downstream.flowStopped(f)
             return
         if iterableOrNot is None:
+            if self._flowStoppingReason is not None:
+                self._tfount.drain.flowStopped(self._flowStoppingReason)
             return 0
         self._pendingIterator = iter(iterableOrNot)
         if self._tfount.drain is None:

Also the ProtocolFount didn't really do what it should, so I made it
implement IHalfCloseableProtocol and made it call flowStopped() accordingly.

One more thing about it I did is that I made it invoke flowStopped() on any
drain that is newly attached to it - apparently when I used the stdio
endpoint it managed to close it when reading from /dev/null even before I
managed to set up the series/pipeline.

That still didn't make it possible for me to wait on DB being written to
properly. What I had to do is to implement CloseableDrain that has
waitDone() method that emits a Deferred that fires when the drain's
flowStopped() was called and all it should do has been done. This makes it
quite handy to use from react()-style setup since I can just return this
Deferred, or DeferredList of all ongoing pipelines.

For the next pipeline I had one more issue: this pipeline can be run either
as a log reader, or as essential part of running program that emits such
logs. In the latter case I need to generate confirmation messages for
specific entries that are being inserted and send them back to the
originator, after they has been safely written to the DB. This I resolved by
adding another field into the values I pass into PostgreSQLDrain - deferred
that will be fired as txpostgres's runOperation finishes. This resolution
works pretty well but it took me quite a while to come up with it, so I'm
not sure if it's intuitive design pattern or if we could come up with
something better.

Then I had to run both pipelines in parallel, after implementing the fan-in
pattern (fan-out was already done by glyph), I wrote this helper function:

def parallel(*tubes):
    out = Out()
    in_ = In()
    out._drain.nextFount = in_
    for tube in tubes:
        out.newFount().flowTo(series(tube, in_.newDrain()))
    in_.stop_on_empty = True
    return out.drain

The nextFount attribute on _OutDrain is what is returned from flowingFrom()
so this function can be used as a part of series. What I'm unsure about is
how to handle stopping of the fan-in. Currently I don't make it stop until
the stop_on_empty is set (so I can add/remove things during it's
initialization) and then I make it stop when the last fount that's flowing
in has stopped (and removed from input founts set) and I use the reason it
passes into flowStopped() to propagate along to the rest of series,
effectively discarding any reason objects passed to all the founts except
the last one.

What I'll have to deal with is a lack of sensible flow control in some parts
of the code. For example the part that generates the log files should not be
stopped just because there's some delay in writing the logs. This made me
wonder if the flow control and perhaps processing confirmation should not be
run not as a part of the main interface but instead something that runs
alongside, where applicable, in the opposite direction. But I don't have any
specific API in my mind at the moment. On the other hand, both are perfectly
solvable with current design - implementing FIFO buffers or message droppers
for flow control and the above mentioned deferred passing for confirmations.

As for data representation that I choose to pass between each tube I've
started with simple namedtuples and following that I've built a simple
"datatype" class somewhat reminiscent of
https://github.com/hynek/characteristic
which I learned of few moments after I finished polishing my own
implementation. What I have there is added layer above namedtuples that
autogenerate zope Interfaces (so I can have adaptation), do field type and
value validation/adaptation and possibly (as a future extension) provide
easy way to make them into AMP commands so the series can be split into
communicating processes as needed. (What would be interesting imo is
something like ampoule for tubes, or perhaps a ThreadTube and SubprocessTube
for performing blocking operations)

Also maybe of note is the implementation of Pipes in Async library for OCaml
which I've been examining lately. What they seem to do there is that they
push values downstream and the function called in each processing step may
return deferred signifying a pause is requested until this deferred is
fired. For those interested in the details you can refer to:
https://ocaml.janestreet.com/ocaml-core/111.25.00/doc/async/#Std.Pipe
and the relevant section of Real World OCaml book (available online).

Looking forward to further tubes development :-)
  CcxCZ (freenode) | Jan Pob??slo (IRL)



From werner at thieprojects.ch  Mon Aug 11 19:45:15 2014
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 11 Aug 2014 15:45:15 -1000
Subject: [Twisted-Python] Who's doing the merges for reviewed and blessed
 pull requests at twisted/nevow?
Message-ID: <53E971AB.10208@thieprojects.ch>

Mahalo for enlightening me, Werner


From lacrima.maxim at gmail.com  Tue Aug 12 01:44:42 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 12 Aug 2014 10:44:42 +0300
Subject: [Twisted-Python] On problems with inlineCallbacks (was Re: Is
 there pb documentation somewhere?)
In-Reply-To: <20140809032923.GA2431@danio.home>
References: <20140809032923.GA2431@danio.home>
Message-ID: <CAKef57MC7E-L_xTzFnS1Y-hps2VcSOTbb7oX1vm90PF3GS5qzA@mail.gmail.com>

Hi,

> Of course the problems that we describe with inlineCallbacks are the
> > exact same problems that you will have with Tulip-style coroutines,
> > and in fact in one of the conversations that was averaged out to
> > produce the above composite, my interlocutor specifically mentioned
> > that they'd already had the kind of bug that explicit-yield coroutines
> > can sometimes encourage (thoughtlessly putting in too many 'yield's
> > and not considering their consequences) and were wondering how Twisted
> > dealt with that sort of thing.


In my understanding Tulip-style coroutines have one advantage. You can use
'yield from ...', which says something like: "don't go through event loop,
but delegate to another coroutine directly". I think this is faster and can
make implementation of event loop simpler. But I can be wrong. Please,
correct me.

Also, I think discussion of advantages/disadvantages of inlineCallbacks had
started before invention of 'yield from ...'. But I can't say much about
it, because I started using twisted not so long ago. So I am also
interested in this discussion.

So what are the exact same problems that both inineCallbacks and
Tulip-style coroutines have?

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140812/253d0892/attachment.html>

From mithrandi at mithrandi.net  Tue Aug 12 02:01:54 2014
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 12 Aug 2014 10:01:54 +0200
Subject: [Twisted-Python] Who's doing the merges for reviewed and
 blessed pull requests at twisted/nevow?
In-Reply-To: <53E971AB.10208@thieprojects.ch>
References: <53E971AB.10208@thieprojects.ch>
Message-ID: <CAMcKhMRGZDMe97-=WJ+AYaj8YaRNVZi8ND9w78OfyzAqGr+a7g@mail.gmail.com>

On 12 August 2014 03:45, Werner Thie <werner at thieprojects.ch> wrote:
> Mahalo for enlightening me, Werner

I'm one of the people with write (commit?) access to Nevow. I just
approved and merged your pull request; sorry for taking so long to get
back to this.

I'm not exactly sure where GitHub shows who has write access to a
repository, maybe somebody else knows.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From roberto.polli at babel.it  Tue Aug 12 07:24:34 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Tue, 12 Aug 2014 15:24:34 +0200
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <E346553E-BB6E-4EAD-8618-504FB9BD477C@twistedmatrix.com>
References: <1679209.Ym6hcXhRg7@rpolli>
 <E346553E-BB6E-4EAD-8618-504FB9BD477C@twistedmatrix.com>
Message-ID: <4702161.N9zhnaH295@rpolli>

On Sunday 10 August 2014 23:09:15 Glyph wrote:
> ... on OS X, where I think
> filtering works slightly differently and the INFO filtering happens in the
> process itself
What does tcpdump says on OSX?

> However, "twistd --syslog" could be implemented in terms of t.p.logger
> instead.
> to make twisted.python.syslog.startLogging use a new-style 
(twisted.python.logging)
> observer, rather than fixing SyslogObserver.
Ok. Hope to play on that  during these holidays.

> any code written to the new API should be populating the old
> logLevels key via
> <https://github.com/twisted/twisted/blob/bd7f43fa202cb78d23098dee165df58737
> ff9192/twisted/python/logger/_legacy.py#L166-L167>.
Ok, so:
1- I won't touch twistd
2- I'll create t.p.logger._syslog
3- I''ll patch t.p.syslog to use  t.p.logger._syslog

> I'd like to make it clear that messages sent to this list are NOT
> confidential
ok, actually the "confidential" just applies when you're not the intended 
recipient of the mail :P

Thx for your guidance + Peace,
R.
-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)




From glyph at twistedmatrix.com  Tue Aug 12 12:18:31 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 12 Aug 2014 11:18:31 -0700
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <4702161.N9zhnaH295@rpolli>
References: <1679209.Ym6hcXhRg7@rpolli>
 <E346553E-BB6E-4EAD-8618-504FB9BD477C@twistedmatrix.com>
 <4702161.N9zhnaH295@rpolli>
Message-ID: <39F6710F-AB92-4F07-B102-79673E592CF1@twistedmatrix.com>


On Aug 12, 2014, at 6:24 AM, Roberto Polli <roberto.polli at babel.it> wrote:

> On Sunday 10 August 2014 23:09:15 Glyph wrote:
>> ... on OS X, where I think
>> filtering works slightly differently and the INFO filtering happens in the
>> process itself
> What does tcpdump says on OSX?'

I am pretty sure that syslog stuff all happens over mach ports, or perhaps UNIX sockets.  Nothing that tcpdump can see unless you configure the daemon to forward stuff on.

>> However, "twistd --syslog" could be implemented in terms of t.p.logger
>> instead.
>> to make twisted.python.syslog.startLogging use a new-style 
> (twisted.python.logging)
>> observer, rather than fixing SyslogObserver.
> Ok. Hope to play on that  during these holidays.

Fantastic :).  Keep in mind that as yet, logger is unreleased and so if you have any feedback we should fix it now :).

>> any code written to the new API should be populating the old
>> logLevels key via
>> <https://github.com/twisted/twisted/blob/bd7f43fa202cb78d23098dee165df58737
>> ff9192/twisted/python/logger/_legacy.py#L166-L167>.
> Ok, so:
> 1- I won't touch twistd
> 2- I'll create t.p.logger._syslog
> 3- I''ll patch t.p.syslog to use  t.p.logger._syslog

This all sounds great.

> Thx for your guidance + Peace,
> R.

Glad to help.  Thanks so much for your contribution!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140812/4a9e2b0f/attachment.html>

From itamar at itamarst.org  Thu Aug 14 13:04:17 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 14 Aug 2014 15:04:17 -0400
Subject: [Twisted-Python] ANN: Flocker 0.1,
 a data volume manager and multi-host Docker cluster management tool
Message-ID: <5b941e811fda6fe8855f6b508f395cdd@itamarst.org>

 

Flocker is an open source data volume manager and multi-host Docker
cluster management tool. With it you can control your data using the
same tools you use for your stateless applications. This means that you
can run your databases, queues and key-value stores in Docker and move
them around as easily as the rest of your app. 

It's written with Twisted (of course) and features the work of Twisted
developers Jean-Paul Calderone, Tom Prince, Richard Wall and myself.
Very much a preliminary release though, so there's a bunch of code that
needs to be Twisted-ified :) 

Documentation: http://docs.clusterhq.com/en/0.1.0/ 

Code: https://github.com/ClusterHQ/flocker 
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140814/b2ae9a78/attachment.html>

From glyph at twistedmatrix.com  Thu Aug 14 14:13:47 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 14 Aug 2014 13:13:47 -0700
Subject: [Twisted-Python] ANN: Flocker 0.1,
	a data volume manager and multi-host Docker cluster management tool
In-Reply-To: <5b941e811fda6fe8855f6b508f395cdd@itamarst.org>
References: <5b941e811fda6fe8855f6b508f395cdd@itamarst.org>
Message-ID: <8BF3E59C-46E0-435C-B614-2ABE1F07890B@twistedmatrix.com>

On Aug 14, 2014, at 12:04 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> Flocker is an open source data volume manager and multi-host Docker cluster management tool. With it you can control your data using the same tools you use for your stateless applications. This means that you can run your databases, queues and key-value stores in Docker and move them around as easily as the rest of your app.
> 
Congratulations, Itamar, Tom, Jean-Paul, and Richard!  I am really excited to see what you've come up with and try this out. :-D
> It's written with Twisted (of course) and features the work of Twisted developers Jean-Paul Calderone, Tom Prince, Richard Wall and myself. Very much a preliminary release though, so there's a bunch of code that needs to be Twisted-ified :)
> 
On behalf of the whole Twisted community, thanks for helping to associate Twisted with such a hip and happening brand as Docker at such an opportune moment in history ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140814/ed42faf3/attachment.html>

From glyph at twistedmatrix.com  Thu Aug 14 15:29:56 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 14 Aug 2014 14:29:56 -0700
Subject: [Twisted-Python] Experimenting with tubes
In-Reply-To: <84AC8E3500000000.9827000000000000.reformail@dorje>
References: <84AC8E3500000000.9827000000000000.reformail@dorje>
Message-ID: <E10C96F8-4EEA-4752-A4AA-89AF27FE7DE4@twistedmatrix.com>

On Aug 11, 2014, at 6:51 AM, ccx at webprojekty.cz wrote:

> Hello, I've been playing with the new tubes that are being implemented:
> http://comments.gmane.org/gmane.comp.python.twisted/27248
> https://twistedmatrix.com/trac/ticket/1956

Thanks so much for taking the time to play with it, and taking some time to write feedback.

> Here are few things that I did with it. I won't publish the full code now,
> as in it's current shape it could implode eyeballs of twisted devs and
> possibly make them summon some of the elder gods, but I'll see if I can
> produce something less vile as I merge the ongoing changes to the tubes
> branch.

I'd be interested to see the code nevertheless.  If you had to do eyeball-imploding antics to get Tubes to work well for your use-case, being able to have a look at that would help us evaluate whether those antics were required by the code, encouraged by misfeatures of the API design, or just issues with lack of documentation.

> So far I wrote relatively simple app that read logfiles, parse them and
> insert what they got out of them into a database.

If it's actually reading a file, another nice to-do would be an IFount provider that provides the contents of a file with appropriate flow control, and maybe a thread or process in the background to do the file I/O.  Another thing you could contribute to the branch, possibly?  :-)  How did you implement this?

> First issue that I've
> dealt with is stopping the tubes. When I read the whole of the input I want
> to wait until all of it was parsed (atm synchronous code, but I can imagine
> eg. some expensive processing being done in thread / external process) and
> then wait until it's commited to the database before shutting the reactor
> down cleanly.

To translate this into Tubes terminology, what it sounds like you want is a way for a drain (in this case, the drain representing the database transaction) to authoritatively signal that it has completed consuming all of the inputs that it has received from its fount.  But the only notification that you can get now is stopFlow, which just means "cut it out" and not "I'm done" - not to mention that "stopFlow" is unnecessary after "flowStopped" which makes it meaningless in the current idiom.

> As of #42908 which I pulled for experimenting the support for passing
> flowStopped(reason) through pipeline (or series if you want) was not
> working, an issue with None being returned from stopped() ended the
> processing prematurely, which I fixed with:
> 
> === modified file 'tubes7/tube.py'
> --- tubes7/tube.py	2014-08-01 18:32:48 +0000
> +++ tubes7/tube.py	2014-08-01 21:20:44 +0000
> @@ -441,6 +446,8 @@
>                 downstream.flowStopped(f)
>             return
>         if iterableOrNot is None:
> +            if self._flowStoppingReason is not None:
> +                self._tfount.drain.flowStopped(self._flowStoppingReason)
>             return 0
>         self._pendingIterator = iter(iterableOrNot)
>         if self._tfount.drain is None:

I'm not sure I totally understand the case that you're describing right now.  Can you perhaps contribute a unit test which demonstrates why this line of code is necessary?

> Also the ProtocolFount didn't really do what it should, so I made it
> implement IHalfCloseableProtocol and made it call flowStopped() accordingly.

Yeah that is definitely a known issue on our to-do list.  I think it's even in the notes.rst in the branch.  Can we have your patch?  (You wrote tests, too, right? ;-))

> One more thing about it I did is that I made it invoke flowStopped() on any
> drain that is newly attached to it - apparently when I used the stdio
> endpoint it managed to close it when reading from /dev/null even before I
> managed to set up the series/pipeline.

Are you running into <https://twistedmatrix.com/trac/ticket/7546>?

> That still didn't make it possible for me to wait on DB being written to
> properly. What I had to do is to implement CloseableDrain that has
> waitDone() method that emits a Deferred that fires when the drain's
> flowStopped() was called and all it should do has been done. This makes it
> quite handy to use from react()-style setup since I can just return this
> Deferred, or DeferredList of all ongoing pipelines.

There are some thoughts I have about the database transaction thing:

Maybe this should be done out of band?  Right before I read this paragraph I was thinking of something like this; a database transaction is a separate thing.  The data has in fact flowed to the appropriate point.
Rather than having an "I'm completely done" notification as I proposed above, we could have an explicit notion of application-level acknowledgements of each receive(...) call?
Maybe those acknowledgements could themselves be coming from a Fount in the reverse direction of the data, rather than trying to put in actual bi-directional data flow into the core interfaces?  A recipe in terms of the existing abstraction, rather than an extension?  This is sort of how real app-level acknowledgements work: the recipient has to send its own message to indicate receipt of the message it received.

> For the next pipeline I had one more issue: this pipeline can be run either
> as a log reader, or as essential part of running program that emits such
> logs. In the latter case I need to generate confirmation messages for
> specific entries that are being inserted and send them back to the
> originator, after they has been safely written to the DB. This I resolved by
> adding another field into the values I pass into PostgreSQLDrain - deferred
> that will be fired as txpostgres's runOperation finishes. This resolution
> works pretty well but it took me quite a while to come up with it, so I'm
> not sure if it's intuitive design pattern or if we could come up with
> something better.

I'm glad I didn't read ahead in this message as I'm replying to it, because I can see that we're thinking along very convergent lines :-).  This sounds just like the the 3rd point in the proposal I was saying before: we should have a recipe present for acknowledgements somewhere.

> Then I had to run both pipelines in parallel, after implementing the fan-in
> pattern (fan-out was already done by glyph), I wrote this helper function:
> 
> def parallel(*tubes):
>    out = Out()
>    in_ = In()
>    out._drain.nextFount = in_
>    for tube in tubes:
>        out.newFount().flowTo(series(tube, in_.newDrain()))
>    in_.stop_on_empty = True
>    return out.drain

We actually started working on twisted.tubes.fan to implement something very much like this that we hadn't gotten to yet!  David was calling this pattern "fork/join" and we were debating whether we needed infrastructure code to do this.

> The nextFount attribute on _OutDrain is what is returned from flowingFrom()
> so this function can be used as a part of series. What I'm unsure about is
> how to handle stopping of the fan-in. Currently I don't make it stop until
> the stop_on_empty is set

That ... definitely sounds kind of gross.  As does actually setting the nextFount attribute directly on the fan.Out.

> (so I can add/remove things during it's
> initialization) and then I make it stop when the last fount that's flowing
> in has stopped (and removed from input founts set) and I use the reason it
> passes into flowStopped() to propagate along to the rest of series,
> effectively discarding any reason objects passed to all the founts except
> the last one.

twisted.web.client.Agent has a solution to this where there's a multi-failure object that aggregates multiple errors into one thing.  I think we have to do something similar.  Unfortunately this is a very confusing interface in addition to being poorly documented and relies on private classes that expose ostensibly public attributes.  We need to very carefully document this within fan.In.

> What I'll have to deal with is a lack of sensible flow control in some parts
> of the code. For example the part that generates the log files should not be
> stopped just because there's some delay in writing the logs. This made me
> wonder if the flow control and perhaps processing confirmation should not be
> run not as a part of the main interface but instead something that runs
> alongside, where applicable, in the opposite direction. But I don't have any
> specific API in my mind at the moment. On the other hand, both are perfectly
> solvable with current design - implementing FIFO buffers or message droppers
> for flow control and the above mentioned deferred passing for confirmations.

So, at some level, yes it should be stopped because there's a delay in writing the logs.  By which I mean that if you don't want to stop it, you have to choose an explicit, finite amount of memory or disk to use for buffering.  FIFO buffers and message droppers are (obviously) very important flow-control intermediaries, but at the end of the day you have a finite amount of resources and the idea that flow-control should be "optional" means that sometimes (read: "usually") you have an infinite amount of RAM and disk and you're perfectly happy to put it all to work whenever you experience a network partition that stalls your TCP stack.

> As for data representation that I choose to pass between each tube I've
> started with simple namedtuples and following that I've built a simple
> "datatype" class somewhat reminiscent of
> https://github.com/hynek/characteristic
> which I learned of few moments after I finished polishing my own
> implementation. What I have there is added layer above namedtuples that
> autogenerate zope Interfaces (so I can have adaptation), do field type and
> value validation/adaptation and possibly (as a future extension) provide
> easy way to make them into AMP commands so the series can be split into
> communicating processes as needed. (What would be interesting imo is
> something like ampoule for tubes, or perhaps a ThreadTube and SubprocessTube
> for performing blocking operations)

I think it's likely we'll acquire a dependency on Characteristic sometime soon, I have promised to look at the issues on <https://github.com/hynek/characteristic/pull/13> and try to address them already :).

> Also maybe of note is the implementation of Pipes in Async library for OCaml
> which I've been examining lately. What they seem to do there is that they
> push values downstream and the function called in each processing step may
> return deferred signifying a pause is requested until this deferred is
> fired. For those interested in the details you can refer to:
> https://ocaml.janestreet.com/ocaml-core/111.25.00/doc/async/#Std.Pipe
> and the relevant section of Real World OCaml book (available online).

Creating a token for every single call to .receive() makes life hard.  Deferred could go to some trouble to be a cheaper token to pass around (especially on PyPy) but doing it this way is also error-prone as a mistaken error-handler in the Deferred chain means that the default behavior of buggy code un-hooks your loop and leaves idle data sources that will never be cleaned up.

(The fact that each call to .pauseFlow returns a token is me trying to rehabilitate myself from worrying about the performance side of this argument and worry more about the correctness / error-prone-ness part.  The PyPy developers, especially Alex Gaynor, have almost convinced me that it is OK to malloc things, sometimes.  Sometimes.)

I worked quite a bit with the 'Streams' interface in web2 on Calendar Server, and my conclusion there is that while this is better than nothing (it was very nice to be able to just return a Stream rather than cobble together something that returned NOT_DONE_YET every time) it was (A) slow and (B) error prone.  Tubes are designed specifically to avoid this error.  Although you can return Deferreds internally, no consumer ever needs to write the callback-loop that calls .read() again from a callback on .read().

> Looking forward to further tubes development :-)

As am I.  Thanks for all the feedback and encouragement!  This was very useful.  My main takeaway is that we definitely have some missing utility classes (file fount, FIFO queue, message dropper, fan.In, an idiom and supporting code for processing message acknowledgements at the application level), some bugs (something about flowStopped not propagating correctly?), but that the interfaces as they stand are largely on the right track.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140814/33b72ec2/attachment-0001.html>

From piper.masden at gmail.com  Thu Aug 14 16:54:24 2014
From: piper.masden at gmail.com (Piper Masden)
Date: Thu, 14 Aug 2014 16:54:24 -0600
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
Message-ID: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>

Hi Twistedeers!

  I have a twisted plugin that I created to replace the Django dev server
for our devs. It sets up a separate twisted service for serving media, so
we don't need any urls.py tomfoolery in dev. It also sets up an
experimental REST api server which we hope to make javascript requests to
in the near future.

  The core of the code looks like this:

    resource = WSGIResource(reactor, reactor.getThreadPool(), WSGIHandler())
    endpoint = 'tcp:port=8000'
    server = strports.service(endpoint, server.Site(resource))
    server.setServiceParent(application)

  This has worked great for a while. However, we have some views that we
require https on, and so this dev server doesn't allow us to get to those
views at all. I generated a .key file and a .crt file with openssl, and
then cat'd them together to make a pem, and then changed the endpoint to
be...

    endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem'

  Now when I open my browser and type https://localhost:8000, chrome just
hangs. I don't really know how to diagnose this, because I don't really
know anything about SSL (it's all just magic security goodness to me). I
don't necessarily need a direct answer (though it will certainly make me
look good to all the other devs), but maybe some pointers in the right
direction would help.

-Piper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140814/6222195b/attachment.html>

From glyph at twistedmatrix.com  Fri Aug 15 02:15:53 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 15 Aug 2014 01:15:53 -0700
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
Message-ID: <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>

On Aug 14, 2014, at 3:54 PM, Piper Masden <piper.masden at gmail.com> wrote:

> Hi Twistedeers!
> 
>   I have a twisted plugin that I created to replace the Django dev server for our devs.

Cool!

> It sets up a separate twisted service for serving media, so we don't need any urls.py tomfoolery in dev. It also sets up an experimental REST api server which we hope to make javascript requests to in the near future.

Glad to hear you're using Twisted for this.

>   The core of the code looks like this:
> 
>     resource = WSGIResource(reactor, reactor.getThreadPool(), WSGIHandler())
>     endpoint = 'tcp:port=8000'
>     server = strports.service(endpoint, server.Site(resource))
>     server.setServiceParent(application)
> 
>   This has worked great for a while. However, we have some views that we require https on, and so this dev server doesn't allow us to get to those views at all. I generated a .key file and a .crt file with openssl, and then cat'd them together to make a pem, and then changed the endpoint to be...
> 
>     endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem'
> 
>   Now when I open my browser and type https://localhost:8000, chrome just hangs. I don't really know how to diagnose this, because I don't really know anything about SSL (it's all just magic security goodness to me). I don't necessarily need a direct answer (though it will certainly make me look good to all the other devs), but maybe some pointers in the right direction would help.

This isn't really enough information to diagnose a problem, but here are some things you could try:

openssl s_client -connect localhost:8000
curl -vvvv https://localhost:8000/

These should output some stuff about your TLS connection, and will perhaps emit an error message which looks obvious to you.  If not, seeing some of that output might be useful to help diagnose it.  Also, trying other web browsers is always helpful.

You might also try replacing your SSL string endpoint description with a TXSNI endpoint plugin: <https://github.com/glyph/txsni>.  This is just a little easier to get right because of how it reads certificates (for example you don't need to get your private key, chain cert, and main cert in the right order, as long as they're all in the appropriate file.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140815/0ca60cf4/attachment.html>

From tobias.oberstein at tavendo.de  Fri Aug 15 03:48:34 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 15 Aug 2014 02:48:34 -0700
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D444794C5242@EXVMBX020-12.exch020.serverdata.net>

>generated a .key file and a .crt file with openssl, and then cat'd them together to make a pem, and then changed the endpoint to be...
> ? endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem'

you could try to not concat key and cert, but leave them separate:

endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem;certKey=/path/to/cert.pem'

/Tobias

From lacrima.maxim at gmail.com  Fri Aug 15 04:42:08 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Fri, 15 Aug 2014 13:42:08 +0300
Subject: [Twisted-Python] ANN: Flocker 0.1,
 a data volume manager and multi-host Docker cluster management tool
In-Reply-To: <8BF3E59C-46E0-435C-B614-2ABE1F07890B@twistedmatrix.com>
References: <5b941e811fda6fe8855f6b508f395cdd@itamarst.org>
 <8BF3E59C-46E0-435C-B614-2ABE1F07890B@twistedmatrix.com>
Message-ID: <CAKef57PR9Ky6-K-agUBy8c+D8EKSBiZwTvL+UuV_e-_5PCBhfw@mail.gmail.com>

Does Flocker provide API on which we can add support for other containers,
like LXC or systemd-nspawn?


On 14 August 2014 23:13, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Aug 14, 2014, at 12:04 PM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> Flocker is an open source data volume manager and multi-host Docker
> cluster management tool. With it you can control your data using the same
> tools you use for your stateless applications. This means that you can run
> your databases, queues and key-value stores in Docker and move them around
> as easily as the rest of your app.
>
> Congratulations, Itamar, Tom, Jean-Paul, and Richard!  I am really excited
> to see what you've come up with and try this out. :-D
>
> It's written with Twisted (of course) and features the work of Twisted
> developers Jean-Paul Calderone, Tom Prince, Richard Wall and myself. Very
> much a preliminary release though, so there's a bunch of code that needs to
> be Twisted-ified :)
>
> On behalf of the whole Twisted community, thanks for helping to associate
> Twisted with such a hip and happening brand as Docker at such an opportune
> moment in history ;-).
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140815/4087f9da/attachment.html>

From piper.masden at gmail.com  Fri Aug 15 10:32:50 2014
From: piper.masden at gmail.com (Piper Masden)
Date: Fri, 15 Aug 2014 10:32:50 -0600
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
 <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>
Message-ID: <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>

On Fri, Aug 15, 2014 at 2:15 AM, Glyph <glyph at twistedmatrix.com> wrote:

> On Aug 14, 2014, at 3:54 PM, Piper Masden <piper.masden at gmail.com> wrote:
>
>   The core of the code looks like this:
>
>     resource = WSGIResource(reactor, reactor.getThreadPool(),
> WSGIHandler())
>     endpoint = 'tcp:port=8000'
>     server = strports.service(endpoint, server.Site(resource))
>     server.setServiceParent(application)
>
>   This has worked great for a while. However, we have some views that we
> require https on, and so this dev server doesn't allow us to get to those
> views at all. I generated a .key file and a .crt file with openssl, and
> then cat'd them together to make a pem, and then changed the endpoint to
> be...
>
>     endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem'
>
>   Now when I open my browser and type https://localhost:8000, chrome just
> hangs. I don't really know how to diagnose this, because I don't really
> know anything about SSL (it's all just magic security goodness to me). I
> don't necessarily need a direct answer (though it will certainly make me
> look good to all the other devs), but maybe some pointers in the right
> direction would help.
>
>
> This isn't really enough information to diagnose a problem, but here are
> some things you could try:
>
> openssl s_client -connect localhost:8000
> curl -vvvv https://localhost:8000/
>
> These should output some stuff about your TLS connection, and will perhaps
> emit an error message which looks obvious to you.  If not, seeing some of
> that output might be useful to help diagnose it.  Also, trying other web
> browsers is always helpful.
>

I tried Firefox and Safari right after I Chrome. I did have it slightly
working once, where I could get it connect, and if I hit the "Stop" button,
the browser would draw the served data. I thought that might have been
because the media server wasn't serving media via https, and the browser
was confused. When I tried to enable that, it stopped working altogether
(Chrome just says "Establishing secure connection" until it times out).

Here's my code now (I added Tobias' suggestion to not use the pem file):

    resource = WSGIResource(reactor, reactor.getThreadPool(), WSGIHandler())
    endpoint = 'ssl:port=8000:privateKey=server.key:certKey=server.crt'
    server = strports.service(endpoint, server.Site(resource))

When I use the openssl command you gave me, I get this:

    > openssl s_client -connect localhost:8000
    CONNECTED(00000003)
    ^C

(I had to Ctrl-C it, because it just stuck there)

When I do the curl command, I get this:

    > curl -vvvv https://localhost:8000/
    * Adding handle: conn: 0x7fd0f9813600
    * Adding handle: send: 0
    * Adding handle: recv: 0
    * Curl_addHandleToPipeline: length: 1
    * - Conn 0 (0x7fd0f9813600) send_pipe: 1, recv_pipe: 0
    * About to connect() to localhost port 8000 (#0)
    *   Trying ::1...
    *   Trying 127.0.0.1...
    * Connected to localhost (127.0.0.1) port 8000 (#0)
    ^C

(I have to Ctrl-C it too)

Maybe I generated my certs wrong or something? I just did

    openssl req -nodes -new -x509 -keyout server.key -out server.crt

...which I basically took from a OpenSSL HOWTO because I have no idea what
I'm doing.


>
> You might also try replacing your SSL string endpoint description with a
> TXSNI endpoint plugin: <https://github.com/glyph/txsni>.  This is just a
> little easier to get right because of how it reads certificates (for
> example you don't need to get your private key, chain cert, and main cert
> in the right order, as long as they're all in the appropriate file.
>

If I can't get this to work, I may bug you about txsni. I think this is a
case me just not knowing anything about OpenSSL (and the internets having
wildly varying levels of explanations) and probably doing something not
very smart. If I can learn something about OpenSSL while I facepalm, I'd
rather do that.

-Piper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140815/81624f62/attachment-0001.html>

From tobias.oberstein at tavendo.de  Fri Aug 15 11:34:37 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 15 Aug 2014 10:34:37 -0700
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
 <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>
 <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D444795530F9@EXVMBX020-12.exch020.serverdata.net>

>Maybe I generated my certs wrong or something? I just did?

Did you set the "Common Name" (CN) correctly?

FWIW, you might have look at this recipe

https://github.com/crossbario/crossbar/wiki/Secure%20WebSocket%20and%20HTTPS#using-self-signed-certificates

Ignore the other stuff / the site in general .. I am pointing there since I know for sure this works with Twisted and all browsers.

If above doesn't help: can you post your complete code (exactly as you run it)? I'll give it a shot .. 

/Tobias

From exarkun at twistedmatrix.com  Fri Aug 15 15:38:16 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 15 Aug 2014 21:38:16 -0000
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
 <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>
 <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>
Message-ID: <20140815213816.20413.379601912.divmod.xquotient.1683@top>

On 04:32 pm, piper.masden at gmail.com wrote:
>On Fri, Aug 15, 2014 at 2:15 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
>When I use the openssl command you gave me, I get this:
>
>    > openssl s_client -connect localhost:8000
>    CONNECTED(00000003)
>    ^C
>
>(I had to Ctrl-C it, because it just stuck there)

You might find it instructive to run these commands against a known 
working TLS server so you can draw some conclusions about the results 
when you use them against yours.

For example, this would show you that the TLS handshake is never 
actually completing.

Are you sure you've actually set up TLS on this port?

An http://sscce.org/ would help the list diagnose the problem.

Jean-Paul


From trac at twistedmatrix.com  Sun Aug 17 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Aug 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1408255515.72.2226655316177427200@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140817/1efc8898/attachment.html>

From sank.daniel at gmail.com  Sun Aug 17 21:05:47 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 17 Aug 2014 20:05:47 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
Message-ID: <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>

glyph,

>> 2. Do I notify you if Joe disappears on my side?
>>
> Yes.
> <
https://github.com/twisted/twisted/blob/a8227e5562a4f9074bb0d5faf6a10e91069704aa/twisted/spread/pb.py#L365-L369
>.

That's the recipient announcing deletion, not the sender. And anyway, my
questions is how _should_ this work, not how does it work right now.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140817/2732ad27/attachment.html>

From roberto.polli at babel.it  Mon Aug 18 10:14:08 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Mon, 18 Aug 2014 18:14:08 +0200
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <39F6710F-AB92-4F07-B102-79673E592CF1@twistedmatrix.com>
References: <1679209.Ym6hcXhRg7@rpolli> <4702161.N9zhnaH295@rpolli>
 <39F6710F-AB92-4F07-B102-79673E592CF1@twistedmatrix.com>
Message-ID: <4126025.5n4Bg7gA0j@rpolli>

Hi @all,

On Tuesday 12 August 2014 11:18:31 Glyph Lefkowitz wrote:
> 2- I'll create t.p.logger._syslog
> 3- I''ll patch t.p.syslog to use  t.p.logger._syslog
While writing 2, I found that

1- t.p.logger.LogLevel implements a mapping between syslog priorities and 
loglevels.
2- there's a private method which actually which doesn't seem to work as 
expected (priorities order is reversed):
  * LogLevel._priorityForLevel(LogLevel.debug) == 0
  * should be 7
3- To have a correct mapping we should add `kern` even if probably it's not a 
value which fits to a python application.
4- There's an old closed ticket on that, but it doesn't say anything about 
loglevels but only an interesting discussion about NamedConstants

Q1- Should we implement a priority mapping in LogLevel?
Q2- Should we fix that method and make it public?

Thx + Peace,
R:

-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)




From roberto.polli at babel.it  Mon Aug 18 11:50:57 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Mon, 18 Aug 2014 19:50:57 +0200
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
Message-ID: <2791328.hqOZV1DUty@rpolli>

Hi everybody,

I found some time for adding a stub of SyslogObserver to the new t.p.logger.

https://github.com/ioggstream/twisted/commit/991156e1124d61ad26da0be12123079ffc45764c

Feedback welcome!

Peace,
R.


-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)

CONFIDENZIALE: Questo messaggio ed i suoi allegati sono di carattere 
confidenziale per i destinatari in indirizzo.
E' vietato l'inoltro non autorizzato a destinatari diversi da quelli indicati 
nel messaggio originale.
Se ricevuto per errore, l'uso del contenuto e' proibito; si prega di 
comunicarlo al mittente e cancellarlo immediatamente.


From glyph at twistedmatrix.com  Mon Aug 18 12:41:01 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 11:41:01 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
Message-ID: <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>


On Aug 17, 2014, at 8:05 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> >> 2. Do I notify you if Joe disappears on my side?
> >>
> > Yes.
> > <https://github.com/twisted/twisted/blob/a8227e5562a4f9074bb0d5faf6a10e91069704aa/twisted/spread/pb.py#L365-L369>.
> 
> That's the recipient announcing deletion, not the sender.

On the sender's side, the object can't disappear unless the recipient sends the deletion.  The recipient is holding a reference to it.  This is by design - the sender can synthesize a restricted capability which has no use except for mediating the recipient's access to a particular resource (in fact, this is practically the only recommended way to use PB) and the reference to that object is held only by the server.

> And anyway, my questions is how _should_ this work, not how does it work right now.

It works this way now, and that part of the design is basically correct, I think, unless you're asking about some other aspect of it that I don't get ;).

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/282e9f0d/attachment.html>

From sank.daniel at gmail.com  Mon Aug 18 12:49:28 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 11:49:28 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
Message-ID: <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>

glyph,

> On the sender's side, the object *can't* disappear unless the recipient
sends the deletion.

Surely a resource can disappear on the server. When that happens, any
Referenceables being used to mediate access to that resource should go
away... or something, right? I must not be thinking about this correctly.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/a357f2bb/attachment.html>

From glyph at twistedmatrix.com  Mon Aug 18 13:13:51 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 12:13:51 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
Message-ID: <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>


On Aug 18, 2014, at 11:49 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> > On the sender's side, the object can't disappear unless the recipient sends the deletion.
> 
> Surely a resource can disappear on the server. When that happens, any Referenceables being used to mediate access to that resource should go away... or something, right? I must not be thinking about this correctly.

What do you mean by "disappear"?  A "resource" - i.e. a Referenceable - is just a Python object in memory.  One could of course write an intentionally malicious PB server that made it appear that an object had "disappeared" by responding with errors to all method calls sent over the wire, but in normal operation, Python objects don't spontaneously ascend to a different plane of existence - as long as there are pointers to them in memory (in the case of Referenceables that are currently in use, a reference from a dictionary on the Broker instance for the client which is using them) they will remain alive indefinitely.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/2cec9ea9/attachment.html>

From glyph at twistedmatrix.com  Mon Aug 18 13:19:11 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 12:19:11 -0700
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <2791328.hqOZV1DUty@rpolli>
References: <2791328.hqOZV1DUty@rpolli>
Message-ID: <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>

On Aug 18, 2014, at 10:50 AM, Roberto Polli <roberto.polli at babel.it> wrote:

> Hi everybody,
> 
> I found some time for adding a stub of SyslogObserver to the new t.p.logger.
> 
> https://github.com/ioggstream/twisted/commit/991156e1124d61ad26da0be12123079ffc45764c
> 
> Feedback welcome!
> 
> Peace,
> R.

For starters, DummyFile looks unnecessary.  You've got tests that make sure it isn't written to, but you just construct one and you don't pass it to anything, so of course it doesn't get written to, why would it?

This is the sort of test one might write if one were writing tests after the fact, rather than test-driven as Twisted's process recommends.  You weren't writing tests last, were you? ;-)

It also looks like the sort of thing you copied and pasted out of test_file.py.  Please don't copy and paste; if you want to import a helper from elsewhere in the test suite, just import it.

Is this otherwise ready for review?

-glyph



From glyph at twistedmatrix.com  Mon Aug 18 13:22:15 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 12:22:15 -0700
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <4126025.5n4Bg7gA0j@rpolli>
References: <1679209.Ym6hcXhRg7@rpolli> <4702161.N9zhnaH295@rpolli>
 <39F6710F-AB92-4F07-B102-79673E592CF1@twistedmatrix.com>
 <4126025.5n4Bg7gA0j@rpolli>
Message-ID: <1AB00CEC-DC87-4E1F-B842-F5645D40CBF2@twistedmatrix.com>


On Aug 18, 2014, at 9:14 AM, Roberto Polli <roberto.polli at babel.it> wrote:

> Hi @all,
> 
> On Tuesday 12 August 2014 11:18:31 Glyph Lefkowitz wrote:
>> 2- I'll create t.p.logger._syslog
>> 3- I''ll patch t.p.syslog to use  t.p.logger._syslog
> While writing 2, I found that
> 
> 1- t.p.logger.LogLevel implements a mapping between syslog priorities and 
> loglevels.

Yeah, I remember working on this and I was actually a little surprised we didn't take it further and implement syslog entirely.  So I'm glad you're working on this.

> 2- there's a private method which actually which doesn't seem to work as 
> expected (priorities order is reversed):

Sounds like that should be fixed!  Perhaps you could submit a ticket which was just this fix, to get something landed more quickly? :-).

>  * LogLevel._priorityForLevel(LogLevel.debug) == 0
>  * should be 7
> 3- To have a correct mapping we should add `kern` even if probably it's not a 
> value which fits to a python application.

Thoroughness in implementation of specifications is generally a virtue.

> 4- There's an old closed ticket on that, but it doesn't say anything about 
> loglevels but only an interesting discussion about NamedConstants

Link?  If you think that ticket ended up being about something else, you can always file a new one.  Thanks for looking it up first though, it's always good to avoid duplicates when we can.

> Q1- Should we implement a priority mapping in LogLevel?
> Q2- Should we fix that method and make it public?

It doesn't have to be public just because it's used by two parts of the log system implementation.  Public methods in Twisted are also considered "published"; it's usually better to call private methods internally than to expose a whole bunch of implementation details to application code which it can then start depending upon and making it impossible for us to fix without breaking the compatibility policy.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/7a7640f7/attachment.html>

From sank.daniel at gmail.com  Mon Aug 18 13:37:29 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 12:37:29 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
Message-ID: <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>

glyph,

> A "resource" - i.e. a Referenceable - is just a Python object in memory.

Indeed.

> but in normal operation, Python objects don't spontaneously ascend
> to a different plane of existence - as long as there are pointers to them
in
> memory

Of course.

> in the case of Referenceables that are currently in use, a reference
> from a dictionary on the Broker instance for the client which is using
> them

Suppose I have a Thingy:

myThingy = Thingy()

I want to give you some amount of access to manipulate myThingy, so I make
a Referenceable which has some connection to it:

myReferenceable.thingy = weakref.proxy(myThingy)

and I send you the Referenceable. Now suppose I do

del myThingy

Now myThingy will be garbage collected. Then, if you invoke methods on
myReferenceable, they'll fail. Is this what we want, or should I tell you
that your RemoteReference should be considered stale?

If I'm not thinking about this correctly please advise. I realize that I
could have done

myReferenceable.thingy = myThingy

so that myThingy lives as long as myReferenceable, but this doesn't
actually seem like what I would normally want.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/0fdcda12/attachment-0001.html>

From glyph at twistedmatrix.com  Mon Aug 18 14:01:02 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 13:01:02 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
Message-ID: <2E454D37-7A76-4527-8ABF-894E1E1E10F0@twistedmatrix.com>


On Aug 18, 2014, at 12:37 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> > A "resource" - i.e. a Referenceable - is just a Python object in memory.
> 
> Indeed.
> 
> > but in normal operation, Python objects don't spontaneously ascend
> > to a different plane of existence - as long as there are pointers to them in
> > memory
> 
> Of course.
> 
> > in the case of Referenceables that are currently in use, a reference
> > from a dictionary on the Broker instance for the client which is using
> > them
> 
> Suppose I have a Thingy:
> 
> myThingy = Thingy()
> 
> I want to give you some amount of access to manipulate myThingy, so I make a Referenceable which has some connection to it:
> 
> myReferenceable.thingy = weakref.proxy(myThingy)
> 
> and I send you the Referenceable. Now suppose I do
> 
> del myThingy
> 
> Now myThingy will be garbage collected. Then, if you invoke methods on myReferenceable, they'll fail. Is this what we want, or should I tell you that your RemoteReference should be considered stale?
> 
> If I'm not thinking about this correctly please advise. I realize that I could have done
> 
> myReferenceable.thingy = myThingy
> 
> so that myThingy lives as long as myReferenceable, but this doesn't actually seem like what I would normally want.

Why would you not normally want that?

What you're saying here is that MyReferenceable requires a thingy in the 'thingy' attribute to do its job.  MyReferenceable is a Python class in your application - its clients will call its methods, and it should take care that its methods do something sensible.  The fact that its clients are remote via the Broker class is almost irrelevant.

If you pass a type MyReferenceable doesn't expect - a weakref.proxy that suddenly becomes invalid when the inner object goes away - you'll get nonsense behavior.  But this isn't specific to Referenceable or remote access - if you just had an A and a B, and A expects a 'b' attribute that's a B, and you set 'b' to something that isn't a B, you get the same kind of nonsense behavior. 

(Also, if you require a 'thingy' attribute it should probably be a constructor argument rather than an externally-set attribute, so that the instance is initially in a valid state.)

-glyph





From roberto.polli at babel.it  Mon Aug 18 14:34:53 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Mon, 18 Aug 2014 22:34:53 +0200
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>
References: <2791328.hqOZV1DUty@rpolli>
 <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>
Message-ID: <3415350.qaLh0yVden@rpolli>

Hi Glyph,

thx for your feedback!

> Is this otherwise ready for review?
Not ready for review: there's even to check the interoperability with twistd 
;)
I was concerned about to be on the right track, eg: 
1- is it fine to patch SyslogObserver.syslog or should I pass it as a 
parameter to SyslogObserver(...,syslog=stdsyslog.syslog)?
2- should syslog severity be implemented _syslog.py or in LogLevels


On Monday 18 August 2014 12:19:11 Glyph Lefkowitz wrote:
> > ..a stub of SyslogObserver to the new t.p.logger.
> > 
> > https://github.com/ioggstream/twisted/commit/991156e1124d61ad26da0be121230
> > 79ffc45764c
 
> ...DummyFile looks unnecessary. 
> you copied and pasted out of test_file.py. 
As I didn't know how the new logger worked, I started duplicating:
 * _file.py -> _syslog.py
 * test_file.py -> test_syslog.py
And merging t.p.test.test_syslog behavior into test_syslog.

> You weren't writing tests last, were you? ;-)
Nope :) Iteratively modifying test_syslog.py then _syslog.py so that I could 
get in touch with the new logger.

Thx again for all your time + Peace,
R.

-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)



From dustin at v.igoro.us  Mon Aug 18 15:18:48 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 18 Aug 2014 17:18:48 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
Message-ID: <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>

On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
> and I send you the Referenceable. Now suppose I do
>
> del myThingy
>
> Now myThingy will be garbage collected.

No, this is simply incorrect.  'del myThingy' simply removes a
reference to the object to which myThingy refers.

If and only if that's the last reference (as determined by Python's
reference counting), it is deleted.  As glyph said, as long as there
is an outstanding remote reference, the Broker keeps a Python
reference to the object internally, preventing the reference count
from reaching zero, preventing the object from being deleted.

Dustin


From sank.daniel at gmail.com  Mon Aug 18 15:25:37 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 14:25:37 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
Message-ID: <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>

Dustin,

> No, this is simply incorrect.  'del myThingy' simply removes
> a reference to the object to which myThingy refers.

Argh. I'm assuming, as in the example, that the only strong reference to
myThingy is the one I own.

> the Broker keeps a Python reference to the object internally,
> preventing the reference count from reaching zero,
> preventing the object from being deleted.

I understand that. I'm trying to ask if that's how it _should_ work. If I
have a resource and make a Referenceable to give you access to it, it
doesn't really make sense to me that my resource should be kept alive just
because you have that access. It seems more reasonable to me that your
access object should reference my resource _weakly_ and that you should
receive some kind of notification if and when the resource expires.

It's just like the case of a GUI and a business logic object. The GUI
probably gets a reference to the business logic object so that eg. button
pushes can invoke methods on the object. However, that reference should
probably be weak so that the business logic object can be garbage collected
when it's finished with its business. There's no sense (to me) in keeping
an object alive because a GUI, logger, or other observer is observing it.
Am I just wrong?

Daniel


On Mon, Aug 18, 2014 at 2:18 PM, Dustin J. Mitchell <dustin at v.igoro.us>
wrote:

> On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com>
> wrote:
> > and I send you the Referenceable. Now suppose I do
> >
> > del myThingy
> >
> > Now myThingy will be garbage collected.
>
> No, this is simply incorrect.  'del myThingy' simply removes a
> reference to the object to which myThingy refers.
>
> If and only if that's the last reference (as determined by Python's
> reference counting), it is deleted.  As glyph said, as long as there
> is an outstanding remote reference, the Broker keeps a Python
> reference to the object internally, preventing the reference count
> from reaching zero, preventing the object from being deleted.
>
> Dustin
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/9b844ddd/attachment.html>

From dustin at v.igoro.us  Mon Aug 18 17:30:06 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 18 Aug 2014 19:30:06 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
Message-ID: <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>

Indeed, what you're expecting is very much against the design of PB.

Dustin


On Mon, Aug 18, 2014 at 5:25 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Dustin,
>
> > No, this is simply incorrect.  'del myThingy' simply removes
> > a reference to the object to which myThingy refers.
>
> Argh. I'm assuming, as in the example, that the only strong reference to
> myThingy is the one I own.
>
> > the Broker keeps a Python reference to the object internally,
> > preventing the reference count from reaching zero,
> > preventing the object from being deleted.
>
> I understand that. I'm trying to ask if that's how it _should_ work. If I
> have a resource and make a Referenceable to give you access to it, it
> doesn't really make sense to me that my resource should be kept alive just
> because you have that access. It seems more reasonable to me that your
> access object should reference my resource _weakly_ and that you should
> receive some kind of notification if and when the resource expires.
>
> It's just like the case of a GUI and a business logic object. The GUI
> probably gets a reference to the business logic object so that eg. button
> pushes can invoke methods on the object. However, that reference should
> probably be weak so that the business logic object can be garbage collected
> when it's finished with its business. There's no sense (to me) in keeping
> an object alive because a GUI, logger, or other observer is observing it.
> Am I just wrong?
>
> Daniel
>
>
> On Mon, Aug 18, 2014 at 2:18 PM, Dustin J. Mitchell <dustin at v.igoro.us>
> wrote:
>
>> On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com>
>> wrote:
>> > and I send you the Referenceable. Now suppose I do
>> >
>> > del myThingy
>> >
>> > Now myThingy will be garbage collected.
>>
>> No, this is simply incorrect.  'del myThingy' simply removes a
>> reference to the object to which myThingy refers.
>>
>> If and only if that's the last reference (as determined by Python's
>> reference counting), it is deleted.  As glyph said, as long as there
>> is an outstanding remote reference, the Broker keeps a Python
>> reference to the object internally, preventing the reference count
>> from reaching zero, preventing the object from being deleted.
>>
>> Dustin
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/23365e4f/attachment-0001.html>

From sank.daniel at gmail.com  Mon Aug 18 18:28:47 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 17:28:47 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
Message-ID: <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>

Dustin and glyph,

> Indeed, what you're expecting is very much against the design of PB.

I see. The existing Referenceable code now makes sense to me, since I now
understand the intent. Thank you.

Would having something like Referenceable but which is not reference
counted across the network, and which receives a notification when the
server-side object dies, be useful [1]?

I'm thinking of the case where I use pb to play chess over the network. If
a piece is captured, the server's reference to that object will be deleted.
There is no sense, in this case, for the object representing the piece to
persist, and certainly not because the client's happen to have knowledge
that the piece existed once upon a time.

Daniel

[1] I haven't delved into the Viewable code yet, so that might be what I'm
describing.



On Mon, Aug 18, 2014 at 4:30 PM, Dustin J. Mitchell <dustin at v.igoro.us>
wrote:

> Indeed, what you're expecting is very much against the design of PB.
>
> Dustin
>
>
> On Mon, Aug 18, 2014 at 5:25 PM, Daniel Sank <sank.daniel at gmail.com>
> wrote:
>
>> Dustin,
>>
>> > No, this is simply incorrect.  'del myThingy' simply removes
>> > a reference to the object to which myThingy refers.
>>
>> Argh. I'm assuming, as in the example, that the only strong reference to
>> myThingy is the one I own.
>>
>> > the Broker keeps a Python reference to the object internally,
>> > preventing the reference count from reaching zero,
>> > preventing the object from being deleted.
>>
>> I understand that. I'm trying to ask if that's how it _should_ work. If I
>> have a resource and make a Referenceable to give you access to it, it
>> doesn't really make sense to me that my resource should be kept alive just
>> because you have that access. It seems more reasonable to me that your
>> access object should reference my resource _weakly_ and that you should
>> receive some kind of notification if and when the resource expires.
>>
>> It's just like the case of a GUI and a business logic object. The GUI
>> probably gets a reference to the business logic object so that eg. button
>> pushes can invoke methods on the object. However, that reference should
>> probably be weak so that the business logic object can be garbage collected
>> when it's finished with its business. There's no sense (to me) in keeping
>> an object alive because a GUI, logger, or other observer is observing it.
>> Am I just wrong?
>>
>> Daniel
>>
>>
>> On Mon, Aug 18, 2014 at 2:18 PM, Dustin J. Mitchell <dustin at v.igoro.us>
>> wrote:
>>
>>> On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com>
>>> wrote:
>>> > and I send you the Referenceable. Now suppose I do
>>> >
>>> > del myThingy
>>> >
>>> > Now myThingy will be garbage collected.
>>>
>>> No, this is simply incorrect.  'del myThingy' simply removes a
>>> reference to the object to which myThingy refers.
>>>
>>> If and only if that's the last reference (as determined by Python's
>>> reference counting), it is deleted.  As glyph said, as long as there
>>> is an outstanding remote reference, the Broker keeps a Python
>>> reference to the object internally, preventing the reference count
>>> from reaching zero, preventing the object from being deleted.
>>>
>>> Dustin
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> --
>> Daniel Sank
>> Department of Physics
>> Broida Hall
>> University of California
>> Santa Barbara, CA 93117
>> (805)893-3899
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/4439a304/attachment.html>

From dustin at v.igoro.us  Mon Aug 18 21:16:03 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 18 Aug 2014 23:16:03 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
Message-ID: <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>

Adding what amounts to a use-after-free bug to the protocol seems like a
really bad idea to me.

Perhaps you see a more compelling use-case than the chess example.  In just
about any case I can think of, I'm not at all concerned about when garbage
collection takes place.  Certainly it opens you to a denial of service from
a malicious client, which might hold references to objects you'd rather it
didn't, but PB's not made for use in hostile situations, and anyway it has
an upper limit (hard-coded to 4096) on the number of references a client
can hold.  Trust me, Buildbot users run up against that limit all the time.

If your server-side app is sensitive to when objects are destroyed for any
reason aside from management of its memory consumption, I'd argue your app
is broken.

It's worth noting that Buildbot also ran into a nasty bug in an older
version of Twisted that caused the broker to not unreference objects
correctly, which led to quite a bit of memory usage.

Dustin



On Mon, Aug 18, 2014 at 8:28 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Dustin and glyph,
>
> > Indeed, what you're expecting is very much against the design of PB.
>
> I see. The existing Referenceable code now makes sense to me, since I now
> understand the intent. Thank you.
>
> Would having something like Referenceable but which is not reference
> counted across the network, and which receives a notification when the
> server-side object dies, be useful [1]?
>
> I'm thinking of the case where I use pb to play chess over the network. If
> a piece is captured, the server's reference to that object will be deleted.
> There is no sense, in this case, for the object representing the piece to
> persist, and certainly not because the client's happen to have knowledge
> that the piece existed once upon a time.
>
> Daniel
>
> [1] I haven't delved into the Viewable code yet, so that might be what I'm
> describing.
>
>
>
> On Mon, Aug 18, 2014 at 4:30 PM, Dustin J. Mitchell <dustin at v.igoro.us>
> wrote:
>
>> Indeed, what you're expecting is very much against the design of PB.
>>
>> Dustin
>>
>>
>> On Mon, Aug 18, 2014 at 5:25 PM, Daniel Sank <sank.daniel at gmail.com>
>> wrote:
>>
>>> Dustin,
>>>
>>> > No, this is simply incorrect.  'del myThingy' simply removes
>>> > a reference to the object to which myThingy refers.
>>>
>>> Argh. I'm assuming, as in the example, that the only strong reference to
>>> myThingy is the one I own.
>>>
>>> > the Broker keeps a Python reference to the object internally,
>>> > preventing the reference count from reaching zero,
>>> > preventing the object from being deleted.
>>>
>>> I understand that. I'm trying to ask if that's how it _should_ work. If
>>> I have a resource and make a Referenceable to give you access to it, it
>>> doesn't really make sense to me that my resource should be kept alive just
>>> because you have that access. It seems more reasonable to me that your
>>> access object should reference my resource _weakly_ and that you should
>>> receive some kind of notification if and when the resource expires.
>>>
>>> It's just like the case of a GUI and a business logic object. The GUI
>>> probably gets a reference to the business logic object so that eg. button
>>> pushes can invoke methods on the object. However, that reference should
>>> probably be weak so that the business logic object can be garbage collected
>>> when it's finished with its business. There's no sense (to me) in keeping
>>> an object alive because a GUI, logger, or other observer is observing it.
>>> Am I just wrong?
>>>
>>> Daniel
>>>
>>>
>>> On Mon, Aug 18, 2014 at 2:18 PM, Dustin J. Mitchell <dustin at v.igoro.us>
>>> wrote:
>>>
>>>> On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com>
>>>> wrote:
>>>> > and I send you the Referenceable. Now suppose I do
>>>> >
>>>> > del myThingy
>>>> >
>>>> > Now myThingy will be garbage collected.
>>>>
>>>> No, this is simply incorrect.  'del myThingy' simply removes a
>>>> reference to the object to which myThingy refers.
>>>>
>>>> If and only if that's the last reference (as determined by Python's
>>>> reference counting), it is deleted.  As glyph said, as long as there
>>>> is an outstanding remote reference, the Broker keeps a Python
>>>> reference to the object internally, preventing the reference count
>>>> from reaching zero, preventing the object from being deleted.
>>>>
>>>> Dustin
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>
>>>
>>>
>>> --
>>> Daniel Sank
>>> Department of Physics
>>> Broida Hall
>>> University of California
>>> Santa Barbara, CA 93117
>>> (805)893-3899
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/a8f1c5a7/attachment-0001.html>

From sank.daniel at gmail.com  Mon Aug 18 21:31:50 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 20:31:50 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
Message-ID: <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>

Dustin,

> Adding what amounts to a use-after-free bug to the protocol seems like a
really bad idea to me.

Oh goody, a sarcastic comment which doesn't actually bother to explain the
bug :)

Since what I describe is basically WeakReferenceable, it's not obvious to
me that there's a bug. I tell you when the thing to which your
Remote(Weak)Reference points is destroyed, just like weak references invoke
finalization callbacks. If you try to invoke remote methods after than
happens I just return you an error. What's the problem? This is exactly how
weak references work.

> If your server-side app is sensitive to when objects are destroyed for
any reason aside
> from management of its memory consumption, I'd argue your app is broken.

That's a really good point. Only CPython destroys objects deterministically
when the ref count hits zero.

> Certainly it opens you to a denial of service from a malicious client,
which might hold references
> to objects you'd rather it didn't

So my instinct to keep strong references only where they're needed is just
bad? Should a GUI or a logger keep a strong reference to the things they
observe?

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140818/96ff6e9c/attachment.html>

From glyph at twistedmatrix.com  Tue Aug 19 01:53:02 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Aug 2014 00:53:02 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
Message-ID: <31338DD1-3E05-430B-AB26-6F743F830E2F@twistedmatrix.com>


On Aug 18, 2014, at 2:25 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> It's just like the case of a GUI and a business logic object. The GUI probably gets a reference to the business logic object so that eg. button pushes can invoke methods on the object. However, that reference should probably be weak so that the business logic object can be garbage collected when it's finished with its business. There's no sense (to me) in keeping an object alive because a GUI, logger, or other observer is observing it. Am I just wrong?

When it comes to GUI toolkits, there are two philosophies on this.

One, embodied in toolkits like OS X's Cocoa and (if you squint at it just right) Qt, is that this reference should always be weak (or, you know, __unsafe __unretained which is like "weak" with a bit of a speech impediment) because something else (a window management layer, for example, or a data-access layer updating some data) will probably be holding the reference.  This is popular in C-style toolkits with an object model and reference counting because there's often an implicit circular reference between a view and its controller, and cleaning that up in C or C++ can be messy.

Another, embodied in toolkits like GTK+ and the JavaScript DOM, is that this reference should always be strong, because the GUI can logically manipulate the model object it refers to, and so it should have a strong reference - otherwise GUI actions might spontaneously start causing crashes when something unrelated forgets about that object.

I am a big fan of the latter style.  Although there is often something to hold that strong reference, sometimes there is actually nothing else to hold it, and so you have to create bizarre lifecycle shenanigans to replicate the fairly straightforward behavior of "the user's eyeballs are looking at the screen, there's a window on the screen, the window refers to my model object, therefore the user's eyeballs have a strong reference to my model object".  Some things that present GUIs are observers, some things are manipulators; the former model works for observers, the latter model works well for both.

So I'm inclined to say you're wrong.  However, according to the efficient-market hypothesis, Cocoa must be better than any of those other things, so I may be in a minority there.

Nevertheless in PB the distinction is even more stark: if your example is that you have a model object with a GUI observer, it is the GUI that would expose the Referenceable, because the model would need to call methods on the view to update it.  So this isn't about whether your model stays memory-resident while the GUI is up, but rather, whether the GUI itself stays memory-resident while the model is alive!  Obviously you wouldn't want your GUI or your logger to disappear while the model is still active.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140819/e6a80995/attachment.html>

From glyph at twistedmatrix.com  Tue Aug 19 02:04:13 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Aug 2014 01:04:13 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
 <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
Message-ID: <6A9957DF-8797-494C-BBCB-F2D330F65BAF@twistedmatrix.com>


On Aug 18, 2014, at 8:31 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Dustin,
> 
> > Adding what amounts to a use-after-free bug to the protocol seems like a really bad idea to me.
> 
> Oh goody, a sarcastic comment which doesn't actually bother to explain the bug :)

Oddly this is _exactly_ how a co-worker characterized the problem as well, with (as far as I can see) no communication of this idea ;).

<http://cwe.mitre.org/data/definitions/416.html> describes the disastrous consequences of this in C; the Python equivalent is mild, but it's still annoying to get 'None has no attribute "frob"' when you do self.frobber.frob().

> Since what I describe is basically WeakReferenceable, it's not obvious to me that there's a bug. I tell you when the thing to which your Remote(Weak)Reference points is destroyed, just like weak references invoke finalization callbacks. If you try to invoke remote methods after than happens I just return you an error. What's the problem? This is exactly how weak references work.

The thing about weak references is that they are almost always to objects that are shared, that have a well-defined lifecycle.  Your PB objects generally should _not_ be shared; a well-structured PB application will almost always create thin wrapper objects, factoring the remote-access-control logic out of the core model abstractions.  Exposing weak references across a network is also very, very tricky: distributed reference counting is hard enough without trying to introduce real distributed GC that involves reference tracing.

> > If your server-side app is sensitive to when objects are destroyed for any reason aside
> > from management of its memory consumption, I'd argue your app is broken.
> 
> That's a really good point. Only CPython destroys objects deterministically when the ref count hits zero.

Yes. And even the CPython developers have said it's effectively a bug to depend on this behavior, because you can't really know when it's going to happen.  A debugger might be holding on to your stack frames for a little while.  The profiler might be keeping your locals around for a moment longer than you expect.  This is why we have idioms like 'with f as open(...)' now.

> > Certainly it opens you to a denial of service from a malicious client, which might hold references
> > to objects you'd rather it didn't
> 
> So my instinct to keep strong references only where they're needed is just bad?

Here are a couple of ways to solve this problem without getting weak references involved:

Set limits on things.  PB isn't great about this, but this is an area where it could get better, and where all the fixes are really straightforward (find the place where PB does a thing, set a limit, raise an exception if the thing is over that limit). In this case, don't allow clients to hold unlimited numbers of simultaneous references.  Start throwing errors when too many live references exist on one connection.  A reasonable application should not need that many at once - if you set a limit at around 1024 and allow servers to tune it for particular workloads, it should be fine.  (Set it per-type maybe?)
Don't give out references to objects you can't revoke logically, at an application level.  If you have a chess piece that has been taken, that is not a NULL pointer or None.  There is a small, fixed number of chess pieces per game, so you don't have to worry about denials of service.  Therefore your ChessPiece class should have a 'taken' state associated with it; in fact, you could remember which move of the game the piece was taken on, and produce an error message which specifically reminds the player when it was taken.  Much like 'with f as open(...)' explicitly invokes 'f.close()' at the end of the block but does not force 'f' to get garbage collected, you should still be able to have a PB protocol-level reference to an application-level revoked object.  Debugging distributed systems is hard enough without translating every revoked-permission error into some common "the distributed GC happened, I don't know what happened to your object, life is hard".

Is this making sense?

> Should a GUI or a logger keep a strong reference to the things they observe?


As my other message indicated - yes :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140819/6a224022/attachment-0001.html>

From exarkun at twistedmatrix.com  Tue Aug 19 06:05:10 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 19 Aug 2014 12:05:10 -0000
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
 <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
Message-ID: <20140819120510.20413.384298951.divmod.xquotient.1691@top>

On 03:31 am, sank.daniel at gmail.com wrote:
>Dustin,
>>Adding what amounts to a use-after-free bug to the protocol seems like 
>>a
>really bad idea to me.
>
>Oh goody, a sarcastic comment which doesn't actually bother to explain 
>the
>bug :)

Sarcastic?  What?  Dustin *was* explaining the problem.  Without 
sarcasm, so far as I can tell.

Jean-Paul


From ccx at webprojekty.cz  Tue Aug 19 16:58:19 2014
From: ccx at webprojekty.cz (Jan Pobrislo)
Date: Wed, 20 Aug 2014 00:58:19 +0200
Subject: [Twisted-Python] Experimenting with tubes
In-Reply-To: <E10C96F8-4EEA-4752-A4AA-89AF27FE7DE4@twistedmatrix.com>
References: <84AC8E3500000000.9827000000000000.reformail@dorje>
 <E10C96F8-4EEA-4752-A4AA-89AF27FE7DE4@twistedmatrix.com>
Message-ID: <20140820005819.0db347af@tm>

On Thu, 14 Aug 2014 14:29:56 -0700
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Aug 11, 2014, at 6:51 AM, ccx at webprojekty.cz wrote:
> 
> > Hello, I've been playing with the new tubes that are being
> > implemented:
> > http://comments.gmane.org/gmane.comp.python.twisted/27248
> > https://twistedmatrix.com/trac/ticket/1956
> 
> Thanks so much for taking the time to play with it, and taking some
> time to write feedback.
> 
> > Here are few things that I did with it. I won't publish the full
> > code now, as in it's current shape it could implode eyeballs of
> > twisted devs and possibly make them summon some of the elder gods,
> > but I'll see if I can produce something less vile as I merge the
> > ongoing changes to the tubes branch.
> 
> I'd be interested to see the code nevertheless.  If you had to do
> eyeball-imploding antics to get Tubes to work well for your use-case,
> being able to have a look at that would help us evaluate whether
> those antics were required by the code, encouraged by misfeatures of
> the API design, or just issues with lack of documentation.

It's mostly me not really documenting anything, not writing tests and
littering it with debug statements (which will go away as soon as I
find time to improve my debugging module so it can monkeypatch them).

http://wpr.cz/ccx/bzr/tubes7/ for my changes only
http://wpr.cz/ccx/bzr/tubes7-merge-2/ for changes on top of the bzr
mirror of the svn branch

example usage:
http://wpr.cz/ccx/paste/2014-08-19/2/
http://wpr.cz/ccx/paste/2014-08-19/3/
http://wpr.cz/ccx/paste/2014-08-19/4/
http://wpr.cz/ccx/paste/2014-08-19/5/


> > So far I wrote relatively simple app that read logfiles, parse them
> > and insert what they got out of them into a database.
> 
> If it's actually reading a file, another nice to-do would be an
> IFount provider that provides the contents of a file with appropriate
> flow control, and maybe a thread or process in the background to do
> the file I/O.  Another thing you could contribute to the branch,
> possibly?  :-)  How did you implement this?

At the moment I don't mind the blockingness of the calls. I did write a
ThreadReader and ThreadWriter though for my earlier tubes-alike with
Queue-based loop.

What is more interesting challenge (and we discussed this earlier on
irc) would be generic async file api. I suggested implementing 9p2000
back then and I still think it is a good starting point... but nothing
I have spare time for at the moment.


> I'm not sure I totally understand the case that you're describing
> right now.  Can you perhaps contribute a unit test which demonstrates
> why this line of code is necessary?

I'd love to, alas I'll be bit preocuppied with some more urgent matters
for following week or two. The short version is "flowStopped just
didn't get passed through the series otherwise".


> Are you running into <https://twistedmatrix.com/trac/ticket/7546>?

Most probably, as far as I can tell from the vague description.


> That ... definitely sounds kind of gross.  As does actually setting
> the nextFount attribute directly on the fan.Out.

Indeed. The point of the experiment was not produce nice code but to
see if there are any major pitfalls using the tubes API.


> twisted.web.client.Agent has a solution to this where there's a
> multi-failure object that aggregates multiple errors into one thing.
> I think we have to do something similar.  Unfortunately this is a
> very confusing interface in addition to being poorly documented and
> relies on private classes that expose ostensibly public attributes.
> We need to very carefully document this within fan.In.

Some nice abstraction of multiple failures would be indeed handy. I'm
pretty sure DeferredList could use one too.

 
> > As for data representation that I choose to pass between each tube
> > I've started with simple namedtuples and following that I've built
> > a simple "datatype" class somewhat reminiscent of
> > https://github.com/hynek/characteristic
> > which I learned of few moments after I finished polishing my own
> > implementation. What I have there is added layer above namedtuples
> > that autogenerate zope Interfaces (so I can have adaptation), do
> > field type and value validation/adaptation and possibly (as a
> > future extension) provide easy way to make them into AMP commands
> > so the series can be split into communicating processes as needed.
> > (What would be interesting imo is something like ampoule for tubes,
> > or perhaps a ThreadTube and SubprocessTube for performing blocking
> > operations)
> 
> I think it's likely we'll acquire a dependency on Characteristic
> sometime soon, I have promised to look at the issues on
> <https://github.com/hynek/characteristic/pull/13> and try to address
> them already :).

What makes me ponder is how to work with multiple types of messages
being passed through. Traditionally in twisted one would use different
methods for handling each one, eg. IRCClient has userJoined, userLeft,
and so on. If we keep tubes as they are with a single received() method
then somehow we need to be able to tell those messages apart,
deconstruct them and mainly document them and test for proper handling
of all cases.

Instinctively I started looking for algebraic data types, but making
those work on python is high-level metaprogramming magic and that
either implies python3.3+ or AST rewriting:
https://github.com/lihaoyi/macropy

Perhaps what would be bearable is AST-based checker (integrated into
testcases perhaps) that would do exhaustiveness and field name checking
for such complex data - so all users of a tube/fount producing some
type woud be flagged whenever the type signature of it changes.

Other possible resolution is to mantain the multi-method approach and
make tubes into pausing mechanism only. I think it could work somewhat
like:

@pauseable
def lineReceived(line):
    ...
    # get reference object of specified interface
    # and wait until it is unpaused
    (yield IIRCClient).userJoined(...)

The first obvious downside of this approach that I see is that we now
need proxy objects for generic fan-in/out.

> > Also maybe of note is the implementation of Pipes in Async library
> > for OCaml which I've been examining lately. What they seem to do
> > there is that they push values downstream and the function called
> > in each processing step may return deferred signifying a pause is
> > requested until this deferred is fired. For those interested in the
> > details you can refer to:
> > https://ocaml.janestreet.com/ocaml-core/111.25.00/doc/async/#Std.Pipe
> > and the relevant section of Real World OCaml book (available
> > online).
> 
> Creating a token for every single call to .receive() makes life
> hard.  Deferred could go to some trouble to be a cheaper token to
> pass around (especially on PyPy) but doing it this way is also
> error-prone as a mistaken error-handler in the Deferred chain means
> that the default behavior of buggy code un-hooks your loop and leaves
> idle data sources that will never be cleaned up.

How does current approach prevent that? From what I see unhandled
exception in non-well written drain can do the very much same. Tubes
are handled specially so it can be prevented there.


> I worked quite a bit with the 'Streams' interface in web2 on Calendar
> Server, and my conclusion there is that while this is better than
> nothing (it was very nice to be able to just return a Stream rather
> than cobble together something that returned NOT_DONE_YET every time)
> it was (A) slow and (B) error prone.  Tubes are designed specifically
> to avoid this error.  Although you can return Deferreds internally,
> no consumer ever needs to write the callback-loop that calls .read()
> again from a callback on .read().

I agree that something like tubes is needed, but it can be a
upper-level layer over something simple as flow-signalling callbacks.

Anyway, linked mostly for inspiration.

What I'd really like to see though is some rationale for current design
choices of tubes - eg. list of reasons the previous attempts failed and
how does each next address the issues. :-)

- ccxcz


From glyph at twistedmatrix.com  Tue Aug 19 23:21:13 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Aug 2014 22:21:13 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <20140819120510.20413.384298951.divmod.xquotient.1691@top>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
 <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
 <20140819120510.20413.384298951.divmod.xquotient.1691@top>
Message-ID: <ABDEC16E-160C-47B2-B9DC-B1C89D402ADA@twistedmatrix.com>


On Aug 19, 2014, at 5:05 AM, exarkun at twistedmatrix.com wrote:

> On 03:31 am, sank.daniel at gmail.com wrote:
>> Dustin,
>>> Adding what amounts to a use-after-free bug to the protocol seems like a
>> really bad idea to me.
>> 
>> Oh goody, a sarcastic comment which doesn't actually bother to explain the
>> bug :)
> 
> Sarcastic?  What?  Dustin *was* explaining the problem.  Without sarcasm, so far as I can tell.

My response may have come across as a little ambiguous, so let me also say - I think use-after-free is a pretty accurate description of the issue as well, I don't believe this was intended sarcastically.

-glyph



From dustin at v.igoro.us  Wed Aug 20 06:36:32 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Wed, 20 Aug 2014 08:36:32 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <ABDEC16E-160C-47B2-B9DC-B1C89D402ADA@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
 <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
 <20140819120510.20413.384298951.divmod.xquotient.1691@top>
 <ABDEC16E-160C-47B2-B9DC-B1C89D402ADA@twistedmatrix.com>
Message-ID: <CAJtE5vSwfqnb1EB2YvLU90AvY0QhNC0ieiA9AKGnvH3=k5UYdA@mail.gmail.com>

And since it's come up, no, I didn't mean that either.  It was a
(somewhat colorful) description of my perspective on the question.

Dustin

On Wed, Aug 20, 2014 at 1:21 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Aug 19, 2014, at 5:05 AM, exarkun at twistedmatrix.com wrote:
>
>> On 03:31 am, sank.daniel at gmail.com wrote:
>>> Dustin,
>>>> Adding what amounts to a use-after-free bug to the protocol seems like a
>>> really bad idea to me.
>>>
>>> Oh goody, a sarcastic comment which doesn't actually bother to explain the
>>> bug :)
>>
>> Sarcastic?  What?  Dustin *was* explaining the problem.  Without sarcasm, so far as I can tell.
>
> My response may have come across as a little ambiguous, so let me also say - I think use-after-free is a pretty accurate description of the issue as well, I don't believe this was intended sarcastically.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Thu Aug 21 01:36:52 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 21 Aug 2014 00:36:52 -0700
Subject: [Twisted-Python] Experimenting with tubes
In-Reply-To: <20140820005819.0db347af@tm>
References: <84AC8E3500000000.9827000000000000.reformail@dorje>
 <E10C96F8-4EEA-4752-A4AA-89AF27FE7DE4@twistedmatrix.com>
 <20140820005819.0db347af@tm>
Message-ID: <BCF85B9A-9BA6-4444-95C6-B79AB1493D9C@twistedmatrix.com>

On Aug 19, 2014, at 3:58 PM, Jan Pobrislo <ccx at webprojekty.cz> wrote:

> On Thu, 14 Aug 2014 14:29:56 -0700
> Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> On Aug 11, 2014, at 6:51 AM, ccx at webprojekty.cz wrote:
>> 
>>> Hello, I've been playing with the new tubes that are being
>>> implemented:
>>> http://comments.gmane.org/gmane.comp.python.twisted/27248
>>> https://twistedmatrix.com/trac/ticket/1956
>> 
>> Thanks so much for taking the time to play with it, and taking some
>> time to write feedback.
>> 
>>> Here are few things that I did with it. I won't publish the full
>>> code now, as in it's current shape it could implode eyeballs of
>>> twisted devs and possibly make them summon some of the elder gods,
>>> but I'll see if I can produce something less vile as I merge the
>>> ongoing changes to the tubes branch.
>> 
>> I'd be interested to see the code nevertheless.  If you had to do
>> eyeball-imploding antics to get Tubes to work well for your use-case,
>> being able to have a look at that would help us evaluate whether
>> those antics were required by the code, encouraged by misfeatures of
>> the API design, or just issues with lack of documentation.
> 
> It's mostly me not really documenting anything, not writing tests and
> littering it with debug statements (which will go away as soon as I
> find time to improve my debugging module so it can monkeypatch them).

You should be able to debug tubes mostly with composition to analyze flows.  If you can't do what you want with that, we should talk :-).

> http://wpr.cz/ccx/bzr/tubes7/ for my changes only
> http://wpr.cz/ccx/bzr/tubes7-merge-2/ for changes on top of the bzr
> mirror of the svn branch
> 
> example usage:
> http://wpr.cz/ccx/paste/2014-08-19/2/
> http://wpr.cz/ccx/paste/2014-08-19/3/
> http://wpr.cz/ccx/paste/2014-08-19/4/
> http://wpr.cz/ccx/paste/2014-08-19/5/

I think I don't understand the purpose of all of these.  Particularly, what is the purpose of TypedTube, since Tube already supports specification of input and output types?

>>> So far I wrote relatively simple app that read logfiles, parse them
>>> and insert what they got out of them into a database.
>> 
>> If it's actually reading a file, another nice to-do would be an
>> IFount provider that provides the contents of a file with appropriate
>> flow control, and maybe a thread or process in the background to do
>> the file I/O.  Another thing you could contribute to the branch,
>> possibly?  :-)  How did you implement this?
> 
> At the moment I don't mind the blockingness of the calls. I did write a
> ThreadReader and ThreadWriter though for my earlier tubes-alike with
> Queue-based loop.
> 
> What is more interesting challenge (and we discussed this earlier on
> irc) would be generic async file api. I suggested implementing 9p2000
> back then and I still think it is a good starting point... but nothing
> I have spare time for at the moment.

The point is not to use a specific implementation.  Rather, the point is to get a single well-documented entry-point within Twisted for asynchronously reading a file so that people can start using it.  Frankly this entrypoint could be a total lie and actually do the I/O synchronously on the main thread, as long as it could be transparently upgraded to being the truth without exposing the change to applications in the future :-).  If we make everyone implement their own read-a-file fount, then there's no hope that future Twisted maintenance could improve their performance.

>> I'm not sure I totally understand the case that you're describing
>> right now.  Can you perhaps contribute a unit test which demonstrates
>> why this line of code is necessary?
> 
> I'd love to, alas I'll be bit preocuppied with some more urgent matters
> for following week or two. The short version is "flowStopped just
> didn't get passed through the series otherwise".

I hope I'll have some time later in the week to investigate this. 

>> Are you running into <https://twistedmatrix.com/trac/ticket/7546>?
> 
> Most probably, as far as I can tell from the vague description.

Well, you'll be glad to know that's also on my to-do list :-).

>> That ... definitely sounds kind of gross.  As does actually setting
>> the nextFount attribute directly on the fan.Out.
> 
> Indeed. The point of the experiment was not produce nice code but to
> see if there are any major pitfalls using the tubes API.

As long as it's clear that this is not really necessary :).

>> twisted.web.client.Agent has a solution to this where there's a
>> multi-failure object that aggregates multiple errors into one thing.
>> I think we have to do something similar.  Unfortunately this is a
>> very confusing interface in addition to being poorly documented and
>> relies on private classes that expose ostensibly public attributes.
>> We need to very carefully document this within fan.In.
> 
> Some nice abstraction of multiple failures would be indeed handy. I'm
> pretty sure DeferredList could use one too.

Yeah, uh, maybe.  Also DeferredList should go away and be replaced with something that doesn't inherit from Deferred, and instead is just a function that returns a new regular-old-Deferred, since the subclassing is entirely unnecessary.  But I digress.

>>> As for data representation that I choose to pass between each tube
>>> I've started with simple namedtuples and following that I've built
>>> a simple "datatype" class somewhat reminiscent of
>>> https://github.com/hynek/characteristic
>>> which I learned of few moments after I finished polishing my own
>>> implementation. What I have there is added layer above namedtuples
>>> that autogenerate zope Interfaces (so I can have adaptation), do
>>> field type and value validation/adaptation and possibly (as a
>>> future extension) provide easy way to make them into AMP commands
>>> so the series can be split into communicating processes as needed.
>>> (What would be interesting imo is something like ampoule for tubes,
>>> or perhaps a ThreadTube and SubprocessTube for performing blocking
>>> operations)
>> 
>> I think it's likely we'll acquire a dependency on Characteristic
>> sometime soon, I have promised to look at the issues on
>> <https://github.com/hynek/characteristic/pull/13> and try to address
>> them already :).
> 
> What makes me ponder is how to work with multiple types of messages
> being passed through. Traditionally in twisted one would use different
> methods for handling each one, eg. IRCClient has userJoined, userLeft,
> and so on. If we keep tubes as they are with a single received() method
> then somehow we need to be able to tell those messages apart,
> deconstruct them and mainly document them and test for proper handling
> of all cases.

Dispatching from a single "received" message to multiple distinct methods based on type is a pretty well solved problem in Python :-).  There is a whole class of design patterns for this which we could apply to Tubes.  I don't think we need this in the first release though; it's easy to implement yourself, there are a few different styles which might be a good idea that we'll need to try out, and many of the examples in the documentation that we've written so far don't require them.

> Instinctively I started looking for algebraic data types, but making
> those work on python is high-level metaprogramming magic and that
> either implies python3.3+ or AST rewriting:
> https://github.com/lihaoyi/macropy

Yeesh.

> Perhaps what would be bearable is AST-based checker (integrated into
> testcases perhaps) that would do exhaustiveness and field name checking
> for such complex data - so all users of a tube/fount producing some
> type woud be flagged whenever the type signature of it changes.

Is this really a substantial enough advantage over, say, a dictionary with types as keys and callables as values, that it would be worth the (frankly insane-sounding) level of complexity involved in its implementation?

> Other possible resolution is to mantain the multi-method approach and
> make tubes into pausing mechanism only. I think it could work somewhat
> like:
> 
> @pauseable
> def lineReceived(line):
>    ...
>    # get reference object of specified interface
>    # and wait until it is unpaused
>    (yield IIRCClient).userJoined(...)
> 
> The first obvious downside of this approach that I see is that we now
> need proxy objects for generic fan-in/out.

Yeah, I, uh, don't quite understand what you're getting at here.

>>> Also maybe of note is the implementation of Pipes in Async library
>>> for OCaml which I've been examining lately. What they seem to do
>>> there is that they push values downstream and the function called
>>> in each processing step may return deferred signifying a pause is
>>> requested until this deferred is fired. For those interested in the
>>> details you can refer to:
>>> https://ocaml.janestreet.com/ocaml-core/111.25.00/doc/async/#Std.Pipe
>>> and the relevant section of Real World OCaml book (available
>>> online).
>> 
>> Creating a token for every single call to .receive() makes life
>> hard.  Deferred could go to some trouble to be a cheaper token to
>> pass around (especially on PyPy) but doing it this way is also
>> error-prone as a mistaken error-handler in the Deferred chain means
>> that the default behavior of buggy code un-hooks your loop and leaves
>> idle data sources that will never be cleaned up.
> 
> How does current approach prevent that? From what I see unhandled
> exception in non-well written drain can do the very much same. Tubes
> are handled specially so it can be prevented there.

That's exactly the point - applications should very rarely need to create new drains or founts, they should be working mostly in terms of tubes, fan.In, fan.Out, protocol founts and drains, and process founts and drains.

But in the case of a buggy drain, protocol founts and tubes can be written to handle the error _and cleanly shut down the whole flow_.

In the Streams (i.e. every-read-returns-a-Deferred) approach, you don't know who your caller is except that they might have added a callback to you.  There's no way to propagate other notifications or inspect the chain for debugging in case of errors.

>> I worked quite a bit with the 'Streams' interface in web2 on Calendar
>> Server, and my conclusion there is that while this is better than
>> nothing (it was very nice to be able to just return a Stream rather
>> than cobble together something that returned NOT_DONE_YET every time)
>> it was (A) slow and (B) error prone.  Tubes are designed specifically
>> to avoid this error.  Although you can return Deferreds internally,
>> no consumer ever needs to write the callback-loop that calls .read()
>> again from a callback on .read().
> 
> I agree that something like tubes is needed, but it can be a
> upper-level layer over something simple as flow-signalling callbacks.
> 
> Anyway, linked mostly for inspiration.
> 
> What I'd really like to see though is some rationale for current design
> choices of tubes - eg. list of reasons the previous attempts failed and
> how does each next address the issues. :-)

Hmm.  It's tough to document these, because there was a lot of experimenting in tubes, a lot of backtracking, some influence from other projects and a lot of parallel invention.  Trying to outline all the things we tried and why they did or didn't work would be extremely time-consuming for us and probably pretty confusing and unhelpful for the reader.

What would you be looking to get from such a write-up?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140821/78136e2b/attachment-0001.html>

From lyx-devel at oak-tree.us  Thu Aug 21 20:24:20 2014
From: lyx-devel at oak-tree.us (Rob Oakes)
Date: Fri, 22 Aug 2014 02:18:20 -0006
Subject: [Twisted-Python] Twisted WebSockets Branch
In-Reply-To: <mailman.732.1408667823.2013.twisted-python@twistedmatrix.com>
References: <mailman.732.1408667823.2013.twisted-python@twistedmatrix.com>
Message-ID: <1408674260.5206.0@mail.oak-tree.us>

Dear Twisted Developers,

As a quick introduction, my name is Rob Oakes. I'm the lead developer 
for a company called Guru Labs. I'm writing for two reasons:

# Reason 1: Thank You

First and foremost, I'm writing to express thanks for creating an 
excellent framework. We use Twisted extensively in our infrastructure, 
and it is typically our go-to tool for any sort of custom server.

The other two reasons have to do with some questions about the 
development of Twisted. Before I dive into those, however, let me 
provide some background.

For the better part of a year, we've been using some code out of the 
websockets (twisted.web.websockets.WebsocketsResource) branch to wrap a 
trio of custom protocols we use in one of our web based products. I 
know that the code is still pre-release, but we've generally found it 
to be stable and work very well.

# Reason Two: Websockets Development

This brings me to the second reason I'm writing. Over the past year, it 
seems as though the development on the Twisted websockets branch has 
stalled. We would like to unstall it. For this reason, Guru Labs would 
be interested in:

1.) Contracting with one of the core Twisted devs of Twisted who might 
be interested in finishing the implementation of the websockets 
wrappers (resolving the issues described in ticket 4173) or another 
party. We are happy to pay hourly rates, set a bounty, make a donation 
to the Twisted project ... whatever.

A stable implementation of websockets available in Twisted Web is a 
priority to us, and if it's a matter of money, we are happy to throw 
money where it might be needed. (If this of interest, please contact me 
off-list at roakes at gurulabs.com.)

or

2.) Assigning a Guru Labs developer (probably me) who might complete 
the work.

I've been studying the issues which are still open (specifically 4173), 
and the various branches associated with websocket development 
(websocket-4173-3 and websocket-4173-4) and it seems that most of the 
major concerns are related to the manner in which websocket connections 
are closed.

Assuming that someone else doesn't step forward ... I've already merged 
the most recent version of trunk with these branches, but I've found 
myself with several questions on how to best continue with the work.

a. Which of the two websocket branches should be used as the basis for 
new work?

On GitHub, websocket-4173-4 is marked as closed with a note telling the 
contributor to see the contribution guidelines. There are also several 
additions to the code which do not follow Twisted conventions (as I 
understand them). The last set of commits also seem to come from 
approximately the same time.

websocket-4173-4 includes code which attempts to resolve issues noted 
in 4173 that is not present in 4173-3, but there aren't really any 
comments to determine if this should be incorporated or not. At this 
point, I'm really not familiar enough with the code to draw my own 
conclusion.

b. In general, the protocol wrapper seems to work quite well. However 
when merged with the most recent version of trunk (post twisted 14), 
I've been seeing frequent  unhandled deferred errors. The most common 
is:

"twisted.internet.error.ConnectionLost: Connection to the other side 
was lost in a non-clean fashion: Connection lost"

It happens when:

* Connections are closed from the server, using transport.loseConnection
* Connections do not transmit a "close" frame prior to disconnecting
* To reiterate, this issue only started appearing after merging the 
websocket code with Twisted 14. The previous version of Twisted we were 
using (Twisted 12.3 worked flawlessly.)

No error is raised if the client correctly closes the connection or 
when using non-browser based clients (like the Python ws4py websocket 
client).

We mostly see the exception when the objects are garbage collected 
(based upon the deferred documentation at 
http://twistedmatrix.com/documents/14.0.0/core/howto/defer.html). Put 
another way, we see a whole string of errors upon stopping the reactor. 
Despite the exception, we don't see any errors in the browser client.

Also somewhat frustratingly, the traceback isn't terribly helpful. This 
is a fairly routine example:

```error
Unhandled error in Deferred:

Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionLost: Connection to the other 
side was lost in a non-clean fashion: Connection lost.
```

Technically, the error is probably appropriate, as they appear when the 
connection is lost in a non-clean fashion. I am a little concerned, 
though, in that I haven't found a good way to catch or suppress the 
error. Moreover, it doesn't seem like the defferreds are getting 
garbage collected which seems like a memory leak waiting to happen.

Can someone clarify if this is:

* intended behavior, and if so, what might be a strategy I can use for 
managing the error in my wrapped protocols
* which part of the websocket code I should be looking at in order to 
try and fix the issue

Thoughts would be greatly appreciated.

Cheers,

Rob Oakes
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140822/b4dede97/attachment.html>

From twisted-python at 2xlp.com  Fri Aug 22 17:49:32 2014
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 22 Aug 2014 19:49:32 -0400
Subject: [Twisted-Python] running twisted with supervisord -- logging
	question
Message-ID: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>

hoping someone can answer this question-

i can't seem to get my logging right while using supervisord

i'm not using twisted logging, just the regular python logging infrastructure. 

the two end-results I've had:

	- everything double-logs into twistd.log & /var/log/supervisor.log
	- anything this is `print`'ed appears in my twistd.log , but none of the `log.debug()` lines appear

the end result I want, is for debug info from the twisted process to be recorded in a single file

From radix at twistedmatrix.com  Fri Aug 22 21:50:13 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 22 Aug 2014 22:50:13 -0500
Subject: [Twisted-Python] running twisted with supervisord -- logging
 question
In-Reply-To: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
Message-ID: <etPan.53f80f75.2443a858.35a6@densetsu>


On August 22, 2014 at 6:52:02 PM, Jonathan Vanasco (twisted-python at 2xlp.com) wrote:

hoping someone can answer this question-?

i can't seem to get my logging right while using supervisord?

i'm not using twisted logging, just the regular python logging infrastructure.?

the two end-results I've had:?

- everything double-logs into twistd.log & /var/log/supervisor.log?
- anything this is `print`'ed appears in my twistd.log , but none of the `log.debug()` lines appear?

the end result I want, is for debug info from the twisted process to be recorded in a single file?


I prefer to use



	twistd -n -l - ...



passing ?-' to -l means ?log to stdout?.



Without your code, we can?t know how you?re configuring python logging, and what may be wrong with it. This should be the baseline for using twistd with supervisor if you want to let supervisor handle logging. FYI, you can configure supervisor to put the output in a different file than /var/log/supervisor.log, too.



--?
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140822/6a62b2c4/attachment.html>

From twisted-python at 2xlp.com  Sat Aug 23 17:46:25 2014
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Sat, 23 Aug 2014 19:46:25 -0400
Subject: [Twisted-Python] running twisted with supervisord -- logging
	question
In-Reply-To: <etPan.53f80f75.2443a858.35a6@densetsu>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
Message-ID: <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>

Christopher-

Thanks for the insight.  I was stupid and didn't include my code.

I don't actually want supervisor to handle the logging.  I wanted to have this app's logs in /var/log/myapp-twisted/twisted.log

I just can't figure out how to make this happen.  i've been playing with different permutations of twistd commands, redirect_stderr and stdout_logfile, and haven't found the right balance

the actual logging calls are just to python's logger ( `import logging` ; logging.getLogger(), log.debug(), etc)

---------
[program:myapp-twisted]
priority=100
process_name=%(program_name)s
autostart=true
autorestart=true
stopsignal=QUIT
redirect_stderr = false
stdout_logfile = /var/log/myapp-twisted/twisted.log
directory = /var/www/sites/myapp-svn_tag-current_production/daemon/twisted
environment = PATH="/var/www/sites/myapp-virtualenv/bin:$PATH"
command = /var/www/sites/myapp-virtualenv/bin/twistd -y controller-production.tac --pidfile /tmp/myapp-twisted.pid
----------





On Aug 22, 2014, at 11:50 PM, Christopher Armstrong wrote:

> 
> On August 22, 2014 at 6:52:02 PM, Jonathan Vanasco (twisted-python at 2xlp.com) wrote:
> 
>> hoping someone can answer this question- 
>> 
>> i can't seem to get my logging right while using supervisord 
>> 
>> i'm not using twisted logging, just the regular python logging infrastructure. 
>> 
>> the two end-results I've had: 
>> 
>> - everything double-logs into twistd.log & /var/log/supervisor.log 
>> - anything this is `print`'ed appears in my twistd.log , but none of the `log.debug()` lines appear 
>> 
>> the end result I want, is for debug info from the twisted process to be recorded in a single file 
> 
> 
> I prefer to use
> 
> 
> 
> 	twistd -n -l - ...
> 
> 
> 
> passing ?-' to -l means ?log to stdout?.
> 
> 
> 
> Without your code, we can?t know how you?re configuring python logging, and what may be wrong with it. This should be the baseline for using twistd with supervisor if you want to let supervisor handle logging. FYI, you can configure supervisor to put the output in a different file than /var/log/supervisor.log, too.
> 
> 
> 
> -- 
> Christopher Armstrong
> http://twitter.com/radix
> http://wordeology.com/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

// Jonathan Vanasco

c. 646.729.6436  |  415.501.9815
e. jonathan at 2xlp.com
w. http://findmeon.com/user/jvanasco 
linkedin. http://linkedin.com/in/jonathanvanasco
blog. http://destructuring.net

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140823/7a9549a7/attachment.html>

From werner at thieprojects.ch  Sat Aug 23 18:58:32 2014
From: werner at thieprojects.ch (Werner Thie)
Date: Sat, 23 Aug 2014 14:58:32 -1000
Subject: [Twisted-Python] running twisted with supervisord -- logging
 question
In-Reply-To: <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
 <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
Message-ID: <53F938B8.9080506@thieprojects.ch>

Hi

that's what I use in my .tac files

application = service.Application(mainPkgName)

#use this code below to configure logging in all aspects; keep in mind 
#that for the log rotating code the
#access rights must be set such that the process has write access  to 
#the log directory. A trick to adapt to
#get a logfile with the demoted process's UID/GID is to have an already 
#existing file with all the properties
#set. LogFile will from then on create rotated files with the same 
#properties.

application.setComponent(ILogObserver, 
FileLogObserver(LogFile('the.log', '/var/log/my-app', 
rotateLength=100000)).emit)

Werner

On 8/23/14 1:46 PM, Jonathan Vanasco wrote:
> Christopher-
>
> Thanks for the insight.  I was stupid and didn't include my code.
>
> I don't actually want supervisor to handle the logging.  I wanted to
> have this app's logs in /var/log/myapp-twisted/twisted.log
>
> I just can't figure out how to make this happen.  i've been playing with
> different permutations of twistd commands, redirect_stderr and
> stdout_logfile, and haven't found the right balance
>
> the actual logging calls are just to python's logger ( `import logging`
> ; logging.getLogger(), log.debug(), etc)
>
> ---------
> [program:myapp-twisted]
> priority=100
> process_name=%(program_name)s
> autostart=true
> autorestart=true
> stopsignal=QUIT
> redirect_stderr = false
> stdout_logfile = /var/log/myapp-twisted/twisted.log
> directory = /var/www/sites/myapp-svn_tag-current_production/daemon/twisted
> environment = PATH="/var/www/sites/myapp-virtualenv/bin:$PATH"
> command = /var/www/sites/myapp-virtualenv/bin/twistd -y
> controller-production.tac --pidfile /tmp/myapp-twisted.pid
> ----------
>
>
>
>
>
> On Aug 22, 2014, at 11:50 PM, Christopher Armstrong wrote:
>
>>
>> On August 22, 2014 at 6:52:02 PM, Jonathan Vanasco
>> (twisted-python at 2xlp.com <mailto:twisted-python at 2xlp.com>) wrote:
>>
>>> hoping someone can answer this question-
>>>
>>> i can't seem to get my logging right while using supervisord
>>>
>>> i'm not using twisted logging, just the regular python logging
>>> infrastructure.
>>>
>>> the two end-results I've had:
>>>
>>> - everything double-logs into twistd.log & /var/log/supervisor.log
>>> - anything this is `print`'ed appears in my twistd.log , but none of
>>> the `log.debug()` lines appear
>>>
>>> the end result I want, is for debug info from the twisted process to
>>> be recorded in a single file
>>
>>
>> I prefer to use
>>
>>
>> twistd -n -l - ...
>>
>>
>> passing ?-' to -l means ?log to stdout?.
>>
>>
>> Without your code, we can?t know how you?re configuring python
>> logging, and what may be wrong with it. This should be the baseline
>> for using twistd with supervisor if you want to let supervisor handle
>> logging. FYI, you can configure supervisor to put the output in a
>> different file than /var/log/supervisor.log, too.
>>
>>
>> --
>> Christopher Armstrong
>> http://twitter.com/radix
>> http://wordeology.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> // Jonathan Vanasco
>
> c. 646.729.6436  |  415.501.9815
> e. jonathan at 2xlp.com <mailto:jonathan at 2xlp.com>
> w. http://findmeon.com/user/jvanasco
> linkedin. http://linkedin.com/in/jonathanvanasco
> blog. http://destructuring.net
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From itamar at itamarst.org  Sat Aug 23 22:00:33 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 24 Aug 2014 00:00:33 -0400
Subject: [Twisted-Python] Twisted WebSockets Branch
In-Reply-To: <1408674260.5206.0@mail.oak-tree.us>
References: <mailman.732.1408667823.2013.twisted-python@twistedmatrix.com>
 <1408674260.5206.0@mail.oak-tree.us>
Message-ID: <7e9450707371e438ffb859ee6313cb92@itamarst.org>

 

On 2014-08-21 22:24, Rob Oakes wrote: 

> a. Which of the two websocket branches should be used as the basis for new work? 
> 
> On GitHub, websocket-4173-4 is marked as closed with a note telling the contributor to see the contribution guidelines. There are also several additions to the code which do not follow Twisted conventions (as I understand them). The last set of commits also seem to come from approximately the same time. 
> 
> websocket-4173-4 includes code which attempts to resolve issues noted in 4173 that is not present in 4173-3, but there aren't really any comments to determine if this should be incorporated or not. At this point, I'm really not familiar enough with the code to draw my own conclusion.

I'm not sure what you mean by "the branch is marked as closed" - AFAIK
GitHub has no concept of closing branches. Plus GitHub is just a mirror.
If -4 is the latest revision in Subversion then that's the latest
version of the code. 

-Itamar 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140824/4943c300/attachment.html>

From radix at twistedmatrix.com  Sat Aug 23 23:56:50 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 24 Aug 2014 00:56:50 -0500
Subject: [Twisted-Python] running twisted with supervisord -- logging
 question
In-Reply-To: <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
 <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
Message-ID: <etPan.53f97ea3.6763845e.35a6@densetsu>

On August 23, 2014 at 6:50:32 PM, Jonathan Vanasco (twisted-python at 2xlp.com) wrote:
Christopher-

Thanks for the insight. ?I was stupid and didn't include my code.

I don't actually want supervisor to handle the logging. ?I wanted to have this app's logs in /var/log/myapp-twisted/twisted.log

I just can't figure out how to make this happen. ?i've been playing with different permutations of twistd commands, redirect_stderr and stdout_logfile, and haven't found the right balance

the actual logging calls are just to python's logger ( `import logging` ; logging.getLogger(), log.debug(), etc)

---------
[program:myapp-twisted]
priority=100
process_name=%(program_name)s
autostart=true
autorestart=true
stopsignal=QUIT
redirect_stderr = false
stdout_logfile = /var/log/myapp-twisted/twisted.log
directory = /var/www/sites/myapp-svn_tag-current_production/daemon/twisted
environment = PATH="/var/www/sites/myapp-virtualenv/bin:$PATH"
command = /var/www/sites/myapp-virtualenv/bin/twistd -y controller-production.tac --pidfile /tmp/myapp-twisted.pid
----------



You?re seemingly contradicting yourself: you say you don?t want supervisor to handle logging, but the supervisor configuration you've shown is handling the logging, by routing its stdout to /var/log/myapp-twisted/twisted.log (which I think is a fine thing to do, fwiw).

If this isn?t working, then the problem is probably in your python code, not the supervisor configuration: are you sure it?s writing logs to stdout? Again, we need to see your actual python code (or a minimal reproducible example) to diagnose this.

Since you?re not using twisted?s logging system, I really can?t make any guesses here. If you *were* using twisted?s logging system, I would point out that you should add ?-l -? to your twistd command line in that supervisor config, to make twisted?s logs go to stdout as well (maybe you want to do this even if your application isn?t using twisted?s log system, so that both the logs of twisted and of your application are going to the same place).


--?
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/






On Aug 22, 2014, at 11:50 PM, Christopher Armstrong wrote:


On August 22, 2014 at 6:52:02 PM, Jonathan Vanasco (twisted-python at 2xlp.com) wrote:

hoping someone can answer this question-?

i can't seem to get my logging right while using supervisord?

i'm not using twisted logging, just the regular python logging infrastructure.?

the two end-results I've had:?

- everything double-logs into twistd.log & /var/log/supervisor.log?
- anything this is `print`'ed appears in my twistd.log , but none of the `log.debug()` lines appear?

the end result I want, is for debug info from the twisted process to be recorded in a single file?


I prefer to use



twistd -n -l - ...



passing ?-' to -l means ?log to stdout?.



Without your code, we can?t know how you?re configuring python logging, and what may be wrong with it. This should be the baseline for using twistd with supervisor if you want to let supervisor handle logging. FYI, you can configure supervisor to put the output in a different file than /var/log/supervisor.log, too.



--?
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

// Jonathan Vanasco

c. 646.729.6436 ?| ?415.501.9815
e. jonathan at 2xlp.com
w. http://findmeon.com/user/jvanasco?
linkedin. http://linkedin.com/in/jonathanvanasco
blog. http://destructuring.net

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140824/02a6907b/attachment-0001.html>

From trac at twistedmatrix.com  Sun Aug 24 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Aug 2014 06:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1408860316.13.2991857487072300551@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140824/241f0404/attachment.html>

From hs at ox.cx  Sun Aug 24 00:36:20 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Sun, 24 Aug 2014 08:36:20 +0200
Subject: [Twisted-Python] running twisted with supervisord -- logging
 question
In-Reply-To: <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
 <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
Message-ID: <83060374-3430-4273-A2E8-A4D6B2B1EE7A@ox.cx>

Jonathan,

On 24 Aug 2014, at 1:46, Jonathan Vanasco wrote:

> Thanks for the insight.  I was stupid and didn't include my code.
>
> I don't actually want supervisor to handle the logging.  I wanted to 
> have this app's logs in /var/log/myapp-twisted/twisted.log
>
> I just can't figure out how to make this happen.  i've been playing 
> with different permutations of twistd commands, redirect_stderr and 
> stdout_logfile, and haven't found the right balance

I would strongly urge you to do what Christopher told you, and not just 
for Twisted but in general.

Logging everything to stdout/stderr and then using some proper system 
tool to catch and process that instead of the finicky stdlib (or 
Twisted?s for that matter) logging will save you a lot of headaches 
and gain some love if you work with ops people.  Another alternative is 
using syslog which is directly supported by twistd.

?h


From tobias.oberstein at tavendo.de  Sun Aug 24 02:36:28 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 24 Aug 2014 01:36:28 -0700
Subject: [Twisted-Python] Twisted WebSockets Branch
In-Reply-To: <1408674260.5206.0@mail.oak-tree.us>
References: <mailman.732.1408667823.2013.twisted-python@twistedmatrix.com>
 <1408674260.5206.0@mail.oak-tree.us>
Message-ID: <634914A010D0B943A035D226786325D44479616CAC@EXVMBX020-12.exch020.serverdata.net>

Hi Rob,

if your main concern is robust WebSocket on Twisted, why not use Autobahn (https://pypi.python.org/pypi/autobahn) ?

Autobahn supports wrapping arbitrary stream-based protocols on top of WebSocket, with full support for advanced features like WebSocket compression and auto-fragmentation plus Twisted endpoints:

https://github.com/tavendo/AutobahnPython/tree/master/examples/twisted/websocket/wrapping

Note: Wrapping arbitrary stream-based protocols in WebSocket requires proper WebSocket subprotocol negotiation and handling. Autobahn follows the scheme established by https://github.com/kanaka/websockify for which you find e.g. JS libraries running in a browser.

Autobahn also supports running WebSocket as a resource in a Twisted Web resource tree: https://github.com/tavendo/AutobahnPython/blob/master/examples/twisted/websocket/echo_site/server.py

Disclosure: I wrote this stuff. So I am biased;) Glyph at one point mentioned that he likes to see "basic WebSocket support" built into Twisted. Bringing the branch to the full level of Autobahn rgd. features, compliance, robustness etc will be a lot of work though. Merging Autobahn into Twisted is unlikely to happen / doesn't make sense for different reasons I guess.

/Tobias

Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Rob Oakes
Gesendet: Freitag, 22. August 2014 04:24
An: twisted-python at twistedmatrix.com
Cc: roakes at gurulabs.com
Betreff: [Twisted-Python] Twisted WebSockets Branch

Dear Twisted Developers,

As a quick introduction, my name is Rob Oakes. I'm the lead developer for a company called Guru Labs. I'm writing for two reasons:

# Reason 1: Thank You

First and foremost, I'm writing to express thanks for creating an excellent framework. We use Twisted extensively in our infrastructure, and it is typically our go-to tool for any sort of custom server.

The other two reasons have to do with some questions about the development of Twisted. Before I dive into those, however, let me provide some background.

For the better part of a year, we've been using some code out of the websockets (twisted.web.websockets.WebsocketsResource) branch to wrap a trio of custom protocols we use in one of our web based products. I know that the code is still pre-release, but we've generally found it to be stable and work very well.

# Reason Two: Websockets Development

This brings me to the second reason I'm writing. Over the past year, it seems as though the development on the Twisted websockets branch has stalled. We would like to unstall it. For this reason, Guru Labs would be interested in:

1.) Contracting with one of the core Twisted devs of Twisted who might be interested in finishing the implementation of the websockets wrappers (resolving the issues described in ticket 4173) or another party. We are happy to pay hourly rates, set a bounty, make a donation to the Twisted project ... whatever.

A stable implementation of websockets available in Twisted Web is a priority to us, and if it's a matter of money, we are happy to throw money where it might be needed. (If this of interest, please contact me off-list at roakes at gurulabs.com<mailto:roakes at gurulabs.com>.)

or

2.) Assigning a Guru Labs developer (probably me) who might complete the work.

I've been studying the issues which are still open (specifically 4173), and the various branches associated with websocket development (websocket-4173-3 and websocket-4173-4) and it seems that most of the major concerns are related to the manner in which websocket connections are closed.

Assuming that someone else doesn't step forward ... I've already merged the most recent version of trunk with these branches, but I've found myself with several questions on how to best continue with the work.

a. Which of the two websocket branches should be used as the basis for new work?

On GitHub, websocket-4173-4 is marked as closed with a note telling the contributor to see the contribution guidelines. There are also several additions to the code which do not follow Twisted conventions (as I understand them). The last set of commits also seem to come from approximately the same time.

websocket-4173-4 includes code which attempts to resolve issues noted in 4173 that is not present in 4173-3, but there aren't really any comments to determine if this should be incorporated or not. At this point, I'm really not familiar enough with the code to draw my own conclusion.

b. In general, the protocol wrapper seems to work quite well. However when merged with the most recent version of trunk (post twisted 14), I've been seeing frequent  unhandled deferred errors. The most common is:

"twisted.internet.error.ConnectionLost: Connection to the other side was lost in a non-clean fashion: Connection lost"

It happens when:

* Connections are closed from the server, using transport.loseConnection
* Connections do not transmit a "close" frame prior to disconnecting
* To reiterate, this issue only started appearing after merging the websocket code with Twisted 14. The previous version of Twisted we were using (Twisted 12.3 worked flawlessly.)

No error is raised if the client correctly closes the connection or when using non-browser based clients (like the Python ws4py websocket client).

We mostly see the exception when the objects are garbage collected (based upon the deferred documentation at http://twistedmatrix.com/documents/14.0.0/core/howto/defer.html). Put another way, we see a whole string of errors upon stopping the reactor. Despite the exception, we don't see any errors in the browser client.

Also somewhat frustratingly, the traceback isn't terribly helpful. This is a fairly routine example:

```error
Unhandled error in Deferred:

Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionLost: Connection to the other side was lost in a non-clean fashion: Connection lost.
```

Technically, the error is probably appropriate, as they appear when the connection is lost in a non-clean fashion. I am a little concerned, though, in that I haven't found a good way to catch or suppress the error. Moreover, it doesn't seem like the defferreds are getting garbage collected which seems like a memory leak waiting to happen.

Can someone clarify if this is:

* intended behavior, and if so, what might be a strategy I can use for managing the error in my wrapped protocols
* which part of the websocket code I should be looking at in order to try and fix the issue

Thoughts would be greatly appreciated.

Cheers,

Rob Oakes
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140824/819d8341/attachment-0001.html>

From exarkun at twistedmatrix.com  Sun Aug 24 08:40:26 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Aug 2014 14:40:26 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <loom.20140716T200054-866@post.gmane.org>
References: <loom.20140716T200054-866@post.gmane.org>
Message-ID: <20140824144026.20413.1792894490.divmod.xquotient.1756@top>

On 16 Jul, 06:02 pm, alex.gaynor at gmail.com wrote:
>Hi all,
>
>A short while ago Twisted's trac installation was changed to reject new 
>tickets
>from anyone except a special white listed group.
>
>As of yesterday I have reverted this change, (and turned the spam 
>filter back
>on). If you experience any issues trying to post, or notice and spam, 
>please
>feel free to reach out to me.

Hi Alex,

I notice some spam has started to get through.  See the latest bug 
summary email.

Jean-Paul


From twisted-python at 2xlp.com  Mon Aug 25 16:37:12 2014
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Mon, 25 Aug 2014 18:37:12 -0400
Subject: [Twisted-Python] running twisted with supervisord -- logging
	question
In-Reply-To: <83060374-3430-4273-A2E8-A4D6B2B1EE7A@ox.cx>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
 <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
 <83060374-3430-4273-A2E8-A4D6B2B1EE7A@ox.cx>
Message-ID: <834BACD1-1428-413C-A622-72ABECF1940A@2xlp.com>


Thanks Hynek and Christopher. 

Hynek- That's basically what I want -- but i am always quickly LOST when it comes to logging. It is my weakness.

Christopher-- The code is definitely contradicting me. I am admittedly lost.

I'll have to play around with this more in depth later -- but now I have an temporarily acceptable solution.

For the most part, I'm not logging anything myself.   I'm really concerned with all the debug messages that various PyPi packages send to the standard library's logging facility.  While running the twisted daemon outside of supervisord, this stuff ends up on the console( which i believe is both stdout/stderr ).

When I wrote "not having supervisord handle the logging" , I should have chosen better words.  It could have been stated as "I don't want /var/log/supervisord.log to handle the logging".  I don't care who handles the logging, I just wanted debug data from my twisted app in it's own file, and not in another.

I was trying to route the stderr into the /var/log/myapp-twisted/log ; but it was going into both that AND the /var/log/supervisord.log file

I tried using different permutations of the `-l` format, but without a bit of configuring, I could only get the "log.debug()" lines in twisted code to output; not the submodules.

After playing around, this seems to work the best:

[supervisord]
logfile=/var/log/supervisord.log
loglevel=warn

[myapp]
redirect_stderr = true
stdout_logfile = /var/log/myapp-twisted/twisted.log

It's not a perfect solution, but works for now --  I just raised the loglevel for supervisord to `warn`, so it doesn't doubly log any data.  The downside is that i'm not getting the debug messages from other apps that supervisord handles.  






On Aug 24, 2014, at 2:36 AM, Hynek Schlawack wrote:

> I would strongly urge you to do what Christopher told you, and not just for Twisted but in general.
> 
> Logging everything to stdout/stderr and then using some proper system tool to catch and process that instead of the finicky stdlib (or Twisted?s for that matter) logging will save you a lot of headaches and gain some love if you work with ops people.  Another alternative is using syslog which is directly supported by twistd.



On Aug 24, 2014, at 1:56 AM, Christopher Armstrong wrote:
> 
> You?re seemingly contradicting yourself: you say you don?t want supervisor to handle logging, but the supervisor configuration you've shown is handling the logging, by routing its stdout to /var/log/myapp-twisted/twisted.log (which I think is a fine thing to do, fwiw).
> 
> If this isn?t working, then the problem is probably in your python code, not the supervisor configuration: are you sure it?s writing logs to stdout? Again, we need to see your actual python code (or a minimal reproducible example) to diagnose this.
> 
> Since you?re not using twisted?s logging system, I really can?t make any guesses here. If you *were* using twisted?s logging system, I would point out that you should add ?-l -? to your twistd command line in that supervisor config, to make twisted?s logs go to stdout as well (maybe you want to do this even if your application isn?t using twisted?s log system, so that both the logs of twisted and of your application are going to the same place).



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140825/30d77db6/attachment.html>

From exarkun at twistedmatrix.com  Mon Aug 25 17:31:59 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Aug 2014 23:31:59 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
Message-ID: <20140825233159.20413.746155899.divmod.xquotient.1758@top>

On 24 Aug, 02:40 pm, exarkun at twistedmatrix.com wrote:
>On 16 Jul, 06:02 pm, alex.gaynor at gmail.com wrote:
>>Hi all,
>>
>>A short while ago Twisted's trac installation was changed to reject 
>>new tickets
>>from anyone except a special white listed group.
>>
>>As of yesterday I have reverted this change, (and turned the spam 
>>filter back
>>on). If you experience any issues trying to post, or notice and spam, 
>>please
>>feel free to reach out to me.
>
>Hi Alex,
>
>I notice some spam has started to get through.  See the latest bug 
>summary email.

Ping
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From alex.gaynor at gmail.com  Mon Aug 25 21:42:13 2014
From: alex.gaynor at gmail.com (Alex Gaynor)
Date: Tue, 26 Aug 2014 03:42:13 +0000 (UTC)
Subject: [Twisted-Python] Twisted Trac
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
Message-ID: <loom.20140826T053956-688@post.gmane.org>

 <exarkun <at> twistedmatrix.com> writes:

> 
> Hi Alex,
> 
> I notice some spam has started to get through.  See the latest bug 
> summary email.
> 
> Jean-Paul
> 

(Please be aware I don't read twisted regularly, please CC me to ensure I see
it, Glyph was kind enough to draw this to my attention)

Yes, I saw (I deleted the spam when I saw it). The solution to this is going to
be to get a second spam checker system (probably the Bayesian filter one), I'll
work on that with Glyph as soon as he returns from vacation (next week).

In the meantime, I'll keep manually delete any spam I see.

Cheers,
Alex



From exarkun at twistedmatrix.com  Tue Aug 26 05:11:48 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 26 Aug 2014 11:11:48 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <loom.20140826T053956-688@post.gmane.org>
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
 <loom.20140826T053956-688@post.gmane.org>
Message-ID: <20140826111148.20413.1542655853.divmod.xquotient.1763@top>

On 03:42 am, alex.gaynor at gmail.com wrote:
><exarkun <at> twistedmatrix.com> writes:
>>
>>Hi Alex,
>>
>>I notice some spam has started to get through.  See the latest bug
>>summary email.
>>
>>Jean-Paul
>
>(Please be aware I don't read twisted regularly, please CC me to ensure 
>I see
>it, Glyph was kind enough to draw this to my attention)
>
>Yes, I saw (I deleted the spam when I saw it). The solution to this is 
>going to
>be to get a second spam checker system (probably the Bayesian filter 
>one), I'll
>work on that with Glyph as soon as he returns from vacation (next 
>week).
>
>In the meantime, I'll keep manually delete any spam I see.

How are you watching for spam?  It looks like you didn't see it all:

#7558
#7564
#7565
#7567

And in the interim, #7575 - #7585.

Jean-Paul


From exarkun at twistedmatrix.com  Tue Aug 26 14:09:54 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 26 Aug 2014 20:09:54 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <CAFRnB2WCUPA-r2t4ykwaB-UmGuAmgzZokT3mCJxwoP_h7XUUKA@mail.gmail.com>
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
 <loom.20140826T053956-688@post.gmane.org>
 <20140826111148.20413.1542655853.divmod.xquotient.1763@top>
 <CAFRnB2WCUPA-r2t4ykwaB-UmGuAmgzZokT3mCJxwoP_h7XUUKA@mail.gmail.com>
Message-ID: <20140826200954.20413.134862706.divmod.xquotient.1766@top>

On 02:06 pm, alex.gaynor at gmail.com wrote:
>I see new tickets that are created through the IRC bot - I've deleted 
>all
>of these now.

Okay.  Thanks,

Jean-Paul


From scott.lemon at wovyn.com  Wed Aug 27 10:25:32 2014
From: scott.lemon at wovyn.com (Scott C. Lemon)
Date: Wed, 27 Aug 2014 10:25:32 -0600
Subject: [Twisted-Python] Looking for Python/Twisted Consultant/Part-time
	Employee ... IoT Start-up
Message-ID: <055401cfc213$86920f40$93b62dc0$@lemon@wovyn.com>

Hello,

We are looking for a consultant or part-time employee with experience using
Python/Twisted.  We want to expand our team of developers working on our
project, and have embraced Python/Twisted for some core components of our
system.  We are using Python/Twisted to interface with a variety of sensor
and control equipment, and provide a REST/JSON web services interface to our
upper layers of software.  We're needing some additional resources to
complete new features on the codebase, and then to also re-use the pattern
to support a new set of sensors and control. We have a senior developer who
has done all of the core Python development who is available for support and
discussions about the code.

The current need is for a part-time developer/consultant (hourly) to work on
some specific enhancement tasks.  The position and requirement is ongoing,
and could evolve into a full time position as we grow and close additional
funding.

Please contact me at this email address.

Scott C. Lemon

http://Wovyn.com

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140827/f074985c/attachment.html>

From exarkun at twistedmatrix.com  Fri Aug 29 18:42:49 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 30 Aug 2014 00:42:49 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <20140826200954.20413.134862706.divmod.xquotient.1766@top>
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
 <loom.20140826T053956-688@post.gmane.org>
 <20140826111148.20413.1542655853.divmod.xquotient.1763@top>
 <CAFRnB2WCUPA-r2t4ykwaB-UmGuAmgzZokT3mCJxwoP_h7XUUKA@mail.gmail.com>
 <20140826200954.20413.134862706.divmod.xquotient.1766@top>
Message-ID: <20140830004249.20413.278135739.divmod.xquotient.1769@top>

On 26 Aug, 08:09 pm, exarkun at twistedmatrix.com wrote:
>On 02:06 pm, alex.gaynor at gmail.com wrote:
>>I see new tickets that are created through the IRC bot - I've deleted 
>>all
>>of these now.
>
>Okay.  Thanks,

Here are a few more:

#7604
#7605
#7606

Jean-Paul


From stefan.hesse at tu-dortmund.de  Sat Aug 30 13:28:19 2014
From: stefan.hesse at tu-dortmund.de (Stefan Hesse)
Date: Sat, 30 Aug 2014 21:28:19 +0200
Subject: [Twisted-Python] Twisted throws error for more or less no reason
Message-ID: <540225D3.9040704@tu-dortmund.de>

Hi everyone,

I hope it is ok when I post the link to stackoverflow, where I already
explained the problem.
http://stackoverflow.com/questions/25581856/twisted-throws-can-only-pass-through-bytes-on-python-2-for-no-reason

I hope someone can help,

Best regards
Stefan


From wolfgang.kde at rohdewald.de  Sat Aug 30 13:38:16 2014
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Sat, 30 Aug 2014 21:38:16 +0200
Subject: [Twisted-Python] Twisted throws error for more or less no reason
In-Reply-To: <540225D3.9040704@tu-dortmund.de>
References: <540225D3.9040704@tu-dortmund.de>
Message-ID: <1723750.Z45MIByCoG@i5>

Am Samstag, 30. August 2014, 21:28:19 schrieb Stefan Hesse:
> I hope it is ok when I post the link to stackoverflow, where I already
> explained the problem.

> File "/usr/lib/python2.7/dist-packages/twisted/web/http.py", line 1001, in write
    value = networkString('%s' % (value,))
  File "/usr/lib/python2.7/dist-packages/twisted/python/compat.py", line 364, in networkString
    raise TypeError("Can only pass-through bytes on Python 2")

The source code:

       if not isinstance(s, str):
            raise TypeError("Can only pass-through bytes on Python 2")
       # Ensure we're limited to ASCII subset:
       s.decode('ascii')


You could check if what you get here is not a str but unicode. You
could change the error message to include the type and value of s

-- 
Wolfgang


From stefan.hesse at tu-dortmund.de  Sat Aug 30 13:45:59 2014
From: stefan.hesse at tu-dortmund.de (Stefan Hesse)
Date: Sat, 30 Aug 2014 21:45:59 +0200
Subject: [Twisted-Python] Twisted throws error for more or less no reason
In-Reply-To: <1723750.Z45MIByCoG@i5>
References: <540225D3.9040704@tu-dortmund.de> <1723750.Z45MIByCoG@i5>
Message-ID: <540229F7.5030405@tu-dortmund.de>

Thank you!

the problem was caused by an unicode string. Changing this line:

|                              "attachment; filename=\"" + os.path.basename(video['title'] + "." + video['format']) + "\"")
to this:
||                              "attachment; filename=\"" + str(os.path.basename(video['title']) + "." + video['format']) + "\"")|

fixes it.

Thanks again!
On 30.08.2014 21:38, Wolfgang Rohdewald wrote:
> Am Samstag, 30. August 2014, 21:28:19 schrieb Stefan Hesse:
>> I hope it is ok when I post the link to stackoverflow, where I already
>> explained the problem.
>> File "/usr/lib/python2.7/dist-packages/twisted/web/http.py", line 1001, in write
>     value = networkString('%s' % (value,))
>   File "/usr/lib/python2.7/dist-packages/twisted/python/compat.py", line 364, in networkString
>     raise TypeError("Can only pass-through bytes on Python 2")
>
> The source code:
>
>        if not isinstance(s, str):
>             raise TypeError("Can only pass-through bytes on Python 2")
>        # Ensure we're limited to ASCII subset:
>        s.decode('ascii')
>
>
> You could check if what you get here is not a str but unicode. You
> could change the error message to include the type and value of s
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140830/5b7e000e/attachment.html>

From trac at twistedmatrix.com  Sun Aug 31 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 31 Aug 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1409465115.51.4730690123397763636@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140831/7b790d22/attachment.html>

From glyph at twistedmatrix.com  Fri Aug  1 04:17:12 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 1 Aug 2014 03:17:12 -0700
Subject: [Twisted-Python] TerminalSession instance has no attribute
	'windowChanged'
In-Reply-To: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>
References: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>
Message-ID: <6A824434-3F36-41D0-AADD-AB20BADB5E29@twistedmatrix.com>

On Jul 31, 2014, at 3:03 AM, Maxim Lacrima <lacrima.maxim at gmail.com> wrote:

> Hello!
> 
> When size of terminal window of ssh client is changed, then twisted ssh server throws an exception:
> 
> exceptions.AttributeError: TerminalSession instance has no attribute 'windowChanged'
> 
> `manhole_ssh.TerminalSession` doesn't implement this method, but according to ISession interface it should.
> 
> Is this a bug?

Yes, this is definitely a bug.  The interface says it should be there, it's called by a user of the interface, and it is not present.  Pretty clearly wrong.  Can you file a ticket?

> I use insults to create some curses-like ui and I need widgets to be redrawn when the size of window is changed.


This is definitely possible.  Just to get yourself unblocked right now, you can probably give your TerminalRealm a different sessionFactory programmatically, one that subclasses TerminalSession and hacks in the requisite method.

But please help us fix this for real going forward too ;).

-glyph




From exarkun at twistedmatrix.com  Fri Aug  1 06:06:34 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 01 Aug 2014 12:06:34 -0000
Subject: [Twisted-Python] TerminalSession instance has no attribute
 'windowChanged'
In-Reply-To: <6A824434-3F36-41D0-AADD-AB20BADB5E29@twistedmatrix.com>
References: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>
 <6A824434-3F36-41D0-AADD-AB20BADB5E29@twistedmatrix.com>
Message-ID: <20140801120634.20413.1711637394.divmod.xquotient.751@top>

On 10:17 am, glyph at twistedmatrix.com wrote:
>On Jul 31, 2014, at 3:03 AM, Maxim Lacrima <lacrima.maxim at gmail.com> 
>wrote:
>>Hello!
>>
>>When size of terminal window of ssh client is changed, then twisted 
>>ssh server throws an exception:
>>
>>exceptions.AttributeError: TerminalSession instance has no attribute 
>>'windowChanged'
>>
>>`manhole_ssh.TerminalSession` doesn't implement this method, but 
>>according to ISession interface it should.
>>
>>Is this a bug?
>
>Yes, this is definitely a bug.  The interface says it should be there, 
>it's called by a user of the interface, and it is not present.  Pretty 
>clearly wrong.  Can you file a ticket?

Good news.  No need to file a ticket:

    https://twistedmatrix.com/trac/ticket/3303

Just need to resolve it.

Jean-Paul



From glyph at twistedmatrix.com  Fri Aug  1 12:04:39 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 1 Aug 2014 11:04:39 -0700
Subject: [Twisted-Python] TerminalSession instance has no attribute
	'windowChanged'
In-Reply-To: <20140801120634.20413.1711637394.divmod.xquotient.751@top>
References: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>
 <6A824434-3F36-41D0-AADD-AB20BADB5E29@twistedmatrix.com>
 <20140801120634.20413.1711637394.divmod.xquotient.751@top>
Message-ID: <E86D134E-3178-4B60-B33F-28CF3C68475C@twistedmatrix.com>


On Aug 1, 2014, at 5:06 AM, exarkun at twistedmatrix.com wrote:

> On 10:17 am, glyph at twistedmatrix.com wrote:
>> On Jul 31, 2014, at 3:03 AM, Maxim Lacrima <lacrima.maxim at gmail.com> wrote:
>>> Hello!
>>> 
>>> When size of terminal window of ssh client is changed, then twisted ssh server throws an exception:
>>> 
>>> exceptions.AttributeError: TerminalSession instance has no attribute 'windowChanged'
>>> 
>>> `manhole_ssh.TerminalSession` doesn't implement this method, but according to ISession interface it should.
>>> 
>>> Is this a bug?
>> 
>> Yes, this is definitely a bug.  The interface says it should be there, it's called by a user of the interface, and it is not present.  Pretty clearly wrong.  Can you file a ticket?
> 
> Good news.  No need to file a ticket:
> 
>   https://twistedmatrix.com/trac/ticket/3303
> 
> Just need to resolve it.
> 
> Jean-Paul

Thanks for digging this one up.  Always nice to avoid a dup :).

-glyph





From trac at twistedmatrix.com  Sun Aug  3 00:05:17 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Aug 2014 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1407045917.73.2796446538767703902@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140803/d1dc24dc/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Aug  4 15:34:13 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 4 Aug 2014 14:34:13 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
Message-ID: <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>


On Jul 27, 2014, at 7:26 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> I've been trying to address ticket 7274
> 
> https://twistedmatrix.com/trac/ticket/7274
> 
> To do this, I am trying to understand the PB protocol. While I found a spec for banana in twisted-daniel/docs/core/specifications/banana.rst, I have not found anything similar for pb. I've been piecing it together by writing little test scripts, but it is slow going. In particular, it is very difficult to understand the meaning of verbs like "cook" and "preserve" and nouns like "persistent store" without some global picture of what's going on.
> 
> 1. Is there some kind of narrative documentation on how pb works under the hood?

I don't believe there is.

> 2. Is there a specification for the pb dialect of banana?

Beyond the code, no.

> 3. Is there anyone else out there interested enough in pb to want to work with me to figure things out and produce documentation if there isn't any currently?

I would be happy to answer questions, but obviously I'm not super responsive :).  Let me know what you need.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140804/57ac1865/attachment-0002.html>

From sank.daniel at gmail.com  Mon Aug  4 22:47:41 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 4 Aug 2014 21:47:41 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
Message-ID: <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>

glyph,

>> 2. Is there a specification for the pb dialect of banana?
>>
> Beyond the code, no.

Ok.

> I would be happy to answer questions, but obviously I'm not super
responsive :).
> Let me know what you need.

For two personal projects, I would like to have a reasonable remote objects
library in python. I need something which can announce state changes to
clients, and receive state change requests from clients. My solution:

1. Make server side class which can spawn Cacheables when it wants to tell
clients of its existence.
2. Give RemoteCaches to clients and use observe_* methods as appropriate.
3. Stuff a Viewable into the RemoteCaches so that clients can request state
changes.

Question #1: Is this a reasonable use of pb?

This all worked great until I ran into a bug. In trying to fix the bug, I
found that

1. pb code is really hard to understand
2. exarkun's thinks pb is bad and that I should implement what I need in
AMP.
3. exarkun thinks banana and jelly are reasonable.

Question #2: Would you recommend implementing a simplified replacement for
pb on top of banana/jelly, or starting over from AMP? I favor the
banana/jelly route because the protocol seems intrinsically flexible, but I
read your blog explaining why protocols like banana are bad, so I'm
confused about what I "should" do.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140804/cd020ed4/attachment-0002.html>

From sank.daniel at gmail.com  Mon Aug  4 23:07:16 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 4 Aug 2014 22:07:16 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
Message-ID: <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>

glyph

> I would be happy to answer questions, but obviously I'm not super
responsive :).
> Let me know what you need.

I am trying to understand jelly's serialization strategy:

1. In t.s.jelly._Jellier, what is the meaning of persistentStore?
2. In t.s.jelly._Jellier, what is the meaning of cooked? The comment here
doesn't make sense to me yet.
3. In t.s.jelly._Jellier, what is the meaning of cooker?

A short, narrative explanation of what _Jellier does would be very useful,
and if you provide it I will submit a patch to the documentation.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140804/127187da/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Aug  5 12:55:59 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Aug 2014 11:55:59 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
Message-ID: <6FDA6624-A4D8-4614-B981-5EC15EFD26E3@twistedmatrix.com>


On Aug 4, 2014, at 9:47 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> >> 2. Is there a specification for the pb dialect of banana?
> >>
> > Beyond the code, no.
> 
> Ok.
> 
> > I would be happy to answer questions, but obviously I'm not super responsive :).
> > Let me know what you need.
> 
> For two personal projects, I would like to have a reasonable remote objects library in python. I need something which can announce state changes to clients, and receive state change requests from clients. My solution:
> 
> 1. Make server side class which can spawn Cacheables when it wants to tell clients of its existence.
> 2. Give RemoteCaches to clients and use observe_* methods as appropriate.
> 3. Stuff a Viewable into the RemoteCaches so that clients can request state changes.
> 
> Question #1: Is this a reasonable use of pb?

Yes.

> This all worked great until I ran into a bug. In trying to fix the bug, I found that
> 
> 1. pb code is really hard to understand

Sorry about that.

> 2. exarkun's thinks pb is bad and that I should implement what I need in AMP.

I really wish we would stop calling things "bad" and "good".  This isn't a helpful classification.  PB is adequate for a particular set of requirements.  Those requirements are somewhat unusual, and AMP is better for a lot of use-cases.

It sounds to me like you are a lot more interested in 

> 3. exarkun thinks banana and jelly are reasonable.

Again, what does "reasonable" mean in this context?

Let me explain my own opinion about this.

Banana is a perfectly serviceable low-level marshaling format.  It's pretty efficient when compared to something like JSON, and has compression mechanisms which can make it even more efficient (the "dialect" support you referred to).  The only thing about it that isn't very general is that its implementation (although not the protocol specification) hard-codes the PB abbreviated-string dialect.

Jelly is higher level, but more language-specific. Its specification implicitly encodes numerous Python implementation details, like the distinction between "tuple" and "list".  It also couples very tightly to your program's structure.  This can be a real benefit to getting a protocol up and running quickly, but it still allows you to create protocols where you don't really know what the wire format is, where you develop hidden dependencies.  In more complex protocols (where the "ease of getting up and running quickly" thing really starts to shine) this attribute of Jelly can cause real difficulty in any kind of cross-system communication: communicating with a peer from a different language, or even in Python without access to all the protocol class definitions from the original system, is hard because it requires reverse-engineering.  This is where it becomes "bad".  Still, it isn't as big of a disaster security- and maintenance-wise as Pickle.  The information you need is recorded in the code, it's just spread out, you don't need to work backwards from protocol dumps.  If I were going to spend some time maintaining PB, this is where I'd focus: if the schemas were a bit more explicit, could be collected into one place more easily, and were all validated in advance (before passing deserialized objects to the application code, or serializing them across the wire), then these problems could be addressed without changing the API too much.

PB basically just inherits all of the benefits and caveats of Jelly.  It's a trivial serialization of remote references to objects.

> Question #2: Would you recommend implementing a simplified replacement for pb on top of banana/jelly, or starting over from AMP? I favor the banana/jelly route because the protocol seems intrinsically flexible, but I read your blog explaining why protocols like banana are bad, so I'm confused about what I "should" do.

First of all, don't take my development advice as gospel.  When I write an article and publish it, I'm just trying to make people aware of issues they may not have considered; make your own decisions about how to write your own code.

(Unless your decision is to write it yourself in PHP, of course, in which case you are a danger to yourself and others and should be remanded to compulsory treatment.)

It seems like PB fits your style, and the problems with it are all tractable and fixable.  I am sad that you're not getting the development support you need to maintain it (most of all I'm sad you're not getting it from me!) but let's see if we can fix that.  I'll start by replying to your other email.

One thing that might speed things along is if you can help out with some code reviews.  We've got a _really_ long queue right now and that's making it hard for me to spend any focused effort in one particular area.  I'm happy to trade 2-for-1 - if you do two code reviews, I will regard it as an immediate obligation for me to review a ticket you direct me to ;).

It might also help to write more small, simple patches for PB.  Especially adding docstrings to make the nature of your other, more complex changes easier for reviewers to understand.  These would also be easier to land, and a couple of decades in open source has taught me that nothing motivates development activity like successful development activity ;).

Good luck,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140805/c5b9de65/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Aug  5 13:41:44 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Aug 2014 12:41:44 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
Message-ID: <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>


On Aug 4, 2014, at 10:07 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph
> 
> > I would be happy to answer questions, but obviously I'm not super responsive :).
> > Let me know what you need.
> 
> I am trying to understand jelly's serialization strategy:
> 
> 1. In t.s.jelly._Jellier, what is the meaning of persistentStore?

From the perspective of PB, you can ignore this completely.  It's effectively an unused feature.

There are two entry-point call-sites for jelly in Pb.  Broker.unserialize and Broker.serialize.  Both explicitly pass "None" for the "persistent" argument, "persistentStore" and "persistentLoad" respectively.

Reaching back into my dim and distant memory of the ancient past, I believe that the purpose of these callables was to allow you to use Jelly (and perhaps PB) to refer to objects in some kind of pluggable long-term storage.  The reason they're called "persistent" was that "ephemeral" storage was local to the connection, and therefore short-lived enough that we could trust that an in-memory Python dictionary would be both large enough and long-lived enough to serve it.

But if you have your objects in a database, you might want a different database backend with an application-provided callable for loading objects by ID.

Again, this was never really used, so you can probably ignore it.  (I think there might have been a 4X massively multiplayer video game which used it in 2002 or so, but nothing since then that I'm aware of, especially since PB doesn't even have a way to pass in your own without subclassing and overriding 'serialize'.)

> 2. In t.s.jelly._Jellier, what is the meaning of cooked? The comment here doesn't make sense to me yet.

I just read the comment in _cook, and I hate my younger self right now.  Seriously.  Screw that guy.

When you make a jelly, you have to cook the fruit first.  So part of the metaphor here is that you are "cooking" the objects as you're serialize them.

The "cooked" attribute maps object IDs (integers representing pointers, at least in CPython) to "dereference" jelly expressions.  It is said to be "cooked" at that point because you no longer need to put in the energy (I guess heat, in this metaphor?) to serialize the internal state.  A "dereference" expression is one that points at an object within the same Jelly, so this is not like something pointing at a remote reference.

It uses object IDs for keys and not the objects themselves because these objects are (since they can participate in circular references) implicitly mutable, and mutable objects often don't have a working __hash__ implementation, so we can't rely on that.

This happens in a weird order because an object may circularly refer to itself, so we prepare it and put it in the "preserved" map before actually beginning the serialization process of its initial state.

We also don't want to pollute the jelly output with reference IDs for every single object that _might_ be referenced more than once, we only want to add the ['reference'] expression if we actually refer to it twice.

If you look at this example:

>>> from twisted.spread.jelly import jelly
>>> circular = [1, 2]
>>> circular.append(circular)
>>> jelly(circular)
['reference', 1, ['list', 1, 2, ['dereference', 1]]]
>>> acyclic = [1, 2]
>>> jelly(acyclic)
['list', 1, 2]

You can see that the circular list allocates a reference ID '1' for the circular list.  The output list there would have been the thing that went into the _Jellier's "cooked" list, keyed by the 'id' for the serialized list, and then 'reference 1' would have been inserted into the beginning and its body appended.

So the steps are:

Here's a mutable object.  Let me remember that I've seen it, just in case I see it again.
Now I'm going to recursively serialize it.
Oh, here it is again, I know it's the same object because it has the same ID.  Instead of serializing it, I'll change the ['list'] into a ['reference', 1] and stick in a ['dereference', 1] here.

If we never get to step 3, we never see the ['reference'] at all, and it's as if this functionality didn't exist.

> 3. In t.s.jelly._Jellier, what is the meaning of cooker?

The "cooker" attribute is a hack related to the use of "id" for the unique IDs.  If we used the object itself as the key (which we shouldn't do, for reasons I mentioned above), then we could just rely on it sticking around until the end of the 'jelly' call.  But instead, we use its 'id', which is its pointer address, so we need to make sure that it lives on until the end of the _Jellier's lifetime, so we just stick it into the "cooker" map as the value.  You'll notice that there's no store of the object itself anywhere else: in "cooked" the key is the ID, and the value is the serialized output value that Jelly is going to write out.

If we didn't make sure the object stuck around, a different object might get the same ID, and that would produce spurious back-references (like, we might get a ['dereference'] where something harmless like a string should go).

> A short, narrative explanation of what _Jellier does would be very useful, and if you provide it I will submit a patch to the documentation.

A _Jellier jellies objects of course, isn't it obvious ;-).

Hopefully you can make sense out of the explanations above and your own existing knowledge.  Are there any other phases of the process which are confusing?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140805/f6e94323/attachment-0002.html>

From lacrima.maxim at gmail.com  Wed Aug  6 12:14:20 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Wed, 6 Aug 2014 21:14:20 +0300
Subject: [Twisted-Python] Embedding manhole interpreter into insults widget.
Message-ID: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>

Hello,

I have been trying to create a widget that encloses manhole interpreter.
Here is somewhat hacky implementation that I came up with at this moment:

  1 from twisted.conch.insults import insults
  2 from twisted.conch.insults import window
  3 from twisted.conch.insults import helper
  4 from twisted.conch import manhole
  5
  6
  7 class TerminalBufferLastWrite(helper.TerminalBuffer):
  8
  9     lastWrite = ''
 10
 11     def write(self, bytes):
 12         self.lastWrite = bytes
 13         helper.TerminalBuffer.write(self, bytes)
 14
 15 for name, const in zip(insults._KEY_NAMES, insults.FUNCTION_KEYS):
 16     setattr(TerminalBufferLastWrite, name, const)
 17
 18
 19 class ManholeWidget(window.Widget):
 20
 21     def __init__(self, namespace, width, height):
 22         self._buf = TerminalBufferLastWrite()
 23         self._buf.width = width
 24         self._buf.height = height
 25         self._buf.connectionMade()
 26
 27         self.manholeProto = manhole.Manhole(namespace)
 28         self.manholeProto.makeConnection(self._buf)
 29
 30     def keystrokeReceived(self, keyID, modifier):
 31         super(ManholeWidget, self).keystrokeReceived(keyID, modifier)
 32         self.manholeProto.keystrokeReceived(keyID, modifier)
 33         self.repaint()
 34
 35     def render(self, width, height, terminal):
 36         for y, line in enumerate(self._buf.lines[0:height]):
 37             terminal.cursorPosition(0, y)
 38             n = 0
 39             for n, (ch, attr) in enumerate(line[0:width]):
 40                 if ch is self._buf.void:
 41                     ch = ' '
 42                 else:
 43                     cursorRow = y
 44                 terminal.write(ch)
 45             if n < width:
 46                 terminal.write(' ' * (width - n - 1))
 47             terminal.cursorPosition(self.manholeProto.lineBufferIndex +
4,
 48                                     cursorRow)


Basically, I substitute real terminal (`insults.ServerProtocol`) with
slightly extended `TerminalBuffer`, which is used by manhole interpreter to
write its output. `ManholeWidget.render` method is almost entirely reuses
code from `window.Viewport`.

This widget appears to work.

However, here is the problem: if terminal size is large enough (say,
200x50), then there are some io lags (similar to ssh session over slow
internet connection).

The reason is that on each keystroke, the whole terminal buffer is redrawn.
I wonder how I can optimize this. Currently I don't see a solution. Also I
am wondering if I took right approach to embed manhole interpreter into a
widget in the first place, but I don't see a solution, except using
`TerminalBuffer` to capture manhole output.

Thanks.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140806/036ea576/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Aug  6 13:48:42 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 6 Aug 2014 12:48:42 -0700
Subject: [Twisted-Python] Embedding manhole interpreter into insults
	widget.
In-Reply-To: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
References: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
Message-ID: <C1FC8795-6D26-4900-9D71-5E5104C9822D@twistedmatrix.com>


On Aug 6, 2014, at 11:14 AM, Maxim Lacrima <lacrima.maxim at gmail.com> wrote:

> The reason is that on each keystroke, the whole terminal buffer is redrawn. I wonder how I can optimize this. Currently I don't see a solution. Also I am wondering if I took right approach to embed manhole interpreter into a widget in the first place, but I don't see a solution, except using `TerminalBuffer` to capture manhole output.

Optimizing this will almost certainly involve patching Twisted.  Which you should definitely do :).

The reason the entire screen is redrawn is that a general implementation of a widget, i.e. one that can be displayed anywhere on the terminal, you do just have to redraw the entire widget when certain things happen, like when the screen scrolls.  You can see this in other software by observing the fairly significant performance difference between a vertical split and a horizontal split in tmux.  Nothing to do with Twisted there, just a general limitation of terminals.

The optimizations you could implement are one where inputting individual characters doesn't cause a full screen redraw, and avoiding a full screen redraw when scrolling if the edges of the widget touch the edges of the full terminal (setting up a scroll area for that case).

I think that using a widget for this case does indeed make sense (just as I'm super glad that tmux has vertical splits, even if they're kinda slow), and it would be great to get these optimizations into Twisted.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140806/6e9447a0/attachment-0002.html>

From kebin70 at gmail.com  Wed Aug  6 15:12:32 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 6 Aug 2014 14:12:32 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <6FDA6624-A4D8-4614-B981-5EC15EFD26E3@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <6FDA6624-A4D8-4614-B981-5EC15EFD26E3@twistedmatrix.com>
Message-ID: <CAA-sNEZB9NuEn5_LfoSdB7UqgPfOWzNfDXdF8RpO2G+Y3-vjgw@mail.gmail.com>

This discussion seems relevant to a design pattern "Yearbook Lifecycle"
that I'm using for athleets.com and junkeet.com.

Design Goal:

1) Maintain yearbooks across state, allowing students to delegate access
control to classmates as a series of transformations (recursive web
renders) - here sign my yearbook...here read what so-and-so wrote..can I
take your yearbook to PE, we might skip class.

2) Persist inside a context indexer that answers yearbook queries, with
generic access to the t0 and viewable access to t1+ transforms with request
controls for represented as e0, e1 being another recursive web template
kept within the master at t-1

So a complex use case would be a yearbook message like "OMG - did you read
{s1.p3.t4}? cause {e4.s3} said f_td(after|before) {e2.s6} was kissing
behind {p3.t0.a4}.  See you this summer good luck at
{owner.ext['college']}! BFF, {s3}"

Fake Model

YearbookPage(Element):
SignedYearbookPage(YearbookPage):

Yearbook(pb.Copyable)
-pages
-accessControlLog
StudentYearbook(pb.Viewable)
--transformation

YearbookServiceTransformer(??)

Publish(pb.Root)
    remote_issue_yearbook(studentid=None): // none can read but not signed

Athleets.com is ready(ing) for yearbook-ish events, ie when a players get
traded or hurt.  Other events act across yearbook motif regenerating the
t0 when athlete data changes which republishes all copies non t0 that exist.

The Sender Receiver Model from the example is difficult to follow cause I
tend to think of Originator only.  The originator being a service that
waits for clients in need of a working copy.  A sender, doesn't exist...it
would be more of a challenger, that if recognized as more authoritative,
replaces the rb.Root service.  Outside of the copyable I'm trying to
upstream via remotes pieces within the copyable that need updating.  I'm
delving into viewable to bring caller identity data to the web templating
process not necessary restrict access.  But also to build a system that
maintains audit history within the yearbook model. Getting to areas of
non-working code, so let me report back any success.

Cheers
Kevin



On Tue, Aug 5, 2014 at 11:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Aug 4, 2014, at 9:47 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
>
> glyph,
>
> >> 2. Is there a specification for the pb dialect of banana?
> >>
> > Beyond the code, no.
>
> Ok.
>
> > I would be happy to answer questions, but obviously I'm not super
> responsive :).
> > Let me know what you need.
>
> For two personal projects, I would like to have a reasonable remote
> objects library in python. I need something which can announce state
> changes to clients, and receive state change requests from clients. My
> solution:
>
> 1. Make server side class which can spawn Cacheables when it wants to tell
> clients of its existence.
> 2. Give RemoteCaches to clients and use observe_* methods as appropriate.
> 3. Stuff a Viewable into the RemoteCaches so that clients can request
> state changes.
>
> Question #1: Is this a reasonable use of pb?
>
>
> Yes.
>
> This all worked great until I ran into a bug. In trying to fix the bug, I
> found that
>
> 1. pb code is really hard to understand
>
>
> Sorry about that.
>
> 2. exarkun's thinks pb is bad and that I should implement what I need in
> AMP.
>
>
> I really wish we would stop calling things "bad" and "good".  This isn't a
> helpful classification.  PB is adequate for a particular set of
> requirements.  Those requirements are somewhat unusual, and AMP is better
> for a lot of use-cases.
>
> It sounds to me like you are a lot more interested in
>
> 3. exarkun thinks banana and jelly are reasonable.
>
>
> Again, what does "reasonable" mean in this context?
>
> Let me explain my own opinion about this.
>
> Banana is a perfectly serviceable low-level marshaling format.  It's
> pretty efficient when compared to something like JSON, and has compression
> mechanisms which can make it even more efficient (the "dialect" support you
> referred to).  The only thing about it that isn't very general is that its
> implementation (although not the protocol specification) hard-codes the PB
> abbreviated-string dialect.
>
> Jelly is higher level, but more language-specific. Its specification
> implicitly encodes numerous Python implementation details, like the
> distinction between "tuple" and "list".  It also couples very tightly to
> your program's structure.  This can be a real benefit to getting a protocol
> up and running quickly, but it still allows you to create protocols where
> you don't really know what the wire format is, where you develop hidden
> dependencies.  In more complex protocols (where the "ease of getting up and
> running quickly" thing really starts to shine) this attribute of Jelly can
> cause real difficulty in any kind of cross-system communication:
> communicating with a peer from a different language, or even in Python
> without access to all the protocol class definitions from the original
> system, is hard because it requires reverse-engineering.  This is where it
> becomes "bad".  Still, it isn't as big of a disaster security- and
> maintenance-wise as Pickle.  The information you need *is* recorded in
> the code, it's just spread out, you don't need to work backwards from
> protocol dumps.  If I were going to spend some time maintaining PB, this is
> where I'd focus: if the schemas were a bit more explicit, could be
> collected into one place more easily, and were all validated in advance
> (before passing deserialized objects to the application code, or
> serializing them across the wire), then these problems could be addressed
> without changing the API too much.
>
> PB basically just inherits all of the benefits and caveats of Jelly.  It's
> a trivial serialization of remote references to objects.
>
> Question #2: Would you recommend implementing a simplified replacement for
> pb on top of banana/jelly, or starting over from AMP? I favor the
> banana/jelly route because the protocol seems intrinsically flexible, but I
> read your blog explaining why protocols like banana are bad, so I'm
> confused about what I "should" do.
>
>
> First of all, don't take my development advice as gospel.  When I write an
> article and publish it, I'm just trying to make people aware of issues they
> may not have considered; make your own decisions about how to write your
> own code.
>
> (Unless your decision is to write it yourself in PHP, of course, in which
> case you are a danger to yourself and others and should be remanded to
> compulsory treatment.)
>
> It seems like PB fits your style, and the problems with it are all
> tractable and fixable.  I am sad that you're not getting the development
> support you need to maintain it (most of all I'm sad you're not getting it
> from me!) but let's see if we can fix that.  I'll start by replying to your
> other email.
>
> One thing that might speed things along is if you can help out with some
> code reviews.  We've got a _really_ long queue right now and that's making
> it hard for me to spend any focused effort in one particular area.  I'm
> happy to trade 2-for-1 - if you do two code reviews, I will regard it as an
> immediate obligation for me to review a ticket you direct me to ;).
>
> It might also help to write more small, simple patches for PB.  Especially
> adding docstrings to make the nature of your other, more complex changes
> easier for reviewers to understand.  These would also be easier to land,
> and a couple of decades in open source has taught me that nothing motivates
> development activity like successful development activity ;).
>
> Good luck,
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140806/86e2b500/attachment-0002.html>

From lacrima.maxim at gmail.com  Thu Aug  7 03:00:20 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Thu, 7 Aug 2014 12:00:20 +0300
Subject: [Twisted-Python] Embedding manhole interpreter into insults
	widget.
In-Reply-To: <C1FC8795-6D26-4900-9D71-5E5104C9822D@twistedmatrix.com>
References: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
 <C1FC8795-6D26-4900-9D71-5E5104C9822D@twistedmatrix.com>
Message-ID: <CAKef57Pyk30bOGZAfp8QpPuHJP37j3KAwj_ycKzv11STWfN2wQ@mail.gmail.com>

On 6 August 2014 22:48, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>
> Optimizing this will almost certainly involve patching Twisted.  Which you
> should definitely do :).
>
> The reason the entire screen is redrawn is that a *general* implementation
> of a widget, i.e. one that can be displayed anywhere on the terminal, you
> do just have to redraw the entire widget when certain things happen, like
> when the screen scrolls.  You can see this in other software by observing
> the fairly significant performance difference between a vertical split and
> a horizontal split in tmux.  Nothing to do with Twisted there, just a
> general limitation of terminals.
>

> The optimizations you could implement are one where inputting individual
> characters doesn't cause a full screen redraw, and avoiding a full screen
> redraw when scrolling if the edges of the widget touch the edges of the
> full terminal (setting up a scroll area for that case).
>

When manhole is used directly, then it is very responsive, and the
performance doesn't degrade with increase of screen size. It holds only
what user entered and writes the input line and command output directly to
its transport, without bothering itself with processing of the whole
screen. When I embed manhole into the widget like above, then the
performance suffers. I think this is due to `TerminalBuffer` having to hold
whole widget area (columns * rows) in memory, even if only a small portion
of it is actually occupied by user input and command output. Rendering the
whole buffer on each keystroke is slow. After experimenting a little bit, I
think optimizations that you described mostly apply to
`ManholeWidget.render` method, which shouldn't traverse the whole buffer on
each keystroke. Currently I don't see how this involves patching widget
implementation in Twisted. What is more important to me is that
`TerminalBuffer` implementation is slightly incomplete. I think it misses
color support, because I couldn't make it work with `ColoredManhole`.


>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140807/19bfd0ef/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Aug  7 05:53:49 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 07 Aug 2014 11:53:49 -0000
Subject: [Twisted-Python] Embedding manhole interpreter into insults
 widget.
In-Reply-To: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
References: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
Message-ID: <20140807115349.20413.1135784104.divmod.xquotient.928@top>

On 6 Aug, 06:14 pm, lacrima.maxim at gmail.com wrote:
>Hello,
>
>I have been trying to create a widget that encloses manhole 
>interpreter.
>Here is somewhat hacky implementation that I came up with at this 
>moment:

Widgets and the manhole interpreter are implemented using two pretty 
distinct approaches.

As you've figured out, these approaches can be integrated (at least in 
one direction) using a terminal emulator - 
`twisted.conch.insults.helper.TerminalBuffer`.

However, `TerminalBuffer` is an extremely low quality terminal emulator. 
Among its many flaws is that it uses a number of incredibly inefficient 
implementations for common terminal operations (many of its other flaws 
are along the lines of "it has a bug in the implementation of X").

If I were going to create a manhole widget then I would do it "natively" 
- not by bridging the existing manhole protocol to the widget system 
with TerminalBuffer but by writing a new widget that does manhole stuff 
all by itself.

I suggest that you might want to pursue this approach instead of trying 
to optimize and fix bugs in TerminalBuffer.

Ultimately it would be nice if a widget-based manhole were *the* manhole 
and the current implementation went away.

However, that said, as far as I know, no vt-style terminals support 
efficient redrawing for the "vertically scroll one portion of the 
terminal separated from another portion by a vertical divider".

You will be able to avoid the redundant work of re-rendering the Python 
buffer representing the terminal state but you'll still have to re- 
transmit the bytes representing the entire terminal display to the 
terminal on each redraw - unless you avoid vertical dividers.

Jean-Paul



From sank.daniel at gmail.com  Thu Aug  7 11:42:05 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 7 Aug 2014 10:42:05 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
Message-ID: <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>

glyph,

> I really wish we would stop calling things "bad" and "good".

My wording of exarkun's wording. He gave a much more detailed description
of what he think's is "crazy" about pb.

> make your own decisions about how to write your own code.

Indeed, but gathering information from wiser folks is always a good idea,
and usually best done _often_ during development :)

> I'm happy to trade 2-for-1 - if you do two code reviews, I will regard it
as an immediate obligation for
> me to review a ticket you direct me to ;).

Deal. However, rather than direct your attention to tickets, at this stage
I would rather trade reviews for discussion. I'll do two reviews and then
post a few questions to this mailing list thread. Once I start actually
writing patches/new code we can trade reviews for attention to tickets. Ok?

> These would also be easier to land, and a couple of decades in open
source has taught me that nothing
> motivates development activity like successful development activity ;).

Indeed. There are one or two architectural issues I want to understand
before moving on to real coding. I will try to get through that asap by
reviewing tickets and trading for discussion of those architectural issues.

> Hopefully you can make sense out of the explanations above and your own
existing knowledge.
> Are there any other phases of the process which are confusing?

This all makes sense now. I hadn't understood the point of the cooker, but
now that you've explained it, I understand what's going on. I will
transform your mailing list explanation to documentation shortly.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140807/f4263d2c/attachment-0002.html>

From kebin70 at gmail.com  Fri Aug  8 00:29:04 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Thu, 7 Aug 2014 23:29:04 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
Message-ID: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>

goal: Give knowitall.py awareness of wordsmith.py addition.

to run
./library.sh # opens 7999 for remote_dictionary and remote_define methods
then both:
python knowitall.py
python wordsmith.py

library.sh due to main/jelly issues
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140807/dc055132/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: example.py
Type: text/x-python
Size: 2329 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140807/dc055132/attachment-0006.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: knowitall.py
Type: text/x-python
Size: 814 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140807/dc055132/attachment-0007.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: library.sh
Type: application/x-sh
Size: 292 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140807/dc055132/attachment-0002.sh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: wordsmith.py
Type: text/x-python
Size: 836 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140807/dc055132/attachment-0008.py>

From kebin70 at gmail.com  Fri Aug  8 00:42:23 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Thu, 7 Aug 2014 23:42:23 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
Message-ID: <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>

wordsmith argument order issues re-take.

Cheers,
Kevin


On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> goal: Give knowitall.py awareness of wordsmith.py addition.
>
> to run
> ./library.sh # opens 7999 for remote_dictionary and remote_define methods
> then both:
> python knowitall.py
> python wordsmith.py
>
> library.sh due to main/jelly issues
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140807/9060029c/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: example.py
Type: text/x-python
Size: 2329 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140807/9060029c/attachment-0006.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: knowitall.py
Type: text/x-python
Size: 814 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140807/9060029c/attachment-0007.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: library.sh
Type: application/x-sh
Size: 292 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140807/9060029c/attachment-0002.sh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: wordsmith.py
Type: text/x-python
Size: 912 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140807/9060029c/attachment-0008.py>

From lacrima.maxim at gmail.com  Fri Aug  8 00:47:56 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Fri, 8 Aug 2014 09:47:56 +0300
Subject: [Twisted-Python] Embedding manhole interpreter into insults
	widget.
In-Reply-To: <20140807115349.20413.1135784104.divmod.xquotient.928@top>
References: <CAKef57N3kAO5GGGY_r-4_3GG7YMcJPR7pP_wdwjfjnCk3Rv_cw@mail.gmail.com>
 <20140807115349.20413.1135784104.divmod.xquotient.928@top>
Message-ID: <CAKef57P5BDvK4q4B8N7zjnp2RQhAYrYYpZGrFRPhE3+S1sEHyQ@mail.gmail.com>

Hi,

Thanks for your explanation. Now I understand a lot better how things work.
I will try to implement "native" manhole widget. I think this will be a
good exercise for me to learn how terminals and `twisted.conch` work.

Thanks.


On 7 August 2014 14:53, <exarkun at twistedmatrix.com> wrote:

> On 6 Aug, 06:14 pm, lacrima.maxim at gmail.com wrote:
>
>> Hello,
>>
>> I have been trying to create a widget that encloses manhole interpreter.
>> Here is somewhat hacky implementation that I came up with at this moment:
>>
>
> Widgets and the manhole interpreter are implemented using two pretty
> distinct approaches.
>
> As you've figured out, these approaches can be integrated (at least in one
> direction) using a terminal emulator - `twisted.conch.insults.helper.
> TerminalBuffer`.
>
> However, `TerminalBuffer` is an extremely low quality terminal emulator.
> Among its many flaws is that it uses a number of incredibly inefficient
> implementations for common terminal operations (many of its other flaws are
> along the lines of "it has a bug in the implementation of X").
>
> If I were going to create a manhole widget then I would do it "natively" -
> not by bridging the existing manhole protocol to the widget system with
> TerminalBuffer but by writing a new widget that does manhole stuff all by
> itself.
>
> I suggest that you might want to pursue this approach instead of trying to
> optimize and fix bugs in TerminalBuffer.
>
> Ultimately it would be nice if a widget-based manhole were *the* manhole
> and the current implementation went away.
>
> However, that said, as far as I know, no vt-style terminals support
> efficient redrawing for the "vertically scroll one portion of the terminal
> separated from another portion by a vertical divider".
>
> You will be able to avoid the redundant work of re-rendering the Python
> buffer representing the terminal state but you'll still have to re-
> transmit the bytes representing the entire terminal display to the terminal
> on each redraw - unless you avoid vertical dividers.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/1537ec5e/attachment-0002.html>

From sank.daniel at gmail.com  Fri Aug  8 01:30:37 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 8 Aug 2014 00:30:37 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
Message-ID: <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>

Kevin,

Is there a question there? I'd be happy to try to help if I knew what you
were asking.


On Thu, Aug 7, 2014 at 11:42 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> wordsmith argument order issues re-take.
>
> Cheers,
> Kevin
>
>
> On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
>> goal: Give knowitall.py awareness of wordsmith.py addition.
>>
>> to run
>> ./library.sh # opens 7999 for remote_dictionary and remote_define methods
>> then both:
>> python knowitall.py
>> python wordsmith.py
>>
>> library.sh due to main/jelly issues
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/945ee9c2/attachment-0002.html>

From kebin70 at gmail.com  Fri Aug  8 09:01:24 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 8 Aug 2014 08:01:24 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
Message-ID: <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>

The question is what's necessary to get knowitall.py to receive updates to
held copy.

I start server, start knowitall, run wordsmith.  Knowitall doesn't receive
updates.  I understand why, setCopyableState only gets fired once.
Guessing jelly doesn't hold onto the RemoteCopy or a reference to
RemoteCopy.

Is the next step to add pb.Referenceable to Dictionary class, and use
observe_?



On Fri, Aug 8, 2014 at 12:30 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Kevin,
>
> Is there a question there? I'd be happy to try to help if I knew what you
> were asking.
>
>
> On Thu, Aug 7, 2014 at 11:42 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
>> wordsmith argument order issues re-take.
>>
>> Cheers,
>> Kevin
>>
>>
>> On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com>
>> wrote:
>>
>>> goal: Give knowitall.py awareness of wordsmith.py addition.
>>>
>>> to run
>>> ./library.sh # opens 7999 for remote_dictionary and remote_define methods
>>> then both:
>>> python knowitall.py
>>> python wordsmith.py
>>>
>>> library.sh due to main/jelly issues
>>>
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/f444693e/attachment-0002.html>

From sank.daniel at gmail.com  Fri Aug  8 10:04:30 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 8 Aug 2014 09:04:30 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
Message-ID: <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>

I think Cacheable exists to handle the case you want. Beware there are some
funny issues with Cacheable

https://twistedmatrix.com/trac/ticket/7274

Daniel


On Fri, Aug 8, 2014 at 8:01 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> The question is what's necessary to get knowitall.py to receive updates to
> held copy.
>
> I start server, start knowitall, run wordsmith.  Knowitall doesn't receive
> updates.  I understand why, setCopyableState only gets fired once.
> Guessing jelly doesn't hold onto the RemoteCopy or a reference to
> RemoteCopy.
>
> Is the next step to add pb.Referenceable to Dictionary class, and use
> observe_?
>
>
>
> On Fri, Aug 8, 2014 at 12:30 AM, Daniel Sank <sank.daniel at gmail.com>
> wrote:
>
>> Kevin,
>>
>> Is there a question there? I'd be happy to try to help if I knew what you
>> were asking.
>>
>>
>> On Thu, Aug 7, 2014 at 11:42 PM, Kevin Mcintyre <kebin70 at gmail.com>
>> wrote:
>>
>>> wordsmith argument order issues re-take.
>>>
>>> Cheers,
>>> Kevin
>>>
>>>
>>> On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com>
>>> wrote:
>>>
>>>> goal: Give knowitall.py awareness of wordsmith.py addition.
>>>>
>>>> to run
>>>> ./library.sh # opens 7999 for remote_dictionary and remote_define
>>>> methods
>>>> then both:
>>>> python knowitall.py
>>>> python wordsmith.py
>>>>
>>>> library.sh due to main/jelly issues
>>>>
>>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>>
>> --
>> Daniel Sank
>> Department of Physics
>> Broida Hall
>> University of California
>> Santa Barbara, CA 93117
>> (805)893-3899
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/15870582/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Aug  8 11:57:52 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 8 Aug 2014 10:57:52 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
Message-ID: <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>


On Aug 7, 2014, at 10:42 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> > I really wish we would stop calling things "bad" and "good".
> 
> My wording of exarkun's wording. He gave a much more detailed description of what he think's is "crazy" about pb.

This was a complaint about a general trend, not about specific words.  Clearly exarkun gave you the impression that it is "bad", whether he specifically said so or not.

We're all intimately familiar with everything that's terrible about all of our code, and we aren't shy about sharing.  I just would like it if we could really lead with the details and refrain from value judgements :).

> > make your own decisions about how to write your own code.
> 
> Indeed, but gathering information from wiser folks is always a good idea, and usually best done _often_ during development :)

I might quibble with "wiser" but okay.  I'm happy to provide feedback earlier so I don't have to say "what is this disaster" later ;-).

> > I'm happy to trade 2-for-1 - if you do two code reviews, I will regard it as an immediate obligation for
> > me to review a ticket you direct me to ;).
> 
> Deal. However, rather than direct your attention to tickets, at this stage I would rather trade reviews for discussion. I'll do two reviews and then post a few questions to this mailing list thread. Once I start actually writing patches/new code we can trade reviews for attention to tickets. Ok?

I'm happy to do that.

> > These would also be easier to land, and a couple of decades in open source has taught me that nothing
> > motivates development activity like successful development activity ;).
> 
> Indeed. There are one or two architectural issues I want to understand before moving on to real coding. I will try to get through that asap by reviewing tickets and trading for discussion of those architectural issues.

I'll try to respond to these questions regardless.  I would like to help.  It's just that the reviews will create a more tangible sense of commitment :).

> > Hopefully you can make sense out of the explanations above and your own existing knowledge.
> > Are there any other phases of the process which are confusing?
> 
> This all makes sense now. I hadn't understood the point of the cooker, but now that you've explained it, I understand what's going on. I will transform your mailing list explanation to documentation shortly.

Great, glad that helped.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/fc9b4c84/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri Aug  8 12:26:15 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 08 Aug 2014 18:26:15 -0000
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
Message-ID: <20140808182615.20413.83364169.divmod.xquotient.935@top>

On 05:57 pm, glyph at twistedmatrix.com wrote:
>
>On Aug 7, 2014, at 10:42 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
>>glyph,
>>
>> > I really wish we would stop calling things "bad" and "good".
>>
>>My wording of exarkun's wording. He gave a much more detailed 
>>description of what he think's is "crazy" about pb.
>
>This was a complaint about a general trend, not about specific words. 
>Clearly exarkun gave you the impression that it is "bad", whether he 
>specifically said so or not.

I don't understand what you're saying here.

Do you want people to not describe the shortcomings of certain pieces of 
software?

Or do you want people not to conclude from such descriptions that those 
pieces of software are not the most well suited for certain 
applications?

Or do you want people to write two pages of description every time they 
want to refer to the idea that a certain piece of software isn't the 
best choice for a certain application?

Could you clarify what you think the problem here actually is?
>
>We're all intimately familiar with everything that's terrible about all 
>of our code, and we aren't shy about sharing.  I just would like it if 
>we could really lead with the details and refrain from value judgements 
>:).

In this case, it seems like that's exactly what happened.  I led with 
detail.  The value judgement of PB being "bad" (which is a gross over- 
simplification, but a convenient shorthand) came afterwards.

Jean-Paul
>> > make your own decisions about how to write your own code.
>>
>>Indeed, but gathering information from wiser folks is always a good 
>>idea, and usually best done _often_ during development :)
>
>I might quibble with "wiser" but okay.  I'm happy to provide feedback 
>earlier so I don't have to say "what is this disaster" later ;-).
>> > I'm happy to trade 2-for-1 - if you do two code reviews, I will 
>>regard it as an immediate obligation for
>> > me to review a ticket you direct me to ;).
>>
>>Deal. However, rather than direct your attention to tickets, at this 
>>stage I would rather trade reviews for discussion. I'll do two reviews 
>>and then post a few questions to this mailing list thread. Once I 
>>start actually writing patches/new code we can trade reviews for 
>>attention to tickets. Ok?
>
>I'm happy to do that.
>> > These would also be easier to land, and a couple of decades in open 
>>source has taught me that nothing
>> > motivates development activity like successful development activity 
>>;).
>>
>>Indeed. There are one or two architectural issues I want to understand 
>>before moving on to real coding. I will try to get through that asap 
>>by reviewing tickets and trading for discussion of those architectural 
>>issues.
>
>I'll try to respond to these questions regardless.  I would like to 
>help.  It's just that the reviews will create a more tangible sense of 
>commitment :).
>> > Hopefully you can make sense out of the explanations above and your 
>>own existing knowledge.
>> > Are there any other phases of the process which are confusing?
>>
>>This all makes sense now. I hadn't understood the point of the cooker, 
>>but now that you've explained it, I understand what's going on. I will 
>>transform your mailing list explanation to documentation shortly.
>
>Great, glad that helped.
>
>-glyph



From kebin70 at gmail.com  Fri Aug  8 14:31:25 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 8 Aug 2014 13:31:25 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
Message-ID: <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>

I think so too, but I'm starting to lean toward websockets.  The warnings
alone right?

But I will take another pass and report back any success.

Cheers,


On Fri, Aug 8, 2014 at 9:04 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

> I think Cacheable exists to handle the case you want. Beware there are
> some funny issues with Cacheable
>
> https://twistedmatrix.com/trac/ticket/7274
>
> Daniel
>
>
> On Fri, Aug 8, 2014 at 8:01 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
>> The question is what's necessary to get knowitall.py to receive updates
>> to held copy.
>>
>> I start server, start knowitall, run wordsmith.  Knowitall doesn't
>> receive updates.  I understand why, setCopyableState only gets fired once.
>> Guessing jelly doesn't hold onto the RemoteCopy or a reference to
>> RemoteCopy.
>>
>> Is the next step to add pb.Referenceable to Dictionary class, and use
>> observe_?
>>
>>
>>
>> On Fri, Aug 8, 2014 at 12:30 AM, Daniel Sank <sank.daniel at gmail.com>
>> wrote:
>>
>>> Kevin,
>>>
>>> Is there a question there? I'd be happy to try to help if I knew what
>>> you were asking.
>>>
>>>
>>> On Thu, Aug 7, 2014 at 11:42 PM, Kevin Mcintyre <kebin70 at gmail.com>
>>> wrote:
>>>
>>>> wordsmith argument order issues re-take.
>>>>
>>>> Cheers,
>>>> Kevin
>>>>
>>>>
>>>> On Thu, Aug 7, 2014 at 11:29 PM, Kevin Mcintyre <kebin70 at gmail.com>
>>>> wrote:
>>>>
>>>>> goal: Give knowitall.py awareness of wordsmith.py addition.
>>>>>
>>>>> to run
>>>>> ./library.sh # opens 7999 for remote_dictionary and remote_define
>>>>> methods
>>>>> then both:
>>>>> python knowitall.py
>>>>> python wordsmith.py
>>>>>
>>>>> library.sh due to main/jelly issues
>>>>>
>>>>>
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>>
>>>
>>>
>>> --
>>> Daniel Sank
>>> Department of Physics
>>> Broida Hall
>>> University of California
>>> Santa Barbara, CA 93117
>>> (805)893-3899
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/e5905395/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Aug  8 15:59:39 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 8 Aug 2014 14:59:39 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <20140808182615.20413.83364169.divmod.xquotient.935@top>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
Message-ID: <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>


On Aug 8, 2014, at 11:26 AM, exarkun at twistedmatrix.com wrote:

>> This was a complaint about a general trend, not about specific words. Clearly exarkun gave you the impression that it is "bad", whether he specifically said so or not.
> 
> Could you clarify what you think the problem here actually is?

I concede I was leaving some stuff out, so that wasn't the clearest description.

In the past six months or so I've been going to lots of events where I talk to people about Twisted, and why they might or might want to use it.

I've participated in this discussion several times:

Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using Tulip because I really like its style of coroutines."
Glyph: "That's interesting. Did you know that Twisted has an equivalent style of coroutines, called inlineCallbacks, that's been around for years?"
HAMISH: "I saw that, and I asked about that a while ago and I heard it was bad.  It haven't heard that Tulip has the same problems, though."
Glyph: "Really? What problems does inlineCallbacks have that Tulip's coroutines don't?"
HAMISH: "When I asked about it everybody told me I have to use Deferreds instead, but Deferreds are really confusing and they make your code look all gross, so I didn't want to do that.  With Tulip I don't have to!"
Glyph: <facepalm>

Of course the problems that we describe with inlineCallbacks are the exact same problems that you will have with Tulip-style coroutines, and in fact in one of the conversations that was averaged out to produce the above composite, my interlocutor specifically mentioned that they'd already had the kind of bug that explicit-yield coroutines can sometimes encourage (thoughtlessly putting in too many 'yield's and not considering their consequences) and were wondering how Twisted dealt with that sort of thing.

I don't object to people using Tulip, or for that matter any of Twisted's event-driven competitors - I'm much happier if they're writing event-driven code of any stripe than just spawning a thread and writing until they block - but it does bother me if they select a different project to use or contribute to because of a perceived issue created only by our collective habit of being tersely self-critical.

When anyone directly involved with producing a thing describes that thing as "good", new observers tend to take it with a grain of salt.  "Of course they think X is good, they work on X." When someone involved with a project describes it as "bad", though, even if it's a convenient shorthand for many people in the conversation for a well-understood set of complex issues, those new observers tend to think, "Wow, if even they describe X as bad, it must be really bad, they work on X!".

What I am asking everyone reading here to do is just avoid calling stuff "bad" or "gross" or "complicated".  Even a stock stand-in phrase that more or less just means "bad" would be better.  Even an unexplained "inappropriate for my use-case", for example, least implies that the user might want to consider the system under discussion's appropriateness for their particular use-case.

>> We're all intimately familiar with everything that's terrible about all of our code, and we aren't shy about sharing.  I just would like it if we could really lead with the details and refrain from value judgements :).
> 
> In this case, it seems like that's exactly what happened.  I led with detail.  The value judgement of PB being "bad" (which is a gross over- simplification, but a convenient shorthand) came afterwards.


Keep in mind that my introduction to this interaction was Daniel saying:

>>> exarkun thinks pb is bad and that I should implement what I need in AMP.


You can see how I might have interpreted this to mean that you just said you think PB is bad :-).

Nevertheless, Daniel didn't lead with the details and refrain from a value judgement, so the advice applies equally well to him.  Which is why I filled out all those details, so other readers of the thread will know what "reasonable" and "bad" mean in this context.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/31fb01d0/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Aug  8 16:01:29 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 8 Aug 2014 15:01:29 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
 <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
Message-ID: <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>


On Aug 8, 2014, at 1:31 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> I think so too, but I'm starting to lean toward websockets.  The warnings alone right?  

Websockets are a layer well below what PB does.  In fact you could run PB over websockets, and it would work roughly the same as over TCP.

> But I will take another pass and report back any success.

Please do let us know.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/0a6332f0/attachment-0002.html>

From rowen at uw.edu  Fri Aug  8 16:58:26 2014
From: rowen at uw.edu (Russell E. Owen)
Date: Fri, 08 Aug 2014 15:58:26 -0700
Subject: [Twisted-Python] help with listening to UDP broadcast?
Message-ID: <rowen-63D6EF.15582608082014@news.gmane.org>

I've found an example for UDP broadcasting:
<https://twistedmatrix.com/trac/browser/trunk/docs/projects/core/examples
/udpbroadcast.py?rev=41516>

However, it combines the sender and receiver in a way that I find 
confusing. I figured out how output UDP broadcast packets, but not how 
to make a client that receives to the packets.

Here is what we have, which doesn't work. Based on a comment on the 
broadcast UDP ticket. I suspect the problem is specifying the broadcast 
address using the interface argument to listenUDP, but I'm not sure. In 
any case, no value for interface that I've tried works:
-"<broadcast>" (which is what my senders uses) results in 
twisted.internet.error.InvalidAddressError
-"255.255.255.255" results in twisted.internet.error.CannotListenError: 
Couldn't listen on 255.255.255.255:1235: [Errno 49] Can't assign 
requested address.
- omitting it results in no packets received.
I also tried listenMulticast, but it didn't work (and I didn't expect it 
to, based on comments I saw on the ticket for implementing UDP broadcast 
support).

Any hints would be appreciated.

#!/usr/bin/env python2
"""Attempt to listen to UDP broadcasts
"""
from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor

Port = 1235

class BroadcastUDPClient(DatagramProtocol):
    def startProtocol(self):
        self.transport.setBroadcastAllowed(True)

    def datagramReceived(self, datagram, address):
        print "got a UDP broadcast packet"

class UDPListener(object):
    def __init__(self, port):
        self.port = port
        self.broadcastClient = BroadcastUDPClient()
        self.listener = None
        self.startListening()

    def startListening(self):
        if self.listener is None:
            interface = "255.255.255.255"
            self.listener = reactor.listenUDP(self.port,
                self.broadcastClient, interface)

    def stopListening(self):
        if self.listener is not None:
            self.listener.stopListening()
            self.listener = None

if __name__ == "__main__":
    listener = UDPListener(Port)
    reactor.run()




From ypercube at gmail.com  Fri Aug  8 18:04:31 2014
From: ypercube at gmail.com (Pantelis Theodosiou)
Date: Sat, 9 Aug 2014 01:04:31 +0100
Subject: [Twisted-Python] help with listening to UDP broadcast?
In-Reply-To: <rowen-63D6EF.15582608082014@news.gmane.org>
References: <rowen-63D6EF.15582608082014@news.gmane.org>
Message-ID: <CAE3TBxzddTKSaemEF26VNVRXafac1WAhxA7gLxqacZd2sho0pg@mail.gmail.com>

Hi Russell,

In an old script I've written, I see the following differences with your
code:

I hadn't used at all  allsetBroadcastAllowed()
but joinGroup()   (in startPrtotocol).

And I don't think the 255.255.255.255 will work. You'll need something like
192.168.1.1 or 127.0.0.1

The code (stripped from irrelevant parts) was:

from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor
from twisted.application.internet import MulticastServer

# Set ports and hosts
ip = '224.0.5.228'
port = 8228

# our interface
interface = '192.168.1.1'

class MulticastClientUDP(DatagramProtocol):

    def startProtocol(self):
        # Join the multicast group
        self.transport.joinGroup(ip, interface)
        self.transport.setTTL(255)

    def datagramReceived(self, datagram, address):
        print "got a UDP broadcast packet"


# set reactor to listen on multicast channels
alertsClient = MulticastClientUDP()
reactor.listenMulticast(port, alertsClient)

reactor.run()


Pantelis Theodosiou


On Fri, Aug 8, 2014 at 11:58 PM, Russell E. Owen <rowen at uw.edu> wrote:

> I've found an example for UDP broadcasting:
> <https://twistedmatrix.com/trac/browser/trunk/docs/projects/core/examples
> /udpbroadcast.py?rev=41516
> <https://twistedmatrix.com/trac/browser/trunk/docs/projects/core/examples/udpbroadcast.py?rev=41516>
> >
>
> However, it combines the sender and receiver in a way that I find
> confusing. I figured out how output UDP broadcast packets, but not how
> to make a client that receives to the packets.
>
> Here is what we have, which doesn't work. Based on a comment on the
> broadcast UDP ticket. I suspect the problem is specifying the broadcast
> address using the interface argument to listenUDP, but I'm not sure. In
> any case, no value for interface that I've tried works:
> -"<broadcast>" (which is what my senders uses) results in
> twisted.internet.error.InvalidAddressError
> -"255.255.255.255" results in twisted.internet.error.CannotListenError:
> Couldn't listen on 255.255.255.255:1235: [Errno 49] Can't assign
> requested address.
> - omitting it results in no packets received.
> I also tried listenMulticast, but it didn't work (and I didn't expect it
> to, based on comments I saw on the ticket for implementing UDP broadcast
> support).
>
> Any hints would be appreciated.
>
> #!/usr/bin/env python2
> """Attempt to listen to UDP broadcasts
> """
> from twisted.internet.protocol import DatagramProtocol
> from twisted.internet import reactor
>
> Port = 1235
>
> class BroadcastUDPClient(DatagramProtocol):
>     def startProtocol(self):
>         self.transport.setBroadcastAllowed(True)
>
>     def datagramReceived(self, datagram, address):
>         print "got a UDP broadcast packet"
>
> class UDPListener(object):
>     def __init__(self, port):
>         self.port = port
>         self.broadcastClient = BroadcastUDPClient()
>         self.listener = None
>         self.startListening()
>
>     def startListening(self):
>         if self.listener is None:
>             interface = "255.255.255.255"
>             self.listener = reactor.listenUDP(self.port,
>                 self.broadcastClient, interface)
>
>     def stopListening(self):
>         if self.listener is not None:
>             self.listener.stopListening()
>             self.listener = None
>
> if __name__ == "__main__":
>     listener = UDPListener(Port)
>     reactor.run()
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140809/f86c99db/attachment-0002.html>

From sank.daniel at gmail.com  Fri Aug  8 19:31:00 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 8 Aug 2014 18:31:00 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
Message-ID: <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>

Twisted dev people dudes,

> Nevertheless, *Daniel* didn't lead with the details and refrain from a
value judgement, so the
> advice applies equally well to him.

Lesson learned. Thanks. I agree that this is important.

Now to bring the thread back on-topic, I'd like to ask what pb should do *in
principle*. In other words, what is the specification for the flavors? I
think a discussion of each pb flavor would be helpful and would provide me
material from which I can generate missing docstrings [1]. I'd rather do it
this way instead of backing out what the standing implementation currently
does so that I don't waste time working on something which is a
fundamentally bad idea. This discussion should be a small investment at the
present time.

Copyable:
The functionality provided by Copyable is simple. The sender of the
Copyable just sends it and *forgets*. Therefore, sending a Copyable is
basically just sending atomic data in a particular format. I don't think we
need to discuss this any further.

Referenceable:
When I send you a Referenceable, I send a GUID so that you can later refer
to that object. For example, I send you a message with argument (psuedo
code)

"referenceable-'Joe'"

This is a declaration that I am keeping hold of an object called "Joe" upon
which you may call methods remotely. Specifically, you can send me

"'Joe-foo-4"

which tells me to call Joe.foo(4) and send you the result.

1. How long should the GUID for Joe survive? If Joe is deleted can I reuse
the name "Joe" for an object created later?
2. Do I notify you if Joe disappears on my side?

Let's stop here for now. I owe glyph some reviews [2].

Yours sincerely,
Daniel

[1] I already submitted a patch to the pb documentation and improved the
submission based on review. I hope this provides some indication of my
commitment to make material contributions. I mention this because glyph
made a comment suggesting that showing real work would be valuable.

[2] Is this the beginning of a process which will lead me in the end to
complete servitude and loss of ownership of my own soul?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/1bab4041/attachment-0002.html>

From kebin70 at gmail.com  Fri Aug  8 19:32:19 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 8 Aug 2014 18:32:19 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
 <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
 <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>
Message-ID: <CAA-sNEYttHfAq3r9LUWn4VZ1SS+1T7a6Rqc_RbORsKwrBzyZww@mail.gmail.com>

I experimented today with a table scan from dynamodb.  Taking each record
and converting to a dictionary into a list.  Initial scan and transform
took ~8 seconds from amazon to my house over TCP boto which is soapish? i
think.  ~7800 records.

The next call for the remote copy took 7 seconds across the bus.  Is that
expected?





On Fri, Aug 8, 2014 at 3:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Aug 8, 2014, at 1:31 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
> I think so too, but I'm starting to lean toward websockets.  The warnings
> alone right?
>
>
> Websockets are a layer well below what PB does.  In fact you could run PB
> over websockets, and it would work roughly the same as over TCP.
>
> But I will take another pass and report back any success.
>
>
> Please do let us know.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/858a9349/attachment-0002.html>

From jon at multani.info  Fri Aug  8 21:29:24 2014
From: jon at multani.info (Jonathan Ballet)
Date: Sat, 9 Aug 2014 11:29:24 +0800
Subject: [Twisted-Python] On problems with inlineCallbacks (was Re: Is there
 pb documentation somewhere?)
Message-ID: <20140809032923.GA2431@danio.home>

Sorry for hijacking the thread, but I actually was going to ask
something about this a few days ago, so let's use this reference from
Glyph as a starting point instead :)

On Fri, Aug 08, 2014 at 02:59:39PM -0700, Glyph Lefkowitz wrote:

> I've participated in this discussion several times:
> 
> Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using Tulip because I really like its style of coroutines."
> Glyph: "That's interesting. Did you know that Twisted has an equivalent style of coroutines, called inlineCallbacks, that's been around for years?"
> HAMISH: "I saw that, and I asked about that a while ago and I heard it was bad.  It haven't heard that Tulip has the same problems, though."
> Glyph: "Really? What problems does inlineCallbacks have that Tulip's coroutines don't?"
> HAMISH: "When I asked about it everybody told me I have to use Deferreds instead, but Deferreds are really confusing and they make your code look all gross, so I didn't want to do that.  With Tulip I don't have to!"
> Glyph: <facepalm>
> 
> Of course the problems that we describe with inlineCallbacks are the
> exact same problems that you will have with Tulip-style coroutines,
> and in fact in one of the conversations that was averaged out to
> produce the above composite, my interlocutor specifically mentioned
> that they'd already had the kind of bug that explicit-yield coroutines
> can sometimes encourage (thoughtlessly putting in too many 'yield's
> and not considering their consequences) and were wondering how Twisted
> dealt with that sort of thing.

It's not the first time I'm hearing that there are problems/and or
limitations with inlineCallbacks, and I don't think I ever read
somewhere what they were exactly? And so, each time I'm seeing code
using inlineCallbacks, I'm frowning then realizing I have no idea why I
did...

Is there some place where I could find more information about these
problems/limitations? That would be enlightening.

 Jonathan



From kebin70 at gmail.com  Fri Aug  8 22:17:18 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 8 Aug 2014 21:17:18 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEYttHfAq3r9LUWn4VZ1SS+1T7a6Rqc_RbORsKwrBzyZww@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
 <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
 <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>
 <CAA-sNEYttHfAq3r9LUWn4VZ1SS+1T7a6Rqc_RbORsKwrBzyZww@mail.gmail.com>
Message-ID: <CAA-sNEbfQWDv_NYPBwrexfhri9Czf4wby7fZ3NWcfoPgGwr4ww@mail.gmail.com>

correction.  I was stupidly reprocessing list on remote copy side.  Seeing
much better results now ~10K per second.


On Fri, Aug 8, 2014 at 6:32 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> I experimented today with a table scan from dynamodb.  Taking each record
> and converting to a dictionary into a list.  Initial scan and transform
> took ~8 seconds from amazon to my house over TCP boto which is soapish? i
> think.  ~7800 records.
>
> The next call for the remote copy took 7 seconds across the bus.  Is that
> expected?
>
>
>
>
>
> On Fri, Aug 8, 2014 at 3:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>> On Aug 8, 2014, at 1:31 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>>
>> I think so too, but I'm starting to lean toward websockets.  The warnings
>> alone right?
>>
>>
>> Websockets are a layer well below what PB does.  In fact you could run PB
>> over websockets, and it would work roughly the same as over TCP.
>>
>> But I will take another pass and report back any success.
>>
>>
>> Please do let us know.
>>
>> -glyph
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140808/bb993e55/attachment-0002.html>

From hs at ox.cx  Sat Aug  9 01:50:51 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Sat, 09 Aug 2014 09:50:51 +0200
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
Message-ID: <50FC2843-8B3C-41D0-B0FE-970E889AE12E@ox.cx>

On 8 Aug 2014, at 23:59, Glyph Lefkowitz wrote:

> I've participated in this discussion several times:
>
> Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using 
> Tulip because I really like its style of coroutines."
> Glyph: "That's interesting. Did you know that Twisted has an 
> equivalent style of coroutines, called inlineCallbacks, that's been 
> around for years?"
> HAMISH: "I saw that, and I asked about that a while ago and I heard it 
> was bad.  It haven't heard that Tulip has the same problems, though."
> Glyph: "Really? What problems does inlineCallbacks have that Tulip's 
> coroutines don't?"
> HAMISH: "When I asked about it everybody told me I have to use 
> Deferreds instead, but Deferreds are really confusing and they make 
> your code look all gross, so I didn't want to do that.  With Tulip I 
> don't have to!"
> Glyph: <facepalm>

That btw is something I’m trying to fight on IRC whenever I can for 
months now.  @inlineCallbacks may be worse than pure Deferreds in some 
ways, but they are amazing to get people to give Twisted a chance and 
start appreciating it (most people still have no clue what Twisted 
actually can do for them; hence the “who needs Twisted when we have 
tulip!?” questions).  And FWIW I have a mid-sized Twisted application 
running on top of @inlineCallbacks for years now and it works just fine.

People finally stopped knee-jerking at async/event-based programming and 
we’re keeping them out by being perfectionist smart-asses.  Next time 
someone asks about them, keep your “ugh inlineCallbacks” to 
yourself; a future contributor may come out of it.



From sank.daniel at gmail.com  Sat Aug  9 02:39:50 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 9 Aug 2014 01:39:50 -0700
Subject: [Twisted-Python] On problems with inlineCallbacks (was Re: Is
 there pb documentation somewhere?)
In-Reply-To: <20140809032923.GA2431@danio.home>
References: <20140809032923.GA2431@danio.home>
Message-ID: <CAKN9TDLMtE2CFJEo4ztsAqwQ-2j95avuiYZ_6131dTimPg+98Q@mail.gmail.com>

Moved from pb documentation thread.

>> I've participated in this discussion several times:
>>
>> Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using
Tulip because
>> I really like its style of coroutines."
>> Glyph: "That's interesting. Did you know that Twisted has an equivalent
style of coroutines,
>> called inlineCallbacks, that's been around for years?"
>> HAMISH: "I saw that, and I asked about that a while ago and I heard it
was bad.  It haven't
>> heard that Tulip has the same problems, though."
>> Glyph: "Really? What problems does inlineCallbacks have that Tulip's
coroutines don't?"
>> HAMISH: "When I asked about it everybody told me I have to use Deferreds
instead, but
>> Deferreds are really confusing and they make your code look all gross,
so I didn't want to
>> do that.  With Tulip I don't have to!"
>> Glyph: <facepalm>
>>
>>
> People finally stopped knee-jerking at async/event-based programming and
we’re keeping
> them out by being perfectionist smart-asses.  Next time someone asks
about them, keep
> your “ugh inlineCallbacks” to yourself; a future contributor may come out
of it.

Confirmed. When I first learned about twisted and had no idea what a
"future" was, deferreds made no sense to me [1]. However, when I saw how to
use inlineCallbacks was the first time I went

"Oh, that's neat."

Daniel

[1] For the interested, the crucial element which eluded me was the fact
that when you get a deferred from a function call, the thing which gave you
the deferred probably promises to _fire that deferred for you later_.
Somehow, that simple idea just didn't make it into my brain for a while.
And while I have your attention, oh connoisseur of twisted pedagogy, I
really think David Peticolas's tutorial should be on the front page.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140809/6b257c4c/attachment-0002.html>

From donald at stufft.io  Sat Aug  9 10:13:18 2014
From: donald at stufft.io (Donald Stufft)
Date: Sat, 9 Aug 2014 12:13:18 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <50FC2843-8B3C-41D0-B0FE-970E889AE12E@ox.cx>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <50FC2843-8B3C-41D0-B0FE-970E889AE12E@ox.cx>
Message-ID: <58538CF5-FB5B-4D99-AD2A-4AEEE53242EF@stufft.io>


> On Aug 9, 2014, at 3:50 AM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> On 8 Aug 2014, at 23:59, Glyph Lefkowitz wrote:
> 
>> I've participated in this discussion several times:
>> 
>> Hypothetical Amalgam of Median Interlocutors Speaking Here: "I'm using Tulip because I really like its style of coroutines."
>> Glyph: "That's interesting. Did you know that Twisted has an equivalent style of coroutines, called inlineCallbacks, that's been around for years?"
>> HAMISH: "I saw that, and I asked about that a while ago and I heard it was bad.  It haven't heard that Tulip has the same problems, though."
>> Glyph: "Really? What problems does inlineCallbacks have that Tulip's coroutines don't?"
>> HAMISH: "When I asked about it everybody told me I have to use Deferreds instead, but Deferreds are really confusing and they make your code look all gross, so I didn't want to do that.  With Tulip I don't have to!"
>> Glyph: <facepalm>
> 
> That btw is something I’m trying to fight on IRC whenever I can for months now.  @inlineCallbacks may be worse than pure Deferreds in some ways, but they are amazing to get people to give Twisted a chance and start appreciating it (most people still have no clue what Twisted actually can do for them; hence the “who needs Twisted when we have tulip!?” questions).  And FWIW I have a mid-sized Twisted application running on top of @inlineCallbacks for years now and it works just fine.
> 
> People finally stopped knee-jerking at async/event-based programming and we’re keeping them out by being perfectionist smart-asses.  Next time someone asks about them, keep your “ugh inlineCallbacks” to yourself; a future contributor may come out of it.
> 

+1

I stopped trying to use @inlineCallbacks because I was told it was bad (without much explanation why) anytime I posted a code snippet and asked for help with something that was using it. End result was that I didn’t really want to write much Twisted code because I don’t like the style of code where you’re working with pure Deferreds.

---
Donald Stufft
PGP: 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140809/a3c1ad37/attachment-0002.html>

From sank.daniel at gmail.com  Sat Aug  9 10:15:53 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 9 Aug 2014 09:15:53 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <58538CF5-FB5B-4D99-AD2A-4AEEE53242EF@stufft.io>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <50FC2843-8B3C-41D0-B0FE-970E889AE12E@ox.cx>
 <58538CF5-FB5B-4D99-AD2A-4AEEE53242EF@stufft.io>
Message-ID: <CAKN9TD+VhhnDntswOyJfXF4wbtg5kAk1777CCahHyF6-740E=w@mail.gmail.com>

This discussion about inlineCallbacks has nothing to do with the title of
this thread. Someone already created a spin-off thread talking about
inlineCallbacks. Let's use that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140809/99692d34/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Aug  9 19:58:35 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 Aug 2014 18:58:35 -0700
Subject: [Twisted-Python] pb.Copyable knowledge barrier
In-Reply-To: <CAA-sNEbfQWDv_NYPBwrexfhri9Czf4wby7fZ3NWcfoPgGwr4ww@mail.gmail.com>
References: <CAA-sNEY0es6opv4obGvG4Urd_ghGi6XyjJoPo1E9hO6iwib+pA@mail.gmail.com>
 <CAA-sNEai0h0trRFMH=1goM9rqeFcBqBFGM4Vo5cp=zBnpA+Jmw@mail.gmail.com>
 <CAKN9TDLdoJYYFV4vMZYpie7XgSvB0H9pJw87UuWq31v8UMioFQ@mail.gmail.com>
 <CAA-sNEYhck2=E_ZJg7GRv6JUPkfBYtoZwWzmAaz0PX3vXakD_Q@mail.gmail.com>
 <CAKN9TDLoEc=_p43+ycu9GQ44QuoCmV1kB-7Ou=SHJWN+x=afzQ@mail.gmail.com>
 <CAA-sNEa+b-YZJUzRyKX8q=k0UXx2gzme7owj0DJPt9=e5ng5bg@mail.gmail.com>
 <23AED729-A718-4887-A755-A9A044B1E898@twistedmatrix.com>
 <CAA-sNEYttHfAq3r9LUWn4VZ1SS+1T7a6Rqc_RbORsKwrBzyZww@mail.gmail.com>
 <CAA-sNEbfQWDv_NYPBwrexfhri9Czf4wby7fZ3NWcfoPgGwr4ww@mail.gmail.com>
Message-ID: <F60D4C3D-EF0C-40B8-AF21-A867181AA1B5@twistedmatrix.com>

On Aug 8, 2014, at 9:17 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> correction.  I was stupidly reprocessing list on remote copy side.  Seeing much better results now ~10K per second.

Whew.  I don't know exactly how well I would expect this perform, but those other results looked off by a couple orders of magnitude :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140809/77d6f82f/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Aug  9 22:40:49 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 Aug 2014 21:40:49 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
Message-ID: <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>

On Aug 8, 2014, at 6:31 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Now to bring the thread back on-topic,

Yes, let's get back to it, shall we?

> I'd like to ask what pb should do in principle. In other words, what is the specification for the flavors? I think a discussion of each pb flavor would be helpful and would provide me material from which I can generate missing docstrings [1]. I'd rather do it this way instead of backing out what the standing implementation currently does so that I don't waste time working on something which is a fundamentally bad idea. This discussion should be a small investment at the present time.

That sounds like a good idea.

> Copyable:
> The functionality provided by Copyable is simple. The sender of the Copyable just sends it and *forgets*. Therefore, sending a Copyable is basically just sending atomic data in a particular format. I don't think we need to discuss this any further.

Yes.  There's an important corollary to this: a Copyable ought to be immutable.  A Copyable really represents a "value" in the functional programming sense, and not an "object" in the OO sense.

> Referenceable:
> When I send you a Referenceable, I send a GUID so that you can later refer to that object.

It's not really a GUID.  The "G" in GUID stands for "global", and the IDs in Referenceable specifically draw a distinction: <https://github.com/twisted/twisted/blob/a8227e5562a4f9074bb0d5faf6a10e91069704aa/twisted/spread/pb.py#L507-L511>.  They're named LUIDs throughout.

The ID is connection-local.  When the PB connection goes away, so does the reference to that object.

> For example, I send you a message with argument (psuedo code)
> 
> "referenceable-'Joe'"
> 
> This is a declaration that I am keeping hold of an object called "Joe" upon which you may call methods remotely. Specifically, you can send me
> 
> "'Joe-foo-4"
> 
> which tells me to call Joe.foo(4) and send you the result.
> 
> 1. How long should the GUID for Joe survive? If Joe is deleted can I reuse the name "Joe" for an object created later?

Right now these IDs survive until the end of the connection.  We might want to have other ways to address objects, but that should be something higher-level; a naming service that lets you request an object by some identifier.

The ID is a counter, and since it's a Python integer, it'll never even wrap around, so it won't be re-used within the scope of the same connection.

> 2. Do I notify you if Joe disappears on my side?

Yes. <https://github.com/twisted/twisted/blob/a8227e5562a4f9074bb0d5faf6a10e91069704aa/twisted/spread/pb.py#L365-L369>.

> Let's stop here for now. I owe glyph some reviews [2].
> 
> Yours sincerely,
> Daniel
> 
> [1] I already submitted a patch to the pb documentation and improved the submission based on review. I hope this provides some indication of my commitment to make material contributions. I mention this because glyph made a comment suggesting that showing real work would be valuable.

Thanks for pointing that out.  Stuff is happening, everybody ;-).

> [2] Is this the beginning of a process which will lead me in the end to complete servitude and loss of ownership of my own soul?

Oh, don't worry.  That's not the end.  That is merely the beginning.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140809/1155068d/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug 10 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Aug 2014 06:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1407650716.89.6454215083093843802@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140810/c0df9e8c/attachment-0002.html>

From tobias.oberstein at tavendo.de  Sun Aug 10 06:16:51 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 05:16:51 -0700
Subject: [Twisted-Python] Scalability of timers
Message-ID: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>

Hi,

I have a question regarding scalability of timers in Twisted.

Say I have a massive number of periodic timers (lets say each with period 1s, but all slightly time shifted to each other).

As far as I understand, timers are implemented ultimately by setting the timeout parameter when calling into OS select/poll/epoll/kqueue.

If this  is true, then the number of timers scales linearly with the number of syscalls. This can get limiting (the total number of syscalls a Linux box can sustain is a couple of 100k's per second). As more and more timers are setup, the timeout essentially will approach 0. On the upside, timers will fire precisely.

However, say I am fine with a precision of 1ms.

Is there a way that limits the syscall rate to 1000/s (given no FD activity happens) _independently_ of the number of timers setup?

Timers that fall into a certain ms slice would all fire roughly at the same time (still ordered).

Is that possible?

Thanks,
Tobias



From itamar at itamarst.org  Sun Aug 10 06:52:35 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 10 Aug 2014 08:52:35 -0400
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>

 

There is only one select() call (or whatever) at any given time,
regardless of how many timers. Syscalls are thus O(1). Timers are stored
in sorted order. When event loop wakes up it removes timers that have
been reached, which is fast because they're sorted so when you hit one
that is still in future you can stop. So that's pretty scalable. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140810/7e53b5f1/attachment-0002.html>

From dw+twisted-python at hmmz.org  Sun Aug 10 08:31:29 2014
From: dw+twisted-python at hmmz.org (dw+twisted-python at hmmz.org)
Date: Sun, 10 Aug 2014 14:31:29 +0000
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20140810143129.GA32138@k2>

Hey Tobias,

Individual OS have their own mechanisms for avoiding the kind of waste
you're describing. For example, Linux quite aggressively rounds up the
expiry of certain classes of timer at progressively less granular
intervals the further in the future they're scheduled ("timer
coalescing").

When Twisted wakes, there is no guarantee that that only one timer has
expired by then. In fact under load you would expect the select loop to
always be running (and thus timing out) late, and so each iteration may
process several timers simultaneously.

Twisted will set the select() timeout to the timer due to expire the
earliest. Finding this timer is a constant time operation. There is only
ever one active select() (or select-equivalent) call active at a time.

The Twisted timer implementation internally uses a heap, so scheduling
and expiry are quite efficint O(logN). With 4 billion timers active,
scheduling a new timer in the worst case would require 32 array elements
to be swapped.


On Sun, Aug 10, 2014 at 05:16:51AM -0700, Tobias Oberstein wrote:
> Hi,
> 
> I have a question regarding scalability of timers in Twisted.
> 
> Say I have a massive number of periodic timers (lets say each with period 1s, but all slightly time shifted to each other).
> 
> As far as I understand, timers are implemented ultimately by setting the timeout parameter when calling into OS select/poll/epoll/kqueue.
> 
> If this  is true, then the number of timers scales linearly with the number of syscalls. This can get limiting (the total number of syscalls a Linux box can sustain is a couple of 100k's per second). As more and more timers are setup, the timeout essentially will approach 0. On the upside, timers will fire precisely.
> 
> However, say I am fine with a precision of 1ms.
> 
> Is there a way that limits the syscall rate to 1000/s (given no FD activity happens) _independently_ of the number of timers setup?
> 
> Timers that fall into a certain ms slice would all fire roughly at the same time (still ordered).
> 
> Is that possible?
> 
> Thanks,
> Tobias
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From tobias.oberstein at tavendo.de  Sun Aug 10 15:38:09 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 14:38:09 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
Message-ID: <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>

>There is only one select() call (or whatever) at any given time, regardless of how many timers.

Yes, I do understand this.

>Syscalls are thus O(1). Timers are stored in sorted order. When event loop wakes up it removes timers that have been reached, which is fast because they're sorted so when you hit one that is still in future you can stop. So that's pretty scalable.

syscalls are O(1). But the constant is non zero. A syscall is still quite expensive. try doing 1 mio. syscalls/sec on any x86 box (Linux, BSD, whatever). DEC Alphas and Itanium might be able to do more, but the context switching overhead of x86 architecture is "huge".

But I feel I failed in formulating what I am asking.

Could you please correct where my thinking below goes wrong?

Let's say I issue 1 mio. timers with expirary times t0, t0+1us, t0+2us, .., t0+1s

That is 1 mio. timers expiring in 1us pitch within 1s.

That will mean 1 mio. select() syscalls done in 1s each with timeout set to 1us

Since it's unlikely that a box supports a rate of 1 mio. syscalls/sec, that means a select with timeout 1us won't return after 1us, but >1us. Twisted will process all timers that have expired in the meantime. But there is no way of letting 1 mio. timers fire in 1us pitch within 1s using a syscall.

What I am after is to explicitly _control_ the maximum syscall rate to select() - not simply max. out the box on syscall rate.

Like: limit syscall rate to select() at 1000Hz - regardless how many timers I issue per second.

In above example, with syscall max set to 1000Hz, each time select() returns 1000 timers would have expired. That's fine. That's what I want.

How can I do that?

Thanks!
Tobias



From tobias.oberstein at tavendo.de  Sun Aug 10 15:51:02 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 14:51:02 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <20140810143129.GA32138@k2>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <20140810143129.GA32138@k2>
Message-ID: <634914A010D0B943A035D226786325D4447940E045@EXVMBX020-12.exch020.serverdata.net>

> Individual OS have their own mechanisms for avoiding the kind of waste you're
> describing. For example, Linux quite aggressively rounds up the expiry of
> certain classes of timer at progressively less granular intervals the further in
> the future they're scheduled ("timer coalescing").

As far as I understand, Twisted implements timers via the timeout parameter to select(), not using Linux explicit timers.

But the coalescing you describe would also apply to those implicit timers (created from select(timeout = ..) within the Linux kernel)?

> When Twisted wakes, there is no guarantee that that only one timer has
> expired by then. In fact under load you would expect the select loop to always
> be running (and thus timing out) late, and so each iteration may process
> several timers simultaneously.
> 
> Twisted will set the select() timeout to the timer due to expire the earliest.
> Finding this timer is a constant time operation. There is only ever one active
> select() (or select-equivalent) call active at a time.
> 
> The Twisted timer implementation internally uses a heap, so scheduling and
> expiry are quite efficint O(logN). With 4 billion timers active, scheduling a new
> timer in the worst case would require 32 array elements to be swapped.

This is all fine. But how do I _explicitly_ limit the rate at which select() is called to say 1000Hz (at the expense of timer precision)?

I don't want to let the box hit it's syscall rate limit. Because the box will spend a fair amount of resources for context switching all the time with to real gain.

Thanks for your hints and patience,
Tobias

> 
> 
> On Sun, Aug 10, 2014 at 05:16:51AM -0700, Tobias Oberstein wrote:
> > Hi,
> >
> > I have a question regarding scalability of timers in Twisted.
> >
> > Say I have a massive number of periodic timers (lets say each with period 1s,
> but all slightly time shifted to each other).
> >
> > As far as I understand, timers are implemented ultimately by setting the
> timeout parameter when calling into OS select/poll/epoll/kqueue.
> >
> > If this  is true, then the number of timers scales linearly with the number of
> syscalls. This can get limiting (the total number of syscalls a Linux box can
> sustain is a couple of 100k's per second). As more and more timers are setup,
> the timeout essentially will approach 0. On the upside, timers will fire
> precisely.
> >
> > However, say I am fine with a precision of 1ms.
> >
> > Is there a way that limits the syscall rate to 1000/s (given no FD activity
> happens) _independently_ of the number of timers setup?
> >
> > Timers that fall into a certain ms slice would all fire roughly at the same time
> (still ordered).
> >
> > Is that possible?
> >
> > Thanks,
> > Tobias
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From dw+twisted-python at hmmz.org  Sun Aug 10 16:11:13 2014
From: dw+twisted-python at hmmz.org (dw+twisted-python at hmmz.org)
Date: Sun, 10 Aug 2014 22:11:13 +0000
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E045@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <20140810143129.GA32138@k2>
 <634914A010D0B943A035D226786325D4447940E045@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20140810221113.GA11902@k2>

On Sun, Aug 10, 2014 at 02:51:02PM -0700, Tobias Oberstein wrote:

> But the coalescing you describe would also apply to those implicit
> timers (created from select(timeout = ..) within the Linux kernel)?

It applies to all kernel timers not created by realtime processes.


> This is all fine. But how do I _explicitly_ limit the rate at which
> select() is called to say 1000Hz (at the expense of timer precision)?

> I don't want to let the box hit it's syscall rate limit. Because the
> box will spend a fair amount of resources for context switching all
> the time with to real gain.

>From a reading of http://lwn.net/Articles/296578/, at time of writing
the default select() implementation coalesces sub-second timeouts to
50us boundaries, and this can be adjusted via prctl(PR_SET_TIMERSLACK)
(http://linux.die.net/man/2/prctl) on a per-process basis.

That article is from 2008, and though the relevant kernel code seems to
match the article content, a huge amount of power-efficiency related
changes went into the kernel since that time. My assumption is nowadays
the kernel rounds more aggressively than the default of 50us documented
by that article.

Short answer is yes, you can set the max hz of select(), but in all
likelihood you won't have to. As always, benchmarking and profiling real
code might reveal this to be a non-issue.


David

> 
> Thanks for your hints and patience,
> Tobias
> 
> > 
> > 
> > On Sun, Aug 10, 2014 at 05:16:51AM -0700, Tobias Oberstein wrote:
> > > Hi,
> > >
> > > I have a question regarding scalability of timers in Twisted.
> > >
> > > Say I have a massive number of periodic timers (lets say each with period 1s,
> > but all slightly time shifted to each other).
> > >
> > > As far as I understand, timers are implemented ultimately by setting the
> > timeout parameter when calling into OS select/poll/epoll/kqueue.
> > >
> > > If this  is true, then the number of timers scales linearly with the number of
> > syscalls. This can get limiting (the total number of syscalls a Linux box can
> > sustain is a couple of 100k's per second). As more and more timers are setup,
> > the timeout essentially will approach 0. On the upside, timers will fire
> > precisely.
> > >
> > > However, say I am fine with a precision of 1ms.
> > >
> > > Is there a way that limits the syscall rate to 1000/s (given no FD activity
> > happens) _independently_ of the number of timers setup?
> > >
> > > Timers that fall into a certain ms slice would all fire roughly at the same time
> > (still ordered).
> > >
> > > Is that possible?
> > >
> > > Thanks,
> > > Tobias
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Sun Aug 10 16:17:16 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 Aug 2014 22:17:16 -0000
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
 <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20140810221716.20413.1237452444.divmod.xquotient.937@top>

On 09:38 pm, tobias.oberstein at tavendo.de wrote:
>
>What I am after is to explicitly _control_ the maximum syscall rate to 
>select() - not simply max. out the box on syscall rate.
>
>Like: limit syscall rate to select() at 1000Hz - regardless how many 
>timers I issue per second.

In other words:

If you ask Twisted to wake up N times per second, is there an API to 
make Twisted wake up M (M<N) times per second instead?

Is that what you're looking for?

Jean-Paul



From roberto.polli at babel.it  Sun Aug 10 16:17:14 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Mon, 11 Aug 2014 00:17:14 +0200
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
Message-ID: <1679209.Ym6hcXhRg7@rpolli>

Moving thread here to avoid polluting trac (thx to glyph).

1. the real issue: t.p.syslog doesn't support logLevel
 - if you think it's worth a patch before switching to t.p.logger I'll provide 
a patch (it's quite simple). 
 - if you think we should just move to t.p.logger and get rid of t.p.log and 
t.p.syslog see 2.

2. moving twistd to t.p.logger
 - I've started looking around
 - t.p.logger doesn't still support syslog
 - I'll try to add some tests
 - feedback welcome :D

Ref: https://twistedmatrix.com/trac/ticket/7549

Peace,
R.
-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)

CONFIDENZIALE: Questo messaggio ed i suoi allegati sono di carattere 
confidenziale per i destinatari in indirizzo.
E' vietato l'inoltro non autorizzato a destinatari diversi da quelli indicati 
nel messaggio originale.
Se ricevuto per errore, l'uso del contenuto e' proibito; si prega di 
comunicarlo al mittente e cancellarlo immediatamente.



From tobias.oberstein at tavendo.de  Sun Aug 10 16:23:05 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 15:23:05 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <20140810221716.20413.1237452444.divmod.xquotient.937@top>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
 <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
 <20140810221716.20413.1237452444.divmod.xquotient.937@top>
Message-ID: <634914A010D0B943A035D226786325D4447940E049@EXVMBX020-12.exch020.serverdata.net>

> >What I am after is to explicitly _control_ the maximum syscall rate to
> >select() - not simply max. out the box on syscall rate.
> >
> >Like: limit syscall rate to select() at 1000Hz - regardless how many
> >timers I issue per second.
> 
> In other words:
> 
> If you ask Twisted to wake up N times per second, is there an API to make
> Twisted wake up M (M<N) times per second instead?
> 
> Is that what you're looking for?

Yes, exactly.

I want to trade less precision (timers fire at less exact times) for higher efficiency (less context switches).

/Tobias



From tobias.oberstein at tavendo.de  Sun Aug 10 16:31:11 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 15:31:11 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <20140810221113.GA11902@k2>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <20140810143129.GA32138@k2>
 <634914A010D0B943A035D226786325D4447940E045@EXVMBX020-12.exch020.serverdata.net>
 <20140810221113.GA11902@k2>
Message-ID: <634914A010D0B943A035D226786325D4447940E04A@EXVMBX020-12.exch020.serverdata.net>

> > But the coalescing you describe would also apply to those implicit
> > timers (created from select(timeout = ..) within the Linux kernel)?
> 
> It applies to all kernel timers not created by realtime processes.
> 

Alright. I see.

> 
> > This is all fine. But how do I _explicitly_ limit the rate at which
> > select() is called to say 1000Hz (at the expense of timer precision)?
> 
> > I don't want to let the box hit it's syscall rate limit. Because the
> > box will spend a fair amount of resources for context switching all
> > the time with to real gain.
> 
> From a reading of http://lwn.net/Articles/296578/, at time of writing the
> default select() implementation coalesces sub-second timeouts to 50us
> boundaries, and this can be adjusted via prctl(PR_SET_TIMERSLACK)
> (http://linux.die.net/man/2/prctl) on a per-process basis.

Even more interesting! This might be what I'm looking for .. need to read through.

> 
> That article is from 2008, and though the relevant kernel code seems to match
> the article content, a huge amount of power-efficiency related changes went
> into the kernel since that time. My assumption is nowadays the kernel rounds
> more aggressively than the default of 50us documented by that article.

Ah, ok. 50us corresponds to 20k syscalls/sec .. which seems well below the syscall rate limit on modern boxes.

> 
> Short answer is yes, you can set the max hz of select(), but in all likelihood you
> won't have to. As always, benchmarking and profiling real code might reveal
> this to be a non-issue.

Thanks a lot for those hints! I will read into this material.

/Tobias

> 
> 
> David
> 
> >
> > Thanks for your hints and patience,
> > Tobias
> >
> > >
> > >
> > > On Sun, Aug 10, 2014 at 05:16:51AM -0700, Tobias Oberstein wrote:
> > > > Hi,
> > > >
> > > > I have a question regarding scalability of timers in Twisted.
> > > >
> > > > Say I have a massive number of periodic timers (lets say each with
> > > > period 1s,
> > > but all slightly time shifted to each other).
> > > >
> > > > As far as I understand, timers are implemented ultimately by
> > > > setting the
> > > timeout parameter when calling into OS select/poll/epoll/kqueue.
> > > >
> > > > If this  is true, then the number of timers scales linearly with
> > > > the number of
> > > syscalls. This can get limiting (the total number of syscalls a
> > > Linux box can sustain is a couple of 100k's per second). As more and
> > > more timers are setup, the timeout essentially will approach 0. On
> > > the upside, timers will fire precisely.
> > > >
> > > > However, say I am fine with a precision of 1ms.
> > > >
> > > > Is there a way that limits the syscall rate to 1000/s (given no FD
> > > > activity
> > > happens) _independently_ of the number of timers setup?
> > > >
> > > > Timers that fall into a certain ms slice would all fire roughly at
> > > > the same time
> > > (still ordered).
> > > >
> > > > Is that possible?
> > > >
> > > > Thanks,
> > > > Tobias
> > > >
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From dw+twisted-python at hmmz.org  Sun Aug 10 16:47:08 2014
From: dw+twisted-python at hmmz.org (dw+twisted-python at hmmz.org)
Date: Sun, 10 Aug 2014 22:47:08 +0000
Subject: [Twisted-Python] Scalability of timers
Message-ID: <20140810224708.GB14281@k2>

On Sun, Aug 10, 2014 at 03:31:11PM -0700, Tobias Oberstein wrote:

> Thanks a lot for those hints! I will read into this material.

Just a final note.. a single no-fds call to select with a 0 timeout
seems to take around 280ns on my Core 2. Presumably the better
interfaces (e.g. epoll, but not poll) will also take around the same
time.

It's really hard to write even a single Python function that gets
anywhere below 1usec CPU time, and given how function-heavy Twisted is,
I'd be surprised considerations like this factored usefully into a
design at all :)

Adjusting timer coalescing to extreme settings might even worsen your
app's performance, since it'll cause interpreter time and syscalls to
all be compressed around the slack intervals, leaving the CPU idle more
often, rather than running evenly spaced over time. This might produce
less desirable app behavior overall (e.g. it has knock-on effects for
network interface queues, bursts of disk IO/SQL queries, network switch
buffer overruns, or whatever else).


David



From itamar at itamarst.org  Sun Aug 10 17:26:41 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 10 Aug 2014 19:26:41 -0400
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <634914A010D0B943A035D226786325D4447940E049@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
 <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
 <20140810221716.20413.1237452444.divmod.xquotient.937@top>
 <634914A010D0B943A035D226786325D4447940E049@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <53E7FFB1.7020207@itamarst.org>

On 08/10/2014 06:23 PM, Tobias Oberstein wrote:
> I want to trade less precision (timers fire at less exact times) for 
> higher efficiency (less context switches).

It's easy enough to write one yourself. This might work:

    from twisted.internet.task import Clock, LoopingCall

    clock = Clock()
    LoopingCall(lambda: clock.advance(0.001)).start(0.001)

Now just do "clock.callLater" instead of "reactor.callLater".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140810/c29d3a7e/attachment-0002.html>

From tobias.oberstein at tavendo.de  Sun Aug 10 17:51:40 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 16:51:40 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <53E7FFB1.7020207@itamarst.org>
References: <634914A010D0B943A035D226786325D4447940E021@EXVMBX020-12.exch020.serverdata.net>
 <e0fcdb489ea6de1a7397ef68e8d043c3@itamarst.org>
 <634914A010D0B943A035D226786325D4447940E044@EXVMBX020-12.exch020.serverdata.net>
 <20140810221716.20413.1237452444.divmod.xquotient.937@top>
 <634914A010D0B943A035D226786325D4447940E049@EXVMBX020-12.exch020.serverdata.net>
 <53E7FFB1.7020207@itamarst.org>
Message-ID: <634914A010D0B943A035D226786325D4447940E051@EXVMBX020-12.exch020.serverdata.net>

>>I want to trade less precision (timers fire at less exact times) for higher efficiency (less context switches). 

>It's easy enough to write one yourself. This might work:
>from twisted.internet.task import Clock, LoopingCall
>
>clock = Clock()
>LoopingCall(lambda: clock.advance(0.001)).start(0.001)
>Now just do "clock.callLater" instead of "reactor.callLater".

Oh, cool. That make me smile;)

Does what I want, is simple and portable. Great.

Only worry is

http://twistedmatrix.com/trac/browser/tags/releases/twisted-14.0.0/twisted/internet/task.py#L767

Why does it sort after each and every callLater?

And:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-14.0.0/twisted/internet/task.py#L793

It also sorts after each firing of a delayed call. Presumably because that delayed call might reschedule another call that might also fire in same time period?

/Tobias



From tobias.oberstein at tavendo.de  Sun Aug 10 17:52:26 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 10 Aug 2014 16:52:26 -0700
Subject: [Twisted-Python] Scalability of timers
In-Reply-To: <20140810224708.GB14281@k2>
References: <20140810224708.GB14281@k2>
Message-ID: <634914A010D0B943A035D226786325D4447940E052@EXVMBX020-12.exch020.serverdata.net>

> Just a final note.. a single no-fds call to select with a 0 timeout seems to take
> around 280ns on my Core 2. Presumably the better interfaces (e.g. epoll, but

Are you sure there is actually a context switch happening with this syscall using no FDs and timeout 0?

280ns means your machine can do 3.5 millions selects() per second. Mmh. I have a hard time believing this would sustain with timeout>0 and/or FDs - anywhere near that magnitude. 

http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html
 
> not poll) will also take around the same time.
> 
> It's really hard to write even a single Python function that gets anywhere below
> 1usec CPU time, and given how function-heavy Twisted is, I'd be surprised

PyPy:


import timeit
import time

def f1():
   pass

def f2(x = 3):
   return x*x

def f3():
   return map(lambda x: x^2, range(10))

for f in [f1, f2, f3]:
   for i in range(5):
      print f, timeit.timeit(f, number = 1000000)
      time.sleep(2)


oberstet at vbox-ubuntu1310:~/scm/scratchbox/python/twisted/timers$ ~/pypy-2.3-linux64/bin/pypy test2.py 
<function f1 at 0x00007f219ff0bd30> 0.00407981872559
<function f1 at 0x00007f219ff0bd30> 0.00138401985168
<function f1 at 0x00007f219ff0bd30> 0.00138092041016
<function f1 at 0x00007f219ff0bd30> 0.00148296356201
<function f1 at 0x00007f219ff0bd30> 0.00153708457947
<function f2 at 0x00007f219ff0bda8> 0.0269131660461
<function f2 at 0x00007f219ff0bda8> 0.0319480895996
<function f2 at 0x00007f219ff0bda8> 0.0243380069733
<function f2 at 0x00007f219ff0bda8> 0.0251939296722
<function f2 at 0x00007f219ff0bda8> 0.025454044342
<function f3 at 0x00007f219ff0be20> 0.474506855011
<function f3 at 0x00007f219ff0be20> 0.452003002167
<function f3 at 0x00007f219ff0be20> 0.446584939957
<function f3 at 0x00007f219ff0be20> 0.441245079041
<function f3 at 0x00007f219ff0be20> 0.467758893967


This is in a VM on low-end gear. My notebook actually.

With trivial functions like above, PyPy might even optimize away funs altogether and inline those. Not sure though.

> considerations like this factored usefully into a design at all :)
> 
> Adjusting timer coalescing to extreme settings might even worsen your app's
> performance, since it'll cause interpreter time and syscalls to all be
> compressed around the slack intervals, leaving the CPU idle more often, rather
> than running evenly spaced over time. This might produce less desirable app
> behavior overall (e.g. it has knock-on effects for network interface queues,
> bursts of disk IO/SQL queries, network switch buffer overruns, or whatever
> else).

I can see those points. Will keep in mind and measure.

However, I am running a multi-process server, so as long as those processes tick slightly pitched w.r.t. each other, and there are more processes than cores, I guess I can saturate the CPUs.

And then this is a network server, so there will be FD activity (lots of).

It's just that I want to limit the impacts of having massive amounts of timers associated with network connections (ping/pong to detect lost TCP).

In any case: thanks a lot for all your hints!

/Tobias

> 
> 
> David
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Mon Aug 11 00:09:15 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 10 Aug 2014 23:09:15 -0700
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <1679209.Ym6hcXhRg7@rpolli>
References: <1679209.Ym6hcXhRg7@rpolli>
Message-ID: <E346553E-BB6E-4EAD-8618-504FB9BD477C@twistedmatrix.com>


On Aug 10, 2014, at 3:17 PM, Roberto Polli <roberto.polli at babel.it> wrote:

> Moving thread here to avoid polluting trac (thx to glyph).
> 
> 1. the real issue: t.p.syslog doesn't support logLevel

For me, the biggest issue is that t.p.syslog defaults to logging at INFO, which means that on many platforms, all the messages get filtered and don't actually get logs.  This is particularly true on OS X, where I think filtering works slightly differently and the INFO filtering happens in the process itself, before it even gets sent to the log server.  I haven't even figured out how to configure it not to get filtered.

It seems like getting t.p.syslog to support logLevel is a necessary part of a clean fix, but since most Twisted log messages don't set a level, we would still need better handling on the commandline to make this practically useful to users.

> - if you think it's worth a patch before switching to t.p.logger I'll provide 
> a patch (it's quite simple).
> - if you think we should just move to t.p.logger and get rid of t.p.log and 
> t.p.syslog see 2.

We definitely can't "get rid of" either of these things.  As per the compatibility policy <https://twistedmatrix.com/trac/wiki/CompatibilityPolicy> we would need to deprecate them.

However, "twistd --syslog" could be implemented in terms of t.p.logger instead.

Also, since messages are fairly carefully relayed between new and old logging systems, I think it might be a compatible change to make twisted.python.syslog.startLogging use a new-style (twisted.python.logging) observer, rather than fixing SyslogObserver.  The benefit here would be that the new logging system consistently uses levels everywhere.  On the other hand, any code written to the new API should be populating the old logLevels key via <https://github.com/twisted/twisted/blob/bd7f43fa202cb78d23098dee165df58737ff9192/twisted/python/logger/_legacy.py#L166-L167>.

> 2. moving twistd to t.p.logger
> - I've started looking around
> - t.p.logger doesn't still support syslog

Yes, we could definitely say that is a blocker :-).

> - I'll try to add some tests
> - feedback welcome :D

I hope some other folks have some ideas :-).

> Ref: https://twistedmatrix.com/trac/ticket/7549

> CONFIDENZIALE: …

I'd like to make it clear that messages sent to this list are NOT confidential - they are publicly archived in multiple places :-).  If you can disable a message like this when sending here that would be nice.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140810/4ac2d47c/attachment-0002.html>

From ccx at webprojekty.cz  Mon Aug 11 07:51:04 2014
From: ccx at webprojekty.cz (ccx at webprojekty.cz)
Date: Mon, 11 Aug 2014 15:51:04 +0200
Subject: [Twisted-Python] Experimenting with tubes
Message-ID: <84AC8E3500000000.9827000000000000.reformail@dorje>

Hello, I've been playing with the new tubes that are being implemented:
http://comments.gmane.org/gmane.comp.python.twisted/27248
https://twistedmatrix.com/trac/ticket/1956

Here are few things that I did with it. I won't publish the full code now,
as in it's current shape it could implode eyeballs of twisted devs and
possibly make them summon some of the elder gods, but I'll see if I can
produce something less vile as I merge the ongoing changes to the tubes
branch.

So far I wrote relatively simple app that read logfiles, parse them and
insert what they got out of them into a database. First issue that I've
dealt with is stopping the tubes. When I read the whole of the input I want
to wait until all of it was parsed (atm synchronous code, but I can imagine
eg. some expensive processing being done in thread / external process) and
then wait until it's commited to the database before shutting the reactor
down cleanly.

As of #42908 which I pulled for experimenting the support for passing
flowStopped(reason) through pipeline (or series if you want) was not
working, an issue with None being returned from stopped() ended the
processing prematurely, which I fixed with:

=== modified file 'tubes7/tube.py'
--- tubes7/tube.py	2014-08-01 18:32:48 +0000
+++ tubes7/tube.py	2014-08-01 21:20:44 +0000
@@ -441,6 +446,8 @@
                 downstream.flowStopped(f)
             return
         if iterableOrNot is None:
+            if self._flowStoppingReason is not None:
+                self._tfount.drain.flowStopped(self._flowStoppingReason)
             return 0
         self._pendingIterator = iter(iterableOrNot)
         if self._tfount.drain is None:

Also the ProtocolFount didn't really do what it should, so I made it
implement IHalfCloseableProtocol and made it call flowStopped() accordingly.

One more thing about it I did is that I made it invoke flowStopped() on any
drain that is newly attached to it - apparently when I used the stdio
endpoint it managed to close it when reading from /dev/null even before I
managed to set up the series/pipeline.

That still didn't make it possible for me to wait on DB being written to
properly. What I had to do is to implement CloseableDrain that has
waitDone() method that emits a Deferred that fires when the drain's
flowStopped() was called and all it should do has been done. This makes it
quite handy to use from react()-style setup since I can just return this
Deferred, or DeferredList of all ongoing pipelines.

For the next pipeline I had one more issue: this pipeline can be run either
as a log reader, or as essential part of running program that emits such
logs. In the latter case I need to generate confirmation messages for
specific entries that are being inserted and send them back to the
originator, after they has been safely written to the DB. This I resolved by
adding another field into the values I pass into PostgreSQLDrain - deferred
that will be fired as txpostgres's runOperation finishes. This resolution
works pretty well but it took me quite a while to come up with it, so I'm
not sure if it's intuitive design pattern or if we could come up with
something better.

Then I had to run both pipelines in parallel, after implementing the fan-in
pattern (fan-out was already done by glyph), I wrote this helper function:

def parallel(*tubes):
    out = Out()
    in_ = In()
    out._drain.nextFount = in_
    for tube in tubes:
        out.newFount().flowTo(series(tube, in_.newDrain()))
    in_.stop_on_empty = True
    return out.drain

The nextFount attribute on _OutDrain is what is returned from flowingFrom()
so this function can be used as a part of series. What I'm unsure about is
how to handle stopping of the fan-in. Currently I don't make it stop until
the stop_on_empty is set (so I can add/remove things during it's
initialization) and then I make it stop when the last fount that's flowing
in has stopped (and removed from input founts set) and I use the reason it
passes into flowStopped() to propagate along to the rest of series,
effectively discarding any reason objects passed to all the founts except
the last one.

What I'll have to deal with is a lack of sensible flow control in some parts
of the code. For example the part that generates the log files should not be
stopped just because there's some delay in writing the logs. This made me
wonder if the flow control and perhaps processing confirmation should not be
run not as a part of the main interface but instead something that runs
alongside, where applicable, in the opposite direction. But I don't have any
specific API in my mind at the moment. On the other hand, both are perfectly
solvable with current design - implementing FIFO buffers or message droppers
for flow control and the above mentioned deferred passing for confirmations.

As for data representation that I choose to pass between each tube I've
started with simple namedtuples and following that I've built a simple
"datatype" class somewhat reminiscent of
https://github.com/hynek/characteristic
which I learned of few moments after I finished polishing my own
implementation. What I have there is added layer above namedtuples that
autogenerate zope Interfaces (so I can have adaptation), do field type and
value validation/adaptation and possibly (as a future extension) provide
easy way to make them into AMP commands so the series can be split into
communicating processes as needed. (What would be interesting imo is
something like ampoule for tubes, or perhaps a ThreadTube and SubprocessTube
for performing blocking operations)

Also maybe of note is the implementation of Pipes in Async library for OCaml
which I've been examining lately. What they seem to do there is that they
push values downstream and the function called in each processing step may
return deferred signifying a pause is requested until this deferred is
fired. For those interested in the details you can refer to:
https://ocaml.janestreet.com/ocaml-core/111.25.00/doc/async/#Std.Pipe
and the relevant section of Real World OCaml book (available online).

Looking forward to further tubes development :-)
  CcxCZ (freenode) | Jan Pobříslo (IRL)




From werner at thieprojects.ch  Mon Aug 11 19:45:15 2014
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 11 Aug 2014 15:45:15 -1000
Subject: [Twisted-Python] Who's doing the merges for reviewed and blessed
 pull requests at twisted/nevow?
Message-ID: <53E971AB.10208@thieprojects.ch>

Mahalo for enlightening me, Werner



From lacrima.maxim at gmail.com  Tue Aug 12 01:44:42 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 12 Aug 2014 10:44:42 +0300
Subject: [Twisted-Python] On problems with inlineCallbacks (was Re: Is
 there pb documentation somewhere?)
In-Reply-To: <20140809032923.GA2431@danio.home>
References: <20140809032923.GA2431@danio.home>
Message-ID: <CAKef57MC7E-L_xTzFnS1Y-hps2VcSOTbb7oX1vm90PF3GS5qzA@mail.gmail.com>

Hi,

> Of course the problems that we describe with inlineCallbacks are the
> > exact same problems that you will have with Tulip-style coroutines,
> > and in fact in one of the conversations that was averaged out to
> > produce the above composite, my interlocutor specifically mentioned
> > that they'd already had the kind of bug that explicit-yield coroutines
> > can sometimes encourage (thoughtlessly putting in too many 'yield's
> > and not considering their consequences) and were wondering how Twisted
> > dealt with that sort of thing.


In my understanding Tulip-style coroutines have one advantage. You can use
'yield from ...', which says something like: "don't go through event loop,
but delegate to another coroutine directly". I think this is faster and can
make implementation of event loop simpler. But I can be wrong. Please,
correct me.

Also, I think discussion of advantages/disadvantages of inlineCallbacks had
started before invention of 'yield from ...'. But I can't say much about
it, because I started using twisted not so long ago. So I am also
interested in this discussion.

So what are the exact same problems that both inineCallbacks and
Tulip-style coroutines have?

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140812/253d0892/attachment-0002.html>

From mithrandi at mithrandi.net  Tue Aug 12 02:01:54 2014
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 12 Aug 2014 10:01:54 +0200
Subject: [Twisted-Python] Who's doing the merges for reviewed and
 blessed pull requests at twisted/nevow?
In-Reply-To: <53E971AB.10208@thieprojects.ch>
References: <53E971AB.10208@thieprojects.ch>
Message-ID: <CAMcKhMRGZDMe97-=WJ+AYaj8YaRNVZi8ND9w78OfyzAqGr+a7g@mail.gmail.com>

On 12 August 2014 03:45, Werner Thie <werner at thieprojects.ch> wrote:
> Mahalo for enlightening me, Werner

I'm one of the people with write (commit?) access to Nevow. I just
approved and merged your pull request; sorry for taking so long to get
back to this.

I'm not exactly sure where GitHub shows who has write access to a
repository, maybe somebody else knows.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From roberto.polli at babel.it  Tue Aug 12 07:24:34 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Tue, 12 Aug 2014 15:24:34 +0200
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <E346553E-BB6E-4EAD-8618-504FB9BD477C@twistedmatrix.com>
References: <1679209.Ym6hcXhRg7@rpolli>
 <E346553E-BB6E-4EAD-8618-504FB9BD477C@twistedmatrix.com>
Message-ID: <4702161.N9zhnaH295@rpolli>

On Sunday 10 August 2014 23:09:15 Glyph wrote:
> ... on OS X, where I think
> filtering works slightly differently and the INFO filtering happens in the
> process itself
What does tcpdump says on OSX?

> However, "twistd --syslog" could be implemented in terms of t.p.logger
> instead.
> to make twisted.python.syslog.startLogging use a new-style 
(twisted.python.logging)
> observer, rather than fixing SyslogObserver.
Ok. Hope to play on that  during these holidays.

> any code written to the new API should be populating the old
> logLevels key via
> <https://github.com/twisted/twisted/blob/bd7f43fa202cb78d23098dee165df58737
> ff9192/twisted/python/logger/_legacy.py#L166-L167>.
Ok, so:
1- I won't touch twistd
2- I'll create t.p.logger._syslog
3- I''ll patch t.p.syslog to use  t.p.logger._syslog

> I'd like to make it clear that messages sent to this list are NOT
> confidential
ok, actually the "confidential" just applies when you're not the intended 
recipient of the mail :P

Thx for your guidance + Peace,
R.
-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)





From glyph at twistedmatrix.com  Tue Aug 12 12:18:31 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 12 Aug 2014 11:18:31 -0700
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <4702161.N9zhnaH295@rpolli>
References: <1679209.Ym6hcXhRg7@rpolli>
 <E346553E-BB6E-4EAD-8618-504FB9BD477C@twistedmatrix.com>
 <4702161.N9zhnaH295@rpolli>
Message-ID: <39F6710F-AB92-4F07-B102-79673E592CF1@twistedmatrix.com>


On Aug 12, 2014, at 6:24 AM, Roberto Polli <roberto.polli at babel.it> wrote:

> On Sunday 10 August 2014 23:09:15 Glyph wrote:
>> ... on OS X, where I think
>> filtering works slightly differently and the INFO filtering happens in the
>> process itself
> What does tcpdump says on OSX?'

I am pretty sure that syslog stuff all happens over mach ports, or perhaps UNIX sockets.  Nothing that tcpdump can see unless you configure the daemon to forward stuff on.

>> However, "twistd --syslog" could be implemented in terms of t.p.logger
>> instead.
>> to make twisted.python.syslog.startLogging use a new-style 
> (twisted.python.logging)
>> observer, rather than fixing SyslogObserver.
> Ok. Hope to play on that  during these holidays.

Fantastic :).  Keep in mind that as yet, logger is unreleased and so if you have any feedback we should fix it now :).

>> any code written to the new API should be populating the old
>> logLevels key via
>> <https://github.com/twisted/twisted/blob/bd7f43fa202cb78d23098dee165df58737
>> ff9192/twisted/python/logger/_legacy.py#L166-L167>.
> Ok, so:
> 1- I won't touch twistd
> 2- I'll create t.p.logger._syslog
> 3- I''ll patch t.p.syslog to use  t.p.logger._syslog

This all sounds great.

> Thx for your guidance + Peace,
> R.

Glad to help.  Thanks so much for your contribution!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140812/4a9e2b0f/attachment-0002.html>

From itamar at itamarst.org  Thu Aug 14 13:04:17 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 14 Aug 2014 15:04:17 -0400
Subject: [Twisted-Python] ANN: Flocker 0.1,
 a data volume manager and multi-host Docker cluster management tool
Message-ID: <5b941e811fda6fe8855f6b508f395cdd@itamarst.org>

 

Flocker is an open source data volume manager and multi-host Docker
cluster management tool. With it you can control your data using the
same tools you use for your stateless applications. This means that you
can run your databases, queues and key-value stores in Docker and move
them around as easily as the rest of your app. 

It's written with Twisted (of course) and features the work of Twisted
developers Jean-Paul Calderone, Tom Prince, Richard Wall and myself.
Very much a preliminary release though, so there's a bunch of code that
needs to be Twisted-ified :) 

Documentation: http://docs.clusterhq.com/en/0.1.0/ 

Code: https://github.com/ClusterHQ/flocker 
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140814/b2ae9a78/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Aug 14 14:13:47 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 14 Aug 2014 13:13:47 -0700
Subject: [Twisted-Python] ANN: Flocker 0.1,
	a data volume manager and multi-host Docker cluster management tool
In-Reply-To: <5b941e811fda6fe8855f6b508f395cdd@itamarst.org>
References: <5b941e811fda6fe8855f6b508f395cdd@itamarst.org>
Message-ID: <8BF3E59C-46E0-435C-B614-2ABE1F07890B@twistedmatrix.com>

On Aug 14, 2014, at 12:04 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> Flocker is an open source data volume manager and multi-host Docker cluster management tool. With it you can control your data using the same tools you use for your stateless applications. This means that you can run your databases, queues and key-value stores in Docker and move them around as easily as the rest of your app.
> 
Congratulations, Itamar, Tom, Jean-Paul, and Richard!  I am really excited to see what you've come up with and try this out. :-D
> It's written with Twisted (of course) and features the work of Twisted developers Jean-Paul Calderone, Tom Prince, Richard Wall and myself. Very much a preliminary release though, so there's a bunch of code that needs to be Twisted-ified :)
> 
On behalf of the whole Twisted community, thanks for helping to associate Twisted with such a hip and happening brand as Docker at such an opportune moment in history ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140814/ed42faf3/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Aug 14 15:29:56 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 14 Aug 2014 14:29:56 -0700
Subject: [Twisted-Python] Experimenting with tubes
In-Reply-To: <84AC8E3500000000.9827000000000000.reformail@dorje>
References: <84AC8E3500000000.9827000000000000.reformail@dorje>
Message-ID: <E10C96F8-4EEA-4752-A4AA-89AF27FE7DE4@twistedmatrix.com>

On Aug 11, 2014, at 6:51 AM, ccx at webprojekty.cz wrote:

> Hello, I've been playing with the new tubes that are being implemented:
> http://comments.gmane.org/gmane.comp.python.twisted/27248
> https://twistedmatrix.com/trac/ticket/1956

Thanks so much for taking the time to play with it, and taking some time to write feedback.

> Here are few things that I did with it. I won't publish the full code now,
> as in it's current shape it could implode eyeballs of twisted devs and
> possibly make them summon some of the elder gods, but I'll see if I can
> produce something less vile as I merge the ongoing changes to the tubes
> branch.

I'd be interested to see the code nevertheless.  If you had to do eyeball-imploding antics to get Tubes to work well for your use-case, being able to have a look at that would help us evaluate whether those antics were required by the code, encouraged by misfeatures of the API design, or just issues with lack of documentation.

> So far I wrote relatively simple app that read logfiles, parse them and
> insert what they got out of them into a database.

If it's actually reading a file, another nice to-do would be an IFount provider that provides the contents of a file with appropriate flow control, and maybe a thread or process in the background to do the file I/O.  Another thing you could contribute to the branch, possibly?  :-)  How did you implement this?

> First issue that I've
> dealt with is stopping the tubes. When I read the whole of the input I want
> to wait until all of it was parsed (atm synchronous code, but I can imagine
> eg. some expensive processing being done in thread / external process) and
> then wait until it's commited to the database before shutting the reactor
> down cleanly.

To translate this into Tubes terminology, what it sounds like you want is a way for a drain (in this case, the drain representing the database transaction) to authoritatively signal that it has completed consuming all of the inputs that it has received from its fount.  But the only notification that you can get now is stopFlow, which just means "cut it out" and not "I'm done" - not to mention that "stopFlow" is unnecessary after "flowStopped" which makes it meaningless in the current idiom.

> As of #42908 which I pulled for experimenting the support for passing
> flowStopped(reason) through pipeline (or series if you want) was not
> working, an issue with None being returned from stopped() ended the
> processing prematurely, which I fixed with:
> 
> === modified file 'tubes7/tube.py'
> --- tubes7/tube.py	2014-08-01 18:32:48 +0000
> +++ tubes7/tube.py	2014-08-01 21:20:44 +0000
> @@ -441,6 +446,8 @@
>                 downstream.flowStopped(f)
>             return
>         if iterableOrNot is None:
> +            if self._flowStoppingReason is not None:
> +                self._tfount.drain.flowStopped(self._flowStoppingReason)
>             return 0
>         self._pendingIterator = iter(iterableOrNot)
>         if self._tfount.drain is None:

I'm not sure I totally understand the case that you're describing right now.  Can you perhaps contribute a unit test which demonstrates why this line of code is necessary?

> Also the ProtocolFount didn't really do what it should, so I made it
> implement IHalfCloseableProtocol and made it call flowStopped() accordingly.

Yeah that is definitely a known issue on our to-do list.  I think it's even in the notes.rst in the branch.  Can we have your patch?  (You wrote tests, too, right? ;-))

> One more thing about it I did is that I made it invoke flowStopped() on any
> drain that is newly attached to it - apparently when I used the stdio
> endpoint it managed to close it when reading from /dev/null even before I
> managed to set up the series/pipeline.

Are you running into <https://twistedmatrix.com/trac/ticket/7546>?

> That still didn't make it possible for me to wait on DB being written to
> properly. What I had to do is to implement CloseableDrain that has
> waitDone() method that emits a Deferred that fires when the drain's
> flowStopped() was called and all it should do has been done. This makes it
> quite handy to use from react()-style setup since I can just return this
> Deferred, or DeferredList of all ongoing pipelines.

There are some thoughts I have about the database transaction thing:

Maybe this should be done out of band?  Right before I read this paragraph I was thinking of something like this; a database transaction is a separate thing.  The data has in fact flowed to the appropriate point.
Rather than having an "I'm completely done" notification as I proposed above, we could have an explicit notion of application-level acknowledgements of each receive(...) call?
Maybe those acknowledgements could themselves be coming from a Fount in the reverse direction of the data, rather than trying to put in actual bi-directional data flow into the core interfaces?  A recipe in terms of the existing abstraction, rather than an extension?  This is sort of how real app-level acknowledgements work: the recipient has to send its own message to indicate receipt of the message it received.

> For the next pipeline I had one more issue: this pipeline can be run either
> as a log reader, or as essential part of running program that emits such
> logs. In the latter case I need to generate confirmation messages for
> specific entries that are being inserted and send them back to the
> originator, after they has been safely written to the DB. This I resolved by
> adding another field into the values I pass into PostgreSQLDrain - deferred
> that will be fired as txpostgres's runOperation finishes. This resolution
> works pretty well but it took me quite a while to come up with it, so I'm
> not sure if it's intuitive design pattern or if we could come up with
> something better.

I'm glad I didn't read ahead in this message as I'm replying to it, because I can see that we're thinking along very convergent lines :-).  This sounds just like the the 3rd point in the proposal I was saying before: we should have a recipe present for acknowledgements somewhere.

> Then I had to run both pipelines in parallel, after implementing the fan-in
> pattern (fan-out was already done by glyph), I wrote this helper function:
> 
> def parallel(*tubes):
>    out = Out()
>    in_ = In()
>    out._drain.nextFount = in_
>    for tube in tubes:
>        out.newFount().flowTo(series(tube, in_.newDrain()))
>    in_.stop_on_empty = True
>    return out.drain

We actually started working on twisted.tubes.fan to implement something very much like this that we hadn't gotten to yet!  David was calling this pattern "fork/join" and we were debating whether we needed infrastructure code to do this.

> The nextFount attribute on _OutDrain is what is returned from flowingFrom()
> so this function can be used as a part of series. What I'm unsure about is
> how to handle stopping of the fan-in. Currently I don't make it stop until
> the stop_on_empty is set

That ... definitely sounds kind of gross.  As does actually setting the nextFount attribute directly on the fan.Out.

> (so I can add/remove things during it's
> initialization) and then I make it stop when the last fount that's flowing
> in has stopped (and removed from input founts set) and I use the reason it
> passes into flowStopped() to propagate along to the rest of series,
> effectively discarding any reason objects passed to all the founts except
> the last one.

twisted.web.client.Agent has a solution to this where there's a multi-failure object that aggregates multiple errors into one thing.  I think we have to do something similar.  Unfortunately this is a very confusing interface in addition to being poorly documented and relies on private classes that expose ostensibly public attributes.  We need to very carefully document this within fan.In.

> What I'll have to deal with is a lack of sensible flow control in some parts
> of the code. For example the part that generates the log files should not be
> stopped just because there's some delay in writing the logs. This made me
> wonder if the flow control and perhaps processing confirmation should not be
> run not as a part of the main interface but instead something that runs
> alongside, where applicable, in the opposite direction. But I don't have any
> specific API in my mind at the moment. On the other hand, both are perfectly
> solvable with current design - implementing FIFO buffers or message droppers
> for flow control and the above mentioned deferred passing for confirmations.

So, at some level, yes it should be stopped because there's a delay in writing the logs.  By which I mean that if you don't want to stop it, you have to choose an explicit, finite amount of memory or disk to use for buffering.  FIFO buffers and message droppers are (obviously) very important flow-control intermediaries, but at the end of the day you have a finite amount of resources and the idea that flow-control should be "optional" means that sometimes (read: "usually") you have an infinite amount of RAM and disk and you're perfectly happy to put it all to work whenever you experience a network partition that stalls your TCP stack.

> As for data representation that I choose to pass between each tube I've
> started with simple namedtuples and following that I've built a simple
> "datatype" class somewhat reminiscent of
> https://github.com/hynek/characteristic
> which I learned of few moments after I finished polishing my own
> implementation. What I have there is added layer above namedtuples that
> autogenerate zope Interfaces (so I can have adaptation), do field type and
> value validation/adaptation and possibly (as a future extension) provide
> easy way to make them into AMP commands so the series can be split into
> communicating processes as needed. (What would be interesting imo is
> something like ampoule for tubes, or perhaps a ThreadTube and SubprocessTube
> for performing blocking operations)

I think it's likely we'll acquire a dependency on Characteristic sometime soon, I have promised to look at the issues on <https://github.com/hynek/characteristic/pull/13> and try to address them already :).

> Also maybe of note is the implementation of Pipes in Async library for OCaml
> which I've been examining lately. What they seem to do there is that they
> push values downstream and the function called in each processing step may
> return deferred signifying a pause is requested until this deferred is
> fired. For those interested in the details you can refer to:
> https://ocaml.janestreet.com/ocaml-core/111.25.00/doc/async/#Std.Pipe
> and the relevant section of Real World OCaml book (available online).

Creating a token for every single call to .receive() makes life hard.  Deferred could go to some trouble to be a cheaper token to pass around (especially on PyPy) but doing it this way is also error-prone as a mistaken error-handler in the Deferred chain means that the default behavior of buggy code un-hooks your loop and leaves idle data sources that will never be cleaned up.

(The fact that each call to .pauseFlow returns a token is me trying to rehabilitate myself from worrying about the performance side of this argument and worry more about the correctness / error-prone-ness part.  The PyPy developers, especially Alex Gaynor, have almost convinced me that it is OK to malloc things, sometimes.  Sometimes.)

I worked quite a bit with the 'Streams' interface in web2 on Calendar Server, and my conclusion there is that while this is better than nothing (it was very nice to be able to just return a Stream rather than cobble together something that returned NOT_DONE_YET every time) it was (A) slow and (B) error prone.  Tubes are designed specifically to avoid this error.  Although you can return Deferreds internally, no consumer ever needs to write the callback-loop that calls .read() again from a callback on .read().

> Looking forward to further tubes development :-)

As am I.  Thanks for all the feedback and encouragement!  This was very useful.  My main takeaway is that we definitely have some missing utility classes (file fount, FIFO queue, message dropper, fan.In, an idiom and supporting code for processing message acknowledgements at the application level), some bugs (something about flowStopped not propagating correctly?), but that the interfaces as they stand are largely on the right track.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140814/33b72ec2/attachment-0002.html>

From piper.masden at gmail.com  Thu Aug 14 16:54:24 2014
From: piper.masden at gmail.com (Piper Masden)
Date: Thu, 14 Aug 2014 16:54:24 -0600
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
Message-ID: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>

Hi Twistedeers!

  I have a twisted plugin that I created to replace the Django dev server
for our devs. It sets up a separate twisted service for serving media, so
we don't need any urls.py tomfoolery in dev. It also sets up an
experimental REST api server which we hope to make javascript requests to
in the near future.

  The core of the code looks like this:

    resource = WSGIResource(reactor, reactor.getThreadPool(), WSGIHandler())
    endpoint = 'tcp:port=8000'
    server = strports.service(endpoint, server.Site(resource))
    server.setServiceParent(application)

  This has worked great for a while. However, we have some views that we
require https on, and so this dev server doesn't allow us to get to those
views at all. I generated a .key file and a .crt file with openssl, and
then cat'd them together to make a pem, and then changed the endpoint to
be...

    endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem'

  Now when I open my browser and type https://localhost:8000, chrome just
hangs. I don't really know how to diagnose this, because I don't really
know anything about SSL (it's all just magic security goodness to me). I
don't necessarily need a direct answer (though it will certainly make me
look good to all the other devs), but maybe some pointers in the right
direction would help.

-Piper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140814/6222195b/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Aug 15 02:15:53 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 15 Aug 2014 01:15:53 -0700
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
Message-ID: <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>

On Aug 14, 2014, at 3:54 PM, Piper Masden <piper.masden at gmail.com> wrote:

> Hi Twistedeers!
> 
>   I have a twisted plugin that I created to replace the Django dev server for our devs.

Cool!

> It sets up a separate twisted service for serving media, so we don't need any urls.py tomfoolery in dev. It also sets up an experimental REST api server which we hope to make javascript requests to in the near future.

Glad to hear you're using Twisted for this.

>   The core of the code looks like this:
> 
>     resource = WSGIResource(reactor, reactor.getThreadPool(), WSGIHandler())
>     endpoint = 'tcp:port=8000'
>     server = strports.service(endpoint, server.Site(resource))
>     server.setServiceParent(application)
> 
>   This has worked great for a while. However, we have some views that we require https on, and so this dev server doesn't allow us to get to those views at all. I generated a .key file and a .crt file with openssl, and then cat'd them together to make a pem, and then changed the endpoint to be...
> 
>     endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem'
> 
>   Now when I open my browser and type https://localhost:8000, chrome just hangs. I don't really know how to diagnose this, because I don't really know anything about SSL (it's all just magic security goodness to me). I don't necessarily need a direct answer (though it will certainly make me look good to all the other devs), but maybe some pointers in the right direction would help.

This isn't really enough information to diagnose a problem, but here are some things you could try:

openssl s_client -connect localhost:8000
curl -vvvv https://localhost:8000/

These should output some stuff about your TLS connection, and will perhaps emit an error message which looks obvious to you.  If not, seeing some of that output might be useful to help diagnose it.  Also, trying other web browsers is always helpful.

You might also try replacing your SSL string endpoint description with a TXSNI endpoint plugin: <https://github.com/glyph/txsni>.  This is just a little easier to get right because of how it reads certificates (for example you don't need to get your private key, chain cert, and main cert in the right order, as long as they're all in the appropriate file.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140815/0ca60cf4/attachment-0002.html>

From tobias.oberstein at tavendo.de  Fri Aug 15 03:48:34 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 15 Aug 2014 02:48:34 -0700
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D444794C5242@EXVMBX020-12.exch020.serverdata.net>

>generated a .key file and a .crt file with openssl, and then cat'd them together to make a pem, and then changed the endpoint to be...
>   endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem'

you could try to not concat key and cert, but leave them separate:

endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem;certKey=/path/to/cert.pem'

/Tobias

From lacrima.maxim at gmail.com  Fri Aug 15 04:42:08 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Fri, 15 Aug 2014 13:42:08 +0300
Subject: [Twisted-Python] ANN: Flocker 0.1,
 a data volume manager and multi-host Docker cluster management tool
In-Reply-To: <8BF3E59C-46E0-435C-B614-2ABE1F07890B@twistedmatrix.com>
References: <5b941e811fda6fe8855f6b508f395cdd@itamarst.org>
 <8BF3E59C-46E0-435C-B614-2ABE1F07890B@twistedmatrix.com>
Message-ID: <CAKef57PR9Ky6-K-agUBy8c+D8EKSBiZwTvL+UuV_e-_5PCBhfw@mail.gmail.com>

Does Flocker provide API on which we can add support for other containers,
like LXC or systemd-nspawn?


On 14 August 2014 23:13, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Aug 14, 2014, at 12:04 PM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> Flocker is an open source data volume manager and multi-host Docker
> cluster management tool. With it you can control your data using the same
> tools you use for your stateless applications. This means that you can run
> your databases, queues and key-value stores in Docker and move them around
> as easily as the rest of your app.
>
> Congratulations, Itamar, Tom, Jean-Paul, and Richard!  I am really excited
> to see what you've come up with and try this out. :-D
>
> It's written with Twisted (of course) and features the work of Twisted
> developers Jean-Paul Calderone, Tom Prince, Richard Wall and myself. Very
> much a preliminary release though, so there's a bunch of code that needs to
> be Twisted-ified :)
>
> On behalf of the whole Twisted community, thanks for helping to associate
> Twisted with such a hip and happening brand as Docker at such an opportune
> moment in history ;-).
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140815/4087f9da/attachment-0002.html>

From piper.masden at gmail.com  Fri Aug 15 10:32:50 2014
From: piper.masden at gmail.com (Piper Masden)
Date: Fri, 15 Aug 2014 10:32:50 -0600
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
 <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>
Message-ID: <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>

On Fri, Aug 15, 2014 at 2:15 AM, Glyph <glyph at twistedmatrix.com> wrote:

> On Aug 14, 2014, at 3:54 PM, Piper Masden <piper.masden at gmail.com> wrote:
>
>   The core of the code looks like this:
>
>     resource = WSGIResource(reactor, reactor.getThreadPool(),
> WSGIHandler())
>     endpoint = 'tcp:port=8000'
>     server = strports.service(endpoint, server.Site(resource))
>     server.setServiceParent(application)
>
>   This has worked great for a while. However, we have some views that we
> require https on, and so this dev server doesn't allow us to get to those
> views at all. I generated a .key file and a .crt file with openssl, and
> then cat'd them together to make a pem, and then changed the endpoint to
> be...
>
>     endpoint = 'ssl:port=8000:privateKey=/path/to/key.pem'
>
>   Now when I open my browser and type https://localhost:8000, chrome just
> hangs. I don't really know how to diagnose this, because I don't really
> know anything about SSL (it's all just magic security goodness to me). I
> don't necessarily need a direct answer (though it will certainly make me
> look good to all the other devs), but maybe some pointers in the right
> direction would help.
>
>
> This isn't really enough information to diagnose a problem, but here are
> some things you could try:
>
> openssl s_client -connect localhost:8000
> curl -vvvv https://localhost:8000/
>
> These should output some stuff about your TLS connection, and will perhaps
> emit an error message which looks obvious to you.  If not, seeing some of
> that output might be useful to help diagnose it.  Also, trying other web
> browsers is always helpful.
>

I tried Firefox and Safari right after I Chrome. I did have it slightly
working once, where I could get it connect, and if I hit the "Stop" button,
the browser would draw the served data. I thought that might have been
because the media server wasn't serving media via https, and the browser
was confused. When I tried to enable that, it stopped working altogether
(Chrome just says "Establishing secure connection" until it times out).

Here's my code now (I added Tobias' suggestion to not use the pem file):

    resource = WSGIResource(reactor, reactor.getThreadPool(), WSGIHandler())
    endpoint = 'ssl:port=8000:privateKey=server.key:certKey=server.crt'
    server = strports.service(endpoint, server.Site(resource))

When I use the openssl command you gave me, I get this:

    > openssl s_client -connect localhost:8000
    CONNECTED(00000003)
    ^C

(I had to Ctrl-C it, because it just stuck there)

When I do the curl command, I get this:

    > curl -vvvv https://localhost:8000/
    * Adding handle: conn: 0x7fd0f9813600
    * Adding handle: send: 0
    * Adding handle: recv: 0
    * Curl_addHandleToPipeline: length: 1
    * - Conn 0 (0x7fd0f9813600) send_pipe: 1, recv_pipe: 0
    * About to connect() to localhost port 8000 (#0)
    *   Trying ::1...
    *   Trying 127.0.0.1...
    * Connected to localhost (127.0.0.1) port 8000 (#0)
    ^C

(I have to Ctrl-C it too)

Maybe I generated my certs wrong or something? I just did

    openssl req -nodes -new -x509 -keyout server.key -out server.crt

...which I basically took from a OpenSSL HOWTO because I have no idea what
I'm doing.


>
> You might also try replacing your SSL string endpoint description with a
> TXSNI endpoint plugin: <https://github.com/glyph/txsni>.  This is just a
> little easier to get right because of how it reads certificates (for
> example you don't need to get your private key, chain cert, and main cert
> in the right order, as long as they're all in the appropriate file.
>

If I can't get this to work, I may bug you about txsni. I think this is a
case me just not knowing anything about OpenSSL (and the internets having
wildly varying levels of explanations) and probably doing something not
very smart. If I can learn something about OpenSSL while I facepalm, I'd
rather do that.

-Piper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140815/81624f62/attachment-0002.html>

From tobias.oberstein at tavendo.de  Fri Aug 15 11:34:37 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 15 Aug 2014 10:34:37 -0700
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
 <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>
 <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D444795530F9@EXVMBX020-12.exch020.serverdata.net>

>Maybe I generated my certs wrong or something? I just did 

Did you set the "Common Name" (CN) correctly?

FWIW, you might have look at this recipe

https://github.com/crossbario/crossbar/wiki/Secure%20WebSocket%20and%20HTTPS#using-self-signed-certificates

Ignore the other stuff / the site in general .. I am pointing there since I know for sure this works with Twisted and all browsers.

If above doesn't help: can you post your complete code (exactly as you run it)? I'll give it a shot .. 

/Tobias

From exarkun at twistedmatrix.com  Fri Aug 15 15:38:16 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 15 Aug 2014 21:38:16 -0000
Subject: [Twisted-Python] Serving WSGIResource via SSL endpoint
In-Reply-To: <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>
References: <CAJjaOEM6sLquuTd+Jy91Ya_kq6bef1nbBNsq7Y6EPKBUk2B9qA@mail.gmail.com>
 <A6EE6F78-8DF3-44AF-9A2C-4C06B6C670D4@twistedmatrix.com>
 <CAJjaOEPYkUOopGWAx0QpKeDETpqrtd09_xcKQV0eWL=bxd-fDA@mail.gmail.com>
Message-ID: <20140815213816.20413.379601912.divmod.xquotient.1683@top>

On 04:32 pm, piper.masden at gmail.com wrote:
>On Fri, Aug 15, 2014 at 2:15 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
>When I use the openssl command you gave me, I get this:
>
>    > openssl s_client -connect localhost:8000
>    CONNECTED(00000003)
>    ^C
>
>(I had to Ctrl-C it, because it just stuck there)

You might find it instructive to run these commands against a known 
working TLS server so you can draw some conclusions about the results 
when you use them against yours.

For example, this would show you that the TLS handshake is never 
actually completing.

Are you sure you've actually set up TLS on this port?

An http://sscce.org/ would help the list diagnose the problem.

Jean-Paul



From trac at twistedmatrix.com  Sun Aug 17 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Aug 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1408255515.72.2226655316177427200@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140817/1efc8898/attachment-0002.html>

From sank.daniel at gmail.com  Sun Aug 17 21:05:47 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 17 Aug 2014 20:05:47 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
Message-ID: <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>

glyph,

>> 2. Do I notify you if Joe disappears on my side?
>>
> Yes.
> <
https://github.com/twisted/twisted/blob/a8227e5562a4f9074bb0d5faf6a10e91069704aa/twisted/spread/pb.py#L365-L369
>.

That's the recipient announcing deletion, not the sender. And anyway, my
questions is how _should_ this work, not how does it work right now.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140817/2732ad27/attachment-0002.html>

From roberto.polli at babel.it  Mon Aug 18 10:14:08 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Mon, 18 Aug 2014 18:14:08 +0200
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <39F6710F-AB92-4F07-B102-79673E592CF1@twistedmatrix.com>
References: <1679209.Ym6hcXhRg7@rpolli> <4702161.N9zhnaH295@rpolli>
 <39F6710F-AB92-4F07-B102-79673E592CF1@twistedmatrix.com>
Message-ID: <4126025.5n4Bg7gA0j@rpolli>

Hi @all,

On Tuesday 12 August 2014 11:18:31 Glyph Lefkowitz wrote:
> 2- I'll create t.p.logger._syslog
> 3- I''ll patch t.p.syslog to use  t.p.logger._syslog
While writing 2, I found that

1- t.p.logger.LogLevel implements a mapping between syslog priorities and 
loglevels.
2- there's a private method which actually which doesn't seem to work as 
expected (priorities order is reversed):
  * LogLevel._priorityForLevel(LogLevel.debug) == 0
  * should be 7
3- To have a correct mapping we should add `kern` even if probably it's not a 
value which fits to a python application.
4- There's an old closed ticket on that, but it doesn't say anything about 
loglevels but only an interesting discussion about NamedConstants

Q1- Should we implement a priority mapping in LogLevel?
Q2- Should we fix that method and make it public?

Thx + Peace,
R:

-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)





From roberto.polli at babel.it  Mon Aug 18 11:50:57 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Mon, 18 Aug 2014 19:50:57 +0200
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
Message-ID: <2791328.hqOZV1DUty@rpolli>

Hi everybody,

I found some time for adding a stub of SyslogObserver to the new t.p.logger.

https://github.com/ioggstream/twisted/commit/991156e1124d61ad26da0be12123079ffc45764c

Feedback welcome!

Peace,
R.


-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)

CONFIDENZIALE: Questo messaggio ed i suoi allegati sono di carattere 
confidenziale per i destinatari in indirizzo.
E' vietato l'inoltro non autorizzato a destinatari diversi da quelli indicati 
nel messaggio originale.
Se ricevuto per errore, l'uso del contenuto e' proibito; si prega di 
comunicarlo al mittente e cancellarlo immediatamente.



From glyph at twistedmatrix.com  Mon Aug 18 12:41:01 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 11:41:01 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
Message-ID: <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>


On Aug 17, 2014, at 8:05 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> >> 2. Do I notify you if Joe disappears on my side?
> >>
> > Yes.
> > <https://github.com/twisted/twisted/blob/a8227e5562a4f9074bb0d5faf6a10e91069704aa/twisted/spread/pb.py#L365-L369>.
> 
> That's the recipient announcing deletion, not the sender.

On the sender's side, the object can't disappear unless the recipient sends the deletion.  The recipient is holding a reference to it.  This is by design - the sender can synthesize a restricted capability which has no use except for mediating the recipient's access to a particular resource (in fact, this is practically the only recommended way to use PB) and the reference to that object is held only by the server.

> And anyway, my questions is how _should_ this work, not how does it work right now.

It works this way now, and that part of the design is basically correct, I think, unless you're asking about some other aspect of it that I don't get ;).

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/282e9f0d/attachment-0002.html>

From sank.daniel at gmail.com  Mon Aug 18 12:49:28 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 11:49:28 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
Message-ID: <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>

glyph,

> On the sender's side, the object *can't* disappear unless the recipient
sends the deletion.

Surely a resource can disappear on the server. When that happens, any
Referenceables being used to mediate access to that resource should go
away... or something, right? I must not be thinking about this correctly.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/a357f2bb/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Aug 18 13:13:51 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 12:13:51 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
Message-ID: <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>


On Aug 18, 2014, at 11:49 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> > On the sender's side, the object can't disappear unless the recipient sends the deletion.
> 
> Surely a resource can disappear on the server. When that happens, any Referenceables being used to mediate access to that resource should go away... or something, right? I must not be thinking about this correctly.

What do you mean by "disappear"?  A "resource" - i.e. a Referenceable - is just a Python object in memory.  One could of course write an intentionally malicious PB server that made it appear that an object had "disappeared" by responding with errors to all method calls sent over the wire, but in normal operation, Python objects don't spontaneously ascend to a different plane of existence - as long as there are pointers to them in memory (in the case of Referenceables that are currently in use, a reference from a dictionary on the Broker instance for the client which is using them) they will remain alive indefinitely.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/2cec9ea9/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Aug 18 13:19:11 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 12:19:11 -0700
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <2791328.hqOZV1DUty@rpolli>
References: <2791328.hqOZV1DUty@rpolli>
Message-ID: <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>

On Aug 18, 2014, at 10:50 AM, Roberto Polli <roberto.polli at babel.it> wrote:

> Hi everybody,
> 
> I found some time for adding a stub of SyslogObserver to the new t.p.logger.
> 
> https://github.com/ioggstream/twisted/commit/991156e1124d61ad26da0be12123079ffc45764c
> 
> Feedback welcome!
> 
> Peace,
> R.

For starters, DummyFile looks unnecessary.  You've got tests that make sure it isn't written to, but you just construct one and you don't pass it to anything, so of course it doesn't get written to, why would it?

This is the sort of test one might write if one were writing tests after the fact, rather than test-driven as Twisted's process recommends.  You weren't writing tests last, were you? ;-)

It also looks like the sort of thing you copied and pasted out of test_file.py.  Please don't copy and paste; if you want to import a helper from elsewhere in the test suite, just import it.

Is this otherwise ready for review?

-glyph




From glyph at twistedmatrix.com  Mon Aug 18 13:22:15 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 12:22:15 -0700
Subject: [Twisted-Python] t.p.syslog, t.p.logger and twistd  (was #7549)
In-Reply-To: <4126025.5n4Bg7gA0j@rpolli>
References: <1679209.Ym6hcXhRg7@rpolli> <4702161.N9zhnaH295@rpolli>
 <39F6710F-AB92-4F07-B102-79673E592CF1@twistedmatrix.com>
 <4126025.5n4Bg7gA0j@rpolli>
Message-ID: <1AB00CEC-DC87-4E1F-B842-F5645D40CBF2@twistedmatrix.com>


On Aug 18, 2014, at 9:14 AM, Roberto Polli <roberto.polli at babel.it> wrote:

> Hi @all,
> 
> On Tuesday 12 August 2014 11:18:31 Glyph Lefkowitz wrote:
>> 2- I'll create t.p.logger._syslog
>> 3- I''ll patch t.p.syslog to use  t.p.logger._syslog
> While writing 2, I found that
> 
> 1- t.p.logger.LogLevel implements a mapping between syslog priorities and 
> loglevels.

Yeah, I remember working on this and I was actually a little surprised we didn't take it further and implement syslog entirely.  So I'm glad you're working on this.

> 2- there's a private method which actually which doesn't seem to work as 
> expected (priorities order is reversed):

Sounds like that should be fixed!  Perhaps you could submit a ticket which was just this fix, to get something landed more quickly? :-).

>  * LogLevel._priorityForLevel(LogLevel.debug) == 0
>  * should be 7
> 3- To have a correct mapping we should add `kern` even if probably it's not a 
> value which fits to a python application.

Thoroughness in implementation of specifications is generally a virtue.

> 4- There's an old closed ticket on that, but it doesn't say anything about 
> loglevels but only an interesting discussion about NamedConstants

Link?  If you think that ticket ended up being about something else, you can always file a new one.  Thanks for looking it up first though, it's always good to avoid duplicates when we can.

> Q1- Should we implement a priority mapping in LogLevel?
> Q2- Should we fix that method and make it public?

It doesn't have to be public just because it's used by two parts of the log system implementation.  Public methods in Twisted are also considered "published"; it's usually better to call private methods internally than to expose a whole bunch of implementation details to application code which it can then start depending upon and making it impossible for us to fix without breaking the compatibility policy.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/7a7640f7/attachment-0002.html>

From sank.daniel at gmail.com  Mon Aug 18 13:37:29 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 12:37:29 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
Message-ID: <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>

glyph,

> A "resource" - i.e. a Referenceable - is just a Python object in memory.

Indeed.

> but in normal operation, Python objects don't spontaneously ascend
> to a different plane of existence - as long as there are pointers to them
in
> memory

Of course.

> in the case of Referenceables that are currently in use, a reference
> from a dictionary on the Broker instance for the client which is using
> them

Suppose I have a Thingy:

myThingy = Thingy()

I want to give you some amount of access to manipulate myThingy, so I make
a Referenceable which has some connection to it:

myReferenceable.thingy = weakref.proxy(myThingy)

and I send you the Referenceable. Now suppose I do

del myThingy

Now myThingy will be garbage collected. Then, if you invoke methods on
myReferenceable, they'll fail. Is this what we want, or should I tell you
that your RemoteReference should be considered stale?

If I'm not thinking about this correctly please advise. I realize that I
could have done

myReferenceable.thingy = myThingy

so that myThingy lives as long as myReferenceable, but this doesn't
actually seem like what I would normally want.

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/0fdcda12/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Aug 18 14:01:02 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Aug 2014 13:01:02 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
Message-ID: <2E454D37-7A76-4527-8ABF-894E1E1E10F0@twistedmatrix.com>


On Aug 18, 2014, at 12:37 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> glyph,
> 
> > A "resource" - i.e. a Referenceable - is just a Python object in memory.
> 
> Indeed.
> 
> > but in normal operation, Python objects don't spontaneously ascend
> > to a different plane of existence - as long as there are pointers to them in
> > memory
> 
> Of course.
> 
> > in the case of Referenceables that are currently in use, a reference
> > from a dictionary on the Broker instance for the client which is using
> > them
> 
> Suppose I have a Thingy:
> 
> myThingy = Thingy()
> 
> I want to give you some amount of access to manipulate myThingy, so I make a Referenceable which has some connection to it:
> 
> myReferenceable.thingy = weakref.proxy(myThingy)
> 
> and I send you the Referenceable. Now suppose I do
> 
> del myThingy
> 
> Now myThingy will be garbage collected. Then, if you invoke methods on myReferenceable, they'll fail. Is this what we want, or should I tell you that your RemoteReference should be considered stale?
> 
> If I'm not thinking about this correctly please advise. I realize that I could have done
> 
> myReferenceable.thingy = myThingy
> 
> so that myThingy lives as long as myReferenceable, but this doesn't actually seem like what I would normally want.

Why would you not normally want that?

What you're saying here is that MyReferenceable requires a thingy in the 'thingy' attribute to do its job.  MyReferenceable is a Python class in your application - its clients will call its methods, and it should take care that its methods do something sensible.  The fact that its clients are remote via the Broker class is almost irrelevant.

If you pass a type MyReferenceable doesn't expect - a weakref.proxy that suddenly becomes invalid when the inner object goes away - you'll get nonsense behavior.  But this isn't specific to Referenceable or remote access - if you just had an A and a B, and A expects a 'b' attribute that's a B, and you set 'b' to something that isn't a B, you get the same kind of nonsense behavior. 

(Also, if you require a 'thingy' attribute it should probably be a constructor argument rather than an externally-set attribute, so that the instance is initially in a valid state.)

-glyph






From roberto.polli at babel.it  Mon Aug 18 14:34:53 2014
From: roberto.polli at babel.it (Roberto Polli)
Date: Mon, 18 Aug 2014 22:34:53 +0200
Subject: [Twisted-Python] patch for t.p.logger.SyslogObserver (was #7549)
In-Reply-To: <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>
References: <2791328.hqOZV1DUty@rpolli>
 <8F3D48AE-0F9C-4BA3-97C1-1A3F9BC0B748@twistedmatrix.com>
Message-ID: <3415350.qaLh0yVden@rpolli>

Hi Glyph,

thx for your feedback!

> Is this otherwise ready for review?
Not ready for review: there's even to check the interoperability with twistd 
;)
I was concerned about to be on the right track, eg: 
1- is it fine to patch SyslogObserver.syslog or should I pass it as a 
parameter to SyslogObserver(...,syslog=stdsyslog.syslog)?
2- should syslog severity be implemented _syslog.py or in LogLevels


On Monday 18 August 2014 12:19:11 Glyph Lefkowitz wrote:
> > ..a stub of SyslogObserver to the new t.p.logger.
> > 
> > https://github.com/ioggstream/twisted/commit/991156e1124d61ad26da0be121230
> > 79ffc45764c
 
> ...DummyFile looks unnecessary. 
> you copied and pasted out of test_file.py. 
As I didn't know how the new logger worked, I started duplicating:
 * _file.py -> _syslog.py
 * test_file.py -> test_syslog.py
And merging t.p.test.test_syslog behavior into test_syslog.

> You weren't writing tests last, were you? ;-)
Nope :) Iteratively modifying test_syslog.py then _syslog.py so that I could 
get in touch with the new logger.

Thx again for all your time + Peace,
R.

-- 
Roberto Polli
Community Manager
Babel - a business unit of Par-Tec S.p.A. - http://www.babel.it 
T: +39.06.9826.9651 M: +39.340.652.2736 F: +39.06.9826.9680
P.zza S.Benedetto da Norcia, 33 - 00040 Pomezia (Roma)




From dustin at v.igoro.us  Mon Aug 18 15:18:48 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 18 Aug 2014 17:18:48 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
Message-ID: <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>

On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
> and I send you the Referenceable. Now suppose I do
>
> del myThingy
>
> Now myThingy will be garbage collected.

No, this is simply incorrect.  'del myThingy' simply removes a
reference to the object to which myThingy refers.

If and only if that's the last reference (as determined by Python's
reference counting), it is deleted.  As glyph said, as long as there
is an outstanding remote reference, the Broker keeps a Python
reference to the object internally, preventing the reference count
from reaching zero, preventing the object from being deleted.

Dustin



From sank.daniel at gmail.com  Mon Aug 18 15:25:37 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 14:25:37 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
Message-ID: <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>

Dustin,

> No, this is simply incorrect.  'del myThingy' simply removes
> a reference to the object to which myThingy refers.

Argh. I'm assuming, as in the example, that the only strong reference to
myThingy is the one I own.

> the Broker keeps a Python reference to the object internally,
> preventing the reference count from reaching zero,
> preventing the object from being deleted.

I understand that. I'm trying to ask if that's how it _should_ work. If I
have a resource and make a Referenceable to give you access to it, it
doesn't really make sense to me that my resource should be kept alive just
because you have that access. It seems more reasonable to me that your
access object should reference my resource _weakly_ and that you should
receive some kind of notification if and when the resource expires.

It's just like the case of a GUI and a business logic object. The GUI
probably gets a reference to the business logic object so that eg. button
pushes can invoke methods on the object. However, that reference should
probably be weak so that the business logic object can be garbage collected
when it's finished with its business. There's no sense (to me) in keeping
an object alive because a GUI, logger, or other observer is observing it.
Am I just wrong?

Daniel


On Mon, Aug 18, 2014 at 2:18 PM, Dustin J. Mitchell <dustin at v.igoro.us>
wrote:

> On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com>
> wrote:
> > and I send you the Referenceable. Now suppose I do
> >
> > del myThingy
> >
> > Now myThingy will be garbage collected.
>
> No, this is simply incorrect.  'del myThingy' simply removes a
> reference to the object to which myThingy refers.
>
> If and only if that's the last reference (as determined by Python's
> reference counting), it is deleted.  As glyph said, as long as there
> is an outstanding remote reference, the Broker keeps a Python
> reference to the object internally, preventing the reference count
> from reaching zero, preventing the object from being deleted.
>
> Dustin
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/9b844ddd/attachment-0002.html>

From dustin at v.igoro.us  Mon Aug 18 17:30:06 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 18 Aug 2014 19:30:06 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
Message-ID: <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>

Indeed, what you're expecting is very much against the design of PB.

Dustin


On Mon, Aug 18, 2014 at 5:25 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Dustin,
>
> > No, this is simply incorrect.  'del myThingy' simply removes
> > a reference to the object to which myThingy refers.
>
> Argh. I'm assuming, as in the example, that the only strong reference to
> myThingy is the one I own.
>
> > the Broker keeps a Python reference to the object internally,
> > preventing the reference count from reaching zero,
> > preventing the object from being deleted.
>
> I understand that. I'm trying to ask if that's how it _should_ work. If I
> have a resource and make a Referenceable to give you access to it, it
> doesn't really make sense to me that my resource should be kept alive just
> because you have that access. It seems more reasonable to me that your
> access object should reference my resource _weakly_ and that you should
> receive some kind of notification if and when the resource expires.
>
> It's just like the case of a GUI and a business logic object. The GUI
> probably gets a reference to the business logic object so that eg. button
> pushes can invoke methods on the object. However, that reference should
> probably be weak so that the business logic object can be garbage collected
> when it's finished with its business. There's no sense (to me) in keeping
> an object alive because a GUI, logger, or other observer is observing it.
> Am I just wrong?
>
> Daniel
>
>
> On Mon, Aug 18, 2014 at 2:18 PM, Dustin J. Mitchell <dustin at v.igoro.us>
> wrote:
>
>> On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com>
>> wrote:
>> > and I send you the Referenceable. Now suppose I do
>> >
>> > del myThingy
>> >
>> > Now myThingy will be garbage collected.
>>
>> No, this is simply incorrect.  'del myThingy' simply removes a
>> reference to the object to which myThingy refers.
>>
>> If and only if that's the last reference (as determined by Python's
>> reference counting), it is deleted.  As glyph said, as long as there
>> is an outstanding remote reference, the Broker keeps a Python
>> reference to the object internally, preventing the reference count
>> from reaching zero, preventing the object from being deleted.
>>
>> Dustin
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/23365e4f/attachment-0002.html>

From sank.daniel at gmail.com  Mon Aug 18 18:28:47 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 17:28:47 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
Message-ID: <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>

Dustin and glyph,

> Indeed, what you're expecting is very much against the design of PB.

I see. The existing Referenceable code now makes sense to me, since I now
understand the intent. Thank you.

Would having something like Referenceable but which is not reference
counted across the network, and which receives a notification when the
server-side object dies, be useful [1]?

I'm thinking of the case where I use pb to play chess over the network. If
a piece is captured, the server's reference to that object will be deleted.
There is no sense, in this case, for the object representing the piece to
persist, and certainly not because the client's happen to have knowledge
that the piece existed once upon a time.

Daniel

[1] I haven't delved into the Viewable code yet, so that might be what I'm
describing.



On Mon, Aug 18, 2014 at 4:30 PM, Dustin J. Mitchell <dustin at v.igoro.us>
wrote:

> Indeed, what you're expecting is very much against the design of PB.
>
> Dustin
>
>
> On Mon, Aug 18, 2014 at 5:25 PM, Daniel Sank <sank.daniel at gmail.com>
> wrote:
>
>> Dustin,
>>
>> > No, this is simply incorrect.  'del myThingy' simply removes
>> > a reference to the object to which myThingy refers.
>>
>> Argh. I'm assuming, as in the example, that the only strong reference to
>> myThingy is the one I own.
>>
>> > the Broker keeps a Python reference to the object internally,
>> > preventing the reference count from reaching zero,
>> > preventing the object from being deleted.
>>
>> I understand that. I'm trying to ask if that's how it _should_ work. If I
>> have a resource and make a Referenceable to give you access to it, it
>> doesn't really make sense to me that my resource should be kept alive just
>> because you have that access. It seems more reasonable to me that your
>> access object should reference my resource _weakly_ and that you should
>> receive some kind of notification if and when the resource expires.
>>
>> It's just like the case of a GUI and a business logic object. The GUI
>> probably gets a reference to the business logic object so that eg. button
>> pushes can invoke methods on the object. However, that reference should
>> probably be weak so that the business logic object can be garbage collected
>> when it's finished with its business. There's no sense (to me) in keeping
>> an object alive because a GUI, logger, or other observer is observing it.
>> Am I just wrong?
>>
>> Daniel
>>
>>
>> On Mon, Aug 18, 2014 at 2:18 PM, Dustin J. Mitchell <dustin at v.igoro.us>
>> wrote:
>>
>>> On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com>
>>> wrote:
>>> > and I send you the Referenceable. Now suppose I do
>>> >
>>> > del myThingy
>>> >
>>> > Now myThingy will be garbage collected.
>>>
>>> No, this is simply incorrect.  'del myThingy' simply removes a
>>> reference to the object to which myThingy refers.
>>>
>>> If and only if that's the last reference (as determined by Python's
>>> reference counting), it is deleted.  As glyph said, as long as there
>>> is an outstanding remote reference, the Broker keeps a Python
>>> reference to the object internally, preventing the reference count
>>> from reaching zero, preventing the object from being deleted.
>>>
>>> Dustin
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> --
>> Daniel Sank
>> Department of Physics
>> Broida Hall
>> University of California
>> Santa Barbara, CA 93117
>> (805)893-3899
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/4439a304/attachment-0002.html>

From dustin at v.igoro.us  Mon Aug 18 21:16:03 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Mon, 18 Aug 2014 23:16:03 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
Message-ID: <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>

Adding what amounts to a use-after-free bug to the protocol seems like a
really bad idea to me.

Perhaps you see a more compelling use-case than the chess example.  In just
about any case I can think of, I'm not at all concerned about when garbage
collection takes place.  Certainly it opens you to a denial of service from
a malicious client, which might hold references to objects you'd rather it
didn't, but PB's not made for use in hostile situations, and anyway it has
an upper limit (hard-coded to 4096) on the number of references a client
can hold.  Trust me, Buildbot users run up against that limit all the time.

If your server-side app is sensitive to when objects are destroyed for any
reason aside from management of its memory consumption, I'd argue your app
is broken.

It's worth noting that Buildbot also ran into a nasty bug in an older
version of Twisted that caused the broker to not unreference objects
correctly, which led to quite a bit of memory usage.

Dustin



On Mon, Aug 18, 2014 at 8:28 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Dustin and glyph,
>
> > Indeed, what you're expecting is very much against the design of PB.
>
> I see. The existing Referenceable code now makes sense to me, since I now
> understand the intent. Thank you.
>
> Would having something like Referenceable but which is not reference
> counted across the network, and which receives a notification when the
> server-side object dies, be useful [1]?
>
> I'm thinking of the case where I use pb to play chess over the network. If
> a piece is captured, the server's reference to that object will be deleted.
> There is no sense, in this case, for the object representing the piece to
> persist, and certainly not because the client's happen to have knowledge
> that the piece existed once upon a time.
>
> Daniel
>
> [1] I haven't delved into the Viewable code yet, so that might be what I'm
> describing.
>
>
>
> On Mon, Aug 18, 2014 at 4:30 PM, Dustin J. Mitchell <dustin at v.igoro.us>
> wrote:
>
>> Indeed, what you're expecting is very much against the design of PB.
>>
>> Dustin
>>
>>
>> On Mon, Aug 18, 2014 at 5:25 PM, Daniel Sank <sank.daniel at gmail.com>
>> wrote:
>>
>>> Dustin,
>>>
>>> > No, this is simply incorrect.  'del myThingy' simply removes
>>> > a reference to the object to which myThingy refers.
>>>
>>> Argh. I'm assuming, as in the example, that the only strong reference to
>>> myThingy is the one I own.
>>>
>>> > the Broker keeps a Python reference to the object internally,
>>> > preventing the reference count from reaching zero,
>>> > preventing the object from being deleted.
>>>
>>> I understand that. I'm trying to ask if that's how it _should_ work. If
>>> I have a resource and make a Referenceable to give you access to it, it
>>> doesn't really make sense to me that my resource should be kept alive just
>>> because you have that access. It seems more reasonable to me that your
>>> access object should reference my resource _weakly_ and that you should
>>> receive some kind of notification if and when the resource expires.
>>>
>>> It's just like the case of a GUI and a business logic object. The GUI
>>> probably gets a reference to the business logic object so that eg. button
>>> pushes can invoke methods on the object. However, that reference should
>>> probably be weak so that the business logic object can be garbage collected
>>> when it's finished with its business. There's no sense (to me) in keeping
>>> an object alive because a GUI, logger, or other observer is observing it.
>>> Am I just wrong?
>>>
>>> Daniel
>>>
>>>
>>> On Mon, Aug 18, 2014 at 2:18 PM, Dustin J. Mitchell <dustin at v.igoro.us>
>>> wrote:
>>>
>>>> On Mon, Aug 18, 2014 at 3:37 PM, Daniel Sank <sank.daniel at gmail.com>
>>>> wrote:
>>>> > and I send you the Referenceable. Now suppose I do
>>>> >
>>>> > del myThingy
>>>> >
>>>> > Now myThingy will be garbage collected.
>>>>
>>>> No, this is simply incorrect.  'del myThingy' simply removes a
>>>> reference to the object to which myThingy refers.
>>>>
>>>> If and only if that's the last reference (as determined by Python's
>>>> reference counting), it is deleted.  As glyph said, as long as there
>>>> is an outstanding remote reference, the Broker keeps a Python
>>>> reference to the object internally, preventing the reference count
>>>> from reaching zero, preventing the object from being deleted.
>>>>
>>>> Dustin
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>
>>>
>>>
>>> --
>>> Daniel Sank
>>> Department of Physics
>>> Broida Hall
>>> University of California
>>> Santa Barbara, CA 93117
>>> (805)893-3899
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Daniel Sank
> Department of Physics
> Broida Hall
> University of California
> Santa Barbara, CA 93117
> (805)893-3899
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/a8f1c5a7/attachment-0002.html>

From sank.daniel at gmail.com  Mon Aug 18 21:31:50 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 18 Aug 2014 20:31:50 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
Message-ID: <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>

Dustin,

> Adding what amounts to a use-after-free bug to the protocol seems like a
really bad idea to me.

Oh goody, a sarcastic comment which doesn't actually bother to explain the
bug :)

Since what I describe is basically WeakReferenceable, it's not obvious to
me that there's a bug. I tell you when the thing to which your
Remote(Weak)Reference points is destroyed, just like weak references invoke
finalization callbacks. If you try to invoke remote methods after than
happens I just return you an error. What's the problem? This is exactly how
weak references work.

> If your server-side app is sensitive to when objects are destroyed for
any reason aside
> from management of its memory consumption, I'd argue your app is broken.

That's a really good point. Only CPython destroys objects deterministically
when the ref count hits zero.

> Certainly it opens you to a denial of service from a malicious client,
which might hold references
> to objects you'd rather it didn't

So my instinct to keep strong references only where they're needed is just
bad? Should a GUI or a logger keep a strong reference to the things they
observe?

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140818/96ff6e9c/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Aug 19 01:53:02 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Aug 2014 00:53:02 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
Message-ID: <31338DD1-3E05-430B-AB26-6F743F830E2F@twistedmatrix.com>


On Aug 18, 2014, at 2:25 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> It's just like the case of a GUI and a business logic object. The GUI probably gets a reference to the business logic object so that eg. button pushes can invoke methods on the object. However, that reference should probably be weak so that the business logic object can be garbage collected when it's finished with its business. There's no sense (to me) in keeping an object alive because a GUI, logger, or other observer is observing it. Am I just wrong?

When it comes to GUI toolkits, there are two philosophies on this.

One, embodied in toolkits like OS X's Cocoa and (if you squint at it just right) Qt, is that this reference should always be weak (or, you know, __unsafe __unretained which is like "weak" with a bit of a speech impediment) because something else (a window management layer, for example, or a data-access layer updating some data) will probably be holding the reference.  This is popular in C-style toolkits with an object model and reference counting because there's often an implicit circular reference between a view and its controller, and cleaning that up in C or C++ can be messy.

Another, embodied in toolkits like GTK+ and the JavaScript DOM, is that this reference should always be strong, because the GUI can logically manipulate the model object it refers to, and so it should have a strong reference - otherwise GUI actions might spontaneously start causing crashes when something unrelated forgets about that object.

I am a big fan of the latter style.  Although there is often something to hold that strong reference, sometimes there is actually nothing else to hold it, and so you have to create bizarre lifecycle shenanigans to replicate the fairly straightforward behavior of "the user's eyeballs are looking at the screen, there's a window on the screen, the window refers to my model object, therefore the user's eyeballs have a strong reference to my model object".  Some things that present GUIs are observers, some things are manipulators; the former model works for observers, the latter model works well for both.

So I'm inclined to say you're wrong.  However, according to the efficient-market hypothesis, Cocoa must be better than any of those other things, so I may be in a minority there.

Nevertheless in PB the distinction is even more stark: if your example is that you have a model object with a GUI observer, it is the GUI that would expose the Referenceable, because the model would need to call methods on the view to update it.  So this isn't about whether your model stays memory-resident while the GUI is up, but rather, whether the GUI itself stays memory-resident while the model is alive!  Obviously you wouldn't want your GUI or your logger to disappear while the model is still active.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140819/e6a80995/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Aug 19 02:04:13 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Aug 2014 01:04:13 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
 <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
Message-ID: <6A9957DF-8797-494C-BBCB-F2D330F65BAF@twistedmatrix.com>


On Aug 18, 2014, at 8:31 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> Dustin,
> 
> > Adding what amounts to a use-after-free bug to the protocol seems like a really bad idea to me.
> 
> Oh goody, a sarcastic comment which doesn't actually bother to explain the bug :)

Oddly this is _exactly_ how a co-worker characterized the problem as well, with (as far as I can see) no communication of this idea ;).

<http://cwe.mitre.org/data/definitions/416.html> describes the disastrous consequences of this in C; the Python equivalent is mild, but it's still annoying to get 'None has no attribute "frob"' when you do self.frobber.frob().

> Since what I describe is basically WeakReferenceable, it's not obvious to me that there's a bug. I tell you when the thing to which your Remote(Weak)Reference points is destroyed, just like weak references invoke finalization callbacks. If you try to invoke remote methods after than happens I just return you an error. What's the problem? This is exactly how weak references work.

The thing about weak references is that they are almost always to objects that are shared, that have a well-defined lifecycle.  Your PB objects generally should _not_ be shared; a well-structured PB application will almost always create thin wrapper objects, factoring the remote-access-control logic out of the core model abstractions.  Exposing weak references across a network is also very, very tricky: distributed reference counting is hard enough without trying to introduce real distributed GC that involves reference tracing.

> > If your server-side app is sensitive to when objects are destroyed for any reason aside
> > from management of its memory consumption, I'd argue your app is broken.
> 
> That's a really good point. Only CPython destroys objects deterministically when the ref count hits zero.

Yes. And even the CPython developers have said it's effectively a bug to depend on this behavior, because you can't really know when it's going to happen.  A debugger might be holding on to your stack frames for a little while.  The profiler might be keeping your locals around for a moment longer than you expect.  This is why we have idioms like 'with f as open(...)' now.

> > Certainly it opens you to a denial of service from a malicious client, which might hold references
> > to objects you'd rather it didn't
> 
> So my instinct to keep strong references only where they're needed is just bad?

Here are a couple of ways to solve this problem without getting weak references involved:

Set limits on things.  PB isn't great about this, but this is an area where it could get better, and where all the fixes are really straightforward (find the place where PB does a thing, set a limit, raise an exception if the thing is over that limit). In this case, don't allow clients to hold unlimited numbers of simultaneous references.  Start throwing errors when too many live references exist on one connection.  A reasonable application should not need that many at once - if you set a limit at around 1024 and allow servers to tune it for particular workloads, it should be fine.  (Set it per-type maybe?)
Don't give out references to objects you can't revoke logically, at an application level.  If you have a chess piece that has been taken, that is not a NULL pointer or None.  There is a small, fixed number of chess pieces per game, so you don't have to worry about denials of service.  Therefore your ChessPiece class should have a 'taken' state associated with it; in fact, you could remember which move of the game the piece was taken on, and produce an error message which specifically reminds the player when it was taken.  Much like 'with f as open(...)' explicitly invokes 'f.close()' at the end of the block but does not force 'f' to get garbage collected, you should still be able to have a PB protocol-level reference to an application-level revoked object.  Debugging distributed systems is hard enough without translating every revoked-permission error into some common "the distributed GC happened, I don't know what happened to your object, life is hard".

Is this making sense?

> Should a GUI or a logger keep a strong reference to the things they observe?


As my other message indicated - yes :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140819/6a224022/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Aug 19 06:05:10 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 19 Aug 2014 12:05:10 -0000
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
 <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
Message-ID: <20140819120510.20413.384298951.divmod.xquotient.1691@top>

On 03:31 am, sank.daniel at gmail.com wrote:
>Dustin,
>>Adding what amounts to a use-after-free bug to the protocol seems like 
>>a
>really bad idea to me.
>
>Oh goody, a sarcastic comment which doesn't actually bother to explain 
>the
>bug :)

Sarcastic?  What?  Dustin *was* explaining the problem.  Without 
sarcasm, so far as I can tell.

Jean-Paul



From ccx at webprojekty.cz  Tue Aug 19 16:58:19 2014
From: ccx at webprojekty.cz (Jan Pobrislo)
Date: Wed, 20 Aug 2014 00:58:19 +0200
Subject: [Twisted-Python] Experimenting with tubes
In-Reply-To: <E10C96F8-4EEA-4752-A4AA-89AF27FE7DE4@twistedmatrix.com>
References: <84AC8E3500000000.9827000000000000.reformail@dorje>
 <E10C96F8-4EEA-4752-A4AA-89AF27FE7DE4@twistedmatrix.com>
Message-ID: <20140820005819.0db347af@tm>

On Thu, 14 Aug 2014 14:29:56 -0700
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Aug 11, 2014, at 6:51 AM, ccx at webprojekty.cz wrote:
> 
> > Hello, I've been playing with the new tubes that are being
> > implemented:
> > http://comments.gmane.org/gmane.comp.python.twisted/27248
> > https://twistedmatrix.com/trac/ticket/1956
> 
> Thanks so much for taking the time to play with it, and taking some
> time to write feedback.
> 
> > Here are few things that I did with it. I won't publish the full
> > code now, as in it's current shape it could implode eyeballs of
> > twisted devs and possibly make them summon some of the elder gods,
> > but I'll see if I can produce something less vile as I merge the
> > ongoing changes to the tubes branch.
> 
> I'd be interested to see the code nevertheless.  If you had to do
> eyeball-imploding antics to get Tubes to work well for your use-case,
> being able to have a look at that would help us evaluate whether
> those antics were required by the code, encouraged by misfeatures of
> the API design, or just issues with lack of documentation.

It's mostly me not really documenting anything, not writing tests and
littering it with debug statements (which will go away as soon as I
find time to improve my debugging module so it can monkeypatch them).

http://wpr.cz/ccx/bzr/tubes7/ for my changes only
http://wpr.cz/ccx/bzr/tubes7-merge-2/ for changes on top of the bzr
mirror of the svn branch

example usage:
http://wpr.cz/ccx/paste/2014-08-19/2/
http://wpr.cz/ccx/paste/2014-08-19/3/
http://wpr.cz/ccx/paste/2014-08-19/4/
http://wpr.cz/ccx/paste/2014-08-19/5/


> > So far I wrote relatively simple app that read logfiles, parse them
> > and insert what they got out of them into a database.
> 
> If it's actually reading a file, another nice to-do would be an
> IFount provider that provides the contents of a file with appropriate
> flow control, and maybe a thread or process in the background to do
> the file I/O.  Another thing you could contribute to the branch,
> possibly?  :-)  How did you implement this?

At the moment I don't mind the blockingness of the calls. I did write a
ThreadReader and ThreadWriter though for my earlier tubes-alike with
Queue-based loop.

What is more interesting challenge (and we discussed this earlier on
irc) would be generic async file api. I suggested implementing 9p2000
back then and I still think it is a good starting point... but nothing
I have spare time for at the moment.


> I'm not sure I totally understand the case that you're describing
> right now.  Can you perhaps contribute a unit test which demonstrates
> why this line of code is necessary?

I'd love to, alas I'll be bit preocuppied with some more urgent matters
for following week or two. The short version is "flowStopped just
didn't get passed through the series otherwise".


> Are you running into <https://twistedmatrix.com/trac/ticket/7546>?

Most probably, as far as I can tell from the vague description.


> That ... definitely sounds kind of gross.  As does actually setting
> the nextFount attribute directly on the fan.Out.

Indeed. The point of the experiment was not produce nice code but to
see if there are any major pitfalls using the tubes API.


> twisted.web.client.Agent has a solution to this where there's a
> multi-failure object that aggregates multiple errors into one thing.
> I think we have to do something similar.  Unfortunately this is a
> very confusing interface in addition to being poorly documented and
> relies on private classes that expose ostensibly public attributes.
> We need to very carefully document this within fan.In.

Some nice abstraction of multiple failures would be indeed handy. I'm
pretty sure DeferredList could use one too.

 
> > As for data representation that I choose to pass between each tube
> > I've started with simple namedtuples and following that I've built
> > a simple "datatype" class somewhat reminiscent of
> > https://github.com/hynek/characteristic
> > which I learned of few moments after I finished polishing my own
> > implementation. What I have there is added layer above namedtuples
> > that autogenerate zope Interfaces (so I can have adaptation), do
> > field type and value validation/adaptation and possibly (as a
> > future extension) provide easy way to make them into AMP commands
> > so the series can be split into communicating processes as needed.
> > (What would be interesting imo is something like ampoule for tubes,
> > or perhaps a ThreadTube and SubprocessTube for performing blocking
> > operations)
> 
> I think it's likely we'll acquire a dependency on Characteristic
> sometime soon, I have promised to look at the issues on
> <https://github.com/hynek/characteristic/pull/13> and try to address
> them already :).

What makes me ponder is how to work with multiple types of messages
being passed through. Traditionally in twisted one would use different
methods for handling each one, eg. IRCClient has userJoined, userLeft,
and so on. If we keep tubes as they are with a single received() method
then somehow we need to be able to tell those messages apart,
deconstruct them and mainly document them and test for proper handling
of all cases.

Instinctively I started looking for algebraic data types, but making
those work on python is high-level metaprogramming magic and that
either implies python3.3+ or AST rewriting:
https://github.com/lihaoyi/macropy

Perhaps what would be bearable is AST-based checker (integrated into
testcases perhaps) that would do exhaustiveness and field name checking
for such complex data - so all users of a tube/fount producing some
type woud be flagged whenever the type signature of it changes.

Other possible resolution is to mantain the multi-method approach and
make tubes into pausing mechanism only. I think it could work somewhat
like:

@pauseable
def lineReceived(line):
    ...
    # get reference object of specified interface
    # and wait until it is unpaused
    (yield IIRCClient).userJoined(...)

The first obvious downside of this approach that I see is that we now
need proxy objects for generic fan-in/out.

> > Also maybe of note is the implementation of Pipes in Async library
> > for OCaml which I've been examining lately. What they seem to do
> > there is that they push values downstream and the function called
> > in each processing step may return deferred signifying a pause is
> > requested until this deferred is fired. For those interested in the
> > details you can refer to:
> > https://ocaml.janestreet.com/ocaml-core/111.25.00/doc/async/#Std.Pipe
> > and the relevant section of Real World OCaml book (available
> > online).
> 
> Creating a token for every single call to .receive() makes life
> hard.  Deferred could go to some trouble to be a cheaper token to
> pass around (especially on PyPy) but doing it this way is also
> error-prone as a mistaken error-handler in the Deferred chain means
> that the default behavior of buggy code un-hooks your loop and leaves
> idle data sources that will never be cleaned up.

How does current approach prevent that? From what I see unhandled
exception in non-well written drain can do the very much same. Tubes
are handled specially so it can be prevented there.


> I worked quite a bit with the 'Streams' interface in web2 on Calendar
> Server, and my conclusion there is that while this is better than
> nothing (it was very nice to be able to just return a Stream rather
> than cobble together something that returned NOT_DONE_YET every time)
> it was (A) slow and (B) error prone.  Tubes are designed specifically
> to avoid this error.  Although you can return Deferreds internally,
> no consumer ever needs to write the callback-loop that calls .read()
> again from a callback on .read().

I agree that something like tubes is needed, but it can be a
upper-level layer over something simple as flow-signalling callbacks.

Anyway, linked mostly for inspiration.

What I'd really like to see though is some rationale for current design
choices of tubes - eg. list of reasons the previous attempts failed and
how does each next address the issues. :-)

- ccxcz



From glyph at twistedmatrix.com  Tue Aug 19 23:21:13 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Aug 2014 22:21:13 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <20140819120510.20413.384298951.divmod.xquotient.1691@top>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
 <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
 <20140819120510.20413.384298951.divmod.xquotient.1691@top>
Message-ID: <ABDEC16E-160C-47B2-B9DC-B1C89D402ADA@twistedmatrix.com>


On Aug 19, 2014, at 5:05 AM, exarkun at twistedmatrix.com wrote:

> On 03:31 am, sank.daniel at gmail.com wrote:
>> Dustin,
>>> Adding what amounts to a use-after-free bug to the protocol seems like a
>> really bad idea to me.
>> 
>> Oh goody, a sarcastic comment which doesn't actually bother to explain the
>> bug :)
> 
> Sarcastic?  What?  Dustin *was* explaining the problem.  Without sarcasm, so far as I can tell.

My response may have come across as a little ambiguous, so let me also say - I think use-after-free is a pretty accurate description of the issue as well, I don't believe this was intended sarcastically.

-glyph




From dustin at v.igoro.us  Wed Aug 20 06:36:32 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Wed, 20 Aug 2014 08:36:32 -0400
Subject: [Twisted-Python] Is there pb documentation somewhere?
In-Reply-To: <ABDEC16E-160C-47B2-B9DC-B1C89D402ADA@twistedmatrix.com>
References: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>
 <CF3DF5DC-A607-4839-B6F4-8186CEEFC286@twistedmatrix.com>
 <CAKN9TDK+tw5o5Gg+wBwKNC1xqYsnF1YMWvoQwTSp6Z1rvk_J-w@mail.gmail.com>
 <CAKN9TDJ6T=O5P3RyjxvH44EXYf0JZTz_8HK2efYiWVv0NBPrUg@mail.gmail.com>
 <975E500C-003B-4FD9-A53B-6AD31242A05A@twistedmatrix.com>
 <CAKN9TDKD3f8jizDPnwR4kvYU9a+LiiT1K2QJwarOgj3qco226A@mail.gmail.com>
 <DB23CAE2-6C53-45B9-9A43-CC77679CB887@twistedmatrix.com>
 <20140808182615.20413.83364169.divmod.xquotient.935@top>
 <525C3B1B-8A12-4E24-BC1D-92A5F988DCBA@twistedmatrix.com>
 <CAKN9TD+Nk03N+tMk=UYcFFXaUO0JnVqAvqciWzaCx3uEHzjtsQ@mail.gmail.com>
 <88C13737-682B-4850-8018-E81A3BB4B6EF@twistedmatrix.com>
 <CAKN9TD+Lw0qsNNzLaP8823jdYBqH_m2CtGH-pa_p4ic08KCVtw@mail.gmail.com>
 <034C21DA-672B-4641-AC33-38C87610F91B@twistedmatrix.com>
 <CAKN9TDLKktb1Ep0Hn40B2Gx8NfLmz09La+fhVb8LsCqGwFchtQ@mail.gmail.com>
 <C3943E70-B8CF-4F66-A655-CEB23C54F703@twistedmatrix.com>
 <CAKN9TDKqT6-zL=XLinLHkc6_mvMsc8vuAu6_MHs5UEqSEZV59A@mail.gmail.com>
 <CAJtE5vQzvk2K37diTUWM5=2E-pJ29fQtKezp++2tDLcjKOTKwQ@mail.gmail.com>
 <CAKN9TD+bwj3zhG1T3rQqccNMMuMF0-WcdFSt6DR=NqeL_shHXQ@mail.gmail.com>
 <CAJtE5vSb-HFnPoXhYgNPxtJ1cYW3qutG6DeM=QBJ3TcDk40biQ@mail.gmail.com>
 <CAKN9TDLc+hC8ZRQsDRLd9ouRYFQfuLHb+znabYTXnUcaFmYXfA@mail.gmail.com>
 <CAJtE5vT3SCHOwa8H-JeMJtXON32fieW=cOXeOr1ggZEpb5m_Fw@mail.gmail.com>
 <CAKN9TDKL9r-c8O8BPwXngQCfb9aSH_XUZ+FPUNcCWvbF1fPnEg@mail.gmail.com>
 <20140819120510.20413.384298951.divmod.xquotient.1691@top>
 <ABDEC16E-160C-47B2-B9DC-B1C89D402ADA@twistedmatrix.com>
Message-ID: <CAJtE5vSwfqnb1EB2YvLU90AvY0QhNC0ieiA9AKGnvH3=k5UYdA@mail.gmail.com>

And since it's come up, no, I didn't mean that either.  It was a
(somewhat colorful) description of my perspective on the question.

Dustin

On Wed, Aug 20, 2014 at 1:21 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Aug 19, 2014, at 5:05 AM, exarkun at twistedmatrix.com wrote:
>
>> On 03:31 am, sank.daniel at gmail.com wrote:
>>> Dustin,
>>>> Adding what amounts to a use-after-free bug to the protocol seems like a
>>> really bad idea to me.
>>>
>>> Oh goody, a sarcastic comment which doesn't actually bother to explain the
>>> bug :)
>>
>> Sarcastic?  What?  Dustin *was* explaining the problem.  Without sarcasm, so far as I can tell.
>
> My response may have come across as a little ambiguous, so let me also say - I think use-after-free is a pretty accurate description of the issue as well, I don't believe this was intended sarcastically.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Thu Aug 21 01:36:52 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 21 Aug 2014 00:36:52 -0700
Subject: [Twisted-Python] Experimenting with tubes
In-Reply-To: <20140820005819.0db347af@tm>
References: <84AC8E3500000000.9827000000000000.reformail@dorje>
 <E10C96F8-4EEA-4752-A4AA-89AF27FE7DE4@twistedmatrix.com>
 <20140820005819.0db347af@tm>
Message-ID: <BCF85B9A-9BA6-4444-95C6-B79AB1493D9C@twistedmatrix.com>

On Aug 19, 2014, at 3:58 PM, Jan Pobrislo <ccx at webprojekty.cz> wrote:

> On Thu, 14 Aug 2014 14:29:56 -0700
> Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> On Aug 11, 2014, at 6:51 AM, ccx at webprojekty.cz wrote:
>> 
>>> Hello, I've been playing with the new tubes that are being
>>> implemented:
>>> http://comments.gmane.org/gmane.comp.python.twisted/27248
>>> https://twistedmatrix.com/trac/ticket/1956
>> 
>> Thanks so much for taking the time to play with it, and taking some
>> time to write feedback.
>> 
>>> Here are few things that I did with it. I won't publish the full
>>> code now, as in it's current shape it could implode eyeballs of
>>> twisted devs and possibly make them summon some of the elder gods,
>>> but I'll see if I can produce something less vile as I merge the
>>> ongoing changes to the tubes branch.
>> 
>> I'd be interested to see the code nevertheless.  If you had to do
>> eyeball-imploding antics to get Tubes to work well for your use-case,
>> being able to have a look at that would help us evaluate whether
>> those antics were required by the code, encouraged by misfeatures of
>> the API design, or just issues with lack of documentation.
> 
> It's mostly me not really documenting anything, not writing tests and
> littering it with debug statements (which will go away as soon as I
> find time to improve my debugging module so it can monkeypatch them).

You should be able to debug tubes mostly with composition to analyze flows.  If you can't do what you want with that, we should talk :-).

> http://wpr.cz/ccx/bzr/tubes7/ for my changes only
> http://wpr.cz/ccx/bzr/tubes7-merge-2/ for changes on top of the bzr
> mirror of the svn branch
> 
> example usage:
> http://wpr.cz/ccx/paste/2014-08-19/2/
> http://wpr.cz/ccx/paste/2014-08-19/3/
> http://wpr.cz/ccx/paste/2014-08-19/4/
> http://wpr.cz/ccx/paste/2014-08-19/5/

I think I don't understand the purpose of all of these.  Particularly, what is the purpose of TypedTube, since Tube already supports specification of input and output types?

>>> So far I wrote relatively simple app that read logfiles, parse them
>>> and insert what they got out of them into a database.
>> 
>> If it's actually reading a file, another nice to-do would be an
>> IFount provider that provides the contents of a file with appropriate
>> flow control, and maybe a thread or process in the background to do
>> the file I/O.  Another thing you could contribute to the branch,
>> possibly?  :-)  How did you implement this?
> 
> At the moment I don't mind the blockingness of the calls. I did write a
> ThreadReader and ThreadWriter though for my earlier tubes-alike with
> Queue-based loop.
> 
> What is more interesting challenge (and we discussed this earlier on
> irc) would be generic async file api. I suggested implementing 9p2000
> back then and I still think it is a good starting point... but nothing
> I have spare time for at the moment.

The point is not to use a specific implementation.  Rather, the point is to get a single well-documented entry-point within Twisted for asynchronously reading a file so that people can start using it.  Frankly this entrypoint could be a total lie and actually do the I/O synchronously on the main thread, as long as it could be transparently upgraded to being the truth without exposing the change to applications in the future :-).  If we make everyone implement their own read-a-file fount, then there's no hope that future Twisted maintenance could improve their performance.

>> I'm not sure I totally understand the case that you're describing
>> right now.  Can you perhaps contribute a unit test which demonstrates
>> why this line of code is necessary?
> 
> I'd love to, alas I'll be bit preocuppied with some more urgent matters
> for following week or two. The short version is "flowStopped just
> didn't get passed through the series otherwise".

I hope I'll have some time later in the week to investigate this. 

>> Are you running into <https://twistedmatrix.com/trac/ticket/7546>?
> 
> Most probably, as far as I can tell from the vague description.

Well, you'll be glad to know that's also on my to-do list :-).

>> That ... definitely sounds kind of gross.  As does actually setting
>> the nextFount attribute directly on the fan.Out.
> 
> Indeed. The point of the experiment was not produce nice code but to
> see if there are any major pitfalls using the tubes API.

As long as it's clear that this is not really necessary :).

>> twisted.web.client.Agent has a solution to this where there's a
>> multi-failure object that aggregates multiple errors into one thing.
>> I think we have to do something similar.  Unfortunately this is a
>> very confusing interface in addition to being poorly documented and
>> relies on private classes that expose ostensibly public attributes.
>> We need to very carefully document this within fan.In.
> 
> Some nice abstraction of multiple failures would be indeed handy. I'm
> pretty sure DeferredList could use one too.

Yeah, uh, maybe.  Also DeferredList should go away and be replaced with something that doesn't inherit from Deferred, and instead is just a function that returns a new regular-old-Deferred, since the subclassing is entirely unnecessary.  But I digress.

>>> As for data representation that I choose to pass between each tube
>>> I've started with simple namedtuples and following that I've built
>>> a simple "datatype" class somewhat reminiscent of
>>> https://github.com/hynek/characteristic
>>> which I learned of few moments after I finished polishing my own
>>> implementation. What I have there is added layer above namedtuples
>>> that autogenerate zope Interfaces (so I can have adaptation), do
>>> field type and value validation/adaptation and possibly (as a
>>> future extension) provide easy way to make them into AMP commands
>>> so the series can be split into communicating processes as needed.
>>> (What would be interesting imo is something like ampoule for tubes,
>>> or perhaps a ThreadTube and SubprocessTube for performing blocking
>>> operations)
>> 
>> I think it's likely we'll acquire a dependency on Characteristic
>> sometime soon, I have promised to look at the issues on
>> <https://github.com/hynek/characteristic/pull/13> and try to address
>> them already :).
> 
> What makes me ponder is how to work with multiple types of messages
> being passed through. Traditionally in twisted one would use different
> methods for handling each one, eg. IRCClient has userJoined, userLeft,
> and so on. If we keep tubes as they are with a single received() method
> then somehow we need to be able to tell those messages apart,
> deconstruct them and mainly document them and test for proper handling
> of all cases.

Dispatching from a single "received" message to multiple distinct methods based on type is a pretty well solved problem in Python :-).  There is a whole class of design patterns for this which we could apply to Tubes.  I don't think we need this in the first release though; it's easy to implement yourself, there are a few different styles which might be a good idea that we'll need to try out, and many of the examples in the documentation that we've written so far don't require them.

> Instinctively I started looking for algebraic data types, but making
> those work on python is high-level metaprogramming magic and that
> either implies python3.3+ or AST rewriting:
> https://github.com/lihaoyi/macropy

Yeesh.

> Perhaps what would be bearable is AST-based checker (integrated into
> testcases perhaps) that would do exhaustiveness and field name checking
> for such complex data - so all users of a tube/fount producing some
> type woud be flagged whenever the type signature of it changes.

Is this really a substantial enough advantage over, say, a dictionary with types as keys and callables as values, that it would be worth the (frankly insane-sounding) level of complexity involved in its implementation?

> Other possible resolution is to mantain the multi-method approach and
> make tubes into pausing mechanism only. I think it could work somewhat
> like:
> 
> @pauseable
> def lineReceived(line):
>    ...
>    # get reference object of specified interface
>    # and wait until it is unpaused
>    (yield IIRCClient).userJoined(...)
> 
> The first obvious downside of this approach that I see is that we now
> need proxy objects for generic fan-in/out.

Yeah, I, uh, don't quite understand what you're getting at here.

>>> Also maybe of note is the implementation of Pipes in Async library
>>> for OCaml which I've been examining lately. What they seem to do
>>> there is that they push values downstream and the function called
>>> in each processing step may return deferred signifying a pause is
>>> requested until this deferred is fired. For those interested in the
>>> details you can refer to:
>>> https://ocaml.janestreet.com/ocaml-core/111.25.00/doc/async/#Std.Pipe
>>> and the relevant section of Real World OCaml book (available
>>> online).
>> 
>> Creating a token for every single call to .receive() makes life
>> hard.  Deferred could go to some trouble to be a cheaper token to
>> pass around (especially on PyPy) but doing it this way is also
>> error-prone as a mistaken error-handler in the Deferred chain means
>> that the default behavior of buggy code un-hooks your loop and leaves
>> idle data sources that will never be cleaned up.
> 
> How does current approach prevent that? From what I see unhandled
> exception in non-well written drain can do the very much same. Tubes
> are handled specially so it can be prevented there.

That's exactly the point - applications should very rarely need to create new drains or founts, they should be working mostly in terms of tubes, fan.In, fan.Out, protocol founts and drains, and process founts and drains.

But in the case of a buggy drain, protocol founts and tubes can be written to handle the error _and cleanly shut down the whole flow_.

In the Streams (i.e. every-read-returns-a-Deferred) approach, you don't know who your caller is except that they might have added a callback to you.  There's no way to propagate other notifications or inspect the chain for debugging in case of errors.

>> I worked quite a bit with the 'Streams' interface in web2 on Calendar
>> Server, and my conclusion there is that while this is better than
>> nothing (it was very nice to be able to just return a Stream rather
>> than cobble together something that returned NOT_DONE_YET every time)
>> it was (A) slow and (B) error prone.  Tubes are designed specifically
>> to avoid this error.  Although you can return Deferreds internally,
>> no consumer ever needs to write the callback-loop that calls .read()
>> again from a callback on .read().
> 
> I agree that something like tubes is needed, but it can be a
> upper-level layer over something simple as flow-signalling callbacks.
> 
> Anyway, linked mostly for inspiration.
> 
> What I'd really like to see though is some rationale for current design
> choices of tubes - eg. list of reasons the previous attempts failed and
> how does each next address the issues. :-)

Hmm.  It's tough to document these, because there was a lot of experimenting in tubes, a lot of backtracking, some influence from other projects and a lot of parallel invention.  Trying to outline all the things we tried and why they did or didn't work would be extremely time-consuming for us and probably pretty confusing and unhelpful for the reader.

What would you be looking to get from such a write-up?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140821/78136e2b/attachment-0002.html>

From lyx-devel at oak-tree.us  Thu Aug 21 20:24:20 2014
From: lyx-devel at oak-tree.us (Rob Oakes)
Date: Fri, 22 Aug 2014 02:18:20 -0006
Subject: [Twisted-Python] Twisted WebSockets Branch
In-Reply-To: <mailman.732.1408667823.2013.twisted-python@twistedmatrix.com>
References: <mailman.732.1408667823.2013.twisted-python@twistedmatrix.com>
Message-ID: <1408674260.5206.0@mail.oak-tree.us>

Dear Twisted Developers,

As a quick introduction, my name is Rob Oakes. I'm the lead developer 
for a company called Guru Labs. I'm writing for two reasons:

# Reason 1: Thank You

First and foremost, I'm writing to express thanks for creating an 
excellent framework. We use Twisted extensively in our infrastructure, 
and it is typically our go-to tool for any sort of custom server.

The other two reasons have to do with some questions about the 
development of Twisted. Before I dive into those, however, let me 
provide some background.

For the better part of a year, we've been using some code out of the 
websockets (twisted.web.websockets.WebsocketsResource) branch to wrap a 
trio of custom protocols we use in one of our web based products. I 
know that the code is still pre-release, but we've generally found it 
to be stable and work very well.

# Reason Two: Websockets Development

This brings me to the second reason I'm writing. Over the past year, it 
seems as though the development on the Twisted websockets branch has 
stalled. We would like to unstall it. For this reason, Guru Labs would 
be interested in:

1.) Contracting with one of the core Twisted devs of Twisted who might 
be interested in finishing the implementation of the websockets 
wrappers (resolving the issues described in ticket 4173) or another 
party. We are happy to pay hourly rates, set a bounty, make a donation 
to the Twisted project ... whatever.

A stable implementation of websockets available in Twisted Web is a 
priority to us, and if it's a matter of money, we are happy to throw 
money where it might be needed. (If this of interest, please contact me 
off-list at roakes at gurulabs.com.)

or

2.) Assigning a Guru Labs developer (probably me) who might complete 
the work.

I've been studying the issues which are still open (specifically 4173), 
and the various branches associated with websocket development 
(websocket-4173-3 and websocket-4173-4) and it seems that most of the 
major concerns are related to the manner in which websocket connections 
are closed.

Assuming that someone else doesn't step forward ... I've already merged 
the most recent version of trunk with these branches, but I've found 
myself with several questions on how to best continue with the work.

a. Which of the two websocket branches should be used as the basis for 
new work?

On GitHub, websocket-4173-4 is marked as closed with a note telling the 
contributor to see the contribution guidelines. There are also several 
additions to the code which do not follow Twisted conventions (as I 
understand them). The last set of commits also seem to come from 
approximately the same time.

websocket-4173-4 includes code which attempts to resolve issues noted 
in 4173 that is not present in 4173-3, but there aren't really any 
comments to determine if this should be incorporated or not. At this 
point, I'm really not familiar enough with the code to draw my own 
conclusion.

b. In general, the protocol wrapper seems to work quite well. However 
when merged with the most recent version of trunk (post twisted 14), 
I've been seeing frequent  unhandled deferred errors. The most common 
is:

"twisted.internet.error.ConnectionLost: Connection to the other side 
was lost in a non-clean fashion: Connection lost"

It happens when:

* Connections are closed from the server, using transport.loseConnection
* Connections do not transmit a "close" frame prior to disconnecting
* To reiterate, this issue only started appearing after merging the 
websocket code with Twisted 14. The previous version of Twisted we were 
using (Twisted 12.3 worked flawlessly.)

No error is raised if the client correctly closes the connection or 
when using non-browser based clients (like the Python ws4py websocket 
client).

We mostly see the exception when the objects are garbage collected 
(based upon the deferred documentation at 
http://twistedmatrix.com/documents/14.0.0/core/howto/defer.html). Put 
another way, we see a whole string of errors upon stopping the reactor. 
Despite the exception, we don't see any errors in the browser client.

Also somewhat frustratingly, the traceback isn't terribly helpful. This 
is a fairly routine example:

```error
Unhandled error in Deferred:

Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionLost: Connection to the other 
side was lost in a non-clean fashion: Connection lost.
```

Technically, the error is probably appropriate, as they appear when the 
connection is lost in a non-clean fashion. I am a little concerned, 
though, in that I haven't found a good way to catch or suppress the 
error. Moreover, it doesn't seem like the defferreds are getting 
garbage collected which seems like a memory leak waiting to happen.

Can someone clarify if this is:

* intended behavior, and if so, what might be a strategy I can use for 
managing the error in my wrapped protocols
* which part of the websocket code I should be looking at in order to 
try and fix the issue

Thoughts would be greatly appreciated.

Cheers,

Rob Oakes
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140822/b4dede97/attachment-0002.html>

From twisted-python at 2xlp.com  Fri Aug 22 17:49:32 2014
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 22 Aug 2014 19:49:32 -0400
Subject: [Twisted-Python] running twisted with supervisord -- logging
	question
Message-ID: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>

hoping someone can answer this question-

i can't seem to get my logging right while using supervisord

i'm not using twisted logging, just the regular python logging infrastructure. 

the two end-results I've had:

	- everything double-logs into twistd.log & /var/log/supervisor.log
	- anything this is `print`'ed appears in my twistd.log , but none of the `log.debug()` lines appear

the end result I want, is for debug info from the twisted process to be recorded in a single file


From radix at twistedmatrix.com  Fri Aug 22 21:50:13 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 22 Aug 2014 22:50:13 -0500
Subject: [Twisted-Python] running twisted with supervisord -- logging
 question
In-Reply-To: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
Message-ID: <etPan.53f80f75.2443a858.35a6@densetsu>


On August 22, 2014 at 6:52:02 PM, Jonathan Vanasco (twisted-python at 2xlp.com) wrote:

hoping someone can answer this question- 

i can't seem to get my logging right while using supervisord 

i'm not using twisted logging, just the regular python logging infrastructure. 

the two end-results I've had: 

- everything double-logs into twistd.log & /var/log/supervisor.log 
- anything this is `print`'ed appears in my twistd.log , but none of the `log.debug()` lines appear 

the end result I want, is for debug info from the twisted process to be recorded in a single file 


I prefer to use



	twistd -n -l - ...



passing ‘-' to -l means “log to stdout”.



Without your code, we can’t know how you’re configuring python logging, and what may be wrong with it. This should be the baseline for using twistd with supervisor if you want to let supervisor handle logging. FYI, you can configure supervisor to put the output in a different file than /var/log/supervisor.log, too.



-- 
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140822/6a62b2c4/attachment-0002.html>

From twisted-python at 2xlp.com  Sat Aug 23 17:46:25 2014
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Sat, 23 Aug 2014 19:46:25 -0400
Subject: [Twisted-Python] running twisted with supervisord -- logging
	question
In-Reply-To: <etPan.53f80f75.2443a858.35a6@densetsu>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
Message-ID: <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>

Christopher-

Thanks for the insight.  I was stupid and didn't include my code.

I don't actually want supervisor to handle the logging.  I wanted to have this app's logs in /var/log/myapp-twisted/twisted.log

I just can't figure out how to make this happen.  i've been playing with different permutations of twistd commands, redirect_stderr and stdout_logfile, and haven't found the right balance

the actual logging calls are just to python's logger ( `import logging` ; logging.getLogger(), log.debug(), etc)

---------
[program:myapp-twisted]
priority=100
process_name=%(program_name)s
autostart=true
autorestart=true
stopsignal=QUIT
redirect_stderr = false
stdout_logfile = /var/log/myapp-twisted/twisted.log
directory = /var/www/sites/myapp-svn_tag-current_production/daemon/twisted
environment = PATH="/var/www/sites/myapp-virtualenv/bin:$PATH"
command = /var/www/sites/myapp-virtualenv/bin/twistd -y controller-production.tac --pidfile /tmp/myapp-twisted.pid
----------





On Aug 22, 2014, at 11:50 PM, Christopher Armstrong wrote:

> 
> On August 22, 2014 at 6:52:02 PM, Jonathan Vanasco (twisted-python at 2xlp.com) wrote:
> 
>> hoping someone can answer this question- 
>> 
>> i can't seem to get my logging right while using supervisord 
>> 
>> i'm not using twisted logging, just the regular python logging infrastructure. 
>> 
>> the two end-results I've had: 
>> 
>> - everything double-logs into twistd.log & /var/log/supervisor.log 
>> - anything this is `print`'ed appears in my twistd.log , but none of the `log.debug()` lines appear 
>> 
>> the end result I want, is for debug info from the twisted process to be recorded in a single file 
> 
> 
> I prefer to use
> 
> 
> 
> 	twistd -n -l - ...
> 
> 
> 
> passing ‘-' to -l means “log to stdout”.
> 
> 
> 
> Without your code, we can’t know how you’re configuring python logging, and what may be wrong with it. This should be the baseline for using twistd with supervisor if you want to let supervisor handle logging. FYI, you can configure supervisor to put the output in a different file than /var/log/supervisor.log, too.
> 
> 
> 
> -- 
> Christopher Armstrong
> http://twitter.com/radix
> http://wordeology.com/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

// Jonathan Vanasco

c. 646.729.6436  |  415.501.9815
e. jonathan at 2xlp.com
w. http://findmeon.com/user/jvanasco 
linkedin. http://linkedin.com/in/jonathanvanasco
blog. http://destructuring.net

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140823/7a9549a7/attachment-0002.html>

From werner at thieprojects.ch  Sat Aug 23 18:58:32 2014
From: werner at thieprojects.ch (Werner Thie)
Date: Sat, 23 Aug 2014 14:58:32 -1000
Subject: [Twisted-Python] running twisted with supervisord -- logging
 question
In-Reply-To: <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
 <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
Message-ID: <53F938B8.9080506@thieprojects.ch>

Hi

that's what I use in my .tac files

application = service.Application(mainPkgName)

#use this code below to configure logging in all aspects; keep in mind 
#that for the log rotating code the
#access rights must be set such that the process has write access  to 
#the log directory. A trick to adapt to
#get a logfile with the demoted process's UID/GID is to have an already 
#existing file with all the properties
#set. LogFile will from then on create rotated files with the same 
#properties.

application.setComponent(ILogObserver, 
FileLogObserver(LogFile('the.log', '/var/log/my-app', 
rotateLength=100000)).emit)

Werner

On 8/23/14 1:46 PM, Jonathan Vanasco wrote:
> Christopher-
>
> Thanks for the insight.  I was stupid and didn't include my code.
>
> I don't actually want supervisor to handle the logging.  I wanted to
> have this app's logs in /var/log/myapp-twisted/twisted.log
>
> I just can't figure out how to make this happen.  i've been playing with
> different permutations of twistd commands, redirect_stderr and
> stdout_logfile, and haven't found the right balance
>
> the actual logging calls are just to python's logger ( `import logging`
> ; logging.getLogger(), log.debug(), etc)
>
> ---------
> [program:myapp-twisted]
> priority=100
> process_name=%(program_name)s
> autostart=true
> autorestart=true
> stopsignal=QUIT
> redirect_stderr = false
> stdout_logfile = /var/log/myapp-twisted/twisted.log
> directory = /var/www/sites/myapp-svn_tag-current_production/daemon/twisted
> environment = PATH="/var/www/sites/myapp-virtualenv/bin:$PATH"
> command = /var/www/sites/myapp-virtualenv/bin/twistd -y
> controller-production.tac --pidfile /tmp/myapp-twisted.pid
> ----------
>
>
>
>
>
> On Aug 22, 2014, at 11:50 PM, Christopher Armstrong wrote:
>
>>
>> On August 22, 2014 at 6:52:02 PM, Jonathan Vanasco
>> (twisted-python at 2xlp.com <mailto:twisted-python at 2xlp.com>) wrote:
>>
>>> hoping someone can answer this question-
>>>
>>> i can't seem to get my logging right while using supervisord
>>>
>>> i'm not using twisted logging, just the regular python logging
>>> infrastructure.
>>>
>>> the two end-results I've had:
>>>
>>> - everything double-logs into twistd.log & /var/log/supervisor.log
>>> - anything this is `print`'ed appears in my twistd.log , but none of
>>> the `log.debug()` lines appear
>>>
>>> the end result I want, is for debug info from the twisted process to
>>> be recorded in a single file
>>
>>
>> I prefer to use
>>
>>
>> twistd -n -l - ...
>>
>>
>> passing ‘-' to -l means “log to stdout”.
>>
>>
>> Without your code, we can’t know how you’re configuring python
>> logging, and what may be wrong with it. This should be the baseline
>> for using twistd with supervisor if you want to let supervisor handle
>> logging. FYI, you can configure supervisor to put the output in a
>> different file than /var/log/supervisor.log, too.
>>
>>
>> --
>> Christopher Armstrong
>> http://twitter.com/radix
>> http://wordeology.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> // Jonathan Vanasco
>
> c. 646.729.6436  |  415.501.9815
> e. jonathan at 2xlp.com <mailto:jonathan at 2xlp.com>
> w. http://findmeon.com/user/jvanasco
> linkedin. http://linkedin.com/in/jonathanvanasco
> blog. http://destructuring.net
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From itamar at itamarst.org  Sat Aug 23 22:00:33 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 24 Aug 2014 00:00:33 -0400
Subject: [Twisted-Python] Twisted WebSockets Branch
In-Reply-To: <1408674260.5206.0@mail.oak-tree.us>
References: <mailman.732.1408667823.2013.twisted-python@twistedmatrix.com>
 <1408674260.5206.0@mail.oak-tree.us>
Message-ID: <7e9450707371e438ffb859ee6313cb92@itamarst.org>

 

On 2014-08-21 22:24, Rob Oakes wrote: 

> a. Which of the two websocket branches should be used as the basis for new work? 
> 
> On GitHub, websocket-4173-4 is marked as closed with a note telling the contributor to see the contribution guidelines. There are also several additions to the code which do not follow Twisted conventions (as I understand them). The last set of commits also seem to come from approximately the same time. 
> 
> websocket-4173-4 includes code which attempts to resolve issues noted in 4173 that is not present in 4173-3, but there aren't really any comments to determine if this should be incorporated or not. At this point, I'm really not familiar enough with the code to draw my own conclusion.

I'm not sure what you mean by "the branch is marked as closed" - AFAIK
GitHub has no concept of closing branches. Plus GitHub is just a mirror.
If -4 is the latest revision in Subversion then that's the latest
version of the code. 

-Itamar 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140824/4943c300/attachment-0002.html>

From radix at twistedmatrix.com  Sat Aug 23 23:56:50 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 24 Aug 2014 00:56:50 -0500
Subject: [Twisted-Python] running twisted with supervisord -- logging
 question
In-Reply-To: <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
 <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
Message-ID: <etPan.53f97ea3.6763845e.35a6@densetsu>

On August 23, 2014 at 6:50:32 PM, Jonathan Vanasco (twisted-python at 2xlp.com) wrote:
Christopher-

Thanks for the insight.  I was stupid and didn't include my code.

I don't actually want supervisor to handle the logging.  I wanted to have this app's logs in /var/log/myapp-twisted/twisted.log

I just can't figure out how to make this happen.  i've been playing with different permutations of twistd commands, redirect_stderr and stdout_logfile, and haven't found the right balance

the actual logging calls are just to python's logger ( `import logging` ; logging.getLogger(), log.debug(), etc)

---------
[program:myapp-twisted]
priority=100
process_name=%(program_name)s
autostart=true
autorestart=true
stopsignal=QUIT
redirect_stderr = false
stdout_logfile = /var/log/myapp-twisted/twisted.log
directory = /var/www/sites/myapp-svn_tag-current_production/daemon/twisted
environment = PATH="/var/www/sites/myapp-virtualenv/bin:$PATH"
command = /var/www/sites/myapp-virtualenv/bin/twistd -y controller-production.tac --pidfile /tmp/myapp-twisted.pid
----------



You’re seemingly contradicting yourself: you say you don’t want supervisor to handle logging, but the supervisor configuration you've shown is handling the logging, by routing its stdout to /var/log/myapp-twisted/twisted.log (which I think is a fine thing to do, fwiw).

If this isn’t working, then the problem is probably in your python code, not the supervisor configuration: are you sure it’s writing logs to stdout? Again, we need to see your actual python code (or a minimal reproducible example) to diagnose this.

Since you’re not using twisted’s logging system, I really can’t make any guesses here. If you *were* using twisted’s logging system, I would point out that you should add “-l -“ to your twistd command line in that supervisor config, to make twisted’s logs go to stdout as well (maybe you want to do this even if your application isn’t using twisted’s log system, so that both the logs of twisted and of your application are going to the same place).


-- 
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/






On Aug 22, 2014, at 11:50 PM, Christopher Armstrong wrote:


On August 22, 2014 at 6:52:02 PM, Jonathan Vanasco (twisted-python at 2xlp.com) wrote:

hoping someone can answer this question- 

i can't seem to get my logging right while using supervisord 

i'm not using twisted logging, just the regular python logging infrastructure. 

the two end-results I've had: 

- everything double-logs into twistd.log & /var/log/supervisor.log 
- anything this is `print`'ed appears in my twistd.log , but none of the `log.debug()` lines appear 

the end result I want, is for debug info from the twisted process to be recorded in a single file 


I prefer to use



twistd -n -l - ...



passing ‘-' to -l means “log to stdout”.



Without your code, we can’t know how you’re configuring python logging, and what may be wrong with it. This should be the baseline for using twistd with supervisor if you want to let supervisor handle logging. FYI, you can configure supervisor to put the output in a different file than /var/log/supervisor.log, too.



-- 
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

// Jonathan Vanasco

c. 646.729.6436  |  415.501.9815
e. jonathan at 2xlp.com
w. http://findmeon.com/user/jvanasco 
linkedin. http://linkedin.com/in/jonathanvanasco
blog. http://destructuring.net

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140824/02a6907b/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug 24 00:05:16 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Aug 2014 06:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1408860316.13.2991857487072300551@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140824/241f0404/attachment-0002.html>

From hs at ox.cx  Sun Aug 24 00:36:20 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Sun, 24 Aug 2014 08:36:20 +0200
Subject: [Twisted-Python] running twisted with supervisord -- logging
 question
In-Reply-To: <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
 <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
Message-ID: <83060374-3430-4273-A2E8-A4D6B2B1EE7A@ox.cx>

Jonathan,

On 24 Aug 2014, at 1:46, Jonathan Vanasco wrote:

> Thanks for the insight.  I was stupid and didn't include my code.
>
> I don't actually want supervisor to handle the logging.  I wanted to 
> have this app's logs in /var/log/myapp-twisted/twisted.log
>
> I just can't figure out how to make this happen.  i've been playing 
> with different permutations of twistd commands, redirect_stderr and 
> stdout_logfile, and haven't found the right balance

I would strongly urge you to do what Christopher told you, and not just 
for Twisted but in general.

Logging everything to stdout/stderr and then using some proper system 
tool to catch and process that instead of the finicky stdlib (or 
Twisted’s for that matter) logging will save you a lot of headaches 
and gain some love if you work with ops people.  Another alternative is 
using syslog which is directly supported by twistd.

—h



From tobias.oberstein at tavendo.de  Sun Aug 24 02:36:28 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 24 Aug 2014 01:36:28 -0700
Subject: [Twisted-Python] Twisted WebSockets Branch
In-Reply-To: <1408674260.5206.0@mail.oak-tree.us>
References: <mailman.732.1408667823.2013.twisted-python@twistedmatrix.com>
 <1408674260.5206.0@mail.oak-tree.us>
Message-ID: <634914A010D0B943A035D226786325D44479616CAC@EXVMBX020-12.exch020.serverdata.net>

Hi Rob,

if your main concern is robust WebSocket on Twisted, why not use Autobahn (https://pypi.python.org/pypi/autobahn) ?

Autobahn supports wrapping arbitrary stream-based protocols on top of WebSocket, with full support for advanced features like WebSocket compression and auto-fragmentation plus Twisted endpoints:

https://github.com/tavendo/AutobahnPython/tree/master/examples/twisted/websocket/wrapping

Note: Wrapping arbitrary stream-based protocols in WebSocket requires proper WebSocket subprotocol negotiation and handling. Autobahn follows the scheme established by https://github.com/kanaka/websockify for which you find e.g. JS libraries running in a browser.

Autobahn also supports running WebSocket as a resource in a Twisted Web resource tree: https://github.com/tavendo/AutobahnPython/blob/master/examples/twisted/websocket/echo_site/server.py

Disclosure: I wrote this stuff. So I am biased;) Glyph at one point mentioned that he likes to see "basic WebSocket support" built into Twisted. Bringing the branch to the full level of Autobahn rgd. features, compliance, robustness etc will be a lot of work though. Merging Autobahn into Twisted is unlikely to happen / doesn't make sense for different reasons I guess.

/Tobias

Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Rob Oakes
Gesendet: Freitag, 22. August 2014 04:24
An: twisted-python at twistedmatrix.com
Cc: roakes at gurulabs.com
Betreff: [Twisted-Python] Twisted WebSockets Branch

Dear Twisted Developers,

As a quick introduction, my name is Rob Oakes. I'm the lead developer for a company called Guru Labs. I'm writing for two reasons:

# Reason 1: Thank You

First and foremost, I'm writing to express thanks for creating an excellent framework. We use Twisted extensively in our infrastructure, and it is typically our go-to tool for any sort of custom server.

The other two reasons have to do with some questions about the development of Twisted. Before I dive into those, however, let me provide some background.

For the better part of a year, we've been using some code out of the websockets (twisted.web.websockets.WebsocketsResource) branch to wrap a trio of custom protocols we use in one of our web based products. I know that the code is still pre-release, but we've generally found it to be stable and work very well.

# Reason Two: Websockets Development

This brings me to the second reason I'm writing. Over the past year, it seems as though the development on the Twisted websockets branch has stalled. We would like to unstall it. For this reason, Guru Labs would be interested in:

1.) Contracting with one of the core Twisted devs of Twisted who might be interested in finishing the implementation of the websockets wrappers (resolving the issues described in ticket 4173) or another party. We are happy to pay hourly rates, set a bounty, make a donation to the Twisted project ... whatever.

A stable implementation of websockets available in Twisted Web is a priority to us, and if it's a matter of money, we are happy to throw money where it might be needed. (If this of interest, please contact me off-list at roakes at gurulabs.com<mailto:roakes at gurulabs.com>.)

or

2.) Assigning a Guru Labs developer (probably me) who might complete the work.

I've been studying the issues which are still open (specifically 4173), and the various branches associated with websocket development (websocket-4173-3 and websocket-4173-4) and it seems that most of the major concerns are related to the manner in which websocket connections are closed.

Assuming that someone else doesn't step forward ... I've already merged the most recent version of trunk with these branches, but I've found myself with several questions on how to best continue with the work.

a. Which of the two websocket branches should be used as the basis for new work?

On GitHub, websocket-4173-4 is marked as closed with a note telling the contributor to see the contribution guidelines. There are also several additions to the code which do not follow Twisted conventions (as I understand them). The last set of commits also seem to come from approximately the same time.

websocket-4173-4 includes code which attempts to resolve issues noted in 4173 that is not present in 4173-3, but there aren't really any comments to determine if this should be incorporated or not. At this point, I'm really not familiar enough with the code to draw my own conclusion.

b. In general, the protocol wrapper seems to work quite well. However when merged with the most recent version of trunk (post twisted 14), I've been seeing frequent  unhandled deferred errors. The most common is:

"twisted.internet.error.ConnectionLost: Connection to the other side was lost in a non-clean fashion: Connection lost"

It happens when:

* Connections are closed from the server, using transport.loseConnection
* Connections do not transmit a "close" frame prior to disconnecting
* To reiterate, this issue only started appearing after merging the websocket code with Twisted 14. The previous version of Twisted we were using (Twisted 12.3 worked flawlessly.)

No error is raised if the client correctly closes the connection or when using non-browser based clients (like the Python ws4py websocket client).

We mostly see the exception when the objects are garbage collected (based upon the deferred documentation at http://twistedmatrix.com/documents/14.0.0/core/howto/defer.html). Put another way, we see a whole string of errors upon stopping the reactor. Despite the exception, we don't see any errors in the browser client.

Also somewhat frustratingly, the traceback isn't terribly helpful. This is a fairly routine example:

```error
Unhandled error in Deferred:

Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionLost: Connection to the other side was lost in a non-clean fashion: Connection lost.
```

Technically, the error is probably appropriate, as they appear when the connection is lost in a non-clean fashion. I am a little concerned, though, in that I haven't found a good way to catch or suppress the error. Moreover, it doesn't seem like the defferreds are getting garbage collected which seems like a memory leak waiting to happen.

Can someone clarify if this is:

* intended behavior, and if so, what might be a strategy I can use for managing the error in my wrapped protocols
* which part of the websocket code I should be looking at in order to try and fix the issue

Thoughts would be greatly appreciated.

Cheers,

Rob Oakes
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140824/819d8341/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Aug 24 08:40:26 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 Aug 2014 14:40:26 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <loom.20140716T200054-866@post.gmane.org>
References: <loom.20140716T200054-866@post.gmane.org>
Message-ID: <20140824144026.20413.1792894490.divmod.xquotient.1756@top>

On 16 Jul, 06:02 pm, alex.gaynor at gmail.com wrote:
>Hi all,
>
>A short while ago Twisted's trac installation was changed to reject new 
>tickets
>from anyone except a special white listed group.
>
>As of yesterday I have reverted this change, (and turned the spam 
>filter back
>on). If you experience any issues trying to post, or notice and spam, 
>please
>feel free to reach out to me.

Hi Alex,

I notice some spam has started to get through.  See the latest bug 
summary email.

Jean-Paul



From twisted-python at 2xlp.com  Mon Aug 25 16:37:12 2014
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Mon, 25 Aug 2014 18:37:12 -0400
Subject: [Twisted-Python] running twisted with supervisord -- logging
	question
In-Reply-To: <83060374-3430-4273-A2E8-A4D6B2B1EE7A@ox.cx>
References: <3B95533C-C477-4DD1-BE3C-8E22095418F7@2xlp.com>
 <etPan.53f80f75.2443a858.35a6@densetsu>
 <B4BA6322-6B45-4F06-A4EE-AE87119106D7@2xlp.com>
 <83060374-3430-4273-A2E8-A4D6B2B1EE7A@ox.cx>
Message-ID: <834BACD1-1428-413C-A622-72ABECF1940A@2xlp.com>


Thanks Hynek and Christopher. 

Hynek- That's basically what I want -- but i am always quickly LOST when it comes to logging. It is my weakness.

Christopher-- The code is definitely contradicting me. I am admittedly lost.

I'll have to play around with this more in depth later -- but now I have an temporarily acceptable solution.

For the most part, I'm not logging anything myself.   I'm really concerned with all the debug messages that various PyPi packages send to the standard library's logging facility.  While running the twisted daemon outside of supervisord, this stuff ends up on the console( which i believe is both stdout/stderr ).

When I wrote "not having supervisord handle the logging" , I should have chosen better words.  It could have been stated as "I don't want /var/log/supervisord.log to handle the logging".  I don't care who handles the logging, I just wanted debug data from my twisted app in it's own file, and not in another.

I was trying to route the stderr into the /var/log/myapp-twisted/log ; but it was going into both that AND the /var/log/supervisord.log file

I tried using different permutations of the `-l` format, but without a bit of configuring, I could only get the "log.debug()" lines in twisted code to output; not the submodules.

After playing around, this seems to work the best:

[supervisord]
logfile=/var/log/supervisord.log
loglevel=warn

[myapp]
redirect_stderr = true
stdout_logfile = /var/log/myapp-twisted/twisted.log

It's not a perfect solution, but works for now --  I just raised the loglevel for supervisord to `warn`, so it doesn't doubly log any data.  The downside is that i'm not getting the debug messages from other apps that supervisord handles.  






On Aug 24, 2014, at 2:36 AM, Hynek Schlawack wrote:

> I would strongly urge you to do what Christopher told you, and not just for Twisted but in general.
> 
> Logging everything to stdout/stderr and then using some proper system tool to catch and process that instead of the finicky stdlib (or Twisted’s for that matter) logging will save you a lot of headaches and gain some love if you work with ops people.  Another alternative is using syslog which is directly supported by twistd.



On Aug 24, 2014, at 1:56 AM, Christopher Armstrong wrote:
> 
> You’re seemingly contradicting yourself: you say you don’t want supervisor to handle logging, but the supervisor configuration you've shown is handling the logging, by routing its stdout to /var/log/myapp-twisted/twisted.log (which I think is a fine thing to do, fwiw).
> 
> If this isn’t working, then the problem is probably in your python code, not the supervisor configuration: are you sure it’s writing logs to stdout? Again, we need to see your actual python code (or a minimal reproducible example) to diagnose this.
> 
> Since you’re not using twisted’s logging system, I really can’t make any guesses here. If you *were* using twisted’s logging system, I would point out that you should add “-l -“ to your twistd command line in that supervisor config, to make twisted’s logs go to stdout as well (maybe you want to do this even if your application isn’t using twisted’s log system, so that both the logs of twisted and of your application are going to the same place).



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140825/30d77db6/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Aug 25 17:31:59 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 25 Aug 2014 23:31:59 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
Message-ID: <20140825233159.20413.746155899.divmod.xquotient.1758@top>

On 24 Aug, 02:40 pm, exarkun at twistedmatrix.com wrote:
>On 16 Jul, 06:02 pm, alex.gaynor at gmail.com wrote:
>>Hi all,
>>
>>A short while ago Twisted's trac installation was changed to reject 
>>new tickets
>>from anyone except a special white listed group.
>>
>>As of yesterday I have reverted this change, (and turned the spam 
>>filter back
>>on). If you experience any issues trying to post, or notice and spam, 
>>please
>>feel free to reach out to me.
>
>Hi Alex,
>
>I notice some spam has started to get through.  See the latest bug 
>summary email.

Ping
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From alex.gaynor at gmail.com  Mon Aug 25 21:42:13 2014
From: alex.gaynor at gmail.com (Alex Gaynor)
Date: Tue, 26 Aug 2014 03:42:13 +0000 (UTC)
Subject: [Twisted-Python] Twisted Trac
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
Message-ID: <loom.20140826T053956-688@post.gmane.org>

 <exarkun <at> twistedmatrix.com> writes:

> 
> Hi Alex,
> 
> I notice some spam has started to get through.  See the latest bug 
> summary email.
> 
> Jean-Paul
> 

(Please be aware I don't read twisted regularly, please CC me to ensure I see
it, Glyph was kind enough to draw this to my attention)

Yes, I saw (I deleted the spam when I saw it). The solution to this is going to
be to get a second spam checker system (probably the Bayesian filter one), I'll
work on that with Glyph as soon as he returns from vacation (next week).

In the meantime, I'll keep manually delete any spam I see.

Cheers,
Alex




From exarkun at twistedmatrix.com  Tue Aug 26 05:11:48 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 26 Aug 2014 11:11:48 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <loom.20140826T053956-688@post.gmane.org>
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
 <loom.20140826T053956-688@post.gmane.org>
Message-ID: <20140826111148.20413.1542655853.divmod.xquotient.1763@top>

On 03:42 am, alex.gaynor at gmail.com wrote:
><exarkun <at> twistedmatrix.com> writes:
>>
>>Hi Alex,
>>
>>I notice some spam has started to get through.  See the latest bug
>>summary email.
>>
>>Jean-Paul
>
>(Please be aware I don't read twisted regularly, please CC me to ensure 
>I see
>it, Glyph was kind enough to draw this to my attention)
>
>Yes, I saw (I deleted the spam when I saw it). The solution to this is 
>going to
>be to get a second spam checker system (probably the Bayesian filter 
>one), I'll
>work on that with Glyph as soon as he returns from vacation (next 
>week).
>
>In the meantime, I'll keep manually delete any spam I see.

How are you watching for spam?  It looks like you didn't see it all:

#7558
#7564
#7565
#7567

And in the interim, #7575 - #7585.

Jean-Paul



From exarkun at twistedmatrix.com  Tue Aug 26 14:09:54 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 26 Aug 2014 20:09:54 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <CAFRnB2WCUPA-r2t4ykwaB-UmGuAmgzZokT3mCJxwoP_h7XUUKA@mail.gmail.com>
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
 <loom.20140826T053956-688@post.gmane.org>
 <20140826111148.20413.1542655853.divmod.xquotient.1763@top>
 <CAFRnB2WCUPA-r2t4ykwaB-UmGuAmgzZokT3mCJxwoP_h7XUUKA@mail.gmail.com>
Message-ID: <20140826200954.20413.134862706.divmod.xquotient.1766@top>

On 02:06 pm, alex.gaynor at gmail.com wrote:
>I see new tickets that are created through the IRC bot - I've deleted 
>all
>of these now.

Okay.  Thanks,

Jean-Paul



From scott.lemon at wovyn.com  Wed Aug 27 10:25:32 2014
From: scott.lemon at wovyn.com (Scott C. Lemon)
Date: Wed, 27 Aug 2014 10:25:32 -0600
Subject: [Twisted-Python] Looking for Python/Twisted Consultant/Part-time
	Employee ... IoT Start-up
Message-ID: <055401cfc213$86920f40$93b62dc0$@lemon@wovyn.com>

Hello,

We are looking for a consultant or part-time employee with experience using
Python/Twisted.  We want to expand our team of developers working on our
project, and have embraced Python/Twisted for some core components of our
system.  We are using Python/Twisted to interface with a variety of sensor
and control equipment, and provide a REST/JSON web services interface to our
upper layers of software.  We're needing some additional resources to
complete new features on the codebase, and then to also re-use the pattern
to support a new set of sensors and control. We have a senior developer who
has done all of the core Python development who is available for support and
discussions about the code.

The current need is for a part-time developer/consultant (hourly) to work on
some specific enhancement tasks.  The position and requirement is ongoing,
and could evolve into a full time position as we grow and close additional
funding.

Please contact me at this email address.

Scott C. Lemon

http://Wovyn.com

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140827/f074985c/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri Aug 29 18:42:49 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 30 Aug 2014 00:42:49 -0000
Subject: [Twisted-Python] Twisted Trac
In-Reply-To: <20140826200954.20413.134862706.divmod.xquotient.1766@top>
References: <loom.20140716T200054-866@post.gmane.org>
 <20140824144026.20413.1792894490.divmod.xquotient.1756@top>
 <loom.20140826T053956-688@post.gmane.org>
 <20140826111148.20413.1542655853.divmod.xquotient.1763@top>
 <CAFRnB2WCUPA-r2t4ykwaB-UmGuAmgzZokT3mCJxwoP_h7XUUKA@mail.gmail.com>
 <20140826200954.20413.134862706.divmod.xquotient.1766@top>
Message-ID: <20140830004249.20413.278135739.divmod.xquotient.1769@top>

On 26 Aug, 08:09 pm, exarkun at twistedmatrix.com wrote:
>On 02:06 pm, alex.gaynor at gmail.com wrote:
>>I see new tickets that are created through the IRC bot - I've deleted 
>>all
>>of these now.
>
>Okay.  Thanks,

Here are a few more:

#7604
#7605
#7606

Jean-Paul



From stefan.hesse at tu-dortmund.de  Sat Aug 30 13:28:19 2014
From: stefan.hesse at tu-dortmund.de (Stefan Hesse)
Date: Sat, 30 Aug 2014 21:28:19 +0200
Subject: [Twisted-Python] Twisted throws error for more or less no reason
Message-ID: <540225D3.9040704@tu-dortmund.de>

Hi everyone,

I hope it is ok when I post the link to stackoverflow, where I already
explained the problem.
http://stackoverflow.com/questions/25581856/twisted-throws-can-only-pass-through-bytes-on-python-2-for-no-reason

I hope someone can help,

Best regards
Stefan



From wolfgang.kde at rohdewald.de  Sat Aug 30 13:38:16 2014
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Sat, 30 Aug 2014 21:38:16 +0200
Subject: [Twisted-Python] Twisted throws error for more or less no reason
In-Reply-To: <540225D3.9040704@tu-dortmund.de>
References: <540225D3.9040704@tu-dortmund.de>
Message-ID: <1723750.Z45MIByCoG@i5>

Am Samstag, 30. August 2014, 21:28:19 schrieb Stefan Hesse:
> I hope it is ok when I post the link to stackoverflow, where I already
> explained the problem.

> File "/usr/lib/python2.7/dist-packages/twisted/web/http.py", line 1001, in write
    value = networkString('%s' % (value,))
  File "/usr/lib/python2.7/dist-packages/twisted/python/compat.py", line 364, in networkString
    raise TypeError("Can only pass-through bytes on Python 2")

The source code:

       if not isinstance(s, str):
            raise TypeError("Can only pass-through bytes on Python 2")
       # Ensure we're limited to ASCII subset:
       s.decode('ascii')


You could check if what you get here is not a str but unicode. You
could change the error message to include the type and value of s

-- 
Wolfgang



From stefan.hesse at tu-dortmund.de  Sat Aug 30 13:45:59 2014
From: stefan.hesse at tu-dortmund.de (Stefan Hesse)
Date: Sat, 30 Aug 2014 21:45:59 +0200
Subject: [Twisted-Python] Twisted throws error for more or less no reason
In-Reply-To: <1723750.Z45MIByCoG@i5>
References: <540225D3.9040704@tu-dortmund.de> <1723750.Z45MIByCoG@i5>
Message-ID: <540229F7.5030405@tu-dortmund.de>

Thank you!

the problem was caused by an unicode string. Changing this line:

|                              "attachment; filename=\"" + os.path.basename(video['title'] + "." + video['format']) + "\"")
to this:
||                              "attachment; filename=\"" + str(os.path.basename(video['title']) + "." + video['format']) + "\"")|

fixes it.

Thanks again!
On 30.08.2014 21:38, Wolfgang Rohdewald wrote:
> Am Samstag, 30. August 2014, 21:28:19 schrieb Stefan Hesse:
>> I hope it is ok when I post the link to stackoverflow, where I already
>> explained the problem.
>> File "/usr/lib/python2.7/dist-packages/twisted/web/http.py", line 1001, in write
>     value = networkString('%s' % (value,))
>   File "/usr/lib/python2.7/dist-packages/twisted/python/compat.py", line 364, in networkString
>     raise TypeError("Can only pass-through bytes on Python 2")
>
> The source code:
>
>        if not isinstance(s, str):
>             raise TypeError("Can only pass-through bytes on Python 2")
>        # Ensure we're limited to ASCII subset:
>        s.decode('ascii')
>
>
> You could check if what you get here is not a str but unicode. You
> could change the error message to include the type and value of s
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140830/5b7e000e/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug 31 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 31 Aug 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1409465115.51.4730690123397763636@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140831/7b790d22/attachment-0002.html>

