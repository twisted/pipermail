From pc.vries at tip.nl  Fri Dec  2 09:31:41 2011
From: pc.vries at tip.nl (Paul de Vries)
Date: Fri, 2 Dec 2011 15:31:41 +0100
Subject: [Twisted-web] Twisted web client digest authentication?
Message-ID: <C77C37F0-21CB-4418-84FC-730E37B8D8FD@tip.nl>

Hi

Made something that connects to a httpserver and parses the xml stream it sends.
The webserver it has to connect to uses digest authentication.

How can I implement digest authentication in this?

thanks in advance

the code I put together:

from twisted.internet import  reactor
from twisted.internet.defer import Deferred
from twisted.internet.protocol import Protocol
from twisted.web.client import Agent
from twisted.web.http_headers import Headers
from StringIO import StringIO
from elementtree import ElementTree


class ParseReceived(Protocol):
    def __init__(self, finished):
        self.finished = finished
        self.dataStream = StringIO()

    def dataReceived(self, bytes):
        display = bytes
        #print 'some data received:'
        #print display
        context = ElementTree.iterparse(StringIO(bytes), events = ("start", "end"))
        context = iter(context)
        event, root = context.next()
        
        for event, elem in context:
            if elem.tag == "Tag":
                print "Tag "
            root.clear()
            

    def connectionLost(self, reason):
        print 'finished receiving', reason.getErrorMessage()

agent = Agent(reactor)

d = agent.request('GET', 'http:someadress', Headers({'User-Agent': ['Twisted web client']}), None)

def cbResponse(response):
    print 'Response version: ', response.version
    finished = Deferred()
    response.deliverBody(ParseReceived(finished))
    return finished

d.addCallback(cbResponse)
reactor.run()

From exarkun at twistedmatrix.com  Mon Dec  5 08:51:34 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 05 Dec 2011 13:51:34 -0000
Subject: [Twisted-web] Twisted web client digest authentication?
In-Reply-To: <C77C37F0-21CB-4418-84FC-730E37B8D8FD@tip.nl>
References: <C77C37F0-21CB-4418-84FC-730E37B8D8FD@tip.nl>
Message-ID: <20111205135134.1778.787156431.divmod.xquotient.74@localhost.localdomain>

On 2 Dec, 02:31 pm, pc.vries at tip.nl wrote:
>Hi
>
>Made something that connects to a httpserver and parses the xml stream 
>it sends.
>The webserver it has to connect to uses digest authentication.
>
>How can I implement digest authentication in this?

Digest authentication is performed in the headers of requests and 
responses.  The server sends a challenge, the client computes a response 
proving they know a secret only one user is supposed to know.
>[snip]
>
>def cbResponse(response):

The response object has all of the headers sent from the server.  You 
can inspect them and then compute the appropriate challenge response to 
include in your *next* request.  If you get it right, then the server 
will give you the content instead of sending you a challenge.

Some work has been done on adding higher-level support for this feature 
to Twisted, but it is not yet complete.  You can follow its progress or 
pitch in at <http://twistedmatrix.com/trac/ticket/5148>.

Jean-Paul
>    print 'Response version: ', response.version
>    finished = Deferred()
>    response.deliverBody(ParseReceived(finished))
>    return finished
>
>d.addCallback(cbResponse)
>reactor.run()
>_______________________________________________
>Twisted-web mailing list
>Twisted-web at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From pc.vries at tip.nl  Mon Dec  5 09:24:57 2011
From: pc.vries at tip.nl (Paul de Vries)
Date: Mon, 5 Dec 2011 15:24:57 +0100
Subject: [Twisted-web] Twisted web client digest authentication?
In-Reply-To: <20111205135134.1778.787156431.divmod.xquotient.74@localhost.localdomain>
References: <C77C37F0-21CB-4418-84FC-730E37B8D8FD@tip.nl>
	<20111205135134.1778.787156431.divmod.xquotient.74@localhost.localdomain>
Message-ID: <91B7BC02-E521-4116-9966-0BE2B75468B3@tip.nl>

Thanks for setting me on the right track.  This is the first and (so far) only response I got
so I supposed it was a stupid or impossible question.  
Which is very likely because I'm new to python and twisted.

Paul

Op 5 dec 2011, om 14:51 heeft exarkun at twistedmatrix.com het volgende geschreven:

> On 2 Dec, 02:31 pm, pc.vries at tip.nl wrote:
>> Hi
>> 
>> Made something that connects to a httpserver and parses the xml stream 
>> it sends.
>> The webserver it has to connect to uses digest authentication.
>> 
>> How can I implement digest authentication in this?
> 
> Digest authentication is performed in the headers of requests and 
> responses.  The server sends a challenge, the client computes a response 
> proving they know a secret only one user is supposed to know.
>> [snip]
>> 
>> def cbResponse(response):
> 
> The response object has all of the headers sent from the server.  You 
> can inspect them and then compute the appropriate challenge response to 
> include in your *next* request.  If you get it right, then the server 
> will give you the content instead of sending you a challenge.
> 
> Some work has been done on adding higher-level support for this feature 
> to Twisted, but it is not yet complete.  You can follow its progress or 
> pitch in at <http://twistedmatrix.com/trac/ticket/5148>.
> 
> Jean-Paul
>>   print 'Response version: ', response.version
>>   finished = Deferred()
>>   response.deliverBody(ParseReceived(finished))
>>   return finished
>> 
>> d.addCallback(cbResponse)
>> reactor.run()
>> _______________________________________________



From glyph at twistedmatrix.com  Mon Dec  5 15:19:24 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 Dec 2011 15:19:24 -0500
Subject: [Twisted-web] twisted.web.template output encoding
In-Reply-To: <20111126165210.2308.1108209216.divmod.xquotient.319@localhost.localdomain>
References: <20111126165210.2308.1108209216.divmod.xquotient.319@localhost.localdomain>
Message-ID: <0135E2CB-0A21-4055-A98D-676080D5D103@twistedmatrix.com>

Sorry it took me so long to get to this.  Hopefully it's still relevant ;).

On Nov 26, 2011, at 11:52 AM, exarkun at twistedmatrix.com wrote:

> Apart from various issues relating to the lack of patterns in twisted.web.template,

I had some trepidation about marking <http://twistedmatrix.com/trac/ticket/5040> as "closed" :).  What kind of issues came up with patterns?  Anything you feel needs fixing?

> the main difficulty is in handling non-ascii contents in the traceback.  Apart from any unicode that may show up in the source code being rendered (or, perhaps, eventually, the values of variables to be rendered - though for now I do not plan to implement this) the no-break space characters which are necessary to get traceback lines indented properly mean that there is always some non-ascii to include in the output.

Looking at the actual output now, these &nbsp; characters strike me as an accident of how browsers collapse different types of whitespace.  They could be replaced with a <span style="width: 4em;" /> to avoid this problem for now, which is probably more expressive.

> twisted.web.template encodes its output using UTF-8, and this is not customizable.  Thus, using twisted.web.template, formatFailure's result will be a str containing UTF-8 encoded text.  Previously the result was a str containing only ASCII encoded text, with no-break space represented as `&nbsp;?.  Consequently, callers of `formatFailure? will probably mishandle the result - the caller in `twisted.web.server? does, at least, including the bytes in a page with a content type of "text/html".
> 
> The solutions that come to mind are all about removing this incompatible change and making it so `formatFailure? can continue to return a str with ASCII-encoded text.
> 
> One solution is to add support for named entities or numeric character references to twisted.web.template.  Very likely this is a good idea regardless (Nevow supported these).

I think that this is probably a necessary feature regardless, eventually.  Did you end up filing a ticket for it?

> Another solution is to use a different encoding in `twisted.web.template? - ASCII, with xmlcharrefreplace as the error handler.  This is tempting since it avoids an obtrusive non-ASCII support API (the way Nevow supports these is via `nevow.entities?, which must be used rather than normal Python unicode objects).

I like this idea, because it's so hard to get wrong even if you have other problems (missing charset, buggy proxies, overly aggressive encoding detection, etc).  We can still say it's UTF-8 but it will work anywhere ASCII will work :).

> Perhaps another question is whether the encoding used by `twisted.web.template? should be a parameter.  A related question raised might be whether `twisted.web.template? should encoded to bytes at all, or delegate the responsibility for that to code closer to a socket.

Personal experience looking at profiles of applications which serialize a lot of XML suggests to me that encoding and decoding text in Python is a huge chunk of CPU work and memory footprint; keeping the encoding in t.w.t provides an opportunity for a potentially important optimization which might not be possible if it were done closer to the socket.

For example, if we're generating a long table that generates 10MB of HTML, if this is encoded incrementally (even foregoing any smarter optimizations, like caching the encoded form of strings) then there's a small working set of encoded data which can be collected as the template renders, and by the time the final string is emitted by cStringIO.getvalue() or what have you, you're using 20-ish megabytes of heap to store your UTF-8 bytes (10 in the StringIO and 10 in the str).  If you build this as a unicode string instead, you'll end up using 50MB; 40MB for your unicode string, 10MB for the decoded bytes.  Part of this is just an implementation issue, but even if Python gets a smarter unicode representation, you still need more space, because you need to store the encoded and decoded representations concurrently.

It might be a while until I get around to implementing something smart in this area, but I'd prefer we have an interface that makes such optimizations possible without breaking compatibility.

> As a work-around in `formatFailure? I can decode the output of the flattener using UTF-8 and then re-encode it to avoid non-ASCII, but it seems like this should be solved in `twisted.web.template? rather than over and over again in application code.

If this does end up happening in formatFailure or anywhere else, please (whoever does it) make sure to file a ticket to fix it; this should never be more than a temporary workaround.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20111205/8359c857/attachment.htm 

From jonathan+twisted at jsphere.com  Tue Dec  6 04:47:36 2011
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Tue, 6 Dec 2011 11:47:36 +0200
Subject: [Twisted-web] twisted.web.template output encoding
In-Reply-To: <0135E2CB-0A21-4055-A98D-676080D5D103@twistedmatrix.com>
References: <20111126165210.2308.1108209216.divmod.xquotient.319@localhost.localdomain>
	<0135E2CB-0A21-4055-A98D-676080D5D103@twistedmatrix.com>
Message-ID: <CAM187SGqXXrpKaebsYprTfFBNV-oeKD5jh9EABvgZMw=0avJtw@mail.gmail.com>

On Mon, Dec 5, 2011 at 22:19, Glyph <glyph at twistedmatrix.com> wrote:
> Looking at the actual output now, these &nbsp; characters strike me as an
> accident of how browsers collapse different types of whitespace. ?They could
> be replaced with a <span style="width: 4em;" /> to avoid this problem for
> now, which is probably more expressive.

The "width" property does not apply to non-replaced inline elements
(i.e. "display: inline", like span) [1], "padding-left: 4em" produces
the same result though.

Apart from the fact that "padding-left: 4em" (or "width: 4em") will
not be preserved if you attempt to copy the text,
&nbsp;&nbsp;&nbsp;&nbsp; and width: 4em are not actually the same
thing and do not produce the same result, even with a monospace font.

I've attached a small document demonstrating this.

[1] <http://www.w3.org/TR/CSS2/visudet.html#the-width-property>

-- 
Jonathan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20111206/fd6c6a0f/attachment.html 

From garyjefferson123 at gmail.com  Mon Dec 26 17:48:19 2011
From: garyjefferson123 at gmail.com (gary jefferson)
Date: Mon, 26 Dec 2011 15:48:19 -0700
Subject: [Twisted-web] manually inject data into a site object
Message-ID: <CAJcq2s0K=jttH18SE-SnfRXJaWmSrryZT2i-7Eb-uC=g2FWxHw@mail.gmail.com>

I have a web service written in twisted-web.

I have it running behind a NAT.

I have a component (based on twisted Protocol) that makes a connection
out from behind the NAT to a relay. Let's call this ReverseThing.

Web clients can connect to the relay to send data back over this ReverseThing.

Once I receive the data, how can I inject it directly into the web
service? Assume both these services run in the same twisted process.

Here's what I've tried: I can pass in the Site object to the
ReverseThing protocol, so that I can call p=buildProtocol() on it,
then I can call dataReceived() manually on that p. But obviously this
doesn't work, because there isn't really a transport object to call
things like getPeer() on.

Is there some other way to send data to a Site, without it actually
coming over the wire?

Thanks,
Gary


From glyph at twistedmatrix.com  Thu Dec 29 18:26:46 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 29 Dec 2011 18:26:46 -0500
Subject: [Twisted-web] manually inject data into a site object
In-Reply-To: <CAJcq2s0K=jttH18SE-SnfRXJaWmSrryZT2i-7Eb-uC=g2FWxHw@mail.gmail.com>
References: <CAJcq2s0K=jttH18SE-SnfRXJaWmSrryZT2i-7Eb-uC=g2FWxHw@mail.gmail.com>
Message-ID: <C281580B-0356-4421-A669-C72DBA07DF45@twistedmatrix.com>


On Dec 26, 2011, at 5:48 PM, gary jefferson wrote:

> I have a web service written in twisted-web.
> 
> I have it running behind a NAT.
> 
> I have a component (based on twisted Protocol) that makes a connection
> out from behind the NAT to a relay. Let's call this ReverseThing.

Since you're mentioning Twisted and NAT, I feel obliged to direct your attention to Vertex, which sorta solves some of these problems but badly needs a maintainer:

http://pypi.python.org/pypi/Vertex

It may not be relevant to your use-case though (and isn't relevant to your question at all).

> Web clients can connect to the relay to send data back over this ReverseThing.
> 
> Once I receive the data, how can I inject it directly into the web
> service? Assume both these services run in the same twisted process.
> 
> Here's what I've tried: I can pass in the Site object to the
> ReverseThing protocol, so that I can call p=buildProtocol() on it,
> then I can call dataReceived() manually on that p. But obviously this
> doesn't work, because there isn't really a transport object to call
> things like getPeer() on.

You must call makeConnection(transport) on a Protocol before you call dataReceived.  So make a Transport object - you don't need a "real" one that represents a socket, just something that implements <twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html>.

Many tests use in-memory or otherwise faked transport objects.  Protocols must be able to deal with alternate transport implementations, at the very least in order to be able to use encrypted connections.  As of Twisted 11.1, the TLS transport is always a different object, presuming you have a recent enough version of pyOpenSSL.

> Is there some other way to send data to a Site, without it actually
> coming over the wire?

You're 90% of the way there already, and you have the right idea :).

-glyph



From steiny at steiny.com  Sat Dec 31 14:22:32 2011
From: steiny at steiny.com (Donald Steiny)
Date: Sat, 31 Dec 2011 11:22:32 -0800
Subject: [Twisted-web] Noob question about POST
Message-ID: <4EFF60F8.3000309@steiny.com>

Hi,

I have just been learning twisted and been Googling for an example of 
something that is simple to do with pycurl or even straight python but I 
can't figure out for the life of me how to do with twisted.   I want to 
be able to do a POST and debug a login to a system.  Ultimately, what I 
am trying to do (and twisted seems to be the best choice for this) is to 
make the login process automatic for the user so after he or she is 
logged in he or she will interact with the remote system as if he  or 
she had logged in his or herself.  The proxy class seems perfect for the 
second part and getPage should allow me to do the first, but I don't 
seem to understand something.  What I have done is to set up a simple 
login/password page on my own server with login fred and password 1234.  
I am using Python 2.6 on Linux 2.6. I will describe what I expect to 
happen, then what I did, then what happened that I did not expect and if 
anyone could set me straight I would be eternally grateful AND because 
of the good Karma you will find parking spaces easily all during 2012.

If I telnet to localhost port 80 and copy and paste the following:

=== BEGINNING OF WORKING INPUT TO SERVER  ===
POST /locked/checklogin.php HTTP/1.1
Host: www.mysite.com
User-Agent: Mozilla/4.0
Content-Length: 31
Content-Type: application/x-www-form-urlencoded

myusername=john&mypassword=1234
===== END OF WORKING INPUT TO SERVER ====

I get just what I would expect.  On successful login it goes to the page 
"login_success.php"and I print out the _POST array to make sure the 
variables are getting passed:

==== BEGINNING OF CORRECT OUTPUT FROM SERVER ===
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
POST /locked/checklogin.php HTTP/1.1
Host: www.mysite.com
User-Agent: Mozilla/4.0
Content-Length: 31
Content-Type: application/x-www-form-urlencoded

myusername=john&mypassword=1234
HTTP/1.1 302 Found
Date: Sat, 31 Dec 2011 18:42:28 GMT
Server: Apache/2.2.16 (Debian)
X-Powered-By: PHP/5.3.3-7+squeeze3
Set-Cookie: PHPSESSID=tueqdd71kha040d18d1qabg424; path=/
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, 
pre-check=0
Pragma: no-cache
Location: login_success.php
Vary: Accept-Encoding
Content-Length: 57
Content-Type: text/html

IN CHECKLOGIN<BR>
myusername: john, mypassword: 1234<BR>
Connection closed by foreign host.
=== END OF CORRECT OUTPUT FROM SERVER ===

I took a getPage example that is in the documentation:

=== START CODE ===
from pprint import pformat

from twisted.internet import reactor
from twisted.internet.defer import Deferred
from twisted.internet.protocol import Protocol
from twisted.web.client import Agent
from twisted.web.http_headers import Headers

class BeginningPrinter(Protocol):
     def __init__(self, finished):
         self.finished = finished
         self.remaining = 1024 * 10

     def dataReceived(self, bytes):
         if self.remaining:
             display = bytes[:self.remaining]
             print 'Some data received:'
             print display
             self.remaining -= len(display)

     def connectionLost(self, reason):
         print 'Finished receiving body:', reason.getErrorMessage()
         self.finished.callback(None)

agent = Agent(reactor)
d = agent.request(
     'GET',
     'http://localhost/locked/checklogin.php',
     Headers({'User-Agent': ['Twisted Web Client Example']}),
     None)

def cbRequest(response):
     print 'Response version:', response.version
     print 'Response code:', response.code
     print 'Response phrase:', response.phrase
     print 'Response headers:'
     print pformat(list(response.headers.getAllRawHeaders()))
     finished = Deferred()
     response.deliverBody(BeginningPrinter(finished))
     return finished
d.addCallback(cbRequest)

def cbShutdown(ignored):
     reactor.stop()
d.addBoth(cbShutdown)

reactor.run()

==== END CODE ===

The output was just what I expected:

=== OUTPUT FROM RUN OF CODE ==

Response version: ('HTTP', 1, 1)
Response code: 200
Response phrase: OK
Response headers:
[('Date', ['Sat, 31 Dec 2011 18:55:17 GMT']),
  ('Content-Type', ['text/html']),
  ('X-Powered-By', ['PHP/5.3.3-7+squeeze3']),
  ('Vary', ['Accept-Encoding']),
  ('Server', ['Apache/2.2.16 (Debian)'])]
Some data received:
IN CHECKLOGIN<BR>
myusername: , mypassword: <BR>
Wrong Username or Password: ,
Finished receiving body: Response body fully received
shutdown called
===== END OF OUTPUT FROM RUN OF CODE --

I modified the example by changing the GET to a POST and including 
StringProducer and changing the None to a body and the header to 
multipart/form-data.  Here:

==== START OF CODE MODIFIED WITH POST ===

from pprint import pformat

from twisted.internet import reactor
from twisted.internet.defer import Deferred
from twisted.internet.protocol import Protocol
from twisted.web.client import Agent
from twisted.web.http_headers import Headers
from twisted.web.iweb import IBodyProducer
from zope.interface import implements, Interface
from stringprod import StringProducer

class BeginningPrinter(Protocol):
     def __init__(self, finished):
         self.finished = finished
         self.remaining = 1024 * 10

     def dataReceived(self, bytes):
         if self.remaining:
             display = bytes[:self.remaining]
             print 'Some data received:'
             print display
             self.remaining -= len(display)

     def connectionLost(self, reason):
         print 'Finished receiving body:', reason.getErrorMessage()
         self.finished.callback(None)

creds = "myusername=john&mypassword=1234\r\n"

body = StringProducer(creds)
agent = Agent(reactor)
d = agent.request(
     'POST',
     'http://localhost/locked/checklogin.php',
     Headers({'User-Agent': ['Mozilla 5.0'],
         'Content-Type': ['multipart/form-data; charset=utf-8']}),
     body)

def cbRequest(response):
     print 'Response version:', response.version
     print 'Response code:', response.code
     print 'Response phrase:', response.phrase
     print 'Response headers:'
     print pformat(list(response.headers.getAllRawHeaders()))
     finished = Deferred()
     response.deliverBody(BeginningPrinter(finished))
     return finished

d.addCallback(cbRequest)

def cbShutdown(ignored):
     print "shutdown called"
     reactor.stop()
d.addBoth(cbShutdown)

reactor.run()

=== END CODE MODIFIED WITH POST ===

When I run this, I do not get the output I expect, for some reason, it 
does not seem to be sending the body.

==== BEGINNING OF RUN OF MODIFIED CODE ====
Response version: ('HTTP', 1, 1)
Response code: 200
Response phrase: OK
Response headers:
[('Date', ['Sat, 31 Dec 2011 19:06:39 GMT']),
  ('Content-Type', ['text/html']),
  ('X-Powered-By', ['PHP/5.3.3-7+squeeze3']),
  ('Vary', ['Accept-Encoding']),
  ('Server', ['Apache/2.2.16 (Debian)'])]
Some data received:
IN CHECKLOGIN<BR>
myusername: , mypassword: <BR>
Wrong Username or Password: ,
Finished receiving body: Response body fully received
shutdown called
  ==== END OF RUN OF MODIFIED CODE ===

What am I missing?  The body does not seem to be being send.   I would 
like to have a way to easily be able to debug logins to remote systems.  
This is NOT for spamming.  I am trying to develop a system for higher 
security where our users would log locally (VPN)  with their own 
favorite passwords and that would map to awful username and password 
that no one would ever use or remember and would be unguessable to log 
them into external cloud based systems.  In some cases there are 
libraries and APIs to help me, but I want a general solution.  Mechanic 
seems to do part of this and pycurl, but the proxy and networking part 
seem much better in twisted.  HELP!!!

Thanks,
Donald




