#################################################################################
# Example of using patterns to change the appearance of a webform.

from twisted.application import internet, service
from twisted.web import static

from nevow import appserver, inevow
from nevow import rend
from nevow import loaders
from nevow import tags as T

from formless import annotate
from formless import iformless
from formless import webform


FORM_LAYOUT = T.form(pattern="freeform-form", id=T.slot('form-id'), action=T.slot('form-action'), method='POST')[
                    #apparence generale
                    T.invisible(pattern="argument", render=" ")[
                        T.slot('input'),
                        T.slot('description'),
                        T.slot('error'),
                    ],
                    T.table(border="1", align="center", width="100%")[
                        T.slot('argument!!fee')
                    ],
                    T.table(width="100%")[
                        T.tr()[
                            T.td(width="100%", align="center")[
                                T.br(),
                                T.slot('form-button')
                            ]
                        ]
                    ]
              ]


#################################################################################
# ISomething and Page are just something to test the form rendering on.

class ISomething(annotate.TypedInterface):

    def doSomething(
        self,
        ctx = annotate.Context(),
        request = annotate.Request(),
        fee = annotate.Integer(required=True, description="Wee!"),
        ):
        """Do Something Really Exciting

        Normally you would put a useful description of the interface here but,
        since the inteface is useless anyway, I cannot think of anything
        useful to say about it. Although ... did I mention it is useless?"""
    doSomething = annotate.autocallable(doSomething)


class Root(rend.Page):
    """Render a custom and normal form for an ISomething.
    """
    __implements__ = ISomething, rend.Page.__implements__

    child_webform_css = webform.defaultCSS

    def child_result(self, request):
        return ResultsPage()

    def render_normalForm(self, ctx, data):
        return webform.renderForms()

    def render_customForm(self, ctx, data):
        return webform.renderForms()[FORM_LAYOUT]

    def doSomething(self, ctx, request, **kwargs):
        print '***** doSomething called with:', kwargs
        request.setComponent(iformless.IRedirectAfterPost, "/result")

    docFactory = loaders.stan(
        T.html[
            T.head[
                T.title['Example :: Custom Form Layout'],
                T.link(rel='stylesheet', type='text/css', href='/webform_css'),
                ],
            T.body[
                T.h1['Custom'],
                render_customForm,
                T.h1['Default'],
                render_normalForm,
                ]
            ]
        )



class ResultsPage(rend.Page):
    __implements__ = rend.Page.__implements__

    def __init__(self):
        rend.Page.__init__(self)


    docFactory = loaders.stan(T.html[
        T.head[
            T.title["Resultats"],
        ],
        T.body(bgcolor="#d1cc8c", topmargin="2", leftmargin="2", marginwidth="2", marginheight="2")[
            T.div()[
               "RESULT'S PAGE"
            ]
        ]
    ])





application = service.Application('hellostan')
webServer = internet.TCPServer(8080, appserver.NevowSite(Root()))
webServer.setServiceParent(application)
