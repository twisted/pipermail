from zope.interface import implements

from twisted.python import usage
from twisted.plugin import IPlugin
from twisted.application import internet, service
from twisted.web import server, resource

from OpenSSL import SSL

class ContextFactory:
	isClient = 0
	
	def getContext(self):
		ctx = SSL.Context(SSL.SSLv23_METHOD)
		ctx.use_certificate_file('/usr/local/dram/certs/shib.crt')
		ctx.use_privatekey_file('/usr/local/dram/certs/www.key')
		ctx.use_certificate_chain_file('/usr/local/dram/certs/intermediate.crt')
		return ctx

class ExampleResource(resource.Resource):
	isLeaf = True
	
	def render(self, request):
		request.setHeader('Content-Type', 'text/html')
		request.write("It worked!")
		request.finish()
		return server.NOT_DONE_YET

class SSLTestServiceMaker(object):
	implements(service.IServiceMaker, IPlugin)
	tapname = "ssl-test"
	description = "Illustrate the chain certificate issue."
	options = usage.Options
	
	def makeService(self, config):
		site = server.Site(ExampleResource())
		
		master_service = service.MultiService()
		
		web_service = internet.TCPServer(80, site)
		ssl_service = internet.SSLServer(443, site, ContextFactory())
		
		web_service.setServiceParent(master_service)
		ssl_service.setServiceParent(master_service)
		
		return master_service

serviceMaker = SSLTestServiceMaker()