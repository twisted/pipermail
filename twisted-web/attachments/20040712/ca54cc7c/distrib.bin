from twisted.internet import reactor
from twisted.web import proxy, resource, server

class ResourceSubscription(resource.Resource):
    isLeaf = True

    def __init__(self, host, port):
        resource.Resource.__init__(self)
        self.host = host
        self.port = port
   
    def render(self, request):
        if self.host != 'unix': 
            request.received_headers['x-forwarded-from'] = request.received_headers['host']
            request.received_headers['host'] = self.host + ':' + str(self.port)
            request.content.seek(0,0)
        
        clientFactory = proxy.ProxyClientFactory(request.method, 
                                        request.uri, 
                                        request.clientproto,
                                        request.getAllHeaders(),
                                        request.content.read(),
                                        request)

        if self.host == 'unix':
            reactor.connectUNIX(self.port, clientFactory)
        else:
            reactor.connectTCP(self.host, self.port, clientFactory)

        return server.NOT_DONE_YET
