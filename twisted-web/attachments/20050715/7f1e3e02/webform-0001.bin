Index: webform.py
===================================================================
--- webform.py	(revision 1659)
+++ webform.py	(working copy)
@@ -20,6 +20,8 @@
 from formless import iformless
 from formless.formutils import FormDefaults, FormErrors, calculatePostURL, keyToXMLID, getError
 
+requiredMarker = span(_class="freeform-field-required")['(Required)']
+
 def _locateDefaultCSS():
     """Calculate and return the full path to the default freeform CSS.
     """
@@ -86,6 +88,11 @@
         context.fillSlots( 'description', data.description )
         context.fillSlots( 'id', keyToXMLID(context.key) )
         context.fillSlots( 'value', value )
+        if hasattr(data.typedValue, 'required') and \
+           data.typedValue.required:
+            context.fillSlots('required', requiredMarker)
+        else:
+            context.fillSlots('required', '')
 
         return context.tag
 
@@ -115,15 +122,21 @@
             T="hidden"
         else:
             T="text"
+        maxlength = data.typedValue.getAttribute('maxlength') or 255
+        size = data.typedValue.getAttribute('size') or 30
+        id = keyToXMLID(context.key)
         return slot[
-            input(id=keyToXMLID(context.key), type=T, name=name, value=value,
+            input(maxlength=maxlength, size=size, id=id, type=T, 
+                  name=name, value=value,
                   _class='freeform-input-%s' % T)]
 
 
 class TextRenderer(BaseInputRenderer):
     def input(self, context, slot, data, name, value):
+        rows = data.typedValue.getAttribute('rows') or 8
+        cols = data.typedValue.getAttribute('cols') or 40
         return slot[
-            textarea(id=keyToXMLID(context.key), name=name, _class="freeform-textarea", rows=8, cols=40)[
+            textarea(id=keyToXMLID(context.key), name=name, _class="freeform-textarea", rows=rows, cols=cols)[
                 value or '']]
 
 
