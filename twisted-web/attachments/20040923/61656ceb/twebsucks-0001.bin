import time
from twisted.internet import reactor
from twisted.web import server
from nevow import appserver


class Session(server.Session):

    lifetime = 3600

    def setLifetime(self, lifetime):
        self.lifetime = lifetime

    def checkExpired(self):
        # If I haven't been touched in 15 minutes:
        if time.time() - self.lastModified > self.lifetime:
            if self.site.sessions.has_key(self.uid):
                self.expire()
            else:
                pass
                #log.msg("no session to expire: %s" % self.uid)
        else:
            #log.msg("session given the will to live for 30 more minutes")
            reactor.callLater(self.lifetime/2, self.checkExpired)


class NevowSite(appserver.NevowSite):

    def makeSession(self):
        """Generate a new Session instance, and store it for future reference.
        """
        uid = self._mkuid()
        s = Session(self, uid)
        session = self.sessions[uid] = s
        reactor.callLater(Session.lifetime/2, s.checkExpired)
        return session
