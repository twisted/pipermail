Index: nevow/test/test_flatstan.py
===================================================================
--- nevow/test/test_flatstan.py	(revision 134)
+++ nevow/test/test_flatstan.py	(working copy)
@@ -141,7 +141,7 @@
         ]
 
     def test_precompileTwice(self):
-        def render_same(self, context, data):
+        def render_same(context, data):
             return context.tag
         
         doc = tags.html[
@@ -158,7 +158,7 @@
         self.assertEquals(rendered, "<html><body><p>Hello</p><p>5</p></body></html>")
 
     def test_precompilePrecompiled(self):
-        def render_same(self, context, data):
+        def render_same(context, data):
             return context.tag
         
         doc = tags.html[
Index: nevow/rend.py
===================================================================
--- nevow/rend.py	(revision 134)
+++ nevow/rend.py	(working copy)
@@ -100,7 +100,7 @@
     component that is embedded in another page.
     """
 
-    __implements__ = RenderFactory.__implements__, inevow.IResource, DataFactory.__implements__, ConfigurableFactory.__implements__
+    __implements__ = inevow.IRenderer, RenderFactory.__implements__,inevow.IResource, DataFactory.__implements__, ConfigurableFactory.__implements__
 
     original = None
     docFactory = None
@@ -167,6 +167,7 @@
         
         self.remember(request, inevow.IRequest)
         self.remember(self, inevow.IResource)
+        self.remember(self, inevow.IRenderer)
         self.remember(self, inevow.IRendererFactory)
 
         if self.original is None:
@@ -300,6 +301,7 @@
         _setContext)
 
     def __call__(self, context, data):
+        context.remember(self, inevow.IRenderer)
         context.remember(self, inevow.IRendererFactory)
         context.remember(self.original or self, inevow.IData)
 
Index: nevow/flat/flatstan.py
===================================================================
--- nevow/flat/flatstan.py	(revision 134)
+++ nevow/flat/flatstan.py	(working copy)
@@ -11,7 +11,7 @@
 from twisted.internet.defer import Deferred
 
 from nevow.stan import Proto, Tag, xml, directive, Unset
-from nevow.inevow import IRendererFactory, IGettable, IData
+from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData
 from nevow.renderer import flatten, serialize
 from nevow.accessors import convertToData
 from nevow.context import WovenContext
@@ -170,8 +170,8 @@
                 result = original(data)
             else:
                 if nocontext is PASS_SELF:
-                    renderFactory = context.locate(IRendererFactory)
-                    result = original(renderFactory, context, data)
+                    renderer = context.locate(IRenderer)
+                    result = original(renderer, context, data)
                 else:
                     result = original(context, data)
         except StopIteration:
Index: nevow/__init__.py
===================================================================
--- nevow/__init__.py	(revision 134)
+++ nevow/__init__.py	(working copy)
@@ -69,6 +69,7 @@
 nevow.flat.flatstan.FunctionSerializer            __builtin__.function              nevow.inevow.ISerializable
 nevow.flat.flatstan.FunctionSerializer            __builtin__.type                  nevow.inevow.ISerializable
 nevow.flat.flatstan.MethodSerializer              __builtin__.instancemethod        nevow.inevow.ISerializable
+nevow.flat.flatstan.CallableInstanceSerializer    nevow.inevow.IRenderer            nevow.inevow.ISerializable
 nevow.flat.flatstan.CallableInstanceSerializer    nevow.inevow.IRendererFactory     nevow.inevow.ISerializable
 nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive              nevow.inevow.ISerializable
 nevow.flat.flatstan.SlotSerializer                nevow.stan.slot                   nevow.inevow.ISerializable
Index: nevow/freeform.py
===================================================================
--- nevow/freeform.py	(revision 134)
+++ nevow/freeform.py	(working copy)
@@ -15,7 +15,7 @@
 from nevow import inevow
 from nevow.renderer import flatten
 from nevow.tags import *
-from nevow.inevow import IRendererFactory, IInputValidator
+from nevow.inevow import IRenderer, IInputValidator
 from nevow import util
 from nevow import compy
 from nevow import url
@@ -223,7 +223,7 @@
 
 
 class BaseInputRenderer(compy.Adapter):
-    __implements__ = IRendererFactory, ITypedRenderer
+    __implements__ = IRenderer, ITypedRenderer
     def __call__(self, context, data):
         request = context.locate(inevow.IRequest)
         defaults = IFormDefaults(request)
@@ -359,7 +359,7 @@
 
 
 class ButtonRenderer(compy.Adapter):
-    __implements__ = IRendererFactory, ITypedRenderer
+    __implements__ = IRenderer, ITypedRenderer
     def __call__(self, context, data):
         if isGrouped(context, 3):
             return ''
@@ -367,14 +367,14 @@
 
 
 class ObjectRenderer(compy.Adapter):
-    __implements__ = IRendererFactory, ITypedRenderer
+    __implements__ = IRenderer, ITypedRenderer
     def __call__(self, context, data):
         configurable = context.locate(formless.IConfigurable)
         return div(data=getattr(configurable, data.name))[ configure ]
 
 
 class RequestRenderer(compy.Adapter):
-    __implements__ = IRendererFactory, ITypedRenderer
+    __implements__ = IRenderer, ITypedRenderer
     def __call__(self, context, data):
         return ''
 
@@ -397,7 +397,7 @@
 
 
 class ListRenderer(compy.Adapter):
-    __implements__ = IRendererFactory, ITypedRenderer
+    __implements__ = IRenderer, ITypedRenderer
     complexType = True
     styleClass = 'freeform-list'
 
@@ -517,7 +517,7 @@
     complexType = True
     styleClass = 'freeform-dictionary'
 
-    __implements__ = IRendererFactory,
+    __implements__ = IRenderer,
     def items(self, context, data):
         request = context.locate(inevow.IRequest)
         defaults = IFormDefaults(request)
@@ -537,7 +537,7 @@
 
 
 class GroupBindingRenderer(compy.Adapter):
-    __implements__ = IRendererFactory,
+    __implements__ = IRenderer,
 
     def __call__(self, context, data):
         context.remember(data, formless.IBinding)
@@ -565,7 +565,7 @@
 
 
 class PropertyBindingRenderer(compy.Adapter):
-    __implements__ = IRendererFactory,
+    __implements__ = IRenderer,
 
     def __call__(self, context, data):
         context.remember(data, formless.IBinding)
@@ -599,7 +599,7 @@
 
 
 class MethodBindingRenderer(compy.Adapter):
-    __implements__ = IRendererFactory,
+    __implements__ = IRenderer,
 
     def __call__(self, context, data):
         if data.getAttribute('invisible'):
@@ -641,7 +641,7 @@
 
 
 class ArgumentBindingRenderer(compy.Adapter):
-    __implements__ = IRendererFactory,
+    __implements__ = IRenderer,
 
     def __call__(self, context, argument):
         context.remember(data, formless.IBinding)
@@ -652,7 +652,7 @@
 
 
 class ActionRenderer(compy.Adapter):
-    __implements__ = IRendererFactory,
+    __implements__ = IRenderer,
 
     def __call__(self, context, action):
         submit = input(type="submit", name="freeform-action", value=action.name)
Index: nevow/inevow.py
===================================================================
--- nevow/inevow.py	(revision 134)
+++ nevow/inevow.py	(working copy)
@@ -39,6 +39,13 @@
         """
 
 
+class IRenderer(compy.Interface):
+    """A renderer is any callable with a (context, data) or (data) signature.
+    IRenderer is a marker interface to say that instances should be adapted to
+    be called.
+    """
+
+
 class IRendererFactory(compy.Interface):
     """A renderer factory is capable of taking a renderer directive (a string)
     and returning a callable which when called, will render a portion of DOM.
