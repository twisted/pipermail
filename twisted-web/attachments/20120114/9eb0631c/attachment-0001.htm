<tt>
&lt;pre&nbsp;style=&quot;background-color:rgb(255,255,255)&quot;&gt;Sorry&nbsp;about&nbsp;the&nbsp;double&nbsp;post.&nbsp;But&nbsp;copy/paste&nbsp;failed&nbsp;me.&nbsp;I&nbsp;left&nbsp;out&nbsp;part&nbsp;of&nbsp;the&nbsp;code.&lt;/pre&gt;&lt;pre&nbsp;style=&quot;background-color:rgb(255,255,255)&quot;&gt;Now&nbsp;included&lt;/pre&gt;&lt;pre&nbsp;style=&quot;background-color:rgb(255,255,255)&quot;&gt;<br>
&lt;br&gt;&lt;/pre&gt;&lt;pre&nbsp;style=&quot;background-color:rgb(255,255,255)&quot;&gt;I&nbsp;have&nbsp;been&nbsp;looking&nbsp;at&nbsp;JPCalderones&nbsp;example&nbsp;of&nbsp;using&nbsp;web.request&nbsp;with&nbsp;JSON<br>
which&nbsp;seems&nbsp;much&nbsp;like&nbsp;what&nbsp;I&nbsp;want.<br>
<br>
One&nbsp;thing&nbsp;I&nbsp;am&nbsp;not&nbsp;clear&nbsp;about&nbsp;is&nbsp;if&nbsp;I&nbsp;get&nbsp;a&nbsp;lot&nbsp;of&nbsp;queries&nbsp;coming&nbsp;in&nbsp;more<br>
or&nbsp;less&nbsp;simultaneously&nbsp;and&nbsp;I&nbsp;am&nbsp;using&nbsp;cooperate&nbsp;to&nbsp;allow&nbsp;other&nbsp;functions&nbsp;to<br>
run,&nbsp;will&nbsp;I&nbsp;need&nbsp;to&nbsp;guard&nbsp;against&nbsp;my&nbsp;data&nbsp;in&nbsp;a&nbsp;list&nbsp;being&nbsp;overwritten&nbsp;by<br>
subsequent&nbsp;requests.<br>
<br>
The&nbsp;way&nbsp;I&nbsp;see&nbsp;it&nbsp;the&nbsp;functions&nbsp;to&nbsp;read&nbsp;data&nbsp;and&nbsp;and&nbsp;store&nbsp;it&nbsp;in&nbsp;my&nbsp;list&nbsp;are<br>
in&nbsp;danger&nbsp;of&nbsp;impacting&nbsp;each&nbsp;other.<br>
<br>
The&nbsp;response&nbsp;is&nbsp;being&nbsp;built&nbsp;cooperatively&nbsp;bit&nbsp;by&nbsp;bit&nbsp;to&nbsp;permit&nbsp;other<br>
functions&nbsp;to&nbsp;run&nbsp;so&nbsp;it&nbsp;could&nbsp;happen&nbsp;that&nbsp;the&nbsp;next&nbsp;request&nbsp;overwrites&nbsp;my<br>
list&nbsp;where&nbsp;the&nbsp;database&nbsp;query&nbsp;is&nbsp;being&nbsp;stored.<br>
<br>
If&nbsp;this&nbsp;is&nbsp;a&nbsp;danger,&nbsp;then&nbsp;I&nbsp;need&nbsp;to&nbsp;prevent&nbsp;this,&nbsp;which&nbsp;seems&nbsp;to&nbsp;imply&nbsp;that<br>
I&nbsp;will&nbsp;need&nbsp;to&nbsp;block&nbsp;each&nbsp;request&nbsp;and&nbsp;not&nbsp;service&nbsp;another&nbsp;request&nbsp;until&nbsp;the<br>
previous&nbsp;one&nbsp;has&nbsp;completed.<br>
<br>
Have&nbsp;I&nbsp;got&nbsp;that&nbsp;right&nbsp;or&nbsp;am&nbsp;I&nbsp;way&nbsp;off&nbsp;target&nbsp;or&nbsp;have&nbsp;I&nbsp;missed&nbsp;the&nbsp;obvious<br>
<br>
What&nbsp;would&nbsp;be&nbsp;good&nbsp;is&nbsp;to&nbsp;keep&nbsp;on&nbsp;servicing&nbsp;requests&nbsp;so&nbsp;that&nbsp;the&nbsp;response&nbsp;is<br>
good&nbsp;but&nbsp;keep&nbsp;the&nbsp;data&nbsp;integrity.<br>
<br>
The&nbsp;test&nbsp;code&nbsp;I&nbsp;am&nbsp;using&nbsp;is&nbsp;JP&amp;#39;s&nbsp;with&nbsp;some&nbsp;minor&nbsp;variations&nbsp;shown&nbsp;below.&nbsp;I<br>
hope&nbsp;it&nbsp;formats&nbsp;correctly.<br>
<br>
Thanks&nbsp;for&nbsp;any&nbsp;help.<br>
<br>
Regards<br>
<br>
John&nbsp;Aherne<br>
<br>
#Asynchronous&nbsp;JSON<br>
#Today&nbsp;in&nbsp;#twisted.web&nbsp;the&nbsp;topic&nbsp;of&nbsp;generating&nbsp;large&nbsp;JSON&nbsp;responses<br>
#in&nbsp;a&nbsp;Twisted&nbsp;Web&nbsp;server&nbsp;came&nbsp;up.&nbsp;The&nbsp;problem&nbsp;was&nbsp;that&nbsp;the&nbsp;data&nbsp;being<br>
#serialized&nbsp;into&nbsp;JSON&nbsp;was&nbsp;so&nbsp;large&nbsp;that&nbsp;the&nbsp;JSON&nbsp;serialization&nbsp;process<br>
#itself&nbsp;would&nbsp;block&nbsp;the&nbsp;web&nbsp;server,&nbsp;preventing&nbsp;other&nbsp;requests&nbsp;from&nbsp;being<br>
#serviced.<br>
#<br>
#The&nbsp;first&nbsp;solution&nbsp;that&nbsp;came&nbsp;up&nbsp;was&nbsp;to&nbsp;split&nbsp;the&nbsp;web&nbsp;server&nbsp;into&nbsp;two<br>
#pieces,&nbsp;so&nbsp;that&nbsp;the&nbsp;URLs&nbsp;which&nbsp;could&nbsp;have&nbsp;these&nbsp;JSON&nbsp;responses&nbsp;were<br>
#served&nbsp;by&nbsp;a&nbsp;different&nbsp;process&nbsp;than&nbsp;was&nbsp;serving&nbsp;the&nbsp;rest.&nbsp;This&nbsp;is&nbsp;a<br>
#pretty&nbsp;decent&nbsp;solution,&nbsp;and&nbsp;it&nbsp;also&nbsp;provides&nbsp;the&nbsp;benefit&nbsp;of&nbsp;using&nbsp;extra<br>
#CPU&nbsp;cores&nbsp;if&nbsp;there&nbsp;are&nbsp;any&nbsp;available.&nbsp;In&nbsp;this&nbsp;case,&nbsp;it&nbsp;complicated<br>
#things&nbsp;a&nbsp;little&nbsp;since&nbsp;it&nbsp;meant&nbsp;sharing&nbsp;a&nbsp;session&nbsp;across&nbsp;two&nbsp;processes.<br>
#So&nbsp;we&nbsp;went&nbsp;looking&nbsp;for&nbsp;another&nbsp;approach.<br>
#<br>
#It&nbsp;turns&nbsp;out&nbsp;that&nbsp;the&nbsp;json&nbsp;module&nbsp;supports&nbsp;incremental&nbsp;serialization.<br>
#When&nbsp;I&nbsp;saw&nbsp;the&nbsp;JSONEncoder.iterencode&nbsp;method,&nbsp;I&nbsp;thought&nbsp;it&nbsp;would&nbsp;be<br>
#great&nbsp;used&nbsp;in&nbsp;combination&nbsp;with&nbsp;cooperate&nbsp;to&nbsp;create&nbsp;a&nbsp;producer.&nbsp;This<br>
#would&nbsp;let&nbsp;an&nbsp;application&nbsp;serialize&nbsp;a&nbsp;large&nbsp;structure&nbsp;to&nbsp;JSON&nbsp;without<br>
#multiple&nbsp;processes,&nbsp;threads,&nbsp;or&nbsp;unreasonably&nbsp;blocking&nbsp;the&nbsp;reactor.<br>
#<br>
#Here&amp;#39;s&nbsp;the&nbsp;little&nbsp;bit&nbsp;of&nbsp;glue&nbsp;necessary&nbsp;to&nbsp;make&nbsp;things&nbsp;work:<br>
import&nbsp;cgi<br>
from&nbsp;json&nbsp;import&nbsp;JSONEncoder<br>
from&nbsp;twisted.enterprise&nbsp;import&nbsp;adbapi<br>
from&nbsp;twisted.internet.task&nbsp;import&nbsp;cooperate<br>
<br>
#db&nbsp;=&nbsp;sqlite3.connect(&amp;#39;c:\\sqlite\\test.db&amp;#39;)<br>
#cur&nbsp;=&nbsp;db.cursor()<br>
dbpool&nbsp;=&nbsp;adbapi.ConnectionPool(&amp;quot;pyodbc&amp;quot;,&amp;quot;DSN=testsql&amp;quot;,cp_reconnect=&amp;#39;True&amp;#39;)<br>
<br>
class&nbsp;AsyncJSON(object):<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;value):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._value&nbsp;=&nbsp;value<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;beginProducing(self,&nbsp;consumer):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#print&nbsp;&amp;#39;value&amp;#39;,&nbsp;self._value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._consumer&nbsp;=&nbsp;consumer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._iterable&nbsp;=&nbsp;JSONEncoder().iterencode(self._value)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#print&nbsp;&amp;#39;iterable&amp;#39;,&nbsp;self._iterable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._consumer.registerProducer(self,&nbsp;True)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._task&nbsp;=&nbsp;cooperate(self._produce())<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;self._task.whenDone()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.addBoth(self._unregister)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;d<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;pauseProducing(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._task.pause()<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;resumeProducing(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._task.resume()<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;stopProducing(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._task.stop()<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;_produce(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;chunk&nbsp;in&nbsp;self._iterable:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#print&nbsp;&amp;#39;chunk&amp;#39;,&nbsp;chunk<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._consumer.write(chunk)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yield&nbsp;None<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;_unregister(self,&nbsp;passthrough):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._consumer.unregisterProducer()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;passthrough<br>
<br>
<br>
<br>
#By&nbsp;using&nbsp;the&nbsp;iterencode&nbsp;method,&nbsp;this&nbsp;avoids&nbsp;spending&nbsp;too&nbsp;much&nbsp;time<br>
#generating&nbsp;json&nbsp;output&nbsp;at&nbsp;once.&nbsp;Instead,&nbsp;a&nbsp;little&nbsp;bit&nbsp;of&nbsp;the&nbsp;input<br>
#will&nbsp;be&nbsp;serialized&nbsp;at&nbsp;a&nbsp;time,&nbsp;and&nbsp;each&nbsp;short&nbsp;resulting&nbsp;string&nbsp;is&nbsp;available<br>
#from&nbsp;the&nbsp;iterator&nbsp;returned&nbsp;by&nbsp;iterencode.<br>
#<br>
#By&nbsp;using&nbsp;cooperate,&nbsp;the&nbsp;_produce&nbsp;generator&nbsp;will&nbsp;iterated&nbsp;in&nbsp;a&nbsp;way&nbsp;that<br>
#lets&nbsp;it&nbsp;cooperate&nbsp;with&nbsp;the&nbsp;reactor&nbsp;and&nbsp;other&nbsp;event&nbsp;sources/handlers.<br>
#A&nbsp;few&nbsp;chunks&nbsp;of&nbsp;json&nbsp;data&nbsp;will&nbsp;be&nbsp;written&nbsp;to&nbsp;the&nbsp;consumer,&nbsp;then&nbsp;execution<br>
#will&nbsp;switch&nbsp;away&nbsp;to&nbsp;something&nbsp;else,&nbsp;then&nbsp;come&nbsp;back&nbsp;and&nbsp;a&nbsp;few&nbsp;more&nbsp;will<br>
#be&nbsp;written,&nbsp;and&nbsp;so&nbsp;on.<br>
#<br>
#And&nbsp;by&nbsp;using&nbsp;the&nbsp;producer/consumer&nbsp;interface,&nbsp;if&nbsp;the&nbsp;HTTP&nbsp;client&nbsp;which<br>
#issued&nbsp;the&nbsp;request&nbsp;doesn&amp;#39;t&nbsp;read&nbsp;the&nbsp;results&nbsp;as&nbsp;fast&nbsp;as&nbsp;they&amp;#39;re&nbsp;being<br>
#generated,&nbsp;the&nbsp;server&nbsp;will&nbsp;stop&nbsp;generating&nbsp;new&nbsp;output&nbsp;until&nbsp;the&nbsp;client<br>
#catches&nbsp;up.<br>
#<br>
#Altogether,&nbsp;this&nbsp;provides&nbsp;a&nbsp;very&nbsp;cool,&nbsp;efficient&nbsp;way&nbsp;to&nbsp;generate&nbsp;JSON<br>
#output.<br>
#<br>
#Here&amp;#39;s&nbsp;an&nbsp;example&nbsp;to&nbsp;make&nbsp;it&nbsp;easier&nbsp;to&nbsp;see&nbsp;how&nbsp;one&nbsp;might&nbsp;use&nbsp;AsyncJSON<br>
#in&nbsp;a&nbsp;resource:<br>
#<br>
from&nbsp;twisted.web.resource&nbsp;import&nbsp;Resource<br>
from&nbsp;twisted.web.server&nbsp;import&nbsp;NOT_DONE_YET<br>
from&nbsp;twisted.web.server&nbsp;import&nbsp;Site<br>
from&nbsp;twisted.internet&nbsp;import&nbsp;reactor<br>
<br>
def&nbsp;read_pcodes(pcode,&nbsp;request):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;quot;&amp;quot;&amp;quot;&nbsp;Read&nbsp;postcode&nbsp;data&nbsp;and&nbsp;premise&nbsp;data&nbsp;for&nbsp;single&nbsp;postocde&nbsp;&nbsp;&nbsp;&amp;quot;&amp;quot;&amp;quot;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;sql_mail&nbsp;=&nbsp;&amp;quot;&amp;quot;&amp;quot;select&nbsp;rcmplc01.substreet,rcmplc01.street,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rcmplc01.sublocality,&nbsp;rcmplc01.locality,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rcmplc01.town,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rcmplc01.postcode,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rcmplc02.data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;rcmplc01<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left&nbsp;outer&nbsp;join&nbsp;rcmplc02<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on&nbsp;rcmplc01.postcode&nbsp;=&nbsp;rcmplc02.postcode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;where&nbsp;rcmplc01.postcode&nbsp;=&nbsp;?<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;quot;&amp;quot;&amp;quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;pcode&nbsp;=&nbsp;pcode.strip().upper()<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;run():<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;dbpool.runQuery(sql_mail,(pcode,))<br>
&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;run()<br>
&nbsp;&nbsp;&nbsp;&nbsp;d.addCallback(read_result,&nbsp;request)<br>
&nbsp;&nbsp;&nbsp;&nbsp;d.addErrback(read_failure,request)<br>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;d<br>
<br>
def&nbsp;read_failure(o,&nbsp;request):<br>
&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&amp;#39;failure&amp;#39;,&nbsp;str(o)<br>
&nbsp;&nbsp;&nbsp;&nbsp;request.finish()<br>
<br>
<br>
def&nbsp;read_result(res,&nbsp;request):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;quot;&amp;quot;&amp;quot;&nbsp;read&nbsp;result&nbsp;for&nbsp;postcode&nbsp;lookup.&nbsp;Build&nbsp;return&nbsp;list&amp;quot;&amp;quot;&amp;quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#print&nbsp;&amp;#39;res&amp;#39;,&nbsp;res<br>
&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&amp;#39;len&nbsp;res&amp;#39;,&nbsp;len(res)<br>
&nbsp;&nbsp;&nbsp;&nbsp;my_list&nbsp;=&nbsp;[]<br>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;item&nbsp;in&nbsp;res:<br>
my_list.append([item[0],&nbsp;item[1],&nbsp;item[2],&nbsp;item[3],&nbsp;item[4],&nbsp;item[5]])<br>
&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;AsyncJSON(my_list).beginProducing(request)<br>
&nbsp;&nbsp;&nbsp;&nbsp;d.addCallback(lambda&nbsp;ignored:&nbsp;request.finish())<br>
&nbsp;&nbsp;&nbsp;&nbsp;d.addErrback(got_error,&nbsp;request)<br>
&lt;br&gt;&lt;/pre&gt;&lt;pre&nbsp;style=&quot;background-color:rgb(255,255,255)&quot;&gt;class&nbsp;PostcodeFinder(Resource):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;quot;&amp;quot;&amp;quot;&nbsp;Handle&nbsp;http&nbsp;POST&nbsp;requests&nbsp;&nbsp;for&nbsp;postcode&nbsp;lookup&amp;quot;&amp;quot;&amp;quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;render_POST(self,&nbsp;request):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&amp;#39;req&amp;#39;,&nbsp;request.args<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;request.args.get(&amp;#39;pcode&amp;#39;,&nbsp;None):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pcode&nbsp;=&nbsp;cgi.escape(request.args[&amp;#39;pcode&amp;#39;][0]).strip().upper()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(pcode[-3:][0].isdigit()&nbsp;and&nbsp;pcode[-2:].isalpha()&nbsp;and&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len(pcode[:len(pcode)-3].strip())&nbsp;&amp;lt;&nbsp;5):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;postcode2&nbsp;=&nbsp;&amp;#39;%s&nbsp;%s&amp;#39;&nbsp;%&nbsp;(pcode[:len(pcode)-3].strip(),pcode[-3:])<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;read_pcodes(postcode2,&nbsp;request)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&amp;#39;Not&nbsp;a&nbsp;VALID&nbsp;REQUEST&amp;#39;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif&nbsp;request.args.get(&amp;#39;street&amp;#39;,&nbsp;None):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m25&nbsp;=&nbsp;True&nbsp;if&nbsp;request.args.get(&amp;#39;M25&amp;#39;,&nbsp;None)&nbsp;else&nbsp;False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;read_street(cgi.escape(request.args[&amp;#39;street&amp;#39;][0]).strip().upper(),&nbsp;m25,&nbsp;request)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif&nbsp;request.args.get(&amp;#39;orgname&amp;#39;,&nbsp;None):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;read_orgname(cgi.escape(request.args[&amp;#39;orgname&amp;#39;][0]).strip().upper(),&nbsp;request)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&amp;#39;Not&nbsp;a&nbsp;VALID&nbsp;REQUEST&amp;#39;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;NOT_DONE_YET<br>
&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;pre&nbsp;style=&quot;background-color:rgb(255,255,255)&quot;&gt;root&nbsp;=&nbsp;Resource()<br>
root.putChild(&amp;quot;json&amp;quot;,&nbsp;PostcodeFinder())<br>
factory&nbsp;=&nbsp;Site(root)<br>
reactor.listenTCP(8086,&nbsp;factory)<br>
reactor.run()&lt;/pre&gt;<br>

</tt>
