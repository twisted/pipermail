<tt>
I&nbsp;have&nbsp;been&nbsp;looking&nbsp;at&nbsp;JPCalderones&nbsp;example&nbsp;of&nbsp;using&nbsp;web.request&nbsp;with&nbsp;JSON&nbsp;which&nbsp;seems&nbsp;much&nbsp;like&nbsp;what&nbsp;I&nbsp;want.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One&nbsp;thing&nbsp;I&nbsp;am&nbsp;not&nbsp;clear&nbsp;about&nbsp;is&nbsp;if&nbsp;I&nbsp;get&nbsp;a&nbsp;lot&nbsp;of&nbsp;queries&nbsp;coming&nbsp;in&nbsp;more&nbsp;or&nbsp;less&nbsp;simultaneously&nbsp;and&nbsp;I&nbsp;am&nbsp;using&nbsp;cooperate&nbsp;to&nbsp;allow&nbsp;other&nbsp;functions&nbsp;to&nbsp;run,&nbsp;will&nbsp;I&nbsp;need&nbsp;to&nbsp;guard&nbsp;against&nbsp;my&nbsp;data&nbsp;in&nbsp;a&nbsp;list&nbsp;being&nbsp;overwritten&nbsp;by&nbsp;subsequent&nbsp;requests.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;way&nbsp;I&nbsp;see&nbsp;it&nbsp;the&nbsp;functions&nbsp;to&nbsp;read&nbsp;data&nbsp;and&nbsp;and&nbsp;store&nbsp;it&nbsp;in&nbsp;my&nbsp;list&nbsp;are&nbsp;in&nbsp;danger&nbsp;of&nbsp;impacting&nbsp;each&nbsp;other.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;response&nbsp;is&nbsp;being&nbsp;built&nbsp;cooperatively&nbsp;bit&nbsp;by&nbsp;bit&nbsp;to&nbsp;permit&nbsp;other&nbsp;functions&nbsp;to&nbsp;run&nbsp;so&nbsp;it&nbsp;could&nbsp;happen&nbsp;that&nbsp;the&nbsp;next&nbsp;request&nbsp;overwrites&nbsp;my&nbsp;list&nbsp;where&nbsp;the&nbsp;database&nbsp;query&nbsp;is&nbsp;being&nbsp;stored.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If&nbsp;this&nbsp;is&nbsp;a&nbsp;danger,&nbsp;then&nbsp;I&nbsp;need&nbsp;to&nbsp;prevent&nbsp;this,&nbsp;which&nbsp;seems&nbsp;to&nbsp;imply&nbsp;that&nbsp;I&nbsp;will&nbsp;need&nbsp;to&nbsp;block&nbsp;each&nbsp;request&nbsp;and&nbsp;not&nbsp;service&nbsp;another&nbsp;request&nbsp;until&nbsp;the&nbsp;previous&nbsp;one&nbsp;has&nbsp;completed.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;<br>
Have&nbsp;I&nbsp;got&nbsp;that&nbsp;right&nbsp;or&nbsp;am&nbsp;I&nbsp;way&nbsp;off&nbsp;target&nbsp;or&nbsp;have&nbsp;I&nbsp;missed&nbsp;the&nbsp;obvious&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What&nbsp;would&nbsp;be&nbsp;good&nbsp;is&nbsp;to&nbsp;keep&nbsp;on&nbsp;servicing&nbsp;requests&nbsp;so&nbsp;that&nbsp;the&nbsp;response&nbsp;is&nbsp;good&nbsp;but&nbsp;keep&nbsp;the&nbsp;data&nbsp;integrity.&lt;/div&gt;&lt;div&gt;&lt;br&gt;<br>
&lt;/div&gt;&lt;div&gt;The&nbsp;test&nbsp;code&nbsp;I&nbsp;am&nbsp;using&nbsp;is&nbsp;JP&amp;#39;s&nbsp;with&nbsp;some&nbsp;minor&nbsp;variations&nbsp;shown&nbsp;below.&nbsp;I&nbsp;hope&nbsp;it&nbsp;formats&nbsp;correctly.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks&nbsp;for&nbsp;any&nbsp;help.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;<br>
John&nbsp;Aherne&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;#Asynchronous&nbsp;JSON&lt;/div&gt;&lt;div&gt;#Today&nbsp;in&nbsp;#twisted.web&nbsp;the&nbsp;topic&nbsp;of&nbsp;generating&nbsp;large&nbsp;JSON&nbsp;responses &lt;/div&gt;&lt;div&gt;#in&nbsp;a&nbsp;Twisted&nbsp;Web&nbsp;server&nbsp;came&nbsp;up.&nbsp;The&nbsp;problem&nbsp;was&nbsp;that&nbsp;the&nbsp;data&nbsp;being &lt;/div&gt;<br>
&lt;div&gt;#serialized&nbsp;into&nbsp;JSON&nbsp;was&nbsp;so&nbsp;large&nbsp;that&nbsp;the&nbsp;JSON&nbsp;serialization&nbsp;process&lt;/div&gt;&lt;div&gt;#itself&nbsp;would&nbsp;block&nbsp;the&nbsp;web&nbsp;server,&nbsp;preventing&nbsp;other&nbsp;requests&nbsp;from&nbsp;being &lt;/div&gt;&lt;div&gt;#serviced.&lt;/div&gt;&lt;div&gt;#&lt;/div&gt;&lt;div&gt;#The&nbsp;first&nbsp;solution&nbsp;that&nbsp;came&nbsp;up&nbsp;was&nbsp;to&nbsp;split&nbsp;the&nbsp;web&nbsp;server&nbsp;into&nbsp;two&lt;/div&gt;<br>
&lt;div&gt;#pieces,&nbsp;so&nbsp;that&nbsp;the&nbsp;URLs&nbsp;which&nbsp;could&nbsp;have&nbsp;these&nbsp;JSON&nbsp;responses&nbsp;were &lt;/div&gt;&lt;div&gt;#served&nbsp;by&nbsp;a&nbsp;different&nbsp;process&nbsp;than&nbsp;was&nbsp;serving&nbsp;the&nbsp;rest.&nbsp;This&nbsp;is&nbsp;a &lt;/div&gt;&lt;div&gt;#pretty&nbsp;decent&nbsp;solution,&nbsp;and&nbsp;it&nbsp;also&nbsp;provides&nbsp;the&nbsp;benefit&nbsp;of&nbsp;using&nbsp;extra&lt;/div&gt;<br>
&lt;div&gt;#CPU&nbsp;cores&nbsp;if&nbsp;there&nbsp;are&nbsp;any&nbsp;available.&nbsp;In&nbsp;this&nbsp;case,&nbsp;it&nbsp;complicated &lt;/div&gt;&lt;div&gt;#things&nbsp;a&nbsp;little&nbsp;since&nbsp;it&nbsp;meant&nbsp;sharing&nbsp;a&nbsp;session&nbsp;across&nbsp;two&nbsp;processes.&lt;/div&gt;&lt;div&gt;#So&nbsp;we&nbsp;went&nbsp;looking&nbsp;for&nbsp;another&nbsp;approach.&lt;/div&gt;&lt;div&gt;#&lt;/div&gt;<br>
&lt;div&gt;#It&nbsp;turns&nbsp;out&nbsp;that&nbsp;the&nbsp;json&nbsp;module&nbsp;supports&nbsp;incremental&nbsp;serialization.&lt;/div&gt;&lt;div&gt;#When&nbsp;I&nbsp;saw&nbsp;the&nbsp;JSONEncoder.iterencode&nbsp;method,&nbsp;I&nbsp;thought&nbsp;it&nbsp;would&nbsp;be &lt;/div&gt;&lt;div&gt;#great&nbsp;used&nbsp;in&nbsp;combination&nbsp;with&nbsp;cooperate&nbsp;to&nbsp;create&nbsp;a&nbsp;producer.&nbsp;This &lt;/div&gt;<br>
&lt;div&gt;#would&nbsp;let&nbsp;an&nbsp;application&nbsp;serialize&nbsp;a&nbsp;large&nbsp;structure&nbsp;to&nbsp;JSON&nbsp;without &lt;/div&gt;&lt;div&gt;#multiple&nbsp;processes,&nbsp;threads,&nbsp;or&nbsp;unreasonably&nbsp;blocking&nbsp;the&nbsp;reactor.&lt;/div&gt;&lt;div&gt;#&lt;/div&gt;&lt;div&gt;#Here&amp;#39;s&nbsp;the&nbsp;little&nbsp;bit&nbsp;of&nbsp;glue&nbsp;necessary&nbsp;to&nbsp;make&nbsp;things&nbsp;work:&lt;/div&gt;<br>
&lt;div&gt;import&nbsp;cgi&lt;/div&gt;&lt;div&gt;from&nbsp;json&nbsp;import&nbsp;JSONEncoder&lt;/div&gt;&lt;div&gt;from&nbsp;twisted.enterprise&nbsp;import&nbsp;adbapi &lt;/div&gt;&lt;div&gt;from&nbsp;twisted.internet.task&nbsp;import&nbsp;cooperate&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;#db&nbsp;=&nbsp;sqlite3.connect(&amp;#39;c:\\sqlite\\test.db&amp;#39;)&lt;/div&gt;<br>
&lt;div&gt;#cur&nbsp;=&nbsp;db.cursor()&lt;/div&gt;&lt;div&gt;dbpool&nbsp;=&nbsp;adbapi.ConnectionPool(&amp;quot;pyodbc&amp;quot;,&amp;quot;DSN=testsql&amp;quot;,cp_reconnect=&amp;#39;True&amp;#39;)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;class&nbsp;AsyncJSON(object):&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;def&nbsp;__init__(self,&nbsp;value):&lt;/div&gt;<br>
&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;self._value&nbsp;=&nbsp;value&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;def&nbsp;beginProducing(self,&nbsp;consumer):&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;#print&nbsp;&amp;#39;value&amp;#39;,&nbsp;self._value&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;self._consumer&nbsp;=&nbsp;consumer&lt;/div&gt;&lt;div&gt;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;self._iterable&nbsp;=&nbsp;JSONEncoder().iterencode(self._value)&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;#print&nbsp;&amp;#39;iterable&amp;#39;,&nbsp;self._iterable&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;self._consumer.registerProducer(self,&nbsp;True)&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;self._task&nbsp;=&nbsp;cooperate(self._produce())&lt;/div&gt;<br>
&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;d&nbsp;=&nbsp;self._task.whenDone()&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;d.addBoth(self._unregister)&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;return&nbsp;d&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;def&nbsp;pauseProducing(self):&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;self._task.pause()&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;def&nbsp;resumeProducing(self):&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;self._task.resume()&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;def&nbsp;stopProducing(self):&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;self._task.stop()&lt;/div&gt;&lt;div&gt;&lt;br&gt;<br>
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;def&nbsp;_produce(self):&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;for&nbsp;chunk&nbsp;in&nbsp;self._iterable:&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#print&nbsp;&amp;#39;chunk&amp;#39;,&nbsp;chunk&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self._consumer.write(chunk)&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;yield&nbsp;None&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;def&nbsp;_unregister(self,&nbsp;passthrough): &lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;self._consumer.unregisterProducer()&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;return&nbsp;passthrough&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;<br>
#By&nbsp;using&nbsp;the&nbsp;iterencode&nbsp;method,&nbsp;this&nbsp;avoids&nbsp;spending&nbsp;too&nbsp;much&nbsp;time&lt;/div&gt;&lt;div&gt;#generating&nbsp;json&nbsp;output&nbsp;at&nbsp;once.&nbsp;Instead,&nbsp;a&nbsp;little&nbsp;bit&nbsp;of&nbsp;the&nbsp;input &lt;/div&gt;&lt;div&gt;#will&nbsp;be&nbsp;serialized&nbsp;at&nbsp;a&nbsp;time,&nbsp;and&nbsp;each&nbsp;short&nbsp;resulting&nbsp;string&nbsp;is&nbsp;available&lt;/div&gt;<br>
&lt;div&gt;#from&nbsp;the&nbsp;iterator&nbsp;returned&nbsp;by&nbsp;iterencode.&lt;/div&gt;&lt;div&gt;#&lt;/div&gt;&lt;div&gt;#By&nbsp;using&nbsp;cooperate,&nbsp;the&nbsp;_produce&nbsp;generator&nbsp;will&nbsp;iterated&nbsp;in&nbsp;a&nbsp;way&nbsp;that&lt;/div&gt;&lt;div&gt;#lets&nbsp;it&nbsp;cooperate&nbsp;with&nbsp;the&nbsp;reactor&nbsp;and&nbsp;other&nbsp;event&nbsp;sources/handlers.&lt;/div&gt;<br>
&lt;div&gt;#A&nbsp;few&nbsp;chunks&nbsp;of&nbsp;json&nbsp;data&nbsp;will&nbsp;be&nbsp;written&nbsp;to&nbsp;the&nbsp;consumer,&nbsp;then&nbsp;execution &lt;/div&gt;&lt;div&gt;#will&nbsp;switch&nbsp;away&nbsp;to&nbsp;something&nbsp;else,&nbsp;then&nbsp;come&nbsp;back&nbsp;and&nbsp;a&nbsp;few&nbsp;more&nbsp;will&lt;/div&gt;&lt;div&gt;#be&nbsp;written,&nbsp;and&nbsp;so&nbsp;on.&lt;/div&gt;&lt;div&gt;#&lt;/div&gt;&lt;div&gt;#And&nbsp;by&nbsp;using&nbsp;the&nbsp;producer/consumer&nbsp;interface,&nbsp;if&nbsp;the&nbsp;HTTP&nbsp;client&nbsp;which&lt;/div&gt;<br>
&lt;div&gt;#issued&nbsp;the&nbsp;request&nbsp;doesn&amp;#39;t&nbsp;read&nbsp;the&nbsp;results&nbsp;as&nbsp;fast&nbsp;as&nbsp;they&amp;#39;re&nbsp;being&lt;/div&gt;&lt;div&gt;#generated,&nbsp;the&nbsp;server&nbsp;will&nbsp;stop&nbsp;generating&nbsp;new&nbsp;output&nbsp;until&nbsp;the&nbsp;client&lt;/div&gt;&lt;div&gt;#catches&nbsp;up.&lt;/div&gt;&lt;div&gt;#&lt;/div&gt;&lt;div&gt;#Altogether,&nbsp;this&nbsp;provides&nbsp;a&nbsp;very&nbsp;cool,&nbsp;efficient&nbsp;way&nbsp;to&nbsp;generate&nbsp;JSON&lt;/div&gt;<br>
&lt;div&gt;#output.&lt;/div&gt;&lt;div&gt;#&lt;/div&gt;&lt;div&gt;#Here&amp;#39;s&nbsp;an&nbsp;example&nbsp;to&nbsp;make&nbsp;it&nbsp;easier&nbsp;to&nbsp;see&nbsp;how&nbsp;one&nbsp;might&nbsp;use&nbsp;AsyncJSON &lt;/div&gt;&lt;div&gt;#in&nbsp;a&nbsp;resource:&lt;/div&gt;&lt;div&gt;#&lt;/div&gt;&lt;div&gt;from&nbsp;twisted.web.resource&nbsp;import&nbsp;Resource&lt;/div&gt;&lt;div&gt;from&nbsp;twisted.web.server&nbsp;import&nbsp;NOT_DONE_YET&lt;/div&gt;<br>
&lt;div&gt;from&nbsp;twisted.web.server&nbsp;import&nbsp;Site&lt;/div&gt;&lt;div&gt;from&nbsp;twisted.internet&nbsp;import&nbsp;reactor&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;def&nbsp;read_pcodes(pcode,&nbsp;request):&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;&amp;quot;&amp;quot;&amp;quot;&nbsp;Read&nbsp;postcode&nbsp;data&nbsp;and&nbsp;premise&nbsp;data&nbsp;for&nbsp;single&nbsp;postocde&nbsp; &nbsp;&amp;quot;&amp;quot;&amp;quot;&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;sql_mail&nbsp;=&nbsp;&amp;quot;&amp;quot;&amp;quot;select&nbsp;rcmplc01.substreet,rcmplc01.street,&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rcmplc01.sublocality,&nbsp;rcmplc01.locality,&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rcmplc01.town, &lt;/div&gt;<br>
&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rcmplc01.postcode,&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rcmplc02.data&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; from&nbsp;rcmplc01&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; left&nbsp;outer&nbsp;join&nbsp;rcmplc02 &lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; on&nbsp;rcmplc01.postcode&nbsp;=&nbsp;rcmplc02.postcode&lt;/div&gt;<br>
&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; where&nbsp;rcmplc01.postcode&nbsp;=&nbsp;?&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;quot;&amp;quot;&amp;quot;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;pcode&nbsp;=&nbsp;pcode.strip().upper()&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;def&nbsp;run():&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp;return&nbsp;dbpool.runQuery(sql_mail,(pcode,))&lt;/div&gt;<br>
&lt;div&gt; &nbsp; &nbsp;d&nbsp;=&nbsp;run()&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;d.addCallback(read_result,&nbsp;request)&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;d.addErrback(read_failure,request)&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;return&nbsp;d&lt;/div&gt;&lt;div&gt; &nbsp;  &lt;/div&gt;&lt;div&gt;def&nbsp;read_failure(o,&nbsp;request):&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;print&nbsp;&amp;#39;failure&amp;#39;,&nbsp;str(o)&lt;/div&gt;<br>
&lt;div&gt; &nbsp; &nbsp;request.finish()&lt;/div&gt;&lt;div&gt; &nbsp;  &lt;/div&gt;&lt;div&gt; &nbsp;  &lt;/div&gt;&lt;div&gt;def&nbsp;read_result(res,&nbsp;request):&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;&amp;quot;&amp;quot;&amp;quot;&nbsp;read&nbsp;result&nbsp;for&nbsp;postcode&nbsp;lookup.&nbsp;Build&nbsp;return&nbsp;list&amp;quot;&amp;quot;&amp;quot;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;#print&nbsp;&amp;#39;res&amp;#39;,&nbsp;res&lt;/div&gt;<br>
&lt;div&gt; &nbsp; &nbsp;print&nbsp;&amp;#39;len&nbsp;res&amp;#39;,&nbsp;len(res)&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;my_list&nbsp;=&nbsp;[]&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;for&nbsp;item&nbsp;in&nbsp;res:&lt;/div&gt;&lt;div&gt;&lt;span&nbsp;class=&quot;Apple-tab-span&quot;&nbsp;style=&quot;white-space:pre&quot;&gt;&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&lt;/span&gt;my_list.append([item[0],&nbsp;item[1],&nbsp;item[2],&nbsp;item[3],&nbsp;item[4],&nbsp;item[5]])&lt;/div&gt;<br>
&lt;div&gt; &nbsp; &nbsp;d&nbsp;=&nbsp;AsyncJSON(my_list).beginProducing(request)&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;d.addCallback(lambda&nbsp;ignored:&nbsp;request.finish())&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp;d.addErrback(got_error,&nbsp;request)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;root&nbsp;=&nbsp;Resource()&lt;/div&gt;&lt;div&gt;root.putChild(&amp;quot;json&amp;quot;,&nbsp;PostcodeFinder())&lt;/div&gt;<br>
&lt;div&gt;factory&nbsp;=&nbsp;Site(root)&lt;/div&gt;&lt;div&gt;reactor.listenTCP(8086,&nbsp;factory)&lt;/div&gt;&lt;div&gt;reactor.run()&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;<br>

</tt>
