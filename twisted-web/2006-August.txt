From alex.greif at gmail.com  Tue Aug  1 01:22:49 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Tue Aug  1 01:22:57 2006
Subject: [Twisted-web] FileSaver bug
In-Reply-To: <44CE3391.7040709@twistedmatrix.com>
References: <778770d80607310836qd59b7ech992de12d0f83d0ba@mail.gmail.com>
	<44CE3391.7040709@twistedmatrix.com>
Message-ID: <778770d80607312322p24afa709wba0b63dad35e19fa@mail.gmail.com>

Hi Cory,
at http://twistedmatrix.com/trac I see no button like "new ticket" for
adding this defekt. I can only browse the tickets :(
Do I need to login? If yes how can I register?

to generate a unittest is quite easy, just create a file with a LF as
line separator, and the uploaded file will hav a CR+LF.

Alex.


On 7/31/06, Cory Dodt <corydodt@twistedmatrix.com> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hi Alex,
>
> Please submit a bug at <http://twistedmatrix.com/trac>.  The fix for this one
> is trivial, but it also needs a failing unit test.  (The current tests would
> never have noticed this bug, which is indeed serious.)
>
>
> C
>
>
> Alex Greif wrote:
> > Hi
> >
> > On windows XP (python 2.4.2) the latest svn checkout produces the
> > following bug:
> > FileSaver converts LF to CRLF automatically, even in binary files!!
> >
> > I tried to upload files with the following code:
> >
> >  child_uploadfile = static.FileSaver(destination='d:/agreif/tmp',
> >                                                expectedFields=['filename'],
> >                                                maxBytes=10000000,
> >
> > allowedTypes=[http_headers.MimeType('text', 'x-python'),
> >
> > http_headers.MimeType('application','x-zip-compressed')])
> >
> > here is the hexdump of two samples.
> > You see that in front of every occurrance of "0A" a "0D" is inserted.
> >
> > Sample 1: textfile
> > orig:
> > 68616C6C6F0A
> > uploaded:
> > 68616C6C6F0D0A
> >
> > Sample 2 binary file (zip)
> > orig:
> > 504B03040A00000000001589FF34D13172B90500000005000000100000004E6575205465787464617465692E707968616C6C6F504B010214000A00000000001589FF34D13172B905000000050000001000000000000000010020000000000000004E6575205465787464617465692E7079504B050600000000010001003E000000330000000000
> >
> > uploaded:
> > 504B03040D0A00000000001589FF34D13172B90500000005000000100000004E6575205465787464617465692E707968616C6C6F504B010214000D0A00000000001589FF34D13172B905000000050000001000000000000000010020000000000000004E6575205465787464617465692E7079504B050600000000010001003E000000330000000000
> >
> >
> >
> > Alex.
> >
> > _______________________________________________
> > Twisted-web mailing list
> > Twisted-web@twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.2 (MingW32)
> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org
>
> iD8DBQFEzjOR3A5SrXAiHQcRAjQMAJ49Y983MMvo/Quq3rnH3PGhvcIQWwCghSJY
> yXe/AiGyNMl/63jTfjZpqSE=
> =EEfu
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From nico at tekNico.net  Tue Aug  1 02:18:40 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Tue Aug  1 02:18:50 2006
Subject: [Twisted-web] Re: FileSaver bug
In-Reply-To: <778770d80607312322p24afa709wba0b63dad35e19fa@mail.gmail.com>
References: <778770d80607310836qd59b7ech992de12d0f83d0ba@mail.gmail.com>	<44CE3391.7040709@twistedmatrix.com>
	<778770d80607312322p24afa709wba0b63dad35e19fa@mail.gmail.com>
Message-ID: <44CF0050.1090108@tekNico.net>

> at http://twistedmatrix.com/trac I see no button like "new ticket" for
> adding this defekt. I can only browse the tickets :(
> Do I need to login?

Yes, that's right.


> If yes how can I register?

What about the "Register" link, on the top right? :-)

Remember to add your login name to the Cc: field of the ticket you create
(or any other one you are interested in): you'll receive email at each change.


-- 
Nicola Larosa - http://www.tekNico.net/

SOAP-based services are called "Web Services" because their proponents
wish to partake of the Web's success -- yet they don't build on its
core technologies, URIs and HTTP. Somehow many have equated SOAP and
Web Services but HTTP has been in Service on the Web for more than a
decade now and has not yet hit its prime. -- Paul Prescod, April 2002


From alex.greif at gmail.com  Tue Aug  1 02:41:17 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Tue Aug  1 02:41:27 2006
Subject: [Twisted-web] Re: FileSaver bug
In-Reply-To: <44CF0050.1090108@tekNico.net>
References: <778770d80607310836qd59b7ech992de12d0f83d0ba@mail.gmail.com>
	<44CE3391.7040709@twistedmatrix.com>
	<778770d80607312322p24afa709wba0b63dad35e19fa@mail.gmail.com>
	<44CF0050.1090108@tekNico.net>
Message-ID: <778770d80608010041r3807d87csf68a2e1290efd052@mail.gmail.com>

thanks,
the defect is now submitted :)

Alex.

On 8/1/06, Nicola Larosa <nico@teknico.net> wrote:
> > at http://twistedmatrix.com/trac I see no button like "new ticket" for
> > adding this defekt. I can only browse the tickets :(
> > Do I need to login?
>
> Yes, that's right.
>
>
> > If yes how can I register?
>
> What about the "Register" link, on the top right? :-)
>
> Remember to add your login name to the Cc: field of the ticket you create
> (or any other one you are interested in): you'll receive email at each change.
>
>
> --
> Nicola Larosa - http://www.tekNico.net/
>
> SOAP-based services are called "Web Services" because their proponents
> wish to partake of the Web's success -- yet they don't build on its
> core technologies, URIs and HTTP. Somehow many have equated SOAP and
> Web Services but HTTP has been in Service on the Web for more than a
> decade now and has not yet hit its prime. -- Paul Prescod, April 2002
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From manlio_perillo at libero.it  Tue Aug  1 03:40:20 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Aug  1 03:37:59 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <20060731205247.1717.2093160798.divmod.quotient.9709@ohm>
References: <20060731205247.1717.2093160798.divmod.quotient.9709@ohm>
Message-ID: <44CF1374.8040906@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Mon, 31 Jul 2006 21:05:26 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Hi again.
>>
>> I have read the draft implementation of guard in Valentino's sandbox and
>> I like it.
>>
>> However I have some questions:
>> - why the ISessionMenager interface does not include a name attribute
>>  (since the default Session class uses the private _name)?
> 
> The reason why it misses the name in the interface is that it's not
> meant to be accessible from the outside. It's a pretty important
> internal detail in _this_ SessionManager implementation. There might be
> many other ways to deal with distributed session rather than simply
> using name attribute on the sessionmanager and ISessionManager ought to
> be as generic as possible.
> 

Ok.
Now I also understand your concern about identifying who creates a session.

Only a question: in the example you only store (in the database)
"permanent" sessions.
Not sure about this, but I think that all sessions, except those for
anonymous access, should be persisted in the database (to avoid problems
in a distributed system).

>> - why Session.authenticatedAs has to be a property?
> 
> Because I wasn't able to find a better name that was somewhat compatible
> to using an explicit get/set. And because it's cleaner IMHO.
> 

Not sure. ;-)

>> - I think that there is no need to store tha password but only the
>>  username, so authenticatedAs -> avatarID
> 
> Not really... Authentication is rerun for each request because the
> avatar is not saved and this is the most important detail of that new
> guard. 

Here I'm not sure to understand.
You mean that the avatarID (username) is not stored in the session
object? This seems not the case.

Another thing: is it really necessary to create a session for anonymous
access?

And what about to store the authenticated username in the context
(instead of hacking on the site.makeSession)?

> Also the avatarId is not available in guard because it's a cred
> implementation detail. And the avatarId might be any object. But I'm
> open for alternative solutions.
> 


>> - what's the use for the guard attribute in Session?
> 
> It's explained in the docstring of loggedIn (somehow). It's because it
> makes
> it easier to access the guard that created the session.
> 
>> - I think that ISessionManager should not have the loggedIn method.
> 
> Why? It allows to change how the application should react to a successfully
> logged in session without going through guard code overriding a
> callback, of a very big method, defined as a closure. IMHO it's a lot
> cleaner to have it this way unless your reasons are sensible.
> 

I'm against this because I whould like to have a realy reusable
SessionManager.

The SessionManager is really an useful class and it should not depend
over a SessionWrapper (because I can choose to not use a SessionWrapper
al all).

>> - as I can see the code in SessionManager._tick causes the log
>>  "Session %r expired" to be issued two times.
> 
> True.
> 
>> - what's the use for mind in a web authentication?
> 
> I have no idea. There might be a usage, why should you make it impossible
> to have a usage of it?
> 
>> - why credInterface is a variable? It can be something different from
>>  IResource?
> 
> iweb2.IResource? Anyway this is absolutely not a valid concern it's simply
> a refactoring to allow changing that interface from application level
> code (again without the need to dig through the code).
> 

Yes, this is not a valid concern but I like to have code that is as much
symple as possible, where I don't have to try to understand every
statement. ;-)

> [...]

> Also keep in mind that the most developed version of that code lies in:
> http://hg.stiq.it/index.cgi/stiq?f=b9671c61c96b;file=stiq/guard.py;style=gitweb
> 
> and
> http://hg.stiq.it/index.cgi/stiq?f=eef00c91fd79;file=stiq/session.py;style=gitweb
>


Ok, thanks.
Now I'm trying to learn as much as possible about web authentication
because it seems that it does not exists an unique solution.

As an example a valid alternative to store state in the server is to
store it in the cookie.

NEVOW_SESSION="username=manlio&last_accessed=...&created=..."

of course using some cryptography.

This has the advantage to work "as is" in a distributed system and to
not depend on the number of sessions/users.




Thanks and regards  Manlio Perillo

From dialtone at divmod.com  Tue Aug  1 04:53:49 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Aug  1 04:53:57 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <44CF1374.8040906@libero.it>
Message-ID: <20060801095349.1717.926465725.divmod.quotient.10632@ohm>

On Tue, 01 Aug 2006 10:40:20 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Only a question: in the example you only store (in the database)
>"permanent" sessions.
>Not sure about this, but I think that all sessions, except those for
>anonymous access, should be persisted in the database (to avoid problems
>in a distributed system).

Not really unless you want your system on its knees begging for some holidays. Just think about the chance for 1M people to visit your website each day. Your sessions database will shortly be the biggest bottleneck of the application.

>Here I'm not sure to understand.
>You mean that the avatarID (username) is not stored in the session
>object? This seems not the case.

First of all the avatarID is not the username. The avatarID is the avatarID. Then I repeat that I do not store the avatar anywhere which means that I have to pass through portal.login() for each request and portal.login() requires full credentials. Then I cannot get the avatarId because it is only passed to requestAvatar and the SessionWrapper only sees the result of that call.

>Another thing: is it really necessary to create a session for anonymous
>access?

This is an interesting question. I think I'll probably say yes.

>And what about to store the authenticated username in the context
>(instead of hacking on the site.makeSession)?

Maybe you didn't notice but... The context is going away we have been talking about this for ages and using the context means that the code will need to be trashed in not so long.

>I'm against this because I whould like to have a realy reusable
>SessionManager.
>
>The SessionManager is really an useful class and it should not depend
>over a SessionWrapper (because I can choose to not use a SessionWrapper
>al all).

And what does this have to do with the loggedIn method? The reason it is like that is because cookies are dealt with in the sessionwrapper and not in the sessionmanager, but having 2 places to check the rememberMe argument was sub-optimal. If you don't need the sessionmanager you can clearly avoid implementing loggedIn at all, but this doesn't mean the rest of the developers don't need such a callback.

>Yes, this is not a valid concern but I like to have code that is as much
>symple as possible, where I don't have to try to understand every
>statement. ;-)

Which is yet another reason to have it like it is now.

>As an example a valid alternative to store state in the server is to
>store it in the cookie.

>NEVOW_SESSION="username=manlio&last_accessed=...&created=..."

>of course using some cryptography.

>This has the advantage to work "as is" in a distributed system and to
>not depend on the number of sessions/users.

You will still need a session object on the serverside. Sessions are a serverside detail and saving state in the database is not hard at all. The problem rises when you want to reach consistency between all the servers.

From dialtone at divmod.com  Tue Aug  1 04:55:39 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Aug  1 04:55:42 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <33323.206.173.68.153.1154394446.squirrel@www.wbsysnet.com>
Message-ID: <20060801095539.1717.371486910.divmod.quotient.10636@ohm>

On Mon, 31 Jul 2006 21:07:26 -0400 (EDT), lloyd@paisite.com wrote:

>- Setup Combinator:
>$ echo "`python /usr/src/Divmod/trunk/Combinator/envirnment.py`" >> ~/.bashrc
>
>And I get this error:
>
> File "/usr/src/Divmod/trunk/Combinator/combinator/branchmgr.py", line
>129, in getCurrentBranches
>    for yth in os.listdir(self.sitePathsPath):
>OSError: [Errno 2] No such file or directory: '/usr/src/combinator_paths'
>
>Please advise.

You probably don't have enough permissions to create that directory, you can create it manually and restart the shell to see what happens.

From alex.greif at gmail.com  Tue Aug  1 10:29:44 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Tue Aug  1 10:29:48 2006
Subject: [Twisted-web] How to disable directory listing
Message-ID: <778770d80608010829t40e71f5cu2188a0872c58ecee@mail.gmail.com>

if the url points to a directory resource, then a list of the folder
contents is displayed.
How can this behaviour be disabled in web2?

Alex.

From manlio_perillo at libero.it  Tue Aug  1 11:51:59 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Aug  1 11:49:35 2006
Subject: [Twisted-web] Cookie support in Twisted Web
Message-ID: <44CF86AF.4020302@libero.it>

Hi.

I don't understand how Cookies are implemented in Twisted Web.
The implementation seems to follow the old Netscape spec but it also
have the attributes comment (but not commentURL) and max-age.

Moreover (and more important): what happens if I both specify expires
and max-age?


Thanks  Manlio Perillo

From manlio_perillo at libero.it  Tue Aug  1 12:10:23 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Aug  1 12:07:58 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <20060801095349.1717.926465725.divmod.quotient.10632@ohm>
References: <20060801095349.1717.926465725.divmod.quotient.10632@ohm>
Message-ID: <44CF8AFF.8030302@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Tue, 01 Aug 2006 10:40:20 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Only a question: in the example you only store (in the database)
>> "permanent" sessions.
>> Not sure about this, but I think that all sessions, except those for
>> anonymous access, should be persisted in the database (to avoid problems
>> in a distributed system).
> 
> Not really unless you want your system on its knees begging for some
> holidays. Just think about the chance for 1M people to visit your
> website each day. Your sessions database will shortly be the biggest
> bottleneck of the application.
> 

But then why store sessions in a database at all?

>> Here I'm not sure to understand.
>> You mean that the avatarID (username) is not stored in the session
>> object? This seems not the case.
> 
> First of all the avatarID is not the username. The avatarID is the
> avatarID. Then I repeat that I do not store the avatar anywhere which
> means that I have to pass through portal.login() for each request and
> portal.login() requires full credentials. Then I cannot get the avatarId
> because it is only passed to requestAvatar and the SessionWrapper only
> sees the result of that call.
> 

Ok, I missed this.

>> Another thing: is it really necessary to create a session for anonymous
>> access?
> 
> This is an interesting question. I think I'll probably say yes.
> 

I will do some tests.

>> And what about to store the authenticated username in the context
>> (instead of hacking on the site.makeSession)?
> 
> Maybe you didn't notice but... The context is going away we have been
> talking about this for ages and using the context means that the code
> will need to be trashed in not so long.
> 

Yes, I know.
I was searching for an object with the "right" lifetime, forgetting
about the request.

By the way: what's the difference beetwen ctx.remember/locate and
storing attributes on the context/request?


>> I'm against this because I whould like to have a realy reusable
>> SessionManager.
>>
>> The SessionManager is really an useful class and it should not depend
>> over a SessionWrapper (because I can choose to not use a SessionWrapper
>> al all).
> 
> And what does this have to do with the loggedIn method? The reason it is
> like that is because cookies are dealt with in the sessionwrapper and
> not in the sessionmanager, 

Of course!

> but having 2 places to check the rememberMe
> argument was sub-optimal. If you don't need the sessionmanager you can
> clearly avoid implementing loggedIn at all, but this doesn't mean the
> rest of the developers don't need such a callback.
> 

Sorry, I did not noticed that it was a callback!
Only a question: sessionwrapper is self.guard?


> [...]

>> As an example a valid alternative to store state in the server is to
>> store it in the cookie.
> 
>> NEVOW_SESSION="username=manlio&last_accessed=...&created=..."
> 
>> of course using some cryptography.
> 
>> This has the advantage to work "as is" in a distributed system and to
>> not depend on the number of sessions/users.
> 
> You will still need a session object on the serverside. Sessions are a
> serverside detail and saving state in the database is not hard at all.


I think that serverside state is not needed here, cookies come for this.
Sometimes one only needs to know the authenticated username (to
personalize some portions of a page).

Of course having a full dynamic solution like those offered by guard,
with cred integration, is a great thing ang I like it.

Another use cases can be to have the login and logout page as fixed
resource (and, maybe, on a SSL connection).

This solution needs a custom, but I can reuse your SessionManager interface!



Thanks and regards  Manlio Perillo

From dreid at dreid.org  Tue Aug  1 12:11:19 2006
From: dreid at dreid.org (dreid@dreid.org)
Date: Tue Aug  1 12:11:27 2006
Subject: [Twisted-web] How to disable directory listing
In-Reply-To: <778770d80608010829t40e71f5cu2188a0872c58ecee@mail.gmail.com>
References: <778770d80608010829t40e71f5cu2188a0872c58ecee@mail.gmail.com>
Message-ID: <50290.17.221.46.118.1154452279.squirrel@dreid.org>

> if the url points to a directory resource, then a list of the folder
> contents is displayed.
> How can this behaviour be disabled in web2?

Currently subclass static.File and override directoryListing (or
directoryLister, sorry i don't remember which)  You probably want it to
'raise http.HTTPError(responsecodes.FORBIDDEN)'

-David


From dreid at dreid.org  Tue Aug  1 12:15:21 2006
From: dreid at dreid.org (dreid@dreid.org)
Date: Tue Aug  1 12:15:24 2006
Subject: [Twisted-web] Re: FileSaver bug
In-Reply-To: <778770d80608010041r3807d87csf68a2e1290efd052@mail.gmail.com>
References: <778770d80607310836qd59b7ech992de12d0f83d0ba@mail.gmail.com>
	<44CE3391.7040709@twistedmatrix.com>
	<778770d80607312322p24afa709wba0b63dad35e19fa@mail.gmail.com>
	<44CF0050.1090108@tekNico.net>
	<778770d80608010041r3807d87csf68a2e1290efd052@mail.gmail.com>
Message-ID: <50301.17.221.46.118.1154452521.squirrel@dreid.org>

> thanks,
> the defect is now submitted :)
>
> Alex.

Alex, Hi.

It might be worth knowing that I was going to delete FileSaver, because
the bugs are numerous and parts of it are just outright wrong
(readIntoFile returns a deferred but it is a very sad and lonely deferred
that has no one waiting on it.)  Instead I plan to replace it with a
minimal set of examples for handling form upload.  The thing you want is
likely far simpler than FileSaver and using FileSaver will likely only
complicate matters.  So if you'd like to ask some specific questions about
handling file upload in web2 I'd be glad to help you move towards a
non-FileSaver solution.

-David


From dialtone at divmod.com  Tue Aug  1 12:27:43 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Aug  1 12:27:46 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <44CF8AFF.8030302@libero.it>
Message-ID: <20060801172743.1717.1708884922.divmod.quotient.11170@ohm>

On Tue, 01 Aug 2006 19:10:23 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>> Not really unless you want your system on its knees begging for some
>> holidays. Just think about the chance for 1M people to visit your
>> website each day. Your sessions database will shortly be the biggest
>> bottleneck of the application.
>>
>
>But then why store sessions in a database at all?

Beucase registered users that are logged in and required to be remembered are asking for that. Persistent sessions persist even after reboots of the application something that may happen in 2 weeks time.

>Yes, I know.
>I was searching for an object with the "right" lifetime, forgetting
>about the request.

context lifetime is ending soon.

>By the way: what's the difference beetwen ctx.remember/locate and
>storing attributes on the context/request?

Too long and complicated to explain and not worth it. but storing data on the request is always a bad idea. And storing data on the session is mostly a bad idea. Storing data in the database is not a bad idea.

>Sorry, I did not noticed that it was a callback!
>Only a question: sessionwrapper is self.guard?

what is self? anyway I guess yes, searching for the place where loggedIn is called is a much easier way to find the answer.

>I think that serverside state is not needed here, cookies come for this.

Cookies come to identify all the requests coming from the same browser, they are not meant to store server side state, although they can keep 32k of data.

>Sometimes one only needs to know the authenticated username (to
>personalize some portions of a page).

This is something that is already available to authenticated users. I think you mean un-authenticated users here.

>Another use cases can be to have the login and logout page as fixed
>resource (and, maybe, on a SSL connection).

>This solution needs a custom, but I can reuse your SessionManager interface!

Not really. You need to change SessionWrapper to do that. And only the locateChild method.

From manlio_perillo at libero.it  Tue Aug  1 12:49:41 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Aug  1 12:47:15 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <20060801172743.1717.1708884922.divmod.quotient.11170@ohm>
References: <20060801172743.1717.1708884922.divmod.quotient.11170@ohm>
Message-ID: <44CF9435.1060503@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Tue, 01 Aug 2006 19:10:23 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>>> Not really unless you want your system on its knees begging for some
>>> holidays. Just think about the chance for 1M people to visit your
>>> website each day. Your sessions database will shortly be the biggest
>>> bottleneck of the application.
>>>
>>
>> But then why store sessions in a database at all?
> 
> Beucase registered users that are logged in and required to be
> remembered are asking for that. 

Ok, but you can store the session in a global dictionary (as done in
your default implementation).
The sessions are available, at least if the server is not rebooted.

I think that a database should be used only if you want to share
sessions beetwen distributed servers (or if you are using a server like
Apache).

> [...]

>> By the way: what's the difference beetwen ctx.remember/locate and
>> storing attributes on the context/request?
> 
> Too long and complicated to explain and not worth it. but storing data
> on the request is always a bad idea. And storing data on the session is
> mostly a bad idea. Storing data in the database is not a bad idea.
> 

No, I meant storing data that shoud be stored for the "lifetime of the
rendering".

As done in formal with the forms data and errors.
Where should be this data stored?

The request object is not good?

>> Sorry, I did not noticed that it was a callback!
>> Only a question: sessionwrapper is self.guard?
> 
> what is self? 

def loggedIn(self, session, request, sessionwrapper):

> anyway I guess yes, searching for the place where loggedIn
> is called is a much easier way to find the answer.
>

So sessionwrapper parameter is not needed?


>> I think that serverside state is not needed here, cookies come for this.
> 
> Cookies come to identify all the requests coming from the same browser,
> they are not meant to store server side state, although they can keep
> 32k of data.
> 
>> Sometimes one only needs to know the authenticated username (to
>> personalize some portions of a page).
> 
> This is something that is already available to authenticated users. I
> think you mean un-authenticated users here.
> 

Yes, but guard requires a lot of "things" to happen for every request.

I would like to do some benchmark, but if I only need to know the
authenticated username, maybe I have no need for a session wrapper (but
I need the session manager).



Thanks and regards  Manlio Perillo

From dialtone at divmod.com  Tue Aug  1 13:32:09 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Aug  1 13:32:23 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <44CF9435.1060503@libero.it>
Message-ID: <20060801183209.1717.1449173726.divmod.quotient.11248@ohm>

On Tue, 01 Aug 2006 19:49:41 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Ok, but you can store the session in a global dictionary (as done in
>your default implementation).
>The sessions are available, at least if the server is not rebooted.
>
>I think that a database should be used only if you want to share
>sessions beetwen distributed servers (or if you are using a server like
>Apache).

This is just wrong. Persistent sessions are useful exactly to avoid re-creating them when rebooting the application.

>No, I meant storing data that shoud be stored for the "lifetime of the
>rendering".
>
>
>As done in formal with the forms data and errors.
>Where should be this data stored?

It shouldn't. Pass it through the callee.

>The request object is not good?

Not in its current shape and most probably not at all.

>So sessionwrapper parameter is not needed?

The guard attribute is on the Session not on the SessionManager and it's a detail that is not exposed because it's just to make it handier for the user to run the 3 lines in the docstring.

>Yes, but guard requires a lot of "things" to happen for every request.
>
>I would like to do some benchmark, but if I only need to know the
>authenticated username, maybe I have no need for a session wrapper (but
>I need the session manager).

You might just avoid using cred/guard entirely and write your own thing if you like... guard is not meant to work without cred yet you were proposing to rely on the avatarId which is an internal cred thing.

Anyway I'd be curious to know how you are going to implement cred integration without a SessionWrapper like resource with the current interface.

From manlio_perillo at libero.it  Tue Aug  1 14:05:15 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Aug  1 14:02:48 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <20060801183209.1717.1449173726.divmod.quotient.11248@ohm>
References: <20060801183209.1717.1449173726.divmod.quotient.11248@ohm>
Message-ID: <44CFA5EB.10404@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Tue, 01 Aug 2006 19:49:41 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Ok, but you can store the session in a global dictionary (as done in
>> your default implementation).
>> The sessions are available, at least if the server is not rebooted.
>>
>> I think that a database should be used only if you want to share
>> sessions beetwen distributed servers (or if you are using a server like
>> Apache).
> 
> This is just wrong. Persistent sessions are useful exactly to avoid
> re-creating them when rebooting the application.
> 

And what's the problem?
Hopefully you are not going to reboot the server every week, and users
can always relogin.


>> No, I meant storing data that shoud be stored for the "lifetime of the
>> rendering".
>>
>>
>> As done in formal with the forms data and errors.
>> Where should be this data stored?
> 
> It shouldn't. Pass it through the callee.
> 

Ok, but this means that *every* current application should be rewritten...

>> The request object is not good?
> 
> Not in its current shape and most probably not at all.
> 

Ok.

>> So sessionwrapper parameter is not needed?
> 
> The guard attribute is on the Session not on the SessionManager 

Ok, but you pass a session to the loggedIn method.
So you can do (if I'm not wrong):

def loggedIn(self, session, request):

    if request.args.get('rememberMe'):
        session.guard.makePersistentCookie(session, request,
max_age=self.sessionPersistentLifetime)
        self.makePersistentSession(session)


> [...]
>
>> Yes, but guard requires a lot of "things" to happen for every request.
>>
>> I would like to do some benchmark, but if I only need to know the
>> authenticated username, maybe I have no need for a session wrapper (but
>> I need the session manager).
> 
> You might just avoid using cred/guard entirely and write your own thing
> if you like... guard is not meant to work without cred yet you were
> proposing to rely on the avatarId which is an internal cred thing.
> 

confusing avatarID was a my error...

> Anyway I'd be curious to know how you are going to implement cred
> integration without a SessionWrapper like resource with the current
> interface.
> 

Of course there will be no cred integration ;-).

I don't want (still) to use guard because there are a lot of things that
I do not understand.

Like support for multiple portals, setResourceForPortal and so.

Every time I think I'm beginning to understand, it suffice to read some
code (as Weever or Stiq) for understanding that I do not understand ;-).


Thanks and regards   Manlio Perillo

From manlio_perillo at libero.it  Tue Aug  1 14:09:55 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Aug  1 14:07:29 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
Message-ID: <44CFA703.4050602@libero.it>

Hi.

I have written a new chapter for authentication.
It is still a draft (as always), and don't forget that I'm not an expert.

http://svn.python.it/twisted/trunk/contrib/nevow/doc/txt/nevow-authentication.txt


P.S.
Is it possible to link external source files in hier, like in lore?



Regards  Manlio Perillo

From dialtone at divmod.com  Tue Aug  1 19:19:06 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Aug  1 19:19:10 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <44CFA5EB.10404@libero.it>
Message-ID: <20060802001906.1717.490022136.divmod.quotient.11585@ohm>

On Tue, 01 Aug 2006 21:05:15 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>And what's the problem?
>Hopefully you are not going to reboot the server every week, and users
>can always relogin.

I as a user _HATE_ when I lose my session just because the developers rebooted the application. I even hate when the browser loses the session between restarts. You might also be browsing the website when suddenly you are logged out because of a restart.

>Ok, but this means that *every* current application should be rewritten...

There are more than a couple examples that are not inside the *every* keyword. Anyway yes. If you want to update nevow on those installations to use web2 you'll have to rewrite part of the application. This should sound
as a "You should start coding the right way immediately before having a big codebase".

>Ok, but you pass a session to the loggedIn method.
>So you can do (if I'm not wrong):
>
>def loggedIn(self, session, request):
>
>    if request.args.get('rememberMe'):
>        session.guard.makePersistentCookie(session, request,
>max_age=self.sessionPersistentLifetime)
>        self.makePersistentSession(session)
>

You have dropped the rest of the explanation that is quite important.

>Of course there will be no cred integration ;-).

Well.. Then I'm not interested. Your solution is going to be nevow specific and thus unusable for my usecases.

>I don't want (still) to use guard because there are a lot of things that
>I do not understand.

Why are you using Nevow or Twisted at all then? Even _I_ do not understand completely what Nevow does with the context in its internals... guard (even in its current shape) is much less complicated than the whole context business.

>Like support for multiple portals, setResourceForPortal and so.

This has nothing to do with guard. I suggest reading the cred tutorial from twisted.

>Every time I think I'm beginning to understand, it suffice to read some
>code (as Weever or Stiq) for understanding that I do not understand ;-).

Weever is pretty old now and has been replaced almost completely by Stiq. No-one should read Weever code.

From dialtone at divmod.com  Tue Aug  1 19:55:06 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Aug  1 19:55:07 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44CFA703.4050602@libero.it>
Message-ID: <20060802005506.1717.1333780701.divmod.quotient.11617@ohm>



On Tue, 01 Aug 2006 21:09:55 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Hi.
>
>I have written a new chapter for authentication.
>It is still a draft (as always), and don't forget that I'm not an expert.
>
>http://svn.python.it/twisted/trunk/contrib/nevow/doc/txt/nevow-authentication.txt

Line 13:
stateful is totally wrong and the opposite. Should be stateless.

Line 15:
Authenticate user means not only to assure that a user is who claims
he is, but also to assure that a hostile user can gain unauthorized
access.

I think this is wrong. Authentication is just recognizing who is the user. Authorization is a different aspect that should be dealt with at a different level, although using the avatar concept it can be done in one step at cred level.

Line 19:
The most secure way is to use HTTPS, based on SSL. But SSL can cause
too burden on an application.

The most secure way to do what?

Line 25:
The standard way to do authentication is via HTTP Basic
Authentication, witch is supported in Twisted Web.

Since this is a Nevow tutorial this should mention that it is supported by Nevow.guard. The simple example is good although with guard it's even less than that.

Line 82:
* when an user want to change the email and you send the forgotten
  password via email, ask for the password.

This is just senseless. I forgot the password and I want it back. To have it back I should insert it? Didn't I forget it?

Line 90:
IMHO this section is not clear enough (if at all).

Session section:
Why is it suggested to use cookies when at the end of the same subsection you say that this approach has several flaws?

Line 244:
The difference between random/urandom is not that one returns a string and the other doesn't. urandom uses /dev/urandom on UNIXes (not available on Windows) while random.random uses a pseudo random number generator.

Line 404:
The "Remember Me" feature is more than that. It's a persistent session and cookie. A persistent cookie for a day or so can be used when a simple login is done. Transient cookies and session for anonymous sessions.

Line 41x:
This looks WAAAAAAY too paranoid for the real risks. Just use HTTPS is you are so scared of people stealing other's passwords.

I don't think it's safe to show code in sandboxes in documentation. That code is in sandboxes for a reason. Also the session.py "example" is not very tested and should not be used as a reference implementation. You should explain what a "smart" load balancer is (stateful?).

The most powerful feature of guard is being able to write the authentication code once and reuse it forever. You can return different resources even without it.

guard is not **very** complex. guard is actually pretty transparent for the userlevel code, that's exactly why it is like it is.

The current guard does not login into the realm each time. That's an optimization. And the custom dynamic request is done for every locateChild method call togheter with tons of Contexts.

Overall:
This is (or should be) a Nevow specific document. Not talking extensively about guard is a sign that it is not yet complete. The code that doesn't use it in the rest of the document is good to explain what guard does and not to avoid using it. guard is not only more flexible, but also more tested and more functional than most of the ad-hoc code. It is also made to avoid changing ANY application level code just because you are adding authentication. It is also made to be easily added to an existing Twisted application since it would reuse the same portal/realm removing the need to write that code. guard user level API is also arguably simpler than writing an auth solution for any of your applications.

This document needs a grammar review.

From alex.greif at gmail.com  Wed Aug  2 01:28:46 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Wed Aug  2 01:29:01 2006
Subject: [Twisted-web] Re: FileSaver bug
In-Reply-To: <50301.17.221.46.118.1154452521.squirrel@dreid.org>
References: <778770d80607310836qd59b7ech992de12d0f83d0ba@mail.gmail.com>
	<44CE3391.7040709@twistedmatrix.com>
	<778770d80607312322p24afa709wba0b63dad35e19fa@mail.gmail.com>
	<44CF0050.1090108@tekNico.net>
	<778770d80608010041r3807d87csf68a2e1290efd052@mail.gmail.com>
	<50301.17.221.46.118.1154452521.squirrel@dreid.org>
Message-ID: <778770d80608012328k280690c8q5ccf25caa149b887@mail.gmail.com>

Hi David,

I am a twisted newby, so I would be gald if you could present me a
sample that can handle multipart file uploads up to 100 MB size.

I searched in the archives, but found only a sample that blocked with
"while True:" or that used the stream module. As I heard the stream
module will disappear.

So please support a correct and valid sample that makes no problems.
Uploading files is essentioal on my site, so this would be a showstopper.

Thanks,
Alex

On 8/1/06, dreid@dreid.org <dreid@dreid.org> wrote:
> > thanks,
> > the defect is now submitted :)
> >
> > Alex.
>
> Alex, Hi.
>
> It might be worth knowing that I was going to delete FileSaver, because
> the bugs are numerous and parts of it are just outright wrong
> (readIntoFile returns a deferred but it is a very sad and lonely deferred
> that has no one waiting on it.)  Instead I plan to replace it with a
> minimal set of examples for handling form upload.  The thing you want is
> likely far simpler than FileSaver and using FileSaver will likely only
> complicate matters.  So if you'd like to ask some specific questions about
> handling file upload in web2 I'd be glad to help you move towards a
> non-FileSaver solution.
>
> -David
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From dq at altern.org  Tue Aug  1 11:22:17 2006
From: dq at altern.org (dq)
Date: Thu Aug  3 00:20:16 2006
Subject: [Twisted-web] Re: How to disable directory listing
References: <778770d80608010829t40e71f5cu2188a0872c58ecee@mail.gmail.com>
Message-ID: <loom.20060801T182057-203@post.gmane.org>

Alex Greif <alex.greif <at> gmail.com> writes:

> if the url points to a directory resource, then a list of the folder
> contents is displayed.
> How can this behaviour be disabled in web2?

up to now I've been using this:

class FileNoDir(static.File):
    def directoryListing(self):
        return None

Kind regards,
DQ


From manlio_perillo at libero.it  Thu Aug  3 04:12:17 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Aug  3 04:09:51 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <20060802001906.1717.490022136.divmod.quotient.11585@ohm>
References: <20060802001906.1717.490022136.divmod.quotient.11585@ohm>
Message-ID: <44D1BDF1.4060605@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Tue, 01 Aug 2006 21:05:15 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> And what's the problem?
>> Hopefully you are not going to reboot the server every week, and users
>> can always relogin.
> 
> I as a user _HATE_ when I lose my session just because the developers
> rebooted the application. I even hate when the browser loses the session
> between restarts. You might also be browsing the website when suddenly
> you are logged out because of a restart.
> 

But in this case your solution does not always works.
The user can have a transient session.

> [...]

>> I don't want (still) to use guard because there are a lot of things that
>> I do not understand.
> 
> Why are you using Nevow or Twisted at all then? Even _I_ do not
> understand completely what Nevow does with the context in its
> internals... guard (even in its current shape) is much less complicated
> than the whole context business.
> 
>> Like support for multiple portals, setResourceForPortal and so.
> 
> This has nothing to do with guard. I suggest reading the cred tutorial
> from twisted.
> 

setResourceForPortal is actually very trivial ;-)
It just store the resource on the session object.

The problem is with multiple portals support: any examples?



Some considerations
-------------------

Now I think to understand why Guard store a session for anonymous users.
For cred point of view anonymous user is just like an ordinary user.

Since Guard store resources on the session object, it needs to create
sessions for anonymous users.

However this poses a security problem (session fixation).

The anonymous user is registered with the Credentials Checker in the
same way as an ordinary user.
However the credentials checker can handle this case specially;
as an example it does not require to access a database for a
DatabasePasswordDB.

This means that resources for anonymous users can not be stored on
sessions, requiring a new login to the portal and no need for sessions
at all.

Only ordinary users resources can/should be stored on the session.

This also means that the guard implementation in the sanbox (as is)
**does** not needs to create sessions for anonymous users.


What we need is to run some benchmarks:
1) access to a simple resource
2) access to a guard protected resource
3) access to a guard draft (in Valentino sandox) protected resource

Tests 2 and 3 should be repeated for a Credentials Checker that simulate
an access to a time consuming resource to authenticate users.



Thanks and regards  Manlio Perillo


From dialtone at divmod.com  Thu Aug  3 04:16:44 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Aug  3 04:16:46 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <44D1BDF1.4060605@libero.it>
Message-ID: <20060803091644.1717.351014897.divmod.quotient.13054@ohm>

On Thu, 03 Aug 2006 11:12:17 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>> I as a user _HATE_ when I lose my session just because the developers
>> rebooted the application. I even hate when the browser loses the session
>> between restarts. You might also be browsing the website when suddenly
>> you are logged out because of a restart.
>>
>
>But in this case your solution does not always works.
>The user can have a transient session.

Sure... When he is not logged in.

From manlio_perillo at libero.it  Thu Aug  3 04:34:00 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Aug  3 04:31:35 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <20060803091644.1717.351014897.divmod.quotient.13054@ohm>
References: <20060803091644.1717.351014897.divmod.quotient.13054@ohm>
Message-ID: <44D1C308.4050407@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Thu, 03 Aug 2006 11:12:17 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>>> I as a user _HATE_ when I lose my session just because the developers
>>> rebooted the application. I even hate when the browser loses the session
>>> between restarts. You might also be browsing the website when suddenly
>>> you are logged out because of a restart.
>>>
>>
>> But in this case your solution does not always works.
>> The user can have a transient session.
> 
> Sure... When he is not logged in.
> 

Does this means that you are going to make all sessions permanent
*without* asking users permission?


Regards  Manlio Perillo

From dialtone at divmod.com  Thu Aug  3 04:43:36 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Aug  3 04:43:39 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <44D1C308.4050407@libero.it>
Message-ID: <20060803094336.1717.1909183458.divmod.quotient.13072@ohm>



On Thu, 03 Aug 2006 11:34:00 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Does this means that you are going to make all sessions permanent
>*without* asking users permission?

permanent? Is there such a thing as permanent sessions?

From manlio_perillo at libero.it  Thu Aug  3 05:17:03 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Aug  3 05:14:40 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060802005506.1717.1333780701.divmod.quotient.11617@ohm>
References: <20060802005506.1717.1333780701.divmod.quotient.11617@ohm>
Message-ID: <44D1CD1F.7060305@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> 
> 
> On Tue, 01 Aug 2006 21:09:55 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Hi.
>>
>> I have written a new chapter for authentication.
>> It is still a draft (as always), and don't forget that I'm not an expert.
>>
>> http://svn.python.it/twisted/trunk/contrib/nevow/doc/txt/nevow-authentication.txt
>>

First of all, thanks for your review.

> 
> Line 13:
> stateful is totally wrong and the opposite. Should be stateless.
>

Yes, a mistake.

> Line 15:
> Authenticate user means not only to assure that a user is who claims
> he is, but also to assure that a hostile user can gain unauthorized
                                               ^^^^
                                               can not
> access.
> 
> I think this is wrong. 

Yes.

> Authentication is just recognizing who is the
> user. Authorization is a different aspect that should be dealt with at a
> different level, although using the avatar concept it can be done in one
> step at cred level.
> 

I'm interested in this.
Are there any examples?

I would like to add a section on authorization, too.

> Line 19:
> The most secure way is to use HTTPS, based on SSL. But SSL can cause
> too burden on an application.
> 
> The most secure way to do what?
> 

To use sessions.

> Line 25:
> The standard way to do authentication is via HTTP Basic
> Authentication, witch is supported in Twisted Web.
> 
> Since this is a Nevow tutorial this should mention that it is supported
> by Nevow.guard. 

Yes, you are right.

> The simple example is good although with guard it's even
> less than that.
> 

Ok, but I think it is better a bottom up approach.
This allow one to understand (and appreciate) better what Nevow offers.

> Line 82:
> * when an user want to change the email and you send the forgotten
>  password via email, ask for the password.
> 
> This is just senseless. I forgot the password and I want it back. To
> have it back I should insert it? Didn't I forget it?
> 

No, you misunderstand what I have written ;-).

The system should ask for the user password when the user wants to
change its email address.
This is important *if* the system allow an user to ask for its forgotten
password and this is sent to its email address.

An attacker (that obtained a valid session ID) can change the account
email address and ask for the password!

> Line 90:
> IMHO this section is not clear enough (if at all).
> 

Well, I just put in some things I have read, without some review.

However note that I'm considering HTTP Basic Authentication without
sessions, so an user is required to supply credentials for every resource.

This means that there is no support for anonymous user.


> Session section:
> Why is it suggested to use cookies when at the end of the same
> subsection you say that this approach has several flaws?
> 

Because, by design, sessions are not good for authentication.
However cookies based sessions are better that URL based sessions or
form based sessions.

The only flaw of a well written session management system (as I can
understand) is a replication attack (done by someone that can see the
traffic beetwen client and server).

This assuming that one isn't using permanent sessions.

> Line 244:
> The difference between random/urandom is not that one returns a string
> and the other doesn't. urandom uses /dev/urandom on UNIXes (not
> available on Windows) while random.random uses a pseudo random number
> generator.
> 

I'm not saying this (but I must explain better the difference beetwen
urandom and random).

Really, there I'm asking: "why to use a float number?" ;-)

> Line 404:
> The "Remember Me" feature is more than that. It's a persistent session
> and cookie. 

Ok, I have to add some more words.

> A persistent cookie for a day or so can be used when a
> simple login is done. Transient cookies and session for anonymous sessions.
> 
> Line 41x:
> This looks WAAAAAAY too paranoid for the real risks. Just use HTTPS is
> you are so scared of people stealing other's passwords.
> 

No, because HTTPS **is not** needed to keep user's password safe.
It is only need for the login page.

> I don't think it's safe to show code in sandboxes in documentation. That
> code is in sandboxes for a reason. Also the session.py "example" is not
> very tested and should not be used as a reference implementation. 

Ok, but I just don't want to add too many code in the document ;-).

> You
> should explain what a "smart" load balancer is (stateful?).
> 

This comment should go away!

The load balancer of Lighttp is not as "smart" as I was hoping.
It just can generate an hash over the request-uri and make sure that the
same request URI is sent to always the same host.


> The most powerful feature of guard is being able to write the
> authentication code once and reuse it forever. You can return different
> resources even without it.
> 

Ok.
I just have to say that guard *is* cred integration (maybe adding an
example of usage).

> guard is not **very** complex. guard is actually pretty transparent for
> the userlevel code, that's exactly why it is like it is.
>

Yes.

> The current guard does not login into the realm each time. 

Ok.

> That's an
> optimization. And the custom dynamic request is done for every
> locateChild method call togheter with tons of Contexts.
> 

No.
I can create a complete "static" site, with all Resources created at
start time.

Of course I can always cache Resources on the portal.

Maybe I need to add some examples.
And I would like to do some benchmark to understand the cost of creating
every resource object on the fly.

> Overall:
> This is (or should be) a Nevow specific document. Not talking
> extensively about guard is a sign that it is not yet complete. 

You are right: but when writing the document I totally forgot about
guard ;-).


> The code
> that doesn't use it in the rest of the document is good to explain what
> guard does and not to avoid using it. 

This is what I want.

> guard is not only more flexible,
> but also more tested and more functional than most of the ad-hoc code.

And guard has some (avoidable) security problems, too...
It uses URLs based sessions without my permission.

> It is also made to avoid changing ANY application level code just
> because you are adding authentication. 

Yes, this is a great thing.

> It is also made to be easily
> added to an existing Twisted application since it would reuse the same
> portal/realm removing the need to write that code. 


Here I'm really curious.
Is cred + guard really so reusable?

As an example, how easy it is to write an integrated authentication code
(as an example on Windows's Active Directory)?


> guard user level API
> is also arguably simpler than writing an auth solution for any of your
> applications.
> 

The session handling code can be factored out in a Mixin class.
This mixin only have to check for a session and, if available, to set
the username attribute on the request object (or None, if no session
exists).

Of course I can reuse your Session Manager class (this is why I like it).
Maybe I would prefer to factor out the cookie handling code (an
ICookieFactory interface?).

This allow one to write custom code, as an example one can create an
additional cookie with a signed and crypted client address, using the
same interface.

Or, more paranoic, one can create an additional cookie with a signed and
 maybe encrypted serial number.
This number is incremented at every request (both on the session cookie
and on the session object) and checked.



> This document needs a grammar review.
> 

Of course!


From dialtone at divmod.com  Thu Aug  3 05:58:16 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Aug  3 05:58:19 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44D1CD1F.7060305@libero.it>
Message-ID: <20060803105816.1717.1666872432.divmod.quotient.13119@ohm>

On Thu, 03 Aug 2006 12:17:03 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>I'm interested in this.
>Are there any examples?
>
>I would like to add a section on authorization, too.

The avatar object is exactly that kind of example. It contains all the needed information to authorize it at application level through some locateChild level mechanism.

There are many examples of that in stiq.

>> Line 19:
>> The most secure way is to use HTTPS, based on SSL. But SSL can cause
>> too burden on an application.
>>
>> The most secure way to do what?
>>
>
>To use sessions.

I think you are confused here... HTTPS and sessions are 2 totally different things.

>> Line 82:
>> * when an user want to change the email and you send the forgotten
>>  password via email, ask for the password.
>>
>> This is just senseless. I forgot the password and I want it back. To
>> have it back I should insert it? Didn't I forget it?
>>
>
>No, you misunderstand what I have written ;-).

It's not very clear.

>The system should ask for the user password when the user wants to
>change its email address.
>This is important *if* the system allow an user to ask for its forgotten
>password and this is sent to its email address.
>
>An attacker (that obtained a valid session ID) can change the account
>email address and ask for the password!

This is a non-problem with my guard. Asking authentication each time invalidates the current session credentials (because you changed the password in the database when you autogenerated a new one). To reach the user pages again you'd have to know the autogenerated one. because the one stored in the session is not valid anymore.

>> Session section:
>> Why is it suggested to use cookies when at the end of the same
>> subsection you say that this approach has several flaws?
>>
>
>Because, by design, sessions are not good for authentication.

sessions are not authentication, of course they are not good for that.

>However cookies based sessions are better that URL based sessions or
>form based sessions.

They are different kind of things. Sometimes clients don't support cookies. How are you going to provide a usable website for them?

>The only flaw of a well written session management system (as I can
>understand) is a replication attack (done by someone that can see the
>traffic beetwen client and server).

Just use HTTPS.

>This assuming that one isn't using permanent sessions.

There is no such thing as permanent sessions. They might be persistent for some time but not permanent.

>> A persistent cookie for a day or so can be used when a
>> simple login is done. Transient cookies and session for anonymous sessions.
>>
>> Line 41x:
>> This looks WAAAAAAY too paranoid for the real risks. Just use HTTPS is
>> you are so scared of people stealing other's passwords.
>>
>
>No, because HTTPS **is not** needed to keep user's password safe.
>It is only need for the login page.

Much of the problems you are trying to find here are all resolved by using https for everything in your website. I doubt it's worth to lose so much developer time in trying to make secure something that cannot be secure by design (there is a machine that is not under your control and that is also the one you want to protect). Just use HTTPS for all your website. Safer and simpler.

>No.
>I can create a complete "static" site, with all Resources created at
>start time.

You can do _EXACTLY_ the same thing with guard. Did I mention that guard is like it is to avoid changing ANY code in your application?

>Maybe I need to add some examples.
>And I would like to do some benchmark to understand the cost of creating
>every resource object on the fly.

rend.Page() objects are made to be destroyed for every request. And this will be enforced without the context. Also... Are you actually worrying about creating one object compared to the cost of rendering a dynamic page? (and locating it!) Of course there's nothing that prevents you to return always the same page object from guard.

>And guard has some (avoidable) security problems, too...
>It uses URLs based sessions without my permission.

my who? user? developer?

>Here I'm really curious.
>Is cred + guard really so reusable?

yes.

>As an example, how easy it is to write an integrated authentication code
>(as an example on Windows's Active Directory)?

IIRC Active Directory is pretty much LDAP. Which means that it's almost a no-brainer.

>The session handling code can be factored out in a Mixin class.
>This mixin only have to check for a session and, if available, to set
>the username attribute on the request object (or None, if no session
>exists).

Requires changing the application code which might not react as expected to the mixin.

>This allow one to write custom code, as an example one can create an
>additional cookie with a signed and crypted client address, using the
>same interface.
>
>Or, more paranoic, one can create an additional cookie with a signed and
> maybe encrypted serial number.
>This number is incremented at every request (both on the session cookie
>and on the session object) and checked.

This looks so paranoid I can't believe anyone could use it... Why should I need such a secure way of communicating through the web? there are already other kinds of mechanism that are even more secure than that. I think HTTPS, secure cookies and encrypted cookie values are more than enough to barely trust a cookie.

Anyway it seems reasonable to factor out the cookie handling stuff.

From manlio_perillo at libero.it  Thu Aug  3 11:28:04 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Aug  3 11:25:42 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060803105816.1717.1666872432.divmod.quotient.13119@ohm>
References: <20060803105816.1717.1666872432.divmod.quotient.13119@ohm>
Message-ID: <44D22414.4000806@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Thu, 03 Aug 2006 12:17:03 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
> [...]
> 
>>> Line 19:
>>> The most secure way is to use HTTPS, based on SSL. But SSL can cause
>>> too burden on an application.
>>>
>>> The most secure way to do what?
>>>
>>
>> To use sessions.
> 
> I think you are confused here... HTTPS and sessions are 2 totally
> different things.
> 

Of course.

Is this better?:
"""Session cookies carry some text used to authenticate users (called
authenticator).

The only secure way to transport such an information beetwen client and
server is with HTTPS."""

> [...]
>> The system should ask for the user password when the user wants to
>> change its email address.
>> This is important *if* the system allow an user to ask for its forgotten
>> password and this is sent to its email address.
>>
>> An attacker (that obtained a valid session ID) can change the account
>> email address and ask for the password!
> 
> This is a non-problem with my guard. Asking authentication each time
> invalidates the current session credentials (because you changed the
> password in the database when you autogenerated a new one). To reach the
> user pages again you'd have to know the autogenerated one. because the
> one stored in the session is not valid anymore.
> 

Not sure.

An attacker "authenticate" into the application using a stealed cookie.
No one is changing/regenerating the password, the attacker only changes
the account email address and then ask the system to send the
"forgotten" password to the new (under its control) email address.

It needs to execute HTTP commands, and the sessions does not change.

And now the attacker knows the username + password for a poor client.
And maybe this poor (and fool) client uses the same credentials for its
e-banking account...

>>> Session section:
>>> Why is it suggested to use cookies when at the end of the same
>>> subsection you say that this approach has several flaws?
>>>
>>
>> Because, by design, sessions are not good for authentication.
> 
> sessions are not authentication, of course they are not good for that.
> 

Yes, sessions carry authenticators.

>> However cookies based sessions are better that URL based sessions or
>> form based sessions.
> 
> They are different kind of things. 

No.
Both cookies, URLs and hidden form's controls are a mean to transport
sessions IDs.

I'm just using sessions where I should say session IDs.

> Sometimes clients don't support
> cookies. How are you going to provide a usable website for them?
> 

Do you prefer a fully usable site to a secure one?
Cookies are standards.

>> The only flaw of a well written session management system (as I can
>> understand) is a replication attack (done by someone that can see the
>> traffic beetwen client and server).
> 
> Just use HTTPS.
> 

I don't have an e-commerce site.
Its only a portal.

>> This assuming that one isn't using permanent sessions.
> 
> There is no such thing as permanent sessions. They might be persistent
> for some time but not permanent.
> 

Mea culpa on using the wrong term. Of course I intended persistent.

> [...]
>
> Much of the problems you are trying to find here are all resolved by
> using https for everything in your website. I doubt it's worth to lose
> so much developer time in trying to make secure something that cannot be
> secure by design (there is a machine that is not under your control and
> that is also the one you want to protect). Just use HTTPS for all your
> website. Safer and simpler.
> 

I will do some test but HTTPs for every page is likely too heavy for the
poor server.

>> No.
>> I can create a complete "static" site, with all Resources created at
>> start time.
> 
> You can do _EXACTLY_ the same thing with guard. Did I mention that guard
> is like it is to avoid changing ANY code in your application?
> 
>> Maybe I need to add some examples.
>> And I would like to do some benchmark to understand the cost of creating
>> every resource object on the fly.
> 
> rend.Page() objects are made to be destroyed for every request. 

Not sure.
The root resource is created only once, right?
And I can do:

class ChildPage(rend.Page):
	...

class MainPage(rend.Page):
	...



root = MainPage()
child = ChildPage()

root.putChild('a', child)
child.putChild('b', child)


server = appserver.NevowSite(root)


> And this
> will be enforced without the context. Also... Are you actually worrying
> about creating one object compared to the cost of rendering a dynamic
> page? (and locating it!) 

I have learned to not make pre-assumptions without doing some tests.

> Of course there's nothing that prevents you to
> return always the same page object from guard.
> 
>> And guard has some (avoidable) security problems, too...
>> It uses URLs based sessions without my permission.
> 
> my who? user? developer?
> 

Developer.

> [...]

>> This allow one to write custom code, as an example one can create an
>> additional cookie with a signed and crypted client address, using the
>> same interface.
>>
>> Or, more paranoic, one can create an additional cookie with a signed and
>> maybe encrypted serial number.
>> This number is incremented at every request (both on the session cookie
>> and on the session object) and checked.
> 
> This looks so paranoid 

Just as I have said.

> I can't believe anyone could use it... Why should
> I need such a secure way of communicating through the web? 

Some sites, as an example, bind cookies to user IP address (Yahoo, at
least some years ago).

> there are
> already other kinds of mechanism that are even more secure than that. I
> think HTTPS, secure cookies and encrypted cookie values are more than
> enough to barely trust a cookie.
> 
> Anyway it seems reasonable to factor out the cookie handling stuff.
> 

Ok!

Some other personal advice about yout guard implementation:
- I think that SessionManager should be renamed SessionFactory
- Maybe the getSession() of the SessionManager class should be changed
  in getSession(sessionInterface=ISession)
  That is, ISessionManager should work a little like the
  ICredentialsChecker.

  I can define an IGuardSession with additional features (the guard
  attribute that really make sense only for authenticator's sessions.)
- If you choose to not create sessions for anonymous users, then there
  is no more need for the loggedIn callback


A last thing:
how will be the Session management in web2?


P.S.
You may wonder why I'm so paranoic.
Well, I'm reading
http://www.owasp.org/index.php/Category:OWASP_Guide_Project
...


Thanks and regards  Manlio Perillo

From dialtone at divmod.com  Thu Aug  3 12:29:08 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Aug  3 12:29:11 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44D22414.4000806@libero.it>
Message-ID: <20060803172908.1717.1777397042.divmod.quotient.13388@ohm>

On Thu, 03 Aug 2006 18:28:04 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Of course.
>
>Is this better?:
>"""Session cookies carry some text used to authenticate users (called
>authenticator).
>
>The only secure way to transport such an information beetwen client and
>server is with HTTPS."""

This is better. Although 'carry some text used to' is not that good, what would be good is to write that it carries _exactly_.

>> This is a non-problem with my guard. Asking authentication each time
>> invalidates the current session credentials (because you changed the
>> password in the database when you autogenerated a new one). To reach the
>> user pages again you'd have to know the autogenerated one. because the
>> one stored in the session is not valid anymore.
>>
>
>Not sure.
>
>An attacker "authenticate" into the application using a stealed cookie.
>No one is changing/regenerating the password, the attacker only changes
>the account email address and then ask the system to send the
>"forgotten" password to the new (under its control) email address.

>It needs to execute HTTP commands, and the sessions does not change.

Given your other suggestions (one of them was store the hash of the password) how are you going to send the "forgotten" password? You don't even know it.

You must autogenerate a new one and then send it, and if it's like that you 'just' lost an account and not a password.

Anyway these suggestions are more part of another chapter that could be
titled: "Suggestions on safe web app design" rather than part of the authentication chapter.

>> sessions are not authentication, of course they are not good for that.
>>
>
>Yes, sessions carry authenticators.

What are these and why?

>> They are different kind of things.
>
>No.
>Both cookies, URLs and hidden form's controls are a mean to transport
>sessions IDs.

Those are _different_ means to transport session ID.

>Do you prefer a fully usable site to a secure one?
>Cookies are standards.

You still have to show me how it is not secure to use session IDs in the URL. 

>I don't have an e-commerce site.
>Its only a portal.

You are spending more time here talking about how to make session id exchange more secure while you could have simply used https and that's all.
Doesn't sound very efficient.

>Mea culpa on using the wrong term. Of course I intended persistent.

persistent sessions are yet another thing and the user asks for the explicitly by ticking 'remember me'.

>I will do some test but HTTPs for every page is likely too heavy for the
>poor server.

heavier than nothing, probably true
heavier than encrypting/decrypting all cookie values each time? slightly
heavier timewise? not at all.

>Not sure.

I guarantee you!

>The root resource is created only once, right?

You decide it.

>And I can do:
>
>class ChildPage(rend.Page):
>	...
>
>class MainPage(rend.Page):
>	...
>
>
>
>root = MainPage()
>child = ChildPage()
>
>root.putChild('a', child)
>child.putChild('b', child)
>
>
>server = appserver.NevowSite(root)

See? You can decide it, although if you did this because it was an optimization you will regret doing it.

>> And this
>> will be enforced without the context. Also... Are you actually worrying
>> about creating one object compared to the cost of rendering a dynamic
>> page? (and locating it!)
>
>I have learned to not make pre-assumptions without doing some tests.

well... I did tests and I know what happens during page rendering and page lookup. For each rendering 6 to infinite contexts are instantiated. If you nest more than 5 fragments python reaches the infinite recursion limit (this number might vary, just to give you an example of how many objects are created during rendering). You are removing a:
dialtone@aiolia /Volumes/dati/Sviluppo/Divmod/branches % python -m timeit -s 'class Foo(object): pass' -c 'Foo()'                                         [17:31]
1000000 loops, best of 3: 1.62 usec per loop

1.62 usec (on my ibook)

over something that is extremely more expensive per se (child lookup).

>> Of course there's nothing that prevents you to
>> return always the same page object from guard.
>>
>>> And guard has some (avoidable) security problems, too...
>>> It uses URLs based sessions without my permission.
>>
>> my who? user? developer?
>>
>
>Developer.

Can't see that as such a big problem... But it should be configurable indeed, open a ticket.

>Some sites, as an example, bind cookies to user IP address (Yahoo, at
>least some years ago).

Which is not secure, I can fake it, I might be behind a NAT, I might steal the computer, I might use a computer from an internet cafe` used by someone else before me. How is this going to be more secure? HTTPS is enough.

>Some other personal advice about yout guard implementation:
>- I think that SessionManager should be renamed SessionFactory

It's not a proper factory. SessionManager is a clean name, it manages lifetimes and creation/destruction. Exactly what a manager does.

>- Maybe the getSession() of the SessionManager class should be changed
>  in getSession(sessionInterface=ISession)
>  That is, ISessionManager should work a little like the
>  ICredentialsChecker.
>
>  I can define an IGuardSession with additional features (the guard
>  attribute that really make sense only for authenticator's sessions.)

what's an authenticator's session? This might be useful but seems like a lot of added complexity for a pretty small usecase. Remember sessions are an implementation detail not something that should be exposed to the user. I can't imagine a need for such a generic API.

>- If you choose to not create sessions for anonymous users, then there
>  is no more need for the loggedIn callback

If you give me enough reason to remove the loggedIn callback I will remove it.

From manlio_perillo at libero.it  Thu Aug  3 13:26:13 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Aug  3 13:23:55 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060803172908.1717.1777397042.divmod.quotient.13388@ohm>
References: <20060803172908.1717.1777397042.divmod.quotient.13388@ohm>
Message-ID: <44D23FC5.7060202@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Thu, 03 Aug 2006 18:28:04 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Of course.
>>
>> Is this better?:
>> """Session cookies carry some text used to authenticate users (called
>> authenticator).
>>
>> The only secure way to transport such an information beetwen client and
>> server is with HTTPS."""
> 
> This is better. Although 'carry some text used to' is not that good,
> what would be good is to write that it carries _exactly_.
> 

Ok.

> [...]
>
>> An attacker "authenticate" into the application using a stealed cookie.
>> No one is changing/regenerating the password, the attacker only changes
>> the account email address and then ask the system to send the
>> "forgotten" password to the new (under its control) email address.
> 
>> It needs to execute HTTP commands, and the sessions does not change.
> 
> Given your other suggestions (one of them was store the hash of the
> password) how are you going to send the "forgotten" password? You don't
> even know it.
> 

Ok, so you where supposing this feature.
And, indeed, I think I'm going to hash the passwords.

> You must autogenerate a new one and then send it, and if it's like that
> you 'just' lost an account and not a password.
> 

One can simply update the entry in the database, without having the
application code know about this (but I'm not sure here, I have to do
some tests since I'm interested in this feature).


> Anyway these suggestions are more part of another chapter that could be
> titled: "Suggestions on safe web app design" rather than part of the
> authentication chapter.
> 
>>> sessions are not authentication, of course they are not good for that.
>>>
>>
>> Yes, sessions carry authenticators.
> 
> What are these and why?
> 

authenticator or authentication token.
On papers (like http://pdos.lcs.mit.edu/cookies/pubs/webauth:tr.pdf) and
the OWASPGuide they use this term.

>>> They are different kind of things.
>>
>> No.
>> Both cookies, URLs and hidden form's controls are a mean to transport
>> sessions IDs.
> 
> Those are _different_ means to transport session ID.
> 

Ok.

>> Do you prefer a fully usable site to a secure one?
>> Cookies are standards.
> 
> You still have to show me how it is not secure to use session IDs in the
> URL.

http://divmod.org/trac/ticket/1377

Try to add the icon for XHTML validation.
You will see your session id on the validator page, once you visit it.

Your site can include links for sponsors.
And these sponsor may be interested to steal user's data.

Not so many user will click on these links, but some will do it.


I have also request the ticket #1378
But I think this is more difficult to exploit, unless you don't filter
this kind of HTML code:

<html>
  <body>
    <p>Hello world
      <meta http-equiv="Set-Cookie"
            content="sessionid=1234; Expires=Friday, 01-Jan-2010
000:00:00 0GMT">
    </p>
  </body>
</html>


How many developers knows to remove meta tag in the body?



>> I don't have an e-commerce site.
>> Its only a portal.
> 
> You are spending more time here talking about how to make session id
> exchange more secure while you could have simply used https and that's all.
> Doesn't sound very efficient.
> 

Well, know I'm spending a couple of hours on this topic, but HTTPs will
slowdown my site forever.

>> Mea culpa on using the wrong term. Of course I intended persistent.
> 
> persistent sessions are yet another thing and the user asks for the
> explicitly by ticking 'remember me'.
> 

Of course.

>> I will do some test but HTTPs for every page is likely too heavy for the
>> poor server.
> 
> heavier than nothing, probably true
> heavier than encrypting/decrypting all cookie values each time? slightly
> heavier timewise? not at all.
> 

Encryption is not really needed, only signing.
But, as you say, HTTPs can be a better solution at all.

> [...]
> 
> See? You can decide it, although if you did this because it was an
> optimization you will regret doing it.
> 

Well, for some uses cases it can just work.

>>> And this
>>> will be enforced without the context. Also... Are you actually worrying
>>> about creating one object compared to the cost of rendering a dynamic
>>> page? (and locating it!)
>>
>> I have learned to not make pre-assumptions without doing some tests.
> 
> well... I did tests and I know what happens during page rendering and
> page lookup. For each rendering 6 to infinite contexts are instantiated.
> If you nest more than 5 fragments python reaches the infinite recursion
> limit (this number might vary, just to give you an example of how many
> objects are created during rendering). 

But this is a nightmare! ;-)
Have you done some tests with the new version context-less?

> You are removing a:
> dialtone@aiolia /Volumes/dati/Sviluppo/Divmod/branches % python -m
> timeit -s 'class Foo(object): pass' -c
> 'Foo()'                                         [17:31]
> 1000000 loops, best of 3: 1.62 usec per loop
> 
> 1.62 usec (on my ibook)
> 
> over something that is extremely more expensive per se (child lookup).
> 

But you forgot to include some time here...

>>> Of course there's nothing that prevents you to
>>> return always the same page object from guard.
>>>
>>>> And guard has some (avoidable) security problems, too...
>>>> It uses URLs based sessions without my permission.
>>>
>>> my who? user? developer?
>>>
>>
>> Developer.
> 
> Can't see that as such a big problem... But it should be configurable
> indeed, open a ticket.
> 

Done.

But I think that it will never be commited, since it will involve a
partial refactoring of Guard.

The same reason why old file upload support is still there (and there is
no control on the size of POST data so someone can send me an image of 3
MB).

At least I can change this without changing source code.

> [...]

>> Some other personal advice about yout guard implementation:
>> - I think that SessionManager should be renamed SessionFactory
> 
> It's not a proper factory. SessionManager is a clean name, it manages
> lifetimes and creation/destruction. Exactly what a manager does.
> 

Ok.

>> - Maybe the getSession() of the SessionManager class should be changed
>>  in getSession(sessionInterface=ISession)
>>  That is, ISessionManager should work a little like the
>>  ICredentialsChecker.
>>
>>  I can define an IGuardSession with additional features (the guard
>>  attribute that really make sense only for authenticator's sessions.)
> 
> what's an authenticator's session? 

A session used for user's authentication.

I can create a session only to store some state (as an example, to count
how time an user failed the login).
Why it should have a guard attribute?

And, indeed, in newow.inevow are defined ISession and IGuardSession.

> This might be useful but seems like a
> lot of added complexity for a pretty small usecase. Remember sessions
> are an implementation detail not something that should be exposed to the
> user. I can't imagine a need for such a generic API.
> 

You are right.
But you are also supposing that SessionManager creates only one king of
session.

>> - If you choose to not create sessions for anonymous users, then there
>>  is no more need for the loggedIn callback
> 
> If you give me enough reason to remove the loggedIn callback I will
> remove it.
> 

If it is possible to avoid creating sessions for anonymous users, then a
session needs only to be created after a successful login.
So you can put the code that is now in loggedIn in createSession.



Regards  Manlio Perillo

From dialtone at divmod.com  Thu Aug  3 17:54:54 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Aug  3 17:55:00 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44D23FC5.7060202@libero.it>
Message-ID: <20060803225454.1717.594011582.divmod.quotient.13612@ohm>

On Thu, 03 Aug 2006 20:26:13 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>> You must autogenerate a new one and then send it, and if it's like that
>> you 'just' lost an account and not a password.
>>
>
>One can simply update the entry in the database, without having the
>application code know about this (but I'm not sure here, I have to do
>some tests since I'm interested in this feature).

Update which entry in the database? The password? Just ask to provide the old one or simply don't put the old one in the page. Again: how are you going to _show_ a passoword that you don't even know? it's hashed.

>authenticator or authentication token.
>On papers (like http://pdos.lcs.mit.edu/cookies/pubs/webauth:tr.pdf) and
>the OWASPGuide they use this term.

Ok, it's the session ID. Let's restate your sentence now then: you said that sessions are a bad fit for authentication.

This is true only when you talk about cookies. Sessions serverside are a perfect way to deal with authentication and they should not be accessible by the user.

>How many developers knows to remove meta tag in the body?

Well done even with the cookie. I think that a good way to fix the bug is
to begin some work to include my new guard code.

What do the others think about this? Glyph, exarkun, idnar, amberite, etc.?

>Well, know I'm spending a couple of hours on this topic, but HTTPs will
>slowdown my site forever.

Measured in how much loss in performance? How loaded is the server? How many users do you have?

>> heavier than nothing, probably true
>> heavier than encrypting/decrypting all cookie values each time? slightly
>> heavier timewise? not at all.
>>
>
>Encryption is not really needed, only signing.
>But, as you say, HTTPs can be a better solution at all.

signing is even heavier than encryption because signing means hashing and encrypting (a)symetrically which is what HTTPs does.

Many websites just go for the HTTPs solution with secure cookies. It's easy enough and if you were really concerned about performances you wouldn't be using python and twisted and nevow.

>Well, for some uses cases it can just work.

No it doesn't. It's mostly always a bad idea and is confusing.

>But this is a nightmare! ;-)
>Have you done some tests with the new version context-less?

context-less doesn't create contexts and that's more than enough to know that it would be better. Currently there is no code that uses a context-less rendering only an API that provides a Page and an Element object without the context.

>But you forgot to include some time here...

I expect you to do some job on your own. If you say something is expensive it's because you already measured it.

>But I think that it will never be commited, since it will involve a
>partial refactoring of Guard.

A new guard version is already there and we are about to start the biggest ticket in Nevow history... guard is not going to scare anyone (hopefully is going to go once web2 is finished).

>The same reason why old file upload support is still there (and there is
>no control on the size of POST data so someone can send me an image of 3
>MB).
>
>At least I can change this without changing source code.

Fixing this requires more than a simple refactoring... It's a complete overhaul of twisted.web API, which is twisted.web2.

>I can create a session only to store some state (as an example, to count
>how time an user failed the login).
>Why it should have a guard attribute?

Do you know that in python everything is by reference? It's not going to waste more time and having a reference to guard is useful for application level code that wants to mutate a session from unauthenticated to authenticated. (this is pretty much the only usecase).

>And, indeed, in newow.inevow are defined ISession and IGuardSession.

Those are not 2 kinds of sessions that you can use. It's backwards compatibility mess plus a small amount of being generic.

>You are right.
>But you are also supposing that SessionManager creates only one king of
>session.

I'm supposing that yes. Do you have a usecase besides the one already implemented in session.py where you have both persistent and non persistent sessions in the same object? 

>>> - If you choose to not create sessions for anonymous users, then there
>>>  is no more need for the loggedIn callback
>>
>> If you give me enough reason to remove the loggedIn callback I will
>> remove it.
>>
>
>If it is possible to avoid creating sessions for anonymous users, then a
>session needs only to be created after a successful login.
>So you can put the code that is now in loggedIn in createSession.

Which doesn't change the fact that createSession is not that easy to change while changing loggedIn just requires a subclass and override without even going for the upcall if you don't need to, because the callback is fairly easy (and that's why it's a callback).

This is not enough reason anyway. You have to explain why it is a bad idea.

From ldanielburr at mac.com  Thu Aug  3 19:58:58 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Thu Aug  3 19:59:03 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060803225454.1717.594011582.divmod.quotient.13612@ohm>
References: <20060803225454.1717.594011582.divmod.quotient.13612@ohm>
Message-ID: <op.tdqickxo3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Thu, 03 Aug 2006 17:54:54 -0500, Valentino Volonghi aka Dialtone  
<dialtone@divmod.com> wrote:

[snip long, painful, ongoing discussion between dialtone and Manlio]

>
> What do the others think about this? Glyph, exarkun, idnar, amberite,  
> etc.?
>

I think this whole discussion is based on a misunderstanding.  Speaking
as someone who only develops web applications, twisted.cred has always
made exactly zero sense to me.  This is not to say that twisted.cred by
itself is bad; on the contrary, it is probably the only way to provide
an authentication interface that works with all the different kinds of
server/clients you can build with twisted.

If you are like me, and only spend your time building apps on top of
HTTP, then guard seems hopelessly complicated.  I know how authentication
works in the world of HTTP: There's Basic, there's Digest, and there's
"POST the login form to the server", in both plain-vanilla HTTP and also
chocolatey HTTPS flavors.  Having that model in one's head really makes
guard and cred seem like a lot of complications for no real benefit.

Until you write something other than a web application.

Then, it makes sense, and the water flows, and Spring comes on time, and
your web-app and your telnet-app and your nifty new AMP-app all frolic
together in the meadow.

To me, the bottom line is this: If all you are ever going to do is build
web applications, then you will *never* see any real point in jumping
through all of cred's hoops (portal, avatar, mind, WTF?  I just want a
freaking username/password combo, secured by SSL, like almost every other
web app on Earth!).  If, on the other hand, you start build stacks of
nifty twisted services (a chat server, web server, ftp server, etc) that
all work together, then give up your HTTP-centric view of authentication,
and accept that cred is probably as good as anyone is going to do in a
multi-protocol world, at least for now.

My two cents,

L. Daniel Burr (amberite)

From duncan.mcgreggor at gmail.com  Thu Aug  3 22:30:06 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Thu Aug  3 22:30:31 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <op.tdqickxo3oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <20060803225454.1717.594011582.divmod.quotient.13612@ohm>
	<op.tdqickxo3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <44D2BF3E.4040105@gmail.com>

L. Daniel Burr wrote:

> On Thu, 03 Aug 2006 17:54:54 -0500, Valentino Volonghi aka Dialtone 
 >
> If you are like me, and only spend your time building apps on top of
> HTTP, then guard seems hopelessly complicated.
[snip]
> Until you write something other than a web application.

Or until you have to authenticate your web application against other 
systems (a fairly common use case in my experience).

d

From glyph at divmod.com  Fri Aug  4 01:42:13 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Aug  4 01:42:35 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44CFA703.4050602@libero.it>
Message-ID: <20060804064213.1717.1035112698.divmod.quotient.13905@ohm>

On Tue, 01 Aug 2006 21:09:55 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:

>I have written a new chapter for authentication.
>It is still a draft (as always), and don't forget that I'm not an expert.

I've just had a few minutes to read your chapter.

Unfortunately I feel like it documents things exactly backwards.

If you have issues with guard's implementation strategy they should be dealt with in discussions of implementation, not by telling Nevow's users to ignore it.

Any discussion of authentication in Nevow should begin and end with guard, with perhaps a few footnotes about how one might deal with various security concerns.  cookies vs. hidden form fields vs. URL prefixes is not an application-level consideration.  Code examples should focus on how to _avoid_ polluting your application with dependencies on implementation details of your authentication mechanism.

Even without talking about integrating with other protocols (which is a _key_ feature of Nevow, as it is the only "twisted native" templating framework), asking every developer to re-implement authentication and choose between different security models and security properties of cookies vs. HTTPS vs. Basic vs. Digest is a recipie for disaster.  This is hard enough for guard to get right by itself.  It is nigh impossible to provide generic, protocol-level APIs and some light discussion of their security implications and still expect people to get it right on their own.

The "dos and don'ts" paper you cited repeatedly points out that security systems should not be written by people who are not experienced at doing such things: the collective experience of the community needs to be brought to bear to get ONE authentication system and API right for Nevow.

Now, guard is not currently as pluggable as it could be, but developers should be strongly encouraged to write to its API so that when we _do_ eventually start adding support for things like ActiveDirectory and OpenID, Nevow applications will generally work properly.

From glyph at divmod.com  Fri Aug  4 02:16:56 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Aug  4 02:17:02 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: 0
Message-ID: <20060804071656.1717.1739260387.divmod.quotient.13928@ohm>

On Thu, 03 Aug 2006 19:58:58 -0500, "L. Daniel Burr" <ldanielburr@mac.com> wrote:
>On Thu, 03 Aug 2006 17:54:54 -0500, Valentino Volonghi aka Dialtone 
><dialtone@divmod.com> wrote:
>I think this whole discussion is based on a misunderstanding.

I agree.

>To me, the bottom line is this: If all you are ever going to do is build
>web applications, then you will *never* see any real point in jumping
>through all of cred's hoops (portal, avatar, mind, WTF?

Guard _should_ support single-sign-on systems like OpenID or Active Directory, to minimize the number of passwords that users have to remember when interacting with Twisted sites.

If it did, it would be a lot easier to sell some of the learning required to use it well.  But I think that we could do a lot to make the learning seem easier: once over the initial hump, guard is not hard to use and the conceptual design is very simple.

>I just want a freaking username/password combo, secured by SSL, like almost 
>every other web app on Earth!).

Until we can address the prevelance of username/password systems, Guard should pretty do what it does and get out of your way.  I don't think that it should present any additional difficulty due to the fact that it's trying to do more than usernames and passwords: in fact, guard _ONLY_ supports usernames and passwords right now.  I think that interacting with it through a slightly higher-level system like Mantissa is pretty easy, so some focus on a bit of boilerplate to hide some of the more advanced details would be good.

Where people tend to get tripped up is the fact that Guard treats resources as objects or capabilities, whereas the typical web mentality is to treat them as files or functions.  Despite the fact that it's a very common mentality, it leads to atrocious, insecure code.  I think we should be doing everything possible to make the advantages of the guard model clear, and not providing a bug-prone and flaky way to do authentication simply because it seems comfortable and familiar.

I strongly believe that the capability-style authentication that guard provides is significantly more secure than the typical crap that ends up in most web applications.  This has nothing to do with other protocols, except for the fact that programmers writing code to speak other protocols don't have the baggage of thinking of every chat room as a file on disk, or every email as a stateless, universally accessible object which customizes itself on demand.  In a guard-style application, your resources look like this:

  class NormalResource(...):
    def __init__(self, userObj):
      self.userObj = userObj
    def child_lala(self):
      return HarmlessResource(self.userObj.harmlessStuff)

  class AdminResource(NormalResource):
    def child_rootme(self):
      return DestroyEverythingResource(self.userObj.stuffAllowedToDestroy)
    def child_lala(self):
      return NotQuiteHarmlessResource(self.userObj.harmlessStuff)

Whereas what most web developers, only recently dragged in from PHP, _want_ to do is this:

  ADMIN_USERNAMES = ['bob', 'jim', 'me']
  class IDontKnowAnythingAboutEncapsulationResource(...):
    def child_lala(self):
      global PAGE_MODE
      global HARMLESS_STUFF
      global USERNAME
      PAGE_MODE = 'harmless'
      HARMLESS_STUFF = getHarmlessStuff(USERNAME)
      if USERNAME.lower() in ADMIN_USERNAMES:
        PAGE_MODE = 'not_quite_harmless'
      return self

    def child_rootme(self):
      global PAGE_MODE
      global ALLOW_DESTROY
      PAGE_MODE = 'rootme'
      global USERNAME
      if USERNAME.lower() in ADMIN_USERNAMES:
        ALLOW_DESTROY = getAllowedToDestroyStuff(USERNAME)
      else:
        PAGE_MODE = '404'
      return self

Obviously I'm exaggerating somewhat for effect here, but this really is a common style, especially once you realize that the database, the request, the session, and the context are all just different forms of global variables.

Due to the resources-are-files mentality, it has become conventional wisdom that passing arguments to the constructors of objects is a hardship, if those objects happen to be resources.  This should stop.  Just about every other kind of programming seems to be on board with the whole "global variables are bad" thing.

Also, did you spot the hidden security bug in the second example?  '.lower()' is locale dependent, so the security check in child_rootme may be wrong depending on the locale the server is run in.  For example, on a turkish server, 'J?M' would be able to access administrative functions, but 'JIM' would not.

Even without weird trivia like that, it's a lot easier to forget an 'if' check for authentication on a sensitive operation than to accidentally implement it in the wrong class, or accidentally implement it twice.

From manlio_perillo at libero.it  Fri Aug  4 02:56:16 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Aug  4 02:53:50 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060803225454.1717.594011582.divmod.quotient.13612@ohm>
References: <20060803225454.1717.594011582.divmod.quotient.13612@ohm>
Message-ID: <44D2FDA0.7030109@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Thu, 03 Aug 2006 20:26:13 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>>> You must autogenerate a new one and then send it, and if it's like that
>>> you 'just' lost an account and not a password.
>>>
>>
>> One can simply update the entry in the database, without having the
>> application code know about this (but I'm not sure here, I have to do
>> some tests since I'm interested in this feature).
> 
> Update which entry in the database? The password? Just ask to provide
> the old one or simply don't put the old one in the page. Again: how are
> you going to _show_ a passoword that you don't even know? it's hashed.
> 

1) The client ask to change the password
2) The application ask the old password and the new one
3) do the query:
   UPDATE Accounts SET password=md5(:new_password)
   WHERE password=md5(:old_password)

The application developers can forget to invalidate the "old" session.


>> authenticator or authentication token.
>> On papers (like http://pdos.lcs.mit.edu/cookies/pubs/webauth:tr.pdf) and
>> the OWASPGuide they use this term.
> 
> Ok, it's the session ID. Let's restate your sentence now then: you said
> that sessions are a bad fit for authentication.
> 
> This is true only when you talk about cookies. Sessions serverside are a
> perfect way to deal with authentication and they should not be
> accessible by the user.
> 

Ok, but sessions cannot exists without cookies (or other solutions to
keep state beetwen successive requests).

The problem is that "GuardSession" are not simply session!
They allow an user who only know the session ID to authenticate into a
system.


> [...]
>
>> Well, know I'm spending a couple of hours on this topic, but HTTPs will
>> slowdown my site forever.
> 
> Measured in how much loss in performance? How loaded is the server? How
> many users do you have?
> 

It sure will slowdown things.
I still have to do real world tests.

>>> heavier than nothing, probably true
>>> heavier than encrypting/decrypting all cookie values each time? slightly
>>> heavier timewise? not at all.
>>>
>>
>> Encryption is not really needed, only signing.
>> But, as you say, HTTPs can be a better solution at all.
> 
> signing is even heavier than encryption because signing means hashing
> and encrypting (a)symetrically which is what HTTPs does.
> 

Ok, thanks.

> [...]
> 
>> But I think that it will never be commited, since it will involve a
>> partial refactoring of Guard.
> 
> A new guard version is already there 

Where? The one in your sandbox?

> and we are about to start the
> biggest ticket in Nevow history... guard is not going to scare anyone
> (hopefully is going to go once web2 is finished).
> 

Ok.
So this means that the development of new guard is goind to happen in
Nevow and *then* ported to web2?

>> The same reason why old file upload support is still there (and there is
>> no control on the size of POST data so someone can send me an image of 3
>> MB).
>>
>> At least I can change this without changing source code.
> 
> Fixing this requires more than a simple refactoring... It's a complete
> overhaul of twisted.web API, which is twisted.web2.
> 

Ok.
But now twisted.web2 is not ready.
It will take an year to be usable in production.

I cannot tell Nevow to stop reading long POST data, but I can tell it to
do not parse this data.

As I can see, the big problem is with parsing.


>> I can create a session only to store some state (as an example, to count
>> how time an user failed the login).
>> Why it should have a guard attribute?
> 
> Do you know that in python everything is by reference? It's not going to
> waste more time and having a reference to guard is useful for
> application level code that wants to mutate a session from
> unauthenticated to authenticated. (this is pretty much the only usecase).
> 

You can need to initialize some state in your Session.
class ICounter(Interface):
   pass

class CounterSession(Session):
	def __init__(self):
		self.count = 0


sc = SessionManager.getSession(ICounter)


I can now use this simple session to limit logins attemps.

Well, of course an attacker will not use cookies at all...
But I can bind the session to the source IP address, using this value as
session key
(at least I would like to send an email to the site admin when having
100 logins attemps from the same IP address).


> [...]
>
>> But you are also supposing that SessionManager creates only one king of
>> session.
> 
> I'm supposing that yes. Do you have a usecase besides the one already
> implemented in session.py where you have both persistent and non
> persistent sessions in the same object?

See above.


>>>> - If you choose to not create sessions for anonymous users, then there
>>>>  is no more need for the loggedIn callback
>>>
>>> If you give me enough reason to remove the loggedIn callback I will
>>> remove it.
>>>
>>
>> If it is possible to avoid creating sessions for anonymous users, then a
>> session needs only to be created after a successful login.
>> So you can put the code that is now in loggedIn in createSession.
> 
> Which doesn't change the fact that createSession is not that easy to
> change while changing loggedIn just requires a subclass and override
> without even going for the upcall if you don't need to, because the
> callback is fairly easy (and that's why it's a callback).
> 

This is true.

> This is not enough reason anyway. You have to explain why it is a bad idea.
> 

I don't like the idea to have "authentication only" sessions.
SessionManager (and CookieFactory) is a general class that should not
live in guard.


But, if you say that sessions are *never* to be used except to hold
authenticated states (plus other persistent state, if one want to do
so), then... ok.




Regards  Manlio Perillo

From manlio_perillo at libero.it  Fri Aug  4 03:19:04 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Aug  4 03:16:39 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060804064213.1717.1035112698.divmod.quotient.13905@ohm>
References: <20060804064213.1717.1035112698.divmod.quotient.13905@ohm>
Message-ID: <44D302F8.5090507@libero.it>

glyph@divmod.com ha scritto:
> On Tue, 01 Aug 2006 21:09:55 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
> 
>> I have written a new chapter for authentication.
>> It is still a draft (as always), and don't forget that I'm not an expert.
> 
> I've just had a few minutes to read your chapter.
> 
> Unfortunately I feel like it documents things exactly backwards.
> 

Not backwards, I have used a bottom up approach.

> If you have issues with guard's implementation strategy they should be
> dealt with in discussions of implementation, not by telling Nevow's
> users to ignore it.
> 

I'm not saying to ignore it.
I'm documenting alternate solutions.

> Any discussion of authentication in Nevow should begin and end with
> guard, with perhaps a few footnotes about how one might deal with
> various security concerns.  cookies vs. hidden form fields vs. URL
> prefixes is not an application-level consideration.  Code examples
> should focus on how to _avoid_ polluting your application with
> dependencies on implementation details of your authentication mechanism.
> 

Yes, I agree here.

> Even without talking about integrating with other protocols (which is a
> _key_ feature of Nevow, as it is the only "twisted native" templating
> framework), asking every developer to re-implement authentication and
> choose between different security models and security properties of
> cookies vs. HTTPS vs. Basic vs. Digest is a recipie for disaster.  

The security model is always the same.
It shold be (and documented) inside the SessionManager/CookieFactory.

> This
> is hard enough for guard to get right by itself.  It is nigh impossible
> to provide generic, protocol-level APIs and some light discussion of
> their security implications and still expect people to get it right on
> their own.
> 


> The "dos and don'ts" paper you cited repeatedly points out that security
> systems should not be written by people who are not experienced at doing
> such things: 

Because people will try to send usernames in clear with cookies, forget
to use secure cookies when using HTTPs, use crypt instead of SHA1...

The guard security model is:
1) create "secure" IDs
2) don't forget to set the cookie to secure, when using HTTPs
3) use this ID to lookup into server side state
4) make sure to check for sessions lifetime on the server side, not only
   on the client

Of course 1) is only against prediction and brute force attacks.
It can do nothing against replication attacks, so developers should be
informed to use persistent cookie with cares (depends on what they have
to protect). Of course one can use HTTPs.


People have to think with their mind.
As an example now I'm using Nevow because I have a lot of benefic (most
of all the reuse my knowledge of Twisted).

If I find that Nevow is too heavy I will try:
1) a new templating sistem
2) Django (?)

Maybe future hardware will allow me to use HTTPs as default choice, and so.

But I have to understand this issues.


> the collective experience of the community needs to be
> brought to bear to get ONE authentication system and API right for Nevow.
> 

I don't like into being forced into using only one solution, but I agree
that guard is worth of being used, *always*.

However we have a different vision of developers.
I thinks that people should be documented about all possible things:
they should be able to do the right thing (suitable for their application).

Some of you think that people should be protected like childrens, you
even want to hidden things if they are too "scary".

> Now, guard is not currently as pluggable as it could be, 

Is this an interface/design problem, or simply a lack of support?

> but developers
> should be strongly encouraged to write to its API so that when we _do_
> eventually start adding support for things like ActiveDirectory and
> OpenID, Nevow applications will generally work properly.
> 

Ok



Thanks and regards  Manlio Perillo

From manlio_perillo at libero.it  Fri Aug  4 03:56:35 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Aug  4 03:54:09 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <op.tdqickxo3oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <20060803225454.1717.594011582.divmod.quotient.13612@ohm>
	<op.tdqickxo3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <44D30BC3.8030707@libero.it>

L. Daniel Burr ha scritto:
> On Thu, 03 Aug 2006 17:54:54 -0500, Valentino Volonghi aka Dialtone
> <dialtone@divmod.com> wrote:
> 
> [...]
> 
> If you are like me, and only spend your time building apps on top of
> HTTP, then guard seems hopelessly complicated. 

I agre that guard is complicated.
It took me some times to learn how it works but now it seem simple.

> [...]
> 
> To me, the bottom line is this: If all you are ever going to do is build
> web applications, then you will *never* see any real point in jumping
> through all of cred's hoops (portal, avatar, mind, WTF?  I just want a
> freaking username/password combo, secured by SSL, like almost every other
> web app on Earth!).  

I would like to support authorization based on SSL certificates.
That is, check if the *client* certificate is signed by me.

Of course this is only for the admin area.

Some times ago I have done some tests, without success.
First of all I have to setup the server (I have found some documentation
on this, at low level);
then I have to know how to setup the client (Firefox, and so) to supply
the right certificate when connecting to my site (and here I don't know
what to do, I don't even know if this is possible at all with current
browser).



Regards  Manlio Perillo

From manlio_perillo at libero.it  Fri Aug  4 04:53:49 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Aug  4 04:51:22 2006
Subject: [Twisted-web] Nevow application layout
Message-ID: <44D3192D.1070204@libero.it>

Hi.

Since now I'm going to define the structure of my application I'm try to
understand the best layout (for source files).

Valentino suggest this:
  /ProjectName
    /static
       /i   - images
       /s   - styles
       /j   - javascript
    /template
    /doc
    /database - sql files
    /bin      - various scripts
    /projectname - python modules
       /web  - for the web stuff
       /storage - for the data layer
       /other_eventual_twisted_using_subparts
      common_python_modules.py


But I don't understand why this is better then:
- store template dir inside the web dir
- the same for static dir
- store the database files/dir inside the storage dir

Moreover, why use short names for static subdir?

Apart this, I like this general structure.
I have added a section to the nevow-deployment (not sure this is the
right place) in my private branch.



Thanks  Manlio Perillo

From dialtone at divmod.com  Fri Aug  4 05:13:57 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri Aug  4 05:13:58 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44D2FDA0.7030109@libero.it>
Message-ID: <20060804101357.1717.2046007476.divmod.quotient.14049@ohm>

On Fri, 04 Aug 2006 09:56:16 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>1) The client ask to change the password
>2) The application ask the old password and the new one
>3) do the query:
>   UPDATE Accounts SET password=md5(:new_password)
>   WHERE password=md5(:old_password)
>
>The application developers can forget to invalidate the "old" session.

I remember you said the problem was stealing the password. I can't see how this is going to allow stealing the old password.
If you don't want an attacker to take control of the session of another user then use HTTPs.

>Ok, but sessions cannot exists without cookies (or other solutions to
>keep state beetwen successive requests).

this is an HTTP problem and of its stateless nature.

>The problem is that "GuardSession" are not simply session!
>They allow an user who only know the session ID to authenticate into a
>system.

The problem of ALL the session systems. If you want to avoid this use HTTPs.

>Ok.
>So this means that the development of new guard is goind to happen in
>Nevow and *then* ported to web2?

Yes, unless web2 discovers a new and wonderful way to deal with this problem.

>You can need to initialize some state in your Session.
>class ICounter(Interface):
>   pass
>
>class CounterSession(Session):
>	def __init__(self):
>		self.count = 0
>
>
>sc = SessionManager.getSession(ICounter)

>I can now use this simple session to limit logins attemps.

This usecase is not a very good example of why it is a good idea.
But I think it may be required for OpenID and similar mechanisms.

>Well, of course an attacker will not use cookies at all...
>But I can bind the session to the source IP address, using this value as
>session key
>(at least I would like to send an email to the site admin when having
>100 logins attemps from the same IP address).

I can't think of this feature in a pluggable way. If you want it just code it in your Session object. It's fairly easy to do.
>> This is not enough reason anyway. You have to explain why it is a bad idea.
>>
>
>I don't like the idea to have "authentication only" sessions.
>SessionManager (and CookieFactory) is a general class that should not
>live in guard.

Any _technical_ reason? importing a module and getting only the objects you
need from it doesn't sound so bad to me.


From manlio_perillo at libero.it  Fri Aug  4 05:34:53 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Aug  4 05:32:27 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060804101357.1717.2046007476.divmod.quotient.14049@ohm>
References: <20060804101357.1717.2046007476.divmod.quotient.14049@ohm>
Message-ID: <44D322CD.4080305@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Fri, 04 Aug 2006 09:56:16 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> 1) The client ask to change the password
>> 2) The application ask the old password and the new one
>> 3) do the query:
>>   UPDATE Accounts SET password=md5(:new_password)
>>   WHERE password=md5(:old_password)
>>
>> The application developers can forget to invalidate the "old" session.
> 
> I remember you said the problem was stealing the password. I can't see
> how this is going to allow stealing the old password.

Yes, you are right. I'm a bit lost within the discussion.
The right query is:

UPDATE Accounts SET password=md5(:new_password)
WHERE username=md5(:username)

The attacher does not know (and it never needs to know) the "old" password.
It can simply ask the system to send a valid password to its email address.

>> Ok.
>> So this means that the development of new guard is goind to happen in
>> Nevow and *then* ported to web2?
> 
> Yes, unless web2 discovers a new and wonderful way to deal with this
> problem.
> 

Well, much of web2 developers are nevow developers. I'm wrong?

>> You can need to initialize some state in your Session.
>> class ICounter(Interface):
>>   pass
>>
>> class CounterSession(Session):
>>     def __init__(self):
>>         self.count = 0
>>
>>
>> sc = SessionManager.getSession(ICounter)
> 
>> I can now use this simple session to limit logins attemps.
> 
> This usecase is not a very good example of why it is a good idea.

I'm not an expert in this field, so I have used the first example that
come to my mind.

> But I think it may be required for OpenID and similar mechanisms.
> 
>> Well, of course an attacker will not use cookies at all...
>> But I can bind the session to the source IP address, using this value as
>> session key
>> (at least I would like to send an email to the site admin when having
>> 100 logins attemps from the same IP address).
> 
> I can't think of this feature in a pluggable way. If you want it just
> code it in your Session object. It's fairly easy to do.

Yes, but you have to handle the initialization code by hand
(self.count = 0).

>>> This is not enough reason anyway. You have to explain why it is a bad
>>> idea.
>>>
>>
>> I don't like the idea to have "authentication only" sessions.
>> SessionManager (and CookieFactory) is a general class that should not
>> live in guard.
> 
> Any _technical_ reason? importing a module and getting only the objects you
> need from it doesn't sound so bad to me.
>

Handling session initialization code better.
Only SessionManager knows when a session object is created and when
simply retrivied (the interface is the same: getSession).



Regards  Manlio Perillo

From dialtone at divmod.com  Fri Aug  4 07:06:09 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri Aug  4 07:06:11 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44D322CD.4080305@libero.it>
Message-ID: <20060804120609.1717.236962092.divmod.quotient.14120@ohm>

On Fri, 04 Aug 2006 12:34:53 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Yes, you are right. I'm a bit lost within the discussion.
>The right query is:
>
>UPDATE Accounts SET password=md5(:new_password)
>WHERE username=md5(:username)

I doubt you want to hash the username too :).

>Well, much of web2 developers are nevow developers. I'm wrong?

They have commit right on Nevow but generally they don't develop Nevow.

>> I can't think of this feature in a pluggable way. If you want it just
>> code it in your Session object. It's fairly easy to do.
>
>Yes, but you have to handle the initialization code by hand
>(self.count = 0).

You would anyway. I'm not going to have Componentized classes in Nevow anymore, it's a bad idea because the session is not really meant to store arbitrary objects (it would be a problem once you need to persist that kind
of session later on). Also it would use the session as a storage for objects which is a bad way to program. Of course it is possible anyway, but at least it's not encouraged by the framework.

>Handling session initialization code better.
>Only SessionManager knows when a session object is created and when
>simply retrivied (the interface is the same: getSession).

loggedIn callback is a different thing still and is not part of the initialization even when you decide that you don't want sessions for anonymous users because guard still has to provide a way for the other developers to have sessions for anonymous users.

From ldanielburr at mac.com  Fri Aug  4 10:17:38 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Fri Aug  4 10:17:39 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060804071656.1717.1739260387.divmod.quotient.13928@ohm>
References: <20060804071656.1717.1739260387.divmod.quotient.13928@ohm>
Message-ID: <op.tdrl3oal3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Fri, 04 Aug 2006 02:16:56 -0500, <glyph@divmod.com> wrote:

> On Thu, 03 Aug 2006 19:58:58 -0500, "L. Daniel Burr"  
> <ldanielburr@mac.com> wrote:
>> On Thu, 03 Aug 2006 17:54:54 -0500, Valentino Volonghi aka Dialtone  
>> <dialtone@divmod.com> wrote:
>> I think this whole discussion is based on a misunderstanding.
>
> I agree.
>

Yay! ;)

>> To me, the bottom line is this: If all you are ever going to do is build
>> web applications, then you will *never* see any real point in jumping
>> through all of cred's hoops (portal, avatar, mind, WTF?
>
> Guard _should_ support single-sign-on systems like OpenID or Active  
> Directory, to minimize the number of passwords that users have to  
> remember when interacting with Twisted sites.
>

I'm sure everyone agrees that SSO support would be highly desirable.

> If it did, it would be a lot easier to sell some of the learning  
> required to use it well.  But I think that we could do a lot to make the  
> learning seem easier: once over the initial hump, guard is not hard to  
> use and the conceptual design is very simple.
>

Absolutely.  The real point I was trying to make is that your "typical"
web developer (yes, I know people hate when I generalize like this) just
wants some mechanism that he/she doesn't have to think about.  Granted,
some people are very uncomfortable using technology that they haven't
read line-for-line, but I'm not one of those.  I actually *like* for
things like authentication/authorization to be black boxes.  Not in
terms of the code, mind you, but in terms of use.  Don't make people
get cred/guard zen in order to feel comfortable using them.

[snip]
> I think that interacting with it through a slightly higher-level
> system like Mantissa is pretty easy, so some focus on a bit of
> boilerplate to hide some of the more advanced details would be good.

Yes, this is the black box to which I was referring.  As someone who
uses Mantissa, one of the things that appealed to me was that I did
not have to do anything but create some user accounts, and I didn't
have to even think about guard.  It all just works, and that's the
kind of ease-of-use that is needed.

Of course, my answer is to just use Mantissa, but there seems to be
a fair number of people who only want Nevow, hence this whole thread.

Thanks for clarifying where cred/guard should go.

L. Daniel Burr (amberite)

From manlio_perillo at libero.it  Fri Aug  4 10:33:59 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Aug  4 10:31:35 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060804120609.1717.236962092.divmod.quotient.14120@ohm>
References: <20060804120609.1717.236962092.divmod.quotient.14120@ohm>
Message-ID: <44D368E7.4050200@libero.it>

Valentino Volonghi aka Dialtone ha scritto:

> [...]

>>> I can't think of this feature in a pluggable way. If you want it just
>>> code it in your Session object. It's fairly easy to do.
>>
>> Yes, but you have to handle the initialization code by hand
>> (self.count = 0).
> 
> You would anyway. I'm not going to have Componentized classes in Nevow
> anymore, it's a bad idea because the session is not really meant to
> store arbitrary objects (it would be a problem once you need to persist
> that kind
> of session later on). 

You are not fair ;-).
You *do* store some objects on your session (the guard and the
authenticatedAs attributes)...

Moreover I have said that you should follow the example of cred, and
cred is not componentized at all.

class SessionManager(object):
   def __init__(self):
       self.factories = {}

   def registerSessionFactory(self, sf, iface=ISession):
       self.factories[iface] = sf

   def getSession(self, iface=ISession):
       sf = self.factories[iface]
       return sf


> Also it would use the session as a storage for
> objects which is a bad way to program. Of course it is possible anyway,
> but at least it's not encouraged by the framework.
> 

I'm really not sure if this is a bad way of program.



Regards  Manlio Perillo

From manlio_perillo at libero.it  Sat Aug  5 04:49:47 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Aug  5 04:47:23 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060804120609.1717.236962092.divmod.quotient.14120@ohm>
References: <20060804120609.1717.236962092.divmod.quotient.14120@ohm>
Message-ID: <44D469BB.3010303@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> [...]

> Also it would use the session as a storage for
> objects which is a bad way to program. Of course it is possible anyway,
> but at least it's not encouraged by the framework.
> 

I have found an example that needs specialized (non authenticators)
sessions.

Several e-commerce sites allow costumers to put items into a basket even
if they are not authenticated.

Authentication is really needed only for the transaction, where we need
the costumer approvation and its private data.

And it is a good idea to put the transaction resource on a subdomain,
SSL protected (and setting the secure and domain cookie attributes).

I thinks that you implementation of guard is focused on a single type of
web application, like stiq.


Regards  Manlio Perillo


From exarkun at divmod.com  Sun Aug  6 15:51:49 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun Aug  6 15:51:54 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44D469BB.3010303@libero.it>
Message-ID: <20060806205149.1717.241127850.divmod.quotient.16146@ohm>

On Sat, 05 Aug 2006 11:49:47 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Valentino Volonghi aka Dialtone ha scritto:
>> [...]
>
>> Also it would use the session as a storage for
>> objects which is a bad way to program. Of course it is possible anyway,
>> but at least it's not encouraged by the framework.
>>
>
>I have found an example that needs specialized (non authenticators)
>sessions.
>
>Several e-commerce sites allow costumers to put items into a basket even
>if they are not authenticated.

No.  This case is no different from any other.  Cred does not make
anonymous users a special case: it deals with them in the same way
it deals with all other users.

Guard is entirely capable of providing a shopping cart to unauthenticated
users.

Jean-Paul

From manlio_perillo at libero.it  Sun Aug  6 16:40:33 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun Aug  6 16:38:06 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060806205149.1717.241127850.divmod.quotient.16146@ohm>
References: <20060806205149.1717.241127850.divmod.quotient.16146@ohm>
Message-ID: <44D661D1.2040101@libero.it>

Jean-Paul Calderone ha scritto:
> [...]
>
>> I have found an example that needs specialized (non authenticators)
>> sessions.
>>
>> Several e-commerce sites allow costumers to put items into a basket even
>> if they are not authenticated.
> 
> No.  This case is no different from any other.  Cred does not make
> anonymous users a special case: it deals with them in the same way
> it deals with all other users.
> 
> Guard is entirely capable of providing a shopping cart to unauthenticated
> users.
> 

This is not the point.
The point is in having sessions that are not used for authentication.

I have just finished to write a version of guard that *do not* use
sessions for anonymous users.

This means that for dealing for an e-commerce application I have to
create a specialized session.
Hopefully I would like to do:

def BasketSession(Session):
   def __init__(self, ...):
       Session.__init__(self, ...)

       self.basket = []




Regards  Manlio Perillo

From exarkun at divmod.com  Sun Aug  6 16:50:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun Aug  6 16:50:11 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44D661D1.2040101@libero.it>
Message-ID: <20060806215009.1717.2125254019.divmod.quotient.16178@ohm>

On Sun, 06 Aug 2006 23:40:33 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Jean-Paul Calderone ha scritto:
>> [...]
>>
>>> I have found an example that needs specialized (non authenticators)
>>> sessions.
>>>
>>> Several e-commerce sites allow costumers to put items into a basket even
>>> if they are not authenticated.
>>
>> No.  This case is no different from any other.  Cred does not make
>> anonymous users a special case: it deals with them in the same way
>> it deals with all other users.
>>
>> Guard is entirely capable of providing a shopping cart to unauthenticated
>> users.
>>
>
>This is not the point.
>The point is in having sessions that are not used for authentication.
>
>I have just finished to write a version of guard that *do not* use
>sessions for anonymous users.
>
>This means that for dealing for an e-commerce application I have to
>create a specialized session.
>Hopefully I would like to do:
>
>def BasketSession(Session):
>   def __init__(self, ...):
>       Session.__init__(self, ...)
>
>       self.basket = []
>

Feel free to do this, but it's not the recommended way to address this
use case in twisted.web or Nevow.  The version of guard which is included
in releases of either won't work this way, nor will the documentation
recommend this approach.

Jean-Paul

From manlio_perillo at libero.it  Mon Aug  7 03:16:12 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Aug  7 03:13:47 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <20060806215009.1717.2125254019.divmod.quotient.16178@ohm>
References: <20060806215009.1717.2125254019.divmod.quotient.16178@ohm>
Message-ID: <44D6F6CC.2030500@libero.it>

Jean-Paul Calderone ha scritto:
> On Sun, 06 Aug 2006 23:40:33 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Jean-Paul Calderone ha scritto:
>>> [...]
>>>
>>>> I have found an example that needs specialized (non authenticators)
>>>> sessions.
>>>>
>>>> Several e-commerce sites allow costumers to put items into a basket
>>>> even
>>>> if they are not authenticated.
>>>
>>> No.  This case is no different from any other.  Cred does not make
>>> anonymous users a special case: it deals with them in the same way
>>> it deals with all other users.
>>>
>>> Guard is entirely capable of providing a shopping cart to
>>> unauthenticated
>>> users.
>>>
>>
>> This is not the point.
>> The point is in having sessions that are not used for authentication.
>>
>> I have just finished to write a version of guard that *do not* use
>> sessions for anonymous users.
>>
>> This means that for dealing for an e-commerce application I have to
>> create a specialized session.
>> Hopefully I would like to do:
>>
>> def BasketSession(Session):
>>   def __init__(self, ...):
>>       Session.__init__(self, ...)
>>
>>       self.basket = []
>>
> 
> Feel free to do this, but it's not the recommended way to address this
> use case in twisted.web or Nevow.  The version of guard which is included
> in releases of either won't work this way, nor will the documentation
> recommend this approach.
> 

Yes.
And guard resolves the problem requiring that even anonymous users have
a session.

Guard is not only doing a not necessary thing (page with cookies can
have problems with cache, AFAIK) but this create a potential (very rare
indeed) security problem since an anonymous user gain a valid session ID
that can be "authenticated" by a valid user (session fixation).



Thanks and regards  Manlio Perillo


From manlio_perillo at libero.it  Mon Aug  7 03:32:58 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Aug  7 03:30:33 2006
Subject: [Twisted-web] URL.fromRequest
Message-ID: <44D6FABA.2020900@libero.it>

exceptions.DeprecationWarning: [v0.4] URL.fromRequest will change
behaviour soon.
 Use fromContext instead


I think that there is something wrong with this.
What means "will change behavior"?

If the context is going away, why I have to use fromContext?


Thanks and regards  Manlio Perillo

From radix at twistedmatrix.com  Mon Aug  7 09:31:32 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon Aug  7 09:31:36 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <44D6F6CC.2030500@libero.it>
References: <20060806215009.1717.2125254019.divmod.quotient.16178@ohm>
	<44D6F6CC.2030500@libero.it>
Message-ID: <60ed19d40608070731q25ecf7c8sfd0141098a779439@mail.gmail.com>

On 8/7/06, Manlio Perillo <manlio_perillo@libero.it> wrote:
>
> Jean-Paul Calderone ha scritto:
>
> > Feel free to do this, but it's not the recommended way to address this
> > use case in twisted.web or Nevow.  The version of guard which is
> included
> > in releases of either won't work this way, nor will the documentation
> > recommend this approach.
> >
>
> Yes.
> And guard resolves the problem requiring that even anonymous users have
> a session.


This is true. However, I think you're very confused in thinking that this is
not necessary.

Guard is not only doing a not necessary thing (page with cookies can
> have problems with cache, AFAIK) but this create a potential (very rare
> indeed) security problem since an anonymous user gain a valid session ID
> that can be "authenticated" by a valid user (session fixation).


First: What "problems with cache" are you referring to?

How do you expect to be able to tell different anonymous users apart without
sessions and session IDs?

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060807/38dd026f/attachment.htm
From manlio_perillo at libero.it  Mon Aug  7 10:29:15 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Aug  7 10:26:50 2006
Subject: [Twisted-web] [Nevow] new chapter about authentication
In-Reply-To: <60ed19d40608070731q25ecf7c8sfd0141098a779439@mail.gmail.com>
References: <20060806215009.1717.2125254019.divmod.quotient.16178@ohm>	<44D6F6CC.2030500@libero.it>
	<60ed19d40608070731q25ecf7c8sfd0141098a779439@mail.gmail.com>
Message-ID: <44D75C4B.3010600@libero.it>

Christopher Armstrong ha scritto:
> [...]
>     And guard resolves the problem requiring that even anonymous users have
>     a session.
> 
> 
> This is true. However, I think you're very confused in thinking that
> this is not necessary.

This is possible, but someone has to explain me why they are needed.

> 
>     Guard is not only doing a not necessary thing (page with cookies can
>     have problems with cache, AFAIK) but this create a potential (very rare
>     indeed) security problem since an anonymous user gain a valid session ID
>     that can be "authenticated" by a valid user (session fixation).
> 
> 
> First: What "problems with cache" are you referring to?
> 

I still have to study how cache works, I have only read
http://www.mnot.net/cache_docs/


> How do you expect to be able to tell different anonymous users apart
> without sessions and session IDs?
> 

And why should I do such a thing?
Really, maybe I'm missing something here, I'm not an expert.

Anonymous user simply access the web site without a state, since I do
not need to keep state for them (unless I ask explicitly for this - like
for an e-commerce basket).


If cookies are needed for anonymous users, at least create a new session
when the user authenticates and not just rease the old one.



Thanks and regards  Manlio Perillo

From manlio_perillo at libero.it  Mon Aug  7 13:25:26 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Aug  7 13:23:00 2006
Subject: [Twisted-web] [Nevow] custom renderers for exceptions
Message-ID: <44D78596.5070104@libero.it>

Hi.

I have written this code to write custom "resource handlers" for exceptions.

Using adapters directly avoids the use of the context.


class DefaultExceptionHandler(object):
    # TODO catch all error handling

    implements(inevow.ICanHandleException)

    def renderHTTP_exception(self, ctx, reason):
        def cb(html):
            request.write(html)
            request.finishRequest(False)

        log.err(reason)

        request = inevow.IRequest(ctx)
        error = reason.value

        # make error available to the adapter
        request.error = error
        rend = inevow.IResource(error)
        rend.renderHTTP(ctx).addCallback(cb)


# replace the default one
appserver.DefaultExceptionHandler = DefaultExceptionHandler



class ExceptionResource(Adapter, rend.Page):
    docFactory = loaders.stan(
        t.html[
            t.head[
                t.title["Oops"]
                ],
            t.body[
                t.p(render=t.directive("string"))
                ]
            ]
        )


class ZeroDivisionResource(Adapter, rend.Page):
    implements(inevow.IRenderer)
    docFactory = loaders.stan(
        t.html[
            t.head[
                t.title["Oops"]
                ],
            t.body[
                t.p[
                    t.xml("&infin;")
                    ]
                ]
            ]
        )



registerAdapter(ExceptionResource, Exception, inevow.IResource)
registerAdapter(ZeroDivisionResource, ZeroDivisionError, inevow.IResource)



Example:

class OopsPage(rend.Page):
    def exception(self, ctx, data):
        1/0 # cause an exception on purpose

    docFactory = loaders.stan(exception)




Regards  Manlio Perillo

From tpherndon at gmail.com  Wed Aug  9 14:35:11 2006
From: tpherndon at gmail.com (Peter Herndon)
Date: Wed Aug  9 14:35:21 2006
Subject: [Twisted-web] Apple using Twisted in OS 10.5 Leopard Server
Message-ID: <B8A3A449-EDC3-4A59-B09D-D6DD764E921F@gmail.com>

Hi all,

Apple has open sourced their iCal Server, and it is written in Python  
using Twisted and web2.

http://trac.macosforge.org/projects/collaboration/browser/  has the  
overall stuff in it, and the server itself is at
http://trac.macosforge.org/projects/collaboration/browser/ 
CalendarServer/trunk/

Neat stuff!

Peter Herndon
tpherndon@gmail.com




From dreid at dreid.org  Wed Aug  9 15:49:27 2006
From: dreid at dreid.org (David Reid)
Date: Wed Aug  9 15:49:34 2006
Subject: [Twisted-web] Apple using Twisted in OS 10.5 Leopard Server
In-Reply-To: <B8A3A449-EDC3-4A59-B09D-D6DD764E921F@gmail.com>
References: <B8A3A449-EDC3-4A59-B09D-D6DD764E921F@gmail.com>
Message-ID: <20060809204927.GA13643@dreid.org>

On Wed, Aug 09, 2006 at 03:35:11PM -0400, Peter Herndon wrote:
> Hi all,
> 
> Apple has open sourced their iCal Server, and it is written in Python  
> using Twisted and web2.

Yes we did.  Hooray!

> http://trac.macosforge.org/projects/collaboration/browser/  has the  
> overall stuff in it, and the server itself is at
> http://trac.macosforge.org/projects/collaboration/browser/ 
> CalendarServer/trunk/
> 
> Neat stuff!

Thanks.

> Peter Herndon
> tpherndon@gmail.com

-David Reid

-- 
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz

From dreid at dreid.org  Wed Aug  9 15:52:13 2006
From: dreid at dreid.org (David Reid)
Date: Wed Aug  9 15:52:23 2006
Subject: [Twisted-web] Apple using Twisted in OS 10.5 Leopard Server
In-Reply-To: <B8A3A449-EDC3-4A59-B09D-D6DD764E921F@gmail.com>
References: <B8A3A449-EDC3-4A59-B09D-D6DD764E921F@gmail.com>
Message-ID: <20060809205213.GB13643@dreid.org>

On Wed, Aug 09, 2006 at 03:35:11PM -0400, Peter Herndon wrote:
> Hi all,
> 
> Apple has open sourced their iCal Server, and it is written in Python  
> using Twisted and web2.
> 
> http://trac.macosforge.org/projects/collaboration/browser/  has the  
> overall stuff in it, and the server itself is at
> http://trac.macosforge.org/projects/collaboration/browser/ 
> CalendarServer/trunk/

Oh and I forgot to mention, the browser has actually been temporarily
disabled due to excess load.  Hopefully it'll return in a few days.
Feel free to file bugs you find if you're playing with it.  We're
watching the tracker even while at WWDC.
 
> Neat stuff!
> 
> Peter Herndon
> tpherndon@gmail.com
> 
> 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-- 
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz

From allan at nefud.org  Fri Aug 11 13:08:58 2006
From: allan at nefud.org (Allan Bailey)
Date: Fri Aug 11 13:09:01 2006
Subject: [Twisted-web] web2: handling data from an http PUT request?
Message-ID: <20060811180858.AC44F84C238@cube2.nefud.org>


Does anyone have an example of how to handle data from an http PUT method?

So far I'm only getting partial data from the below example.

Note: I'm fairly new to twisted and using deferred's.  So if I'm missing something
please let me know, or send pointers.

thanks,
-allan


================
##
class HOME(resource.Resource):
    addSlash = True
    def allowedMethods(self):
        return ('GET', 'HEAD', 'OPTIONS', 'PUT')

    def locateChild(self, req, segments):
        return (self, server.StopTraversal)

    def render_PUT(self, req):
        content = "<html><body>\n"

        content += "<hr>\n"
        content += "method: %s<br>\n" % req.method
        content += "uri: %s<br>\n" % req.uri
        content += "path: %s<br>\n" % req.path
        content += "dir(req): %s<br>\n" % dir(req)
        content += "<hr>\n"
        content += "args: %s<br>\n" % req.args
        content += "<hr>data from PUT:\n\n<hr>\n\n%s\n\n<hr>\n"
        content +="</body></html>\n"

        print req.stream
        print dir(req.stream)
        data = req.stream.read()

        if type(data) == type(""):
	    # this never happens, seems to always be a deferred. dunno why.
            content = content % data
            return http.Response(responsecode.OK, stream=content)

        elif isinstance(data, defer.Deferred):
            def _pull(result, send=content):
	        # result  should be a string of data.
                send = send % result
                return http.Response(responsecode.OK, stream=send)

            d = data.addCallback(_pull, content)

            return d
        else:
            raise 'FixMe'
        #return None
    #
    def http_PUT(self, req):
        return self.render_PUT(req)

--
Allan

From dreid at dreid.org  Fri Aug 11 15:46:02 2006
From: dreid at dreid.org (David Reid)
Date: Fri Aug 11 15:46:09 2006
Subject: [Twisted-web] web2: handling data from an http PUT request?
In-Reply-To: <20060811180858.AC44F84C238@cube2.nefud.org>
References: <20060811180858.AC44F84C238@cube2.nefud.org>
Message-ID: <20060811204602.GA21163@dreid.org>

On Fri, Aug 11, 2006 at 11:08:58AM -0700, Allan Bailey wrote:
> 
> Does anyone have an example of how to handle data from an http PUT method?
> 
> So far I'm only getting partial data from the below example.
> 
> Note: I'm fairly new to twisted and using deferred's.  So if I'm missing something
> please let me know, or send pointers.
> 
> thanks,
> -allan
> 
>         data = req.stream.read()

This only reads the data that is immediately available, if no data is
immediately available it returns a deferred that results in the data.
Only calling read once can not possibly guarantee that all the data
has been read.  Instead you need to call read until it returns None.
Luckily there is a convenience API for doing just that.

from twisted.web2.stream import readStream

data = []

def gotData(newdata):
    data += newdata

d = readStream(req.stream, gotData)

def _finishedReading(ignore):
    doSomethingWith(data)

d.addCallback(_finishedReading)

>     def http_PUT(self, req):
>         return self.render_PUT(req)

This seems silly.

-David

-- 
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz

From dshahbaz at fcoe.k12.ca.us  Wed Aug 23 19:46:47 2006
From: dshahbaz at fcoe.k12.ca.us (Dimi Shahbaz)
Date: Wed Aug 23 19:46:51 2006
Subject: [Twisted-web] t.i.e.ConnectionDone: Connection was closed cleanly
	error, using getPage
Message-ID: <BD136ACB-C2C6-4840-BE99-50ED44FA6BAB@fcoe.k12.ca.us>

List,

Using t.web.client.getPage, I am continually seeing a  
"t.i.e.ConnectionDone: Connection was closed cleanly error"  
exception.  The same URL loads fine in Firefox.  I have examined the  
request headers that FF was sending, and even tried emulating  
exactly** all those headers in getPage(..., headers=...), but that  
was no help.  My timeout is set very high as well, so it's not that.

However, in ethereal, the response headers from the server, and in  
fact the content the server was sending back, was identical between  
the FF request and the getPage() request.  The data looks as though  
it's being received, but I still get that exception, and getPage's  
success callback is never called.

Any insights before I dive into HTTPClientFactory?


** the only difference I saw between the two requests was that FF's  
was HTTP 1.1, while getPage's was 1.0.

--
Dimi Shahbaz, Software Engineer Specialist
California PASS Program
www.cyberhigh.fcoe.k12.ca.us





From exarkun at divmod.com  Wed Aug 23 20:49:45 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed Aug 23 20:50:04 2006
Subject: [Twisted-web] t.i.e.ConnectionDone: Connection was closed
	cleanly error, using getPage
In-Reply-To: <BD136ACB-C2C6-4840-BE99-50ED44FA6BAB@fcoe.k12.ca.us>
Message-ID: <20060824014945.1717.1866472096.divmod.quotient.29938@ohm>

On Wed, 23 Aug 2006 17:46:47 -0700, Dimi Shahbaz <dshahbaz@fcoe.k12.ca.us> wrote:
>List,
>
>Using t.web.client.getPage, I am continually seeing a 
>"t.i.e.ConnectionDone: Connection was closed cleanly error"  exception.  The 
>same URL loads fine in Firefox.  I have examined the  request headers that 
>FF was sending, and even tried emulating  exactly** all those headers in 
>getPage(..., headers=...), but that  was no help.  My timeout is set very 
>high as well, so it's not that.
>
>However, in ethereal, the response headers from the server, and in  fact the 
>content the server was sending back, was identical between  the FF request 
>and the getPage() request.  The data looks as though  it's being received, 
>but I still get that exception, and getPage's  success callback is never 
>called.
>
>Any insights before I dive into HTTPClientFactory?
>
>
>** the only difference I saw between the two requests was that FF's  was 
>HTTP 1.1, while getPage's was 1.0.

1.1 vs 1.0 probably makes the difference.  Connection closed is probably being used to signal the end of the response.  If getPage is not recognizing this as successful completion, it may be a getPage bug.  Can you attach both traffic captures to a ticket in the tracker?  http://twistedmatrix.com/trac/newticket (you'll need an account first).

Jean-Paul


>
>--
>Dimi Shahbaz, Software Engineer Specialist
>California PASS Program
>www.cyberhigh.fcoe.k12.ca.us
>
>
>
>
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web@twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From dshahbaz at fcoe.k12.ca.us  Fri Aug 25 11:54:18 2006
From: dshahbaz at fcoe.k12.ca.us (Dimi Shahbaz)
Date: Fri Aug 25 11:54:24 2006
Subject: [Twisted-web] t.i.e.ConnectionDone: Connection was closed cleanly
	error, using getPage
In-Reply-To: <22438388.1156433323457.JavaMail.SYSTEM@brightmail>
References: <22438388.1156433323457.JavaMail.SYSTEM@brightmail>
Message-ID: <C0D3F9AE-6B6A-46C4-99B7-26FE926EB771@fcoe.k12.ca.us>


On Aug 23, 2006, at 6:49 PM, Jean-Paul Calderone wrote:

> 1.1 vs 1.0 probably makes the difference.  Connection closed is  
> probably being used to signal the end of the response.  If getPage  
> is not recognizing this as successful completion, it may be a  
> getPage bug.  Can you attach both traffic captures to a ticket in  
> the tracker?  http://twistedmatrix.com/trac/newticket (you'll need  
> an account first).
>
> Jean-Paul

For posterity: here is the ticket, which contains the work-around I  
came up with:

http://twistedmatrix.com/trac/ticket/2017

thank you

--
Dimi Shahbaz, Software Engineer Specialist
California PASS Program
www.cyberhigh.fcoe.k12.ca.us





From moebius.lists at gmail.com  Sat Aug 26 17:14:36 2006
From: moebius.lists at gmail.com (Adrian Perez)
Date: Sat Aug 26 16:45:41 2006
Subject: [Twisted-web] [Release] Bic A1A1
Message-ID: <20060827001436.364f69af@tron.foobar.homeunix.org>


Hello!

As I mentioned earlier, I'm writing a weblog system using Nevow, and
now I'm proud of announcing the availability of the first ?official?
alpha release, version A1A1. You can grab it here:

 - TGZ: http://code.connectical.net/nn-releases/bic/bic-A1A1.tar.gz
 - Combined TGZ, recommended (Bic A1A1, Pyramid A0A15, Formal 255-svn):
   http://code.connectical.net/nn-releases/pyramid+bic+formal-20060824.tar.gz

(If you don't have Pyramid and/or Formal, and don't want to have
extrawork downloading and installing them, I recommend using the second
package.)

As I stated in my previous message, any comments regarding the thing
will be appreciated. I know there are some bugs, and that a lot of
features are still missing but... it's alpha! :-P. Even so, I'm very
happy with the result.

Once installed somewhere in your $PYTHONPATH, make it work as follows:

 $ mkdir /tmp/bic
 $ cp bic.{tac,conf} /tmp/bic
 $ cd /tmp/bic && twistd -noy bic.tac

Then point a web browser to http://localhost:3979 (administration at
http://localhost:3979/login). By default, username and password are
both ?admin? (without the quotes). You can tune authentication by
editing ?bic.conf?:

 $ echo 'auth_plugin = passwd' >> bic.conf
 $ echo 'auth_params = filename:bic.passwd' >> bic.conf
 $ echo 'iamcool:mypassiscool' >> bic.passwd
 $ echo 'sheiscool:herpassiscool' >> bic.passwd

Here you have a screenshot with someone logged in, with the default
theme and english localization:
http://img391.imageshack.us/img391/5949/bicadminencl9.jpg

Finally, I would like to thank the one who pointed about using formal
instead of formless, because I found formal to be somewhat nicer than
the other one ;-) Also, the recent thread regarding nevow.guard was
useful because it helped me understand how does it work, so I was able
of using nevow.guard to add authentication.

Cheers,


P.S: If this list is not suitable for announcements like this, just let
me know, I don't want to be unpolite ;-)

-- 
Adrian Perez
"Experience is what you get when you don't get what you want"
                                           -- (Dan Stanford)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060827/e7359914/signature.pgp
From aleuser at inwind.it  Sat Aug 26 18:57:38 2006
From: aleuser at inwind.it (Alessandro)
Date: Sat Aug 26 18:56:52 2006
Subject: [Twisted-web] [Release] Bic A1A1
In-Reply-To: <20060827001436.364f69af@tron.foobar.homeunix.org>
References: <20060827001436.364f69af@tron.foobar.homeunix.org>
Message-ID: <44F0DFF2.6020409@inwind.it>

Pages can't see /style/default/main.css , so they are very poor
Did I make installation error?

Regards
Alessandro

From moebius.lists at gmail.com  Sat Aug 26 21:12:36 2006
From: moebius.lists at gmail.com (Adrian Perez)
Date: Sat Aug 26 21:15:29 2006
Subject: [Twisted-web] [Release] Bic A1A1
In-Reply-To: <44F0DFF2.6020409@inwind.it>
References: <20060827001436.364f69af@tron.foobar.homeunix.org>
	<44F0DFF2.6020409@inwind.it>
Message-ID: <20060827041236.1f406689@tron.foobar.homeunix.org>

On Sun, 27 Aug 2006 01:57:38 +0200
Alessandro <aleuser@inwind.it> wrote:

> Pages can't see /style/default/main.css , so they are very poor
> Did I make installation error?

Mmmh, is there any message/error in the server log? Did you run the
server from the source directory or from another place? Maybe it's my
fault because I didn't make much tests outside the source tree... I
will check if there is some problem with setup.py, maybe resources are
not being copied where they belong. But that will be tomorrow, is time
to sleep now ;-)

BTW, thanks for your

-- 
Adrian Perez
"Experience is what you get when you don't get what you want"
                                           -- (Dan Stanford)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060827/019f482c/signature.pgp
From wendell at adsi-m4.com  Mon Aug 28 15:29:31 2006
From: wendell at adsi-m4.com (Wendell Turner)
Date: Mon Aug 28 15:29:34 2006
Subject: [Twisted-web] simple proxy example?
Message-ID: <20060828202931.GB13010@adsi-m4.com>


The webdownload.py script in Abe Fettig's book works fine for
directly connected machines.  I would like to modify it to use a
proxy.  Most of the examples in the twisted docs seem to show
how to write a proxy, not how to use one.

To modify that example to use a proxy, do I need to use a
ProxyClientFactory instead of the HTTPDownloader?  I tried that,
but it needs 7 arguments, and I could not tell what they should
be.

Or do I just set the factory.protocol to proxy.Proxy?  If so,
where do I tell it the proxy's address & port?

Is there a (simple(!)) twisted web page retrieval script that
uses (i.e. runs behind) a proxy server that I could use to start
with?

Thanks,

Wendell


From general at eepatents.com  Mon Aug 28 16:11:52 2006
From: general at eepatents.com (Ed Suominen)
Date: Mon Aug 28 16:11:48 2006
Subject: [Twisted-web] simple proxy example?
In-Reply-To: <20060828202931.GB13010@adsi-m4.com>
References: <20060828202931.GB13010@adsi-m4.com>
Message-ID: <44F35C18.6090608@eepatents.com>

For web2, I have written an implementation of iweb.IResource that
generates the result of its renderHTTP method via a proxying client
access to another HTTP server. See ProxyResource at
http://foss.eepatents.com/DynamicSite/browser/trunk/dynamicsite/external.py

Best regards, Ed

Wendell Turner wrote:
> The webdownload.py script in Abe Fettig's book works fine for
> directly connected machines.  I would like to modify it to use a
> proxy.  Most of the examples in the twisted docs seem to show
> how to write a proxy, not how to use one.
> 
> To modify that example to use a proxy, do I need to use a
> ProxyClientFactory instead of the HTTPDownloader?  I tried that,
> but it needs 7 arguments, and I could not tell what they should
> be.
> 
> Or do I just set the factory.protocol to proxy.Proxy?  If so,
> where do I tell it the proxy's address & port?
> 
> Is there a (simple(!)) twisted web page retrieval script that
> uses (i.e. runs behind) a proxy server that I could use to start
> with?
> 
> Thanks,
> 
> Wendell
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 

From dreid at dreid.org  Mon Aug 28 16:33:02 2006
From: dreid at dreid.org (David Reid)
Date: Sun Sep  3 15:34:00 2006
Subject: [Twisted-web] simple proxy example?
In-Reply-To: <20060828202931.GB13010@adsi-m4.com>
References: <20060828202931.GB13010@adsi-m4.com>
Message-ID: <20060828213302.GA5695@dreid.org>

On Mon, Aug 28, 2006 at 04:29:31PM -0400, Wendell Turner wrote:
> 
> The webdownload.py script in Abe Fettig's book works fine for
> directly connected machines.  I would like to modify it to use a
> proxy.  Most of the examples in the twisted docs seem to show
> how to write a proxy, not how to use one.

So that everyone is on the same page, are you attempting to download pages via an http proxy?

If yes:
  There is currently a ticket in the tracker about client support for
proxies http://twistedmatrix.com/trac/ticket/1774 see his patch and
the notes about his patch for help.  It would not be difficult to
clean up his patch and make it ready for inclusion but I have no time
to do this and I don't suspect he has time either.

If no:
  Do you want to set up a reverse proxy or a full http proxy?
  If reverse: 
    See twisted.web.proxy.ReverseProxyResource and associated documentation
  If Full HTTP proxy:
    See the rest of twisted.web.proxy

-- 
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz

