From twisted-web@twistedmatrix.com  Thu Apr  1 14:45:28 2004
From: twisted-web@twistedmatrix.com (Jiannan Fu)
Date: Thu, 01 Apr 2004 16:45:28 +0200
Subject: [Twisted-web] Using compiled C Library with Twisted?
Message-ID: <406C2B08.4050107@ypsilon.net>

hi there,
i got the following problem: I have a set of compiled C files, providing 
a API for a special encryption / decrytion of messages to be exchanged 
over the internet, well documented and with a lot of programming 
examples of how to work with it and its functions (in this case the 
examples are all in C). Now i want to use it with twisted together, to 
have all the advantages of twisted (especially the reactor instead of 
threading, deferred and so on), but the C API to do the last step before 
messages are send out.

The C API should just play some kind of middleware between the tcp-ip 
protokoll and the twisted server. Is it possible to extending twisted 
with that library by "just import" them?

Any kind of advice / suggestions would help

thanks
J.F.


From twisted-web@twistedmatrix.com  Thu Apr  1 16:46:17 2004
From: twisted-web@twistedmatrix.com (Rilee, Robert)
Date: Thu, 1 Apr 2004 11:46:17 -0500
Subject: [Twisted-web] Application variables?
Message-ID: <DD633B7CE85D1D4D8431EBD0FC378240017B5CBA@PCEXCH001.tsa.dot.gov>

I'm new to using twisted.web. I come from a ColdFusion environment. I'm =
using rpy files that import and reload modules with resources that use =
the render method to send my content back to the client browser. I've =
successfully used Session to maintain session state for individual =
browsers. How does one share "application data" between requested =
scripts (or should I say resources)? That is, where do I declare and =
access variables to hold information that is to be shared by all =
requests? Do I use application or factory or the resource? Sorry if I'm =
using the wrong terminology to express these notions. Thank you for any =
assistance.

Robert Rilee


From twisted-web@twistedmatrix.com  Thu Apr  1 19:09:34 2004
From: twisted-web@twistedmatrix.com (Michal Pasternak)
Date: Thu, 1 Apr 2004 21:09:34 +0200
Subject: [Twisted-web] Application variables?
In-Reply-To: <DD633B7CE85D1D4D8431EBD0FC378240017B5CBA@PCEXCH001.tsa.dot.gov>
References: <DD633B7CE85D1D4D8431EBD0FC378240017B5CBA@PCEXCH001.tsa.dot.gov>
Message-ID: <20040401190934.GC69931@pasternak.w.lub.pl>

Rilee, Robert [Thu, Apr 01, 2004 at 11:46:17AM -0500]:
> How does one share "application data" between requested scripts (or should I
> say resources)?

And what "application data" is for you?

-- 
Michal Pasternak :: http://pasternak.w.lub.pl :: http://winsrc.sf.net


From twisted-web@twistedmatrix.com  Thu Apr  1 19:12:55 2004
From: twisted-web@twistedmatrix.com (Peter Stradinger)
Date: Thu, 1 Apr 2004 11:12:55 -0800 (PST)
Subject: [Twisted-web] unsubscribe l3mm1ng
Message-ID: <20040401191255.33393.qmail@web13702.mail.yahoo.com>

 
 

__________________________________
Do you Yahoo!?
Yahoo! Small Business $15K Web Design Giveaway 
http://promotions.yahoo.com/design_giveaway/


From nico at tekNico.net  Fri Apr  2 02:39:10 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Fri Apr  2 02:39:26 2004
Subject: [Twisted-web] Re: Application variables?
In-Reply-To: <DD633B7CE85D1D4D8431EBD0FC378240017B5CBA@PCEXCH001.tsa.dot.gov>
References: <DD633B7CE85D1D4D8431EBD0FC378240017B5CBA@PCEXCH001.tsa.dot.gov>
Message-ID: <406D34BE.1050207@tekNico.net>

> That is, where do I declare and access variables to hold information that 
> is to be shared by all requests?

Look at twisted/web/server.py , the second to last class is the Session one
(in v.1.1.1).

You can see that the constructor has a "sessionNamespaces" dictionary
attribute, nowhere used in the Twisted code, that looks like the right place
(undocumented, that I know of).

Here's how I use it:

sessionNSs = request.getSession().sessionNamespaces
appSect1Session = sessionNSs.setdefault('appSect1', {})
appSect1Session['whatever'] = 'whatever'

Now appSect1Session is another dictionary where a given app section can put
whatever objects it wants, and get to them later.

sessionNSs = request.getSession().sessionNamespaces
try:
    whatever = sessionNSs['appSect1']['whatever']
except KeyError:
    whatever = None

or something.

(The browser will have to support cookies for this to work, obviously.)


-- 
Nicola Larosa - nico@tekNico.net

"...programs must be written for people to read,
and only incidentally for machines to execute."
 -- Alan J. Perlis, SICP



From Robert.Rilee at dhs.gov  Thu Apr  1 14:01:02 2004
From: Robert.Rilee at dhs.gov (Rilee, Robert)
Date: Fri Apr  2 14:50:48 2004
Subject: [Twisted-web] Application variables?
Message-ID: <DD633B7CE85D1D4D8431EBD0FC378240017B5CBB@PCEXCH001.tsa.dot.gov>

When a client interacts with my program by requesting resources, I feel that these resources should be able to manipulate data stored in my program's memory. For example, my script files (.rpy) follow this pattern:

# a.rpy

import A as X

if __debug__:
    reload(X)

resource = X.MyResource()



# A.py

from twisted.web import resource

class MyResource(resource.Resource):
    def render(self, request):
        # generate content
        # shove it in variable, say, my_content
        return my_content



# my_server.py

from twisted.application import internet
from twisted.application import service
from twisted.web import static
from twisted.web import server
from twisted.web import script
from twisted.internet import reactor

application = service.Application('web')

sc = service.IServiceCollection(application)

root = static.File("c:/wwwroot")
root.ignoreExt(".rpy")
root.processors = {'.rpy': script.ResourceScript}
site = server.Site(root)

i = internet.TCPServer(8080, site)
i.setServiceParent(sc)

reactor.listenTCP(8080, site)
reactor.run()


Okay, so I run my program from the command line as:

$ python my_server.py

Everything seems to work. Now suppose I have b.rpy, c.rpy, d.rpy, etc. (and corresponding modules: B.py, C.py, D.py, etc.). I want all of these resources to be able to share and manipulate the same data (from memory, not disk) between requests. Now that I think about it, the term "application" is vague. In my post, application should be taken to mean a set or collection of web pages (or resourses using twisted's vocabulary), but I guess it can also be taken mean the program, "my_server.py". I appreciate you taking an interest in this.




> -----Original Message-----
> From: Michal Pasternak [mailto:michal@pasternak.w.lub.pl]
> Sent: Thursday, April 01, 2004 2:10 PM
> To: twisted-web@twistedmatrix.com
> Subject: Re: [Twisted-web] Application variables?
> 
> 
> Rilee, Robert [Thu, Apr 01, 2004 at 11:46:17AM -0500]:
> > How does one share "application data" between requested 
> scripts (or should I
> > say resources)?
> 
> And what "application data" is for you?
> 
> -- 
> Michal Pasternak :: http://pasternak.w.lub.pl :: http://winsrc.sf.net
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 

From missive at hotmail.com  Fri Apr  2 09:02:11 2004
From: missive at hotmail.com (Lee Harr)
Date: Fri Apr  2 14:50:49 2004
Subject: [Twisted-web] list archives?
Message-ID: <BAY2-F86aqbC8wSA1Xv0000f53a@hotmail.com>

Hi;

I noticed just now that the link to the list archives is not working:
http://pyramid.twistedmatrix.com/pipermail/twisted-web/

Also, I sent through a subscription request but never heard anything
back, so I hope someone sees this at all  :o)

Thanks for your time.

_________________________________________________________________
Protect your PC - get McAfee.com VirusScan Online 
http://clinic.mcafee.com/clinic/ibuy/campaign.asp?cid=3963


From radix at twistedmatrix.com  Fri Apr  2 14:58:38 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri Apr  2 14:58:43 2004
Subject: [Twisted-web] list archives?
In-Reply-To: <BAY2-F86aqbC8wSA1Xv0000f53a@hotmail.com>
References: <BAY2-F86aqbC8wSA1Xv0000f53a@hotmail.com>
Message-ID: <406DE20E.6060004@twistedmatrix.com>

Lee Harr wrote:
> Hi;
> 
> I noticed just now that the link to the list archives is not working:
> http://pyramid.twistedmatrix.com/pipermail/twisted-web/

Aggh. Apparently the mail upgrade forgot our "preferred URL" setting. 
The machine's hostname is pyramid.twistedmatrix.com, but the web site is 
only hosted on "twistedmatrix.com" and "www.twistedmatrix.com". Just 
shwack off the "pyramid", and I'll go fix the URLs in all of our lists... :(

> Also, I sent through a subscription request but never heard anything
> back, so I hope someone sees this at all  :o)

I'll investigate this now.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040402/0f7132b5/signature.bin
From radix at twistedmatrix.com  Fri Apr  2 15:52:00 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri Apr  2 15:52:00 2004
Subject: [Twisted-web] list archives?
In-Reply-To: <406DE20E.6060004@twistedmatrix.com>
References: <BAY2-F86aqbC8wSA1Xv0000f53a@hotmail.com>
	<406DE20E.6060004@twistedmatrix.com>
Message-ID: <406DEE90.4090802@twistedmatrix.com>

Christopher Armstrong wrote:
> Lee Harr wrote:
>> Also, I sent through a subscription request but never heard anything
>> back, so I hope someone sees this at all  :o)
> 
> 
> I'll investigate this now.

Fixed. exim was running the mailman stuff as the incorrect uid/gid.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040402/6afb0cf0/signature.bin
From missive at hotmail.com  Fri Apr  2 19:26:00 2004
From: missive at hotmail.com (Lee Harr)
Date: Fri Apr  2 19:35:25 2004
Subject: [Twisted-web] Re: list archives?
Message-ID: <BAY2-F97WGpCUXkExNK0002a919@hotmail.com>

>>>Also, I sent through a subscription request but never heard anything
>>>back, so I hope someone sees this at all  :o)
>>
>>
>>I'll investigate this now.
>
>Fixed. exim was running the mailman stuff as the incorrect uid/gid.
>


Yes, I see the archives now... thanks.

I sent through another subscription request and still never got a reply.
The list is available on gmane, so I don't really need to get the list 
mails,
but I don't want to bug you with having to moderate my posts through.

_________________________________________________________________
Add photos to your messages with MSN 8. Get 2 months FREE*. 
http://join.msn.com/?page=features/featuredemail


From radix at twistedmatrix.com  Fri Apr  2 19:39:46 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri Apr  2 19:39:46 2004
Subject: [Twisted-web] Re: list archives?
In-Reply-To: <BAY2-F97WGpCUXkExNK0002a919@hotmail.com>
References: <BAY2-F97WGpCUXkExNK0002a919@hotmail.com>
Message-ID: <406E23F2.4060507@twistedmatrix.com>

Lee Harr wrote:
>>>> Also, I sent through a subscription request but never heard anything
>>>> back, so I hope someone sees this at all  :o)
>>>
>>>
>>>
>>> I'll investigate this now.
>>
>>
>> Fixed. exim was running the mailman stuff as the incorrect uid/gid.
>>
> 
> 
> Yes, I see the archives now... thanks.
> 
> I sent through another subscription request and still never got a reply.
> The list is available on gmane, so I don't really need to get the list 
> mails,
> but I don't want to bug you with having to moderate my posts through.

Well, I could just add you to an "Accept" filter, but I want to figure 
out why subscription isn't working for you. How far are you getting? Do 
you get the "Please respond to this mail to confirm" message? Or not 
even that? When I tested subscription (before I fixed it), I got the 
"please reply" message, but since the "twisted-web-request" alias was 
broken, the response I sent never got processed. That should be fixed now.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040402/dddf79cc/signature.bin
From missive at hotmail.com  Fri Apr  2 20:40:57 2004
From: missive at hotmail.com (Lee Harr)
Date: Fri Apr  2 20:45:15 2004
Subject: [Twisted-web] [PATCH] nevow.static.File directory listing
Message-ID: <BAY2-F136Gaikclsjb90002a094@hotmail.com>

I was getting an infinitely recursive redirect trying to do something
like this ...



from nevow import rend, static
from nevow import appserver

from twisted.application import service
from twisted.application import internet


class ADir(rend.Page):
    def locateChild(self, request, segments):
        path = '/'.join(segments)
        return static.File(path), ()


application = service.Application('ADirlist')
webservice = internet.TCPServer(
    8080,
    appserver.NevowSite(ADir())
)
webservice.setServiceParent(application)




This patch to nevow.static.File fixes the problem for me.

274c274,279
<             return self.redirect(request)
---
>             return dirlist.DirectoryLister(self.fp.path,
>                                             None,
>                                             self.contentTypes,
>                                             self.contentEncodings,
>                                             self.defaultType)
>             #return self.redirect(request)

_________________________________________________________________
Add photos to your messages with MSN 8. Get 2 months FREE*. 
http://join.msn.com/?page=features/featuredemail


From missive at hotmail.com  Fri Apr  2 21:08:24 2004
From: missive at hotmail.com (Lee Harr)
Date: Fri Apr  2 21:08:58 2004
Subject: [Twisted-web] Re: list archives?
Message-ID: <BAY2-F119yvCgJyTDj300042c4b@hotmail.com>

>>I sent through another subscription request and still never got a reply.
>>The list is available on gmane, so I don't really need to get the list
>>mails,
>>but I don't want to bug you with having to moderate my posts through.
>
>Well, I could just add you to an "Accept" filter, but I want to figure
>out why subscription isn't working for you. How far are you getting? Do
>you get the "Please respond to this mail to confirm" message? Or not
>even that? When I tested subscription (before I fixed it), I got the
>"please reply" message, but since the "twisted-web-request" alias was
>broken, the response I sent never got processed. That should be fixed now.
>


No, I never received any emails at all from the system.

_________________________________________________________________
Tired of spam? Get advanced junk mail protection with MSN 8. 
http://join.msn.com/?page=features/junkmail


From missive at hotmail.com  Fri Apr  2 23:50:28 2004
From: missive at hotmail.com (Lee Harr)
Date: Fri Apr  2 23:51:00 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
Message-ID: <BAY2-F3YwXA946xFRFt00049a78@hotmail.com>

>I was getting an infinitely recursive redirect

Actually, this patch (to nevow.static.File) will also
take care of the redirect:



274c274,281
<             return self.redirect(request)
---
>             if not request.uri.endswith('/'):
>                 self.redirect(request)
>             return dirlist.DirectoryLister(self.fp.path,
>                                             None,
>                                             self.contentTypes,
>                                             self.contentEncodings,
>                                             self.defaultType)
>             #return self.redirect(request)

_________________________________________________________________
The new MSN 8: smart spam protection and 2 months FREE*  
http://join.msn.com/?page=features/junkmail


From radix at twistedmatrix.com  Fri Apr  2 23:54:38 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri Apr  2 23:54:39 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
In-Reply-To: <BAY2-F3YwXA946xFRFt00049a78@hotmail.com>
References: <BAY2-F3YwXA946xFRFt00049a78@hotmail.com>
Message-ID: <406E5FAE.8030907@twistedmatrix.com>

Lee Harr wrote:
>> I was getting an infinitely recursive redirect
> 
> 
> Actually, this patch (to nevow.static.File) will also
> take care of the redirect:
> 
> 
> 
> 274c274,281
> <             return self.redirect(request)
> ---
> 
>>             if not request.uri.endswith('/'):
>>                 self.redirect(request)

You want to return the self.redirect(request). Otherwise the 
DirectoryLister will still get rendered to the body of the HTTP result, 
to no effect.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040403/f9b32dc1/signature.bin
From matt at pollenation.net  Sat Apr  3 02:54:19 2004
From: matt at pollenation.net (Matt Goodall)
Date: Sat Apr  3 02:56:25 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
In-Reply-To: <406E5FAE.8030907@twistedmatrix.com>
References: <BAY2-F3YwXA946xFRFt00049a78@hotmail.com>
	<406E5FAE.8030907@twistedmatrix.com>
Message-ID: <1080986058.26802.28.camel@debian>

On Sat, 2004-04-03 at 07:54, Christopher Armstrong wrote:
> Lee Harr wrote:
> >> I was getting an infinitely recursive redirect
> > 
> > 
> > Actually, this patch (to nevow.static.File) will also
> > take care of the redirect:
> > 
> > 
> > 
> > 274c274,281
> > <             return self.redirect(request)
> > ---
> > 
> >>             if not request.uri.endswith('/'):
> >>                 self.redirect(request)
> 
> You want to return the self.redirect(request). Otherwise the 
> DirectoryLister will still get rendered to the body of the HTTP result, 
> to no effect.

It should probably also reuse the directoryListing() method, making the
change:

         if self.fp.isdir():
-            return self.redirect(request)
+            if not request.uri.endswith('/'):
+                return self.redirect(request)
+            return self.directoryListing()


-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect
the views of my employer.


From missive at hotmail.com  Sat Apr  3 06:55:53 2004
From: missive at hotmail.com (Lee Harr)
Date: Sat Apr  3 06:56:28 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
Message-ID: <BAY2-F58z6MzSJi3KWc000425eb@hotmail.com>

>> >> I was getting an infinitely recursive redirect
>> >
>> >
>> > Actually, this patch (to nevow.static.File) will also
>> > take care of the redirect:
>> >
>> >
>> >
>> > 274c274,281
>> > <             return self.redirect(request)
>> > ---
>> >
>> >>             if not request.uri.endswith('/'):
>> >>                 self.redirect(request)
>>
>>You want to return the self.redirect(request). Otherwise the
>>DirectoryLister will still get rendered to the body of the HTTP result,
>>to no effect.
>
>It should probably also reuse the directoryListing() method, making the
>change:
>
>          if self.fp.isdir():
>-            return self.redirect(request)
>+            if not request.uri.endswith('/'):
>+                return self.redirect(request)
>+            return self.directoryListing()
>


This one works for me.

Without the check, it goes in to a loop and never returns anything.

_________________________________________________________________
Add photos to your messages with MSN 8. Get 2 months FREE*. 
http://join.msn.com/?page=features/featuredemail


From andrew at ellerton.net  Sun Apr  4 15:06:16 2004
From: andrew at ellerton.net (Ellers)
Date: Sun Apr  4 15:05:39 2004
Subject: [Twisted-web] really beginner example
Message-ID: <opr5x98quofpwr4c@mail.ellerton.net>

Hello all,

I've been getting into Twisted apps recently and saw in the docs that use of Woven is not recommended and that Nevow should be used instead. Thats cool.

I've been trying to get into it, and have read lots of docs and examples, but its seriously hard going. I'm not trying to dump on anyone, but the examples don't start out with really simple building blocks then build on that into something big and usable as-is. Something I can say "I need to do a multistage form - ah theres an example", and "I need to store user sessions in a persistent way, so they're there after a database restart - ah an example..." etc.

That is, start with really really basic apps, adding extra details and features that someone will commonly want.

For example, it might start with a really simple html template example, using minimal Nevow stuff - just a renderer or at most a page, and everything else from Twisted. Maybe this isn't the "done" thing, but I think it would be really helpful to someone coming from now understanding Twisted classes to see how to use a minimal set of Nevow classes to do something cool with Nevow. I would've thought Nevow would work well in this way, but tell me if I'm wrong and I should really be using the whole Nevow framework, not just the xhtml templating part.

Right now I want to use my own Site object, not a subclass of the Nevow site object, and use the Nevow classes to generate html based on templates from files. I'm sure this is possible, but I just can't figure it out.

So, here is my question...

I have this in a file "hello_template.html":

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title nevow:data="title">This is title</title>
	</head>
	<body>
		<p>This page is called <span nevow:date="title" /></p>
	</body>
</html>

and I have the following python code.
The function demo1() does what I expect,
but what I really want is for demo2() to print to stdout the xhtml
after it has been substituted with the title.

<<
 from nevow import rend

class HelloPage(rend.Page):

	docFactory = rend.htmlfile('hello_template.html')
	
	def data_title(self, context, data):
		return "Hello Nevow World"
	
	def data_empty(self, context, data):
		return []

	def someMethodToWriteToAFileLikeObject( self, writer ):
		writer.write( "not yet implemented\n" )

def demo1( ):
	"""This will print the html just as it is in the template file - cool"""
	
	import sys
	d = rend.htmlfile('hello_template.html', '../shared/Assets/template')
	d.load()
	print "\nDocument:\n"
	d.getDoc( ).writexml(sys.stdout)
	print "\n"


def demo2( ):
	"""This does not work yet, but what I want it to do, is put the
	substituted title into the template then return the composite result.
	"""
	import sys
	p = HelloPage( )
	p.someMethodToWriteToAFileLikeObject( sys.stdout )
	
	
if __name__ == "__main__":
	demo1( )
	demo2( )
>>

I know that in normal usage there isn't much point doing sys.stdout.write
with the xhtml content, but there has to be some room between that extreme
and using a framework where I can't even tell how the content is getting
sent back to the http stream!

Thanks to all for any suggestions, and for your patience with this beginner...

Ellers

From matt at pollenation.net  Sun Apr  4 16:36:43 2004
From: matt at pollenation.net (Matt Goodall)
Date: Sun Apr  4 16:38:50 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
In-Reply-To: <BAY2-F58z6MzSJi3KWc000425eb@hotmail.com>
References: <BAY2-F58z6MzSJi3KWc000425eb@hotmail.com>
Message-ID: <1081118202.30906.7.camel@debian>

On Sat, 2004-04-03 at 14:55, Lee Harr wrote:
> >> >> I was getting an infinitely recursive redirect
> >> >
> >> >
> >> > Actually, this patch (to nevow.static.File) will also
> >> > take care of the redirect:
> >> >
> >> >
> >> >
> >> > 274c274,281
> >> > <             return self.redirect(request)
> >> > ---
> >> >
> >> >>             if not request.uri.endswith('/'):
> >> >>                 self.redirect(request)
> >>
> >>You want to return the self.redirect(request). Otherwise the
> >>DirectoryLister will still get rendered to the body of the HTTP result,
> >>to no effect.
> >
> >It should probably also reuse the directoryListing() method, making the
> >change:
> >
> >          if self.fp.isdir():
> >-            return self.redirect(request)
> >+            if not request.uri.endswith('/'):
> >+                return self.redirect(request)
> >+            return self.directoryListing()
> >
> 
> 
> This one works for me.
> 
> Without the check, it goes in to a loop and never returns anything.

Lee,

Can you explain *why* you have the following code (copied from your
original post):


        from twisted.application import service
        from twisted.application import internet
        
        
        class ADir(rend.Page):
            def locateChild(self, request, segments):
                path = '/'.join(segments)
                return static.File(path), ()
        
        
        application = service.Application('ADirlist')
        webservice = internet.TCPServer(
            8080,
            appserver.NevowSite(ADir())
        )
        webservice.setServiceParent(application)


What is the use case? Why not let static.File handle everything?

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect
the views of my employer.


From mesozoic at polynode.com  Sun Apr  4 18:10:08 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Sun Apr  4 18:09:33 2004
Subject: [Twisted-web] really beginner example
In-Reply-To: <opr5x98quofpwr4c@mail.ellerton.net>
References: <opr5x98quofpwr4c@mail.ellerton.net>
Message-ID: <1081123808.13003.178.camel@hyla>

Skipped content of type multipart/mixed-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040404/2290fc91/attachment.bin
From matt at pollenation.net  Sun Apr  4 18:40:11 2004
From: matt at pollenation.net (Matt Goodall)
Date: Sun Apr  4 18:59:53 2004
Subject: [Twisted-web] IRenderer interface for Nevow
Message-ID: <1081125610.30901.42.camel@debian>

Hi,

While testing out an idea, I noticed that I was implementing
IRendererFactory just to turn a class instance into a renderer. For
instance:

        class ISummaryView(compy.Interface):
            pass
        
        class FooSummaryView(compy.Adapter):
            __implements__ = ISummaryView, IRendererFactory
            def __call__(self, context, data):
                return whatever
        
That didn't make sense to me and I also had no reason to add
IRendererFactory's renderer() method.

I then noticed that quite a few classes (freeform in particular) that
implement IRendererFactory were actually just renderers and didn't have
or need a renderer() method either.

So ... I created a IRenderer marker interface and changed most uses of
IRendererFactory to IRenderer. See the attached diff (against svn
trunk). It seems to work (i.e. no more tests fail than usual ;-)) but I
didn't want to commit it without some feedback first.

You'll notice that a couple of test_flatstan tests changed slightly to
make them pass. I don't think the renderer function signature was
correct in the context but please shout if you can think of a legitimate
reason why it should be supported.

James Knight (aka foom) suggested that IRenderer may not be needed at
all and that adapting anything callable would probably be enough. That
is probably correct but a) it's too early in the morning to think about
it and b) I'd rather make the change it two steps.

OK, let me know what you think to all this.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect
the views of my employer.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: irendererfactory_irenderer.diff
Type: text/x-patch
Size: 7752 bytes
Desc: not available
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040405/bf977d40/irendererfactory_irenderer.bin
From missive at hotmail.com  Sun Apr  4 19:03:14 2004
From: missive at hotmail.com (Lee Harr)
Date: Sun Apr  4 19:03:51 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
Message-ID: <BAY2-F48YIgoFT3kMUV0002fe55@hotmail.com>

>Can you explain *why* you have the following code (copied from your
>original post):
>
>
>         from twisted.application import service
>         from twisted.application import internet
>
>
>         class ADir(rend.Page):
>             def locateChild(self, request, segments):
>                 path = '/'.join(segments)
>                 return static.File(path), ()
>
>
>         application = service.Application('ADirlist')
>         webservice = internet.TCPServer(
>             8080,
>             appserver.NevowSite(ADir())
>         )
>         webservice.setServiceParent(application)
>
>
>What is the use case? Why not let static.File handle everything?
>


Well... it is certainly possible that I am going about this all wrong.

I was trying to figure out how to serve images from the nevow server to
go along with my web pages. This was the first way I figured to do that.

If there is a better way, I am certainly willing to use it.

Is this code flawed in some way?  When I try to run it without that patch,
I get an error like this trying to load the root url:


2004/04/04 20:52 EDT [HTTPChannel,0,127.0.0.1] Traceback (most recent call 
last):
          File 
"/usr/local/lib/python2.3/site-packages/twisted/protocols/http.py", line 
554, in requestReceived
            self.process()
          File "/usr/local/lib/python2.3/site-packages/nevow/appserver.py", 
line 130, in process
            return self.site.getResourceFor(
          File 
"/usr/local/lib/python2.3/site-packages/twisted/internet/defer.py", line 
189, in addCallback
            callbackKeywords=kw)
          File 
"/usr/local/lib/python2.3/site-packages/twisted/internet/defer.py", line 
180, in addCallbacks
            self._runCallbacks()
        --- <exception caught here> ---
          File 
"/usr/local/lib/python2.3/site-packages/twisted/internet/defer.py", line 
313, in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File "/usr/local/lib/python2.3/site-packages/nevow/appserver.py", 
line 133, in <lambda>
            lambda resource: inevow.IResource(resource).renderHTTP(self)
          File "/usr/local/lib/python2.3/site-packages/nevow/static.py", 
line 290, in renderHTTP
            f = self.openForReading()
          File "/usr/local/lib/python2.3/site-packages/nevow/static.py", 
line 253, in openForReading
            return self.fp.open()
          File 
"/usr/local/lib/python2.3/site-packages/twisted/python/filepath.py", line 
138, in open
            return open(self.path, mode+'b')
        exceptions.IOError: [Errno 21] Is a directory

2004/04/04 20:52 EDT [HTTPChannel,0,127.0.0.1] html is not a string:  None

_________________________________________________________________
Tired of spam? Get advanced junk mail protection with MSN 8. 
http://join.msn.com/?page=features/junkmail


From matt at pollenation.net  Mon Apr  5 02:48:10 2004
From: matt at pollenation.net (Matt Goodall)
Date: Mon Apr  5 02:58:12 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
In-Reply-To: <BAY2-F48YIgoFT3kMUV0002fe55@hotmail.com>
References: <BAY2-F48YIgoFT3kMUV0002fe55@hotmail.com>
Message-ID: <1081154889.20797.15.camel@harold>

On Mon, 2004-04-05 at 02:03, Lee Harr wrote:
> >Can you explain *why* you have the following code (copied from your
> >original post):
> >
> >
> >         from twisted.application import service
> >         from twisted.application import internet
> >
> >
> >         class ADir(rend.Page):
> >             def locateChild(self, request, segments):
> >                 path = '/'.join(segments)
> >                 return static.File(path), ()
> >
> >
> >         application = service.Application('ADirlist')
> >         webservice = internet.TCPServer(
> >             8080,
> >             appserver.NevowSite(ADir())
> >         )
> >         webservice.setServiceParent(application)
> >
> >
> >What is the use case? Why not let static.File handle everything?
> >
> 
> 
> Well... it is certainly possible that I am going about this all wrong.
> 
> I was trying to figure out how to serve images from the nevow server to
> go along with my web pages. This was the first way I figured to do that.

Aha! All becomes clear.

> If there is a better way, I am certainly willing to use it.

Yep, it's much simpler too :)

Although locateChild() is the "official" API for URL traversal,
rend.Page adds some more convenient ways of specifying children. The one
you probably want is so define a child_images attribute on your root
page's class:

        from twisted.application import internet, service
        from twisted.web import static
        
        from nevow import appserver
        from nevow import rend
        from nevow import static
        
        class RootPage(rend.Page):
        
            # Mount the 'images' directory at the '/images' URl
            child_images = static.File('images')
            
            docFactory = rend.htmlstr(
                '''
                <html>
                  <body>
                    <img src="/images/TwistedLogoFull.png" />
                    <p>Blah, blah, blah</p>
                  </body>
                </html>
                '''
                )
        
        application = service.Application('static')
        webServer = internet.TCPServer(
            8000,
            appserver.NevowSite(RootPage()))
        webServer.setServiceParent(application)

*Note* ... static.File will publish individual files or an entire
directory structure. It is up to you how you use it but for 'images',
'stylesheets', 'scripts' etc I tend to find it easier to publish a
directory for each. You could even put the 'images', 'stylesheets' and
'scripts' directories in one 'static' directory and publish the whole
thing with one child_static of something similar.

The other ways rend.Page helps you with this task are best demonstrated
by examples/children.tac in Nevow's svn repository and (I think) the
released source tar ball.

Hope this helps.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.


From sam at SpinwardStars.com  Mon Apr  5 10:11:12 2004
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Mon Apr  5 11:06:37 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory
  listing
In-Reply-To: <1081154889.20797.15.camel@harold>
References: <BAY2-F48YIgoFT3kMUV0002fe55@hotmail.com>
	<1081154889.20797.15.camel@harold>
Message-ID: <6.0.1.1.0.20040405095752.03fbb950@pop.mindspring.com>

At 2004-04-05 09:48 AM +0100, you wrote:
>static.File will publish individual files or an entire
>directory structure. It is up to you how you use it but for 'images',
>'stylesheets', 'scripts' etc I tend to find it easier to publish a
>directory for each.

This is what I do, as well. My app module is organized as:
page
     [page renderers]
     css [CSS files]
     help [HTML and supporting files]
     image [image files used in rendered pages]
     javascript [javascript files]
     templates [templates for page renderers]
misc [whatever wouldn't fit in the others]
db [persistence]
sql [sql for DB initial set, etc.]
scripts [utilities for setup, etc.]

The app has a start/welcome page, with URL 'children' for CSS,
help, image, and Javascript. The page class (an HTMLRenderer)
defines:

     cssDirectory = os.path.join(os.path.split(__file__)[0], "css")
     helpDirectory = os.path.join(os.path.split(__file__)[0], "help")
     imageDirectory = os.path.join(os.path.split(__file__)[0], "image")
     jsDirectory = os.path.join(os.path.split(__file__)[0], "javascript")

     def child_css( self, request ):
         return static.File( self.cssDirectory, defaultType="text/css" )

     def child_help( self, request ):
         return static.File( self.helpDirectory, defaultType="text/html" )

     def child_image( self, request ):
         return static.File( self.imageDirectory, defaultType="image/gif" )

     def child_js( self, request ):
         return static.File( self.jsDirectory, defaultType="text/javascript" )

I'm not sure how efficient this is, but it certainly works well.
The ChildPrefixMixin already does the dispatching, and the result
is very extensible and easy to understand.

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam@SpinwardStars.com 



From andrew at ellerton.net  Mon Apr  5 12:24:05 2004
From: andrew at ellerton.net (Ellers)
Date: Mon Apr  5 12:23:36 2004
Subject: [Twisted-web] really beginner example
In-Reply-To: <1081123808.13003.178.camel@hyla>
References: <opr5x98quofpwr4c@mail.ellerton.net>
	<1081123808.13003.178.camel@hyla>
Message-ID: <opr5zxefdbfpwr4c@mail.ellerton.net>

Hey Alex,
Thanks for your help - thats awesome.
More comments below...

On Sun, 04 Apr 2004 20:10:08 -0400, Alex Levy <mesozoic@polynode.com> wrote:

> On Sun, 2004-04-04 at 17:06, Ellers wrote:
>> Right now I want to use my own Site object, not a subclass of the
>> Nevow site object, and use the Nevow classes to generate html based on
>> templates from files.
>
> Why in particular don't you want to use NevowSite? You don't need to
> subclass NevowSite, it can be used as-is (see the attached example).

thats a good question.

Primarily my logic is that I shouldn't "have" to use a NevowSite. The twisted framework is, well, quite a heavy framework as it is. I have my existing (admittedly somewhat lame) resource.Resource subclasses, and I felt that I "should" be able to use Nevow without having to do everything its way (ie using NevowSite).

Hope that doesn't sound too militant... I guess I figure Nevow sounds like a great opportunity for a cool API, but I'm hoping I don't have to use it as a heavyweight framework. Where the difference between API and framework is how locked in I am to do my code "its way".

WDYT?


>> I have this in a file "hello_template.html":
>>
>> (snip)
>>
>
> I've attached a slight reworking of your example. You can run this
> normally, or you can run it with 'twistd -ony example1.tac.py' to
> actually start a web server. It shows both how to use data_ and render_
> methods, and also answers your question about rendering pages into plain
> text strings.
>
> Hope this helps.

it does - thanks!

The core of what you sent is this part:

def printPage():
     p = HelloPage()
     # Ordinarily this remembering nonsense is done for us.
     p.remember(p, inevow.IData)
     p.remember(p, inevow.IRendererFactory)
     # Rend.Page.renderString() returns a deferred, so...
     def gotRenderedPage(html):
         print
         print 'Page:'
         print html
     p.renderString().addCallback(gotRenderedPage)

Nifty trick with the deferred and the gotRenderedPage() callback. I'm still having trouble getting my mind around deferred so thats helpful.

Can you expand a bit on how the remember() calls are helpful? I use interfaces a lot generally (though usually thats C++ or Java), but I don't quite get how they're useful in this case?

thanks for any tips :)

Ellers



From matt at pollenation.net  Mon Apr  5 14:03:08 2004
From: matt at pollenation.net (Matt Goodall)
Date: Mon Apr  5 14:05:34 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
In-Reply-To: <6.0.1.1.0.20040405095752.03fbb950@pop.mindspring.com>
References: <BAY2-F48YIgoFT3kMUV0002fe55@hotmail.com>
	<1081154889.20797.15.camel@harold>
	<6.0.1.1.0.20040405095752.03fbb950@pop.mindspring.com>
Message-ID: <1081195388.17172.7.camel@debian>

On Mon, 2004-04-05 at 17:11, Samuel Reynolds wrote:
> At 2004-04-05 09:48 AM +0100, you wrote:
> >static.File will publish individual files or an entire
> >directory structure. It is up to you how you use it but for 'images',
> >'stylesheets', 'scripts' etc I tend to find it easier to publish a
> >directory for each.
> 
> This is what I do, as well. My app module is organized as:
> page
>      [page renderers]
>      css [CSS files]
>      help [HTML and supporting files]
>      image [image files used in rendered pages]
>      javascript [javascript files]
>      templates [templates for page renderers]
> misc [whatever wouldn't fit in the others]
> db [persistence]
> sql [sql for DB initial set, etc.]
> scripts [utilities for setup, etc.]
> 
> The app has a start/welcome page, with URL 'children' for CSS,
> help, image, and Javascript. The page class (an HTMLRenderer)
> defines:
> 
>      cssDirectory = os.path.join(os.path.split(__file__)[0], "css")
>      helpDirectory = os.path.join(os.path.split(__file__)[0], "help")
>      imageDirectory = os.path.join(os.path.split(__file__)[0], "image")
>      jsDirectory = os.path.join(os.path.split(__file__)[0], "javascript")
> 
>      def child_css( self, request ):
>          return static.File( self.cssDirectory, defaultType="text/css" )
> 
>      def child_help( self, request ):
>          return static.File( self.helpDirectory, defaultType="text/html" )
> 
>      def child_image( self, request ):
>          return static.File( self.imageDirectory, defaultType="image/gif" )
> 
>      def child_js( self, request ):
>          return static.File( self.jsDirectory, defaultType="text/javascript" )
> 
> I'm not sure how efficient this is, but it certainly works well.

The advantage to using class attributes is that the child resources are
only created once as there is often only one RootPage created for the
application. Using child_ methods is useful when the resource needs to
be initialised with args that are only known at request time.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect
the views of my employer.


From mesozoic at polynode.com  Mon Apr  5 14:10:11 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Mon Apr  5 14:10:01 2004
Subject: [Twisted-web] Re: NevowSite and renderString (was: really beginner
	example)
In-Reply-To: <opr5zxefdbfpwr4c@mail.ellerton.net>
References: <opr5x98quofpwr4c@mail.ellerton.net>
	<1081123808.13003.178.camel@hyla> <opr5zxefdbfpwr4c@mail.ellerton.net>
Message-ID: <1081195811.13011.419.camel@hyla>

On Mon, 2004-04-05 at 14:24, Ellers wrote:
> > Why in particular don't you want to use NevowSite? You don't need to
> > subclass NevowSite, it can be used as-is (see the attached example).
> 
> thats a good question.
> 
> Primarily my logic is that I shouldn't "have" to use a NevowSite. The
> twisted framework is, well, quite a heavy framework as it is. I have
> my existing (admittedly somewhat lame) resource.Resource subclasses,
> and I felt that I "should" be able to use Nevow without having to do
> everything its way (ie using NevowSite).
> 
> Hope that doesn't sound too militant... I guess I figure Nevow sounds
> like a great opportunity for a cool API, but I'm hoping I don't have
> to use it as a heavyweight framework. Where the difference between API
> and framework is how locked in I am to do my code "its way".

Have you tried using NevowSite, but giving it one of your custom
resources instead of a nevow.rend.Page instance? I'm not sure whether
that will work or not, but I don't see why it shouldn't. NevowSite is
just a subclass of t.w.server.Site, which you need anyways.

The main thing about NevowSite is that it converts everything to
inevow.IResource instead of t.w.resource.IResource. This means support
for both "old" resources, like yours, and for Nevow's own resources. So
you're getting more by usingi t, and there's very little additional
overhead.

> Nifty trick with the deferred and the gotRenderedPage() callback. I'm
> still having trouble getting my mind around deferred so thats helpful.

You'll see deferreds all over Twisted. They're very useful, sometimes
essential, in a framework where you don't always know everything at
once.

> Can you expand a bit on how the remember() calls are helpful? 

They're essential. Normally they get called in Page.renderHTTP, but they
aren't there in renderString. 

(Anyone, is this a bug? Is there a reason they're not in renderString?)

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040405/1c624548/attachment.bin
From missive at hotmail.com  Mon Apr  5 16:43:03 2004
From: missive at hotmail.com (Lee Harr)
Date: Mon Apr  5 16:43:40 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
Message-ID: <BAY2-F88CgCbSh5brvT00032571@hotmail.com>

>Aha! All becomes clear.
>
>>If there is a better way, I am certainly willing to use it.
>
>Yep, it's much simpler too :)
>
>Although locateChild() is the "official" API for URL traversal,
>rend.Page adds some more convenient ways of specifying children. The one
>you probably want is so define a child_images attribute on your root
>page's class:
>
>         from twisted.application import internet, service
>         from twisted.web import static
>
>         from nevow import appserver
>         from nevow import rend
>         from nevow import static
>
>         class RootPage(rend.Page):
>
>             # Mount the 'images' directory at the '/images' URl
>             child_images = static.File('images')
>
>             docFactory = rend.htmlstr(
>                 '''
>                 <html>
>                   <body>
>                     <img src="/images/TwistedLogoFull.png" />
>                     <p>Blah, blah, blah</p>
>                   </body>
>                 </html>
>                 '''
>                 )
>
>         application = service.Application('static')
>         webServer = internet.TCPServer(
>             8000,
>             appserver.NevowSite(RootPage()))
>         webServer.setServiceParent(application)
>


Ok. Cool. That looks nice.

With that example, and unpatched nevow, I still get an error when
trying to browse to   http://localhost/images   (note, no trailing slash)
The error is the same as in my last post ...

File "/usr/local/lib/python2.3/site-packages/twisted/python/filepath.py", 
line 138, in open
    return open(self.path, mode+'b')
exceptions.IOError: [Errno 21] Is a directory


Also... trying to get the Nevow module from anonymous cvs is giving
me an error:

$cvs -d:pserver:anon@divmod.org:/cvs co Nevow
cvs server: cannot find module `Nevow' - ignored
cvs [checkout aborted]: cannot expand modules


Thank you for your time.

_________________________________________________________________
STOP MORE SPAM with the new MSN 8 and get 2 months FREE* 
http://join.msn.com/?page=features/junkmail


From matt at pollenation.net  Mon Apr  5 17:39:33 2004
From: matt at pollenation.net (Matt Goodall)
Date: Mon Apr  5 17:41:47 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
In-Reply-To: <BAY2-F88CgCbSh5brvT00032571@hotmail.com>
References: <BAY2-F88CgCbSh5brvT00032571@hotmail.com>
Message-ID: <1081208373.17176.25.camel@debian>

On Mon, 2004-04-05 at 23:43, Lee Harr wrote:
> >Aha! All becomes clear.
> >
> >>If there is a better way, I am certainly willing to use it.
> >
> >Yep, it's much simpler too :)
> >
> >Although locateChild() is the "official" API for URL traversal,
> >rend.Page adds some more convenient ways of specifying children. The one
> >you probably want is so define a child_images attribute on your root
> >page's class:
> >
> >         from twisted.application import internet, service
> >         from twisted.web import static
> >
> >         from nevow import appserver
> >         from nevow import rend
> >         from nevow import static
> >
> >         class RootPage(rend.Page):
> >
> >             # Mount the 'images' directory at the '/images' URl
> >             child_images = static.File('images')
> >
> >             docFactory = rend.htmlstr(
> >                 '''
> >                 <html>
> >                   <body>
> >                     <img src="/images/TwistedLogoFull.png" />
> >                     <p>Blah, blah, blah</p>
> >                   </body>
> >                 </html>
> >                 '''
> >                 )
> >
> >         application = service.Application('static')
> >         webServer = internet.TCPServer(
> >             8000,
> >             appserver.NevowSite(RootPage()))
> >         webServer.setServiceParent(application)
> >
> 
> 
> Ok. Cool. That looks nice.
> 
> With that example, and unpatched nevow, I still get an error when
> trying to browse to   http://localhost/images   (note, no trailing slash)
> The error is the same as in my last post ...

> File "/usr/local/lib/python2.3/site-packages/twisted/python/filepath.py", 
> line 138, in open
>     return open(self.path, mode+'b')
> exceptions.IOError: [Errno 21] Is a directory

Hmm, that's strange. Here /images is redirected to /images/ and I get a
directory list as expected. Could you paste the entire stack trace
please.

> Also... trying to get the Nevow module from anonymous cvs is giving
> me an error:
> 
> $cvs -d:pserver:anon@divmod.org:/cvs co Nevow
> cvs server: cannot find module `Nevow' - ignored
> cvs [checkout aborted]: cannot expand modules

Everything at divmod recently moved to subversion. Use the following:

	svn co svn://divmod.org/svn/Nevow/trunk Nevow


Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect
the views of my employer.


From dp at ulaluma.com  Mon Apr  5 17:42:57 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Apr  5 17:43:17 2004
Subject: [Twisted-web] Re: NevowSite and renderString (was: really
	beginner example)
In-Reply-To: <1081195811.13011.419.camel@hyla>
References: <opr5x98quofpwr4c@mail.ellerton.net>
	<1081123808.13003.178.camel@hyla>
	<opr5zxefdbfpwr4c@mail.ellerton.net>
	<1081195811.13011.419.camel@hyla>
Message-ID: <F7AA7BEB-875A-11D8-BB61-000A95864FC4@ulaluma.com>


On Apr 5, 2004, at 4:10 PM, Alex Levy wrote:

> (Anyone, is this a bug? Is there a reason they're not in renderString?)

It's a bug. Thanks.

dp


From dp at ulaluma.com  Mon Apr  5 17:45:52 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Apr  5 17:46:13 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
In-Reply-To: <BAY2-F88CgCbSh5brvT00032571@hotmail.com>
References: <BAY2-F88CgCbSh5brvT00032571@hotmail.com>
Message-ID: <5FB9512E-875B-11D8-BB61-000A95864FC4@ulaluma.com>


On Apr 5, 2004, at 6:43 PM, Lee Harr wrote:

> Also... trying to get the Nevow module from anonymous cvs is giving
> me an error:
>
> $cvs -d:pserver:anon@divmod.org:/cvs co Nevow
> cvs server: cannot find module `Nevow' - ignored
> cvs [checkout aborted]: cannot expand modules

Nevow is now in svn:

svn:/??/??divmod.org/??svn/??Nevow/??trunk

Sorry about the lack of notice about this. Hopefully we should have 
better organized information and more timely announcements soon.

dp


From jsibre at sibre.org  Mon Apr  5 11:26:48 2004
From: jsibre at sibre.org (Jason E. Sibre)
Date: Mon Apr  5 19:30:57 2004
Subject: [Twisted-web] Performance of twisted web with HTTP/1.1 vs.
	HTTP/1.0
In-Reply-To: <20040405144204.GA32506@frobozz>
Message-ID: <NEBBLNBHMLINDEEMNJKNCENNECAA.jsibre@sibre.org>

ACT is part of the Microsoft Visual Studio .NET.  It stands for Application
Center Test.  The reason I tried it is that it allows the person setting up
the test to control which headers are sent to the server.  In fact, the test
is actually controlled programmatically via VBScript (it hooks into Internet
Explorer to 'record' the test, if you don't want to create it from scratch,
which would be very tedious).

If there's an open source tester that you'd rather I use for this
discussion, please let me know about it, and I'll chase it down.

In the meantime, I'm attaching the test script that is being used
(test.vbs).  It's written in VBScript, but it can't be run standalone, as
the "Test" object won't exist unless it's being run from the ACT.  It is
easy to read however, so you can see what's going on.

I've modified a portion of the script that ties Quixote to Twisted, so that
I can 'peek' at the HTTP headers going into/coming out of Quixote.  Here are
the headers when things are running fast:

INBOUND header GATEWAY_INTERFACE: CGI/1.1
INBOUND header HTTPS: off
INBOUND header HTTP_ACCEPT: */*
INBOUND header HTTP_ACCEPT_LANGUAGE: en-us
INBOUND header HTTP_HOST: prototype.sibre.org:8081
INBOUND header HTTP_USER_AGENT: Mozilla/4.0 (compatible; MSIE 6.0; Windows
NT 5.0; .NET CLR 1.1.4322)
INBOUND header PATH_INFO: /static/htmlarea/images/ed_image.gif
INBOUND header QUERY_STRING:
INBOUND header REMOTE_ADDR: 192.168.1.253
INBOUND header REMOTE_HOST: 192.168.1.253
INBOUND header REMOTE_PORT: 1308
INBOUND header REQUEST_METHOD: GET
INBOUND header REQUEST_URI: /static/htmlarea/images/ed_image.gif
INBOUND header SCRIPT_FILENAME:
INBOUND header SCRIPT_NAME:
INBOUND header SERVER_NAME: prototype.sibre.org
INBOUND header SERVER_PORT: 8081
INBOUND header SERVER_PROTOCOL: HTTP/1.0
INBOUND header SERVER_SOFTWARE: TwistedWeb/1.2.0


And here they are when things are running slow:

INBOUND header GATEWAY_INTERFACE: CGI/1.1
INBOUND header HTTPS: off
INBOUND header HTTP_ACCEPT: */*
INBOUND header HTTP_ACCEPT_LANGUAGE: en-us
INBOUND header HTTP_HOST: prototype.sibre.org:8081
INBOUND header HTTP_USER_AGENT: Mozilla/4.0 (compatible; MSIE 6.0; Windows
NT 5.0; .NET CLR 1.1.4322)
INBOUND header PATH_INFO: /static/htmlarea/images/ed_image.gif
INBOUND header QUERY_STRING:
INBOUND header REMOTE_ADDR: 192.168.1.253
INBOUND header REMOTE_HOST: 192.168.1.253
INBOUND header REMOTE_PORT: 1445
INBOUND header REQUEST_METHOD: GET
INBOUND header REQUEST_URI: /static/htmlarea/images/ed_image.gif
INBOUND header SCRIPT_FILENAME:
INBOUND header SCRIPT_NAME:
INBOUND header SERVER_NAME: prototype.sibre.org
INBOUND header SERVER_PORT: 8081
INBOUND header SERVER_PROTOCOL: HTTP/1.1
INBOUND header SERVER_SOFTWARE: TwistedWeb/1.2.0

I only note two differences, the HTTP/1.0 vs. HTTP/1.1 and the REMOTE_PORT
1308 vs. 1445, so, one significant difference.

Not much help, I guess, but does it give you any clues?

(I've joined the Twisted-web list for the duration of this conversation, at
least)

Thanks,

Jason Sibre








> -----Original Message-----
> From: Andrew Bennetts [mailto:andrew-twisted@puzzling.org]
> Sent: Monday, April 05, 2004 9:42 AM
> To: twisted-web@twistedmatrix.com
> Cc: jsibre@chironsys.com
> Subject: Re: [Twisted-web] Performance of twisted web with HTTP/1.1 vs.
> HTTP/1.0
>
>
> On Wed, Mar 17, 2004 at 11:02:54AM -0600, Jason Sibre wrote:
> [...]
> >
> > ab uses HTTP/1.0 to test an app, and of course most browsers
> use HTTP/1.1.
> > I set up another, more sophisticated, test suite (ACT), where I could
> > control the protocol, and ran the tests through it, and I
> confirmed that the
> > protocol level was definitely the culprit.
>
> Where can I find this "ACT" test suite?  My attempts to google for it have
> failed.
>
> I've run some quick & dodgy local tests with persistent connections and
> chunked encoding that found that no differences even close to 20x slower
> that you're seeing.  I can't think of any other significant
> differences that
> HTTP/1.1 might trigger, though.
>
> Failing all else, a copy of the exact text of the request your test suite
> sends would be handy.
>
> > I'm not a member of this list, so if you have a reply, please cc me
> > directly.
>
> Done.
>
> -Andrew.
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.vbs
Type: application/octet-stream
Size: 1390 bytes
Desc: not available
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040405/1eb9860f/test-0001.obj
From missive at hotmail.com  Mon Apr  5 20:15:43 2004
From: missive at hotmail.com (Lee Harr)
Date: Mon Apr  5 20:16:24 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
Message-ID: <BAY2-F25EwAehFWs68s0004ab72@hotmail.com>

>Everything at divmod recently moved to subversion. Use the following:
>
>       svn co svn://divmod.org/svn/Nevow/trunk Nevow
>

Ah. Ok. I am getting the cvs link from the bottom of the page here:
http://www.divmod.org/Home/Projects/Nevow/


>Hmm, that's strange. Here /images is redirected to /images/ and I get a
>directory list as expected. Could you paste the entire stack trace
>please.
>


2004/04/05 22:10 EDT [HTTPChannel,2,127.0.0.1] Traceback (most recent call 
last):
          File 
"/usr/local/lib/python2.3/site-packages/twisted/protocols/http.py", line 
554, in requestReceived
            self.process()
          File "/usr/local/lib/python2.3/site-packages/nevow/appserver.py", 
line 130, in process
            return self.site.getResourceFor(
          File 
"/usr/local/lib/python2.3/site-packages/twisted/internet/defer.py", line 
189, in addCallback
            callbackKeywords=kw)
          File 
"/usr/local/lib/python2.3/site-packages/twisted/internet/defer.py", line 
180, in addCallbacks
            self._runCallbacks()
        --- <exception caught here> ---
          File 
"/usr/local/lib/python2.3/site-packages/twisted/internet/defer.py", line 
313, in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File "/usr/local/lib/python2.3/site-packages/nevow/appserver.py", 
line 133, in <lambda>
            lambda resource: inevow.IResource(resource).renderHTTP(self)
          File "/usr/local/lib/python2.3/site-packages/nevow/static.py", 
line 290, in renderHTTP
            f = self.openForReading()
          File "/usr/local/lib/python2.3/site-packages/nevow/static.py", 
line 253, in openForReading
            return self.fp.open()
          File 
"/usr/local/lib/python2.3/site-packages/twisted/python/filepath.py", line 
138, in open
            return open(self.path, mode+'b')
        exceptions.IOError: [Errno 21] Is a directory

2004/04/05 22:10 EDT [HTTPChannel,2,127.0.0.1] html is not a string:  None
2004/04/05 22:10 EDT [HTTPChannel,2,127.0.0.1] 127.0.0.1 - - 
[06/Apr/2004:02:10:53 +0000] "GET /images HTTP/1.1" 500 8478 "-" 
"Mozilla/5.0 (compatible; Konqueror/3.2; FreeBSD) (KHTML, like Gecko)"

_________________________________________________________________
Add photos to your e-mail with MSN 8. Get 2 months FREE*. 
http://join.msn.com/?page=features/featuredemail


From missive at hotmail.com  Mon Apr  5 20:21:23 2004
From: missive at hotmail.com (Lee Harr)
Date: Mon Apr  5 20:21:55 2004
Subject: [Twisted-web] Re: [PATCH] nevow.static.File directory listing
Message-ID: <BAY2-F7qXKHrAXF6QQq0004fa10@hotmail.com>

>Hmm, that's strange. Here /images is redirected to /images/ and I get a
>directory list as expected. Could you paste the entire stack trace
>please.
>


Ok, I got the latest code from svn, and it works fine for me also.

_________________________________________________________________
Add photos to your e-mail with MSN 8. Get 2 months FREE*. 
http://join.msn.com/?page=features/featuredemail


From jsibre at sibre.org  Tue Apr  6 11:47:41 2004
From: jsibre at sibre.org (Jason E. Sibre)
Date: Tue Apr  6 11:47:47 2004
Subject: [Twisted-web] Performance of twisted web with HTTP/1.1 vs.
	HTTP/1.0
In-Reply-To: <20040406105253.GA3392@frobozz>
Message-ID: <NEBBLNBHMLINDEEMNJKNIEPAECAA.jsibre@sibre.org>

***  Probably not a problem with Twisted...  see my last comments ***

> Well, any open source tester, even a simple dodgy one you write
> yourself --
> I don't have any strong preference, but it would be nice to be able to
> reproduce your results :)

Well, I've attempted to write a script in python to do this, but, I'm not
seeing the performance difference when I run it (It performs well, whether
it's 1.0 or 1.1.  Actually, it performs slightly BETTER if it's 1.1, but
only about 10%)!  After rubbing my eyes, and trying again (and again, and
again....)  I've concluded that I'm NOT losing my mind (the perf degradation
is very real and noticable when loading/refreshing a page with lot's of
small images), but for some reason, the way httplib constructs an HTTP/1.1
request doesn't trigger it (while ACT, Internet Explorer, and Mozilla 1.7b
do trigger it)

> I can't think of what else to suggest, except for running the
> server in the
> Python profiler (the -p=profile.log switch to twistd, if you're using it),
> and seeing if that reveals where the extra time is being spent.

Hmm...  I'm not running twistd, but maybe I can do something along those
lines in my script that kicks Twisted off...  It already has some profiling
bootstrap code in it.  I hate wading through all the profiler output, but at
least this may be easy to spot, since it's so dramatic.

> Maybe you could insert a "print repr(line)" into HTTPChannel's
> lineReceiver
> handler (see twisted/protocols/http.py) to get a more raw dump of the
> request, and double-check that there's no significant differences in the
> HTTP/1.0 vs. HTTP/1.1 requests, but I'm doubtful...

Another good suggestion.  I don't know where that is at the moment, but I'm
sure it'll be easy to find once I dig/grep for it.  I assume that's a pretty
low level spot in twisted's comm stack?

> Also, to eliminate another difference between your environment
> and mine, is
> it possible to run your tester against a Twisted server on a
> linux box, and
> verify that it still gives the same behaviour?  If for some bizarre reason
> it turns out to be a windows-only issue, it'd be good to know
> before I waste
> too much time trying to reproduce it on Linux :)

Actually, I am running it on a Linux box.  Of course I ran ACT from a
windows box, but they're sitting next to each other on a 100mbps lan.  The
data transfer rate was not a factor (Apache on Linux can hand about 500
images / second to the windows box).  I'm using Python 2.3 on SuSE 8.1 with
a 2.4.24 kernel (I compiled it myself, but I haven't had any troubles with
it -- that I know of ;) )


> Also, I'm losing track of what you have and haven't tried... it might be
> time we opened a bug report for this, so we can track this properly.

I'd be up for that, but I'd really like to see at least one other person
duplicate it before we went that far.  I may just have something stupid
going on over here.
----------------------------------------------------------------
Ok, you know what?  I'm starting to think it's a not a problem intrinsic
with twisted.  I just put together a html page with 100 small images, and
served it through the Qx / Twisted combo and it was slow.  Through Qx /
Medusa, it was fast.  Through Twisted by itself, it was fast (using Moz
1.7b).  Here's the script I used:

#!/usr/bin/python
from twisted.internet import reactor
from twisted.web import static, server

root = static.File(
  "/home/jsibre/programs/python/sitehostApp/sitehost/web/static/test")
reactor.listenTCP(8082, server.Site(root))
reactor.run()

It ran really fast, all images loaded in about a second (through the Qx /
Twisted combo, you can watch them load one after the other...  Takes about 8
or 9 seconds).

I was afraid of this... It's probably something in the glue that ties the Qx
to Twisted.  I'll work it from that angle for a while and see if I find a
problem that is fixable, and provide the fix to the Qx folks when I figure
it out.

Thanks for your help, Andrew.

Jason






From andrew at ellerton.net  Wed Apr  7 14:28:57 2004
From: andrew at ellerton.net (Ellers)
Date: Wed Apr  7 14:28:16 2004
Subject: [Twisted-web] Re: NevowSite and renderString (was: really
	beginner example)
In-Reply-To: <1081195811.13011.419.camel@hyla>
References: <opr5x98quofpwr4c@mail.ellerton.net>
	<1081123808.13003.178.camel@hyla>
	<opr5zxefdbfpwr4c@mail.ellerton.net>
	<1081195811.13011.419.camel@hyla>
Message-ID: <opr53sijmffpwr4c@mail.ellerton.net>

> Have you tried using NevowSite, but giving it one of your custom
> resources instead of a nevow.rend.Page instance? I'm not sure whether
> that will work or not, but I don't see why it shouldn't. NevowSite is
> just a subclass of t.w.server.Site, which you need anyways.

That works nicely, thanks :)

I'll keep experimenting there and tinker with things to get a better understanding of how the parts work together.

In the meantime, I'm having trouble with lists now - in particular, I want to display a list and have each item be a link. I looked at the Nevow calendar example but I can't follow it.

In my page class I have this (excerpt):

	def data_names(self, context, data):
		# this is a list of strings
		return self.names

	def getURLForName( self, name ):
		# a crappy demo of how I can parameterise getting the URL
		# for a given name
		return "/data/%s" % name

	def render_link(self, context, data):
		# would it be better to do something like:
		#
		#    return T.a(href=url)[title],
		#
		# ?
		#
		name = ??
		url = self.getURLForName( name )
		return "<a href='%s'>%s</a>" % ( url, title )

I know this code isn't great, but the thing I'm stuck on right now is how do I get the name argument - from the data parameter?

Oh, and I probably shouldn't be calling it render_link... sorry guys, I get lost with Nevow a bit! :)

The html fragment I'm using is:

		<p>This is called <span nevow:data="title" nevow:render="string" /></p>
		<p>This is a list of stuff:<br/>
		<ol nevow:data="names" nevow:render="sequence">
			<span nevow:pattern="header">HEADER</span>
			<li nevow:pattern="item"><span nevow:render="string" /></li>

			<span nevow:pattern="divider">-----</span>
			<div nevow:pattern="empty">Nothing.</div>
			<span nevow:pattern="footer">FOOTER</span>
		</ol>
		</p>

The title span is working really well - and many thanks here go to Alex Levy!

thanks for any help on the above

Ellers

From matt at pollenation.net  Thu Apr  8 04:05:39 2004
From: matt at pollenation.net (Matt Goodall)
Date: Thu Apr  8 04:16:41 2004
Subject: [Twisted-web] Re: NevowSite and renderString (was: really
	beginner example)
In-Reply-To: <opr53sijmffpwr4c@mail.ellerton.net>
References: <opr5x98quofpwr4c@mail.ellerton.net>
	<1081123808.13003.178.camel@hyla> <opr5zxefdbfpwr4c@mail.ellerton.net>
	<1081195811.13011.419.camel@hyla> <opr53sijmffpwr4c@mail.ellerton.net>
Message-ID: <1081418738.29344.156.camel@harold>

On Wed, 2004-04-07 at 21:28, Ellers wrote:

[snip]

> I'm having trouble with lists now - in particular, I want to display a list and have each item be a link. I looked at the Nevow calendar example but I can't follow it.
> 
> In my page class I have this (excerpt):
> 
> 	def data_names(self, context, data):
> 		# this is a list of strings
> 		return self.names
> 
> 	def getURLForName( self, name ):
> 		# a crappy demo of how I can parameterise getting the URL
> 		# for a given name
> 		return "/data/%s" % name
> 
> 	def render_link(self, context, data):
> 		# would it be better to do something like:
> 		#
> 		#    return T.a(href=url)[title],
> 		#
> 		# ?
> 		#
> 		name = ??
> 		url = self.getURLForName( name )
> 		return "<a href='%s'>%s</a>" % ( url, title )
> 
> I know this code isn't great, but the thing I'm stuck on right now is how do I get the name argument - from the data parameter?

The sequence renderer causes each item in the sequence to be passed to
the renderer as the data arg. So in your code "name = data" would work.
Although ... you don't appear to be calling the "link" renderer from the
HTML template you included, it's calling the standard string renderer
still.

Creating the HTML fragment and returning it from render_link() is a bad
idea as the string will be xml-escaped, i.e. '<' will be replaced with
'&lt;', '>' will be replaced with '&gt;', etc. You should definitely use
the stan tags in this case, in fact the "return T.a ..." in the comment
is spot on.

NOTE: If you really, really want to send some HTML in a string then wrap
it in a tags.xml object which will pass the string straight through. For
instance,  i.e. return T.xml("<a href='%s'>%s</a>" % ( url, title )).

> 
> Oh, and I probably shouldn't be calling it render_link... sorry guys, I get lost with Nevow a bit! :)
> 
> The html fragment I'm using is:
> 
> 		<p>This is called <span nevow:data="title" nevow:render="string" /></p>
> 		<p>This is a list of stuff:<br/>
> 		<ol nevow:data="names" nevow:render="sequence">
> 			<span nevow:pattern="header">HEADER</span>
> 			<li nevow:pattern="item"><span nevow:render="string" /></li>
> 
> 			<span nevow:pattern="divider">-----</span>
> 			<div nevow:pattern="empty">Nothing.</div>
> 			<span nevow:pattern="footer">FOOTER</span>
> 		</ol>
> 		</p>
> 
> The title span is working really well - and many thanks here go to Alex Levy!

I'll let you have a crack at getting things working now but you may also
want to look at the nevow.url module. It makes constructing URLs
*really* easy.

Hope this helps.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From jvanasco at mastersofbranding.com  Thu Apr  8 13:20:45 2004
From: jvanasco at mastersofbranding.com (Jonathan Vanasco)
Date: Thu Apr  8 13:20:55 2004
Subject: [Twisted-web] Seeking more examples
In-Reply-To: <1081418738.29344.156.camel@harold>
References: <opr5x98quofpwr4c@mail.ellerton.net>
	<1081123808.13003.178.camel@hyla>
	<opr5zxefdbfpwr4c@mail.ellerton.net>
	<1081195811.13011.419.camel@hyla>
	<opr53sijmffpwr4c@mail.ellerton.net>
	<1081418738.29344.156.camel@harold>
Message-ID: <D5CCC027-8991-11D8-A8BE-000393863D5E@mastersofbranding.com>


I'd like to write a messageboard-like website/application in twisted.

I've been going through the Calendar example from nevow.com, and the 
bannerfish example from itamarst.org - trying to get an understanding 
to begin with.

I was hoping that someone on this list could point me to some more 
examples that I can learn from -- everything that I've seen so far has 
focused on one or two pages, and I'm trying to figure out how to have 
multiple page types and more info.

Thanks


From dp at ulaluma.com  Thu Apr  8 14:25:05 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Thu Apr  8 14:25:25 2004
Subject: [Twisted-web] Seeking more examples
In-Reply-To: <D5CCC027-8991-11D8-A8BE-000393863D5E@mastersofbranding.com>
References: <opr5x98quofpwr4c@mail.ellerton.net>
	<1081123808.13003.178.camel@hyla>
	<opr5zxefdbfpwr4c@mail.ellerton.net>
	<1081195811.13011.419.camel@hyla>
	<opr53sijmffpwr4c@mail.ellerton.net>
	<1081418738.29344.156.camel@harold>
	<D5CCC027-8991-11D8-A8BE-000393863D5E@mastersofbranding.com>
Message-ID: <D28FA87C-899A-11D8-A936-000A95864FC4@ulaluma.com>


On Apr 8, 2004, at 3:20 PM, Jonathan Vanasco wrote:

>
> I'd like to write a messageboard-like website/application in twisted.
>
> I've been going through the Calendar example from nevow.com, and the 
> bannerfish example from itamarst.org - trying to get an understanding 
> to begin with.
>
> I was hoping that someone on this list could point me to some more 
> examples that I can learn from -- everything that I've seen so far has 
> focused on one or two pages, and I'm trying to figure out how to have 
> multiple page types and more info.

The ultimate example of using nevow is Quotient. Unfortunately, it's 
probably not the easiest to follow. To orient you should you decide to 
look at the code, all URLs are expressed in the form /me/123 where 123 
is the unique identifier of an object in a database. The database is 
'atop', an object database, so attempting to visit that page will load 
the corresponding object from the DB. Then, an IResource adapter is 
located for that object. So, you can look at any of the IResource 
adapters (registered in webcomponents.wsv) for examples of multiple 
Page types.

For some simpler examples, the apps which come to mind are Matt 
Goodall's pastebin, and Alex Levy's CMS (does it have a name?). Perhaps 
they could share some code or links.

As always, please drop by #twisted.web on irc.freenode.net and ask 
questions freely. There is a high likelihood that someone will be happy 
to answer your questions and have a technical discussion with you. If 
nobody answers immediately, idle for a couple of hours... someone 
should answer eventually :-)

dp


From mesozoic at polynode.com  Thu Apr  8 18:01:56 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Thu Apr  8 18:01:22 2004
Subject: [Twisted-web] [PATCH] Posting forms to deferred configurables
Message-ID: <1081468916.18711.549.camel@hyla>

Skipped content of type multipart/mixed-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040408/550810a2/attachment.bin
From andrew at ellerton.net  Fri Apr  9 02:49:58 2004
From: andrew at ellerton.net (Ellers)
Date: Fri Apr  9 02:49:17 2004
Subject: [Twisted-web] Seeking more examples
In-Reply-To: <D28FA87C-899A-11D8-A936-000A95864FC4@ulaluma.com>
References: <opr5x98quofpwr4c@mail.ellerton.net>
	<1081123808.13003.178.camel@hyla>
	<opr5zxefdbfpwr4c@mail.ellerton.net>
	<1081195811.13011.419.camel@hyla>
	<opr53sijmffpwr4c@mail.ellerton.net>
	<1081418738.29344.156.camel@harold>
	<D5CCC027-8991-11D8-A8BE-000393863D5E@mastersofbranding.com>
	<D28FA87C-899A-11D8-A936-000A95864FC4@ulaluma.com>
Message-ID: <opr56lhka5fpwr4c@mail.ellerton.net>

>> I'd like to write a messageboard-like website/application in twisted.
>>
>> [snip]
>>
>> I was hoping that someone on this list could point me to some more examples that I can learn from -- everything that I've seen so far has focused on one or two pages, and I'm trying to figure out how to have multiple page types and more info.
>
> The ultimate example of using nevow is Quotient. Unfortunately, it's probably not the easiest to follow.

I think it would be awesome to have a directory of examples that build up from crawling, to walking then running with twisted/nevow. Twisted/nevow is something much more powerful than, say, Perl's CGI.pm but that package is very easy to learn, to see what it can do, how to use it, etc. Examples using CGI.pm are at: http://stein.cshl.org/WWW/software/CGI/examples/

Aside from being great for beginners, there is another great benefit to lots of small and medium examples. A framework built for one application tends can be a bit myopic. If there are lots of little examples, each showing how to do one element cleanly and clearly, the framework will probably need to bend a little (or a lot!) and everyone will benefit.

I'm still a beginner with Twisted/Nevow and, if I can figure it out, I'd love to contribute some examples. In the meantime I want to flag it as something that would be cool and worth the effort.

And again thanks to everyone who has been helping me with my queries so far :)

Ellers

From matt at pollenation.net  Fri Apr  9 04:05:54 2004
From: matt at pollenation.net (Matt Goodall)
Date: Fri Apr  9 04:07:55 2004
Subject: [Twisted-web] Seeking more examples
In-Reply-To: <opr56lhka5fpwr4c@mail.ellerton.net>
References: <opr5x98quofpwr4c@mail.ellerton.net>
	<1081123808.13003.178.camel@hyla> <opr5zxefdbfpwr4c@mail.ellerton.net>
	<1081195811.13011.419.camel@hyla> <opr53sijmffpwr4c@mail.ellerton.net>
	<1081418738.29344.156.camel@harold>
	<D5CCC027-8991-11D8-A8BE-000393863D5E@mastersofbranding.com>
	<D28FA87C-899A-11D8-A936-000A95864FC4@ulaluma.com>
	<opr56lhka5fpwr4c@mail.ellerton.net>
Message-ID: <1081505154.20039.67.camel@debian>

On Fri, 2004-04-09 at 09:49, Ellers wrote:
> >> I'd like to write a messageboard-like website/application in twisted.
> >>
> >> [snip]
> >>
> >> I was hoping that someone on this list could point me to some more examples that I can learn from -- everything that I've seen so far has focused on one or two pages, and I'm trying to figure out how to have multiple page types and more info.
> >
> > The ultimate example of using nevow is Quotient. Unfortunately, it's probably not the easiest to follow.
> 
> I think it would be awesome to have a directory of examples that build up from crawling, to walking then running with twisted/nevow. Twisted/nevow is something much more powerful than, say, Perl's CGI.pm but that package is very easy to learn, to see what it can do, how to use it, etc. Examples using CGI.pm are at: http://stein.cshl.org/WWW/software/CGI/examples/

Yes, we could use the wiki for this. There are quite a few "crawling"
examples in the Nevow's examples/ directory too. Perhaps the wiki page
should list the examples/ as a start and then others can add to it over
time with contrib resources etc.

I probably have simple examples sitting on disk here. I will commit
anything I can find to sandbox/mg/ and then perhaps we can move some
into examples/ if they are useful.

You might want to track the subversion repository, even if it's just for
examples.

> 
> Aside from being great for beginners, there is another great benefit to lots of small and medium examples. A framework built for one application tends can be a bit myopic. If there are lots of little examples, each showing how to do one element cleanly and clearly, the framework will probably need to bend a little (or a lot!) and everyone will benefit.

Agreed, Quotient (for instance) is far too big to learn from unless
there's a particular concept you need and know what to search for.
Bigger applications also tend to be heavily refactored which often makes
things harder to follow.

> 
> I'm still a beginner with Twisted/Nevow and, if I can figure it out, I'd love to contribute some examples. In the meantime I want to flag it as something that would be cool and worth the effort.

Great! As Donovan mentioned, there's often a few people on the
#twisted.web IRC channel to help you get going. If you can come up with
useful examples then I'm confident someone will add them to the SVN
repository.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From andrew-twisted at puzzling.org  Mon Apr  5 08:42:04 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri Apr  9 05:47:17 2004
Subject: [Twisted-web] Performance of twisted web with HTTP/1.1 vs.
	HTTP/1.0
In-Reply-To: <NEBBLNBHMLINDEEMNJKNCENAEBAA.jsibre@chironsys.com>
References: <NEBBLNBHMLINDEEMNJKNCENAEBAA.jsibre@chironsys.com>
Message-ID: <20040405144204.GA32506@frobozz>

On Wed, Mar 17, 2004 at 11:02:54AM -0600, Jason Sibre wrote:
[...]
> 
> ab uses HTTP/1.0 to test an app, and of course most browsers use HTTP/1.1.
> I set up another, more sophisticated, test suite (ACT), where I could
> control the protocol, and ran the tests through it, and I confirmed that the
> protocol level was definitely the culprit.

Where can I find this "ACT" test suite?  My attempts to google for it have
failed.

I've run some quick & dodgy local tests with persistent connections and
chunked encoding that found that no differences even close to 20x slower
that you're seeing.  I can't think of any other significant differences that
HTTP/1.1 might trigger, though.

Failing all else, a copy of the exact text of the request your test suite
sends would be handy.

> I'm not a member of this list, so if you have a reply, please cc me
> directly.

Done.

-Andrew.


From andrew-twisted at puzzling.org  Tue Apr  6 04:52:53 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri Apr  9 09:38:05 2004
Subject: [Twisted-web] Performance of twisted web with HTTP/1.1 vs.
	HTTP/1.0
In-Reply-To: <NEBBLNBHMLINDEEMNJKNAENOECAA.jsibre@sibre.org>
References: <20040405144204.GA32506@frobozz>
	<NEBBLNBHMLINDEEMNJKNAENOECAA.jsibre@sibre.org>
Message-ID: <20040406105253.GA3392@frobozz>

On Mon, Apr 05, 2004 at 12:32:37PM -0500, Jason E. Sibre wrote:
> ACT is part of the Microsoft Visual Studio .NET.  It stands for Application
> Center Test.  The reason I tried it is that it allows the person setting up
> the test to control which headers are sent to the server.  In fact, the test
> is actually controlled programmatically via VBScript (it hooks into Internet
> Explorer to 'record' the test, if you don't want to create it from scratch,
> which would be very tedious).

Ah, ok.  I've played with an older version of it a couple of years ago I
think, back when I was still working for a company that used windows :)  I
think it was called "WAST" (Web Application Stress Tool) or something at the
time, I guess ACT is probably the new version of that :)

Anyway, that explains why I couldn't find it on google :)

> If there's an open source tester that you'd rather I use for this
> discussion, please let me know about it, and I'll chase it down.

Well, any open source tester, even a simple dodgy one you write yourself --
I don't have any strong preference, but it would be nice to be able to
reproduce your results :)

> In the meantime, I'm attaching the test script that is being used
> (test.vbs).  It's written in VBScript, but it can't be run standalone, as
> the "Test" object won't exist unless it's being run from the ACT.  It is
> easy to read however, so you can see what's going on.

Yeah, nothing usual, certainly nothing that looks problematic...

> I've modified a portion of the script that ties Quixote to Twisted, so that
> I can 'peek' at the HTTP headers going into/coming out of Quixote.  Here are
> the headers when things are running fast:
> 
> INBOUND header GATEWAY_INTERFACE: CGI/1.1
[..some headers..]
> INBOUND header SERVER_PROTOCOL: HTTP/1.0
> INBOUND header SERVER_SOFTWARE: TwistedWeb/1.2.0
> 
> 
> And here they are when things are running slow:
> 
> INBOUND header GATEWAY_INTERFACE: CGI/1.1
[..identical headers..]
> INBOUND header SERVER_PROTOCOL: HTTP/1.1
> INBOUND header SERVER_SOFTWARE: TwistedWeb/1.2.0
> 
> I only note two differences, the HTTP/1.0 vs. HTTP/1.1 and the REMOTE_PORT
> 1308 vs. 1445, so, one significant difference.
> 
> Not much help, I guess, but does it give you any clues?

Not really.  I've read through the code in twisted/protocols/http.py, and I
simply don't see any significant differences in the code paths for serving
HTTP/1.0 and HTTP/1.1.

> (I've joined the Twisted-web list for the duration of this conversation, at
> least)

I've CC'd the list.

I can't think of what else to suggest, except for running the server in the
Python profiler (the -p=profile.log switch to twistd, if you're using it),
and seeing if that reveals where the extra time is being spent.

Maybe you could insert a "print repr(line)" into HTTPChannel's lineReceiver
handler (see twisted/protocols/http.py) to get a more raw dump of the
request, and double-check that there's no significant differences in the
HTTP/1.0 vs. HTTP/1.1 requests, but I'm doubtful...

Also, to eliminate another difference between your environment and mine, is
it possible to run your tester against a Twisted server on a linux box, and
verify that it still gives the same behaviour?  If for some bizarre reason
it turns out to be a windows-only issue, it'd be good to know before I waste
too much time trying to reproduce it on Linux :)

Also, I'm losing track of what you have and haven't tried... it might be
time we opened a bug report for this, so we can track this properly.

-Andrew.


From dreid at dreid.org  Fri Apr  9 16:24:14 2004
From: dreid at dreid.org (David Reid)
Date: Fri Apr  9 16:24:25 2004
Subject: [Twisted-web] vhost.NameVirtualHost implementation for Nevow
Message-ID: <1081549454.21328.3.camel@localhost>

Last night at about 4 in the morning I was saddened to discover that
vhost.NameVirtualHost breaks horribly when using Nevow.  So in a sleep
deprived stupor I attempted to reimplement it and failed, deleted the
results.  Woke up this morning around 2:30pm and made it work.  

This JUST implements NameVirtualHost which is the only part of vhost I
use.  Anyway, here it is *drum roll please* *clicks the attach button,
selects the file and hits ok*

-David

-------------- next part --------------
A non-text attachment was scrubbed...
Name: vhost.py
Type: text/x-python
Size: 1718 bytes
Desc: not available
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040409/851023c8/vhost.py
From andrew at ellerton.net  Sat Apr 10 01:28:48 2004
From: andrew at ellerton.net (Ellers)
Date: Sat Apr 10 01:28:06 2004
Subject: [Twisted-web] vhost.NameVirtualHost implementation for Nevow
In-Reply-To: <1081549454.21328.3.camel@localhost>
References: <1081549454.21328.3.camel@localhost>
Message-ID: <opr58cealkfpwr4c@mail.ellerton.net>

On Fri, 09 Apr 2004 15:24:14 -0700, David Reid <dreid@dreid.org> wrote:

> Last night at about 4 in the morning I was saddened to discover that
> vhost.NameVirtualHost breaks horribly when using Nevow.  So in a sleep
> deprived stupor I attempted to reimplement it and failed, deleted the
> results.  Woke up this morning around 2:30pm and made it work.
>
> This JUST implements NameVirtualHost which is the only part of vhost I
> use.  Anyway, here it is *drum roll please* *clicks the attach button,
> selects the file and hits ok*
>
> -David

hehe - I relate! "Very late ... I... must... finish... TONIGHT!" and the code just gets dirtier and clunkier. Then the next day when I'm in the shower or whatever the solution appears out of nowhere, I cut the code and it works first time!

There must be a name for the phenomenon...

Ellers

From dreid at dreid.org  Sat Apr 10 04:48:58 2004
From: dreid at dreid.org (David Reid)
Date: Sat Apr 10 04:49:21 2004
Subject: [Twisted-web] more vhost.NameVirtualHost implementation for nevow
Message-ID: <1081594138.8522.7.camel@localhost>

Added a few features:
* Nesting vhost.NameVirtualHost instances

* Listing hosts if default == None and listHosts == True

* default, and listHosts can be passed to the constructor with default  
values of None, and True respectively.

* return rend.NotFound[0] if both default and listHosts are None


-------------- next part --------------
A non-text attachment was scrubbed...
Name: vhost.py
Type: text/x-python
Size: 1718 bytes
Desc: not available
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040410/0190b08c/vhost.py
From andrew at ellerton.net  Sat Apr 10 13:53:31 2004
From: andrew at ellerton.net (Ellers)
Date: Sat Apr 10 13:52:49 2004
Subject: [Twisted-web] nevow tags and class attribute
Message-ID: <opr59avhu4fpwr4c@mail.ellerton.net>

Hey guys,

A harder question this time (well... maybe!)

Using nevow.tags I want to emit a paragraph such as:

	<p class="dirItem">blah</p>

Problem is, "class" is naturally a keyword so python won't let me do this:

	return T.p("class"=paraClass)[ T.a(href=url)[resourceName] ]

but this is fine

	return T.p("id"=paraClass)[ T.a(href=url)[resourceName] ]

its probably easy... any ideas?

Thanks
Ellers

From twisted at goldenspud.com  Sat Apr 10 14:34:00 2004
From: twisted at goldenspud.com (Matthew Scott)
Date: Sat Apr 10 14:34:04 2004
Subject: [Twisted-web] nevow tags and class attribute
In-Reply-To: <opr59avhu4fpwr4c@mail.ellerton.net>
References: <opr59avhu4fpwr4c@mail.ellerton.net>
Message-ID: <200404101534.00609.twisted@goldenspud.com>

On Saturday 10 April 2004 14:53, Ellers wrote:
> Using nevow.tags I want to emit a paragraph such as:
> 	<p class="dirItem">blah</p>
> Problem is, "class" is naturally a keyword so python won't let me do this:
> 	return T.p("class"=paraClass)[ T.a(href=url)[resourceName] ]


Use a leading underscore to assign something to "class".  Nevow will strip 
that out for you:


return T.p(_class=paraClass)[...]


-- 
Matthew Scott <spud@goldenspud.com>

From andrew at ellerton.net  Sat Apr 10 15:02:56 2004
From: andrew at ellerton.net (Ellers)
Date: Sat Apr 10 15:02:17 2004
Subject: [Twisted-web] nevow tags and class attribute
In-Reply-To: <200404101534.00609.twisted@goldenspud.com>
References: <opr59avhu4fpwr4c@mail.ellerton.net>
	<200404101534.00609.twisted@goldenspud.com>
Message-ID: <opr59d26fhfpwr4c@mail.ellerton.net>

On Sat, 10 Apr 2004 15:34:00 -0500, Matthew Scott <twisted@goldenspud.com> wrote:

> On Saturday 10 April 2004 14:53, Ellers wrote:
>> Using nevow.tags I want to emit a paragraph such as:
>> 	<p class="dirItem">blah</p>
>> Problem is, "class" is naturally a keyword so python won't let me do this:
>> 	return T.p("class"=paraClass)[ T.a(href=url)[resourceName] ]
>
>
> Use a leading underscore to assign something to "class".  Nevow will strip
> that out for you:
>
>
> return T.p(_class=paraClass)[...]
>

Awesome - thanks!

From andrew at ellerton.net  Sat Apr 10 16:27:20 2004
From: andrew at ellerton.net (Ellers)
Date: Sat Apr 10 16:26:37 2004
Subject: [Twisted-web] choosing between nodes
Message-ID: <opr59hzulzfpwr4c@mail.ellerton.net>

Hi all,

I'm learning nevow by building yet a simple view-edit-save kind of app. Its going ok and is a good learning experience.

I've refactored so that I can specify all the layout in separate html files, with as little coded html as possible.

I'm stuck because I want the code to choose between displaying html fragments from the template that either display the page, edit it or save it.

The relevant html fragment looks like this - and I know its really wrong :) -

		<div id="content">

		<span nevow:data="display" nevow:render="xml"/>

		<span nevow:data="edit" nevow:render="xml">
		<form>this is edit: more will go in here...</form>
		</span>

		<span nevow:data="save" nevow:render="xml/>
		<p>you have saved: <span nevow:data="saved_data" nevow:render="xml/>
		</span>

		</div>

What is the right way to tell Nevow to use one node and not another?

Thanks again!

Ellers

PS
am I right that Nevow stands for NEw Version Of Woven ?

From mesozoic at polynode.com  Sat Apr 10 17:08:14 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Sat Apr 10 17:07:36 2004
Subject: [Twisted-web] choosing between nodes
In-Reply-To: <opr59hzulzfpwr4c@mail.ellerton.net>
References: <opr59hzulzfpwr4c@mail.ellerton.net>
Message-ID: <1081638493.18710.6275.camel@hyla>

On Sat, 2004-04-10 at 18:27, Ellers wrote:
> <div id="content">
>  <span nevow:data="display" nevow:render="xml"/>
>  <span nevow:data="edit" nevow:render="xml">
>   <form>this is edit: more will go in here...</form>
>  </span>
>  <span nevow:data="save" nevow:render="xml/>
>   <p>you have saved: <span nevow:data="saved_data" nevow:render="xml/>
>  </span>
> </div>

First off, you don't want to be using span tags, you want to be using
div tags -- span tags aren't block elements, so they aren't supposed to
contain things like forms and paragraphs (as far as I understand).

Here's what you really want:

<div>
 <div nevow:render="display"></div>
 <div nevow:render="edit">
  <form nevow:render="edit_form"></form>
 </div>
 <div nevow:render="save">
  <p>
   You have saved: <span nevow:render="save_data"></span>
  </p>
 </div>
</div>

class MyPage:
    def render_display(self, ctx, data):
        if not show_display: return ctx.tag.clear()
        # More...

    def render_edit(self, ctx, data):
        if not show_edit: return ctx.tag.clear()
        # More...

    def render_save(self, ctx, data):
        if not show_save: return ctx.tag.clear()
        # More...

    # Implement other renderers (edit_form and save_data)...

    
There's nothing that says you have to use Nevow's predefined renderers;
for most complex rendering situations, you're going to want to write
your own render_* functions.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040410/cae0b9d6/attachment.bin
From andrew at ellerton.net  Sun Apr 11 14:30:32 2004
From: andrew at ellerton.net (Ellers)
Date: Sun Apr 11 14:29:52 2004
Subject: [Twisted-web] choosing between nodes
In-Reply-To: <1081638493.18710.6275.camel@hyla>
References: <opr59hzulzfpwr4c@mail.ellerton.net>
	<1081638493.18710.6275.camel@hyla>
Message-ID: <opr6a686r2fpwr4c@mail.ellerton.net>

On Sat, 10 Apr 2004 19:08:14 -0400, Alex Levy <mesozoic@polynode.com> wrote:

> On Sat, 2004-04-10 at 18:27, Ellers wrote:
>> <div id="content">
>> [snip]
>> </div>
>
> First off, you don't want to be using span tags, you want to be using
> div tags -- span tags aren't block elements, so they aren't supposed to
> contain things like forms and paragraphs (as far as I understand).
>
> Here's what you really want:

[snip]

many thanks!
I'll try that out... :)

Ellers


From sam at SpinwardStars.com  Sun Apr 11 19:05:07 2004
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Sun Apr 11 19:07:51 2004
Subject: [Twisted-web] nevow tags and class attribute
In-Reply-To: <200404101534.00609.twisted@goldenspud.com>
References: <opr59avhu4fpwr4c@mail.ellerton.net>
	<200404101534.00609.twisted@goldenspud.com>
Message-ID: <6.0.1.1.0.20040411190315.04140508@pop.mindspring.com>

At 2004-04-10 03:34 PM -0500, you wrote:
>Use a leading underscore to assign something to "class".  Nevow will strip
>that out for you:
>
>return T.p(_class=paraClass)[...]

Argghhhhh! And all this time I've been doing
    tag = T.p()[...]
    tag.attributes['class']=paraClass

I *hate* magical incantations.
Otherwise, I rather like Nevow. :-)

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam@SpinwardStars.com 



From matt at pollenation.net  Mon Apr 12 04:31:41 2004
From: matt at pollenation.net (Matt Goodall)
Date: Mon Apr 12 04:33:54 2004
Subject: [Twisted-web] nevow tags and class attribute
In-Reply-To: <6.0.1.1.0.20040411190315.04140508@pop.mindspring.com>
References: <opr59avhu4fpwr4c@mail.ellerton.net>
	<200404101534.00609.twisted@goldenspud.com>
	<6.0.1.1.0.20040411190315.04140508@pop.mindspring.com>
Message-ID: <1081765901.2816.7.camel@debian>

On Mon, 2004-04-12 at 02:05, Samuel Reynolds wrote:
> At 2004-04-10 03:34 PM -0500, you wrote:
> >Use a leading underscore to assign something to "class".  Nevow will strip
> >that out for you:
> >
> >return T.p(_class=paraClass)[...]
> 
> Argghhhhh! And all this time I've been doing
>     tag = T.p()[...]
>     tag.attributes['class']=paraClass
> 
> I *hate* magical incantations.
> Otherwise, I rather like Nevow. :-)

But the whole of Nevow's stan is magical. It's an abomination! A hideous
abuse of Python's __getitem__ machinery! It's lovely :).

If you really want to avoid _class (_for is another) you can do:

        attrs = {'class': paraClass}
        tag = T.p(**attrs)[...]

or even:

        tag = T.p(**{'class': paraClass})[...]

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From jvanasco at mastersofbranding.com  Mon Apr 12 22:43:09 2004
From: jvanasco at mastersofbranding.com (jonathan vanasco)
Date: Mon Apr 12 22:43:17 2004
Subject: [Twisted-web] Nevow Templating question
Message-ID: <103A825F-8D05-11D8-9A79-000A95A6EFE6@mastersofbranding.com>


This works, but I think the approach might be wrong.
(the output is what I want it to be, but I think I may have implemented 
things counter to the way nevow was designed)

Can someone please offer their input?



template.html
-------------------
<tr>
	<td valign="top"> pick a city</td>
	<td>
		<select name="city">
		<span nevow:data="citiesList" nevow:render="city"></span>
		</select>
	</td>
</tr>


testing.py
-------------------
	def data_citiesList(self, context, data):
		return {"New York":'1', "Los Angeles":'2'}
	def render_city(self, context, data):
		"""Example of using stan to render a page.
		"""
		return rend.stan(
			[
				T.option(value=v)[k] for (k,v) in data.items()
			]
		)

Output.html
----------------
<tr>
	<td valign="top"> pick a city</td>
	<td>
		<select name="city">
			<option value=1>New York</option>
			<option value=2>Los Angeles</option>
		</select>
	</td>
</tr>


From stephen at thorne.id.au  Mon Apr 12 22:49:43 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Mon Apr 12 22:53:40 2004
Subject: [Twisted-web] Nevow Templating question
In-Reply-To: <103A825F-8D05-11D8-9A79-000A95A6EFE6@mastersofbranding.com>
References: <103A825F-8D05-11D8-9A79-000A95A6EFE6@mastersofbranding.com>
Message-ID: <20040413044943.GA20873@thorne.id.au>

On Tue, Apr 13, 2004 at 12:43:09AM -0400, jonathan vanasco wrote:
> 
> This works, but I think the approach might be wrong.
> (the output is what I want it to be, but I think I may have implemented 
> things counter to the way nevow was designed)
> 
> Can someone please offer their input?

Sure, see comments inline with code. Please bear in mind I haven't
executed this code, I'm just making it up ;)

> template.html
> -------------------
> <tr>
> 	<td valign="top"> pick a city</td>
> 	<td>
> 		<select name="city">
> 		<span nevow:data="citiesList" nevow:render="city"></span>
> 		</select>
        <select name="city" nevow:data="citiesList" nevow:render="city" />
> 	</td>
> </tr>
> 
> 
> testing.py
> -------------------
> 	def data_citiesList(self, context, data):
> 		return {"New York":'1', "Los Angeles":'2'}
> 	def render_city(self, context, data):
> 		"""Example of using stan to render a page.
> 		"""
> 		return rend.stan(
> 			[
> 				T.option(value=v)[k] for (k,v) in 
> 				data.items()
> 			]
> 		)

        return context.tag[
            [ T.option(value=v)[k] for (k,v) in data.items() ]
        ]
> 
> Output.html
> ----------------
> <tr>
> 	<td valign="top"> pick a city</td>
> 	<td>
> 		<select name="city">
> 			<option value=1>New York</option>
> 			<option value=2>Los Angeles</option>
> 		</select>
> 	</td>
> </tr>

Regards,
Stephen Thorne

From andy at thecablelounge.com  Tue Apr 13 00:08:31 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue Apr 13 00:08:47 2004
Subject: [Twisted-web] Nevow Templating question
In-Reply-To: <103A825F-8D05-11D8-9A79-000A95A6EFE6@mastersofbranding.com>
References: <103A825F-8D05-11D8-9A79-000A95A6EFE6@mastersofbranding.com>
Message-ID: <407B83DF.5010001@thecablelounge.com>

jonathan vanasco wrote:

> Can someone please offer their input?

The following is a bit more graphic designer friendly:

> template.html
> -------------------
> <tr>
>     <td valign="top"> pick a city</td>
>     <td>
>         <select name="city">
>         <span nevow:data="citiesList" nevow:render="city"></span>
>         </select>
>     </td>
> </tr>


<select name="city" nevow:data="citiesList" nevow:render="sequence">
	<option nevow:pattern="item" nevow:render="city" value="1">
	</option>
</select>


> testing.py
> -------------------
>     def data_citiesList(self, context, data):
>         return {"New York":'1', "Los Angeles":'2'}
>     def render_city(self, context, data):
>         """Example of using stan to render a page.
>         """
>         return rend.stan(
>             [
>                 T.option(value=v)[k] for (k,v) in data.items()
>             ]
>         )

def data_citiesList(self, context, data):
     return {"New York":'1', "Los Angeles":'2'}.items()

def render_city(self, context, data):
     return context.tag(value=data[1])[data[0]]


The only problem with the above is if you put something inside the 
option for the template, say:

<option nevow:pattern="item" nevow:render="city" value="1">
ned
</option>

You will see ned prepended in each option rendered by nevow.  Does 
anyone know how to overwrite the template contents of the option?

cheers,
Andy.

From stephen at thorne.id.au  Tue Apr 13 00:54:38 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Tue Apr 13 00:58:11 2004
Subject: [Twisted-web] Nevow Templating question
In-Reply-To: <407B83DF.5010001@thecablelounge.com>
References: <103A825F-8D05-11D8-9A79-000A95A6EFE6@mastersofbranding.com>
	<407B83DF.5010001@thecablelounge.com>
Message-ID: <20040413065438.GA24783@thorne.id.au>

On Tue, Apr 13, 2004 at 04:08:31PM +1000, Andy Gayton wrote:
> def data_citiesList(self, context, data):
>     return {"New York":'1', "Los Angeles":'2'}.items()
> 
> def render_city(self, context, data):
>     return context.tag(value=data[1])[data[0]]
> 
> 
> The only problem with the above is if you put something inside the 
> option for the template, say:
> 
> <option nevow:pattern="item" nevow:render="city" value="1">
> ned
> </option>
> 
> You will see ned prepended in each option rendered by nevow.  Does 
> anyone know how to overwrite the template contents of the option?

def render_city(self, context, data):
    return context.tag.clear()(value=data[1])[data[0]]

.clear() returns self, so you can chain it like that.

Stephen.


From aleaxit at yahoo.com  Tue Apr 13 01:35:48 2004
From: aleaxit at yahoo.com (Alex Martelli)
Date: Tue Apr 13 01:36:10 2004
Subject: [Twisted-web] Re: choosing between nodes
References: <opr59hzulzfpwr4c@mail.ellerton.net>
	<1081638493.18710.6275.camel@hyla>
Message-ID: <c5g58k$l1l$1@sea.gmane.org>

Alex Levy wrote:

> On Sat, 2004-04-10 at 18:27, Ellers wrote:
>> <div id="content">
>>  <span nevow:data="display" nevow:render="xml"/>
>>  <span nevow:data="edit" nevow:render="xml">
>>   <form>this is edit: more will go in here...</form>
>>  </span>
>>  <span nevow:data="save" nevow:render="xml/>
>>   <p>you have saved: <span nevow:data="saved_data" nevow:render="xml/>
>>  </span>
>> </div>
> 
> First off, you don't want to be using span tags, you want to be using
> div tags -- span tags aren't block elements, so they aren't supposed to
> contain things like forms and paragraphs (as far as I understand).

Unless you really need some tag to be in the output, which is unusual for
span and div unless you're placing HTML attributes on them, you may prefer
to attach your "rendering logic" to <nevow:invisible> tags instead.  Those
won't show up in the resulting HTML, which makes it "lighter".

As I often need selective output, I have a very simple general-purpose
renderer:

    def render_ifeq(self, context, data):
        if data != (context.tag.pattern or ''):
            return ''
        return context.tag

If you have, for example, a data_state that returns as the current data a
string which represents some kind of "state", you could code the template:

<nevow:invisible nevow:data="state">
    <nevow:invisible nevow:render="ifeq" nevow:pattern="edit">
        <p> You are editing the object. </p>
    </nevow:invisible>
    <nevow:invisible nevow:render="ifeq" nevow:pattern="save">
        <p> Your changes have been saved. </p>
    </nevow:invisible>
    <nevow:invisible nevow:render="ifeq" nevow:pattern="view">
        <p> Your are just viewing the object. </p>
    </nevow:invisible>
</nevow:invisible>

This will emit a single one of the three <p>'s as appropriate.  Several
other similar approaches are possible, e.g., put the patterns on the tags
among which you want to choose, and have the renderer examine all contained
patterns and pick the right one[s]; generalize ifeq to an ifmatch that
treats patterns as regular expressions; and so on, and so forth.  I'm
striving to avoid obscuring my stuff with excessive and unwarranted
generality, and so far I've found the simple ifeq serves my purpose, so
that's what I'm currently using.

I _think_ (I could be wrong...) that using nevow:pattern as the "argument"
to be used by data and render methods is quite consonant to nevow's design;
there used to be some confusion, e.g. with the quondam nevow:key, but now
that nevow:pattern is all that's left the approach appears to be to be
simple and effective, allowing you to pick the right degree of generality.
  

Alex



From indigo at bitglue.com  Tue Apr 13 02:54:45 2004
From: indigo at bitglue.com (indigo@bitglue.com)
Date: Tue Apr 13 02:54:52 2004
Subject: [Twisted-web] Nevow Templating question
In-Reply-To: <103A825F-8D05-11D8-9A79-000A95A6EFE6@mastersofbranding.com>
References: <103A825F-8D05-11D8-9A79-000A95A6EFE6@mastersofbranding.com>
Message-ID: <20040413085445.GA6907@unununium.org>

Another option:

<select n:render='sequence' n:data='cityList'>
  <option n:render='city' n:pattern='item'>
    <n:attr name='value'><n:slot name='value'/></n:attr>
    <n:slot name='city'/>
  </option>
</select>

def data_cityList( self, context, data ):
  return [("New York",'1'), ("Los Angeles",'2')]

def render_city( self, context, (city, value) ):
  context.fillSlots( 'value', value )
  context.fillSlots( 'city', city )

'sequence' is a built-in renderer that takes a list as data, and repeats the
nested 'item' pattern with each element of the list as data. It also accepts
patterns 'header', 'footer', and 'divider', but those arn't useful in this
case.

The data_cityList is changed to return a list of tuples, otherwise you will
have no control over the order of the items.

Also, this uses <n:attr>, which was just added to svn less than a day ago,
and atm only works with xmlfile. This allows putting slots in attributes.

Alternately, for something that doesn't use <n:attr> and isn't as verbose,
you could do:

<select n:render='sequence' n:data='cityList'>
  <option n:render='city' n:pattern='item'>
    the contents of this node don't matter
  </option>
<select>

and change render_city to return a literal stan tag:

def render_city( self, context, (city, value) ):
  from nevow.tags import *
  return option( value=value )[city]


On Tue, Apr 13, 2004 at 12:43:09AM -0400, jonathan vanasco wrote:
> 
> This works, but I think the approach might be wrong.
> (the output is what I want it to be, but I think I may have implemented 
> things counter to the way nevow was designed)
> 
> Can someone please offer their input?
> 
> 
> 
> template.html
> -------------------
> <tr>
> 	<td valign="top"> pick a city</td>
> 	<td>
> 		<select name="city">
> 		<span nevow:data="citiesList" nevow:render="city"></span>
> 		</select>
> 	</td>
> </tr>
> 
> 
> testing.py
> -------------------
> 	def data_citiesList(self, context, data):
> 		return {"New York":'1', "Los Angeles":'2'}
> 	def render_city(self, context, data):
> 		"""Example of using stan to render a page.
> 		"""
> 		return rend.stan(
> 			[
> 				T.option(value=v)[k] for (k,v) in 
> 				data.items()
> 			]
> 		)
> 
> Output.html
> ----------------
> <tr>
> 	<td valign="top"> pick a city</td>
> 	<td>
> 		<select name="city">
> 			<option value=1>New York</option>
> 			<option value=2>Los Angeles</option>
> 		</select>
> 	</td>
> </tr>
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

From stephen at thorne.id.au  Tue Apr 13 08:20:46 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Tue Apr 13 08:24:42 2004
Subject: [Twisted-web] twcgi.py changes
Message-ID: <20040413142046.GA3480@thorne.id.au>

Hi,

I had a change I made to twcgi ages ago  which I've just recently revised:

Old Issue:
http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue516

New Patch:
---------------------------------------------------------------------------
--- twisted/web/twcgi.py        (revision 10536)
+++ twisted/web/twcgi.py        (working copy)
@@ -154,11 +154,20 @@
 class PHPScript(FilteredScript):
     """I am a FilteredScript that uses the PHP command on most systems.
     Sometimes, php wants the path to itself as argv[0]. This is that time.
+
+    To run as cgi, I require the following configuration options in php.ini be set:
+        cgi.fix_pathinfo = 1
+        cgi.force_redirect = 0
     """
 
     filter = '/usr/bin/php4'
 
+class DebianPHPScript(PHPScript):
+    """PHP binary is in a different place in Debian"""
 
+    filter = '/usr/lib/cgi-bin/php4'
+    
+
 class CGIProcessProtocol(protocol.ProcessProtocol, pb.Viewable):
     handling_headers = 1
     headers_written = 0
---------------------------------------------------------------------------


The doc changes are required imho, but I don't really like the subclass
for Debian.  Frankly, I think it sucks, but can anyone see a cleaner way
of doing this?

It almost feels like something that should be configured on runtime -
there are too many places the php4 variable could be (and we can't
exactly do a $PATH lookup, becuase php4-cli doesn't have all the cgi
stuff in it, and is in /usr/bin/php4 under debian systems).

Regards,
Stephen Thorne



From michal at pasternak.w.lub.pl  Tue Apr 13 08:56:08 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Tue Apr 13 08:56:03 2004
Subject: [Twisted-web] twcgi.py changes
In-Reply-To: <20040413142046.GA3480@thorne.id.au>
References: <20040413142046.GA3480@thorne.id.au>
Message-ID: <20040413145608.GA96467@pasternak.w.lub.pl>

Stephen Thorne [Wed, Apr 14, 2004 at 12:20:46AM +1000]:
> The doc changes are required imho,

Using twcgi.py + PHP, I've had problems with setcookie in PHP (eg.
session_start() set the session cookie okay, but correct, working-in-apache
setcookie calls wasn't passed to Twisted Web when run as CGI). 

Do those changes in php.ini get rid of such problems?

> but I don't really like the subclass
> for Debian.  Frankly, I think it sucks, but can anyone see a cleaner way
> of doing this?

Get a list of common prefixes (/usr, /usr/local, /usr/pkg, /opt), combine
with a list of common locations (lib/cgi-bin/php, libexec/cgi-bin/php, bin/php)
... should do.

NetBSD: 	/usr/pkg/libexec/cgi-bin/php
FreeBSD: 	/usr/local/bin/php (probably)

-- 
Michal Pasternak :: http://pasternak.w.lub.pl :: http://winsrc.sf.net
Here's my obfuscated Python signature code, to indicate I'm a Python guy:
>>> print u'micha\u0142 pasternak'.encode("iso8859-2")


From joe at seventy-twodpi.com  Mon Apr 12 14:59:02 2004
From: joe at seventy-twodpi.com (Joe Bowers)
Date: Tue Apr 13 12:26:49 2004
Subject: [Twisted-web] operating on literals in nevow html templates
In-Reply-To: <E1BD5jC-0001WQ-02@pyramid.twistedmatrix.com>
Message-ID: <AGEIJJAOINCAPLOMDIAHCECDDKAA.joe@seventy-twodpi.com>

I'm using Nevow along with designers who use a 
WYSIWYG HTML editor, and it's working like a dream!
However, I've run into an interesting scenario,
and I was wondering if anyone has any advice or
best practices to recommend.

I would like to perform a transformation
something like the following in my completed
code:

<a href="GUI_GENERATED_CALL(garbage, 'WindowName', 'WindowParams')"
   >Click here for a popup</a>

to

<a href="dynamicCall('dynamicData', 'WindowName', 'WindowParams')"
   >Click here for a popup</a>

It's acceptable for me to bend, fold, or otherwise
mutilate the designer-provided tag to some degree, so
something like:

<a href="GUI_GENERATED_CALL(garbage, 'WindowName', 'WindowParams')"
   nevow:data="{'name' : 'WindowName', 'params' : 'WindowParams'}"
   nevow:render="dynamicPopup"
   >Click here for a popup</a>

would be fine- but the literal parameters I need to
preserve need to be under the control of the designers
and present in the template rather than in the code.

Any advice or pointers on how this sort of thing 
should be handled?

Thanks for your help!

--------------------
Joe Bowers
Technical Director
Seventy-two dpi

828.252.2408 [x308]
joe@seventytwodpi.com
http://www.seventytwodpi.com



From indigo at bitglue.com  Tue Apr 13 14:48:19 2004
From: indigo at bitglue.com (indigo@bitglue.com)
Date: Tue Apr 13 14:48:24 2004
Subject: [Twisted-web] operating on literals in nevow html templates
In-Reply-To: <AGEIJJAOINCAPLOMDIAHCECDDKAA.joe@seventy-twodpi.com>
References: <E1BD5jC-0001WQ-02@pyramid.twistedmatrix.com>
	<AGEIJJAOINCAPLOMDIAHCECDDKAA.joe@seventy-twodpi.com>
Message-ID: <20040413204819.GA10828@unununium.org>

If you can add n:render='dynamicPopup' to any links you want to process,
then you can access the href attribute of that tag with
"context.tag.attributes['href']" within your render method. To change
it, first clone context.tag, modify the clone, and then return it, like
so:

def render_dynamicCall( self, context, data ):
  copy = context.tag.clone()
  href = copy.attributes['href']
  # modify href to your liking
  copy.attributes['href'] = href
  return copy

On Mon, Apr 12, 2004 at 04:59:02PM -0400, Joe Bowers wrote:
> I'm using Nevow along with designers who use a 
> WYSIWYG HTML editor, and it's working like a dream!
> However, I've run into an interesting scenario,
> and I was wondering if anyone has any advice or
> best practices to recommend.
> 
> I would like to perform a transformation
> something like the following in my completed
> code:
> 
> <a href="GUI_GENERATED_CALL(garbage, 'WindowName', 'WindowParams')"
>    >Click here for a popup</a>
> 
> to
> 
> <a href="dynamicCall('dynamicData', 'WindowName', 'WindowParams')"
>    >Click here for a popup</a>
> 
> It's acceptable for me to bend, fold, or otherwise
> mutilate the designer-provided tag to some degree, so
> something like:
> 
> <a href="GUI_GENERATED_CALL(garbage, 'WindowName', 'WindowParams')"
>    nevow:data="{'name' : 'WindowName', 'params' : 'WindowParams'}"
>    nevow:render="dynamicPopup"
>    >Click here for a popup</a>
> 
> would be fine- but the literal parameters I need to
> preserve need to be under the control of the designers
> and present in the template rather than in the code.
> 
> Any advice or pointers on how this sort of thing 
> should be handled?
> 
> Thanks for your help!
> 
> --------------------
> Joe Bowers
> Technical Director
> Seventy-two dpi
> 
> 828.252.2408 [x308]
> joe@seventytwodpi.com
> http://www.seventytwodpi.com

From dp at ulaluma.com  Tue Apr 13 15:31:54 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Apr 13 15:32:16 2004
Subject: [Twisted-web] operating on literals in nevow html templates
In-Reply-To: <AGEIJJAOINCAPLOMDIAHCECDDKAA.joe@seventy-twodpi.com>
References: <AGEIJJAOINCAPLOMDIAHCECDDKAA.joe@seventy-twodpi.com>
Message-ID: <FC3A32E0-8D91-11D8-8D3D-000A95864FC4@ulaluma.com>


On Apr 12, 2004, at 4:59 PM, Joe Bowers wrote:

<snip>

> It's acceptable for me to bend, fold, or otherwise
> mutilate the designer-provided tag to some degree, so
> something like:
>
> <a href="GUI_GENERATED_CALL(garbage, 'WindowName', 'WindowParams')"
>    nevow:data="{'name' : 'WindowName', 'params' : 'WindowParams'}"
>    nevow:render="dynamicPopup"
>> Click here for a popup</a>
>
> would be fine- but the literal parameters I need to
> preserve need to be under the control of the designers
> and present in the template rather than in the code.

There is an experimental feature in the Nevow codebase that probably 
not too many people know about. I call them render parameters. They 
were designed for almost exactly this use, to allow designers to 
provide parameters to a renderer which will affect how it renders. The 
syntax is a bit odd and probably still open for discussion, but it is 
currently:

<a nevow:render="dynamicPopup WindowName,WindowParams">Click here</a>

The renderer name and arguments are separated by a space; the 
individual arguments are separated by commas. The arguments would be 
sent to the render method like so:

def render_dynamicPopup(self, name, params):
	print name, params
	return "woo"

Since you probably also want access to the context and data parameters 
normally passed to a renderer, you probably want to create and return a 
closure (nested function) which gets ctx and data:

def render_dynamicPopup(self, name, params):
	def nestedFunction(ctx, data):
		print name, params, ctx, data # has access to name and params because 
they are "closed over"
		return "woo"
	return nestedFunction

This is still a somewhat experimental feature; there is an example of 
usage in "sandbox/mg/reroot.py". If you try it out, please give us 
feedback on whether it solves your problem, how useful it is, and 
whether the syntax or semantics could be improved to make it more 
useful.

dp


From jsibre at sibre.org  Wed Apr 14 21:37:19 2004
From: jsibre at sibre.org (Jason E. Sibre)
Date: Wed Apr 14 21:37:23 2004
Subject: [Twisted-web] Performance of twisted web with Quixote [was
	Performance of twisted web with HTTP/1.1 vs. HTTP/1.0]
In-Reply-To: <20040406105253.GA3392@frobozz>
Message-ID: <NEBBLNBHMLINDEEMNJKNMEHGEDAA.jsibre@sibre.org>

Hi folks,

I previously wrote to this list about a performance problem I was having
with Twisted, Quixote, and (I thought) HTTP/1.1, which I erroneously thought
was a problem in Twisted's ability to deal with HTTP/1.1...

I've since spent lots of time digging, and first figured out that the
problem wasn't really in Twisted (and it really didn't have anything to do
with HTTP/1.1, though persistent connections did contribute.  More
accurately, the lack of persistent connections would mask the problem.), and
then eventually figured out what the problem REALLY was.

It was an odd little thing that had to do with Linux, Windows, network
stacks, slow ACKs, and sending more packets than were needed.  Well, I don't
want to go into much more detail, because your time is valuable.

First, for those that haven't heard of it, Quixote is a python based web
publishing framework that doesn't include a web server.  Instead, it can be
published through a number of mechanisms:  CGI, FastCGI, SCGI, or
mod_python, plus it has interfaces for Twisted and Medusa.  I think I may be
missing one, but I'm not sure.  It's home page is at
http://www.mems-exchange.org/software/quixote/

We (the quixote-users folks) seem to have a lack of expertise in Twisted :)

The interface between twisted and quixote: A twisted request object is used
to create a quixote request object, quixote is called to publish the
request, and then the output of quixote is wrapped into a producer which
twisted then finishes handling.  Actually, that's how it has been for quite
some time, except for the producer bit.  My modifications revolved around
creating the producer class that (I think/hope) works well in the Twisted
framework, and let's twisted publish it when it's ready (i.e., in it's event
loop).  Formerly, quixote's output was just pushed out through the twisted
request object's write() method.  Which could cause REALLY bad performance;
the bug I was chasing. In many cases it did just fine, however.  This was
also just a generally bad idea, because, for instance, publishing a large
file could consume large amounts of RAM until it was done being pushed over
the wire.

It's also worth mentioning that a quixote Stream object (noticable in the
source) is a producer, but it uses the iterator protocol instead of .more()
or resumeProducing().

I'm hoping that someone can take a look at the finished product (just the
interface module) and say something like, "you're nuts! you're doing this
all wrong!", or "yeah, this looks like the right general idea, except maybe
this bit here...".

Also, if anyone can share a brief one-liner or two about whether or not I
should leave in the hooks for pb and threadable, I'd appreciate it (quixote
is almost always run single threaded...  Maybe just always...). I also
changed the demo/test code at the bottom of the module from using the
Application object to using the reactor.  I'd appreciate any feedback on
that and the SSL code (it's also new...) as well.

If anyone should want to actually run this, it'll work with Quixote-1.0b1,
and the previous 'stable' (I say that because it was the latest version for
several months...) version 0.7a3.  I wrote the interface against twisted
1.2.0, but I think it'll work with older versions.  I just don't know how
old.  Oh, and if you wanna drop it in a quixote install, it lives as
quixote.server.twisted_http

Thanks in advance for any help,

Jason Sibre
-------------- next part --------------
#!/usr/bin/env python

"""
twist -- Demo of an HTTP server built on top of Twisted Python.
"""

__revision__ = "$Id: medusa_http.py 21221 2003-03-20 16:02:41Z akuchlin $"

# based on qserv, created 2002/03/19, AMK
# last mod 2003.03.24, Graham Fawcett
# tested on Win32 / Twisted 0.18.0 / Quixote 0.6b5
#
# version 0.2 -- 2003.03.24 11:07 PM
#   adds missing support for session management, and for
#   standard Quixote response headers (expires, date)
#
# modified 2004/04/10 jsibre
#   better support for Streams
#   wraps output (whether Stream or not) into twisted type producer.
#   modified to use reactor instead of Application (Appication 
#     has been deprecated)


import urllib
from twisted.protocols import http
from twisted.web import server

from quixote.http_response import Stream

# Imports for the TWProducer object
from twisted.spread import pb
from twisted.python import threadable
from twisted.internet import abstract

class QuixoteTWRequest(server.Request):

    def process(self):
        self.publisher = self.channel.factory.publisher
        environ = self.create_environment()
        ## this seek is important, it doesnt work without it
        ## (It doesn't matter for GETs, but POSTs will not
        ## work properly without it.)
        self.content.seek(0,0)
        qxrequest = self.publisher.create_request(self.content, environ)
        self.quixote_publish(qxrequest, environ)
        resp = qxrequest.response
        self.setResponseCode(resp.status_code)
        for hdr, value in resp.generate_headers():
            self.setHeader(hdr, value)
        if resp.body is not None:
            TWProducer(resp.body, self)
        else:
            self.finish()


    def quixote_publish(self, qxrequest, env):
        """
        Warning, this sidesteps the Publisher.publish method,
        Hope you didn't override it...
        """
        pub = self.publisher
        output = pub.process_request(qxrequest, env)

        # don't write out the output, just set the response body
        # the calling method will do the rest.
        if output:
            qxrequest.response.set_body(output)

        pub._clear_request()


    def create_environment(self):
        """
        Borrowed heavily from twisted.web.twcgi
        """
        # Twisted doesn't decode the path for us,
        # so let's do it here.  This is also
        # what medusa_http.py does, right or wrong.
        if '%' in self.path:
            self.path = urllib.unquote(self.path)

        serverName = self.getRequestHostname().split(':')[0]
        env = {"SERVER_SOFTWARE":   server.version,
               "SERVER_NAME":       serverName,
               "GATEWAY_INTERFACE": "CGI/1.1",
               "SERVER_PROTOCOL":   self.clientproto,
               "SERVER_PORT":       str(self.getHost()[2]),
               "REQUEST_METHOD":    self.method,
               "SCRIPT_NAME":       '',
               "SCRIPT_FILENAME":   '',
               "REQUEST_URI":       self.uri,
               "HTTPS":             (self.isSecure() and 'on') or 'off',
        }

        client = self.getClient()
        if client is not None:
            env['REMOTE_HOST'] = client
        ip = self.getClientIP()
        if ip is not None:
            env['REMOTE_ADDR'] = ip
        xx, xx, remote_port = self.transport.getPeer()
        env['REMOTE_PORT'] = remote_port
        env["PATH_INFO"] = self.path

        qindex = self.uri.find('?')
        if qindex != -1:
            env['QUERY_STRING'] = self.uri[qindex+1:]
        else:
            env['QUERY_STRING'] = ''

        # Propogate HTTP headers
        for title, header in self.getAllHeaders().items():
            envname = title.replace('-', '_').upper()
            if title not in ('content-type', 'content-length'):
                envname = "HTTP_" + envname
            env[envname] = header

        return env


class TWProducer(pb.Viewable):
    """
    A class to represent the transfer of data over the network.
    
    JES Note: This has more stuff in it than is minimally neccesary.
    However, since I'm no twisted guru, I built this by modifing
    twisted.web.static.FileTransfer.  FileTransfer has stuff in it 
    that I don't really understand, but know that I probably don't 
    need. I'm leaving it in under the theory that if anyone ever 
    needs that stuff (e.g. because they're running with multiple 
    threads) it'll be MUCH easier for them if I had just left it in
    than if they have to figure out what needs to be in there.  
    Furthermore, I notice no performance penalty for leaving it in.
    """
    request = None
    def __init__(self, data, request):
        self.request = request
        self.data = ""
        self.size = 0
        self.stream = None
        self.streamIter = None
    
        self.outputBufferSize = abstract.FileDescriptor.bufferSize

        if isinstance(data, Stream):    # data could be a Stream
            self.stream = data
            self.streamIter = iter(data)
            self.size = data.length
        elif data:                      # data could be a string
            self.data = data
            self.size = len(data)
        else:                           # data could be None
            # We'll just leave self.data as ""
            pass

        request.registerProducer(self, 0)


    def resumeProducing(self):
        """ 
        This is twisted's version of a producer's '.more()', or
        an iterator's '.next()'.  That is, this function is 
        responsible for returning some content.
        """
        if not self.request:
            return

        if self.stream:
            # If we were provided a Stream, let's grab some data
            # and push it into our data buffer
            
            buffer = [self.data]
            bytesInBuffer = len(buffer[-1])
            while bytesInBuffer < self.outputBufferSize:
                try:
                    buffer.append(self.streamIter.next())
                    bytesInBuffer += len(buffer[-1])
                except StopIteration:
                    # We've exhausted the Stream, time to clean up.
                    self.stream = None
                    self.streamIter = None
                    break
            self.data = "".join(buffer)
            
        if self.data:
            chunkSize = min(self.outputBufferSize, len(self.data))
            data, self.data = self.data[:chunkSize], self.data[chunkSize:]
        else:
            data = ""
            
        if data:
            self.request.write(data)
        
        if not self.data:
            self.request.unregisterProducer()
            self.request.finish()
            self.request = None

    def pauseProducing(self):
        pass

    def stopProducing(self):
        self.data    = ""
        self.request = None
        self.stream  = None
        self.streamIter = None

    # Remotely relay producer interface.

    def view_resumeProducing(self, issuer):
        self.resumeProducing()

    def view_pauseProducing(self, issuer):
        self.pauseProducing()

    def view_stopProducing(self, issuer):
        self.stopProducing()

    synchronized = ['resumeProducing', 'stopProducing']

threadable.synchronize(TWProducer)



class QuixoteFactory (http.HTTPFactory):

    def __init__(self, publisher):
        self.publisher = publisher
        http.HTTPFactory.__init__(self, None)

    def buildProtocol (self, addr):
        p = http.HTTPFactory.buildProtocol(self, addr)
        p.requestFactory = QuixoteTWRequest
        return p


def run ():
    from twisted.internet import reactor
    from quixote import enable_ptl
    from quixote.publish import Publisher

    enable_ptl()

    import quixote.demo
    # Port this server will listen on
    http_port = 8080
    namespace = quixote.demo

    #  If you want SSL, make sure you have OpenSSL,
    #  uncomment the follownig, and uncomment the 
    #  listenSSL() call below.
    
    ##from OpenSSL import SSL
    ##class ServerContextFactory:
    ##    def getContext(self):
    ##        ctx = SSL.Context(SSL.SSLv23_METHOD)
    ##        ctx.use_certificate_file('/path/to/pem/encoded/ssl_cert_file')
    ##        ctx.use_privatekey_file('/path/to/pem/encoded/ssl_key_file')
    ##        return ctx

    publisher = Publisher(namespace)
    ##publisher.setup_logs()
    qf = QuixoteFactory(publisher)

    reactor.listenTCP(http_port, qf)
    ##reactor.listenSSL(http_port, qf, ServerContextFactory())

    reactor.run()

if __name__ == '__main__':
    run()
From dreid at dreid.org  Thu Apr 15 04:47:43 2004
From: dreid at dreid.org (David Reid)
Date: Thu Apr 15 04:47:04 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
Message-ID: <1082026063.1236.68.camel@localhost>

Goals of a split:

* Simplify the twisted.web, don't make it do anything clever. 
	The clever stuff should be left up to nevow and perhaps kept a seperate
module.  Also given fzZzy's history it seems very likely that eventually
he will come up with something even better than Nevow, and it would just
be a waste to have to rewrite twisted.web (again) to support it. ;)

* Implement things like distrib and vhosts at a lower level.  
	Currently distrib and vhosts need to be reimplemented or atleast
violently shoehorned into working with Nevow.  This will likely be the
same with any future alternatives to Nevow.  I'll get into specifics
about distrib and vhosts later.

* Use new APIs.
	This is as good a chance as any to get rid of all those
DeprecationWarnings we get when starting a twisted.web server.


Concerns of a split:

* Failing.  
	I don't want to fork the code, I want to officially split twisted.web
from core twisted and refactor it to support the above goals.  I need to
know this is what people want to happen, and I need input to make sure
it's done Reasonably Right (TM)


Not Concerns of a split:

* Backwards compatibility.
	I'm ok with breaking old applications built on twisted.web.
I hope by simplifying the core we can expand the possibilities for later
development.  I've changed my mind about turning Nevow into
twisted.web2.  I think that would just cause more problems down the
line.  I want to make twisted.web the simplest webserver it can be
without sucking.

Distrib and Vhost Specifics:

Currently distrib really gets caught up handling some of the complex
objects that are used in the nevow.appserver.NevowRequest object.

It first throws an InsecureJelly exception when it hits a
nevow.context.WovenContext.  If you shoehorn that by making it a
pb.Copyable with a None returning getStateForCopy method it immediately
throws an exception for nevow.appserver.OldResourceAdapter.  When you
shoehorn that through with the above method it throws an InsecureJelly
exception when it hits twisted.internet.defer.Deferred.  Obviously you
can see why i wouldn't want to pursue that methodology futher.  It seems
silly to have to do that just so stuff won't go over ther wire, I'm sure
there is a simpler way but no one bothered to point it out to me when i
was asking about it.  

And NevowRequest seems like an ideal example of an object to complicated
to bother with passing it through pb.  Passing http.Request would be so
much simpler and it would get us a little bit closer to realize this
comment from twisted/web/distrib.py:

"""
This is going to have to be refactored so that argument parsing is done
by each subprocess and not by the main web server (i.e. GET, POST etc.).
"""

As I'm sure you've probably realized, I'm "That Guy Who Made Vhosts work
in Nevow".

Yes that is me.  And VHost wasn't such a big problem, but it got me
thinking about how to do distrib and that led me to realize that perhaps
they should not be implemented at what we currently think of as the
Resource level, but instead at the Site level or even before that.

Both technologies need a minimal ammount of information to process the
request.  So it seems silly to have them handle server.Request and
especially NevowRequest.

I guess I've sort of gone off on a rant there, and really wanted to
avoid that.  So I'll leave that as my opinion, and let you fine
programmers comment.   

The End.

These are just my first impressions about how a split should take place,
I will admit to not being up on the core twisted.web code and certainly
not on the core twisted.  But i'm willing to put in the effort to learn
it and take care of this if no one else is.  Right now i make $6.75US/hr
and go to school 2 days a week, i have probably as much free time as
anyone else and I really really want this stuff to work.

-- David Reid


From mesozoic at polynode.com  Thu Apr 15 08:37:10 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Thu Apr 15 08:36:25 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082026063.1236.68.camel@localhost>
References: <1082026063.1236.68.camel@localhost>
Message-ID: <1082039830.11185.44.camel@hyla>

On Thu, 2004-04-15 at 06:47, David Reid wrote:
> Not Concerns of a split:
> 
> * Backwards compatibility.

Just to clarify: you don't mean changing twisted.web to break
backwards-compatibility, but instead mean that apps written for
twisted.web will not always work with this new module. Correct?

I don't see a major problem with splitting code, as long as the old
twisted.web and twisted.web.woven modules remain (so that people can
continue to use applications that've already been written).

It's been pointed out before that twisted.web is an app server, not a
protocol implementation, and thus there is justification for moving it
outside of Twisted. What do the gurus think?

> Right now I make $6.75US/hr and go to school 2 days a week, i have
> probably as much free time as anyone else and I really really want
> this stuff to work.

I'm graduating in a month, with no job, so I may have a hell of a lot of
time to spend on this soon. :)

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040415/bfe6917f/attachment.bin
From thomas.mangin at exa-networks.co.uk  Thu Apr 15 10:09:46 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Thu Apr 15 10:09:55 2004
Subject: [Twisted-web] SOAP issue
Message-ID: <1082045385.2227.135.camel@thomas_mangin.dc.exa.net.uk>

Hello,

I would appreciate if someone could tell me what I did wrong.

Tested with twisted 1.2.0 - installed from tar.gz on a Mandrake 9.2 with
the latest version of SOAPpy using the python 2.3 Mandrake RPMS.

Thank you

Thomas
----
#!/usr/bin/python
 
from twisted.web.soap import Proxy
from twisted.internet import reactor
 
def printValue(value):
        print repr(value)
        reactor.stop()
 
def printError(error):
        print 'error', error
        reactor.stop()
 
proxy = Proxy('http://192.0.2.1:7080/SOAP')
proxy.callRemote('quote').addCallbacks(printValue, printError)
reactor.run()

$ cat server.py
#!/usr/bin/python
 
from twisted.web import soap
from twisted.web import server
from twisted.internet import reactor
 
class Example(soap.SOAPPublisher):
        def soap_quote(self):
                return "Boring string ....."
 
r = Example()
reactor.listenTCP(7080, server.Site(r))
reactor.run()

$ ./client.py
error [Failure instance: Traceback: twisted.web.error.Error, 500
Internal Server Error
]

$ ./server.py
Traceback (most recent call last):
  File "/usr/lib/python2.3/site-packages/twisted/protocols/basic.py",
line 229, in dataReceived
    return self.rawDataReceived(data)
  File "/usr/lib/python2.3/site-packages/twisted/protocols/http.py",
line 1002, in rawDataReceived
    self.allContentReceived()
  File "/usr/lib/python2.3/site-packages/twisted/protocols/http.py",
line 993, in allContentReceived
    req.requestReceived(command, path, version)
  File "/usr/lib/python2.3/site-packages/twisted/protocols/http.py",
line 554, in requestReceived
    self.process()
--- <exception caught here> ---
  File "/usr/lib/python2.3/site-packages/twisted/web/server.py", line
159, in process
    self.render(resrc)
  File "/usr/lib/python2.3/site-packages/twisted/web/server.py", line
166, in render
    body = resrc.render(self)
  File "/usr/lib/python2.3/site-packages/twisted/web/soap.py", line 87,
in render
    d = defer.maybeDeferred(function, *args)
exceptions.TypeError: maybeDeferred() argument after * must be a
sequence
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040415/ecc7290f/attachment.bin
From thomas.mangin at exa-networks.co.uk  Thu Apr 15 10:37:17 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Thu Apr 15 10:37:23 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082039830.11185.44.camel@hyla>
References: <1082026063.1236.68.camel@localhost>
	<1082039830.11185.44.camel@hyla>
Message-ID: <1082047035.2227.162.camel@thomas_mangin.dc.exa.net.uk>

> It's been pointed out before that twisted.web is an app server, not a
> protocol implementation, and thus there is justification for moving it
> outside of Twisted. What do the gurus think?

I will risk a modest outsider point of view - I am /not/ a twisted guru but I hope this does not reduce the value of my opinion.

A large part of what makes twisted attractive is the ease of implementation of services with it. Removing woven/nevow from twisted does not look like a good idea to me. It would mean that creating web services around twisted will become harder, which is something twisted is really good at.

Twisted is the best "glue" framework I have ever seen (it allow us to integrate LDAP, web, XMLRPC - and other things together in a /coherent/ manner.

It allowed us to develop our internal tools not like a patch of etherogenous scripts but like something coherent, easy to maintain and improve as nearly everything we needed was already there.

To provide you some background, our web server is currently implemented using woven - so my opinion may be biased but we are planning to port our code to Nevow when/if it is integrated.
Having the code of Nevow/Woven in the twisted tree mean that people using it are sure that it is kept in sync by the automatic build test and I think it is important that it stays here.

Now should you think that the old code should be replaced, I would suggest that you leave the current web code here, for people like me using it, but create a new www section (or whatever name)

For information, the reason I decided for twisted over other technology was:
* python as development language
* The quality of the framework in general
* number of protocol already available
* ease of integration of in house tools with the "built-in" webserver

As well, it meant that I could make sure that the time investment in learning twisted will be justified by it wide usage.

The only thing we missed was a radius library so we had to code our radius server from pyrad ... 
If we get around to clean it, I will make sure we submit it.

Hope it was not too much out of topic. I sincerely think that twisted is the best thing which happened to python since the birth of Guido, so keep on the good work.

Regards,

Thomas
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040415/872426fa/attachment-0001.bin
From radix at twistedmatrix.com  Thu Apr 15 10:48:44 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu Apr 15 10:48:40 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082047035.2227.162.camel@thomas_mangin.dc.exa.net.uk>
References: <1082026063.1236.68.camel@localhost>	<1082039830.11185.44.camel@hyla>
	<1082047035.2227.162.camel@thomas_mangin.dc.exa.net.uk>
Message-ID: <407EBCEC.6030201@twistedmatrix.com>

Thomas Mangin wrote:
> A large part of what makes twisted attractive is the ease of
> implementation of services with it. Removing woven/nevow from twisted
> does not look like a good idea to me. It would mean that creating web
> services around twisted will become harder, which is something
> twisted is really good at.

Well, it's pretty much already decided to do this. But hopefully I'll be 
able to explain why this isn't a bad thing.

> Twisted is the best "glue" framework I have ever seen (it allow us to
> integrate LDAP, web, XMLRPC - and other things together in a
> /coherent/ manner.

Heh heh -- LDAP support isn't in Twisted proper (Ldaptor is a third 
party package). You still cite it as coherent with the framework! This 
is proof that your worrying about coherency isn't justified.

> It allowed us to develop our internal tools not like a patch of
> etherogenous scripts but like something coherent, easy to maintain
> and improve as nearly everything we needed was already there.

Twisted is currently very hard to maintain, for us. For *you*, the only 
change is that you'll have to 'apt-get install twisted-web' as well as 
'apt-get install twisted'. :-)

> To provide you some background, our web server is currently
> implemented using woven - so my opinion may be biased but we are
> planning to port our code to Nevow when/if it is integrated. Having
> the code of Nevow/Woven in the twisted tree mean that people using it
> are sure that it is kept in sync by the automatic build test and I
> think it is important that it stays here.

Nevow is definitely never going to be integrated with Twisted.

> Now should you think that the old code should be replaced, I would
> suggest that you leave the current web code here, for people like me
> using it, but create a new www section (or whatever name)

Yeah, we'll probably leave the existing stuff in Twisted for a while, 
with a deprecation warning to use the new packages.

> ...

Anyway, I think you're overreacting; the coherency of the quality and 
integration of Twisted projects is not going to be lessened by this 
breakup (we're breaking out a lot more than twisted-web: conch, flow, 
lore, protocols, they're all being split up).

These will still be Twisted "official" projects. They will still be 
coherent. The reason we're doing this is to make maintaining and 
releasing easier. Twisted is just too huge and has too many parts of 
differing stability to make it practical to keep it together.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040415/3bafd366/signature.bin
From thomas.mangin at exa-networks.co.uk  Thu Apr 15 11:17:14 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Thu Apr 15 11:17:09 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <407EBCEC.6030201@twistedmatrix.com>
References: <1082026063.1236.68.camel@localhost>	<1082039830.11185.44.camel@hyla>	<1082047035.2227.162.camel@thomas_mangin.dc.exa.net.uk>
	<407EBCEC.6030201@twistedmatrix.com>
Message-ID: <407EC39A.7070501@exa-networks.co.uk>

Christopher Armstrong wrote:

> Thomas Mangin wrote:
>
>> A large part of what makes twisted attractive is the ease of
>> implementation of services with it. Removing woven/nevow from twisted
>> does not look like a good idea to me. It would mean that creating web
>> services around twisted will become harder, which is something
>> twisted is really good at.
>
>
> These will still be Twisted "official" projects. They will still be 
> coherent. The reason we're doing this is to make maintaining and 
> releasing easier. Twisted is just too huge and has too many parts of 
> differing stability to make it practical to keep it together.
>
> Well, it's pretty much already decided to do this. But hopefully I'll 
> be able to explain why this isn't a bad thing.

You did thank you.

> Heh heh -- LDAP support isn't in Twisted proper (Ldaptor is a third 
> party package). You still cite it as coherent with the framework! This 
> is proof that your worrying about coherency isn't justified.

Could not have provided you with a better argument if I had been looking 
for one ;-)

> Twisted is currently very hard to maintain, for us. For *you*, the 
> only change is that you'll have to 'apt-get install twisted-web' as 
> well as 'apt-get install twisted'. :-)
> [...]
> Anyway, I think you're overreacting; the coherency of the quality and 
> integration of Twisted projects is not going to be lessened by this 
> breakup (we're breaking out a lot more than twisted-web: conch, flow, 
> lore, protocols, they're all being split up).

Sorry if I looked that way ;-) I am not.
I just did not realised what you were really wanting to do, I should 
folllow the list more closely but time is missing me.

Thomas


From jvanasco at mastersofbranding.com  Thu Apr 15 11:54:25 2004
From: jvanasco at mastersofbranding.com (Jonathan Vanasco)
Date: Thu Apr 15 11:54:33 2004
Subject: [Twisted-web] Flamebait
Message-ID: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>

I couldn't think of a better title for this question...

Does anyone have any benchmarking stats on Twisted/TwistedWeb/Nevow in 
comparison to Apache's mod_perl, mod_python or (gasp) php for general 
tasks?

You know, basic stuff like serving static pages, generating dynamic 
pages out of thin air, and generating dynamic pages off of parsed 
templates.

I haven't seen comparison figures anywhere.  I assume twisted stacks up 
impressively -- when I noticed template files being read each page 
generation, I started to think about efficiency, disk access and 
caching -- and hoped there were some numbers that could educate me.


From dreid at dreid.org  Thu Apr 15 11:56:09 2004
From: dreid at dreid.org (David Reid)
Date: Thu Apr 15 11:55:21 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082039830.11185.44.camel@hyla>
References: <1082026063.1236.68.camel@localhost>
	<1082039830.11185.44.camel@hyla>
Message-ID: <1082051769.13399.15.camel@localhost>

On Thu, 2004-04-15 at 07:37, Alex Levy wrote:
> On Thu, 2004-04-15 at 06:47, David Reid wrote:
> > Not Concerns of a split:
> > 
> > * Backwards compatibility.
> 
> Just to clarify: you don't mean changing twisted.web to break
> backwards-compatibility, but instead mean that apps written for
> twisted.web will not always work with this new module. Correct?

I do mean that the new twisted-web will NOT include woven, and things
like distrib and vhosts will work differently.  It will be written
primarily to simply the usage of Nevow but keep the two seperate enough
so that Nevow is not a dependency of twisted-web and that other style
rendering engines (I guess that is what Nevow has become, far more than
a templating engine, because it has changed how Requests act and how
children are located and how pages are renderered.)

> I don't see a major problem with splitting code, as long as the old
> twisted.web and twisted.web.woven modules remain (so that people can
> continue to use applications that've already been written).

The old modules will remain for a period with deprecation warnings, but
this shouldn't be the responsibility of twisted-web.  The people
currently interested in this split seem to have never used woven, and
never want to, so having to support it shouldn't be a responsibility.

> It's been pointed out before that twisted.web is an app server, not a
> protocol implementation, and thus there is justification for moving it
> outside of Twisted. What do the gurus think?

twisted.web includes and appserver but also httpclient, which apprently
isn't very good anyway.  The twisted-web will be focused on being a
useable and perhaps even efficient standalone webserver of static files
and that can be easily handle integration with Nevow based applications.

> > Right now I make $6.75US/hr and go to school 2 days a week, i have
> > probably as much free time as anyone else and I really really want
> > this stuff to work.
> 
> I'm graduating in a month, with no job, so I may have a hell of a lot of
> time to spend on this soon. :)

good, maybe i'll just wait for you to do this ;)

Other notes.  Part of the reason I'm pretty decided that t-web will NOT
be built on Nevow but instead written to support Nevow is that I've seen
twisted.web go from webwidgets, to domtemplate, to woven, and now to
nevow, and I have absolutely no doubt that someone is going to come up
with a newer, faster, better, stronger system in the future.

-- David Reid


From dreid at dreid.org  Thu Apr 15 12:05:42 2004
From: dreid at dreid.org (David Reid)
Date: Thu Apr 15 12:04:53 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082047035.2227.162.camel@thomas_mangin.dc.exa.net.uk>
References: <1082026063.1236.68.camel@localhost>
	<1082039830.11185.44.camel@hyla>
	<1082047035.2227.162.camel@thomas_mangin.dc.exa.net.uk>
Message-ID: <1082052342.13399.22.camel@localhost>

On Thu, 2004-04-15 at 09:37, Thomas Mangin wrote:
> > It's been pointed out before that twisted.web is an app server, not a
> > protocol implementation, and thus there is justification for moving it
> > outside of Twisted. What do the gurus think?
> 
> I will risk a modest outsider point of view - I am /not/ a twisted guru but I hope this does not reduce the value of my opinion.

I'm not a twisted guru either, but after trying to shoehorn distrib into
Nevow i've come to the conclusion that a split of all 3 technologoies
(framework, webserver and complex magical rendering engine) should
happen sooner rather than later, and everyone who currently Knows Enough
(TM) to do it is busy on other things, so I'm taking the proverbial bull
by the horns and trying to get it done.

Integration of Nevow into twisted-web is a bad idea in my opinion for
reasons I've mentioned in previous emails (see my reply to Alex Levy)
So that probably won't happen unless someone can change my mind, and
Nevow is definitely never going to be part of core twisted as radix
pointed out.


From thomas.mangin at exa-networks.co.uk  Thu Apr 15 12:06:57 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Thu Apr 15 12:06:52 2004
Subject: [Twisted-web] SOAP issue
In-Reply-To: <1082045385.2227.135.camel@thomas_mangin.dc.exa.net.uk>
References: <1082045385.2227.135.camel@thomas_mangin.dc.exa.net.uk>
Message-ID: <407ECF41.6080208@exa-networks.co.uk>

Sorry, it is supposed to read :

proxy = Proxy('http://127.0.0.1:7080')

[root@gateway root]# ./client.py
error [Failure instance: Traceback: twisted.web.error.Error, 400 Bad Request
]

No server errors ...
well, now that I showed how incompetent I am, I hope someone will take 
pity ...

Thomas

From thomas.mangin at exa-networks.co.uk  Thu Apr 15 12:19:37 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Thu Apr 15 12:19:29 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082052342.13399.22.camel@localhost>
References: <1082026063.1236.68.camel@localhost>	<1082039830.11185.44.camel@hyla>	<1082047035.2227.162.camel@thomas_mangin.dc.exa.net.uk>
	<1082052342.13399.22.camel@localhost>
Message-ID: <407ED239.8020705@exa-networks.co.uk>

David

>I'm not a twisted guru either, but after trying to shoehorn distrib into
>Nevow i've come to the conclusion that a split of all 3 technologoies
>(framework, webserver and complex magical rendering engine) should
>happen sooner rather than later [...]
>  
>
I was trying (and still trying) to say that I did believe that the web 
application part of twisted was important and should not be removed from 
the project. My "fear" were just unfounded and due to the fact that I 
only partially read the mailing list. I mis-understood the initial email.

Regards,

Thomas



From thomas.mangin at exa-networks.co.uk  Thu Apr 15 12:27:59 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Thu Apr 15 12:27:52 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082051769.13399.15.camel@localhost>
References: <1082026063.1236.68.camel@localhost>	<1082039830.11185.44.camel@hyla>
	<1082051769.13399.15.camel@localhost>
Message-ID: <407ED42F.2030801@exa-networks.co.uk>

David

>The old modules will remain for a period with deprecation warnings, but
>this shouldn't be the responsibility of twisted-web.  The people
>currently interested in this split seem to have never used woven, and
>never want to, so having to support it shouldn't be a responsibility.
>  
>
Do you already have an idea of how long you are planning to keep the 
"legacy" T-web code in ?
Do you foresee any clash between the old and new code or will someone be 
able to use both side by side. It would ease the transition.

Thomas

From foom at fuhm.net  Thu Apr 15 12:29:44 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu Apr 15 12:29:53 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082026063.1236.68.camel@localhost>
References: <1082026063.1236.68.camel@localhost>
Message-ID: <DDF1E50B-8F0A-11D8-94D4-000A95A50FB2@fuhm.net>

On Apr 15, 2004, at 6:47 AM, David Reid wrote:
> Goals of a split:
> * Use new APIs.
> 	This is as good a chance as any to get rid of all those
> DeprecationWarnings we get when starting a twisted.web server.

I'm currently working on rewriting protocols.http. The goal is to 
actually be RFC compliant, with enough builtin functionality to make 
writing a server, client, and proxy on top of it fairly easy. I don't 
plan on keeping API compatibility, although there's some chance a 
wrapper implementing the old API could be made.

> * Implement things like distrib and vhosts at a lower level.
> 	Currently distrib and vhosts need to be reimplemented or atleast
> violently shoehorned into working with Nevow.  This will likely be the
> same with any future alternatives to Nevow.  I'll get into specifics
> about distrib and vhosts later.

Agreed. I think web should *not* be serializing Request objects at all. 
Distrib is essentially just a non-caching proxy and could be 
implemented more like one. (E.g. use a custom HTTPChannel that talks 
over PB and doesn't require multiple sockets, but otherwise has just 
normal HTTP string data being sent back and forth). This would have the 
advantage of decoupling the distrib'd servers from any changes.

> * Simplify the twisted.web, don't make it do anything clever.
> 	The clever stuff should be left up to nevow and perhaps kept a 
> seperate
> module.  Also given fzZzy's history it seems very likely that 
> eventually
> he will come up with something even better than Nevow, and it would 
> just
> be a waste to have to rewrite twisted.web (again) to support it. ;)

Sure, nevow (the templating part only) can be in a separate module 
(newtwistedweb.nevow, say), but I'm not sure it's good to separate them 
completely.

What I think needs to happen:
1) finish rewriting http protocol
2) fork t.web to a new dir
3) Remove crap: woven, monitor, html, dom*, google, trp, widgets, wmvc, 
...
4) Merge nevow's appserver, request, static, dirlist, ... change back, 
and modify for the new http API.
5) ??

As I'm not the only person interested (yay!), someone else could be 
working on 2-4 while I'm getting 1 to a good enough state that "modify 
to new API" part can happen.

> * Failing.
> 	I don't want to fork the code, I want to officially split twisted.web
> from core twisted and refactor it to support the above goals.  I need 
> to
> know this is what people want to happen, and I need input to make sure
> it's done Reasonably Right (TM)

I think this is what people want to do. We *will* need to fork for a 
while, until a proper mostly-stable release happens, but it shouldn't 
need to be forever. Deprecating twisted.web before a replacement has 
happened isn't really possible.

James


From dreid at dreid.org  Thu Apr 15 12:57:13 2004
From: dreid at dreid.org (David Reid)
Date: Thu Apr 15 12:56:26 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <DDF1E50B-8F0A-11D8-94D4-000A95A50FB2@fuhm.net>
References: <1082026063.1236.68.camel@localhost>
	<DDF1E50B-8F0A-11D8-94D4-000A95A50FB2@fuhm.net>
Message-ID: <1082055433.15296.19.camel@localhost>

On Thu, 2004-04-15 at 11:29, James Y Knight wrote:
> On Apr 15, 2004, at 6:47 AM, David Reid wrote:
> > Goals of a split:
> > * Use new APIs.
> > 	This is as good a chance as any to get rid of all those
> > DeprecationWarnings we get when starting a twisted.web server.
> 
> I'm currently working on rewriting protocols.http. The goal is to 
> actually be RFC compliant, with enough builtin functionality to make 
> writing a server, client, and proxy on top of it fairly easy. I don't 
> plan on keeping API compatibility, although there's some chance a 
> wrapper implementing the old API could be made.
> 
> > * Implement things like distrib and vhosts at a lower level.
> > 	Currently distrib and vhosts need to be reimplemented or atleast
> > violently shoehorned into working with Nevow.  This will likely be the
> > same with any future alternatives to Nevow.  I'll get into specifics
> > about distrib and vhosts later.
> 
> Agreed. I think web should *not* be serializing Request objects at all. 
> Distrib is essentially just a non-caching proxy and could be 
> implemented more like one. (E.g. use a custom HTTPChannel that talks 
> over PB and doesn't require multiple sockets, but otherwise has just 
> normal HTTP string data being sent back and forth). This would have the 
> advantage of decoupling the distrib'd servers from any changes.
> 
> > * Simplify the twisted.web, don't make it do anything clever.
> > 	The clever stuff should be left up to nevow and perhaps kept a 
> > seperate
> > module.  Also given fzZzy's history it seems very likely that 
> > eventually
> > he will come up with something even better than Nevow, and it would 
> > just
> > be a waste to have to rewrite twisted.web (again) to support it. ;)
> 
> Sure, nevow (the templating part only) can be in a separate module 
> (newtwistedweb.nevow, say), but I'm not sure it's good to separate them 
> completely.

Yes that was my thinking also, because supporting modular rendering
engines is useless unless you provide a default that makes the system
generally useable.

> What I think needs to happen:
> 1) finish rewriting http protocol
> 2) fork t.web to a new dir
> 3) Remove crap: woven, monitor, html, dom*, google, trp, widgets, wmvc, 
> ...
> 4) Merge nevow's appserver, request, static, dirlist, ... change back, 
> and modify for the new http API.
> 5) ??
> 
> As I'm not the only person interested (yay!), someone else could be 
> working on 2-4 while I'm getting 1 to a good enough state that "modify 
> to new API" part can happen.

I guess that's me!

I assume protocols.http's refactored state will remain in the core
twisted?  It would seem silly not to, and it also seems silly to do
major refactorying without having someone prepared to port twisted-web
to the new api.  So I'm volunteering, but I might need a lot of help
along the way.

> > * Failing.
> > 	I don't want to fork the code, I want to officially split twisted.web
> > from core twisted and refactor it to support the above goals.  I need 
> > to
> > know this is what people want to happen, and I need input to make sure
> > it's done Reasonably Right (TM)
> 
> I think this is what people want to do. We *will* need to fork for a 
> while, until a proper mostly-stable release happens, but it shouldn't 
> need to be forever. Deprecating twisted.web before a replacement has 
> happened isn't really possible.

Of course not, I didn't intend to imply that it was, a code fork in the
technical sense is necessary, I did not want to fork the project in a
political sense.

--David


From dreid at dreid.org  Thu Apr 15 13:07:31 2004
From: dreid at dreid.org (David Reid)
Date: Thu Apr 15 13:06:41 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <407ED42F.2030801@exa-networks.co.uk>
References: <1082026063.1236.68.camel@localhost>
	<1082039830.11185.44.camel@hyla> <1082051769.13399.15.camel@localhost>
	<407ED42F.2030801@exa-networks.co.uk>
Message-ID: <1082056051.15296.32.camel@localhost>

On Thu, 2004-04-15 at 11:27, Thomas Mangin wrote:
> David
> 
> >The old modules will remain for a period with deprecation warnings, but
> >this shouldn't be the responsibility of twisted-web.  The people
> >currently interested in this split seem to have never used woven, and
> >never want to, so having to support it shouldn't be a responsibility.
> >  
> >
> Do you already have an idea of how long you are planning to keep the 
> "legacy" T-web code in ?
> Do you foresee any clash between the old and new code or will someone be 
> able to use both side by side. It would ease the transition.

The "legacy" twisted.web is the responsibility of core twisted
developers, it will probably be kept around until the new twisted-web
system is alteast as useable as the current one, but probably not after
the core twisted team modularizes the rest of twisted.  And almost
definitely not after foom finishes refactoring protocols.http with a new
api.


From michal at pasternak.w.lub.pl  Thu Apr 15 14:51:39 2004
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Thu Apr 15 14:51:22 2004
Subject: [Twisted-web] Flamebait
In-Reply-To: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>
References: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>
Message-ID: <20040415205139.GA30715@pasternak.w.lub.pl>

Jonathan Vanasco [Thu, Apr 15, 2004 at 01:54:25PM -0400]:
> I couldn't think of a better title for this question...

That's really sad. How about "Twisted Web performance benchmarks" ? Perhaps
you're spending too much time reading slashdot...

> Does anyone have any benchmarking stats on Twisted/TwistedWeb/Nevow in

Twisted, Twisted Web and Nevow are 3 totally different products. What do you
want to benchmark and compare?

> comparison to Apache's mod_perl, mod_python or (gasp) php for general 
> tasks?

What is a "general" task?

> You know, basic stuff like serving static pages,

Use 2 machines and ab (apachebench) utility from apache package. I am pretty
sure, that in some conditions you could come out with suprising results.

Check out http://www.eecs.harvard.edu/~mdw/proj/seda/ site, for example - as
they claim to be event-driven architecture in Java, which outperforms
Apache, I suppose they did some benchmarks.

> generating dynamic 
> pages out of thin air, and generating dynamic pages off of parsed 
> templates.

I don't think, that topic like 'generating dynamic pages' is compareable
between languages until you come up with a strict definition of that page.

-- 
m

From mary-twisted at puzzling.org  Thu Apr 15 15:13:18 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu Apr 15 15:13:22 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082056051.15296.32.camel@localhost>
References: <1082026063.1236.68.camel@localhost>
	<1082039830.11185.44.camel@hyla>
	<1082051769.13399.15.camel@localhost>
	<407ED42F.2030801@exa-networks.co.uk>
	<1082056051.15296.32.camel@localhost>
Message-ID: <20040415211318.GB29157@titus.home.puzzling.org>

On Thu, Apr 15, 2004, David Reid wrote:
> The "legacy" twisted.web is the responsibility of core twisted
> developers, it will probably be kept around until the new twisted-web
> system is alteast as useable as the current one, but probably not
> after the core twisted team modularizes the rest of twisted.  And
> almost definitely not after foom finishes refactoring protocols.http
> with a new api.

It would be good to define this with tests if you can (ie "when all
these tests pass, core-Twisted-web will be no more").

-Mary

From stephen at thorne.id.au  Thu Apr 15 17:31:29 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu Apr 15 17:35:09 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082055433.15296.19.camel@localhost>
References: <1082026063.1236.68.camel@localhost>
	<DDF1E50B-8F0A-11D8-94D4-000A95A50FB2@fuhm.net>
	<1082055433.15296.19.camel@localhost>
Message-ID: <20040415233129.GA23353@thorne.id.au>

On Thu, Apr 15, 2004 at 11:57:13AM -0700, David Reid wrote:
> > Sure, nevow (the templating part only) can be in a separate module
> > (newtwistedweb.nevow, say), but I'm not sure it's good to separate
> > them completely.
> 
> Yes that was my thinking also, because supporting modular rendering
> engines is useless unless you provide a default that makes the system
> generally useable.

My thinking is this.

1) Generalise t.web so we have a simple API that we can plug an arbitary
rendering engine onto.

2) Refactor all rendering engines so they confirm to a single API, so
that one rendering engine can invoke another rendering engine without
knowing anything about it.

3) Profit.

Stephen.


From radix at twistedmatrix.com  Thu Apr 15 17:50:51 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu Apr 15 17:50:38 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <20040415233129.GA23353@thorne.id.au>
References: <1082026063.1236.68.camel@localhost>	<DDF1E50B-8F0A-11D8-94D4-000A95A50FB2@fuhm.net>	<1082055433.15296.19.camel@localhost>
	<20040415233129.GA23353@thorne.id.au>
Message-ID: <407F1FDB.6060409@twistedmatrix.com>

Stephen Thorne wrote:
> On Thu, Apr 15, 2004 at 11:57:13AM -0700, David Reid wrote:
> 
>>>Sure, nevow (the templating part only) can be in a separate module
>>>(newtwistedweb.nevow, say), but I'm not sure it's good to separate
>>>them completely.
>>
>>Yes that was my thinking also, because supporting modular rendering
>>engines is useless unless you provide a default that makes the system
>>generally useable.
> 
> 
> My thinking is this.
> 
> 1) Generalise t.web so we have a simple API that we can plug an arbitary
> rendering engine onto.
> 
> 2) Refactor all rendering engines so they confirm to a single API, so
> that one rendering engine can invoke another rendering engine without
> knowing anything about it.
> 
> 3) Profit.

That's exactly what the twisted.web resource API does (in both 
twisted.web and nevow's fork of it).

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040415/347ca17d/signature.bin
From stephen at thorne.id.au  Thu Apr 15 17:51:06 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu Apr 15 17:55:04 2004
Subject: [Twisted-web] Flamebait
In-Reply-To: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>
References: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>
Message-ID: <20040415235106.GB23353@thorne.id.au>

On Thu, Apr 15, 2004 at 01:54:25PM -0400, Jonathan Vanasco wrote:
> I couldn't think of a better title for this question...
> 
> Does anyone have any benchmarking stats on Twisted/TwistedWeb/Nevow in 
> comparison to Apache's mod_perl, mod_python or (gasp) php for general 
> tasks?
> 
> You know, basic stuff like serving static pages, generating dynamic 
> pages out of thin air, and generating dynamic pages off of parsed 
> templates.
> 
> I haven't seen comparison figures anywhere.  I assume twisted stacks up 
> impressively -- when I noticed template files being read each page 
> generation, I started to think about efficiency, disk access and 
> caching -- and hoped there were some numbers that could educate me.

I'm going to give you straight answers, because I really don't believe
in beating around the bush. I could give you curvy twisty statements
that made you feel better about using twisted instead of apache while
avoiding all figures, or I could lie to you with statistics by picking
only the ones that are favourable.

In short, twisted is slower than apache. This is a truth that you (and
we) should acknowledge. Apache is a very mature web server that has
stood the test of time. Its not the fastest and its not the best, but
its pretty darn good.

mod_php and mod_perl are blindingly fast. I can run simple mod_php
scripts faster than i can serve static files with twisted.

Twisted AND apache are still faster than the average connection. Serving
static files on a modest 800mhz machine gives me apache being twice as
fast as twisted, but twisted was able to pump through 12meg/second. If
you have a connection that exceeds 12meg/second transfers upstream, can
you please contact me regarding getting an account.

Serving woven was incredibly slow, so much so that with -n 1000 -c 100
in ab (apachebench) I actually got a timeout. (I was serving a
DirectoryListing).

So, in face of all this? Should we use twisted?

DEFINATELY. Twisted seriously cuts down on required development time for
achieving results with certain types of applications, especially
applications that trancend the web model. Anything stateful, anything
that wants to integrate with other protocols, anything that has long
running processing (defer and pickup the result several page views
later, YES PLEASE!).

Also, a while back i did develop a caching mechanism for woven pages
that allowed me to increase pageload speed by about 10fold. I think I've
still got the code laying around somewhere, it was rather simple and
very effective - based on the existing concept of woven models notifying
objects of when they change you could invalidate the cache and
regenerate on the next pageload.

Regards,
Stephen Thorne.

From stephen at thorne.id.au  Thu Apr 15 17:56:09 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu Apr 15 17:59:43 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <407F1FDB.6060409@twistedmatrix.com>
References: <1082026063.1236.68.camel@localhost>
	<DDF1E50B-8F0A-11D8-94D4-000A95A50FB2@fuhm.net>
	<1082055433.15296.19.camel@localhost>
	<20040415233129.GA23353@thorne.id.au>
	<407F1FDB.6060409@twistedmatrix.com>
Message-ID: <20040415235609.GC23353@thorne.id.au>

On Thu, Apr 15, 2004 at 07:50:51PM -0400, Christopher Armstrong wrote:
> >My thinking is this.
> >
> >1) Generalise t.web so we have a simple API that we can plug an arbitary
> >rendering engine onto.
> >
> >2) Refactor all rendering engines so they confirm to a single API, so
> >that one rendering engine can invoke another rendering engine without
> >knowing anything about it.
> >
> >3) Profit.
> 
> That's exactly what the twisted.web resource API does (in both 
> twisted.web and nevow's fork of it).

We need to fix it up before goal 3 can be realised, because of the often
noted problems of Request objects not being of the same class the same
accross systems. The request is as important as the resource. This is
the major component that needs refactoring.

Regards,
Stephen Thorne.


From radix at twistedmatrix.com  Thu Apr 15 18:06:27 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu Apr 15 18:06:13 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <20040415235609.GC23353@thorne.id.au>
References: <1082026063.1236.68.camel@localhost>	<DDF1E50B-8F0A-11D8-94D4-000A95A50FB2@fuhm.net>	<1082055433.15296.19.camel@localhost>	<20040415233129.GA23353@thorne.id.au>	<407F1FDB.6060409@twistedmatrix.com>
	<20040415235609.GC23353@thorne.id.au>
Message-ID: <407F2383.803@twistedmatrix.com>

Stephen Thorne wrote:
> On Thu, Apr 15, 2004 at 07:50:51PM -0400, Christopher Armstrong wrote:
> 
>>>My thinking is this.
>>>
>>>1) Generalise t.web so we have a simple API that we can plug an arbitary
>>>rendering engine onto.
>>>
>>>2) Refactor all rendering engines so they confirm to a single API, so
>>>that one rendering engine can invoke another rendering engine without
>>>knowing anything about it.
>>>
>>>3) Profit.
>>
>>That's exactly what the twisted.web resource API does (in both 
>>twisted.web and nevow's fork of it).
> 
> 
> We need to fix it up before goal 3 can be realised, because of the often
> noted problems of Request objects not being of the same class the same
> accross systems. The request is as important as the resource. This is
> the major component that needs refactoring.

+10 on compatibility adapters for resource request.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040415/2bed215c/signature.bin
From jvanasco at mastersofbranding.com  Thu Apr 15 23:05:06 2004
From: jvanasco at mastersofbranding.com (jonathan vanasco)
Date: Thu Apr 15 23:04:52 2004
Subject: [Twisted-web] Flamebait
In-Reply-To: <20040415235106.GB23353@thorne.id.au>
References: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>
	<20040415235106.GB23353@thorne.id.au>
Message-ID: <A066756E-8F63-11D8-AE85-000A95A6EFE6@mastersofbranding.com>

Thanks for the input!

I've been working on this one project in my spare time for 3 years now 
-- an online concerts database, cross-referencing cities artists genres 
venues, everything you could imagine, and sending weekly emails based 
on your interests.

I got it  up and running, pretty quickly, in php/mysql 3 years ago -- 
except it was ungodly slow.  Part because of poor design on my fault, 
part because of  the  tools I chose.

Two years  ago, I recoded it into procedural perl and made a lot of 
headway in optimizing it.

One year ago, I recoded it into object oriented perl under mod_perl, 
and had even bigger gains in speed and use.

About the same time though, I started using Python a lot more.  Now, I 
rarely use  anything else.  So I'm trying to code it again, in twisted 
and postgres, for a few reasons:
   1 - i could touch perl a whole lot less, and deal with more 
readable/editable code that i write way faster
   2 - i didn't like the  memory usage of what I had under mod_perl 
(likely  because of my errors, but twisted would be more strict and 
make me keep in line) -- having a single daemon that handles all the 
code just seems smarter and more efficient.

I'd be interested in your approach to caching.  While the bulk of what 
I see this project going is dynamic, certain elements and templates are 
static -- and the constant reading off of disk seems excessive.



On Apr 15, 2004, at 7:51 PM, Stephen Thorne wrote:
>
> I'm going to give you straight answers, because I really don't believe
> in beating around the bush. I could give you curvy twisty statements
> that made you feel better about using twisted instead of apache while
> avoiding all figures, or I could lie to you with statistics by picking
> only the ones that are favourable.
>
> In short, twisted is slower than apache. This is a truth that you (and
> we) should acknowledge. Apache is a very mature web server that has
> stood the test of time. Its not the fastest and its not the best, but
> its pretty darn good.
>
> mod_php and mod_perl are blindingly fast. I can run simple mod_php
> scripts faster than i can serve static files with twisted.
>
> Twisted AND apache are still faster than the average connection. 
> Serving
> static files on a modest 800mhz machine gives me apache being twice as
> fast as twisted, but twisted was able to pump through 12meg/second. If
> you have a connection that exceeds 12meg/second transfers upstream, can
> you please contact me regarding getting an account.
>
> Serving woven was incredibly slow, so much so that with -n 1000 -c 100
> in ab (apachebench) I actually got a timeout. (I was serving a
> DirectoryListing).
>
> So, in face of all this? Should we use twisted?
>
> DEFINATELY. Twisted seriously cuts down on required development time 
> for
> achieving results with certain types of applications, especially
> applications that trancend the web model. Anything stateful, anything
> that wants to integrate with other protocols, anything that has long
> running processing (defer and pickup the result several page views
> later, YES PLEASE!).
>
> Also, a while back i did develop a caching mechanism for woven pages
> that allowed me to increase pageload speed by about 10fold. I think 
> I've
> still got the code laying around somewhere, it was rather simple and
> very effective - based on the existing concept of woven models 
> notifying
> objects of when they change you could invalidate the cache and
> regenerate on the next pageload.
>
> Regards,
> Stephen Thorne.
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From andrew-twisted at puzzling.org  Thu Apr 15 23:22:34 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu Apr 15 23:22:38 2004
Subject: [Twisted-web] Flamebait
In-Reply-To: <A066756E-8F63-11D8-AE85-000A95A6EFE6@mastersofbranding.com>
References: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>
	<20040415235106.GB23353@thorne.id.au>
	<A066756E-8F63-11D8-AE85-000A95A6EFE6@mastersofbranding.com>
Message-ID: <20040416052234.GB24826@frobozz>

On Fri, Apr 16, 2004 at 01:05:06AM -0400, jonathan vanasco wrote:

> I'd be interested in your approach to caching.  While the bulk of what 
> I see this project going is dynamic, certain elements and templates are 
> static -- and the constant reading off of disk seems excessive.

Note that reading off the disk itself is often not the problem -- given
enough RAM, the OS will automatically have files cached most of the time.

More likely to be a significant cost is repeated parsing of those
templates... caching the parsed objects in python can help there, or even
storing pickles of stored templates and reading them in with cPickle might
help in some circumstances (or might be worse...).

In short, if your app isn't fast enough, profile to find the bottleneck.
Until then, speculation is mostly futile, and probably wrong.  The advantage
of python is you can have a working app much much sooner than with e.g. C,
which gives you much more time to properly profile for bottlenecks and think
of ways to overcome them.

-Andrew.


From stephen at thorne.id.au  Thu Apr 15 23:37:30 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu Apr 15 23:41:02 2004
Subject: [Twisted-web] Flamebait
In-Reply-To: <A066756E-8F63-11D8-AE85-000A95A6EFE6@mastersofbranding.com>
References: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>
	<20040415235106.GB23353@thorne.id.au>
	<A066756E-8F63-11D8-AE85-000A95A6EFE6@mastersofbranding.com>
Message-ID: <20040416053730.GA23390@thorne.id.au>

On Fri, Apr 16, 2004 at 01:05:06AM -0400, jonathan vanasco wrote:
> I'd be interested in your approach to caching.  While the bulk of what 
> I see this project going is dynamic, certain elements and templates are 
> static -- and the constant reading off of disk seems excessive.

http://thorne.id.au/users/stephen/software.html

Trash-0.3.0 uses CachePage, have a look at how it works.

I don't think the code runs at the moment, it was written a long time
ago and things have changed.

Stephen.

From stephen at thorne.id.au  Thu Apr 15 23:39:31 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu Apr 15 23:43:22 2004
Subject: [Twisted-web] Flamebait
In-Reply-To: <20040416052234.GB24826@frobozz>
References: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>
	<20040415235106.GB23353@thorne.id.au>
	<A066756E-8F63-11D8-AE85-000A95A6EFE6@mastersofbranding.com>
	<20040416052234.GB24826@frobozz>
Message-ID: <20040416053931.GA23454@thorne.id.au>

On Fri, Apr 16, 2004 at 03:22:34PM +1000, Andrew Bennetts wrote:
> In short, if your app isn't fast enough, profile to find the
> bottleneck.  Until then, speculation is mostly futile, and probably
> wrong.  The advantage of python is you can have a working app much
> much sooner than with e.g. C, which gives you much more time to
> properly profile for bottlenecks and think of ways to overcome them.

Just as a note - I did and I found and I fixed. I always advocate
finding performance issues before fixing perforamnce issues, and I hit
people on the head when they get it the wrong way around.

Regards
Stephen Thorne.

From thomas.mangin at exa-networks.co.uk  Fri Apr 16 03:52:29 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Fri Apr 16 03:52:35 2004
Subject: [Twisted-web] Does twisted.web.soap simply works ?
In-Reply-To: <407ECF41.6080208@exa-networks.co.uk>
References: <1082045385.2227.135.camel@thomas_mangin.dc.exa.net.uk>
	<407ECF41.6080208@exa-networks.co.uk>
Message-ID: <1082109148.2203.10.camel@thomas_mangin.dc.exa.net.uk>

Hello.

A straight yes/no will more than satisfy me. Does twisted.web.soap currently work ?
As I found a lot of page like :

http://mail.python.org/pipermail/python-list/2003-June/170682.html

Thomas


From jvanasco at mastersofbranding.com  Fri Apr 16 07:34:27 2004
From: jvanasco at mastersofbranding.com (jonathan vanasco)
Date: Fri Apr 16 07:34:14 2004
Subject: [Twisted-web] Flamebait
In-Reply-To: <20040416053730.GA23390@thorne.id.au>
References: <EEC6272F-8F05-11D8-870D-000393863D5E@mastersofbranding.com>
	<20040415235106.GB23353@thorne.id.au>
	<A066756E-8F63-11D8-AE85-000A95A6EFE6@mastersofbranding.com>
	<20040416053730.GA23390@thorne.id.au>
Message-ID: <C831C6C6-8FAA-11D8-AE85-000A95A6EFE6@mastersofbranding.com>


yeah,  i tried getting it to run a while back.  it doesn't like twisted 
right now.

On Apr 16, 2004, at 1:37 AM, Stephen Thorne wrote:

> On Fri, Apr 16, 2004 at 01:05:06AM -0400, jonathan vanasco wrote:
>> I'd be interested in your approach to caching.  While the bulk of what
>> I see this project going is dynamic, certain elements and templates 
>> are
>> static -- and the constant reading off of disk seems excessive.
>
> http://thorne.id.au/users/stephen/software.html
>
> Trash-0.3.0 uses CachePage, have a look at how it works.
>
> I don't think the code runs at the moment, it was written a long time
> ago and things have changed.
>
> Stephen.
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From richard at livsey.org  Fri Apr 16 17:38:18 2004
From: richard at livsey.org (Richard Livsey)
Date: Fri Apr 16 17:38:24 2004
Subject: [Twisted-web] Apache and Twisted
Message-ID: <40806E6A.9000807@livsey.org>

Hope this hasn't been discussed recently - I googled and searched the 
archives but I'm tired so I will blame that...

Is there any documentation/advice on how to run Twisted apps 
behind/alongside Apache?

My situation is as follows:

All our servers run Apache on port 80, I have root access etc so that's 
no problem.

A new project I'm looking at starting soon will hopefully be based 
around Twisted/Nevow and I want to run it on our servers.

How do I configure Apache so that it passes everything (or certain 
things, could have apache still server static html/images/js/css etc..) 
onto the twisted app which I assume will be listening on a port other 
than 80.

Any other advice on ways to set this up before I start messing about and 
breaking our dev box tomorrow?

:o)

Thanks in advance.

-- 
R.Livsey
Incutio Web Developer
www.livsey.org
www.incutio.com

From mivok at mivok.net  Fri Apr 16 17:52:41 2004
From: mivok at mivok.net (Mark Harrison)
Date: Fri Apr 16 17:52:24 2004
Subject: [Twisted-web] Apache and Twisted
In-Reply-To: <40806E6A.9000807@livsey.org>
References: <40806E6A.9000807@livsey.org>
Message-ID: <2652478C-9001-11D8-9603-000A95C56CA2@mivok.net>

> Is there any documentation/advice on how to run Twisted apps 
> behind/alongside Apache?

The project I'm currently working on has the setup you are looking for. 
The solution is to run the twisted app as normal and use mod_proxy to 
get apache to forward any requests to it. The apache VirtualHost 
configuration directive I'm using at the moment is as follows:

<VirtualHost *>
	ServerAdmin you@wherever.com
	ServerName virtualhostname.domain.com

	ProxyVia On
	ProxyPass / http://127.0.0.1:8765/
	ProxyPassReverse / http://127.0.0.1:8765/
</VirtualHost>

This is assuming the twisted app is running on port 8765. I also have a 
few other items in the configuration file related to preventing caching 
of pages, but the above should get you able to access the twisted app 
via a virtual host on port 80.

Regards,

Mark

   -=<[ Mark Harrison ]-[ Email: mark@mivok.net ]-[ Jabber: 
mivok@mivok.net ]>=-
                       -=<[ Web: http://www.mivok.net/ ]>=-


From mary-twisted at puzzling.org  Fri Apr 16 19:50:45 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri Apr 16 19:50:55 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082026063.1236.68.camel@localhost>
References: <1082026063.1236.68.camel@localhost>
Message-ID: <20040417015045.GL29157@titus.home.puzzling.org>

On Thu, Apr 15, 2004, David Reid wrote:
> 	I don't want to fork the code, I want to officially split twisted.web
> from core twisted and refactor it to support the above goals.  I need to
> know this is what people want to happen, and I need input to make sure
> it's done Reasonably Right (TM)

I take it this is a split along the lines of
http://twistedmatrix.com/pipermail/twisted-python/2004-March/007345.html
? ie twisted.web will still be a "Twisted product" but will have its own
release cycles and whatnot?

Can someone fill me in on whether this assumption is right? It has
implications for both the content of the HOWTOs and their release cycle.

-Mary

From thomas.mangin at exa-networks.co.uk  Sat Apr 17 01:39:07 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Sat Apr 17 01:39:00 2004
Subject: [Twisted-web] Apache and Twisted
In-Reply-To: <40806E6A.9000807@livsey.org>
References: <40806E6A.9000807@livsey.org>
Message-ID: <4080DF1B.6050102@exa-networks.co.uk>

<VirtualHost *:80>
        # This virtual host is simply a proxy of the twisted-matrix
        # woven based site running on local port 8080
        ServerName www.yoursite.com

        RewriteEngine On
        RewriteRule   ^(.+)$    http://127.0.0.1:8080$1 [P]
        ProxyVia Block

        # Maintain logging as twistd only sees local proxy requests
        CustomLog logs/site-access.log combined
        ErrorLog logs/site-error.log
</VirtualHost>

From dreid at dreid.org  Sat Apr 17 05:06:50 2004
From: dreid at dreid.org (David Reid)
Date: Sat Apr 17 05:05:43 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <20040417015045.GL29157@titus.home.puzzling.org>
References: <1082026063.1236.68.camel@localhost>
	<20040417015045.GL29157@titus.home.puzzling.org>
Message-ID: <1082200010.17377.2.camel@localhost>

Yes twisted-web ('-' no '.', probably tweb for module names, unless
someone comes up with a better name) will still be a Twisted product,
will have it's own release cycle, and own documentation.

-- David

On Fri, 2004-04-16 at 18:50, Mary Gardiner wrote:
> On Thu, Apr 15, 2004, David Reid wrote:
> > 	I don't want to fork the code, I want to officially split twisted.web
> > from core twisted and refactor it to support the above goals.  I need to
> > know this is what people want to happen, and I need input to make sure
> > it's done Reasonably Right (TM)
> 
> I take it this is a split along the lines of
> http://twistedmatrix.com/pipermail/twisted-python/2004-March/007345.html
> ? ie twisted.web will still be a "Twisted product" but will have its own
> release cycles and whatnot?
> 
> Can someone fill me in on whether this assumption is right? It has
> implications for both the content of the HOWTOs and their release cycle.
> 
> -Mary
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From stephen at thorne.id.au  Sat Apr 17 05:16:02 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Sat Apr 17 05:19:54 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082200010.17377.2.camel@localhost>
References: <1082026063.1236.68.camel@localhost>
	<20040417015045.GL29157@titus.home.puzzling.org>
	<1082200010.17377.2.camel@localhost>
Message-ID: <20040417111602.GA25155@thorne.id.au>

On Sat, Apr 17, 2004 at 04:06:50AM -0700, David Reid wrote:
> Yes twisted-web ('-' no '.', probably tweb for module names, unless
> someone comes up with a better name) will still be a Twisted product,
> will have it's own release cycle, and own documentation.

It'd be really nice to have a good name for twisted-web++ 

Consider this a call for suggestions. Please present any names you think
may be appropriate. If we don't find one, we'll just have to use 'tweb'
or 'web' or something.

it'd be nice to follow the wonderful free-association schema that
twisted has used in the past, jelly/banana, names, words, pair, trial,
enterprise, cred, conch.

A suggestion I gave the other day was 'silk', but there's already a
python-intarweb project that uses 'silk' in its naming, and its on
sourceforge (with one developer and no files! but also registered in the
last 60 days).

Regards,
Stephen Thorne


From mary-twisted at puzzling.org  Sat Apr 17 05:36:05 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat Apr 17 05:36:12 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <1082200010.17377.2.camel@localhost>
References: <1082026063.1236.68.camel@localhost>
	<20040417015045.GL29157@titus.home.puzzling.org>
	<1082200010.17377.2.camel@localhost>
Message-ID: <20040417113605.GN29157@titus.home.puzzling.org>

On Sat, Apr 17, 2004, David Reid wrote:
> Yes twisted-web ('-' no '.', probably tweb for module names, unless
> someone comes up with a better name) will still be a Twisted product,
> will have it's own release cycle, and own documentation.

My understanding from this mail
http://twistedmatrix.com/pipermail/twisted-python/2004-March/007355.html
was that the HOWTOs were going to remain a single project. I take it
this is no longer the case or that twisted-web/whatever is going to have
its own documentation and be removed from the HOWTO?

-Mary

From mary-twisted at puzzling.org  Sat Apr 17 05:49:19 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat Apr 17 05:49:29 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <20040417113605.GN29157@titus.home.puzzling.org>
References: <1082026063.1236.68.camel@localhost>
	<20040417015045.GL29157@titus.home.puzzling.org>
	<1082200010.17377.2.camel@localhost>
	<20040417113605.GN29157@titus.home.puzzling.org>
Message-ID: <20040417114919.GO29157@titus.home.puzzling.org>

On Sat, Apr 17, 2004, Mary Gardiner wrote:
> I take it this is no longer the case or that twisted-web/whatever is
> going to have its own documentation and be removed from the HOWTO?

Hmph, I feel like I'm negiotiating in bad faith, so I'll explain why I'm
interested in the status of twisted-web docs.

At present, docs bugs tend to be assigned to me, and I have editorial
control over the HOWTOs, in so far as anyone does. I'd be interesting in
keeping twisted-web/whatever documentation as part of the Twisted HOWTO
project, so my personal inclination is to argue against a doc split. Let
me know what the pros are though.

It may be, as pointed out to me on IRC, that this is sufficiently early
days that I'm wondering about things that don't really have answers yet.
Maybe people will take their own docs and write them. Maybe not. I'll
keep an eye out for answers when they appear :)

-Mary

From mary-twisted at puzzling.org  Sat Apr 17 06:35:42 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat Apr 17 06:35:59 2004
Subject: [Twisted-web] On splitting Twisted into subprojects
Message-ID: <20040417123542.GP29157@titus.home.puzzling.org>

    Note: Cross-posted to twisted-web and twisted-python. Decide between
    them for your follow-ups please :)

This is intended to spark a little more discussion on splitting Twisted
into subprojects, as discussed on Aussie-time on IRC (Jerub, jml, spiv
and myself).

It seems like the twisted-web project are planning to split off fairly
soon: see
http://twistedmatrix.com/pipermail/twisted-web/2004-April/000312.html

It's pretty likely that this split will go ahead without any kind of
imposed-from-above decisions about where the website will go, what the
release cycle will look like, where the docs will move to, what the
status of shared docs will be (I tend to focus on docs...)

The nightmare scenario for splitting twisted into subprojects is that
every subproject develops its own release code, release procedures,
testing framework, website, documentation style, community, policies...
etc etc. And shortly after that we all spiral into the sun or something.

There appeared to us to be three possible ways of avoiding this:

 1. Luck

 2. Release code, release procedures, testing framework, website,
 documentation style, community, policies... imposed from above

 3. Twisted Web (or whatever other project splits first) acting as a
 "model split": evolving release mechanisms, policy etc etc that are
 fundamentally sane and wonderful so that noone would think of doing
 things any other way.

Since 3 looks like being the most achievable, this is basically an
appeal to the twisted-web folk to keep in mind that they should, where
possible, try and make twisted-web the Model of a Modern Twisted
Subproject. And make it as easy as possible for other subprojects to
copy whatever it is that they're going to do.

I personally would like to offer my help in documenting subproject
procedures as they evolve, and storing that documentation in some kind
of prominent place.

-Mary

From richard at livsey.org  Sat Apr 17 11:49:20 2004
From: richard at livsey.org (Richard Livsey)
Date: Sat Apr 17 11:49:23 2004
Subject: [Twisted-web] Using Twisted.web - should I wait?
Message-ID: <40816E20.4040904@livsey.org>

As mentioned in a previous thread, I'm looking at using twisted.web in a 
project.

However, all the talk at the moment of a twsited.web rewrite and the 
splitting up of twisted into seperate projects makes me think I should 
hold off for a bit.

Basically the question is, should I bother starting the project now if 
in a few days/weeks/months time the whole framework is going to change 
and I end up having to refactor half of the project to fit in?

I'm using twisted a fair bit in another project I'm working on 
(multi-group chat system, like live-person) but am hesitant on starting 
a new one based around .web/nevow etc..

Any advice?

Thanks.

-- 
R.Livsey
Incutio Web Developer
www.livsey.org
www.incutio.com

From dreid at dreid.org  Sun Apr 18 02:41:18 2004
From: dreid at dreid.org (David Reid)
Date: Sun Apr 18 02:40:09 2004
Subject: [Twisted-web] Splitting twisted-web from core twisted.
In-Reply-To: <20040417114919.GO29157@titus.home.puzzling.org>
References: <1082026063.1236.68.camel@localhost>
	<20040417015045.GL29157@titus.home.puzzling.org>
	<1082200010.17377.2.camel@localhost>
	<20040417113605.GN29157@titus.home.puzzling.org>
	<20040417114919.GO29157@titus.home.puzzling.org>
Message-ID: <1082277678.887.6.camel@localhost>

In my previous email I meant they would (probably) be under the
TwistedWeb tree and would probably be released as such, any future of a
HOWTO section (perhaps these should be replaced by actual How-To do x y
and z type docs) or a twisted-docs meta package I'm clueless about.  But
I feel it'd be best for each Twisted Products documentation to be part
of said Twisted Product's tree if for no other reason than so the
developers of said Twisted Product can atleast attempt to keep the Docs
in sync with any api changes or cool new features.

I'm definitely for giving you full editorial control over any TwistedWeb
docs, I sure don't want to do it. :)

--David

On Sat, 2004-04-17 at 04:49, Mary Gardiner wrote:
> On Sat, Apr 17, 2004, Mary Gardiner wrote:
> > I take it this is no longer the case or that twisted-web/whatever is
> > going to have its own documentation and be removed from the HOWTO?
> 
> Hmph, I feel like I'm negiotiating in bad faith, so I'll explain why I'm
> interested in the status of twisted-web docs.
> 
> At present, docs bugs tend to be assigned to me, and I have editorial
> control over the HOWTOs, in so far as anyone does. I'd be interesting in
> keeping twisted-web/whatever documentation as part of the Twisted HOWTO
> project, so my personal inclination is to argue against a doc split. Let
> me know what the pros are though.
> 
> It may be, as pointed out to me on IRC, that this is sufficiently early
> days that I'm wondering about things that don't really have answers yet.
> Maybe people will take their own docs and write them. Maybe not. I'll
> keep an eye out for answers when they appear :)
> 
> -Mary
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From thomas.mangin at exa-networks.co.uk  Mon Apr 19 03:30:14 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Mon Apr 19 03:30:22 2004
Subject: [Twisted-web] Does twisted.web.soap simply works ?
In-Reply-To: <1082109148.2203.10.camel@thomas_mangin.dc.exa.net.uk>
References: <1082045385.2227.135.camel@thomas_mangin.dc.exa.net.uk>
	<407ECF41.6080208@exa-networks.co.uk>
	<1082109148.2203.10.camel@thomas_mangin.dc.exa.net.uk>
Message-ID: <1082367013.2203.10.camel@thomas_mangin.dc.exa.net.uk>

> A straight yes/no will more than satisfy me. Does twisted.web.soap currently work ?
> As I found a lot of page like :
> 
> http://mail.python.org/pipermail/python-list/2003-June/170682.html

To answer my own question, it have been noticed on IRC that the test
unit for SOAP was disabled. It had been re-activated, so SOAP
should/will be fixed if/when someone have the time/will to do so.

Thomas


From aleaxit at yahoo.com  Mon Apr 19 07:46:53 2004
From: aleaxit at yahoo.com (Alex Martelli)
Date: Mon Apr 19 07:46:59 2004
Subject: [Twisted-web] how do i write to the new svn repository to commit a
	bugfix...?
Message-ID: <c60l8d$us1$1@sea.gmane.org>

I think I had write access back when nevow was under CVS, but I don't know
what I should do to get it back now it's under nevow instead.  Anyway,
there's a tiny bug in rend.py I just fixed and I can't commit the fix...:

$ svn diff rend.py
Index: rend.py
===================================================================
--- rend.py     (revision 179)
+++ rend.py     (working copy)
@@ -91,7 +91,7 @@
     def child(self, context, name):
         callable = getattr(self, 'data_%s' % name, None)
         if callable is None:
-            container = IContainer(self.original, None)
+            container = inevow.IContainer(self.original, None)
             if container is None:
                 callable = lambda context, data: context.tag["The data
named '%s' was not found in %r." % (name, self)]
             else:

I'd appreciate [a] if someone could commit this, [b] if someone could
explain to me (assuming I _am_ supposed to still have write access) how I
do the equivalent of a "svn login" given that said command isn't there;-).


Thanks,

Alex





From matt at pollenation.net  Mon Apr 19 08:02:57 2004
From: matt at pollenation.net (Matt Goodall)
Date: Mon Apr 19 08:11:50 2004
Subject: [Twisted-web] how do i write to the new svn repository to
	commit a bugfix...?
In-Reply-To: <c60l8d$us1$1@sea.gmane.org>
References: <c60l8d$us1$1@sea.gmane.org>
Message-ID: <1082383377.13785.11.camel@harold>

On Mon, 2004-04-19 at 14:46, Alex Martelli wrote:
> I think I had write access back when nevow was under CVS, but I don't know
> what I should do to get it back now it's under nevow instead.  Anyway,
> there's a tiny bug in rend.py I just fixed and I can't commit the fix...:
> 
> $ svn diff rend.py
> Index: rend.py
[snip]

> I'd appreciate [a] if someone could commit this,

Done. Thanks for the patch.

> [b] if someone could
> explain to me (assuming I _am_ supposed to still have write access) how I
> do the equivalent of a "svn login" given that said command isn't there;-).

Assuming you still have an account on divmod.org then you can use the
following to get everything (trunk, branches, tags etc):

        svn co svn+ssh://username@divmod.org/svn/Nevow
        
or

        svn co svn+ssh://username@divmod.org/svn/Nevow/trunk Nevow

if you're only interested in the trunk. Replace 'username'.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.


From hendry at cs.helsinki.fi  Mon Apr 19 16:02:34 2004
From: hendry at cs.helsinki.fi (Kai Hendry)
Date: Mon Apr 19 16:03:22 2004
Subject: [Twisted-web] Apache and Twisted
In-Reply-To: <4080DF1B.6050102@exa-networks.co.uk>
References: <40806E6A.9000807@livsey.org> <4080DF1B.6050102@exa-networks.co.uk>
Message-ID: <20040419220234.GD1964@cs.helsinki.fi>

Is there a fix for vhostmonster dreid?

That proxypass technique doesn't give my pastebin very good URLs.

From thomas.mangin at exa-networks.co.uk  Mon Apr 19 16:30:10 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Mon Apr 19 16:30:09 2004
Subject: [Twisted-web] Apache and Twisted
In-Reply-To: <20040419220234.GD1964@cs.helsinki.fi>
References: <40806E6A.9000807@livsey.org> <4080DF1B.6050102@exa-networks.co.uk>
	<20040419220234.GD1964@cs.helsinki.fi>
Message-ID: <408452F2.1020006@exa-networks.co.uk>

Kai Hendry wrote:

>Is there a fix for vhostmonster dreid?
>That proxypass technique doesn't give my pastebin very good URLs.
>  
>
I am sorry but I do not understand your problem.

Thomas

From mivok at mivok.net  Mon Apr 19 17:52:53 2004
From: mivok at mivok.net (Mark Harrison)
Date: Mon Apr 19 17:52:32 2004
Subject: [Twisted-web] Apache and Twisted
In-Reply-To: <20040419220234.GD1964@cs.helsinki.fi>
References: <40806E6A.9000807@livsey.org> <4080DF1B.6050102@exa-networks.co.uk>
	<20040419220234.GD1964@cs.helsinki.fi>
Message-ID: <AC962EB0-925C-11D8-9603-000A95C56CA2@mivok.net>

> Is there a fix for vhostmonster dreid?
>
> That proxypass technique doesn't give my pastebin very good URLs.

Forgive me if I'm being a little clueless here (I've not used 
vhostmonster and have just read about what it is), but what problems 
are there when you use the ProxyPassReverse directive in apache to deal 
with the redirects etc. and use relative (or relative to site root) 
links in any pages you generate? I'm assuming here that vhostmonster 
also rewrites links in pages before sending them to the client.

The reason I'm asking is that is what I am doing now, and haven't 
noticed any problems (yet!). Is there anything else I should be looking 
out for?

Mark

   -=<[ Mark Harrison ]-[ Email: mark@mivok.net ]-[ Jabber: 
mivok@mivok.net ]>=-
                       -=<[ Web: http://www.mivok.net/ ]>=-


From radix at twistedmatrix.com  Mon Apr 19 18:04:10 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon Apr 19 18:04:08 2004
Subject: [Twisted-web] Apache and Twisted
In-Reply-To: <AC962EB0-925C-11D8-9603-000A95C56CA2@mivok.net>
References: <40806E6A.9000807@livsey.org>
	<4080DF1B.6050102@exa-networks.co.uk>	<20040419220234.GD1964@cs.helsinki.fi>
	<AC962EB0-925C-11D8-9603-000A95C56CA2@mivok.net>
Message-ID: <408468FA.7030308@twistedmatrix.com>

Mark Harrison wrote:
>> Is there a fix for vhostmonster dreid?
>>
>> That proxypass technique doesn't give my pastebin very good URLs.
> 
> 
> Forgive me if I'm being a little clueless here (I've not used 
> vhostmonster and have just read about what it is), but what problems are 
> there when you use the ProxyPassReverse directive in apache to deal with 
> the redirects etc. and use relative (or relative to site root) links in 
> any pages you generate? I'm assuming here that vhostmonster also 
> rewrites links in pages before sending them to the client.
> 
> The reason I'm asking is that is what I am doing now, and haven't 
> noticed any problems (yet!). Is there anything else I should be looking 
> out for?

Indeed, there is no problem if all of your resources use relative links.

However, if they generate absolute links, which many apps do (:-(), 
VHostMonster is to the rescue. It replaces stuff like the hostname in 
the request object with the 'external' one, so when code builds URLs 
with it, they're externally referenceable.

But VHostMonster reportedly doesn't work with Nevow, yet.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040419/04756c27/signature.bin
From dreid at dreid.org  Mon Apr 19 22:40:22 2004
From: dreid at dreid.org (David Reid)
Date: Mon Apr 19 22:40:38 2004
Subject: [Twisted-web] Apache and Twisted
In-Reply-To: <20040419220234.GD1964@cs.helsinki.fi>
References: <40806E6A.9000807@livsey.org> <4080DF1B.6050102@exa-networks.co.uk>
	<20040419220234.GD1964@cs.helsinki.fi>
Message-ID: <1082436022.17455.1.camel@localhost>

Yes, i worked on VHostMonster not long ago, and with fzZzy's help it got
fixed and works, though I'm really going to have to dig through the code
and figure out what kind of evil broken magic makes it necessary.

http://www.divmod.org/users/roundup.twistd/nevow/issue46

On Mon, 2004-04-19 at 15:02, Kai Hendry wrote:
> Is there a fix for vhostmonster dreid?
> 
> That proxypass technique doesn't give my pastebin very good URLs.
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From dreid at dreid.org  Mon Apr 19 23:19:38 2004
From: dreid at dreid.org (David Reid)
Date: Mon Apr 19 23:19:50 2004
Subject: [Twisted-web] Naming the split.
Message-ID: <1082438377.17455.12.camel@localhost>

These are some of the names that were thrown around the other day during
a discussion #twisted.web about naming the split.  Some are dependent on
it being installed under the twisted namespace... since radix has said
that is a no go, I'm going to omit the "twisted." and see how they stand
on their own.

unwound
stem
qem
newvo
labryinth
charlotte
weevil
ferret
eighty
spider
lattice
matrix
trellis
kudzu
arachnid
assassin
wev
weever
vewon
world
waffle

Yeah ok and there were a lot more completely stupid names thrown around.
If my opinion matters any I like: unwound, charlotte, and eighty.

--David


From stephen at thorne.id.au  Mon Apr 19 23:27:05 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Mon Apr 19 23:31:17 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <1082438377.17455.12.camel@localhost>
References: <1082438377.17455.12.camel@localhost>
Message-ID: <20040420052705.GA1916@thorne.id.au>

Hi,

My vote is for either of 'charlotte' or 'weaver'

Stephen.


From golux at comcast.net  Mon Apr 19 23:53:14 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Mon Apr 19 23:58:14 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <20040420052705.GA1916@thorne.id.au>
References: <1082438377.17455.12.camel@localhost>
	<20040420052705.GA1916@thorne.id.au>
Message-ID: <4084BACA.5070207@comcast.net>

Another nominee:  "brane"

(From string theory)
A brane can be thought of as a 3+1 dimensional spacetime slice
of an 11-dimensional universe, much as the web is a kind of
limited (http) slice thru the many-protocoled universe of the
internet.  ;)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: manyfoldbrane.jpg
Type: image/jpeg
Size: 40191 bytes
Desc: not available
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040420/051582d2/manyfoldbrane-0001.jpg
From general at eepatents.com  Tue Apr 20 00:00:29 2004
From: general at eepatents.com (Ed Suominen)
Date: Tue Apr 20 00:10:42 2004
Subject: [Twisted-web] Re: Splitting twisted-web from core twisted.
References: <1082026063.1236.68.camel@localhost>
	<20040417015045.GL29157@titus.home.puzzling.org>
	<1082200010.17377.2.camel@localhost>
	<20040417111602.GA25155@thorne.id.au>
Message-ID: <c62e9q$36b$1@sea.gmane.org>

Stephen Thorne wrote:

> It'd be really nice to have a good name for twisted-web++
> 
> Consider this a call for suggestions. Please present any names you think
> may be appropriate. If we don't find one, we'll just have to use 'tweb'
> or 'web' or something.
> 
> it'd be nice to follow the wonderful free-association schema that
> twisted has used in the past, jelly/banana, names, words, pair, trial,
> enterprise, cred, conch.
> 

I disagree. As a new user of twisted, I find the jelly/banana types of names
annoying and confusing.

-- 
Ed Suominen



From stephen at thorne.id.au  Tue Apr 20 00:14:47 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Tue Apr 20 00:18:25 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <4084BACA.5070207@comcast.net>
References: <1082438377.17455.12.camel@localhost>
	<20040420052705.GA1916@thorne.id.au> <4084BACA.5070207@comcast.net>
Message-ID: <20040420061447.GA2931@thorne.id.au>

On Tue, Apr 20, 2004 at 01:53:14AM -0400, Stephen Waterbury wrote:
> Another nominee:  "brane"
> 
> (From string theory)
> A brane can be thought of as a 3+1 dimensional spacetime slice
> of an 11-dimensional universe, much as the web is a kind of
> limited (http) slice thru the many-protocoled universe of the
> internet.  ;)

One of my name requirements is that I must be able to say its name, even
out of context, without having to spell it. 

"The web application is backed by brane, thats brane spelt B R A N E."
is icky.

Stephen


From golux at comcast.net  Tue Apr 20 01:02:00 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Tue Apr 20 01:06:57 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <20040420061447.GA2931@thorne.id.au>
References: <1082438377.17455.12.camel@localhost>	<20040420052705.GA1916@thorne.id.au>
	<4084BACA.5070207@comcast.net> <20040420061447.GA2931@thorne.id.au>
Message-ID: <4084CAE8.9060802@comcast.net>

Stephen Thorne wrote:
> On Tue, Apr 20, 2004 at 01:53:14AM -0400, Stephen Waterbury wrote:
> 
>>Another nominee:  "brane"
>>
>>(From string theory)
>>A brane can be thought of as a 3+1 dimensional spacetime slice
>>of an 11-dimensional universe, much as the web is a kind of
>>limited (http) slice thru the many-protocoled universe of the
>>internet.  ;)
> 
> One of my name requirements is that I must be able to say its name, even
> out of context, without having to spell it. 
> 
> "The web application is backed by brane, thats brane spelt B R A N E."
> is icky.

Heh ... I kind of liked the pun ambiguity.
But I was mostly kidding, anyway.  Nobody but
really *extreme* geeks would get it.  Like moi.  :)
And it *would* be icky.

From thomas.mangin at exa-networks.co.uk  Tue Apr 20 02:06:24 2004
From: thomas.mangin at exa-networks.co.uk (Thomas Mangin)
Date: Tue Apr 20 02:06:27 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <1082438377.17455.12.camel@localhost>
References: <1082438377.17455.12.camel@localhost>
Message-ID: <4084DA00.6050407@exa-networks.co.uk>

David Reid wrote:

>These are some of the names that were thrown around the other day during
>a discussion #twisted.web about naming the split.  Some are dependent on
>it being installed under the twisted namespace... since radix has said
>that is a no go, I'm going to omit the "twisted." and see how they stand
>on their own.
>  
>
I am a boring fart and I always though that names should be as explicit 
as possible.

Am I right to think that all the code will be related to applications 
using twisted ?
In that case something like twistedapp (please do not take that name as 
the ultimate recommendation) would make more sense.

As well I would saws that the organization should be like
twistedapp.news.lowdown
twistedapp.web.nevow
[...]

So the protocol is obvious from the module name and it is easy to add 
more application of the same protocol without any name clash.
At that point it is clear that nevow is a web application, even if the 
name itself does not give the information away.

Thomas

From mesozoic at polynode.com  Tue Apr 20 02:41:03 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Tue Apr 20 02:41:43 2004
Subject: [Twisted-web] Re: Naming the split.
In-Reply-To: <1082438377.17455.12.camel@localhost>
References: <1082438377.17455.12.camel@localhost>
Message-ID: <1082450463.24426.21.camel@hyla>

On Tue, 2004-04-20 at 01:19, David Reid wrote:
> unwound
...
> waffle

How about "UnwoundWaffle"?

>>> from UnwoundWaffle.nevow import freeparking

No, that's just _too_ weird.

I think all the cute names for web-related projects have been taken
already. I don't think something like "silk", "tapestry", or "donut"
will do here. (I'd be interested to hear the rationale behind "eighty",
because it's so odd, it might just work.)

In a way, I'd prefer TwistedWeb (caps included, to avoid confusion), if
only because it's straightforward, recognizable, and won't require an
explanation every time someone new joins the IRC channel.

Of course, if anyone thinks they've seen a great name for the project,
or have one that hasn't been mentioned yet, feel free to prove me wrong.
I'm flexible. :)

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040420/4f45fedd/attachment.bin
From aleaxit at yahoo.com  Tue Apr 20 02:50:44 2004
From: aleaxit at yahoo.com (Alex Martelli)
Date: Tue Apr 20 02:50:51 2004
Subject: [Twisted-web] Re: how do i write to the new svn repository to
	commit a bugfix...?
References: <c60l8d$us1$1@sea.gmane.org> <1082383377.13785.11.camel@harold>
Message-ID: <c62o94$nkp$1@sea.gmane.org>

Matt Goodall wrote:
   ...
> Assuming you still have an account on divmod.org then you can use the
> following to get everything (trunk, branches, tags etc):
> 
>         svn co svn+ssh://username@divmod.org/svn/Nevow

Worked perfectly -- thanks!


Alex




From mary-twisted at puzzling.org  Tue Apr 20 03:02:49 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue Apr 20 03:02:58 2004
Subject: [Twisted-web] Re: Naming the split.
In-Reply-To: <1082450463.24426.21.camel@hyla>
References: <1082438377.17455.12.camel@localhost>
	<1082450463.24426.21.camel@hyla>
Message-ID: <20040420090249.GC20714@titus.home.puzzling.org>

On Tue, Apr 20, 2004, Alex Levy wrote:
> (I'd be interested to hear the rationale behind "eighty", because it's
> so odd, it might just work.)

HTTP default port number, I'd guess -- it wasn't my suggestion.

-Mary

From matt at pollenation.net  Tue Apr 20 03:01:21 2004
From: matt at pollenation.net (Matt Goodall)
Date: Tue Apr 20 03:10:13 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <1082438377.17455.12.camel@localhost>
References: <1082438377.17455.12.camel@localhost>
Message-ID: <1082451680.22020.25.camel@harold>

On Tue, 2004-04-20 at 06:19, David Reid wrote:
> These are some of the names that were thrown around the other day during
> a discussion #twisted.web about naming the split.  Some are dependent on
> it being installed under the twisted namespace... since radix has said
> that is a no go, I'm going to omit the "twisted." and see how they stand
> on their own.
> 
> unwound
> stem
> qem
> newvo
> labryinth
> charlotte
> weevil
> ferret
> eighty
> spider
> lattice
> matrix
> trellis
> kudzu
> arachnid
> assassin
> wev
> weever
> vewon
> world
> waffle

>From the above I like:

  unwound
  charlotte (but probably a bit whimisical to many people)

Some other ideas:

  firestarter	(obligatory music reference)
  silk
  sticky
  tangled
  warp
  widow		(perhaps a little negative ;-))

I think something short and snappy is best. Try typing the package name
a few times to test. I find 'unwound' easy to type but I'm not so sure
about 'charlotte'.

Cheers, Matt
-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.


From matt at pollenation.net  Tue Apr 20 03:01:27 2004
From: matt at pollenation.net (Matt Goodall)
Date: Tue Apr 20 03:10:18 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <1082438377.17455.12.camel@localhost>
References: <1082438377.17455.12.camel@localhost>
Message-ID: <1082451680.22024.26.camel@harold>

On Tue, 2004-04-20 at 06:19, David Reid wrote:
> These are some of the names that were thrown around the other day during
> a discussion #twisted.web about naming the split.  Some are dependent on
> it being installed under the twisted namespace... since radix has said
> that is a no go, I'm going to omit the "twisted." and see how they stand
> on their own.
> 
> unwound
> stem
> qem
> newvo
> labryinth
> charlotte
> weevil
> ferret
> eighty
> spider
> lattice
> matrix
> trellis
> kudzu
> arachnid
> assassin
> wev
> weever
> vewon
> world
> waffle

>From the above I like:

  unwound
  charlotte (but probably a bit whimisical to many people)

Some other ideas:

  firestarter	(obligatory music reference)
  silk
  sticky
  tangled
  warp
  widow		(perhaps a little negative ;-))

I think something short and snappy is best. Try typing the package name
a few times to test. I find 'unwound' easy to type but I'm not so sure
about 'charlotte'.

Cheers, Matt
-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.


From andy at thecablelounge.com  Tue Apr 20 03:34:41 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue Apr 20 03:34:49 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <4084DA00.6050407@exa-networks.co.uk>
References: <1082438377.17455.12.camel@localhost>
	<4084DA00.6050407@exa-networks.co.uk>
Message-ID: <4084EEB1.9030007@thecablelounge.com>

Thomas Mangin wrote:

> I am a boring fart and I always though that names should be as explicit 
> as possible.

I find high level unusual names tend to be more explicit than 
conventional names as they avoid clashing with heavily overloaded terms.

Compare:

'How are you getting on with that refactor of news/web/docs/ssh/callback?'

with

'How are you getting on with that refactor of lowdown/<cool 
name>/lore/conch/deferred?'

It helps projects and key concepts take on easily relatable personalities.

Andy.

(used http://www.developer.com/net/article.php/1464751 for a more 
conventional term for deferred ..)










From hendry at cs.helsinki.fi  Tue Apr 20 06:36:49 2004
From: hendry at cs.helsinki.fi (Kai Hendry)
Date: Tue Apr 20 06:36:57 2004
Subject: [Twisted-web] Apache and Twisted
In-Reply-To: <40806E6A.9000807@livsey.org>
References: <40806E6A.9000807@livsey.org>
Message-ID: <20040420123649.GA20539@cs.helsinki.fi>

http://divmod.org/users/wiki.twistd/nevow/moin.cgi/ApacheSetup

I made a little Wiki entry to help.

From matt at pollenation.net  Tue Apr 20 08:09:04 2004
From: matt at pollenation.net (Matt Goodall)
Date: Tue Apr 20 08:17:57 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <4084EEB1.9030007@thecablelounge.com>
References: <1082438377.17455.12.camel@localhost>
	<4084DA00.6050407@exa-networks.co.uk>
	<4084EEB1.9030007@thecablelounge.com>
Message-ID: <1082470143.22022.122.camel@harold>

On Tue, 2004-04-20 at 10:34, Andy Gayton wrote:
> Thomas Mangin wrote:
> 
> > I am a boring fart and I always though that names should be as explicit 
> > as possible.
> 
> I find high level unusual names tend to be more explicit than 
> conventional names as they avoid clashing with heavily overloaded terms.
> 
> Compare:
> 
> 'How are you getting on with that refactor of news/web/docs/ssh/callback?'
> 
> with
> 
> 'How are you getting on with that refactor of lowdown/<cool 
> name>/lore/conch/deferred?'
> 
> It helps projects and key concepts take on easily relatable personalities.

It also helps when searching for information on the internet. "twisted
web" is gonna get lots of results. "twisted unwound", "twisted
charlotte", etc will give much better results.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.


From twisted at goldenspud.com  Tue Apr 20 10:24:26 2004
From: twisted at goldenspud.com (Matthew Scott)
Date: Tue Apr 20 10:24:35 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <1082438377.17455.12.camel@localhost>
References: <1082438377.17455.12.camel@localhost>
Message-ID: <200404201124.26615.twisted@goldenspud.com>

On Tuesday 20 April 2004 00:19, David Reid wrote:
> These are some of the names that were thrown around the other day during
> a discussion #twisted.web about naming the split. ?Some are dependent on
> it being installed under the twisted namespace... since radix has said
> that is a no go, I'm going to omit the "twisted." and see how they stand
> on their own.
>
> [ ... ]
> labryinth
> [ ... ]

I would suggest that ANY name given be run through a spellchecker first, and 
if it was misspelled, to discard the name since it would be too easy for too 
many people to misspell it.  :)

-- 
Matthew Scott <spud@goldenspud.com>

From general at eepatents.com  Tue Apr 20 10:39:58 2004
From: general at eepatents.com (Ed Suominen)
Date: Tue Apr 20 10:40:02 2004
Subject: [Twisted-web] Re: Using Twisted.web - should I wait?
References: <40816E20.4040904@livsey.org>
Message-ID: <c63jos$17n$1@sea.gmane.org>

I have just started development of two web sites using twisted.web, after
looking into all of the python-based alternatives. It's been very
disappointing to see all of this talk about a split, and even more
disappointing to see all of the goofiness about naming. I haven't
encountered any other projects where things were as obtuse and hard to
understand, and it's almost tempting to think that the twisted developers
get a kick out of creating some sort of a secret code that only they can
understand.

Please accept this as constructive criticism, which it is fully intended to
be. Perhaps the viewpoint of a twisted newbie/outsider who is in a
profession where words are important might be valuable. I don't find the
seemingly random naming conventions "cute" or amusing at all. They are
confusing and convey no intrinsic information whatsoever. I don't want to
have to study source code to find out what the heck a "banana encoded jelly
stream" is supposed to do. (That is contrary to the XP principle of
descriptive naming, by the way.) And I certainly don't want to have to
review each one of a list of packages to find out what they really do,
information that some goofy name like "lowdown" or "charlotte" simply does
not convey.

Best regards, Ed

-- 
Ed Suominen
Registered Patent Agent 
Open Source Developer (Yes, both...)
Web Site: http://www.eepatents.com


Richard Livsey wrote:

> As mentioned in a previous thread, I'm looking at using twisted.web in a
> project.
> 
> However, all the talk at the moment of a twsited.web rewrite and the
> splitting up of twisted into seperate projects makes me think I should
> hold off for a bit.
> 
> Basically the question is, should I bother starting the project now if
> in a few days/weeks/months time the whole framework is going to change
> and I end up having to refactor half of the project to fit in?
> 
> I'm using twisted a fair bit in another project I'm working on
> (multi-group chat system, like live-person) but am hesitant on starting
> a new one based around .web/nevow etc..
> 
> Any advice?
> 
> Thanks.
> 




From mesozoic at polynode.com  Tue Apr 20 11:40:08 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Tue Apr 20 11:40:41 2004
Subject: [Twisted-web] A few questions need answering (was: Using
	Twisted.web - should I wait?)
In-Reply-To: <c63jos$17n$1@sea.gmane.org>
References: <40816E20.4040904@livsey.org>  <c63jos$17n$1@sea.gmane.org>
Message-ID: <1082482808.25373.17.camel@hyla>

I'm going to back up Richard and Ed, because I feel like people might be
inclined to just pass their emails by. This is very important.

Here we have two users who are expressing serious reservations about
using Twisted or Nevow because they don't have any details on how we
plan to split twisted.web. I can understand their concern: nobody likes
being in the dark.

I know there's already a long thread where ideas were bounced around,
but I think -- for the sake of keeping interested parties interested
(nod to Richard and Ed) -- it would be helpful if someone who is
directly involved in the split answers a few things right here:

1) What will happen to twisted.web? It's a complex module, and doing
reverse-imports (the way LowDown is doing with twisted.news) might get
pretty rocky. Do we have any guarantees that, for the foreseeable
future, the existing twisted.web will not change, and people can
continue to develop applications using twisted.web?

2) When everything's finished, how drastically different will the APIs
be? Are we talking about a simple "move code over, clean up a few loose
ends," or is this going to be a massive reorganization and refactoring
of everything web-related?

And, most importantly...

3) What sort of timeframe are we looking at?

Really, I think everyone is most interested in the last question. How
long will the split take? If it's going to happen gradually over several
months, what should people who are considering using twisted.web or
Nevow do? If it's going to happen in the next two weeks... well, then,
it's about time someone stood up and said so!

I'm saying we need more public information about a split, because it's
starting to affect the user community. I think the best thing to do
would be a page on the Wiki, answering exactly these questions, where
everyone can go to get the latest scoop on what's planned (and what's
still undecided).

Wiki: <http://divmod.org/users/wiki.twistd/nevow/moin.cgi>

So, please, someone who's directly involved with the split, we need to
hear more about plans, soon.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040420/35a8968b/attachment.bin
From radix at twistedmatrix.com  Tue Apr 20 12:12:38 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue Apr 20 12:12:43 2004
Subject: [Twisted-web] A few questions need answering
In-Reply-To: <1082482808.25373.17.camel@hyla>
References: <40816E20.4040904@livsey.org> <c63jos$17n$1@sea.gmane.org>
	<1082482808.25373.17.camel@hyla>
Message-ID: <40856816.1040104@twistedmatrix.com>

Alex Levy wrote:
> I'm going to back up Richard and Ed, because I feel like people might be
> inclined to just pass their emails by. This is very important.
> 
> Here we have two users who are expressing serious reservations about
> using Twisted or Nevow because they don't have any details on how we
> plan to split twisted.web. I can understand their concern: nobody likes
> being in the dark.

One point I'd like to make is that Nevow has, since its inception, been 
pretty API-unstable. *twisted.web* has been stable for a while, and 
there's no reason not to use it. Nevow is obviously still something you 
need to watch closely if you want to use.

I promise there will be backwards compatibility for twisted.web. I'll 
explain more below...

> 1) What will happen to twisted.web? It's a complex module, and doing
> reverse-imports (the way LowDown is doing with twisted.news) might get
> pretty rocky. Do we have any guarantees that, for the foreseeable
> future, the existing twisted.web will not change, and people can
> continue to develop applications using twisted.web?

'from twisted import web' *will remain backwards compatible*. I'll 
personally see to that. :-)

> 2) When everything's finished, how drastically different will the APIs
> be? Are we talking about a simple "move code over, clean up a few loose
> ends," or is this going to be a massive reorganization and refactoring
> of everything web-related?

That's a question that foom and nevow-twisted.web-forkers can answer. 
nevow changed a bunch of core twisted.web stuff, and foom is rewriting 
the HTTP support.

> 
> And, most importantly...
> 
> 3) What sort of timeframe are we looking at?

Ha! I mock your assumptions that someone actually has any idea. ;-)

> Really, I think everyone is most interested in the last question. How
> long will the split take? If it's going to happen gradually over several
> months, what should people who are considering using twisted.web or
> Nevow do? If it's going to happen in the next two weeks... well, then,
> it's about time someone stood up and said so!

twisted.web split is going to be tricky, since people are rewriting it 
at the same time. It will probably be a short while before the split 
actually occurs, and we're probably going to have to put a bunch of BC 
code in twisted/web/.

But like I said, people shouldn't worry about using *twisted.web*. It 
will remain backwards compatible. I can't say anything about the 
backwards compatibility of all the slightly different APIs in nevow; 
that's not my concern.

> Wiki: <http://divmod.org/users/wiki.twistd/nevow/moin.cgi>

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040420/7930e051/signature.bin
From jvanasco at mastersofbranding.com  Tue Apr 20 13:55:44 2004
From: jvanasco at mastersofbranding.com (Jonathan Vanasco)
Date: Tue Apr 20 13:55:50 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <1082438377.17455.12.camel@localhost>
References: <1082438377.17455.12.camel@localhost>
Message-ID: <B57845C1-9304-11D8-870D-000393863D5E@mastersofbranding.com>


There's a german band called The Notwist, which made me think of the 
"Notwisted".
And then I thought of bad unix naming conventions from acronyms, like 
Tinta -> "This Is Not Twisted Anymore"

You can always use names that lead to funny/weird sentences for people 
with the mind of a 12yr old.
	>Compare
	>'How are you getting on with that refactor of 
news/web/docs/ssh/callback?'
	>with
	>'How are you getting on with that refactor of lowdown/<cool 
name>/lore/conch/deferred?'

If you called it "Uranus" then the conversation would start off:
	'How are you getting on with that refactor of uranus?'

Just a thought.  A bad one, but a though.


On Apr 20, 2004, at 1:19 AM, David Reid wrote:

> These are some of the names that were thrown around the other day 
> during
> a discussion #twisted.web about naming the split.  Some are dependent 
> on
> it being installed under the twisted namespace... since radix has said
> that is a no go, I'm going to omit the "twisted." and see how they 
> stand
> on their own.
>
> unwound
> stem
> qem
> newvo
> labryinth
> charlotte
> weevil
> ferret
> eighty
> spider
> lattice
> matrix
> trellis
> kudzu
> arachnid
> assassin
> wev
> weever
> vewon
> world
> waffle
>
> Yeah ok and there were a lot more completely stupid names thrown 
> around.
> If my opinion matters any I like: unwound, charlotte, and eighty.
>
> --David
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From dreid at dreid.org  Tue Apr 20 15:52:26 2004
From: dreid at dreid.org (David Reid)
Date: Tue Apr 20 15:52:33 2004
Subject: [Twisted-web] A few questions need answering
In-Reply-To: <40856816.1040104@twistedmatrix.com>
References: <40816E20.4040904@livsey.org> <c63jos$17n$1@sea.gmane.org>
	<1082482808.25373.17.camel@hyla> <40856816.1040104@twistedmatrix.com>
Message-ID: <1082497946.31542.9.camel@localhost>

My personal ideas:

1) Don't touch twisted.web, just leave it there, it's a perfectly fine
useable webserver, don't add deprecation warnings until the new
twisted.web is considered stable.

2) Backport some of the nicer parts of the Nevow API (locateChild and
child_XXX methods as opposed to getChild, getDefaultChild,
getChildWithDefault, etc.)  Wether or not the old api will still be
there I haven't really thought about, I'm really not as concerned with
backwards compatibility as others are, but if it's the consensus of the
people working on the split that backwards compatibility is in issue
it'll be maintained.  Atleast for a few versions

The way I see it is the backporting is part of the stabilizing the
current Nevow API.

3) I don't know when all this will be happening, I'm working on
backports as we speak but nothing has been done to formalize the effort,
no repositories set up no web pages, etc ...

I'm not even sure how I came to be the guy-who-is-doing-this I'm not a
twisted developer, I'm not a Nevow developer, I'm just a very frustrated
programmer who tried to generate discussion, and somehow started
actually working on it.

On Tue, 2004-04-20 at 11:12, Christopher Armstrong wrote:
> Alex Levy wrote:
> > I'm going to back up Richard and Ed, because I feel like people might be
> > inclined to just pass their emails by. This is very important.
> > 
> > Here we have two users who are expressing serious reservations about
> > using Twisted or Nevow because they don't have any details on how we
> > plan to split twisted.web. I can understand their concern: nobody likes
> > being in the dark.
> 
> One point I'd like to make is that Nevow has, since its inception, been 
> pretty API-unstable. *twisted.web* has been stable for a while, and 
> there's no reason not to use it. Nevow is obviously still something you 
> need to watch closely if you want to use.
> 
> I promise there will be backwards compatibility for twisted.web. I'll 
> explain more below...
> 
> > 1) What will happen to twisted.web? It's a complex module, and doing
> > reverse-imports (the way LowDown is doing with twisted.news) might get
> > pretty rocky. Do we have any guarantees that, for the foreseeable
> > future, the existing twisted.web will not change, and people can
> > continue to develop applications using twisted.web?
> 
> 'from twisted import web' *will remain backwards compatible*. I'll 
> personally see to that. :-)
> 
> > 2) When everything's finished, how drastically different will the APIs
> > be? Are we talking about a simple "move code over, clean up a few loose
> > ends," or is this going to be a massive reorganization and refactoring
> > of everything web-related?
> 
> That's a question that foom and nevow-twisted.web-forkers can answer. 
> nevow changed a bunch of core twisted.web stuff, and foom is rewriting 
> the HTTP support.
> 
> > 
> > And, most importantly...
> > 
> > 3) What sort of timeframe are we looking at?
> 
> Ha! I mock your assumptions that someone actually has any idea. ;-)
> 
> > Really, I think everyone is most interested in the last question. How
> > long will the split take? If it's going to happen gradually over several
> > months, what should people who are considering using twisted.web or
> > Nevow do? If it's going to happen in the next two weeks... well, then,
> > it's about time someone stood up and said so!
> 
> twisted.web split is going to be tricky, since people are rewriting it 
> at the same time. It will probably be a short while before the split 
> actually occurs, and we're probably going to have to put a bunch of BC 
> code in twisted/web/.
> 
> But like I said, people shouldn't worry about using *twisted.web*. It 
> will remain backwards compatible. I can't say anything about the 
> backwards compatibility of all the slightly different APIs in nevow; 
> that's not my concern.
> 
> > Wiki: <http://divmod.org/users/wiki.twistd/nevow/moin.cgi>


From stephen at thorne.id.au  Tue Apr 20 15:52:08 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Tue Apr 20 15:55:49 2004
Subject: [Twisted-web] A few questions need answering
In-Reply-To: <1082497946.31542.9.camel@localhost>
References: <40816E20.4040904@livsey.org> <c63jos$17n$1@sea.gmane.org>
	<1082482808.25373.17.camel@hyla>
	<40856816.1040104@twistedmatrix.com>
	<1082497946.31542.9.camel@localhost>
Message-ID: <20040420215208.GA8396@thorne.id.au>

On Tue, Apr 20, 2004 at 02:52:26PM -0700, David Reid wrote:
> I'm not even sure how I came to be the guy-who-is-doing-this I'm not a
> twisted developer, I'm not a Nevow developer, I'm just a very frustrated
> programmer who tried to generate discussion, and somehow started
> actually working on it.

Welcome to open source.

Regards,
Stephen Thorne.

From indigo at bitglue.com  Tue Apr 20 17:05:26 2004
From: indigo at bitglue.com (Phil Frost)
Date: Tue Apr 20 17:05:28 2004
Subject: [Twisted-web] locateChild interface (was: A few questions need
	answering)
In-Reply-To: <1082497946.31542.9.camel@localhost>
References: <40816E20.4040904@livsey.org> <c63jos$17n$1@sea.gmane.org>
	<1082482808.25373.17.camel@hyla>
	<40856816.1040104@twistedmatrix.com>
	<1082497946.31542.9.camel@localhost>
Message-ID: <20040420230526.GA8736@unununium.org>

Before locateChild is made "the way", it has a problem that there is no
way to terminate the recursion without consuming all elements of the
path. This means it is impossible to write CGI scripts that make use of
PATH_INFO. I have a patch on the nevow tracker related to this issue:

http://www.divmod.org/users/roundup.twistd/nevow/issue44

afaik, it hasn't yet been adressed, but I've not been following
development since I submitted it. My apologies if I'm lagging in
information.

> there I haven't really thought about, I'm really not as concerned with
> backwards compatibility as others are, but if it's the consensus of the
> people working on the split that backwards compatibility is in issue
> it'll be maintained.  Atleast for a few versions
> 
> The way I see it is the backporting is part of the stabilizing the
> current Nevow API.
> 
> 3) I don't know when all this will be happening, I'm working on
> backports as we speak but nothing has been done to formalize the effort,
> no repositories set up no web pages, etc ...
> 
> I'm not even sure how I came to be the guy-who-is-doing-this I'm not a
> twisted developer, I'm not a Nevow developer, I'm just a very frustrated
> programmer who tried to generate discussion, and somehow started
> actually working on it.
> 
> On Tue, 2004-04-20 at 11:12, Christopher Armstrong wrote:
> > Alex Levy wrote:
> > > I'm going to back up Richard and Ed, because I feel like people might be
> > > inclined to just pass their emails by. This is very important.
> > > 
> > > Here we have two users who are expressing serious reservations about
> > > using Twisted or Nevow because they don't have any details on how we
> > > plan to split twisted.web. I can understand their concern: nobody likes
> > > being in the dark.
> > 
> > One point I'd like to make is that Nevow has, since its inception, been 
> > pretty API-unstable. *twisted.web* has been stable for a while, and 
> > there's no reason not to use it. Nevow is obviously still something you 
> > need to watch closely if you want to use.
> > 
> > I promise there will be backwards compatibility for twisted.web. I'll 
> > explain more below...
> > 
> > > 1) What will happen to twisted.web? It's a complex module, and doing
> > > reverse-imports (the way LowDown is doing with twisted.news) might get
> > > pretty rocky. Do we have any guarantees that, for the foreseeable
> > > future, the existing twisted.web will not change, and people can
> > > continue to develop applications using twisted.web?
> > 
> > 'from twisted import web' *will remain backwards compatible*. I'll 
> > personally see to that. :-)
> > 
> > > 2) When everything's finished, how drastically different will the APIs
> > > be? Are we talking about a simple "move code over, clean up a few loose
> > > ends," or is this going to be a massive reorganization and refactoring
> > > of everything web-related?
> > 
> > That's a question that foom and nevow-twisted.web-forkers can answer. 
> > nevow changed a bunch of core twisted.web stuff, and foom is rewriting 
> > the HTTP support.
> > 
> > > 
> > > And, most importantly...
> > > 
> > > 3) What sort of timeframe are we looking at?
> > 
> > Ha! I mock your assumptions that someone actually has any idea. ;-)
> > 
> > > Really, I think everyone is most interested in the last question. How
> > > long will the split take? If it's going to happen gradually over several
> > > months, what should people who are considering using twisted.web or
> > > Nevow do? If it's going to happen in the next two weeks... well, then,
> > > it's about time someone stood up and said so!
> > 
> > twisted.web split is going to be tricky, since people are rewriting it 
> > at the same time. It will probably be a short while before the split 
> > actually occurs, and we're probably going to have to put a bunch of BC 
> > code in twisted/web/.
> > 
> > But like I said, people shouldn't worry about using *twisted.web*. It 
> > will remain backwards compatible. I can't say anything about the 
> > backwards compatibility of all the slightly different APIs in nevow; 
> > that's not my concern.
> > 
> > > Wiki: <http://divmod.org/users/wiki.twistd/nevow/moin.cgi>
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

On Tue, Apr 20, 2004 at 02:52:26PM -0700, David Reid wrote:
> ...
> 2) Backport some of the nicer parts of the Nevow API (locateChild and
> child_XXX methods as opposed to getChild, getDefaultChild,
> getChildWithDefault, etc.)  Wether or not the old api will still be
> ...

From dialtone at aruba.it  Tue Apr 20 17:33:07 2004
From: dialtone at aruba.it (Valentino Volonghi aka Dialtone)
Date: Tue Apr 20 17:29:59 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <1082438377.17455.12.camel@localhost>
References: <1082438377.17455.12.camel@localhost>
Message-ID: <4085B333.2070802@aruba.it>

David Reid wrote:

>unwound
>stem
>qem
>newvo
>labryinth
>charlotte
>weevil
>ferret
>eighty
>spider
>lattice
>matrix
>trellis
>kudzu
>arachnid
>assassin
>wev
>weever
>vewon
>world
>waffle
>  
>

I like weever and weaver, but also unwound is good.

What about: vowel? :)

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Gentoo Proud User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/



From scovel at jvlnet.com  Sat Apr 17 13:04:23 2004
From: scovel at jvlnet.com (Adam)
Date: Tue Apr 20 20:18:17 2004
Subject: [Twisted-web] Twisted & PythonWin IDE
Message-ID: <40817FB7.9000400@jvlnet.com>

Hi all,

A quick (and probably stupid) question from a newb.

I'd like to find a better way to quickly debug twisted scripts under 
pythonwin.  I've no problem running stand-alone scripts from the command 
line, but under pythonwin they lock up, and after testing I'm forced to 
terminate it from the task manager, reopen pythonwin, etc...  If someone 
could point me in the right direction I'd be greatly appreciative.

Thanks,
Adam

From indigo at unununium.org  Tue Apr 20 09:00:45 2004
From: indigo at unununium.org (Phil Frost)
Date: Tue Apr 20 20:18:20 2004
Subject: [Twisted-web] Naming the split.
In-Reply-To: <1082451680.22020.25.camel@harold>
References: <1082438377.17455.12.camel@localhost>
	<1082451680.22020.25.camel@harold>
Message-ID: <20040420150045.GA27653@unununium.org>

On Tue, Apr 20, 2004 at 10:01:21AM +0100, Matt Goodall wrote:
> On Tue, 2004-04-20 at 06:19, David Reid wrote:
> > These are some of the names that were thrown around the other day during
> > a discussion #twisted.web about naming the split.  Some are dependent on
> > it being installed under the twisted namespace... since radix has said
> > that is a no go, I'm going to omit the "twisted." and see how they stand
> > on their own.
> > 
> > unwound
> > stem
> > qem
> > newvo
> > labryinth
> > charlotte
> > weevil
> > ferret
> > eighty
> > spider
> > lattice
> > matrix
> > trellis
> > kudzu
> > arachnid
> > assassin
> > wev
> > weever
> > vewon
> > world
> > waffle
> 
> >From the above I like:
> 
>   unwound
>   charlotte (but probably a bit whimisical to many people)
> 
> Some other ideas:
> 
>   firestarter	(obligatory music reference)
>   silk
>   sticky
>   tangled
>   warp
>   widow		(perhaps a little negative ;-))
> 
> I think something short and snappy is best. Try typing the package name
> a few times to test. I find 'unwound' easy to type but I'm not so sure
> about 'charlotte'.
> 
> Cheers, Matt
> -- 
> Matt Goodall, Pollenation Internet Ltd
> w: http://www.pollenation.net
> e: matt@pollenation.net
> 
> Any views expressed are my own and do not necessarily reflect the
> views of my employer.

If you used dvorak, all of those would be easy to type :-) I think any
name chosen should not be common word, because it makes finding
information on that thing very hard. For example, compare google
searches for "nevow" and "woven".

That said, here are three methods for making such names:
- acronyms. BORING!
- concatenating two words. works, but must be creative, so don't look at
  me :)
- making your own words. Pretty hard to do, so I wrote a small program
  to make some ideas. Let's see if anyone can figure out how I did it:

liaweb
deliaweb
gniliaweb
sliaweb
eraweb
deraweb
seraweb
gniraweb
redliweb
deredliweb
gniredliweb
tnemredliweb
s'tnemredliweb
sredliweb
hctiweb
dehctiweb
sehctiweb
gnihctiweb

Of course, some of these could be tweaked to be more pronouncable. I
like "eraweb" or "seraweb" personally. I'm kinda bummed that they all
end in "web" though - perhaps someone can devise a better procedure for
generating ideas.

Another idea, why not put all these ideas on a webpage, and allow people
to mark and submit suggestions. I'm sure it will lead to no consensus,
but it should at least narrow the possibilities. I'm willing to write
it, if it's a worthwhile idea.

From Robert.Rilee at dhs.gov  Tue Apr 20 09:55:21 2004
From: Robert.Rilee at dhs.gov (Rilee, Robert)
Date: Tue Apr 20 20:18:22 2004
Subject: [Twisted-web] Exceptions on production systems
Message-ID: <90EEEDD3C9523F4C806AC6F30CE45BE95B093D@K001UG-0002.network.ad.tsa.gov>

The web.Server Traceback is somewhat hideous. What do folks do on
production systems where you don't want to amplify your mistakes to the
world?

Robert Rilee
JIL Information Systems, Inc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040420/872e4551/attachment.htm
From ed at eepatents.com  Tue Apr 20 11:38:09 2004
From: ed at eepatents.com (Ed Suominen)
Date: Tue Apr 20 20:18:23 2004
Subject: [Twisted-web] Nevow/twisted.web code contribution
Message-ID: <20040420103809.6a1ed0b4.ed@eepatents.com>

Here is a link to a tarball containing a text button generator
module for use with nevow/twisted. The tarball contains button.py, a
.ttf font file, an example file, test modules, and a copy of the
LGPL.

http://etcl.org/nevow.button.tgz

I hope you will find this contribution worthy of inclusion in nevow-0.2
or twisted-web, whichever makes more sense. (Since nevow deals with
content generation, I figured that would be the logical choice, but I
could be wrong.)

Please note that I'll give this code to either project under whatever
OSI-approved license you choose to use for the whole project. Just let
me know what you're using and change the header text accordingly. I
would like my name and URL left in the header text, however.

Best regards, Ed

From andrew-twisted at puzzling.org  Tue Apr 20 21:05:13 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue Apr 20 21:05:38 2004
Subject: [Twisted-web] Exceptions on production systems
In-Reply-To: <90EEEDD3C9523F4C806AC6F30CE45BE95B093D@K001UG-0002.network.ad.tsa.gov>
References: <90EEEDD3C9523F4C806AC6F30CE45BE95B093D@K001UG-0002.network.ad.tsa.gov>
Message-ID: <20040421030513.GE28850@frobozz>

On Tue, Apr 20, 2004 at 10:55:21AM -0500, Rilee, Robert wrote:
>    The web.Server Traceback is somewhat hideous. What do folks do on
>    production systems where you don't want to amplify your mistakes to the
>    world?

Set the displayTracebacks attribute of your server.Site instance to False.

-Andrew.


From Harald.Nyman at astrazeneca.com  Wed Apr 21 01:52:05 2004
From: Harald.Nyman at astrazeneca.com (Harald.Nyman@astrazeneca.com)
Date: Wed Apr 21 01:55:45 2004
Subject: [Twisted-web] Twisted & PythonWin IDE
Message-ID: <9F028CC77827D611ACEE0002A5F12F0703ECC3A4@semldsntmsx208.seml.astrazeneca.net>

Hi Adam,

At least the vsn of pythonwin I have shows a little snake at the bottom
right of the taskbar when it's running - right-clicking it offers "Break
into running code", and then it stops. A relief, when you're used to
the tiring Task Mgr exercise - had to do that all the time with IDLE.

Cheers from a fellow newb,
Harald

-----Original Message-----
From: Adam [mailto:scovel@jvlnet.com]
Sent: Wednesday, April 21, 2004 4:28 AM
To: twisted-web@twistedmatrix.com
Subject: [Twisted-web] Twisted & PythonWin IDE


Hi all,

A quick (and probably stupid) question from a newb.

I'd like to find a better way to quickly debug twisted scripts under 
pythonwin.  I've no problem running stand-alone scripts from the command 
line, but under pythonwin they lock up, and after testing I'm forced to 
terminate it from the task manager, reopen pythonwin, etc...  If someone 
could point me in the right direction I'd be greatly appreciative.

Thanks,
Adam

_______________________________________________
Twisted-web mailing list
Twisted-web@twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/ms-tnef
Size: 2922 bytes
Desc: not available
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040421/6177097d/attachment.bin
From lance.kurisaki at gd-ais.com  Wed Apr 21 18:07:27 2004
From: lance.kurisaki at gd-ais.com (Kurisaki, Lance)
Date: Wed Apr 21 18:10:38 2004
Subject: [Twisted-web] LiveEvil for Internet Explorer?
Message-ID: <EB57C9DC698BFD4ABCF186EDB81A565101BEF090@lacamail.ad.gd-ais.com>

Hi,
	Has anyone gotten LiveEvil to work with Internet Explorer? Any plans
for it in the future? Thanks...
					Lance Kurisaki

From mailinglists at shechen.at  Thu Apr 22 01:56:11 2004
From: mailinglists at shechen.at (noema)
Date: Thu Apr 22 01:55:28 2004
Subject: [Twisted-web] session, quick one
Message-ID: <opr6ulnxem3lm9gq@mail.geekmail.cc>



I have troubles with my web sessions. They seem to expire after 20min or 
so.
How do I set the expiration time for sessions in twisted?

I already tried to set the cookie's expiration time which holds the 
session id but did not have any luck with that.

_stephan

From dreid at dreid.org  Thu Apr 22 04:56:47 2004
From: dreid at dreid.org (David Reid)
Date: Thu Apr 22 04:56:40 2004
Subject: [Twisted-web] Unwinding the Twisted Web (a progress report)
Message-ID: <1082631407.28634.20.camel@localhost>

I had been trying to straighten out the model for the split since my
first post to twisted-web regarding it.  Now that radix, and exarkun
have split twisted.news out of the core codebase as "lowdown". Since
then I have begun work on my own source tree of twisted.web, the module
has been split as "unwound" which is my proposed name as mentioned in
the numerous naming threads (to be installed as tmlabs.unwound if
desired.)  

So far I've done the following:

 * duplicate the source tree renaming the toplevel module and changing
the imports accordingly.

 * run the tests (everything passes just as it does in twisted.web)

 * removed modules that were deprecated BY woven, and added a
Deprecation Warning message to unwound.woven.__init__

If there are no complaints about this I'm asking someone (like radix) to
help me complete the rest of the steps necessary to make this the
official split so i can start working on changes and enhancements.  The
things I can't do on my own, atleast not as part of twistedmatrix.com is
setup the SVN repo and the project page.  

Also it appears if radix and exarkun did not solve (or atleast did not
implmenet a solution for) the tap naming conflicts.  I.E. if lowdown or
tmlabs.lowdown is going to use mktap news or mktap lowdown instead.

Other than that, Unwound is currently a useable tree of twisted.web At
revision 10601.

(I'm open to changing the name to either tmlabs.web or some cute/catchy
name other than 'unwound', but ultimately I think that is a policy
decision that falls on the core twisted devs.)

--
David Reid
Claim to fame: "I actually wrote code that used twisted.web.webwidgets!"


From Harald.Nyman at astrazeneca.com  Thu Apr 22 06:22:56 2004
From: Harald.Nyman at astrazeneca.com (Harald.Nyman@astrazeneca.com)
Date: Thu Apr 22 06:38:31 2004
Subject: [Twisted-web] Twisted & legacy code - Unorthodox? Opinions wanted
Message-ID: <9F028CC77827D611ACEE0002A5F12F0703ECC3A8@semldsntmsx208.seml.astrazeneca.net>

Apologies for a long post. Felt it was needed to get the message across.

What's described could be a creative approach to dealing with legacy code,
but it could also be an ugly hack, and I would really benefit from the views
of you gurus as to whether this looks like a good/acceptable/bad way to use
Twisted. (If 'bad' - any immediate suggestions? :))

Thanks in advance,
Harald


We have an existing web app (~10 000 lines of Python, generating HTML, with
25 cgi scripts), running on Apache. We are considering Twisted as one
alternative to make it faster and better structured. Just running the
existing code with Twisted instead of Apache doesn't increase performance
much, as CGI's process startups are the bottleneck. So, to really gain from
Twisted, I guess we need to make the code event-driven (and this would be
the ultimate goal).

Now, one design has been proposed, which boosts performance dramatically
with few code changes. It uses Twisted as a plain TCP socket server,
communicating with text strings instead of using HTTP. The browser-server
interaction is -
 - Request: "scriptSelectorKeyword::formInputDict::cookiesDict"
 - Response: "generatedHTML" (as before, but with no line breaks)

Creating the request in the browser:
All links in the page are modified to NOT trigger a GET/POST, but use
javascript to
 - scan form input (<INPUT>, <SELECT>, etc) and build formInputDict ("{name:
value, ...}")
 - create a similar representation of the cookies, as cookiesDict
 - send the "::"-delimited string using a small applet

The server (having imported all modules used by the app at startup) -
 - evals formInputDict and cookiesDict (since they come as text strings)
 - based on scriptSelectorKeyword, invokes the appropriate module in a
thread (threads.deferToThread)
 - (we don't use CGI, so formInputDict and cookiesDict replace Python's cgi
& Cookies modules)
 - the module has a "getBuffer" method that returns the generated HTML
instead of printing it
 - the generated HTML is written to the socket
(reactor.callFromThread(self.transport.write, html))

The browser
 - receives the generated HTML string through the applet
 - parses the cookies
 - displays the HTML, using document.write

This design is up and running with impressive performance, and the users are
enthusiastic. However, the maintenance team is less so, and these are our
main concerns (with the advocates' answers added) -

Is this really a valid way to use Twisted?
 - Think so. The docs say, "Twisted still allows the use of threads if you
really need them, usually to interface with synchronous legacy code", but we
should ask the experts.

Will it scale? Will it work with future Twisted versions?
 - Hope so. See previous point.

It's not a web app anymore, it's a javascript app.
 - So? 

It locks us into MS Internet Explorer.
 - Yes. However, MSIE is our corporate standard anyway.

It can't be used through a firewall.
 - No. Luckily, this is a strictly internal app.

We don't want to rely on and maintain home-written javascript.
 - Good point. However,
   1) We're talking about roughly 2 A4 pages
   2) The javascript to handle form input & cookies is meant to be general,
and once it's validated, we should not need to touch it much.
   3) If we accept being tied in with MSIE, ain't its javascript part of the
package?

We can't do unit tests on the javascript.
 - Correct. See previous point.

From stephen at thorne.id.au  Thu Apr 22 09:21:48 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu Apr 22 09:25:25 2004
Subject: [Twisted-web] Twisted & legacy code - Unorthodox? Opinions wanted
In-Reply-To: <9F028CC77827D611ACEE0002A5F12F0703ECC3A8@semldsntmsx208.seml.astrazeneca.net>
References: <9F028CC77827D611ACEE0002A5F12F0703ECC3A8@semldsntmsx208.seml.astrazeneca.net>
Message-ID: <20040422152148.GA15847@thorne.id.au>

> We can't do unit tests on the javascript.
>  - Correct. See previous point.

I've seen unit tests (>1000 of them) done in javascript, and in a
browser window. You just haven't applied yourselves enoughs.

Regards,
Stephen Thorne.

From mesozoic at polynode.com  Thu Apr 22 10:24:02 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Thu Apr 22 10:24:39 2004
Subject: [Twisted-web] Re: Twisted & legacy code - Unorthodox? Opinions
	wanted
In-Reply-To: <9F028CC77827D611ACEE0002A5F12F0703ECC3A8@semldsntmsx208.seml.astrazeneca.net>
References: <9F028CC77827D611ACEE0002A5F12F0703ECC3A8@semldsntmsx208.seml.astrazeneca.net>
Message-ID: <1082651042.25380.147.camel@hyla>

On Thu, 2004-04-22 at 08:22, Harald.Nyman@astrazeneca.com wrote:
> What's described could be a creative approach to dealing with legacy code,
> but it could also be an ugly hack, and I would really benefit from the views
> of you gurus as to whether this looks like a good/acceptable/bad way to use
> Twisted. (If 'bad' - any immediate suggestions? :))

Certainly.

> Creating the request in the browser:
> All links in the page are modified to NOT trigger a GET/POST, but use
> javascript to
>  - scan form input (<INPUT>, <SELECT>, etc) and build formInputDict ("{name:
> value, ...}")
>  - create a similar representation of the cookies, as cookiesDict
>  - send the "::"-delimited string using a small applet

Unless you are being _very_ selective and _very_ careful in how this
dictionary is formed and interpreted, it seems like this might open up
unwarranted vulnerabilities.

> The browser
>  - receives the generated HTML string through the applet
>  - parses the cookies
>  - displays the HTML, using document.write

Yikes!

> Is this really a valid way to use Twisted?

I would say any use of Twisted is a valid use, but that doesn't mean
it's the best way to leverage the library's real strengths.

"Luke, if only you knew the power..."

> Will it scale? Will it work with future Twisted versions?

Probably, but again, you're not really taking advantage of all the
flexibility and modularity that Twisted offers. You're force-feeding the
server in order to squeeze out some performance benefits, and doing so
in a way that (to me) seems destined to become a developer's nightmare.

> It can't be used through a firewall.

See below for an application design that _can_ go through a firewall.

> We don't want to rely on and maintain home-written javascript.
>  - Good point. However,
>    1) We're talking about roughly 2 A4 pages

It will grow.

>    2) The javascript to handle form input & cookies is meant to be general,
> and once it's validated, we should not need to touch it much.

Unless security issues come along. And they will.

> We can't do unit tests on the javascript.
>  - Correct. See previous point.

False. Unit tests are entirely possible in Javascript. Whether you
actually _want_ to do them is a different issue. Hint: you don't. :)

You should take a look at how Nevow <http://www.nevow.com/> has
implemented its Freeform module. I'm not saying you need to port your
entire app to Nevow (though it is worth considering), but I think you're
trying to do roughly the same thing. Maybe by emulating some of Nevow's
design decisions, you could get equal performance benefits with a lot
less Javascript magic. An example query:

1. You have a Twisted server running, which serves up web pages. For
example, going to /tasks will show you your task list for today. (I'm
pretending I know anything about what your web app does.)

2. The HTML code for /tasks renders a form, "foo", with a checklist or a
bunch of text fields or whatever else you want.

3. You type in some fields, change values, uncheck stuff, whatever.
Click the Submit button, and it sends a POST to /tasks/formpost!foo.

4. Your Twisted server, receiving this POST, attempts to find the Python
object responsible for handling the URL /tasks/formpost!foo:

 a. First it finds "/", your site root, and asks for "tasks".

 b. Next finds "tasks", which is your TasksPage instance (or something
like that). Twisted asks the TasksPage instance to find a child named
"formpost!foo".

 c. Your TasksPage says, "AHA! I recognize this! It's not really
requesting a separate page. That weird URL tells me to interpret the
form data, modify some internal state or business objects, and then go
right back to the tasks page where I started. Done!"

5. Profit.

This is, with a _lot_ of technical detail missing, what Freeform is all
about -- designing a process for designing objects for which forms can
be automatically rendered and interpreted, with minimal effort on your
part. I'm already using it to design a non-fancy CMS that will power my
web page very soon.

Nevow is currently undergoing some serious reorganization, and after the
refactor, Freeform will have gone from a really cool gizmo to a very
strong, flexible engine. If you're interested in using such a framework,
I suggest getting more information from those developers more closely
involved in the process. (If you don't have an aversion to IRC, the best
place to get the latest scoop is in #twisted.web on irc.freenode.net.)

However, if your team isn't comfortable working with a platform that is
still going through serious changes, just implementing the above process
on your own would, in my view, result in a much better platform for web
development than the Javascript/socket mess you've suggested above.

One man's opinion, writ large. Anyone else?

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040422/e701716c/attachment.bin
From radix at twistedmatrix.com  Thu Apr 22 13:24:53 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu Apr 22 13:25:05 2004
Subject: [Twisted-web] Unwinding the Twisted Web (a progress report)
In-Reply-To: <1082631407.28634.20.camel@localhost>
References: <1082631407.28634.20.camel@localhost>
Message-ID: <40881C05.4000407@twistedmatrix.com>

David Reid wrote:
> I had been trying to straighten out the model for the split since my
> first post to twisted-web regarding it.  Now that radix, and exarkun
> have split twisted.news out of the core codebase as "lowdown". 

Sorry, but we've changed that again. :-) It's now (going to be) 
'tmlabs.news', and the project name will probably remain "Twisted News". 
(This is why we split news first, so we could go back and forth without 
anybody caring about the project we're jerking around. :)

> Since
> then I have begun work on my own source tree of twisted.web, the module
> has been split as "unwound" which is my proposed name as mentioned in
> the numerous naming threads (to be installed as tmlabs.unwound if
> desired.)  

> If there are no complaints about this I'm asking someone (like radix) to
> help me complete the rest of the steps necessary to make this the
> official split so i can start working on changes and enhancements.  The
> things I can't do on my own, atleast not as part of twistedmatrix.com is
> setup the SVN repo and the project page.

I'm kind of apprehensive about doing this split so suddenly, as we 
haven't figured out the process of doing the split with other less 
important packages. e.g., we don't even have a working tmlabs.news 
package yet. Also, I would like to *close* the issue of naming first 
(see below for my opinion). We didn't do that before doing the 
twisted.news split, and we had to do a bunch of extra unnecessary work 
because of it.

> Also it appears if radix and exarkun did not solve (or atleast did not
> implmenet a solution for) the tap naming conflicts.  I.E. if lowdown or
> tmlabs.lowdown is going to use mktap news or mktap lowdown instead.

Actually, we did. The solution is to REMOVE the tap from Twisted proper. 
In fact, we removed *all* news/nntp code from Twisted proper, and just 
put in compatibility modules that imported stuff from lowdown (soon to 
be changed to tmlabs.news). So there is backwards compatibility for 
SOURCE, but you need to install the new package if you want it. That new 
package provides the (only) tapper.


> Other than that, Unwound is currently a useable tree of twisted.web At
> revision 10601.
> 
> (I'm open to changing the name to either tmlabs.web or some cute/catchy
> name other than 'unwound', but ultimately I think that is a policy
> decision that falls on the core twisted devs.)

Indeed, I think we should stick with the current names, with only a 
s/twisted/tmlabs/ change.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040422/87e9c7cc/signature.bin
From foom at fuhm.net  Thu Apr 22 16:09:07 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu Apr 22 16:09:13 2004
Subject: [Twisted-web] Unwinding the Twisted Web (a progress report)
In-Reply-To: <1082631407.28634.20.camel@localhost>
References: <1082631407.28634.20.camel@localhost>
Message-ID: <ACCAA906-94A9-11D8-8D82-000A95A50FB2@fuhm.net>

So a few things:
- I think we should dump woven.
- What is our compatibility story with old twisted-web? Now is a good 
time to make a break, so I think it should be done. By that I mean, 
new-twisted-web would not guarantee 100% backwards compatibleness with 
the old API. If you want 100% old API, use the old code. Wrappers 
*should* be provided for some normally called methods on 
Resource/Request such that much of people's old code will work, if it's 
doing normal resourcish stuff and not trying to be tricksy.
- So, should a final release of OldTwistedWeb be done so people can 
keep updating to newer versions of twisted core and leave old twisted 
web alone?

James


From dreid at dreid.org  Thu Apr 22 16:24:53 2004
From: dreid at dreid.org (David Reid)
Date: Thu Apr 22 16:24:35 2004
Subject: [Twisted-web] Unwinding the Twisted Web (a progress report)
In-Reply-To: <ACCAA906-94A9-11D8-8D82-000A95A50FB2@fuhm.net>
References: <1082631407.28634.20.camel@localhost>
	<ACCAA906-94A9-11D8-8D82-000A95A50FB2@fuhm.net>
Message-ID: <1082672693.28634.23.camel@localhost>

On Thu, 2004-04-22 at 15:09, James Y Knight wrote:
> So a few things:
> - I think we should dump woven.
> - What is our compatibility story with old twisted-web? Now is a good 
> time to make a break, so I think it should be done. By that I mean, 
> new-twisted-web would not guarantee 100% backwards compatibleness with 
> the old API. If you want 100% old API, use the old code. Wrappers 
> *should* be provided for some normally called methods on 
> Resource/Request such that much of people's old code will work, if it's 
> doing normal resourcish stuff and not trying to be tricksy.
> - So, should a final release of OldTwistedWeb be done so people can 
> keep updating to newer versions of twisted core and leave old twisted 
> web alone?
> 
> James

If so the work of splitting out a working codebase for oldweb has been
done, a rename should be rendered trivial by a quick sed script.

-- David


From radix at twistedmatrix.com  Thu Apr 22 17:27:07 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu Apr 22 17:26:58 2004
Subject: [Twisted-web] Unwinding the Twisted Web (a progress report)
In-Reply-To: <ACCAA906-94A9-11D8-8D82-000A95A50FB2@fuhm.net>
References: <1082631407.28634.20.camel@localhost>
	<ACCAA906-94A9-11D8-8D82-000A95A50FB2@fuhm.net>
Message-ID: <408854CB.20503@twistedmatrix.com>

James Y Knight wrote:
> So a few things:
> - I think we should dump woven.

We never deprecated it :-(

> - What is our compatibility story with old twisted-web? Now is a good 
> time to make a break, so I think it should be done. By that I mean, 
> new-twisted-web would not guarantee 100% backwards compatibleness with 
> the old API. If you want 100% old API, use the old code. Wrappers 
> *should* be provided for some normally called methods on 
> Resource/Request such that much of people's old code will work, if it's 
> doing normal resourcish stuff and not trying to be tricksy.
> - So, should a final release of OldTwistedWeb be done so people can keep 
> updating to newer versions of twisted core and leave old twisted web alone?

I think we should just put all backwards-compatibility code into 
twisted.web. So twisted.web will be API-compatible, and all of our BC 
code will live in Twisted. It will still require tmlabs.web (or 
whatever), and just wrap its APIs.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040422/59560503/signature.bin
From missive at hotmail.com  Thu Apr 22 21:51:12 2004
From: missive at hotmail.com (Lee Harr)
Date: Thu Apr 22 21:52:00 2004
Subject: [Twisted-web] Re: session, quick one
Message-ID: <BAY2-F149u64drR8jAM00031157@hotmail.com>

>
>I have troubles with my web sessions. They seem to expire after 20min or
>so.
>How do I set the expiration time for sessions in twisted?
>
>I already tried to set the cookie's expiration time which holds the
>session id but did not have any luck with that.
>


I tried this ...

cd .../Nevow/
grep -rin expire *

... and found a bunch of session stuff in nevow/guard.py


    # timeouts and expiration

    def setLifetime(self, lifetime):
        """Set the approximate lifetime of this session, in seconds.

        This is highly imprecise, but it allows you to set some general
        parameters about when this session will expire.  A callback will be
        scheduled each 'lifetime' seconds, and if I have not been 
'touch()'ed
        in half a lifetime, I will be immediately expired.
        """
        self.lifetime = lifetime

[etc...]

_________________________________________________________________
Add photos to your messages with MSN 8. Get 2 months FREE*. 
http://join.msn.com/?page=features/featuredemail


From foom at fuhm.net  Fri Apr 23 09:46:17 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri Apr 23 09:46:30 2004
Subject: [Twisted-web] Unwinding the Twisted Web (a progress report)
In-Reply-To: <408854CB.20503@twistedmatrix.com>
References: <1082631407.28634.20.camel@localhost>
	<ACCAA906-94A9-11D8-8D82-000A95A50FB2@fuhm.net>
	<408854CB.20503@twistedmatrix.com>
Message-ID: <5C1F24A8-953D-11D8-8D82-000A95A50FB2@fuhm.net>

On Apr 22, 2004, at 7:27 PM, Christopher Armstrong wrote:
> I think we should just put all backwards-compatibility code into 
> twisted.web. So twisted.web will be API-compatible, and all of our BC 
> code will live in Twisted. It will still require tmlabs.web (or 
> whatever), and just wrap its APIs.

Lofty goal -- but I'm not sure it's actually possible. See current 
state of Nevow compatibility. It's somewhat backwards compatible, and 
works for "normal" resources, but has certain things that don't quite 
work together due to new resource API. Do you think that's fixable? I 
have not spent a great amount of time looking for a solution so there 
may be one but I didn't see an easy fix.

Or do you mean backwards compatible in that you could the old API, but 
it won't necessarily work if you use it with the new API in the same 
app? Perhaps just that twisted.web.* has been reimplemented such that 
its internals are now written in terms of tmlabs.web but it's otherwise 
a separate world? If so, I'm not sure that's actually worth much.

James


From mailinglists at shechen.at  Fri Apr 23 13:31:01 2004
From: mailinglists at shechen.at (noema)
Date: Fri Apr 23 13:30:13 2004
Subject: [Twisted-web] Re: session, quick one
Message-ID: <opr6xchzug3lm9gq@mail.geekmail.cc>



...I should have said that in the first place: I am trying to set the 
lifetime of my session but I am not using nevow. Here is the code I use to 
retrieve the session. It works fine but the session times out every 20min 
or so:

if not request.session:
      cookiename = string.join(['TWISTED_SESSION'] \
          + request.sitepath, "_")
      sessionCookie = request.getCookie(cookiename)
      if sessionCookie:
          print 'SESSION RETRIVING'
          try:
              request.session = \
                   request.site.getSession(sessionCookie)
          except KeyError:
              pass
      # if it still hasn't been set, fix it up.
      if not request.session:
          print 'SESSION NEW'
          request.session = request.site.makeSession()
          request.addCookie(cookiename, request.session.uid, path='/')
          request.session.state = m_web.State(self.glo)



This code seems to be too complicated (too low level) anyways. I was 
hoping for something simple like: 
request.getCurrentOrNewsSession(lifetime=7200)


#noema

From mesozoic at polynode.com  Fri Apr 23 13:49:22 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Fri Apr 23 13:49:59 2004
Subject: [Twisted-web] Re: Unwinding the Twisted Web (a progress report)
In-Reply-To: <5C1F24A8-953D-11D8-8D82-000A95A50FB2@fuhm.net>
References: <1082631407.28634.20.camel@localhost>
	<ACCAA906-94A9-11D8-8D82-000A95A50FB2@fuhm.net>
	<408854CB.20503@twistedmatrix.com>
	<5C1F24A8-953D-11D8-8D82-000A95A50FB2@fuhm.net>
Message-ID: <1082749762.25380.244.camel@hyla>

On Fri, 2004-04-23 at 11:46, James Y Knight wrote:
> On Apr 22, 2004, at 7:27 PM, Christopher Armstrong wrote:
> > I think we should just put all backwards-compatibility code into 
> > twisted.web. So twisted.web will be API-compatible, and all of our BC 
> > code will live in Twisted. It will still require tmlabs.web (or 
> > whatever), and just wrap its APIs.
> 
> Lofty goal -- but I'm not sure it's actually possible. See current 
> state of Nevow compatibility.

I think what we need is a situation where applications written entirely
with twisted.web.*, and no Nevow whatsoever, still function properly.
Breaking backwards-compatibility for all those users would be a big
mistake.

I believe this is what Chris has been talking about -- right?

If we can't maintain that backwards-compatibility through wrapper APIs,
then we should leave the old twisted.web in the Twisted package for at
least one or two release cycles, pepper it with DeprecationWarnings, and
do our best to tell users to either spend the minimal effort porting
their app to tmlabs.web, or to keep using old versions of Twisted.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040423/bbaac2a8/attachment.bin
From dp at ulaluma.com  Fri Apr 23 18:19:58 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Fri Apr 23 18:20:19 2004
Subject: [Twisted-web] Re: session, quick one
In-Reply-To: <opr6xchzug3lm9gq@mail.geekmail.cc>
References: <opr6xchzug3lm9gq@mail.geekmail.cc>
Message-ID: <1E7015AF-9585-11D8-A664-000A95864FC4@ulaluma.com>


On Apr 23, 2004, at 3:31 PM, noema wrote:

> ...I should have said that in the first place: I am trying to set the 
> lifetime of my session but I am not using nevow. Here is the code I 
> use to retrieve the session. It works fine but the session times out 
> every 20min or so:

First of all, for old twisted.web code, just use request.getSession(). 
This does what you appear to have recreated yourself in the code you 
pasted, and what you seem to be asking for in the method name 
request.getCurrentOrNewSession (That's what request.getSession already 
does).

Unfortunately, it doesn't have your proposed lifetime=7200 argument, 
and the lifetime is totally hardcoded into the session. I recommend 
reading twisted.web.server.Request.getSession and 
twisted.web.server.Session; it's not that much code. If you notice, 
Session.checkExpired checks whether to expire the session every 15 
minutes. You might want to create your own code which touches the 
session every 10 minutes or so (by calling touch()) and expires it when 
you like (by calling expire()).

We'll keep this in mind for the upcoming twisted.web cleanup and 
refactoring.

dp


From nico at tekNico.net  Sat Apr 24 00:29:50 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Sat Apr 24 00:29:05 2004
Subject: [Twisted-web] Re: session, quick one
In-Reply-To: <1E7015AF-9585-11D8-A664-000A95864FC4@ulaluma.com>
References: <opr6xchzug3lm9gq@mail.geekmail.cc>
	<1E7015AF-9585-11D8-A664-000A95864FC4@ulaluma.com>
Message-ID: <408A095E.6030508@tekNico.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

> Unfortunately, it doesn't have your proposed lifetime=7200 argument, and
> the lifetime is totally hardcoded into the session. I recommend reading
> twisted.web.server.Request.getSession and twisted.web.server.Session;
> it's not that much code. If you notice, Session.checkExpired checks
> whether to expire the session every 15 minutes. You might want to create
> your own code which touches the session every 10 minutes or so (by
> calling touch()) and expires it when you like (by calling expire()).
>
> We'll keep this in mind for the upcoming twisted.web cleanup and
> refactoring.

Yeah, parameterized session timeouts would be really helpful.


- --
Nicola Larosa - nico@tekNico.net

"I know, no one's gonna show me everything
We all come and go unknown
Each so deep and superficial
Between the forceps and the stone"
 -- Joni Mitchell, Hejira, 1976


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)

iD8DBQFAiglRXv0hgDImBm4RApFeAJ9UFWMAWSS98K+A0NsaJDFOBrFr6ACfe6SN
mIVvNCG9ODIOEjAXIoj2L0g=
=Ov1u
-----END PGP SIGNATURE-----

From foom at fuhm.net  Sat Apr 24 01:34:50 2004
From: foom at fuhm.net (James Y Knight)
Date: Sat Apr 24 01:34:56 2004
Subject: [Twisted-web] Web rewrite plan
Message-ID: <DEE6BAB7-95C1-11D8-8D82-000A95A50FB2@fuhm.net>

Okay, so I branched Twisted to start the web rewrite in twisted.web 
now, since it has been declared that the tmlabs name change isn't going 
to happen. This leaves the web rewrite without a reasonable home, but 
for now, we're going to ignore that. So, web rewrite is just going to 
happen in a branched copy of twisted.web. This may not be its final 
home, because it is not a goal to be completely API compatible, but for 
now, that is where it's going to be hacked upon. Once the whole naming 
thing is *actually* decided, we can move it somewhere else.

svn://svn.twistedmatrix.com/svn/Twisted/branches/new-web

Somewhat repeating my earlier email: here's what's going to happen on 
this branch:
- Rewrite of http.py
- Removal of old cruft
- Integration of Nevow generic web stuff: appserver, guard.
- Fixup of rest of files to work right with nevow-originated API 
changes.

I will continue working on http.py separately in my sandbox until it 
mostly works, and will integrate with this branch then.
dreid has said he'll start working on integration of nevow generic web 
stuff and removal of ancient cruft once he bludgeons radix into giving 
him commit access.

Open question: does Nevow go into twisted/web/? If so, how do we handle 
standalone (not depending on twisted at all) nevow? Perhaps standalone 
nevow is just a branch of twisted/web/nevow/ with appropriate 
modifications? If nevow isn't a package in twisted/web, dirlist and 
failure can't go into twisted.web because they depend on Nevow.

James


From Harald.Nyman at AstraZeneca.com  Sat Apr 24 01:47:57 2004
From: Harald.Nyman at AstraZeneca.com (Harald.Nyman@AstraZeneca.com)
Date: Sat Apr 24 01:48:22 2004
Subject: [Twisted-web] Re: Twisted & legacy code - Unorthodox? Opinion
	s wanted
Message-ID: <9F028CC77827D611ACEE0002A5F12F0703ECC3AA@semldsntmsx208.seml.astrazeneca.net>

Brethren,

Ok ok, I give in - yes, it's a hack, and no, it doesn't make optimal
use of Twisted. Full confession. Still, I'd humbly like my obituary
to mention that it was a little bit of a "clever" hack - couple days
to put an afterburner on that ole CGI code... :)

Have started to look at Nevow (howz that pronounced anyway??) - looks
interesting!

Peace,
Harald
"Warum es einfach machen, wenn man es so sch?n komplizieren kann!"


> -----Original Message-----
> From: Alex Levy [mailto:mesozoic@polynode.com]
> Sent: Thursday, April 22, 2004 6:58 PM
> To: Discussion of twisted.web, Nevow, and Woven
> Subject: [Twisted-web] Re: Twisted & legacy code - Unorthodox? Opinions
> wanted
> 
> a much better platform for web development than the Javascript/socket
> mess you've suggested above
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/ms-tnef
Size: 2894 bytes
Desc: not available
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040424/d374c6b9/attachment.bin
From mesozoic at polynode.com  Sat Apr 24 02:06:36 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Sat Apr 24 02:07:31 2004
Subject: [Twisted-web] RE: Re: Twisted & legacy code - Unorthodox? Opinion s
	wanted
In-Reply-To: <9F028CC77827D611ACEE0002A5F12F0703ECC3AA@semldsntmsx208.seml.astrazeneca.net>
References: <9F028CC77827D611ACEE0002A5F12F0703ECC3AA@semldsntmsx208.seml.astrazeneca.net>
Message-ID: <1082793996.302.7.camel@hyla>

On Sat, 2004-04-24 at 03:47, Harald.Nyman@AstraZeneca.com wrote:
> Ok ok, I give in - yes, it's a hack, and no, it doesn't make optimal
> use of Twisted. Full confession. Still, I'd humbly like my obituary
> to mention that it was a little bit of a "clever" hack - couple days
> to put an afterburner on that ole CGI code... :)

Did you hear the Darwin Awards story about the guy who strapped a jet
engine onto his old car and took it for a ride? He crashed into the side
of a cliff in the middle of the desert. I think, given the situation you
described earlier, this analogy is very apt.

Sometimes it's better to invest a bit more and just get an F/A-18. ;)

> Have started to look at Nevow (howz that pronounced anyway??) - looks
> interesting!

'Nouveau'. It's actually a pun on the previous Twisted web framework,
which was called 'Woven'. Welcome to the community. There is no escape.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040424/98b581de/attachment.bin
From dp at ulaluma.com  Sat Apr 24 10:26:19 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Sat Apr 24 10:26:31 2004
Subject: [Twisted-web] Web rewrite plan
In-Reply-To: <DEE6BAB7-95C1-11D8-8D82-000A95A50FB2@fuhm.net>
References: <DEE6BAB7-95C1-11D8-8D82-000A95A50FB2@fuhm.net>
Message-ID: <1DBE0DC8-960C-11D8-B799-000A95864FC4@ulaluma.com>


On Apr 24, 2004, at 3:34 AM, James Y Knight wrote:

> Open question: does Nevow go into twisted/web/? If so, how do we 
> handle standalone (not depending on twisted at all) nevow? Perhaps 
> standalone nevow is just a branch of twisted/web/nevow/ with 
> appropriate modifications? If nevow isn't a package in twisted/web, 
> dirlist and failure can't go into twisted.web because they depend on 
> Nevow.

Here is what I am thinking: Nevow should be a standalone package, but 
should also be included with twisted.web. I would prefer that  nevow 
*not* be included in the twisted. package, but be shipped with the 
twisted.web tarball.

dp


From matt at pollenation.net  Sun Apr 25 03:39:35 2004
From: matt at pollenation.net (Matt Goodall)
Date: Sun Apr 25 03:40:13 2004
Subject: [Twisted-web] Web rewrite plan
In-Reply-To: <1DBE0DC8-960C-11D8-B799-000A95864FC4@ulaluma.com>
References: <DEE6BAB7-95C1-11D8-8D82-000A95A50FB2@fuhm.net>
	<1DBE0DC8-960C-11D8-B799-000A95864FC4@ulaluma.com>
Message-ID: <1082885975.18882.1302.camel@debian>

On Sat, 2004-04-24 at 17:26, Donovan Preston wrote:
> On Apr 24, 2004, at 3:34 AM, James Y Knight wrote:
> 
> > Open question: does Nevow go into twisted/web/? If so, how do we 
> > handle standalone (not depending on twisted at all) nevow? Perhaps 
> > standalone nevow is just a branch of twisted/web/nevow/ with 
> > appropriate modifications? If nevow isn't a package in twisted/web, 
> > dirlist and failure can't go into twisted.web because they depend on 
> > Nevow.
> 
> Here is what I am thinking: Nevow should be a standalone package, but 
> should also be included with twisted.web. I would prefer that  nevow 
> *not* be included in the twisted. package, but be shipped with the 
> twisted.web tarball.

I agree that Nevow should be a standalone framework but I'm not
convinced that bundling Nevow with t.web is good for either of them.

t.web (http protocol, request/resource interface, http client and http
server (including vhost, ditrib, rewrite, etc)) makes a great base for
web application frameworks, web services, web servers etc. Once the
current limitations have been addressed I doubt there will be a great
need for further releases other than bug fixing.

Nevow is an application framework. Its requirements are largely driven
by applications, much more so than t.web anyway. I suspect that Nevow
will need more frequest updates than t.web, i.e. even smarter form
processing, pluggable validation and general refactoring to support more
use cases. Many of these requirements will only become apparent as the
application are developed.

So to summarise ... I think a stable http+t.web and an evolving,
uber-cool Nevow, distributed separately, would be the ideal solution.

I do realise that there is some overlap between t.web and a useful,
standalone Nevow (app server, static, not found etc) and I haven't got
any great ideas about how to "solve" that issue.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From justinjohnson at fastmail.fm  Sun Apr 25 07:04:51 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Sun Apr 25 07:04:58 2004
Subject: [Twisted-web] Re: [Divmod-dev] LiveEvil for Internet Explorer?
In-Reply-To: <EB57C9DC698BFD4ABCF186EDB81A565101BEF0B0@lacamail.ad.gd-ais.com>
References: <EB57C9DC698BFD4ABCF186EDB81A565101BEF0B0@lacamail.ad.gd-ais.com>
Message-ID: <1082898291.30748.185064731@webmail.messagingengine.com>

This should probably move to the twisted-web list.

Donovan had a working version that required flash in woven (called
LivePage then).  Unfortunately the current version doesn't work with IE
because IE doesn't implement its XMLHTTPRequest object the way microsoft
documented it.  :-(

I did get a working version that uses the XMLHTTPRequest object to
perform refreshes in the background, looking for more JS to execute. 
Last I checked it worked with the latest Nevow.  See
sandbox/justinj/liveevil.py in the Nevow repository.  Your code should be
the same as for normal liveevil, except you use refreshGlue instead of
glue, passing in a refresh rate, and you have to call activate and
deactivate to determine when you want to start and stop refreshing.  This
was necessary in order to just stop needless refreshing, but also to
guarantee you don't have left over JS from a previous page get sent to
the wrong page.  So once deactive is called, future sendScripts are just
ignored, until you call activate again.

Let me know if you have any problems with it.
-Justin

On Sat, 24 Apr 2004 13:06:01 -0700, "Kurisaki, Lance"
<lance.kurisaki@gd-ais.com> said:
> Hi, 
>         Has anyone gotten LiveEvil to work with Internet Explorer? Any
>         plans
> for it in the future? Thanks... 
>                                         Lance Kurisaki 
> 
> _______________________________________________
> Divmod-dev mailing list
> Divmod-dev@divmod.org
> http://divmod.org/users/mailman.twistd/listinfo/divmod-dev

From wilk-ml at flibuste.net  Sun Apr 25 11:32:37 2004
From: wilk-ml at flibuste.net (William Dode)
Date: Sun Apr 25 11:32:44 2004
Subject: [Twisted-web] Web rewrite plan
In-Reply-To: <1082885975.18882.1302.camel@debian> (Matt Goodall's message of
	"Sun, 25 Apr 2004 10:39:35 +0100")
References: <DEE6BAB7-95C1-11D8-8D82-000A95A50FB2@fuhm.net>
	<1DBE0DC8-960C-11D8-B799-000A95864FC4@ulaluma.com>
	<1082885975.18882.1302.camel@debian>
Message-ID: <87wu44x8sq.fsf@blakie.riol>

Matt Goodall <matt@pollenation.net> writes:

> On Sat, 2004-04-24 at 17:26, Donovan Preston wrote:
>> On Apr 24, 2004, at 3:34 AM, James Y Knight wrote:
>> 
>> > Open question: does Nevow go into twisted/web/? If so, how do we 
>> > handle standalone (not depending on twisted at all) nevow? Perhaps 
>> > standalone nevow is just a branch of twisted/web/nevow/ with 
>> > appropriate modifications? If nevow isn't a package in twisted/web, 
>> > dirlist and failure can't go into twisted.web because they depend on 
>> > Nevow.
>> 
>> Here is what I am thinking: Nevow should be a standalone package, but 
>> should also be included with twisted.web. I would prefer that  nevow 
>> *not* be included in the twisted. package, but be shipped with the 
>> twisted.web tarball.
>
> I agree that Nevow should be a standalone framework but I'm not
> convinced that bundling Nevow with t.web is good for either of them.
>
> t.web (http protocol, request/resource interface, http client and http
> server (including vhost, ditrib, rewrite, etc)) makes a great base for
> web application frameworks, web services, web servers etc. Once the
> current limitations have been addressed I doubt there will be a great
> need for further releases other than bug fixing.

Could we imagine that t.web become part of standard lib of python ?

-- 
William - http://flibuste.net

From stephen at thorne.id.au  Mon Apr 26 02:05:52 2004
From: stephen at thorne.id.au (Stephen Thorne)
Date: Mon Apr 26 02:10:09 2004
Subject: [Twisted-web] Web rewrite plan
In-Reply-To: <87wu44x8sq.fsf@blakie.riol>
References: <DEE6BAB7-95C1-11D8-8D82-000A95A50FB2@fuhm.net>
	<1DBE0DC8-960C-11D8-B799-000A95864FC4@ulaluma.com>
	<1082885975.18882.1302.camel@debian> <87wu44x8sq.fsf@blakie.riol>
Message-ID: <20040426080552.GA22238@thorne.id.au>

On Sun, Apr 25, 2004 at 07:32:37PM +0200, William Dode wrote:
> Could we imagine that t.web become part of standard lib of python ?

Only in nightmares.

Python standard lib stuff is *extremely* stable, we don't have the power
to remake/break the api, etc, if its in the standard lib.

I believe the feeling is that we're better off being completely seperate
from the python standard libraries, for that reason.

Stephen.


From justinjohnson at fastmail.fm  Thu Apr 29 08:53:36 2004
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Thu Apr 29 08:53:43 2004
Subject: [Twisted-web] Validator -> InputProcessor Patch
Message-ID: <1083250416.13131.185347715@webmail.messagingengine.com>

Attached is a patch for performing the steps outlined at
http://divmod.org/users/wiki.twistd/nevow/moin.cgi/DesignDiscussion in
the Proposal section.

Please send feedback.
Thanks.
-Justin
-------------- next part --------------
Index: nevow/test/test_formless.py
===================================================================
--- nevow/test/test_formless.py	(revision 231)
+++ nevow/test/test_formless.py	(working copy)
@@ -12,102 +12,113 @@
 class Typed(TestCase):
     def testString(self):
         s = formless.String()
-        self.assertEquals(s.coerce(""), None)
+        self.assertEquals(s.coerce(""), "")
         self.assertEquals(s.coerce("Fooo"), "Fooo")
         self.assertEquals(s.coerce("This is a string"), "This is a string")
 
-        s = formless.String(allowNone=False)
-        self.assertRaises(formless.InputError, s.coerce, "")
+        # Requiredness should be tested in freeform, since that
+	# happens in *InputProcessor.process now.
+        #s = formless.String(required=True)
+        #self.assertRaises(formless.InputError, s.coerce, "")
         
-        s = formless.String(allowNone=True)
+        s = formless.String()
         self.assertEquals(s.coerce("Bar"), "Bar")
-        self.assertEquals(s.coerce(""), None)
+        self.assertEquals(s.coerce(""), "")
     
         s = formless.String()
         self.assertEquals(s.coerce(' abc '), ' abc ')
         
-        s = formless.String(strip=True, allowNone=False)
+        s = formless.String(strip=True, required=True)
         self.assertEquals(s.coerce(' abc '), 'abc')
         self.assertEquals(s.coerce('\t abc \t  \n '), 'abc')
-        self.assertRaises(formless.InputError, s.coerce, ' ')
+	# This test should be moved to freeform, and should use
+	# TypedInputProcessor.process instead of String.coerce.
+        #self.assertRaises(formless.InputError, s.coerce, ' ')
         
-        s = formless.String(allowNone=True, strip=True)
+        s = formless.String(strip=True)
         self.assertEquals(s.coerce(' abc '), 'abc')
-        self.assertEquals(s.coerce(' '), None)
+        self.assertEquals(s.coerce(' '), '')
         
     def testText(self):
         s = formless.Text()
-        self.assertEquals(s.coerce(""), None)
+        self.assertEquals(s.coerce(""), "")
         self.assertEquals(s.coerce("Fooo"), "Fooo")
         self.assertEquals(s.coerce("This is a string"), "This is a string")
 
-        s = formless.Text(allowNone=False)
-        self.assertRaises(formless.InputError, s.coerce, "")
+        # Move to freeform and call TypedInputProcessor.process
+        # instead of Text.coerce.
+        #s = formless.Text(required=True)
+        #self.assertRaises(formless.InputError, s.coerce, "")
         
-        s = formless.Text(allowNone=True)
+        s = formless.Text()
         self.assertEquals(s.coerce("Bar"), "Bar")
-        self.assertEquals(s.coerce(""), None)
+        self.assertEquals(s.coerce(""), "")
         
         s = formless.Text()
         self.assertEquals(s.coerce(' abc '), ' abc ')
         
-        s = formless.Text(strip=True, allowNone=False)
+        s = formless.Text(strip=True, required=True)
         self.assertEquals(s.coerce(' abc '), 'abc')
-        self.assertRaises(formless.InputError, s.coerce, ' ')
+        # Move to freeform and call TypedInputProcessor.process
+        # instead of Text.coerce.
+        #self.assertRaises(formless.InputError, s.coerce, ' ')
         
-        s = formless.Text(allowNone=True, strip=True)
+        s = formless.Text(strip=True)
         self.assertEquals(s.coerce(' abc '), 'abc')
-        self.assertEquals(s.coerce(' '), None)
+        self.assertEquals(s.coerce(' '), "")
         
     def testPassword(self):
         s = formless.Password()
         self.assertEquals(s.coerce("Fooo"), "Fooo")
         self.assertEquals(s.coerce("This is a string"), "This is a string")
 
-        s = formless.Password(allowNone=False)
-        self.assertRaises(formless.InputError, s.coerce, "")
+        # Move to freeform and call TypedInputProcessor.process
+        # instead of Text.coerce.
+        #s = formless.Password(required=True)
+        #self.assertRaises(formless.InputError, s.coerce, "")
         
-        s = formless.Password(allowNone=True)
+        s = formless.Password()
         self.assertEquals(s.coerce("Bar"), "Bar")
-        self.assertEquals(s.coerce(""), None)
+        self.assertEquals(s.coerce(""), "")
     
         s = formless.Password()
         self.assertEquals(s.coerce(' abc '), ' abc ')
         
-        s = formless.Password(strip=True, allowNone=False)
+        s = formless.Password(strip=True, required=True)
         self.assertEquals(s.coerce(' abc '), 'abc')
-        self.assertRaises(formless.InputError, s.coerce, ' ')
+        # Move to freeform and call TypedInputProcessor.process
+        # instead of Text.coerce.
+        #self.assertRaises(formless.InputError, s.coerce, ' ')
         
-        s = formless.Password(allowNone=True, strip=True)
+        s = formless.Password(strip=True)
         self.assertEquals(s.coerce(' abc '), 'abc')
-        self.assertEquals(s.coerce(' '), None)
+        self.assertEquals(s.coerce(' '), '')
         
     def testInteger(self):
-        i = formless.Integer(allowNone=False)
+        # Note: these tests don't check requiredness
+        i = formless.Integer(required=True)
         self.assertEquals(i.coerce("0"), 0)
         self.assertEquals(i.coerce("3409823098"), 3409823098)
         self.assertRaises(formless.InputError, i.coerce, "")
         self.assertRaises(formless.InputError, i.coerce, "a string")
         self.assertRaises(formless.InputError, i.coerce, "1.5")
         
-        i = formless.Integer(allowNone=True)
+        i = formless.Integer()
         self.assertEquals(i.coerce("1234567"), 1234567)
-        self.assertEquals(i.coerce(""), None)
         
     def testReal(self):
-        i = formless.Real(allowNone=False)
+        i = formless.Real(required=True)
         self.assertApproximates(i.coerce("0.0"), 0.0, 1e-10)
         self.assertApproximates(i.coerce("34098.23098"), 34098.23098, 1e-10)
         self.assertRaises(formless.InputError, i.coerce, "")
         self.assertRaises(formless.InputError, i.coerce, "a string")
         self.assertRaises(formless.InputError, i.coerce, "1.5j")
 
-        i = formless.Real(allowNone=True)
+        i = formless.Real()
         self.assertApproximates(i.coerce("1234.567"), 1234.567, 1e-10)
-        self.assertEquals(i.coerce(""), None)
 
     def testBoolean(self):
-        b = formless.Boolean(allowNone=False)
+        b = formless.Boolean(required=True)
         self.assertRaises(formless.InputError, b.coerce, "zoom")
         self.assertRaises(formless.InputError, b.coerce, True)
         self.assertRaises(formless.InputError, b.coerce, 54)
@@ -115,14 +126,14 @@
         self.assertEquals(b.coerce("True"), True)
         self.assertEquals(b.coerce("False"), False)
 
-        b = formless.Boolean(allowNone=True)
+        b = formless.Boolean()
         self.assertRaises(formless.InputError, b.coerce, "zoom")
-        self.assertEquals(b.coerce(""), None)
+        self.assertRaises(formless.InputError, b.coerce, "")
         self.assertEquals(b.coerce("True"), True)
         self.assertEquals(b.coerce("False"), False)
         
     def testFixedDigitInteger(self):
-        d = formless.FixedDigitInteger(3, allowNone=False)
+        d = formless.FixedDigitInteger(3, required=True)
         self.assertEquals(d.coerce("123"), 123)
         self.assertEquals(d.coerce("567"), 567)
         self.assertRaises(formless.InputError, d.coerce, "12")
@@ -132,10 +143,10 @@
         self.assertRaises(formless.InputError, d.coerce, "   ")
         self.assertRaises(formless.InputError, d.coerce, "")
 
-        d = formless.FixedDigitInteger(3, allowNone=True)
+        d = formless.FixedDigitInteger(3)
         self.assertEquals(d.coerce("123"), 123)
         self.assertRaises(formless.InputError, d.coerce, "foo")
-        self.assertEquals(d.coerce(""), None)
+        self.assertRaises(formless.InputError, d.coerce, "")
         
 
     def testDirectory(self):
@@ -143,15 +154,15 @@
         os.mkdir(p1)
         p2 = self.mktemp()
         
-        d = formless.Directory(allowNone=False)
+        d = formless.Directory(required=True)
         self.assertEquals(d.coerce(p1), p1)
         self.assertRaises(formless.InputError, d.coerce, p2)
         self.assertRaises(formless.InputError, d.coerce, "")
         
-        d = formless.Directory(allowNone=True)
+        d = formless.Directory()
         self.assertEquals(d.coerce(p1), p1)
         self.assertRaises(formless.InputError, d.coerce, p2)
-        self.assertEquals(d.coerce(""), None)
+        self.assertRaises(formless.InputError, d.coerce, "")
         
     def testTypedInterfaceProperties(self):
         class Test(formless.TypedInterface):
Index: nevow/formless.py
===================================================================
--- nevow/formless.py	(revision 231)
+++ nevow/formless.py	(working copy)
@@ -107,7 +107,7 @@
 class ITyped(Interface):
     """Typeds correspond roughly to <input> tags in HTML, or
     with a complex type, more than one <input> tag whose input
-    is validated and coerced as a unit.
+    is processed and coerced as a unit.
     """
     def coerce(self, val):
         """OPTIONAL.
@@ -174,12 +174,14 @@
 
     complexType = False
 
-    def __init__(self, label='', description='', default='', allowNone=True, **attributes):
+    def __init__(self, label='', description='', default='', required=False,
+                 requiredFailMessage='Please enter a value', **attributes):
         self.id = nextId()
         self.label = label
         self.description = description
         self.default = default
-        self.allowNone=allowNone
+        self.required=required
+        self.requiredFailMessage=requiredFailMessage
         self.attributes = attributes
 
     def getAttribute(self, name, default=None):
@@ -189,32 +191,18 @@
         raise NotImplementedError, "Implement in subclass"
 
 
-class AllowNoneMixin:
-    """Mixin for typed types that helps with checking for allowNone."""
-
-    allowNoneFailMessage = 'Please enter a value.'
-
-    def coerce(self, val):
-        if val == '':
-            if self.allowNone:
-                return None
-            raise InputError(self.allowNoneFailMessage)
-        return val
-
-    
-
 #######################################
 ## External API; your code will create instances of these objects
 #######################################
 
-class String(Typed, AllowNoneMixin):
+class String(Typed):
     """A string that is expected to be reasonably short and contain no
     newlines or tabs.
 
     strip: remove leading and trailing whitespace.
     """
 
-    allowNoneFailMessage = 'Please enter a string.'
+    requiredFailMessage = 'Please enter a string.'
 
     def __init__(self, *args, **kwargs):
         if 'strip' in kwargs:
@@ -227,7 +215,7 @@
     def coerce(self, val):
         if self.strip:
             val = val.strip()
-        return AllowNoneMixin.coerce(self, val)
+        return val
 
 
 class Text(String):
@@ -237,24 +225,22 @@
 
 
 class Password(String):
-    allowNoneFailMessage = 'Please enter a password.'
+    requiredFailMessage = 'Please enter a password.'
 
 
-class FileUpload(Typed, AllowNoneMixin):
+class FileUpload(Typed):
 
-    allowNoneFailMessage = 'Please enter a file name.'
+    requiredFailMessage = 'Please enter a file name.'
 
     def coerce(self, val):
-        AllowNoneMixin.coerce(self, val.filename)
-        return val
+        return val.filename
 
 
-class Integer(Typed, AllowNoneMixin):
+class Integer(Typed):
 
-    allowNoneFailMessage = 'Please enter an integer.'
+    requiredFailMessage = 'Please enter an integer.'
 
     def coerce(self, val):
-        val = AllowNoneMixin.coerce(self, val)
         if val is None:
             return None
         try:
@@ -269,12 +255,11 @@
             raise InputError("%r is not an integer." % val)
 
 
-class Real(Typed, AllowNoneMixin):
+class Real(Typed):
 
-    allowNoneFailMessage = 'Please enter a real number.'
+    requiredFailMessage = 'Please enter a real number.'
 
     def coerce(self, val):
-        val = AllowNoneMixin.coerce(self, val)
         if val is None:
             return None
         try:
@@ -285,9 +270,7 @@
 
 class Boolean(Typed):
     def coerce(self, val):
-        if self.allowNone and val=='':
-            return None
-        elif val == 'False':
+        if val == 'False':
             return False
         elif val == 'True':
             return True
@@ -299,24 +282,21 @@
     def __init__(self, digits = 1, *args, **kw):
         Integer.__init__(self, *args, **kw)
         self.digits = digits
-        self.allowNoneFailMessage = \
+        self.requiredFailMessage = \
             'Please enter a %d digit integer.' % self.digits
 
     def coerce(self, val):
-        if self.allowNone and val=='':
-            return None
         v = Integer.coerce(self, val)
         if len(str(v)) != self.digits:
             raise InputError("Number must be %s digits." % self.digits)
         return v
 
 
-class Directory(Typed, AllowNoneMixin):
+class Directory(Typed):
     
-    allowNoneFailMessage = 'Please enter a directory name.'
+    requiredFailMessage = 'Please enter a directory name.'
 
     def coerce(self, val):
-        val = AllowNoneMixin.coerce(self, val)
         if val is None:
             return None
         if not os.path.exists(val):
@@ -343,8 +323,6 @@
         """Coerce a value with the help of an object, which is the object
         we are configuring.
         """
-        if self.allowNone and val == '':
-            return None
         try:
             val = int(val)
         except ValueError:
@@ -958,8 +936,8 @@
             ctx.remember(binding, IBinding)
             ctx.remember(configurable, IConfigurable)
 
-        bindingValidator = inevow.IInputValidator(binding)
-        rv = bindingValidator.validate(ctx, binding.boundTo, args)
+        bindingInputProcessor = inevow.IInputProcessor(binding)
+        rv = bindingInputProcessor.process(ctx, binding.boundTo, args)
         ctx.remember(rv, inevow.IHand)
         ctx.remember('%r success.' % bindingName, inevow.IStatusMessage)
         return rv
Index: nevow/freeparking.py
===================================================================
--- nevow/freeparking.py	(revision 231)
+++ nevow/freeparking.py	(working copy)
@@ -29,10 +29,10 @@
         return result
 
     
-class GroupBindingValidator(compy.Adapter):
-    __implements__ =inevow.IInputValidator,
+class GroupBindingInputProcessor(compy.Adapter):
+    __implements__ =inevow.IInputProcessor,
 
-    def validate(self, context, boundTo, data):
+    def process(self, context, boundTo, data):
         ## THE SPEC: self.original.typedValue.interface.__spec__
         spec = self.original.typedValue.interface.__spec__
         resultList = [None] * len(spec)
@@ -41,11 +41,11 @@
         failures = {}
         waiters = []
         for i, sub in enumerate(spec):
-            def _validate():
-                # note, _validate only works because it is called IMMEDIATELY
+            def _process():
+                # note, _process only works because it is called IMMEDIATELY
                 # in the loop, watch out for confusing behavior if it is called
                 # later when 'i' has changed
-                resulti = resultList[i] =inevow.IInputValidator(sub).validate(context, boundTo, data, autoConfigure = False)
+                resulti = resultList[i] =inevow.IInputProcessor(sub).process(context, boundTo, data, autoConfigure = False)
                 # Merge the valid value in case another fails
                 results.update(resulti)
             def _except(e):
@@ -60,7 +60,7 @@
                 results.update(pf)
                 # Merge the error message
                 failures.update(e.errors)
-            maybe = exceptblock(_validate, _except, formless.ValidateError)
+            maybe = exceptblock(_process, _except, formless.ValidateError)
             if isinstance(maybe, Deferred):
                 waiters.append(maybe)
         def _finish(ignored):
@@ -73,11 +73,11 @@
         return DeferredList(waiters).addBoth(_finish)
 
 
-class MethodBindingValidator(compy.Adapter):
-    __implements__ =inevow.IInputValidator,
+class MethodBindingInputProcessor(compy.Adapter):
+    __implements__ =inevow.IInputProcessor,
 
-    def validate(self, context, boundTo, data, autoConfigure = True):
-        """Knows how to validate a dictionary of lists
+    def process(self, context, boundTo, data, autoConfigure = True):
+        """Knows how to process a dictionary of lists
         where the dictionary may contain a key with the same
         name as some of the arguments to the MethodBinding
         instance.
@@ -94,7 +94,7 @@
             try:
                 context = context.with(faketag)
                 context.remember(binding, formless.IBinding)
-                results[name] =inevow.IInputValidator(binding.typedValue).validate(context, boundTo, data.get(name, ['']))
+                results[name] =inevow.IInputProcessor(binding.typedValue).process(context, boundTo, data.get(name, ['']))
             except formless.InputError, e:
                 results[name] = data.get(name, [''])[0]
                 failures[name] = e.reason
@@ -112,11 +112,11 @@
         return results
 
 
-class PropertyBindingValidator(compy.Adapter):
-    __implements__ =inevow.IInputValidator,
+class PropertyBindingInputProcessor(compy.Adapter):
+    __implements__ =inevow.IInputProcessor,
 
-    def validate(self, context, boundTo, data, autoConfigure = True):
-        """Knows how to validate a dictionary of lists
+    def process(self, context, boundTo, data, autoConfigure = True):
+        """Knows how to process a dictionary of lists
         where the dictionary may contain a key with the
         same name as the property binding's name.
         """
@@ -124,7 +124,7 @@
         context.remember(binding, formless.IBinding)
         result = {}
         try:
-            result[binding.name] =inevow.IInputValidator(binding.typedValue).validate(context, boundTo, data.get(binding.name, ['']))
+            result[binding.name] =inevow.IInputProcessor(binding.typedValue).process(context, boundTo, data.get(binding.name, ['']))
         except formless.InputError, e:
             result[binding.name] = data.get(binding.name, [''])
             raise formless.ValidateError({binding.name: e.reason}, e.reason, result)
@@ -134,56 +134,74 @@
         return result
 
 
-class TypedValidator(compy.Adapter):
-    __implements__ =inevow.IInputValidator,
+class TypedInputProcessor(compy.Adapter):
+    __implements__ =inevow.IInputProcessor,
 
-    def validate(self, context, boundTo, data):
+    def process(self, context, boundTo, data):
         """data is a list of strings at this point
         """
         typed = self.original
+
+        if data[0] == '':
+            if typed.required:
+                raise formless.InputError(typed.requiredFailMessage)
+            else:
+                return None
         if hasattr(typed, 'coerceWithBinding'):
             return typed.coerceWithBinding(data[0], boundTo)
         return typed.coerce(data[0])
 
 
-class PasswordValidator(compy.Adapter):
-    __implements__ =inevow.IInputValidator,
+class PasswordInputProcessor(compy.Adapter):
+    __implements__ =inevow.IInputProcessor,
 
-    def validate(self, context, boundTo, data):
+    def process(self, context, boundTo, data):
         """Password needs to look at two passwords in the data,
         """
+        typed = self.original
         pw1 = data[0]
         args = context.locate(inevow.IRequest).args
         binding = context.locate(formless.IBinding)
         pw2 = args.get("%s____2" % binding.name, [''])[0]
-        if pw1 != pw2:
+
+        if pw1 == pw2 == '':
+            if typed.required:
+                raise formless.InputError(typed.requiredFailMessage)
+            else:
+                return None
+        elif pw1 != pw2:
             raise formless.InputError("Passwords do not match. Please reenter.")
         return self.original.coerce(data[0])
 
 
-class RequestValidator(compy.Adapter):
-    __implements__ =inevow.IInputValidator,
+class RequestInputProcessor(compy.Adapter):
+    __implements__ =inevow.IInputProcessor,
 
-    def validate(self, context, boundTo, data):
+    def process(self, context, boundTo, data):
         return context.locate(inevow.IRequest)
 
 
-class ContextValidator(compy.Adapter):
-    __implements__ =inevow.IInputValidator,
+class ContextInputProcessor(compy.Adapter):
+    __implements__ =inevow.IInputProcessor,
 
-    def validate(self, context, boundTo, data):
+    def process(self, context, boundTo, data):
         return context
 
 
-class UploadValidator(compy.Adapter):
-    __implements__ =inevow.IInputValidator,
-    def validate(self, context, boundTo, data):
+class UploadInputProcessor(compy.Adapter):
+    __implements__ =inevow.IInputProcessor,
+    def process(self, context, boundTo, data):
         bind = context.locate(formless.IBinding)
         # TOTAL HACK: this comes from outer space
         fields = context.locate(inevow.IRequest).fields
         try:
             field = fields[bind.name]
-            return self.original.coerce(field)
+            # TODO: Is this the appropriate test?  What is field set to?
+            if field == '':
+                if typed.required:
+                    raise formless.InputError(typed.requiredFailMessage)
+                else:
+                    return None
+            return typed.coerce(field)
         except KeyError:
             return ''
-
Index: nevow/__init__.py
===================================================================
--- nevow/__init__.py	(revision 231)
+++ nevow/__init__.py	(working copy)
@@ -116,15 +116,15 @@
 
     #
 
-nevow.freeparking.GroupBindingValidator    nevow.formless.GroupBinding     nevow.inevow.IInputValidator
-nevow.freeparking.MethodBindingValidator   nevow.formless.MethodBinding    nevow.inevow.IInputValidator
-nevow.freeparking.PropertyBindingValidator nevow.formless.Property         nevow.inevow.IInputValidator
-nevow.freeparking.TypedValidator           nevow.formless.ITyped           nevow.inevow.IInputValidator
-nevow.freeparking.PasswordValidator        nevow.formless.Password         nevow.inevow.IInputValidator
-nevow.freeparking.RequestValidator         nevow.formless.Request          nevow.inevow.IInputValidator
-nevow.freeparking.ContextValidator         nevow.formless.Context          nevow.inevow.IInputValidator
-nevow.freeparking.ListValidator            nevow.formless.List             nevow.inevow.IInputValidator
-nevow.freeparking.UploadValidator          nevow.formless.FileUpload       nevow.inevow.IInputValidator
+nevow.freeparking.GroupBindingInputProcessor    nevow.formless.GroupBinding     nevow.inevow.IInputProcessor
+nevow.freeparking.MethodBindingInputProcessor   nevow.formless.MethodBinding    nevow.inevow.IInputProcessor
+nevow.freeparking.PropertyBindingInputProcessor nevow.formless.Property         nevow.inevow.IInputProcessor
+nevow.freeparking.TypedInputProcessor           nevow.formless.ITyped           nevow.inevow.IInputProcessor
+nevow.freeparking.PasswordInputProcessor        nevow.formless.Password         nevow.inevow.IInputProcessor
+nevow.freeparking.RequestInputProcessor         nevow.formless.Request          nevow.inevow.IInputProcessor
+nevow.freeparking.ContextInputProcessor         nevow.formless.Context          nevow.inevow.IInputProcessor
+nevow.freeparking.ListInputProcessor            nevow.formless.List             nevow.inevow.IInputProcessor
+nevow.freeparking.UploadInputProcessor          nevow.formless.FileUpload       nevow.inevow.IInputProcessor
 
     #
 
Index: nevow/inevow.py
===================================================================
--- nevow/inevow.py	(revision 231)
+++ nevow/inevow.py	(working copy)
@@ -7,17 +7,17 @@
 from nevow import compy
 
 
-class IInputValidator(compy.Interface):
+class IInputProcessor(compy.Interface):
     """handle a post for a given binding
     """
-    def validate(self, context, boundTo, data):
+    def process(self, context, boundTo, data):
         """do something to boundTo in response to some data
 
         return a status message if everything's ok, and raise a
         formless.ValidateError if there is a problem
         """
-    ## TODO should probably make a distinction between a Typed validator
-    ## and a Binding validator; probably would make the code cleaner
+    ## TODO should probably make a distinction between a Typed input processor
+    ## and a Binding input processor; probably would make the code cleaner
 
 
 class IConfigurableFactory(compy.Interface):
@@ -26,7 +26,7 @@
     - Implements IConfigurable directly
     - Implements a TypedInterface, thus providing enough information
       about the types of objects needed to allow the user to change
-      the object as long as the input is validated
+      the object as long as the input is processed
     """
     def locateConfigurable(self, context, name):
         """Return the configurable that responds to the name.
From matt at pollenation.net  Thu Apr 29 16:24:37 2004
From: matt at pollenation.net (Matt Goodall)
Date: Thu Apr 29 16:24:53 2004
Subject: [Twisted-web] Validator -> InputProcessor Patch
In-Reply-To: <1083250416.13131.185347715@webmail.messagingengine.com>
References: <1083250416.13131.185347715@webmail.messagingengine.com>
Message-ID: <1083277477.16965.33.camel@debian>

On Thu, 2004-04-29 at 15:53, Justin Johnson wrote:
> Attached is a patch for performing the steps outlined at
> http://divmod.org/users/wiki.twistd/nevow/moin.cgi/DesignDiscussion in
> the Proposal section.
> 
> Please send feedback.

The patch looks good except that strip needs to happen *before* required
otherwise you can bypass the required check with ' '.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect
the views of my employer.


