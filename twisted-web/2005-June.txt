From tv at twistedmatrix.com  Wed Jun  1 14:44:58 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed Jun  1 14:45:05 2005
Subject: [Twisted-web] ReverseProxy subpath
In-Reply-To: <20050531081115.GC3692@m.0xx0.net>
References: <20050531081115.GC3692@m.0xx0.net>
Message-ID: <429E1E4A.7000303@twistedmatrix.com>

Siegmund Fuehringer wrote:
> i would like to setup a reverse proxy, which serves the root of an 
> internal server as '/subpath' of the external server:
> http://external.org/subpath -> http://internal.org/
> but i can't get it to work.
> 
> my current setup requires that the internal server also serves the 
> content as '/subpath':
> 
> root.putChild( 'subpath', ReverseProxyResource( '127.0.0.1', 6080, 
> '/vhost/http/external.org:80/subpath' ) )
> 
> is there a way to achieve, what i would like to have?

The full URL needs to be passed to the internal server in order
for it to form correct URLs for redirects and such.

The /vhost/ trick passes scheme ("http"), host ("external.org") and
port (":80"), but not the path. So you need the /subpath there.

There has been talk about alternate ways of doing the same, but
that code does not exist yet.

Just use the /subpath.

From shamrin at gmail.com  Wed Jun  1 17:46:10 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Wed Jun  1 17:46:44 2005
Subject: [Twisted-web] Livepage, ClientHandle and context
In-Reply-To: <FC55D47E-6FBF-4103-9C5F-E9D117CC16CE@ulaluma.com>
References: <20050530231708.olbnwr9uqrk00w8g@itchy.wasabout.net>
	<FC55D47E-6FBF-4103-9C5F-E9D117CC16CE@ulaluma.com>
Message-ID: <28d42ea7050601164640d423da@mail.gmail.com>

On 5/31/05, Donovan Preston <dp@ulaluma.com> wrote:

> In this branch, input handlers can also return javascript which will
> be executed as the response to the input event.

What do you mean? I don't understand...
Are you talking about javascript that will be executed without
round-trip to server?

> 
> I encourage anyone who is interested in livepage to take a look at
> this branch to see where it is going. Take a look at the examples to
> see what has changed, read the code, and experiment with it. Ask
> questions if you have any. I'll be trying to merge this branch into
> the mainline (after adding some backwards compatibility) in the next
> week.
> 
> I'll also be adding some LivePage docs. I think the API will settle
> down after this last round of changes.

1. nevow_insertNode from liveglue.js (and livepage.insert) is broken.
And (as far as I can see) it is not used anywhere in Nevow (including
examples). Remove?

2. I think you should have "nevow_" prefix for all things in liveglue.js.

3. What is the purpose of ClientHandle.transient?

4. Are these two equivalent?
onsubmit=livepage.server.handle(livepage.js.onSubmit, getValue('inputline'))
onsubmit=livepage.server.handle('onSubmit', getValue('inputline'))

P.S. At this time I have only read the code and checked new
examples... I will try to experiment with it soon. But I must say your
javascript "constructor" looks interesting (livepage.assign,
livepage.var etc.)

-- 
Alexey

From dp at ulaluma.com  Wed Jun  1 20:25:42 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Jun  1 20:25:49 2005
Subject: [Twisted-web] Livepage, ClientHandle and context
In-Reply-To: <28d42ea7050601164640d423da@mail.gmail.com>
References: <20050530231708.olbnwr9uqrk00w8g@itchy.wasabout.net>
	<FC55D47E-6FBF-4103-9C5F-E9D117CC16CE@ulaluma.com>
	<28d42ea7050601164640d423da@mail.gmail.com>
Message-ID: <0BA207CD-3ACA-4F49-9D03-B7B010582E82@ulaluma.com>


Thank you very much for your feedback. Please, anyone else on this  
list who is using or attempting to use LivePage, let me know what you  
are doing with it or plan on doing with it. I want to take it from  
long-running experiment to solid, deployable code before the next  
release, and need to know how much API stability/backwards  
compatibility I should provide. I also need to know how people want  
to use LivePage, and if it has any usability shortcomings with this  
new design which I describe below. If there are any, I'd like to fix  
them before the next release.

On Jun 1, 2005, at 4:46 PM, Alexey Shamrin wrote:

> On 5/31/05, Donovan Preston <dp@ulaluma.com> wrote:
>
>> In this branch, input handlers can also return javascript which will
>> be executed as the response to the input event.
>
> What do you mean? I don't understand...
> Are you talking about javascript that will be executed without
> round-trip to server?

When a client-side event generates a trip to the server over the  
input conduit, the server-side handler method which is invoked can  
now return javascript stan. This return result is written as the  
response to the HTTP request which dispatched the event to the  
server, and the browser evals it. Previously, the server would  
arrange for the handler method to be called in the next reactor  
iteration and close the input HTTP request, writing nothing to it.  
The handler method would then call methods on the client handle which  
would generate javascript and buffer it or write it directly to the  
output conduit.

So yes, one (output conduit) round trip is eliminated, and it becomes  
easier to support normal AJaX style events (where the browser is the  
only thing initiating requests, and the server does no pushing),  
which I call input only mode.

>> I encourage anyone who is interested in livepage to take a look at
>> this branch to see where it is going. Take a look at the examples to
>> see what has changed, read the code, and experiment with it. Ask
>> questions if you have any. I'll be trying to merge this branch into
>> the mainline (after adding some backwards compatibility) in the next
>> week.
>>
>> I'll also be adding some LivePage docs. I think the API will settle
>> down after this last round of changes.
>>
>
> 1. nevow_insertNode from liveglue.js (and livepage.insert) is broken.
> And (as far as I can see) it is not used anywhere in Nevow (including
> examples). Remove?

I think I might fix it rather than removing it. I'll also write a  
test for it, since livetest can now reliably test livepage apps.

> 2. I think you should have "nevow_" prefix for all things in  
> liveglue.js.

I agree, except I think I want the new "server" object to keep that  
name. It will be much easier for people to understand and use  
livepage if they know that calling server.handle('foo') in javascript  
invokes the handle_foo method on the server. Are there other things  
in there that aren't prefixed with nevow_?

> 3. What is the purpose of ClientHandle.transient?

ClientHandle.transient and LivePage.locateHandler (whose default  
implementation looks for handle_* methods) are the new, easier to  
understand and use replacements for the handler decorator.  
Previously, there was a problem with handler because it registered  
the callable you gave it in a dictionary which lived for as long as  
the LivePage instance it was associated with. This means if you had a  
really, really long lived LivePage (which LivePage is designed to  
allow) you would leak more and more closures that the client can't  
ever call again (because you replaced the client-side dom that  
referenced those server-side closures with something else)

Now, if you provide a handle_foo method, the client can always call  
server.handle('foo') as many times as it wants. However, it is still  
useful to register closures on the server and give the client the  
capability to call it. To avoid the aforementioned garbage problem,  
transient allows you to do this, but only allows the client to call  
it once, then pops the registration.

This avoids the garbage problem well; if the client closes the  
browser, LivePage guarantees that the ClientHandle will die no more  
than 90 seconds later, taking the transient closure registration  
dictionary with it. If you are, for example, putting an "ok/cancel"  
dialog on the user's screen, you can register a single transient  
which gets called by either the ok or cancel button, ensuring that  
the transient will be popped when the client no longer has the  
capability to call it (because the UI has gone away, by the user  
clicking either ok or cancel)

> 4. Are these two equivalent?
> onsubmit=livepage.server.handle(livepage.js.onSubmit, getValue 
> ('inputline'))
> onsubmit=livepage.server.handle('onSubmit', getValue('inputline'))

No, because the client-side javascript "handle" function takes a  
string. The first would render down to:

server.handle(onSubmit, getValue('inputline'))

The second would render down to:

server.handle('onSubmit', getValue('inputLine'))

The first would barf because the global name onSubmit doesn't exist.

The livepage.js object is like a stan.Tag for javascript; it creates  
literal javascript. For example:

livepage.js.foo -> foo
livepage.js.foo('1') -> foo('1')
livepage.js('any string') -> any string
livepage.js['1'] -> ['1']
livepage.js.foo['1'] -> foo['1']

There are a bunch of other js objects in the module now, such as  
window, document, this, server, set, append, alert, etc. They are  
really convenient for making your python code much shorter.

I have an incredible LivePage app I wrote recently I am calling  
"Pavel". I will be cleaning it up soon and I will create a new open  
source project for it (rather than including it as a nevow example).  
I think it really showcases the power of LivePage and I'm excited to  
show it to people, but for now it is somewhat of a secret :-)

> P.S. At this time I have only read the code and checked new
> examples... I will try to experiment with it soon. But I must say your
> javascript "constructor" looks interesting (livepage.assign,
> livepage.var etc.)

assign and var are two experiments to get around the fact that python  
has no assignment overloading. Here are examples of usage:

var(js.x, 5) -> var x = 5
assign(js.x, 10) -> x = 10

One other thing while I am discussing stan for javascript. This is a  
pain once you start using it, but I don't think there is any way  
around it other than education. You need to terminate your  
statements, since the javascript flatteners have no idea where it is  
appropriate to put newlines in javascript. So if you were sending the  
following:

client.send([
     livepage.alert('hello'),
     livepage.set('name', 'Donovan Preston')])

You would need to terminate each statement, otherwise the javascript  
won't be correct. The above example would render as:

alert('hello')set('name', 'Donovan Preston')

Right now, you need to do:

client.send([
     livepage.alert('hello'), livepage.eol,
     livepage.set('name', 'Donovan Preston')])

Which will render down to:

alert('hello')
set('name', 'Donovan Preston')

It occurs to me that it may be possible for Nevow to just infer that  
a newline is required between each element of a list or a tuple while  
in JavascriptContext. I will have to experiment and see whether this  
causes any inadvertent problems. If not, the requirement to manually  
insert newline characters will go away (horray!)

Donovan

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050601/501e0bb3/attachment.htm
From christopher.zorn at gmail.com  Thu Jun  2 07:07:10 2005
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Thu Jun  2 07:08:41 2005
Subject: [Twisted-web] Livepage, ClientHandle and context
In-Reply-To: <0BA207CD-3ACA-4F49-9D03-B7B010582E82@ulaluma.com>
References: <20050530231708.olbnwr9uqrk00w8g@itchy.wasabout.net>
	<FC55D47E-6FBF-4103-9C5F-E9D117CC16CE@ulaluma.com>
	<28d42ea7050601164640d423da@mail.gmail.com>
	<0BA207CD-3ACA-4F49-9D03-B7B010582E82@ulaluma.com>
Message-ID: <149014b905060206073be232ea@mail.gmail.com>

On 6/1/05, Donovan Preston <dp@ulaluma.com> wrote:
> 
> Thank you very much for your feedback. Please, anyone else on this list who
> is using or attempting to use LivePage, let me know what you are doing with
> it or plan on doing with it.

I use it for http://punjab.thetofu.com 

It is not stable yet. You can get the code at http://punjab.sf.net

<snip>

From garthk at gmail.com  Fri Jun  3 06:06:05 2005
From: garthk at gmail.com (Garth T Kidd)
Date: Fri Jun  3 06:07:14 2005
Subject: [Twisted-web] Livepage, ClientHandle and context
In-Reply-To: <0BA207CD-3ACA-4F49-9D03-B7B010582E82@ulaluma.com>
References: <20050530231708.olbnwr9uqrk00w8g@itchy.wasabout.net>
	<FC55D47E-6FBF-4103-9C5F-E9D117CC16CE@ulaluma.com>
	<28d42ea7050601164640d423da@mail.gmail.com>
	<0BA207CD-3ACA-4F49-9D03-B7B010582E82@ulaluma.com>
Message-ID: <8aeed5d005060305063532fefe@mail.gmail.com>

> Thank you very much for your feedback. Please, anyone else on this list who
> is using or attempting to use LivePage, let me know what you are doing with
> it or plan on doing with it. 

I'm planning to re-implement parts or all of the iPodder GUI in
LivePage to overcome difficulties we're experiencing with the wxPython
framework. I'll probably also roll it into PyDS.

Regards,
Garth.

From shamrin at gmail.com  Mon Jun  6 10:24:51 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Mon Jun  6 10:25:24 2005
Subject: [Twisted-web] Livepage, ClientHandle and context
In-Reply-To: <0BA207CD-3ACA-4F49-9D03-B7B010582E82@ulaluma.com>
References: <20050530231708.olbnwr9uqrk00w8g@itchy.wasabout.net>
	<FC55D47E-6FBF-4103-9C5F-E9D117CC16CE@ulaluma.com>
	<28d42ea7050601164640d423da@mail.gmail.com>
	<0BA207CD-3ACA-4F49-9D03-B7B010582E82@ulaluma.com>
Message-ID: <28d42ea705060609242b09a72e@mail.gmail.com>

Hello!

Thank you for good explanations! As far as I can see you have already
commited good docstrings and backward-compatibility code into your
branch (r1545). It looks good!

On 6/2/05, Donovan Preston <dp@ulaluma.com> wrote:
> I also need to know how people want to use LivePage, 
> and if it has any usability shortcomings with this new 
> design which I describe below.

As you ask to describe how people use LivePage, here is my small example.

In a smaill project I am doing I use LivePage as follows (simplified
extract from the working code -- I haven't tested it...):

# example.py
from nevow import loaders, livepage, rend, tags as T

def get_teachers_list():
     # some code that returns the list of teachers goes here
     pass

class Editor(rend.Page):
    """Base class providing template for all pages"""
    addSlash=True

    docFactory = loaders.stan(T.html[T.body[T.directive('main_area')]])

class TeachersEditor(Editor,livepage.LivePage):
    """This page is exposed to the web"""

    def render_main_area(self, ctx, data):
        return livepage.glue, TeachersList(get_teachers_list())

class TeachersList(rend.Fragment):
    docFactory = loaders.stan([
        T.ul(render=rend.sequence, id='teachers_list')[
                T.li(pattern='item', render=T.directive('teacher_item'))[
                    T.a(render=T.directive('teacher_link'), href='#')[
                        T.slot(name='teacher_name')]]],
        T.div(id='teacher_details')])

    def render_teacher_item(self, ctx, teacher):
        return ctx.tag(id='teacher_%d' % teacher.id)

    def render_teacher_link(self, ctx, teacher):
        @livepage.handler
        def show_teacher(client):
            client.set('teacher_details',TeacherDetails(teacher))

        ctx.fillSlots('teacher_name', teacher.name)
        return ctx.tag(onclick=show_teacher, id='teacher_link_%d' % teacher.id)

class TeacherDetails(rend.Fragment):
      # this rend.Fragment also has @livepage.handler-ed closures
      pass

# end of example.py

As you can see, I use LivePage from inside rend.Fragment's subclasses
(TeacherDetails and TeachersList). But only the main rend.Page
subclass (TeacherEditor) is a subclass of livepage.LivePage. I also
use livepage.handler's as closures (TeachersList.render_teacher_link).

There were two problems with your branch and my code:

1. Backward compatible code didn't work for me (I don't remember what
was the reason. If you need details, I can make a better, working,
example.).

2. I tried to use new LivePage api, but I couldn't figure out how to
translate my code using it. For example, your ClientHandler.transient
seems to provide the ability to make browser-callable functions as
closures, but I am confused about the limitation of one-time calling.
Is it really necessary for a solution of garbage problem you mention?

I also can't see a way to use handler_* methods, because this methods
must be inside a rend.Fragment subclass in my case.

How can use the new api in my application?

> 2. I think you should have "nevow_" prefix for all things in liveglue.js.
> I agree, except I think I want the new "server" object to keep that name. It
> will be much easier for people to understand and use livepage if they know
> that calling server.handle('foo') in javascript invokes the handle_foo
> method on the server. Are there other things in there that aren't prefixed
> with nevow_?

Lot's of them. Just look inside liveglue.js... createRequest, connect,
auto_load, listener etc.

Or you can you preuso object-oriented approach like in Prototype
(http://prototype.conio.net/) or dojo.

> I have an incredible LivePage app I wrote recently I am calling "Pavel". I
> will be cleaning it up soon and I will create a new open source project for
> it (rather than including it as a nevow example). I think it really
> showcases the power of LivePage and I'm excited to show it to people, but
> for now it is somewhat of a secret :-)

I am looking forward for that!

> So if you were sending the following:
> 
> client.send([
> ??? livepage.alert('hello'),
> ??? livepage.set('name', 'Donovan Preston')])
> 
> You would need to terminate each statement, otherwise the javascript won't
> be correct. The above example would render as:
> 
> alert('hello')set('name', 'Donovan Preston')
> 
> Right now, you need to do:
> 
> client.send([
> ??? livepage.alert('hello'), livepage.eol,
> ??? livepage.set('name', 'Donovan Preston')])
> 
> Which will render down to:
> 
> alert('hello')
> set('name', 'Donovan Preston')
> 
> It occurs to me that it may be possible for Nevow to just infer that a
> newline is required between each element of a list or a tuple while in
> JavascriptContext. I will have to experiment and see whether this causes
> any?inadvertent problems. If not, the requirement to manually insert newline
> characters will go away (horray!)

I am not sure, but may be something like livepage.do would do the job
a little better?

client.send(livepage.do[
    livepage.alert('hello'),
    livepage.set('name', 'Donovan Preston')])

(or even livepage.progn...)

-- 
Alexey
From sifu-twisted at 0xx0.net  Mon Jun  6 20:52:05 2005
From: sifu-twisted at 0xx0.net (Siegmund Fuehringer)
Date: Mon Jun  6 20:51:34 2005
Subject: [Twisted-web] problem with livepage-completion-notification-3
	branche
Message-ID: <20050607025205.GC12536@m.0xx0.net>

hi!

livepage doesn't work, when i return a LivePage instance from 
a childFactory.

eg:
class Test( livepage.LivePage ):
...
class Root( rend.Page ):
    def childFactory( self, ctx, name ):
	return Test( )   <---- doesn't work

    child_muh = Test( )  <---- works


it works in nevow trunk though.

bye - sifu

From dp at ulaluma.com  Tue Jun  7 11:22:28 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Jun  7 11:23:08 2005
Subject: [Twisted-web] problem with livepage-completion-notification-3
	branche
In-Reply-To: <20050607025205.GC12536@m.0xx0.net>
References: <20050607025205.GC12536@m.0xx0.net>
Message-ID: <B810FA4C-4D70-4521-BD43-26E6E5F2D525@ulaluma.com>


On Jun 6, 2005, at 7:52 PM, Siegmund Fuehringer wrote:

> hi!
>
> livepage doesn't work, when i return a LivePage instance from
> a childFactory.
>
> eg:
> class Test( livepage.LivePage ):
> ...
> class Root( rend.Page ):
>     def childFactory( self, ctx, name ):
>     return Test( )   <---- doesn't work
>
>     child_muh = Test( )  <---- works
>
>
> it works in nevow trunk though.

Yes. This is correct. This gives the developer the correct amount of  
control over the lifetime of all ClientHandle instances associated  
with a LivePage.

If you want to build your LivePage in a childFactory method, just  
build it and cache it somewhere (self, for example) that will live  
for the appropriate lifetime for your application (which may be the  
entire lifetime of the application). Then, return the same instance  
out of this cache the next time it is requested. In this way, all  
LivePage requests go through the same LivePage instance, and thus  
through the same clientHandleFactory, and thus the correct  
ClientHandle instances can be located.

This allows you to do things like have one LivePage per person, using  
guard, or share the same LivePage between everybody, by always  
returning the same instance for the same URL.

Donovan


From girloncrack at yahoo.com  Wed Jun  8 01:33:36 2005
From: girloncrack at yahoo.com (Andrea Soong)
Date: Wed Jun  8 01:34:08 2005
Subject: [Twisted-web] Need help getting started...
Message-ID: <20050608073336.71186.qmail@web54104.mail.yahoo.com>

Hello, 
 
I'm taking a class in which we're supposed to be implementing a pseudo-proxy server that does some text parsing on web pages before passing them back to the client.  The proxy is supposed to be accessed via the URL and port that the server is running on, using an .rpy file.
 
I've looked through all of the available Twisted documentation, but just can't seem to get a handle on how to get started.  It's mostly setup questions - what code should go in which files?  How do I run it?  How do I test it?  There are a lot of code examples available, but very little information on how they interact and call each other.  It doesn't help that I am not too familiar with the OO-style API documentation.
 
I know that I need to be creating a subclass of HTTPClient, and creating a resource in the .rpy file.  I'm guessing that the .rpy file should create an instance of the HTTPClient subclass and use it to retrieve the requested URL (we have to get it line by line), but I don't understand how to create the instance.
 
A single good example that creates a web proxy server which simply retrieves the data line by line and displays it to the screen, plus the shell commands needed to run/test would be extremely helpful.  I am completely confused as to how the web server and .rpy file would interact.
 
I hope someone has the time and know-how to help me out.
THANKS


		
---------------------------------
Discover Yahoo!
 Stay in touch with email, IM, photo sharing & more. Check it out!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050608/982fd4bf/attachment.htm
From matt at pollenation.net  Wed Jun  8 09:56:25 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed Jun  8 09:56:30 2005
Subject: [Twisted-web] Need help getting started...
In-Reply-To: <20050608073336.71186.qmail@web54104.mail.yahoo.com>
References: <20050608073336.71186.qmail@web54104.mail.yahoo.com>
Message-ID: <42A71529.4060905@pollenation.net>

Andrea Soong wrote:
> Hello, 
>  
> I'm taking a class in which we're supposed to be implementing a
> pseudo-proxy server that does some text parsing on web pages before
> passing them back to the client.  The proxy is supposed to be accessed
> via the URL and port that the server is running on, using an .rpy file.
>  
> I've looked through all of the available Twisted documentation, but just
> can't seem to get a handle on how to get started.  It's mostly setup
> questions - what code should go in which files?

I understand you are restricted to deploying a single .rpy script, so
all your code will have to be contained in that file. That's not a good
way to deploy a Twisted web app but you have no choice here.

>  How do I run it?  

Create and run a web.tap that serves files from the directory containing
your .rpy script.

> How do I test it?

Request the .rpy using your browser.

> There are a lot of code examples available, but very
> little information on how they interact and call each other.  It doesn't
> help that I am not too familiar with the OO-style API documentation.
>  
> I know that I need to be creating a subclass of HTTPClient, and creating
> a resource in the .rpy file.  I'm guessing that the .rpy file should
> create an instance of the HTTPClient subclass and use it to retrieve the
> requested URL (we have to get it line by line), but I don't understand
> how to create the instance.

Typically, you add a client protocol factory to the reactor, giving it a
host and port. However, the twisted.web.client module has some
convenient functions that will make things easier for you. See getPage
in that module for more detail.

> A single good example that creates a web proxy server which simply
> retrieves the data line by line and displays it to the screen, plus the
> shell commands needed to run/test would be extremely helpful.  I am
> completely confused as to how the web server and .rpy file would interact.

Everything you need is in the "Using twisted.web" HOWTO which can be
found at http://twistedmatrix.com/projects/web/documentation/howto/.
Points of interest are:

  * .rpy (resource) scripts
  * creating and running a web.tap server
  * the twisted.web.client module
  * deferred resource rendering

>  
> I hope someone has the time and know-how to help me out.
> THANKS

I realise that this reply is a little terse but I suspect part of the
class is working out how to put all this together ;-).

Good luck!

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \	       Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.

From m-lists at the-moon.net  Wed Jun  8 16:56:45 2005
From: m-lists at the-moon.net (Richard Wall)
Date: Wed Jun  8 16:56:36 2005
Subject: [Twisted-web] Formless, custom form layout
Message-ID: <42A777AD.7050204@the-moon.net>

I am trying to customise my Formless layout based on
examples/customform.py, but I'm not sure how I can group inputs in
fieldsets.

eg. http://rafb.net/paste/results/dhZOhk37.html

That's my ideal layout, can anyone give me hints on howto achieve it?

-RichardW.

From visceras at hotmail.com  Thu Jun  9 03:22:09 2005
From: visceras at hotmail.com (Alberto Trujillo)
Date: Thu Jun  9 03:22:43 2005
Subject: [Twisted-web] Where is freeform, renderer, and formless
Message-ID: <BAY24-F1373B829294AFE6E3F4AEDC5FC0@phx.gbl>

Hello:

I have problems with all the examples that I have found about Webform, even 
with the example that is in the tutorial.
This is the most complete example that I've found:
--------------------------------------------------------------------------------------------
from twisted.application import service
from twisted.application import internet

from nevow import appserver
from nevow import renderer
from nevow import tags
from nevow import formless
from nevow import freeform


class IMyForm(formless.TypedInterface):
    foo = formless.Integer()


class FormPage(renderer.Renderer):
    __implements__ = IMyForm, renderer.Renderer.__implements__

    foo = 5

    document = tags.html[
    tags.body[
        "Hello! Here is a form:",
        freeform.configure
    ]
]


application = service.Application("formpost")
internet.TCPServer(
    8080,
    appserver.NevowSite(
        FormPage()
    )
).setServiceParent(application)
--------------------------------------------------------------------------------------------------------------

But still I see the same problems each time that I try to execute the 
program:

- cannot import name renderer (why he is not using rend?)
- cannot import name freeform
- cannot import name formless

I running Nevow 0.3.0, because when I try to install Nevow 0.4.1 I received 
the next message:

- error: invalid Python installation: unable to open 
/usr/lib/python2.3/config/Makefile (No such file or directory)


Could anybody give me the solutions to these problems.
Thank you very much



From daverz at gmail.com  Thu Jun  9 03:32:17 2005
From: daverz at gmail.com (Dave Cook)
Date: Thu Jun  9 03:32:50 2005
Subject: [Twisted-web] Where is freeform, renderer, and formless
In-Reply-To: <BAY24-F1373B829294AFE6E3F4AEDC5FC0@phx.gbl>
References: <BAY24-F1373B829294AFE6E3F4AEDC5FC0@phx.gbl>
Message-ID: <7a59f02505060902324038214d@mail.gmail.com>

On 6/9/05, Alberto Trujillo <visceras@hotmail.com> wrote:
> I have problems with all the examples that I have found about Webform, even

Some of the location of modules have changed.  Try some of the
examples that come in the nevow distribution you downloaded instead.

Dave Cook

From shamrin at gmail.com  Thu Jun  9 07:54:55 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Thu Jun  9 07:55:29 2005
Subject: [Twisted-web] Where is freeform, renderer, and formless
In-Reply-To: <BAY24-F1373B829294AFE6E3F4AEDC5FC0@phx.gbl>
References: <BAY24-F1373B829294AFE6E3F4AEDC5FC0@phx.gbl>
Message-ID: <28d42ea7050609065453930eb@mail.gmail.com>

On 09/06/05, Alberto Trujillo <visceras@hotmail.com> wrote:
> I running Nevow 0.3.0, because when I try to install Nevow 0.4.1 I received
> the next message:
> 
> - error: invalid Python installation: unable to open
> /usr/lib/python2.3/config/Makefile (No such file or directory)

It usually means that python-dev package is not installed.
Try "apt-get install python-dev" if you are under debian.

Or you can go without "installing". Just unpack Nevow (or checkout
using svn) and put nevow and formless subdirectories under PYTHONPATH
or use *.pth. For details see
http://divmod.org/users/wiki.twistd/nevow/moin.cgi/InstallingNevow.

Hope this helps.

-- 
Alexey

From dgray at omniti.com  Fri Jun 10 15:25:49 2005
From: dgray at omniti.com (Dave Gray)
Date: Fri Jun 10 15:25:35 2005
Subject: [Twisted-web] Re: [Twisted-Python] Difficulty with
	twisted.web.client.getPage function
In-Reply-To: <579b3d800506042047690f9d8d@mail.gmail.com>
References: <579b3d800506042047690f9d8d@mail.gmail.com>
Message-ID: <42AA055D.6060701@omniti.com>

Alan Jern wrote:
> Hey, I'm new to Twisted and I've run into a problem that I can't solve.
> 
> I'm trying to write a simple Resource class that fetches a page from a
> specified URL and returns it to the browser. I created a class called
> MyResource in a .rpy file with the following two member functions:
> 
> def print_page (self, html):
>         self.rq.write(html)
>         self.rq.finish()
> 
> def render_GET (self, request):
>         self.rq = request
>         target = escape(request.args['target'][0])
>         getPage(target).addCallback(self.print_page)
>         return server.NOT_DONE_YET
> 
> When I run this script and send a request, the print_page function is
> invoked but the variable 'html' has nothing in it. According to the
> API and the examples I saw on the HOWTO section, this looks like it
> ought to work. Clearly I'm missing something.

You will probably get more enthusiastic responses to questions like this 
on twisted-web (cc'd), FYI

That said, this works for me:

---fetchpage.tac---
# run me with twistd -noy fetchpage.tac
from twisted.web import server
from twisted.web.resource import Resource
from twisted.web.client import getPage

from cgi import escape
class Foo(Resource):
     isLeaf=True
     def print_page (self, html):
         self.rq.write(html)
         self.rq.finish()

     def render_GET (self, request):
         self.rq = request
         target = escape(request.args['target'][0])
         getPage(target).addCallback(self.print_page)
         return server.NOT_DONE_YET

resource = Foo()
site = server.Site(resource)

from twisted.application import service, internet
application = service.Application("PageFetcher")
internet.TCPServer(9000, site).setServiceParent(application)

# and then from your command prompt:
 >  telnet localhost 9000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
GET /?target=http://google.com/ HTTP/1.0
Host: localhost

HTTP/1.0 200 OK
Date: Fri, 10 Jun 2005 21:20:49 GMT
Content-type: text/html
Server: TwistedWeb/2.0.0

<html><head><meta http-equiv="content-type" content="text/html; 
charset=ISO-8859-1"><title>Google</title><style><!--
etc etc

From girloncrack at yahoo.com  Sat Jun 11 01:28:38 2005
From: girloncrack at yahoo.com (Andrea Soong)
Date: Sat Jun 11 01:29:40 2005
Subject: [Twisted-web] Using lineReceived with HTTP requests
Message-ID: <20050611072838.57692.qmail@web54107.mail.yahoo.com>

Hi all,
 
First off, I'd like to say thanks to Ken Whitesell for giving me some much needed help.
 
Here's my problem:  I am using an HTTPClient instance to connect to a webpage, and am trying to retrieve its contents and display to the screen line by line, using the lineReceived method.  This is all being done in an .rpy file.  For some reason, I am only receiving the header information:
---------------------------------------------
[start line received]
       HTTP/1.0 200 OK
[end line received]
[start line received]
       Cache-Control: private
[end line received]
[start line received]
       Content-Type: text/html
[end line received]
[start line received]
       Set-Cookie: PREF=ID=aacd1eed2e435ca5:TM=1118474192:LM=1118474192:S=QyMnwhj46cXbhy_1; expires=Sun, 17-Jan-2038 19:14:07 GMT; path=/; domain=.google.com
[end line received]
[start line received]
       Server: GWS/2.1
[end line received]
[start line received]
       Date: Sat, 11 Jun 2005 07:16:32 GMT
[end line received]
[start line received]
       Connection: Close
[end line received]
[start line received]
       
[end line received]
---------------------------------------------
 
Does anyone know if there is some incompatibility in using lineReceived with the format of a webpage (i.e. maybe they are missing the standard EOL delimiters)?  dataReceived works fine and outputs the whole webpage at once.  
 
Also, I am using handleRequestEnd to detect the end of the transmission and call request.finish(),  but it does not seem to be getting called at all - the browser just keeps waiting for more data.  I've put a simple request.write("handleRequestEnd called") call on the first line of the method and it does not get written to the screen.  I can't find any explanation for how to use most of the methods in the HTTPClient class in the API - is there a better way to do this (i.e. one that works!) ?
 
 
Thanks,
Andrea


		
---------------------------------
Discover Yahoo!
 Have fun online with music videos, cool games, IM & more. Check it out!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050611/177451b5/attachment.htm
From clifford.wells at comcast.net  Sat Jun 11 02:37:28 2005
From: clifford.wells at comcast.net (Cliff Wells)
Date: Sat Jun 11 02:38:03 2005
Subject: [Twisted-web] Including templates in CGI
Message-ID: <1118479049.2381.273.camel@devilbox.devilnet.internal>

Hi,

I just started playing with Nevow yesterday, and I've got a question.  

I've been using PHP/Smarty for doing websites because it's pretty easy
and I've been unhappy with most of the Python web frameworks I've seen
(most of them have pretty ugly template syntax or are overcomplicated).
However, PHP is um, not so good, so I thought I'd make the leap to Nevow
which seems to satisfy my need for simplicity and not-ugliness ;)

Anyway, my typical design pattern for a site is to have an index.html
template with the main layout, and then include another template
depending on a GET/POST variable (e.g. http://example.com?page=home).
In PHP/Smarty, there is an "include" directive that will directly inject
a second template:

<body>
  { include file="$page.html" }
</body>

I haven't found an equivalent in Nevow, but I hacked this together (note
that I am using Apache/CGI, not Twisted:

index.cgi:
----------
def template(filename):
    """
    Prepend the full path to the template directory
    """
    return "/var/www/virtual/example.com/public_html/templates/" + filename

class Index(rend.Page):
    """
    Looks first at the "file" attribute for the fragment to include, if that isn't provided
    looks at the "variable" attribute for the name of the get/post variable that contains the
    name of the fragment to include.  Failing that, just use a default fragment.
    """
    defaultPage = 'home'
    docFactory = loaders.xmlfile(template("index.html"))

    def render_include(self, ctx, data):
        filename = ctx.tag.attributes.get('file')
        if filename is None:
            filename = ctx.arg(ctx.tag.attributes.get('variable'))
        if filename is None:
            filename = self.defaultPage
        filename = template(filename + '.html')

        if os.path.exists(filename):
            fragClass = rend.Fragment
            fragClass.docFactory = loaders.xmlfile(filename, ignoreDocType=True)
            ctx.tag.fillSlots(ctx.tag.attributes.get('slot'), fragClass())
            return ctx.tag
        else:
            return "Page not found."

index.html:
-----------
<div id="content">
  <nevow:invisible nevow:render="include" variable="page" slot="content">
    <nevow:slot name="content" />
  </nevow:invisible>
</div>

This allows me to either specify the included file by accessing a GET/POST variable:

<nevow:invisible nevow:render="include" variable="page" slot="content">

or directly specify the template like:

<nevow:invisible nevow:render="include" file="home" slot="content">

This all seems to work just fine.  However, now I'm curious if there is a better/more direct way of achieving this.

Regards,
Cliff
-- 
Cliff Wells <clifford.wells@comcast.net>


From carl at clingfire.net  Sun Jun 12 11:16:36 2005
From: carl at clingfire.net (Carl Shimer)
Date: Sun Jun 12 11:16:22 2005
Subject: [Twisted-web] issue with session and LivePage
Message-ID: <E1DhW4G-0002bG-00@pyramid.twistedmatrix.com>

Hi,

 

I have a guarded site using livepage.  If the user is currently viewing a
livepage site and lets the session expire (i.e they do nothing), livepage
will generate a client side alert that is basically the contents of the
stylesheet in failure.py.  Not such a good user experience :)

 

After some digging I noticed that Livepage doesn't have a notifyOnExpire
handler (liveevil does however).  The solution is to add a handler in the
goingLive implementation:

 

def goingLive(self,ctx,handle):

      self.handle = handle

      inevow.ISession(ctx).notifyOnExpire(self.OnExpireCallBack)

 

The problem is in the implementation of OnExpireCallback.  The current code:

 

def OnExpireCallBack(self):

      # send the user back to the main page

      self.handle.sendScript('window.location.href = "/"')

      self.handle._closeComplete()

 

A couple of issues here: 

1) it doesn't seem right to call _closeComplete() but it seems to work.  Is
there a better solution?

2) I would like to do something a bit fancier here that involves displaying
a DIV for 1 sec and then redirecting to the main page.  Sample client side
JS (you could do the same thing by using the client handle).  

 

function handleLogout(strval)

{     

      newval = "<div id='logoutpopup'>" + strval + "</div>";

      nevow_appendNode('maincontent',newval)

      self.setTimeout("window.location.href = \"/\"",500) }

 

However, calling handleLogout before calling _closeComplete() will result in
the same error mentioned at the top.  Perhaps a timing issue?

 

Perhaps some of these issues will be resolved with donovan's new livepage,
although I noticed on his branch that there still isn't a notifyOnExpire
handler.

 

Regards,

Carl

 

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050612/9e9054a9/attachment.htm
From dickon.reed at gmail.com  Mon Jun 13 08:11:17 2005
From: dickon.reed at gmail.com (Dickon Reed)
Date: Mon Jun 13 08:11:51 2005
Subject: [Twisted-web] failure with simple use of registry
Message-ID: <44d7ed65050613071176f28d2f@mail.gmail.com>

Hi,

I downloaded and install twisted web today. Good documentation; told me 
exactly what I wanted to know.

However I hit a problem with using the registry though, and I reduced it to 
a simple test case:

------------
from twisted.web.resource import Resource

class Counter:
def __init__(self):
self.x = 0
def ping(self):
self.x += 1
return self.x

counter = registry.getComponent(Counter)
if not counter:
counter = Counter()
registry.setComponent(Counter,counter)


class MyResource(Resource):
def render_GET(self, request):
return '<HTML>'+`counter`+'</HTML>'
------------


When I view this through a web server I get a nicely formatted backtrace for 
an attribute error for '__adapt__' in my Counter class when I call 
registry.getComponent(Counter).

I'm using Red Hat Linux 9, python 2.4.1, Twisted 2.0.1, ZopeInterface 3.0.1, 
and TwistedWeb 0.5.0.

Any ideas what I'm doing wrong, or do I have version skew in the Twisted Web 
dependencies?

Thanks,

Dickon

 <http://orca:8080/teststatus/counter.rpy#tbend>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050613/6dd1f03d/attachment.htm
From dp at ulaluma.com  Mon Jun 13 17:50:02 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Jun 13 17:50:07 2005
Subject: [Twisted-web] Including templates in CGI
In-Reply-To: <1118479049.2381.273.camel@devilbox.devilnet.internal>
References: <1118479049.2381.273.camel@devilbox.devilnet.internal>
Message-ID: <3882E2C3-8505-415A-9DE9-4E1EE5765F01@ulaluma.com>


On Jun 11, 2005, at 1:37 AM, Cliff Wells wrote:

> Hi,
>
> I just started playing with Nevow yesterday, and I've got a question.

<snip>

That all looks pretty good; you have more Python code than your PHP  
code, but that's because you check for more and it has more  
capability. This is the whole point of nevow; if you need to do  
something custom, you write some python code. And it's easy to share  
between pages, too.

However, here are a few suggestions:

>         if os.path.exists(filename):
>             fragClass = rend.Fragment
>             fragClass.docFactory = loaders.xmlfile(filename,  
> ignoreDocType=True)

This is weird and unnecessary. Fragment takes a docFactory argument  
for a reason. So, do this instead:

frag = Fragment(docFactory=loaders.xmlfile(filename,  
ignoreDocType=True))

>             ctx.tag.fillSlots(ctx.tag.attributes.get('slot'),  
> fragClass())
>             return ctx.tag

This is also pretty weird. I'm not understanding what the extra slot  
is giving you. If it were me, I would just "return frag" here and  
dispense with the slot in the template as well as the slot-filling.

>         else:
>             return "Page not found."
>
> index.html:
> -----------
> <div id="content">
>   <nevow:invisible nevow:render="include" variable="page"  
> slot="content">
>     <nevow:slot name="content" />

See comment above, I think this slot is extraneous...

>   </nevow:invisible>
> </div>
>
> This allows me to either specify the included file by accessing a  
> GET/POST variable:
>
> <nevow:invisible nevow:render="include" variable="page"  
> slot="content">

Neat!

> or directly specify the template like:
>
> <nevow:invisible nevow:render="include" file="home" slot="content">

Cool.

> This all seems to work just fine.  However, now I'm curious if  
> there is a better/more direct way of achieving this.

If it works for you, it works. :-) Again, the point of Nevow is to  
make it really easy for you to write Python code that does what you  
want it to do.

dp


From clifford.wells at comcast.net  Mon Jun 13 20:27:27 2005
From: clifford.wells at comcast.net (Cliff Wells)
Date: Mon Jun 13 20:28:02 2005
Subject: [Twisted-web] Including templates in CGI
In-Reply-To: <3882E2C3-8505-415A-9DE9-4E1EE5765F01@ulaluma.com>
References: <1118479049.2381.273.camel@devilbox.devilnet.internal>
	<3882E2C3-8505-415A-9DE9-4E1EE5765F01@ulaluma.com>
Message-ID: <1118716048.2381.305.camel@devilbox.devilnet.internal>

On Mon, 2005-06-13 at 16:50 -0700, Donovan Preston wrote:
> On Jun 11, 2005, at 1:37 AM, Cliff Wells wrote:

> you have more Python code than your PHP  
> code, but that's because you check for more and it has more  
> capability. 

Well, to be sure, I'd rather write 10 lines of Python than 5 lines of
PHP anyway ;) 

> However, here are a few suggestions:
> 
> >         if os.path.exists(filename):
> >             fragClass = rend.Fragment
> >             fragClass.docFactory = loaders.xmlfile(filename,  
> > ignoreDocType=True)
> 
> This is weird and unnecessary. Fragment takes a docFactory argument  
> for a reason. So, do this instead:
> 
> frag = Fragment(docFactory=loaders.xmlfile(filename,  
> ignoreDocType=True))

Yep, found this shortly after I posted (as usual).

> 
> >             ctx.tag.fillSlots(ctx.tag.attributes.get('slot'),  
> > fragClass())
> >             return ctx.tag
> 
> This is also pretty weird. I'm not understanding what the extra slot  
> is giving you. If it were me, I would just "return frag" here and  
> dispense with the slot in the template as well as the slot-filling.

Thanks! That made my templates quite a bit cleaner (and dropped a couple
lines of Python as well).  I had stumbled onto something that worked, so
I hadn't bothered looking any further for the "right" solution (smacks
self).

> > <div id="content">
> >   <nevow:invisible nevow:render="include" variable="page"  
> > slot="content">
> >     <nevow:slot name="content" />
> 
> See comment above, I think this slot is extraneous...

Indeed it was.

Thanks a lot.  Your advice was right on the money.  I'm liking Nevow
more by the minute =)

Regards,
Cliff

-- 
Cliff Wells <clifford.wells@comcast.net>


From michal at pasternak.w.lub.pl  Wed Jun 15 11:46:46 2005
From: michal at pasternak.w.lub.pl (Michal Pasternak)
Date: Wed Jun 15 11:46:46 2005
Subject: [Twisted-web] Returning Deferred from coerce method in formless -
	patch
Message-ID: <20050615174646.GA4216@pasternak.w.lub.pl>

Hi,

	http://divmod.org/users/roundup.twistd/nevow/msg436
	
Coerce methods, used when validating formless.annotate.Typed
objects, can return Deferreds. The problem with formless is,
that it can accept them only when GroupBinding is used. This
patch fixes that for MethodBinding.

Why return Deferred from coerce methods? Well, there are
various reasons. You could validate an e-mail address using
queries to DNS servers, or you could validate login name
using pgasync.ConnectionPool, or do anything else, that
requires deferred methods.

Even that I've still have Nevow commits, I don't want to
commit this patch myself - I'd really appreciate someone
reviewing it before.

Many thanks,
-- 
m

From mordaha at gmail.com  Wed Jun 15 11:56:16 2005
From: mordaha at gmail.com (Little)
Date: Wed Jun 15 11:56:50 2005
Subject: [Twisted-web] Including templates in CGI
In-Reply-To: <1118716048.2381.305.camel@devilbox.devilnet.internal>
References: <1118479049.2381.273.camel@devilbox.devilnet.internal>
	<3882E2C3-8505-415A-9DE9-4E1EE5765F01@ulaluma.com>
	<1118716048.2381.305.camel@devilbox.devilnet.internal>
Message-ID: <899dbb7050615105671851e70@mail.gmail.com>

i do it in another way:
 i have a BasePage class - which is a skeleton for other Pages:
 class BasePage(rend.Page):
__implements__ = rend.Page.__implements__
TITLE = "Common Page"
docFactory = loaders.xmlfile("_tpl/common/page.xml")
def render_title(self, ctx, data):
ctx.fillSlots("title", self.TITLE)
return ctx.tag

def render_content(self, ctx, data):
raise NotImplementedError, "You MUST overload render_content() method!!!"
 And BasePage tremplate:
 <html>
...metas
<body>
 ...layout
 <n:invisible n:render="content" />
 </body>
</html>
  And then all of the site pages are using this prototype:
  
class Root(common.BasePage):
def render_content(self, ctx, data):
return loaders.xmlfile("_tpl/root.xml") 

i can return ANY xml-temlate i'd like :)

for example a form or a "form submitted successful" message
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050615/b0e15620/attachment.htm
From matt.feifarek at gmail.com  Wed Jun 15 13:21:00 2005
From: matt.feifarek at gmail.com (Matt Feifarek)
Date: Wed Jun 15 13:21:32 2005
Subject: [Twisted-web] XML-RPC and None
Message-ID: <6fb6dbfe05061512216f143221@mail.gmail.com>

Hello.

We're using twisted.web.xmlrpc to serve an xmlrpclib client, so
python-to-python.

We'd like to pass None through the rpc connection on occasion. There's
a flag in the standard lib to allow this to serialize ( send
allow_none=True to the xmlrpclib.Server() )

We're getting this error from the twisted resource when we try to
serialize 'None':

Fault: <Fault 8002: "can't serialize output">

I know that the twisted resources uses the stock xmlrpclib, but how
can we tell it to allow None to serialize the twisted way?

Thanks.

From tv at twistedmatrix.com  Wed Jun 15 14:59:42 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed Jun 15 14:59:49 2005
Subject: [Twisted-web] XML-RPC and None
In-Reply-To: <6fb6dbfe05061512216f143221@mail.gmail.com>
References: <6fb6dbfe05061512216f143221@mail.gmail.com>
Message-ID: <42B096BE.9030608@twistedmatrix.com>

Matt Feifarek wrote:
> We'd like to pass None through the rpc connection on occasion. There's
> a flag in the standard lib to allow this to serialize ( send
> allow_none=True to the xmlrpclib.Server() )
> 
> We're getting this error from the twisted resource when we try to
> serialize 'None':
> 
> Fault: <Fault 8002: "can't serialize output">
> 
> I know that the twisted resources uses the stock xmlrpclib, but how
> can we tell it to allow None to serialize the twisted way?

With the current twisted.web.xmlrpc, you can't.
(You'd need to patch that to optionally give an allow_none
flag to everything using dumps/loads.)

Why do people want to break the perfectly nice standard, anyway?
Return a tuple (False, ) for None and (True, stuff) for stuff,
or something..

From andrea at cpushare.com  Wed Jun 15 21:43:29 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jun 15 21:43:44 2005
Subject: [Twisted-web] Returning Deferred from coerce method in formless -
	patch
In-Reply-To: <20050615174646.GA4216@pasternak.w.lub.pl>
References: <20050615174646.GA4216@pasternak.w.lub.pl>
Message-ID: <20050616034329.GL9664@g5.random>

On Wed, Jun 15, 2005 at 07:46:46PM +0200, Michal Pasternak wrote:
> various reasons. You could validate an e-mail address using
> queries to DNS servers, or you could validate login name

FWIW, I also needed to return deferred from coerce.

Right now I'm using the autocallable to do that. The autocallable
returns annotate.ValidateError if something goes wrong.

But the dns is checked only if all the coerce methods all passes, so I
can't show the dns error until all coerce passed, which made the dns
check a kind of last special check, for no good reason. It'd be more
coherent to check for all errors even when some other coerce in the same
form fails.

Thanks for working to add this feature.

BTW, I'd also need "context" to be passed to the coerce method (as last
argument), I had to write my own ProcessTypedContext to do that, and
it'd be much nicer if the default formless process handler would pass
the context to coerce too (though I believe it would break current apps,
but it'd be a very visible breakage, no risk of silent malfunctions at
runtime). Said that I also appreciate backwards compatibility ;)

I need the context in order to reach the session with
inevow.ISession(ctx) inside the coerce handler.

Thanks!

From abulka at netspace.net.au  Thu Jun 16 01:56:17 2005
From: abulka at netspace.net.au (abulka@netspace.net.au)
Date: Thu Jun 16 01:56:22 2005
Subject: [Twisted-web] nevow tutorial - no attribute 'htmlfile' ?
Message-ID: <1118908577.42b130a1df978@webmail.netspace.net.au>

In Donovan's tutorial http://nevow.com/Nevow2004Tutorial.html I typed
     twistd -noy sched.tac
 but got:

  File "....\Example4\schedule.py", line 13, in ScheduleRoot
    docFactory = rend.htmlfile('Month.html')
exceptions.AttributeError: 'module' object has no attribute 'htmlfile'

Failed to load application: 'module' object has no attribute 'htmlfile'

I have installed, twisted, twisted web, nevow and zope interfaces.

Any ideas what is going wrong here?
thanks
Andy Bulka



------------------------------------------------------------
This email was sent from Netspace Webmail: http://www.netspace.net.au


From tv at twistedmatrix.com  Thu Jun 16 02:19:37 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Jun 16 02:19:40 2005
Subject: [Twisted-web] nevow tutorial - no attribute 'htmlfile' ?
In-Reply-To: <1118908577.42b130a1df978@webmail.netspace.net.au>
References: <1118908577.42b130a1df978@webmail.netspace.net.au>
Message-ID: <42B13619.3020002@twistedmatrix.com>

abulka@netspace.net.au wrote:
> In Donovan's tutorial http://nevow.com/Nevow2004Tutorial.html I typed
>      twistd -noy sched.tac
>  but got:
> 
>   File "....\Example4\schedule.py", line 13, in ScheduleRoot
>     docFactory = rend.htmlfile('Month.html')
> exceptions.AttributeError: 'module' object has no attribute 'htmlfile'
> 
> Failed to load application: 'module' object has no attribute 'htmlfile'

It's in nevow.loaders these days.

From sifu-twisted at 0xx0.net  Thu Jun 16 03:51:45 2005
From: sifu-twisted at 0xx0.net (sifu-twisted@0xx0.net)
Date: Thu Jun 16 03:47:54 2005
Subject: [Twisted-web] 2 small patches for livepage-completion-notification-3
Message-ID: <20050616095145.GO7219@m.0xx0.net>

hi!

i have two small patches for the livepage-completion-notification-3 
branch.

the first one adds the possibility to set callbacks, which are called in 
case the livepage connection dies.
it's basically what fzZzy told my on #twisted.web today.
"<fzZzy> then, on line 35, do..." ;)

the second patch adds a "prepend" helper method to ClientHandle.


bye bye - sifu
---
http://sifu.info
-------------- next part --------------
Index: liveglue.js
===================================================================
--- liveglue.js	(revision 1557)
+++ liveglue.js	(working copy)
@@ -32,6 +32,10 @@
                     connect(outputNum + 1)
                 }
             } else {
+		for (var i in disconnectListeners) {
+		    disconnectListeners[i]()
+		    disconnectListeners = []
+		}
                 last_request = null
             }
         }
@@ -108,7 +112,22 @@
     }
 }
 
+var disconnectListeners = []
 
+function addDisconnectListener(callback) {
+    disconnectListeners.push(callback)
+    return callback
+}
+
+function delDisconnectListener(theListener) {
+    for (var i in disconnectListeners) {
+	if (disconnectListeners[i] == theListener){
+	    disconnectListeners.splice(i, 1)
+	    break
+	}
+    }
+}
+
 function nevow_clientToServerEvent(theTarget, evalAfterDone) {
     if (theTarget != 'close' && liveevil_unload) {
         // Server had previously closed the output; let's open it again.
-------------- next part --------------
Index: livepage.py
===================================================================
--- livepage.py	(revision 1557)
+++ livepage.py	(working copy)
@@ -455,6 +455,9 @@
     def set(self, where, what):
         self.send(js.nevow_setNode(where, what))
 
+    def prepend(self, where, what):
+        self.send(js.nevow_prependNode(where, what))
+
     def append(self, where, what):
         self.send(js.nevow_appendNode(where, what))
 
From sridharinfinity at gmail.com  Thu Jun 16 07:55:20 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Thu Jun 16 07:55:28 2005
Subject: [Twisted-web] nevow tutorial - no attribute 'htmlfile' ?
In-Reply-To: <1118908577.42b130a1df978@webmail.netspace.net.au>
References: <1118908577.42b130a1df978@webmail.netspace.net.au>
Message-ID: <8816fcf805061606557731c65@mail.gmail.com>

On 6/16/05, abulka@netspace.net.au <abulka@netspace.net.au> wrote:
> 
> In Donovan's tutorial http://nevow.com/Nevow2004Tutorial.html I typed
> twistd -noy sched.tac


Try the updated tutorial http://divmod.org/users/mg/nevow-doc/

-- 
Sridhar Ratna - http://www.livejournal.com/users/seedar/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050616/46b92b53/attachment.htm
From dp at ulaluma.com  Thu Jun 16 13:04:58 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Thu Jun 16 13:05:03 2005
Subject: [Twisted-web] Returning Deferred from coerce method in formless -
	patch
In-Reply-To: <20050616034329.GL9664@g5.random>
References: <20050615174646.GA4216@pasternak.w.lub.pl>
	<20050616034329.GL9664@g5.random>
Message-ID: <44BB17A4-4F02-418A-B4DA-1F72F2D32E00@ulaluma.com>


On Jun 15, 2005, at 8:43 PM, Andrea Arcangeli wrote:

> On Wed, Jun 15, 2005 at 07:46:46PM +0200, Michal Pasternak wrote:
>
>> various reasons. You could validate an e-mail address using
>> queries to DNS servers, or you could validate login name

> Thanks for working to add this feature.

I got it to work, but I'm seeing some weirdness in several  
situations. I guess they would be classified "regressions".

I seem to need this all of a sudden, so you are in luck. I will take  
a look at fixing the weirdness I see and try to fix it, and commit it  
to trunk soon.

> BTW, I'd also need "context" to be passed to the coerce method (as  
> last
> argument), I had to write my own ProcessTypedContext to do that, and
> it'd be much nicer if the default formless process handler would pass
> the context to coerce too (though I believe it would break current  
> apps,
> but it'd be a very visible breakage, no risk of silent malfunctions at
> runtime). Said that I also appreciate backwards compatibility ;)

It should be the first argument, for consistency. Also, to retain  
backwards compatibility, we could rename the "coerce" method which  
takes a context. Perhaps it could be named "convert".

> I need the context in order to reach the session with
> inevow.ISession(ctx) inside the coerce handler.

Indeed. formless was originally designed to be web-agnostic and be  
usable outside of nevow, but in this case I think it's compelling  
enough to allow it.

Donovan


From kairanga at cox.net  Thu Jun 16 14:01:52 2005
From: kairanga at cox.net (Ranga Nathan)
Date: Thu Jun 16 14:02:28 2005
Subject: [Twisted-web] Hi from newbie
Message-ID: <42B1DAB0.4030604@cox.net>

Hi all!
Just stumbled on to Twisted, as it is a pre-req for Xen.
I still dont have a clear idea of what Twisted is.
Can you point me to some links? Yes, I have visited Twistedmatrix.com. I 
would like to get an idea of potential applications for it. For e.g can 
I build peer-to-peer applications network infrastructure with Twisted?

Regards

From kairanga at cox.net  Thu Jun 16 14:22:17 2005
From: kairanga at cox.net (Ranga Nathan)
Date: Thu Jun 16 14:22:54 2005
Subject: [Twisted-web] faster download possible?
Message-ID: <42B1DF79.1060003@cox.net>

I am trying to download twisted (source only) but it is taking too long. 
Are there faster mirrors?

From p.mayers at imperial.ac.uk  Thu Jun 16 17:04:05 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu Jun 16 17:04:46 2005
Subject: [Twisted-web] Formless, custom form layout
In-Reply-To: <42A777AD.7050204@the-moon.net>
References: <42A777AD.7050204@the-moon.net>
Message-ID: <42B20565.3060809@imperial.ac.uk>

Richard Wall wrote:
> I am trying to customise my Formless layout based on
> examples/customform.py, but I'm not sure how I can group inputs in
> fieldsets.

Good question. I asked the same one a while back (no reply - maybe the 
mail didn't get through). I mused:

I suspect I can subclass annotate.Typed or use the complexType stuff to 
somehow group a textbox and dropdown together into one logical bit of 
HTML that is rendered as a single "control"

...but other commitments have kept me from revisiting this

> 
> eg. http://rafb.net/paste/results/dhZOhk37.html

I get a 404

> 
> That's my ideal layout, can anyone give me hints on howto achieve it?
> 

Let me know if you find out!

From m-lists at the-moon.net  Thu Jun 16 17:56:29 2005
From: m-lists at the-moon.net (Richard Wall)
Date: Thu Jun 16 17:56:29 2005
Subject: [Twisted-web] Formless, custom form layout
In-Reply-To: <42B20565.3060809@imperial.ac.uk>
References: <42A777AD.7050204@the-moon.net> <42B20565.3060809@imperial.ac.uk>
Message-ID: <42B211AD.2060504@the-moon.net>

Phil Mayers wrote:
> Richard Wall wrote:
>> I am trying to customise my Formless layout based on
>> examples/customform.py, but I'm not sure how I can group inputs in
>> fieldsets.
> Good question. I asked the same one a while back (no reply - maybe the
> mail didn't get through). I mused:

It did, but I didn't spot it until after I'd posted my message. I've
learned alot since.

> I suspect I can subclass annotate.Typed or use the complexType stuff to
> somehow group a textbox and dropdown together into one logical bit of
> HTML that is rendered as a single "control"
> ...but other commitments have kept me from revisiting this

For custom output look at custom renderers. You have to register them as
adaptors using compy.registerAdaptor.

Read this article if adaptors are new to you (they were to me)...
http://twistedmatrix.com/projects/core/documentation/howto/components.html

Incase your wondering where Nevow registers it's default adaptors (I
did) they're in nevow/__init__.py.

Some examples...

A multiple choice element (missing from Nevow)...
http://deadbeefbabe.org/paste/888
...I'd like to see this (or something similar) included as default. It's
a very common form pattern.

A date parser element. User can enter date into text box however they
want...
http://deadbeefbabe.org/paste/889

A fix for the output of radio lists...
http://deadbeefbabe.org/paste/890

>> eg. http://rafb.net/paste/results/dhZOhk37.html
> I get a 404

I think they expire after a while. Have used another pastebin here.

>> That's my ideal layout, can anyone give me hints on howto achieve it?
> Let me know if you find out!

I found out on #twisted.web from fog, STemplar and others.

First checkout examples/customform.py from Nevow svn but it doesn't
demonstrate argument slots (as opposed to argument patterns)

Here's an example of argument slots and patterns...
http://rafb.net/paste/results/Tko2XM57.html

So you do get control over each arguments layout and position. The
default Nevow argument pattern doesn't validate (div inside span!).
Using dl,dt,dd makes more sense.

You might also want to apply this patch to nevow...
http://divmod.org/users/roundup.twistd/nevow/issue203

Hope this saves you some time.

-RichardW.


From teratorn at world-net.net  Thu Jun 16 18:27:12 2005
From: teratorn at world-net.net (Eric Mangold)
Date: Thu Jun 16 18:27:36 2005
Subject: [Twisted-web] Hi from newbie
In-Reply-To: <42B1DAB0.4030604@cox.net>
References: <42B1DAB0.4030604@cox.net>
Message-ID: <op.sshnjmkl6k1y1x@localhost.localdomain>

On Fri, 17 Jun 2005 06:01:52 +1000, Ranga Nathan <kairanga@cox.net> wrote:

> Hi all!
> Just stumbled on to Twisted, as it is a pre-req for Xen.
> I still dont have a clear idea of what Twisted is.
> Can you point me to some links? Yes, I have visited Twistedmatrix.com. I  
> would like to get an idea of potential applications for it. For e.g can  
> I build peer-to-peer applications network infrastructure with Twisted?

Yep, you can build almost any kind of networked application with Twisted.

-Eric

P.S. This is twisted-web, not the general Twisted mailing list.

From abulka at netspace.net.au  Thu Jun 16 19:06:13 2005
From: abulka at netspace.net.au (abulka@netspace.net.au)
Date: Thu Jun 16 19:06:18 2005
Subject: [Twisted-web] nevow tutorial - no attribute 'htmlfile' ?
In-Reply-To: <8816fcf805061606557731c65@mail.gmail.com>
References: <1118908577.42b130a1df978@webmail.netspace.net.au>
	<8816fcf805061606557731c65@mail.gmail.com>
Message-ID: <1118970373.42b22205db5cc@webmail.netspace.net.au>

Quoting Sridhar Ratna <sridharinfinity@gmail.com>:
> Try the updated tutorial http://divmod.org/users/mg/nevow-doc/

Ok - thanks.  I tried the hello world example with the latest trunk nevow from
svn.  I had to find my own helloworld.html xhtml document.  The app ran and
displayed my html ok, but appended an error as follows:

C:\Python23\Lib\site-packages\Nevow\nevow\flat\twist.py, line 32 in drive
30                deferred.addCallback(cb).addErrback(eb)
31        except StopIteration:
32            finished.callback('')
33
Locals
finished <nevow.util.Deferred object at 0x0104F2D0> 
exceptions.AttributeError: 'Deferred' object has no attribute 'callback'

Is this normal?
-Andy
  


------------------------------------------------------------
This email was sent from Netspace Webmail: http://www.netspace.net.au


From exarkun at divmod.com  Thu Jun 16 23:47:17 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu Jun 16 23:47:19 2005
Subject: [Twisted-web] Returning Deferred from coerce method in formless
	- patch
In-Reply-To: <44BB17A4-4F02-418A-B4DA-1F72F2D32E00@ulaluma.com>
Message-ID: <20050617054717.5047.1877100079.divmod.quotient.4249@ohm>

On Thu, 16 Jun 2005 12:04:58 -0700, Donovan Preston <dp@ulaluma.com> wrote:
>
>On Jun 15, 2005, at 8:43 PM, Andrea Arcangeli wrote:
>>On Wed, Jun 15, 2005 at 07:46:46PM +0200, Michal Pasternak wrote:
>>>various reasons. You could validate an e-mail address using
>>>queries to DNS servers, or you could validate login name
>
>>Thanks for working to add this feature.
>
>I got it to work, but I'm seeing some weirdness in several  situations. I 
>guess they would be classified "regressions".
>
>I seem to need this all of a sudden, so you are in luck. I will take  a look 
>at fixing the weirdness I see and try to fix it, and commit it  to trunk 
>soon.
>>BTW, I'd also need "context" to be passed to the coerce method (as  last
>>argument), I had to write my own ProcessTypedContext to do that, and
>>it'd be much nicer if the default formless process handler would pass
>>the context to coerce too (though I believe it would break current  apps,
>>but it'd be a very visible breakage, no risk of silent malfunctions at
>>runtime). Said that I also appreciate backwards compatibility ;)
>
>It should be the first argument, for consistency. Also, to retain  backwards 
>compatibility, we could rename the "coerce" method which  takes a context. 
>Perhaps it could be named "convert".
>>I need the context in order to reach the session with
>>inevow.ISession(ctx) inside the coerce handler.
>
>Indeed. formless was originally designed to be web-agnostic and be  usable 
>outside of nevow, but in this case I think it's compelling  enough to allow 
>it.
>

Rather than propagating the context to yet another API, how about just improving the support for dynamic autocallable signatures?  If it weren't so difficult to do dynamic bindings, Typed subclasses could be instantiated with references to anything they needed, rather than needing to magically pull objects out of thin air.

I also wonder what's more compelling about this use-case than about any other use-case of the context.

Jp

From m-lists at the-moon.net  Fri Jun 17 14:11:15 2005
From: m-lists at the-moon.net (Richard Wall)
Date: Fri Jun 17 14:11:15 2005
Subject: [Twisted-web] Formless, custom form layout
In-Reply-To: <42B211AD.2060504@the-moon.net>
References: <42A777AD.7050204@the-moon.net> <42B20565.3060809@imperial.ac.uk>
	<42B211AD.2060504@the-moon.net>
Message-ID: <42B32E63.50200@the-moon.net>

Phil,

Have just learnt on irc that a replacement for formless is imminent...
svn://pollenation.net/forms/trunk

-RichardW.

Richard Wall wrote:
> Phil Mayers wrote:
> 
>>Richard Wall wrote:
>>
>>>I am trying to customise my Formless layout based on
>>>examples/customform.py, but I'm not sure how I can group inputs in
>>>fieldsets.
>>
>>Good question. I asked the same one a while back (no reply - maybe the
>>mail didn't get through). I mused:
> 
> 
> It did, but I didn't spot it until after I'd posted my message. I've
> learned alot since.
> 
> 
>>I suspect I can subclass annotate.Typed or use the complexType stuff to
>>somehow group a textbox and dropdown together into one logical bit of
>>HTML that is rendered as a single "control"
>>...but other commitments have kept me from revisiting this
> 
> 
> For custom output look at custom renderers. You have to register them as
> adaptors using compy.registerAdaptor.
> 
> Read this article if adaptors are new to you (they were to me)...
> http://twistedmatrix.com/projects/core/documentation/howto/components.html
> 
> Incase your wondering where Nevow registers it's default adaptors (I
> did) they're in nevow/__init__.py.
> 
> Some examples...
> 
> A multiple choice element (missing from Nevow)...
> http://deadbeefbabe.org/paste/888
> ...I'd like to see this (or something similar) included as default. It's
> a very common form pattern.
> 
> A date parser element. User can enter date into text box however they
> want...
> http://deadbeefbabe.org/paste/889
> 
> A fix for the output of radio lists...
> http://deadbeefbabe.org/paste/890
> 
> 
>>>eg. http://rafb.net/paste/results/dhZOhk37.html
>>
>>I get a 404
> 
> 
> I think they expire after a while. Have used another pastebin here.
> 
> 
>>>That's my ideal layout, can anyone give me hints on howto achieve it?
>>
>>Let me know if you find out!
> 
> 
> I found out on #twisted.web from fog, STemplar and others.
> 
> First checkout examples/customform.py from Nevow svn but it doesn't
> demonstrate argument slots (as opposed to argument patterns)
> 
> Here's an example of argument slots and patterns...
> http://rafb.net/paste/results/Tko2XM57.html
> 
> So you do get control over each arguments layout and position. The
> default Nevow argument pattern doesn't validate (div inside span!).
> Using dl,dt,dd makes more sense.
> 
> You might also want to apply this patch to nevow...
> http://divmod.org/users/roundup.twistd/nevow/issue203
> 
> Hope this saves you some time.
> 
> -RichardW.
> 
> 


From foom at fuhm.net  Fri Jun 17 19:40:18 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Jun 17 19:40:32 2005
Subject: [Twisted-web] twisted.web2 0.1.0 released
Message-ID: <C2BD6265-023D-4A8A-AEBE-70200B7ECF9C@fuhm.net>

I'm happy to announce the first release of twisted.web2 today. This  
is a rewrite/refactor of the twisted.web HTTP server and framework,  
providing a nicer API (some parts inspired by the resource API that  
Nevow introduced on top of twisted.web) and many internal  
improvements, especially in the area of HTTP conformance.

Some highlights:
- Fully asynchronous twisted server.
- Can run as a HTTP/HTTPS server, or behind an apache mod_proxy, or  
serve requests via SCGI, or even just plain CGI.
- Supports SCGI clients, CGI scripts, WSGI applications. No new HTTP  
client/proxy yet, it's still on the TODO list.
- Also supports most twisted.web resources through a compatibility  
layer.
- Implements HTTP 1.1, including keep-alive, chunking, and pipelining.
- Has premade, correct, header parsers and generators for most of the  
headers.
- Supports streaming data input and output, has a nonblocking  
multipart/form-data parser.
- Automatic support for If-[Un]Modified-Since, If-[None-]Match and  
Range.

You can find downloads and documentation here:
     http://twistedmatrix.com/projects/web2/
You'll need at least Twisted 2.0.1 as well:
     http://twistedmatrix.com/projects/core/


This is still a preliminary release -- the API is not guaranteed to  
be stable to the next release.

James

From corydodt at twistedmatrix.com  Fri Jun 17 23:35:45 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri Jun 17 22:36:09 2005
Subject: [Twisted-web] twisted.web2 0.1.0 released
In-Reply-To: <C2BD6265-023D-4A8A-AEBE-70200B7ECF9C@fuhm.net>
References: <C2BD6265-023D-4A8A-AEBE-70200B7ECF9C@fuhm.net>
Message-ID: <42B3B2B1.6000800@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Congratulations.  I'm looking forward to integrating it into Vellum.

C


James Y Knight wrote:
> I'm happy to announce the first release of twisted.web2 today. This  is
> a rewrite/refactor of the twisted.web HTTP server and framework, 
> providing a nicer API (some parts inspired by the resource API that 
> Nevow introduced on top of twisted.web) and many internal  improvements,
> especially in the area of HTTP conformance.
> 
> Some highlights:
> - Fully asynchronous twisted server.
> - Can run as a HTTP/HTTPS server, or behind an apache mod_proxy, or 
> serve requests via SCGI, or even just plain CGI.
> - Supports SCGI clients, CGI scripts, WSGI applications. No new HTTP 
> client/proxy yet, it's still on the TODO list.
> - Also supports most twisted.web resources through a compatibility  layer.
> - Implements HTTP 1.1, including keep-alive, chunking, and pipelining.
> - Has premade, correct, header parsers and generators for most of the 
> headers.
> - Supports streaming data input and output, has a nonblocking 
> multipart/form-data parser.
> - Automatic support for If-[Un]Modified-Since, If-[None-]Match and  Range.
> 
> You can find downloads and documentation here:
>     http://twistedmatrix.com/projects/web2/
> You'll need at least Twisted 2.0.1 as well:
>     http://twistedmatrix.com/projects/core/
> 
> 
> This is still a preliminary release -- the API is not guaranteed to  be
> stable to the next release.
> 
> James
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCs7Kk3A5SrXAiHQcRAtZQAJ0S+POf5U1dXsiQhasMiiqkR225zwCfUDbk
pFMvN9zJPRRjrgXWViGnnB0=
=ONdu
-----END PGP SIGNATURE-----

From maillists at ivsn.com  Sat Jun 18 02:21:13 2005
From: maillists at ivsn.com (Paul Reznicek)
Date: Sat Jun 18 02:21:51 2005
Subject: [Twisted-web] Reactor failure in current Twisted SVN
Message-ID: <42B3D979.2090107@ivsn.com>

Try this using Twisted 1.3.0, it work as expected
# -----------------------------------------------
from twisted.internet import reactor

def stopTest(passNo):
     reactor.callLater(1, reactor.stop)
     print 'starting reactor', passNo
     reactor.run()
     print 'stopped'

for i in range(10):
     stopTest(i)
# -----------------------------------------------

Try the same with current Twisted, it hung after 1st pass.

Any idea, what is wrong? Thanks in advance,
Paul

From matt at pollenation.net  Sat Jun 18 08:23:08 2005
From: matt at pollenation.net (Matt Goodall)
Date: Sat Jun 18 08:23:41 2005
Subject: [Twisted-web] Formless, custom form layout
In-Reply-To: <42B32E63.50200@the-moon.net>
References: <42A777AD.7050204@the-moon.net>
	<42B20565.3060809@imperial.ac.uk>	<42B211AD.2060504@the-moon.net>
	<42B32E63.50200@the-moon.net>
Message-ID: <42B42E4C.5010101@pollenation.net>

Richard Wall wrote:
> Phil,
> 
> Have just learnt on irc that a replacement for formless is imminent...
> svn://pollenation.net/forms/trunk

Grr, I keep telling people this in #twisted.web ... forms is *not* a
replacement for formless. Feel free to use forms if it meets your needs
but it's really only an HTML forms toolkit.

Perhaps I should explain my reasoning for forms better ...

Formless is really a naked object implementation. Formless is about
exposing the interface (attributes and methods) of an application's
object on the web.

In theory, formless is agnostic about how and where the forms are used
although, at present, there is only webform. Christopher Armstrong
(radix) once wrote a GTK+ renderer for formless typed interfaces but I
think it's probably dead now.

forms, by comparison, is not about object interfaces; it's about
explicitly creating a Form, adding fields to it, rendering it, and
processing it (with validation). Because forms is only interested in
HTML, it also allows a field's widget to be switched easily, without
having to create a new Typed subclass. For instance, I can add a Date
field to a forms form and choose to render that as a text input, three
inputs (dd/mm/yyyy) or even a <select> list of predefined dates, just by
changing the widget.

My original goal with forms was to provide a reasonably flexible HTML
forms package that developers *and* formless.webform could use. It will
never replace formless because it's working at a lower level but it
could potentially replace a lot of formless.webform. Unfortunately, I've
never had time to achieve the formless part of that goal but forms is
quite usable as it is.

In some ways, formless is actually more flexible than forms because it
supports almost complete customisation of the HTML output (see Nevow's
customform example). Personally, I find it quite cumbersome to use and,
since writing forms, I have not needed to customise the form to that
extent anyway. I have to admit that there are times when better control
of the generated HTML would be nice, but I've always got away with it so
far :).

<rant>
While I'm on the subject ;-) ... my pet hate is seeing people "abuse"
formless: using a nested TypedInterface to group attributes so they are
on the same form and submitted in one request; using autocallable to
submit a bunch of attributes because storing the data is easier in a
method than trying to hook into formless after the attributes are set.

I also dislike having to subclass Typed to provide a different widget,
even though the value I get back does not change.
</rant>

Anyway, please try forms out and let me and the other Nevow developers
know what you think of it. If there is enough interest, and I can find
time, I will happily move it into Nevow. Heck, I'll even write some
tests for it ;-). If we can get formless.webform to use it, without
breaking everything people are already doing, then even better.

Cheers, Matt


> 
> -RichardW.
> 
> Richard Wall wrote:
> 
>>Phil Mayers wrote:
>>
>>
>>>Richard Wall wrote:
>>>
>>>
>>>>I am trying to customise my Formless layout based on
>>>>examples/customform.py, but I'm not sure how I can group inputs in
>>>>fieldsets.
>>>
>>>Good question. I asked the same one a while back (no reply - maybe the
>>>mail didn't get through). I mused:
>>
>>
>>It did, but I didn't spot it until after I'd posted my message. I've
>>learned alot since.
>>
>>
>>
>>>I suspect I can subclass annotate.Typed or use the complexType stuff to
>>>somehow group a textbox and dropdown together into one logical bit of
>>>HTML that is rendered as a single "control"
>>>...but other commitments have kept me from revisiting this
>>
>>
>>For custom output look at custom renderers. You have to register them as
>>adaptors using compy.registerAdaptor.
>>
>>Read this article if adaptors are new to you (they were to me)...
>>http://twistedmatrix.com/projects/core/documentation/howto/components.html
>>
>>Incase your wondering where Nevow registers it's default adaptors (I
>>did) they're in nevow/__init__.py.
>>
>>Some examples...
>>
>>A multiple choice element (missing from Nevow)...
>>http://deadbeefbabe.org/paste/888
>>...I'd like to see this (or something similar) included as default. It's
>>a very common form pattern.
>>
>>A date parser element. User can enter date into text box however they
>>want...
>>http://deadbeefbabe.org/paste/889
>>
>>A fix for the output of radio lists...
>>http://deadbeefbabe.org/paste/890
>>
>>
>>
>>>>eg. http://rafb.net/paste/results/dhZOhk37.html
>>>
>>>I get a 404
>>
>>
>>I think they expire after a while. Have used another pastebin here.
>>
>>
>>
>>>>That's my ideal layout, can anyone give me hints on howto achieve it?
>>>
>>>Let me know if you find out!
>>
>>
>>I found out on #twisted.web from fog, STemplar and others.
>>
>>First checkout examples/customform.py from Nevow svn but it doesn't
>>demonstrate argument slots (as opposed to argument patterns)
>>
>>Here's an example of argument slots and patterns...
>>http://rafb.net/paste/results/Tko2XM57.html
>>
>>So you do get control over each arguments layout and position. The
>>default Nevow argument pattern doesn't validate (div inside span!).
>>Using dl,dt,dd makes more sense.
>>
>>You might also want to apply this patch to nevow...
>>http://divmod.org/users/roundup.twistd/nevow/issue203
>>
>>Hope this saves you some time.
>>
>>-RichardW.
>>
>>
> 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \	       Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.

From foom at fuhm.net  Sat Jun 18 11:09:12 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat Jun 18 11:52:08 2005
Subject: [Twisted-web] twisted.web2 0.1.0 released
In-Reply-To: <C2BD6265-023D-4A8A-AEBE-70200B7ECF9C@fuhm.net>
References: <C2BD6265-023D-4A8A-AEBE-70200B7ECF9C@fuhm.net>
Message-ID: <EDF975DE-23D4-4A58-B297-44CC141AD0B0@fuhm.net>


On Jun 17, 2005, at 9:40 PM, James Y Knight wrote:

> I'm happy to announce the first release of twisted.web2 today. This  
> is a rewrite/refactor of the twisted.web HTTP server and framework,  
> providing a nicer API (some parts inspired by the resource API that  
> Nevow introduced on top of twisted.web) and many internal  
> improvements, especially in the area of HTTP conformance.

One thing I forgot to mention: it probably doesn't work with Nevow at  
the moment. It has a compatibility layer for nevow resources that has  
worked in the past but I have not tested it recently. It'd be nice if  
somebody else adopted this project;  a good starting place is the  
web2-2 branch of nevow.

James


From srichter at cosmos.phy.tufts.edu  Sat Jun 18 13:39:42 2005
From: srichter at cosmos.phy.tufts.edu (Stephan Richter)
Date: Sat Jun 18 13:39:42 2005
Subject: [Twisted-web] twisted.web2 0.1.0 released
In-Reply-To: <EDF975DE-23D4-4A58-B297-44CC141AD0B0@fuhm.net>
References: <C2BD6265-023D-4A8A-AEBE-70200B7ECF9C@fuhm.net>
	<EDF975DE-23D4-4A58-B297-44CC141AD0B0@fuhm.net>
Message-ID: <200506181539.42125.srichter@cosmos.phy.tufts.edu>

On Saturday 18 June 2005 13:09, James Y Knight wrote:
> On Jun 17, 2005, at 9:40 PM, James Y Knight wrote:
> > I'm happy to announce the first release of twisted.web2 today. This ?
> > is a rewrite/refactor of the twisted.web HTTP server and framework, ?
> > providing a nicer API (some parts inspired by the resource API that ?
> > Nevow introduced on top of twisted.web) and many internal ?
> > improvements, especially in the area of HTTP conformance.
>
> One thing I forgot to mention: it probably doesn't work with Nevow at ?
> the moment. It has a compatibility layer for nevow resources that has ?
> worked in the past but I have not tested it recently. It'd be nice if ?
> somebody else adopted this project; ?a good starting place is the ?
> web2-2 branch of nevow.

Yipee!

I just released Zope 3.1.0 beta 1, so that we should be soon able to merge the 
twisted integration to the trunk, which means that I need a stable tag, which 
you just provided. Cool.

Regards,
Stephan
-- 
Stephan Richter
CBU Physics & Chemistry (B.S.) / Tufts Physics (Ph.D. student)
Web2k - Web Software Design, Development and Training

From en.karpachov at ospaz.ru  Sun Jun 19 07:59:26 2005
From: en.karpachov at ospaz.ru (en.karpachov@ospaz.ru)
Date: Sun Jun 19 08:00:02 2005
Subject: [Twisted-web] Reactor failure in current Twisted SVN
In-Reply-To: <42B3D979.2090107@ivsn.com>
References: <42B3D979.2090107@ivsn.com>
Message-ID: <20050619135926.GC10607@ospaz.ru>

On Sat, Jun 18, 2005 at 10:21:13AM +0200, Paul Reznicek wrote:
> from twisted.internet import reactor
> 
> def stopTest(passNo):
>     reactor.callLater(1, reactor.stop)
>     print 'starting reactor', passNo
>     reactor.run()
>     print 'stopped'
> 
> for i in range(10):
>     stopTest(i)
> # -----------------------------------------------
> 
> Try the same with current Twisted, it hung after 1st pass.
> 
> Any idea, what is wrong? Thanks in advance,

As far as I can tell, you should run the reactor only once for the program
lifetime.

-- 
jk

From rasjidw at openminddev.net  Mon Jun 20 07:40:39 2005
From: rasjidw at openminddev.net (Rasjid Wilcox)
Date: Mon Jun 20 07:41:15 2005
Subject: [Twisted-web] Shutting down a xmlrpc server with an xmlrpc call
Message-ID: <200506202340.39776.rasjidw@openminddev.net>

Hi,

I am new to twisted-web, so my apologies if this is obvious.  I am happy to be 
pointed at the appropriate documentation.

I am writing an xmlrpc server, and would like to there to be an xmlrpc call to 
shutdown the server gracefully.

Ideally upon the call being made, it would return a 'success' response to the 
client, the reactor would stop taking any new requests, would finish any 
existing ones, and then exit cleanly.

What I currently have is -
    def xmlrpc_quit(self):
        reactor.stop()

but then the caller gets:

>>> import xmlrpclib
>>> s = xmlrpclib.Server('http://localhost:7080/')
>>> s.quit()
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "/usr/lib/python2.3/xmlrpclib.py", line 1029, in __call__
    return self.__send(self.__name, args)
  File "/usr/lib/python2.3/xmlrpclib.py", line 1316, in __request
    verbose=self.__verbose
  File "/usr/lib/python2.3/xmlrpclib.py", line 1070, in request
    headers
xmlrpclib.ProtocolError: <ProtocolError for localhost:7080/: -1 >

All suggestions / hints would be greatly appreciated.

Cheers,

Rasjid.

-- 
Rasjid Wilcox
Melbourne, Australia (UTC +10 hrs)

From matt at pollenation.net  Mon Jun 20 08:17:19 2005
From: matt at pollenation.net (Matt Goodall)
Date: Mon Jun 20 08:17:21 2005
Subject: [Twisted-web] Shutting down a xmlrpc server with an xmlrpc call
In-Reply-To: <200506202340.39776.rasjidw@openminddev.net>
References: <200506202340.39776.rasjidw@openminddev.net>
Message-ID: <42B6CFEF.7010307@pollenation.net>

Rasjid Wilcox wrote:
> Hi,
> 
> I am new to twisted-web, so my apologies if this is obvious.  I am happy to be 
> pointed at the appropriate documentation.
> 
> I am writing an xmlrpc server, and would like to there to be an xmlrpc call to 
> shutdown the server gracefully.
> 
> Ideally upon the call being made, it would return a 'success' response to the 
> client, the reactor would stop taking any new requests, would finish any 
> existing ones, and then exit cleanly.
> 
> What I currently have is -
>     def xmlrpc_quit(self):
>         reactor.stop()
> 
> but then the caller gets:
> 
> 
>>>>import xmlrpclib
>>>>s = xmlrpclib.Server('http://localhost:7080/')
>>>>s.quit()
> 
> Traceback (most recent call last):
>   File "<stdin>", line 1, in ?
>   File "/usr/lib/python2.3/xmlrpclib.py", line 1029, in __call__
>     return self.__send(self.__name, args)
>   File "/usr/lib/python2.3/xmlrpclib.py", line 1316, in __request
>     verbose=self.__verbose
>   File "/usr/lib/python2.3/xmlrpclib.py", line 1070, in request
>     headers
> xmlrpclib.ProtocolError: <ProtocolError for localhost:7080/: -1 >
> 
> All suggestions / hints would be greatly appreciated.

You probably just need to return *something* from xmlrpc_quit, i.e. an
empty string. Currently, xmlrpc_quit returns None which is not supported
in XML-RPC.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.

From p.mayers at imperial.ac.uk  Mon Jun 20 08:49:56 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon Jun 20 08:50:31 2005
Subject: [Twisted-web] Shutting down a xmlrpc server with an xmlrpc call
In-Reply-To: <200506202340.39776.rasjidw@openminddev.net>
References: <200506202340.39776.rasjidw@openminddev.net>
Message-ID: <42B6D794.1080306@imperial.ac.uk>

Rasjid Wilcox wrote:
> Hi,
> 
> I am new to twisted-web, so my apologies if this is obvious.  I am happy to be 
> pointed at the appropriate documentation.
> 
> I am writing an xmlrpc server, and would like to there to be an xmlrpc call to 
> shutdown the server gracefully.
> 
> Ideally upon the call being made, it would return a 'success' response to the 
> client, the reactor would stop taking any new requests, would finish any 
> existing ones, and then exit cleanly.
> 
> What I currently have is -
>     def xmlrpc_quit(self):
>         reactor.stop()

Maybe:

reactor.callLater(1, reactor.stop)
return "closing in 1 second"

?

From p.mayers at imperial.ac.uk  Mon Jun 20 09:16:51 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon Jun 20 09:17:31 2005
Subject: [Twisted-web] Basic HTTP auth?
Message-ID: <42B6DDE3.4060905@imperial.ac.uk>

Ok, I'll admit it, I'm baffled. The plethora of objects (realm, avatar, 
checker, mind) in twisted.cred has me stumped, even more so when it 
comes to restricting a portion of a Nevow website.

What I'd like to do is check passwords (supplied in an HTTP Basic auth 
manner) out to the Cyrus SASLauthd unix socket.

class saslauthd(protocol.Protocol):
     # code to talk to saslauthd via unix socket
     # and binary protocol goes here...
     def authenticate(self, username, password):
         d = defer.Deferred()
         self.queue(username, password, d)
         return d

...however, though I can monkey-copy the code for something like 
guarded.py in examples/ I don't really understand it, which is a recipie 
for distaster, much less extend it with (I think?) my own checker; and 
the examples all use nevow.guard which appears to be cookie based.

Can anyone provide a simple explanation of what I'd need to do to a page 
to make it and its children require HTTP basic auth, which is handled 
via my own auth function/class?

From rasjidw at openminddev.net  Mon Jun 20 16:39:47 2005
From: rasjidw at openminddev.net (Rasjid Wilcox)
Date: Mon Jun 20 16:40:24 2005
Subject: [Twisted-web] Shutting down a xmlrpc server with an xmlrpc call
In-Reply-To: <42B6D794.1080306@imperial.ac.uk>
References: <200506202340.39776.rasjidw@openminddev.net>
	<42B6D794.1080306@imperial.ac.uk>
Message-ID: <200506210839.47595.rasjidw@openminddev.net>

On Tue, 21 Jun 2005 12:49 am, Phil Mayers wrote:
> Rasjid Wilcox wrote:
> > I am writing an xmlrpc server, and would like to there to be an xmlrpc
> > call to shutdown the server gracefully.
>
> Maybe:
>
> reactor.callLater(1, reactor.stop)
> return "closing in 1 second"

Works like a charm.

Thanks,

Rasjid.

-- 
Rasjid Wilcox
Melbourne, Australia (UTC +10 hrs)

From rfmeraz at gmail.com  Tue Jun 21 11:04:34 2005
From: rfmeraz at gmail.com (Richard Meraz)
Date: Tue Jun 21 11:06:16 2005
Subject: [Twisted-web] Defers, the reactor,
	and idiomatic/proper usage -- new user needs some advice?
Message-ID: <f98c791005062110047d97a2d5@mail.gmail.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: feedlib.py
Type: text/x-python
Size: 5641 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050621/878040d8/feedlib-0001.py
From ross at sourcelabs.com  Tue Jun 21 15:44:18 2005
From: ross at sourcelabs.com (Ross Jekel)
Date: Tue Jun 21 15:44:26 2005
Subject: [Twisted-web] domish.elementStream()
Message-ID: <1119390258.8123.13.camel@linux.site>

Hello,

Neither or the two possible element stream classes when parsing
correctly hook the root element to its children. This is pretty easy to
see why from the code (below) but thought I would check to see if this
is on purpose or something. What I wanted to do was just save off the
root element passed to DocumentStartEvent from either class and be able
to do XPathQueries on it. Since the root element returned doesn't have
any children though, it fails.

The code for both classes is similar to this:

        # Construct the new element
        e = Element(qname, self.defaultNsStack[-1], attrs)

        # Document already started
        if self.documentStarted == 1:
            if self.currElem != None:
                self.currElem.children.append(e)
                e.parent = self.currElem
            self.currElem = e

        # New document
        else:
            self.documentStarted = 1
            self.DocumentStartEvent(e)

Since self.currElem isn't set to e for the first element, e never gets
it's children list filled in.

Below is a sample program that shows what I'm talking about. It prints
"0 []" when it should print "1 [<<twisted.xish.domish.Element
object...>, ...]".

from twisted.xish import domish
from twisted.xish import xpath

# Taken from twisted/xish/test/test_xpath.py
xmlBlob = """
<foo xmlns='testns' attrib1='value1' attrib3="user@host/resource">
     somecontent
     <bar>
        <foo>
         <gar>DEF</gar>
        </foo>
     </bar>
     somemorecontent
     <bar attrib2="value2">
        <bar>
          <foo/>
          <gar>ABC</gar>
        </bar>
     </bar>
 </foo>
"""

p = domish.SuxElementStream()
elem = list()
p.DocumentStartEvent = lambda e: elem.append(e)
p.ElementEvent = lambda e: None
p.DocumentEndEvent = lambda: None
p.parse(xmlBlob)
print xpath.matches("/foo/bar", elem[0]), elem[0].children

Thanks,
Ross


From mordaha at gmail.com  Wed Jun 22 02:10:34 2005
From: mordaha at gmail.com (Little)
Date: Wed Jun 22 02:11:07 2005
Subject: [Twisted-web] Nevow, formless: complex widgets
Message-ID: <899dbb7050622011071c345a7@mail.gmail.com>

How can i build a "complex control" which consists of a number of standart 
widgets?
 For example "DateWidget" which consits of a three standard
annotate.Listwidgets DayList, MonthList and YearList?
 This is a simple example. 
More complex example is a String+List widget, where the List data is based 
on String data submitted.
Explain:
 1. String is empty. List is Emply.
2. User types a phrase into String and presses Submit button.
3. Same form, with ERROR in List (whis is not selected) but List is not 
emply, it's filled from DataBase using String value like filter in query.
4. A user selects a value from List and presses submit again
 The most copmlex example is a String+List with a live XMLHTTP-request when 
List filled from XMLHTTPrequest.
 I do it in past on PHP, but i can't find any way how i can do it in nevow 
(using formless, not manual form submitting)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050622/b054e8ce/attachment.htm
From jblocksom at gsti3d.com  Wed Jun 22 10:13:41 2005
From: jblocksom at gsti3d.com (Jonathan Blocksom)
Date: Wed Jun 22 10:14:46 2005
Subject: [Twisted-web] Returning an HTTP error from render method
Message-ID: <42B98E35.8090900@gsti3d.com>

Hi, I'm trying to figure out how to return an HTTP error in the render 
method of a custom Resource.  I can't find any docs on it, but from 
poking around in the code I came up with the code below that doesn't do 
it.  Can somebody point me in the right direction for returning an error 
from the render method?  Or should I be returning the error somewhere else?

Thanks.

---

from twisted.web import server
from twisted.internet import reactor
from twisted.web.resource import Resource

class Sample404(Resource):
     "Returns a 404 error for everything except /hello"

     isLeaf = True
     def render_GET(self, request):
         if (request.path != '/hello'):
             request.setResponseCode(404)
             request.finish()
             return server.NOT_DONE_YET
         else:
             return "<html>You found me!</html>"


if __name__=='__main__':
     site = server.Site(Sample404())

     reactor.listenTCP(8080, site)
     reactor.run()



From grant at osafoundation.org  Wed Jun 22 11:11:57 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Wed Jun 22 11:12:08 2005
Subject: [Twisted-web] Returning an HTTP error from render method
In-Reply-To: <42B98E35.8090900@gsti3d.com>
References: <42B98E35.8090900@gsti3d.com>
Message-ID: <4E760BDF-F5EA-4EEC-B3DF-CDE8E2D84165@osafoundation.org>

You could do something like

import twisted.web.error as error


def render_GET(self, request):
   if (request.path != '/hello'):
     page = error.NoResource(message="The resource %s was not found"  
% request.URLPath())
     return page.render(request)

    ...

This will set the 404 response, and the return value of render() is  
some html including your message. There are other handy error pages  
in twisted.web.error.

--Grant

which will set the 404, and include a relat

On Jun 22, 2005, at 9:13 , Jonathan Blocksom wrote:

> Hi, I'm trying to figure out how to return an HTTP error in the  
> render method of a custom Resource.  I can't find any docs on it,  
> but from poking around in the code I came up with the code below  
> that doesn't do it.  Can somebody point me in the right direction  
> for returning an error from the render method?  Or should I be  
> returning the error somewhere else?
>
> Thanks.
>
> ---
>
> from twisted.web import server
> from twisted.internet import reactor
> from twisted.web.resource import Resource
>
> class Sample404(Resource):
>     "Returns a 404 error for everything except /hello"
>
>     isLeaf = True
>     def render_GET(self, request):
>         if (request.path != '/hello'):
>             request.setResponseCode(404)
>             request.finish()
>             return server.NOT_DONE_YET
>         else:
>             return "<html>You found me!</html>"
>
>
> if __name__=='__main__':
>     site = server.Site(Sample404())
>
>     reactor.listenTCP(8080, site)
>     reactor.run()
>
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>


From alberto.trujillo at ucd.ie  Wed Jun 22 11:14:07 2005
From: alberto.trujillo at ucd.ie (Alberto Trujillo)
Date: Wed Jun 22 11:23:14 2005
Subject: [Twisted-web] Uploading files
Message-ID: <42B99C5F.7020605@ucd.ie>

Could somebody explain me how can I upload a file to the server, or how 
could I sent it by mail.
Thanks.

From dgray at omniti.com  Thu Jun 23 10:18:06 2005
From: dgray at omniti.com (Dave Gray)
Date: Thu Jun 23 10:17:49 2005
Subject: [Twisted-web] Defers, the reactor,	and idiomatic/proper usage
	-- new user needs some advice?
In-Reply-To: <f98c791005062110047d97a2d5@mail.gmail.com>
References: <f98c791005062110047d97a2d5@mail.gmail.com>
Message-ID: <42BAE0BE.1040209@omniti.com>

I'm not familiar with feedlib, etc, but I'll answer what I can.

Richard Meraz wrote:
> MAXTIME = 60 # Kill crawl after this time
> TIMEOUT = 20 # Kill page retrieval after this time inactive
> MAXDEPTH = 3 # Recurse this depth when crawling page.
> 
> # Question: There seem to be many idioms to aggregate information from 
> different defered call-back chains in twisted..  Since everything runs 
> in a single thread I just stuck my stuff in a global class and everybody 
> modifies the vars there as I pass it around to the call-backs that 
> should see it.  Seems okay for a small script like this?

That seems fine, yeah. I think I would pass around the StateVars 
instance as a context if I were coding this. Probably the same effect.

> class StateVars:
>     '''Keep Global state for starting/stopping feedfinding and a record 
> of links we have checked and their status'''
>     connections = 1 
>     links_checked = {} # Structure: {url: (is RSS/ATOM/RDF, page-content)}
> 
> # Question: start_feed_crawl is where I set up my defers.  getPage 
> returns a defer and I attach my call-back process_link.
> # addCallbacks adds a callback/errback in parallel so only one or the 
> other is called?  so I need to add
> # the final errback to catch errors from callback process_link ?

Correct. Well, sort of. See below.

> def start_feed_crawl(uri,depth):
>     '''Harvest feeds from a uri'''
> # Question: how to time-out this deferred chain if getPage is taking too 
> long to finish its work.
> # what exactly does the argument timeout to getPage do,  does it timeout 
> the socket after a no-response
> # or does it put an upper-bound on how long getPage has to finish its work?
> 
>     getPage(uri, timeout=TIMEOUT).addCallbacks(callback=process_link,
>                                                       callbackArgs=(uri, 
> depth, StateVars),
>                                                       errback = 
> process_error,
>                                                       errbackArgs=(uri,StateVars)
>                                                       ).addErrback(process_error, 
> uri, StateVars)

It seems clearer to me to write this as follows, but that's personal 
preference:

     d = getPage(...)
     d.addCallbacks(...)
     d.addErrback(...)

But since you're setting up the call to the same errback twice, you 
could simplify this to:

     d = getPage(...)
     d.addCallback(process_link, uri, depth, StateVars)
     d.addErrback(process_error, uri, StateVars)

<http://twistedmatrix.com/projects/core/documentation/howto/defer.html#auto4> 
has a nice visual explanation of what happens when.

> # Question: since I'm starting up these defers in a callback they are
> # being created after I've called reactor.run() since we call start_feed_crawl
> # as we find new links that meet our criteria.  Am I doing anything bad here?
> # All the examples I've seen (eg. p. 548-552 Python Cookbook, great eg by V. Volonghi
> # and P. Cogolo) have their data up-front and therefore set-up all the defers before calling
> # reactor.run().  Here I'm discovering my data as I go along and setting up deferrs while
> # the reactor is spinning.  Here is my fundamental lack of understanding.  While this script
> # seems to run okay, is it okay to do this?

Yes, that's fine. I think the one you've seen the most is the odd case - 
being able to set up all the Deferreds beforehand.

>     # Question: Is this how I kill the reactor -- ie. using some sort of 
> state condition.  Is there a better way,
>     # should I try better to understand deferred-list.  For example.  A 
> top-level deferred-list that contains
>     # other deferred-lists which get created to hold all the defers 
> (created by start_feed_crawl) for the
>     # links on a given page.  Could this deferred-list be told to stop 
> the reactor when the other lists have
>     # fired their callback (after the component defers have finished) ?  
> (Sorry for the convoluted question here
>     # I'm new at this)

What you want to do is stop the reactor when everything is done 
processing. So after you call start_feed_crawl the first time, returning 
the Deferred that getPage gives you, you can add a callback to that 
which stops the reactor. The trick here is that if you stuff that 
deferred into a DeferredList before you add the callback that stops the 
reactor then if your first operation itself returns a deferred, the 
DeferredList won't call its callbacks until the other Deferred operation 
completes. So you'll be stacking up a whole bunch of Deferreds inside 
the first one, and the callback on the DeferredList that does the 
reactor.stop won't fire until you don't return a Deferred.

There might be an easier way to do this, but this the way I know 
(example attached). Someone please let me know if there's an easier way. 
To see the example, run it with 'twistd -noy fetchpage.tac' then do 
'telnet localhost 9000' and send:

GET /?target=http://www.google.com/ HTTP/1.1
Host: localhost



> Final question: occasionally I get errors that come from the http.py 
> code in twisted.  This get printed to the console, but don't necessarily 
> stop my program.  Should my errbacks be catching these?  How do I keep 
> errors from getting logged to the console (beside redirecting stderr). I 
> can post an example if necessary of the errors I'm getting.

When you create the DeferredList, pass in consumeErrors=1 - this will 
make debugging that much more annoying though...

HTH,
Dave
-------------- next part --------------
from twisted.web import server
from twisted.web.resource import Resource
from twisted.web.client import getPage

from twisted.internet import defer, reactor
from twisted.python import log
from cgi import escape
class Foo(Resource):
    counter = 0
    isLeaf=True
    def render_GET (self, request):
        self.rq = request
        target = escape(request.args['target'][0])
        d = getPage(target).addCallback(self.print_page)
        d.addErrback(log.err)
        dl = defer.DeferredList([d])
        dl.addCallback(stopNow)
        dl.addErrback(log.err)
        return server.NOT_DONE_YET

    def print_page (self, html):
        if Foo.counter < 5:
            Foo.counter += 1
            print 'request '+str(Foo.counter)
            d = defer.Deferred()
            d.addCallback(self.print_page)
            d.addErrback(log.err)
            reactor.callLater(1, d.callback, html)
            return d
        else:
            print 'now we can write stuff back'
            self.rq.write(str(len(html))+' '+str(Foo.counter))
            self.rq.finish()
            self.rq.transport.loseConnection()
            # no deferred being returned, stopNow fires

def stopNow(cbval):
    # can't add reactor.stop as a callback directly
    # because it doesn't know what to do with the extra
    # argument being returned from the callback
    print cbval
    reactor.stop()

resource = Foo()
site = server.Site(resource)

from twisted.application import service, internet
application = service.Application("Foo")
internet.TCPServer(9000, site).setServiceParent(application)

# vim: ai sts=4 sw=4 expandtab syntax=python :
From rfmeraz at gmail.com  Thu Jun 23 12:35:15 2005
From: rfmeraz at gmail.com (Richard Meraz)
Date: Thu Jun 23 12:35:48 2005
Subject: [Twisted-web] Re: Twisted-web Digest, Vol 15, Issue 20
In-Reply-To: <E1DlVzi-0002cU-02@pyramid.twistedmatrix.com>
References: <E1DlVzi-0002cU-02@pyramid.twistedmatrix.com>
Message-ID: <f98c7910050623113543c8be7e@mail.gmail.com>

Thanks Dave: very clear and easy to follow answer and example code.  I
definitely appreciate your time.

Final question.  Is there a convenient way to put an upper-bound on
how long twisted.web.client.getPage is allowed to complete its work. I
know twisted.web.client.getPage takes a timeout parameter, but this
seems more like a socket timeout which won't kill for example a
getPage waiting on a low-bandwidth server (is my understanding
correct?)

 For example, if I'm using the asyncore.py framework to mange IO i can
use the channel.timestamp attribute to examine how long things have
been going in order to kill long-running IO in a polling loop.  Of
course with asyncore I can manage my own polling loop which I can't
see an easy way to do using reactor() (someone care to comment on that
since I'm probably missing something).

-Thanks again

-Richard Meraz


On 6/23/05, twisted-web-request@twistedmatrix.com
<twisted-web-request@twistedmatrix.com> wrote:
> Send Twisted-web mailing list submissions to
>         twisted-web@twistedmatrix.com
> 
> To subscribe or unsubscribe via the World Wide Web, visit
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> or, via email, send a message with subject or body 'help' to
>         twisted-web-request@twistedmatrix.com
> 
> You can reach the person managing the list at
>         twisted-web-owner@twistedmatrix.com
> 
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-web digest..."
> 
> 
> Today's Topics:
> 
>    1. Re: Defers, the reactor,  and idiomatic/proper usage      -- new
>       user needs some advice? (Dave Gray)
> 
> 
> ----------------------------------------------------------------------
> 
> Message: 1
> Date: Thu, 23 Jun 2005 12:18:06 -0400
> From: Dave Gray <dgray@omniti.com>
> Subject: Re: [Twisted-web] Defers, the reactor, and idiomatic/proper
>         usage   -- new user needs some advice?
> To: Richard Meraz <rfmeraz@gmail.com>, "Discussion of twisted.web,
>         Nevow,  and Woven" <twisted-web@twistedmatrix.com>
> Message-ID: <42BAE0BE.1040209@omniti.com>
> Content-Type: text/plain; charset="windows-1252"
> 
> I'm not familiar with feedlib, etc, but I'll answer what I can.
> 
> Richard Meraz wrote:
> > MAXTIME = 60 # Kill crawl after this time
> > TIMEOUT = 20 # Kill page retrieval after this time inactive
> > MAXDEPTH = 3 # Recurse this depth when crawling page.
> >
> > # Question: There seem to be many idioms to aggregate information from
> > different defered call-back chains in twisted..  Since everything runs
> > in a single thread I just stuck my stuff in a global class and everybody
> > modifies the vars there as I pass it around to the call-backs that
> > should see it.  Seems okay for a small script like this?
> 
> That seems fine, yeah. I think I would pass around the StateVars
> instance as a context if I were coding this. Probably the same effect.
> 
> > class StateVars:
> >     '''Keep Global state for starting/stopping feedfinding and a record
> > of links we have checked and their status'''
> >     connections = 1
> >     links_checked = {} # Structure: {url: (is RSS/ATOM/RDF, page-content)}
> >
> > # Question: start_feed_crawl is where I set up my defers.  getPage
> > returns a defer and I attach my call-back process_link.
> > # addCallbacks adds a callback/errback in parallel so only one or the
> > other is called?  so I need to add
> > # the final errback to catch errors from callback process_link ?
> 
> Correct. Well, sort of. See below.
> 
> > def start_feed_crawl(uri,depth):
> >     '''Harvest feeds from a uri'''
> > # Question: how to time-out this deferred chain if getPage is taking too
> > long to finish its work.
> > # what exactly does the argument timeout to getPage do,  does it timeout
> > the socket after a no-response
> > # or does it put an upper-bound on how long getPage has to finish its work?
> >
> >     getPage(uri, timeout=TIMEOUT).addCallbacks(callback=process_link,
> >                                                       callbackArgs=(uri,
> > depth, StateVars),
> >                                                       errback =
> > process_error,
> >                                                       errbackArgs=(uri,StateVars)
> >                                                       ).addErrback(process_error,
> > uri, StateVars)
> 
> It seems clearer to me to write this as follows, but that's personal
> preference:
> 
>      d = getPage(...)
>      d.addCallbacks(...)
>      d.addErrback(...)
> 
> But since you're setting up the call to the same errback twice, you
> could simplify this to:
> 
>      d = getPage(...)
>      d.addCallback(process_link, uri, depth, StateVars)
>      d.addErrback(process_error, uri, StateVars)
> 
> <http://twistedmatrix.com/projects/core/documentation/howto/defer.html#auto4>
> has a nice visual explanation of what happens when.
> 
> > # Question: since I'm starting up these defers in a callback they are
> > # being created after I've called reactor.run() since we call start_feed_crawl
> > # as we find new links that meet our criteria.  Am I doing anything bad here?
> > # All the examples I've seen (eg. p. 548-552 Python Cookbook, great eg by V. Volonghi
> > # and P. Cogolo) have their data up-front and therefore set-up all the defers before calling
> > # reactor.run().  Here I'm discovering my data as I go along and setting up deferrs while
> > # the reactor is spinning.  Here is my fundamental lack of understanding.  While this script
> > # seems to run okay, is it okay to do this?
> 
> Yes, that's fine. I think the one you've seen the most is the odd case -
> being able to set up all the Deferreds beforehand.
> 
> >     # Question: Is this how I kill the reactor -- ie. using some sort of
> > state condition.  Is there a better way,
> >     # should I try better to understand deferred-list.  For example.  A
> > top-level deferred-list that contains
> >     # other deferred-lists which get created to hold all the defers
> > (created by start_feed_crawl) for the
> >     # links on a given page.  Could this deferred-list be told to stop
> > the reactor when the other lists have
> >     # fired their callback (after the component defers have finished) ?
> > (Sorry for the convoluted question here
> >     # I'm new at this)
> 
> What you want to do is stop the reactor when everything is done
> processing. So after you call start_feed_crawl the first time, returning
> the Deferred that getPage gives you, you can add a callback to that
> which stops the reactor. The trick here is that if you stuff that
> deferred into a DeferredList before you add the callback that stops the
> reactor then if your first operation itself returns a deferred, the
> DeferredList won't call its callbacks until the other Deferred operation
> completes. So you'll be stacking up a whole bunch of Deferreds inside
> the first one, and the callback on the DeferredList that does the
> reactor.stop won't fire until you don't return a Deferred.
> 
> There might be an easier way to do this, but this the way I know
> (example attached). Someone please let me know if there's an easier way.
> To see the example, run it with 'twistd -noy fetchpage.tac' then do
> 'telnet localhost 9000' and send:
> 
> GET /?target=http://www.google.com/ HTTP/1.1
> Host: localhost
> 
> 
> 
> > Final question: occasionally I get errors that come from the http.py
> > code in twisted.  This get printed to the console, but don't necessarily
> > stop my program.  Should my errbacks be catching these?  How do I keep
> > errors from getting logged to the console (beside redirecting stderr). I
> > can post an example if necessary of the errors I'm getting.
> 
> When you create the DeferredList, pass in consumeErrors=1 - this will
> make debugging that much more annoying though...
> 
> HTH,
> Dave
> -------------- next part --------------
> from twisted.web import server
> from twisted.web.resource import Resource
> from twisted.web.client import getPage
> 
> from twisted.internet import defer, reactor
> from twisted.python import log
> from cgi import escape
> class Foo(Resource):
>     counter = 0
>     isLeaf=True
>     def render_GET (self, request):
>         self.rq = request
>         target = escape(request.args['target'][0])
>         d = getPage(target).addCallback(self.print_page)
>         d.addErrback(log.err)
>         dl = defer.DeferredList([d])
>         dl.addCallback(stopNow)
>         dl.addErrback(log.err)
>         return server.NOT_DONE_YET
> 
>     def print_page (self, html):
>         if Foo.counter < 5:
>             Foo.counter += 1
>             print 'request '+str(Foo.counter)
>             d = defer.Deferred()
>             d.addCallback(self.print_page)
>             d.addErrback(log.err)
>             reactor.callLater(1, d.callback, html)
>             return d
>         else:
>             print 'now we can write stuff back'
>             self.rq.write(str(len(html))+' '+str(Foo.counter))
>             self.rq.finish()
>             self.rq.transport.loseConnection()
>             # no deferred being returned, stopNow fires
> 
> def stopNow(cbval):
>     # can't add reactor.stop as a callback directly
>     # because it doesn't know what to do with the extra
>     # argument being returned from the callback
>     print cbval
>     reactor.stop()
> 
> resource = Foo()
> site = server.Site(resource)
> 
> from twisted.application import service, internet
> application = service.Application("Foo")
> internet.TCPServer(9000, site).setServiceParent(application)
> 
> # vim: ai sts=4 sw=4 expandtab syntax=python :
> 
> ------------------------------
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 
> 
> End of Twisted-web Digest, Vol 15, Issue 20
> *******************************************
> 


-- 
Never think there is anything impossible for the soul. It is the
greatest heresy to think so. If there is sin, this is the only sin ?
to say that you are weak, or others are weak.

Swami Vivekananda
From tazzo at email.it  Sat Jun 25 14:39:26 2005
From: tazzo at email.it (Tazzo)
Date: Sat Jun 25 14:40:05 2005
Subject: [Twisted-web] memory leak with metaclass
Message-ID: <aa51a4617213ddf0d567524ebb42b79b@81.208.60.192>

We use metaclass for building on the fly new rendering pages and
we found a memory leak.
Managing with garbage collector we found that new classes are not released
for unknown reason.
Here a basic source that leak memory:

#-----------------------
print 'running server'
import nevow
from nevow import appserver
from twisted.application import service
from twisted.application import internet
 
class Controller(nevow.rend.Page):
  def locateChild(self,context,segments):
    return
type('Leaker',(nevow.rend.Page,),{'docFactory':nevow.loaders.stan(nevow.tags.h1['I
leak memory'])})(),[]
 
 
application=service.Application('leaker')
webservice = internet.TCPServer(12345,appserver.NevowSite(Controller()))
webservice.setServiceParent(application)
 
 
##AND USE THIS FOR SEE MEMORY LEAK
 
##import urllib
##for i in range(99999):
##  urllib.urlopen('http://localhost:12345/')

#-----------------------



Is it a bug?
Is there any way to avoid the memory leak?

#tazzo 
#http://www.pytypus.org/

 
 --
 Email.it, the professional e-mail, gratis per te: http://www.email.it/f
 
 Sponsor:
 Occhialeria.it
Scopri le migliori marche a prezzi imbattibili
 Clicca qui: http://adv.email.it/cgi-bin/foclick.cgi?mid=879&d=20050625



From chris.were at gmail.com  Mon Jun 27 00:30:40 2005
From: chris.were at gmail.com (Chris (FeedTagger))
Date: Mon Jun 27 00:31:16 2005
Subject: [Twisted-web] Livepage, ClientHandle and context [continued]
Message-ID: <35bb42690506262330eba7851@mail.gmail.com>

Sorry, just registered so unable to join existing thread.

I'm having similar problems that are outlined here:
http://twistedmatrix.com/pipermail/twisted-web/2005-June/001523.html
"I also can't see a way to use handler_* methods, because this methods
must be inside a rend.Fragment subclass in my case."

I expect this can be rectified in livepage.py (line 728 on my co):
    def locateHandler(self, ctx, path, name):
        ### XXX TODO: Handle path
        return getattr(self, 'handle_%s' % (name, ))

My implementation is slightly different in that I'm not using
rend.Fragment, I have a Page broker that responds to requests and
returns a new page that implements from a master page.

--------------------------
myserver.py:

pageMappings ] {
  'search': search.Page
  'index': index.Page
}

class Page(livepage.LivePage):
  def locateChild(self,ctx,segments):
    # depending on the value of segments[0] return the correct page
    # from a predefined map, otherwise 404
    page = pageMappings[segments[0]]
    return page(), segments[1]

Then in index.Page.py:
class Page(_master.FrontPage):

  def render_button(self,ctx,data):
    return ctx.tag(onclick="server.handle('click')")

  def handle_click(self,ctx,client):
    client.alert('clicked button')

_master.py:

class CorePage(livepage.LivePage):
  # various properties that all generic pages should exhibit

class FrontPage(CorePage):
  # load front page template
  # provide any default slot fills etc.

--------------------
Now the problem as I see it (with primitive livepage knowledge) is
that the livepage request that's sent with server.handle('click') is
attempting to be mapped to myserver.Page, instead of my intended
index.Page class.
Is it possible to provide this functionality or should this whole
template based approach be re-worked in some other fashion?

... as a side note using a generic dispatcher of pages (myserver.Page)
I can do cool things like detect /xml appended to url and instead of
loading .xhtml templates, load the appropriate .xml templates. Hence
without changing any application code I can generate xml versions of
every single webpage across a site.

Cheers,
Chris

From tazzo at email.it  Mon Jun 27 01:56:35 2005
From: tazzo at email.it (tazzo)
Date: Mon Jun 27 01:54:58 2005
Subject: [Twisted-web] memory leak with metaclass
In-Reply-To: <aa51a4617213ddf0d567524ebb42b79b@81.208.60.192>
References: <aa51a4617213ddf0d567524ebb42b79b@81.208.60.192>
Message-ID: <42BFB133.7010907@email.it>

Also without metaclass there is a memory leak, returning
instances of rend.Page from locateChild they are never released.
Here a simple example, the function 'do' build on file log
a simple statistic every 5 sec about only instances classes  that are
growing up during page serving.
Try to start the server and ask some page continuosly, you'll see
the number of rendPage grow up with some other classes.

#-------------------------
import nevow
 
instances={}
count=0
def do():
  global count
  import gc
  gc.collect()
  objects=gc.get_objects()
  new={}
  for object in objects:
    try:
      new[str(object.__class__)]=new.setdefault(str(object.__class__),0)+1
    except:
      pass
  show=set()
  for key,value in new.items():
    if key in instances:
      if instances[key][-1]!=value:
        show.add(key)
    else:
      instances[key]=[0]*count
      show.add(key)
    instances[key].append(new[key])
  log=open('log','w')
  for klass,lista in sorted(instances.items()):
    if klass in show:
      print >>log,klass
      print >>log,'\t',lista
  log.close()
  count+=1

import twisted
from twisted.internet.task import LoopingCall
from nevow import appserver


LoopingCall(do).start(5)
 
 
class Controller(nevow.rend.Page):
  def locateChild(self,context,segments):
    page=nevow.rend.Page()
    page.docFactory=nevow.loaders.stan(nevow.tags.h1['I leak memory'])
    return page,[]
 
 
application=twisted.application.service.Application('leaker')
webservice = 
twisted.application.internet.TCPServer(12345,appserver.NevowSite(Controller()))
webservice.setServiceParent(application)
#-------------------------

-- 
La presente comunicazione potrebbe contenere informazioni riservate e/o
protette
da segreto professionale ed e' indirizzata esclusivamente ai destinatari della
medesima qui indicati. Se avete ricevuto per errore la presente comunicazione,
siete invitati a segnalarcelo, rispondendo a questo stesso indirizzo di
e-mail,
e a cancellare il presente messaggio dal Vostro sistema. E' strettamente
proibito
e potrebbe essere fonte di violazione di legge qualsiasi uso, comunicazione,
copia
o diffusione dei contenuti di questa comunicazione da parte di chi la abbia
ricevuta per errore o in violazione degli scopi della presente.
Il messaggio e' stato analizzato alla ricerca di virus o contenuti pericolosi
ed
e' risultato NON infetto.



From gpereira at grintek.com  Mon Jun 27 05:25:36 2005
From: gpereira at grintek.com (Gregory Pereira)
Date: Mon Jun 27 05:29:04 2005
Subject: [Twisted-web] Twisted network package for python implementation
	problem with GUI
Message-ID: <s2bffe7e.074@mail.grintek.com>

Hi

We've got the client and server running with twisted, and it works well
only for
one problem. When exiting the game, it seems like the connection is
not closing properly.

This is the error that it gives.

sys.exit()
exceptions.SystemExit: 
Unhandled error in Deferred:
Traceback from remote host -- Traceback unavailable

We have basically two main loops namely, reactor.run() used to get the
the connection and listening on port
8000, spinner.run() used to watch the events.

We used the reactor.iterate() in the spinner.run and it worked well.

All the networking works well but we can't close the connection on
exit.

We tried to use reactor.stop() but it doesn't seem to reach it.

Greg

From tv at twistedmatrix.com  Mon Jun 27 08:03:45 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon Jun 27 08:03:54 2005
Subject: [Twisted-web] Nevow 0.4.1 release tarball shitlist;
	nevow 0.4.1-1 deb in incoming
Message-ID: <42C00741.8090906@twistedmatrix.com>

Hi. I just (finally) packaged nevow 0.4.1 for Debian, it's sitting in
Incoming and will hit unstable a bit later.

Meanwhile, here are the reasons the nevow 0.4.1 release tarball sucks:

 - .svn dirs
 - compared to 0.4.1 tag, missing:
 doc/man/nevow-xmlgettext.1
 examples/i18n/update-l10n
 examples/pastebin/TODO
 examples/pastebin/static/robots.txt
 examples/wsgi/README
 examples/wsgi/test-cgi.py
 extras/xhtml-nevow.rnc
 nevow/canvas.as
 nevow/Canvas.fla
 test.py
 win32/nevow.nsi

From chris at feedtagger.com  Mon Jun 27 18:23:50 2005
From: chris at feedtagger.com (Chris Were)
Date: Mon Jun 27 18:23:58 2005
Subject: [Twisted-web] Livepage, ClientHandle and context [continued]
In-Reply-To: <9B331568-A31F-4682-A46B-223774522BBD@divmod.com>
References: <35bb42690506262330eba7851@mail.gmail.com>
	<9B331568-A31F-4682-A46B-223774522BBD@divmod.com>
Message-ID: <42C09896.1080602@feedtagger.com>


>> I expect this can be rectified in livepage.py (line 728 on my co):
>>     def locateHandler(self, ctx, path, name):
>>         ### XXX TODO: Handle path
>>         return getattr(self, 'handle_%s' % (name, ))
>
>
> The path here is meant to be a string which names a Fragment or other 
> dispatch path. As you can see, none of this is implemented yet, but 
> this is my solution to this problem that you and others on this list 
> have had. Basically the API in javascript would look something like this:
>
> server.handleWithPath('onclick', 'some/path', 'someArgument')
>
> locateHandler would change to look more like locateChild, breaking 
> apart the path into segments and consuming them until it locates the 
> target. I'm not sure how the default locateHandler implementation will 
> locate action targets; perhaps with dispatch_* prefixed methods? Here 
> is a small example:
>
> class MainPage(Page):
>     docFactory = loaders.xmlstring("""<html 
> xmlns:n="http://nevow.com/ns/nevow/0.1">
>   <a onclick="server.handleWithPath('onclick', 'someFragment', 
> 'someArg')">
>     Click me
>   </a>
>   <span n:render="liveid" />
>   <span n:render="liveglue" />
> </html>""")
>
>     def dispatch_someFragment(self, ctx):
>         return MyFragment()
>
>
> class MyFragment(Fragment):
>     def handle_onclick(self, ctx, someArg):
>          assert someArg == 'someArg'
>
>
> Suggestions on different names other than "dispatch_*" are welcome; 
> the main reason I haven't implemented this functionality yet is 
> because I can't decide what to call it! :-)

I'd say dispatch is fine (and not just because I'd like to see this
implemented ;-)
Taking from the chatola example:
return context.tag(onsubmit=livepage.handler(onSubmit,
getValue('inputline')))

What would be good is if something similar could be used with dispatch,
perhaps the following (assuming this code is within a fragment):

return context.tag(onsubmit=livepage.handler(onSubmit,
getValue('inputline',self)))
ie: livepage.handler(func,arg,fragment=None)

if this mapped the javascript to
server.handleWithPath('action','fragment','arg') and also mapped (if not
there already) the dispatch_fragment in the MainPage

Would something along those lines be feasible?

> I suggest using a query parameter rather than an additional URL 
> segment. xml is a different "view" of the same "object"; in my 
> opinion, URLs should represent "objects" (Resources) and query 
> parameters should be used to parameterize how the view renders. One 
> might also be able to use the "Accept" header that browsers send to 
> negotiate the rendered content type. But this is just a suggestion. 
> Whatever works for you is fine with me :-)

I tend to agree that xml is a different "view", but I see a benefit in a
REST-like approach to have /xml at the end of an existing Resource...
perhaps the idea that /xml is an extended view to the existing Resource.

Chris.


From gpereira at grintek.com  Tue Jun 28 01:49:53 2005
From: gpereira at grintek.com (Gregory Pereira)
Date: Tue Jun 28 01:52:56 2005
Subject: [Twisted-web] Generating exe using Twisted py2exe
Message-ID: <s2c11d46.081@mail.grintek.com>

Hi,

we developed an application that uses Twisted to implement a Client,
Server for a board game.

We know have to generate an exe for the Game.

So far it seems that Py2exe is the best way to do it.

How difficult will it be including the Twisted Application?

The main problems i may experience are where installed packages use 
the Windows registry - it's obviously impossible for py2exe to pick up

on this.

Regards


Gregory Pereira

Tel: +27 12 672 6203 
Mobile: +27 83 359 5093 
Fax +27 12 672 6022 

E-Mail: gpereira@grintek.com
Avitronics

From shamrin at gmail.com  Tue Jun 28 02:54:50 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Tue Jun 28 02:55:23 2005
Subject: [Twisted-web] Generating exe using Twisted py2exe
In-Reply-To: <s2c11d46.081@mail.grintek.com>
References: <s2c11d46.081@mail.grintek.com>
Message-ID: <28d42ea705062801542cf0e018@mail.gmail.com>

Hello Gregory!

On 28/06/05, Gregory Pereira <gpereira@grintek.com> wrote:
> We know have to generate an exe for the Game.
> So far it seems that Py2exe is the best way to do it.
> How difficult will it be including the Twisted Application?
> The main problems i may experience are where installed 
> packages use
> the Windows registry - it's obviously impossible for py2exe to 
> pick up on this.

I don't understand what windows registry problem are you talking
about. To my knowledge Twisted doesn't use registry.

For me py2exe works just fine with twisted. Just try it and post about
problems you experience.

-- 
Alexey

From paolo_veronelli at libero.it  Tue Jun 28 04:37:52 2005
From: paolo_veronelli at libero.it (Paolino)
Date: Tue Jun 28 03:43:12 2005
Subject: [Twisted-web] memory leak with metaclass
In-Reply-To: <42BFB133.7010907@email.it>
References: <aa51a4617213ddf0d567524ebb42b79b@81.208.60.192>
	<42BFB133.7010907@email.it>
Message-ID: <42C12880.1030808@libero.it>

tazzo wrote:
> Also without metaclass there is a memory leak, returning
> instances of rend.Page from locateChild they are never released.
> Here a simple example, the function 'do' build on file log
> a simple statistic every 5 sec about only instances classes  that are
> growing up during page serving.
> Try to start the server and ask some page continuosly, you'll see
> the number of rendPage grow up with some other classes.

Thanks to the interest of dialtone and exarkun the leak has been removed 
for both tests in revision  1582

This means  creating (and destroying) Page derived classes and their 
instances doesn't lead to a server growing on every request.

Pytypus gang thanks them.


From daverz at gmail.com  Tue Jun 28 05:49:49 2005
From: daverz at gmail.com (Dave Cook)
Date: Tue Jun 28 05:50:24 2005
Subject: [Twisted-web] Generating exe using Twisted py2exe
In-Reply-To: <s2c11d46.081@mail.grintek.com>
References: <s2c11d46.081@mail.grintek.com>
Message-ID: <7a59f02505062804491224500a@mail.gmail.com>

On 6/28/05, Gregory Pereira <gpereira@grintek.com> wrote:

> The main problems i may experience are where installed packages use
> the Windows registry - it's obviously impossible for py2exe to pick up

This is my theoretical understanding of how it works: after building a
"dist" with py2exe, you'd create an installer with something like Inno
Setup.  That installer will make the needed registry entries.

http://www.jrsoftware.org/isinfo.php

Dave Cook

From fmaguib at yahoo.com  Tue Jun 28 08:23:08 2005
From: fmaguib at yahoo.com (=?iso-8859-1?q?Fran=E7oise=20Maguib?=)
Date: Tue Jun 28 08:23:42 2005
Subject: [Twisted-web] child page
Message-ID: <20050628142308.63216.qmail@web31015.mail.mud.yahoo.com>

Hi,

I've made a small program. he aim is to access to a
Ldap server and to show details of each user. I have a
root page, and a child. When I run my program,I'm
unable to display items in the root page because on
click(in a button on the root page),the program goes
immediately in the child page(instead of displaying
items in the root page).I can't locate the problem.is
someone could help me?


	

	
		
___________________________________________________________________________ 
Appel audio GRATUIT partout dans le monde avec le nouveau Yahoo! Messenger 
T?l?chargez cette version sur http://fr.messenger.yahoo.com

From dgray at omniti.com  Tue Jun 28 10:10:20 2005
From: dgray at omniti.com (Dave Gray)
Date: Tue Jun 28 10:10:27 2005
Subject: [Twisted-web] Re: Twisted-web Digest, Vol 15, Issue 20
In-Reply-To: <f98c7910050623113543c8be7e@mail.gmail.com>
References: <E1DlVzi-0002cU-02@pyramid.twistedmatrix.com>
	<f98c7910050623113543c8be7e@mail.gmail.com>
Message-ID: <42C1766C.6060500@omniti.com>

Oh hi there, I missed this reply.

Richard Meraz wrote:
> Thanks Dave: very clear and easy to follow answer and example code.  I
> definitely appreciate your time.
> 
> Final question.  Is there a convenient way to put an upper-bound on
> how long twisted.web.client.getPage is allowed to complete its work. I
> know twisted.web.client.getPage takes a timeout parameter, but this
> seems more like a socket timeout which won't kill for example a
> getPage waiting on a low-bandwidth server (is my understanding
> correct?)
> 
>  For example, if I'm using the asyncore.py framework to mange IO i can
> use the channel.timestamp attribute to examine how long things have
> been going in order to kill long-running IO in a polling loop.  Of
> course with asyncore I can manage my own polling loop which I can't
> see an easy way to do using reactor() (someone care to comment on that
> since I'm probably missing something).

It looks to me like it should timeout on a slow download - is it not 
doing that?

Check out HTTPPageGetter.timeout and HTTPClientFactory.buildProtocol 
(which sets up the timeout calls) in twisted/web/client.py

From dp at ulaluma.com  Tue Jun 28 12:43:49 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Jun 28 12:44:03 2005
Subject: [Twisted-web] Livepage, ClientHandle and context [continued]
In-Reply-To: <35bb42690506262330eba7851@mail.gmail.com>
References: <35bb42690506262330eba7851@mail.gmail.com>
Message-ID: <9A4ECD53-624C-41FC-9428-6ED9B5794E40@ulaluma.com>


On Jun 26, 2005, at 11:30 PM, Chris (FeedTagger) wrote:

> Sorry, just registered so unable to join existing thread.
>
> I'm having similar problems that are outlined here:
> http://twistedmatrix.com/pipermail/twisted-web/2005-June/001523.html
> "I also can't see a way to use handler_* methods, because this methods
> must be inside a rend.Fragment subclass in my case."

There's no way Nevow can automatically determine that a handler event  
should be dispatched to your Fragment instance, so you'll have to  
tell it. Your expectation below is correct:

> I expect this can be rectified in livepage.py (line 728 on my co):
>     def locateHandler(self, ctx, path, name):
>         ### XXX TODO: Handle path
>         return getattr(self, 'handle_%s' % (name, ))

The path here is meant to be a string which names a Fragment or other  
dispatch path. As you can see, none of this is implemented yet, but  
this is my solution to this problem that you and others on this list  
have had. Basically the API in javascript would look something like  
this:

server.handleWithPath('onclick', 'some/path', 'someArgument')

locateHandler would change to look more like locateChild, breaking  
apart the path into segments and consuming them until it locates the  
target. I'm not sure how the default locateHandler implementation  
will locate action targets; perhaps with dispatch_* prefixed methods?  
Here is a small example:

class MainPage(Page):
     docFactory = loaders.xmlstring("""<html xmlns:n="http:// 
nevow.com/ns/nevow/0.1">
   <a onclick="server.handleWithPath('onclick', 'someFragment',  
'someArg')">
     Click me
   </a>
   <span n:render="liveid" />
   <span n:render="liveglue" />
</html>""")

     def dispatch_someFragment(self, ctx):
         return MyFragment()


class MyFragment(Fragment):
     def handle_onclick(self, ctx, someArg):
          assert someArg == 'someArg'


Suggestions on different names other than "dispatch_*" are welcome;  
the main reason I haven't implemented this functionality yet is  
because I can't decide what to call it! :-)

>
> My implementation is slightly different in that I'm not using
> rend.Fragment, I have a Page broker that responds to requests and
> returns a new page that implements from a master page.
>
> --------------------------
> myserver.py:
>
> pageMappings ] {
>   'search': search.Page
>   'index': index.Page
> }
>
> class Page(livepage.LivePage):
>   def locateChild(self,ctx,segments):
>     # depending on the value of segments[0] return the correct page
>     # from a predefined map, otherwise 404
>     page = pageMappings[segments[0]]
>     return page(), segments[1]
>
> Then in index.Page.py:
> class Page(_master.FrontPage):
>
>   def render_button(self,ctx,data):
>     return ctx.tag(onclick="server.handle('click')")
>
>   def handle_click(self,ctx,client):
>     client.alert('clicked button')
>
> _master.py:
>
> class CorePage(livepage.LivePage):
>   # various properties that all generic pages should exhibit
>
> class FrontPage(CorePage):
>   # load front page template
>   # provide any default slot fills etc.
>
> --------------------
> Now the problem as I see it (with primitive livepage knowledge) is
> that the livepage request that's sent with server.handle('click') is
> attempting to be mapped to myserver.Page, instead of my intended
> index.Page class.
> Is it possible to provide this functionality or should this whole
> template based approach be re-worked in some other fashion?

Again, you want the above proposed architecture to be finished, but  
it isn't finished yet.

> ... as a side note using a generic dispatcher of pages (myserver.Page)
> I can do cool things like detect /xml appended to url and instead of
> loading .xhtml templates, load the appropriate .xml templates. Hence
> without changing any application code I can generate xml versions of
> every single webpage across a site.

I suggest using a query parameter rather than an additional URL  
segment. xml is a different "view" of the same "object"; in my  
opinion, URLs should represent "objects" (Resources) and query  
parameters should be used to parameterize how the view renders. One  
might also be able to use the "Accept" header that browsers send to  
negotiate the rendered content type. But this is just a suggestion.  
Whatever works for you is fine with me :-)

And yes, this is a cool capability to want to have.

Donovan

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050628/3c3a9b84/attachment.htm
From dp at ulaluma.com  Tue Jun 28 12:51:46 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Jun 28 12:51:54 2005
Subject: [Twisted-web] Livepage, ClientHandle and context [continued]
In-Reply-To: <42C09896.1080602@feedtagger.com>
References: <35bb42690506262330eba7851@mail.gmail.com>
	<9B331568-A31F-4682-A46B-223774522BBD@divmod.com>
	<42C09896.1080602@feedtagger.com>
Message-ID: <BF3F41E3-CB63-4574-8389-1492B5D92175@ulaluma.com>


On Jun 27, 2005, at 5:23 PM, Chris Were wrote:

> I'd say dispatch is fine (and not just because I'd like to see this
> implemented ;-)
> Taking from the chatola example:
> return context.tag(onsubmit=livepage.handler(onSubmit,
> getValue('inputline')))
>
> What would be good is if something similar could be used with  
> dispatch,
> perhaps the following (assuming this code is within a fragment):
>
> return context.tag(onsubmit=livepage.handler(onSubmit,
> getValue('inputline',self)))
> ie: livepage.handler(func,arg,fragment=None)
>
> if this mapped the javascript to
> server.handleWithPath('action','fragment','arg') and also mapped  
> (if not
> there already) the dispatch_fragment in the MainPage
>
> Would something along those lines be feasible?

This is already possible using IClientHandle.transient. The problem  
with allowing arbitrary callables from arbitrary objects is that you  
have to identify them somehow using a string which can then later be  
used to retrieve the same object/callable. Forcing the developer to  
use strings (dispatch_*/handle_* and handleWithPath) means that  
everything about which callables are exposed is explicit, and the  
lifetime is well-defined.

>> I suggest using a query parameter rather than an additional URL  
>> segment. xml is a different "view" of the same "object"; in my  
>> opinion, URLs should represent "objects" (Resources) and query  
>> parameters should be used to parameterize how the view renders.  
>> One might also be able to use the "Accept" header that browsers  
>> send to negotiate the rendered content type. But this is just a  
>> suggestion. Whatever works for you is fine with me :-)
>>
>
> I tend to agree that xml is a different "view", but I see a benefit  
> in a
> REST-like approach to have /xml at the end of an existing Resource...
> perhaps the idea that /xml is an extended view to the existing  
> Resource.

But this is exactly why I was proposing using query args. REST is  
representational state transfer of web resources; with foo/ and foo/ 
xml you have two separate web resources which should really only be  
one resource. With a query parameter and one resource, the query  
parameter (or header, etc) is requesting a different representation  
of the state of that one resource.

Donovan


From tv at twistedmatrix.com  Wed Jun 29 02:59:41 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed Jun 29 02:59:44 2005
Subject: [Twisted-web] child page
In-Reply-To: <20050628142308.63216.qmail@web31015.mail.mud.yahoo.com>
References: <20050628142308.63216.qmail@web31015.mail.mud.yahoo.com>
Message-ID: <42C262FD.3040109@twistedmatrix.com>

Fran?oise Maguib wrote:
> I've made a small program. he aim is to access to a
> Ldap server and to show details of each user. I have a
> root page, and a child. When I run my program,I'm
> unable to display items in the root page because on
> click(in a button on the root page),the program goes
> immediately in the child page(instead of displaying
> items in the root page).I can't locate the problem.is
> someone could help me?

My crystal ball is a bit dusty. Maybe you should put
the source on the web so we can actually look at the
program?

http://www.catb.org/~esr/faqs/smart-questions.html

From fmaguib at yahoo.com  Wed Jun 29 03:31:44 2005
From: fmaguib at yahoo.com (=?iso-8859-1?q?Fran=E7oise=20Maguib?=)
Date: Wed Jun 29 03:32:16 2005
Subject: [Twisted-web] child page
In-Reply-To: <42C262FD.3040109@twistedmatrix.com>
Message-ID: <20050629093144.54724.qmail@web31013.mail.mud.yahoo.com>

I'm really sorry,

there is the source:


import ldap
from twisted.application import internet,service

from nevow import appserver,inevow, loaders,
util,compy,rend, tags as T, url
from nevow.url import here
from nevow.tags import *

from formless import annotate
from formless import webform

mydata=[]

def findDetails(args):
    total=len(mydata)
    myerror=['','','']
    ok=False
    i=0
    while(not(ok) and i<total):
        if mydata[i][0]==args:
            ok=True
            indice=i
        else:
            i+=1
    if ok:
        return mydata[indice]
    else:
        return myerror
    



def doQuery(args):
    try:
        l=ldap.open("x,name):
       172.29.160.70")
        username=""
        password=""
        l.simple_bind_s(username,password)
        l.protocol_version=ldap.VERSION3
    except ldap.LDAPError,e:
        print e
    base="o=gouv,c=fr"
    scope=ldap.SCOPE_SUBTREE
    retrieve_attributes=None
    filter="uid="+args
    count = 0
    result_set=[]
           
    try:
       
ldap_result_id=l.search(base,scope,filter,retrieve_attributes)
        
        
        while 1:
           
result_type,result_data=l.result(ldap_result_id,0)
            
            if(result_data==[]):
                break
            else:
                if result_type==ldap.RES_SEARCH_ENTRY:
                    
                    result_set.append(result_data)
                    if len(result_set)==0:
                        return

                    for i in range(len(result_set)):
                        
                        for entry in result_set[i]:
                            try:
                                mydetail=[]
                               
mydetail.append(entry[1]['uid'][0])
                               
mydetail.append(entry[1]['cn'][0])
                               
mydetail.append(entry[1]['mail'][0])
                               
mydata.append(mydetail)
                                mydetail.remove
                                #count=count+1
                            except:
                                pass
        
    except ldap.LDAPError,e:
        print e
    
    return mydata


class IItemForChange(annotate.TypedInterface):
    def setSsa(self,ssa=annotate.String(label="Score
Spam Assassin")):
        pass
    setSsa=annotate.autocallable(setSsa)


class ChildPage(rend.Page):
   
__implements__=IItemForChange,rend.Page.__implements__
    addSlash=True

    def __init__(self,name):
        rend.Page.__init__(self)
        self.name=name
        
    def setSsa(self,ssa):
        valeur=ssa
            
    def render_viewSelector(self,context,data):
        args=inevow.IRequest(context).args
        view=args.get('view',['view'])[0]
        if view=='view':
            selector ="View|
",a(href=here.add('view','edit'))["Edit"]
            editor =''
        else:
           
selector=a(href=here.add('view','view'))["View"],"|
Edit"
            editor=context.onePattern('edit')()
        viewer=context.onePattern('view')()
        return selector,viewer,editor

    def render_itemDetail(self,context,data):
        thedetails=findDetails(self.name)
        return
h2["Name:",thedetails[1]],h2["Email:",thedetails[2]]

    docFactory= loaders.stan(
        T.html[
              T.body[
                    T.p[a(href=here.parent())["UP"]],
                    T.div(render=render_viewSelector)[
                         
T.p(pattern="edit")[webform.renderForms()],
                         
T.p(pattern="view")[render_itemDetail]
                          ]
                        ]
                ]
           )
                
class IFindUser(annotate.TypedInterface):
    def findUser(self,user=annotate.String()):
        pass
    findUser=annotate.autocallable(findUser)

class FatherPage(rend.Page):
    __implements__ =IFindUser,rend.Page.__implements__
    addSlash=True

    
    def __init__(self):
        rend.Page.__init__(self)
        self.currentuser=""
    
    
    def findUser(self,user):
        
        doQuery(user)

    def data_queryLdap(self,context,data):
        
        return doQuery(self.currentuser)
        
        
    def render_row(self,context,data):
        
        theuser=data
        return context.tag[
            a(href=theuser[0])[theuser[0]]
    ]


    
            

    docFactory=loaders.stan(
        T.html[
           T.body[
                T.h1["Welcome,user"],
               
T.ul(data=directive("queryLdap"),render=directive("sequence"))[
                  
T.li(pattern="item",render=render_row)
                   ],
                webform.renderForms()
                ]
           ]
        )

    def childFactory(self,ctx,name):
        try:
            return ChildPage(name)
        except ValueError:
            pass
        

        

    
           
                 
application=service.Application('monform2')
webserver=internet.TCPServer(8080,appserver.NevowSite(FatherPage()))
webserver.setServiceParent(application)

             
        
                                   
        




-- Tommi Virtanen <tv@twistedmatrix.com> a ?crit :

> Fran?oise Maguib wrote:
> > I've made a small program. he aim is to access to
> a
> > Ldap server and to show details of each user. I
> have a
> > root page, and a child. When I run my program,I'm
> > unable to display items in the root page because
> on
> > click(in a button on the root page),the program
> goes
> > immediately in the child page(instead of
> displaying
> > items in the root page).I can't locate the
> problem.is
> > someone could help me?
> 
> My crystal ball is a bit dusty. Maybe you should put
> the source on the web so we can actually look at the
> program?
> 
> http://www.catb.org/~esr/faqs/smart-questions.html
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
>
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 



	

	
		
___________________________________________________________________________ 
Appel audio GRATUIT partout dans le monde avec le nouveau Yahoo! Messenger 
T?l?chargez cette version sur http://fr.messenger.yahoo.com

From m.milvo at gmail.com  Wed Jun 29 03:32:02 2005
From: m.milvo at gmail.com (Michael M)
Date: Wed Jun 29 03:32:36 2005
Subject: [Twisted-web] Error: nevow_clientToServerEvent is not defined
	(Firefox JS Console)
Message-ID: <3a767c3905062902326a69104d@mail.gmail.com>

Firstly, I love nevow, brilliant design, really just plain brilliant.
Thanks in advance for any help with this problem.

# PROBLEM
The livepage/evil example failes with this error in the Firefox JS console

# ERROR
Error: nevow_clientToServerEvent is not defined

# SYSTEM
OS: Gentoo Linux
Firefox version: 1.0.4 
Nevow revision: 1595

# EXAMPLE CODE
from nevow import rend, loaders, tags
from nevow.liveevil import handler

def greeter(client, nodeName):
    client.alert("Greetings. You clicked the %s node." % nodeName)

# Any string arguments after the event handler function will be evaluated
# as JavaScript in the context of the web browser and results passed to the
# Python event handler
handler = handler(greeter, 'node.name')

class LivePage(rend.Page):
    docFactory = loaders.stan(
    tags.html[
    tags.body[
        tags.ol[
            tags.li(onclick=handler, name="one")["One"],
            tags.li(onclick=handler, name="two")["Two"],
            tags.li(onclick=handler, name="three")["Three"]
        ]
    ]
])

Thanks

From therve at free.fr  Wed Jun 29 05:36:01 2005
From: therve at free.fr (Thomas HERVE)
Date: Wed Jun 29 05:37:16 2005
Subject: [Twisted-web] Error: nevow_clientToServerEvent is not defined
	(Firefox JS Console)
In-Reply-To: <3a767c3905062902326a69104d@mail.gmail.com>
References: <3a767c3905062902326a69104d@mail.gmail.com>
Message-ID: <20050629133601.inlkhoj0q5wckc88@itchy.wasabout.net>

Quoting Michael M <m.milvo@gmail.com>:

[snip]
> class LivePage(rend.Page):
>    docFactory = loaders.stan(
>    tags.html[
>    tags.body[
>        tags.ol[
>            tags.li(onclick=handler, name="one")["One"],
>            tags.li(onclick=handler, name="two")["Two"],
>            tags.li(onclick=handler, name="three")["Three"]
>        ]
>    ]
> ])

I think this example hasn't been updated. You'd better look after the
liveanimal.py example in the current branch.

The example working should be like this (not tested):

class MyLivePage(livepage.LivePage):
   docFactory = loaders.stan(
   tags.html[
   tags.head[
       tags.directive('liveid'),
       tags.directive('liveglue')],
   tags.body[
       tags.ol[
           tags.li(onclick=handler, name="one")["One"],
            tags.li(onclick=handler, name="two")["Two"],
            tags.li(onclick=handler, name="three")["Three"]
       ]
   ]
])

-- 
Thomas




From dp at ulaluma.com  Wed Jun 29 11:21:25 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Jun 29 11:21:31 2005
Subject: [Twisted-web] Error: nevow_clientToServerEvent is not defined
	(Firefox JS Console)
In-Reply-To: <3a767c3905062902326a69104d@mail.gmail.com>
References: <3a767c3905062902326a69104d@mail.gmail.com>
Message-ID: <7752E043-663E-46DC-9FA9-D6B132BD2D4B@ulaluma.com>


On Jun 29, 2005, at 2:32 AM, Michael M wrote:

> Firstly, I love nevow, brilliant design, really just plain brilliant.
> Thanks in advance for any help with this problem.
>
> # PROBLEM
> The livepage/evil example failes with this error in the Firefox JS  
> console
>
> # ERROR
> Error: nevow_clientToServerEvent is not defined

Sorry, that example is way out of date. livepage is still under heavy  
development and has changed a lot in the last year or so. It has even  
changed a lot since the last release (0.4.1). If you would like to  
use livepage, I suggest you get a svn checkout of:

svn://divmod.org/svn/Nevow/branches/dp/livepage-completion- 
notification-3

I have attached a simple example which works with this branch.

I hope to have livepage stabilized by the 0.5 release (bugfixes  
notwithstanding). There is still quite a bit of work to be done  
before this will actually happen though.

The reason nevow_clientToServerEvent was not defined in your tests is  
because the javascript which defines it was never included in the  
page. In the below example, you'll notice two render directives, one  
invoking "liveid" and one invoking "liveglue". The liveid is a  
fragment of javascript which embeds a unique id in every rendering of  
a LivePage. It changes every time the page is rendered. The liveglue  
is a fragment of javascript which never changes. It is separate from  
the liveid to allow you to have one global location for the liveglue  
javascript which every page references, to take advantage of browser  
caches.

The other difference with this example is the ease of calling a  
server-side function from javascript. Once the liveglue javascript  
has been included in a page, there is a global "server" object which  
has a "handle" method. The javascript in the example below was  
written by hand, not generated automatically by the nevow page  
rendering process. This makes it easier to hook up client-side event  
handlers to server side methods.

One final difference in the example below is that now server-side  
event handlers can return javascript which will be evaluated in the  
browser. Previously, you had to make calls on the ClientHandle object  
to send scripts to the browser (which you can still do if you need  
to). The new architecture instead renders the result of a server-side  
handler in a JavascriptContext. This means all the rendering  
advantages Nevow provides for HTML are also possible with JavaScript  
now (rendering generators, rendering multiple deferreds, much safer  
quoting, etc.)

Hope all this helps.
Donovan

?
-------------- next part --------------
Skipped content of type multipart/mixed
From wsanchez at wsanchez.net  Wed Jun 29 11:46:03 2005
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Wed Jun 29 11:46:12 2005
Subject: [Twisted-web] [PATCH] typo in static.py?
Message-ID: <E860023E-C82A-4B29-AF25-CA44165C58FE@wsanchez.net>

   I think the patch below fixes a typo in an error case I noticed  
while reading the code.

     -wsv


Index: twisted/web2/static.py
===================================================================
--- twisted/web2/static.py      (revision 14048)
+++ twisted/web2/static.py      (working copy)
@@ -215,7 +217,7 @@
                                                             
self.defaultType)
          if not self.fp.exists():
-            return response.NOT_FOUND
+            return responsecode.NOT_FOUND
          if self.fp.isdir():
              # If this is a directory, redirect

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3057 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050629/efe4ea8e/smime.bin
From dgray at omniti.com  Wed Jun 29 14:55:43 2005
From: dgray at omniti.com (Dave Gray)
Date: Wed Jun 29 14:55:48 2005
Subject: [Twisted-web] Defers, the reactor,	and idiomatic/proper usage
	-- new user needs some advice?
In-Reply-To: <42BAE0BE.1040209@omniti.com>
References: <f98c791005062110047d97a2d5@mail.gmail.com>
	<42BAE0BE.1040209@omniti.com>
Message-ID: <42C30ACF.4070709@omniti.com>

> which stops the reactor. The trick here is that if you stuff that 
> deferred into a DeferredList before you add the callback that stops the 
> reactor then if your first operation itself returns a deferred, the 
> DeferredList won't call its callbacks until the other Deferred operation 
> completes. So you'll be stacking up a whole bunch of Deferreds inside 
> the first one, and the callback on the DeferredList that does the 
> reactor.stop won't fire until you don't return a Deferred.
> 
> There might be an easier way to do this, but this the way I know 
> (example attached). Someone please let me know if there's an easier way. 
[snip]
>     def render_GET (self, request):
>         self.rq = request
>         target = escape(request.args['target'][0])
>         d = getPage(target).addCallback(self.print_page)
           d.addCallback(stopNow)
>         d.addErrback(log.err)
>         return server.NOT_DONE_YET

I'm gonna go ahead and answer my own question here - this isn't 
restricted to DeferredLists, it applies to regular Deferred's too

From uwe at microshare.com.au  Wed Jun 29 21:54:24 2005
From: uwe at microshare.com.au (Uwe (Peter) Feldtmann)
Date: Wed Jun 29 23:01:38 2005
Subject: [Twisted-web] Error: nevow_clientToServerEvent is not defined
	(Firefox JS Console)
In-Reply-To: <7752E043-663E-46DC-9FA9-D6B132BD2D4B@ulaluma.com>
References: <3a767c3905062902326a69104d@mail.gmail.com>
	<7752E043-663E-46DC-9FA9-D6B132BD2D4B@ulaluma.com>
Message-ID: <42C36CF0.2010100@microshare.com.au>

Does the current svn checkout handle XUL?

I've tried playing with it with mixed results.

I need to send updated values to client fields and later to bring em 
back. I've included slightly hacked versions of xul_nevow.py and 
xul_example.xul  The label change works as expected but I'm not handling 
the text fields properly.

Can someone please nudge or kick me in the right direction?

Donovan Preston wrote:
> 
> On Jun 29, 2005, at 2:32 AM, Michael M wrote:
> 
>> Firstly, I love nevow, brilliant design, really just plain brilliant.
>> Thanks in advance for any help with this problem.
>>
>> # PROBLEM
>> The livepage/evil example failes with this error in the Firefox JS console
>>
>> # ERROR
>> Error: nevow_clientToServerEvent is not defined
> 
> 
> Sorry, that example is way out of date. livepage is still under heavy 
> development and has changed a lot in the last year or so. It has even 
> changed a lot since the last release (0.4.1). If you would like to use 
> livepage, I suggest you get a svn checkout of:
> 
> svn://divmod.org/svn/Nevow/branches/dp/livepage-completion-notification-3
> 
> I have attached a simple example which works with this branch.
> 
> I hope to have livepage stabilized by the 0.5 release (bugfixes 
> notwithstanding). There is still quite a bit of work to be done before 
> this will actually happen though.
> 
> The reason nevow_clientToServerEvent was not defined in your tests is 
> because the javascript which defines it was never included in the page. 
> In the below example, you'll notice two render directives, one invoking 
> "liveid" and one invoking "liveglue". The liveid is a fragment of 
> javascript which embeds a unique id in every rendering of a LivePage. It 
> changes every time the page is rendered. The liveglue is a fragment of 
> javascript which never changes. It is separate from the liveid to allow 
> you to have one global location for the liveglue javascript which every 
> page references, to take advantage of browser caches.
> 
> The other difference with this example is the ease of calling a 
> server-side function from javascript. Once the liveglue javascript has 
> been included in a page, there is a global "server" object which has a 
> "handle" method. The javascript in the example below was written by 
> hand, not generated automatically by the nevow page rendering process. 
> This makes it easier to hook up client-side event handlers to server 
> side methods.
> 
> One final difference in the example below is that now server-side event 
> handlers can return javascript which will be evaluated in the browser. 
> Previously, you had to make calls on the ClientHandle object to send 
> scripts to the browser (which you can still do if you need to). The new 
> architecture instead renders the result of a server-side handler in a 
> JavascriptContext. This means all the rendering advantages Nevow 
> provides for HTML are also possible with JavaScript now (rendering 
> generators, rendering multiple deferreds, much safer quoting, etc.)
> 
> Hope all this helps.
> Donovan
> 
> 
> ------------------------------------------------------------------------
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
-------------- next part --------------
A non-text attachment was scrubbed...
Name: xul_example.xul
Type: application/vnd.mozilla.xul+xml
Size: 1874 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050630/9a8d99b1/xul_example.bin
-------------- next part --------------
A non-text attachment was scrubbed...
Name: xul_nevow.py
Type: application/x-python
Size: 901 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050630/9a8d99b1/xul_nevow.bin
From alberto.trujillo at ucd.ie  Thu Jun 30 03:58:09 2005
From: alberto.trujillo at ucd.ie (Alberto Trujillo)
Date: Thu Jun 30 04:08:16 2005
Subject: [Twisted-web] How works formless?
Message-ID: <42C3C231.6080304@ucd.ie>

Hello:
I was trying to follow this example but I'm a bit lost. I can see the 
form but when I submit the information I receive the next exepction 
error "global name request is not defined".
I don't know why formless has to be autocallable and where I must to 
defined "request"

Could anybody help me? Here are my files. I need to know what I have to 
do after submit the information.

year.tac
----------
from twisted.application import internet, service
from nevow import appserver
import year

application = service.Application("tasks")
webserver = internet.TCPServer(8080, appserver.NevowSite(year.Colorful()))
webserver.setServiceParent(application)

year.py
---------
from nevow import rend, loaders
import formless

class YearChooseable(formless.TypedInterface):
    def selectYear(self, year=formless.Integer()):
        pass
    selectYear = formless.autocallable(selectYear)


class Colorful(rend.Page):
    __implements__ = YearChooseable, rend.Page.__implements__


    def selectYear(self, year):
        self.test = True
        return rend.Page.locateChild(self, request, childSegments)

    docFactory = loaders.xmlfile("year.html")

year.html
----------
<form action="freeform_post!!selectYear" method="POST">
    Type a year: <input type="text" name="year" />
    <input type="submit" />
</form>


From dp at ulaluma.com  Thu Jun 30 10:24:50 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Thu Jun 30 10:24:56 2005
Subject: [Twisted-web] Error: nevow_clientToServerEvent is not defined
	(Firefox JS Console)
In-Reply-To: <42C36CF0.2010100@microshare.com.au>
References: <3a767c3905062902326a69104d@mail.gmail.com>
	<7752E043-663E-46DC-9FA9-D6B132BD2D4B@ulaluma.com>
	<42C36CF0.2010100@microshare.com.au>
Message-ID: <2B952C1D-90F4-42CF-88B1-DDAD1934873E@ulaluma.com>


On Jun 29, 2005, at 8:54 PM, Uwe (Peter) Feldtmann wrote:

> Does the current svn checkout handle XUL?

Seems to :-)

> I've tried playing with it with mixed results.
>
> I need to send updated values to client fields and later to bring  
> em back. I've included slightly hacked versions of xul_nevow.py and  
> xul_example.xul  The label change works as expected but I'm not  
> handling the text fields properly.
>
> Can someone please nudge or kick me in the right direction?

Well, you had a simple problem in your example file. You defined a  
function at the module level named onCommand, which you presumably  
wanted to be called at some point, but you never called it. I have  
attached an updated example which eschews the function entirely and  
puts all the logic in the handle_onCommand method.

Note that it is still possible to program in the old style by doing  
IClientHandle(ctx) to get the client instance and repeatedly  
calling .send on it, but instead I have changed your example to  
return a list of javascript to send to the browser. Nevow now uses  
the normal rendering machinery to render javascript results from  
handlers and javascript which is pushed to the browser, so this is a  
natural way to express it.

Note that currently, you are required to include a newline or  
semicolon to delimit your statements; like nevow's html rendering,  
the javascript rendering does not currently insert newlines anywhere.  
I have suspected for a while that it would be safe to insert newlines  
in between list elements while rendering in a JavascriptContext, but  
I haven't tested this theory yet. If it is possible to insert these  
newlines automatically then the livepage.eol will no longer be  
necessary, which would be very nice.

Note that:

livepage.eol = livepage.js('\n') ## A newline character

Here is your working example (the XUL file didn't change at all):

-------------- next part --------------
A non-text attachment was scrubbed...
Name: xul_example.xul
Type: application/octet-stream
Size: 1875 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050630/c2d3468d/xul_example.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: xul_nevow.py
Type: text/x-python-script
Size: 1002 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050630/c2d3468d/xul_nevow.bin
From dp at ulaluma.com  Thu Jun 30 10:30:40 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Thu Jun 30 10:30:45 2005
Subject: [Twisted-web] How works formless?
In-Reply-To: <42C3C231.6080304@ucd.ie>
References: <42C3C231.6080304@ucd.ie>
Message-ID: <C9EE2EE1-8D5B-4BAE-B529-8DFE7FD4F74B@ulaluma.com>


On Jun 30, 2005, at 2:58 AM, Alberto Trujillo wrote:

> Hello:
> I was trying to follow this example but I'm a bit lost. I can see  
> the form but when I submit the information I receive the next  
> exepction error "global name request is not defined".
> I don't know why formless has to be autocallable and where I must  
> to defined "request"
>
> Could anybody help me? Here are my files. I need to know what I  
> have to do after submit the information.

If you are just starting with Nevow, I suggest staying away from  
formless for a while. It is designed for a very specific use case,  
and has some well-known problems which nobody has taken the time to fix.

> year.tac
> ----------
> from twisted.application import internet, service
> from nevow import appserver
> import year
>
> application = service.Application("tasks")
> webserver = internet.TCPServer(8080, appserver.NevowSite 
> (year.Colorful()))
> webserver.setServiceParent(application)
>
> year.py
> ---------
> from nevow import rend, loaders
> import formless
>
> class YearChooseable(formless.TypedInterface):
>    def selectYear(self, year=formless.Integer()):
>        pass
>    selectYear = formless.autocallable(selectYear)
>
>
> class Colorful(rend.Page):
>    __implements__ = YearChooseable, rend.Page.__implements__
>
>
>    def selectYear(self, year):
>        self.test = True
>        return rend.Page.locateChild(self, request, childSegments)

This line is very strange. autocallables don't normally return  
things, they normally just change object state. self.test = True is  
correct, but the line below it looks like it comes from an overridden  
locateChild method, which is totally inappropriate for a formless  
autocallable. Also, I don't think locateChild has ever taken a  
request argument; it has always taken a context argument. Remove this  
line and everything should work fine.

>    docFactory = loaders.xmlfile("year.html")
>
> year.html
> ----------
> <form action="freeform_post!!selectYear" method="POST">
>    Type a year: <input type="text" name="year" />
>    <input type="submit" />
> </form>

Donovan

From ianb at colorstudy.com  Thu Jun 30 11:07:14 2005
From: ianb at colorstudy.com (Ian Bicking)
Date: Thu Jun 30 11:08:45 2005
Subject: [Twisted-web] Formless, custom form layout
In-Reply-To: <42B42E4C.5010101@pollenation.net>
References: <42A777AD.7050204@the-moon.net>	<42B20565.3060809@imperial.ac.uk>	<42B211AD.2060504@the-moon.net>	<42B32E63.50200@the-moon.net>
	<42B42E4C.5010101@pollenation.net>
Message-ID: <42C426C2.6070605@colorstudy.com>

Matt Goodall wrote:
> forms, by comparison, is not about object interfaces; it's about
> explicitly creating a Form, adding fields to it, rendering it, and
> processing it (with validation). Because forms is only interested in
> HTML, it also allows a field's widget to be switched easily, without
> having to create a new Typed subclass. For instance, I can add a Date
> field to a forms form and choose to render that as a text input, three
> inputs (dd/mm/yyyy) or even a <select> list of predefined dates, just by
> changing the widget.

I might encourage you to think about using the architecture I describe 
here: http://blog.ianbicking.org/a-theory-on-form-toolkits.html -- 
either using FormEncode, pieces, or just the general idea.  E.g., I 
think something like FormEncode's htmlfill that used stan could be 
useful, and FormEncode doesn't currently include anything very good for 
actual HTML generation.

Anyway, I think keeping the parts separate (blank HTML form generation, 
validation, final form rendering) is really important to making a usable 
system; without it people just keep creating form toolkits that they 
later come to hate because the abstraction boundaries don't fit the 
actual development process.

-- 
Ian Bicking  /  ianb@colorstudy.com  /  http://blog.ianbicking.org

From dialtone at divmod.com  Thu Jun 30 12:35:56 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jun 30 12:36:02 2005
Subject: [Twisted-web] Formless, custom form layout
In-Reply-To: <42C426C2.6070605@colorstudy.com>
References: <42A777AD.7050204@the-moon.net>	<42B20565.3060809@imperial.ac.uk>	<42B211AD.2060504@the-moon.net>	<42B32E63.50200@the-moon.net>	<42B42E4C.5010101@pollenation.net>
	<42C426C2.6070605@colorstudy.com>
Message-ID: <42C43B8C.2030309@divmod.com>

Ian Bicking wrote:

> I might encourage you to think about using the architecture I describe
> here: http://blog.ianbicking.org/a-theory-on-form-toolkits.html --
> either using FormEncode, pieces, or just the general idea.  E.g., I
> think something like FormEncode's htmlfill that used stan could be
> useful, and FormEncode doesn't currently include anything very good
> for actual HTML generation.
>
> Anyway, I think keeping the parts separate (blank HTML form
> generation, validation, final form rendering) is really important to
> making a usable system; without it people just keep creating form
> toolkits that they later come to hate because the abstraction
> boundaries don't fit the actual development process.

>From what Matt said when we talked about forms (quite a lot of times) it
is already resusing some concepts from htmlfill.

The basic idea is to separate the types you want, from the widget used
to represent them on the page.

When you add a new form you choose a name (which is actually a key in
the 'validated values'-dict), a type (that knows how to encode and
decode from the python application and from the web), a widget (or a
widgetFactory when you have grouped widgets).

basically both the rendering and the processing share some code obviously:

Let's use an example form:
from nevow import rend
import forms

class ModifyPage(rend.Page, forms.ResourceMixin):
    def form_modify(self, ctx):
        form = forms.Form(self.modify)
        contractor_view(form)
        form.addAction(self.modify)
        form.data = IContractor(ctx)
        form.data['numero_contratto'] = self.original
        return form

    def modify(self, ctx, form, data):
        db.ILogic(ctx).modify_contractor(self.original, data)

In order to tell the system where to find the form there are 2 things you can do:

during rendering you should use:
<nevow:invisible nevow:render="form formName" />

or during a POST/GET with an url like:
http://localhost:8080/modify/__nevow_form__!!modify

what does the system do?

During rendering:
with nevow:render="form formName"
you are calling the method render_form defined in the base forms.ResourceMixin that takes the formName as an argument.

During post/get processing:
in the Modify's page locateChild the url is split to look for __nevow_form__ and the string after !! is the formName.


Both do the same thing now:
The Modify page is searched for form_formName method and its return value (a Form instance populated with fields).
During form search the form instance is saved on the request to ensure that each form instance is reused during the same request (so that modifications are available at a later time when needed).

Then the form is processed in 2 different ways (depending on what you need to do).

Rendering:
- form object is remembered in the context as iforms.IForm
- thanks to the adapter for the form object to IRenderer the form object    
  is directly passed in a stan tag. The Form renderer will take care of 
  rendering.
- A new context is created. and the data from the old context is 
  remembered on it (errors, data inserted and such).
- The form is rendered in this way:
  - the form object is iterated through for each field.
  - each field is rendered, if there are errors they are looked up in 
    iforms.IFormErrors (which was remembered at the beginning).
  - the render method of the widget is called and it does the following  
    thing:
    - One of the converters is gathered from the adaptators and the 
      python type is converted into a string.
    - the result is set as value, the stan representing the widget is 
      returned and sent to the client browser.

GET/POST processing:
- the method process() is called on the return value of the 
  form_formName method.
- arguments are obtained from the request.
- the callback in the rend.Page object is found
- initialize the FormErrors 'dict'
- for each field in the form:
  - the widget is retrieved from the field name.
  - the value is processed back to a python type (thanks to the same 
    adapters registry and the same converter)
  - it is then validated by the type used (remember that the converters 
    adapter registry is made like this:
    Converter <adapts> type <to> InterfaceForConverter)
    _validation and coercion are really separate although both called in 
    processInput method of the widget_
    the result of validation is the data processed and ready to be used
- the callback is called with the result of validation.
- if there are errors in the result of validation then you are 
  redirected to the same page with the form, and reusing the same form 
  instance (that we remembered at the beginning of the locateForm) the 
  page is rendered with error information.

I think this is all. I could have made some mistakes though. 
If you think I've talked too much because you already knew all then forgive me, but I'm sure Matt will like to add this stuff to some documentation or general idea, or edit this stuff for a bit of documentation and so on. :)

It also helped me to understand forms a bit better.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4.1
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de


From ianb at colorstudy.com  Thu Jun 30 12:55:55 2005
From: ianb at colorstudy.com (Ian Bicking)
Date: Thu Jun 30 12:57:14 2005
Subject: [Twisted-web] Formless, custom form layout
In-Reply-To: <42C43B8C.2030309@divmod.com>
References: <42A777AD.7050204@the-moon.net>	<42B20565.3060809@imperial.ac.uk>	<42B211AD.2060504@the-moon.net>	<42B32E63.50200@the-moon.net>	<42B42E4C.5010101@pollenation.net>	<42C426C2.6070605@colorstudy.com>
	<42C43B8C.2030309@divmod.com>
Message-ID: <42C4403B.3080708@colorstudy.com>

Valentino Volonghi aka Dialtone wrote:
> Rendering:
> - form object is remembered in the context as iforms.IForm
> - thanks to the adapter for the form object to IRenderer the form object    
>   is directly passed in a stan tag. The Form renderer will take care of 
>   rendering.
> - A new context is created. and the data from the old context is 
>   remembered on it (errors, data inserted and such).
> - The form is rendered in this way:
>   - the form object is iterated through for each field.
>   - each field is rendered, if there are errors they are looked up in 
>     iforms.IFormErrors (which was remembered at the beginning).
>   - the render method of the widget is called and it does the following  
>     thing:
>     - One of the converters is gathered from the adaptators and the 
>       python type is converted into a string.
>     - the result is set as value, the stan representing the widget is 
>       returned and sent to the client browser.

I don't understand all the aspects -- I don't know much about Nevow 
rendering -- but I think what you are describing is the traditional way 
form toolkits work, except perhaps that validation is better separated 
than in some cases.

I'm proposing that validation and form generation be *completely* 
seperate.  So you get several real data structures.  The validation 
produces something like this:

   {'field_name': 'field_value', ...}
   {'field_name': 'error_string', ...}

You can package that in an object or whatever, but that's the basic 
data.  Then the form generation produces:

   <input type="text" name="field_name">

Then a third component (like htmlfill) puts these two items together, 
but does so with no knowledge of how the data came into being.  And the 
actual logic for redisplaying forms and whatnot should be entirely 
seperate, because

Traditionally form toolkits generate HTML widgets with values and errors 
  already filled in.  This binds HTML generation to the validation 
process, which almost always falls apart eventually, because no one HTML 
generator is general enough (and the most general HTML generator -- an 
actual person writing HTML by hand -- should always be allowed for).

Maybe form is doing this, but at least it doesn't sound like it is.  But 
it does sound like it uses two-way conversion/validation, which I think 
is also a very important feature.


-- 
Ian Bicking  /  ianb@colorstudy.com  /  http://blog.ianbicking.org

From dialtone at divmod.com  Thu Jun 30 13:28:24 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jun 30 13:28:29 2005
Subject: [Twisted-web] Formless, custom form layout
In-Reply-To: <42C4403B.3080708@colorstudy.com>
References: <42A777AD.7050204@the-moon.net>	<42B20565.3060809@imperial.ac.uk>	<42B211AD.2060504@the-moon.net>	<42B32E63.50200@the-moon.net>	<42B42E4C.5010101@pollenation.net>	<42C426C2.6070605@colorstudy.com>	<42C43B8C.2030309@divmod.com>
	<42C4403B.3080708@colorstudy.com>
Message-ID: <42C447D8.9000605@divmod.com>

Ian Bicking wrote:

> I'm proposing that validation and form generation be *completely*
> seperate.  So you get several real data structures.  The validation
> produces something like this:
>
>   {'field_name': 'field_value', ...}
>   {'field_name': 'error_string', ...}

That's how forms works. Perhaps I missed some bits of my reasoning.
The validation result is exactly a dict of

{'field_name': 'field_value'..}

passed to the method which signature is:

def callback(self, ctx, form, data)

and data is the dict you want.
The same is for the error 'dict', but you won't use that since it will
be used
during re-rendering of the page with error messages.

> You can package that in an object or whatever, but that's the basic
> data.  Then the form generation produces:
>
>   <input type="text" name="field_name">
>
right

> Then a third component (like htmlfill) puts these two items together,
> but does so with no knowledge of how the data came into being.  And
> the actual logic for redisplaying forms and whatnot should be entirely
> seperate, because
>
I guess htmlfill role is played by FormRenderer which is the one that
collects all the form fields and renders each of them.

> Traditionally form toolkits generate HTML widgets with values and
> errors  already filled in.  This binds HTML generation to the
> validation process, which almost always falls apart eventually,
> because no one HTML generator is general enough (and the most general
> HTML generator -- an actual person writing HTML by hand -- should
> always be allowed for).

Currently forms doesn't 'support' form customization. Right now it
renders itself over this pattern:

        T.form(id=T.slot('id'), action=T.slot('action'),
class_='nevow-form', method='post', enctype='multipart/form-data',
**{'accept-charset':'utf-8'})[
            T.input(type='hidden', name='_charset_'),
            T.slot('errors'),
            T.slot('items'),
            T.div(id=T.slot('fieldId'), pattern='item',
_class=T.slot('class'))[
                T.label(_for=T.slot('id'))[T.slot('label')],
                T.div(_class='inputs')[T.slot('inputs')],
                T.slot('description'),
                T.slot('message'),
                ],
            T.div(class_='hiddenitems')[
                T.slot('hiddenitems'),
                T.invisible(pattern="hiddenitem")[T.slot('inputs')]
                ],
            T.div(class_='actions')[
                T.slot('actions'),
                ],
            ]


The div with pattern="item" is the single slot. message slot is the
error message.
The FormRenderer is the thing that fills those slot taking them from the
right place (it is the controller in an MVC view).

> Maybe form is doing this, but at least it doesn't sound like it is. 
> But it does sound like it uses two-way conversion/validation, which I
> think is also a very important feature.

Yep. Particularly I'd like to show you the interfaces involved.

class IType(Interface):
    def validate(self, value):
        pass

class IWidget(Interface):
    def render(self, ctx, key, args, errors):
        pass
   
    def processInput(self, ctx, key, args):
        pass
       
class IConvertible(Interface):
    def fromType(self, value):
        pass
    def toType(self, value):
        pass
       
class IStringConvertible(IConvertible):
    pass

# other Convertibles

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4.1
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de


