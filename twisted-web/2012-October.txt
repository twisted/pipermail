From ardesai at yahoo.com  Sat Oct  6 02:46:27 2012
From: ardesai at yahoo.com (A Desai)
Date: Fri, 5 Oct 2012 23:46:27 -0700 (PDT)
Subject: [Twisted-web] HTTPChannel class attributes
Message-ID: <1349505987.33702.YahooMailNeo@web114514.mail.gq1.yahoo.com>

Should http.py :: HTTPChannel.__first_line be an instance attribute instead of a class attribute?

I have a custom scenario where I sub-classed HTTPChannel for my sub-classed HTTPFactory.? In the DerivedHTTPChannel class I overrode the allContentReceived() method.

I recently enabled persistent connections, but setting self.__first_line = 1 in the DerivedHTTPChannel was ineffective, and the first line of the next request threw an exception when it got parsed as an http header.? Similar question "probably" apply to other class attributes.

Should such attributes be instance attributes instead of class attributes? Or is it anticipated that any class who derives from HTTPChannel should override almost all the methods of the base class?

Thanks,
Arun
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121005/9ff96000/attachment.htm 

From exarkun at twistedmatrix.com  Sat Oct  6 09:30:08 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Oct 2012 13:30:08 -0000
Subject: [Twisted-web] HTTPChannel class attributes
In-Reply-To: <1349505987.33702.YahooMailNeo@web114514.mail.gq1.yahoo.com>
References: <1349505987.33702.YahooMailNeo@web114514.mail.gq1.yahoo.com>
Message-ID: <20121006133008.7857.1246115532.divmod.xquotient.248@localhost6.localdomain6>

On 06:46 am, ardesai at yahoo.com wrote:
>Should http.py :: HTTPChannel.__first_line be an instance attribute 
>instead of a class attribute?

It doesn't matter.  It "becomes" an "instance attribute" as soon as it 
is assigned a value.  This is probably covered in the Python 
documentation somewhere, but I can't find it.
>
>I have a custom scenario where I sub-classed HTTPChannel for my sub- 
>classed HTTPFactory.? In the DerivedHTTPChannel class I overrode the 
>allContentReceived() method.

The problem is that you cannot set __first_line to 1 in a subclass named 
`DerivedHTTPChannel`.  __first_line is a mangled attribute.  See 9.6 on:

    http://docs.python.org/tutorial/classes.html

Additionally, anything starting with "_" is private and if you use it, 
your code is more likely to be broken by a future release of Twisted.

See http://twistedmatrix.com/trac/wiki/CompatibilityPolicy

What are you trying to accomplish with your HTTPChannel subclass?

Jean-Paul
>I recently enabled persistent connections, but setting 
>self.__first_line = 1 in the DerivedHTTPChannel was ineffective, and 
>the first line of the next request threw an exception when it got 
>parsed as an http header.? Similar question "probably" apply to other 
>class attributes.
>
>Should such attributes be instance attributes instead of class 
>attributes? Or is it anticipated that any class who derives from 
>HTTPChannel should override almost all the methods of the base class?
>
>Thanks,
>Arun


From ardesai at yahoo.com  Sat Oct  6 17:04:35 2012
From: ardesai at yahoo.com (A Desai)
Date: Sat, 6 Oct 2012 14:04:35 -0700 (PDT)
Subject: [Twisted-web]  HTTPChannel class attributes
Message-ID: <1349557475.94291.YahooMailNeo@web114513.mail.gq1.yahoo.com>

I realize it does become an instance variable as soon as it is assigned a value, hence I was perplexed as to why it did not have the intended effect.? Thanks for pointing out that the name is mangled.? That clarifies it!? I forgot about name mangling (although I did realize attrs starting with '_' are intended to be implementation detail private).? 

In any case, I do not replicate the logic of allContentReceived () anymore.? Instead, I just call the base class method in my derived class.? 

I had to have a derived class because the following line throws an exception:
?? ?req = self.requests[-1]
because of my special handing of the request connection (the req is gone by the time allContentReceived() gets called).? What is my special handling?? I tie up the request using producer/consumer to some other resource before the entire content is received.

So for now I am fine with:
DerivedClass::allContentReceived(self):
?? ?try:
?? ??? ?http.HTTPChannel.allContentReceived(self)
?? ?except Exception, e:
?? ??? ?pass

Speaking of derived classes, ... I will pose a related question on a new thread ...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121006/1575101f/attachment.htm 

From ardesai at yahoo.com  Sat Oct  6 17:22:13 2012
From: ardesai at yahoo.com (A Desai)
Date: Sat, 6 Oct 2012 14:22:13 -0700 (PDT)
Subject: [Twisted-web] Old Style python classes in Twisted
Message-ID: <1349558533.19024.YahooMailNeo@web114520.mail.gq1.yahoo.com>

Given that twisted tutorials and other written materials show examples of derived classes for Protocol, HTTP Request etc., is there a good reason for many classes (almost all I suspect) (e.g. 'class Request' , 'class BaseProtocol',? 'class _PauseableMixin', etc.) to be old style classes as opposed to a new style python classes?

Given that newer versions of twisted (and user apps) run on newer versions of python, I initially (a few years ago) tried to call the base class using super(), but was surprised to find twisted implements using old style classes.


New style classes make it easy to call a base class method (by using super).? Would the MRO in new style classes make it better or worse?? However, nothing wrong with old style classes, esp. if twisted depends on the depth-first MRO of old style classes.

Can someone clarify whether use of old style classes is intentional (e.g. due to MRO)?


Thanks,

?Arun
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121006/36ac6ee0/attachment.htm 

From exarkun at twistedmatrix.com  Sat Oct  6 17:50:10 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Oct 2012 21:50:10 -0000
Subject: [Twisted-web] Old Style python classes in Twisted
In-Reply-To: <1349558533.19024.YahooMailNeo@web114520.mail.gq1.yahoo.com>
References: <1349558533.19024.YahooMailNeo@web114520.mail.gq1.yahoo.com>
Message-ID: <20121006215010.7857.508107605.divmod.xquotient.264@localhost6.localdomain6>

On 09:22 pm, ardesai at yahoo.com wrote:
>Given that twisted tutorials and other written materials show examples 
>of derived classes for Protocol, HTTP Request etc., is there a good 
>reason for many classes (almost all I suspect) (e.g. 'class Request' , 
>'class BaseProtocol',? 'class _PauseableMixin', etc.) to be old style 
>classes as opposed to a new style python classes?
>
>Given that newer versions of twisted (and user apps) run on newer 
>versions of python, I initially (a few years ago) tried to call the 
>base class using super(), but was surprised to find twisted implements 
>using old style classes.
>
>
>New style classes make it easy to call a base class method (by using 
>super).? Would the MRO in new style classes make it better or worse? 
>However, nothing wrong with old style classes, esp. if twisted depends 
>on the depth-first MRO of old style classes.
>
>Can someone clarify whether use of old style classes is intentional 
>(e.g. due to MRO)?

It is intentional in case any applications based on Twisted rely on 
behavior of classic classes, such as the MRO differences.  Classes added 
to Twisted now are all new-style, though.

Jean-Paul


From glyph at twistedmatrix.com  Sun Oct  7 04:33:36 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 7 Oct 2012 01:33:36 -0700
Subject: [Twisted-web] Old Style python classes in Twisted
In-Reply-To: <20121006215010.7857.508107605.divmod.xquotient.264@localhost6.localdomain6>
References: <1349558533.19024.YahooMailNeo@web114520.mail.gq1.yahoo.com>
	<20121006215010.7857.508107605.divmod.xquotient.264@localhost6.localdomain6>
Message-ID: <2EAD666B-7FEB-4A53-9B38-FA959CF539BC@twistedmatrix.com>


On Oct 6, 2012, at 2:50 PM, exarkun at twistedmatrix.com wrote:

> On 09:22 pm, ardesai at yahoo.com wrote:
>> Given that twisted tutorials and other written materials show examples 
>> of derived classes for Protocol, HTTP Request etc., is there a good 
>> reason for many classes (almost all I suspect) (e.g. 'class Request' , 
>> 'class BaseProtocol',  'class _PauseableMixin', etc.) to be old style 
>> classes as opposed to a new style python classes?
>> 
>> Given that newer versions of twisted (and user apps) run on newer 
>> versions of python, I initially (a few years ago) tried to call the 
>> base class using super(), but was surprised to find twisted implements 
>> using old style classes.
>> 
>> 
>> New style classes make it easy to call a base class method (by using 
>> super).  Would the MRO in new style classes make it better or worse? 
>> However, nothing wrong with old style classes, esp. if twisted depends 
>> on the depth-first MRO of old style classes.
>> 
>> Can someone clarify whether use of old style classes is intentional 
>> (e.g. due to MRO)?
> 
> It is intentional in case any applications based on Twisted rely on 
> behavior of classic classes, such as the MRO differences.  Classes added 
> to Twisted now are all new-style, though.

In your own applications, if you want to call the base class using super(), in most cases you may simply do this:

class MyNewStyleThing(OldStyleThingFromTwisted, object):

Sticking 'object' on the end of the inheritance hierarchy is always[1] safe; it will make your new class new-style, and it will keep working if you ever manage to migrate to Python 3, where all classes are new-style; or, if Twisted ever undergoes a "flag day" to switch over to new-style classes for everything.

(Warning: sticking 'object' on the front of your inheritance hierarchy will rarely appear to work, but it will almost always cause weird issues and can easily fail later.  Remember to put it on the end.)

This inspired me to write a new ticket, <http://twistedmatrix.com/trac/ticket/6076>, in case anyone would at least like to prevent the type-distinction infection from becoming worse over time.

Good luck,

-glyph

[1]: by which I mean, of course, "almost always".  Caveat coder.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121007/2daf95e1/attachment.htm 

From ardesai at yahoo.com  Sun Oct  7 20:03:37 2012
From: ardesai at yahoo.com (A Desai)
Date: Sun, 7 Oct 2012 17:03:37 -0700 (PDT)
Subject: [Twisted-web]  Old Style python classes in Twisted
Message-ID: <1349654617.95554.YahooMailNeo@web114518.mail.gq1.yahoo.com>

Thank you!? That works.? Glad my comment was of some use.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121007/d9cdf4c9/attachment.html 

From peter.westlake at pobox.com  Tue Oct 23 11:10:31 2012
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 23 Oct 2012 16:10:31 +0100
Subject: [Twisted-web] [Twisted-Python] Speed of rendering?
In-Reply-To: <29C14868-41E5-4C39-8336-B467208C6B9D@twistedmatrix.com>
References: <1340286731.21022.140661092192609.7FC851D7@webmail.messagingengine.com>
	<278A6852-053C-4125-882E-26D478255497@twistedmatrix.com>
	<1340401929.23556.140661092828441.30BFC47D@webmail.messagingengine.com>
	<163A532D-64BC-43E7-95C6-77F7294E5EC8@twistedmatrix.com>
	<1340565271.29668.140661093394541.28B0F791@webmail.messagingengine.com>
	<1346683843.31263.140661123041661.574E334C@webmail.messagingengine.com>
	<29C14868-41E5-4C39-8336-B467208C6B9D@twistedmatrix.com>
Message-ID: <1351005031.8415.140661144406353.08239F58@webmail.messagingengine.com>



On Tue, Sep 4, 2012, at 19:30, Glyph wrote:

...

> >>> 
> >>> Not only is there a profiler, there's benchmarks!
> >>> 
> >>> 	<http://speed.twistedmatrix.com/timeline/>
> >>> 
> >>> Maybe you could add one for twisted.web.template rendering speed?
> > 
> > Okay, I've found out how to use the profiler (though I never did
> > find out what I did wrong the first time) and I'm reading the docs
> > about how to interpret the results. The benchmark code doesn't look
> > as though it uses the profiler, just times a number of repetitions
> > - is that right? So a benchmark for t.w.template would consist of
> > some functions that called flatten() once each?
> 
> 
> That's the general idea, yes.  Of course, each benchmark should try to be
> vaguely representative of some real-world use-case so that we don't
> optimize one case too much in favor of another.

Glyph,

I haven't forgotten about this. The problem I'm having is that
flatten() returns immediately if given a string or anything
else without an unfired Deferred, and that sends Client._continue
into an unbounded recursion. Is there a general good way to handle
this kind of problem? Somehow I need to return control to the
reactor long enough for Client._request to return.

Peter.



From glyph at twistedmatrix.com  Wed Oct 24 04:16:09 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 24 Oct 2012 01:16:09 -0700
Subject: [Twisted-web] [Twisted-Python] Speed of rendering?
In-Reply-To: <1351005031.8415.140661144406353.08239F58@webmail.messagingengine.com>
References: <1340286731.21022.140661092192609.7FC851D7@webmail.messagingengine.com>
	<278A6852-053C-4125-882E-26D478255497@twistedmatrix.com>
	<1340401929.23556.140661092828441.30BFC47D@webmail.messagingengine.com>
	<163A532D-64BC-43E7-95C6-77F7294E5EC8@twistedmatrix.com>
	<1340565271.29668.140661093394541.28B0F791@webmail.messagingengine.com>
	<1346683843.31263.140661123041661.574E334C@webmail.messagingengine.com>
	<29C14868-41E5-4C39-8336-B467208C6B9D@twistedmatrix.com>
	<1351005031.8415.140661144406353.08239F58@webmail.messagingengine.com>
Message-ID: <D1A93889-7F1F-44F3-8B80-887CE0BA4AC2@twistedmatrix.com>


On Oct 23, 2012, at 8:10 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

> 
> 
> On Tue, Sep 4, 2012, at 19:30, Glyph wrote:
> 
> ...
> 
>>>>> 
>>>>> Not only is there a profiler, there's benchmarks!
>>>>> 
>>>>> 	<http://speed.twistedmatrix.com/timeline/>
>>>>> 
>>>>> Maybe you could add one for twisted.web.template rendering speed?
>>> 
>>> Okay, I've found out how to use the profiler (though I never did
>>> find out what I did wrong the first time) and I'm reading the docs
>>> about how to interpret the results. The benchmark code doesn't look
>>> as though it uses the profiler, just times a number of repetitions
>>> - is that right? So a benchmark for t.w.template would consist of
>>> some functions that called flatten() once each?
>> 
>> 
>> That's the general idea, yes.  Of course, each benchmark should try to be
>> vaguely representative of some real-world use-case so that we don't
>> optimize one case too much in favor of another.
> 
> Glyph,
> 
> I haven't forgotten about this.

Thanks for sticking with it :).

> The problem I'm having is that flatten() returns immediately if given a string or anything else without an unfired Deferred, and that sends Client._continue into an unbounded recursion. Is there a general good way to handle this kind of problem? Somehow I need to return control to the reactor long enough for Client._request to return.

That sounds like a bug, although it's hard to say without seeing the exact code that you're talking about.  Can you send a representative example?

-g

From exarkun at twistedmatrix.com  Wed Oct 24 08:59:24 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 24 Oct 2012 12:59:24 -0000
Subject: [Twisted-web] [Twisted-Python] Speed of rendering?
In-Reply-To: <1351005031.8415.140661144406353.08239F58@webmail.messagingengine.com>
References: <1340286731.21022.140661092192609.7FC851D7@webmail.messagingengine.com>
	<278A6852-053C-4125-882E-26D478255497@twistedmatrix.com>
	<1340401929.23556.140661092828441.30BFC47D@webmail.messagingengine.com>
	<163A532D-64BC-43E7-95C6-77F7294E5EC8@twistedmatrix.com>
	<1340565271.29668.140661093394541.28B0F791@webmail.messagingengine.com>
	<1346683843.31263.140661123041661.574E334C@webmail.messagingengine.com>
	<29C14868-41E5-4C39-8336-B467208C6B9D@twistedmatrix.com>
	<1351005031.8415.140661144406353.08239F58@webmail.messagingengine.com>
Message-ID: <20121024125924.4595.1178557312.divmod.xquotient.2@localhost6.localdomain6>




On 23 Oct, 03:10 pm, peter.westlake at pobox.com wrote:
>
>
>On Tue, Sep 4, 2012, at 19:30, Glyph wrote:
>
>...
>> >>>
>> >>> Not only is there a profiler, there's benchmarks!
>> >>>
>> >>>     <http://speed.twistedmatrix.com/timeline/>
>> >>>
>> >>> Maybe you could add one for twisted.web.template rendering speed?
>> >
>> > Okay, I've found out how to use the profiler (though I never did
>> > find out what I did wrong the first time) and I'm reading the docs
>> > about how to interpret the results. The benchmark code doesn't look
>> > as though it uses the profiler, just times a number of repetitions
>> > - is that right? So a benchmark for t.w.template would consist of
>> > some functions that called flatten() once each?
>>
>>
>>That's the general idea, yes.  Of course, each benchmark should try to 
>>be
>>vaguely representative of some real-world use-case so that we don't
>>optimize one case too much in favor of another.
>
>Glyph,
>
>I haven't forgotten about this. The problem I'm having is that
>flatten() returns immediately if given a string or anything
>else without an unfired Deferred, and that sends Client._continue
>into an unbounded recursion. Is there a general good way to handle
>this kind of problem? Somehow I need to return control to the
>reactor long enough for Client._request to return.

The benchmark tools are really intended for actually asynchronous 
things, like setting up a TCP connection.  They can be abused into 
testing synchronous things, but the results are not very good.

It would probably be better not to try to re-use the asynchronous 
testing tools for testing synchronous APIs and instead build some tools 
for testing synchronous APIs.  These should be simpler anyway.  You 
don't *need* a running reactor for the synchronous case of flatten().

Jean-Paul


From peter.westlake at pobox.com  Wed Oct 24 09:11:38 2012
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 24 Oct 2012 14:11:38 +0100
Subject: [Twisted-web] [Twisted-Python] Speed of rendering?
In-Reply-To: <D1A93889-7F1F-44F3-8B80-887CE0BA4AC2@twistedmatrix.com>
References: <1340286731.21022.140661092192609.7FC851D7@webmail.messagingengine.com>
	<278A6852-053C-4125-882E-26D478255497@twistedmatrix.com>
	<1340401929.23556.140661092828441.30BFC47D@webmail.messagingengine.com>
	<163A532D-64BC-43E7-95C6-77F7294E5EC8@twistedmatrix.com>
	<1340565271.29668.140661093394541.28B0F791@webmail.messagingengine.com>
	<1346683843.31263.140661123041661.574E334C@webmail.messagingengine.com>
	<29C14868-41E5-4C39-8336-B467208C6B9D@twistedmatrix.com>
	<1351005031.8415.140661144406353.08239F58@webmail.messagingengine.com>
	<D1A93889-7F1F-44F3-8B80-887CE0BA4AC2@twistedmatrix.com>
Message-ID: <1351084298.5466.140661144829769.4FBE89B1@webmail.messagingengine.com>



On Wed, Oct 24, 2012, at 09:16, Glyph wrote:
> 
> On Oct 23, 2012, at 8:10 AM, Peter Westlake <peter.westlake at pobox.com>
> wrote:
... 
> > The problem I'm having is that flatten() returns immediately if given a string or anything else without an unfired Deferred, and that sends Client._continue into an unbounded recursion. Is there a general good way to handle this kind of problem? Somehow I need to return control to the reactor long enough for Client._request to return.
> 
> That sounds like a bug, although it's hard to say without seeing the
> exact code that you're talking about.  Can you send a representative
> example?

Here it is:


from benchlib import driver, Client

from twisted.web.template import flatten
from twisted.web.server import Request
from twisted.web.http import HTTPChannel

class Client(Client):
    channel = HTTPChannel()
    request = Request(channel, False)

    def _request(self):
        d = flatten(self.request, 'hello', lambda _: None)
        d.addCallback(self._continue)  ### Infinite recursion happens
        here
        d.addErrback(self._stop)


def main(reactor, duration):
    concurrency = 1
    client = Client(reactor)
    d = client.run(concurrency, duration)
    return d


if __name__ == '__main__':
    import sys
    import flatten_string
    driver(flatten_string.main, sys.argv)

Because flatten does not have to wait for anything, it returns
a Deferred that has already fired. The d.addCallback sees this
and calls the callback immediately. Client._continue calls the
next iteration of the test by calling self.request again, and
the stack blows up. This is perfectly reasonable and standard
behaviour for Deferreds, so I should be doing the iteration in
some other way, probably not using Client at all. What I was
hoping for was a pattern for how to transform the code to avoid
the problem; I suspect the answer is to use iteration instead
of recursion. It might even be that none of benchlib.py is
usable directly.

Or maybe putting the flatten() calls into a thread would work?
But that runs the risk of race conditions, if it finishes
before the callback is added.

Peter.


From peter.westlake at pobox.com  Wed Oct 24 09:15:44 2012
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 24 Oct 2012 14:15:44 +0100
Subject: [Twisted-web] [Twisted-Python] Speed of rendering?
In-Reply-To: <20121024125924.4595.1178557312.divmod.xquotient.2@localhost6.localdomain6>
References: <1340286731.21022.140661092192609.7FC851D7@webmail.messagingengine.com>
	<278A6852-053C-4125-882E-26D478255497@twistedmatrix.com>
	<1340401929.23556.140661092828441.30BFC47D@webmail.messagingengine.com>
	<163A532D-64BC-43E7-95C6-77F7294E5EC8@twistedmatrix.com>
	<1340565271.29668.140661093394541.28B0F791@webmail.messagingengine.com>
	<1346683843.31263.140661123041661.574E334C@webmail.messagingengine.com>
	<29C14868-41E5-4C39-8336-B467208C6B9D@twistedmatrix.com>
	<1351005031.8415.140661144406353.08239F58@webmail.messagingengine.com>
	<20121024125924.4595.1178557312.divmod.xquotient.2@localhost6.localdomain6>
Message-ID: <1351084544.6435.140661144837881.57112D47@webmail.messagingengine.com>

On Wed, Oct 24, 2012, at 13:59, exarkun at twistedmatrix.com wrote:
> 
> The benchmark tools are really intended for actually asynchronous 
> things, like setting up a TCP connection.  They can be abused into 
> testing synchronous things, but the results are not very good.
> 
> It would probably be better not to try to re-use the asynchronous 
> testing tools for testing synchronous APIs and instead build some tools 
> for testing synchronous APIs.  These should be simpler anyway.  You 
> don't *need* a running reactor for the synchronous case of flatten().

This message appeared while I was typing my reply, in which I
laboriously
worked my way round to a similiar conclusion! So I'll write some tests
that test synchronous uses, with no Deferreds. Waiting for other results
to appear would only skew the timings, so I won't try timing any cases
with Deferreds in them.

Peter.




From richb.hanover at gmail.com  Sun Oct 28 13:02:26 2012
From: richb.hanover at gmail.com (Rich Brown)
Date: Sun, 28 Oct 2012 13:02:26 -0400
Subject: [Twisted-web] Override File's DirectoryLister?
Message-ID: <CAF-ggVObMG_REhdiiJSYn-nH_05UK=VGcLY2rLj_w595AQ1=nQ@mail.gmail.com>

Folks,

I'm new to Twisted and it looks like a good way to add a web server to my
existing project. I am successfully following the example at
http://twistedmatrix.com/documents/current/web/howto/web-in-60/static-dispatch.htmlto
display the directories with the default file listing code.

Now I want to modify that default behavior for directory listing to:

- filter out/exclude certain kinds of files (e.g., by the extension), and
- add a few elements to the HTML page displayed.

I've read the code of static.py, and see that the the DirectoryLister class
seems to govern this. I believe I need to make a subslass, but I'm not a
strong Python programmer, so the minor variations I tried kept running
amiss of the class hierarchy, etc.

Could someone give me an outline of the method declarations that are needed
to get the behavior above? Many thanks.

Rich Brown
Hanover, NH USA
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121028/dce378d3/attachment.htm 

From phil.twisted-web at hanjinet.org  Sun Oct 28 14:46:00 2012
From: phil.twisted-web at hanjinet.org (Philippe May)
Date: Mon, 29 Oct 2012 00:16:00 +0530
Subject: [Twisted-web] Override File's DirectoryLister?
In-Reply-To: <CAF-ggVObMG_REhdiiJSYn-nH_05UK=VGcLY2rLj_w595AQ1=nQ@mail.gmail.com>
References: <CAF-ggVObMG_REhdiiJSYn-nH_05UK=VGcLY2rLj_w595AQ1=nQ@mail.gmail.com>
Message-ID: <0D99A725-D755-4945-BC6B-371E6962B6C9@hanjinet.org>

Hi Rich,

That's quite easy, it's just basic object oriented programing with Python, nothing directly related to Twisted:
import what you need, subclass the File and DirectoryLister, and override in those what is required to be changed.

Starting rom the code you mention, that gives the piece of code below (check the ## ** Comment ** parts).
Hope that helps you starting.

Regards,
Philippe


import os
import cgi
import urllib
import time

from twisted.web.server import Site
from twisted.web.resource import Resource
from twisted.internet import reactor
from twisted.web.static import File, DirectoryLister, getTypeAndEncoding, formatFileSize


class MyDirectoryLister(DirectoryLister):

    ## ** Comment **
    ##   Here you can change the way lines are displayed.
    ##   I just added the "mtime" field, see below how it is defined

    linePattern = """<tr class="%(class)s">
    <td><a href="%(href)s">%(text)s</a></td>
    <td>%(size)s</td>
    <td>%(type)s</td>
    <td>%(encoding)s</td>
    <td>%(mtime)s</td>
</tr>
"""

    ## ** Comment **
    ##   _getFilesAndDirectories is just a copy of the original function found in the File class,
    ##   with minor modifications

    def _getFilesAndDirectories(self, directory):
        """
        Helper returning files and directories in given directory listing, with
        attributes to be used to build a table content with
        C{self.linePattern}.

        @return: tuple of (directories, files)
        @rtype: C{tuple} of C{list}
        """

        files = []
        dirs = []
        for path in directory:
            ## ** Comment **
            ##   Do stuff with the file path
            ##   (eg filter 'hidden' files and get the modification time):
            if path[0] == ".":
                continue
            mtime = time.asctime(time.localtime(os.path.getmtime(os.path.join(self.path, path))))

            url = urllib.quote(path, "/")
            escapedPath = cgi.escape(path)
            if os.path.isdir(os.path.join(self.path, path)):
                url = url + '/'
                dirs.append({'text': escapedPath + "/", 'href': url,
                             'size': '', 'type': '[Directory]',
                             'encoding': '',
                             'mtime': mtime
                             })
            else:
                mimetype, encoding = getTypeAndEncoding(path, self.contentTypes,
                                                        self.contentEncodings,
                                                        self.defaultType)
                try:
                    size = os.stat(os.path.join(self.path, path)).st_size
                except OSError:
                    continue


                ## ** Comment **
                ##   Add attributes the the "elements" displayed in each line

                files.append({
                    'text': escapedPath, "href": url,
                    'type': '[%s]' % mimetype,
                    'encoding': (encoding and '[%s]' % encoding or ''),
                    'size': formatFileSize(size),
                    'mtime': mtime,
                    }
                )
        return dirs, files


class MyFile(File):

    ## ** Comment **
    ##   You need need of course to subclass File, and change the minimum required to use your
    ##   DirectoryLister

    def directoryListing(self):
        return MyDirectoryLister(self.path,
                               self.listNames(),
                               self.contentTypes,
                               self.contentEncodings,
                               self.defaultType)


root = Resource()
## ** Comment **
##   Of course, don't forget to use your class:
root.putChild("foo", MyFile("/tmp"))
root.putChild("bar", MyFile("/lost+found"))
root.putChild("baz", MyFile("/opt"))

factory = Site(root)
reactor.listenTCP(8880, factory)
reactor.run()


Le 28 oct. 2012 ? 22:32, Rich Brown a ?crit :

> Folks,
> 
> I'm new to Twisted and it looks like a good way to add a web server to my existing project. I am successfully following the example at http://twistedmatrix.com/documents/current/web/howto/web-in-60/static-dispatch.html to display the directories with the default file listing code.
> 
> Now I want to modify that default behavior for directory listing to:
> 
> - filter out/exclude certain kinds of files (e.g., by the extension), and 
> - add a few elements to the HTML page displayed.
> 
> I've read the code of static.py, and see that the the DirectoryLister class seems to govern this. I believe I need to make a subslass, but I'm not a strong Python programmer, so the minor variations I tried kept running amiss of the class hierarchy, etc.
> 
> Could someone give me an outline of the method declarations that are needed to get the behavior above? Many thanks.
> 
> Rich Brown
> Hanover, NH USA
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121029/a4ab67f8/attachment.htm 

From glyph at twistedmatrix.com  Sun Oct 28 15:34:12 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 28 Oct 2012 12:34:12 -0700
Subject: [Twisted-web] Override File's DirectoryLister?
In-Reply-To: <0D99A725-D755-4945-BC6B-371E6962B6C9@hanjinet.org>
References: <CAF-ggVObMG_REhdiiJSYn-nH_05UK=VGcLY2rLj_w595AQ1=nQ@mail.gmail.com>
	<0D99A725-D755-4945-BC6B-371E6962B6C9@hanjinet.org>
Message-ID: <70C6171C-A881-4899-BE59-BFB10FAD74C1@twistedmatrix.com>


On Oct 28, 2012, at 11:46 AM, Philippe May <phil.twisted-web at hanjinet.org> wrote:

>     ##   _getFilesAndDirectories is just a copy of the original function found in the File class,
>     ##   with minor modifications

Please note that overriding private methods (those that begin with an underscore and do not end with one) is likely to break without warning in a future release of Twisted.

DirectoryLister was never really designed to be extensible outside Twisted.  If you'd like to contribute some enhancements to Twisted itself, that would be great :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121028/7cbaf4de/attachment.htm 

From phil.twisted-web at hanjinet.org  Sun Oct 28 16:26:21 2012
From: phil.twisted-web at hanjinet.org (Philippe May)
Date: Mon, 29 Oct 2012 01:56:21 +0530
Subject: [Twisted-web] Websockets
Message-ID: <E68FB18D-E178-49E8-B90D-258D8D2A5A27@hanjinet.org>

Hi all,

There were a lot discussions regarding Websockets few months (years?) back, before the RFC6455 was released and the hybi group defining the protocol was in pretty messy state.

Now this technology is stable and coming mainstream with almost all browsers supporting it, so i think it's time to reopen the question for Twisted.

There are many forks on Github from the original work of rlotun called txWebSocket.
My branch may be the most advanced ( https://github.com/aprilmay/txWebSocket ).
It works quite well for my purpose until now, even if it can surely be improved.
It has both server and client, trial tests, basic support for extensions (eg compression and multiplexing are on the way from the hybi group) and i hope is efficient enough for most uses.

There is also a project called Autobahn but it is not integrated with twisted.web (so one cannot serve standard HTTP and websockets from the same service out of the box) and was designed first to be a test suite for the development of the protocol.

What are the opinions from the core team and other people in this list on this?

Thanks,
Philippe

From phil.twisted-web at hanjinet.org  Sun Oct 28 16:36:30 2012
From: phil.twisted-web at hanjinet.org (Philippe May)
Date: Mon, 29 Oct 2012 02:06:30 +0530
Subject: [Twisted-web] Override File's DirectoryLister?
In-Reply-To: <70C6171C-A881-4899-BE59-BFB10FAD74C1@twistedmatrix.com>
References: <CAF-ggVObMG_REhdiiJSYn-nH_05UK=VGcLY2rLj_w595AQ1=nQ@mail.gmail.com>
	<0D99A725-D755-4945-BC6B-371E6962B6C9@hanjinet.org>
	<70C6171C-A881-4899-BE59-BFB10FAD74C1@twistedmatrix.com>
Message-ID: <73B9CC79-CD79-49B1-815C-FFAE4B650939@hanjinet.org>

Hi Glyph,

Thanks for the precision. One would need to override just few bits more to keep it clean, then.

I don't really have the need for creating an extensible DirectoryLister now...
But talking about contributing to Twisted, you made me remember about WebSockets. I just started another topic on that subject :)

Regards,
Philippe


Le 29 oct. 2012 ? 01:04, Glyph a ?crit :

> 
> On Oct 28, 2012, at 11:46 AM, Philippe May <phil.twisted-web at hanjinet.org> wrote:
> 
>>     ##   _getFilesAndDirectories is just a copy of the original function found in the File class,
>>     ##   with minor modifications
> 
> Please note that overriding private methods (those that begin with an underscore and do not end with one) is likely to break without warning in a future release of Twisted.
> 
> DirectoryLister was never really designed to be extensible outside Twisted.  If you'd like to contribute some enhancements to Twisted itself, that would be great :).
> 
> -glyph
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121029/befa63af/attachment-0001.htm 

From glyph at twistedmatrix.com  Sun Oct 28 16:46:10 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 28 Oct 2012 13:46:10 -0700
Subject: [Twisted-web] Websockets
In-Reply-To: <E68FB18D-E178-49E8-B90D-258D8D2A5A27@hanjinet.org>
References: <E68FB18D-E178-49E8-B90D-258D8D2A5A27@hanjinet.org>
Message-ID: <A6DF3822-63FA-4019-862E-37754AA90637@twistedmatrix.com>


On Oct 28, 2012, at 1:26 PM, Philippe May <phil.twisted-web at hanjinet.org> wrote:

> Hi all,
> 
> There were a lot discussions regarding Websockets few months (years?) back, before the RFC6455 was released and the hybi group defining the protocol was in pretty messy state.
> 
> Now this technology is stable and coming mainstream with almost all browsers supporting it, so i think it's time to reopen the question for Twisted.
> 
> There are many forks on Github from the original work of rlotun called txWebSocket.
> My branch may be the most advanced ( https://github.com/aprilmay/txWebSocket ).
> It works quite well for my purpose until now, even if it can surely be improved.
> It has both server and client, trial tests, basic support for extensions (eg compression and multiplexing are on the way from the hybi group) and i hope is efficient enough for most uses.
> 
> There is also a project called Autobahn but it is not integrated with twisted.web (so one cannot serve standard HTTP and websockets from the same service out of the box) and was designed first to be a test suite for the development of the protocol.
> 
> What are the opinions from the core team and other people in this list on this?

The relevant link here is <http://tm.tl/4173>.  There's a branch, and work is still ongoing there, with updates as recent as 3 days ago.  Perhaps you should just Cc: yourself on that ticket and participate in development?

-glyph

From phil.twisted-web at hanjinet.org  Sun Oct 28 17:17:18 2012
From: phil.twisted-web at hanjinet.org (Philippe May)
Date: Mon, 29 Oct 2012 02:47:18 +0530
Subject: [Twisted-web] Websockets
In-Reply-To: <A6DF3822-63FA-4019-862E-37754AA90637@twistedmatrix.com>
References: <E68FB18D-E178-49E8-B90D-258D8D2A5A27@hanjinet.org>
	<A6DF3822-63FA-4019-862E-37754AA90637@twistedmatrix.com>
Message-ID: <77EEA383-EC3C-46DF-A19D-0FC8FBF322BA@hanjinet.org>

Great, thanks for the link! 
This ticket was pending for such a long time, good to see it's well alive.
I'll see in what i can contribute in that branch, and hope that it will be merged in a release soon.

Philippe

Le 29 oct. 2012 ? 02:16, Glyph a ?crit :

> 
> On Oct 28, 2012, at 1:26 PM, Philippe May <phil.twisted-web at hanjinet.org> wrote:
> 
>> Hi all,
>> 
>> There were a lot discussions regarding Websockets few months (years?) back, before the RFC6455 was released and the hybi group defining the protocol was in pretty messy state.
>> 
>> Now this technology is stable and coming mainstream with almost all browsers supporting it, so i think it's time to reopen the question for Twisted.
>> 
>> There are many forks on Github from the original work of rlotun called txWebSocket.
>> My branch may be the most advanced ( https://github.com/aprilmay/txWebSocket ).
>> It works quite well for my purpose until now, even if it can surely be improved.
>> It has both server and client, trial tests, basic support for extensions (eg compression and multiplexing are on the way from the hybi group) and i hope is efficient enough for most uses.
>> 
>> There is also a project called Autobahn but it is not integrated with twisted.web (so one cannot serve standard HTTP and websockets from the same service out of the box) and was designed first to be a test suite for the development of the protocol.
>> 
>> What are the opinions from the core team and other people in this list on this?
> 
> The relevant link here is <http://tm.tl/4173>.  There's a branch, and work is still ongoing there, with updates as recent as 3 days ago.  Perhaps you should just Cc: yourself on that ticket and participate in development?
> 
> -glyph
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web



From richb.hanover at gmail.com  Sun Oct 28 17:28:23 2012
From: richb.hanover at gmail.com (Rich Brown)
Date: Sun, 28 Oct 2012 17:28:23 -0400
Subject: [Twisted-web] Override File's DirectoryLister?
Message-ID: <CAF-ggVOb-5kjArZTzdYX50UP1oJ5bWFxR9nhS9Jf=Ao6WgKf-A@mail.gmail.com>

Philippe, Glyph,

Thanks for the speedy response. I did wonder about overriding the private
methods, but this is a risk I'm willing to take.

Best regards,

Rich Brown
Hanover, NH USA
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20121028/7c1d7375/attachment.htm 

