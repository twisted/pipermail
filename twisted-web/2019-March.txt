From johnaherne at rocs.co.uk  Sun Mar  3 03:30:16 2019
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 3 Mar 2019 10:30:16 +0000
Subject: [Twisted-web] Twisted Klein idle connection timeout
Message-ID: <CAKmUHjZvrwLZdThuxNVHQa_Vh8jN9SFe_fnAEC9buofnQvLTHw@mail.gmail.com>

Klein defaults to the twisted http timeout of 60 seconds.

But in twisted web Site setup you can define a timeout parameter to change
this. e.g.

factory = Site(root, timeout=300)

I can't see any option to add a parameter in Klein to change this.

Is there no option for this or have I just missed the obvious setup point.

Thanks for any info.


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-web/attachments/20190303/070a4d2d/attachment.html>

From twm at freecog.net  Mon Mar  4 16:25:04 2019
From: twm at freecog.net (Tom Most)
Date: Mon, 04 Mar 2019 23:25:04 +0000
Subject: [Twisted-web] Twisted Klein idle connection timeout
In-Reply-To: <CAKmUHjZvrwLZdThuxNVHQa_Vh8jN9SFe_fnAEC9buofnQvLTHw@mail.gmail.com>
References: <CAKmUHjZvrwLZdThuxNVHQa_Vh8jN9SFe_fnAEC9buofnQvLTHw@mail.gmail.com>
Message-ID: <79FC30BA-5BB8-48E2-91FE-B513BC2FE0B4@freecog.net>

Hi John,

You can accomplish what you're after by wrapping your Klein instance in Site yourself --- .run() is just a shortcut that does this (plus initialize logging).
Call .resource() to get a reource to use as root in the snippet you posted.

https://github.com/twisted/klein/blob/86e34a2ea0f26fc7710851912707ab937d0df31d/src/klein/_app.py#L421

---Tom


On March 3, 2019 2:30:16 AM PST, John Aherne <johnaherne at rocs.co.uk> wrote:
>Klein defaults to the twisted http timeout of 60 seconds.
>
>But in twisted web Site setup you can define a timeout parameter to
>change
>this. e.g.
>
>factory = Site(root, timeout=300)
>
>I can't see any option to add a parameter in Klein to change this.
>
>Is there no option for this or have I just missed the obvious setup
>point.
>
>Thanks for any info.
>
>
>-- 
>*John Aherne*
>
>
>
>
>*www.rocs.co.uk <http://www.rocs.co.uk>*
>020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-web/attachments/20190304/ae6785be/attachment.html>

From johnaherne at rocs.co.uk  Wed Mar  6 00:57:45 2019
From: johnaherne at rocs.co.uk (John Aherne)
Date: Wed, 6 Mar 2019 07:57:45 +0000
Subject: [Twisted-web] Twisted Klein idle connection timeout
In-Reply-To: <79FC30BA-5BB8-48E2-91FE-B513BC2FE0B4@freecog.net>
References: <CAKmUHjZvrwLZdThuxNVHQa_Vh8jN9SFe_fnAEC9buofnQvLTHw@mail.gmail.com>
 <79FC30BA-5BB8-48E2-91FE-B513BC2FE0B4@freecog.net>
Message-ID: <CAKmUHjZ5y7Zwdd1oyjUhfbFkYTUvs8uzucC6xS6jGWtvurM22Q@mail.gmail.com>

Thanks for the info.

I've taken a look and can't quite see what I need to do.

I'll have to take a closer look a bit later and see what I come up with.

John


On Mon, Mar 4, 2019 at 11:25 PM Tom Most <twm at freecog.net> wrote:

> Hi John,
>
> You can accomplish what you're after by wrapping your Klein instance in
> Site yourself --- .run() is just a shortcut that does this (plus initialize
> logging).
> Call .resource() to get a reource to use as root in the snippet you posted.
>
>
> https://github.com/twisted/klein/blob/86e34a2ea0f26fc7710851912707ab937d0df31d/src/klein/_app.py#L421
>
> ---Tom
>
>
> On March 3, 2019 2:30:16 AM PST, John Aherne <johnaherne at rocs.co.uk>
> wrote:
>>
>> Klein defaults to the twisted http timeout of 60 seconds.
>>
>> But in twisted web Site setup you can define a timeout parameter to
>> change this. e.g.
>>
>> factory = Site(root, timeout=300)
>>
>> I can't see any option to add a parameter in Klein to change this.
>>
>> Is there no option for this or have I just missed the obvious setup point.
>>
>> Thanks for any info.
>>
>>
>> --
>> *John Aherne*
>>
>>
>>
>>
>> *www.rocs.co.uk <http://www.rocs.co.uk>*
>> 020 7223 7567
>>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-web/attachments/20190306/4fc2260d/attachment.html>

From Axel.Rau at Chaos1.DE  Fri Mar 29 12:39:37 2019
From: Axel.Rau at Chaos1.DE (Axel Rau)
Date: Fri, 29 Mar 2019 19:39:37 +0100
Subject: [Twisted-web] Listening on 2 addresses
Message-ID: <9A7AC4BF-7376-4887-837D-1AAACA369588@Chaos1.DE>

I have a simple web application with the plugin below.
It works fine with IPv4 or IPv6. The host has 2 addresses
(IPv4 + IPv6 = dual stack).
How can I extend the plugin to let my server listen on both
addresses?

Please advice,
Axel

PS: The plugin:

from zope.interface import implementer

from twisted.application.service import IServiceMaker
from twisted.application import internet
from twisted.plugin import IPlugin
from twisted.python import usage

from meteo import meteo_factory

class Options(usage.Options):
	optParameters = [	['port', 'p', 80, 'The port number to listen on.'],
						['ipv4_address', '4', None, 'The IPv4 address to listen on.'],
						['ipv6_address', '6', None, 'The IPv6 address to listen on.'],
						['host', 'l', None, 'The hostname where to listen at']]

@implementer(IServiceMaker, IPlugin)
class MeteoServiceMaker(object):
	tapname = 'meteo'
	description = 'A web application for the meteo package'
	options = Options
	
	def makeService(self, options):
		"""
		Constructs a TCP server from a factory defined in meteo.py
		"""
		return internet.TCPServer(	int(options['port']), 
                                    meteo_factory,
                                    interface=options['ipv6_address'])			

serviceMaker = MeteoServiceMaker()

---
PGP-Key:29E99DD6  ☀  computing @ chaos claudius


From twm at freecog.net  Sat Mar 30 18:51:08 2019
From: twm at freecog.net (Tom Most)
Date: Sat, 30 Mar 2019 20:51:08 -0400
Subject: [Twisted-web] Listening on 2 addresses
In-Reply-To: <9A7AC4BF-7376-4887-837D-1AAACA369588@Chaos1.DE>
References: <9A7AC4BF-7376-4887-837D-1AAACA369588@Chaos1.DE>
Message-ID: <2ccdd885-0c0c-424e-b2d2-7ad3d79ea467@www.fastmail.com>

Hi Axel,

makeService() returns an IService. twisted.internet.application.MultiService[1] is an IService that composes other services (it's an IServiceCollection). The implementation would be something like:

def makeService(self, options):
    ipv4 = internet.TCPServer(int(options['port'], meteo_factory, interface=options['ipv4_address'])
    ipv6 = internet.TCPServer(int(options['port'], meteo_factory, interface=options['ipv6_address'])
    root = MultiService()
    ipv4.setServiceParent(root)
    ipv6.setServiceParent(root)
    return root

You might prefer StreamServerEndpointService[2] to TCPServer. String endpoint descriptions[3] are pretty convenient for CLI use.

[1]: https://twistedmatrix.com/documents/current/api/twisted.application.service.MultiService.html
[2]: https://twistedmatrix.com/documents/current/api/twisted.application.internet.StreamServerEndpointService.html
[3]: https://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#serverFromString

-- 
  Tom Most
  twm at freecog.net

On Fri, Mar 29, 2019, at 11:39 AM, Axel Rau wrote:
> I have a simple web application with the plugin below.
> It works fine with IPv4 or IPv6. The host has 2 addresses
> (IPv4 + IPv6 = dual stack).
> How can I extend the plugin to let my server listen on both
> addresses?
> 
> Please advice,
> Axel
> 
> PS: The plugin:
> 
> from zope.interface import implementer
> 
> from twisted.application.service import IServiceMaker
> from twisted.application import internet
> from twisted.plugin import IPlugin
> from twisted.python import usage
> 
> from meteo import meteo_factory
> 
> class Options(usage.Options):
> 	optParameters = [	['port', 'p', 80, 'The port number to listen on.'],
> 						['ipv4_address', '4', None, 'The IPv4 address to listen on.'],
> 						['ipv6_address', '6', None, 'The IPv6 address to listen on.'],
> 						['host', 'l', None, 'The hostname where to listen at']]
> 
> @implementer(IServiceMaker, IPlugin)
> class MeteoServiceMaker(object):
> 	tapname = 'meteo'
> 	description = 'A web application for the meteo package'
> 	options = Options
> 	
> 	def makeService(self, options):
> 		"""
> 		Constructs a TCP server from a factory defined in meteo.py
> 		"""
> 		return internet.TCPServer(	int(options['port']), 
>                                     meteo_factory,
>                                     interface=options['ipv6_address'])			
> 
> serviceMaker = MeteoServiceMaker()
> 
> ---
> PGP-Key:29E99DD6  ☀  computing @ chaos claudius


From Axel.Rau at Chaos1.DE  Sun Mar 31 09:34:26 2019
From: Axel.Rau at Chaos1.DE (Axel Rau)
Date: Sun, 31 Mar 2019 17:34:26 +0200
Subject: [Twisted-web] Listening on 2 addresses
In-Reply-To: <2ccdd885-0c0c-424e-b2d2-7ad3d79ea467@www.fastmail.com>
References: <9A7AC4BF-7376-4887-837D-1AAACA369588@Chaos1.DE>
 <2ccdd885-0c0c-424e-b2d2-7ad3d79ea467@www.fastmail.com>
Message-ID: <C2A9BBC9-E55E-4ADA-9DFA-9359C554338A@Chaos1.DE>

Hi Tom,

thanks for the explanation.  After adding some brackets, your example code works like a charm.
> 
> [1]: https://twistedmatrix.com/documents/current/api/twisted.application.service.MultiService.html <https://twistedmatrix.com/documents/current/api/twisted.application.service.MultiService.html>
> [2]: https://twistedmatrix.com/documents/current/api/twisted.application.internet.StreamServerEndpointService.html <https://twistedmatrix.com/documents/current/api/twisted.application.internet.StreamServerEndpointService.html>
> [3]: https://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#serverFromString <https://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#serverFromString>


Using your pointers, I tried the next step: TLS.

This variant of the makeService method:

		ipv4_endpoint = endpoints.serverFromString(
			reactor, 'ssl:{}:privateKey={}:certKey={}:interface={}'.format(
				options['port'],
				endpoints.quoteStringArgument(options['cert_path']),
				endpoints.quoteStringArgument(options['key_path']),
				options['ipv4_address']))
		
		ipv6_endpoint = endpoints.serverFromString(
			reactor, 'ssl:{}:privateKey={}:certKey={}:interface={}'.format(
				options['port'],
				endpoints.quoteStringArgument(options['cert_path']),
				endpoints.quoteStringArgument(options['key_path']),
				options['ipv6_address']))
		
		ipv4 = internet.StreamServerEndpointService(ipv4_endpoint, meteo_factory)
		ipv6 = internet.StreamServerEndpointService(ipv6_endpoint, meteo_factory)
		
		root = MultiService()
		ipv4.setServiceParent(root)
		ipv6.setServiceParent(root)

does not work. It fails with:
	_parseSSL() got multiple values for argument ‚interface'
same with private privateKey and certKey.

What did I wrong this time?

Thanks, Axel
---
PGP-Key:29E99DD6  ☀  computing @ chaos claudius

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-web/attachments/20190331/bb59d556/attachment.html>

