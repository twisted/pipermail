From twisted-web@twistedmatrix.com  Mon Feb  2 13:56:43 2004
From: twisted-web@twistedmatrix.com (twisted-web@twistedmatrix.com)
Date: Mon, 2 Feb 2004 15:56:43 +0200
Subject: [Twisted-web] Dynamic size of formless.Lists
Message-ID: <20040202141152.JUGP1371.shunit@shunit>

Hi,
I'm starting to write my own nevow site and truly love it

my question is regarding formless.List.
I took one of dp's examples from http://soundfarmer.com/content/code/formpost3.tac
Which shows how to create a form with a list of  form objects (formless.List )
My question:
Suppose I would like to define dynamicly the size of the list.
Instead of :
addresses = [Address(), Address(), Address()] 
Something like :
addresses = getDeferredFromSomewhere()
addresses.addCallback(….)
Is there any simple way of doing it?
Thanks in advance 
	-- Aragon




From twisted-web@twistedmatrix.com  Mon Feb  2 16:09:01 2004
From: twisted-web@twistedmatrix.com (Frantisek Fuka)
Date: Mon, 02 Feb 2004 17:09:01 +0100
Subject: [Twisted-web] Different Session timeout for different users
Message-ID: <401E761D.6070408@fuxoft.cz>

Hello everyone,

I have the following problem: I need for different users of my web 
application to have different Session timeouts. From looking at the 
Twisted sources, it seems to me that Session timeout is hardcoded at 30 
minutes or something like that. But I need for SOME of my users to have 
this limit much longer, e.g. visiting the site, then not clicking on 
anything for 6 hours (or visiting other sites in the meantime), then 
getting back to my site and STILL BE LOGGED IN. But most of the other 
users should still have the original (30 mins?) limit.

What is the cleanest way to implement this?

My application doesn't use Factories at all, I simply use the parts of 
Twisted as includes in my application - which is written in 100% Python. 
Unfortunately, I don't understand cookies very well, so it's not easy 
for me to write my own "Session" class from scratch...

Thanks

-- 
                                          Frantisek Fuka
(yes, that IS my real name)
(and it's pronounced "Fran-tjee-shek Foo-kah")
----------------------------------------------------
My E-mail:   fuka@fuxoft.cz
My Homepage: http://www.fuxoft.cz
My ICQ:      2745855


From twisted-web@twistedmatrix.com  Tue Feb  3 17:36:40 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Tue, 3 Feb 2004 12:36:40 -0500
Subject: [Twisted-web] Revamped ContextSerializer/TagSerializer and other contextish stuff
Message-ID: <86B11DBC-566F-11D8-A697-000A95A50FB2@fuhm.net>

--Apple-Mail-4-885836739
Content-Transfer-Encoding: 7bit
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed

The HTTP output encoding is set to UTF-8 in renderer, and unicode 
strings are
automatically encoded in utf-8 for output. If any browsers can't deal 
with
UTF-8, screw them. ;)

Revamping of TagSerializer and ContextSerializer to be more sensible.
  1) Context chaining works properly now.
   - Precompiling a stan tree,
        html[body[ul(renderer=foo)[li[a(data="Bar")]]]]
     will result in the following (paraphrased):
       "<html><body>", WovenContext(parents=body,html, 
tag=ul(renderer=foo)[
           "<li>",WovenContext(IData="Bar", parents=li, tag=a), "</li>"],
       "</body></html>"
     The thing to notice is that the parent context chain is cut off 
whenever
     a WovenContext is inserted into the actual tree, as it is 
redundant, and
     possibly wrong (since e.g. a renderer function could reparent its 
subtrees)
     In ContextSerializer, the rendering context is chained onto the end 
of the
      remembered context, thus creating the full context chain.
  2) Because of the above change, stripContexts isn't needed anymore.
  3) Contexts have an "isAttrib" field now, indicating whether the 
context
     is within an attribute value. This is used by StringSerializer to 
properly
     escape quotes.
  4) Contexts don't erase their parent tag field when cloned.
  5) ContextSerializer tells TagSerializer that the context is its own,
     and not to make a new context.
  6) Removed a bunch of rendundant cloning.
      Renderer.precompile, WovenContext.patterns
      ContextSerializer uses shallow clone.
  7) Tag.clone(deep=False) copies its children list.

James

This fixed the following bugs that noone noticed yet:
  - Attribute context doesn't contain tag.
  - Attribute values don't always get " quoted.
  - Extra contexts got put in the chain by TagSerializer sometimes.

Ideas for new tests:
  1) Render multiple times from one precompiled document, with mutation 
of
     context.tag by renderer function.
  2) Attribute context is the context of their own tag.
  3) Renderer can check its context chain to make sure that it looks
     proper (e.g. has the right parents from the stan tree).
     With and without precompilation and dynamic elements.


--Apple-Mail-4-885836739
Content-Transfer-Encoding: 7bit
Content-Type: application/octet-stream;
	x-unix-mode=0644;
	name="nevow3.patch"
Content-Disposition: attachment;
	filename=nevow3.patch

Index: .cvsignore
===================================================================
RCS file: /cvs/Quotient/nevow/.cvsignore,v
retrieving revision 1.1
diff -u -r1.1 .cvsignore
--- .cvsignore	22 Oct 2003 01:01:54 -0000	1.1
+++ .cvsignore	3 Feb 2004 17:23:56 -0000
@@ -1,2 +1,3 @@
 *.pyc
+*.pyo
 .DS_Store
Index: appserver.py
===================================================================
RCS file: /cvs/Quotient/nevow/appserver.py,v
retrieving revision 1.24
diff -u -r1.24 appserver.py
--- appserver.py	23 Jan 2004 17:44:46 -0000	1.24
+++ appserver.py	3 Feb 2004 17:23:56 -0000
@@ -3,7 +3,7 @@
 import cgi
 from copy import copy
 from urllib import unquote
-from types import StringTypes
+from types import StringType
 
 from twisted.web import server
 from twisted.web import resource
@@ -56,7 +56,7 @@
         from nevow.renderer import flatten
         from nevow import failure
         result = failure.formatFailure(reason)
-        request.write(''.join(flatten(iwoven.ISerializable(result).serialize(context.WovenContext(), None))))
+        request.write(''.join(flatten(serialize(result, context.WovenContext()))))
         request.write("</body></html>")
 
 
@@ -133,8 +133,10 @@
         self.deferred.callback("")
 
     def _cbFinishRender(self, html):
-        if isinstance(html, StringTypes):
+        if isinstance(html, StringType):
             self.write(html)
+        else:
+            print "html is not a string: ", str(html)
         server.Request.finish(self)
         return html
 
@@ -166,6 +168,8 @@
         request.prepath.append(request.postpath.pop(0))
         res = self.original.getChildWithDefault(name, request)
         request.postpath.insert(0, request.prepath.pop())
+        if isinstance(res, defer.Deferred):
+            return res.addCallback(lambda res: (res, segments[1:]))
         return res, segments[1:]
 
     def _handle_NOT_DONE_YET(self, data, request):
Index: context.py
===================================================================
RCS file: /cvs/Quotient/nevow/context.py,v
retrieving revision 1.16
diff -u -r1.16 context.py
--- context.py	30 Jan 2004 18:52:47 -0000	1.16
+++ context.py	3 Feb 2004 17:23:56 -0000
@@ -37,31 +37,11 @@
     def __str__(self):
         return "More than one %r with the name %r was found." % tuple(self.args[:2])
 
-
-def _stripContexts(obj):
-    if isinstance(obj, (list, tuple)):
-        obj = [_stripContexts(x) for x in obj]
-    else:
-        if isinstance(obj, WovenContext):
-            obj = obj.tag
-        if isinstance(obj, Tag):
-            return stripContexts(obj)
-    return obj
-
-def stripContexts(tag):
-    for i in range(len(tag.children)):
-        tag.children[i] = _stripContexts(tag.children[i])
-    for key in tag.attributes:
-        tag.attributes[key] = _stripContexts(tag.attributes[key])
-    return tag
-
-
 class WovenContext(object):
-    cloned = False
     key = None
     _remembrances = {}
     tag = None
-    def __init__(self, parent=None, tag=None, precompile=False, remembrances=None, key=None):
+    def __init__(self, parent=None, tag=None, precompile=False, remembrances=None, key=None, isAttrib=False):
         self.tag = tag
         self.parent = parent
         if key is not None and key is not Unset:
@@ -79,6 +59,7 @@
         else:
             self._remembrances = remembrances
         self.precompile = precompile
+        self.isAttrib = isAttrib
 
     def __repr__(self):
         rstr = ''
@@ -116,7 +97,7 @@
         """
 #        data=None, renderer=None, observer=None, remembrances=None
 
-        new = WovenContext(self, tag, self.precompile, key=tag.key)
+        new = WovenContext(self, tag, self.precompile, key=tag.key, isAttrib=self.isAttrib)
         if tag.data is not Unset:
             new.remember(tag.data, IData)
         if tag.remember is not Unset:
@@ -165,7 +146,7 @@
         while top.parent is not None:
             if top.parent.tag is None:
                 ## If top.parent.tag is None, that means this context (top)
-                ## has been cloned. We want to insert the current context
+                ## is just a marker. We want to insert the current context
                 ## (context) as the parent of this context (top) to chain properly.
                 break
             top = top.parent
@@ -181,9 +162,7 @@
         otherwise, return clones of default, forever.
 
         """
-        tag = self.tag.clone()
-        stripContexts(tag)
-        patterner = self._locatePatterns(tag, pattern, default)
+        patterner = self._locatePatterns(self.tag, pattern, default)
         return PatternTag(patterner)
 
     def slotted(self, slot):
@@ -198,24 +177,27 @@
         """
         return self._locateOne(key, self._locateKeys, 'key')
 
-    def _generatePatterns(self, pattern):
-        warnings.warn("use patterns instead", stacklevel=2)
-        return self.patterns(pattern)
-
     def _locatePatterns(self, tag, pattern, default):
         keeplooking = True
+        gen = specialMatches(tag, 'pattern', pattern)
+        produced = []
         while keeplooking:
             keeplooking = False
-            for x in specialMatches(tag, 'pattern', pattern):
+            for x in gen or produced:
+                if gen:
+                    produced.append(x)
                 keeplooking = True
                 cloned = x.clone()
                 cloned.pattern = Unset
                 yield cloned
+            gen=None
         if default is None:
             raise RuntimeError, "Pattern %s was not found." % pattern
-        while True:
-            yield default.clone()
-
+        if hasattr(default, 'clone'):
+            while True:  yield default.clone()
+        else:
+            while True:  yield default
+                
     def _locateOne(self, name, locator, descr):
         found = False
         for node in locator(name):
@@ -235,19 +217,25 @@
             if keySpecial.key.endswith(key):
                 yield keySpecial        
 
-    def clone(self, includeTag=True):
-        if self.parent is None:
-            parent = None
+    def clone(self, deep=True, cloneTags=True):
+        ## don't clone the tags of parent contexts. I *hope* code won't be
+        ## trying to modify parent tags so this should not be necessary.
+        ## However, *do* clone the parent contexts themselves.
+        ## This is necessary for chain(), as it mutates top-context.parent.
+        
+        if self.parent:
+            parent=self.parent.clone(cloneTags=False)
         else:
-            parent=self.parent.clone(includeTag=False)
-        if includeTag:
-            tag = self.tag.clone()
+            parent=None
+        if cloneTags:
+            tag = self.tag.clone(deep=deep)
         else:
-            tag = None
+            tag = self.tag
         return WovenContext(
             parent = parent,
             tag = tag,
-            remembrances=self._remembrances.copy()
+            remembrances=self._remembrances.copy(),
+            isAttrib=self.isAttrib
         )
 
 
Index: renderer.py
===================================================================
RCS file: /cvs/Quotient/nevow/renderer.py,v
retrieving revision 1.42
diff -u -r1.42 renderer.py
--- renderer.py	30 Jan 2004 18:52:47 -0000	1.42
+++ renderer.py	3 Feb 2004 17:23:56 -0000
@@ -34,8 +34,6 @@
 
 cachedAdapters = {}
 def getSerializer(obj):
-    registry = components.getRegistry(None)
-    
     if hasattr(obj, '__class__'):
         klas = obj.__class__
     else:
@@ -46,6 +44,7 @@
         return adapter
     
     # print "Adding cache entry for ",klas
+    registry = components.getRegistry(None)
     fromInterfaces = components.classToInterfaces(klas)
     for fromInterface in fromInterfaces:
         # print " trying: ", fromInterface
@@ -77,7 +76,7 @@
                     results.append(xml(''.join(straccum)))
                 results.append(item)
                 del straccum[:]
-    
+
 def flatten(gen):
     """
     I am a permissive flattener for precompilation.
@@ -178,7 +177,7 @@
 _documents = {}
 
 
-class ChildPrefixMixin:
+class ChildPrefixMixin(object):
     def getChild(self, name, request):
         w = getattr(self, 'child_%s' %name, None)
         if w:
@@ -250,11 +249,12 @@
     def precompile(self):
         klsnm = qual(self.__class__)
         if klsnm in _documents:
-            return [hasattr(x, 'clone') and x.clone() or x for x in _documents[klsnm]]
+            return _documents[klsnm]
         context = WovenContext(precompile=True)
         context.remember(self, resource.IResource)
         context.remember(self, IRendererFactory)
         _documents[klsnm] = rv = flatten(serialize(self.document, context))
+        # print "Precompiled:",rv
         return rv
 
     def getParentContext(self, request):
@@ -266,6 +266,7 @@
     beforeRender = None
     afterRender = None
     def render(self, request):
+        request.setHeader('content-type', "text/html; charset=utf-8")
         if self.beforeRender is not None:
             self.beforeRender(request)
         log.msg(http_render=None, uri=request.uri)
@@ -410,13 +411,15 @@
             dom = flatsax.parse(self.template)
         else:
             dom = flatsax.parse(open(os.path.join(self.templateDirectory, self.templateFile)))
-        doc = flatten(ISerializable(dom).serialize(context, None))
+        doc = flatten(serialize(dom, context))
         # Precompiled. Record the time so we know when to reload the template.
         self.precompileTime = time.time()
         return doc
 
     def render(self, request):
-        request.setHeader('content-type', 'text/xml')
+# cannot use text/xml because it breaks MSIE
+# TODO: use text/xml when browser sends "Accept" header indicating support.
+        # request.setHeader('content-type', 'text/xml')
         return HTMLRenderer.render(self, request)
 
     ## TODO use a different exception handler because browsers don't like it when you say the
Index: simple.py
===================================================================
RCS file: /cvs/Quotient/nevow/simple.py,v
retrieving revision 1.4
diff -u -r1.4 simple.py
--- simple.py	16 Jan 2004 21:36:27 -0000	1.4
+++ simple.py	3 Feb 2004 17:23:56 -0000
@@ -6,9 +6,8 @@
 
 from twisted.application import service, internet
 from twisted.web import server
-from nevow import renderer
+from nevow import renderer, appserver, stan
 from nevow.tags import *
-from nevow import stan
 
 import random
 
@@ -22,7 +21,8 @@
 
 
 def selectOptioner(context, data):
-    tag = context.tag.clone(deep=False)
+    tag = context.tag
+    tag.clear()
     tag(name="flavor")
     for value, string in data:
         tag[
@@ -84,4 +84,4 @@
 ]
 
 application = service.Application("simple")
-internet.TCPServer(8080, server.Site(Simple())).setServiceParent(application)
+internet.TCPServer(8080, appserver.NevowSite(Simple())).setServiceParent(application)
Index: stan.py
===================================================================
RCS file: /cvs/Quotient/nevow/stan.py,v
retrieving revision 1.18
diff -u -r1.18 stan.py
--- stan.py	30 Jan 2004 18:52:47 -0000	1.18
+++ stan.py	3 Feb 2004 17:23:56 -0000
@@ -5,7 +5,6 @@
 
 from __future__ import generators
 
-
 class Proto(str):
     """Proto is a string subclass. Instances of Proto, which are constructed
     with a string, will construct Tag instances in response to __call__
@@ -91,7 +90,7 @@
             if kw.has_key(name):
                 setattr(self, name, kw[name])
                 del kw[name]
-        for k, v in kw.items():
+        for k, v in kw.iteritems():
             if k[0] == '_':
                 k = k[1:]
             self.attributes[k] = v
@@ -139,13 +138,13 @@
         
     def clone(self, deep=True):
         """Return a clone of this tag. If deep is True, clone all of this
-        tag's children. Otherwise, the children list of the clone will
-        be empty.
+        tag's children. Otherwise, just shallow copy the children list
+        without copying the children themselves.
         """
         if deep:
             newchildren = [self._clone(x, True) for x in self.children]
         else:
-            newchildren = []
+            newchildren = self.children[:]
         newattrs = self.attributes.copy()
         for key in newattrs:
             newattrs[key]=self._clone(newattrs[key], True)
@@ -207,7 +206,8 @@
 
 def specialMatches(tag, special, pattern):
     """Generate special attribute matches starting with the given tag;
-    if a match is found, do not look any deeper below that match.
+    if a tag has special, do not look any deeper below that tag, whether
+    it matches pattern or not.
     """
     for childOrContext in getattr(tag, 'children', []):
         child = getattr(childOrContext, 'tag', childOrContext)
@@ -230,7 +230,10 @@
         ## No divider after the last thing.
         content[-1] = content[-1][0]
     footers = specialMatches(context.tag, 'pattern', 'footer')
-    return context.tag.clone(deep=False)[ headers, content, footers ]
+    
+    # clone is necessary here because headers and footers are generators that
+    # haven't run yet, which depend on context.tag's contents.
+    return context.tag.clone(deep=False).clear()[ headers, content, footers ]
 
 
 def mapping(context, data):
Index: serial/flatstan.py
===================================================================
RCS file: /cvs/Quotient/nevow/serial/flatstan.py,v
retrieving revision 1.23
diff -u -r1.23 flatstan.py
--- serial/flatstan.py	30 Jan 2004 18:52:48 -0000	1.23
+++ serial/flatstan.py	3 Feb 2004 17:23:56 -0000
@@ -14,7 +14,7 @@
 from nevow.iwoven import IRendererFactory, IData
 from nevow.renderer import flatten, serialize
 from nevow.accessors import convertToData
-
+from nevow.context import WovenContext
 allowSingleton = ('img', 'br', 'hr', 'base', 'meta', 'link', 'param', 'area',
                   'input', 'col', 'basefont', 'isindex', 'frame')
 
@@ -22,76 +22,87 @@
     yield xml('<%s />' % original)
 
 
-def TagSerializer(original, context):
+def TagSerializer(original, context, contextIsMine=False):
+    """
+    Original is the tag.
+    Context is either:
+      - the context of someone up the chain (if contextIsMine is False)
+      - this tag's context (if contextIsMine is True)
+    """
+
+#    print "TagSerializer:",original, "Context:",context
     visible = bool(original.tagName)
-    singleton =  not original.renderer and not original.children and not original.data and original.tagName in allowSingleton
-    special = context.precompile and original._specials
-    if original.renderer:
-        ## If we have a renderer function we want to render what it returns, not our tag
-        visible = False
-    if special:
+
+    ## TODO: Do we really need to bypass precompiling for *all* specials?
+    ## Perhaps just renderer?
+    if context.precompile and original._specials:
+        ## The tags inside this one get a "fresh" parent chain, because
+        ## when the context yielded here is serialized, the parent
+        ## chain gets reconnected to the actual parents at that
+        ## point, since the renderer function here could change
+        ## the actual parentage hierarchy.
+        nestedcontext = WovenContext(precompile=context.precompile, isAttrib=context.isAttrib)
+        
         context = context.with(original)
-        context.tag.children = flatten(serialize(context.tag.children, context))
+        context.tag.children = flatten(serialize(context.tag.children, nestedcontext))
+
         yield context
-    else:
-        if visible:
-            yield xml('<%s' % original.tagName)
-            if original.attributes:
-                for (k, v) in original.attributes.items():
-                    if v is None:
-                        warnings.warn("An attribute value for key %r on tag %r was None; ignoring attribute" % (original.tagName, v))
-                        continue
-                    yield xml(' %s="' % k)
-                    if context.precompile:
-                        yield v
-                    else:
-                        flat = flatten(serialize(v, context))
-                        if flat:
-                            val = flat[0]
-                            if isinstance(val, StringTypes):
-                                val = val.replace('"', '&quot;')
-                            yield xml(val)
-                    yield xml('"')
-        if singleton:
-            if visible:
-                yield xml(' />')
-        else:
-            if visible:
-                yield xml('>')
-            # TODO: Make this less buggy.
-            try:
-                if context.locate(IData) != original.data:
-                    context = context.with(original)
-            except KeyError:
-                context = context.with(original)
-            except TypeError:
-                context = context.with(original)
-            if original.renderer:
-                toBeRenderedBy = original.renderer
-                original.renderer = None
-                yield serialize(toBeRenderedBy, context)
-                original.wasRenderedBy = toBeRenderedBy
-            elif original.children:
-                for child in original.children:
-                    yield serialize(child, context)
-            if visible:
-                yield xml('</%s>' % original.tagName)
+        return
 
+    if not contextIsMine:
+        context = context.with(original)
+    if original.renderer:
+        ## If we have a renderer function we want to render what it returns,
+        ## not our tag
+        toBeRenderedBy = original.renderer
+        original.renderer = None
+        yield serialize(toBeRenderedBy,context)
+        original.wasRenderedBy = toBeRenderedBy
+        return
+
+    if not visible:
+        for child in original.children:
+            yield serialize(child, context)
+        return
+    
+    yield xml('<%s' % original.tagName)
+    if original.attributes:
+        attribContext = WovenContext(parent=context, precompile=context.precompile, isAttrib=True)
+        for (k, v) in original.attributes.iteritems():
+            if v is None:
+                warnings.warn("An attribute value for key %r on tag %r was None; ignoring attribute" % (original.tagName, v))
+                continue
+            yield xml(' %s="' % k)
+            yield serialize(v, attribContext)
+            yield xml('"')
+    if not original.children:
+        if original.tagName in allowSingleton:
+            yield xml(' />')
+        else:
+            yield xml('></%s>' % original.tagName)
+    else:
+        yield xml('>')
+        for child in original.children:
+            yield serialize(child, context)        
+        yield xml('</%s>' % original.tagName)
 
 def StringSerializer(original, context):
-    from twisted.xish.domish import escapeToXml
     ## quote it
-    yield escapeToXml(original)
+    if context.isAttrib:
+        return original.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
+    else:
+        return original.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace("\"", "&quot;")
+
+def UTF8Serializer(original, context):
+    return StringSerializer(original.encode('utf-8'), context)
 
 
 def NoneWarningSerializer(original, context):
-    yield xml('<span style="position: relative; font-size: 100; font-weight: bold; color: red; border: thick solid red;">None</span>')
+    return xml('<span style="position: relative; font-size: 100; font-weight: bold; color: red; border: thick solid red;">None</span>')
 
 
 def StringCastSerializer(original, context):
-    from twisted.xish.domish import escapeToXml
-    ## quote it
-    return escapeToXml(str(original))
+    return StringSerializer(str(original), context)
 
 
 def ListSerializer(original, context):
@@ -117,10 +128,9 @@
         return PASS_SELF
     return False
 
-
 def FunctionSerializer(original, context, nocontextfun=FunctionSerializer_nocontext):
     if context.precompile:
-        yield original
+        return original
     else:
         data = convertToData(context, context.locate(IData))
         try:
@@ -136,11 +146,11 @@
         except StopIteration:
             log.err()
             raise RuntimeError, "User function %r raised StopIteration." % original
-        yield serialize(result, context)
+        return serialize(result, context)
 
 
 def DeferredSerializer(original, context):
-    yield original
+    return original
 
 
 def MethodSerializer(original, context):
@@ -149,7 +159,7 @@
         code = getattr(func, 'func_code', None)
         return code is None or code.co_argcount == 2
     return FunctionSerializer(original, context, nocontext)
-  
+
 
 def CallableInstanceSerializer(original, context):
     def nocontext(original):
@@ -158,7 +168,6 @@
         return code is None or code.co_argcount == 2
     return FunctionSerializer(original, context, nocontext)
 
-
 def DirectiveSerializer(original, context):
     rendererFactory = context.locate(IRendererFactory)
     renderer = rendererFactory.renderer(context, original)
@@ -166,22 +175,26 @@
 
 
 def ContextSerializer(original, context):
-    originalContext = original.clone()
+    originalContext = original.clone(deep=False)
     originalContext.precompile = context and context.precompile or False
     originalContext.chain(context)
     try:
-        yield flatten(serialize(originalContext.tag, originalContext))
+        return flatten(TagSerializer(originalContext.tag, originalContext, contextIsMine=True))
     except:
-            from twisted.python import failure
-            fail = failure.Failure()
-            from nevow import failure as nevfail
-            yield serialize([
-                xml("""<div style="border: 1px dashed red; clear: both" onclick="this.childNodes[1].style.display = this.childNodes[1].style.display == 'none' ? 'block': 'none'">"""),
-                str(fail.value),
-                xml('<div style="display: none">'),
-                nevfail.formatFailure(fail),
-                xml('</div></div>')
-            ], context)
+        from twisted.web import util
+        from twisted.python import failure
+        from twisted.internet import reactor, defer
+        d = defer.Deferred()
+        fail = failure.Failure()
+        reactor.callLater(0, lambda: d.callback(xml(util.formatFailure(fail))))
+        desc = str(fail.value)
+        return serialize([
+            xml("""<div style="border: 1px dashed red; color: red; clear: both" onclick="this.childNodes[1].style.display = this.childNodes[1].style.display == 'none' ? 'block': 'none'">"""),
+            desc,
+            xml('<div style="display: none">'),
+            d,
+            xml('</div></div>')
+        ], context)
 
 
 def CommentSerializer(original, context):
Index: test/test_flatstan.py
===================================================================
RCS file: /cvs/Quotient/nevow/test/test_flatstan.py,v
retrieving revision 1.20
diff -u -r1.20 test_flatstan.py
--- test/test_flatstan.py	30 Jan 2004 18:52:48 -0000	1.20
+++ test/test_flatstan.py	3 Feb 2004 17:23:56 -0000
@@ -248,6 +248,7 @@
                 render_test
             ]
         ]
+        document=self.render(document, precompile=True)
         self.assertEquals(self.render(document), '<html><body><ul><li><a href="test/one">link</a></li><li><a href="test/two">link</a></li></ul><ul><li>fooone</li><li>footwo</li></ul></body></html>')
 
     def test_singletons(self):
@@ -281,6 +282,5 @@
         val = self.render(precompiled)
         self.assertIn('1', val)
         val2 = self.render(precompiled)
-        self.assertIn('2', val)
-    test_it.todo = "fix multiple-renders with directives bug"
+        self.assertIn('2', val2)
 

--Apple-Mail-4-885836739--



From twisted-web@twistedmatrix.com  Tue Feb  3 21:59:04 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Tue, 3 Feb 2004 16:59:04 -0500
Subject: [Twisted-web] Guard and flatsax patches
Message-ID: <2E9557C4-5694-11D8-A697-000A95A50FB2@fuhm.net>

--Apple-Mail-6-901580296
Content-Transfer-Encoding: 7bit
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed

Guard patch:
- Reinstates the request.setupSession attribute from the old guard, 
which I use in order to force a new session if the user changes their 
authentication data.

Flatsax patch:
- Require pyxml >= 0.8
- Handle entities correctly.

James


--Apple-Mail-6-901580296
Content-Transfer-Encoding: 7bit
Content-Type: application/octet-stream;
	x-unix-mode=0644;
	name="flatsax.patch"
Content-Disposition: attachment;
	filename=flatsax.patch

Index: serial/flatsax.py
===================================================================
RCS file: /cvs/Quotient/nevow/serial/flatsax.py,v
retrieving revision 1.2
diff -u -r1.2 flatsax.py
--- serial/flatsax.py	21 Jan 2004 05:12:12 -0000	1.2
+++ serial/flatsax.py	3 Feb 2004 21:37:20 -0000
@@ -1,14 +1,11 @@
-
-
-from xml.sax import ContentHandler
-from xml.sax import make_parser
-#from xml.sax.handler import feature_namespaces
-
+from xml.sax import make_parser, handler
+import xml as pyxml
 
 from nevow.stan import xml, Tag, directive
 
+bad_version = pyxml.version_info[0] == 0 and pyxml.version_info[1] < 8
 
-class ToStan(ContentHandler):
+class ToStan(handler.ContentHandler, handler.EntityResolver):
     directiveMapping = {
         'render': 'renderer',
         'data': 'data',
@@ -17,9 +14,17 @@
     attributeList = [
         'pattern', 'slot', 'macro', 'fill-slot', 'key',
     ]
-
+    
+    def resolveEntity(self, publicId, systemId):
+        ## This doesn't seem to get called, which is good.
+        raise Exception("resolveEntity should not be called. We don't use external DTDs.")
+
+    def skippedEntity(self, name):
+        self.current.append(xml("&%s;"%name))
+        
     def startDocument(self):
-        self.document = [xml('<?xml version="1.0"?>\n')]
+        self.document = []
+#        self.document = [xml('<?xml version="1.0"?>\n')]
         self.current = self.document
         self.stack = []
 
@@ -51,7 +56,7 @@
         self.current = el.children
 
     def characters(self, ch):
-        self.current.append(xml(ch))
+        self.current.append(ch)
 
     def endElement(self, name):
         me = self.stack.pop()
@@ -62,12 +67,23 @@
 
 
 def parse(fl):
+    ## Earlier PyXMLs don't handle non-standard entities (e.g. &copy;) 
+    ## correctly. They will either give an error or simply ignore the
+    ## entity producing bad output.
+    
+    if bad_version:
+        raise Exception("Please use PyXML later than 0.8. Earlier ones are too buggy.")
+    
     parser = make_parser()
-#    parser.setFeature(feature_namespaces, 0)
+    parser.setFeature(handler.feature_validation, 0)
+    parser.setFeature(handler.feature_namespaces, 0)
+    parser.setFeature(handler.feature_external_ges, 0)
+    parser.setFeature(handler.feature_external_pes, 0)
+    
     s = ToStan()
     parser.setContentHandler(s)
-
-#    setEntityResolver()
+    parser.setEntityResolver(s)
+    
     parser.parse(fl)
 
     return s.document

--Apple-Mail-6-901580296
Content-Transfer-Encoding: 7bit
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed



--Apple-Mail-6-901580296
Content-Transfer-Encoding: 7bit
Content-Type: application/octet-stream;
	x-unix-mode=0644;
	name="guard.patch"
Content-Disposition: attachment;
	filename=guard.patch

Index: guard.py
===================================================================
RCS file: /cvs/Quotient/nevow/guard.py,v
retrieving revision 1.13
diff -u -r1.13 guard.py
--- guard.py	27 Jan 2004 16:41:22 -0000	1.13
+++ guard.py	3 Feb 2004 21:50:32 -0000
@@ -135,8 +135,7 @@
         self.checkExpired()
 
 
-def urlToChild(request, *ar, **kw):
-    orig = request.prePathURL()
+def urlToChild(request, orig, *ar, **kw):
     c = '/'.join(ar)
     if orig[-1] == '/':
         # this SHOULD only happen in the case where the URL is just the hostname
@@ -187,10 +186,13 @@
     def locateChild(self, request, segments):
         path = segments[0]
         cookie = request.getCookie(self.cookieKey)
+        prepath = request.prePathURL()
+        request.setupSession = lambda : self.createSession(request, prepath, segments)
+        
         if path.startswith(SESSION_KEY):
             key = path[len(SESSION_KEY):]
             if key not in self.sessions:
-                return Redirect(urlToChild(request, *segments[1:], **{'__start_session__':1})), ()
+                return Redirect(urlToChild(request, prepath, *segments[1:], **{'__start_session__':1})), ()
             self.sessions[key].setLifetime(self.sessionLifetime)
             if cookie == key:
                 # /sessionized-url/${SESSION_KEY}aef9c34aecc3d9148/foo
@@ -198,7 +200,7 @@
                 #                  we are this getChild
                 # with a matching cookie
                 self.sessions[key].sessionJustStarted = True
-                return Redirect(urlToChild(request, *segments[1:], **{'__session_just_started__':1})), ()
+                return Redirect(urlToChild(request, prepath, *segments[1:], **{'__session_just_started__':1})), ()
             else:
                 # We attempted to negotiate the session but failed (the user
                 # probably has cookies disabled): now we're going to return the
@@ -239,18 +241,24 @@
                         afterLogin).addErrback(errorLogin)
 
             # no, really, without a session
-            newCookie = _sessionCookie()
-            request.addCookie(self.cookieKey, newCookie, path="/")
-            sz = self.sessions[newCookie] = GuardSession(self, newCookie)
-            sz.args = request.args
-            sz.content = request.content
-            sz.method = request.method
-            sz.received_headers = request.received_headers
-            sz.checkExpired()
             ## Redirect to the URL with the session key in it, plus the segments of the url
-            rd = Redirect(urlToChild(request, SESSION_KEY+newCookie, *segments))
+            rd = self.createSession(request, prepath, segments)
             return rd, ()
-
+    
+    def createSession(self, request, prepath, segments):
+        """Create a new session for this request, and redirect back to the path
+        given by segments."""
+        
+        newCookie = _sessionCookie()
+        request.addCookie(self.cookieKey, newCookie, path="/")
+        sz = self.sessions[newCookie] = GuardSession(self, newCookie)
+        sz.args = request.args
+        sz.content = request.content
+        sz.method = request.method
+        sz.received_headers = request.received_headers
+        sz.checkExpired()
+        return Redirect(urlToChild(request, prepath, SESSION_KEY+newCookie, *segments))
+        
     def checkLogin(self, request, segments):
         path = segments[0]
         s = request.getSession()

--Apple-Mail-6-901580296--



From twisted-web@twistedmatrix.com  Tue Feb  3 23:58:42 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Tue, 3 Feb 2004 18:58:42 -0500
Subject: [Twisted-web] Guard and flatsax patches
In-Reply-To: <2E9557C4-5694-11D8-A697-000A95A50FB2@fuhm.net>
References: <2E9557C4-5694-11D8-A697-000A95A50FB2@fuhm.net>
Message-ID: <E501CC16-56A4-11D8-A697-000A95A50FB2@fuhm.net>

--Apple-Mail-8-908758300
Content-Transfer-Encoding: 7bit
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed

Radix has brought to my attention the seriously screwed up nature of 
the python xml package. Thus, an updated version of this patch that has 
better version detection.

Flatsax patch:
- Require pyxml >= 0.8 *OR* python >= 2.3
- Handle entities correctly.

James


--Apple-Mail-8-908758300
Content-Transfer-Encoding: 7bit
Content-Type: application/octet-stream;
	x-unix-mode=0644;
	name="flatsax.patch"
Content-Disposition: attachment;
	filename=flatsax.patch

Index: serial/flatsax.py
===================================================================
RCS file: /cvs/Quotient/nevow/serial/flatsax.py,v
retrieving revision 1.2
diff -u -r1.2 flatsax.py
--- serial/flatsax.py	21 Jan 2004 05:12:12 -0000	1.2
+++ serial/flatsax.py	3 Feb 2004 23:54:10 -0000
@@ -1,14 +1,21 @@
-
-
-from xml.sax import ContentHandler
-from xml.sax import make_parser
-#from xml.sax.handler import feature_namespaces
-
+from xml.sax import make_parser, handler
+import xml as pyxml
 
 from nevow.stan import xml, Tag, directive
 
+## Require PyXML 0.8.2 or later, or, if PyXML isn't installed
+## python2.3 or later, because that includes approximately the
+## same code (but doesn't share a version number *!@#$@!@#)
+
+try:
+    ## pyxml package has a version_info attribute
+    bad_version = pyxml.version_info < (0,8,2)
+except:
+    ## we're using core python xml library
+    import sys
+    bad_version = sys.version_info < (2,3)
 
-class ToStan(ContentHandler):
+class ToStan(handler.ContentHandler, handler.EntityResolver):
     directiveMapping = {
         'render': 'renderer',
         'data': 'data',
@@ -17,9 +24,17 @@
     attributeList = [
         'pattern', 'slot', 'macro', 'fill-slot', 'key',
     ]
-
+    
+    def resolveEntity(self, publicId, systemId):
+        ## This doesn't seem to get called, which is good.
+        raise Exception("resolveEntity should not be called. We don't use external DTDs.")
+
+    def skippedEntity(self, name):
+        self.current.append(xml("&%s;"%name))
+        
     def startDocument(self):
-        self.document = [xml('<?xml version="1.0"?>\n')]
+        self.document = []
+#        self.document = [xml('<?xml version="1.0"?>\n')]
         self.current = self.document
         self.stack = []
 
@@ -51,7 +66,7 @@
         self.current = el.children
 
     def characters(self, ch):
-        self.current.append(xml(ch))
+        self.current.append(ch)
 
     def endElement(self, name):
         me = self.stack.pop()
@@ -62,12 +77,23 @@
 
 
 def parse(fl):
+    ## Earlier PyXMLs don't handle non-standard entities (e.g. &copy;) 
+    ## correctly. They will either give an error or simply ignore the
+    ## entity producing bad output.
+    
+    if bad_version:
+        raise Exception("Please use PyXML later than 0.8.2 or python later than 2.3. Earlier ones are too buggy.")
+    
     parser = make_parser()
-#    parser.setFeature(feature_namespaces, 0)
+    parser.setFeature(handler.feature_validation, 0)
+    parser.setFeature(handler.feature_namespaces, 0)
+    parser.setFeature(handler.feature_external_ges, 0)
+    parser.setFeature(handler.feature_external_pes, 0)
+    
     s = ToStan()
     parser.setContentHandler(s)
-
-#    setEntityResolver()
+    parser.setEntityResolver(s)
+    
     parser.parse(fl)
 
     return s.document

--Apple-Mail-8-908758300
Content-Transfer-Encoding: 7bit
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed



--Apple-Mail-8-908758300--



From twisted-web@twistedmatrix.com  Wed Feb  4 13:09:42 2004
From: twisted-web@twistedmatrix.com (Uwe Schmitt)
Date: Wed, 4 Feb 2004 14:09:42 +0100
Subject: [Twisted-web] WG: Woven: Problem with Controler
Message-ID: <EEEGLAIFCOKLPKPJMAFOMENJDOAA.schmitt@num.uni-sb.de>


 Hi,
 
 trying to implement a website I want to implement a controler,
 but setting the model inside the controler does not work.
 The (reduced) code is as follows:
 
 
 -------- START -------------------------------------------------
 
 from twisted.web.woven import page, controller
 
 class MyController(controller.Controller):
 	def handle(self,request):
 
 		self.model.setSubmodel(request,'name', "uwe")
 		self.model.notify()
 
 class MyPage(page.Page):
 
 	appRoot = True
 	template="""
 		<html controller="machine" model="/state"  >
 		<body>
 		<p model="name" view="Text" />
 		</body>
 		</html>"""
 
 	def wcfactory_machine(self, request, node, model):
 		return MyController(model)
 
 	def wmfactory_state(self, req): 
 		return self
 
 resource = MyPage()
 
 -------- END  -------------------------------------------------
 
 When I request the resource, woven says:
 
    "Node had 'model=name' attribute, but the submodel was not found"
 
 Any hints ?
 
 Greetings, Uwe


From twisted-web@twistedmatrix.com  Wed Feb  4 17:51:46 2004
From: twisted-web@twistedmatrix.com (Alex Levy)
Date: Wed, 04 Feb 2004 12:51:46 -0500
Subject: [Twisted-web] WG: Woven: Problem with Controler
In-Reply-To: <EEEGLAIFCOKLPKPJMAFOMENJDOAA.schmitt@num.uni-sb.de>
References: <EEEGLAIFCOKLPKPJMAFOMENJDOAA.schmitt@num.uni-sb.de>
Message-ID: <1075917106.932.252.camel@hyla>

--=-x4Y5Pxv05ZnOuO/orYPC
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

This is just my first reaction, but:

Have you tried setting the controller and model on something other than
the root node ('<html>') in your template? My experience with Woven was
that the "all-encompassing" element in an HTML template didn't get
processed the way everything else did.

I don't know if this has changed in nevow.

On Wed, 2004-02-04 at 08:09, Uwe Schmitt wrote:
>  	template=3D"""
>  		<html controller=3D"machine" model=3D"/state"  >
>  		<body>
>  		<p model=3D"name" view=3D"Text" />
>  		</body>
>  		</html>"""

--=20
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_


--=-x4Y5Pxv05ZnOuO/orYPC
Content-Type: application/pgp-signature; name=signature.asc
Content-Description: This is a digitally signed message part

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)

iD8DBQBAITEyVM70CYlRlK4RAtToAJ4wNzUJns7FjzWWun7B9T20k0ETUACfSXjl
RAgd3wZcFnBY0nVXJdrtS5I=
=Q4oo
-----END PGP SIGNATURE-----

--=-x4Y5Pxv05ZnOuO/orYPC--



From twisted-web@twistedmatrix.com  Wed Feb  4 19:25:34 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Wed, 4 Feb 2004 14:25:34 -0500
Subject: [Twisted-web] WG: Woven: Problem with Controler
In-Reply-To: <1075917106.932.252.camel@hyla>
References: <EEEGLAIFCOKLPKPJMAFOMENJDOAA.schmitt@num.uni-sb.de> <1075917106.932.252.camel@hyla>
Message-ID: <E754EE86-5747-11D8-A9A8-000A95A50FB2@fuhm.net>

On Feb 4, 2004, at 12:51 PM, Alex Levy wrote:
> This is just my first reaction, but:
>
> Have you tried setting the controller and model on something other than
> the root node ('<html>') in your template? My experience with Woven was
> that the "all-encompassing" element in an HTML template didn't get
> processed the way everything else did.
>
> I don't know if this has changed in nevow.

Nevow doesn't do weird stuff like that. :)

My first inclination would be to suspect that your controller's 
"self.model" isn't the same model as you think it is. I'm not sure if 
Controller is supposed to set self.model to the containing model?

If that's actually supposed to work, then the problem probably has 
something to do with too much copying, caching, or adapting of the data 
(as woven tends to do). But, if that's the case, I don't know what to 
suggest to solve it, other than "don't use setSubmodel". Or maybe 
"don't use woven" :)


James



From twisted-web@twistedmatrix.com  Fri Feb  6 22:58:20 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Fri, 6 Feb 2004 17:58:20 -0500
Subject: [Twisted-web] Revamped ContextSerializer/TagSerializer and other contextish stuff
In-Reply-To: <86B11DBC-566F-11D8-A697-000A95A50FB2@fuhm.net>
References: <86B11DBC-566F-11D8-A697-000A95A50FB2@fuhm.net>
Message-ID: <F5B14A59-58F7-11D8-A9A8-000A95A50FB2@fuhm.net>

--Apple-Mail-4--983146798
Content-Transfer-Encoding: 7bit
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed

Fixes directive() used as a render function, which the previous broke. 
Apparently there are no tests for that.

Also adjusts components.wsv which I forgot in the last patch.

James


--Apple-Mail-4--983146798
Content-Transfer-Encoding: 7bit
Content-Type: application/octet-stream;
	x-unix-mode=0644;
	name="nevow3-fix.patch"
Content-Disposition: attachment;
	filename=nevow3-fix.patch

Index: accessors.py
===================================================================
RCS file: /cvs/Quotient/nevow/accessors.py,v
retrieving revision 1.4
diff -u -r1.4 accessors.py
--- accessors.py	13 Dec 2003 00:40:25 -0000	1.4
+++ accessors.py	6 Feb 2004 22:52:06 -0000
@@ -31,7 +31,7 @@
         container = IContainer(data, None, persist=False)
         if container is None:
             raise NoAccessor, "%s does not implement IContainer, and there is no registered adapter." % data
-        child = container.child(context, self.original)
+        child = container.child(context, self.original.name)
         return convertToData(context, child)
 
     def child(self, context, name):
Index: stan.py
===================================================================
RCS file: /cvs/Quotient/nevow/stan.py,v
retrieving revision 1.19
diff -u -r1.19 stan.py
--- stan.py	6 Feb 2004 21:21:51 -0000	1.19
+++ stan.py	6 Feb 2004 22:52:06 -0000
@@ -27,13 +27,15 @@
     __slots__ = []
 
 
-class directive(str):
+class directive(object):
     """Marker for a directive in a template
     """
-    __slots__ = []
-
+    __slots__ = ['name']
+    def __init__(self, name):
+        self.name = name
+        
     def __repr__(self):
-        return "directive('%s')" % self
+        return "directive('%s')" % self.name
 
 
 class Tag(object):
Index: components.wsv
===================================================================
RCS file: /cvs/Quotient/nevow/components.wsv,v
retrieving revision 1.25
diff -u -r1.25 components.wsv
--- components.wsv	13 Jan 2004 01:46:40 -0000	1.25
+++ components.wsv	6 Feb 2004 22:52:06 -0000
@@ -23,7 +23,7 @@
 nevow.serial.flatstan.TagSerializer                 nevow.stan.Tag                  nevow.iwoven.ISerializable
 nevow.serial.flatstan.CommentSerializer             nevow.stan.Comment              nevow.iwoven.ISerializable
 nevow.serial.flatstan.StringSerializer              types.StringType                nevow.iwoven.ISerializable
-nevow.serial.flatstan.StringSerializer              types.UnicodeType               nevow.iwoven.ISerializable
+nevow.serial.flatstan.UTF8Serializer                types.UnicodeType               nevow.iwoven.ISerializable
 nevow.serial.flatstan.NoneWarningSerializer         types.NoneType                  nevow.iwoven.ISerializable
 nevow.serial.flatstan.StringCastSerializer          types.FloatType                 nevow.iwoven.ISerializable
 nevow.serial.flatstan.StringCastSerializer          types.LongType                  nevow.iwoven.ISerializable
Index: serial/flatstan.py
===================================================================
RCS file: /cvs/Quotient/nevow/serial/flatstan.py,v
retrieving revision 1.24
diff -u -r1.24 flatstan.py
--- serial/flatstan.py	6 Feb 2004 21:21:51 -0000	1.24
+++ serial/flatstan.py	6 Feb 2004 22:52:06 -0000
@@ -169,8 +169,10 @@
     return FunctionSerializer(original, context, nocontext)
 
 def DirectiveSerializer(original, context):
+    if context.precompile:
+        return original
     rendererFactory = context.locate(IRendererFactory)
-    renderer = rendererFactory.renderer(context, original)
+    renderer = rendererFactory.renderer(context, original.name)
     return serialize(renderer, context)
 
 
return serialize(renderer, context)
 
 

--Apple-Mail-4--983146798--



From twisted-web@twistedmatrix.com  Mon Feb  9 20:42:56 2004
From: twisted-web@twistedmatrix.com (Paul Moore)
Date: Mon, 09 Feb 2004 20:42:56 +0000
Subject: [Twisted-web] Writing a web application - how to make twisted/nevow "look good"
Message-ID: <fzdkt25r.fsf@yahoo.co.uk>

I've been playing with twisted, and lately nevow, for a while now. My
idea is that I'd like to be able to develop a replacement for an
in-house database application, which is written in Oracle's HTML DB.

The application code side of things is easy - it's a pretty simple
application, with a few screens of tabular data (grab data from a
SQL table, and display it in a HTML table), and corresponding update
and "create new entry" forms. Plus delete buttons. I've not written
the code in all its glory yet, but it's not going to be taxing.

The problem is getting a good look and feel for the whole thing. My
design skills are pretty ropey at best, and worse still when I'm
coding HTML. But Oracle HTML DB comes with built-in flashy-looking
designs - little "task list" boxes with rounded corners, tabbed
webpages, etc. If I can't produce a nice look and feel, my Twisted
code is going to look clumsy and amateurish in comparison - even
though from a technical point of view, it may be more responsive, more
maintainable, etc etc. But HTML DB applications *look* good, even when
developed by someone like me, with the design skills of a prune.

I know all the nice look comes from clever use of images, tables, CSS
etc. I've read the page source for some of the HTML DB stuff, and it's
an unreadable mess (probably because it's generated). So stealing it
isn't really a possibility :-)

I was wondering - is there anywhere an example of an open source
Twisted/Nevow application which focuses strongly on look & feel, and
which can usefully be used as a source of sample code?

Alternatively, a nice idea might be a "widget library" in Nevow -
little classes which can be used as higher level building blocks in
stan. An example might be something like:

    document = ..., headed_list("The title")["line1", "line2"], ...

The "headed list" could render as a table - something like

    <div>
        <table>
	    <tr style="background-color: yellow"><td>The title</td></tr>
	    <tr><td>line1</td></tr>
	    <tr><td>line2</td></tr>
        </table>
    </div>

(I told you my design skills weren't much good :-)) The idea being
that you can build your pages at a higher level than raw HTML layout.

And at the other extreme, I guess it should be possible to define a
"page template", which defines a site's overall look and feel - tabbed
format, left hand navigation bar, whatever.

OK, I'm rambling now. I haven't the skill to build anything like this,
but I'd *love* to be able to use such a thing.

Any suggestions would be gratefully accepted!

Paul.
-- 
This signature intentionally left blank



From twisted-web@twistedmatrix.com  Tue Feb 10 21:30:48 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Tue, 10 Feb 2004 16:30:48 -0500
Subject: [Twisted-web] Slot/pattern/key changes
Message-ID: <64EE09C0-5C10-11D8-997D-000A95A50FB2@fuhm.net>

--Apple-Mail-2--642798763
Content-Transfer-Encoding: 7bit
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed

This is a set of *BACKWARDS-INCOMPATIBLE* changes that simplifies and 
clarifies the set of attributes nevow has for finding elements. Tests 
pass, and my app works (both after being updated slightly for the API 
changes).

There used to be 3 attributes you could put on elements to locate them: 
slot, pattern, and key. They all did similar but slightly different 
things.

- Filling slots with data is a useful concept but 'slot' shouldn' t be 
an attribute. A slot is something that gets replaced with the given 
data, and is thus better as a standalone element. It has been replaced 
with the following:
slot('slotname') in a stan tree, or <nevow:slot name="slotname" /> in 
an (X)HTML template.
context.slotted() (which could locate a slot) has been eliminated and 
replaced with context.fillSlots(slotname, stantree). Note that you 
cannot locate slots, you can just specify data for them to fill 
themselves with.

- Assigning unique keys is also a useful concept, but it doesn't 
require the "context.keyed()" method. That method has been eliminated. 
HTMLRenderer used it to find the key="content" in HTML files used as 
sub-renderers, now it uses pattern="content".

- Patterns remain as the only way to locate a sub-element of your 
renderer. There are now 3 methods to locate them, depending on what you 
want to do. patternGenerator() replaces patterns(), onePattern() 
semi-replaces keyed(), and allPatterns() replaces the direct use of 
specialMatches that the sequence renderer previous did. Please see the 
docs in context.py for these three methods for precise behavior.

So, in summary, to convert your old code to new code:
1) If you had "div(style="border:1px", slot="myslot")" replace it with 
div(style="border: 1px")[slot("myslot")].
2) If you had a template with "<div style="border:1px" 
nevow:slot="myslot" />" replace it with "<div 
style="border:1px"><nevow:slot name="myslot" /></div>
3) If you had "context.slotted("myslot").clear()[a(href="foo")["bar"]] 
replace it with context.fillSlot("myslot", a(href="foo")["bar"]]
4) If you used keyed(), convert key= to pattern= and keyed() to 
onePattern().
5) If you used patterns(), just rename it to patternGenerator()

Also included in this patch are doc cleanups, removing excess xml() 
wrappings, replacing yield by return when possible, and the ability to 
use the "<nevow:invisible>" element in a (x)html template file, with 
the same behavior as the invisible stan tag.

James

--Apple-Mail-2--642798763
Content-Transfer-Encoding: 7bit
Content-Type: application/octet-stream;
	x-unix-mode=0644;
	name="nevow4.patch"
Content-Disposition: attachment;
	filename=nevow4.patch

Index: components.wsv
===================================================================
RCS file: /cvs/Quotient/nevow/components.wsv,v
retrieving revision 1.26
diff -u -r1.26 components.wsv
--- components.wsv	6 Feb 2004 23:03:47 -0000	1.26
+++ components.wsv	10 Feb 2004 21:26:17 -0000
@@ -39,6 +39,7 @@
 nevow.serial.flatstan.MethodSerializer              types.MethodType                nevow.iwoven.ISerializable
 nevow.serial.flatstan.CallableInstanceSerializer    nevow.iwoven.IRendererFactory   nevow.iwoven.ISerializable
 nevow.serial.flatstan.DirectiveSerializer           nevow.stan.directive            nevow.iwoven.ISerializable
+nevow.serial.flatstan.SlotSerializer                nevow.stan.slot                 nevow.iwoven.ISerializable
 nevow.serial.flatstan.ContextSerializer             nevow.context.WovenContext      nevow.iwoven.ISerializable
 nevow.serial.flatstan.DeferredSerializer            twisted.internet.defer.Deferred nevow.iwoven.ISerializable
 
Index: context.py
===================================================================
RCS file: /cvs/Quotient/nevow/context.py,v
retrieving revision 1.17
diff -u -r1.17 context.py
--- context.py	6 Feb 2004 21:21:51 -0000	1.17
+++ context.py	10 Feb 2004 21:26:17 -0000
@@ -39,8 +39,9 @@
 
 class WovenContext(object):
     key = None
-    _remembrances = {}
+    _remembrances = None
     tag = None
+    _slotData = None
     def __init__(self, parent=None, tag=None, precompile=False, remembrances=None, key=None, isAttrib=False):
         self.tag = tag
         self.parent = parent
@@ -87,29 +88,16 @@
         return self
 
     def with(self, tag):
-        """Remember a few things in a new context stack entry.
+        """Create a new context stack entry for the specified tag.
         
         tag: the tag the new context stack entry will be associated with.
-        data: The data to pass to any rendering functions.
-        renderer: The rendering function to use to render this node.
-        observer: The observer function to notify when an
-            event occurs to this node.
         """
-#        data=None, renderer=None, observer=None, remembrances=None
 
         new = WovenContext(self, tag, self.precompile, key=tag.key, isAttrib=self.isAttrib)
         if tag.data is not Unset:
             new.remember(tag.data, IData)
         if tag.remember is not Unset:
             new.remember(tag.remember)
-#        if renderer is not None:
-#            # push a renderer onto the stack
-#            pass
-# woah this seems broken
-#            new.remember(renderer, IRendererFactory)
-#        if observer is not None:
-#            # push an observer onto the stack
-#            pass
         return new
 
     def locate(self, interface, depth=1):
@@ -155,28 +143,67 @@
         top.parent = context
 
     def patterns(self, pattern, default=None):
-        """Generate clones of pattern tags forever, looping around to the beginning
-        when we run out of unique matches.
-
+        warnings.warn("use patternGenerator instead", stacklevel=2)
+        return self.patternGenerator(pattern, default)
+    
+    def patternGenerator(self, pattern, default=None):
+        """Returns a psudeo-Tag which will generate clones of matching
+        pattern tags forever, looping around to the beginning when running
+        out of unique matches.
+        
         If no matches are found, and default is None, raise an exception,
-        otherwise, return clones of default, forever.
+        otherwise, generate clones of default forever.
 
+        You can use the normal stan syntax on the return value.
+        
+        Useful to find repeating pattern elements. Example rendering function:
+        def simpleSequence(context, data):
+          pattern = context.patternCloner('item')
+          return [pattern(data=element) for element in data]
         """
         patterner = self._locatePatterns(self.tag, pattern, default)
         return PatternTag(patterner)
 
-    def slotted(self, slot):
-        """Locate and return an existing slot in the current context tag, clearing any
-        dummy content in the process. You can then fill the slot with real content.
-        """
-        return self._locateOne(slot, self._locateSlots, 'slot')
-
-    def keyed(self, key):
-        """Locate an existing keyed node in the current context tag. This returns the node
-        unchanged, without clearing or cloning anything.
+    def allPatterns(self, pattern):
+        """Return a list of all matching pattern tags, not cloned.
+        
+        Useful if you just want to insert them in the output in one
+        place.
+        
+        E.g. the sequence renderer's header and footer are found with this.
         """
-        return self._locateOne(key, self._locateKeys, 'key')
+        return list(specialMatches(self.tag, 'pattern', pattern))
 
+    def onePattern(self, pattern):
+        """Return a single matching pattern, not cloned.
+        If there is more than one matching pattern or no matching patterns,
+        raise an exception.
+
+        Useful in the case where you want to locate one and only one
+        sub-tag and do something with it.
+        """
+        return self._locateOne(pattern,
+                               lambda pattern: specialMatches(self.tag, 'pattern', pattern),
+                               'pattern')
+
+    def fillSlots(self, name, stan):
+        """Set 'stan' as the stan tree to replace all slots with name 'name'.
+        """
+        if self._slotData is None:
+            self._slotData = {}
+        self._slotData[name] = stan
+
+    def _locateSlotData(self, name):
+        """Find previously remembered slot filler data.
+        For use by flatstan.SlotRenderer"""
+        if self._slotData:
+            data = self._slotData.get(name, Unset)
+            if data is not Unset:
+                return data
+        if self.parent is None:
+            raise KeyError, "Slot data %s was not remembered." % name
+        return self.parent._locateSlotData(name)
+    
     def _locatePatterns(self, tag, pattern, default):
         keeplooking = True
         gen = specialMatches(tag, 'pattern', pattern)
@@ -208,15 +235,6 @@
             raise NodeNotFound(descr, name)
         return found
 
-    def _locateSlots(self, slot):
-        for match in specialMatches(self.tag, 'slot', slot):
-            yield match.clear()
-
-    def _locateKeys(self, key):
-        for keySpecial in specials(self.tag, 'key'):
-            if keySpecial.key.endswith(key):
-                yield keySpecial        
-
     def clone(self, deep=True, cloneTags=True):
         ## don't clone the tags of parent contexts. I *hope* code won't be
         ## trying to modify parent tags so this should not be necessary.
Index: renderer.py
===================================================================
RCS file: /cvs/Quotient/nevow/renderer.py,v
retrieving revision 1.44
diff -u -r1.44 renderer.py
--- renderer.py	6 Feb 2004 21:21:51 -0000	1.44
+++ renderer.py	10 Feb 2004 21:26:17 -0000
@@ -397,7 +397,7 @@
     def __call__(self, context, data):
         self.check()
         ctx = context.with(tags.invisible[self.doc])
-        return ctx.keyed(self.key)
+        return ctx.allPatterns(self.key)
 
 
 class XMLRenderer(HTMLRenderer):
Index: stan.py
===================================================================
RCS file: /cvs/Quotient/nevow/stan.py,v
retrieving revision 1.20
diff -u -r1.20 stan.py
--- stan.py	6 Feb 2004 23:03:47 -0000	1.20
+++ stan.py	10 Feb 2004 21:26:17 -0000
@@ -37,6 +37,15 @@
     def __repr__(self):
         return "directive('%s')" % self.name
 
+class slot(object):
+    """Marker for slot insertion in a template
+    """
+    __slots__ = ['name']
+    def __init__(self, name):
+        self.name = name
+
+    def __repr__(self):
+        return "slot('%s')" % self.name
 
 class Tag(object):
     """Tag instances represent html tags with a tag name, attributes,
@@ -46,9 +55,7 @@
     which make representing trees of XML natural using pure python
     syntax. See the docstrings for these methods for more details.
     """
-    specials = ['data', 'renderer', 'observer', 'remember', 'pattern', 'slot', 'macro', 'fill-slot', 'key']
-
-    produceContext = False
+    specials = ['data', 'renderer', 'remember', 'pattern', 'key']
 
     def __init__(self, tag, attributes=None, children=None, specials=None):
         self.tagName = tag
@@ -70,20 +77,32 @@
         __call__ because it then allows the natural syntax:
         
         table(width="100%", height="50%", border="1")
+
+        Attributes may be 'invisible' tag instances (so that
+        a(href=invisible(data="foo", renderer=myhrefrenderer) works),
+        strings, functions, or any other object which has a registered
+        ISerializable adapter.
         
-        Three magic attributes may
-        have values other than string values, and will be remembered
-        in the context stack for later retrieval:
-        
-        data
-        renderer
-        observer
-
-        See WovenContext.with for details.
-        
-        pattern and slot attributes are special, and are not exported
-        to the final page, but are used to locate nodes tagged with
-        a given pattern or slot id.
+        A few magic attributes have values other than these, as they
+        are not serialized for output but rather have special purposes
+        of their own:
+        
+        data - The value is saved on the context stack and passed to
+               renderer functions.
+        renderer - A function to call that may modify the tag in any
+                   way desired.
+        remember - Remember the value on the context stack with
+                   context.remember(value) for later lookup with
+                   context.locate()
+        pattern - Value should be a key that can later be used to locate
+                  this tag with context.patternGenerator() or
+                  context.allPatterns()
+        key - A string used to give the node a unique label.
+              This is automatically namespaced, so in:
+              span(key="foo")[span(key="bar")]
+              the inner span actually has a key of 'foo.bar'.
+              The key is is intended for use as e.g. an html 'id' attribute,
+              but will is not automatically output.
         """
         if not kw:
             return self
@@ -101,7 +120,7 @@
     def __getitem__(self, children):
         """Add children to this tag. Multiple children may be added by
         passing a tuple or a list. Children may be other tag instances,
-        strings, functions, or any object which has a registered
+        strings, functions, or any other object which has a registered
         ISerializable adapter.
         
         This is implemented using __getitem__ because it then allows
@@ -129,6 +148,18 @@
         """
         raise NotImplementedError, "Stan tag instances are not iterable."
 
+    def precompilable(self):
+        """Is this tag precompilable?
+        
+        Tags are precompilable if they will not be modified by a user
+        renderer function.
+
+        Currently, the following attributes prevent the tag from being
+        precompiled:
+        - renderer (because the function can modify its own tag)
+        - pattern (not sure about this, but perhaps may get modified)
+        """
+        
     def _clone(self, obj, deep):
         if hasattr(obj, 'clone'):
             return obj.clone(deep)
@@ -170,7 +201,6 @@
             rstr += ', children=%r' % self.children
         return "Tag(%r%s)" % (self.tagName, rstr)
 
-
 class UnsetClass:
     def __nonzero__(self):
         return False
@@ -222,26 +252,23 @@
                 yield match
 
 def sequence(context, data):
-    headers = specialMatches(context.tag, 'pattern', 'header')
-    pattern = context.patterns('item')
-    divider = context.patterns('divider', default=Proto(''))
+    headers = context.allPatterns('header')
+    pattern = context.patternGenerator('item')
+    divider = context.patternGenerator('divider', default=invisible)
     content = [(pattern(data=element), divider(data=element)) for element in data]
     if not content:
-        content = specialMatches(context.tag, 'pattern', 'empty')
+        content = context.allPatterns('empty')
     else:
         ## No divider after the last thing.
         content[-1] = content[-1][0]
-    footers = specialMatches(context.tag, 'pattern', 'footer')
+    footers = context.allPatterns('footer')
     
-    # clone is necessary here because headers and footers are generators that
-    # haven't run yet, which depend on context.tag's contents.
-    return context.tag.clone(deep=False).clear()[ headers, content, footers ]
+    return context.tag.clear()[ headers, content, footers ]
 
 
 def mapping(context, data):
     for k, v in data.items():
-        for slot in context._locateSlots(k):
-            slot[v]
+        context.fillSlots(k, v)
     return context.tag
 
 
Index: tags.py
===================================================================
RCS file: /cvs/Quotient/nevow/tags.py,v
retrieving revision 1.9
diff -u -r1.9 tags.py
--- tags.py	30 Jan 2004 18:52:47 -0000	1.9
+++ tags.py	10 Feb 2004 21:26:17 -0000
@@ -4,7 +4,7 @@
 # Public License as published by the Free Software Foundation.
 
 
-from nevow.stan import Proto, Tag, directive, xml, CommentProto, invisible
+from nevow.stan import Proto, Tag, directive, xml, CommentProto, invisible, slot
 
 
 comment = CommentProto()
Index: serial/flatmdom.py
===================================================================
RCS file: /cvs/Quotient/nevow/serial/flatmdom.py,v
retrieving revision 1.14
diff -u -r1.14 flatmdom.py
--- serial/flatmdom.py	5 Feb 2004 16:57:50 -0000	1.14
+++ serial/flatmdom.py	10 Feb 2004 21:26:17 -0000
@@ -6,36 +6,42 @@
 from __future__ import generators
 
 from nevow.renderer import serialize
-from nevow.stan import Tag, xml, directive
+from nevow.stan import Tag, xml, directive, slot, invisible
 
 from twisted.python import components
 
 def MicroDomTextSerializer(original, context):
     if original.raw:
-        yield original.nodeValue
+        return original.nodeValue
     else:
         from twisted.xish.domish import escapeToXml
-        yield escapeToXml(original.nodeValue)
+        return escapeToXml(original.nodeValue)
 
 
 def MicroDomCommentSerializer(original, context):
-    yield xml("<!--%s-->" % original.data)
+    return xml("<!--%s-->" % original.data)
     
 def MicroDomEntityReferenceSerializer(original, context):
-    yield xml(original.nodeValue)
+    return xml(original.nodeValue)
 
 
-def MicroDomElementSerializer(original, context):
+def MicroDomElementSerializer(element, context):
     directiveMapping = {
         'render': 'renderer',
         'data': 'data',
-        'observer': 'observer'
     }
     attributeList = [
-        'pattern', 'slot', 'macro', 'fill-slot', 'key',
+        'pattern', 'key',
     ]
 
-    element = original
+    name = element.tagName
+    if name.startswith('nevow:'):
+        _, name = name.split(':')
+        if name == 'invisible':
+            name = ''
+        elif name == 'slot':
+            return slot(element.attributes['name'])
+        
     attrs = dict(element.attributes) # get rid of CaseInsensitiveDict
     specials = {}
     attributes = attributeList
@@ -54,14 +60,14 @@
             specials[nons] = v
             del attrs[k]
 
-    yield serialize(
-        Tag(
-            element.tagName,
+    tag = Tag(
+            name,
             attributes=attrs,
             children=element.childNodes,
             specials=specials
-        ),
-        context)
+            )
+
+    return serialize(tag, context)
 
 
 def MicroDomDocumentSerializer(original, context):
Index: serial/flatsax.py
===================================================================
RCS file: /cvs/Quotient/nevow/serial/flatsax.py,v
retrieving revision 1.4
diff -u -r1.4 flatsax.py
--- serial/flatsax.py	6 Feb 2004 22:54:31 -0000	1.4
+++ serial/flatsax.py	10 Feb 2004 21:26:17 -0000
@@ -19,12 +19,11 @@
     directiveMapping = {
         'render': 'renderer',
         'data': 'data',
-        'observer': 'observer'
     }
     attributeList = [
-        'pattern', 'slot', 'macro', 'fill-slot', 'key',
+        'pattern', 'key',
     ]
-    
+
     def resolveEntity(self, publicId, systemId):
         ## This doesn't seem to get called, which is good.
         raise Exception("resolveEntity should not be called. We don't use external DTDs.")
@@ -45,6 +44,17 @@
         self.current.append(xml("<?%s %s?>\n" % (target, data)))
 
     def startElement(self, name, attrs):
+        if name.startswith('nevow:'):
+            _, name = name.split(':')
+            if name == 'invisible':
+                name = ''
+            elif name == 'slot':
+                el = slot(element.attributes['name'])
+                self.current.append(el)
+                fakeEl = Tag('') # eat children
+                self.current = fakeEl
+                self.stack.append(self.current)
+        
         attrs = dict(attrs)
         specials = {}
         attributes = self.attributeList
Index: serial/flatstan.py
===================================================================
RCS file: /cvs/Quotient/nevow/serial/flatstan.py,v
retrieving revision 1.25
diff -u -r1.25 flatstan.py
--- serial/flatstan.py	6 Feb 2004 23:03:47 -0000	1.25
+++ serial/flatstan.py	10 Feb 2004 21:26:17 -0000
@@ -19,7 +19,7 @@
                   'input', 'col', 'basefont', 'isindex', 'frame')
 
 def ProtoSerializer(original, context):
-    yield xml('<%s />' % original)
+    return '<%s />' % original
 
 
 def TagSerializer(original, context, contextIsMine=False):
@@ -65,26 +65,26 @@
             yield serialize(child, context)
         return
     
-    yield xml('<%s' % original.tagName)
+    yield '<%s' % original.tagName
     if original.attributes:
         attribContext = WovenContext(parent=context, precompile=context.precompile, isAttrib=True)
         for (k, v) in original.attributes.iteritems():
             if v is None:
                 warnings.warn("An attribute value for key %r on tag %r was None; ignoring attribute" % (original.tagName, v))
                 continue
-            yield xml(' %s="' % k)
+            yield ' %s="' % k
             yield serialize(v, attribContext)
-            yield xml('"')
+            yield '"'
     if not original.children:
         if original.tagName in allowSingleton:
-            yield xml(' />')
+            yield ' />'
         else:
-            yield xml('></%s>' % original.tagName)
+            yield '></%s>' % original.tagName
     else:
-        yield xml('>')
+        yield '>'
         for child in original.children:
             yield serialize(child, context)        
-        yield xml('</%s>' % original.tagName)
+        yield '</%s>' % original.tagName
 
 def StringSerializer(original, context):
     ## quote it
@@ -98,7 +98,7 @@
 
 
 def NoneWarningSerializer(original, context):
-    return xml('<span style="position: relative; font-size: 100; font-weight: bold; color: red; border: thick solid red;">None</span>')
+    return '<span style="position: relative; font-size: 100; font-weight: bold; color: red; border: thick solid red;">None</span>'
 
 
 def StringCastSerializer(original, context):
@@ -175,13 +175,19 @@
     renderer = rendererFactory.renderer(context, original.name)
     return serialize(renderer, context)
 
+def SlotSerializer(original, context):
+    if context.precompile:
+        return original
+    data = context._locateSlotData(original.name)
+    return serialize(data, context)
+
 
 def ContextSerializer(original, context):
     originalContext = original.clone(deep=False)
     originalContext.precompile = context and context.precompile or False
     originalContext.chain(context)
     try:
-        return flatten(TagSerializer(originalContext.tag, originalContext, contextIsMine=True))
+        return TagSerializer(originalContext.tag, originalContext, contextIsMine=True)
     except:
         from twisted.web import util
         from twisted.python import failure
@@ -200,7 +206,7 @@
 
 
 def CommentSerializer(original, context):
-    yield xml("<!--")
+    yield "<!--"
     for x in original.children:
         yield serialize(x, context)
-    yield("-->")
+    yield "-->"
Index: test/test_disktemplate.py
===================================================================
RCS file: /cvs/Quotient/nevow/test/test_disktemplate.py,v
retrieving revision 1.18
diff -u -r1.18 test_disktemplate.py
--- test/test_disktemplate.py	17 Jan 2004 22:49:16 -0000	1.18
+++ test/test_disktemplate.py	10 Feb 2004 21:26:17 -0000
@@ -144,8 +144,8 @@
         temp = self.mktemp()
         open(temp,'w').write("""
         <table nevow:data="aDict" nevow:render="slots">
-        <tr><td nevow:slot="1"></td><td nevow:slot="2"></td></tr>
-        <tr><td nevow:slot="3"></td><td nevow:slot="4"></td></tr>
+        <tr><td><nevow:slot name="1" /></td><td><nevow:slot name="2" /></td></tr>
+        <tr><td><nevow:slot name="3" /></td><td><nevow:slot name="4" /></td></tr>
         </table>""")
     
         class Renderer(renderer.HTMLRenderer):
@@ -153,8 +153,7 @@
                 return {'1':'one','2':'two','3':'three','4':'four'}
             def render_slots(self,context,data):
                 for name,value in data.items():
-                    for slot in context._locateSlots(name):
-                        slot[value]
+                    context.fillSlots(name, value)
                 return context.tag
 
         result = deferredRender(Renderer(templateFile=temp))
@@ -163,17 +162,17 @@
             "<table><tr><td>one</td><td>two</td></tr><tr><td>three</td><td>four</td></tr></table>",
             "Whoops. We didn't get what we expected!")
 
-    def test_keys(self):
+    def test_patterns(self):
         temp = self.mktemp()
         open(temp,'w').write("""<span nevow:render="foo">
-			<span nevow:key="one">ONE</span>
-			<span nevow:key="two">TWO</span>
-			<span nevow:key="three">THREE</span>
+			<span nevow:pattern="one">ONE</span>
+			<span nevow:pattern="two">TWO</span>
+			<span nevow:pattern="three">THREE</span>
 		</span>""")
 
         class Mine(renderer.HTMLRenderer):
             def render_foo(self, context, data):
-                return context.keyed(data)
+                return context.allPatterns(data)
 
         result = deferredRender(Mine("one", templateFile=temp))
         self.assertEquals(result, '<span>ONE</span>')
Index: test/test_flatstan.py
===================================================================
RCS file: /cvs/Quotient/nevow/test/test_flatstan.py,v
retrieving revision 1.21
diff -u -r1.21 test_flatstan.py
--- test/test_flatstan.py	6 Feb 2004 21:21:52 -0000	1.21
+++ test/test_flatstan.py	10 Feb 2004 21:26:17 -0000
@@ -201,8 +201,8 @@
                 tags.table(data={'one': 1, 'two': 2}, renderer=stan.mapping)[
                     tags.tr[tags.td["Header one."], tags.td["Header two."]],
                     tags.tr[
-                        tags.td["One: ", tags.invisible(slot="one")],
-                        tags.td["Two: ", tags.invisible(slot="two")]
+                        tags.td["One: ", tags.slot("one")],
+                        tags.td["Two: ", tags.slot("two")]
                     ]
                 ]
             ]
Index: test/test_stan.py
===================================================================
RCS file: /cvs/Quotient/nevow/test/test_stan.py,v
retrieving revision 1.3
diff -u -r1.3 test_stan.py
--- test/test_stan.py	28 Oct 2003 23:41:15 -0000	1.3
+++ test/test_stan.py	10 Feb 2004 21:26:17 -0000
@@ -40,18 +40,19 @@
         self.assertEquals(clone.children, ["How are you"])
         self.assertNotIdentical(clone.children, tag.children)
 
+    ## TODO: need better clone test here to test clone(deep=True),
+    ## and behavior of cloning nested lists.
+
     def test_clear(self):
         tag = proto["these are", "children", "cool"]
         tag.clear()
         self.assertEquals(tag.children, [])
 
     def test_specials(self):
-        tag = proto(data=1, renderer=str, observer="1", pattern="item", slot="aSlot", macro="aMacro", **{'fill-slot': "someSlot"})
+        tag = proto(data=1, renderer=str, remember="stuff", key="myKey", **{'pattern': "item"})
         self.assertEquals(tag.data, 1)
-        self.assertEquals(tag.renderer, str)
-        self.assertEquals(tag.observer, "1")
+        self.assertEquals(getattr(tag, 'renderer'), str)
+        self.assertEquals(tag.remember, "stuff")
+        self.assertEquals(tag.key, "myKey")
         self.assertEquals(tag.pattern, "item")
-        self.assertEquals(tag.slot, "aSlot")
-        self.assertEquals(tag.macro, "aMacro")
-        self.assertEquals(getattr(tag, 'fill-slot'), "someSlot")
 

--Apple-Mail-2--642798763--



From twisted-web@twistedmatrix.com  Tue Feb 10 22:58:20 2004
From: twisted-web@twistedmatrix.com (Matt Goodall)
Date: Tue, 10 Feb 2004 22:58:20 +0000
Subject: [Twisted-web] Slot/pattern/key changes
In-Reply-To: <64EE09C0-5C10-11D8-997D-000A95A50FB2@fuhm.net>
References: <64EE09C0-5C10-11D8-997D-000A95A50FB2@fuhm.net>
Message-ID: <1076453899.1865.840.camel@debian>

On Tue, 2004-02-10 at 21:30, James Y Knight wrote:
> This is a set of *BACKWARDS-INCOMPATIBLE* changes that simplifies and 
> clarifies the set of attributes nevow has for finding elements. Tests 
> pass, and my app works (both after being updated slightly for the API 
> changes).
> 
> There used to be 3 attributes you could put on elements to locate them: 
> slot, pattern, and key. They all did similar but slightly different 
> things.
> 
> - Filling slots with data is a useful concept but 'slot' shouldn' t be 
> an attribute. A slot is something that gets replaced with the given 
> data, and is thus better as a standalone element. It has been replaced 
> with the following:
> slot('slotname') in a stan tree, or <nevow:slot name="slotname" /> in 
> an (X)HTML template.
> context.slotted() (which could locate a slot) has been eliminated and 
> replaced with context.fillSlots(slotname, stantree). Note that you 
> cannot locate slots, you can just specify data for them to fill 
> themselves with.
> 
> - Assigning unique keys is also a useful concept, but it doesn't 
> require the "context.keyed()" method. That method has been eliminated. 
> HTMLRenderer used it to find the key="content" in HTML files used as 
> sub-renderers, now it uses pattern="content".
> 
> - Patterns remain as the only way to locate a sub-element of your 
> renderer. There are now 3 methods to locate them, depending on what you 
> want to do. patternGenerator() replaces patterns(), onePattern() 
> semi-replaces keyed(), and allPatterns() replaces the direct use of 
> specialMatches that the sequence renderer previous did. Please see the 
> docs in context.py for these three methods for precise behavior.
> 
> So, in summary, to convert your old code to new code:
> 1) If you had "div(style="border:1px", slot="myslot")" replace it with 
> div(style="border: 1px")[slot("myslot")].
> 2) If you had a template with "<div style="border:1px" 
> nevow:slot="myslot" />" replace it with "<div 
> style="border:1px"><nevow:slot name="myslot" /></div>
> 3) If you had "context.slotted("myslot").clear()[a(href="foo")["bar"]] 
> replace it with context.fillSlot("myslot", a(href="foo")["bar"]]
> 4) If you used keyed(), convert key= to pattern= and keyed() to 
> onePattern().
> 5) If you used patterns(), just rename it to patternGenerator()

I have one more use case that is not possible/easy with the proposed
change:

HTML:
<a nevow:slot="email" class="whatever" href="email:">email</a>

Rendered by:
context.slotted('email')(href=['mailto:','a@bc.com'])['Mr X']

Result:
<a class="whatever" href="email:a@bc.com">Mr X</a>

> 
> Also included in this patch are doc cleanups, removing excess xml() 
> wrappings, replacing yield by return when possible, and the ability to 
> use the "<nevow:invisible>" element in a (x)html template file, with 
> the same behavior as the invisible stan tag.
> 
> James
-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect
the views of my employer.



From twisted-web@twistedmatrix.com  Tue Feb 10 23:36:45 2004
From: twisted-web@twistedmatrix.com (Joel Boehland)
Date: Tue, 10 Feb 2004 15:36:45 -0800
Subject: [Twisted-web] RE: Writing a web application - how to make twisted/nevow "look good"
Message-ID: <40296B0D.5020808@memes.com>

Hi,
I think developing some sort of widget library would be useful to the nevow community. I have done
a little tinkering with nevow UI widgets as well. Mostly I'm deconstructing some of the ui elements
in plone2.0 and trying to convert them to nevow. I've gotten their action-tabs, tables and portal boxes
basically working. Anyhow I'd be interesting in some sort of project like this. The question is how
should this be done? Any sort of reasonably complex web ui is going to have elements of
nevow + xhtml+ js + css. The js and css may also be dynamic. How would be create a catalog/library to hold
these ui widgets? Would it be a web demo sort of like pastebin where you can see a widget, and then
cut-n-paste the code for the nevow/css/js/xhtml? Or would it be a more formalized library that you would
download. I like the idea of a web-based catalog, since you could see how each of the widgets looks.

Anyhow, I like the idea of some sort of widget library or catalog.

--Joel



From twisted-web@twistedmatrix.com  Wed Feb 11 03:49:06 2004
From: twisted-web@twistedmatrix.com (Alex Levy)
Date: Tue, 10 Feb 2004 22:49:06 -0500
Subject: [Twisted-web] RE: Writing a web application - how to make
 twisted/nevow "look good"
In-Reply-To: <40296B0D.5020808@memes.com>
References: <40296B0D.5020808@memes.com>
Message-ID: <1076471346.3652.75.camel@hyla>

--=-ALxTxHruaS90OSkO6SKS
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

On Tue, 2004-02-10 at 18:36, Joel Boehland wrote:
> Anyhow, I like the idea of some sort of widget library or catalog.

I'm all for it; the trick is making them general-purpose enough that
people can still use them, but not making them too overbroad (so that
they're tough to figure out or too clunky to implement).

How much have you done already? I've been working on a couple nevow
widgets of my own, but they've been fairly specific to my apps; I'd be
willing to help a little in working out details of some more
general-purpose interface elements.

Most importantly, have you put your code up anywhere yet? :)

--=20
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_


--=-ALxTxHruaS90OSkO6SKS
Content-Type: application/pgp-signature; name=signature.asc
Content-Description: This is a digitally signed message part

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)

iD8DBQBAKaYyVM70CYlRlK4RAi00AKDTZP7eNFpKD1RtyAoSYh36QvdGOgCfd3DB
zS7yXyUCQY+gT5srRTkw7ts=
=GRPq
-----END PGP SIGNATURE-----

--=-ALxTxHruaS90OSkO6SKS--



From twisted-web@twistedmatrix.com  Wed Feb 11 09:32:40 2004
From: twisted-web@twistedmatrix.com (Matt Goodall)
Date: Wed, 11 Feb 2004 09:32:40 +0000
Subject: [Twisted-web] Slot/pattern/key changes
In-Reply-To: <1076453899.1865.840.camel@debian>
References: <64EE09C0-5C10-11D8-997D-000A95A50FB2@fuhm.net>
 <1076453899.1865.840.camel@debian>
Message-ID: <1076491960.26453.11.camel@harold>

On Tue, 2004-02-10 at 22:58, Matt Goodall wrote:
> On Tue, 2004-02-10 at 21:30, James Y Knight wrote:
> > This is a set of *BACKWARDS-INCOMPATIBLE* changes that simplifies and 
> > clarifies the set of attributes nevow has for finding elements. Tests 
> > pass, and my app works (both after being updated slightly for the API 
> > changes).
> > 
> > There used to be 3 attributes you could put on elements to locate them: 
> > slot, pattern, and key. They all did similar but slightly different 
> > things.
> > 
> > - Filling slots with data is a useful concept but 'slot' shouldn' t be 
> > an attribute. A slot is something that gets replaced with the given 
> > data, and is thus better as a standalone element. It has been replaced 
> > with the following:
> > slot('slotname') in a stan tree, or <nevow:slot name="slotname" /> in 
> > an (X)HTML template.
> > context.slotted() (which could locate a slot) has been eliminated and 
> > replaced with context.fillSlots(slotname, stantree). Note that you 
> > cannot locate slots, you can just specify data for them to fill 
> > themselves with.
> > 
> > - Assigning unique keys is also a useful concept, but it doesn't 
> > require the "context.keyed()" method. That method has been eliminated. 
> > HTMLRenderer used it to find the key="content" in HTML files used as 
> > sub-renderers, now it uses pattern="content".
> > 
> > - Patterns remain as the only way to locate a sub-element of your 
> > renderer. There are now 3 methods to locate them, depending on what you 
> > want to do. patternGenerator() replaces patterns(), onePattern() 
> > semi-replaces keyed(), and allPatterns() replaces the direct use of 
> > specialMatches that the sequence renderer previous did. Please see the 
> > docs in context.py for these three methods for precise behavior.
> > 
> > So, in summary, to convert your old code to new code:
> > 1) If you had "div(style="border:1px", slot="myslot")" replace it with 
> > div(style="border: 1px")[slot("myslot")].
> > 2) If you had a template with "<div style="border:1px" 
> > nevow:slot="myslot" />" replace it with "<div 
> > style="border:1px"><nevow:slot name="myslot" /></div>
> > 3) If you had "context.slotted("myslot").clear()[a(href="foo")["bar"]] 
> > replace it with context.fillSlot("myslot", a(href="foo")["bar"]]
> > 4) If you used keyed(), convert key= to pattern= and keyed() to 
> > onePattern().
> > 5) If you used patterns(), just rename it to patternGenerator()
> 
> I have one more use case that is not possible/easy with the proposed
> change:
> 
> HTML:
> <a nevow:slot="email" class="whatever" href="email:">email</a>
> 
> Rendered by:
> context.slotted('email')(href=['mailto:','a@bc.com'])['Mr X']
> 
> Result:
> <a class="whatever" href="email:a@bc.com">Mr X</a>

It looks like this should be possible using something like this:

HTML:
<nevow:slot name="email"/><a pattern="email" href="#"
class="whatever">name</a>

Rendered by:
context.fillSlots(
    'email',
    context.onePattern('email')(href=['mailto:a@bc.com'])['Mr X']
)

Although James's patch needs a couple of small changes to make that
work.

> 
> > 
> > Also included in this patch are doc cleanups, removing excess xml() 
> > wrappings, replacing yield by return when possible, and the ability to 
> > use the "<nevow:invisible>" element in a (x)html template file, with 
> > the same behavior as the invisible stan tag.
> > 
> > James
-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From twisted-web@twistedmatrix.com  Wed Feb 11 10:17:11 2004
From: twisted-web@twistedmatrix.com (Matt Goodall)
Date: Wed, 11 Feb 2004 10:17:11 +0000
Subject: [Twisted-web] RE: Writing a web application - how to make
 twisted/nevow "look good"
In-Reply-To: <1076471346.3652.75.camel@hyla>
References: <40296B0D.5020808@memes.com>  <1076471346.3652.75.camel@hyla>
Message-ID: <1076494630.26453.51.camel@harold>

On Wed, 2004-02-11 at 03:49, Alex Levy wrote:
> On Tue, 2004-02-10 at 18:36, Joel Boehland wrote:
> > Anyhow, I like the idea of some sort of widget library or catalog.
> 
> I'm all for it;

Me too! The idea of widgets/components is something I've had in the back
of my mind since I discovered Nevow. Components are not as easy to do
with nevow.renderer as they should be but that's an implementation
detail and can be fixed. In fact, the experimental rend module (in the
Nevow tracker) already helps.

> the trick is making them general-purpose enough that
> people can still use them, but not making them too overbroad (so that
> they're tough to figure out or too clunky to implement).

Agreed.

Other than the API itself, the most obvious thing is to make sure there
is a default stylesheet with the widget but that it can be replaced by
the application.

> Most importantly, have you put your code up anywhere yet? :)

For now, why not put the code in the Nevow wiki,
http://divmod.org/users/slyphon.twistd/nevow/moin.cgi/ , and use a
category to group them.

Cheers, Matt

-- 
Matt Goodall, Pollenation Internet Ltd
w: http://www.pollenation.net
e: matt@pollenation.net

Any views expressed are my own and do not necessarily reflect the
views of my employer.



From twisted-web@twistedmatrix.com  Wed Feb 11 22:02:46 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Wed, 11 Feb 2004 17:02:46 -0500
Subject: [Twisted-web] Slot/pattern/key changes
In-Reply-To: <1076491960.26453.11.camel@harold>
References: <64EE09C0-5C10-11D8-997D-000A95A50FB2@fuhm.net> <1076453899.1865.840.camel@debian> <1076491960.26453.11.camel@harold>
Message-ID: <067C81D7-5CDE-11D8-997D-000A95A50FB2@fuhm.net>

On Feb 11, 2004, at 4:32 AM, Matt Goodall wrote:
> It looks like this should be possible using something like this:
>
> HTML:
> <nevow:slot name="email"/><a pattern="email" href="#"
> class="whatever">name</a>
>
> Rendered by:
> context.fillSlots(
>     'email',
>     context.onePattern('email')(href=['mailto:a@bc.com'])['Mr X']
> )
>
> Although James's patch needs a couple of small changes to make that
> work.

If you're writing stan tree, this will work:
a(href=slot('emailhref'), class='whatever')[slot('email')]

Rendered by
context.fillSlots('email', 'Mr X')
context.fillSlots('emailhref', 'mailto:a@bc.com')

Or perhaps something like this:
def combineslot(context, data):
   newtag = context.locateSlotData('email')
   return context.tag(**newtag.attributes)[newtag.children]

a(renderer=combineslot('email'), class='whatever')
Rendered by:
context.fillSlots('email',invisible(href='mailto:a@bc.com')['Mr X']))

TBD: How to fit that into HTML Template syntax. Both those actually 
seem cleaner, to me, than the alternative above.

James



From twisted-web@twistedmatrix.com  Thu Feb 12 17:35:21 2004
From: twisted-web@twistedmatrix.com (Alex Levy)
Date: Thu, 12 Feb 2004 12:35:21 -0500
Subject: [Twisted-web] Cosmetic patch to nevow/freeform.py
Message-ID: <1076607321.11686.2.camel@hyla>

--=-ZmpchNsZn8aTUgtN7S3L
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

This is insignificant, but helpful. Removes the description <div>
element when there is no description. Makes things look a little more
concise.

Index: nevow/freeform.py
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: /cvs/Quotient/nevow/freeform.py,v
retrieving revision 1.108
diff -u -r1.108 freeform.py
--- nevow/freeform.py   11 Feb 2004 01:33:09 -0000      1.108
+++ nevow/freeform.py   12 Feb 2004 17:31:20 -0000
@@ -221,12 +221,14 @@
         if data.typedValue.getAttribute('compact'):
             return theslotfilled
=20
-        return [
+        ayb =3D [
             label(_class=3D"freeform-label")[ data.label ],
             theslotfilled, # freeform-input
             span(_class=3D"freeform-error")[ errormessage ],
-            div(_class=3D"freeform-description")[ data.description ],
         ]
+        if data.description:
+            ayb[div(_class=3D"freeform-description")[ data.description ]]
+        return ayb
=20
     def input(self, context, slot, data, name, value):
         raise NotImplementedError, "Implement in subclass"

--=20
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_


--=-ZmpchNsZn8aTUgtN7S3L
Content-Type: application/pgp-signature; name=signature.asc
Content-Description: This is a digitally signed message part

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)

iD8DBQBAK7lYVM70CYlRlK4RAsSFAKDOikNIVgxl3cy23UgBkciktHWvhACdEURO
NkUW1US2J0qhvzRsvQTxoCU=
=0zRI
-----END PGP SIGNATURE-----

--=-ZmpchNsZn8aTUgtN7S3L--



From twisted-web@twistedmatrix.com  Thu Feb 12 18:29:38 2004
From: twisted-web@twistedmatrix.com (Alex Levy)
Date: Thu, 12 Feb 2004 13:29:38 -0500
Subject: [Twisted-web] Cosmetic patch to nevow/freeform.py
In-Reply-To: <1076607321.11686.2.camel@hyla>
References: <1076607321.11686.2.camel@hyla>
Message-ID: <1076610577.11686.8.camel@hyla>

--=-CFa8ksKIdSIDg27NQQtx
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

On Thu, 2004-02-12 at 12:35, Alex Levy wrote:
> This is insignificant, but helpful. Removes the description <div>
> element when there is no description. Makes things look a little more
> concise.

Sorry, I jumped the gun - this patch makes a mess of other parts of
freeform's output.

I'm making a few other changes to improve how freeform renders its forms
(mainly because I want to give CSS greater control over display). When I
finish, I'll post again.

--=20
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_


--=-CFa8ksKIdSIDg27NQQtx
Content-Type: application/pgp-signature; name=signature.asc
Content-Description: This is a digitally signed message part

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)

iD8DBQBAK8YRVM70CYlRlK4RAgZvAJ40TeOjtR3xdZ67Wv4ud7+GCyOK4gCZAblO
wWz/cILfQWQkfFbPn2R7Q7A=
=s2Ks
-----END PGP SIGNATURE-----

--=-CFa8ksKIdSIDg27NQQtx--



From twisted-web@twistedmatrix.com  Fri Feb 13 17:56:28 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Fri, 13 Feb 2004 12:56:28 -0500
Subject: [Twisted-web] allowNone for formless
Message-ID: <F2E7FF4A-5E4D-11D8-997D-000A95A50FB2@fuhm.net>

Attached patch adds allowNone argument for Typed objects in formless. 
Tests updated accordingly. Also, boolean values are handled more 
sensibly (formless's boolean type coerce takes 'True' or 'False' 
strings instead of making freeform translate).

Also added a python enumerate implementation for compatibility with 
python2.2 since enumerate is used in freeform.py.

James



From twisted-web@twistedmatrix.com  Fri Feb 13 21:11:46 2004
From: twisted-web@twistedmatrix.com (Frantisek Fuka)
Date: Fri, 13 Feb 2004 22:11:46 +0100
Subject: [Twisted-web] How to upload files using HTML forms?
Message-ID: <402D3D92.9010602@fuxoft.cz>

How do I detect the files that were uploaded from WEB using Forms? When 
I look at request.args, I can see the filenames of the files, but where 
are the uploaded files themselves?

I am also curious where in the documentation could I find answers to 
questions like these? I looked into server.py source code and didn't 
find any documentation or examples...

-- 
                                          Frantisek Fuka
(yes, that IS my real name)
(and it's pronounced "Fran-tjee-shek Foo-kah")
----------------------------------------------------
My E-mail:   fuka@fuxoft.cz
My Homepage: http://www.fuxoft.cz
My ICQ:      2745855


From twisted-web@twistedmatrix.com  Fri Feb 13 21:37:52 2004
From: twisted-web@twistedmatrix.com (Frantisek Fuka)
Date: Fri, 13 Feb 2004 22:37:52 +0100
Subject: [Twisted-web] How to upload files using HTML forms?
Message-ID: <402D43B0.5070601@fuxoft.cz>

Sorry about the confusion, I didn't make myself clear. I can see the 
CONTENTS of the uploaded files in request.args, but where do I find the 
FILENAMES under which they were uploaded?

-- 
                                          Frantisek Fuka
(yes, that IS my real name)
(and it's pronounced "Fran-tjee-shek Foo-kah")
----------------------------------------------------
My E-mail:   fuka@fuxoft.cz
My Homepage: http://www.fuxoft.cz
My ICQ:      2745855



From twisted-web@twistedmatrix.com  Fri Feb 13 19:49:45 2004
From: twisted-web@twistedmatrix.com (Donovan Preston)
Date: Fri, 13 Feb 2004 14:49:45 -0500
Subject: [Twisted-web] allowNone for formless
In-Reply-To: <F2E7FF4A-5E4D-11D8-997D-000A95A50FB2@fuhm.net>
References: <F2E7FF4A-5E4D-11D8-997D-000A95A50FB2@fuhm.net>
Message-ID: <C64EFEE2-5E5D-11D8-B412-000A95864FC4@ulaluma.com>

On Feb 13, 2004, at 12:56 PM, James Y Knight wrote:

> Attached patch adds allowNone argument for Typed objects in formless. 
> Tests updated accordingly. Also, boolean values are handled more 
> sensibly (formless's boolean type coerce takes 'True' or 'False' 
> strings instead of making freeform translate).
>
> Also added a python enumerate implementation for compatibility with 
> python2.2 since enumerate is used in freeform.py.

Whoops, looks like you forgot the patch ;-)

Nevow will have it's own repository shortly, at the earliest by the end 
of today.

dp



From twisted-web@twistedmatrix.com  Sat Feb 14 11:14:25 2004
From: twisted-web@twistedmatrix.com (robin bryce)
Date: Sat, 14 Feb 2004 11:14:25 +0000
Subject: [Twisted-web] fcgi.py
Message-ID: <1076757265.7295.13.camel@localhost.localdomain>

I needed to create a bridge from apache to a server implemented using
the Twisted framework. I took a copy of fcgi.py from
http://alldunn.com/python/fcgi.py and made come crude modifications to
get it to work with the Twisted factory / protocol pattern.

I got in touch with the orignal author, Robin Dunn, and he is happy for
me to contribute the modification. Is there any interest here in this or
is there a better way to get apache talking to a twisted server ?

Best regards,

Robin Bryce



From twisted-web@twistedmatrix.com  Sat Feb 14 11:50:59 2004
From: twisted-web@twistedmatrix.com (Michal Pasternak)
Date: Sat, 14 Feb 2004 12:50:59 +0100
Subject: [Twisted-web] fcgi.py
In-Reply-To: <1076757265.7295.13.camel@localhost.localdomain>
References: <1076757265.7295.13.camel@localhost.localdomain>
Message-ID: <20040214115059.GA29295@pasternak.w.lub.pl>

robin bryce [Sat, Feb 14, 2004 at 11:14:25AM +0000]:
> is there a better way to get apache talking to a twisted server ?

I have no idea if it is better, but it works. Especially, when you have
already some apache virtual hosts running. This has been tested with 
apache 1.3.x

 * enable mod_proxy (LoadModule proxy_module ...)
 
 * configure mod_proxy (unhashing default config is okay)
 
 * add VirtualHost entry:
 
 <VirtualHost I.P.NUM.BER>
 	# add some standard settings, such as ServerName, ServerAlias,
	# ServerAdmin, ErrorLog, TransferLog
	
        ProxyPass       / http://127.0.0.1:PORT_WHERE_TWISTED_WEB_IS_RUNNING/
 </VirtualHost>
	


From twisted-web@twistedmatrix.com  Sat Feb 14 13:46:39 2004
From: twisted-web@twistedmatrix.com (robin bryce)
Date: Sat, 14 Feb 2004 13:46:39 +0000
Subject: [Twisted-web] fcgi.py
In-Reply-To: <20040214115059.GA29295@pasternak.w.lub.pl>
References: <1076757265.7295.13.camel@localhost.localdomain>
 <20040214115059.GA29295@pasternak.w.lub.pl>
Message-ID: <1076766399.7295.27.camel@localhost.localdomain>

Now I really wish I had posted _before_ I rolled up my sleeves and
started coding. Thanks Michal


On Sat, 2004-02-14 at 11:50, Michal Pasternak wrote:
> robin bryce [Sat, Feb 14, 2004 at 11:14:25AM +0000]:
> > is there a better way to get apache talking to a twisted server ?
> 
> I have no idea if it is better, but it works. Especially, when you have
> already some apache virtual hosts running. This has been tested with 
> apache 1.3.x
> 
>  * enable mod_proxy (LoadModule proxy_module ...)
>  
>  * configure mod_proxy (unhashing default config is okay)
>  
>  * add VirtualHost entry:
>  
>  <VirtualHost I.P.NUM.BER>
>  	# add some standard settings, such as ServerName, ServerAlias,
> 	# ServerAdmin, ErrorLog, TransferLog
> 	
>         ProxyPass       / http://127.0.0.1:PORT_WHERE_TWISTED_WEB_IS_RUNNING/
>  </VirtualHost>
> 	
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web



From twisted-web@twistedmatrix.com  Sat Feb 14 16:17:16 2004
From: twisted-web@twistedmatrix.com (Mike Mueller)
Date: Sat, 14 Feb 2004 17:17:16 +0100
Subject: [Twisted-web] deferred as resource
In-Reply-To: <1076766399.7295.27.camel@localhost.localdomain>
References: <20040214115059.GA29295@pasternak.w.lub.pl>
 <1076757265.7295.13.camel@localhost.localdomain>
 <20040214115059.GA29295@pasternak.w.lub.pl>
Message-ID: <5.2.1.1.1.20040214161218.00b05ab0@pop.gmx.net>

When I try to return a resource (instance of a subclass of Renderer) as a 
deferred in nevow I get the following message:


....\twisted\python\components.py", line 77, in __call__
  raise CannotAdapt("%s cannot be adapted to %s." % 
twisted.python.components.CannotAdapt: <Deferred at 0xc9a508> cannot be 
adapted to <class 'nevow.iwoven.INewResource'>.


Is there a workaround for this problem? I need to make calls to a 
perspective broker, so I get deferreds back.


I am using Python 2.3.3, twisted 1.1.1 and the nevow cvs from today.



Thanks


Mike



From twisted-web@twistedmatrix.com  Sun Feb 15 22:47:28 2004
From: twisted-web@twistedmatrix.com (Peter Stradinger)
Date: Sun, 15 Feb 2004 14:47:28 -0800 (PST)
Subject: [Twisted-web] twisted.internet.error.CannotListenError
Message-ID: <20040215224728.26716.qmail@web13705.mail.yahoo.com>

Hi,

I'm fairly new to Twisted and trying to get a twisted reactor to work with wxPython.  I'm trying
the perspective broker examples, and when I try to do:
    def OnFileitems0Menu(self, event):
        self.Close(true)
        reactor.stop()

It shuts down the program fine, but then when I try to run it again I get:

twisted.internet.error.CannotListenError: Couldn't listen on any:8800: (10048, 'Address already in
use').

As an error.  I can manually stop the process and then it will work again, but I don't know how to
release the port when I shut down the program.

Am I missing something obvious?  A search of the archives hasn't shown me any way out.

Peter

__________________________________
Do you Yahoo!?
Yahoo! Finance: Get your refund fast by filing online.
http://taxes.yahoo.com/filing.html


From twisted-web@twistedmatrix.com  Sun Feb 15 22:55:19 2004
From: twisted-web@twistedmatrix.com (Mary Gardiner)
Date: Mon, 16 Feb 2004 09:55:19 +1100
Subject: [Twisted-web] twisted.internet.error.CannotListenError
In-Reply-To: <20040215224728.26716.qmail@web13705.mail.yahoo.com>
References: <20040215224728.26716.qmail@web13705.mail.yahoo.com>
Message-ID: <20040215225519.GA19840@home.puzzling.org>

This looks like a question for twisted-python@twistedmatrix.com rather
than twisted-web@twistedmatrix.com

On Sun, Feb 15, 2004, Peter Stradinger wrote:
> Hi,
> 
> I'm fairly new to Twisted and trying to get a twisted reactor to work with wxPython.  I'm trying
> the perspective broker examples, and when I try to do:
>     def OnFileitems0Menu(self, event):
>         self.Close(true)
>         reactor.stop()
> 
> It shuts down the program fine, but then when I try to run it again I get:
> 
> twisted.internet.error.CannotListenError: Couldn't listen on any:8800: (10048, 'Address already in
> use').
> 
> As an error.  I can manually stop the process and then it will work again, but I don't know how to
> release the port when I shut down the program.
> 
> Am I missing something obvious?  A search of the archives hasn't shown me any way out.
> 
> Peter


From twisted-web@twistedmatrix.com  Mon Feb 16 11:06:46 2004
From: twisted-web@twistedmatrix.com (Syver Enstad)
Date: 16 Feb 2004 12:06:46 +0100
Subject: [Twisted-web] How to upload files using HTML forms?
In-Reply-To: <402D43B0.5070601@fuxoft.cz>
References: <402D43B0.5070601@fuxoft.cz>
Message-ID: <uisi7mgft.fsf@inout.no>

Frantisek Fuka <fuka@fuxoft.cz> writes:

> Sorry about the confusion, I didn't make myself clear. I can see the
> CONTENTS of the uploaded files in request.args, but where do I find
> the FILENAMES under which they were uploaded?

The only way I've found to do this with twisted.web is to parse the
headers manually. 

 



From twisted-web@twistedmatrix.com  Tue Feb 17 19:26:21 2004
From: twisted-web@twistedmatrix.com (Justin Johnson)
Date: Tue, 17 Feb 2004 13:26:21 -0600
Subject: [Twisted-web] LiveEvil output buffer patch
Message-ID: <1077045981.10060.181193935@webmail.messagingengine.com>

Here's a patch to add script buffering to liveevil.py.  One additional
change is needed, but I'm not sure where to put it.  self.output needs to
be reset to None when the connection is closed.  Currently I'm getting
around this by using liveevil as the mind and setting mind.output = None
in my render_ method where I know I can reset it before using liveevil
again.  Anyone have any ideas for a better place to reset this?


Index: liveevil.py
===================================================================
RCS file: /cvs/Quotient/nevow/liveevil.py,v
retrieving revision 1.2
diff -u -r1.2 liveevil.py
--- liveevil.py 26 Jan 2004 18:30:12 -0000      1.2
+++ liveevil.py 17 Feb 2004 19:19:41 -0000
@@ -38,11 +38,16 @@
         # TODO set up an event hub
         self.events = events.EventNotification()
         self.hookupNotifications = []
+        self.outputBuffer = []

     def hookupOutput(self, output, finisher = None):
         #print "output hooked up."
         self.output = output
         self.finisher = finisher
+        for buf in self.outputBuffer:
+            output(buf)
+            #print "Sent buffered item: ", buf
+        self.outputBuffer = []
         for notify in self.hookupNotifications:
             notify(self)

@@ -51,9 +56,11 @@

     def sendScript(self, script):
         if self.output:
+            #print "output sent!", script
             self.output(script)
         else:
-            print "output ignored!", script
+            self.outputBuffer.append(script)
+            #print "output buffered!", script

     def handleInput(self, identifier, *args):
         #self.sendScript(input)


From twisted-web@twistedmatrix.com  Mon Feb 23 23:24:51 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Mon, 23 Feb 2004 18:24:51 -0500
Subject: [Twisted-web] New Nevow stuff
Message-ID: <7AF6F908-6657-11D8-997D-000A95A50FB2@fuhm.net>

(this is all old news to people who hang out in #twisted.web, but I 
thought I'd update everyone who doesn't.)

Nevow has got its own repository going now, and isn't dependent upon 
quotient and atop anymore. Check it out with:
cvs -z6 -d :pserver:anon@divmod.org:/cvs checkout Nevow

The Wiki has moved and is now at:
http://divmod.org/users/wiki.twistd/nevow/moin.cgi

There is a new mailing list nevow-commits:
http://divmod.org/users/mailman.twistd/listinfo/nevow-commits

The commits also show up on a nice webpage generated by StatCVS:
http://divmod.org/users/foom/statcvs/Nevow/

James



From twisted-web@twistedmatrix.com  Tue Feb 24 17:21:24 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Tue, 24 Feb 2004 12:21:24 -0500
Subject: [Twisted-web] Ping
Message-ID: <DF28DD9B-66ED-11D8-997D-000A95A50FB2@fuhm.net>

I sent a mail to the ML yesterday but it doesn't seem to have shown 
up...trying again...

James



From twisted-web@twistedmatrix.com  Sat Feb 21 18:14:08 2004
From: twisted-web@twistedmatrix.com (Thomas Mangin)
Date: Sat, 21 Feb 2004 18:14:08 +0000
Subject: [Twisted-web] fcgi.py
Message-ID: <40379FF0.7050508@free.fr>

That way you can have some part of the site still served by apache if 
you need.
This example serve all page through twisted.

<VirtualHost *:80>
        # This virtual host is simply a proxy of the twisted-matrix
        # woven based site running on local port 8080

        ServerName www.exa-networks.co.uk

        RewriteEngine On
        RewriteRule   ^(.+)$    http://127.0.0.1:8080$1 [P]
        ProxyVia Block

        # Maintain logging as twistd only sees local proxy requests
        CustomLog logs/exasite-access.log combined
        ErrorLog logs/exasite-error.log
</VirtualHost>

Thomas


From twisted-web@twistedmatrix.com  Tue Feb 24 18:35:41 2004
From: twisted-web@twistedmatrix.com (Phil Hunt)
Date: Tue, 24 Feb 2004 18:35:41 +0000
Subject: [Twisted-web] Can someone translate this, please?
Message-ID: <200402241835.41765.phil.hunt@tech.mrc.ac.uk>

I am trying to get my head round Twisted, particularly to use it as a 
simple web server (using http as a RPC mechanism, really). I was thinknig
of using a "Rosetta Stone" approach, and am wondering if someone could 
translate this ordinary Python program into Twisted, please:

=====================================================================
# simple_http.py = a simple http server

import SimpleHTTPServer
import BaseHTTPServer
import StringIO

template = """<html>
<head>
<title>%(title)s</title>
</head><body>
<h1>%(title)s</h1>
<p>Path is [<tt>%(path)s</tt>]
</body></html>
"""

portNum = 1450

class MyRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):

   def do_GET(self):
      args = {
         'title': 'simple_http.py',
         'path': self.path
      }   
      result = template % args
      self.send_response(200)
      self.send_header("Content-type", "text/html")
      self.send_header("Content-Length", str(len(result)))
      self.end_headers()
      f = StringIO.StringIO()
      f.write(result)
      f.seek(0)
      self.copyfile(f, self.wfile)
      f.close()

print "===== starting simple_http.py on port %d =====" % portNum
server_address = ('', portNum)
httpd = BaseHTTPServer.HTTPServer(server_address, 
   MyRequestHandler)
httpd.serve_forever()

#end
=====================================================================

As you can see, it's very simple. When it recieves a GET request it just
sends back an HTML page saying what the path in the GET request was.


-- 
Phil Hunt, phil.hunt@tech.mrc.ac.uk


From twisted-web@twistedmatrix.com  Tue Feb 24 19:19:09 2004
From: twisted-web@twistedmatrix.com (stephan)
Date: Tue, 24 Feb 2004 11:19:09 -0800
Subject: [Twisted-web] server crashes
Message-ID: <opr3v2l7ouwzeeq5@mail.geekmail.cc>


I am almost done with my web app. Now just before finalizing the project I 
noticed that when I request two pages at the same time (e.g. double 
clicking on a link) my app including twisted just exits.

I am almost certain that this behavior has something to do with the fact 
that I put every request in a seperate thread. My render methode looks 
pretty much like this:

def render(self, request):
     threads.deferToThread(handleRequest, request).addCallback(\
         writeRequestAndFinish, request).addErrback(\
         request.processingFailed)
     return server.NOT_DONE_YET


Any idea why this does not work? Do you think there is a problem with 
accessing the request variable from a different thread?

_stephan



From twisted-web@twistedmatrix.com  Tue Feb 24 19:28:54 2004
From: twisted-web@twistedmatrix.com (Alex Levy)
Date: Tue, 24 Feb 2004 14:28:54 -0500
Subject: [Twisted-web] Can someone translate this, please?
In-Reply-To: <200402241835.41765.phil.hunt@tech.mrc.ac.uk>
References: <200402241835.41765.phil.hunt@tech.mrc.ac.uk>
Message-ID: <1077650934.1051.55.camel@hyla>

--=-F8H6FFhWXt+SqTfvayXY
Content-Type: multipart/mixed; boundary="=-8I/WDEz3aO5JtB11WODI"


--=-8I/WDEz3aO5JtB11WODI
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable

On Tue, 2004-02-24 at 13:35, Phil Hunt wrote:
> I am trying to get my head round Twisted, particularly to use it as a=20
> simple web server (using http as a RPC mechanism, really). I was thinknig
> of using a "Rosetta Stone" approach, and am wondering if someone could=20
> translate this ordinary Python program into Twisted, please:

Attached are two examples of what you've described, both of which are a
lot easier on the eyes than SimpleHTTPServer code.

rosetta1 just uses twisted.web's Resource object, which is relatively
basic in its capabilities. If you want more scalable and flexible
templating and web application design, you might want to start working
with Nevow, which is what rosetta2 demonstrates.

Both of these scripts should be run using the following command:

$ twistd -ony rosettaX.tac.py

Hope this helps.

--=20
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_


--=-8I/WDEz3aO5JtB11WODI
Content-Disposition: attachment; filename=rosetta1.tac.py
Content-Transfer-Encoding: base64
Content-Type: text/x-python; name=rosetta1.tac.py; charset=iso-8859-1

ZnJvbSB0d2lzdGVkLmFwcGxpY2F0aW9uLnNlcnZpY2UgaW1wb3J0IEFwcGxpY2F0aW9uDQpmcm9t
IHR3aXN0ZWQuYXBwbGljYXRpb24gaW1wb3J0IHN0cnBvcnRzDQpmcm9tIHR3aXN0ZWQud2ViIGlt
cG9ydCBzZXJ2ZXIsIHJlc291cmNlDQoNCmNsYXNzIE15UmVzb3VyY2UocmVzb3VyY2UuUmVzb3Vy
Y2UpOg0KICAgIGRlZiBnZXRDaGlsZChzZWxmLCBuYW1lLCByZXF1ZXN0KToNCiAgICAgICAgIyBJ
ZiB0aGlzIHJlc291cmNlIGlzIGxvY2F0ZWQgYXQgL2ZvbywgYW5kIHRoZSB1c2VyIHJlcXVlc3Rz
IC9mb28vYmFyLA0KICAgICAgICAjIGl0IGlzIHVwIHRvIGdldENoaWxkKCdiYXInKSB0byBmaWd1
cmUgb3V0IHdoYXQgcmVzb3VyY2UgdG8gZGlzcGxheS4NCiAgICAgICAgIyBUaGlzIHRlbGxzIHRo
ZSB3ZWIgc2VydmVyIHRoYXQgbm8gbWF0dGVyIHdoYXQgY2hpbGQgd2UgbWlnaHQgbmVlZCwNCiAg
ICAgICAgIyB3ZSB3YW50IHRoaXMgcmVzb3VyY2UgdG8gYWx3YXlzIHJldHVybiBpdHNlbGYuDQog
ICAgICAgIHJldHVybiBzZWxmDQogICAgDQogICAgZGVmIHJlbmRlcihzZWxmLCByZXF1ZXN0KToN
CiAgICAgICAgcmVzdWx0ID0gJycnDQogICAgICAgIDxodG1sPg0KICAgICAgICA8cD5IZWxsbywg
d29ybGQhPC9wPg0KICAgICAgICA8cD5yZXF1ZXN0LnBhdGggPSAlczwvcD4NCiAgICAgICAgPC9o
dG1sPg0KICAgICAgICAnJycgJSByZXF1ZXN0LnBhdGgNCiAgICAgICAgcmV0dXJuIHJlc3VsdA0K
DQojIGNyZWF0ZSB0aGUgYWxsLWVuY29tcGFzc2luZyBhcHBsaWNhdGlvbiBvYmplY3QNCmFwcGxp
Y2F0aW9uID0gQXBwbGljYXRpb24oJ3Jvc2V0dGExJykNCg0KIyBjcmVhdGUgb3VyIHdlYiBzaXRl
DQpzaXRlID0gc2VydmVyLlNpdGUocmVzb3VyY2U9TXlSZXNvdXJjZSgpKQ0KDQojIGNyZWF0ZSBh
IHNlcnZpY2UgY29udGFpbmluZyBvdXIgd2ViIHNpdGUgYW5kIGxpc3RlbmluZyBvbiBUQ1AgcG9y
dCAxNDUwDQpzdmMgPSBzdHJwb3J0cy5zZXJ2aWNlKCd0Y3A6MTQ1MCcsIHNpdGUpDQpzdmMuc2V0
U2VydmljZVBhcmVudChhcHBsaWNhdGlvbikNCg==

--=-8I/WDEz3aO5JtB11WODI
Content-Disposition: attachment; filename=rosetta2.tac.py
Content-Transfer-Encoding: base64
Content-Type: text/x-python; name=rosetta2.tac.py; charset=iso-8859-1

ZnJvbSB0d2lzdGVkLmFwcGxpY2F0aW9uLnNlcnZpY2UgaW1wb3J0IEFwcGxpY2F0aW9uDQpmcm9t
IHR3aXN0ZWQuYXBwbGljYXRpb24gaW1wb3J0IHN0cnBvcnRzDQpmcm9tIG5ldm93IGltcG9ydCBh
cHBzZXJ2ZXINCmZyb20gbmV2b3cgaW1wb3J0IGluZXZvdw0KZnJvbSBuZXZvdyBpbXBvcnQgcmVu
ZA0KDQp0ZW1wbGF0ZSA9ICcnJw0KPGh0bWw+DQo8cD5IZWxsbyB3b3JsZCE8L3A+DQo8cD4NCiAg
cmVxdWVzdC5wYXRoID0NCiAgPHNwYW4gbmV2b3c6ZGF0YT0icmVxdWVzdF9wYXRoIiBuZXZvdzpy
ZW5kZXI9InN0cmluZyI+SSB3aWxsIHZhbmlzaDwvc3Bhbj4NCjwvcD4NCjxwPg0KICBkaXIoY29u
dGV4dCkgPQ0KICA8c3BhbiBuZXZvdzpyZW5kZXI9ImNvbnRleHRfY29udGVudHMiPkkgd2lsbCBh
bHNvIHZhbmlzaDwvc3Bhbj4NCjwvcD4NCjwvaHRtbD4NCicnJw0KDQpjbGFzcyBNeVBhZ2UocmVu
ZC5QYWdlKToNCiAgICBkb2NGYWN0b3J5ID0gcmVuZC5odG1sc3RyKHRlbXBsYXRlKQ0KDQogICAg
ZGVmIGxvY2F0ZUNoaWxkKHNlbGYsIG5hbWUsIHNlZ21lbnRzKToNCiAgICAgICAgcmV0dXJuIHNl
bGYsIHNlZ21lbnRzWzE6XQ0KDQogICAgZGVmIGRhdGFfcmVxdWVzdF9wYXRoKHNlbGYsIGNvbnRl
eHQsIGRhdGEpOg0KICAgICAgICByZXF1ZXN0ID0gY29udGV4dC5sb2NhdGUoaW5ldm93LklSZXF1
ZXN0KQ0KICAgICAgICByZXR1cm4gcmVxdWVzdC5wYXRoDQoNCiAgICBkZWYgcmVuZGVyX2NvbnRl
eHRfY29udGVudHMoc2VsZiwgY29udGV4dCwgZGF0YSk6DQogICAgICAgIHJldHVybiBzdHIoZGly
KGNvbnRleHQpKQ0KDQojIGNyZWF0ZSB0aGUgYWxsLWVuY29tcGFzc2luZyBhcHBsaWNhdGlvbiBv
YmplY3QNCmFwcGxpY2F0aW9uID0gQXBwbGljYXRpb24oJ3Jvc2V0dGEyJykNCg0KIyBjcmVhdGUg
b3VyIHdlYiBzaXRlDQpzaXRlID0gYXBwc2VydmVyLk5ldm93U2l0ZShyZXNvdXJjZT1NeVBhZ2Uo
KSkNCg0KIyBjcmVhdGUgYSBzZXJ2aWNlIGNvbnRhaW5pbmcgb3VyIHdlYiBzaXRlIGFuZCBsaXN0
ZW5pbmcgb24gVENQIHBvcnQgMTQ1MA0Kc3ZjID0gc3RycG9ydHMuc2VydmljZSgndGNwOjE0NTAn
LCBzaXRlKQ0Kc3ZjLnNldFNlcnZpY2VQYXJlbnQoYXBwbGljYXRpb24pDQoNCg0K

--=-8I/WDEz3aO5JtB11WODI--

--=-F8H6FFhWXt+SqTfvayXY
Content-Type: application/pgp-signature; name=signature.asc
Content-Description: This is a digitally signed message part

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)

iD8DBQBAO6X1VM70CYlRlK4RAhVkAKDST2X13419FamFx3rLWM+YTEBTZgCeMufJ
dtWfAkqhjrPH+ixV8+Z42Vs=
=UBS3
-----END PGP SIGNATURE-----

--=-F8H6FFhWXt+SqTfvayXY--



From twisted-web@twistedmatrix.com  Tue Feb 24 19:36:03 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Tue, 24 Feb 2004 14:36:03 -0500
Subject: [Twisted-web] server crashes
In-Reply-To: <opr3v2l7ouwzeeq5@mail.geekmail.cc>
References: <opr3v2l7ouwzeeq5@mail.geekmail.cc>
Message-ID: <AE8F6BF8-6700-11D8-997D-000A95A50FB2@fuhm.net>

Well, the request object certainly doesn't do any locking for 
multithreadeded access, so it could easily be in an inconsistant state 
sometimes. I'd certainly suggest not accessing the request object from 
a different thread, but, that shouldn't cause python to just up and 
quit without any error.

Maybe you can try running it with the python debugger, or if that 
doesn't catch anything, gdb. Are you using any external C libraries? 
(database/etc?) Perhaps one of those isn't multithreaded safe?

James

On Feb 24, 2004, at 2:19 PM, stephan wrote:
> def render(self, request):
>     threads.deferToThread(handleRequest, request).addCallback(\
>         writeRequestAndFinish, request).addErrback(\
>         request.processingFailed)
>     return server.NOT_DONE_YET



From twisted-web@twistedmatrix.com  Tue Feb 24 23:09:15 2004
From: twisted-web@twistedmatrix.com (stephan)
Date: Tue, 24 Feb 2004 15:09:15 -0800
Subject: [Twisted-web] server crashes
In-Reply-To: <AE8F6BF8-6700-11D8-997D-000A95A50FB2@fuhm.net>
References: <opr3v2l7ouwzeeq5@mail.geekmail.cc> <AE8F6BF8-6700-11D8-997D-000A95A50FB2@fuhm.net>
Message-ID: <opr3wc9pwkwzeeq5@mail.geekmail.cc>

I do use external libs, but they are all instanced within the thread. I 
create a connection to a mysql dbm within each thread but that should not 
cause any conflicts since each thread has its seperate connection object.

Personally I suspect the request object. Unfortunately I cannot just 
deepcopy it and pass it to the thread.

Is there an alternative way doing this? The only way I can imagine is to 
do the threading later down the line which would make it harder to 
maintain a version that also runs within apache.

_stephan


On Tue, 24 Feb 2004 14:36:03 -0500, James Y Knight <foom@fuhm.net> wrote:

> Well, the request object certainly doesn't do any locking for 
> multithreadeded access, so it could easily be in an inconsistant state 
> sometimes. I'd certainly suggest not accessing the request object from a 
> different thread, but, that shouldn't cause python to just up and quit 
> without any error.
>
> Maybe you can try running it with the python debugger, or if that 
> doesn't catch anything, gdb. Are you using any external C libraries? 
> (database/etc?) Perhaps one of those isn't multithreaded safe?
>
> James
>
> On Feb 24, 2004, at 2:19 PM, stephan wrote:
>> def render(self, request):
>>     threads.deferToThread(handleRequest, request).addCallback(\
>>         writeRequestAndFinish, request).addErrback(\
>>         request.processingFailed)
>>     return server.NOT_DONE_YET
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web




From twisted-web@twistedmatrix.com  Tue Feb 24 23:35:17 2004
From: twisted-web@twistedmatrix.com (Christopher Armstrong)
Date: Tue, 24 Feb 2004 18:35:17 -0500
Subject: [Twisted-web] server crashes
In-Reply-To: <opr3wc9pwkwzeeq5@mail.geekmail.cc>
References: <opr3v2l7ouwzeeq5@mail.geekmail.cc> <AE8F6BF8-6700-11D8-997D-000A95A50FB2@fuhm.net> <opr3wc9pwkwzeeq5@mail.geekmail.cc>
Message-ID: <403BDFB5.6060209@twistedmatrix.com>

This is an OpenPGP/MIME signed message (RFC 2440 and 3156)
--------------enigDF4357F0EFAA6FD22FB010F1
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit

stephan wrote:
> I do use external libs, but they are all instanced within the thread. I 
> create a connection to a mysql dbm within each thread but that should 
> not cause any conflicts since each thread has its seperate connection 
> object.
> 
> Personally I suspect the request object. Unfortunately I cannot just 
> deepcopy it and pass it to the thread.
> 
> Is there an alternative way doing this? The only way I can imagine is to 
> do the threading later down the line which would make it harder to 
> maintain a version that also runs within apache.

If you make _any_ calls to Twisted code, put them in a 
reactor.callFromThread(func). It runs the function in the main thread.

But you shouldn't suspect the request object, because plain Python code 
won't make python simply die without error. Third party C code is almost 
always the culprit in stuff like that.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/

--------------enigDF4357F0EFAA6FD22FB010F1
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFAO9+1Np279O1/OG4RArH6AJ0TFlqJT+d9rmQb2oUL5PWWyFJ+9wCeKfw7
4ZHyRTFQIGVOQeXcllvV2A4=
=Z8WC
-----END PGP SIGNATURE-----

--------------enigDF4357F0EFAA6FD22FB010F1--


From twisted-web@twistedmatrix.com  Wed Feb 25 02:14:46 2004
From: twisted-web@twistedmatrix.com (stephan)
Date: Tue, 24 Feb 2004 18:14:46 -0800
Subject: [Twisted-web] server crashes
In-Reply-To: <403BDFB5.6060209@twistedmatrix.com>
References: <opr3v2l7ouwzeeq5@mail.geekmail.cc> <AE8F6BF8-6700-11D8-997D-000A95A50FB2@fuhm.net> <opr3wc9pwkwzeeq5@mail.geekmail.cc> <403BDFB5.6060209@twistedmatrix.com>
Message-ID: <opr3wluwi1wzeeq5@mail.geekmail.cc>

I see what you are saying: Python would throw an error in case of a 
conflictive access to a shared object.

Relating to your first suggestion: what do you excactly mean with calling 
twisted code in the main thread with reactor.callFromThread(func)? Can you 
give an example? When I retrieve my cookie should I do that with 
reactor.callFromThread(func)?

_stephan



On Tue, 24 Feb 2004 18:35:17 -0500, Christopher Armstrong 
<radix@twistedmatrix.com> wrote:

> stephan wrote:
>> I do use external libs, but they are all instanced within the thread. I
>> create a connection to a mysql dbm within each thread but that should
>> not cause any conflicts since each thread has its seperate connection
>> object.
>>
>> Personally I suspect the request object. Unfortunately I cannot just
>> deepcopy it and pass it to the thread.
>>
>> Is there an alternative way doing this? The only way I can imagine is to
>> do the threading later down the line which would make it harder to
>> maintain a version that also runs within apache.
>
> If you make _any_ calls to Twisted code, put them in a
> reactor.callFromThread(func). It runs the function in the main thread.
>
> But you shouldn't suspect the request object, because plain Python code
> won't make python simply die without error. Third party C code is almost
> always the culprit in stuff like that.
>




From twisted-web@twistedmatrix.com  Wed Feb 25 08:49:10 2004
From: twisted-web@twistedmatrix.com (=?ISO-8859-1?Q?Philippe_Lafoucri=E8re?=)
Date: Wed, 25 Feb 2004 09:49:10 +0100
Subject: [Twisted-web] New Nevow stuff
In-Reply-To: <7AF6F908-6657-11D8-997D-000A95A50FB2@fuhm.net>
References: <7AF6F908-6657-11D8-997D-000A95A50FB2@fuhm.net>
Message-ID: <403C6186.7090903@wanadoo.fr>

Great news.

I'll check all of that this evening. I'll consider starting to learn 
nevow now :)

James Y Knight wrote:
> (this is all old news to people who hang out in #twisted.web, but I 
> thought I'd update everyone who doesn't.)
> 
> Nevow has got its own repository going now, and isn't dependent upon 
> quotient and atop anymore. Check it out with:
> cvs -z6 -d :pserver:anon@divmod.org:/cvs checkout Nevow
> 
> The Wiki has moved and is now at:
> http://divmod.org/users/wiki.twistd/nevow/moin.cgi
> 
> There is a new mailing list nevow-commits:
> http://divmod.org/users/mailman.twistd/listinfo/nevow-commits
> 
> The commits also show up on a nice webpage generated by StatCVS:
> http://divmod.org/users/foom/statcvs/Nevow/
> 
> James
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 


From twisted-web@twistedmatrix.com  Wed Feb 25 10:24:02 2004
From: twisted-web@twistedmatrix.com (Phil Hunt)
Date: Wed, 25 Feb 2004 10:24:02 +0000
Subject: [Twisted-web] Can someone translate this, please?
In-Reply-To: <1077650934.1051.55.camel@hyla>
References: <200402241835.41765.phil.hunt@tech.mrc.ac.uk> <1077650934.1051.55.camel@hyla>
Message-ID: <200402251024.02091.phil.hunt@tech.mrc.ac.uk>

On Tuesday 24 Feb 2004 7:28 pm, Alex Levy wrote:
> On Tue, 2004-02-24 at 13:35, Phil Hunt wrote:
> > I am trying to get my head round Twisted, particularly to use it as a
> > simple web server (using http as a RPC mechanism, really). I was thinknig
> > of using a "Rosetta Stone" approach, and am wondering if someone could
> > translate this ordinary Python program into Twisted, please:
>
> Attached are two examples of what you've described, both of which are a
> lot easier on the eyes than SimpleHTTPServer code.
>
> rosetta1 just uses twisted.web's Resource object, which is relatively
> basic in its capabilities. If you want more scalable and flexible
> templating and web application design, you might want to start working
> with Nevow, which is what rosetta2 demonstrates.
>
> Both of these scripts should be run using the following command:
>
> $ twistd -ony rosettaX.tac.py

rosetta1 kind-of does what I want, but not quite, when I try to fetch
the URL <http://localhost:1450/xxx?aaa=bbb&c=12345> in my web browser,
it says request.path = /xxx, whereas I'm interested in the variable/value
pairs as well, i.e. /xxx?aaa=bbb&c=12345

If I wrote a program like this that was invoked by the ``python'' program
rather than ``twistd'', would that make a difference it what it can do?
I ask because I would like to get such a program to talk to other data 
sources. For example, I'm writing a test program that sends an http GET 
request, then tests whether it receives a response (also an http GET
request, but from a 3rd process), within a certain time span, such as 2
seconds. IOW, I have three programs:


                 TH -----------> P2
                  ^               |
                  |               |
                  `------------- P3

TH is a test harness, that is both a web client and a web server. TH
sends http GET requests to P2, then receives them (some time later)
from P3. P2 is a web server; it receives GET requests but does not send
them. P3 is a web client; it sends GET requests but does not receive 
them. (Am I barking up the wriong tree here? I'm using http because it
is a simple protocol, and because one side of the protocol can be emulated
by Mozilla, making it easier from me to test my software when not all
the components have been written. But maybe there's a simpler way?)


Also, how easy is it to write a full python [program with a reactor as 
opposed to a .tac.py? Are there advantages in doing so? (I'm assuming that 
with .tac.py programs, the stuff to do with the reactor is handled by 
twistd). I want to invoke my programs with options at the command line
(the port number will be one of these options) -- can I do that with 
twistd?

-- 
Phil Hunt, phil.hunt@tech.mrc.ac.uk


From twisted-web@twistedmatrix.com  Wed Feb 25 10:25:25 2004
From: twisted-web@twistedmatrix.com (Andy Gayton)
Date: Wed, 25 Feb 2004 20:25:25 +1000
Subject: [Twisted-web] New Nevow stuff
In-Reply-To: <403C6186.7090903@wanadoo.fr>
References: <7AF6F908-6657-11D8-997D-000A95A50FB2@fuhm.net> <403C6186.7090903@wanadoo.fr>
Message-ID: <403C7815.5080003@thecablelounge.com>

Philippe Lafoucri=E8re wrote:
> Great news.
>=20
> I'll check all of that this evening. I'll consider starting to learn=20
> nevow now :)

Apologies if this has already been covered.  Is nevow considered to be=20
woven's replacement or alternative?

Is woven still being actively developed?

cheers,
Andy.


From twisted-web@twistedmatrix.com  Wed Feb 25 10:56:43 2004
From: twisted-web@twistedmatrix.com (=?ISO-8859-1?Q?Philippe_Lafoucri=E8re?=)
Date: Wed, 25 Feb 2004 11:56:43 +0100
Subject: [Twisted-web] New Nevow stuff
In-Reply-To: <403C7815.5080003@thecablelounge.com>
References: <7AF6F908-6657-11D8-997D-000A95A50FB2@fuhm.net> <403C6186.7090903@wanadoo.fr> <403C7815.5080003@thecablelounge.com>
Message-ID: <403C7F6B.1050909@wanadoo.fr>


Andy Gayton wrote:
> Philippe Lafoucrière wrote:
> 
>> Great news.
>>
>> I'll check all of that this evening. I'll consider starting to learn 
>> nevow now :)
> 
> 
> Apologies if this has already been covered.  Is nevow considered to be 
> woven's replacement or alternative?
> 
> Is woven still being actively developed?

As I red some weeks ago, nevow will replace woven, because woven lacks 
some features. You can see it as a complete rewrite of the engine, but 
back-compatibility is lost.

There are no plans yet (correct me if I'm wrong) to integer novew in the 
twisted repository.

This is the reason that made me give up woven :(


From twisted-web@twistedmatrix.com  Wed Feb 25 12:36:59 2004
From: twisted-web@twistedmatrix.com (Christopher Armstrong)
Date: Wed, 25 Feb 2004 07:36:59 -0500
Subject: [Twisted-web] New Nevow stuff
In-Reply-To: <403C7815.5080003@thecablelounge.com>
References: <7AF6F908-6657-11D8-997D-000A95A50FB2@fuhm.net> <403C6186.7090903@wanadoo.fr> <403C7815.5080003@thecablelounge.com>
Message-ID: <403C96EB.1020909@twistedmatrix.com>

This is an OpenPGP/MIME signed message (RFC 2440 and 3156)
--------------enig78620C4E15CF0E68908D6BFF
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit

Andy Gayton wrote:
> Philippe Lafoucrière wrote:
> 
>> Great news.
>>
>> I'll check all of that this evening. I'll consider starting to learn 
>> nevow now :)
> 
> 
> Apologies if this has already been covered.  Is nevow considered to be 
> woven's replacement or alternative?
> 
> Is woven still being actively developed?

Not only is it not being actively developed, it's not even being 
maintained. I don't recommend anyone use woven for new code, even if you 
don't want to use nevow.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/

--------------enig78620C4E15CF0E68908D6BFF
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFAPJbrNp279O1/OG4RAqCJAJ9qVd+BAnlOgl9lobChkvf4e4OSlACeL20M
rvqCwtJou+IM5+UYwsQraz8=
=7oJk
-----END PGP SIGNATURE-----

--------------enig78620C4E15CF0E68908D6BFF--


From twisted-web@twistedmatrix.com  Wed Feb 25 13:08:35 2004
From: twisted-web@twistedmatrix.com (Thomas Mangin)
Date: Wed, 25 Feb 2004 13:08:35 +0000
Subject: [Twisted-web] New Nevow stuff
In-Reply-To: <403C96EB.1020909@twistedmatrix.com>
References: <7AF6F908-6657-11D8-997D-000A95A50FB2@fuhm.net>
 <403C6186.7090903@wanadoo.fr> <403C7815.5080003@thecablelounge.com>
 <403C96EB.1020909@twistedmatrix.com>
Message-ID: <1077714514.2261.16.camel@thomas_mangin.dc.exa.net.uk>

Hello,

Well ... Thank you for the cold shower ;-)
How hard will it be to port woven based servers to nevow ?
Will it need a full rewrite or are the interface similar enough to not
make the job a real pain ?

Thomas Mangin



From twisted-web@twistedmatrix.com  Wed Feb 25 14:17:53 2004
From: twisted-web@twistedmatrix.com (Christopher Armstrong)
Date: Wed, 25 Feb 2004 09:17:53 -0500
Subject: [Twisted-web] New Nevow stuff
In-Reply-To: <1077714514.2261.16.camel@thomas_mangin.dc.exa.net.uk>
References: <7AF6F908-6657-11D8-997D-000A95A50FB2@fuhm.net>	 <403C6186.7090903@wanadoo.fr> <403C7815.5080003@thecablelounge.com>	 <403C96EB.1020909@twistedmatrix.com> <1077714514.2261.16.camel@thomas_mangin.dc.exa.net.uk>
Message-ID: <403CAE91.1070107@twistedmatrix.com>

This is an OpenPGP/MIME signed message (RFC 2440 and 3156)
--------------enig67FF530A2DD72F2B460B7C6F
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit

Thomas Mangin wrote:
> Hello,
> 
> Well ... Thank you for the cold shower ;-)
> How hard will it be to port woven based servers to nevow ?
> Will it need a full rewrite or are the interface similar enough to not
> make the job a real pain ?

Some of the concepts are new, but on the whole, the paradigm is largely 
the same. Nowhere near the confusion involved in porting, say, a CGI to 
Woven was ;-) There aren't any guides to porting, though. Check out the 
Wiki and the linked resources.

http://divmod.org/users/wiki.twistd/nevow/moin.cgi/



-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/

--------------enig67FF530A2DD72F2B460B7C6F
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFAPK6RNp279O1/OG4RAlY2AJkBo4yLCz3GsQZP1Qj4ER1b+KWKhQCfV4Hq
bS07wkB7Fr9RRloXkrj2tsg=
=YWjW
-----END PGP SIGNATURE-----

--------------enig67FF530A2DD72F2B460B7C6F--


From twisted-web@twistedmatrix.com  Sun Feb 29 07:46:56 2004
From: twisted-web@twistedmatrix.com (James Y Knight)
Date: Sun, 29 Feb 2004 02:46:56 -0500
Subject: [Twisted-web] Re: [Nevow-commits] Generate ids for form elements and use it to relate labels to form inputs.
In-Reply-To: <E1AxEZb-0002D1-00@tesla.divmod.net>
References: <E1AxEZb-0002D1-00@tesla.divmod.net>
Message-ID: <72FD9634-6A8B-11D8-AB59-000A95A50FB2@fuhm.net>

On Feb 28, 2004, at 7:12 PM, mg CVS wrote:
> Modified files:
> Nevow/nevow/freeform.py 1.22 1.23
> Nevow/nevow/test/test_freeform.py 1.10 1.11
>
> Log message:
> Generate ids for form elements and use it to relate labels to form 
> inputs.

Why doesn't this use context.key (+ a suffix perhaps) instead of a 
newly generated arbitrary number?

James



From twisted-web@twistedmatrix.com  Sun Feb 29 10:06:24 2004
From: twisted-web@twistedmatrix.com (Matt Goodall)
Date: Sun, 29 Feb 2004 10:06:24 +0000
Subject: [Twisted-web] Re: [Nevow-commits] Generate ids for form
 elements and use it to relate labels to form inputs.
In-Reply-To: <72FD9634-6A8B-11D8-AB59-000A95A50FB2@fuhm.net>
References: <E1AxEZb-0002D1-00@tesla.divmod.net>
 <72FD9634-6A8B-11D8-AB59-000A95A50FB2@fuhm.net>
Message-ID: <1078049183.2074.14.camel@debian>

On Sun, 2004-02-29 at 07:46, James Y Knight wrote:
> On Feb 28, 2004, at 7:12 PM, mg CVS wrote:
> > Modified files:
> > Nevow/nevow/freeform.py 1.22 1.23
> > Nevow/nevow/test/test_freeform.py 1.10 1.11
> >
> > Log message:
> > Generate ids for form elements and use it to relate labels to form 
> > inputs.
> 
> Why doesn't this use context.key (+ a suffix perhaps) instead of a 
> newly generated arbitrary number?

Yeah, of course. (/me makes note to stop coding late at night.) Building
the id from the key also gives predictable names for use in JavaScript.

Cheers, Matt

-- 
Matt Goodall <matt@pollenation.net>



From twisted-web@twistedmatrix.com  Fri Feb 27 01:32:57 2004
From: twisted-web@twistedmatrix.com (David Bolen)
Date: 26 Feb 2004 20:32:57 -0500
Subject: [Twisted-web] Re: Can someone translate this, please?
References: <200402241835.41765.phil.hunt@tech.mrc.ac.uk> <1077650934.1051.55.camel@hyla> <200402251024.02091.phil.hunt@tech.mrc.ac.uk>
Message-ID: <uoerl9uie.fsf@fitlinxx.com>

Phil Hunt <phil.hunt@tech.mrc.ac.uk> writes:

> rosetta1 kind-of does what I want, but not quite, when I try to fetch
> the URL <http://localhost:1450/xxx?aaa=bbb&c=12345> in my web browser,
> it says request.path = /xxx, whereas I'm interested in the variable/value
> pairs as well, i.e. /xxx?aaa=bbb&c=12345

Ah, yeah, that would be a difference between that and the simpler HTTP
handler object in the standard library.  The Twisted support code
automatically parses out the arguments for you and makes them
available from the request object (passed in to the render method in
rosetta1) in the args attribute.  It's a dictionary keyed by variable,
with the value being a list of values supplied.  The value is always a
list even if only one instance of the variable occurs in the URL.

So in your example here, in the render() method, request.args would be
set to {'aaa':['bbb'],'c':['12345']}.

> If I wrote a program like this that was invoked by the ``python'' program
> rather than ``twistd'', would that make a difference it what it can do?

Not particularly - you can pretty much do anything in either case, but
the sequence of how to initialize things (and how much work you might
need to do to accomplish a particular initialization) will differ.
twistd provides some standard startup handling, but you can initialize
things and run the reactor yourself if you want.

For example, one way to have a more standalone version would be to
replace the bottom portion of rosetta1 (starting from "application = "
down) with:

    site = server.Site(resource=MyResource())
    reactor.listenTCP(1450, site)
    reactor.run()

and you'd need a "from twisted.internet import reactor" at the top
(and could remove the application imports).  It's not exactly
identical since the application/service approach is initializing a
more flexible framework, but for this example, the end result is the
same.  With the above change you could just run the script with
Python.

You can pretty much do anything you want at that point, although you
need to get to the reactor.run() for most stuff to start running.

You can also hang other services off of your application object and do
other initialization in the twistd/tac case.  I don't tend to use twistd
that much myself, but I'm sure for others it's what they prefer.

Oh, and if you'd like to see some simple logging of requests and what
not you can just enable logging by:

    import sys
    from twisted.python import log

at the top, and

    log.startLogging(sys.stdout)

before creating your site.  I think the equivalent is just a command
line option with twistd.

-- David



