From exarkun at twistedmatrix.com  Tue Jan  3 09:24:20 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 03 Jan 2012 14:24:20 -0000
Subject: [Twisted-web] Porting the features of nevow.guard to
 twisted.web.guard
In-Reply-To: <op.vv5k51pwo3d63n@tiassa.local>
References: <op.vv5k51pwo3d63n@tiassa.local>
Message-ID: <20120103142420.2755.618016497.divmod.xquotient.18@localhost6.localdomain6>

On 27 May 2011, 06:47 pm, ldanielburr at gmail.com wrote:
>Hi gang,
>
>Per a short chat with exarkun (thanks exarkun), I'm posting this to the
>list for discussion.
>
>A project upon which I am working requires a twisted.web service that
>allows a user to delegate authentication/authorization to a third 
>party,
>e.g., Facebook, Twitter, et cetera.  In so doing, I've found myself
>missing nevow.guard, since web.guard currently only has out-of-the-box
>support for HTTP Auth.  I'd like to see web.guard expand to cover more
>kinds of auth, such as form-based auth or the OAuth-based solutions 
>coming
>from so many social graph sites.
>
>With this in mind, I asked exarkun about this, and he mentioned that 
>the
>only thing he does not consider to be garbage in nevow.guard is the
>feature-set, and that I should port the features to web, discarding the
>baggage.
>
>I'd like to solicit the list for some guidance as to what those 
>features
>are, or should be, and hopefully end up with a ticket describing the
>features to be implemented, which I will then attempt to implement and
>contribute to twisted.web.

Hiya Daniel,

This didn't generate as much discussion as I hoped. :)  However, I think 
you went ahead and started a project - txsomethingsomething?  How is 
that working out?

Jean-Paul


From exarkun at twistedmatrix.com  Tue Jan  3 10:15:22 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 03 Jan 2012 15:15:22 -0000
Subject: [Twisted-web] Noob question about POST
In-Reply-To: <4EFF60F8.3000309@steiny.com>
References: <4EFF60F8.3000309@steiny.com>
Message-ID: <20120103151522.2755.2028764181.divmod.xquotient.29@localhost6.localdomain6>

On 31 Dec 2011, 07:22 pm, steiny at steiny.com wrote:
>Hi,
>
>[snip]
>
>If I telnet to localhost port 80 and copy and paste the following:
>
>=== BEGINNING OF WORKING INPUT TO SERVER  ===
>POST /locked/checklogin.php HTTP/1.1
>Host: www.mysite.com
>User-Agent: Mozilla/4.0
>Content-Length: 31
>Content-Type: application/x-www-form-urlencoded

I notice that in this POST, your content type is "application/x-www- 
form-urlencoded".
>
>
>myusername=john&mypassword=1234
>===== END OF WORKING INPUT TO SERVER ====
>
>[snip]
>
>==== START OF CODE MODIFIED WITH POST ===
>
>[snip]
>
>d = agent.request(
>     'POST',
>     'http://localhost/locked/checklogin.php',
>     Headers({'User-Agent': ['Mozilla 5.0'],
>         'Content-Type': ['multipart/form-data; charset=utf-8']}),
>     body)

However, with this one, you've switched to "multipart/form-data".

Perhaps this difference is the cause of the problem?

Jean-Paul


From ldanielburr at me.com  Tue Jan  3 10:38:27 2012
From: ldanielburr at me.com (L. Daniel Burr)
Date: Tue, 03 Jan 2012 09:38:27 -0600
Subject: [Twisted-web] Porting the features of nevow.guard to
 twisted.web.guard
In-Reply-To: <20120103142420.2755.618016497.divmod.xquotient.18@localhost6.localdomain6>
References: <op.vv5k51pwo3d63n@tiassa.local>
	<20120103142420.2755.618016497.divmod.xquotient.18@localhost6.localdomain6>
Message-ID: <op.v7ilqqzceyn2q3@tiassa.local>

Hi Jean-Paul,


On Tue, 03 Jan 2012 08:24:20 -0600, <exarkun at twistedmatrix.com> wrote:

> On 27 May 2011, 06:47 pm, ldanielburr at gmail.com wrote:
>> Hi gang,
>>
>> Per a short chat with exarkun (thanks exarkun), I'm posting this to the
>> list for discussion.
>>
>> A project upon which I am working requires a twisted.web service that
>> allows a user to delegate authentication/authorization to a third
>> party,
>> e.g., Facebook, Twitter, et cetera.  In so doing, I've found myself
>> missing nevow.guard, since web.guard currently only has out-of-the-box
>> support for HTTP Auth.  I'd like to see web.guard expand to cover more
>> kinds of auth, such as form-based auth or the OAuth-based solutions
>> coming
>> from so many social graph sites.
>>
>> With this in mind, I asked exarkun about this, and he mentioned that
>> the
>> only thing he does not consider to be garbage in nevow.guard is the
>> feature-set, and that I should port the features to web, discarding the
>> baggage.
>>
>> I'd like to solicit the list for some guidance as to what those
>> features
>> are, or should be, and hopefully end up with a ticket describing the
>> features to be implemented, which I will then attempt to implement and
>> contribute to twisted.web.
>
> Hiya Daniel,
>
> This didn't generate as much discussion as I hoped. :)  However, I think
> you went ahead and started a project - txsomethingsomething?  How is
> that working out?
>
> Jean-Paul

There is a project, https://github.com/minskmaz/txWebAuth, to which I  
contributed a tiny amount of code.  Neither the main author nor myself  
have done much to progress the work, but there is a rudimentary design in  
place at least.  The only major difference between txWebAuth and guard is  
some widening of the ICredentialFactory interface, which is necessary to  
allow for form-based and OAuth flows.

Thanks,

Daniel


From exarkun at twistedmatrix.com  Tue Jan  3 10:54:29 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 03 Jan 2012 15:54:29 -0000
Subject: [Twisted-web] twisted.web.template output encoding
In-Reply-To: <0135E2CB-0A21-4055-A98D-676080D5D103@twistedmatrix.com>
References: <20111126165210.2308.1108209216.divmod.xquotient.319@localhost.localdomain>
	<0135E2CB-0A21-4055-A98D-676080D5D103@twistedmatrix.com>
Message-ID: <20120103155429.2755.144788169.divmod.xquotient.87@localhost6.localdomain6>

On 5 Dec 2011, 08:19 pm, glyph at twistedmatrix.com wrote:
>Sorry it took me so long to get to this.  Hopefully it's still relevant 
>;).

Heh.  Heh heh heh.  Heh.
>On Nov 26, 2011, at 11:52 AM, exarkun at twistedmatrix.com wrote:
>>Apart from various issues relating to the lack of patterns in 
>>twisted.web.template,
>
>I had some trepidation about marking 
><http://twistedmatrix.com/trac/ticket/5040> as "closed" :).  What kind 
>of issues came up with patterns?  Anything you feel needs fixing?

The approach facilitated by #5040 seems to result in much more 
boilerplate than the approach facilitated by Nevow's patterns.  The code 
for #4896 has many, many Elements.  An implementation using Nevow 
probably would have had far fewer, perhaps only one.

Which of these is better, I don't know.  I certainly got bored very 
early on in the #4896 work, though.
>>the main difficulty is in handling non-ascii contents in the 
>>traceback.  Apart from any unicode that may show up in the source code 
>>being rendered (or, perhaps, eventually, the values of variables to be 
>>rendered - though for now I do not plan to implement this) the no- 
>>break space characters which are necessary to get traceback lines 
>>indented properly mean that there is always some non-ascii to include 
>>in the output.
>
>Looking at the actual output now, these &nbsp; characters strike me as 
>an accident of how browsers collapse different types of whitespace. 
>They could be replaced with a <span style="width: 4em;" /> to avoid 
>this problem for now, which is probably more expressive.

If I understood Jonathan's reply properly, it sounds like the &nbsp; 
hack is the best we've got.
>>twisted.web.template encodes its output using UTF-8, and this is not 
>>customizable.  Thus, using twisted.web.template, formatFailure's 
>>result will be a str containing UTF-8 encoded text.  Previously the 
>>result was a str containing only ASCII encoded text, with no-break 
>>space represented as `&nbsp;?.  Consequently, callers of 
>>`formatFailure? will probably mishandle the result - the caller in 
>>`twisted.web.server? does, at least, including the bytes in a page 
>>with a content type of "text/html".
>>
>>The solutions that come to mind are all about removing this 
>>incompatible change and making it so `formatFailure? can continue to 
>>return a str with ASCII-encoded text.
>>
>>One solution is to add support for named entities or numeric character 
>>references to twisted.web.template.  Very likely this is a good idea 
>>regardless (Nevow supported these).
>
>I think that this is probably a necessary feature regardless, 
>eventually.  Did you end up filing a ticket for it?

Yep, this has been filed and is up for review (for weeks now ;): #5408.
>>Another solution is to use a different encoding in 
>>`twisted.web.template? - ASCII, with xmlcharrefreplace as the error 
>>handler.  This is tempting since it avoids an obtrusive non-ASCII 
>>support API (the way Nevow supports these is via `nevow.entities?, 
>>which must be used rather than normal Python unicode objects).
>
>I like this idea, because it's so hard to get wrong even if you have 
>other problems (missing charset, buggy proxies, overly aggressive 
>encoding detection, etc).  We can still say it's UTF-8 but it will work 
>anywhere ASCII will work :).
>>Perhaps another question is whether the encoding used by 
>>`twisted.web.template? should be a parameter.  A related question 
>>raised might be whether `twisted.web.template? should encoded to bytes 
>>at all, or delegate the responsibility for that to code closer to a 
>>socket.
>
>Personal experience looking at profiles of applications which serialize 
>a lot of XML suggests to me that encoding and decoding text in Python 
>is a huge chunk of CPU work and memory footprint; keeping the encoding 
>in t.w.t provides an opportunity for a potentially important 
>optimization which might not be possible if it were done closer to the 
>socket.
>
>For example, if we're generating a long table that generates 10MB of 
>HTML, if this is encoded incrementally (even foregoing any smarter 
>optimizations, like caching the encoded form of strings) then there's a 
>small working set of encoded data which can be collected as the 
>template renders, and by the time the final string is emitted by 
>cStringIO.getvalue() or what have you, you're using 20-ish megabytes of 
>heap to store your UTF-8 bytes (10 in the StringIO and 10 in the str). 
>If you build this as a unicode string instead, you'll end up using 
>50MB; 40MB for your unicode string, 10MB for the decoded bytes.  Part 
>of this is just an implementation issue, but even if Python gets a 
>smarter unicode representation, you still need more space, because you 
>need to store the encoded and decoded representations concurrently.

This all seems to suppose the non-existence of the 
twisted.web.template.flatten
style interface.  Doesn't that give you what's needed to do your 
incremental encoding outside of the flattener?
>
>
>It might be a while until I get around to implementing something smart 
>in this area, but I'd prefer we have an interface that makes such 
>optimizations possible without breaking compatibility.
>>As a work-around in `formatFailure? I can decode the output of the 
>>flattener using UTF-8 and then re-encode it to avoid non-ASCII, but it 
>>seems like this should be solved in `twisted.web.template? rather than 
>>over and over again in application code.
>
>If this does end up happening in formatFailure or anywhere else, please 
>(whoever does it) make sure to file a ticket to fix it; this should 
>never be more than a temporary workaround.

Okay.  #4896 is still up for review, and the branch implementing it does 
use the decode/encode hack.  I'll file a ticket for fixing that if I 
ever get to merge the branch (someone review it please).

Jean-Paul


From glyph at twistedmatrix.com  Wed Jan  4 20:40:45 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 4 Jan 2012 20:40:45 -0500
Subject: [Twisted-web] Porting the features of nevow.guard to
	twisted.web.guard
In-Reply-To: <op.v7ilqqzceyn2q3@tiassa.local>
References: <op.vv5k51pwo3d63n@tiassa.local>
	<20120103142420.2755.618016497.divmod.xquotient.18@localhost6.localdomain6>
	<op.v7ilqqzceyn2q3@tiassa.local>
Message-ID: <E00C97E5-D0DB-4DD6-A27F-4F3F8691C97B@twistedmatrix.com>


On Jan 3, 2012, at 10:38 AM, L. Daniel Burr wrote:

> Hi Jean-Paul,
> 
> 
> On Tue, 03 Jan 2012 08:24:20 -0600, <exarkun at twistedmatrix.com> wrote:
> 
>> On 27 May 2011, 06:47 pm, ldanielburr at gmail.com wrote:
>>> Hi gang,
>>> 
>>> Per a short chat with exarkun (thanks exarkun), I'm posting this to the
>>> list for discussion.
>>> 
>>> A project upon which I am working requires a twisted.web service that
>>> allows a user to delegate authentication/authorization to a third
>>> party,
>>> e.g., Facebook, Twitter, et cetera.  In so doing, I've found myself
>>> missing nevow.guard, since web.guard currently only has out-of-the-box
>>> support for HTTP Auth.  I'd like to see web.guard expand to cover more
>>> kinds of auth, such as form-based auth or the OAuth-based solutions
>>> coming
>>> from so many social graph sites.
>>> 
>>> With this in mind, I asked exarkun about this, and he mentioned that
>>> the
>>> only thing he does not consider to be garbage in nevow.guard is the
>>> feature-set, and that I should port the features to web, discarding the
>>> baggage.
>>> 
>>> I'd like to solicit the list for some guidance as to what those
>>> features
>>> are, or should be, and hopefully end up with a ticket describing the
>>> features to be implemented, which I will then attempt to implement and
>>> contribute to twisted.web.
>> 
>> Hiya Daniel,
>> 
>> This didn't generate as much discussion as I hoped. :)  However, I think
>> you went ahead and started a project - txsomethingsomething?  How is
>> that working out?
>> 
>> Jean-Paul
> 
> There is a project, https://github.com/minskmaz/txWebAuth, to which I  
> contributed a tiny amount of code.  Neither the main author nor myself  
> have done much to progress the work, but there is a rudimentary design in  
> place at least.  The only major difference between txWebAuth and guard is  
> some widening of the ICredentialFactory interface, which is necessary to  
> allow for form-based and OAuth flows.

Thanks for the update, Daniel.

If that's really all there is to it, would this widening of ICredentialFactory be appropriate to just include in Twisted?  Would that help OAuth (and its ilk) move forward in the txEcosystem?

-glyph



From glyph at twistedmatrix.com  Wed Jan  4 20:52:24 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 4 Jan 2012 20:52:24 -0500
Subject: [Twisted-web] twisted.web.template output encoding
In-Reply-To: <20120103155429.2755.144788169.divmod.xquotient.87@localhost6.localdomain6>
References: <20111126165210.2308.1108209216.divmod.xquotient.319@localhost.localdomain>
	<0135E2CB-0A21-4055-A98D-676080D5D103@twistedmatrix.com>
	<20120103155429.2755.144788169.divmod.xquotient.87@localhost6.localdomain6>
Message-ID: <FBC817A9-ED7A-45EF-8799-7E9E758C94A3@twistedmatrix.com>


On Jan 3, 2012, at 10:54 AM, exarkun at twistedmatrix.com wrote:

> On 5 Dec 2011, 08:19 pm, glyph at twistedmatrix.com wrote:
>> Sorry it took me so long to get to this.  Hopefully it's still relevant 
>> ;).
> 
> Heh.  Heh heh heh.  Heh.

So it goes ;-).

>> On Nov 26, 2011, at 11:52 AM, exarkun at twistedmatrix.com wrote:
>>> Apart from various issues relating to the lack of patterns in 
>>> twisted.web.template,
>> 
>> I had some trepidation about marking 
>> <http://twistedmatrix.com/trac/ticket/5040> as "closed" :).  What kind 
>> of issues came up with patterns?  Anything you feel needs fixing?
> 
> The approach facilitated by #5040 seems to result in much more 
> boilerplate than the approach facilitated by Nevow's patterns.  The code 
> for #4896 has many, many Elements.  An implementation using Nevow 
> probably would have had far fewer, perhaps only one.
> 
> Which of these is better, I don't know.  I certainly got bored very 
> early on in the #4896 work, though.

Well, if the approach on #5040 is way more verbose, what does it have in its favor?  Simplicity?  I must imagine that we can get both somehow.

>>> the main difficulty is in handling non-ascii contents in the 
>>> traceback.  Apart from any unicode that may show up in the source code 
>>> being rendered (or, perhaps, eventually, the values of variables to be 
>>> rendered - though for now I do not plan to implement this) the no- 
>>> break space characters which are necessary to get traceback lines 
>>> indented properly mean that there is always some non-ascii to include 
>>> in the output.
>> 
>> Looking at the actual output now, these &nbsp; characters strike me as 
>> an accident of how browsers collapse different types of whitespace. 
>> They could be replaced with a <span style="width: 4em;" /> to avoid 
>> this problem for now, which is probably more expressive.
> 
> If I understood Jonathan's reply properly, it sounds like the &nbsp; 
> hack is the best we've got.

I don't _want_ to read Jonathan's reply thoroughly enough to understand it, so I'll have to take your word for it.

>>> twisted.web.template encodes its output using UTF-8, and this is not 
>>> customizable.  Thus, using twisted.web.template, formatFailure's 
>>> result will be a str containing UTF-8 encoded text.  Previously the 
>>> result was a str containing only ASCII encoded text, with no-break 
>>> space represented as `&nbsp;?.  Consequently, callers of 
>>> `formatFailure? will probably mishandle the result - the caller in 
>>> `twisted.web.server? does, at least, including the bytes in a page 
>>> with a content type of "text/html".
>>> 
>>> The solutions that come to mind are all about removing this 
>>> incompatible change and making it so `formatFailure? can continue to 
>>> return a str with ASCII-encoded text.
>>> 
>>> One solution is to add support for named entities or numeric character 
>>> references to twisted.web.template.  Very likely this is a good idea 
>>> regardless (Nevow supported these).
>> 
>> I think that this is probably a necessary feature regardless, 
>> eventually.  Did you end up filing a ticket for it?
> 
> Yep, this has been filed and is up for review (for weeks now ;): #5408.

Great, okay.

>>> Another solution is to use a different encoding in 
>>> `twisted.web.template? - ASCII, with xmlcharrefreplace as the error 
>>> handler.  This is tempting since it avoids an obtrusive non-ASCII 
>>> support API (the way Nevow supports these is via `nevow.entities?, 
>>> which must be used rather than normal Python unicode objects).
>> 
>> I like this idea, because it's so hard to get wrong even if you have 
>> other problems (missing charset, buggy proxies, overly aggressive 
>> encoding detection, etc).  We can still say it's UTF-8 but it will work 
>> anywhere ASCII will work :).
>>> Perhaps another question is whether the encoding used by 
>>> `twisted.web.template? should be a parameter.  A related question 
>>> raised might be whether `twisted.web.template? should encoded to bytes 
>>> at all, or delegate the responsibility for that to code closer to a 
>>> socket.
>> 
>> Personal experience looking at profiles of applications which serialize 
>> a lot of XML suggests to me that encoding and decoding text in Python 
>> is a huge chunk of CPU work and memory footprint; keeping the encoding 
>> in t.w.t provides an opportunity for a potentially important 
>> optimization which might not be possible if it were done closer to the 
>> socket.
>> 
>> For example, if we're generating a long table that generates 10MB of 
>> HTML, if this is encoded incrementally (even foregoing any smarter 
>> optimizations, like caching the encoded form of strings) then there's a 
>> small working set of encoded data which can be collected as the 
>> template renders, and by the time the final string is emitted by 
>> cStringIO.getvalue() or what have you, you're using 20-ish megabytes of 
>> heap to store your UTF-8 bytes (10 in the StringIO and 10 in the str). 
>> If you build this as a unicode string instead, you'll end up using 
>> 50MB; 40MB for your unicode string, 10MB for the decoded bytes.  Part 
>> of this is just an implementation issue, but even if Python gets a 
>> smarter unicode representation, you still need more space, because you 
>> need to store the encoded and decoded representations concurrently.
> 
> This all seems to suppose the non-existence of the 
> twisted.web.template.flatten
> style interface.  Doesn't that give you what's needed to do your 
> incremental encoding outside of the flattener?

Hmmmmmm.  Okay, generating a couple of short encoded strings does leave one with a much shorter working set.  There should definitely be a lot more convenience functions in this area to just do the right thing in the various contexts one might want to flatten something (for which there are already a few tickets, such as <http://tm.tl/5395>).  As I recall you've spoken against the flatten() style interface because it makes error-handling somewhat more challenging, but if #5395 were fixed it could take care of those complexities internally.

>> It might be a while until I get around to implementing something smart 
>> in this area, but I'd prefer we have an interface that makes such 
>> optimizations possible without breaking compatibility.
>>> As a work-around in `formatFailure? I can decode the output of the 
>>> flattener using UTF-8 and then re-encode it to avoid non-ASCII, but it 
>>> seems like this should be solved in `twisted.web.template? rather than 
>>> over and over again in application code.
>> 
>> If this does end up happening in formatFailure or anywhere else, please 
>> (whoever does it) make sure to file a ticket to fix it; this should 
>> never be more than a temporary workaround.
> 
> Okay.  #4896 is still up for review, and the branch implementing it does 
> use the decode/encode hack.  I'll file a ticket for fixing that if I 
> ever get to merge the branch (someone review it please).

Why not just file the ticket now?  As you said before: "Heh.  Heh heh heh.  Heh."  It might be a while before sufficient review bandwidth becomes available.  (If history is any indicator, things will stall out between now and February, and March will be crazily active.)

-glyph



From ldanielburr at me.com  Wed Jan  4 20:52:47 2012
From: ldanielburr at me.com (L. Daniel Burr)
Date: Wed, 04 Jan 2012 19:52:47 -0600
Subject: [Twisted-web] Porting the features of nevow.guard to
 twisted.web.guard
In-Reply-To: <E00C97E5-D0DB-4DD6-A27F-4F3F8691C97B@twistedmatrix.com>
References: <op.vv5k51pwo3d63n@tiassa.local>
	<20120103142420.2755.618016497.divmod.xquotient.18@localhost6.localdomain6>
	<op.v7ilqqzceyn2q3@tiassa.local>
	<E00C97E5-D0DB-4DD6-A27F-4F3F8691C97B@twistedmatrix.com>
Message-ID: <op.v7k8umyleyn2q3@tiassa.local>

Hi Glyph,

On Wed, 04 Jan 2012 19:40:45 -0600, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jan 3, 2012, at 10:38 AM, L. Daniel Burr wrote:
>

[SNIP]

>> Hi Jean-Paul,
>>
>>
>> There is a project, https://github.com/minskmaz/txWebAuth, to which I
>> contributed a tiny amount of code.  Neither the main author nor myself
>> have done much to progress the work, but there is a rudimentary design  
>> in
>> place at least.  The only major difference between txWebAuth and guard  
>> is
>> some widening of the ICredentialFactory interface, which is necessary to
>> allow for form-based and OAuth flows.
>
> Thanks for the update, Daniel.
>
> If that's really all there is to it, would this widening of  
> ICredentialFactory be appropriate to just include in Twisted?  Would  
> that help OAuth (and its ilk) move forward in the txEcosystem?
>
> -glyph
>

That's the only change to an existing twisted interface.  The rest can be  
done via checkers and appropriate guard-style wrapper resources.  The  
change to ICredentialFactory is so tiny that I don't know if there is any  
meaningful benefit to making that change in twisted proper, but I'm fine  
with whatever works for the interested parties.

Thanks,

L. Daniel Burr


From johnaherne at rocs.co.uk  Sat Jan 14 04:30:43 2012
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sat, 14 Jan 2012 09:30:43 +0000
Subject: [Twisted-web] cooperate and keeping data integrity in response
Message-ID: <CAKmUHjapLc8QAWyOx_+zmY7jo_hgGk+GJ0i98S43vEYAJ5KO=g@mail.gmail.com>

I have been looking at JPCalderones example of using web.request with JSON
which seems much like what I want.

One thing I am not clear about is if I get a lot of queries coming in more
or less simultaneously and I am using cooperate to allow other functions to
run, will I need to guard against my data in a list being overwritten by
subsequent requests.

The way I see it the functions to read data and and store it in my list are
in danger of impacting each other.

The response is being built cooperatively bit by bit to permit other
functions to run so it could happen that the next request overwrites my
list where the database query is being stored.

If this is a danger, then I need to prevent this, which seems to imply that
I will need to block each request and not service another request until the
previous one has completed.

Have I got that right or am I way off target or have I missed the obvious

What would be good is to keep on servicing requests so that the response is
good but keep the data integrity.

The test code I am using is JP's with some minor variations shown below. I
hope it formats correctly.

Thanks for any help.

Regards

John Aherne

#Asynchronous JSON
#Today in #twisted.web the topic of generating large JSON responses
#in a Twisted Web server came up. The problem was that the data being
#serialized into JSON was so large that the JSON serialization process
#itself would block the web server, preventing other requests from being
#serviced.
#
#The first solution that came up was to split the web server into two
#pieces, so that the URLs which could have these JSON responses were
#served by a different process than was serving the rest. This is a
#pretty decent solution, and it also provides the benefit of using extra
#CPU cores if there are any available. In this case, it complicated
#things a little since it meant sharing a session across two processes.
#So we went looking for another approach.
#
#It turns out that the json module supports incremental serialization.
#When I saw the JSONEncoder.iterencode method, I thought it would be
#great used in combination with cooperate to create a producer. This
#would let an application serialize a large structure to JSON without
#multiple processes, threads, or unreasonably blocking the reactor.
#
#Here's the little bit of glue necessary to make things work:
import cgi
from json import JSONEncoder
from twisted.enterprise import adbapi
from twisted.internet.task import cooperate

#db = sqlite3.connect('c:\\sqlite\\test.db')
#cur = db.cursor()
dbpool = adbapi.ConnectionPool("pyodbc","DSN=testsql",cp_reconnect='True')

class AsyncJSON(object):
    def __init__(self, value):
        self._value = value


    def beginProducing(self, consumer):
        #print 'value', self._value
        self._consumer = consumer
        self._iterable = JSONEncoder().iterencode(self._value)
        #print 'iterable', self._iterable
        self._consumer.registerProducer(self, True)
        self._task = cooperate(self._produce())
        d = self._task.whenDone()
        d.addBoth(self._unregister)
        return d


    def pauseProducing(self):
        self._task.pause()


    def resumeProducing(self):
        self._task.resume()


    def stopProducing(self):
        self._task.stop()


    def _produce(self):
        for chunk in self._iterable:
            #print 'chunk', chunk
            self._consumer.write(chunk)
            yield None


    def _unregister(self, passthrough):
        self._consumer.unregisterProducer()
        return passthrough



#By using the iterencode method, this avoids spending too much time
#generating json output at once. Instead, a little bit of the input
#will be serialized at a time, and each short resulting string is available
#from the iterator returned by iterencode.
#
#By using cooperate, the _produce generator will iterated in a way that
#lets it cooperate with the reactor and other event sources/handlers.
#A few chunks of json data will be written to the consumer, then execution
#will switch away to something else, then come back and a few more will
#be written, and so on.
#
#And by using the producer/consumer interface, if the HTTP client which
#issued the request doesn't read the results as fast as they're being
#generated, the server will stop generating new output until the client
#catches up.
#
#Altogether, this provides a very cool, efficient way to generate JSON
#output.
#
#Here's an example to make it easier to see how one might use AsyncJSON
#in a resource:
#
from twisted.web.resource import Resource
from twisted.web.server import NOT_DONE_YET
from twisted.web.server import Site
from twisted.internet import reactor

def read_pcodes(pcode, request):
    """ Read postcode data and premise data for single postocde   """

    sql_mail = """select rcmplc01.substreet,rcmplc01.street,
                         rcmplc01.sublocality, rcmplc01.locality,
                         rcmplc01.town,
                         rcmplc01.postcode,
                         rcmplc02.data
                         from rcmplc01
                         left outer join rcmplc02
                         on rcmplc01.postcode = rcmplc02.postcode
                         where rcmplc01.postcode = ?
             """
    pcode = pcode.strip().upper()
    def run():
        return dbpool.runQuery(sql_mail,(pcode,))
    d = run()
    d.addCallback(read_result, request)
    d.addErrback(read_failure,request)
    return d

def read_failure(o, request):
    print 'failure', str(o)
    request.finish()


def read_result(res, request):
    """ read result for postcode lookup. Build return list"""
    #print 'res', res
    print 'len res', len(res)
    my_list = []
    for item in res:
my_list.append([item[0], item[1], item[2], item[3], item[4], item[5]])
    d = AsyncJSON(my_list).beginProducing(request)
    d.addCallback(lambda ignored: request.finish())
    d.addErrback(got_error, request)

root = Resource()
root.putChild("json", PostcodeFinder())
factory = Site(root)
reactor.listenTCP(8086, factory)
reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20120114/04cfeb66/attachment.htm 

From johnaherne at rocs.co.uk  Sat Jan 14 05:18:28 2012
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sat, 14 Jan 2012 10:18:28 +0000
Subject: [Twisted-web] cancelling agent.request
Message-ID: <CAKmUHjZPSm6jOA02VK0whvv3qT7hA+KTbhe+hEqoG8GpDCvv0A@mail.gmail.com>

I have a situation where a service I am using will occasionally not respond
for considerable periods - hours not minutes.

I am using cooperate and yield to loop round a series of requests I want to
make

The actual function to send the request returns a deferred to the yield. I
add the callbacks onto this and set a calllater to fire in 30 seconds.

If that fires I can then cancel the deferred. But I think I ought to be
cancelling the request as well else I assume I will be leaking request
objects that might not get dealt with.

However, I can't see where I might cancel the request. Or should I be
dropping the connection associated with the request and if so where would I
be doing that.

Have I got that right?

Thanks for any info.

John Aherne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20120114/6375fa2a/attachment.htm 

From johnaherne at rocs.co.uk  Sat Jan 14 06:36:47 2012
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sat, 14 Jan 2012 11:36:47 +0000
Subject: [Twisted-web] cooperate and keeping data integrity in response
Message-ID: <CAKmUHjaD=QboxCw31z0ofganT-hRDu3UbGtQ5i8T8pe2wSA9eQ@mail.gmail.com>

Sorry about the double post. But copy/paste failed me. I left out part
of the code.

Now included


I have been looking at JPCalderones example of using web.request with JSON
which seems much like what I want.

One thing I am not clear about is if I get a lot of queries coming in more
or less simultaneously and I am using cooperate to allow other functions to
run, will I need to guard against my data in a list being overwritten by
subsequent requests.

The way I see it the functions to read data and and store it in my list are
in danger of impacting each other.

The response is being built cooperatively bit by bit to permit other
functions to run so it could happen that the next request overwrites my
list where the database query is being stored.

If this is a danger, then I need to prevent this, which seems to imply that
I will need to block each request and not service another request until the
previous one has completed.

Have I got that right or am I way off target or have I missed the obvious

What would be good is to keep on servicing requests so that the response is
good but keep the data integrity.

The test code I am using is JP's with some minor variations shown below. I
hope it formats correctly.

Thanks for any help.

Regards

John Aherne

#Asynchronous JSON
#Today in #twisted.web the topic of generating large JSON responses
#in a Twisted Web server came up. The problem was that the data being
#serialized into JSON was so large that the JSON serialization process
#itself would block the web server, preventing other requests from being
#serviced.
#
#The first solution that came up was to split the web server into two
#pieces, so that the URLs which could have these JSON responses were
#served by a different process than was serving the rest. This is a
#pretty decent solution, and it also provides the benefit of using extra
#CPU cores if there are any available. In this case, it complicated
#things a little since it meant sharing a session across two processes.
#So we went looking for another approach.
#
#It turns out that the json module supports incremental serialization.
#When I saw the JSONEncoder.iterencode method, I thought it would be
#great used in combination with cooperate to create a producer. This
#would let an application serialize a large structure to JSON without
#multiple processes, threads, or unreasonably blocking the reactor.
#
#Here's the little bit of glue necessary to make things work:
import cgi
from json import JSONEncoder
from twisted.enterprise import adbapi
from twisted.internet.task import cooperate

#db = sqlite3.connect('c:\\sqlite\\test.db')
#cur = db.cursor()
dbpool = adbapi.ConnectionPool("pyodbc","DSN=testsql",cp_reconnect='True')

class AsyncJSON(object):
    def __init__(self, value):
        self._value = value


    def beginProducing(self, consumer):
        #print 'value', self._value
        self._consumer = consumer
        self._iterable = JSONEncoder().iterencode(self._value)
        #print 'iterable', self._iterable
        self._consumer.registerProducer(self, True)
        self._task = cooperate(self._produce())
        d = self._task.whenDone()
        d.addBoth(self._unregister)
        return d


    def pauseProducing(self):
        self._task.pause()


    def resumeProducing(self):
        self._task.resume()


    def stopProducing(self):
        self._task.stop()


    def _produce(self):
        for chunk in self._iterable:
            #print 'chunk', chunk
            self._consumer.write(chunk)
            yield None


    def _unregister(self, passthrough):
        self._consumer.unregisterProducer()
        return passthrough



#By using the iterencode method, this avoids spending too much time
#generating json output at once. Instead, a little bit of the input
#will be serialized at a time, and each short resulting string is available
#from the iterator returned by iterencode.
#
#By using cooperate, the _produce generator will iterated in a way that
#lets it cooperate with the reactor and other event sources/handlers.
#A few chunks of json data will be written to the consumer, then execution
#will switch away to something else, then come back and a few more will
#be written, and so on.
#
#And by using the producer/consumer interface, if the HTTP client which
#issued the request doesn't read the results as fast as they're being
#generated, the server will stop generating new output until the client
#catches up.
#
#Altogether, this provides a very cool, efficient way to generate JSON
#output.
#
#Here's an example to make it easier to see how one might use AsyncJSON
#in a resource:
#
from twisted.web.resource import Resource
from twisted.web.server import NOT_DONE_YET
from twisted.web.server import Site
from twisted.internet import reactor

def read_pcodes(pcode, request):
    """ Read postcode data and premise data for single postocde   """

    sql_mail = """select rcmplc01.substreet,rcmplc01.street,
                         rcmplc01.sublocality, rcmplc01.locality,
                         rcmplc01.town,
                         rcmplc01.postcode,
                         rcmplc02.data
                         from rcmplc01
                         left outer join rcmplc02
                         on rcmplc01.postcode = rcmplc02.postcode
                         where rcmplc01.postcode = ?
             """
    pcode = pcode.strip().upper()
    def run():
        return dbpool.runQuery(sql_mail,(pcode,))
    d = run()
    d.addCallback(read_result, request)
    d.addErrback(read_failure,request)
    return d

def read_failure(o, request):
    print 'failure', str(o)
    request.finish()


def read_result(res, request):
    """ read result for postcode lookup. Build return list"""
    #print 'res', res
    print 'len res', len(res)
    my_list = []
    for item in res:
my_list.append([item[0], item[1], item[2], item[3], item[4], item[5]])
    d = AsyncJSON(my_list).beginProducing(request)
    d.addCallback(lambda ignored: request.finish())
    d.addErrback(got_error, request)

class PostcodeFinder(Resource):
    """ Handle http POST requests  for postcode lookup"""
    def render_POST(self, request):
        print 'req', request.args
        if request.args.get('pcode', None):
            pcode = cgi.escape(request.args['pcode'][0]).strip().upper()
            if (pcode[-3:][0].isdigit() and pcode[-2:].isalpha() and
                len(pcode[:len(pcode)-3].strip()) < 5):
                postcode2 = '%s %s' % (pcode[:len(pcode)-3].strip(),pcode[-3:])
                d = read_pcodes(postcode2, request)
            else:
                return 'Not a VALID REQUEST'
        elif request.args.get('street', None):
            m25 = True if request.args.get('M25', None) else False
            d =
read_street(cgi.escape(request.args['street'][0]).strip().upper(),
m25, request)
        elif request.args.get('orgname', None):
            d =
read_orgname(cgi.escape(request.args['orgname'][0]).strip().upper(),
request)
        else:
            return 'Not a VALID REQUEST'
        return NOT_DONE_YET


root = Resource()
root.putChild("json", PostcodeFinder())
factory = Site(root)
reactor.listenTCP(8086, factory)
reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20120114/9eb0631c/attachment-0001.htm 

From exarkun at twistedmatrix.com  Sat Jan 14 10:01:43 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 14 Jan 2012 15:01:43 -0000
Subject: [Twisted-web] cancelling agent.request
In-Reply-To: <CAKmUHjZPSm6jOA02VK0whvv3qT7hA+KTbhe+hEqoG8GpDCvv0A@mail.gmail.com>
References: <CAKmUHjZPSm6jOA02VK0whvv3qT7hA+KTbhe+hEqoG8GpDCvv0A@mail.gmail.com>
Message-ID: <20120114150143.2876.155947345.divmod.xquotient.4@localhost6.localdomain6>

On 10:18 am, johnaherne at rocs.co.uk wrote:
>I have a situation where a service I am using will occasionally not 
>respond
>for considerable periods - hours not minutes.
>
>I am using cooperate and yield to loop round a series of requests I 
>want to
>make
>
>The actual function to send the request returns a deferred to the 
>yield. I
>add the callbacks onto this and set a calllater to fire in 30 seconds.
>
>If that fires I can then cancel the deferred. But I think I ought to be
>cancelling the request as well else I assume I will be leaking request
>objects that might not get dealt with.
>
>However, I can't see where I might cancel the request. Or should I be
>dropping the connection associated with the request and if so where 
>would I
>be doing that.
>
>Have I got that right?

The cancel method of the Deferred returned by Agent.request is probably 
the right API to use to do the cleanup you're interested in.  However, 
cancelation is not specifically implemented for the Agent.request 
Deferred yet.  Though it may sound like one, this is not a contradiction 
due to the way Deferred cancelation works (ideally we would have 
documentation about Deferred cancelation that would explain why this is, 
but we don't).

See http://twistedmatrix.com/trac/ticket/4330 for progress on this issue 
or to contribute.

Jean-Paul


From johnaherne at rocs.co.uk  Sun Jan 15 05:05:57 2012
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 15 Jan 2012 10:05:57 +0000
Subject: [Twisted-web] cancelling agent.request
In-Reply-To: <20120114150143.2876.155947345.divmod.xquotient.4@localhost6.localdomain6>
References: <CAKmUHjZPSm6jOA02VK0whvv3qT7hA+KTbhe+hEqoG8GpDCvv0A@mail.gmail.com>
	<20120114150143.2876.155947345.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <CAKmUHjaHiQoAezD2me5qmJh4w4TcuarfC8V6U=rVN9+bas+Eww@mail.gmail.com>

On Sat, Jan 14, 2012 at 3:01 PM, <exarkun at twistedmatrix.com> wrote:

> On 10:18 am, johnaherne at rocs.co.uk wrote:
> >I have a situation where a service I am using will occasionally not
> >respond
> >for considerable periods - hours not minutes.
> >
> >I am using cooperate and yield to loop round a series of requests I
> >want to
> >make
> >
> >The actual function to send the request returns a deferred to the
> >yield. I
> >add the callbacks onto this and set a calllater to fire in 30 seconds.
> >
> >If that fires I can then cancel the deferred. But I think I ought to be
> >cancelling the request as well else I assume I will be leaking request
> >objects that might not get dealt with.
> >
> >However, I can't see where I might cancel the request. Or should I be
> >dropping the connection associated with the request and if so where
> >would I
> >be doing that.
> >
> >Have I got that right?
>
> The cancel method of the Deferred returned by Agent.request is probably
> the right API to use to do the cleanup you're interested in.  However,
> cancelation is not specifically implemented for the Agent.request
> Deferred yet.  Though it may sound like one, this is not a contradiction
> due to the way Deferred cancelation works (ideally we would have
> documentation about Deferred cancelation that would explain why this is,
> but we don't).
>
> See http://twistedmatrix.com/trac/ticket/4330 for progress on this issue
> or to contribute.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
Thanks for the information.

I did take a look at the ticket. Not sure what I could contribute though.
But will take a closer look.

John Aherne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20120115/01a23083/attachment.htm 

From johnaherne at rocs.co.uk  Sun Jan 15 06:20:28 2012
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 15 Jan 2012 11:20:28 +0000
Subject: [Twisted-web] cancelling agent.request
Message-ID: <CAKmUHjatZHnOLNwsFrHJJ4CNkrZDR8A8O52hW9V0QTCKn7hjOQ@mail.gmail.com>

I've just glanced through 7 years discussion on cancelling defers. So I
think I'll take a breather before going further.

John Aherne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20120115/012cfbe3/attachment.htm 

From exarkun at twistedmatrix.com  Mon Jan 16 08:54:53 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 16 Jan 2012 13:54:53 -0000
Subject: [Twisted-web] cooperate and keeping data integrity in response
In-Reply-To: <CAKmUHjapLc8QAWyOx_+zmY7jo_hgGk+GJ0i98S43vEYAJ5KO=g@mail.gmail.com>
References: <CAKmUHjapLc8QAWyOx_+zmY7jo_hgGk+GJ0i98S43vEYAJ5KO=g@mail.gmail.com>
Message-ID: <20120116135453.2876.533401817.divmod.xquotient.12@localhost6.localdomain6>

On 14 Jan, 09:30 am, johnaherne at rocs.co.uk wrote:
>I have been looking at JPCalderones example of using web.request with 
>JSON
>which seems much like what I want.
>
>One thing I am not clear about is if I get a lot of queries coming in 
>more
>or less simultaneously and I am using cooperate to allow other 
>functions to
>run, will I need to guard against my data in a list being overwritten 
>by
>subsequent requests.
>
>The way I see it the functions to read data and and store it in my list 
>are
>in danger of impacting each other.
>
>The response is being built cooperatively bit by bit to permit other
>functions to run so it could happen that the next request overwrites my
>list where the database query is being stored.

Any time you have shared mutable state, you have this possibility.  You 
do need to take measures to avoid making one request destroy the state 
associated with another request.
>If this is a danger, then I need to prevent this, which seems to imply 
>that
>I will need to block each request and not service another request until 
>the
>previous one has completed.

Serializing (ie, not processing a second request until the first is 
completed) processing is one way to accomplish this.

However, another way to accomplish it is to not have shared mutable 
state.  A quick skim of your code suggests you don't actually have much, 
if any, shared mutable state.

The list holding your database results is a local variable, and each 
request builds its own (as far as I can tell).  There is no danger of 
different requests interfering with each other in this case.

Jean-Paul


From johnaherne at rocs.co.uk  Mon Jan 16 10:33:06 2012
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 16 Jan 2012 15:33:06 +0000
Subject: [Twisted-web] cooperate and keeping data integrity in response
In-Reply-To: <20120116135453.2876.533401817.divmod.xquotient.12@localhost6.localdomain6>
References: <CAKmUHjapLc8QAWyOx_+zmY7jo_hgGk+GJ0i98S43vEYAJ5KO=g@mail.gmail.com>
	<20120116135453.2876.533401817.divmod.xquotient.12@localhost6.localdomain6>
Message-ID: <CAKmUHjYthO8qdHu2WdKHQbN_Ew35Y+LjArRC-ePOm6G7KqN6YQ@mail.gmail.com>

On Mon, Jan 16, 2012 at 1:54 PM, <exarkun at twistedmatrix.com> wrote:

> On 14 Jan, 09:30 am, johnaherne at rocs.co.uk wrote:
> >I have been looking at JPCalderones example of using web.request with
> >JSON
> >which seems much like what I want.
> >
> >One thing I am not clear about is if I get a lot of queries coming in
> >more
> >or less simultaneously and I am using cooperate to allow other
> >functions to
> >run, will I need to guard against my data in a list being overwritten
> >by
> >subsequent requests.
> >
> >The way I see it the functions to read data and and store it in my list
> >are
> >in danger of impacting each other.
> >
> >The response is being built cooperatively bit by bit to permit other
> >functions to run so it could happen that the next request overwrites my
> >list where the database query is being stored.
>
> Any time you have shared mutable state, you have this possibility.  You
> do need to take measures to avoid making one request destroy the state
> associated with another request.
> >If this is a danger, then I need to prevent this, which seems to imply
> >that
> >I will need to block each request and not service another request until
> >the
> >previous one has completed.
>
> Serializing (ie, not processing a second request until the first is
> completed) processing is one way to accomplish this.
>
> However, another way to accomplish it is to not have shared mutable
> state.  A quick skim of your code suggests you don't actually have much,
> if any, shared mutable state.
>
> The list holding your database results is a local variable, and each
> request builds its own (as far as I can tell).  There is no danger of
> different requests interfering with each other in this case.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
Thanks for the reply.

I think I must have been asleep when I asked this.

Someone else pointed this out to me earlier on but I did not have time to
get to a computer before you replied.

Thanks anyway. I shall glue this to me screen for the next week or so.

John Aherne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20120116/de92d601/attachment.htm 

