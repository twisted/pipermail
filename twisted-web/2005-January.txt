From mesozoic at polynode.com  Sun Jan  2 17:06:03 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Sun Jan  2 17:07:22 2005
Subject: [Twisted-web] [PATCH] Pass context to static.File processors
Message-ID: <41D88C6B.7000101@polynode.com>

Attached are patches for twisted.web2 and nevow which will allow File 
processors to take three arguments (path, context, registry). It keeps 
backwards-compatibility for processors that take only (path, registry), 
mainly because they're a pain to update ;)

I can't find any places where the registry is actually used, but I've 
left it in to make backwards-compatibilty easier.

So, anyone's thoughts? Can we put these in?

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
  -- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
Index: nevow/static.py
===================================================================
--- nevow/static.py	(revision 1035)
+++ nevow/static.py	(working copy)
@@ -231,9 +231,15 @@
             else:
                 processor = self.processors.get(fpath.splitext()[1])
             if processor:
-                return (
-                    inevow.IResource(processor(fpath.path, self.registry)),
-                    segments[1:])
+                # Pass our context on to all processors (with backwards-compatibility)
+                try:
+                    resc = processor(fpath.path, ctx, self.registry)
+                except TypeError:
+                    warnings.warn(
+                        '%r: File processors now take three arguments (path, context, registry)'
+                        % (processor), DeprecationWarning, stacklevel=2)
+                    resc = processor(fpath.path, self.registry)
+                return (inevow.IResource(resc), segments[1:])
 
         return self.createSimilarFile(fpath.path), segments[1:]
 
-------------- next part --------------
Index: twisted/web2/static.py
===================================================================
--- twisted/web2/static.py	(revision 12816)
+++ twisted/web2/static.py	(working copy)
@@ -203,7 +203,7 @@
     def putChild(self, name, child):
         self.children[name] = child
         
-    def locateChild(self, request, segments):
+    def locateChild(self, ctx, segments):
         r = self.children.get(segments[0], None)
         if r:
             return r, segments[1:]
@@ -237,9 +237,15 @@
             else:
                 processor = self.processors.get(fpath.splitext()[1])
             if processor:
-                return (
-                    processor(fpath.path, self.registry),
-                    segments[1:])
+                # Pass our context on to all processors (with backwards-compatibility)
+                try:
+                    resc = processor(fpath.path, ctx, self.registry)
+                except TypeError:
+                    warnings.warn(
+                        '%r: File processors now take three arguments (path, context, registry)'
+                        % (processor), DeprecationWarning, stacklevel=2)
+                    resc = processor(fpath.path, self.registry)
+                return (resc, segments[1:])
 
         return self.createSimilarFile(fpath.path), segments[1:]
 
From mohamed at your-site.com  Tue Jan  4 15:04:58 2005
From: mohamed at your-site.com (Mohamed Lrhazi)
Date: Tue Jan  4 15:11:37 2005
Subject: [Twisted-web] nevow.compy.CannotAdapt: WovenContext...
Message-ID: <1104876298.31909.252.camel@6 webmail.nil8r.net 

Sorry resending after a small edit. sent to wrong list by msitake.

I copied some code from an existing site of mine to a new machine and
boom.... does not work anymore :) the code is based on the guard
example... :

It seems the code that fails is:

def render_sessionId(self, context, data):
		sess = inevow.ISession(context)
		return context.tag[sess.uid]

The complete trace follows. Any ideas? I probably forget to install
something... did I?

this is gentoo standard ebuilds for python, twisted and nevow:


2005/01/04 16:31 EST [HTTPChannel,0,127.0.0.1] Traceback (most recent
call last):
          File
"/usr/lib/python2.3/site-packages/twisted/protocols/http.py", line 557,
in requestReceived
            self.process()
          File "/usr/lib/python2.3/site-packages/nevow/appserver.py",
line 129, in process
            return self.site.getResourceFor(
          File
"/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 214,
in addCallback
            callbackKeywords=kw)
          File
"/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 205,
in addCallbacks
            self._runCallbacks()
        --- <exception caught here> ---
          File
"/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 338,
in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File "/usr/lib/python2.3/site-packages/nevow/appserver.py",
line 132, in <lambda>
            lambda resource: inevow.IResource(resource).renderHTTP(self)
          File "/usr/lib/python2.3/site-packages/nevow/rend.py", line
363, in renderHTTP
            return self.flattenFactory(doc, ctx, writer, finisher)
          File "/usr/lib/python2.3/site-packages/nevow/rend.py", line
227, in deferFlattenFactory
            return deferflatten(stan, ctx, writer).addCallback(finisher)
          File "/usr/lib/python2.3/site-packages/nevow/rend.py", line
223, in deferflatten
            drive()
          File "/usr/lib/python2.3/site-packages/nevow/rend.py", line
207, in drive
            deferred, returner = iterable.next()
          File "/usr/lib/python2.3/site-packages/nevow/flat/ten.py",
line 71, in iterflatten
            for item in gen:
          File
"/usr/lib/python2.3/site-packages/nevow/flat/flatstan.py", line 89, in
TagSerializer
            yield serialize(toBeRenderedBy,context)
          File "/usr/lib/python2.3/site-packages/nevow/flat/ten.py",
line 53, in serialize
            return serializer(obj, context)
          File
"/usr/lib/python2.3/site-packages/nevow/flat/flatstan.py", line 215, in
DirectiveSerializer
            return serialize(renderer, context)
          File "/usr/lib/python2.3/site-packages/nevow/flat/ten.py",
line 53, in serialize
            return serializer(obj, context)
          File
"/usr/lib/python2.3/site-packages/nevow/flat/flatstan.py", line 199, in
MethodSerializer
            return FunctionSerializer(original, context, nocontext)
          File
"/usr/lib/python2.3/site-packages/nevow/flat/flatstan.py", line 184, in
FunctionSerializer
            result = original(context, data)
          File "<string>", line 209, in render_sessionId

          File "/usr/lib/python2.3/site-packages/nevow/compy.py", line
73, in __call__
            raise CannotAdapt("%s (type %s) cannot be adapted to %s." %
        nevow.compy.CannotAdapt: WovenContext(tag=Tag('',
specials={'render': Unset}, children=[''])) (type
nevow.context.WovenContext) cannot be adapted to <class
'nevow.inevow.ISession'>.




From tv at twistedmatrix.com  Tue Jan  4 16:55:59 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue Jan  4 16:56:45 2005
Subject: [Twisted-web] Please review: make nevow vhosts log to separate files
Message-ID: <41DB2D0F.7080705@twistedmatrix.com>

nevow/sandbox/tv/logvhost/ contains code to make vhosts log to separate
files. It is currently written by subclassing nevow classes, but after
I get a nod or two, will be rewritten as a proper branch.

I'd like some guidance on how to proceed, how you want to solve things.
I'll just cut-n-paste the README here:

Adds a new interface, 'IVirtualHost', which is remembered in context
whenever a virtual host is activated (even the default counts as
activation). The value is the root resource of the active virtual
host.

If the root resource of the vhost has the attribute 'vhostName', that
is taken to be the canonical name of the vhost, and logs are written
with this name into the directory containing the file logPath.

The API may be ugly.

The monkeypatching needed to make it works may be ugly.

But nevow _needs_ to be able to log virtual hosts to separate files.

From dp at ulaluma.com  Wed Jan  5 08:17:15 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Jan  5 08:17:23 2005
Subject: [Twisted-web] nevow.compy.CannotAdapt: WovenContext...
In-Reply-To: <1104876298.31909.252.camel@6 webmail.nil8r.net 
References: <1104876298.31909.252.camel@6 webmail.nil8r.net 
Message-ID: <E1F752B9-5F2C-11D9-B7AC-000A95864FC4@ulaluma.com>


On Jan 4, 2005, at 2:04 PM, Mohamed Lrhazi wrote:

> I copied some code from an existing site of mine to a new machine and
> boom.... does not work anymore :) the code is based on the guard
> example... :
>
> It seems the code that fails is:
>
> def render_sessionId(self, context, data):
> 		sess = inevow.ISession(context)
> 		return context.tag[sess.uid]

It looks to me like the version of Nevow you are using is ancient. I 
can't imagine why else this would fail.

dp


From dp at ulaluma.com  Wed Jan  5 20:51:36 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Jan  5 20:51:42 2005
Subject: [Twisted-web] How to get rid of web logs? 
In-Reply-To: <Pine.LNX.4.56.0410041203120.7794@klondike.cis.upenn.edu>
References: <Pine.LNX.4.56.0409301352220.4417@klondike.cis.upenn.edu>
	<Pine.LNX.4.56.0410041203120.7794@klondike.cis.upenn.edu>
Message-ID: <4333E2C4-5F96-11D9-B7AC-000A95864FC4@ulaluma.com>


On Oct 4, 2004, at 9:06 AM, Yun Mao wrote:

> It seems nobody else cares about this problem. Anyway here is the
> solution:
>
> class NevowSiteNoLog(appserver.NevowSite):
>     def log(self, request):
>         return
>
> Yun

People do care about this problem. The simpler solution is to tell 
twisted.web to log accesses to another file, or to /dev/null.

site = NevowSite(root, logPath='web.log')

dp


From tazzo at email.it  Fri Jan  7 06:26:59 2005
From: tazzo at email.it (Tazzo)
Date: Fri Jan  7 06:27:39 2005
Subject: [Twisted-web] formless problem
Message-ID: <2ad4749cfab93f5c1d84e6c4b0a199ee@213.140.11.195>

I wrote this simple app, where the RootPage has only a single
child, named \'form\'. This child \'FormBuilder\' is directly taken from
formbuilder.py in the example directory of last svn Nevow.
The child is correctly rendered but when I try to add an element
to the form, it doesn\'t appear (the formbuilder example work well
if a try the Nevow example). 

Any help?

############################
###  Root Page
############################
from nevow import loaders
from nevow import rend
from nevow import tags as T
from nevow.stan import directive
from formbuilder import FormBuilder
class RootPage(rend.Page):
    addSlash = True
    docFactory = loaders.stan( T.html [ T.body [ T.a ( href=\'form\' ) [
\'form page\' ] ] ] )
    
    def child_form(self, ctx):
        return FormBuilder()
############################ 
 --
 Email.it, the professional e-mail, gratis per te: http://www.email.it/f
 
 Sponsor:
 Con la Pietra Naturale puoi grigliare carne, pesce e verdura direttamente
in tavola!
 Clicca qui: http://adv.email.it/cgi-bin/foclick.cgi?mid=2743&d=20050107

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050107/92897fb0/attachment.htm
From eric.faurot at gmail.com  Fri Jan  7 06:50:56 2005
From: eric.faurot at gmail.com (Eric Faurot)
Date: Fri Jan  7 06:51:04 2005
Subject: [Twisted-web] formless problem
In-Reply-To: <2ad4749cfab93f5c1d84e6c4b0a199ee@213.140.11.195>
References: <2ad4749cfab93f5c1d84e6c4b0a199ee@213.140.11.195>
Message-ID: <e012d6b5050107055067db722f@mail.gmail.com>

> I wrote this simple app, where the RootPage has only a single
> child, named 'form'. This child 'FormBuilder' is directly taken from
> formbuilder.py in the example directory of last svn Nevow.
> The child is correctly rendered but when I try to add an element
> to the form, it doesn't appear (the formbuilder example work well
> if a try the Nevow example). 
> 
> Any help?

Because you always return a new formbuilder when accessing child_form.
So modifications are lost after the request is processed.
You must keep it in the user session somehow. 

Eric.

From foom at fuhm.net  Fri Jan  7 09:32:07 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Jan  7 09:32:19 2005
Subject: [Twisted-web] formless problem
In-Reply-To: <e012d6b5050107055067db722f@mail.gmail.com>
References: <2ad4749cfab93f5c1d84e6c4b0a199ee@213.140.11.195>
	<e012d6b5050107055067db722f@mail.gmail.com>
Message-ID: <AC2F65C0-60C9-11D9-8D68-000A95A50FB2@fuhm.net>


On Jan 7, 2005, at 8:50 AM, Eric Faurot wrote:

>> I wrote this simple app, where the RootPage has only a single
>> child, named 'form'. This child 'FormBuilder' is directly taken from
>> formbuilder.py in the example directory of last svn Nevow.
>> The child is correctly rendered but when I try to add an element
>> to the form, it doesn't appear (the formbuilder example work well
>> if a try the Nevow example).
>>
>> Any help?
>
> Because you always return a new formbuilder when accessing child_form.
> So modifications are lost after the request is processed.
> You must keep it in the user session somehow.

Or if you want to be like the original example, where the form is 
global for all users, make the FormBuilder instance once, and always 
return the same thing. There's lots of ways you could do that, but the 
easiest way is:
-??? def child_form(self, ctx):
-??????? return FormBuilder()
+??? child_form = FormBuilder()

James

From tazzo at email.it  Fri Jan  7 10:15:34 2005
From: tazzo at email.it (Tazzo)
Date: Fri Jan  7 10:16:08 2005
Subject: [Twisted-web] formless problem
Message-ID: <a8848e16ca73f8c60760a66cf5925818@213.140.11.195>


>Or if you want to be like the original example, where the form is 
>global for all users, make the FormBuilder instance once, and always 
>return the same thing. There's lots of ways you could do that, but the 
>easiest way is:
>-    def child_form(self, ctx):
>-        return FormBuilder()
>+    child_form = FormBuilder()
>
>James

I know, but my real intention is to build the form
as a fragment of several pages. 
I mean, I want to build a form as in formbuilder example 
or similar, but render it in many pages like:

def render_myForm(self,ctx,data):
    return FormBuilder()

as a piece of different pages but with the same behavior, 
depending (the behavior) only from the url request. 
So if I build a form that add a named 'box' in my page column, 
the form is the same for all my pages. 
 --
 Email.it, the professional e-mail, gratis per te: http://www.email.it/f
 
 Sponsor:
 Bisogno di liquidit?? Non devi spiegare per cosa. Fino a 4.000 ? a casa tua
 Clicca qui: http://adv.email.it/cgi-bin/foclick.cgi?mid=2291&d=20050107



From foom at fuhm.net  Fri Jan  7 11:11:32 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Jan  7 11:11:30 2005
Subject: [Twisted-web] formless problem
In-Reply-To: <a8848e16ca73f8c60760a66cf5925818@213.140.11.195>
References: <a8848e16ca73f8c60760a66cf5925818@213.140.11.195>
Message-ID: <8F5F02F8-60D7-11D9-8D68-000A95A50FB2@fuhm.net>


On Jan 7, 2005, at 12:15 PM, Tazzo wrote:
> I know, but my real intention is to build the form
> as a fragment of several pages.
> I mean, I want to build a form as in formbuilder example
> or similar, but render it in many pages like:
>
> def render_myForm(self,ctx,data):
>     return FormBuilder()
>
> as a piece of different pages but with the same behavior,
> depending (the behavior) only from the url request.
> So if I build a form that add a named 'box' in my page column,
> the form is the same for all my pages.

Store it in a module-level variable, or really anywhere else that is 
going to stick around, then.

myForm = FormBuilder()

class XYZ:
     def render_myForm(self,ctx,data):
         return myForm

James


From andrea at cpushare.com  Fri Jan  7 18:39:19 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan  7 18:39:12 2005
Subject: [Twisted-web] minor compile/typo fix
Message-ID: <20050108013919.GG4597@dualathlon.random>

This fixed a compilation problem for me. I didn't actually check the
correctness of the code, so this needs checking.

Index: twisted/web2/requtil.py
===================================================================
--- twisted/web2/requtil.py	(revision 12831)
+++ twisted/web2/requtil.py	(working copy)
@@ -59,8 +59,8 @@
             return request.site.getSession(sessionCookie)
         except KeyError:
             pass
-    session = Session(request.site, request.site.mkuid()
-    site.setSession(session)
+    session = Session(request.site, request.site.mkuid())
+    request.site.setSession(session)
     request.addCookie(cookiename, session.uid, path='/')
     request.setComponent(ISession, session) # is this needed?
     return session

From foom at fuhm.net  Fri Jan  7 19:14:40 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Jan  7 19:14:51 2005
Subject: [Twisted-web] minor compile/typo fix
In-Reply-To: <20050108013919.GG4597@dualathlon.random>
References: <20050108013919.GG4597@dualathlon.random>
Message-ID: <0DBDC777-611B-11D9-86E3-000A95A50FB2@fuhm.net>

On Jan 7, 2005, at 8:39 PM, Andrea Arcangeli wrote:
> This fixed a compilation problem for me. I didn't actually check the
> correctness of the code, so this needs checking.

That whole file is almost certainly incorrect. It's basically just 
acting as a repository for stuff that should eventually be updated but 
that I don't want to deal with just yet.

James


From andrea at cpushare.com  Mon Jan 10 03:18:55 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon Jan 10 03:18:44 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
Message-ID: <20050110101855.GP4597@dualathlon.random>

This fixes a server exception that you can trigger by using an url like
the one in subject on a page that misses the binding.

This fixed the problem for my application, it's probably the right fix
too. I noticed it after logging out of the session and pressing some
back on the web browser, the forms that were valid inside the account,
weren't valid in the guest area and caused exceptions.

BTW, I wrote an exception handler that sends me any exception by email
and redirects the user to a nice message (so you can debug any problem
before people complains and you don't show the sensitive data to the
user) if the client IP is != localhost (so you can still debug it great
with the formatter in localhost). If anybody wants to see the code or to
merge it into nevow feel free to ask (though it depends on twisted for
delivering the email).

Index: nevow/rend.py
===================================================================
--- nevow/rend.py	(revision 1057)
+++ nevow/rend.py	(working copy)
@@ -127,7 +127,8 @@
             ctx.remember(request, inevow.IRequest)
             cf = iformless.IConfigurableFactory(self)
             c = cf.locateConfigurable(ctx, configurableName)
-            return self.webFormPost(request, self, c, ctx, bindingName, request.args)
+            if c:
+                return self.webFormPost(request, self, c, ctx, bindingName, request.args)
         return NotFound
 
 

From radeex at gmail.com  Mon Jan 10 03:23:25 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon Jan 10 03:23:28 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <20050110101855.GP4597@dualathlon.random>
References: <20050110101855.GP4597@dualathlon.random>
Message-ID: <60ed19d405011002236cd8d252@mail.gmail.com>

Definitely interested in that traceback emailer. That would rock for
deployed sites.


On Mon, 10 Jan 2005 11:18:55 +0100, Andrea Arcangeli
<andrea@cpushare.com> wrote:
> BTW, I wrote an exception handler that sends me any exception by email
> and redirects the user to a nice message (so you can debug any problem
> before people complains and you don't show the sensitive data to the
> user) if the client IP is != localhost (so you can still debug it great
> with the formatter in localhost). If anybody wants to see the code or to
> merge it into nevow feel free to ask (though it depends on twisted for
> delivering the email).


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash

From general at eepatents.com  Mon Jan 10 07:41:46 2005
From: general at eepatents.com (Ed Suominen)
Date: Mon Jan 10 07:41:49 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <60ed19d405011002236cd8d252@mail.gmail.com>
References: <20050110101855.GP4597@dualathlon.random>
	<60ed19d405011002236cd8d252@mail.gmail.com>
Message-ID: <200501100641.46510.general@eepatents.com>

I would be interested, too.

Personally, I don't see the big deal about twisted dependency for Nevow 
stuff. To me, it's like saying humans are dependent on water.

---
Ed Suominen
Registered Patent Agent
Open-Source Software Author (yes, both...)
Web Site: http://www.eepatents.com
Example Nevow/Twisted Site: http://valuablepatents.com


On Monday 10 January 2005 02:23 am, Christopher Armstrong wrote:
> Definitely interested in that traceback emailer. That would rock for
> deployed sites.
>
>
> On Mon, 10 Jan 2005 11:18:55 +0100, Andrea Arcangeli
>
> <andrea@cpushare.com> wrote:
> > BTW, I wrote an exception handler that sends me any exception by
> > email and redirects the user to a nice message (so you can debug
> > any problem before people complains and you don't show the
> > sensitive data to the user) if the client IP is != localhost (so
> > you can still debug it great with the formatter in localhost). If
> > anybody wants to see the code or to merge it into nevow feel free
> > to ask (though it depends on twisted for delivering the email).


From jadestorm at nc.rr.com  Mon Jan 10 08:41:26 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Mon Jan 10 08:41:28 2005
Subject: [Twisted-web] Nevow and Authentication
Message-ID: <39479.152.1.4.40.1105371686.squirrel@152.1.4.40>

Hi folk!

I'm having issues wrapping my mind around the best way to handle this, so
I'm hoping maybe you all have a quick answer for me.

So, I am using nevow to build a web admin interface for a python-based
jabber transport.  I prepare the site as follows:
                site =
appserver.NevowSite(webadmin.WebAdmin(pytrans=app.transportSvc))
                reactor.listenTCP(int(config.webport), site)

The WebAdmin root node is:
class WebAdmin(rend.Page):

and goes from there based loosely around some of the examples.  Now, the
problem is, I need to add authentication to the mix, and the examples show
use of a portal, but I can not put two and two together to figure out how
to  have both authentication and the rend-based template engine.  Is there
something simple that I am missing here?  All I need is a simple basic
auth requirement to get to the WebAdmin piece.

Thanks much!

Daniel

-- 
"The most addictive drug in the world is music."
     - The Lost Boyz




From dialtone at divmod.com  Mon Jan 10 08:52:49 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jan 10 08:52:51 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <200501100641.46510.general@eepatents.com>
Message-ID: <20050110155249.32125.973459964.divmod.quotient.4731@ohm>

On Mon, 10 Jan 2005 06:41:46 -0800, Ed Suominen <general@eepatents.com> wrote:
>I would be interested, too.
> 
> Personally, I don't see the big deal about twisted dependency for Nevow 
> stuff. To me, it's like saying humans are dependent on water.

It's probably time to start working on a sort of Nevow-extras to provide additional components/features that wouldn't fit well in Nevow (maybe because of dependencies).


Because I also think that a good addition would be the sessionPersist module in Quotient and a TransactionalPage for Atop.

A checker against postgresql or something like that for async auth and such.

What are your opinions?

From andrea at cpushare.com  Mon Jan 10 09:51:30 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon Jan 10 09:51:21 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <60ed19d405011002236cd8d252@mail.gmail.com>
References: <20050110101855.GP4597@dualathlon.random>
	<60ed19d405011002236cd8d252@mail.gmail.com>
Message-ID: <20050110165130.GX4597@dualathlon.random>

On Mon, Jan 10, 2005 at 09:23:25PM +1100, Christopher Armstrong wrote:
> Definitely interested in that traceback emailer. That would rock for
> deployed sites.

I did it for my site, indeed ;).

Here the relevant part:

DEBUG_IP = '127.0.0.1'
[..]
from cpushare.web.web import XMLDIR, DEBUG_IP

class basepage_class(rend.Page):
[..]
	def locateChild(self, ctx, segments):
		ctx.remember(page_404(), inevow.ICanHandleNotFound)

		req = inevow.IRequest(ctx)
		if req.getClientIP() != DEBUG_IP:
			#ctx.remember(appserver.UninformativeExceptionHandler(), inevow.ICanHandleException)
			ctx.remember(MyExceptionHandler(), inevow.ICanHandleException)

		return super(basepage_class, self).locateChild(ctx, segments)
[..]

# error pages below

class error_page_class(basepage_class):
	def render_last_link(self, ctx, data):
		referer = inevow.IRequest(ctx).getHeader('referer')
		if referer:
			return ctx.tag[tags.a(href=referer)['previous page']]
		else:
			return ctx.tag[tags.a(href=url.root)['home page']]

class internal_server_error(error_page_class):
	docFactory = loaders.xmlfile('internal_server_error.xml', XMLDIR)

class page_404(error_page_class):
	__implements__ = inevow.ICanHandleNotFound, error_page_class.__implements__
	docFactory = loaders.xmlfile('404.xml', XMLDIR)

	def renderHTTP_notFound(self, ctx):
		inevow.IRequest(ctx).setResponseCode(404)
		return self.renderHTTP(ctx)

INTERNAL_SERVER_ERROR = 'internal_server_error'

class MyExceptionHandler(object):
	__implements__ = inevow.ICanHandleException
	def renderHTTP_exception(self, ctx, reason):
		log.err(reason)
		mail.send_exception(reason)

		request = inevow.IRequest(ctx)
		from twisted.web import util, server
		util.redirectTo(flat.flatten(url.URL.fromContext(ctx).click('/' + INTERNAL_SERVER_ERROR), ctx), request)
		server.Request.finish(request)

	def renderInlineException(self, context, reason):
		log.err(reason)
		mail.send_exception(reason)

		return """<div style="border: 1px dashed red; color: red; clear: both">[[ERROR]]</div>"""
[..]

here the mail.py module:

from twisted.mail.smtp import sendmail
from email.MIMEText import MIMEText

SMTP_SERVER = 'localhost'

def send_exception(reason):
	FROM = 'postmaster@cpushare.com'
	SUBJECT = 'Cpushare Exception'
	TO = 'postmaster@cpushare.com'
	MSG = reason.getTraceback()

	msg = MIMEText(MSG)
	msg['Subject'] = SUBJECT
	msg['From'] = FROM
	msg['To'] = TO
	return sendmail(SMTP_SERVER, FROM, TO, msg)


Then you've to implement the '/' + INTERNAL_SERVER_ERROR page separately
from this.

Sorry for the kernel-like coding style (8 tabs and underscores instead
of uppercase capital letters), but I tend to write it faster that way
and it's more readable to me. It's very easy to convert to a more
pythonic coding style if needed ;).

Hope this helps.

From andrea at cpushare.com  Mon Jan 10 10:03:40 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon Jan 10 10:03:28 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <20050110155249.32125.973459964.divmod.quotient.4731@ohm>
References: <200501100641.46510.general@eepatents.com>
	<20050110155249.32125.973459964.divmod.quotient.4731@ohm>
Message-ID: <20050110170340.GY4597@dualathlon.random>

On Mon, Jan 10, 2005 at 03:52:49PM +0000, Valentino Volonghi wrote:
> On Mon, 10 Jan 2005 06:41:46 -0800, Ed Suominen <general@eepatents.com> wrote:
> >I would be interested, too.
> > 
> > Personally, I don't see the big deal about twisted dependency for Nevow 
> > stuff. To me, it's like saying humans are dependent on water.
> 
> It's probably time to start working on a sort of Nevow-extras to
> provide additional components/features that wouldn't fit well in Nevow
> (maybe because of dependencies).
> 
> 
> Because I also think that a good addition would be the sessionPersist module in Quotient and a TransactionalPage for Atop.
> 
> A checker against postgresql or something like that for async auth and such.
> 
> What are your opinions?

In terms of size, Nevow seems still pretty small (at least if compared
to twisted etc.. ;). So perpahps rather than separating it from Nevow,
we could simply create a submodule that is ok to depend on twisted (then
of course you won't be allowed to import it unless you're using
twisted). The email tracker is just an example of that kind of code that
is twisted dependent but that I believe everybody wants to use in
production (and in turn it would be inefficient having to rewrite or
cut-and-paste at best). OTOH I believe the exception mail tracker is
small enough that even if it gets merged in nevow.appserver (or a more
separate module like nevow.extras) that might be ok (even with local
imports since the exception handler it's not performance critical). I
don't know about the postgres and the other bits you mention (so far I
tried pgasync but it's not working correctly and its interface is
inefficient since it requires duplicating lots of code so at the very
least that needs fixing, while psycopg2 rocks).

Another misconception of pgasync is that it's not true a connection is
not expensive. If using ssl on a remote box connection handshake is very
expensive both for cpu and RTT delays, infact it may be more expensive
than the query itself (especially if run through the internet with bad
rtt). So pooling the connections is generally a good thing (even with
pgasync where doing it locally doesn't require clone() and normally
nobody uses ssl locally ;).

From dialtone at divmod.com  Mon Jan 10 10:39:33 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jan 10 10:39:36 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <20050110170340.GY4597@dualathlon.random>
Message-ID: <20050110173933.32125.1203761504.divmod.quotient.4833@ohm>

On Mon, 10 Jan 2005 18:03:40 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:

> In terms of size, Nevow seems still pretty small (at least if compared
> to twisted etc.. ;). So perpahps rather than separating it from Nevow,
> we could simply create a submodule that is ok to depend on twisted (then
> of course you won't be allowed to import it unless you're using
> twisted). The email tracker is just an example of that kind of code that

Twisted dependency is just for this specific case. But what about depending on Atop, or on a particular xml parser or xpath implementation (I seem to recall somebody wrote another loader implementation for a templating language that he designed).
There's also the chance to be depending on PIL or something else.

The package would be very eterogeneous in dependancies and I don't think that giving Nevow so many of those will help, whereas creating an external package (which can also install itself under nevow.extras) could be a good solution.

> is twisted dependent but that I believe everybody wants to use in
> production (and in turn it would be inefficient having to rewrite or
> cut-and-paste at best). OTOH I believe the exception mail tracker is
> small enough that even if it gets merged in nevow.appserver (or a more
> separate module like nevow.extras) that might be ok (even with local
> imports since the exception handler it's not performance critical). 

You can also provide an hook for an action to take place once the exception is raised. This could be also accepted in Nevow probably.

> I
> don't know about the postgres and the other bits you mention (so far I
> tried pgasync but it's not working correctly and its interface is
> inefficient since it requires duplicating lots of code so at the very
> least that needs fixing, while psycopg2 rocks).
> 
> Another misconception of pgasync is that it's not true a connection is
> not expensive. If using ssl on a remote box connection handshake is very
> expensive both for cpu and RTT delays, infact it may be more expensive
> than the query itself (especially if run through the internet with bad
> rtt). So pooling the connections is generally a good thing (even with
> pgasync where doing it locally doesn't require clone() and normally
> nobody uses ssl locally ;).

This is good feedback for jamwt probably :)

From dp at ulaluma.com  Mon Jan 10 14:14:31 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Jan 10 14:15:00 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <20050110155249.32125.973459964.divmod.quotient.4731@ohm>
References: <20050110155249.32125.973459964.divmod.quotient.4731@ohm>
Message-ID: <9E6EEE4E-634C-11D9-9E95-000A95864FC4@ulaluma.com>


On Jan 10, 2005, at 7:52 AM, Valentino Volonghi aka Dialtone wrote:
>
> It's probably time to start working on a sort of Nevow-extras to 
> provide additional components/features that wouldn't fit well in Nevow 
> (maybe because of dependencies).
>
>
> Because I also think that a good addition would be the sessionPersist 
> module in Quotient and a TransactionalPage for Atop.
>
> A checker against postgresql or something like that for async auth and 
> such.
>
> What are your opinions?

These items, and other items which are of general use for an out of the 
box "Application server" which encompasses web serving, session 
management and persistence, are slated for inclusion in a new 
"application server built on top of twisted.web, nevow, and atop" 
package which those of us at divmod are calling mantissa. There is a 
small amount of work towards this in the quotient svn branch 
glyph/capman-something-or-other, but it'll probably be a while before 
we have enough time to organize a release (after restructuring all code 
that belongs in it).

dp


From andrea at cpushare.com  Tue Jan 11 03:27:51 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 11 03:27:41 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <9E6EEE4E-634C-11D9-9E95-000A95864FC4@ulaluma.com>
References: <20050110155249.32125.973459964.divmod.quotient.4731@ohm>
	<9E6EEE4E-634C-11D9-9E95-000A95864FC4@ulaluma.com>
Message-ID: <20050111102751.GI26799@dualathlon.random>

On Mon, Jan 10, 2005 at 01:14:31PM -0800, Donovan Preston wrote:
> box "Application server" which encompasses web serving, session 
> management and persistence, are slated for inclusion in a new 
> "application server built on top of twisted.web, nevow, and atop" 

The way you're modelling the webserver with atop is not correct.  You
can't do synchronous I/O in twisted context.  That's fine for the
examples directory to keep them simple, but if you're planning something
more serious than the example directory, you just can't go that way (I
mean with a database that will not be loaded all in ram when you start
the application). As a workaround you should at least use: find -type f
-exec cp {} /dev/null \;, so that if you've enough cache it may help,
but that cache will be polluted during backup, so it's not going to work
well as a workaround.

To provide a scalable framework you must create a separate thread and
pass up the Item with perspective broker. I considered using bsddb and
pass up the item with a remote object with PB myself when writing my
server, but at the end it has been an order of magnitude a better
decision to give it up and switch to sql with psycopg2 (suggested by
Valentino). Of course I don't get automatic persistence, but atop also
doesn't provide it, and if I've to call touch, I can as well call
.flush() and .flush() will run the sql code to give the object
persistence.

In theory the ideal for you would be to support the aio support in the
kernel, that gives you everything you need, but that will require a
significant change in twisted, since twisted will have to use sleep in
aio_complete and not in poll anymore (and all poll calls will have to be
submitted with io_submit).

Then there's a major conflict between epoll and waiting for aio
completion, so it's not like the above would be a final solution, and I
give epoll more priority on the twisted side which is the webserver.
Plus having the db in a separate task will scale better in smp (nevow is
quite cpu hungry).

The bottom line is: at the moment using aio would be an huge
complication and it's worthless to do it until we can use epoll and aio
at the same time. So if you want to use atop for something big, you've
to put it in a different task, and that will make it a lot more
complicated than a normal sql solution (at least this was the case for
me).

Even the session persistence I'm going to provide it with psycopg2 (not
atop) for the same reason. Plus eventually as Valentino suggested me I
will be able to have multiple webservers sharing the same db, and the
user won't notice switching from one to the other since they've zero
persistence (all persitence is provided by psycopg2, including the
session cookie storage).

Actually my proprietary app involves more servers than just the
webserver and db, the above is only a short description of the web side
of it.

From andrea at cpushare.com  Wed Jan 12 19:21:28 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 12 19:21:15 2005
Subject: [Twisted-web] /__logout__ doesn't expire the session
Message-ID: <20050113022128.GL26799@dualathlon.random>

Because of subject, any data structure linked to the user is still
visible to the webserver if the user explicitly types /__logout__ in the
URL. That doesn't seem very safe behaviour.

The userdb/ in the example directory does this to workaround it:

    def logout(self, request):
        request.getSession().expire()
        request.setComponent(iformless.IRedirectAfterPost, "/"+guard.LOGOUT_AVATAR)

but that workaround is insecure, since the user can type __logout__ by
himself (if he knows the nevow code at least) and logout without
clearing the session.

This problem would have caused a (very minor) security issue to me, but
it might have more serious implications in other apps.

So I'd suggest to expire the session automatically in the __logout__
avatar so that a new fresh (anonymous) session will have to be allocated
after logout.

The last fix I posted isn't applied yet, so I append it again.

My debug code now runs as I expected (i.e. the session is regenerated
after logout and I don't need to expire it by hand anymore insecurely
like userdb does).

Please apply thanks!

Index: nevow/rend.py
===================================================================
--- nevow/rend.py	(revision 1069)
+++ nevow/rend.py	(working copy)
@@ -127,7 +127,8 @@
             ctx.remember(request, inevow.IRequest)
             cf = iformless.IConfigurableFactory(self)
             c = cf.locateConfigurable(ctx, configurableName)
-            return self.webFormPost(request, self, c, ctx, bindingName, request.args)
+            if c:
+                return self.webFormPost(request, self, c, ctx, bindingName, request.args)
         return NotFound
 
 
Index: nevow/guard.py
===================================================================
--- nevow/guard.py	(revision 1069)
+++ nevow/guard.py	(working copy)
@@ -348,7 +348,7 @@
         if segments and segments[0] == LOGIN_AVATAR:
             return self.login(request, s, self.getCredentials(request), segments[1:])
         elif segments and segments[0] == LOGOUT_AVATAR:
-            s.portalLogout(self.portal)
+            s.expire()
             return urlToChild(request, *segments[1:]), ()
         else:
             r = s.resourceForPortal(self.portal)

From andrea at cpushare.com  Wed Jan 12 20:26:57 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 12 20:26:49 2005
Subject: [Twisted-web] defaultLabel formless
Message-ID: <20050113032657.GM26799@dualathlon.random>

I noticed a minor regression in svn (defaultLabel got lost because it
was set to the action string fallback), here the fix (optimizes the new
code a little bit too).

Index: formless/annotate.py
===================================================================
--- formless/annotate.py	(revision 1070)
+++ formless/annotate.py	(working copy)
@@ -732,10 +732,9 @@
                 if description is None:
                     description = adapted.description
 
-                defaultLabel, defaultDescription = labelAndDescriptionFromNameAndDocstring(key, value.__doc__)
-                if label is None:
+                if value.__doc__ is not None:
+                    defaultLabel, defaultDescription = labelAndDescriptionFromNameAndDocstring(key, value.__doc__)
                     label = defaultLabel
-                if description is None:
                     description = defaultDescription
 
                 theMethod = Method(

From dp at ulaluma.com  Wed Jan 12 21:37:56 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Jan 12 21:38:08 2005
Subject: [Twisted-web] /__logout__ doesn't expire the session
In-Reply-To: <20050113022128.GL26799@dualathlon.random>
References: <20050113022128.GL26799@dualathlon.random>
Message-ID: <E57E3F36-651C-11D9-90E6-000A95864FC4@ulaluma.com>


On Jan 12, 2005, at 6:21 PM, Andrea Arcangeli wrote:

> The last fix I posted isn't applied yet, so I append it again.

I checked in the nevow.rend fix, thanks for that. I'm not comfortable 
checking in the guard fix without a bit of thought and investigation. 
The main problem is that glyph originally wrote guard such that each 
session could be logged in to multiple portals at once. But as I am 
looking at the current implementation, I can't imagine how this would 
actually work in practice. I'll comment more about this after some 
further research.

dp


From aerkalov at mi2.hr  Thu Jan 13 12:59:19 2005
From: aerkalov at mi2.hr (Aleksandar Erkalovic)
Date: Thu Jan 13 13:00:27 2005
Subject: [Twisted-web] [announce] tamtam2 0.09 released
Message-ID: <20050113195918.GA24246@boo.mi2.hr>

 Hi,

 i am happy to say that i managed web site and download for my new
 project. tamtam2 is a mixture of wiki and publishing system. 
 plese visit. try it, help with ideas and coding and etc...
 for official release i promise to make better announcement :)

   http://tamtam.mi2.hr:8888/NoviTam/
 
 aco

-- 
 http://aco.mi2.hr/

From tv at twistedmatrix.com  Thu Jan 13 13:35:27 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Jan 13 13:36:06 2005
Subject: [Twisted-web] /__logout__ doesn't expire the session
In-Reply-To: <20050113022128.GL26799@dualathlon.random>
References: <20050113022128.GL26799@dualathlon.random>
Message-ID: <41E6DB8F.3070908@twistedmatrix.com>

Andrea Arcangeli wrote:
> Because of subject, any data structure linked to the user is still
> visible to the webserver if the user explicitly types /__logout__ in the
> URL. That doesn't seem very safe behaviour.
> 
> The userdb/ in the example directory does this to workaround it:
> 
>     def logout(self, request):
>         request.getSession().expire()
>         request.setComponent(iformless.IRedirectAfterPost, "/"+guard.LOGOUT_AVATAR)
> 
> but that workaround is insecure, since the user can type __logout__ by
> himself (if he knows the nevow code at least) and logout without
> clearing the session.
> 
> This problem would have caused a (very minor) security issue to me, but
> it might have more serious implications in other apps.
> 
> So I'd suggest to expire the session automatically in the __logout__
> avatar so that a new fresh (anonymous) session will have to be allocated
> after logout.

As I understand it, that removes "too much state"; that is, you only
asked to logout from this specific realm, where the same person could
be logged into multiple Realms at the same time. Or something like that.

When your Realm returns the 3-tuple

	(inevow.IResource, someResource, logout)

that logout callback is called when you call guard's .logout() or visit
__logout__ (or when the session expires). Clean up the state there. For
instance, if your app-specific state is in
session.setComponent(IMyAppState, state), and thus accessed
with IMyAppState(inevow.ISession(ctx)), you can clean that with
session.unsetComponent(IMyAppState).

Things could be cleaner. That's mostly a matter of good docstrings,
gentle API evolution, and examples.

Things could be simpler. But the design inherits directly from
twisted.cred, and that is up to glyph to defend (most like on the
main twisted mailing list).

From tv at twistedmatrix.com  Thu Jan 13 14:03:18 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Jan 13 14:04:04 2005
Subject: [Twisted-web] defaultLabel formless
In-Reply-To: <20050113032657.GM26799@dualathlon.random>
References: <20050113032657.GM26799@dualathlon.random>
Message-ID: <41E6E216.1020408@twistedmatrix.com>

Andrea Arcangeli wrote:
> I noticed a minor regression in svn (defaultLabel got lost because it
> was set to the action string fallback), here the fix (optimizes the new
> code a little bit too).

Good catch, thank you. I just committed r1077 with a fix and a unit
test.

I disagreed with your patch a bit, as I think explicit labels are
"stronger" than things in docstrings. The logic is a bit different
now, and I also added a unit test for this point of view.

From mesozoic at polynode.com  Thu Jan 13 14:12:22 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Thu Jan 13 14:13:12 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <41E6DB8F.3070908@twistedmatrix.com>
References: <20050113022128.GL26799@dualathlon.random>
	<41E6DB8F.3070908@twistedmatrix.com>
Message-ID: <41E6E436.2020407@polynode.com>

Tommi Virtanen wrote:
> When your Realm returns the 3-tuple
> 
>     (inevow.IResource, someResource, logout)
> 
> that logout callback is called when you call guard's .logout() or visit
> __logout__ (or when the session expires). Clean up the state there. For
> instance, if your app-specific state is in
> session.setComponent(IMyAppState, state), and thus accessed
> with IMyAppState(inevow.ISession(ctx)), you can clean that with
> session.unsetComponent(IMyAppState).

Maybe this could be in an example somewhere, because I (for one) can't 
figure out how to do it. How do you access the session from the logout 
function? It isn't called with any parameters, and from what I can tell 
about IRealm implementors, the requestAvatar method -- whence the logout 
function is returned -- doesn't have access to the session either.

> Things could be simpler. But the design inherits directly from
> twisted.cred, and that is up to glyph to defend (most like on the
> main twisted mailing list).

Glyph did a pretty good job of defending the cred architecture back when 
it was "new cred". See 
http://twistedmatrix.com/pipermail/twisted-python/2003-June/004578.html

 > Things could be cleaner. That's mostly a matter of good docstrings,
 > gentle API evolution, and examples.

Yes, lots of examples :)

The architecture is good, it's just not very clear to many end users how 
to navigate through all the abstractions.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
  -- Salvor Hardin, Isaac Asimov's _Foundation_

From andrea at cpushare.com  Thu Jan 13 16:06:53 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 13 16:06:43 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <41E6E436.2020407@polynode.com>
References: <20050113022128.GL26799@dualathlon.random>
	<41E6DB8F.3070908@twistedmatrix.com>
	<41E6E436.2020407@polynode.com>
Message-ID: <20050113230653.GG5949@dualathlon.random>

On Thu, Jan 13, 2005 at 04:12:22PM -0500, Alex Levy wrote:
> Maybe this could be in an example somewhere, because I (for one) can't 
> figure out how to do it. How do you access the session from the logout 
> function? It isn't called with any parameters, and from what I can tell 

This is indeed the problem.

I even setup a meaningful login function in the root page instead of the
noLogin of most examples:

				if avatar_id is checkers.ANONYMOUS:
					resc = guest.root_page_class()
					resc.realm = self
					return (inevow.IResource, resc, resc.logout)
				else:
					resc = account.root_page_class(avatar_id)
					resc.remember(avatar_id, iweb.IAccount)
					resc.realm = self
					return (inevow.IResource, resc, resc.logout)

problem is that the implementation in the root page is like this:

	def logout(self):
		return None

So it doesnt' get that far.

I'd actually prefer to get a callback so I can truly trap the event, but
I need some way to reach the ctx to do the cleanup. I understand the
twisted auth part must not know anything about the ctx, that's nevow
stuff, but we should find a way to pass the ctx parameter (in a opaque
way from twisted point of view), from nevow to the logout callback.

Now, I don't claim this is really necessairly a relevant problem, if one
is careful and never uses a certain interface from the session in the
guest part, then there's no risk, but if you use it somewhere
(incidentally a page shared between the account and the guest sections),
then there can be a problem.

I may even be ok to code carefully and never share an interface between
guest and account, it's not that bad if you keep it in mind and you make
sure not to share interfaces that attaches to the session, it's possible
to code it safely, but I just feel safer and relieved from the pain of
having to check everything by myself, if it was automatically expired by
logout. So if I do a mistake I will get an exception or anyway I don't
risk exposing sensitive data to the same session but outside the account
area (i.e. after logout). So I've no doubt I feel safer expiring the
session completely even if that means a bit more of traffic for cookie
regeneration. I'd be fine to do it by hand with a callback though (and
if somebody else wants to be more optimzied but less obviously safe, he
can use the unsetComponent in the same callback where I do the expiry).

> The architecture is good, it's just not very clear to many end users how 
> to navigate through all the abstractions.

Here it doesn't seem just not clear, it seems not possible without
any change to the caller to do the cleanup in the logout callback.

From andrea at cpushare.com  Thu Jan 13 16:22:47 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 13 16:22:46 2005
Subject: [Twisted-web] defaultLabel formless
In-Reply-To: <41E6E216.1020408@twistedmatrix.com>
References: <20050113032657.GM26799@dualathlon.random>
	<41E6E216.1020408@twistedmatrix.com>
Message-ID: <20050113232247.GH5949@dualathlon.random>

On Thu, Jan 13, 2005 at 11:03:18PM +0200, Tommi Virtanen wrote:
> Andrea Arcangeli wrote:
> >I noticed a minor regression in svn (defaultLabel got lost because it
> >was set to the action string fallback), here the fix (optimizes the new
> >code a little bit too).
> 
> Good catch, thank you. I just committed r1077 with a fix and a unit
> test.
> 
> I disagreed with your patch a bit, as I think explicit labels are
> "stronger" than things in docstrings. The logic is a bit different
> now, and I also added a unit test for this point of view.

I didn't read your fix, but I tested in and it works fine. Both old and
new API. Thanks.

From andrew-twisted at puzzling.org  Thu Jan 13 16:44:41 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu Jan 13 16:44:48 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <41E6E436.2020407@polynode.com>
References: <20050113022128.GL26799@dualathlon.random>
	<41E6DB8F.3070908@twistedmatrix.com>
	<41E6E436.2020407@polynode.com>
Message-ID: <20050113234441.GC13434@localhost.localdomain>

On Thu, Jan 13, 2005 at 04:12:22PM -0500, Alex Levy wrote:
[...]
> 
> Maybe this could be in an example somewhere, because I (for one) can't 
> figure out how to do it. How do you access the session from the logout 
> function? It isn't called with any parameters, and from what I can tell 
> about IRealm implementors, the requestAvatar method -- whence the logout 
> function is returned -- doesn't have access to the session either.

I'm no cred expert, but isn't this is what the mind is for?

-Andrew.


From jamwt-twistedlist at jamwt.com  Thu Jan 13 12:32:51 2005
From: jamwt-twistedlist at jamwt.com (J Turner)
Date: Fri Jan 14 02:03:12 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <20050110170340.GY4597@dualathlon.random>
References: <200501100641.46510.general@eepatents.com>
	<20050110155249.32125.973459964.divmod.quotient.4731@ohm>
	<20050110170340.GY4597@dualathlon.random>
Message-ID: <20050113193251.GA3573@count.jamwt.com>

On Mon, Jan 10, 2005 at 06:03:40PM +0100, Andrea Arcangeli wrote:
> I
> don't know about the postgres and the other bits you mention (so far I
> tried pgasync but it's not working correctly and its interface is
> inefficient since it requires duplicating lots of code so at the very
> least that needs fixing, while psycopg2 rocks).

What does that mean?  How is the interface inefficient?  How do you have
to duplicate lots of code?  I'm not disagreeing, I'm trying to draw out
more concrete criticism.

Before you answer, you should know that I've released quite a few versions
recently enchancing the api/workflow area.  In the latest version, full
queuing happens.  So this is ok:

--- 
conn = pgasync.connect(**DBARGS)
cursor = conn.cursor()
cursor.execute("insert into ...." ,{"blah"  : "toast"})
conn.commit()
cursor.release()
---

No callbacks required.  Everything queued, including commands issued
before the *real* connection is made.  Only add a callback when you care
about the outcome.  (or to add an errBack, etc).

Also, I added a connection.exFetch()

---
pgasync.connect(**DBARGS).exFetch("select ...").addCallback(lambda rows:
print rows)
---

1 line of code.

Sure, it's still kinda clunky, but that's basically DB API/SQL.  There's
not too much noise up above not related to DB API that (to my knowledge)
all the sync libraries have to deal with as well.

But feel free to offer suggestions, I'm all about improving this.

> Another misconception of pgasync is that it's not true a connection is
> not expensive. If using ssl on a remote box connection handshake is very
> expensive both for cpu and RTT delays, infact it may be more expensive
> than the query itself (especially if run through the internet with bad
> rtt). So pooling the connections is generally a good thing (even with
> pgasync where doing it locally doesn't require clone() and normally
> nobody uses ssl locally ;).

I'm not sure if you know this, but pgasync *does* pool connection.  

pgasync removes connections from the pool when they've been unused for >
30 seconds.  If you have a connection that's gone unused for more than
30 seconds, I doubt the sub-second overhead of connecting is a big deal.

If the pooling needs to be more sophisticated than this, that's
certainly something I'm open to.

When all is said and done, pgasync has, in every test I've tried, shown
to be *much* faster than adbapi/threads/synclib in an async environment
under heavy load. 

Thanks for the input,

 - jamwt

From mesozoic at polynode.com  Fri Jan 14 09:26:30 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Fri Jan 14 09:27:06 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <20050113234441.GC13434@localhost.localdomain>
References: <20050113022128.GL26799@dualathlon.random>	<41E6DB8F.3070908@twistedmatrix.com>	<41E6E436.2020407@polynode.com>
	<20050113234441.GC13434@localhost.localdomain>
Message-ID: <41E7F2B6.6000706@polynode.com>

Andrew Bennetts wrote:
> On Thu, Jan 13, 2005 at 04:12:22PM -0500, Alex Levy wrote:
>>Maybe this could be in an example somewhere, because I (for one) can't 
>>figure out how to do it. How do you access the session from the logout 
>>function? It isn't called with any parameters, and from what I can tell 
>>about IRealm implementors, the requestAvatar method -- whence the logout 
>>function is returned -- doesn't have access to the session either.
> 
> I'm no cred expert, but isn't this is what the mind is for?

Yes, you're right; good call. I'd forgotten about that part.

So, I've attached an example that should allow you to define code that 
runs on logout, and also has full access to the session. I've tested it 
(briefly), so if anyone has any better ideas, they are more than welcome 
to share.

Andrea, this should address your needs. Does anyone else think we should 
make this (or, better yet, a cleaned-up version of it) part of the Nevow 
examples?

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
  -- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
from twisted.application import strports
from twisted.application.service import Application
from twisted.cred.checkers import AllowAnonymousAccess
from twisted.cred.portal import Portal, IRealm
from twisted.cred.credentials import IAnonymous

from nevow import appserver
from nevow import guard
from nevow.inevow import IResource

class Mind:
	def __init__(self, request, credentials):
		self.request = request
		self.credentials = credentials

class MyRealm:
	__implements__ = IRealm,
	
	def requestAvatar(self, avatar_id, mind, *interfaces):
		if IResource in interfaces:
			return (
				IResource, 
				None, # This should be whatever resource you use
				self.createLogout(avatar_id, mind)
				)
		raise NotImplementedError
			
	def createLogout(self, avatar_id, mind):
		def logout():
			# This will be a nevow.guard.GuardSession instance
			session = mind.request.getSession()
			print 'Logging out for', session
		return logout

application = Application('MySite')
portal = Portal(MyRealm())
portal.registerChecker(AllowAnonymousAccess(), IAnonymous)
guarded = guard.SessionWrapper(portal, mindFactory=Mind)
site = appserver.NevowSite(resource=guarded)
svc = strports.service('tcp:8080', site)
svc.setServiceParent(application)
From tv at twistedmatrix.com  Fri Jan 14 11:34:51 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri Jan 14 11:35:40 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <41E7F2B6.6000706@polynode.com>
References: <20050113022128.GL26799@dualathlon.random>	<41E6DB8F.3070908@twistedmatrix.com>	<41E6E436.2020407@polynode.com>	<20050113234441.GC13434@localhost.localdomain>
	<41E7F2B6.6000706@polynode.com>
Message-ID: <41E810CB.4070605@twistedmatrix.com>

Alex Levy wrote:
> So, I've attached an example that should allow you to define code that 
> runs on logout, and also has full access to the session. I've tested it 
> (briefly), so if anyone has any better ideas, they are more than welcome 
> to share.

Ooh. Thank you. I can use that in atleast one of my apps.

If no one else gets to it, I'll put that in nevow/examples.
I just need to dig out from under this pile of todo notes..

From andrea at cpushare.com  Fri Jan 14 11:30:35 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 14 11:49:20 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <41E7F2B6.6000706@polynode.com>
References: <20050113022128.GL26799@dualathlon.random>
	<41E6DB8F.3070908@twistedmatrix.com>
	<41E6E436.2020407@polynode.com>
	<20050113234441.GC13434@localhost.localdomain>
	<41E7F2B6.6000706@polynode.com>
Message-ID: <20050114183035.GG8709@dualathlon.random>

On Fri, Jan 14, 2005 at 11:26:30AM -0500, Alex Levy wrote:
> Yes, you're right; good call. I'd forgotten about that part.
> 
> So, I've attached an example that should allow you to define code that 
> runs on logout, and also has full access to the session. I've tested it 
> (briefly), so if anyone has any better ideas, they are more than welcome 
> to share.
> 
> Andrea, this should address your needs. Does anyone else think we should 
> make this (or, better yet, a cleaned-up version of it) part of the Nevow 
> examples?

Yes I see how the mind works now, there was code in nevow just for this
purpose! So at least the expiry part I can definitely do it in the
logout callback and you can obsolete my proposed patch (unless you feel
safer to apply it and to let special aware users not to do the forced
expiry by passing a variable when creating the sessionwrapper).

However to do everything in the logout callback I need the ctx too, not
only the session (then I could drop an intermediate redirecting page).

I'll try to find a way to move from request to ctx (they're an 1:1
mapping, going from ctx to request is easy with inevow.IRequest, I'm
just not sure about the reverse... ;).

Many thanks!

From andrea at cpushare.com  Fri Jan 14 11:16:27 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 14 11:49:23 2005
Subject: [Twisted-web] /freeform_post!!random causes exceptions
In-Reply-To: <20050113193251.GA3573@count.jamwt.com>
References: <200501100641.46510.general@eepatents.com>
	<20050110155249.32125.973459964.divmod.quotient.4731@ohm>
	<20050110170340.GY4597@dualathlon.random>
	<20050113193251.GA3573@count.jamwt.com>
Message-ID: <20050114181627.GF8709@dualathlon.random>

On Thu, Jan 13, 2005 at 01:32:51PM -0600, J Turner wrote:
> On Mon, Jan 10, 2005 at 06:03:40PM +0100, Andrea Arcangeli wrote:
> > I
> > don't know about the postgres and the other bits you mention (so far I
> > tried pgasync but it's not working correctly and its interface is
> > inefficient since it requires duplicating lots of code so at the very
> > least that needs fixing, while psycopg2 rocks).
> 
> What does that mean?  How is the interface inefficient?  How do you have
> to duplicate lots of code?  I'm not disagreeing, I'm trying to draw out
> more concrete criticism.

Well the code, I checked out svn a few days ago was like this, quite
different from the below more recent one ;).

		def finish(dc,d,cursor):
			cursor.release()
			request = ctx.locate(inevow.IRequest)
			request.setComponent(iformless.IRedirectAfterPost,"/%s" % IPageTitle(ctx))
			d.callback(None)
			^^^^^^^^^^^^^^^^


		d = Deferred()
		^^^^^^^^^^^^^^
		connection = pgasync.connect(**WIKI_DB_ARGS)
		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You must have changed quite some bits in the meantime, thanks.

> Before you answer, you should know that I've released quite a few versions
> recently enchancing the api/workflow area.  In the latest version, full
> queuing happens.  So this is ok:
> 
> --- 
> conn = pgasync.connect(**DBARGS)
> cursor = conn.cursor()
> cursor.execute("insert into ...." ,{"blah"  : "toast"})
> conn.commit()
> cursor.release()
> ---
> 
> No callbacks required.  Everything queued, including commands issued
> before the *real* connection is made.  Only add a callback when you care
> about the outcome.  (or to add an errBack, etc).

So it sounds like you fixed it meanwhile.

Still I'm not convinced creating a new connection (even if you
internally do pooling) is the right API.  I'm also not sure if you've a
maximum number of open connections. The thread limited the number of
connections. I don't dislike having a max number too (but of course it's
a very minor feature).

The part I like less in the API is the pgasync.connect(**DBARGS) with
DBARGS being a global (especially that a gloabl with username and pwd
inside doesn't look very nice IMHO ;). But I can fix this on my side by
hiding it in my own sql_class, but personally I prefer the idea of
passing the username and password to a "pooling class" during startup,
and then to do the operations at runtime on the pooling class.

> But feel free to offer suggestions, I'm all about improving this.

My suggestion is to make it backwards compatible with adbapi.  Isn't
that technically possible or am I missing something? I'd just like to
replace adbapi with pgasync and be done with it.

An API already exists, it's fine if you extend it to provide more
features and more finegrined access to the data, but I don't see why you
can't provide a backwards compatible API, which is also a nicer API IMHO.

If you can make it backwards compatible you've a chance to increase the
userbase quickly IMHO.

What about the type covnversions, does it gets everything right
automatically, like 'false' -> False, numeric -> decimal integer -> int
etc..?

> When all is said and done, pgasync has, in every test I've tried, shown
> to be *much* faster than adbapi/threads/synclib in an async environment
> under heavy load. 

Most probably this is the removal of the futex locks (at least in
linux), I've run an strace on the main twisted thread, when it floods
data, and it's doing nothing but futex locking. Perhaps that could be
optimized a bit on the threaded version too. But I agree for a 2-way
pgasync is probably nicer in performance terms.

From tv at twistedmatrix.com  Fri Jan 14 12:04:05 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri Jan 14 12:04:55 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <20050114183035.GG8709@dualathlon.random>
References: <20050113022128.GL26799@dualathlon.random>	<41E6DB8F.3070908@twistedmatrix.com>	<41E6E436.2020407@polynode.com>	<20050113234441.GC13434@localhost.localdomain>	<41E7F2B6.6000706@polynode.com>
	<20050114183035.GG8709@dualathlon.random>
Message-ID: <41E817A5.3050608@twistedmatrix.com>

Andrea Arcangeli wrote:
> However to do everything in the logout callback I need the ctx too, not
> only the session (then I could drop an intermediate redirecting page).
> 
> I'll try to find a way to move from request to ctx (they're an 1:1
> mapping, going from ctx to request is easy with inevow.IRequest, I'm
> just not sure about the reverse... ;).

This is mostly because the old APIs only passed request to anything,
ctx is a recent addition. Things still need to be fixed to have ctx,
but backwards compatibility and integration with older code is a
challenge.

I want ctx in the access.log writing functions, to know which virtual
host the request was for..

From andrea at cpushare.com  Fri Jan 14 12:33:56 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 14 12:33:41 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <41E817A5.3050608@twistedmatrix.com>
References: <20050113022128.GL26799@dualathlon.random>
	<41E6DB8F.3070908@twistedmatrix.com>
	<41E6E436.2020407@polynode.com>
	<20050113234441.GC13434@localhost.localdomain>
	<41E7F2B6.6000706@polynode.com>
	<20050114183035.GG8709@dualathlon.random>
	<41E817A5.3050608@twistedmatrix.com>
Message-ID: <20050114193356.GI8709@dualathlon.random>

On Fri, Jan 14, 2005 at 09:04:05PM +0200, Tommi Virtanen wrote:
> Andrea Arcangeli wrote:
> >However to do everything in the logout callback I need the ctx too, not
> >only the session (then I could drop an intermediate redirecting page).
> >
> >I'll try to find a way to move from request to ctx (they're an 1:1
> >mapping, going from ctx to request is easy with inevow.IRequest, I'm
> >just not sure about the reverse... ;).
> 
> This is mostly because the old APIs only passed request to anything,
> ctx is a recent addition. Things still need to be fixed to have ctx,
> but backwards compatibility and integration with older code is a
> challenge.
> 
> I want ctx in the access.log writing functions, to know which virtual
> host the request was for..

Ok, no problem, logout isn't reliable anyway since the session can
expire instead of the user logging out, so I'll simply use the mind to
expire the session instead of applying the patch I posted (the security
part).

Thanks everyone!

From tv at twistedmatrix.com  Fri Jan 14 13:23:16 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri Jan 14 13:24:11 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <20050114193356.GI8709@dualathlon.random>
References: <20050113022128.GL26799@dualathlon.random>	<41E6DB8F.3070908@twistedmatrix.com>	<41E6E436.2020407@polynode.com>	<20050113234441.GC13434@localhost.localdomain>	<41E7F2B6.6000706@polynode.com>	<20050114183035.GG8709@dualathlon.random>	<41E817A5.3050608@twistedmatrix.com>
	<20050114193356.GI8709@dualathlon.random>
Message-ID: <41E82A34.8080104@twistedmatrix.com>

Andrea Arcangeli wrote:
> Ok, no problem, logout isn't reliable anyway since the session can
> expire instead of the user logging out, so I'll simply use the mind to
> expire the session instead of applying the patch I posted (the security
> part).

As far as I understand things, session timeout causes all the related
logout functions to be called.

It goes something like this:

one session relates to 0..n logged in portals

portal logout means pretty much nothing to a session

session expiry logs out from all related portals

__logout__ logs out from that particular portal

if you store data in session, they live until session expiry

if you store data in mind, it lives until portal logout (NOTE: this
is the only part I do not grok the code for, so I may be wrong here.
I am pretty sure about the other points)


This should probably be said explicitly in some docstrings.

From mesozoic at polynode.com  Fri Jan 14 14:28:04 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Fri Jan 14 14:28:39 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <41E810CB.4070605@twistedmatrix.com>
References: <20050113022128.GL26799@dualathlon.random>	<41E6DB8F.3070908@twistedmatrix.com>	<41E6E436.2020407@polynode.com>	<20050113234441.GC13434@localhost.localdomain>	<41E7F2B6.6000706@polynode.com>
	<41E810CB.4070605@twistedmatrix.com>
Message-ID: <41E83964.7000701@polynode.com>

Tommi Virtanen wrote:
> If no one else gets to it, I'll put that in nevow/examples.
> I just need to dig out from under this pile of todo notes..

I put a couple files in nevow/examples, named logout_guard.py and 
logout_guard2.py. The first just demonstrates the logout function; the 
second demonstrates how to save values in the session from a resource, 
and then retrieve them from the logout function.

Please take a look; feedback from everyone is more than welcome.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
  -- Salvor Hardin, Isaac Asimov's _Foundation_

From andrea at cpushare.com  Fri Jan 14 15:23:04 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 14 15:23:05 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <20050114193356.GI8709@dualathlon.random>
References: <20050113022128.GL26799@dualathlon.random>
	<41E6DB8F.3070908@twistedmatrix.com>
	<41E6E436.2020407@polynode.com>
	<20050113234441.GC13434@localhost.localdomain>
	<41E7F2B6.6000706@polynode.com>
	<20050114183035.GG8709@dualathlon.random>
	<41E817A5.3050608@twistedmatrix.com>
	<20050114193356.GI8709@dualathlon.random>
Message-ID: <20050114222304.GM8709@dualathlon.random>

On Fri, Jan 14, 2005 at 08:33:56PM +0100, Andrea Arcangeli wrote:
> expire instead of the user logging out, so I'll simply use the mind to
> expire the session instead of applying the patch I posted (the security

I can't expire the session from there, it gets in some sort of recursion
and tries to expire it twice, and the second time it generates an
exception. Not too bad actually but for now I'm fine with a
unsetCompontent which doesn't fire the exception (at least I get the
bonus that it won't require cookie regeneration).

			if interface is inevow.IResource:
				def logout(session):
					def _logout():
						session.unsetComponent(iweb.IAccount)
					return _logout

				if avatar_id is checkers.ANONYMOUS or avatar_id.shutdown:
					resc = guest.root_page_class()
					resc.realm = self
					return (inevow.IResource, resc, lambda : None)
				else:
					resc = account.root_page_class(avatar_id)
					resc.remember(avatar_id, iweb.IAccount)
					resc.realm = self
					session = mind.request.getSession()
					return (inevow.IResource, resc, logout(session))

btw, the logout trick looks quite like an hack, but the only real problem is
that I can't get to the ctx, so I'm fine with the above trick for now.

Thanks everyone.

From andrea at cpushare.com  Fri Jan 14 17:02:23 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 14 17:02:37 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <41E83964.7000701@polynode.com>
References: <20050113022128.GL26799@dualathlon.random>
	<41E6DB8F.3070908@twistedmatrix.com>
	<41E6E436.2020407@polynode.com>
	<20050113234441.GC13434@localhost.localdomain>
	<41E7F2B6.6000706@polynode.com>
	<41E810CB.4070605@twistedmatrix.com>
	<41E83964.7000701@polynode.com>
Message-ID: <20050115000223.GS8709@dualathlon.random>

On Fri, Jan 14, 2005 at 04:28:04PM -0500, Alex Levy wrote:
> second demonstrates how to save values in the session from a resource, 

I actually do it like Donovan suggested, with compy.Adapter and
compy.registerAdapter. But your example looks fine too ;).

From andrea at cpushare.com  Fri Jan 14 17:21:07 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 14 17:20:55 2005
Subject: [Twisted-web] SessionWrapper componentized
Message-ID: <20050115002107.GT8709@dualathlon.random>

I'd need the SessionWrapper componentized so I can use compy to store
global data for the whole site under the sessionwrapper.

Or is there a better way to do it?

Thanks.

Index: nevow/guard.py
===================================================================
--- nevow/guard.py	(revision 1084)
+++ nevow/guard.py	(working copy)
@@ -175,7 +175,7 @@
         request.finish()
         return ''
 
-class SessionWrapper:
+class SessionWrapper(components.Componentized):
 
     __implements__ = inevow.IResource
 
@@ -198,6 +198,7 @@
     secureCookies = True
 
     def __init__(self, portal, cookieKey=None, mindFactory=None, credInterface=None, useCookies=None):
+        components.Componentized.__init__(self)
         self.portal = portal
         if cookieKey is None:
             cookieKey = "woven_session_" + _sessionCookie()

From michael.wilson at gmail.com  Fri Jan 14 18:04:50 2005
From: michael.wilson at gmail.com (Michael Wilson)
Date: Fri Jan 14 18:04:55 2005
Subject: [Twisted-web] Rendering after posts
Message-ID: <613490500501141704484730fa@mail.gmail.com>

In all the examples I've seen, the "way" to render a page after a post
appears to be to set a redirect:

        request.setComponent(iformless.IRedirectAfterPost, "/")

(from examples/userdb.tac)

If I want to include some additional variables in the redirected page,
it seems like that's implemented by passing parameters on the redirect
in the URL.

Is there another way to render another page after a post, WITHOUT
using redirect? (I've tried setting docfactory again, or returning
another instance of rend.Page, but those don't seem to work.

Thanks!

From dp at ulaluma.com  Fri Jan 14 20:09:03 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Fri Jan 14 20:09:24 2005
Subject: [Twisted-web] Rendering after posts
In-Reply-To: <613490500501141704484730fa@mail.gmail.com>
References: <613490500501141704484730fa@mail.gmail.com>
Message-ID: <CF92B37D-66A2-11D9-810C-000A95864FC4@ulaluma.com>


On Jan 14, 2005, at 5:04 PM, Michael Wilson wrote:

> In all the examples I've seen, the "way" to render a page after a post
> appears to be to set a redirect:
>
>         request.setComponent(iformless.IRedirectAfterPost, "/")
>
> (from examples/userdb.tac)
>
> If I want to include some additional variables in the redirected page,
> it seems like that's implemented by passing parameters on the redirect
> in the URL.
>
> Is there another way to render another page after a post, WITHOUT
> using redirect? (I've tried setting docfactory again, or returning
> another instance of rend.Page, but those don't seem to work.

The thing you return from the autocallable is available as IHand(ctx) 
during the redirected-to web request. The generally accepted way of 
rendering a different page upon redirect is to return it and then do 
something like this in your base class:

def locateChild(self, ctx, segments):
     renderAfterPost = IHand(ctx, None)
     if compy.implements(renderAfterPost, IResource):
         return renderAfterPost, ()
         ## If you just want to render the thing returned from the 
autocallable without
         ## doing any further url traversal, return () as the segments 
and renderAfterPost
         ## will be used to render this request.
         ... call the superclass ...

This results in servers whose page contents change depending on whether 
a form was posted recently, which I don't particularily like. Another 
way to do it would be to reserve a special url of the site for 
rendering "after post status" pages. In your autocallable, set 
IRedirectAfterPost to some url which never changes, like "/hand". Then, 
make the following Page available from that url (probably by setting 
the child_hand class attribute to an instance of the following class, 
on your root page):

class HandPage(object):
     def locateChild(self, ctx, segments):
         return NotFound

     def renderHTTP(self, ctx, segments):
         renderAfterPost = IHand(ctx, None)
         if compy.implements(renderAfterPost, IResource):
             return renderAfterPost.renderHTTP(ctx)
         return "No hand to render."

Since people generally seem to want to be able to do this, even though 
formless was designed to be rest-style and this trick doesn't really 
fit, I will probably be putting the first trick directly into 
rend.Page. This way, returning a Page from any autocallable would Just 
Work, even if it means that page will only render in that way on the 
first redirect after the form post.

(BTW, the above technique still does a redirect, even though you'd 
explicitly asked for a way to do this without redirecting -- I'll think 
about whether returning a Page from an autocallable should result in 
the posted-to URL rendering that Page, or the original, redirected-to 
URL rendering that Page)

dp


From dialtone at divmod.com  Sat Jan 15 04:06:14 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sat Jan 15 04:06:17 2005
Subject: [Twisted-web] SessionWrapper componentized
In-Reply-To: <20050115002107.GT8709@dualathlon.random>
Message-ID: <20050115110614.3168.95162450.divmod.quotient.2204@ohm>



On Sat, 15 Jan 2005 01:21:07 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>I'd need the SessionWrapper componentized so I can use compy to store
> global data for the whole site under the sessionwrapper.
> 
> Or is there a better way to do it?

The site already support remembering stuff 'sitewide'

site = appserver.NevowSite(resource=root)
site.remember(foo, IFoo)
guarded = guard.SessionWrapper(site)
..

Now IFoo is remember for all users.

You can also do:
page_instance.remember(bar, IBar)
And now you have a global user cache.

And so on with more nested contexts

From andrea at cpushare.com  Sat Jan 15 17:26:47 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 15 17:26:50 2005
Subject: [Twisted-web] SessionWrapper componentized
In-Reply-To: <20050115110614.3168.95162450.divmod.quotient.2204@ohm>
References: <20050115002107.GT8709@dualathlon.random>
	<20050115110614.3168.95162450.divmod.quotient.2204@ohm>
Message-ID: <20050116002647.GC9373@dualathlon.random>

On Sat, Jan 15, 2005 at 11:06:14AM +0000, Valentino Volonghi wrote:
> 
> 
> On Sat, 15 Jan 2005 01:21:07 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
> >I'd need the SessionWrapper componentized so I can use compy to store
> > global data for the whole site under the sessionwrapper.
> > 
> > Or is there a better way to do it?
> 
> The site already support remembering stuff 'sitewide'
> 
> site = appserver.NevowSite(resource=root)
> site.remember(foo, IFoo)
> guarded = guard.SessionWrapper(site)
> ..
> 
> Now IFoo is remember for all users.
> 
> You can also do:
> page_instance.remember(bar, IBar)
> And now you have a global user cache.
> 
> And so on with more nested contexts

Works fine. Actually I was already using site.remember for two other
things, but they were not web related, so I didn't had the idea I could use to
cache nevow stuff too ;). (the sessionwrapper looked a level of
indirection closer to nevow, but the site is actually much closer since
I reach it with IBar(ctx) (instead of IBar(inevow.ISession(ctx).guard))

So please forget my patch (I already backed it out from my tree too).

Thanks!

From andrea at cpushare.com  Sat Jan 15 17:55:38 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 15 17:55:40 2005
Subject: [Twisted-web] Re: /__logout__ doesn't expire the session
In-Reply-To: <41E83964.7000701@polynode.com>
References: <20050113022128.GL26799@dualathlon.random>
	<41E6DB8F.3070908@twistedmatrix.com>
	<41E6E436.2020407@polynode.com>
	<20050113234441.GC13434@localhost.localdomain>
	<41E7F2B6.6000706@polynode.com>
	<41E810CB.4070605@twistedmatrix.com>
	<41E83964.7000701@polynode.com>
Message-ID: <20050116005538.GD9373@dualathlon.random>

btw, there is another (minor) problem in the userdb example, that is
using formless to do the ILogout, will cause the logout to jump into the
home with carryover set. The carryover screwup the cache, so if you
happen to type "/" again (like following an home link), you'll find
yourself pointing to the "member" page, not to the guest page. Because
the last time you've really watched the "/" URL (without carryover) you
were on the member part of the site.

So I'm not using the redirectafter post anymore to avoid carryover, and
everything is working fine now (I must only not share the same paths I
use in the memeber context with the guest part, except for the "/" root
itself which is handled by nevow itself in the login/logout procedure
that disables the cache automatically [via post I guess]).

there's an illegal chr in userdb.tac that prevents running it in
svn, here the compile fix.

Index: examples/userdb/userdb.tac
===================================================================
--- examples/userdb/userdb.tac	(revision 1084)
+++ examples/userdb/userdb.tac	(working copy)
@@ -482,4 +482,4 @@
 )
 
 application = service.Application("UserManager1")
-strports.service("8080", site).?setServiceParent(application)
+strports.service("8080", site).setServiceParent(application)

From jamwt-twistedlist at jamwt.com  Mon Jan 17 18:53:02 2005
From: jamwt-twistedlist at jamwt.com (J Turner)
Date: Mon Jan 17 18:52:50 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050114181627.GF8709@dualathlon.random>
References: <200501100641.46510.general@eepatents.com>
	<20050110155249.32125.973459964.divmod.quotient.4731@ohm>
	<20050110170340.GY4597@dualathlon.random>
	<20050113193251.GA3573@count.jamwt.com>
	<20050114181627.GF8709@dualathlon.random>
Message-ID: <20050118015302.GA86088@count.jamwt.com>

On Fri, Jan 14, 2005 at 07:16:27PM +0100, Andrea Arcangeli wrote:
> On Thu, Jan 13, 2005 at 01:32:51PM -0600, J Turner wrote:
> > On Mon, Jan 10, 2005 at 06:03:40PM +0100, Andrea Arcangeli wrote:
> You must have changed quite some bits in the meantime, thanks.

Yep, much was changed to make the API pain go away.

> Still I'm not convinced creating a new connection (even if you
> internally do pooling) is the right API.  I'm also not sure if you've a
> maximum number of open connections. The thread limited the number of
> connections. I don't dislike having a max number too (but of course it's
> a very minor feature).
> 
> The part I like less in the API is the pgasync.connect(**DBARGS) with
> DBARGS being a global (especially that a gloabl with username and pwd
> inside doesn't look very nice IMHO ;). But I can fix this on my side by
> hiding it in my own sql_class, but personally I prefer the idea of
> passing the username and password to a "pooling class" during startup,
> and then to do the operations at runtime on the pooling class.

Yeah, I agree.  I'm not completely sold on that part either.  It's the
awkward bit that snuck out of the "meet db api halfway" thing.  I will
probably be wrapping a simple container of some kind around it in the
future, that keeps the db args.

> > But feel free to offer suggestions, I'm all about improving this.
> 
> My suggestion is to make it backwards compatible with adbapi.  Isn't
> that technically possible or am I missing something? I'd just like to
> replace adbapi with pgasync and be done with it.
> 
> An API already exists, it's fine if you extend it to provide more
> features and more finegrined access to the data, but I don't see why you
> can't provide a backwards compatible API, which is also a nicer API IMHO.
> 
> If you can make it backwards compatible you've a chance to increase the
> userbase quickly IMHO.

We had some talks about this in #twisted.web, and most seem to agree
that this is true.  dialtone has been working on an adbapi wrapper, and
it's very, very thin (like 30 lines) and seems to do the job.

I'm not a huge fan of *encouraging* the use of adbapi in new projects,
however.  DB API is used by every single other project.  It's not really
me that invented a new API.  :)

Plus, I cannot make a true runInteraction, since the called function is
assumed to be executed in a thread.  As far as runQuery() goes, that's
basically connection.exFetch().  And runOperation is a trivial
addition...

> What about the type covnversions, does it gets everything right
> automatically, like 'false' -> False, numeric -> decimal integer -> int
> etc..?

It should!  protocol.py attempts to do all conversions based on the
OIDs.  But if I missed something, it's a quick fix: let me know!

> > When all is said and done, pgasync has, in every test I've tried, shown
> > to be *much* faster than adbapi/threads/synclib in an async environment
> > under heavy load. 
> 
> Most probably this is the removal of the futex locks (at least in
> linux), I've run an strace on the main twisted thread, when it floods
> data, and it's doing nothing but futex locking. Perhaps that could be
> optimized a bit on the threaded version too. But I agree for a 2-way
> pgasync is probably nicer in performance terms.

I don't know the exact reasons, but particularly under load (lots of
concurrent connections/threads,) pgasync is much, much faster.  This is
both on FreeBSD and Linux.

 - jamwt

From prabaharpython at yahoo.co.in  Tue Jan 18 02:50:04 2005
From: prabaharpython at yahoo.co.in (Mosas)
Date: Tue Jan 18 02:50:39 2005
Subject: [Twisted-web] Sample code to run twisted web server
Message-ID: <20050118095004.71487.qmail@web8202.mail.in.yahoo.com>

Dear All,

    Can anyone send some sample scripts to run in
the twisted webserver.  
    EspeciallY I am in need of sample rpy scripts.

________________________________________________________________________
Yahoo! India Matrimony: Find your life partner online
Go to: http://yahoo.shaadi.com/india-matrimony

From orbitz at ezabel.com  Tue Jan 18 06:00:39 2005
From: orbitz at ezabel.com (orbitz)
Date: Tue Jan 18 06:00:47 2005
Subject: [Twisted-web] Sample code to run twisted web server
In-Reply-To: <20050118095004.71487.qmail@web8202.mail.in.yahoo.com>
References: <20050118095004.71487.qmail@web8202.mail.in.yahoo.com>
Message-ID: <41ED0877.7020309@ezabel.com>

Doing .rpy's tends to stink, it's afflicted by problems of persistence 
last time I used it. Why not just make a full web app that runs it's own 
server? There are plenty of examples of that in the examples dir which 
comes with nevow.


Mosas wrote:

>Dear All,
>
>    Can anyone send some sample scripts to run in
>the twisted webserver.  
>    EspeciallY I am in need of sample rpy scripts.
>
>________________________________________________________________________
>Yahoo! India Matrimony: Find your life partner online
>Go to: http://yahoo.shaadi.com/india-matrimony
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web@twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
>
>  
>



From andrea at cpushare.com  Tue Jan 18 06:24:09 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 18 06:25:05 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050118015302.GA86088@count.jamwt.com>
References: <200501100641.46510.general@eepatents.com>
	<20050110155249.32125.973459964.divmod.quotient.4731@ohm>
	<20050110170340.GY4597@dualathlon.random>
	<20050113193251.GA3573@count.jamwt.com>
	<20050114181627.GF8709@dualathlon.random>
	<20050118015302.GA86088@count.jamwt.com>
Message-ID: <20050118132409.GD17943@dualathlon.random>

On Mon, Jan 17, 2005 at 07:53:02PM -0600, J Turner wrote:
> Yep, much was changed to make the API pain go away.

Indeed. I just happened to read it just a few days before ;).

> probably be wrapping a simple container of some kind around it in the
> future, that keeps the db args.

Ok fine. Otherwise I would have to do it in my app, and you can save
some code if you do it in the lib.

> > My suggestion is to make it backwards compatible with adbapi.  Isn't
> > that technically possible or am I missing something? I'd just like to
> > replace adbapi with pgasync and be done with it.
> > 
> > An API already exists, it's fine if you extend it to provide more
> > features and more finegrined access to the data, but I don't see why you
> > can't provide a backwards compatible API, which is also a nicer API IMHO.
> > 
> > If you can make it backwards compatible you've a chance to increase the
> > userbase quickly IMHO.
> 
> We had some talks about this in #twisted.web, and most seem to agree
> that this is true.  dialtone has been working on an adbapi wrapper, and
> it's very, very thin (like 30 lines) and seems to do the job.

This sounds great.

> I'm not a huge fan of *encouraging* the use of adbapi in new projects,
> however.  DB API is used by every single other project.  It's not really
> me that invented a new API.  :)

;) The point is that I hava to depend on the twisted API for my app, not
on DB API. There is no way I can handle an unstable API for the DB side
while developing my app, the overhead would be too huge, I don't have
time to maintain two APIs and adbapi is the only one I'm confortable to
depend right now. I choosed python only to go in production as fast as I
possibly can, I've truly no time to help on what's not strictly need for
my app, not more than answering these emails ;).

> Plus, I cannot make a true runInteraction, since the called function is
> assumed to be executed in a thread.  As far as runQuery() goes, that's
> basically connection.exFetch().  And runOperation is a trivial
> addition...

What's the difference between running it in a thread or not?

I've noticed myself a strange behaviour. If in the callback of adbapi I
run "raise 'something'", the exception handler page is not called before
rendering, but it's called in the middle of rendering. And in turn the
redirect to my /internal_server_error page doesn't trigger (the html is
interrupted in the middle, and the page is half rendered in the web
browser). So for now I'm catching the error when the db is disconnectd
and I print "no information available". For all other kind of exceptions
instead they jump immediatly to the internal_server_error. Is this
normal or is it a bug? Why isn't nevow waiting all deferred to complete,
before starting rendering the page? The deferred in question is the
value of an hash passed to the n:render="mapping" methid.

Something like this:

{ nr_accounts: d }

d is the deferred, and nevow starts rendering before waiting for it.
Then when d returns Failure("something"), it stops the page in the
middle. 

For now my workaround works. I know I'm going offtopic with pgasync. But
since you've mentioned the execution on a different thread I wondered
that it was related.

> > What about the type covnversions, does it gets everything right
> > automatically, like 'false' -> False, numeric -> decimal integer -> int
> > etc..?
> 
> It should!  protocol.py attempts to do all conversions based on the
> OIDs.  But if I missed something, it's a quick fix: let me know!

If you make the API compatible I'll give it a spin! But I need
runInteraction too ;) ;).

> > > When all is said and done, pgasync has, in every test I've tried, shown
> > > to be *much* faster than adbapi/threads/synclib in an async environment
> > > under heavy load. 
> > 
> > Most probably this is the removal of the futex locks (at least in
> > linux), I've run an strace on the main twisted thread, when it floods
> > data, and it's doing nothing but futex locking. Perhaps that could be
> > optimized a bit on the threaded version too. But I agree for a 2-way
> > pgasync is probably nicer in performance terms.
> 
> I don't know the exact reasons, but particularly under load (lots of
> concurrent connections/threads,) pgasync is much, much faster.  This is
> both on FreeBSD and Linux.

It's the thread locking. Try to strace the twisted main thread, and
you'll see the flood of FUTEX calls. As I've said I'd be surprised if
nothing can be done to improve it. But I certainly prefer pgasync
design myself too! But I need a compatible API since I need to go back
to adbapi if something goes wrong. I don't need performance right now.
I'll care about performance later. I'm looing forward to the day I will
see the website go down because of the too high load!! (well unless it
was a DDoS attack, ehehe ;)

Thanks for pgasync!

From andrea at cpushare.com  Tue Jan 18 08:54:52 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 18 08:54:48 2005
Subject: [Twisted-web] Sample code to run twisted web server
In-Reply-To: <41ED0877.7020309@ezabel.com>
References: <20050118095004.71487.qmail@web8202.mail.in.yahoo.com>
	<41ED0877.7020309@ezabel.com>
Message-ID: <20050118155452.GG17943@dualathlon.random>

On Tue, Jan 18, 2005 at 08:00:39AM -0500, orbitz wrote:
> Doing .rpy's tends to stink, it's afflicted by problems of persistence 
> last time I used it. Why not just make a full web app that runs it's own 

persistence? Do you mean twistd -nf is actually going to work? I get
errors every single time during shutdown. I thought I could get easy
session persistence with it, that's why I tried. If I could get session
persistence that way, I would be really happy. However dialtone convinced me
it's nicer to get it with sql in the meantime.

          File "/home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/internet/defer.py", line 243, in callback
            self._startRunCallbacks(result)
          File "/home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/internet/defer.py", line 304, in _startRunCallbacks
            self._runCallbacks()
          File "/home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/internet/defer.py", line 329, in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File "/home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/internet/base.py", line 327, in _cbContinueSystemEvent
            self._continueSystemEvent(eventType)
        --- <exception caught here> ---
          File "/home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/internet/base.py", line 335, in _continueSystemEvent
            callable(*args, **kw)
          File "/home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/persisted/sob.py", line 125, in save
            self._saveTemp(filename, passphrase, dumpFunc)
          File "/home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/persisted/sob.py", line 93, in _saveTemp
            dumpFunc(self.original, f)
          File "/home/andrea/bin/i686/python/lib/python2.4/site-packages/twisted/persisted/sob.py", line 109, in dumpFunc
            pickle.dump(obj, file, 1)
          File "/home/andrea/bin/i686/python/lib/python2.4/copy_reg.py", line 69, in _reduce_ex
            raise TypeError, "can't pickle %s objects" % base.__name__
        exceptions.TypeError: can't pickle function objects

For the other twisted processes (not the web above) persistence seems working,
though I'm not planning on depending on it either.

From jamwt-twistedlist at jamwt.com  Tue Jan 18 12:40:52 2005
From: jamwt-twistedlist at jamwt.com (J Turner)
Date: Tue Jan 18 12:40:32 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
Message-ID: <20050118194052.GA17626@count.jamwt.com>

On Tue, Jan 18, 2005 at 02:24:09PM +0100, Andrea Arcangeli wrote:
> > I'm not a huge fan of *encouraging* the use of adbapi in new projects,
> > however.  DB API is used by every single other project.  It's not really
> > me that invented a new API.  :)
> 
> ;) The point is that I hava to depend on the twisted API for my app, not
> on DB API. There is no way I can handle an unstable API for the DB side
> while developing my app, the overhead would be too huge, I don't have
> time to maintain two APIs and adbapi is the only one I'm confortable to
> depend right now. I choosed python only to go in production as fast as I
> possibly can, I've truly no time to help on what's not strictly need for
> my app, not more than answering these emails ;).

DB API is the API used by all the synchronous modules, which probably
represent 99.9% of the python database code out there.  There are two
schools of thought on this one:

 1.) Do it adbapi style to play well with legacy Twisted code, the
     twisted way

 2.) Keep a very DB API-like setup to try to merge Twisted db
     development back toward the standard used by the rest of the python
     community (but with callbacks and release()).

runQuery and runOperation are nice, and calls like those should be added
in some clean way to pgasync, IMO.  However, please, please use a cursor
and do it the db api way if you're doing more than one execute(), and
you want any kind of real transactional capability.  adbapi doesn't
really facilitate transactions all that well, unless you retrieve a
cursor in runInteraction, and hey--cursors!  Here we are back at DB API
anyway.  (Also the problems with runInteraction, that I explain below.)

I'm just not sure how fully to embrace adbapi, and how to resolve the
"right" API for pgasync.  But I need to figure it out soon, because the
protocol layer has been pretty stable for awhile now, and I'm already
using pgasync in some production code on my end.  I'd like to stop all
this API shuffling ASAP.

> > Plus, I cannot make a true runInteraction, since the called function is
> > assumed to be executed in a thread.  As far as runQuery() goes, that's
> > basically connection.exFetch().  And runOperation is a trivial
> > addition...
> 
> What's the difference between running it in a thread or not?

runInteraction takes a function as an argument.  Traditionally,
this function was always run in a thread, so you could be free to, for
example, make a blocking call using urllib.urlopen or something.  While
pgasync could call the function that runInteraction passes to it, that
function could *not* block.

pgasync doesn't make a thread pool, and it won't (ever) run anything on a
thread.  That was the principal goal when I started the project: Twisted
is async, so I want it all async.

 - jamwt

From foom at fuhm.net  Tue Jan 18 14:05:09 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue Jan 18 14:05:13 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050118194052.GA17626@count.jamwt.com>
References: <20050118194052.GA17626@count.jamwt.com>
Message-ID: <A3470774-6994-11D9-B76D-000A95A50FB2@fuhm.net>


On Jan 18, 2005, at 2:40 PM, J Turner wrote:
> runInteraction takes a function as an argument.  Traditionally,
> this function was always run in a thread, so you could be free to, for
> example, make a blocking call using urllib.urlopen or something.  While
> pgasync could call the function that runInteraction passes to it, that
> function could *not* block.

Or as a more likely example, you would feel free to make blocking calls 
to (and therefore expect non-deferred results from) curs.execute() and 
curs.fetch(). Which of course, *all* current code written for use with 
runInteraction does!

James


From andrea at cpushare.com  Tue Jan 18 17:00:08 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 18 17:00:02 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050118194052.GA17626@count.jamwt.com>
References: <20050118194052.GA17626@count.jamwt.com>
Message-ID: <20050119000008.GA11114@dualathlon.random>

On Tue, Jan 18, 2005 at 01:40:52PM -0600, J Turner wrote:
> DB API is the API used by all the synchronous modules, which probably
> represent 99.9% of the python database code out there.  There are two
> schools of thought on this one:

I was suggesting to do both at the same time ;).

> runInteraction takes a function as an argument.  Traditionally,
> this function was always run in a thread, so you could be free to, for
> example, make a blocking call using urllib.urlopen or something.  While
> pgasync could call the function that runInteraction passes to it, that
> function could *not* block.
> 
> pgasync doesn't make a thread pool, and it won't (ever) run anything on a
> thread.  That was the principal goal when I started the project: Twisted
> is async, so I want it all async.

Good point, and perfectly clear, but it's not my problem, I'm not doing
blocking calls at all in the runInteraction. So if you make a wrapper
I'll be able to swap it.  Just place a big fat warning that no blocking
call should ever happen in the callback executed by runInteraction.

The only reason I'm using runInteraction at all, is to have access to
the cursor and to extract the description too, so I can do a careless
select * that then generates an hash, and I don't need to change a thing
in the query code if I modify the DB, all I get is a new field in the
hash (actually in the class, because the hash is passed in input to a
class that does setattr on itself depending on the hash contents).

I didn't get what you mean about problems with transactions.

I thought all runOperation are transacted automatically, so if I'm
doing:

	UPDATE ... ;
	UPDATE ... ;

it's like if they both run inside a:

	BEGIN;
	UPDATE ... ;
	UPDATE ... ;
	COMMIT;

atomic block. If I'm wrong, it means I've already a problem. I'm
depending on read committed guarnatees of pgsql for my code, and it must
definitely run inside a transaction (not like if I'm executing each
command in the psql shell without a BEGIN/COMMIT block around it).

If I'm wrong, it must be still possible to fix it without having to use
runInteraction every time, isn't it? adbapi executes a .commit every
time internally, that made me think I was safe.

Thanks for the help!

From andrea at cpushare.com  Tue Jan 18 18:35:07 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 18 18:35:20 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <A3470774-6994-11D9-B76D-000A95A50FB2@fuhm.net>
References: <20050118194052.GA17626@count.jamwt.com>
	<A3470774-6994-11D9-B76D-000A95A50FB2@fuhm.net>
Message-ID: <20050119013507.GA13696@dualathlon.random>

On Tue, Jan 18, 2005 at 04:05:09PM -0500, James Y Knight wrote:
> Or as a more likely example, you would feel free to make blocking calls 
> to (and therefore expect non-deferred results from) curs.execute() and 
> curs.fetch(). Which of course, *all* current code written for use with 
> runInteraction does!

Ok, I didn't know they were returning a deferred (from J example it
looked like .execute returned void, but anyway I missed .fetch requires
deferred). I'm also using .fetch() in the runInteration callback of
course.

Perhaps it could be adapted with minimal modifications with
waitfordeferred + yield by checking if the return value of exec/fetch is
an instance of a deferred object? I ack I will have to change my code
somehow, but still I would like to write code that works with both
pgasync and adbapi, so the closest the pgasync2adbapi wrapper gets to
adbapi, the less messy code I will have to write.  While I'd like to
experiment with pgasync I must be able to go back to adbapi anytime.

So feel free to implement runInteration with a slightly different
semantic in the wrapper, you won't have to write the big fat warning
since the deferred at runtime will break executon of old code, and
adapting that bit by checking if the retval is a deferred, shouldn't be
too bad. And all other calls would be compatible. So it still looks
reasonable to have a wrapper.

From sa at c-area.ch  Wed Jan 19 04:57:56 2005
From: sa at c-area.ch (Steven Armstrong)
Date: Wed Jan 19 04:58:04 2005
Subject: [Twisted-web] VHostMonsterResource for url-context instead of
	subdomain
Message-ID: <41EE4B44.9090403@c-area.ch>

Hello twisted hackers

I've been playing arround with nevow and twisted for a while now.
While looking for a way to use twisted with apache I came across the 
following problem and hacked together a possible solution.

In the twisted docs 
(http://twisted.sourceforge.net/TwistedDocs-1.3.0/howto/using-twistedweb.html#auto21)
it sais to use VHostMonsterResource and proxy the documentroot to 
twisted. In my setup I can't do this. What I need is a way to proxy only 
a specific url-context to twisted while the rest of the domain remains 
under apache's control.

This is what I came up with. It seems to work well, the nevow examples 
are all working with this setup. All except those that don't work in 
native twisted/nevow eather that is.

Code is attached as vhostlocation.txt to prevent linebreaks from beeing 
hosed.

Do you guys see any problems with this approach?
Are there any implications through changing request.uri and 
request.prepath that I didn't think/know of?

cheers
Steven


-------------- next part --------------
from twisted.python import log
from nevow import vhost
import re

_debug = False
_vhost_location_delim = "@"
_vhost_re = re.compile('(.*)(/'+ _vhost_location_delim +'.*'+ _vhost_location_delim +'/)(.*)')

class VHostLocation(vhost.VHostMonsterResource):
    """
    Represents a single url-context of a Apache VirtualHost.
    Using this you do not need to proxy an entire virtual host to twisted.
    Instead you can proxy a specific location like:
    <VirtualHost *>
        ...
        ServerName www.example.com
        RewriteRule ^/nevow-app$ /nevow-app/ [R=301,L]
        ProxyPass /nevow-app/ http://localhost:8080/vhost/http/www.example.com:80/@nevow-app@/
        
        # this also works
        #ProxyPass /nevow/app/ http://localhost:8080/vhost/http/www.example.com:80/@nevow/app@/
        ...
    </VirtualHost>

    In this example only the http://www.example.com/nevow-app location is handled by twisted.
    The rest of the VirtualHost remains under Apache's control.

    The location used by Apache is passed to twisted through the trailing @location-name@.
    This is then used to fix request.uri and the request.postpath list to hold the segments 
    needed to create a valid absolute url.
    
    So the ProxyPass directive in the above example is seen/used as:
    Apache internal:
        /nevow-app/somepage
    Twisted internal:
        /somepage
    Twisted absolute:
        http://www.example.com/nevow-app/somepage
    """

    def _fix_segments(self, segments):
        """
        Removes the vhost_location from the given segments if necessary.
        Returns the modified segments and the vhost_location.
        vhost_location would be "nevow-app" in the example mentioned above.
        segments before: ('http', 'www.example.com:80', '@nevow-app@', 'somepage')
        segments after: ('http', 'www.example.com:80', 'somepage')
        """
        segments_string = "/".join(segments)
        vhost_location = _vhost_re.sub(r'\2',segments_string)
        # remove leading and trailing slash and delimiter
        vhost_location = vhost_location[(len(_vhost_location_delim)+1):-(len(_vhost_location_delim)+1)]
        new_segments = tuple(_vhost_re.sub(r'\1/\3',segments_string).split("/"))
        return new_segments, vhost_location

    def _fix_path(self, request, vhost_location):
        """
        Fixes the requests uri.
        Fixes the requests postpath list.
        Given the above example:
        request.uri before: /@nevow-app@/somepage
        request.uri after: /somepage
        request.postpath before: ['http', 'www.example.com:80', '@nevow-app@', 'somepage']
        request.postpath after: ['http', 'www.example.com:80', 'nevow-app', 'somepage']
        """
        request.uri = request.uri.replace("/"+ _vhost_location_delim + vhost_location + _vhost_location_delim, "")
        #request.path = "/"+ vhost_location + request.path
        postpath = "/".join(request.postpath)
        postpath = postpath.replace(_vhost_location_delim + vhost_location + _vhost_location_delim, vhost_location)
        request.postpath = postpath.split("/")

    def locateChild(self, ctx, segments):
        """
        First fixes the given segments. see _fix_segments
        Then passes the method call to the superclass.
        Then fixes the request.postpath. see _fix_path
        returns what the superclass returned without changing it.
        """
        request = inevow.IRequest(ctx)
        if _debug:
            log.msg("request.uri: %s" % request.uri)
            log.msg("request.path: %s" % request.path)
            log.msg("request.prepath: %s" % request.prepath)
            log.msg("request.postpath: %s" % request.postpath)
            log.msg("segments: %s" % str(segments))

        segments, vhost_location = self._fix_segments(segments)
        if _debug: 
            log.msg("segments after: %s" % str(segments))
            log.msg("vhost_location: %s" % vhost_location)

        res, segs = vhost.VHostMonsterResource.locateChild(self, ctx, segments)
        if _debug:
            log.msg("segs: %s" % str(segs))

        if vhost_location:
            self._fix_path(request, vhost_location)

        if _debug:
            log.msg("request.uri after: %s" % request.uri)
            log.msg("request.postpath after: %s" % request.postpath)
        return res, segs


application = service.Application("examples-vhost")
page = Examples()
#vResource = vhost.VHostMonsterResource()
vResource = VHostLocation()
page.putChild('vhost', vResource)


From andrea at cpushare.com  Wed Jan 19 18:15:36 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 19 18:16:32 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050119013507.GA13696@dualathlon.random>
References: <20050118194052.GA17626@count.jamwt.com>
	<A3470774-6994-11D9-B76D-000A95A50FB2@fuhm.net>
	<20050119013507.GA13696@dualathlon.random>
Message-ID: <20050120011536.GI12647@dualathlon.random>

I checked out pgasync, and the ConnectionPool is already implemented, exactly
like I suggested in my last email ;).

I already fixed up my runinteractions to do this:

				if not isinstance(result, Deferred):
					return zip_description(result, cur)
				return result.addCallback(zip_description, cur)

With just the above change I'm done with the API.  So now with a single global
variable set to True or False I can switch transparently between pgasync and
adbapi+psycopg2.

Next thing I had to fix to be able to login has been to add this:

Index: pgasync/format.py
===================================================================
--- pgasync/format.py	(revision 37)
+++ pgasync/format.py	(working copy)
@@ -7,7 +7,7 @@
 from errors import *
 
 # Types that are already suitable for str() representation
-donetypes  = [STRING,BINARY,NUMBER,ROWID,DATETIME]
+donetypes  = [STRING,BINARY,NUMBER,ROWID,DATETIME,BOOL]
 
 def typeCastParam(p):
 	"""Cast v to the appropriate type if possible.
@@ -30,8 +30,10 @@
 		return Date(p.year, p.month, p.day)
 	if tp is datetime.time:
 		return Time(p.hour, p.minute, p.second, p.microsecond)
+	if tp is bool:
+		return Bool(p)
 
-	raise ProgrammingError, ("Query parameter '%s': cannot convert %s to a PostgreSQL data type" % (k,tp))
+	raise ProgrammingError, ("Query parameter '%s': cannot convert %s to a PostgreSQL data type" % (p,tp))
 
 def format(s,params):
 	"""Make params appear in s correctly.
Index: pgasync/fe.py
===================================================================
--- pgasync/fe.py	(revision 37)
+++ pgasync/fe.py	(working copy)
@@ -80,7 +80,7 @@
 	def runOperation(self, query, args={}):
 		conn = connect(*self.params[0],**self.params[1])
 		cur = conn.cursor()
-		cursor.execute(query, args).addErrback(self._error)
+		cur.execute(query, args).addErrback(self._error)
 		d = conn.commit()
 		d.addErrback(self._error)
 		cur.release()
Index: pgasync/pgtypes.py
===================================================================
--- pgasync/pgtypes.py	(revision 37)
+++ pgasync/pgtypes.py	(working copy)
@@ -70,6 +70,15 @@
 	def _dotime(self):
 		return "%02d:%02d:%02d.%06d" % (self.hour, self.minute, self.second, self.microsecond)
 
+class BOOL:
+	def __init__(self, b):
+		self.__b = b
+	def __str__(self):
+		if self.__b:
+			return "'T'"
+		else:
+			return "'F'"
+
 def Date(y,m,d): 
 	dt = DATETIME(y,m,d)
 	dt._tm = 0
@@ -95,3 +104,5 @@
 def TimestampFromTicks(t): return DATETIME.fromtimestamp(t)
 
 def Binary(s): return BINARY(s)
+
+def Bool(b): return BOOL(b)

With the above a good part of my app started working. But it's not enough.

Here a list of the remaining issues (which I believe aren't related anymore to
the API, as far as I'm concerned the current adbapi wrapper is all I need ;).

1) the '%(xx)d' format for integeres/logs insn't recognized. I'd like to use
   "%(xx)d" to be strict for integers.

btw, is there any difference in python between %u and %d at all?

2) it cannot handle a ";" at the end of the sql string. so I deleted all the
   finals ";" and I left only the intermediate ones.

3) it doesn't print the nevow url type, note that such parameter is just
   incidentally passed down to the sql query, and pgasync should ignore it
   instead of complaining since it never gets resolved

Here's what I get:

            raise ProgrammingError, ("Query parameter '%s': cannot convert %s to a PostgreSQL data type" % (p,tp))
        pgasync.errors.ProgrammingError: Query parameter 'https://localhost:8443/verify_email': cannot convert <class 'nevow.url.URL'> to a PostgreSQL data type


So I'm going back to adbapi until I get confirmation on how to proceed. I could
change my app in theory to deal with the different API, but I've no idea what
the standard says about the above 3 points. So I prefer to wait before
making more modifications to already working code.

From andrea at cpushare.com  Wed Jan 19 18:36:40 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 19 18:36:44 2005
Subject: [Twisted-web] reduce deferred stack in nevow
Message-ID: <20050120013640.GJ12647@dualathlon.random>

This is mostly a cleanup since I doubt you can measure any improvement
unless you've tons of nested dirs to lookup. It's inefficient to use
.addCallback().addErrback when addCallbacks could be used instead.

Index: nevow/rend.py
===================================================================
--- nevow/rend.py	(revision 1092)
+++ nevow/rend.py	(working copy)
@@ -511,11 +511,9 @@
             return static.Data('You posted a form to %s' % bindingName, 'text/plain'), ()
         return util.maybeDeferred(
             configurable.postForm, ctx, bindingName, args
-        ).addCallback(
-            self.onPostSuccess, request, ctx, bindingName, redirectAfterPost
-        ).addErrback(
-            self.onPostFailure, request, ctx, bindingName, redirectAfterPost
-        )
+        ).addCallbacks(self.onPostSuccess, self.onPostFailure,
+                       callbackArgs = (request, ctx, bindingName, redirectAfterPost),
+                       errbackArgs = (request, ctx, bindingName, redirectAfterPost))
 
     def onPostSuccess(self, result, request, ctx, bindingName, redirectAfterPost):
         if result is None:
Index: nevow/appserver.py
===================================================================
--- nevow/appserver.py	(revision 1092)
+++ nevow/appserver.py	(working copy)
@@ -147,21 +147,16 @@
 
         return self.site.getPageContextForRequestContext(
             requestContext
-        ).addErrback(
-            processingFailed, self, requestContext
-        ).addCallback(
-            self.gotPageContext
-        )
+        ).addCallbacks(self.gotPageContext, processingFailed,
+                       errbackArgs = (self, requestContext))
 
     def gotPageContext(self, pageContext):
         if pageContext is not errorMarker:
             return defer.maybeDeferred(
                 pageContext.tag.renderHTTP, pageContext
-            ).addErrback(
-                processingFailed, self, pageContext
-            ).addCallback(
-                self._cbFinishRender, pageContext
-            )
+            ).addCallbacks(self._cbFinishRender, processingFailed,
+                           callbackArgs = (pageContext, ),
+                           errbackArgs = (self, pageContext))
 
     def finish(self):
         self.deferred.callback("")
@@ -291,11 +286,9 @@
 
         return defer.maybeDeferred(
             res.locateChild, ctx, path
-        ).addErrback(
-            processingFailed, request, ctx
-        ).addCallback(
-            self.handleSegment, request, path, ctx
-        )
+        ).addCallbacks(self.handleSegment, processingFailed,
+                       callbackArgs = (request, path, ctx),
+                       errbackArgs = (request, ctx))
 
 
 

From radeex at gmail.com  Wed Jan 19 19:11:44 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed Jan 19 19:11:48 2005
Subject: [Twisted-web] reduce deferred stack in nevow
In-Reply-To: <20050120013640.GJ12647@dualathlon.random>
References: <20050120013640.GJ12647@dualathlon.random>
Message-ID: <60ed19d4050119181143c6dc27@mail.gmail.com>

Did you actually find a real performance problem with using
addCallback/addErrback? Do you know that there is a big difference in
semantics between addCallback/addErrback vs addCallbacks?


On Thu, 20 Jan 2005 02:36:40 +0100, Andrea Arcangeli
<andrea@cpushare.com> wrote:
> This is mostly a cleanup since I doubt you can measure any improvement
> unless you've tons of nested dirs to lookup. It's inefficient to use
> .addCallback().addErrback when addCallbacks could be used instead.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash

From andrea at cpushare.com  Wed Jan 19 20:09:17 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 19 20:09:23 2005
Subject: [Twisted-web] reduce deferred stack in nevow
In-Reply-To: <60ed19d4050119181143c6dc27@mail.gmail.com>
References: <20050120013640.GJ12647@dualathlon.random>
	<60ed19d4050119181143c6dc27@mail.gmail.com>
Message-ID: <20050120030917.GK12647@dualathlon.random>

On Thu, Jan 20, 2005 at 01:11:44PM +1100, Christopher Armstrong wrote:
> Did you actually find a real performance problem with using
> addCallback/addErrback? Do you know that there is a big difference in

Of course not (all cpu time seems spent for the rendering of the html),
but the current code looked less optimal than it could have been with a
simple change.

> semantics between addCallback/addErrback vs addCallbacks?

More or less. The first callback may actually return a Failure that will
cause the underlying errback to be called. Or the first errback may not
return an instance of the Failure class causing the next callback to be
called.

But I admit I didn't think about it while making the patch. So there's a
good chance it wasn't just incidental that the previous code was using
.addcallback/adderrback sorry. I was using the patch successfully but I
might have break something without noticing, sorry. You can ignore it
and if something we can concentrate on something more useful.

Since you mentioned a performance problem, the real performance problem
I have is in the rendering, that takes >150msec for my simplest page in
the whole site. The slowest takes 800msec and I'm going to make some
that will be even slower than that. You can easily reproduce with [0] *
300 passed as input to annotate.Choice(). Now for most of the http part
a reverse proxy can probably do the trick, but for the ssl part it can't
(even ignoring the ssl issues) because it's too dynamic.

Now it's not a short term problem, but I might have to solve that
eventually. Even if formless takes 2 seconds per page (not so
unrelistic) it's ok for the short term.

I wonder what can be done to boost the rendering (I was looking around
the code, and I thought the addcallback/adderrback would be a cleanup
but it wasn't sorry).

Thanks!

From andrew-twisted at puzzling.org  Wed Jan 19 20:38:31 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed Jan 19 20:38:38 2005
Subject: [Twisted-web] reduce deferred stack in nevow
In-Reply-To: <20050120030917.GK12647@dualathlon.random>
References: <20050120013640.GJ12647@dualathlon.random>
	<60ed19d4050119181143c6dc27@mail.gmail.com>
	<20050120030917.GK12647@dualathlon.random>
Message-ID: <20050120033831.GF2424@localhost.localdomain>

On Thu, Jan 20, 2005 at 04:09:17AM +0100, Andrea Arcangeli wrote:
> On Thu, Jan 20, 2005 at 01:11:44PM +1100, Christopher Armstrong wrote:
> > Did you actually find a real performance problem with using
> > addCallback/addErrback? Do you know that there is a big difference in
> 
> Of course not (all cpu time seems spent for the rendering of the html),
> but the current code looked less optimal than it could have been with a
> simple change.

If you want to speed up Deferreds, you'll probably get faster results with
less effort with foom's cdefer work in the SVN sandbox...

[...]
> Since you mentioned a performance problem, the real performance problem
> I have is in the rendering, that takes >150msec for my simplest page in
> the whole site. The slowest takes 800msec and I'm going to make some
> that will be even slower than that. You can easily reproduce with [0] *
> 300 passed as input to annotate.Choice(). Now for most of the http part
> a reverse proxy can probably do the trick, but for the ssl part it can't
> (even ignoring the ssl issues) because it's too dynamic.

...but as you say, Deferreds don't really seem to be a significant speed
issue for you.  Don't worry about them :)

-Andrew.


From dialtone at divmod.com  Thu Jan 20 05:38:06 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jan 20 05:38:12 2005
Subject: [Twisted-web] reduce deferred stack in nevow
In-Reply-To: <20050120030917.GK12647@dualathlon.random>
Message-ID: <20050120123806.21983.1764539099.divmod.quotient.5102@ohm>

On Thu, 20 Jan 2005 04:09:17 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:

> Since you mentioned a performance problem, the real performance problem
> I have is in the rendering, that takes >150msec for my simplest page in
> the whole site. The slowest takes 800msec and I'm going to make some
> that will be even slower than that. You can easily reproduce with [0] *
> 300 passed as input to annotate.Choice(). Now for most of the http part
> a reverse proxy can probably do the trick, but for the ssl part it can't
> (even ignoring the ssl issues) because it's too dynamic.

> I wonder what can be done to boost the rendering (I was looking around
> the code, and I thought the addcallback/adderrback would be a cleanup
> but it wasn't sorry).

There are some issues to consider:

1) The optimizations branch will surely help a lot. I got a 2x speedup after using it (the branch caches every flattener lookup and does a great job in context lookups) unfortunately this is not yet merged and it's a bit old, so you may have to merge trunk with it first.

2) After that branch you may have pages that render in 70ms with the most complex that could take between 400-600ms.

Keep in mind that taking 70ms to render a page is not so slow for a single page. 

Another thing that could possibly work is rewriting the flatteners in Pyrex or even your page module in Pyrex, nothing stops you from that.

But first you should try to cache rendered fragments so that if data doesn't change you will be able to directly serve the pre-rendered html. 

And before everything you can use the load balancer, and once the session management will be improved you will also be able to share the session on many different servers.

From andrea at cpushare.com  Thu Jan 20 09:44:55 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 20 09:45:15 2005
Subject: [Twisted-web] reduce deferred stack in nevow
In-Reply-To: <20050120123806.21983.1764539099.divmod.quotient.5102@ohm>
References: <20050120030917.GK12647@dualathlon.random>
	<20050120123806.21983.1764539099.divmod.quotient.5102@ohm>
Message-ID: <20050120164455.GM12647@dualathlon.random>

On Thu, Jan 20, 2005 at 12:38:06PM +0000, Valentino Volonghi wrote:
> There are some issues to consider:
> 
> 1) The optimizations branch will surely help a lot. I got a 2x speedup
> after using it (the branch caches every flattener lookup and does a
> great job in context lookups) unfortunately this is not yet merged and
> it's a bit old, so you may have to merge trunk with it first.
> 
> 2) After that branch you may have pages that render in 70ms with the
> most complex that could take between 400-600ms.
> 
> Keep in mind that taking 70ms to render a page is not so slow for a single page. 

This is great news, is this going to be merged into trunk soon? It would
hide at least the troubles I get with components. I make quite heavy use
of fragments, and those rend.Fragments only change once every 10 sec (I
already cache the sql queries for the fragments).

But I suspect something can be improved into the rendering itself too. The
slowdown I get seems a bit excessive. And the caching doesn't help the
heavily dynamic part.

> Another thing that could possibly work is rewriting the flatteners in
> Pyrex or even your page module in Pyrex, nothing stops you from that.

Indeed, but I'd leave this as last resort ;).

> But first you should try to cache rendered fragments so that if data
> doesn't change you will be able to directly serve the pre-rendered
> html. 

Definitely agreed. I'm already caching some SQL queries in my module, so
I guarantee they're not going to change too often.

> And before everything you can use the load balancer, and once the
> session management will be improved you will also be able to share the
> session on many different servers.

Yep but in the short term I won't have finances to use more than a
single system, and taking 800msec to render a page seems something is
wrong, even taking python slowdown into the equation. It'd probably work
since my initial bandwidth will be so low, but currently my homepage
cannot deliver more than 25k/sec due the cpu limit.

here a bench of a static file (the css):

Document Path:          /css
Document Length:        5690 bytes

Concurrency Level:      1
Time taken for tests:   0.721704 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      588300 bytes
HTML transferred:       569000 bytes
Requests per second:    138.56 [#/sec] (mean)
Time per request:       7.217 [ms] (mean)
Time per request:       7.217 [ms] (mean, across all concurrent
requests)
Transfer rate:          795.34 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:     6    6   2.1      6      26
Waiting:        1    6   2.0      6      25
Total:          6    6   2.2      6      27

Percentage of the requests served within a certain time (ms)
  50%      6
  66%      6
  75%      7
  80%      7
  90%      7
  95%      7
  98%      8
  99%     27
 100%     27 (longest request)

and here the homepage, about the same size:

Document Path:          /
Document Length:        5505 bytes

Concurrency Level:      1
Time taken for tests:   21.268182 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      569330 bytes
HTML transferred:       550500 bytes
Requests per second:    4.70 [#/sec] (mean)
Time per request:       212.682 [ms] (mean)
Time per request:       212.682 [ms] (mean, across all concurrent
requests)
Transfer rate:          26.10 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:   196  212  67.0    201     871
Waiting:      196  207  23.1    201     423
Total:        196  212  67.0    201     871

Percentage of the requests served within a certain time (ms)
  50%    201
  66%    209
  75%    211
  80%    212
  90%    218
  95%    224
  98%    227
  99%    871
 100%    871 (longest request)


It's 5 request per seconds vs 138 requests per second. So the difference
between static and dynamic data is extreme. I'm betting the rendering
can be heavily optimized by rewriting it with efficiency in mind.

My profiling shows the interface layer (getInterfaces paths) to be one
of the biggest offenders (second only to the flattener, which is in turn
second to the loader).

The getInterfaces thing seem to loop and recurse too much. Plus it's
all obsolete stuff that raises a warning too. So can all this
inefficient stuff in compy be dropped and rewritten using
zope.interfaces? (I'm fine if you leave it to run w/o twisted, but
within twisted it seems bad to have two implementation of the same
thing, especially if this one is depreacted and so slow) Is
zone.interfaces so inefficient too, or has it a chance to work in O(1)?
These at first glance looks complexity problems with bad algorithms.
Infact thinking about it the whole __implements__ API seems unfixable,
it shouldn't be a tuple but an hash. Otherwise to find if a certain
feature is implemented, one has to browse the whole tuple in O(N) (which
is more or less probably what getInterfaces does). then there's this
stuff recursing and messing it up, which probably make it even worse than a
linear search in practice, and it's probably getting called more than
once. This is the most called function in my profiling at least (hundred
thousands times with just an hundred queries).

So I'm not really happy about this interface mania that is apparently
hurting performance so much. If the interfaces cannot be implemented
better, it's much better to use a dirty pointer that adds a field to a
class but that doesn't run in O(N) (or O(N**2)), even if it clobbers the
namespace and it's not as clean, but it's usable in production.

I mean, I don't want to rewrite the thing in C, just to to be able to
run a O(N) loop faster when a dirty pointer would have fixed it in
python. That would be a mistake. So I'd like to get some explanation if
I'm missing something, and getting this fixed if I'm correct on this
theory (so far it's mostly a theory since I don't undersand the whole
internals of the interface stuff yet, but stuff like the below makes me
wonder that something is wrong there).

def tupleTreeToList(t, l=None):
    """Convert an instance, or tree of tuples, into list."""
    if l is None: l = []
    if isinstance(t, types.TupleType):
        for o in t:
            tupleTreeToList(o, l)
    else:
        l.append(t)
    return Flat(l)

Note that even if we have to break the API to make it faster it's not
too bad, all that __interfaces__ slowdown is very easy to grep. So a
conversion would be quick. Perhaps this is what zope.interfaces already
does? I've noticed the API has changed slightly to interfaces()
insteadof __interfaces__ = .... I seriously hope the API didn't change
gratuitously without providing runtime benefits.

Comments welcome, thanks!

From andrea at cpushare.com  Thu Jan 20 18:43:22 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 20 18:43:27 2005
Subject: [Twisted-web] profiling data and compy removal
In-Reply-To: <20050120164455.GM12647@dualathlon.random>
References: <20050120030917.GK12647@dualathlon.random>
	<20050120123806.21983.1764539099.divmod.quotient.5102@ohm>
	<20050120164455.GM12647@dualathlon.random>
Message-ID: <20050121014322.GW12647@dualathlon.random>

On Thu, Jan 20, 2005 at 05:44:55PM +0100, Andrea Arcangeli wrote:
> My profiling shows the interface layer (getInterfaces paths) to be one

Here the data ordered by number of calls:

         2136207 function calls (1831320 primitive calls) in 13.037 CPU seconds
   222020    0.154    0.000    0.154    0.000 interface.py:250(<lambda>)
186611/80181    1.451    0.000    1.608    0.000 interface.py:276(interfaces)
   107577    0.087    0.000    0.094    0.000 components.py:163(fixClassImplements)
97126/41704    0.903    0.000   10.819    0.000 flatstan.py:29(TagSerializer)
    93040    0.064    0.000    0.064    0.000 stan.py:381(getSpecial)
    92590    0.470    0.000    0.583    0.000 warnings.py:24(warn)
    92590    0.113    0.000    0.113    0.000 warnings.py:59(warn_explicit)
    80170    0.221    0.000    0.221    0.000 util.py:206(uniquify)
    68463    0.259    0.000    0.259    0.000 declarations.py:82(__iter__)
68461/23048    0.332    0.000   10.640    0.000 ten.py:74(partialflatten)
    68461    1.279    0.000    4.370    0.000 components.py:387(getInterfaces)
    68461    0.310    0.000    4.753    0.000 ten.py:43(getFlattener)
65326/22920    0.167    0.000   10.686    0.000 ten.py:89(serialize)
    36796    0.025    0.000    0.025    0.000 interface.py:531(direct)
    34483    0.024    0.000    0.024    0.000 flatstan.py:119(StringSerializer)
    31376    0.084    0.000    0.084    0.000 context.py:49(__init__)
    31088    0.498    0.000    0.609    0.000 context.py:275(__init__)
    26159    0.177    0.000    0.177    0.000 util.py:64(qual)
    23436    0.035    0.000    0.035    0.000 interface.py:458(interfaces)
23420/11710    0.218    0.000    0.250    0.000 reflect.py:464(accumulateBases)
    22947    0.068    0.000    0.084    0.000 pyexpat.c:461(CharacterData)
    22947    0.015    0.000    0.015    0.000 flatsax.py:159(characters)
22398/15854    0.666    0.000    2.252    0.000 components.py:283(__call__)
    18448    0.084    0.000    0.522    0.000 interface.py:706(__adapt__)
    18357    0.068    0.000    1.627    0.000 flatstan.py:143(ListSerializer)
    17967    0.099    0.000    0.636    0.000 interface.py:609(__call__)
    16976    0.033    0.000    0.033    0.000 stan.py:374(__nonzero__)
    16096    0.083    0.000    0.083    0.000 interface.py:355(weakref)
16075/16046    0.091    0.000    0.176    0.000 adapter.py:470(get)
    16046    0.081    0.000    0.326    0.000 adapter.py:383(lookup1)
    16046    0.080    0.000    0.437    0.000 components.py:110(_hook)
    16046    0.066    0.000    0.245    0.000 adapter.py:314(lookup)
14621/14606    0.185    0.000    0.464    0.000 components.py:343(__getattr__)
    14606    0.188    0.000    0.213    0.000 interface.py:362(get)
    14606    0.066    0.000    0.279    0.000 interface.py:534(queryDescriptionFor)
    13560    0.095    0.000    0.095    0.000 stan.py:137(__init__)
    11710    0.048    0.000    0.298    0.000 reflect.py:454(allYourBase)
    11709    0.146    0.000    0.540    0.000 components.py:407(superInterfaces)
11328/2208    0.188    0.000    0.536    0.000 context.py:160(clone)
11328/2208    0.089    0.000    0.557    0.000 context.py:327(clone)
    10912    0.133    0.000    1.378    0.000 context.py:78(locate)
    10672    0.086    0.000    1.166    0.000 context.py:200(locateHook)
    10580    0.168    0.000    0.168    0.000 weakref.py:67(has_key)
9540/1431    0.099    0.000    0.102    0.000 stan.py:475(specialMatches)


here the cumulative time for each single call:

186611/80181    1.451    0.000    1.608    0.000 interface.py:276(interfaces)
    68461    1.279    0.000    4.370    0.000 components.py:387(getInterfaces)
97126/41704    0.903    0.000   10.819    0.000 flatstan.py:29(TagSerializer)
22398/15854    0.666    0.000    2.252    0.000 components.py:283(__call__)
       80    0.627    0.008   12.910    0.161 pollreactor.py:114(doPoll)
    31088    0.498    0.000    0.609    0.000 context.py:275(__init__)
    92590    0.470    0.000    0.583    0.000 warnings.py:24(warn)
68461/23048    0.332    0.000   10.640    0.000 ten.py:74(partialflatten)
    68461    0.310    0.000    4.753    0.000 ten.py:43(getFlattener)
    68463    0.259    0.000    0.259    0.000 declarations.py:82(__iter__)
     7502    0.248    0.000    0.336    0.000 flatsax.py:99(startElementNS)
    80170    0.221    0.000    0.221    0.000 util.py:206(uniquify)
23420/11710    0.218    0.000    0.250    0.000 reflect.py:464(accumulateBases)
 3155/137    0.206    0.000   11.891    0.087 ten.py:94(iterflatten)
    14606    0.188    0.000    0.213    0.000 interface.py:362(get)
11328/2208    0.188    0.000    0.536    0.000 context.py:160(clone)
14621/14606    0.185    0.000    0.464    0.000 components.py:343(__getattr__)
    26159    0.177    0.000    0.177    0.000 util.py:64(qual)
    10580    0.168    0.000    0.168    0.000 weakref.py:67(has_key)
65326/22920    0.167    0.000   10.686    0.000 ten.py:89(serialize)
      390    0.159    0.000    0.868    0.002 expatreader.py:196(feed)
   222020    0.154    0.000    0.154    0.000 interface.py:250(<lambda>)
    11709    0.146    0.000    0.540    0.000 components.py:407(superInterfaces)
    10912    0.133    0.000    1.378    0.000 context.py:78(locate)
    92590    0.113    0.000    0.113    0.000 warnings.py:59(warn_explicit)
     7502    0.110    0.000    0.469    0.000 expatreader.py:305(start_element_ns)
9540/1431    0.099    0.000    0.102    0.000 stan.py:475(specialMatches)
    17967    0.099    0.000    0.636    0.000 interface.py:609(__call__)
    13560    0.095    0.000    0.095    0.000 stan.py:137(__init__)
3096/2904    0.093    0.000    7.906    0.003 flatstan.py:170(FunctionSerializer)
16075/16046    0.091    0.000    0.176    0.000 adapter.py:470(get)
11328/2208    0.089    0.000    0.557    0.000 context.py:327(clone)
   107577    0.087    0.000    0.094    0.000 components.py:163(fixClassImplements)
7290/4622    0.086    0.000    0.743    0.000 accessors.py:22(convertToData)
    10672    0.086    0.000    1.166    0.000 context.py:200(locateHook)
    31376    0.084    0.000    0.084    0.000 context.py:49(__init__)
    18448    0.084    0.000    0.522    0.000 interface.py:706(__adapt__)
    16096    0.083    0.000    0.083    0.000 interface.py:355(weakref)
    16046    0.081    0.000    0.326    0.000 adapter.py:383(lookup1)
    16046    0.080    0.000    0.437    0.000 components.py:110(_hook)
     5757    0.072    0.000    0.118    0.000 stan.py:315(clone)
    22947    0.068    0.000    0.084    0.000 pyexpat.c:461(CharacterData)
    18357    0.068    0.000    1.627    0.000 flatstan.py:143(ListSerializer)
    16046    0.066    0.000    0.245    0.000 adapter.py:314(lookup)
    14606    0.066    0.000    0.279    0.000 interface.py:534(queryDescriptionFor)
      960    0.064    0.000    0.311    0.000 server.py:337(_prePathURL)
    93040    0.064    0.000    0.064    0.000 stan.py:381(getSpecial)
     2904    0.060    0.000    8.243    0.003 flatstan.py:209(DirectiveSerializer)

As noted by dialtone privately even the warning code hurts
significantly. The simple change I attacehd below raises the number of
pages per second from 4.9 to 5.81.  The time per request goes from 203
to 172. So I stand by my argument that the interfaces are by far the
worst offender, even worse than the rendering itself. And there's zero
formless in the page I'm benchmarking above, that's the home page with
the __login__ form done by hand (with some render call to get dynamic
links to https but no formless).

So to me even the below one liner is a significant measurable
optimization. If this bit makes so much difference you can only imagine
how much we can optimize by dropping getInterfaces.

Personally I think the first priority in nevow is to drop the compy
thing and do it with zope.interfaces and see what kind of improvement we
get. I would hope there's a way to keep a compatibility module for
formless until it learns about zope.interfaces too. I don't care that
much about the speed of formless, formless can keep using a
compatibility wrapper and be slow, but the page I used above makes zero
use of formless and it should be faster than 203/172 msec. At the very
least by dropping the warning the right way, we'll get a speedup from
203 to 172 msec for the rendering of my pages, since it won't require
the obsolete-warning anymore 8). This of course assumes the
zope.interfaces are being implemented sanely without O(N) loops over
tuples to find if the instance implements an interface. If they're
implemented in C even better.

Below patch is not meant to be applied of course.

--- ./lib/python2.4/site-packages/twisted/python/components.py.~1~	2005-01-14 20:44:44.000000000 +0100
+++ ./lib/python2.4/site-packages/twisted/python/components.py	2005-01-21 02:28:57.245648664 +0100
@@ -389,7 +389,7 @@ def getInterfaces(klass):
 
     This is horrible and stupid. Please use zope.interface.providedBy() or implementedBy().
     """
-    warnings.warn("getInterfaces should not be used, use providedBy() or implementedBy()", ComponentsDeprecationWarning, stacklevel=2)
+#    warnings.warn("getInterfaces should not be used, use providedBy() or implementedBy()", ComponentsDeprecationWarning, stacklevel=2)
     # try to support both classes and instances, giving different behaviour
     # which is HORRIBLE :(
     if isinstance(klass, (type, types.ClassType)):

From prabaharpython at yahoo.co.in  Thu Jan 20 23:20:51 2005
From: prabaharpython at yahoo.co.in (Mosas)
Date: Thu Jan 20 23:21:25 2005
Subject: [Twisted-web] how to work with html form in twisted.web
In-Reply-To: <20050121014322.GW12647@dualathlon.random>
Message-ID: <20050121062051.28826.qmail@web8205.mail.in.yahoo.com>

Dear All,
   Kindly send me small twisted web scripts
regarding html form.  I am new to twisted
I cannot understand how parse the html form
contents and how to read the form contents. 


________________________________________________________________________
Yahoo! India Matrimony: Find your life partner online
Go to: http://yahoo.shaadi.com/india-matrimony

From prabaharpython at yahoo.co.in  Thu Jan 20 23:58:14 2005
From: prabaharpython at yahoo.co.in (Mosas)
Date: Thu Jan 20 23:58:50 2005
Subject: [Twisted-web] need small examples to parse the html form contents
In-Reply-To: <20050121062051.28826.qmail@web8205.mail.in.yahoo.com>
Message-ID: <20050121065814.63292.qmail@web8206.mail.in.yahoo.com>

Dear all,

       I am in the need of small examples
that need to explain how to work in the
html form. 
      If any one have the related documents or
examples kindly forward me.

________________________________________________________________________
Yahoo! India Matrimony: Find your life partner online
Go to: http://yahoo.shaadi.com/india-matrimony

From ERGO at notebooks.de  Fri Jan 21 13:54:19 2005
From: ERGO at notebooks.de (ERGO)
Date: Fri Jan 21 13:54:28 2005
Subject: [Twisted-web] Twisted, Nevow and The Meaning of Life
Message-ID: <41F16BFB.8020009@notebooks.de>

Regardless of BIG respect and best regards to all developers
of Twisted and Nevow a question: ...
... how far away is the next stable API ???

Paul Reznicek

From general at eepatents.com  Fri Jan 21 14:21:15 2005
From: general at eepatents.com (Ed Suominen)
Date: Fri Jan 21 14:21:18 2005
Subject: [Twisted-web] Twisted, Nevow and The Meaning of Life
In-Reply-To: <41F16BFB.8020009@notebooks.de>
References: <41F16BFB.8020009@notebooks.de>
Message-ID: <200501211321.16326.general@eepatents.com>

"next"?

(Sorry, couldn't resist...)

On Friday 21 January 2005 12:54 pm, ERGO wrote:
> Regardless of BIG respect and best regards to all developers
> of Twisted and Nevow a question: ...
> ... how far away is the next stable API ???
>
> Paul Reznicek
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From prabaharpython at yahoo.co.in  Fri Jan 21 21:57:30 2005
From: prabaharpython at yahoo.co.in (Mosas)
Date: Fri Jan 21 21:58:05 2005
Subject: [Twisted-web] how create a dynamic pages using rpy scripts in
	twisted web
Message-ID: <20050122045730.72375.qmail@web8202.mail.in.yahoo.com>

 Dear All,
    I want to know how to work with rpy extention
having files and also how to create dynamic
pages using rpy scripts.  If any one
having documentations or example scripts regarding
this kindly mail me.  I cannot get these things
from net.

regards
prabahar

   
 
  

________________________________________________________________________
Yahoo! India Matrimony: Find your life partner online
Go to: http://yahoo.shaadi.com/india-matrimony

From sridharinfinity at gmail.com  Sat Jan 22 00:34:38 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Sat Jan 22 00:34:48 2005
Subject: [Twisted-web] how to work with html form in twisted.web
In-Reply-To: <20050121062051.28826.qmail@web8205.mail.in.yahoo.com>
References: <20050121014322.GW12647@dualathlon.random>
	<20050121062051.28826.qmail@web8205.mail.in.yahoo.com>
Message-ID: <8816fcf8050121233454832b30@mail.gmail.com>

On Fri, 21 Jan 2005 06:20:51 +0000 (GMT), Mosas
<prabaharpython@yahoo.co.in> wrote:
> Dear All,
>    Kindly send me small twisted web scripts
> regarding html form.  I am new to twisted
> I cannot understand how parse the html form
> contents and how to read the form contents.

If not late, you can look at Nevow (www,nevow.org).  Get the svn trunk
and look at the examples (formpost.py)

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From andrea at cpushare.com  Sat Jan 22 20:28:47 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 22 20:28:51 2005
Subject: [Twisted-web] flattener for decimal type
Message-ID: <20050123032847.GM7587@dualathlon.random>

This avoids an exception when returning decimals through some data
method. Works for me so far (apparently I didn't need to import the
decimal module, not sure why ;).

Index: nevow/__init__.py
===================================================================
--- nevow/__init__.py	(revision 1110)
+++ nevow/__init__.py	(working copy)
@@ -209,6 +209,12 @@
 
 """
 
+flatteners_2_4 = """
+nevow.flat.flatstan.StringCastSerializer          decimal.Decimal
+"""
+if sys.version_info >= (2, 4):
+    flatteners += flatteners_2_4
+
 loadFlatteners(flatteners)
 
 

From foom at fuhm.net  Sun Jan 23 00:42:45 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun Jan 23 00:43:25 2005
Subject: [Twisted-web] Re: [Nevow-commits] r1110 - Epydoc cleanup.
In-Reply-To: <E1CsXiO-0006kj-Qj@tesla.divmod.com>
References: <E1CsXiO-0006kj-Qj@tesla.divmod.com>
Message-ID: <5F198CD0-6D12-11D9-B76D-000A95A50FB2@fuhm.net>

Fixing the comments to look pretty in autogenerated docs seems like a 
good idea, but does epydoc *really* make you do the following?? There 
goes easy copy-and-pastability..

james

> -    def doSomething(self, context=formless.Context(), 
> name=formless.String()):
> -        pass
> -    doSomething = formless.autocallable(doSomething)
> +    >>> def doSomething(self, context=formless.Context(), 
> name=formless.String()):
> +    ...     pass
> +    >>> doSomething = formless.autocallable(doSomething)


From mary-twisted at puzzling.org  Sun Jan 23 00:47:19 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun Jan 23 00:47:31 2005
Subject: [Twisted-web] Twisted web wiki has been attacked by spammers
Message-ID: <20050123074719.GA17741@sourdust.home.puzzling.org>

There's an awful lot of wikispam on the front page of
http://divmod.org/users/wiki.twistd/nevow/moin.cgi ... it seems to have
been there for at least a year.

If the wiki is unmaintained it really should be taken down or frozen and
made uneditable rather than letting it become a haven for spam links.

-Mary

From mary-twisted at puzzling.org  Sun Jan 23 00:50:18 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun Jan 23 00:50:20 2005
Subject: [Twisted-web] Re: Twisted web wiki has been attacked by spammers
In-Reply-To: <20050123074719.GA17741@sourdust.home.puzzling.org>
References: <20050123074719.GA17741@sourdust.home.puzzling.org>
Message-ID: <20050123075018.GB17741@sourdust.home.puzzling.org>

On Sun, Jan 23, 2005, Mary Gardiner wrote:
> If the wiki is unmaintained it really should be taken down or frozen and
> made uneditable rather than letting it become a haven for spam links.

Sorry, I spoke too soon. The revision history shows lots of recent
revisions to that page -- when I first viewed it it said it has last
been modified in Feb 2004, which made me think the spam was there all
that time!

It seems like it was there about five days.

-Mary

From mary-twisted at puzzling.org  Sun Jan 23 02:12:28 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun Jan 23 02:12:31 2005
Subject: [Twisted-web] Page object design: wrapping a dictionary containing
	data
Message-ID: <20050123091228.GC17741@sourdust.home.puzzling.org>

I've got a Page object that derives all its data from a dictionary, eg:

{
    'project_name': 'project',
    'project_description': 'hello',
    # ... you get the idea
}

What's a good way for the Page object to wrap that dictionary that
doesn't involve doing this:

    def data_name(self, ctx, data):
        return self.d['project_name']

    def data_description(self, ctx, data):
        return self.d['project_description']

    # and so on for every key in the dictionary

I vaguely recall that the equivalent of this used to be possible in
Woven:

    def data_project(self, ctx, data):
        return self.d

and then that the data items were accessible by (say)
stan.directive("project/project_name"). This doesn't look like its
supported in Nevow. Is this correct? What alternative designs are there
for something like this?

-Mary

From andrew-twisted at puzzling.org  Sun Jan 23 02:20:21 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun Jan 23 02:20:25 2005
Subject: [Twisted-web] Re: [Nevow-commits] r1110 - Epydoc cleanup.
In-Reply-To: <5F198CD0-6D12-11D9-B76D-000A95A50FB2@fuhm.net>
References: <E1CsXiO-0006kj-Qj@tesla.divmod.com>
	<5F198CD0-6D12-11D9-B76D-000A95A50FB2@fuhm.net>
Message-ID: <20050123092021.GB20108@localhost.localdomain>

On Sun, Jan 23, 2005 at 02:42:45AM -0500, James Y Knight wrote:
> Fixing the comments to look pretty in autogenerated docs seems like a 
> good idea, but does epydoc *really* make you do the following?? There 
> goes easy copy-and-pastability..

No, it doesn't... see the sections titled "Literal Blocks" and "Doctest
Blocks" at http://epydoc.sourceforge.net/epytext.html.

-Andrew.


From matt at pollenation.net  Sun Jan 23 03:12:14 2005
From: matt at pollenation.net (Matt Goodall)
Date: Sun Jan 23 03:12:20 2005
Subject: [Twisted-web] Re: Twisted web wiki has been attacked by spammers
In-Reply-To: <20050123075018.GB17741@sourdust.home.puzzling.org>
References: <20050123074719.GA17741@sourdust.home.puzzling.org>
	<20050123075018.GB17741@sourdust.home.puzzling.org>
Message-ID: <1106475134.11905.18.camel@localhost.localdomain>

On Sun, 2005-01-23 at 18:50 +1100, Mary Gardiner wrote:
> On Sun, Jan 23, 2005, Mary Gardiner wrote:
> > If the wiki is unmaintained it really should be taken down or frozen and
> > made uneditable rather than letting it become a haven for spam links.
> 
> Sorry, I spoke too soon. The revision history shows lots of recent
> revisions to that page -- when I first viewed it it said it has last
> been modified in Feb 2004, which made me think the spam was there all
> that time!

Yeah, don't worry - the wiki is maintained. I remove spam most days
(although I'm not so diligent at weekends) and I know there are others
who also remove spam as they find it. Unfortunately, the last time I
cleaned up was probably the day it got spammed again :-/.

I track changes using RSS but, for some reason, that doesn't pick up
*all* changes so I also do a full search for 'http://' and scan down the
results. The spammed pages are fairly obvious that way.

Anyway, thanks for the warning and for clearing up the front page.

Cheers, Matt



From andy at thecablelounge.com  Sun Jan 23 03:14:14 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Sun Jan 23 03:14:55 2005
Subject: [Twisted-web] Page object design: wrapping a dictionary containing
	data
In-Reply-To: <20050123091228.GC17741@sourdust.home.puzzling.org>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
Message-ID: <41F378F6.70005@thecablelounge.com>

Mary Gardiner wrote:

 > What's a good way for the Page object to wrap that dictionary that
 > doesn't involve doing this:
 >
 >     def data_name(self, ctx, data):
 >         return self.d['project_name']
 >
 > ...
 >
 > I vaguely recall that the equivalent of this used to be possible in
 > Woven:
 >
 >     def data_project(self, ctx, data):
 >         return self.d
 >
 > and then that the data items were accessible by (say)
 > stan.directive("project/project_name"). This doesn't look like its
 > supported in Nevow. Is this correct? What alternative designs are there
 > for something like this?

heya Mary,

there's a lot of Nevow magic I don't know, but in case something doesn't 
exist, something like the following should work, albeit, pretty crude:

python -c '
class C:
     def __getattr__( self, attr ):
         if attr.startswith( "data_" ):
             return lambda ctx, data, s=self, a=attr : s.d["project_%s" 
% a[len("data_"):]]
         raise AttributeError

c = C()

c.d  = { "project_name" : "roar" }
ctx  = "ned"
data = "fred"

print c.data_name( ctx, data )
'

Andy.

From mwh at python.net  Sun Jan 23 03:24:02 2005
From: mwh at python.net (Michael Hudson)
Date: Sun Jan 23 03:24:26 2005
Subject: [Twisted-web] Re: Page object design: wrapping a dictionary
	containing data
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
Message-ID: <2mu0p8a1fh.fsf@starship.python.net>

Mary Gardiner <mary-twisted@puzzling.org> writes:

> I've got a Page object that derives all its data from a dictionary, eg:
>
> {
>     'project_name': 'project',
>     'project_description': 'hello',
>     # ... you get the idea
> }
>
> What's a good way for the Page object to wrap that dictionary that
> doesn't involve doing this:
>
>     def data_name(self, ctx, data):
>         return self.d['project_name']
>
>     def data_description(self, ctx, data):
>         return self.d['project_description']
>
>     # and so on for every key in the dictionary
>
> I vaguely recall that the equivalent of this used to be possible in
> Woven:
>
>     def data_project(self, ctx, data):
>         return self.d
>
> and then that the data items were accessible by (say)
> stan.directive("project/project_name"). This doesn't look like its
> supported in Nevow. Is this correct? What alternative designs are there
> for something like this?

I think something like this:

    def data_dict(self, thing):
        return self.d[thing]

then nevow:data="dict project_name" shoud work.  I think.

Cheers,
mwh

-- 
39. Re graphics:  A picture is worth 10K words - but only those
    to describe the picture.  Hardly any sets of 10K words can be
    adequately described with pictures.
  -- Alan Perlis, http://www.cs.yale.edu/homes/perlis-alan/quotes.html


From matt at pollenation.net  Sun Jan 23 03:27:23 2005
From: matt at pollenation.net (Matt Goodall)
Date: Sun Jan 23 03:27:29 2005
Subject: [Twisted-web] Page object design: wrapping a dictionary
	containing data
In-Reply-To: <20050123091228.GC17741@sourdust.home.puzzling.org>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
Message-ID: <1106476044.11905.29.camel@localhost.localdomain>

On Sun, 2005-01-23 at 20:12 +1100, Mary Gardiner wrote:
> I've got a Page object that derives all its data from a dictionary, eg:
> 
> {
>     'project_name': 'project',
>     'project_description': 'hello',
>     # ... you get the idea
> }
> 
> What's a good way for the Page object to wrap that dictionary that
> doesn't involve doing this:
> 
>     def data_name(self, ctx, data):
>         return self.d['project_name']
> 
>     def data_description(self, ctx, data):
>         return self.d['project_description']
> 
>     # and so on for every key in the dictionary
> 
> I vaguely recall that the equivalent of this used to be possible in
> Woven:
> 
>     def data_project(self, ctx, data):
>         return self.d
> 
> and then that the data items were accessible by (say)
> stan.directive("project/project_name"). This doesn't look like its
> supported in Nevow. Is this correct? What alternative designs are there
> for something like this?

If a dict is the currently in scope data (the IData) for a template then
nested data directives will look inside the dict (see
accessors.DictionaryContainer for details):

        <div n:data="personAsDict">
          <p n:data="name">...</p>
          <p n:data="address">...</p>
        </div>

In that example, the 'name' and 'address' directives are equivalent to
personAsDict['name'] and personAsDict['address'] respectively.

There's also the mapping render (rend.mapping) That fills slots with the
content of the dict:

        <div n:data="personAsDict" n:render="mapping">
          <p><n:slot name="name" /></p>
          <p><n:slot name="address" /></p>
        </div>

Hope this helps.

Cheers, Matt


From matt at pollenation.net  Sun Jan 23 03:34:47 2005
From: matt at pollenation.net (Matt Goodall)
Date: Sun Jan 23 03:35:09 2005
Subject: [Twisted-web] Page object design: wrapping a dictionary
	containing data
In-Reply-To: <1106476044.11905.29.camel@localhost.localdomain>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
	<1106476044.11905.29.camel@localhost.localdomain>
Message-ID: <1106476488.11905.31.camel@localhost.localdomain>

On Sun, 2005-01-23 at 10:27 +0000, Matt Goodall wrote:
> On Sun, 2005-01-23 at 20:12 +1100, Mary Gardiner wrote:
> > I've got a Page object that derives all its data from a dictionary, eg:
> > 
> > {
> >     'project_name': 'project',
> >     'project_description': 'hello',
> >     # ... you get the idea
> > }
> > 
> > What's a good way for the Page object to wrap that dictionary that
> > doesn't involve doing this:
> > 
> >     def data_name(self, ctx, data):
> >         return self.d['project_name']
> > 
> >     def data_description(self, ctx, data):
> >         return self.d['project_description']
> > 
> >     # and so on for every key in the dictionary
> > 
> > I vaguely recall that the equivalent of this used to be possible in
> > Woven:
> > 
> >     def data_project(self, ctx, data):
> >         return self.d
> > 
> > and then that the data items were accessible by (say)
> > stan.directive("project/project_name"). This doesn't look like its
> > supported in Nevow. Is this correct? What alternative designs are there
> > for something like this?
> 
> If a dict is the currently in scope data (the IData) for a template then
> nested data directives will look inside the dict (see
> accessors.DictionaryContainer for details):
> 
>         <div n:data="personAsDict">
>           <p n:data="name">...</p>
>           <p n:data="address">...</p>
>         </div>

The stan equivalent being, tags.p(data=tags.directive('name')).

> 
> In that example, the 'name' and 'address' directives are equivalent to
> personAsDict['name'] and personAsDict['address'] respectively.
> 
> There's also the mapping render (rend.mapping) That fills slots with the
> content of the dict:
> 
>         <div n:data="personAsDict" n:render="mapping">
>           <p><n:slot name="name" /></p>
>           <p><n:slot name="address" /></p>
>         </div>
> 
> Hope this helps.
> 
> Cheers, Matt
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From matt at pollenation.net  Sun Jan 23 07:09:31 2005
From: matt at pollenation.net (Matt Goodall)
Date: Sun Jan 23 07:09:44 2005
Subject: [Twisted-web] Page object design: wrapping a dictionary
	containing data
In-Reply-To: <41F378F6.70005@thecablelounge.com>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
	<41F378F6.70005@thecablelounge.com>
Message-ID: <1106489371.11905.44.camel@localhost.localdomain>

On Sun, 2005-01-23 at 20:14 +1000, Andy Gayton wrote:
> Mary Gardiner wrote:
> 
>  > What's a good way for the Page object to wrap that dictionary that
>  > doesn't involve doing this:
>  >
>  >     def data_name(self, ctx, data):
>  >         return self.d['project_name']
>  >
>  > ...
>  >
>  > I vaguely recall that the equivalent of this used to be possible in
>  > Woven:
>  >
>  >     def data_project(self, ctx, data):
>  >         return self.d
>  >
>  > and then that the data items were accessible by (say)
>  > stan.directive("project/project_name"). This doesn't look like its
>  > supported in Nevow. Is this correct? What alternative designs are there
>  > for something like this?
> 
> heya Mary,
> 
> there's a lot of Nevow magic I don't know, but in case something doesn't 
> exist, something like the following should work, albeit, pretty crude:
> 
> python -c '
> class C:
>      def __getattr__( self, attr ):
>          if attr.startswith( "data_" ):
>              return lambda ctx, data, s=self, a=attr : s.d["project_%s" 
> % a[len("data_"):]]
>          raise AttributeError
> 
> c = C()
> 
> c.d  = { "project_name" : "roar" }
> ctx  = "ned"
> data = "fred"
> 
> print c.data_name( ctx, data )

I'm not entirely sure where the above would be used but it *looks*
suspiciously like some sort of pseudo-adaption for type C. If that's the
case then you can register an inevow.IContainer adapter and avoid
polluting your application classes with stuff that only Nevow needs ...

        class Person:
            def __init__(self, name, address):
                self.name = name
                self.address = address
        
        class PersonContainer(Adapter):
            __implements__ = inevow.IContainer,
            def child(self, name):
                return getattr(self.original, name)
        
        registerAdapter(PersonContainer, Person, inevow.IContainer)

Yes, I agree it's a bit long-winded to have to do that every time ;-).
So, there is now a ready made adapter for this in svn trunk -
accessors.ObjectContainer - that does the above. Just register it for
your type and it will magically work ...

        class Person:
            def __init__(self, name, address):
                self.name = name
                self.address = address
        
        registerAdapter(accessors.ObjectContainer, Person,
                        inevow.IContainer)

There's an example of this in svn trunk too. See, objcontainer.py.

Hope this helps.

Cheers, Matt


From matt at pollenation.net  Sun Jan 23 07:18:23 2005
From: matt at pollenation.net (Matt Goodall)
Date: Sun Jan 23 07:18:34 2005
Subject: [Twisted-web] Re: Page object design: wrapping a dictionary
	containing data
In-Reply-To: <2mu0p8a1fh.fsf@starship.python.net>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
	<2mu0p8a1fh.fsf@starship.python.net>
Message-ID: <1106489903.11905.53.camel@localhost.localdomain>

On Sun, 2005-01-23 at 10:24 +0000, Michael Hudson wrote:
> Mary Gardiner <mary-twisted@puzzling.org> writes:
> 
> > I've got a Page object that derives all its data from a dictionary, eg:
> >
> > {
> >     'project_name': 'project',
> >     'project_description': 'hello',
> >     # ... you get the idea
> > }
> >
> > What's a good way for the Page object to wrap that dictionary that
> > doesn't involve doing this:
> >
> >     def data_name(self, ctx, data):
> >         return self.d['project_name']
> >
> >     def data_description(self, ctx, data):
> >         return self.d['project_description']
> >
> >     # and so on for every key in the dictionary
> >
> > I vaguely recall that the equivalent of this used to be possible in
> > Woven:
> >
> >     def data_project(self, ctx, data):
> >         return self.d
> >
> > and then that the data items were accessible by (say)
> > stan.directive("project/project_name"). This doesn't look like its
> > supported in Nevow. Is this correct? What alternative designs are there
> > for something like this?
> 
> I think something like this:
> 
>     def data_dict(self, thing):
>         return self.d[thing]
> 
> then nevow:data="dict project_name" shoud work.  I think.

This is a parameterised data_ method, right? In which case it should
look like:

        def data_dict(self, thing):
            def _(ctx, data):
                return self.d[thing]
            return _

Parameterised render_ methods look similar.

Basically, Nevow expects parameterised data_ and render_ methods to
return a callable (the _ function in the above example) with a signature
of (ctx, data).

The "weird" syntax is due to some crazy magic in the stan flatteners.
There's not a lot we can do about that right now, although I think it
may be possible to fix in the future.

Having said all that, there may be better ways of doing this anyway,
i.e. provide an inevow.IContainer adapter or use the standard adapters
Nevow provides for tuple, list and dict. See my other posts for more.

Cheers, Matt


From andy at thecablelounge.com  Sun Jan 23 19:04:02 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Sun Jan 23 19:04:22 2005
Subject: [Twisted-web] Page object design: wrapping a dictionary	containing
	data
In-Reply-To: <1106489371.11905.44.camel@localhost.localdomain>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>	<41F378F6.70005@thecablelounge.com>
	<1106489371.11905.44.camel@localhost.localdomain>
Message-ID: <41F45792.1030709@thecablelounge.com>


> Hope this helps.

Yeah it all does, thanks Matt.

Still struggling with the trade off between spending a couple of hours 
to find a nevow provided way of doing things vs an off the top of the 
head hack using traditional python magic ... as should be expected when 
using a .3 release framework :)

Threads like this help a lot.

cheers,
Andy.


From tv at twistedmatrix.com  Sun Jan 23 22:30:34 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun Jan 23 22:31:13 2005
Subject: [Twisted-web] Re: [Nevow-commits] r1110 - Epydoc cleanup.
In-Reply-To: <5F198CD0-6D12-11D9-B76D-000A95A50FB2@fuhm.net>
References: <E1CsXiO-0006kj-Qj@tesla.divmod.com>
	<5F198CD0-6D12-11D9-B76D-000A95A50FB2@fuhm.net>
Message-ID: <41F487FA.4070508@twistedmatrix.com>

James Y Knight wrote:

> Fixing the comments to look pretty in autogenerated docs seems like a 
> good idea, but does epydoc *really* make you do the following?? There 
> goes easy copy-and-pastability..

You can do

--8<--
See this example::

    foo
--8<--

instead of

--8<--
 >>> foo
--8<--

but then it doesn't highlight it as code.


Why was there a Cc: to "tv@divmod.net"?


From dp at ulaluma.com  Mon Jan 24 08:14:02 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Jan 24 08:14:38 2005
Subject: [Twisted-web] flattener for decimal type
In-Reply-To: <20050123032847.GM7587@dualathlon.random>
References: <20050123032847.GM7587@dualathlon.random>
Message-ID: <94716122-6E1A-11D9-926F-000A95864FC4@ulaluma.com>


On Jan 22, 2005, at 7:28 PM, Andrea Arcangeli wrote:

> This avoids an exception when returning decimals through some data
> method. Works for me so far (apparently I didn't need to import the
> decimal module, not sure why ;).

Applied, thanks.

dp


From dp at ulaluma.com  Mon Jan 24 08:22:00 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Jan 24 08:22:14 2005
Subject: [Twisted-web] Re: Page object design: wrapping a dictionary
	containing data
In-Reply-To: <2mu0p8a1fh.fsf@starship.python.net>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
	<2mu0p8a1fh.fsf@starship.python.net>
Message-ID: <B170D447-6E1B-11D9-926F-000A95864FC4@ulaluma.com>


On Jan 23, 2005, at 2:24 AM, Michael Hudson wrote:

> Mary Gardiner <mary-twisted@puzzling.org> writes:
>
>> I've got a Page object that derives all its data from a dictionary, 
>> eg:
>>
>> {
>>     'project_name': 'project',
>>     'project_description': 'hello',
>>     # ... you get the idea
>> }
>>
>> What's a good way for the Page object to wrap that dictionary that
>> doesn't involve doing this:
>>
>>     def data_name(self, ctx, data):
>>         return self.d['project_name']
>>
>>     def data_description(self, ctx, data):
>>         return self.d['project_description']
>>
>>     # and so on for every key in the dictionary
>>
>> I vaguely recall that the equivalent of this used to be possible in
>> Woven:
>>
>>     def data_project(self, ctx, data):
>>         return self.d
>>
>> and then that the data items were accessible by (say)
>> stan.directive("project/project_name"). This doesn't look like its
>> supported in Nevow. Is this correct? What alternative designs are 
>> there
>> for something like this?

Model path notation (/ and ..) are not yet supported by Nevow. But you 
don't need model path notation to do what you want. If all you want to 
do is pass a dict to the Page and have template directives locate data 
in that dict, you don't have to do anything at all:

rend.Page(
	dict(one=1, two=2),
	docFactory=loaders.xmlstr(
		"""<html xmlns:n="http://nevow.com/ns/nevow/0.1">
	<div n:render="string" n:data="one" />
	<span n:render="string" n:data="two" />
</html>""")).renderSynchronously()

<html><div>1</div><span>2</span></html>

Is it really that hard to figure out that things like this are 
possible? :-(

dp


From mary-twisted at puzzling.org  Mon Jan 24 14:30:01 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon Jan 24 14:30:08 2005
Subject: [Twisted-web] Re: Page object design: wrapping a dictionary
	containing data
In-Reply-To: <B170D447-6E1B-11D9-926F-000A95864FC4@ulaluma.com>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
	<2mu0p8a1fh.fsf@starship.python.net>
	<B170D447-6E1B-11D9-926F-000A95864FC4@ulaluma.com>
Message-ID: <20050124213001.GA9598@home.puzzling.org>

On Mon, Jan 24, 2005, Donovan Preston wrote:
> Is it really that hard to figure out that things like this are
> possible? :-(

I should critique the existing docs for you, but I tend to skim a lot,
and it's possible the data is there.  It's quite difficult to work it
out by reading the nevow source itself though. I spent around an hour on
it, and Andrew spent two.

-Mary

From mesozoic at polynode.com  Mon Jan 24 14:37:58 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Mon Jan 24 14:38:31 2005
Subject: [Twisted-web] Re: Re: Twisted web wiki has been attacked by spammers
In-Reply-To: <1106475134.11905.18.camel@localhost.localdomain>
References: <20050123074719.GA17741@sourdust.home.puzzling.org>
	<20050123075018.GB17741@sourdust.home.puzzling.org>
	<1106475134.11905.18.camel@localhost.localdomain>
Message-ID: <20050124213758.GA6657@perpetual.moxn.net>

Don't newer versions of Moin Moin include anti-spam features?

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/
 
"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_

From jason.mobarak at gmail.com  Mon Jan 24 14:39:00 2005
From: jason.mobarak at gmail.com (Jason Mobarak)
Date: Mon Jan 24 14:39:03 2005
Subject: [Twisted-web] Re: Page object design: wrapping a dictionary
	containing data
In-Reply-To: <B170D447-6E1B-11D9-926F-000A95864FC4@ulaluma.com>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
	<2mu0p8a1fh.fsf@starship.python.net>
	<B170D447-6E1B-11D9-926F-000A95864FC4@ulaluma.com>
Message-ID: <b194c919050124133915c6089@mail.gmail.com>

On Mon, 24 Jan 2005 07:22:00 -0800, Donovan Preston <dp@ulaluma.com> wrote:
> rend.Page(
>         dict(one=1, two=2),
>         docFactory=loaders.xmlstr(
>                 """<html xmlns:n="http://nevow.com/ns/nevow/0.1">
>         <div n:render="string" n:data="one" />
>         <span n:render="string" n:data="two" />
> </html>""")).renderSynchronously()
> 
> <html><div>1</div><span>2</span></html>
> 

I might be misunderstanding something... but what's the point of
having http://nevow.com/ns/nevow/0.[123] for the xmlns declaration if
that URL just 404s?

From mithrandi-twisted-web at mithrandi.za.net  Mon Jan 24 15:02:02 2005
From: mithrandi-twisted-web at mithrandi.za.net (Tristan Seligmann)
Date: Mon Jan 24 15:02:13 2005
Subject: [Twisted-web] Re: Page object design: wrapping a dictionary
	containing data
In-Reply-To: <b194c919050124133915c6089@mail.gmail.com>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
	<2mu0p8a1fh.fsf@starship.python.net>
	<B170D447-6E1B-11D9-926F-000A95864FC4@ulaluma.com>
	<b194c919050124133915c6089@mail.gmail.com>
Message-ID: <20050124220202.GB25092@mithrandi.za.net>

On Mon, Jan 24, 2005 at 14:39:00 -0700, Jason Mobarak wrote:
> I might be misunderstanding something... but what's the point of
> having http://nevow.com/ns/nevow/0.[123] for the xmlns declaration if
> that URL just 404s?

It just needs to be a unique name, it doesn't specifically have to point
to anything (although often the URL points to a DTD or similar).
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050125/5953f8dd/attachment.bin
From mailinglists at shechen.at  Tue Jan 25 16:05:00 2005
From: mailinglists at shechen.at (noema)
Date: Tue Jan 25 16:05:33 2005
Subject: [Twisted-web] livepage breaks after reload
Message-ID: <41F6D09C.90608@shechen.at>


I have just started implementing another webapp, this time with 
livepage. When I tried to add more than one page objects (published 
objects derived from rend.Page) I noticed that any kind of page reload 
other than through JavaScript breakes the livepage functionality. When I 
tried to find the cause I did not get very far. It simply seems to me 
that python functions that are connected to javascript events do not get 
through.

This does not only happen with my app but also with the chatola app from 
the example directory. When I reload chatola the browser does not update 
its html dom anymore. I basically have to restart the browser to make it 
work again.

I can reproduce these symptoms on firefox 0.7-1.0 for linux and windows.

I also noticed that the liveanimal example works fine throughout reloads.

Constructive thoughts very much appreciated!

#noema




From mailinglists at shechen.at  Tue Jan 25 16:05:42 2005
From: mailinglists at shechen.at (noema)
Date: Tue Jan 25 16:06:09 2005
Subject: [Twisted-web] livepage breaks after reload
Message-ID: <41F6D0C6.3020601@shechen.at>


I have just started implementing another webapp, this time with 
livepage. When I tried to add more than one page objects (published 
objects derived from rend.Page) I noticed that any kind of page reload 
other than through JavaScript breakes the livepage functionality. When I 
tried to find the cause I did not get very far. It simply seems to me 
that python functions that are connected to javascript events do not get 
through.

This does not only happen with my app but also with the chatola app from 
the example directory. When I reload chatola the browser does not update 
its html dom anymore. I basically have to restart the browser to make it 
work again.

I can reproduce these symptoms on firefox 0.7-1.0 for linux and windows.

I also noticed that the liveanimal example works fine throughout reloads.

Constructive thoughts very much appreciated!

#noema




From mailinglists at shechen.at  Tue Jan 25 19:25:37 2005
From: mailinglists at shechen.at (noema)
Date: Tue Jan 25 19:26:08 2005
Subject: [Twisted-web] livepage breaks after reload
In-Reply-To: <20050125234917.7026.430212575.divmod.quotient.7124@ohm>
References: <20050125234917.7026.430212575.divmod.quotient.7124@ohm>
Message-ID: <41F6FFA1.6000808@shechen.at>



 > In weever (http://vercingetorix.dyndns.org:20080) I use liveevil
 > with nevow from svn and it only breaks with safari.

Your app seems to work on my browsers

 > I think you are probably using an old version of nevow or
 > something like that.

I just svn'd nevow the other day and to make sure I checked out the most 
current version again today -> the problem persists.

 > otherwise you are probably doing something
 > wrong with the code but it's hard to tell without any code.

OK ... I boiled down my code to the bare minimum  (originally it is 
derived from the chatola app) and as i suspected the problem is still 
reproducable. The following is a .tac file which I start with "twistd 
-noy <filename>". It starts a server with one page that has two livepage 
handlers. One of them is called when the page loads another one when you 
click the link. Everything works fine until I reload the page and/or add 
some locateChild action.

More constructive thoughts appreciated.

_noema




#################### START OF .TAC FILE ########################

import random

from twisted.cred import portal, checkers, credentials
from twisted.application import service, internet

from nevow import inevow, loaders, rend, tags
from nevow import livepage, guard, url, appserver




class MyPageRealm:
     __implements__ = portal.IRealm

     def __init__(self):
         self.clients = []
         self.topic = "test1"

     def requestAvatar(self, avatarId, mind, *interfaces):
         if inevow.IResource in interfaces:
             if avatarId is checkers.ANONYMOUS:
                 mind.userId = random.choice(('one', 'two', 'three'))

                 def onSessionExpire():
                     self.userLeft(mind)

                 return (inevow.IResource,
                         MyPage([self, mind]), onSessionExpire)

         raise NotImplementedError("Can't support that interface.")

     def userJoined(self, client):
         if client in self.clients:
             self.userLeft(client)
         self.clients.append(client)

     def userLeft(self, client):
         self.clients.remove(client)





class MyPage(rend.Page):

     def __init__(self, data):
         rend.Page.__init__(self, data)
         self.realm = data[0]
         self.client = data[1]


     def render_body(self, ctx, data):
         self.realm.userJoined(self.client)

         self.client.set('sometext', tags.h1['This is from LivePage!'])

         session = inevow.ISession(ctx)
         def unload(client):
             session.expire()
         return ctx.tag(onunload=livepage.handler(unload))


     def onLinkAction(self, client):
         client.set('atag',
             random.choice(('one', 'two', 'three', 'four', 'five')))


     def render_link(self, context, data):
         return tags.a(onclick=livepage.handler(self.onLinkAction),
                     href=url.here, id="atag")['click!']


     def render_glue(self, context, data):
         return livepage.glue


     docFactory = loaders.stan(
     tags.html[
         tags.head[
             tags.title["mypage"],
           ],
         tags.body(render=render_body)[
             tags.div(id='sometext')['to be filled by livepage'],
             tags.div[
                 render_link
             ],
             tags.span(render=render_glue)
         ]
     ])



realm = MyPageRealm()
portal = portal.Portal(realm)

portal.registerChecker(checkers.AllowAnonymousAccess(),
                        credentials.IAnonymous)
site = appserver.NevowSite(
     guard.SessionWrapper(portal, mindFactory=livepage.LiveEvil))

application = service.Application("mypage")
internet.TCPServer(8080, site).setServiceParent(application)

#################### END OF .TAC FILE ##########################


From mailinglists at shechen.at  Wed Jan 26 08:37:00 2005
From: mailinglists at shechen.at (noema)
Date: Wed Jan 26 08:37:30 2005
Subject: [Twisted-web] livepage breaks after reload
In-Reply-To: <20050125234917.7026.430212575.divmod.quotient.7124@ohm>
References: <20050125234917.7026.430212575.divmod.quotient.7124@ohm>
Message-ID: <41F7B91C.8020000@shechen.at>


Ahh this is killing me!
Part of the problem that I described earlier in this thread is that 
simply adding a locateChild stops javascript events from triggering the 
connected python function/methode.

I am trying to render the same page no matter what url (past the domain) 
  is given. This single page should render differently depending on the 
url, though. So in locateChild I store the url segments and return self 
and an empty segment tuple. This seems to work but, as I said, breaks 
the livepage functionality.

WHY is locateChild DOING thaaAAt????

What follows is some code that illustrates exactly that. Javascript 
events come perfectly through until I uncommend the localChild methode.

#noema



#################### START OF .TAC FILE ########################

import random
from twisted.application import service, internet
from nevow import loaders, rend, tags, livepage, url


class MyPage(rend.Page):
     addSlash = True

     #def locateChild(self, context, segments):
     #    #store the rest of the url for any kind of manual processing
     #    self.postpath = segments
     #    return self, ()

     def onLinkAction(self, client):
         client.set('atag',
             random.choice(('one', 'two', 'three', 'four', 'five')))

     def render_link(self, context, data):
         return tags.a(onclick=livepage.handler(self.onLinkAction),
                     href=url.here, id="atag")['click!']


     def render_glue(self, context, data):
         return livepage.glue


     docFactory = loaders.stan(
     tags.html[
         tags.head[
             tags.title["mypage"],
           ],
         tags.body[
             tags.div[
                 render_link
             ],
             tags.span(render=render_glue)
         ]
     ])



application = service.Application('mypage')
internet.TCPServer(8080, livepage.LiveSite(MyPage()))\
     .setServiceParent(application)


#################### END OF .TAC FILE ##########################


From matt at pollenation.net  Wed Jan 26 08:56:39 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed Jan 26 08:57:03 2005
Subject: [Twisted-web] livepage breaks after reload
In-Reply-To: <41F7B91C.8020000@shechen.at>
References: <20050125234917.7026.430212575.divmod.quotient.7124@ohm>
	<41F7B91C.8020000@shechen.at>
Message-ID: <1106755000.25740.21.camel@localhost.localdomain>

On Wed, 2005-01-26 at 16:37 +0100, noema wrote:
> Ahh this is killing me!
> Part of the problem that I described earlier in this thread is that 
> simply adding a locateChild stops javascript events from triggering the 
> connected python function/methode.
> 
> I am trying to render the same page no matter what url (past the domain) 
>   is given. This single page should render differently depending on the 
> url, though. So in locateChild I store the url segments and return self 
> and an empty segment tuple. This seems to work but, as I said, breaks 
> the livepage functionality.
> 
> WHY is locateChild DOING thaaAAt????

It's because you're not allowing the subclass to have a go at locating
the child and so the 'link' and 'glue' child resource cannot be found.
See below.

You're locate child should look something more like ...

def locateChild(self, context, segments):

    # Do whatever you need to do here, probably returning
    # a resource and the remaining segments.

    # I don't know what it is so let Page (my subclass) try.
    return rend.Page.locateChild(self, context, segments)

> 
> What follows is some code that illustrates exactly that. Javascript 
> events come perfectly through until I uncommend the localChild methode.
> 
> #noema
> 
> 
> 
> #################### START OF .TAC FILE ########################
> 
> import random
> from twisted.application import service, internet
> from nevow import loaders, rend, tags, livepage, url
> 
> 
> class MyPage(rend.Page):
>      addSlash = True
> 
>      #def locateChild(self, context, segments):
>      #    #store the rest of the url for any kind of manual processing
>      #    self.postpath = segments
>      #    return self, ()
> 
>      def onLinkAction(self, client):
>          client.set('atag',
>              random.choice(('one', 'two', 'three', 'four', 'five')))
> 
>      def render_link(self, context, data):
>          return tags.a(onclick=livepage.handler(self.onLinkAction),
>                      href=url.here, id="atag")['click!']
> 
> 
>      def render_glue(self, context, data):
>          return livepage.glue
> 
> 
>      docFactory = loaders.stan(
>      tags.html[
>          tags.head[
>              tags.title["mypage"],
>            ],
>          tags.body[
>              tags.div[
>                  render_link
>              ],
>              tags.span(render=render_glue)
>          ]
>      ])
> 
> 
> 
> application = service.Application('mypage')
> internet.TCPServer(8080, livepage.LiveSite(MyPage()))\
>      .setServiceParent(application)
> 
> 
> #################### END OF .TAC FILE ##########################
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From mailinglists at shechen.at  Wed Jan 26 11:29:45 2005
From: mailinglists at shechen.at (noema)
Date: Wed Jan 26 11:30:15 2005
Subject: [Twisted-web] livepage breaks after reload
In-Reply-To: <1106755000.25740.21.camel@localhost.localdomain>
References: <20050125234917.7026.430212575.divmod.quotient.7124@ohm>	<41F7B91C.8020000@shechen.at>
	<1106755000.25740.21.camel@localhost.localdomain>
Message-ID: <41F7E199.9010302@shechen.at>


> You're locate child should look something more like ...
> 
> def locateChild(self, context, segments):
> 
>     # Do whatever you need to do here, probably returning
>     # a resource and the remaining segments.
> 
>     # I don't know what it is so let Page (my subclass) try.
>     return rend.Page.locateChild(self, context, segments)


I am not sure I fully understand what you mean. Am I not exactly doing 
what you are suggesting?!  I return a resource and the remaining 
segments. Just that in my case the resource is the current resource 
itself and the remaining segments are empty. (to make any child valid 
and be handled by MyPage (which it does just not with livepage support))

 > return rend.Page.locateChild(self, context, segments)

Isn't this returned/called anyways if I wouldn't overwrite the inherited 
locateChild methode.



>>What follows is some code that illustrates exactly that. Javascript 
>>events come perfectly through until I uncommend the localChild methode.
>>
>>#noema
>>
>>
>>
>>#################### START OF .TAC FILE ########################
>>
>>import random
>>from twisted.application import service, internet
>>from nevow import loaders, rend, tags, livepage, url
>>
>>
>>class MyPage(rend.Page):
>>     addSlash = True
>>
>>     #def locateChild(self, context, segments):
>>     #    #store the rest of the url for any kind of manual processing
>>     #    self.postpath = segments
>>     #    return self, ()
>>
>>     def onLinkAction(self, client):
>>         client.set('atag',
>>             random.choice(('one', 'two', 'three', 'four', 'five')))
>>
>>     def render_link(self, context, data):
>>         return tags.a(onclick=livepage.handler(self.onLinkAction),
>>                     href=url.here, id="atag")['click!']
>>
>>
>>     def render_glue(self, context, data):
>>         return livepage.glue
>>
>>
>>     docFactory = loaders.stan(
>>     tags.html[
>>         tags.head[
>>             tags.title["mypage"],
>>           ],
>>         tags.body[
>>             tags.div[
>>                 render_link
>>             ],
>>             tags.span(render=render_glue)
>>         ]
>>     ])
>>
>>
>>
>>application = service.Application('mypage')
>>internet.TCPServer(8080, livepage.LiveSite(MyPage()))\
>>     .setServiceParent(application)
>>
>>
>>#################### END OF .TAC FILE ##########################


From matt at pollenation.net  Wed Jan 26 16:03:09 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed Jan 26 16:03:41 2005
Subject: [Twisted-web] livepage breaks after reload
In-Reply-To: <41F7E199.9010302@shechen.at>
References: <20050125234917.7026.430212575.divmod.quotient.7124@ohm>
	<41F7B91C.8020000@shechen.at>
	<1106755000.25740.21.camel@localhost.localdomain>
	<41F7E199.9010302@shechen.at>
Message-ID: <1106780589.25485.9.camel@localhost.localdomain>

On Wed, 2005-01-26 at 19:29 +0100, noema wrote:
> > You're locate child should look something more like ...
> > 
> > def locateChild(self, context, segments):
> > 
> >     # Do whatever you need to do here, probably returning
> >     # a resource and the remaining segments.
> > 
> >     # I don't know what it is so let Page (my subclass) try.
> >     return rend.Page.locateChild(self, context, segments)
> 
> 
> I am not sure I fully understand what you mean. Am I not exactly doing 
> what you are suggesting?!  I return a resource and the remaining 
> segments. Just that in my case the resource is the current resource 
> itself and the remaining segments are empty. (to make any child valid 
> and be handled by MyPage (which it does just not with livepage support))

Oops, my reasoning was completely flawed although I'm still confident
I'm correct about the problem.

Liveevil connects to the nevow_liveOutput and nevow_liveInput child
resources (see rend.LiveEvilChildMixin). By overriding locateChild, and
not allowing the super class to play, you are blocking access to those
liveevil resources.

> 
>  > return rend.Page.locateChild(self, context, segments)
> 
> Isn't this returned/called anyways if I wouldn't overwrite the inherited 
> locateChild methode.

Yes, *if* you don't override locateChild. But in your code, the problem
occurs once you uncomment locateChild and replace rend.Page's
implementation of locateChild.

If you want to handle all segments but still let Liveevil work, perhaps
the following will help:

        def locateChild(self, ctx, segments):
            r = rend.Page(self, ctx, segments)
            if r is not appserver.NotFound:
                return r
            return self, ()
        
That /should/ let the super class locate the resources needed by
liveevil and make your page handle all other segments.

Hope this makes more sense this time ;-).

Cheers, Matt

> 
> 
> 
> >>What follows is some code that illustrates exactly that. Javascript 
> >>events come perfectly through until I uncommend the localChild methode.
> >>
> >>#noema
> >>
> >>
> >>
> >>#################### START OF .TAC FILE ########################
> >>
> >>import random
> >>from twisted.application import service, internet
> >>from nevow import loaders, rend, tags, livepage, url
> >>
> >>
> >>class MyPage(rend.Page):
> >>     addSlash = True
> >>
> >>     #def locateChild(self, context, segments):
> >>     #    #store the rest of the url for any kind of manual processing
> >>     #    self.postpath = segments
> >>     #    return self, ()
> >>
> >>     def onLinkAction(self, client):
> >>         client.set('atag',
> >>             random.choice(('one', 'two', 'three', 'four', 'five')))
> >>
> >>     def render_link(self, context, data):
> >>         return tags.a(onclick=livepage.handler(self.onLinkAction),
> >>                     href=url.here, id="atag")['click!']
> >>
> >>
> >>     def render_glue(self, context, data):
> >>         return livepage.glue
> >>
> >>
> >>     docFactory = loaders.stan(
> >>     tags.html[
> >>         tags.head[
> >>             tags.title["mypage"],
> >>           ],
> >>         tags.body[
> >>             tags.div[
> >>                 render_link
> >>             ],
> >>             tags.span(render=render_glue)
> >>         ]
> >>     ])
> >>
> >>
> >>
> >>application = service.Application('mypage')
> >>internet.TCPServer(8080, livepage.LiveSite(MyPage()))\
> >>     .setServiceParent(application)
> >>
> >>
> >>#################### END OF .TAC FILE ##########################
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From maillists at ivsn.com  Thu Jan 27 15:49:29 2005
From: maillists at ivsn.com (Paul Reznicek)
Date: Thu Jan 27 15:50:07 2005
Subject: [Twisted-web] Nevow error with unicode localization in appserver.py
Message-ID: <41F96FF9.2060704@ivsn.com>

Below suggested patches to omit broken output, if unicode
is returned instead of string.
Problem occurred during localization with gettext, see this
sample code:
-------------------------------------------------------------------
import gettext

from twisted.internet import reactor
from twisted.protocols import http
from nevow import inevow, rend, loaders, tags, appserver, static, guard

class Index(rend.Page):
     addSlash = True
     child_css = static.File('static/css')
     child_img = static.File('static/img')
     docFactory = loaders.xmlfile('static/index.html')

     def renderHTTP(self, ctx):
         request = inevow.IRequest(ctx)
         # Dynamic LOCALIZATION ===============================================
         # inspired by http://www.ospace.net/index.en.html
         language = request.getHeader('accept-language').split(',')[0][:2]
         try:
             tran = gettext.translation('PROJECT', 'static/locale', languages = [language])
         except IOError:
             print 'Cannot find catalog for "', language, '", installing null translations'
             tran = gettext.NullTranslations()
         tran.install(unicode = 1)
         # ====================================================================
         # got from: nevow/examples/http_auth.py
         username, password = request.getUser(), request.getPassword()
         if (username, password) == ('', ''):
             request.setHeader('WWW-Authenticate', 'Basic realm="Whatever"')
             request.setResponseCode(http.UNAUTHORIZED)
             return _("Authentication required.")    # THIS RETURN UNICODE
         ## They provided a username and password, so let's let them in! hurray
         self.data_username, self.data_password = username, password
         return rend.Page.renderHTTP(self, ctx)

site = appserver.NevowSite(Index())
reactor.listenTCP(8080, site)
reactor.run()
-------------------------------------------------------------------
Paul Reznicek

Necessary patch:
===================================================================
--- nevow/appserver.py (Revision 1126)
+++ nevow/appserver.py (local)
@@ -167,8 +167,8 @@
          self.deferred.callback("")

      def _cbFinishRender(self, html, ctx):
-        if isinstance(html, str):
-            self.write(html)
+        if isinstance(html, basestring):
+            self.write(html.encode('utf8'))
              server.Request.finish(self)
          elif html is errorMarker:
              ## Error webpage has already been rendered and finish called


I believe, the wsgi.py can have similar problem:
===================================================================
--- nevow/wsgi.py (Revision 1126)
+++ nevow/wsgi.py (local)
@@ -84,8 +84,8 @@
              p = rend.FourOhFour()

          result = p.renderHTTP(pctx)
-        if isinstance(result, str):
-            request.write(result)
+        if isinstance(result, basestring):
+            request.write(result.encode('utf8'))
          else:
              ## Exhaust the generator
              list(result)



From mailinglists at shechen.at  Thu Jan 27 19:01:45 2005
From: mailinglists at shechen.at (noema)
Date: Thu Jan 27 19:02:17 2005
Subject: [Twisted-web] livepage breaks after reload
In-Reply-To: <1106780589.25485.9.camel@localhost.localdomain>
References: <20050125234917.7026.430212575.divmod.quotient.7124@ohm>	<41F7B91C.8020000@shechen.at>	<1106755000.25740.21.camel@localhost.localdomain>	<41F7E199.9010302@shechen.at>
	<1106780589.25485.9.camel@localhost.localdomain>
Message-ID: <41F99D09.5030004@shechen.at>


Thanx a lot Matt! Your suggestion was close enough.
In case somebody else is interested. This is what finally did the trick 
for me:


     def locateChild(self, ctx, segments):
         r = rend.Page.locateChild(self, ctx, segments[-1:])
         if r is not rend.NotFound:
             return r

         return self, segments[1:]



#noema




Matt Goodall wrote:
> On Wed, 2005-01-26 at 19:29 +0100, noema wrote:
> 
>>>You're locate child should look something more like ...
>>>
>>>def locateChild(self, context, segments):
>>>
>>>    # Do whatever you need to do here, probably returning
>>>    # a resource and the remaining segments.
>>>
>>>    # I don't know what it is so let Page (my subclass) try.
>>>    return rend.Page.locateChild(self, context, segments)
>>
>>
>>I am not sure I fully understand what you mean. Am I not exactly doing 
>>what you are suggesting?!  I return a resource and the remaining 
>>segments. Just that in my case the resource is the current resource 
>>itself and the remaining segments are empty. (to make any child valid 
>>and be handled by MyPage (which it does just not with livepage support))
> 
> 
> Oops, my reasoning was completely flawed although I'm still confident
> I'm correct about the problem.
> 
> Liveevil connects to the nevow_liveOutput and nevow_liveInput child
> resources (see rend.LiveEvilChildMixin). By overriding locateChild, and
> not allowing the super class to play, you are blocking access to those
> liveevil resources.
> 
> 
>> > return rend.Page.locateChild(self, context, segments)
>>
>>Isn't this returned/called anyways if I wouldn't overwrite the inherited 
>>locateChild methode.
> 
> 
> Yes, *if* you don't override locateChild. But in your code, the problem
> occurs once you uncomment locateChild and replace rend.Page's
> implementation of locateChild.
> 
> If you want to handle all segments but still let Liveevil work, perhaps
> the following will help:
> 
>         def locateChild(self, ctx, segments):
>             r = rend.Page(self, ctx, segments)
>             if r is not appserver.NotFound:
>                 return r
>             return self, ()
>         
> That /should/ let the super class locate the resources needed by
> liveevil and make your page handle all other segments.
> 
> Hope this makes more sense this time ;-).
> 
> Cheers, Matt
> 
> 
>>
>>
>>>>What follows is some code that illustrates exactly that. Javascript 
>>>>events come perfectly through until I uncommend the localChild methode.
>>>>
>>>>#noema
>>>>
>>>>
>>>>
>>>>#################### START OF .TAC FILE ########################
>>>>
>>>>import random
>>>
>>>>from twisted.application import service, internet
>>>>from nevow import loaders, rend, tags, livepage, url
>>>
>>>>
>>>>class MyPage(rend.Page):
>>>>    addSlash = True
>>>>
>>>>    #def locateChild(self, context, segments):
>>>>    #    #store the rest of the url for any kind of manual processing
>>>>    #    self.postpath = segments
>>>>    #    return self, ()
>>>>
>>>>    def onLinkAction(self, client):
>>>>        client.set('atag',
>>>>            random.choice(('one', 'two', 'three', 'four', 'five')))
>>>>
>>>>    def render_link(self, context, data):
>>>>        return tags.a(onclick=livepage.handler(self.onLinkAction),
>>>>                    href=url.here, id="atag")['click!']
>>>>
>>>>
>>>>    def render_glue(self, context, data):
>>>>        return livepage.glue
>>>>
>>>>
>>>>    docFactory = loaders.stan(
>>>>    tags.html[
>>>>        tags.head[
>>>>            tags.title["mypage"],
>>>>          ],
>>>>        tags.body[
>>>>            tags.div[
>>>>                render_link
>>>>            ],
>>>>            tags.span(render=render_glue)
>>>>        ]
>>>>    ])
>>>>
>>>>
>>>>
>>>>application = service.Application('mypage')
>>>>internet.TCPServer(8080, livepage.LiveSite(MyPage()))\
>>>>    .setServiceParent(application)
>>>>
>>>>
>>>>#################### END OF .TAC FILE ##########################
>>
>>
>>_______________________________________________
>>Twisted-web mailing list
>>Twisted-web@twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 

From maillists at ivsn.com  Fri Jan 28 01:26:09 2005
From: maillists at ivsn.com (Paul Reznicek)
Date: Fri Jan 28 01:27:09 2005
Subject: [Twisted-web] Nevow error with unicode localization in appserver.py
	REVISED
Message-ID: <41F9F721.3090109@ivsn.com>

REVISED:
After some other tests - there must be encoding ONLY on unicode strings,
otherwise binary file transfer fails (try nevow/examples/image_uploader)
Paul Reznicek

Necessary patch:
===================================================================
--- appserver.py (Revision 1126)
+++ appserver.py (local)
@@ -170,6 +170,9 @@
          if isinstance(html, str):
              self.write(html)
              server.Request.finish(self)
+        elif isinstance(html, unicode):
+            self.write(html.encode('utf8'))
+            server.Request.finish(self)
          elif html is errorMarker:
              ## Error webpage has already been rendered and finish called
              pass

I believe, the wsgi.py can have similar problem:
===================================================================
--- wsgi.py (Revision 1126)
+++ wsgi.py (local)
@@ -86,6 +86,8 @@
          result = p.renderHTTP(pctx)
          if isinstance(result, str):
              request.write(result)
+        elif isinstance(result, unicode):
+            request.write(result.encode('utf8'))
          else:
              ## Exhaust the generator
              list(result)

From prabaharpython at yahoo.co.in  Fri Jan 28 06:07:06 2005
From: prabaharpython at yahoo.co.in (Mosas)
Date: Fri Jan 28 06:07:56 2005
Subject: [Twisted-web] How to develop a module to download a file from a path
In-Reply-To: <E1CuVLY-0004jc-00@wolfwood>
Message-ID: <20050128130706.93076.qmail@web8207.mail.in.yahoo.com>

Dear All,

    I want know how to develop a module to download
a file from a path using twisted.web.static.File
Class .
    I think using this class we can create easily
Actually I am new to twisted concepts. So If anybody
know regarding this mail me.

regards
prabahar				  

________________________________________________________________________
Yahoo! India Matrimony: Find your life partner online
Go to: http://yahoo.shaadi.com/india-matrimony

From foom at fuhm.net  Fri Jan 28 09:15:35 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Jan 28 09:15:51 2005
Subject: [Twisted-web] Nevow error with unicode localization in
	appserver.py
In-Reply-To: <41F96FF9.2060704@ivsn.com>
References: <41F96FF9.2060704@ivsn.com>
Message-ID: <D75D1BDB-7147-11D9-B9BF-000A95A50FB2@fuhm.net>

On Jan 27, 2005, at 5:49 PM, Paul Reznicek wrote:
> Below suggested patches to omit broken output, if unicode
> is returned instead of string.
> Problem occurred during localization with gettext, see this
> sample code:

> Necessary patch:
> ===================================================================
> --- appserver.py (Revision 1126)
> +++ appserver.py (local)
> @@ -170,6 +170,9 @@
>          if isinstance(html, str):
>              self.write(html)
>              server.Request.finish(self)
> +        elif isinstance(html, unicode):
> +            self.write(html.encode('utf8'))
> +            server.Request.finish(self)
>          elif html is errorMarker:
>              ## Error webpage has already been rendered and finish 
> called
>              pass

No. HTTP talks bytes, not characters. If you use the nevow rendering 
stuff, you get automatic encoding of characters into bytes via the 
UTF-8 encoding, but if you're going to override renderHTTP and return 
your own data, it should be a byte string.

appserver is really part of the HTTP server, not nevow (even though it 
is in the nevow package at the moment), and thus ought not know or care 
anything about what kind of data you are sending. It could be html in 
UTF-8, html in ISO8859-1, jpeg images, anything.

James


From prabaharpython at yahoo.co.in  Sat Jan 29 01:22:44 2005
From: prabaharpython at yahoo.co.in (Mosas)
Date: Sat Jan 29 01:23:25 2005
Subject: [Twisted-web] How to develop a module to download a file from a
	path
In-Reply-To: <20050128130706.93076.qmail@web8207.mail.in.yahoo.com>
Message-ID: <20050129082244.87286.qmail@web8206.mail.in.yahoo.com>

Dear All,
     Using html form how to develop downloading and
uploading of a file in twisted.web.

regards
Praba	


________________________________________________________________________
Yahoo! India Matrimony: Find your life partner online
Go to: http://yahoo.shaadi.com/india-matrimony

From maillists at ivsn.com  Sat Jan 29 02:36:02 2005
From: maillists at ivsn.com (Paul Reznicek)
Date: Sat Jan 29 02:36:58 2005
Subject: [Twisted-web] Nevow error with unicode localization
	in	appserver.py
In-Reply-To: <D75D1BDB-7147-11D9-B9BF-000A95A50FB2@fuhm.net>
References: <41F96FF9.2060704@ivsn.com>
	<D75D1BDB-7147-11D9-B9BF-000A95A50FB2@fuhm.net>
Message-ID: <41FB5902.6060702@ivsn.com>

OK - thanks for explanation, you're right!
Paul

James Y Knight wrote:
  > No. HTTP talks bytes, not characters. If you use the nevow rendering
> stuff, you get automatic encoding of characters into bytes via the UTF-8 
> encoding, but if you're going to override renderHTTP and return your own 
> data, it should be a byte string.
> 
> appserver is really part of the HTTP server, not nevow (even though it 
> is in the nevow package at the moment), and thus ought not know or care 
> anything about what kind of data you are sending. It could be html in 
> UTF-8, html in ISO8859-1, jpeg images, anything.
> 
> James

From andrea at cpushare.com  Sat Jan 29 07:32:09 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 29 07:31:51 2005
Subject: [Twisted-web] default virtual server page fails
Message-ID: <20050129143209.GB10440@opteron.random>

It seems self is null. Using the class name rather than the null
instance worked around it.

(I don't need this fix since I pass my own default page, but I found it
while writing my code)

Index: nevow/vhost.py
===================================================================
--- nevow/vhost.py	(revision 1131)
+++ nevow/vhost.py	(working copy)
@@ -19,7 +19,7 @@
 """
 
     def getStyleSheet(self):
-        return self.stylesheet
+        return VirtualHostList.stylesheet
  
     def data_hostlist(self, context, data):
         return self.nvh.hosts.keys()

From andrea at cpushare.com  Sat Jan 29 07:55:50 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 29 07:55:33 2005
Subject: [Twisted-web] load balancing and performance
Message-ID: <20050129145550.GD10440@opteron.random>

I successfully load balanced the static server with pythondirector.

However it has a few problems:

1) it cannot handle ssl
2) even if it can handle ssl I still need to share the session cookies
   and I'm thinking that using sql or atop to do that isn't necessary:
   the session doesn't need to survive a reboot, a reboot would be a visible
   disruption of the services anyway, so I'm thinking to write a little
   session daemon that only stores the cookies using pb to do that.
   In theory shared memory would be much more efficient in smp, but at least
   this socket model has the advantage of scaling in the cluster too
3) the load balancer misses an API with the real webserver to pass up the
   client IP address, that's annoying, especially the logs gets screwed

Other than that the speed of the load balancer is excellent, and I get
exactly the double number of pages rendered per second (after fixing a
small bug in pythondirector that confused ab2).

Perhaps I'm going with wrong priorities though, the major offender is
compy, compy must be dropped from Nevow ASAP :). Leaving it as a
compatibility API may be ok, but internally compy can't invoke
getComponents anymore if we do care about writing remotely optimal code.
We should try with the new zope.interfaces API first and see if it
underperforms so horribly as getInterfaces does.

Secondly I'm looking into caching the html and to render some fragment only
once every 10 seconds in the background (so the downloads will never
have to wait for a rendering of some mostly static fragment anymore).

So overall there's an huge room for improvements. What do other people
think?

From tv at twistedmatrix.com  Sat Jan 29 10:33:47 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat Jan 29 10:34:24 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050129145550.GD10440@opteron.random>
References: <20050129145550.GD10440@opteron.random>
Message-ID: <41FBC8FB.7050205@twistedmatrix.com>

Andrea Arcangeli wrote:

>3) the load balancer misses an API with the real webserver to pass up the
>   client IP address, that's annoying, especially the logs gets screwed
>  
>
We need that for reverse proxying, too.

My current idea is to replace the /vhost/http/hostname[:port]/path
style with 
/vhost;host=hostname[;port=port][;scheme=https][;client=1.2.3.4]/path
to allow passing arbitrary variables. That way it's easy to extend in 
the future.


From sridharinfinity at gmail.com  Sat Jan 29 10:36:35 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Sat Jan 29 10:36:39 2005
Subject: [Twisted-web] Source of twisted websites
Message-ID: <8816fcf8050129093630f39c24@mail.gmail.com>

Hi,

I hope both divmod.org and twistedmatrix.com runs from twisted.web. 
Can you point me to the source code (or svn repos) for those websites?

Also is there any site, that makes use of twisted.web.distrib? 

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From general at eepatents.com  Sat Jan 29 10:54:58 2005
From: general at eepatents.com (Ed Suominen)
Date: Sat Jan 29 10:54:52 2005
Subject: [Twisted-web] Source of twisted websites
In-Reply-To: <8816fcf8050129093630f39c24@mail.gmail.com>
References: <8816fcf8050129093630f39c24@mail.gmail.com>
Message-ID: <200501290954.59258.general@eepatents.com>

Why don't you stop begging for freebies all the time and contribute 
something constructive to these lists instead?

---
Ed Suominen
Registered Patent Agent
Open-Source Software Author (yes, both...)
Web Site: http://www.eepatents.com


On Saturday 29 January 2005 09:36 am, Sridhar Ratna wrote:
> Hi,
>
> I hope both divmod.org and twistedmatrix.com runs from twisted.web.
> Can you point me to the source code (or svn repos) for those
> websites?
>
> Also is there any site, that makes use of twisted.web.distrib?


From dialtone at divmod.com  Sat Jan 29 17:26:33 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sat Jan 29 17:26:35 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050129145550.GD10440@opteron.random>
Message-ID: <20050130002633.7026.2143943333.divmod.quotient.13097@ohm>

On Sat, 29 Jan 2005 15:55:50 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>I successfully load balanced the static server with pythondirector.
> 
> However it has a few problems:
> 
> 1) it cannot handle ssl
> 2) even if it can handle ssl I still need to share the session cookies
>    and I'm thinking that using sql or atop to do that isn't necessary:
>    the session doesn't need to survive a reboot, a reboot would be a visible
>    disruption of the services anyway, so I'm thinking to write a little
>    session daemon that only stores the cookies using pb to do that.
>    In theory shared memory would be much more efficient in smp, but at least
>    this socket model has the advantage of scaling in the cluster too
> 3) the load balancer misses an API with the real webserver to pass up the
>    client IP address, that's annoying, especially the logs gets screwed
> 
> Other than that the speed of the load balancer is excellent, and I get
> exactly the double number of pages rendered per second (after fixing a
> small bug in pythondirector that confused ab2).

It's probably also a good idea to write a balancer that works on unix sockets. And this means also writing a good path to which it should dispatch. 

Tell me more about the session daemon. Anyway we are designing an ISessionManager interface to let you write whatever sessionFactory you need, a database or a SessionDaemon or a file or something else. Probably you can help with it by coming in #twisted.web and commenting it with one of us (Donovan, Matt, Tv, me and others). 
 
> Perhaps I'm going with wrong priorities though, the major offender is
> compy, compy must be dropped from Nevow ASAP :). Leaving it as a

compy is not going away :). Writing a compy2 speedup in Pyrex will help and will probably also be faster than zope.interface since it will be a lot smaller.

> compatibility API may be ok, but internally compy can't invoke
> getComponents anymore if we do care about writing remotely optimal code.
> We should try with the new zope.interfaces API first and see if it
> underperforms so horribly as getInterfaces does.

zope.interface is twice as fast without the compatibility stuff in twisted and I think it is the same for Nevow.

> Secondly I'm looking into caching the html and to render some fragment only
> once every 10 seconds in the background (so the downloads will never
> have to wait for a rendering of some mostly static fragment anymore).

I wrote this VERY simple stuff for caching a page:

Index: rend.py
===================================================================
--- rend.py     (revision 1105)
+++ rend.py     (working copy)
@@ -30,6 +30,7 @@
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -376,6 +377,7 @@
             self.children = {}
         self.children[name] = child
     
+_CACHE = {}
 
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
@@ -417,7 +419,8 @@
             io = StringIO()
             writer = io.write
             def finisher(result):
-                request.write(io.getvalue())
+                c = _CACHE[url.fromContext(ctx)] = io.getvalue()
+                request.write(c)
                 finishRequest()
                 return result
         else:
@@ -425,12 +428,17 @@
             def finisher(result):
                 finishRequest()
                 return result
+        c = _CACHE.get(url.fromContext(ctx), None)
+        if c is None:
+            doc = self.docFactory.load()
+            ctx =  WovenContext(ctx, tags.invisible[doc])
+            
+            return self.flattenFactory(doc, ctx, writer, finisher)
+        else:
+            request.write(c)
+            finishRequest()
+            return c
 
-        doc = self.docFactory.load()
-        ctx =  WovenContext(ctx, tags.invisible[doc])
-
-        return self.flattenFactory(doc, ctx, writer, finisher)
-
     def rememberStuff(self, ctx):
         Fragment.rememberStuff(self, ctx)
         ctx.remember(self, inevow.IResource)

This works and I've tested it.

Rendering speed went from 6-7 requests/sec to 26 req/sec on my poor ibook with the database on the same computer and ab too.

This patch is simple, probably too simple (in fact it would be better to cache the flattening result, this would be a lot more fine grained) since it only works in buffered mode (patching this patch to work in non buffered mode is not hard at all though)

> So overall there's an huge room for improvements. What do other people
> think?

I also think that the optimizations branch is worth of some experimentation. I got twice the rendering speed in dynamic pages thanks to its adapters caching. I'd give it a try.

Overall I think nevow can, and will, speedup at least by a factor of 5.

From foom at fuhm.net  Sat Jan 29 18:24:49 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat Jan 29 18:24:57 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
References: <20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
Message-ID: <BC396FE1-725D-11D9-B9BF-000A95A50FB2@fuhm.net>

On Jan 29, 2005, at 7:26 PM, Valentino Volonghi aka Dialtone wrote:
>> Perhaps I'm going with wrong priorities though, the major offender is
>> compy, compy must be dropped from Nevow ASAP :). Leaving it as a
>
> compy is not going away :).

dp also stated this at one point on IRC. I didn't have time to discuss 
it at that point, but I think it ought to be discussed. Why does nevow 
need/want its own components API, that is either 1) is a fork that is 
nearly identical to the old twisted API (when running on Tw 1.3), or 2) 
uses the old twisted API compatibility layer (when running on Tw 2.0). 
Twisted has successfully disposed of its components API, for several 
good reasons. What purpose does it serve to continue the life of that 
code in Nevow?

As far as I'm concerned, the appropriate course of action is to convert 
everything to use the zope interface API.

> Writing a compy2 speedup in Pyrex will help and will probably also be 
> faster than zope.interface since it will be a lot smaller.

Now not only are we keeping the old code, but heavily rewriting it? I 
have my doubts about those speed benefits, too...

James


From mary-twisted at puzzling.org  Sat Jan 29 18:57:27 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat Jan 29 18:57:23 2005
Subject: [Twisted-web] Re: Page object design: wrapping a dictionary
	containing data
In-Reply-To: <B170D447-6E1B-11D9-926F-000A95864FC4@ulaluma.com>
References: <20050123091228.GC17741@sourdust.home.puzzling.org>
	<2mu0p8a1fh.fsf@starship.python.net>
	<B170D447-6E1B-11D9-926F-000A95864FC4@ulaluma.com>
Message-ID: <20050130015727.GG8309@sourdust.home.puzzling.org>

On Mon, Jan 24, 2005, Donovan Preston wrote:
> Model path notation (/ and ..) are not yet supported by Nevow. But you 
> don't need model path notation to do what you want. If all you want to 
> do is pass a dict to the Page and have template directives locate data 
> in that dict, you don't have to do anything at all:

I do, as it happens, want to do some rendering using the data in the
dictionary too... :(

-Mary

From sridharinfinity at gmail.com  Sat Jan 29 22:01:28 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Sat Jan 29 22:01:30 2005
Subject: [Twisted-web] Source of twisted websites
In-Reply-To: <200501290954.59258.general@eepatents.com>
References: <8816fcf8050129093630f39c24@mail.gmail.com>
	<200501290954.59258.general@eepatents.com>
Message-ID: <8816fcf8050129210142477d7d@mail.gmail.com>

On Sat, 29 Jan 2005 09:54:58 -0800, Ed Suominen <general@eepatents.com> wrote:
> Why don't you stop begging for freebies all the time and contribute
> something constructive to these lists instead?
> 

Bah! :)

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From andrea at cpushare.com  Sun Jan 30 04:36:03 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 04:35:31 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <BC396FE1-725D-11D9-B9BF-000A95A50FB2@fuhm.net>
References: <20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
	<BC396FE1-725D-11D9-B9BF-000A95A50FB2@fuhm.net>
Message-ID: <20050130113603.GH10440@opteron.random>

On Sat, Jan 29, 2005 at 08:24:49PM -0500, James Y Knight wrote:
> On Jan 29, 2005, at 7:26 PM, Valentino Volonghi aka Dialtone wrote:
> >>Perhaps I'm going with wrong priorities though, the major offender is
> >>compy, compy must be dropped from Nevow ASAP :). Leaving it as a
> >
> >compy is not going away :).
> 
> dp also stated this at one point on IRC. I didn't have time to discuss 
> it at that point, but I think it ought to be discussed. Why does nevow 
> need/want its own components API, that is either 1) is a fork that is 
> nearly identical to the old twisted API (when running on Tw 1.3), or 2) 
> uses the old twisted API compatibility layer (when running on Tw 2.0). 
> Twisted has successfully disposed of its components API, for several 
> good reasons. What purpose does it serve to continue the life of that 
> code in Nevow?

I definitely agree with you, there's no point in duplicating this code
except to risk having more bugs and risk not merging optimizations from
the other duplicate forks. Let's not fall in love with compy if that
means duplicating efforts.

> As far as I'm concerned, the appropriate course of action is to convert 
> everything to use the zope interface API.

Yep. And if it's still *that* slow, then we should rewrite
*zope.interfaces* (not compy) with pyrex. what's the point of writing
compy with pyrex and leaving zope.interfaces dogslow? We should do that
once for all if we do it.

Leaving compy as a pure "API-forwarder", so old code doesn't break may
even be ok of course, but it should not try to duplicate anything that
is already available in zope.interfaces.

But still I'm sceptical about the computational complexity of the compy
stuff, so I believe that should be evaluated before going in C.

> >Writing a compy2 speedup in Pyrex will help and will probably also be 
> >faster than zope.interface since it will be a lot smaller.
> 
> Now not only are we keeping the old code, but heavily rewriting it? I 
> have my doubts about those speed benefits, too...

Agreed.

From andrea at cpushare.com  Sun Jan 30 04:46:35 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 04:46:01 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
References: <20050129145550.GD10440@opteron.random>
	<20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
Message-ID: <20050130114635.GI10440@opteron.random>

On Sun, Jan 30, 2005 at 12:26:33AM +0000, Valentino Volonghi wrote:
> It's probably also a good idea to write a balancer that works on unix
> sockets. And this means also writing a good path to which it should
> dispatch. 

I already wrote something that works for me, but I'm running into
troubles with ssl. For various reasons I can't use this dirty hack
unless it covers ssl too, and before I can truly load balance the ssl
I'll need to share the session first.

Here the hack just in case somebody can find it useful (works perfectly
with http). Just make sure to leave the 8080/8081 etc.. closed by the
firewall or it'd be trivial to fake the client IP address in the logs.
Only the load balancer port must be open in the firewall. You're warned ;)

I'm not proposing this hack for merging, it doesn't even have an API to
pass to appserver.NevowSite, but this might be useful to get an hint on
how to make it work.

--- ./Nevow/nevow/appserver.py.~1~	2005-01-29 02:12:44.000000000 +0100
+++ ./Nevow/nevow/appserver.py	2005-01-29 17:11:16.000000000 +0100
@@ -222,7 +222,8 @@ class NevowSite(server.Site):
     def __init__(self, *args, **kwargs):
         server.Site.__init__(self, *args, **kwargs)
         self.context = context.SiteContext()
-        
+        self.proxyPeer = True
+
     def remember(self, obj, inter=None):
         """Remember the given object for the given interfaces (or all interfaces
         obj implements) in the site's context.
--- ./Twisted/twisted/web/http.py.~1~	2005-01-14 20:44:45.000000000 +0100
+++ ./Twisted/twisted/web/http.py	2005-01-29 17:43:56.000000000 +0100
@@ -526,7 +526,10 @@ class Request:
 
         # cache the client and server information, we'll need this later to be
         # serialized and sent with the request so CGIs will work remotely
-        self.client = self.channel.transport.getPeer()
+        if not self.channel.proxyPeer:
+            self.client = self.channel.transport.getPeer()
+        else:
+            self.client = self.channel.proxyPeer
         self.host = self.channel.transport.getHost()
 
         # Argument processing
@@ -909,6 +912,7 @@ class HTTPChannel(basic.LineReceiver, po
     __header = ''
     __first_line = 1
     __content = None
+    proxyPeer = None
 
     # set in instances or subclasses
     requestFactory = Request
@@ -921,11 +925,18 @@ class HTTPChannel(basic.LineReceiver, po
 
     def connectionMade(self):
         self.setTimeout(self.timeOut)
-    
+
+    def handleProxyPeer(self, line):
+        self.proxyPeer = self.transport.getPeer()
+        self.proxyPeer.host, self.proxyPeer.port = line.split()
+
     def lineReceived(self, line):
         self.resetTimeout()
 
         if self.__first_line:
+            if self.factory.proxyPeer and not self.proxyPeer:
+                self.handleProxyPeer(line)
+                return
             # if this connection is not persistent, drop any data which
             # the client (illegally) sent after the last request.
             if not self.persistent:
@@ -1086,6 +1097,7 @@ class HTTPFactory(protocol.ServerFactory
             logPath = os.path.abspath(logPath)
         self.logPath = logPath
         self.timeOut = timeout
+        self.proxyPeer = False
 
     def buildProtocol(self, addr):
         p = protocol.ServerFactory.buildProtocol(self, addr)
Index: pythondirector/pydirector/pdnetworktwisted.py
===================================================================
RCS file: /cvsroot/pythondirector/pythondirector/pydirector/pdnetworktwisted.py,v
retrieving revision 1.11
diff -u -p -r1.11 pdnetworktwisted.py
--- pythondirector/pydirector/pdnetworktwisted.py	14 Dec 2004 13:31:39 -0000	1.11
+++ pythondirector/pydirector/pdnetworktwisted.py	29 Jan 2005 16:49:56 -0000
@@ -58,7 +58,7 @@ class Sender(Protocol):
         """
         if self.receiver is not None:
             if reason.type is twisted.internet.error.ConnectionDone:
-                return
+                pass
             elif reason.type is twisted.internet.error.ConnectionLost:
                 pass
             else:
@@ -78,7 +78,8 @@ class Sender(Protocol):
             we've connected to the destination server. tell the other end
             it's ok to send any buffered data from the client.
         """
-        #print "client connection",self.factory
+        peer = self.receiver.transport.getPeer()
+        self.transport.write('%s %s\r\n' % (peer.host, peer.port))
         if self.receiver.receiverOk:
             self.receiver.setSender(self)
         else:

> Tell me more about the session daemon. Anyway we are designing an
> ISessionManager interface to let you write whatever sessionFactory you
> need, a database or a SessionDaemon or a file or something else.
> Probably you can help with it by coming in #twisted.web and commenting
> it with one of us (Donovan, Matt, Tv, me and others). 

You're right. I'm having an hard time to use #irc because I'm doing this
in my spare time, often at weird times, I can't work on this during the
day or I would go bankrupt ;).

> > Perhaps I'm going with wrong priorities though, the major offender is
> > compy, compy must be dropped from Nevow ASAP :). Leaving it as a
> 
> compy is not going away :). Writing a compy2 speedup in Pyrex will
> help and will probably also be faster than zope.interface since it
> will be a lot smaller.

I diagree, see other email for the details on the reasoning of my
disagreement ;).

> zope.interface is twice as fast without the compatibility stuff in
> twisted and I think it is the same for Nevow.

So let's use zope.interfaces. I don't care if we pass through twisted,
especially if raw zope.interfaces is faster and twisted depends on it
anyway, we should probably avoid passing through twisted.  But like
twisted is giving it up to use its own implementation, we should give it
up to use our implementation.

The twice as fast will translate in thousand times faster. This thing
gets called thousand of  times per page or similar. I get 100000 calls
of the deprecated API in a trivial workload, so much that removing the
deprecation warning one liner that I posted some day ago, is already a
double digit percent boost ;).

So I believe it worth a try, and eliminating duplicated code sure cannot
make things worse in the long run ;).

> > Secondly I'm looking into caching the html and to render some fragment only
> > once every 10 seconds in the background (so the downloads will never
> > have to wait for a rendering of some mostly static fragment anymore).
> 
> I wrote this VERY simple stuff for caching a page:
> 
> Index: rend.py
> ===================================================================
> --- rend.py     (revision 1105)
> +++ rend.py     (working copy)
> @@ -30,6 +30,7 @@
>  from nevow import flat
>  from nevow.util import log
>  from nevow import util
> +from nevow import url
>  
>  import formless
>  from formless import iformless
> @@ -376,6 +377,7 @@
>              self.children = {}
>          self.children[name] = child
>      
> +_CACHE = {}
>  
>  class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
>      """A page is the main Nevow resource and renders a document loaded
> @@ -417,7 +419,8 @@
>              io = StringIO()
>              writer = io.write
>              def finisher(result):
> -                request.write(io.getvalue())
> +                c = _CACHE[url.fromContext(ctx)] = io.getvalue()
> +                request.write(c)
>                  finishRequest()
>                  return result
>          else:
> @@ -425,12 +428,17 @@
>              def finisher(result):
>                  finishRequest()
>                  return result
> +        c = _CACHE.get(url.fromContext(ctx), None)
> +        if c is None:
> +            doc = self.docFactory.load()
> +            ctx =  WovenContext(ctx, tags.invisible[doc])
> +            
> +            return self.flattenFactory(doc, ctx, writer, finisher)
> +        else:
> +            request.write(c)
> +            finishRequest()
> +            return c
>  
> -        doc = self.docFactory.load()
> -        ctx =  WovenContext(ctx, tags.invisible[doc])
> -
> -        return self.flattenFactory(doc, ctx, writer, finisher)
> -
>      def rememberStuff(self, ctx):
>          Fragment.rememberStuff(self, ctx)
>          ctx.remember(self, inevow.IResource)
> 
> This works and I've tested it.
> 
> Rendering speed went from 6-7 requests/sec to 26 req/sec on my poor ibook with the database on the same computer and ab too.

This is great, I'll play with this code very soon. This is a much more
significant optimization than the load balancer, with the load balancer
I could only double the number of pages per second.

> This patch is simple, probably too simple (in fact it would be better
> to cache the flattening result, this would be a lot more fine grained)
> since it only works in buffered mode (patching this patch to work in
> non buffered mode is not hard at all though)

No problem, it's still a good start ;).

> > So overall there's an huge room for improvements. What do other people
> > think?
> 
> I also think that the optimizations branch is worth of some
> experimentation. I got twice the rendering speed in dynamic pages
> thanks to its adapters caching. I'd give it a try.
> 
> Overall I think nevow can, and will, speedup at least by a factor of
> 5.

Sounds great, thanks!

From andrea at cpushare.com  Sun Jan 30 04:49:47 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 04:49:13 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <41FBC8FB.7050205@twistedmatrix.com>
References: <20050129145550.GD10440@opteron.random>
	<41FBC8FB.7050205@twistedmatrix.com>
Message-ID: <20050130114947.GJ10440@opteron.random>

On Sat, Jan 29, 2005 at 07:33:47PM +0200, Tommi Virtanen wrote:
> Andrea Arcangeli wrote:
> 
> >3) the load balancer misses an API with the real webserver to pass up the
> >  client IP address, that's annoying, especially the logs gets screwed
> > 
> >
> We need that for reverse proxying, too.
> 
> My current idea is to replace the /vhost/http/hostname[:port]/path
> style with 
> /vhost;host=hostname[;port=port][;scheme=https][;client=1.2.3.4]/path
> to allow passing arbitrary variables. That way it's easy to extend in 
> the future.

Isn't that going to waste more resources and isn't it much more complex
than the approach I've taken to simply pass a variable to
appserver.NevowSite(proxyPeer = 1). Perhaps proxyPeer isn't the right
name for the variable but you get the idea.

Now my patch is too dirty to even think at applying it, but it still
shows the place to touch and I didn't need to play with vhost
complexity, I keep the trigger as a parameter to NevowSite (the literal
parameter isn't implemented yet, and that's why it clearly cannot be
applied).

In theory banana could pass down the whole object returned by getPeer()
from the load balancer to the http server, but I was scared to hurt
performance by using banana, and I'm only dealing with .host and .port
which I'm sure will go fast.

From andrew-twisted at puzzling.org  Sun Jan 30 05:18:52 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun Jan 30 05:19:03 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050130113603.GH10440@opteron.random>
References: <20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
	<BC396FE1-725D-11D9-B9BF-000A95A50FB2@fuhm.net>
	<20050130113603.GH10440@opteron.random>
Message-ID: <20050130121852.GA9228@localhost.localdomain>

On Sun, Jan 30, 2005 at 12:36:03PM +0100, Andrea Arcangeli wrote:
[...]
> 
> Yep. And if it's still *that* slow, then we should rewrite
> *zope.interfaces* (not compy) with pyrex. what's the point of writing
> compy with pyrex and leaving zope.interfaces dogslow? We should do that
> once for all if we do it.

zope.interface already has an (optional) C module with optimisations in it.

-Andrew.


From andrea at cpushare.com  Sun Jan 30 05:31:58 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 05:31:24 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050130121852.GA9228@localhost.localdomain>
References: <20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
	<BC396FE1-725D-11D9-B9BF-000A95A50FB2@fuhm.net>
	<20050130113603.GH10440@opteron.random>
	<20050130121852.GA9228@localhost.localdomain>
Message-ID: <20050130123158.GL10440@opteron.random>

On Sun, Jan 30, 2005 at 11:18:52PM +1100, Andrew Bennetts wrote:
> zope.interface already has an (optional) C module with optimisations in it.

Yet another reason for definitely switching to zope.interfaces.

Still I'd like an evaluation of the computational complexity of
zope.interfaces to be sure the C implementation isn't a workaround.
I'm not going to use interfaces in my code at all, unless somebody
confirms interfaces run always in O(1) like if we could do ctx.request
instead of IRequest(ctx). ctx.request is definitely O(1), and
IRequest(ctx) must be avalable in O(1) too, otherwise it's a mistake to
use interfaces at all. ctx.request is blazing fast, and IRequest(ctx)
must not be slower than ctx.request.

And I'm glad with basic twisted there are no interfaces at all. Like
going from protocol to factory has to be done with protocol.factory, not
IFactory(protocol). I really prefer to stay with pointers and not with
the interfaces as long as I can in my code, unless somebody guarantees
that zope.interfaces is O(1). (my http server is an exception, I use
interfaces there since I was partly forced by inevow)

From andrea at cpushare.com  Sun Jan 30 05:56:50 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 05:56:16 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
References: <20050129145550.GD10440@opteron.random>
	<20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
Message-ID: <20050130125650.GM10440@opteron.random>

On Sun, Jan 30, 2005 at 12:26:33AM +0000, Valentino Volonghi wrote:
> This works and I've tested it.

Even if you tested it, I doubt you really benchmarked it ;). Likely it was
disabled for you (perhaps you forgot setup.py install?)

but I fixed you great hack and here we go:

Index: nevow/rend.py
===================================================================
--- nevow/rend.py	(revision 1134)
+++ nevow/rend.py	(working copy)
@@ -30,6 +30,7 @@
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -374,6 +375,7 @@
             self.children = {}
         self.children[name] = child
     
+_CACHE = {}
 
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
@@ -415,7 +417,8 @@
             io = StringIO()
             writer = io.write
             def finisher(result):
-                request.write(io.getvalue())
+                c = _CACHE[str(url.URL.fromContext(ctx))] = io.getvalue()
+                request.write(c)
                 finishRequest()
                 return result
         else:
@@ -423,12 +426,17 @@
             def finisher(result):
                 finishRequest()
                 return result
+        c = _CACHE.get(str(url.URL.fromContext(ctx)))
+        if c is None:
+            doc = self.docFactory.load()
+            ctx =  WovenContext(ctx, tags.invisible[doc])
+            
+            return self.flattenFactory(doc, ctx, writer, finisher)
+        else:
+            request.write(c)
+            finishRequest()
+            return c
 
-        doc = self.docFactory.load()
-        ctx =  WovenContext(ctx, tags.invisible[doc])
-
-        return self.flattenFactory(doc, ctx, writer, finisher)
-
     def rememberStuff(self, ctx):
         Fragment.rememberStuff(self, ctx)
         ctx.remember(self, inevow.IResource)
Index: nevow/vhost.py
===================================================================
--- nevow/vhost.py	(revision 1134)
+++ nevow/vhost.py	(working copy)
@@ -19,7 +19,7 @@
 """
 
     def getStyleSheet(self):
-        return self.stylesheet
+        return VirtualHostList.stylesheet
  
     def data_hostlist(self, context, data):
         return self.nvh.hosts.keys()

I get 224!! pages per second from the homepage with this. This is
exactly what I need. I had to set buffered = True in the pages where I
enabled this of course.

This is ApacheBench, Version 2.0.40-dev <$Revision: 1.121.2.10 $>
apache-2.0
Copyright (c) 1996 Adam Twiss, Zeus Technology Ltd,
http://www.zeustech.net/
Copyright (c) 1998-2002 The Apache Software Foundation,
http://www.apache.org/

Benchmarking opteron (be patient).....done


Server Software:        TwistedWeb/aa
Server Hostname:        opteron
Server Port:            8080

Document Path:          /
Document Length:        10606 bytes

Concurrency Level:      2
Time taken for tests:   0.439832 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      1072500 bytes
HTML transferred:       1060600 bytes
Requests per second:    227.36 [#/sec] (mean)
Time per request:       8.797 [ms] (mean)
Time per request:       4.398 [ms] (mean, across all concurrent
requests)
Transfer rate:          2380.45 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:     8    8   0.3      8       9
Waiting:        8    8   0.1      8       9
Total:          8    8   0.3      8       9

Percentage of the requests served within a certain time (ms)
  50%      8
  66%      8
  75%      8
  80%      8
  90%      8
  95%      9
  98%      9
  99%      9
 100%      9 (longest request)

Transfer rate was 2.3Mbyte/sec. This is very great!

Something is buggy still, since I get the same page duplicated twice,
but the performance are already excellent, actually much faster than
what I need. And a lot more than 5 times faster, it goes from 7 req per
second to 227 req per second, so it's 32 times faster.

The next bit to stack on top of the above is a timeout parameter, after
the timeout the page has to be re-rendered in the _background_, it's
enough to attach a deferred to it, that will overwrite the cache after
the rendering is complete.

I'm also afraid I should use the flattener on the url before
transforming it to a string? Or not?

You're right that removing compy isn't that an high priority compared to
enabling the caching right. Still I'd like to see compy removed in
favour of zope.interfaces, on the same lines of twisted. Not everything
will be cached, the very dynamic stuff cannot be cached, and compy will
help there. But all http I can cache it, only the ssl is completely
dynamic.

This is as fast as using 32 UP systems with the http load balancer, so
you're very right that this was the first angle of attack to use ;).

Many thanks!

From andrea at cpushare.com  Sun Jan 30 07:19:00 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 07:18:25 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050130125650.GM10440@opteron.random>
References: <20050129145550.GD10440@opteron.random>
	<20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
	<20050130125650.GM10440@opteron.random>
Message-ID: <20050130141900.GN10440@opteron.random>

On Sun, Jan 30, 2005 at 01:56:50PM +0100, Andrea Arcangeli wrote:
> but I fixed you great hack and here we go:

Ok I already made it good enough for merging IMHO! Please don't keep
this in a branch that risks to get obsolete. This is a major useful
feature IMHO.

Index: nevow/rend.py
===================================================================
--- nevow/rend.py	(revision 1134)
+++ nevow/rend.py	(working copy)
@@ -30,6 +30,7 @@
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -374,6 +375,7 @@
             self.children = {}
         self.children[name] = child
     
+_CACHE = {}
 
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
@@ -384,12 +386,29 @@
 
     buffered = False
 
+    cacheTimeout = None # 0 means cache forever, >0 sets the seconds of caching
+    __lastCacheRendering = 0 # this should not be touched by the parent class
+
     beforeRender = None
     afterRender = None
     addSlash = None
 
     flattenFactory = flat.flattenFactory
 
+    def refreshCache(self):
+        assert self.cacheTimeout is not None
+        _now = now() # run gettimeofday only once
+        timeout = _now > self.__lastCacheRendering + self.cacheTimeout and self.cacheTimeout > 0
+        if timeout:
+            self.__lastCacheRendering = _now
+        return timeout
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+    def storeCache(self, ctx, c):
+        _CACHE[self.cacheIDX(ctx)] = c
+    def lookupCache(self, ctx):
+        return _CACHE.get(self.cacheIDX(ctx))
+
     def renderHTTP(self, ctx):
         ## XXX request is really ctx now, change the name here
         request = inevow.IRequest(ctx)
@@ -411,24 +430,27 @@
             if self.afterRender is not None:
                 self.afterRender(ctx)
 
-        if self.buffered:
+        if self.buffered or self.cacheTimeout is not None:
             io = StringIO()
             writer = io.write
             def finisher(result):
-                request.write(io.getvalue())
-                finishRequest()
-                return result
+                c = io.getvalue()
+                self.storeCache(ctx, c)
+                return c
         else:
             writer = request.write
             def finisher(result):
                 finishRequest()
                 return result
+        c = self.lookupCache(ctx)
+        if c is None or self.refreshCache():
+            doc = self.docFactory.load()
+            ctx =  WovenContext(ctx, tags.invisible[doc])
 
-        doc = self.docFactory.load()
-        ctx =  WovenContext(ctx, tags.invisible[doc])
+            return self.flattenFactory(doc, ctx, writer, finisher)
+        else:
+            return c
 
-        return self.flattenFactory(doc, ctx, writer, finisher)
-
     def rememberStuff(self, ctx):
         Fragment.rememberStuff(self, ctx)
         ctx.remember(self, inevow.IResource)
Index: nevow/vhost.py
===================================================================
--- nevow/vhost.py	(revision 1134)
+++ nevow/vhost.py	(working copy)
@@ -19,7 +19,7 @@
 """
 
     def getStyleSheet(self):
-        return self.stylesheet
+        return VirtualHostList.stylesheet
  
     def data_hostlist(self, context, data):
         return self.nvh.hosts.keys()

Only one thing I'm not sure about: I'm unsure about the meaning of the
result passed to the finisher.  Does it matter at all? Is it always ''
right? It has to be a null string, I can't see how it can't be a null
string. Otherwise we'd need to cache it too and change the patch a bit.
In my limited testing result is always '' so I didn't bother to cache
it.

You know, at >200 req per second with quite a ton of dynamic stuff
inside, I'm very relaxed now.

220 req per second means the homepage could sustain a load of 19 million
hits per day and 570million hits per month. It will be less than that,
since the completely dynamic part will still suck much cpu power, but
having the basic web going fast is a great bonus already, and clearly
there will be more traffic on the outside pages than in the inside pages.

The timeout I'm using is 10 sec, that means once every 10 sec it will
execute a synchronous rendering. But that's ok, if the load goes up too
much moving it to 60 sec will fix it.

I believe this caching scheme should stay in place and be merged, since
it's the most efficient caching possible, very suitable for pages that
changes not very frequently or that are completely static. Other caching
with more finer granularity can happen on top of this, but this is the
highest prio one IMHO. This for example fits perfectly in the "/" page
of my site and other high traffic mostly static html pages (it's not
completely static and it changes once every 10 sec, so it's still
possible to edit the xml files or to rebuild the class with stan loader).

Setting cacheTimeout <= 0 will cache the page forever, that ok for
loaders.stan unless you use rebuild.

Here you see below the only change I had to make to my site to enable
the caching in a production ready usage.

Thanks a lot Valentino^wdialtone! ;)

--- cpushare/web/redirect.py	29 Jan 2005 02:05:56 -0000	1.8
+++ cpushare/web/redirect.py	30 Jan 2005 14:06:10 -0000
@@ -21,6 +21,7 @@ class download_class(basepage_class):
 
 class redirect_http_to_https(root_basepage_class):
 	addSlash = True
+	cacheTimeout = 10
 	docFactory = loaders.xmlfile('root_page.xml', XMLDIR)
 
 	child_css = static.File('styles/cpushare.css')

From andrea at cpushare.com  Sun Jan 30 08:28:09 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 08:27:35 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050130141900.GN10440@opteron.random>
References: <20050129145550.GD10440@opteron.random>
	<20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
	<20050130125650.GM10440@opteron.random>
	<20050130141900.GN10440@opteron.random>
Message-ID: <20050130152809.GO10440@opteron.random>

On Sun, Jan 30, 2005 at 03:19:00PM +0100, Andrea Arcangeli wrote:
> +        c = self.lookupCache(ctx)
> +        if c is None or self.refreshCache():
> +            doc = self.docFactory.load()
> +            ctx =  WovenContext(ctx, tags.invisible[doc])
>  

In the above place I realized there was a subtle and not really
important race condition where the following renderings could get old
stale data from the cache while the flattening was running.

My object is to call gettimeofday only one (since it's costly,
especially on x86 w/o vsyscalls like x86-64) and secondly I want to run
a single flattening, so moving the timestamp into the finisher wouldn't
have fixed it either (since that would have invoked many unnecessary
flattening, until the first one would have completed).

That race would have been a very minor problem for my usage, but I fixed
this optimally in this further update. This however use chained
deferreds, so that I store the deferred in the cache and all following
renderers now stop waiting for the single flattening to complete. So now
cache is usable only with twisted, but I think this is perfectly ok,
since without deferred the optimal implementation isn't doable (and if
the twisted thread isn't persistent the cache will be destroyed anyway
by execve ;).

The thread that invokes the flattening (i.e. the one calling
chainDeferredCache) could return 'd' too, not necessairly 'c', but I
thought returning c would be more robust there too and less likely to
break in the long run, because it exercises the code that only makes a
difference under the race condition window.  (all other guys will have
to wait for 'c' not 'd') Performance isn't an issue there.

So this is more complex, but more correct, and it works fine too so far.
Performance is unchanged, only the race condition window is closed by
making caching dependent on twisted. Should still run w/o twisted as
long as you don't try to add caching to it.

So I'm keeping it applyed and I'll start optimizing all possible pages
with this feature. It should be good enough for merging. Feel free to
change the variable names if you don't like my coding style (I tried not
to follow the kernel coding style even if I like it more ;)

Thanks.

Index: nevow/rend.py
===================================================================
--- nevow/rend.py	(revision 1134)
+++ nevow/rend.py	(working copy)
@@ -30,6 +30,7 @@
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -374,6 +375,7 @@
             self.children = {}
         self.children[name] = child
     
+_CACHE = {}
 
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
@@ -384,12 +386,47 @@
 
     buffered = False
 
+    cacheTimeout = None # 0 means cache forever, >0 sets the seconds of caching
+    __lastCacheRendering = 0 # this should not be touched by the parent class
+
     beforeRender = None
     afterRender = None
     addSlash = None
 
     flattenFactory = flat.flattenFactory
 
+    def hasCache(self, ctx):
+        if self.cacheTimeout is None:
+            return None
+
+        _now = now() # run gettimeofday only once
+        timeout = _now > self.__lastCacheRendering + self.cacheTimeout and \
+                  self.cacheTimeout > 0
+        c = self.lookupCache(ctx)
+        if timeout or c is None:
+            self.__lastCacheRendering = _now # stop other renders
+            from twisted.internet.defer import Deferred
+            d = Deferred()
+            self.storeCache(ctx, d)
+            # force only this rendering, others will wait the deferred
+            c = None
+        return c
+    def chainDeferredCache(self, ctx, d):
+        if self.cacheTimeout is None:
+            return d
+
+        from twisted.internet.defer import Deferred
+        c = self.lookupCache(ctx)
+        if isinstance(c, Deferred):
+            d.chainDeferred(c)
+        return c
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+    def storeCache(self, ctx, c):
+        _CACHE[self.cacheIDX(ctx)] = c
+    def lookupCache(self, ctx):
+        return _CACHE.get(self.cacheIDX(ctx))
+
     def renderHTTP(self, ctx):
         ## XXX request is really ctx now, change the name here
         request = inevow.IRequest(ctx)
@@ -411,23 +448,27 @@
             if self.afterRender is not None:
                 self.afterRender(ctx)
 
-        if self.buffered:
+        if self.buffered or self.cacheTimeout is not None:
             io = StringIO()
             writer = io.write
             def finisher(result):
-                request.write(io.getvalue())
-                finishRequest()
-                return result
+                c = io.getvalue()
+                self.storeCache(ctx, c)
+                return c
         else:
             writer = request.write
             def finisher(result):
                 finishRequest()
                 return result
 
+        c = self.hasCache(ctx)
+        if c:
+            return c
+
         doc = self.docFactory.load()
         ctx =  WovenContext(ctx, tags.invisible[doc])
 
-        return self.flattenFactory(doc, ctx, writer, finisher)
+        return self.chainDeferredCache(ctx, self.flattenFactory(doc, ctx, writer, finisher))
 
     def rememberStuff(self, ctx):
         Fragment.rememberStuff(self, ctx)


As usual this unrelated fix is queued.

Index: nevow/vhost.py
===================================================================
--- nevow/vhost.py	(revision 1134)
+++ nevow/vhost.py	(working copy)
@@ -19,7 +19,7 @@
 """
 
     def getStyleSheet(self):
-        return self.stylesheet
+        return VirtualHostList.stylesheet
  
     def data_hostlist(self, context, data):
         return self.nvh.hosts.keys()

From andrea at cpushare.com  Sun Jan 30 15:22:36 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 15:22:37 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050130152809.GO10440@opteron.random>
References: <20050129145550.GD10440@opteron.random>
	<20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
	<20050130125650.GM10440@opteron.random>
	<20050130141900.GN10440@opteron.random>
	<20050130152809.GO10440@opteron.random>
Message-ID: <20050130222236.GC11494@opteron.random>

I did some benchmarking with the last patch applied, and there's
not really a significant benefit anymore from the load balancer with
this patch.  Without caching (at 6/7 req per second) load balancing was
a net 100% improvement, now it's down to a 23.5% improvement in terms of
req per second.

ab2 -n 1000 -c 100 localhost:8080/ | grep 'Requests
Requests per second:    224.73 [#/sec] (mean)
ab2 -n 1000 -c 100 localhost:8081/ | grep 'Requests
Requests per second:    225.18 [#/sec] (mean)
ab2 -n 1000 -c 100 localhost:8079/ | grep 'Requests
Requests per second:    278.22 [#/sec] (mean)

The load balancer was on port 79 and it balanced the load across 8080
and 8081 on a two-way through loopback interface. Probably on a 4-way it
would make more difference since the load balancer itself takes some
cpu.

The nice thing is that the above is still a completely dynamic page, but
it changes now at most once every 10 seconds, which is exactly what I
need.

Overall this is a much superior approach and much simpler to setup if compared
to the reverse cache proxying IMHO, and it should perform better too
since it avoids the two context switches between proxy -> server ->
proxy.

So the next improvement on top of this would be replace compy with
zope.interfaces for the very dynamic ssl part that cannot be cached at
all.

Thanks! ;)

From dialtone at divmod.com  Sun Jan 30 16:02:14 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sun Jan 30 16:02:15 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050130114635.GI10440@opteron.random>
Message-ID: <20050130230214.7026.2073362380.divmod.quotient.14464@ohm>

On Sun, 30 Jan 2005 12:46:35 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
> So I believe it worth a try, and eliminating duplicated code sure cannot
> make things worse in the long run ;).

This is the biggest try though :). Formless will need a lot of work.
 
> > Index: rend.py
> > ===================================================================
> > --- rend.py     (revision 1105)
> > +++ rend.py     (working copy)
> > @@ -30,6 +30,7 @@
> >  from nevow import flat
> >  from nevow.util import log
> >  from nevow import util
> > +from nevow import url
> >  
> >  import formless
> >  from formless import iformless
> > @@ -376,6 +377,7 @@
> >              self.children = {}
> >          self.children[name] = child
> >      
> > +_CACHE = {}
> >  
> >  class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
> >      """A page is the main Nevow resource and renders a document loaded
> > @@ -417,7 +419,8 @@
> >              io = StringIO()
> >              writer = io.write
> >              def finisher(result):
> > -                request.write(io.getvalue())
> > +                c = _CACHE[url.fromContext(ctx)] = io.getvalue()
> > +                request.write(c)
> >                  finishRequest()
> >                  return result
> >          else:
> > @@ -425,12 +428,17 @@
> >              def finisher(result):
> >                  finishRequest()
> >                  return result
> > +        c = _CACHE.get(url.fromContext(ctx), None)
> > +        if c is None:
> > +            doc = self.docFactory.load()
> > +            ctx =  WovenContext(ctx, tags.invisible[doc])
> > +            
> > +            return self.flattenFactory(doc, ctx, writer, finisher)
> > +        else:
> > +            request.write(c)
> > +            finishRequest()
> > +            return c
> >  
> > -        doc = self.docFactory.load()
> > -        ctx =  WovenContext(ctx, tags.invisible[doc])
> > -
> > -        return self.flattenFactory(doc, ctx, writer, finisher)
> > -
> >      def rememberStuff(self, ctx):
> >          Fragment.rememberStuff(self, ctx)
> >          ctx.remember(self, inevow.IResource)
> > 
> > This works and I've tested it.
> > 
> > Rendering speed went from 6-7 requests/sec to 26 req/sec on my poor ibook with the database on the same computer and ab too.
> 
> This is great, I'll play with this code very soon. This is a much more
> significant optimization than the load balancer, with the load balancer
> I could only double the number of pages per second.

Actually I wonder how did you manage to use this patch. I notice it is wrong in 2 lines when the code calls url.fromContext(ctx) which should be url.URL.fromContext(ctx).path
 

From dialtone at divmod.com  Sun Jan 30 16:09:34 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sun Jan 30 16:09:35 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050130125650.GM10440@opteron.random>
Message-ID: <20050130230934.7026.1126896187.divmod.quotient.14471@ohm>

On Sun, 30 Jan 2005 13:56:50 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>On Sun, Jan 30, 2005 at 12:26:33AM +0000, Valentino Volonghi wrote:
> > This works and I've tested it.
> 
> Even if you tested it, I doubt you really benchmarked it ;). Likely it was
> disabled for you (perhaps you forgot setup.py install?)

Yeah, right... That was an 'old' version. And I forgot to fix it.
 
> Transfer rate was 2.3Mbyte/sec. This is very great!
> 
> Something is buggy still, since I get the same page duplicated twice,
> but the performance are already excellent, actually much faster than
> what I need. And a lot more than 5 times faster, it goes from 7 req per
> second to 227 req per second, so it's 32 times faster.

Multiplier depends on the page size.
 
> The next bit to stack on top of the above is a timeout parameter, after
> the timeout the page has to be re-rendered in the _background_, it's
> enough to attach a deferred to it, that will overwrite the cache after
> the rendering is complete.
> 
> I'm also afraid I should use the flattener on the url before
> transforming it to a string? Or not?

It's better to use:

url.URL.fromContext(ctx).path
 
> This is as fast as using 32 UP systems with the http load balancer, so
> you're very right that this was the first angle of attack to use ;).

Ehe :). Not bad for a 1 UP system.

From andrea at cpushare.com  Sun Jan 30 17:11:03 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 17:11:04 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050130230214.7026.2073362380.divmod.quotient.14464@ohm>
References: <20050130114635.GI10440@opteron.random>
	<20050130230214.7026.2073362380.divmod.quotient.14464@ohm>
Message-ID: <20050131001103.GE11494@opteron.random>

On Sun, Jan 30, 2005 at 11:02:14PM +0000, Valentino Volonghi wrote:
> This is the biggest try though :). Formless will need a lot of work.

And formless will be the one that will get the most benefit too ;)

But we probably don't need to convert formless to give it a try: we can
try to do the other parts first. The page I'm benchmarking (the one that
now runs at 227 hits/sec ;) has zero formless, it's only containing
renderings and still getInterfaces gets at the very top, so much that
commenting out the warning line is a very measurable boost.

> Actually I wonder how did you manage to use this patch. I notice it is
> wrong in 2 lines when the code calls url.fromContext(ctx) which should
> be url.URL.fromContext(ctx).path

See the other emails.

From andrea at cpushare.com  Sun Jan 30 17:18:41 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 30 17:18:41 2005
Subject: [Twisted-web] load balancing and performance
In-Reply-To: <20050130230934.7026.1126896187.divmod.quotient.14471@ohm>
References: <20050130125650.GM10440@opteron.random>
	<20050130230934.7026.1126896187.divmod.quotient.14471@ohm>
Message-ID: <20050131001841.GF11494@opteron.random>

On Sun, Jan 30, 2005 at 11:09:34PM +0000, Valentino Volonghi wrote:
> Yeah, right... That was an 'old' version. And I forgot to fix it.

Never mind, that was good enough hacking starting point for me ;)

> It's better to use:
> 
> url.URL.fromContext(ctx).path

Wouldn't that screwup caching across different vhost? It would fail
caching on different nevow sites on different ports too. So I believe
the __str__ method is more correct index for the hash.

> Ehe :). Not bad for a 1 UP system.

Indeed ;)

From andrea at cpushare.com  Mon Jan 31 10:35:00 2005
From: andrea at cpushare.com (andrea@cpushare.com)
Date: Mon Jan 31 10:35:08 2005
Subject: [Twisted-web] various formless types
Message-ID: <20050131173500.GI11494@opteron.random>

These are some formless types I'm using in my app. I think it's a good
idea to share it with you, since they can be useful not just to me.

The reason of the webform.freeformDefaultContentPattern change is to use
div instead of stan, I'm doing some strange stuff, so without div it
becomes not compliant html.

I need the context as last parameter of the processor handler, not in
the below types, but in others.

Note also the RequiredChoice, I believe the check "x not in
self.choices" is required for security reasons, most people will expect
the client does the right thing, but it's not forced to without such
check. I only use requiredchoice and never choice. I also wonder if it
really worth the new API that slows down it so much with the normal
rendering, but let's say that's a more general problem with compy and
getinterfaces. Plus the new API is way confusing, integers gets
converted to strings and if you conver them back to integers with
valueToKey the processor will forget the value, the processor remembers
the value only if the coerce returns a string. That might actually be a
bug. Anyway the below workaround in my requiredchoice works (i.e. always
try to convert to int in the coerce for the security check, but keep
returning a string). I only use lists of strings or integers as choices
for requiredchoice of course, so I'm fine.

class IntegerRange(annotate.Integer):
	def __init__(self, min = None, max = None, *args, **kw):
		super(IntegerRange, self).__init__(*args, **kw)
		self.min = min
		self.max = max
		self.requiredFailMessage = 'Please enter an integer between %d and %d.' \
					   % (self.min, self.max)

	def coerce(self, val, configurable):
		v = super(IntegerRange, self).coerce(val, configurable)
		if v > self.max or v < self.min:
			raise annotate.InputError("Integer must be between %d and %d." %
						  (self.min, self.max))
		return v

class RealRange(annotate.Real):
	def __init__(self, min = None, max = None, *args, **kw):
		super(RealRange, self).__init__(*args, **kw)
		self.min = min
		self.max = max
		self.requiredFailMessage = 'Please enter a real number between %d and %d.' \
					   % (self.min, self.max)

	def coerce(self, val, configurable):
		v = super(RealRange, self).coerce(val, configurable)
		if v > self.max or v < self.min:
			raise annotate.InputError("Real must be between %d and %d." %
						  (self.min, self.max))
		return v

class MaxlengthString(annotate.String):
	def __init__(self, *args, **kwargs):
		if 'maxlength' in kwargs:
			self.maxlength = kwargs['maxlength']
			del kwargs['maxlength']
		else:
			self.maxlength = 10
		super(MaxlengthString, self).__init__(*args, **kwargs)

	def coerce(self, val, configurable):
		r = super(MaxlengthString, self).coerce(val, configurable)
		if search_for_invalid_chars.search(r):
			raise annotate.InputError("%r contains invalid characters." % val)
		if len(r) > self.maxlength:
			raise annotate.InputError("%r is too long, maximum is %d." % (val, self.maxlength))
		return r

def invalid_email(email):
	return not re.match(r'^[\w\-~@.+]+\Z', email) or \
		   re.search(r'@[^@]*@', email) or \
		   not re.match(r'^[\w\-~.+]+@.*[\w\-~+]+\.[\w]{2,}\Z', email)

class Email(MaxlengthString):
	def coerce(self, val, configurable):
		r = super(Email, self).coerce(val, configurable)
		if invalid_email(val):
			raise annotate.InputError("%r is not a valid email address." % val)
		return r

class MaxlengthStringRenderer(webform.StringRenderer):
	def input(self, context, slot, data, name, value):
		if data.typedValue.getAttribute('hidden'):
			T='hidden'
		else:
			T='text'
		return slot[
			tags.input(id=formutils.keyToXMLID(context.key), type=T, name=name,
				   value=value, maxlength=data.typedValue.maxlength,
				   _class="freeform-input-%s" % T)]

class ProcessTypedContext(compy.Adapter):
    __implements__ = iformless.IInputProcessor,

    def process(self, context, boundTo, data):
        """data is a list of strings at this point
        """
        typed = self.original
        val = data[0]
        if typed.unicode:
            try:
                val = val.decode(getPOSTCharset(context), 'replace')
            except LookupError:
                val = val.decode('utf-8', 'replace')
        if typed.strip:
            val = val.strip()
        if val == '' or val is None:
            if typed.required:
                raise annotate.InputError(typed.requiredFailMessage)
            else:
                return typed.null
        return typed.coerce(val, boundTo, context)

class MaxlengthPassword(MaxlengthString):
	requiredFailMessage = 'Please enter a password.'

class MaxlengthPasswordRenderer(webform.PasswordRenderer):
	def input(self, context, slot, data, name, value):
		return [
			tags.input(id=formutils.keyToXMLID(context.key), name=name,
				   type="password", _class="freeform-input-password",
				   maxlength=data.typedValue.maxlength),
			" Again ",
			tags.input(name="%s____2" % name, type="password",
				   _class="freeform-input-password",
				   maxlength=data.typedValue.maxlength),
			]

class Decimal(annotate.Typed):
	requiredFailMessage = 'Please enter a decimal number.'

	def coerce(self, val, configurable):
		# TODO: This shouldn't be required; check.
		# val should never be None, but always a string.
		if val is None:
			return None
		try:
			return decimal.Decimal(val)
		except decimal.InvalidOperation:
			raise annotate.InputError("%r is not a decimal number." % val)
class ForcedBoolean(annotate.Boolean):
	pass

class ForcedBooleanRenderer(webform.BooleanRenderer):
    def input(self, context, slot, data, name, value):
        ## The only difference here is the "checked" attribute; the value is still the same because
        ## we want true to be passed to the server when the checkbox is checked and the form
        ## is posted.
        node = tags.input(id=formutils.keyToXMLID(context.key), type="checkbox",
			  name=name, value='True', _class="freeform-input-checkbox")
        if value:
            node(checked="checked")

        # HTML forms are so weak. If the checkbox is not checked, no value at all will be
        # in request.args with the name data.name. So let's force the value False to always
        # be in request.args[data.name]. If the checkbox is checked, the value True will
        # be first, and we will find that.
        return slot[node, tags.input(type="hidden", name=name, value="")]

class RequiredChoice(annotate.Choice):
	requiredFailMessage = 'Please choose an option.'

	def coerce(self, val, configurable):
		r = super(RequiredChoice, self).coerce(val, configurable)
		if self.required and r == self.default:
			raise annotate.InputError(self.requiredFailMessage)
		try:
			x = int(val)
		except ValueError:
			x = val
		if x not in self.choices:
			raise annotate.InputError("Your web browser is malfunctioning")
		return r

compy.registerAdapter(MaxlengthStringRenderer, MaxlengthString, iformless.ITypedRenderer)
compy.registerAdapter(MaxlengthStringRenderer, Email, iformless.ITypedRenderer)
compy.registerAdapter(MaxlengthPasswordRenderer, MaxlengthPassword, iformless.ITypedRenderer)
compy.registerAdapter(ReadonlyTextRenderer, ReadonlyText, iformless.ITypedRenderer)
compy.registerAdapter(webform.ChoiceRenderer, RequiredChoice, iformless.ITypedRenderer)
compy.registerAdapter(ForcedBooleanRenderer, ForcedBoolean, iformless.ITypedRenderer)
compy.registerAdapter(processors.ProcessPassword, MaxlengthPassword, iformless.IInputProcessor)

webform.freeformDefaultContentPattern = tags.invisible[
	tags.label(_class="freeform-label", _for=stan.slot('id'))[ stan.slot('label') ],
	tags.div(_class="freeform-input")[ stan.slot('input') ],
	tags.div(_class="freeform-error")[ stan.slot('error') ],
	tags.div(_class="freeform-description")[tags.label(_for=stan.slot('id'))[ stan.slot('description') ]]].freeze()

From jml at mumak.net  Mon Jan 31 17:29:08 2005
From: jml at mumak.net (Jonathan Lange)
Date: Mon Jan 31 17:29:10 2005
Subject: [Twisted-web] Log out on guard login.
In-Reply-To: 0
Message-ID: <20050201002908.7026.1313443574.divmod.quotient.15915@ohm>

Hello,

We recently had some problems with the ISession hanging around even after a new login. Also IE has had some weird behaviour: when you login in with one set of credentials, hit back, then log in again (with incorrect credentials), you are still logged in with your original (correct) credentials.

To work around this, we've monkey-patched guard to logout and expire the session on login.

Below is a patch that adds this change to nevow SVN.

Known problems: 
- line 295 calls portal.login straight-up, and so this patch doesn't help with certain http auth cases.
- I may be doing weird evil wrong stuff with context, mostly because I don't understand it.

cheers,
jml


Index: nevow/guard.py
===================================================================
--- nevow/guard.py      (revision 1123)
+++ nevow/guard.py      (working copy)
@@ -362,6 +362,11 @@
         return UsernamePassword(username, password)

     def login(self, request, session, credentials, segments, anonymous=False):
+        session.portalLogout(self.portal)
+        from twisted.python import context
+        ctxSession = inevow.ISession(context, None)
+        if ctxSession:
+            ctxSession.expire()
         mind = self.mindFactory(request, credentials)
         session.mind = mind
         return self.portal.login(credentials, mind, self.credInterface).addCallback(

From andrea at cpushare.com  Mon Jan 31 18:22:48 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon Jan 31 18:22:37 2005
Subject: [Twisted-web] Log out on guard login.
In-Reply-To: <20050201002908.7026.1313443574.divmod.quotient.15915@ohm>
References: <20050201002908.7026.1313443574.divmod.quotient.15915@ohm>
Message-ID: <20050201012248.GA9096@opteron.random>

On Tue, Feb 01, 2005 at 12:29:08AM +0000, Jonathan Lange wrote:
> Hello,
> 
> We recently had some problems with the ISession hanging around even after a new login. Also IE has had some weird behaviour: when you login in with one set of credentials, hit back, then log in again (with incorrect credentials), you are still logged in with your original (correct) credentials.
> 
> To work around this, we've monkey-patched guard to logout and expire the session on login.
> 
> Below is a patch that adds this change to nevow SVN.
> 
> Known problems: 
> - line 295 calls portal.login straight-up, and so this patch doesn't help with certain http auth cases.
> - I may be doing weird evil wrong stuff with context, mostly because I don't understand it.
> 
> cheers,
> jml
> 
> 
> Index: nevow/guard.py
> ===================================================================
> --- nevow/guard.py      (revision 1123)
> +++ nevow/guard.py      (working copy)
> @@ -362,6 +362,11 @@
>          return UsernamePassword(username, password)
> 
>      def login(self, request, session, credentials, segments, anonymous=False):
> +        session.portalLogout(self.portal)
> +        from twisted.python import context
> +        ctxSession = inevow.ISession(context, None)
> +        if ctxSession:
> +            ctxSession.expire()
>          mind = self.mindFactory(request, credentials)
>          session.mind = mind
>          return self.portal.login(credentials, mind, self.credInterface).addCallback(

With my usage I had apparently no problem regardless of the above, but I can
imagine some other app may have a problem. My only problem was the logout, that
didn't drop the privilegied stuff from the session. But a re-login without a
logout in between would overwrite everything privilegied so I cannot notice any
difference. Though the problem is very similar to the one I had on the logout
side and you also did a session expiry in nevow like I did originally.

I believe the login can refresh the session with the avatar code like I'm doing
for solving the logout problem too.

I can see the second below unsetComponent not raising the exception during a
re-login without a logout in between, which means it's making a difference
(even if it makes no difference for my site) and it should allow you to fixup
your code optimally without regenerating the cookie.

If you copy my below code and you adapt it to your app, you should be able to
cleanup your session during both the logout and the re-login procedures.

Probably there should be a dumb-mode that expires the sessions both during
login and logout. I don't mind anymore myself since I just learnt how to solve
it, but the below stuff may not be worth it for simple sites.

For how to setup the Mind see the logout_guard2 example. I guess the
logout_guard2 example should be updated too with the session cleanup during
login.

	def requestAvatar(self, avatar_id, mind, *interfaces):
		#print avatar_id, mind, interfaces
		for interface in interfaces:
			if interface is inevow.IResource:
				def logout(session):
					def _logout():
						# account
						try:
							session.unsetComponent(iweb.IAccount)
						except KeyError:
							pass

						# force a full session expiry
						#del session.guard.sessions[session.uid]
					return _logout

				if avatar_id is checkers.ANONYMOUS or avatar_id.shutdown:
					resc = guest.root_page_class()
					resc.realm = self
					return (inevow.IResource, resc, lambda : None)
				else:
					resc = account.root_page_class(avatar_id)
					resc.remember(avatar_id, iweb.IAccount)
					resc.realm = self
					session = mind.request.getSession()
					try:
						session.unsetComponent(iweb.IAccount)
					except KeyError:
						pass
					return (inevow.IResource, resc, logout(session))

		raise NotImplementedError("Can't support that interface.")

From foom at fuhm.net  Mon Jan 31 22:32:25 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon Jan 31 22:32:32 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050130141900.GN10440@opteron.random>
References: <20050129145550.GD10440@opteron.random>
	<20050130002633.7026.2143943333.divmod.quotient.13097@ohm>
	<20050130125650.GM10440@opteron.random>
	<20050130141900.GN10440@opteron.random>
Message-ID: <A7D910CA-7412-11D9-A757-000A95A50FB2@fuhm.net>


On Jan 30, 2005, at 9:19 AM, Andrea Arcangeli wrote:

> On Sun, Jan 30, 2005 at 01:56:50PM +0100, Andrea Arcangeli wrote:
>> but I fixed you great hack and here we go:
>
> Ok I already made it good enough for merging IMHO! Please don't keep
> this in a branch that risks to get obsolete. This is a major useful
> feature IMHO.

Yes, it is. One thing that I think would make it more useful, if it can 
be pulled off, is to allow caching at any level. That is, something 
like the following stan:
html[body[cached(timeout=10, keys=(IFoo, 
IBar))[semi_constant_header_stuff], very_dynamic_content]]

That is, a function which will render its contents to a string the 
first time it's called, and store/return it for the next 10 seconds, 
using the same mechanism as the posted patch. The cache would be keyed 
off certain interfaces, and only those will get passed on to the 
functions being rendered inside, thus ensuring the safety of the cache.

I think there are a lot of pages that are mostly "semi-static", but 
have some very dynamic content in them, so something like could be 
*very* useful.

Anyhow, this is just an outline of how I think it might work, but I 
haven't tried to implement it yet, so I don't know if it will work out 
the way I'd like it to. :)

James


