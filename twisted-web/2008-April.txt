From manlio_perillo at libero.it  Tue Apr  1 07:35:05 2008
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Apr  1 07:36:46 2008
Subject: [Twisted-web] chunked input encoding support in web2
Message-ID: <47F21DE9.30301@libero.it>

Hi.


Does Twisted Web 2 supports chunked input encoding?

I'm reading the sources and its seems that it does not supports it.

I need to write a CGI that reads a possible infinite input stream.



Thanks  Manlio Perillo

From jwm at horde.net  Thu Apr  3 11:39:51 2008
From: jwm at horde.net (John Morrissey)
Date: Thu Apr  3 11:39:54 2008
Subject: [Twisted-web] Stopping an HTTPDownloader
Message-ID: <20080403153951.GA22164@boost.horde.net>

I'm writing a small script to record an MP3 stream. It connects to a remote
host and accepts start/stop commands to control the recording.

Everything's working, except I can't figure out how to stop the
HTTPDownloader. When I try to close the HTTP download connection (line 22,
below), self.stream_factory.protocol (which is an HTTPPageDownloader) has a
None transport member.

Am I going about this the right way?

john


01 def start_stream_download(url):
02 	scheme, host, port, path = client._parse(url)
03 	factory = client.HTTPDownloader(url, 'foo.mp3')
04 	reactor.connectTCP(host, port, factory)
05 	return factory
06 
07 class GpioClient(protocol.Protocol):
08 	stream_factory = None
09 
10	def connectionMade(self):
11		self.transport.write('ADD GPO\n')
12	
13	def dataReceived(self, data):
14		data = data.rstrip()
15		if re.match(r'^GPO %d [lL]' % GPO_CHANNEL, data):
16			if self.stream_factory:
17				self.stream_factory.protocol.transport.loseConnection()
18			self.stream_factory = start_stream_download(STREAM_URL)
19		elif re.match(r'^GPO %d [hH]' % GPO_CHANNEL, data):
20			if self.stream_factory:
21				# Stop recording.
22				self.stream_factory.protocol.transport.loseConnection()
23				self.stream_factory = None

-- 
John Morrissey          _o            /\         ----  __o
jwm@horde.net        _-< \_          /  \       ----  <  \,
www.horde.net/    __(_)/_(_)________/    \_______(_) /_(_)__

From federicotom at yahoo.it  Thu Apr  3 12:22:53 2008
From: federicotom at yahoo.it (Federico Tomassini)
Date: Thu Apr  3 12:23:17 2008
Subject: [Twisted-web] questions about guard
Message-ID: <47F5045D.4050708@yahoo.it>

Hi alls,

i'm working on guard, having the following questions.
Questions are not specific to my problem. My hope is to understand some
guard behaviour.

1- suppose that, after the auth, the root resource R is associated to
the session. Suppose also that a child for the address /foo is defined.
Suppose I want to perform a logout when /foo/bar is requested.

How can I do it in PageFoo.locateChild() (without the need to redirect
to LOGOUT_AVATAR), returning a PageBar from there?
I mean something like that:

 class PageFoo(rend.Page):
  def locateChild(self, ctx, segs):
   if segs[0] == 'bar':
      push_out_user()
      page_bar= static.File(somefile) # it's just an example
      return page_bar, ()


2- Which is the best way to implement a realm so that:

  - if you POST to /__login__ an auth is performed and a root resource
    is assigned to the session
  - if you GET /baz the url is processed and, depending on it, a page
    is returned

   Maybe it's sufficient to handle the Anonymous login, adapting it to
   the second need (for anonymous, I associate a root resource which
   will handle the /baz request)?


thanks in advance

-- 
efphe
Today is Pungenday, the 20th day of Discord in the YOLD 3174

From exarkun at divmod.com  Thu Apr  3 18:38:27 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu Apr  3 18:38:32 2008
Subject: [Twisted-web] Stopping an HTTPDownloader
In-Reply-To: <20080403153951.GA22164@boost.horde.net>
Message-ID: <20080403223827.6859.909464191.divmod.quotient.25553@ohm>

On Thu, 3 Apr 2008 11:39:51 -0400, John Morrissey <jwm@horde.net> wrote:
>I'm writing a small script to record an MP3 stream. It connects to a remote
>host and accepts start/stop commands to control the recording.
>
>Everything's working, except I can't figure out how to stop the
>HTTPDownloader. When I try to close the HTTP download connection (line 22,
>below), self.stream_factory.protocol (which is an HTTPPageDownloader) has a
>None transport member.

self.stream_factory.protocol _isn't_ an HTTPPageDownloader.  It _is_
HTTPPageDownloader.  Only connected instances have a transport attribute.

You'll need to get a reference to a connected instance and use that, rather
than using the class object.  You may want to do this by overriding the
connectionMade method on an HTTPPageDownloader subclass.

Jean-Paul

From jwm at horde.net  Thu Apr  3 19:54:06 2008
From: jwm at horde.net (John Morrissey)
Date: Thu Apr  3 19:54:09 2008
Subject: [Twisted-web] Stopping an HTTPDownloader
In-Reply-To: <20080403223827.6859.909464191.divmod.quotient.25553@ohm>
References: <20080403153951.GA22164@boost.horde.net>
	<20080403223827.6859.909464191.divmod.quotient.25553@ohm>
Message-ID: <20080403235406.GA25601@boost.horde.net>

On Thu, Apr 03, 2008 at 05:38:27PM -0500, Jean-Paul Calderone wrote:
> On Thu, 3 Apr 2008 11:39:51 -0400, John Morrissey <jwm@horde.net> wrote:
> >I'm writing a small script to record an MP3 stream. It connects to a
> >remote host and accepts start/stop commands to control the recording.
> >
> >Everything's working, except I can't figure out how to stop the
> >HTTPDownloader. When I try to close the HTTP download connection (line
> >22, below), self.stream_factory.protocol (which is an HTTPPageDownloader)
> >has a None transport member.
> 
> self.stream_factory.protocol _isn't_ an HTTPPageDownloader.  It _is_
> HTTPPageDownloader.  Only connected instances have a transport attribute.
> 
> You'll need to get a reference to a connected instance and use that, rather
> than using the class object.  You may want to do this by overriding the
> connectionMade method on an HTTPPageDownloader subclass.

ach, I had completely missed that. Overriding connectionMade works well.
Thanks, Jean-Paul.

john
-- 
John Morrissey          _o            /\         ----  __o
jwm@horde.net        _-< \_          /  \       ----  <  \,
www.horde.net/    __(_)/_(_)________/    \_______(_) /_(_)__

From waterbug at pangalactic.us  Mon Apr  7 19:26:46 2008
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Mon Apr  7 19:26:52 2008
Subject: [Twisted-web] Re: [Twisted-Python] April 20 Sprint
In-Reply-To: <B3DA5A16-4BF4-49A6-81E9-1FC851D9840F@fuhm.net>
References: <20080407070721.21558.329553668.divmod.xquotient.10463@joule.divmod.com>	<c893b8530804070032o2814d833id4adad3727562d7d@mail.gmail.com>	<d272f0690804071407j46e71269n9f62eb98326e0e8a@mail.gmail.com>	<6ce0ac130804071426n316edea2wb530e479e229facf@mail.gmail.com>
	<B3DA5A16-4BF4-49A6-81E9-1FC851D9840F@fuhm.net>
Message-ID: <47FAADB6.9000505@pangalactic.us>

[cross-posting to twisted-web, as this is probably of interest there ...]

James Y Knight wrote:
> On Apr 7, 2008, at 5:26 PM, Brian Granger wrote:
>>> I myself having been using twisted.web2 for a while now,
>>> and I also know of several other projects that are doing the same.
>>> I also have done a good amount of diving into the source code,
>>> trying to maybe someday understand enough to contribute back,
>>> and I hope to keep up with the current status as best as possible.
>>>
>>> Any comments that point towards the current state of any of the parts
>>> of web/web2 (what's "good", what's "bad", in the developers' opinion),
>>> would be very appreciated.
>>
>> Wow, we have been using web2 in ipython and this it is news to us as
>> well that web2 is being phased out.
> 
> I wish that people hadn't said that at this point, but since it's been 
> said...
> 
> The problem, basically, is that I started the web2 and never finished 
> it. At the current rate of development (really slow), there's a real 
> fear that it'll never be finished. So, some (who actually are doing 
> development on twisted...) feel that it would be better to take the more 
> finished parts of web2 and re-integrate them into web, piece by piece.
> 
> I'm wary of this scheme, and I can't say I can see it being successful, 
> but perhaps it's worth the shot.
> 
> My goal with web2 was to provide 99% compatibility with web1 
> *resources*, but forgo compatibility at the other integration points. I 
> still think this is a feasible goal to accomplish. The goal with the 
> "phase-out" plan is to provide complete compatibility with all web1 
> integration points *and* add the new features from web2 to web1. If this 
> can be accomplished, great; I just can't say I see it being that 
> feasible, and I certainly am having trouble thinking that it can get 
> done *faster*.
> 
> But in any case, the take-home message of this alternate plan should not 
> be "web2 is being phased out", but rather, "web2's improvements are 
> being absorbed back into web." IMO, it remains to be seen whether or not 
> that can actually happen, but I don't think current users have any 
> serious reason for alarm at that prospect.

The most important overall message would seem to be:  use web[1], since
even if web2 is not phased out, as much as possible of web2 is being
"back-ported" to web[1], and there will probably be a relatively easy
migration path to web2 if/when it is completed at some point in the
future.

No?

Steve

From glyph at divmod.com  Mon Apr  7 19:49:09 2008
From: glyph at divmod.com (glyph@divmod.com)
Date: Mon Apr  7 19:49:12 2008
Subject: [Twisted-web] Re: [Twisted-Python] April 20 Sprint
In-Reply-To: <d272f0690804071407j46e71269n9f62eb98326e0e8a@mail.gmail.com>
References: <20080407070721.21558.329553668.divmod.xquotient.10463@joule.divmod.com>
	<c893b8530804070032o2814d833id4adad3727562d7d@mail.gmail.com>
	<d272f0690804071407j46e71269n9f62eb98326e0e8a@mail.gmail.com>
Message-ID: <20080407234909.21558.427605568.divmod.xquotient.10491@joule.divmod.com>

On 09:07 pm, clemesha@gmail.com wrote:
>Would it be possible for someone to give a high level over-view
>of the current state of the web/web2 code in Twisted?

I don't have time to do a full overview of what's good, what's bad, and 
what's ugly in every module in web, web2, and nevow, but we did make 
some decisions about where things are going in the *future* at PyCon.

I should have done this already, but I just did a brief overview of the 
write-up on the wiki: http://twistedmatrix.com/trac/wiki/TwistedWebPlan

Wiki editors, please add links in the appropriate places.

Users, what do you think?  If you would like clarifications and edits to 
this plan, please ask.  More developers than just me should know what's 
going on and I hope we can all keep expanding that page to give the best 
picture of what's going on ...

From glyph at divmod.com  Mon Apr  7 19:55:41 2008
From: glyph at divmod.com (glyph@divmod.com)
Date: Mon Apr  7 19:55:46 2008
Subject: [Twisted-web] Re: [Twisted-Python] April 20 Sprint
In-Reply-To: <47FAADB6.9000505@pangalactic.us>
References: <20080407070721.21558.329553668.divmod.xquotient.10463@joule.divmod.com>
	<c893b8530804070032o2814d833id4adad3727562d7d@mail.gmail.com>
	<d272f0690804071407j46e71269n9f62eb98326e0e8a@mail.gmail.com>
	<6ce0ac130804071426n316edea2wb530e479e229facf@mail.gmail.com>
	<B3DA5A16-4BF4-49A6-81E9-1FC851D9840F@fuhm.net>
	<47FAADB6.9000505@pangalactic.us>
Message-ID: <20080407235541.21558.85735031.divmod.xquotient.10500@joule.divmod.com>


On 11:26 pm, waterbug@pangalactic.us wrote:
>The most important overall message would seem to be:  use web[1], since
>even if web2 is not phased out, as much as possible of web2 is being
>"back-ported" to web[1], and there will probably be a relatively easy
>migration path to web2 if/when it is completed at some point in the
>future.

Yes, except what web2 will be called when it is done is "twisted.web", 
and the migration path will be the exact one outlined in 
http://twistedmatrix.com/trac/wiki/CompatibilityPolicy
In other words, web is going to be like every other project within 
Twisted.  There are major changes, huge improvements being made within 
Conch, but we're not making a "conch2" and confusing users as to which 
one to use.  The functionality in twisted.web2 and twisted.web will be 
in the same place :).

From ellisonbg.net at gmail.com  Mon Apr  7 22:38:40 2008
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Mon Apr  7 22:38:45 2008
Subject: [Twisted-web] Re: [Twisted-Python] April 20 Sprint
In-Reply-To: <47FAADB6.9000505@pangalactic.us>
References: <20080407070721.21558.329553668.divmod.xquotient.10463@joule.divmod.com>
	<c893b8530804070032o2814d833id4adad3727562d7d@mail.gmail.com>
	<d272f0690804071407j46e71269n9f62eb98326e0e8a@mail.gmail.com>
	<6ce0ac130804071426n316edea2wb530e479e229facf@mail.gmail.com>
	<B3DA5A16-4BF4-49A6-81E9-1FC851D9840F@fuhm.net>
	<47FAADB6.9000505@pangalactic.us>
Message-ID: <6ce0ac130804071938g4499f152qc66bd2b0a45398be@mail.gmail.com>

>  The most important overall message would seem to be:  use web[1], since
>  even if web2 is not phased out, as much as possible of web2 is being
>  "back-ported" to web[1], and there will probably be a relatively easy
>  migration path to web2 if/when it is completed at some point in the
>  future.

For us the only reason we moved to web2 was the http1.1 support.
Until web has that implemented, we will have a tough time moing back
to web2.  But at least we know the direction things are headed.

Brian

>  No?
>
>  Steve
>
>  _______________________________________________
>  Twisted-web mailing list
>  Twisted-web@twistedmatrix.com
>  http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From ellisonbg.net at gmail.com  Mon Apr  7 22:47:34 2008
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Mon Apr  7 22:47:38 2008
Subject: [Twisted-web] Re: [Twisted-Python] April 20 Sprint
In-Reply-To: <20080407234909.21558.427605568.divmod.xquotient.10491@joule.divmod.com>
References: <20080407070721.21558.329553668.divmod.xquotient.10463@joule.divmod.com>
	<c893b8530804070032o2814d833id4adad3727562d7d@mail.gmail.com>
	<d272f0690804071407j46e71269n9f62eb98326e0e8a@mail.gmail.com>
	<20080407234909.21558.427605568.divmod.xquotient.10491@joule.divmod.com>
Message-ID: <6ce0ac130804071947t294d3f5dq86ad69f07091cb62@mail.gmail.com>

>  I don't have time to do a full overview of what's good, what's bad, and
> what's ugly in every module in web, web2, and nevow, but we did make some
> decisions about where things are going in the *future* at PyCon.

This is great news.  I think the decision to merge things in web2 back
into web is a good one as well.

>  I should have done this already, but I just did a brief overview of the
> write-up on the wiki: http://twistedmatrix.com/trac/wiki/TwistedWebPlan
>
>  Wiki editors, please add links in the appropriate places.
>
>  Users, what do you think?  If you would like clarifications and edits to
> this plan, please ask.  More developers than just me should know what's
> going on and I hope we can all keep expanding that page to give the best
> picture of what's going on ...
>
>  _______________________________________________
>  Twisted-web mailing list
>  Twisted-web@twistedmatrix.com
>  http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From phil at bubblehouse.org  Tue Apr  8 20:03:40 2008
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue Apr  8 20:04:16 2008
Subject: [Twisted-web] Re: [Twisted-Python] Thumbs up for TwistedWebPlan
In-Reply-To: <20080408210102.21558.1384524367.divmod.xquotient.10522@joule.divmod.com>
References: <20080407070721.21558.329553668.divmod.xquotient.10463@joule.divmod.com>
	<c893b8530804070032o2814d833id4adad3727562d7d@mail.gmail.com>
	<d272f0690804071407j46e71269n9f62eb98326e0e8a@mail.gmail.com>
	<6ce0ac130804071426n316edea2wb530e479e229facf@mail.gmail.com>
	<20080407235213.21558.1593247924.divmod.xquotient.10497@joule.divmod.com>
	<47FB734B.6000007@thiengineering.ch>
	<20080408210102.21558.1384524367.divmod.xquotient.10522@joule.divmod.com>
Message-ID: <188188A4-C4EE-4999-96E7-26C7E4E009CC@bubblehouse.org>

On Apr 8, 2008, at 5:01 PM, glyph@divmod.com wrote:
> On 01:29 pm, wthie@thiengineering.ch wrote:
>> A big 'thank you' (drawing my hat and bowing)!
>
> No problem!  We should have done this a long time ago.
>
> The biggest thanks, of course, would be simply to submit patches  
> for twisted.web and help us migrate web2's "greatest hits" back  
> into the twisted.web server :).

Since we're, you know, talking about it...

I'd really love it if someone could help me with my web1 port of  
web2's WSGI module. It's completely functional, and no longer has any  
dependencies on web2, but it needs unit tests.

	http://twistedmatrix.com/trac/ticket/2753

I started working on imitating the test for the web2 version (twisted/ 
web2/test/test_wsgi.py), but it's been idling in my workspace for  
some time, so I thought I'd just put a feeler out for anyone willing  
to give it a try, or even (gasp!) write some tests. ;-)

I am using this in a production site, so I have great faith in it at  
least not having any show-stopper issues, but I just haven't gotten a  
chance to finish the tests.

-phil

From jml at mumak.net  Tue Apr  8 20:09:23 2008
From: jml at mumak.net (Jonathan Lange)
Date: Tue Apr  8 20:09:30 2008
Subject: Proposed tracker tag (was Re: [Twisted-web] Re: [Twisted-Python]
	Thumbs up for TwistedWebPlan)
Message-ID: <d06a5cd30804081709k507f850ay12d4bae06881deb0@mail.gmail.com>

On Wed, Apr 9, 2008 at 10:03 AM, Phil Christensen <phil@bubblehouse.org> wrote:
>  I'd really love it if someone could help me with my web1 port of web2's
> WSGI module. It's completely functional, and no longer has any dependencies
> on web2, but it needs unit tests.
>
>         http://twistedmatrix.com/trac/ticket/2753
>
>  I started working on imitating the test for the web2 version
> (twisted/web2/test/test_wsgi.py), but it's been idling in my workspace for
> some time, so I thought I'd just put a feeler out for anyone willing to give
> it a try, or even (gasp!) write some tests. ;-)
>

I think a few tickets fall into this category. They have patches that
fix code, but for one reason or another they lack tests.

Could we, as a policy, add a 'patch' tag to such tickets when we see them?

jml

From amcnabb at mcnabbs.org  Thu Apr 17 20:32:03 2008
From: amcnabb at mcnabbs.org (Andrew McNabb)
Date: Thu Apr 17 20:32:07 2008
Subject: [Twisted-web] HTTPClient vs. HTTPClientFactory
Message-ID: <20080418003203.GA5970@mcnabbs.org>

I'm still a little new to Twisted, so I was wondering if some kind soul
might be willing to help make sure I'm looking at things correctly.

First, I think I understand the difference between protocol factories
and protocols, but I could use a little reassurance.  My current
understanding is that the protocol factory holds the state that is
common to all connections, whereas the protocol holds the state that is
specific to a particular connection.  Is that an accurate understanding?

If that is correct, then what is the difference between a protocol
factory and a protocol for a client (like HTTPClient) where only one
connection is involved?  I'm a bit confused about why HTTPClientFactory
isn't a trivial class.  According to my current understanding, all of
the logic would be in HTTPClient.

I was also confused about why HTTPClientFactory would set
`self.protocol.followRedirect = followRedirect` in its __init__ method.
Since `self.protocol` is the HTTPPageGetter class, it appears that the
client factory is setting the followRedirect attribute for all
connections (associated with all HTTPClientFactories).  I was surprised
that HTTPClientFactory wouldn't set `self.followRedirect =
followRedirect`, in which case HTTPClient would look at
`self.factory.followRedirect`.

If someone could help clear up these questions for me, I feel like I
would understand Twisted a lot better.

Thank you!

-- 
Andrew McNabb
http://www.mcnabbs.org/andrew/
PGP Fingerprint: 8A17 B57C 6879 1863 DE55  8012 AB4D 6098 8826 6868
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20080417/4d502555/attachment.pgp
From matt at madebykite.com  Fri Apr 18 03:26:39 2008
From: matt at madebykite.com (Matthew Glubb)
Date: Fri Apr 18 03:26:48 2008
Subject: [Twisted-web] HTTPClient vs. HTTPClientFactory
In-Reply-To: <20080418003203.GA5970@mcnabbs.org>
References: <20080418003203.GA5970@mcnabbs.org>
Message-ID: <EAE7669A-AEFC-418C-B134-A32CCE2572D1@madebykite.com>

Hi Andrew,
	
On 18 Apr 2008, at 01:32, Andrew McNabb wrote:
> First, I think I understand the difference between protocol factories
> and protocols, but I could use a little reassurance.  My current
> understanding is that the protocol factory holds the state that is
> common to all connections, whereas the protocol holds the state  
> that is
> specific to a particular connection.  Is that an accurate  
> understanding?

No, this is not quite correct. In the case of a  
ServerProtocolFactory, you are right, there is one instance for your  
server, but it isn't responsible for managing state. New connections  
to your server will cause the reactor to call buildProtocol in your  
ServerFactory. This, in turn, will create one instance of your  
ServerProtocol for each new connection. It is the ServerProtocol that  
manages the state of that single connection. If you want to manage  
some kind of global state between connections, you should write a  
logic class that exists as a single, global instance within your  
application.

> If that is correct, then what is the difference between a protocol
> factory and a protocol for a client (like HTTPClient) where only one
> connection is involved?  I'm a bit confused about why  
> HTTPClientFactory
> isn't a trivial class.  According to my current understanding, all of
> the logic would be in HTTPClient.

A ClientProtocolFactory instance is created for *every* client  
connection you attempt to create. The point here is that your  
ClientProtocol is not instantiated *until* the connection has been  
made to your remote resource. The ClientProtocolFactory manages the  
instantiation of your ClientProtocol when successfully connected. I  
agree that 'ClientProtocolFactory' is somewhat misleading as it  
indicates that it is possible to create more than one ClientProtocol  
from your factory. Within normal design patterns, this would be true,  
but in this case your ClientProtocolFactory will only ever create one  
instance of your ClientProtocol (unless you are doing something  
*really* funky - and probably bad!).

To sum up, you always create a new ClientProtocolFactory when making  
a new client connection:

reactor.connectTCP(host, port, ClientProtocolFactory()

Repeat for more clients...

Hope that helps,


Matt

From matt at madebykite.com  Fri Apr 18 03:32:23 2008
From: matt at madebykite.com (Matthew Glubb)
Date: Fri Apr 18 03:32:31 2008
Subject: [Twisted-web] HTTPClient vs. HTTPClientFactory
In-Reply-To: <20080418003203.GA5970@mcnabbs.org>
References: <20080418003203.GA5970@mcnabbs.org>
Message-ID: <68CDBF43-4193-4C6E-A2EB-44CA1A8D07C7@madebykite.com>

Just to add:
	
On 18 Apr 2008, at 01:32, Andrew McNabb wrote:
> First, I think I understand the difference between protocol factories
> and protocols, but I could use a little reassurance.  My current
> understanding is that the protocol factory holds the state that is
> common to all connections, whereas the protocol holds the state  
> that is
> specific to a particular connection.  Is that an accurate  
> understanding?

While I would say that you shouldn't manage common state in your  
ServerFactory, for simple applications, it can be convenient to do so.

Matt

From andrew-twisted at puzzling.org  Fri Apr 18 05:18:23 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri Apr 18 05:18:23 2008
Subject: [Twisted-web] HTTPClient vs. HTTPClientFactory
In-Reply-To: <EAE7669A-AEFC-418C-B134-A32CCE2572D1@madebykite.com>
References: <20080418003203.GA5970@mcnabbs.org>
	<EAE7669A-AEFC-418C-B134-A32CCE2572D1@madebykite.com>
Message-ID: <20080418091823.GH9934@steerpike.home.puzzling.org>

Matthew Glubb wrote:
> On 18 Apr 2008, at 01:32, Andrew McNabb wrote:
[...]
>
>> If that is correct, then what is the difference between a protocol
>> factory and a protocol for a client (like HTTPClient) where only one
>> connection is involved?  I'm a bit confused about why  
>> HTTPClientFactory
>> isn't a trivial class.  According to my current understanding, all of
>> the logic would be in HTTPClient.
>
[...]
> instantiation of your ClientProtocol when successfully connected. I  
> agree that 'ClientProtocolFactory' is somewhat misleading as it  
> indicates that it is possible to create more than one ClientProtocol  
> from your factory. Within normal design patterns, this would be true,  
> but in this case your ClientProtocolFactory will only ever create one  
> instance of your ClientProtocol (unless you are doing something *really* 
> funky - and probably bad!).

To put it another way, there's a ClientFactory because even though there's often
only a single client connection, something still needs to build the protocol
instance for the connection.  The factory is that something.

-Andrew.


From exarkun at divmod.com  Fri Apr 18 07:55:47 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri Apr 18 07:55:55 2008
Subject: [Twisted-web] HTTPClient vs. HTTPClientFactory
In-Reply-To: <20080418003203.GA5970@mcnabbs.org>
Message-ID: <20080418115547.6859.1643078997.divmod.quotient.31695@ohm>

On Thu, 17 Apr 2008 18:32:03 -0600, Andrew McNabb <amcnabb@mcnabbs.org> wrote:
>I'm still a little new to Twisted, so I was wondering if some kind soul
>might be willing to help make sure I'm looking at things correctly.
>
> [snip]
>
>I was also confused about why HTTPClientFactory would set
>`self.protocol.followRedirect = followRedirect` in its __init__ method.
>Since `self.protocol` is the HTTPPageGetter class, it appears that the
>client factory is setting the followRedirect attribute for all
>connections (associated with all HTTPClientFactories).  I was surprised
>that HTTPClientFactory wouldn't set `self.followRedirect =
>followRedirect`, in which case HTTPClient would look at
>`self.factory.followRedirect`.

You're right.  This seems to be a bug.  Could you file a ticket?

Jean-Paul

From amcnabb at mcnabbs.org  Fri Apr 18 12:42:51 2008
From: amcnabb at mcnabbs.org (Andrew McNabb)
Date: Fri Apr 18 12:42:53 2008
Subject: [Twisted-web] HTTPClient vs. HTTPClientFactory
In-Reply-To: <20080418115547.6859.1643078997.divmod.quotient.31695@ohm>
References: <20080418003203.GA5970@mcnabbs.org>
	<20080418115547.6859.1643078997.divmod.quotient.31695@ohm>
Message-ID: <20080418164251.GA17984@mcnabbs.org>

On Fri, Apr 18, 2008 at 07:55:47AM -0400, Jean-Paul Calderone wrote:
>
> You're right.  This seems to be a bug.  Could you file a ticket?

Done.  I just created the following ticket:

http://twistedmatrix.com/trac/ticket/3192

Thanks.

-- 
Andrew McNabb
http://www.mcnabbs.org/andrew/
PGP Fingerprint: 8A17 B57C 6879 1863 DE55  8012 AB4D 6098 8826 6868
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20080418/41101a6c/attachment.pgp
From amcnabb at mcnabbs.org  Fri Apr 18 12:51:56 2008
From: amcnabb at mcnabbs.org (Andrew McNabb)
Date: Fri Apr 18 12:51:58 2008
Subject: [Twisted-web] HTTPClient vs. HTTPClientFactory
In-Reply-To: <20080418091823.GH9934@steerpike.home.puzzling.org>
References: <20080418003203.GA5970@mcnabbs.org>
	<EAE7669A-AEFC-418C-B134-A32CCE2572D1@madebykite.com>
	<20080418091823.GH9934@steerpike.home.puzzling.org>
Message-ID: <20080418165156.GB17984@mcnabbs.org>

On Fri, Apr 18, 2008 at 07:18:23PM +1000, Andrew Bennetts wrote:
> 
> To put it another way, there's a ClientFactory because even though there's often
> only a single client connection, something still needs to build the protocol
> instance for the connection.  The factory is that something.

I appreciate the answers I've been given.  I definitely feel more
confident about how all of this works.

In the specific case of the HTTPPageGetter and HTTPClientFactory, I
don't understand why the HTTPClientFactory does anything at all.  It
seems that it should create a deferred and get out of the way.  Maybe it
would set up the URL, too.

I'm really confused by why the HTTPClientFactory defines gotHeaders,
gotStatus, page, noPage, etc.  It seems to blur the distinction between
HTTPPageGetter and HTTPClientFactory and create lots of points where a
HTTPPageGetter object has to make calls into its factory.  Again, it
seems like it would make more sense if all of that happened right in the
HTTPPageGetter.

Is there something I'm still not understanding?  Thanks again for the
helpful answers.

-- 
Andrew McNabb
http://www.mcnabbs.org/andrew/
PGP Fingerprint: 8A17 B57C 6879 1863 DE55  8012 AB4D 6098 8826 6868
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20080418/8ad3c517/attachment.pgp
From camrdale at gmail.com  Sun Apr 20 19:29:44 2008
From: camrdale at gmail.com (Cameron Dale)
Date: Sun Apr 20 19:29:49 2008
Subject: [Twisted-web] web2 stream errback's with ConnectionDone: Connection
	was closed cleanly
Message-ID: <f4438a6a0804201629g4bfaf0adu324e1ba17d9eb1f@mail.gmail.com>

Hi,

I just upgraded from an April 2007 SVN version of twisted web2 to 8.0,
and I started getting some errors from my client streams. The errors
don't really seem to be errors though, as they only indicate that the
connection was closed properly, which it is supposed to be.

I'm not sure if this "error" is something I should be handling myself,
or if there is some defect in web2 since maybe it should handle this
situation itself.

I traced the change that is causing this to changeset 21366:

http://twistedmatrix.com/trac/changeset/21366

where I think the relevant change is the new call to stream.finish()
added to the _error() function. Perhaps _error() or stream.finish()
should be handling ConnectionDone errors?

Thanks,
Cameron

From inhahe at gmail.com  Fri Apr 25 10:41:04 2008
From: inhahe at gmail.com (inhahe)
Date: Fri Apr 25 10:41:07 2008
Subject: [Twisted-web] how to serve static files?
Message-ID: <da776a8c0804250741v543d6488i87e70f52063e9b10@mail.gmail.com>

Can someone show me an example of how to serve static files with Twisted
(the fastest way)? (I will also be serving dynamic content.) Thanx.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080425/fe=
fd624d/attachment.htm
From graemeglass at gmail.com  Fri Apr 25 10:52:46 2008
From: graemeglass at gmail.com (Graeme Glass)
Date: Fri Apr 25 10:52:58 2008
Subject: [Twisted-web] how to serve static files?
In-Reply-To: <da776a8c0804250741v543d6488i87e70f52063e9b10@mail.gmail.com>
References: <da776a8c0804250741v543d6488i87e70f52063e9b10@mail.gmail.com>
Message-ID: <ead817660804250752m9efc8a7r25db0238a5279165@mail.gmail.com>

On Fri, Apr 25, 2008 at 4:41 PM, inhahe <inhahe@gmail.com> wrote:

> Can someone show me an example of how to serve static files with Twisted
> (the fastest way)? (I will also be serving dynamic content.) Thanx.
>
>
>
http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.=
html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080425/0b=
7b09bd/attachment.htm
From inhahe at gmail.com  Fri Apr 25 13:10:48 2008
From: inhahe at gmail.com (inhahe)
Date: Fri Apr 25 13:10:56 2008
Subject: [Twisted-web] how to serve static files?
In-Reply-To: <ead817660804250752m9efc8a7r25db0238a5279165@mail.gmail.com>
References: <da776a8c0804250741v543d6488i87e70f52063e9b10@mail.gmail.com>
	<ead817660804250752m9efc8a7r25db0238a5279165@mail.gmail.com>
Message-ID: <da776a8c0804251010t45d22ca2s8d850c47b3de05e8@mail.gmail.com>

If I want my static .html/whatever files to be gzip'd when the client
supports it, does that mean I have to serve them myself and can't use
static.File?

On Fri, Apr 25, 2008 at 10:52 AM, Graeme Glass <graemeglass@gmail.com>
wrote:

>
> On Fri, Apr 25, 2008 at 4:41 PM, inhahe <inhahe@gmail.com> wrote:
>
> > Can someone show me an example of how to serve static files with Twisted
> > (the fastest way)? (I will also be serving dynamic content.) Thanx.
> >
> >
> >
>
> http://twistedmatrix.com/projects/web/documentation/howto/using-twistedwe=
b.html
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080425/2a=
6b6256/attachment.htm
From inhahe at gmail.com  Sat Apr 26 02:44:54 2008
From: inhahe at gmail.com (inhahe)
Date: Sat Apr 26 02:44:58 2008
Subject: [Twisted-web] what are the advantage of using a single-threaded
	server? and when should we use deferreds?
Message-ID: <da776a8c0804252344g17c3bd9dm65b859c263585a50@mail.gmail.com>

hi, excuse my noobness, I have a few basic questions about twisted, or
probably about web servers in general.

what is the advantage of using a single-threaded server?

i figured it makes it more scalable because there's too much overhead to
have a thread for each user when you have many simultaneous users.  but a
friend i'm talking to now says that using i/o blocking threads is perfectly
scalable for a large number of simultaneous users.

if that's true i can only see a disadvantage in using a single-threaded
server -- having to use deferreds and stuff to make things asynchronous

i also don't understand how you're supposed to use deferreds
the twisted doc says deferreds won't *make* your code asynchronous.  so
let's say you have to do an sql query that takes 10 seconds, deferreds would
be useless for making that not block unless you have a way of making that
sql query non-blocking already?  how is that done?  do you run a separate
thread of your own for each sql query?  one thread for all sql queries?

also I wonder in an typical twisted app, just how slow should an operation
be before you use a deferred?  what if a user enters a username and password
and i have to look that up in the database. do i use a deferred?  just how
bad should the query be before using a deferred?

(reading the twisted docs is like reading a brick wall for me, it would be
nice if someone could just explain things to me in simple terms.)

thx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080426/91=
7d17fc/attachment.htm
From maarten at treewalker.org  Sat Apr 26 05:37:05 2008
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Sat Apr 26 05:37:56 2008
Subject: [Twisted-web] what are the advantage of using a single-threaded
	server? and when should we use deferreds?
In-Reply-To: <da776a8c0804252344g17c3bd9dm65b859c263585a50@mail.gmail.com>
References: <da776a8c0804252344g17c3bd9dm65b859c263585a50@mail.gmail.com>
Message-ID: <200804261137.10492.maarten@treewalker.org>

On Saturday 26 April 2008, inhahe wrote:

> what is the advantage of using a single-threaded server?

If you use threads, your code can be interrupted at any place, except when 
you tell it not to (locking). If you use deferreds, your code can be 
interrupted only at exactly those places you have indicated. This makes it 
much easier to write correct code.

> i figured it makes it more scalable because there's too much overhead to
> have a thread for each user when you have many simultaneous users.  but a
> friend i'm talking to now says that using i/o blocking threads is
> perfectly scalable for a large number of simultaneous users.

It depends on a lot of things. For example, would you use thread pools or 
one thread per user? And how many users are you talking about? 100, 1000, 
10000, ...?

It also depends on how efficient your OS is in handling threads. I remember 
having to compile a differently configured Linux kernel because it would 
run out of processes when creating about 1000 threads, but this was over 5 
years ago, before NPTL, so this may no longer be an issue.

If you have a multi core / multi CPU machine, running multiple threads could 
spread the workload over different cores. For Python this doesn't really 
help though: the Python VM has the Global Interpreter Lock, which 
effectively means that unless you implement long-running operations in an 
extension written in C, there will only be one thread making progress at 
any time. So if you want to use multiple cores effectively in Python, you 
have to design your application to consist of separate communicating 
processes.

> if that's true i can only see a disadvantage in using a single-threaded
> server -- having to use deferreds and stuff to make things asynchronous

The main advantage in my opinion is that it is much easier to write correct 
asynchronous code than correct threaded code. If you write threaded code 
and overlook one place it can be interrupted, you have a bug. If you write 
asynchronous code and overlook one place it should be interruptable, you 
get worse latency, but it is still correct.

Because the points at which different tasks are interleaved are much more 
predictable in asynchronous code, there is a reasonable chance that if your 
code passes your unit tests, it is actually correct. For threaded code, 
it's not uncommon that code passes its unit tests, but starts giving wrong 
results as soon as the server is put under high load.

It may sound strange that I'm saying asynchronous code is easier to write, 
since that is probably not the experience you have when you start doing it. 
But if you're writing a complex threaded application, you typically end up 
assigning each thread its own area of responsibility and getting its inputs 
and outputs from other threads using event queues. If you don't do this, 
threads will run through your application in unpredictable ways as the 
application grows in complexity and even assuming you have proper locking 
over all shared data, you can run into deadlocks if you don't always lock 
things in the same order (thread 1 locks A and then B, thread 2 locks B and 
then A -> possible deadlock).

So you end up with a threaded application design where each thread runs in 
an isolated pocket, getting data from an event queue, processing it and 
then inserting it in another event queue. This is not all that different 
from the asynchronous situation in which you get an event from a reactor 
callback, do some processing and then register another callback.

As an aside, I think one of the problems with threads is that to write a 
piece of code correctly, you have to take into account which threads exist 
in your application. This means it is no longer possible to know whether 
for example a class is correct by looking at it in isolation. One of the 
advantages of object oriented programming is that you only have to care 
about whether a class correctly implements its interface, not how that 
class is used in an application. But when threading, this is no longer the 
case: a class that is correct in single threaded use can be incorrect in 
multi threaded use and a class that is correct in multi threaded use in one 
application can cause a deadlock in another application.

> i also don't understand how you're supposed to use deferreds
> the twisted doc says deferreds won't *make* your code asynchronous.  so
> let's say you have to do an sql query that takes 10 seconds, deferreds
> would be useless for making that not block unless you have a way of
> making that sql query non-blocking already?  how is that done?  do you
> run a separate thread of your own for each sql query?  one thread for all
> sql queries?

If there is an asynchronous API for doing a particular type of I/O, use 
that. If there isn't, you have to use a thread like you describe and use 
one of the thread safe reactor calls to pass the result.

My gut feeling tells me to use a thread pool, possibly of size 1, to access 
for example a database. But I haven't written code like this, so I have no 
experience to back this up. Every kind of I/O I wanted to do so far was 
already handled by Twisted. In the case of databases, use "adbapi".

> also I wonder in an typical twisted app, just how slow should an
> operation be before you use a deferred?  what if a user enters a username
> and password and i have to look that up in the database. do i use a
> deferred?  just how bad should the query be before using a deferred?

It depends on the kind of database. If you have an in-memory database, you 
don't need a deferred. If you have a simple text file on a local disk, you 
probably don't need a deferred. If you contact a DB server on the same 
machine, you might get away with not using a deferred, but it would be 
better to use one. If you contact a DB server on a different machine, 
definately use a deferred.

One simple check is to imagine what would happen if the DB is not available. 
If you use an in-memory DB, it will always be available. If you use a 
simple text file on a local disk, you will immediately get an error if 
opening it fails. If you contact a DB server, it is possible you get a 
timeout when connecting to it. Since server timeouts are typically in the 
order of seconds, this is not something you'd want to block your entire 
application on, so use a deferred.

In any case, Twisted offers "cred" as an authentication framework and cred 
always uses a deferred to give you the results of a credentials check. This 
is good because now you can easily switch from one type of credentials 
checker to another without changing the code that uses it.

> (reading the twisted docs is like reading a brick wall for me, it would
> be nice if someone could just explain things to me in simple terms.)

I think one of the problems is that many people who get started with Twisted 
are learning both asynchronous programming and Twisted at the same time, so 
there are a lot of new concepts to learn.

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20080426/645bf2af/attachment.pgp
From andrew-twisted at puzzling.org  Sat Apr 26 05:42:46 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat Apr 26 05:42:50 2008
Subject: [Twisted-web] what are the advantage of using a
	single-threaded server? and when should we use deferreds?
In-Reply-To: <da776a8c0804252344g17c3bd9dm65b859c263585a50@mail.gmail.com>
References: <da776a8c0804252344g17c3bd9dm65b859c263585a50@mail.gmail.com>
Message-ID: <20080426094246.GP9546@steerpike.home.puzzling.org>

inhahe wrote:
> hi, excuse my noobness, I have a few basic questions about twisted, or probably
> about web servers in general.

There's nothing web-specific in these questions that I see... they apply to any
network service serving requests.

> what is the advantage of using a single-threaded server?
> 
> i figured it makes it more scalable because there's too much overhead to have a
> thread for each user when you have many simultaneous users.  but a friend i'm
> talking to now says that using i/o blocking threads is perfectly scalable for a
> large number of simultaneous users. 

That's basically right.  Threads can be a scalability issue, particularly if you
have many connections that are mostly idle???you end up with a lot of wasted
memory (for stack space).

Another problem with threads is non-determinism.  You can't easy construct a
test suite that will find every possible race condition, because a thread can be
pre-empted at any time.  In effect you have a state machine with a massive
number of states, many more than necessary.  With a single thread, you can
simply and reliably test what happens when events happen a particular order. 

Personally, I find this latter advantage more compelling.  The performance
differences are in many respects minor (and not clearly one way), especially
compared to the overhead of using Python over C/C++.  I find it *much* easier to
write and test non-threaded code (and for that matter, I find it much easier to
write and test Python).  No point worrying about performance unless I can be
confident in the correctness :)

> if that's true i can only see a disadvantage in using a single-threaded server
> -- having to use deferreds and stuff to make things asynchronous

That is a disadvantage.  Creating lots of objects and calling lots of functions
can be a performance issue in Python.  Deferreds are *much* nicer than the
obvious alternative (passing callback functions to functions that produce
asynchronous results), though.

Fundamentally, concurrent programming is more complex than non-concurrent.  The
question is which tradeoffs suit your problem best.

> i also don't understand how you're supposed to use deferreds
> the twisted doc says deferreds won't *make* your code asynchronous.  so let's
> say you have to do an sql query that takes 10 seconds, deferreds would be
> useless for making that not block unless you have a way of making that sql
> query non-blocking already?  how is that done?  do you run a separate thread of
> your own for each sql query?  one thread for all sql queries?

You've got it.  If you have a blocking API, there's nothing you can do to make
it non-blocking apart from running it in a thread (if it's kind enough to
release the GIL) or running it in a subprocess (if you don't mind the overhead
of spawning another process and the complexity of marshalling messages to it
rather than simply sharing an address space).

Note that a common compromise between ?a separate thread of your own for each
sql query? and ?one thread for all sql queries? is a thread pool with a limited
number of threads.  This is what twisted.enterprise.adbapi basically does to run
SQL using the standard Python DB-API.

> also I wonder in an typical twisted app, just how slow should an operation be
> before you use a deferred?  what if a user enters a username and password and i
> have to look that up in the database. do i use a deferred?  just how bad should
> the query be before using a deferred?

The precise answer is: it depends.

The short answer is: if it does I/O or is obviously slower than instant, then
it's blocking and should be avoided (in your main thread).

To be precise: it depends on your requirements: basically, what performance do
you need?  If a lookup in the database is only, say, 30ms, and you don't lots of
concurrent requests, and they only need to do that one lookup, and you only need
an average latency for replying to requests of 100ms, then you'd be pretty
comfortable with just blocking for that lookup.

Typically, anything that doesn't return immediately, for some value of
?immediately?, is good to treat as blocking, and thus something to avoid in your
main thread.  Small writes to disk are often fast enough to count as
?immediate?.  Small reads that are probably cached in RAM by your OS might be
too.  Querying a database usually isn't.  It depends on your exact situation,
though.  It sounds like you already have a good idea of the sorts of things to
watch out for, though.

Basically, there's no magic substitute for measuring actual performance, and
asking yourself ?is it good enough??

> (reading the twisted docs is like reading a brick wall for me, it would be nice
> if someone could just explain things to me in simple terms.)

It sounds to me like you've actually understood things quite well. :)

-Andrew.


From manlio_perillo at libero.it  Sat Apr 26 07:45:47 2008
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Apr 26 07:46:25 2008
Subject: [Twisted-web] what are the advantage of using a single-threaded
	server? and when should we use deferreds?
In-Reply-To: <da776a8c0804252344g17c3bd9dm65b859c263585a50@mail.gmail.com>
References: <da776a8c0804252344g17c3bd9dm65b859c263585a50@mail.gmail.com>
Message-ID: <481315EB.2090201@libero.it>

inhahe ha scritto:
> hi, excuse my noobness, I have a few basic questions about twisted, or 
> probably about web servers in general.
> 
> what is the advantage of using a single-threaded server?
> 

It depends on what do you intend for "thread".

If you intend an OS thread, with preemption, then the advantage of 
Twisted should be evident.

If instead you intend micro threads (like Lua coroutines, Erland 
process, Python stackless, Python greenlets) with cooperation, then 
multi threads should be better, because they are both efficient and easy 
to program.


 > [...]



Manlio Perillo

From db3l.net at gmail.com  Sat Apr 26 12:37:18 2008
From: db3l.net at gmail.com (David Bolen)
Date: Sat Apr 26 12:37:40 2008
Subject: [Twisted-web] Re: how to serve static files?
References: <da776a8c0804250741v543d6488i87e70f52063e9b10@mail.gmail.com>
	<ead817660804250752m9efc8a7r25db0238a5279165@mail.gmail.com>
	<da776a8c0804251010t45d22ca2s8d850c47b3de05e8@mail.gmail.com>
Message-ID: <m2myngmv29.fsf@valheru.db3l.homeip.net>

inhahe <inhahe@gmail.com> writes:

> If I want my static .html/whatever files to be gzip'd when the client
> supports it, does that mean I have to serve them myself and can't use
> static.File?

Not necessarily, since you can handle the gzip operation above the
level of the static.File resource, though you may need to get slightly
more involved in handling the request than you would otherwise.

Here's what I created for one of my servers that uses twisted.web in
order to support the gzip encoding (note some debugging prints are
still present).  First, I have a wrapper for a Request object that
will handle gzipping any data generated for the client that the
Request object generates, including with a producer/consumer model
such as that used by static.File.

          - - - - - - - - - - - - - - - - - - - - - - - - -

import struct
import zlib

class GzipRequest(object):
    """Wrapper for a request that applies a gzip content encoding"""

    def __init__(self, request, compressLevel=6):
        self.request = request
        self.request.setHeader('Content-Encoding', 'gzip')
        # Borrowed from twisted.web2 gzip filter
        self.compress = zlib.compressobj(compressLevel, zlib.DEFLATED,
                                         -zlib.MAX_WBITS, zlib.DEF_MEM_LEVEL,0)

    def __getattr__(self, attr):
        if 'request' in self.__dict__:
            return getattr(self.request, attr)
        else:
            raise AttributeError, attr

    def __setattr__(self, attr, value):
        if 'request' in self.__dict__:
            return setattr(self.request, attr, value)
        else:
            self.__dict__[attr] = value

    def write(self, data):
        if not self.request.startedWriting:
            print 'GzipRequest: Initializing'
            self.crc = zlib.crc32('')
            self.size = self.csize = 0
            # XXX: Zap any length for now since we don't know final size
            if 'content-length' in self.request.headers:
                del self.request.headers['content-length']
            # Borrow header information from twisted.web2 gzip filter
            self.request.write('\037\213\010\000' '\0\0\0\0' '\002\377')

        self.crc = zlib.crc32(data, self.crc)
        self.size += len(data)
        cdata = self.compress.compress(data)
        self.csize += len(cdata)
        print 'GzipRequest: ' \
              'Writing %d bytes, %d total (%d compressed, %d total)' % \
              (len(data),self.size,len(cdata),self.csize)
        if cdata:
            self.request.write(cdata)
        elif self.request.producer:
            # Simulate another pull even though it hasn't really made it
            # out to the consumer yet.
            self.request.producer.resumeProducing()

    def finish(self):
        remain = self.compress.flush()
        self.csize += len(remain)
        print 'GzipRequest: Finishing (size %d, compressed %d)' % (self.size,
                                                                   self.csize)
        if remain:
            self.request.write(remain)
        self.request.write(struct.pack('<LL',
                                       self.crc & 0xFFFFFFFFL,
                                       self.size & 0xFFFFFFFFL))
        self.request.finish()

          - - - - - - - - - - - - - - - - - - - - - - - - -

Then, when processing a request for the relevant resource, wrap the
request in GzipRequest before any further processing in the case where
the client headers show it can handle the gzip response (coupled with
any logic you may wish to apply as to when you would listen to that
client capability).

For example, here's a main file retrieval resource of mine that will
return a static file from the filesystem.  The "if 0" block shows how to
apply the gzip wrapper object, and the very end shows handing control
off to static.File to actually process the file.

          - - - - - - - - - - - - - - - - - - - - - - - - -

class JobFile(Resource):
    """Return contents of a single job file, either as an attachment or
    inline depending on the download argument at instance construction time.
    Expects a single file_uuid on the URL.

    Templates used: None
    Cacheability: Filesystem timestamp on file
    """

    # XXX: Fix so timestamp on this resource is the uploaded date from
    #      the database and not the timestamp in the filesystem

    isLeaf = True

    def __init__(self, db, options, download=False):
        self.file_root = os.path.join(options['data_root'], 'files')
        self.download = download
        self.wrap_aiff = options['config'].get('wrap_aiff', False)

    def render_GET(self, request):
        try:
            job_uuid = uuid.UUID(request.postpath[0])
        except:
            return _Unavailable.render(request)

        path = os.path.join(self.file_root, job_uuid.hex[:2], job_uuid.hex)

        if self.download:
            request.setHeader('Content-Disposition', 'attachment')
        else:
            request.setHeader('Content-Disposition', 'inline')

        if 0:
            # Check for a permissable gzip encoding on output and wrap the
            # the request to use it if present
            accept_encoding = request.getHeader('accept-encoding')
            if accept_encoding:
                encodings = accept_encoding.split(',')
                for encoding in encodings:
                    name = encoding.split(';')[0].strip()
                    if name == 'gzip':
                        print 'USING GZIP WRAPPER'
                        request = GzipRequest(request)
                        break

        fname = request.postpath[-1].lower()
        if (self.wrap_aiff and not self.download and
            (fname.endswith('.aiff') or fname.endswith('.aif'))):
            print 'Wrapping AIFF (%s) as MOV' % fname
            mov_gen = aiffmov.DynamicMov(path)
            request.setHeader('Content-Type', 'application/octet-stream')
            
            if setLastModified(request, os.path.getmtime(path)):
                print '  Not processing (not modified)'
                return ''

            # Set proper size so other end can give progress (and since
            # the FileTransfer class needs it)
            size = mov_gen.total_size()
            request.setHeader('Content-Length', size)
            static.FileTransfer(mov_gen, size, request)
            return NOT_DONE_YET
        else:
            file_r = static.File(path, defaultType='application/octet-stream')
            return file_r.render(request)

          - - - - - - - - - - - - - - - - - - - - - - - - -

Now in this case, the file itself is served by the resource object
above and thus I already know the direct location of the file, so I
only wrapped the request at the point of rendering the final URL
resource.

Though I haven't done it myself yet, if you want to cover an entire
tree of resources (so for example, you can apply it to a single
static.File at the root directory) I would probably use my own root
resource, and apply the gzip wrapper object in the getChild method
rather than any of the render methods.  That way, once any request
flows through that resource, any subsequent resource children will be
handed the wrapped request object.  In such a case, you'd just have a
normal static.File resource as a child to the main resource that was
handling the wrapping.

In the end, I have the wrapper disabled because my files are large
audio/video files (thus already pretty compressed) and with the gzip
output the client can't track the percentage completion of the
download since the content length isn't known.  You could fix that by
compressing it twice on the server, the first time to get the eventual
length, or by storing a temporary compressed copy first on the server
and then sending that, but both were resource prohibitive to me due to
file sizes.

Hopefully this may give you some hints on how to apply to your own
case.

-- David


From glyph at divmod.com  Sat Apr 26 21:37:30 2008
From: glyph at divmod.com (glyph@divmod.com)
Date: Sat Apr 26 21:37:34 2008
Subject: [Twisted-web] what are the advantage of using a single-threaded
	server? and when should we use deferreds?
In-Reply-To: <da776a8c0804252344g17c3bd9dm65b859c263585a50@mail.gmail.com>
References: <da776a8c0804252344g17c3bd9dm65b859c263585a50@mail.gmail.com>
Message-ID: <20080427013730.25821.644054817.divmod.xquotient.978@joule.divmod.com>

On 26 Apr, 06:44 am, inhahe@gmail.com wrote:
>hi, excuse my noobness, I have a few basic questions about twisted, or
>probably about web servers in general.
>
>what is the advantage of using a single-threaded server?
>
>i figured it makes it more scalable because there's too much overhead 
>to
>have a thread for each user when you have many simultaneous users.  but 
>a
>friend i'm talking to now says that using i/o blocking threads is 
>perfectly
>scalable for a large number of simultaneous users.

One way in which a single-threaded server scales better can be 
understood in terms of how the operating system copes with increased 
load.

Let's say your site is being hit very, very hard, and you have to ssh in 
to change some stuff around to update it to deal with more load.  With a 
single-threaded server, the operating system is scheduling two tasks: 
your SSH session and your web server.  Therefore your SSH session gets 
plenty of time to talk to you.  With a multi-threaded or multi-process 
server, it is scheduling zillions of tasks, and you have to think about 
limiting the number of processes that can run (which puts a hard limit 
on the number of concurrent users, that can easily be too many or too 
few for your hardware, especially if those processes are doing network 
I/O of their own).

So, on a poorly-configured multithreaded server, you have to wait for 
the load to die down before your system starts slowing to a crawl.  With 
a single-process server like Twisted, lighttpd, and nginx, you can 
easily get in and poke it with a separate maintenance tool like SSH.

There are also potentially performance differences between event-driven 
and multithreaded servers, but there's a huge amount of optimization 
work that has gone into both approaches, so I wouldn't want to say one 
is definitely faster.  Twisted is definitely a lot slower than several 
competing servers which use a multi-process approach.  However, it can 
be made to scale in a variety of interesting ways.  (I would say that 
your friend is wrong in saying that i/o blocking threads is "perfectly 
scalable", though, especially in the naive case.)
>if that's true i can only see a disadvantage in using a single-threaded
>server -- having to use deferreds and stuff to make things asynchronous

This is not a disadvantage.  Deferreds are great; if you have a race- 
condition firing two Deferreds you can easily write a test to fire them 
in a different order and easily replicate the problem in a debugger to 
figure out what is going on.  If you have the same problem with threads, 
you are basically screwed; it's very hard to reproduce in an environment 
where you can see what's going on and even harder to write a repeatable 
test for.
>i also don't understand how you're supposed to use deferreds
>the twisted doc says deferreds won't *make* your code asynchronous.  so
>let's say you have to do an sql query that takes 10 seconds, deferreds 
>would
>be useless for making that not block unless you have a way of making 
>that
>sql query non-blocking already?  how is that done?  do you run a 
>separate
>thread of your own for each sql query?  one thread for all sql queries?

I could try to explain this, but you should really just read the 
Deferred howto and experiment at the Python prompt for a few hours with 
Deferred-returning APIs like twisted.web.client and 
twisted.enterprise.adbapi.  The short answer is "twisted uses threads 
under the covers to do stuff with SQL, but to your code it just looks 
like a deferred because it's simpler".
>also I wonder in an typical twisted app, just how slow should an 
>operation
>be before you use a deferred?  what if a user enters a username and 
>password
>and i have to look that up in the database. do i use a deferred?  just 
>how
>bad should the query be before using a deferred?

It's not a question of speed, it's a question of blocking.  If you are 
doing CPU-intensive stuff, you might want to put it into a separate 
process so you don't need to break it up into lots of little chunks. 
(Look into spawnProcess.)  However, in general the things that use 
Deferreds are the things that generate some output and then wait for 
some input in response.
>(reading the twisted docs is like reading a brick wall for me, it would 
>be
>nice if someone could just explain things to me in simple terms.)

Good luck.

From kozneb at gmail.com  Sun Apr 27 08:58:55 2008
From: kozneb at gmail.com (=?UTF-8?Q?Harald_Bl=C3=A5tand?=)
Date: Sun Apr 27 08:58:59 2008
Subject: [Twisted-web] Athena onbeforeunload ?
Message-ID: <1ff309e60804270558v7d8fc980w9ed7222d8a881780@mail.gmail.com>

SGkgYWxsLAoKVHJ5aW5nIHRvIGhhdmUgdGhlIHNlcnZlciBrbm93IGF0IG9uY2Ugd2hlbiBhIGNs
aWVudCBnb2VzIGF3YXkuClNlZW1lZCBsaWtlIGZ1bmN0aW9uIGJpbmRFdmVudHMgb2YgTmV2b3cu
QXRoZW5hLlBhZ2VXaWRnZXQgd291bGQgZG8gdGhlCnRyaWNrLCBidXQuLi4KQ2hlY2tpbmcgd2l0
aCBhbGVydCdzIGluIGJpbmRFdmVudHMoKSAgKG9rKSwgYW5kIGZ1bmN0aW9uIG9uYmVmb3JldW5s
b2FkOwpob3dldmVyLCB0aGUgbGF0dGVyIGRvZXNuJ3Qgc2VlbSB0byBnZXQgY2FsbGVkPz8KClBs
ZWFzZSwgd2hhdCBhbSBJIG1pc3NpbmcgaGVyZT8KawotLS0tLS0tLS0tLS0tLSBuZXh0IHBhcnQg
LS0tLS0tLS0tLS0tLS0KQW4gSFRNTCBhdHRhY2htZW50IHdhcyBzY3J1YmJlZC4uLgpVUkw6IGh0
dHA6Ly90d2lzdGVkbWF0cml4LmNvbS9waXBlcm1haWwvdHdpc3RlZC13ZWIvYXR0YWNobWVudHMv
MjAwODA0MjcvNWI5NGU3N2YvYXR0YWNobWVudC5odG0K
From kozneb at gmail.com  Tue Apr 29 06:39:16 2008
From: kozneb at gmail.com (=?UTF-8?Q?Harald_Bl=C3=A5tand?=)
Date: Tue Apr 29 06:39:22 2008
Subject: [Twisted-web] Nevow.Athena.PageWidget - events not caught in IE
Message-ID: <1ff309e60804290339l1bd45e6bw2c20de6faf8cefb6@mail.gmail.com>

SGksCgpJJ20gdXNpbmcgTmV2b3cgMC45LjMxLiBIYXZlIGJlZW4gc3RydWdnbGluZyB3aXRoIGNh
dGNoaW5nIHRoZQpvbmJlZm9yZXVubG9hZCBldmVudCBmb3IgYSBjb3VwbGUgb2YgZGF5cy4gRnJv
bSB0aGUgSlMgY29kZSBpbgpBdGhlbmEvX19pbml0X18uanMsIGl0IGxvb2tzIGxpa2UgdGhlIGV2
ZW50cyAnb25rZXlwcmVzcycgYW5kCidvbmJlZm9yZXVubG9hZCcgYXJlIGhhbmRsZWQgcHJldHR5
IGF1dG9tYXRpY2FsbHk7IGFuZCBieSBhZGRpbmcgYWxlcnRzIHRvCnRoZWlyIG1ldGhvZHMsIEkg
Y2FuIHZlcmlmeSB0aGF0IGJvdGggYXJlIGNhdWdodCBmaW5lIG9uIEZpcmVmb3guCgpIb3dldmVy
LCBvbiBJbnRlcm5ldCBFeHBsb3JlciAtIHYgNi4wLjI4MDAgb24gVzIwMDAsIGFuZCA3LjAuNjAw
MCBvbiBWaXN0YQotIG5laXRoZXIgb2YgdGhlc2UgMiBldmVudHMgaXMgdHJhcHBlZC4KCkRvZXMg
YW55Ym9keSBrbm93IHdoZXRoZXIgdGhpcyBpcyBhIGtub3duIHByb2JsZW0gd2l0aCBBdGhlbmEg
b24gSUU/CgooQSBmdXJ0aGVyIG9ic2VydmF0aW9uIC0gdGhlIEF0aGVuYSB0ZXN0IGZpbGVzIFRl
c3RJbml0LmpzIGFuZCBUZXN0V2lkZ2V0LmpzCmJvdGggYXBwZWFyIHRvIGhhdmUgdGVzdHMgZm9y
IG9uYmVmb3JldW5sb2FkLiBOb3csIHdoZW4gSSBkbyAnbml0Ci0tcG9ydD05ODc2IG5ldm93JyBh
bmQgcHJlc3MgIlJ1biBUZXN0cyIgaW4gdGhlIGJyb3dzZXIsIHRoZXNlIGZpbGVzIGRvIG5vdApz
ZWVtIHRvIHJ1bi4gSSBkb24ndCB1bmRlcnN0YW5kIHRvbyBtdWNoIG9mIHRoZSBpbnRlcmFjdGl2
ZSB1bml0IHRlc3RzIHlldCwKYnV0IEkgZ2V0IGEgZmVlbGluZyB0aGF0IGZpbGUgbGl2ZXRlc3Rf
YXRoZW5hLnB5IHdvdWxkIG5lZWQgdG8gaGF2ZSBhIGxpbmUKbGlrZSAianNDbGFzcyA9IHUnTmV2
b3cuVGVzdC4uIiBmb3IgdGhlc2UgMiBmaWxlcyB0byBiZSBmb3VuZCBhbmQgZXhlY3V0ZWQsCmFu
ZCBpdCBkb2Vzbid0LikKCkdldHRpbmcgYW4gYW5zd2VyIHRvIHRoaXMgd291bGQgcmVhbGx5IHNh
dmUgc29tZSB0aW1lLiBJZiBub3QsIEknbGwgZ28gb24KZGlnZ2luZyB0aHJvdWdodCB0aGUgc291
cmNlcyAtIGl0J3MgYmVlbiBlZHVjYXRpb25hbCBzbyBmYXIgOi0pCgpSZWdhcmRzLApIYXJhbGQK
LS0tLS0tLS0tLS0tLS0gbmV4dCBwYXJ0IC0tLS0tLS0tLS0tLS0tCkFuIEhUTUwgYXR0YWNobWVu
dCB3YXMgc2NydWJiZWQuLi4KVVJMOiBodHRwOi8vdHdpc3RlZG1hdHJpeC5jb20vcGlwZXJtYWls
L3R3aXN0ZWQtd2ViL2F0dGFjaG1lbnRzLzIwMDgwNDI5LzUwZGQwYWRjL2F0dGFjaG1lbnQuaHRt
Cg==
From exarkun at divmod.com  Tue Apr 29 07:04:49 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue Apr 29 07:04:55 2008
Subject: [Twisted-web] Nevow.Athena.PageWidget - events not caught in IE
In-Reply-To: <1ff309e60804290339l1bd45e6bw2c20de6faf8cefb6@mail.gmail.com>
Message-ID: <20080429110449.6859.923790625.divmod.quotient.56602@ohm>

On Tue, 29 Apr 2008 12:39:16 +0200, Harald Bl?tand <kozneb@gmail.com> wrote:
>Hi,
>
>I'm using Nevow 0.9.31. Have been struggling with catching the
>onbeforeunload event for a couple of days. From the JS code in
>Athena/__init__.js, it looks like the events 'onkeypress' and
>'onbeforeunload' are handled pretty automatically; and by adding alerts to
>their methods, I can verify that both are caught fine on Firefox.
>
>However, on Internet Explorer - v 6.0.2800 on W2000, and 7.0.6000 on Vista
>- neither of these 2 events is trapped.
>Does anybody know whether this is a known problem with Athena on IE?
>

I'm not sure what might be going on here.  I can tell you that I've never
tested Athena on either of those platforms, though.

>(A further observation - the Athena test files TestInit.js and TestWidget.js
>both appear to have tests for onbeforeunload. Now, when I do 'nit
>--port=9876 nevow' and press "Run Tests" in the browser, these files do not
>seem to run. I don't understand too much of the interactive unit tests yet,
>but I get a feeling that file livetest_athena.py would need to have a line
>like "jsClass = u'Nevow.Test.." for these 2 files to be found and executed,
>and it doesn't.)

When I run `nit nevow? and click the `Run Tests? button, I see 59 tests
run and succeed.  This using Firefox 1.5 on Ubuntu 6.06.

You might be confusing nits with JavaScript unit tests.  nits are defined
by livetest_*.py files and whatever JavaScript the `jsClass? attributes in
them point to.  Much (perhaps not, there's a bit of mixing) of the code in
the Nevow.Test JavaScript package (defined by Nevow/nevow/js/Nevow/Test/)
is for JavaScript unit tests.  These are run using the stand-alone spider-
monkey interpreter; they don't run in a browser.

Nevow/nevow/js/Nevow/Athena/Tests/__init__.js has most of the code for the
Nevow nits.

Jean-Paul

From kozneb at gmail.com  Tue Apr 29 08:36:16 2008
From: kozneb at gmail.com (=?UTF-8?Q?Harald_Bl=C3=A5tand?=)
Date: Tue Apr 29 08:36:53 2008
Subject: [Twisted-web] Nevow.Athena.PageWidget - events not caught in IE
In-Reply-To: <20080429110449.6859.923790625.divmod.quotient.56602@ohm>
References: <1ff309e60804290339l1bd45e6bw2c20de6faf8cefb6@mail.gmail.com>
	<20080429110449.6859.923790625.divmod.quotient.56602@ohm>
Message-ID: <1ff309e60804290536o6a75860cxcdc4901bdf588ae6@mail.gmail.com>

T24gVHVlLCBBcHIgMjksIDIwMDggYXQgMTowNCBQTSwgSmVhbi1QYXVsIENhbGRlcm9uZSA8ZXhh
cmt1bkBkaXZtb2QuY29tPgp3cm90ZToKCj4gT24gVHVlLCAyOSBBcHIgMjAwOCAxMjozOToxNiAr
MDIwMCwgSGFyYWxkIEJsw6V0YW5kIDxrb3puZWJAZ21haWwuY29tPgo+IHdyb3RlOgo+Cj4gPiBI
aSwKPiA+Cj4gPiBJJ20gdXNpbmcgTmV2b3cgMC45LjMxLiBIYXZlIGJlZW4gc3RydWdnbGluZyB3
aXRoIGNhdGNoaW5nIHRoZQo+ID4gb25iZWZvcmV1bmxvYWQgZXZlbnQgZm9yIGEgY291cGxlIG9m
IGRheXMuIEZyb20gdGhlIEpTIGNvZGUgaW4KPiA+IEF0aGVuYS9fX2luaXRfXy5qcywgaXQgbG9v
a3MgbGlrZSB0aGUgZXZlbnRzICdvbmtleXByZXNzJyBhbmQKPiA+ICdvbmJlZm9yZXVubG9hZCcg
YXJlIGhhbmRsZWQgcHJldHR5IGF1dG9tYXRpY2FsbHk7IGFuZCBieSBhZGRpbmcgYWxlcnRzCj4g
PiB0bwo+ID4gdGhlaXIgbWV0aG9kcywgSSBjYW4gdmVyaWZ5IHRoYXQgYm90aCBhcmUgY2F1Z2h0
IGZpbmUgb24gRmlyZWZveC4KPiA+Cj4gPiBIb3dldmVyLCBvbiBJbnRlcm5ldCBFeHBsb3JlciAt
IHYgNi4wLjI4MDAgb24gVzIwMDAsIGFuZCA3LjAuNjAwMCBvbgo+ID4gVmlzdGEKPiA+IC0gbmVp
dGhlciBvZiB0aGVzZSAyIGV2ZW50cyBpcyB0cmFwcGVkLgo+ID4gRG9lcyBhbnlib2R5IGtub3cg
d2hldGhlciB0aGlzIGlzIGEga25vd24gcHJvYmxlbSB3aXRoIEF0aGVuYSBvbiBJRT8KPiA+Cj4g
Pgo+IEknbSBub3Qgc3VyZSB3aGF0IG1pZ2h0IGJlIGdvaW5nIG9uIGhlcmUuICBJIGNhbiB0ZWxs
IHlvdSB0aGF0IEkndmUgbmV2ZXIKPiB0ZXN0ZWQgQXRoZW5hIG9uIGVpdGhlciBvZiB0aG9zZSBw
bGF0Zm9ybXMsIHRob3VnaC4KPgo+IChBIGZ1cnRoZXIgb2JzZXJ2YXRpb24gLSB0aGUgQXRoZW5h
IHRlc3QgZmlsZXMgVGVzdEluaXQuanMgYW5kCj4gPiBUZXN0V2lkZ2V0LmpzCj4gPiBib3RoIGFw
cGVhciB0byBoYXZlIHRlc3RzIGZvciBvbmJlZm9yZXVubG9hZC4gTm93LCB3aGVuIEkgZG8gJ25p
dAo+ID4gLS1wb3J0PTk4NzYgbmV2b3cnIGFuZCBwcmVzcyAiUnVuIFRlc3RzIiBpbiB0aGUgYnJv
d3NlciwgdGhlc2UgZmlsZXMgZG8KPiA+IG5vdAo+ID4gc2VlbSB0byBydW4uIEkgZG9uJ3QgdW5k
ZXJzdGFuZCB0b28gbXVjaCBvZiB0aGUgaW50ZXJhY3RpdmUgdW5pdCB0ZXN0cwo+ID4geWV0LAo+
ID4gYnV0IEkgZ2V0IGEgZmVlbGluZyB0aGF0IGZpbGUgbGl2ZXRlc3RfYXRoZW5hLnB5IHdvdWxk
IG5lZWQgdG8gaGF2ZSBhCj4gPiBsaW5lCj4gPiBsaWtlICJqc0NsYXNzID0gdSdOZXZvdy5UZXN0
Li4iIGZvciB0aGVzZSAyIGZpbGVzIHRvIGJlIGZvdW5kIGFuZAo+ID4gZXhlY3V0ZWQsCj4gPiBh
bmQgaXQgZG9lc24ndC4pCj4gPgo+Cj4gV2hlbiBJIHJ1biBgbml0IG5ldm93wrQgYW5kIGNsaWNr
IHRoZSBgUnVuIFRlc3RzwrQgYnV0dG9uLCBJIHNlZSA1OSB0ZXN0cwo+IHJ1biBhbmQgc3VjY2Vl
ZC4gIFRoaXMgdXNpbmcgRmlyZWZveCAxLjUgb24gVWJ1bnR1IDYuMDYuCj4KPiBZb3UgbWlnaHQg
YmUgY29uZnVzaW5nIG5pdHMgd2l0aCBKYXZhU2NyaXB0IHVuaXQgdGVzdHMuICBuaXRzIGFyZSBk
ZWZpbmVkCj4gYnkgbGl2ZXRlc3RfKi5weSBmaWxlcyBhbmQgd2hhdGV2ZXIgSmF2YVNjcmlwdCB0
aGUgYGpzQ2xhc3PCtCBhdHRyaWJ1dGVzIGluCj4gdGhlbSBwb2ludCB0by4gIE11Y2ggKHBlcmhh
cHMgbm90LCB0aGVyZSdzIGEgYml0IG9mIG1peGluZykgb2YgdGhlIGNvZGUgaW4KPiB0aGUgTmV2
b3cuVGVzdCBKYXZhU2NyaXB0IHBhY2thZ2UgKGRlZmluZWQgYnkgTmV2b3cvbmV2b3cvanMvTmV2
b3cvVGVzdC8pCj4gaXMgZm9yIEphdmFTY3JpcHQgdW5pdCB0ZXN0cy4gIFRoZXNlIGFyZSBydW4g
dXNpbmcgdGhlIHN0YW5kLWFsb25lIHNwaWRlci0KPiBtb25rZXkgaW50ZXJwcmV0ZXI7IHRoZXkg
ZG9uJ3QgcnVuIGluIGEgYnJvd3Nlci4KPgo+IE5ldm93L25ldm93L2pzL05ldm93L0F0aGVuYS9U
ZXN0cy9fX2luaXRfXy5qcyBoYXMgbW9zdCBvZiB0aGUgY29kZSBmb3IgdGhlCj4gTmV2b3cgbml0
cy4KPgoKVGhhbmtzIGZvciB5b3VyIHJlcGx5IEplYW4tUGF1bCwKClllcCwgb24gRmlyZWZveCBJ
IHRvbyBzZWUgNTkgdGVzdHMgc3VjY2VlZC4gV2l0aCBJRSBvbiBWaXN0YSwgNTguIChBbHRob3Vn
aApJIGRvbid0IF90aGlua18gaXQncyB0byBkbyB3aXRoIHRoZSBjdXJyZW50IHByb2JsZW0gLQoK
TmV2b3cuQXRoZW5hLlRlc3RzLkR5bmFtaWNXaWRnZXRJbnN0YW50aWF0aW9uLnRlc3Rfbm9uWEhU
TUxXaWRnZXRSZXR1cm4KCkZhaWxlZCB0byBkaXNjb3ZlciBub2RlIHdpdGggaWQgdmFsdWUgYXRo
ZW5hOjUyIGJlbmVhdGggW29iamVjdF0KKHByb2dyYW1tZXIgZXJyb3IpLgp1bmRlZmluZWQKCk5l
dm93LkF0aGVuYS5UZXN0cy5EeW5hbWljV2lkZ2V0SW5zdGFudGlhdGlvbi50ZXN0X2ludmFsaWRS
ZW1vdmVDaGlsZFdpZGdldAoobm90IHN1cmUgd2hpY2ggb25lIG9mIHRoZSB0ZXN0cyB0aGUgZXJy
IG1zZyByZWxhdGVzIHRvKSAuKQoKVW5mb3J0dW5hdGVseSwgb3VyIENvcnBvcmF0ZSBTdGFuZGFy
ZCBpcyBJRSwgYW5kIHdlJ3JlIGdvaW5nIGZyb20gVzIwMDAgdG8KVmlzdGEgZm9yIDcwSyB1c2Vy
cyBzb29uIDotKAoKCkFueXdheSAtIG1pZ2h0IElFJ3MgZmFpbHVyZSB3aXRoICdvbmJlZm9yZXVu
bG9hZCcgZXhwbGFpbiB3aHkgSSdtIGhhdmluZwp0cm91YmxlIHJlZnJlc2hpbmcgYW4gQXRoZW5h
IHBhZ2U/IChCZWNhdXNlIHRoZSBzZXJ2ZXIgZG9lc24ndCBnZXQgYW55CnNlbmRDbG9zZU1lc3Nh
Z2UoKSA/KQoKCkhtbS4uIHdlIGNhbid0IGJlIGFsb25lIGluIHRoZSB3b3JsZCB1c2luZyBJRSwg
b3IgTSQgd291bGRuJ3QgYmUgc28gYmlnLi4uCjotKQoKUmVnYXJkcywKSGFyYWxkCi0tLS0tLS0t
LS0tLS0tIG5leHQgcGFydCAtLS0tLS0tLS0tLS0tLQpBbiBIVE1MIGF0dGFjaG1lbnQgd2FzIHNj
cnViYmVkLi4uClVSTDogaHR0cDovL3R3aXN0ZWRtYXRyaXguY29tL3BpcGVybWFpbC90d2lzdGVk
LXdlYi9hdHRhY2htZW50cy8yMDA4MDQyOS8yMzVkNjg1NS9hdHRhY2htZW50Lmh0bQo=
From mithrandi at mithrandi.net  Tue Apr 29 09:09:31 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue Apr 29 09:09:39 2008
Subject: [Twisted-web] Nevow.Athena.PageWidget - events not caught in IE
In-Reply-To: <1ff309e60804290536o6a75860cxcdc4901bdf588ae6@mail.gmail.com>
References: <1ff309e60804290339l1bd45e6bw2c20de6faf8cefb6@mail.gmail.com>
	<20080429110449.6859.923790625.divmod.quotient.56602@ohm>
	<1ff309e60804290536o6a75860cxcdc4901bdf588ae6@mail.gmail.com>
Message-ID: <20080429130931.GA15820@mithrandi.net>

KiBIYXJhbGQgQmzDpXRhbmQgPGtvem5lYkBnbWFpbC5jb20+IFsyMDA4LTA0LTI5IDE0OjM2OjE2
ICswMjAwXToKCj4gQW55d2F5IC0gbWlnaHQgSUUncyBmYWlsdXJlIHdpdGggJ29uYmVmb3JldW5s
b2FkJyBleHBsYWluIHdoeSBJJ20gaGF2aW5nCj4gdHJvdWJsZSByZWZyZXNoaW5nIGFuIEF0aGVu
YSBwYWdlPyAoQmVjYXVzZSB0aGUgc2VydmVyIGRvZXNuJ3QgZ2V0IGFueQo+IHNlbmRDbG9zZU1l
c3NhZ2UoKSA/KQo+IAo+IAo+IEhtbS4uIHdlIGNhbid0IGJlIGFsb25lIGluIHRoZSB3b3JsZCB1
c2luZyBJRSwgb3IgTSQgd291bGRuJ3QgYmUgc28gYmlnLi4uCj4gOi0pCgpUaGVyZSBpcyBkZWZp
bml0ZWx5IGEgcmVncmVzc2lvbiBpbiBBdGhlbmEgb24gSUUgKGJvdGggNiBhbmQgNykKcmVnYXJk
aW5nIG9ue2JlZm9yZSx9dW5sb2FkOyBJIHRob3VnaHQgdGhpcyBoYWQgc29tZXRoaW5nIHRvIGRv
IHdpdGggdGhlCmNoYW5nZSBmcm9tIG9udW5sb2FkIHRvIG9uYmVmb3JldW5sb2FkLCBidXQgc3dp
dGNoaW5nIHRoYXQgYmFjayBkaWRuJ3QKc2VlbSB0byBoZWxwIHdoZW4gSSB0cmllZCBpdC4gSSdt
IGN1cnJlbnRseSBydW5uaW5nIGluIHByb2R1Y3Rpb24gd2l0aCByMTQwMTcgcmV2ZXJ0ZWQ7CnVu
Zm9ydHVuYXRlbHkgdGhpcyBjaGFuZ2VzZXQgaXMgYW4gZXh0cmVtZWx5IGxhcmdlIEF0aGVuYSBy
ZWZhY3RvcmluZywKYW5kIEkgaGF2ZW4ndCBoYWQgdGhlIHRpbWUgdG8gaW52ZXN0aWdhdGUgZnVy
dGhlciB0byBuYXJyb3cgdGhpcyBkb3duLgpUaGUgbmV0IHJlc3VsdCBvZiB0aGlzIHByb2JsZW0g
aXMgdGhhdCB0aGUgQXRoZW5hIHRyYW5zcG9ydCBjb25uZWN0aW9uCmlzbid0IGNsb3NlZCBpbW1l
ZGlhdGVseSBvbiBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHBhZ2UsIGJ1dCBpbnN0ZWFkCndpbGwg
aGFuZyBhcm91bmQgdW50aWwgdGhlIHNlcnZlciB0aW1lb3V0LCB3aGljaCBoYXMgYSBkZWZhdWx0
IHZhbHVlIG9mCmFib3V0IDUgbWludXRlcywgaWYgSSdtIG5vdCBtaXN0YWtlbi4gVGh1cywgYW55
b25lIHRyeWluZyB0byBuYXZpZ2F0ZQphcm91bmQgYW4gQXRoZW5hLWJhc2VkIHNpdGUgaW4gSUUg
d2lsbCBxdWlja2x5IGZpbmQgdGhhdCB0aGV5IHJ1biBpbnRvCnRoZSBjb25uZWN0aW9uIGxpbWl0
LCBhbmQgdHJ5aW5nIHRvIG5hdmlnYXRlIHRvIG5ldyBsaW5rcyBqdXN0IHNlZW1zIHRvCiJoYW5n
IiBhcyB0aGUgYnJvd3NlciB3YWl0cyBmb3IgYSBjb25uZWN0aW9uIHNsb3QgdG8gZnJlZSB1cC4K
CkkgZG9uJ3Qga25vdyBhbnl0aGluZyBhYm91dCB0aGUgb25rZXlwcmVzcyBpc3N1ZSwgaXQgbWF5
IG9yIG1heSBub3QgYmUKcmVsYXRlZC4KLS0gCm1pdGhyYW5kaSwgaSBBaW5pbCBlbi1CYWxhbmRv
ciwgYSBmYWVyIEFtYmFyCi0tLS0tLS0tLS0tLS0tIG5leHQgcGFydCAtLS0tLS0tLS0tLS0tLQpB
IG5vbi10ZXh0IGF0dGFjaG1lbnQgd2FzIHNjcnViYmVkLi4uCk5hbWU6IG5vdCBhdmFpbGFibGUK
VHlwZTogYXBwbGljYXRpb24vcGdwLXNpZ25hdHVyZQpTaXplOiAxOTcgYnl0ZXMKRGVzYzogRGln
aXRhbCBzaWduYXR1cmUKVXJsIDogaHR0cDovL3R3aXN0ZWRtYXRyaXguY29tL3BpcGVybWFpbC90
d2lzdGVkLXdlYi9hdHRhY2htZW50cy8yMDA4MDQyOS8xMmZmYjk0YS9hdHRhY2htZW50LnBncAo=
From wthie at thiengineering.ch  Tue Apr 29 11:09:14 2008
From: wthie at thiengineering.ch (Werner Thie)
Date: Tue Apr 29 11:09:50 2008
Subject: [Twisted-web] socket error: 22, 'Invalid argument'
In-Reply-To: <m2myngmv29.fsf@valheru.db3l.homeip.net>
References: <da776a8c0804250741v543d6488i87e70f52063e9b10@mail.gmail.com>	<ead817660804250752m9efc8a7r25db0238a5279165@mail.gmail.com>	<da776a8c0804251010t45d22ca2s8d850c47b3de05e8@mail.gmail.com>
	<m2myngmv29.fsf@valheru.db3l.homeip.net>
Message-ID: <48173A1A.5030109@thiengineering.ch>

Hi all

Running on twisted 2.5 OpenBSD I see the following traceback in the logs 
every twenty minutes with up to 200 athena/LivePages connected:

	Traceback (most recent call last):
	--- <exception caught here> ---
	  File 
"/usr/local/lib/python2.5/site-packages/twisted/internet/selectreactor.py", 
line 148, in _doReadOrWrite
	    why = getattr(selectable, method)()
	  File 
"/usr/local/lib/python2.5/site-packages/twisted/internet/tcp.py", line 
362, in doRead
	    return self.protocol.dataReceived(data)
	  File 
"/usr/local/lib/python2.5/site-packages/twisted/protocols/basic.py", 
line 233, in dataReceived
	    why = self.lineReceived(line)
	  File "/usr/local/lib/python2.5/site-packages/twisted/web/http.py", 
line 1069, in lineReceived
	    self.allContentReceived()
	  File "/usr/local/lib/python2.5/site-packages/twisted/web/http.py", 
line 1110, in allContentReceived
	    req.requestReceived(command, path, version)
	  File "/usr/local/lib/python2.5/site-packages/twisted/web/http.py", 
line 603, in requestReceived
	    self.host = self.channel.transport.getHost()
	  File 
"/usr/local/lib/python2.5/site-packages/twisted/internet/tcp.py", line 
672, in getHost
	    return address.IPv4Address('TCP', *(self.socket.getsockname() + 
('INET',)))
	  File "<string>", line 1, in getsockname
	
	socket.error: (22, 'Invalid argument')

Changing reactors does not help, the error is very unspecific. Before I 
start changing the source sprinkling it with log statements is there 
anybody out there who has a cure or knows an explanation.

Thank you so much,

Werner Thie

