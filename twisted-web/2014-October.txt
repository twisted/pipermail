From cwaldbieser at gmail.com  Mon Oct  6 08:55:31 2014
From: cwaldbieser at gmail.com (Carl Waldbieser)
Date: Mon, 6 Oct 2014 10:55:31 -0400
Subject: [Twisted-web] Making Secure HTTPS requests, SSL Method,
 and Certificate Management using Twisted
Message-ID: <CAHPVzqYDmXZdvRTPz1Ei8h091drUOYN6uTuJP2_PP656tA8NiQ@mail.gmail.com>

I have a couple projects I am working on where I would like to make HTTPS
requests using Twisted.  I reviewed the articles "Using TLS in Twisted" [1]
and "Using the Twisted Web Client" (section "HTTP over SSL") [2].  It seems
like various options exist that will allow me to make HTTPS requests using
the CA certs bundled on the client OS.

I would like to be able to tell my HTTPS clients to accept specific
*internal* CA certificates *in addition* to the certificates provided by
the OS.  Initially, I thought this might be possible by passing a custom
t.w.c.BrowserLikePolicyForHTTPS to the t.w.c.Agent as its `contextFactory`
argument. I wasn't quite sure how to go about doing this, so I got some
advice on StackOverflow [3]. With some slight modifications to the solution
presented there, I was able to create a custom Trust Root that accepted a
list of paths to CA cert files in PEM format that I wanted to add to the
client. The custom trust root is passed to the BrowserLikePolicyForHTTPS.
The policy is passed to the Agent.

The one hitch is that the IOpenSSLTrustRoot interface upon which my custom
trust root is based is located in `twisted.internet._sslverify`[4], which
if I understand correctly, is a private module and not supposed to be used
as an API.  Is there a *supported* way to specify *additional* CA certs to
use during SSL verification when making HTTPS requests using Twisted? If
so, what is the recommended method?

Another related concept that was not clear to me is how one might specify
the SSL method (e.g. SSLv23_METHOD, SSLv3_METHOD, etc.) when making the
request. Is there some recommended way to pass options to indicate the SSL
method that ought to be used?

Any guidance would be appreciated.

Thanks,
Carl Waldbieser


[1] https://twistedmatrix.com/documents/current/core/howto/ssl.html
[2]
http://twistedmatrix.com/documents/current/web/howto/client.html#http-over-ssl
[3]
http://stackoverflow.com/questions/26166444/twisted-python-how-to-create-a-twisted-web-client-browserlikepolicyforhttps-with
[4]
http://twistedmatrix.com/documents/current/api/twisted.internet._sslverify.IOpenSSLTrustRoot.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-web/attachments/20141006/f0f8c111/attachment.html>

From wanghe at gsrtvu.cn  Mon Oct  6 08:15:21 2014
From: wanghe at gsrtvu.cn (=?GBK?B?uMrL4LXntPM=?=)
Date: Mon, 06 Oct 2014 22:15:21 +0800
Subject: [Twisted-web] Auto-Re:  Making Secure HTTPS requests, SSL Method,
 and Certificate Management using Twisted
Message-ID: <1410062215217fb805fa8ff9c8872f51bce3dbaab2a6@gsrtvu.cn>

????????!

From carl at amplidata.com  Tue Oct  7 16:21:13 2014
From: carl at amplidata.com (Carl D'Halluin)
Date: Tue, 7 Oct 2014 22:21:13 +0000 (UTC)
Subject: [Twisted-web] Nginx vs Twisted Web
References: <mailman.7.1372701602.17205.twisted-web@twistedmatrix.com>
 <51D2067D.2050303@freerecruiting.com> <51D20D4E.8090909@imperial.ac.uk>
 <51D24412.9080506@freerecruiting.com>
 <20130702112622.28793.1192856368.divmod.xquotient.595@top>
 <CABefbUo6npj6DC+pYKJhk234nwKdv__gJv+j2C2QYNHpvCs4fA@mail.gmail.com>
 <CAMcKhMTpjHjzNLbdhntA-Cu3hO8=7LfLkQ-vZdBTr4_njyT0Vw@mail.gmail.com>
Message-ID: <loom.20141008T001656-215@post.gmane.org>


> Another problem is that Twisted doesn't yet support SSL on adopted sockets.

I did this by hand:

# Suppose your create/bind/list your listen_socket, and
# its file descriptor is listen_socket_fd


site = server.Site(MyHttpsSite())

cert = '/path/to/my/cert'
key = '/path/to/my/key'

ctx = DefaultOpenSSLContextFactory(key, cert)
tlsFactory = tls.TLSMemoryBIOFactory(ctx, False, site)
p = tcp.Port._fromListeningDescriptor(reactor,
                                             listen_socket_fd,
                                             socket.AF_INET,
                                             tlsFactory)
p._type = 'TLS'
p.startListening()

os.close(listen_socket_fd)
reactor.run()



From glyph at twistedmatrix.com  Tue Oct  7 22:53:53 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 7 Oct 2014 21:53:53 -0700
Subject: [Twisted-web] Nginx vs Twisted Web
In-Reply-To: <loom.20141008T001656-215@post.gmane.org>
References: <mailman.7.1372701602.17205.twisted-web@twistedmatrix.com>
 <51D2067D.2050303@freerecruiting.com> <51D20D4E.8090909@imperial.ac.uk>
 <51D24412.9080506@freerecruiting.com>
 <20130702112622.28793.1192856368.divmod.xquotient.595@top>
 <CABefbUo6npj6DC+pYKJhk234nwKdv__gJv+j2C2QYNHpvCs4fA@mail.gmail.com>
 <CAMcKhMTpjHjzNLbdhntA-Cu3hO8=7LfLkQ-vZdBTr4_njyT0Vw@mail.gmail.com>
 <loom.20141008T001656-215@post.gmane.org>
Message-ID: <FDCBC7F5-90C7-470D-A06C-92984C1F7B6B@twistedmatrix.com>


On Oct 7, 2014, at 3:21 PM, Carl D'Halluin <carl at amplidata.com> wrote:

> 
>> Another problem is that Twisted doesn't yet support SSL on adopted sockets.
> 
> I did this by hand:
> 
> # Suppose your create/bind/list your listen_socket, and
> # its file descriptor is listen_socket_fd
> 
> 
> site = server.Site(MyHttpsSite())
> 
> cert = '/path/to/my/cert'
> key = '/path/to/my/key'
> 
> ctx = DefaultOpenSSLContextFactory(key, cert)
> tlsFactory = tls.TLSMemoryBIOFactory(ctx, False, site)
> p = tcp.Port._fromListeningDescriptor(reactor,
>                                             listen_socket_fd,
>                                             socket.AF_INET,
>                                             tlsFactory)
> p._type = 'TLS'
> p.startListening()
> 
> os.close(listen_socket_fd)
> reactor.run()

There is work underway for addressing this particular use-case (endpoint composition) via string endpoints:

<https://twistedmatrix.com/trac/ticket/5642>

But even today you don't have to touch unsupported private APIs to do this.

As per <https://twistedmatrix.com/trac/wiki/CompatibilityPolicy> we really like to discourage people from touching private (i.e. underscore-prefixed or imported-from-another-module) API, because it may well break in the next release and you'll have no recourse.

(Plus, you should really be using CertificateOptions, not DefaultOpenSSLContextFactory, either via PrivateCertificate(...).options() or directly constructed.)

from twisted.python.filepath import FilePath
site = server.Site(MyHttpsSite())

cert = FilePath('/path/to/my/cert').getContent()
key = FilePath('/path/to/my/key').getContent()

from twisted.internet.ssl import PrivateCertificate
certificateWithKey = PrivateCertificate.loadPEM(b"\n".join([cert, key]))

tlsFactory = tls.TLSMemoryBIOFactory(certificateWithKey.options(), False, site)

import socket
from twisted.internet import reactor
reactor.adoptStreamPort(listen_socket_fd, socket.AF_INET, tlsFactory)
import os
os.close(listen_socket_fd)
reactor.run()

This code hasn't been tested, but no underscores should be necessary!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-web/attachments/20141007/eaf9df04/attachment.html>

From glyph at twistedmatrix.com  Tue Oct  7 23:49:37 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 7 Oct 2014 22:49:37 -0700
Subject: [Twisted-web] Making Secure HTTPS requests, SSL Method,
	and Certificate Management using Twisted
In-Reply-To: <CAHPVzqYDmXZdvRTPz1Ei8h091drUOYN6uTuJP2_PP656tA8NiQ@mail.gmail.com>
References: <CAHPVzqYDmXZdvRTPz1Ei8h091drUOYN6uTuJP2_PP656tA8NiQ@mail.gmail.com>
Message-ID: <112CDFBA-765C-4F7F-87CA-333A256605DF@twistedmatrix.com>


On Oct 6, 2014, at 7:55 AM, Carl Waldbieser <cwaldbieser at gmail.com> wrote:

> I have a couple projects I am working on where I would like to make HTTPS requests using Twisted.  I reviewed the articles "Using TLS in Twisted" [1] and "Using the Twisted Web Client" (section "HTTP over SSL") [2].  It seems like various options exist that will allow me to make HTTPS requests using the CA certs bundled on the client OS.

Thank you for diligently studying all of our existing documentation on the subject.  I apologize for its deficiencies.  This API has grown in fits and starts over the last decade or so and it has not ended in the most consistent shape.  Hopefully we can improve this based on your feedback for the next release.

> I would like to be able to tell my HTTPS clients to accept specific *internal* CA certificates *in addition* to the certificates provided by the OS.  Initially, I thought this might be possible by passing a custom t.w.c.BrowserLikePolicyForHTTPS to the t.w.c.Agent as its `contextFactory` argument. I wasn't quite sure how to go about doing this, so I got some advice on StackOverflow [3]. With some slight modifications to the solution presented there, I was able to create a custom Trust Root that accepted a list of paths to CA cert files in PEM format that I wanted to add to the client. The custom trust root is passed to the BrowserLikePolicyForHTTPS. The policy is passed to the Agent.
> 
> The one hitch is that the IOpenSSLTrustRoot interface upon which my custom trust root is based is located in `twisted.internet._sslverify`[4], which if I understand correctly, is a private module and not supposed to be used as an API.  Is there a *supported* way to specify *additional* CA certs to use during SSL verification when making HTTPS requests using Twisted? If so, what is the recommended method?

Well, the "good" news is, on OS X, if you're using the bundled system OpenSSL, you can't turn this behavior off: <https://hynek.me/articles/apple-openssl-verification-surprises/>.  Although we may eventually ship a mitigation for this vulnerability in Twisted, so probably best not to rely on that long-term :).

The bad news is that, no, we really had two use-cases in mind here; either:

your software is trusting the trust cartel as specified by the operating system vendor and/or the user, and your software is opting out of any trust configuration, or
your software has a specific understanding of its trust root and is specifying it explicitly, because it knows who it expects the peer to be signed by

So while your use-case sort of makes sense to me, it didn't come up in the last round of SSL enhancements and there's no straightforward way to go about this.

However, it should nevertheless be possible to do it without delving into the private API.

If you write your own IOpenSSLClientConnectionCreator, like this:

from twisted.internet.interfaces import IOpenSSLClientConnectionCreator
from twisted.python.components import proxyForInterface

class AddExtraTrustRoots(proxyForInterface(IOpenSSLClientConnectionCreator)):
    def __init__(self, extraTrustRoots, original):
        self._extraTrustRoots = extraTrustRoots
        super(AddExtraTrustRoots, self).__init__(original)


    def clientConnectionForTLS(self, tlsProtocol):
        connection = (super(AddExtraTrustRoots, self)
                      .clientConnectionForTLS(tlsProtocol))
        cert_store = connection.get_context().get_cert_store()
        for cert in self._extraTrustRoots:
            cert_store.add_cert(cert)
        return connection

you can delegate to the pyOpenSSL API for manipulating the trust settings of the connection, although Twisted will not provide a high-level wrapper for this.

You can then use the above wrapper like:

options = AddExtraTrustRoots([OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, "..."), ...], optionsForClientTLS(u"google.com"))

I haven't tested this, let me know if I've overlooked something terrible :).

> Another related concept that was not clear to me is how one might specify the SSL method (e.g. SSLv23_METHOD, SSLv3_METHOD, etc.) when making the request. Is there some recommended way to pass options to indicate the SSL method that ought to be used?

The default configuration allows for TLSv1.0, TLSv1.1, and TLSv1.2 (insofar as those versions are supported by your OpenSSL).  Do you really, really, really need to support worse protocol versions than that?

You don't actually want to change the "method", as "method" is a bizarre fiction of the OpenSSL API and is not actually how the protocol works; SSLv23_METHOD is the only "method" that allows protocol version negotiation, so you always want to start there and then set/unset the appropriate OP_NO_* options for the protocol versions you want to exclude.

This is all pretty tedious and gross so if you're sure you want to do it I will describe how in the next reply :).

> Any guidance would be appreciated.

I hope that this was sufficient!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-web/attachments/20141007/b5f60367/attachment.html>

From exarkun at twistedmatrix.com  Wed Oct  8 13:23:41 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 08 Oct 2014 19:23:41 -0000
Subject: [Twisted-web] Boston Area Twisted Sprint
Message-ID: <20141008192341.17800.2053172312.divmod.xquotient.1235@top>

Hello all,

I'm happy to invite you to a Twisted sprint on Saturday, November 1st
in Cambridge, Massachusetts.  ClusterHQ will be hosting up to twenty
(20) Twisted sprinters at the Cambridge Innovation Center ("Coronet
City" room) in Kendall Square from 10AM until 11PM.  The sprint topics
are attendee choice - hacking on any part of Twisted is welcome.  A
large part of the ClusterHQ team will be taking part in the sprint.

ClusterHQ is developing Flocker, a data management tool for use with
Docker written in Python and based on Twisted.  Follow us on Github:

    https://github.com/clusterhq/flocker

ClusterHQ will provide lunch and dinner (something like delivery
pizza, comment on the meetup page if you'd like to suggest
something!).

Find details and chat about sprint topics at the Boston Twisted Python
meetup page:

    http://www.meetup.com/Boston-Twisted-Python/

Early birds, feel free to contact me off-list about meeting up for 
coffee at
around 9AM before the sprint starts.

Space at CIC is limited.  Please RSVP on the Meetup page!

See you there,
Jean-Paul


From wanghe at gsrtvu.cn  Wed Oct  8 12:42:15 2014
From: wanghe at gsrtvu.cn (=?GBK?B?uMrL4LXntPM=?=)
Date: Thu, 09 Oct 2014 02:42:15 +0800
Subject: [Twisted-web] Auto-Re:  Boston Area Twisted Sprint
Message-ID: <141009024215ea3cada6617d64d7ca58aa62150f0712@gsrtvu.cn>

????????!

