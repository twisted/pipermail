From dominic.fox at gmail.com  Thu Apr  8 15:47:34 2010
From: dominic.fox at gmail.com (Dominic Fox)
Date: Thu, 8 Apr 2010 12:47:34 -0700 (PDT)
Subject: [Twisted-web] Invitation to connect on LinkedIn
Message-ID: <1157919990.1411026.1270756054918.JavaMail.app@ech3-cdn13.prod>

LinkedIn
------------Dominic Fox requested to add you as a connection on LinkedIn:
------------------------------------------

Cosimo,

I'd like to add you to my professional network on LinkedIn.

- Dominic

Accept invitation from Dominic Fox
http://www.linkedin.com/e/4n7A7PsxkFDd5rSefp5q2Sv6qHQ8YrSefp5q2SqEBLYJ/blk/I1951599138_2/1BpC5vrmRLoRZcjkkZt5YCpnlOt3RApnhMpmdzgmhxrSNBszYOnPwPcjAVdj4Rej59bSFWokYSumkTbPgMcjATdz0Ncz4LrCBxbOYWrSlI/EML_comm_afe/

View invitation from Dominic Fox
http://www.linkedin.com/e/4n7A7PsxkFDd5rSefp5q2Sv6qHQ8YrSefp5q2SqEBLYJ/blk/I1951599138_2/39ve3cNejARcjkVckALqnpPbOYWrSlI/svi/

------------------------------------------

Why might connecting with Dominic Fox be a good idea?

Dominic Fox's connections could be useful to you:
After accepting Dominic Fox's invitation, check Dominic Fox's connections to see who else you may know and who you might want an introduction to. Building these connections can create opportunities in the future.

 
------
(c) 2010, LinkedIn Corporation
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20100408/5896499c/attachment.htm 

From manlio_perillo at libero.it  Fri Apr  9 06:32:42 2010
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 09 Apr 2010 12:32:42 +0200
Subject: [Twisted-web] asynchronous WSGI implementation
Message-ID: <4BBF024A.1070300@libero.it>

Hi.

I have started to write an asynchronous WSGI implementation for
Twisted Web.

The code is available from a Mercurial repository:
http://hg.mperillo.ath.cx/twisted/twsgi/

The WSGI application is executed in the main Twisted thread, and the
application will be able to directly use Twisted features.

The reason I'm doing this is because I have written a WSGI
implementation for Nginx:
http://hg.mperillo.ath.cx/nginx/ngx_http_wsgi_module

and I would like to have a *similar* implementation written in pure
Python, for testing purpose.


I have some questions:

* What's the use of

     __metaclass__ = type

   in twisted.web.wsgi ?

* Is request.content always buffered (in memory or temporary file)?

* In my ngx_http_wsgi_module, when the yielded string can not be sent to
  the client (because OS buffer is full), I suspend the execution of the
  application, and resume it when the socket is ready.

  I want to do the same with Twisted, and the way to go is to be a
  push producer.

  However I don't know how to implement and use the IPushProducer
  interface for _WSGIResponse.


By the way: it seems that the WSGI implementation in Twisted Web has
some bugs:

* close method of the application iterator is not called in case of
  errors

* _sendResponseHeaders does not check if start_response has been called



Thanks  Manlio


From listsin at integrateddevcorp.com  Fri Apr  9 06:59:28 2010
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Fri, 9 Apr 2010 06:59:28 -0400
Subject: [Twisted-web] asynchronous WSGI implementation
In-Reply-To: <4BBF024A.1070300@libero.it>
References: <4BBF024A.1070300@libero.it>
Message-ID: <12BFBDC5-08E8-4D2D-8CAC-99522D4D0C68@integrateddevcorp.com>


On Apr 9, 2010, at 6:32 AM, Manlio Perillo wrote:

> Hi.
> 
> I have started to write an asynchronous WSGI implementation for
> Twisted Web.
> 
> The code is available from a Mercurial repository:
> http://hg.mperillo.ath.cx/twisted/twsgi/
> 
> The WSGI application is executed in the main Twisted thread, and the
> application will be able to directly use Twisted features.
> 
> The reason I'm doing this is because I have written a WSGI
> implementation for Nginx:
> http://hg.mperillo.ath.cx/nginx/ngx_http_wsgi_module

Maybe put on BitBucket?  It'd sure be easier to patch/submit pull requests/file tickets on a public repo.

> 
> and I would like to have a *similar* implementation written in pure
> Python, for testing purpose.

Will these share, or be able to use, the same demo/test code?  I'd love to have the option to use Twisted from a WSGI app.  

Have you resolved the issues you brought up and have been discussing with PJE over on web-sig?  Which WSGI are you supporting? 

This seems like a different thing than the greenlet/mako thing you were discussing over there.

> By the way: it seems that the WSGI implementation in Twisted Web has
> some bugs:
> 
> * close method of the application iterator is not called in case of
>  errors
> 
> * _sendResponseHeaders does not check if start_response has been called

Before someone else says it... please file bugs (helpfully with test cases) at twistedmatrix.com/trac.

S



From manlio_perillo at libero.it  Fri Apr  9 07:20:10 2010
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 09 Apr 2010 13:20:10 +0200
Subject: [Twisted-web] asynchronous WSGI implementation
In-Reply-To: <12BFBDC5-08E8-4D2D-8CAC-99522D4D0C68@integrateddevcorp.com>
References: <4BBF024A.1070300@libero.it>
	<12BFBDC5-08E8-4D2D-8CAC-99522D4D0C68@integrateddevcorp.com>
Message-ID: <4BBF0D6A.5090309@libero.it>

Steve Steiner (listsin) ha scritto:
> On Apr 9, 2010, at 6:32 AM, Manlio Perillo wrote:
> 
>> Hi.
>>
>> I have started to write an asynchronous WSGI implementation for
>> Twisted Web.
>>
>> The code is available from a Mercurial repository:
>> http://hg.mperillo.ath.cx/twisted/twsgi/
>>
>> The WSGI application is executed in the main Twisted thread, and the
>> application will be able to directly use Twisted features.
>>
>> The reason I'm doing this is because I have written a WSGI
>> implementation for Nginx:
>> http://hg.mperillo.ath.cx/nginx/ngx_http_wsgi_module
> 
> Maybe put on BitBucket?  It'd sure be easier to patch/submit pull requests/file tickets on a public repo.
> 

I will think about it.
I don't have experience with BitBucket.  Is the issue tracker good?


>> and I would like to have a *similar* implementation written in pure
>> Python, for testing purpose.
> 
> Will these share, or be able to use, the same demo/test code? 

Yes.

The purpose is to have a Twisted and Nginx implementations with the same
features.

> I'd love to have the option to use Twisted from a WSGI app.  
> 

This will be possible with twsgi.
However please note that I plan to use it for testing purpose only, and
not in production (at least in the near future).

> Have you resolved the issues you brought up and have been discussing with PJE over on web-sig?  Which WSGI are you supporting? 
> 

I will implement WSGI 1.0.

Another reason I'm writing twsgi, is that it will be more easy to
discuss about WSGI issues, having a pure Python implementation.

> This seems like a different thing than the greenlet/mako thing you were discussing over there.
> 

The core is the same.
The WSGI implementation *must* support suspend/resume extension.

The geenlet middleware will use this extension to implement coroutine
support over a simple asynchronous WSGI implementation.

By "simple" I mean that greenlets are not used inside WSGI
implementation (since greenlets can not be used in my
ngx_http_wsgi_module, if I'm not wrong).

greenlets are not required, but without coroutines applications will be
a mess, due to generator usage.


>> By the way: it seems that the WSGI implementation in Twisted Web has
>> some bugs:
>>
>> * close method of the application iterator is not called in case of
>>  errors
>>
>> * _sendResponseHeaders does not check if start_response has been called
> 
> Before someone else says it... please file bugs (helpfully with test cases) at twistedmatrix.com/trac.
> 

Of course.
But before filling a bug report, I wanted a confirmation.


Regards  Manlio


From ssteinerx at gmail.com  Fri Apr  9 07:36:43 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 9 Apr 2010 07:36:43 -0400
Subject: [Twisted-web] asynchronous WSGI implementation
In-Reply-To: <4BBF0D6A.5090309@libero.it>
References: <4BBF024A.1070300@libero.it>
	<12BFBDC5-08E8-4D2D-8CAC-99522D4D0C68@integrateddevcorp.com>
	<4BBF0D6A.5090309@libero.it>
Message-ID: <6AF34803-9077-4AC2-ABC6-F4C53C722B7B@gmail.com>

On Apr 9, 2010, at 7:20 AM, Manlio Perillo wrote:

> Steve Steiner (listsin) ha scritto:

>> Maybe put on BitBucket?  It'd sure be easier to patch/submit pull requests/file tickets on a public repo.
>> 
> 
> I will think about it.
> I don't have experience with BitBucket.  Is the issue tracker good?

It's more than good enough and free.


>>> and I would like to have a *similar* implementation written in pure
>>> Python, for testing purpose.
>> 
>> Will these share, or be able to use, the same demo/test code? 
> 
> Yes.
> 
> The purpose is to have a Twisted and Nginx implementations with the same
> features.

Cool.


>> I'd love to have the option to use Twisted from a WSGI app.  
>> 
> This will be possible with twsgi.
> However please note that I plan to use it for testing purpose only, and
> not in production (at least in the near future).

The Twisted version for testing only, or both versions for testing only?

>> Have you resolved the issues you brought up and have been discussing with PJE over on web-sig?  Which WSGI are you supporting? 
>> 
> I will implement WSGI 1.0.
> 
> Another reason I'm writing twsgi, is that it will be more easy to
> discuss about WSGI issues, having a pure Python implementation.
> 
>> This seems like a different thing than the greenlet/mako thing you were discussing over there.
>> 
> 
> The core is the same.  The WSGI implementation *must* support suspend/resume extension.
> 
> The geenlet middleware will use this extension to implement coroutine
> support over a simple asynchronous WSGI implementation.
> 
> By "simple" I mean that greenlets are not used inside WSGI
> implementation (since greenlets can not be used in my
> ngx_http_wsgi_module, if I'm not wrong).
> 
> greenlets are not required, but without coroutines applications will be
> a mess, due to generator usage.

I guess I'm not real clear on what you're saying here.

>>> By the way: it seems that the WSGI implementation in Twisted Web has
>>> some bugs:
>>> 
>>> * close method of the application iterator is not called in case of
>>> errors
>>> 
>>> * _sendResponseHeaders does not check if start_response has been called
>> 
>> Before someone else says it... please file bugs (helpfully with test cases) at twistedmatrix.com/trac.
>> 
> 
> Of course.
> But before filling a bug report, I wanted a confirmation.

If someone can run the unit-test you provide, it's pretty easy to confirm.

S



From exarkun at twistedmatrix.com  Fri Apr  9 08:59:50 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 09 Apr 2010 12:59:50 -0000
Subject: [Twisted-web] asynchronous WSGI implementation
In-Reply-To: <4BBF024A.1070300@libero.it>
References: <4BBF024A.1070300@libero.it>
Message-ID: <20100409125950.2779.837503704.divmod.xquotient.184@localhost.localdomain>

On 10:32 am, manlio_perillo at libero.it wrote:
>Hi.
>
>I have started to write an asynchronous WSGI implementation for
>Twisted Web.
>
>The code is available from a Mercurial repository:
>http://hg.mperillo.ath.cx/twisted/twsgi/
>
>The WSGI application is executed in the main Twisted thread, and the
>application will be able to directly use Twisted features.
>
>The reason I'm doing this is because I have written a WSGI
>implementation for Nginx:
>http://hg.mperillo.ath.cx/nginx/ngx_http_wsgi_module
>
>and I would like to have a *similar* implementation written in pure
>Python, for testing purpose.
>
>
>I have some questions:
>
>* What's the use of
>
>     __metaclass__ = type
>
>   in twisted.web.wsgi ?

This makes all classes without a base class defined in the module new- 
style.
>* Is request.content always buffered (in memory or temporary file)?

It's always buffered, in memory if it is small, in a temporary file if 
it is large (same rules as for a normal request in Twisted Web).  Once 
#288 is resolved, it will probably make sense to stream the request body 
instead.
>* In my ngx_http_wsgi_module, when the yielded string can not be sent 
>to
>  the client (because OS buffer is full), I suspend the execution of the
>  application, and resume it when the socket is ready.
>
>  I want to do the same with Twisted, and the way to go is to be a
>  push producer.
>
>  However I don't know how to implement and use the IPushProducer
>  interface for _WSGIResponse.

The request object has a register producer method.  What else are you 
having trouble with?
>
>By the way: it seems that the WSGI implementation in Twisted Web has
>some bugs:
>
>* close method of the application iterator is not called in case of
>  errors

This looks like a bug that should be fixed.
>* _sendResponseHeaders does not check if start_response has been called

What are the practical consequences of this?

Jean-Paul


From manlio_perillo at libero.it  Fri Apr  9 10:33:22 2010
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 09 Apr 2010 16:33:22 +0200
Subject: [Twisted-web] asynchronous WSGI implementation
In-Reply-To: <20100409125950.2779.837503704.divmod.xquotient.184@localhost.localdomain>
References: <4BBF024A.1070300@libero.it>
	<20100409125950.2779.837503704.divmod.xquotient.184@localhost.localdomain>
Message-ID: <4BBF3AB2.2010601@libero.it>

exarkun at twistedmatrix.com ha scritto:
> On 10:32 am, manlio_perillo at libero.it wrote:
>> Hi.
>>
>> I have started to write an asynchronous WSGI implementation for
>> Twisted Web.
>>
> [...]
>>
>> I have some questions:
>>
>> * What's the use of
>>
>>     __metaclass__ = type
>>
>>   in twisted.web.wsgi ?
> 
> This makes all classes without a base class defined in the module new-
> style.

Ok.

Then I assume it is safe to remove it, and derive every class from object.

>> * Is request.content always buffered (in memory or temporary file)?
> 
> It's always buffered, in memory if it is small, in a temporary file if
> it is large (same rules as for a normal request in Twisted Web).  

Good.
It is the same with Nginx.

> [...]

>> * In my ngx_http_wsgi_module, when the yielded string can not be sent to
>>  the client (because OS buffer is full), I suspend the execution of the
>>  application, and resume it when the socket is ready.
>>
>>  I want to do the same with Twisted, and the way to go is to be a
>>  push producer.
>>
>>  However I don't know how to implement and use the IPushProducer
>>  interface for _WSGIResponse.
> 
> The request object has a register producer method.  What else are you
> having trouble with?

I was just not sure if I just have to call registerProducer.

I have implemented it:
http://hg.mperillo.ath.cx/twisted/twsgi/rev/22738dce8721

Now the WSGI implementation is complete.

Still not sure if I should call unregisterProducer in the case
notifyFinish callback is called.
It seems that it is not required.


>>
>> By the way: it seems that the WSGI implementation in Twisted Web has
>> some bugs:
>>
>> * close method of the application iterator is not called in case of
>>  errors
> 
> This looks like a bug that should be fixed.

I will open a ticket, unless someone else already opened it.

>> * _sendResponseHeaders does not check if start_response has been called
> 
> What are the practical consequences of this?
> 

That in case WSGI application does not call start_response,
_sendResponseHeaders will fail with an AttributeError, since self.status
is not available.


Thanks  Manlio


From manlio_perillo at libero.it  Fri Apr  9 10:55:29 2010
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 09 Apr 2010 16:55:29 +0200
Subject: [Twisted-web] asynchronous WSGI implementation
In-Reply-To: <6AF34803-9077-4AC2-ABC6-F4C53C722B7B@gmail.com>
References: <4BBF024A.1070300@libero.it>	<12BFBDC5-08E8-4D2D-8CAC-99522D4D0C68@integrateddevcorp.com>	<4BBF0D6A.5090309@libero.it>
	<6AF34803-9077-4AC2-ABC6-F4C53C722B7B@gmail.com>
Message-ID: <4BBF3FE1.1090402@libero.it>

ssteinerX at gmail.com ha scritto:
> On Apr 9, 2010, at 7:20 AM, Manlio Perillo wrote:
> 
>> Steve Steiner (listsin) ha scritto:
> 
>>> Maybe put on BitBucket?  It'd sure be easier to patch/submit pull requests/file tickets on a public repo.
>>>
>> I will think about it.
>> I don't have experience with BitBucket.  Is the issue tracker good?
> 
> It's more than good enough and free.
> 

Well, for free I should be able to get some shared hosting with Mailman
and Trac support.

> [...]
>> However please note that I plan to use it for testing purpose only, and
>> not in production (at least in the near future).
> 
> The Twisted version for testing only, or both versions for testing only?
> 

Twisted version.

> [...]
>> The geenlet middleware will use this extension to implement coroutine
>> support over a simple asynchronous WSGI implementation.
>>
>> By "simple" I mean that greenlets are not used inside WSGI
>> implementation (since greenlets can not be used in my
>> ngx_http_wsgi_module, if I'm not wrong).
>>
>> greenlets are not required, but without coroutines applications will be
>> a mess, due to generator usage.
> 
> I guess I'm not real clear on what you're saying here.
> 

This is not simple to explain, for me.

It is the reason why I'm trying writing code that will make more easy to
document what I'm trying to do ;-)

> [...]


Manlio


From manlio_perillo at libero.it  Fri Apr  9 13:30:30 2010
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 09 Apr 2010 19:30:30 +0200
Subject: [Twisted-web] asynchronous WSGI implementation
In-Reply-To: <4BBF024A.1070300@libero.it>
References: <4BBF024A.1070300@libero.it>
Message-ID: <4BBF6436.3050404@libero.it>

Manlio Perillo ha scritto:
> Hi.
> 
> I have started to write an asynchronous WSGI implementation for
> Twisted Web.
> 
> The code is available from a Mercurial repository:
> http://hg.mperillo.ath.cx/twisted/twsgi/
> 
> [...]
> I have some questions:
> 

Now that base features are implemented I would like to ask some more
questions.

* I choose, as project name twsgi.

  However I found that this name is also used in a Twisted sandbox:

http://github.com/Deepwalker/deepwalker_sandbox/blob/3786de5d77bd68872306e5f6469d77b64243377e/twsgi.py

  Should I change the name?

* Suppose that a client connected to WSGI serve is very slow.
  In this case, once the server socket buffer is full, WSGI producer
  will not be resumed.

  Is this case handled by HTTP server?

  With Nginx implementation I set a timer, whose value is specified in
  send_timeout configuration parameter
  http://wiki.nginx.org/NginxHttpCoreModule#send_timeout

  It timer expires, I return "408 Request Time-out"

  From source code, I see that timeout in twisted.web, is specified in
    request.site.timeOut

* Do you have interest of include this implementation in twisted.web?

> [...]


Thanks   Manlio


From bresnaha at mcs.anl.gov  Sun Apr 25 23:25:15 2010
From: bresnaha at mcs.anl.gov (John Bresnahan)
Date: Sun, 25 Apr 2010 17:25:15 -1000
Subject: [Twisted-web] Large File Upload
Message-ID: <4BD5079B.6020909@mcs.anl.gov>

I am creating a service using twisted web that allows clients to upload files using HTTP put.

By reading through issue 288 I understand that the problems I am seeing are have been seen before
and are outstanding issues.  I have a solution that seems to work for me (I have little concern for
POST thus my issue is mitigated) but I was hoping to get some community comment on it.

My objective is 1) to authorize clients *before* they upload a large file to temporary storage, and
2) decrease latency and increase throughput by eliminating the copy to temp files.

I have achieved this by subclassing http.HTTPChannel and overloading allHeadersReceived() in the
following way:

class MyHTTPChannel(http.HTTPChannel):

    def allHeadersReceived(self):
        http.HTTPChannel.allHeadersReceived(self)

	... parse headers for access tokens

	if not access_granted:
             self.transport.write(<http error message>)
             self.transport.loseConnection()

        if self._command != "PUT":
            return

        req = self.requests[-1]
        req.content = <create my own file-like object>

Then I create a site object:

class MySite(server.Site):
    protocol = MyHTTPChannel

Thus far this seems to work nicely for me, but my knowledge of the twisted internals is limited.
Does this seem at all reasonable?

Thanks,

John


From exarkun at twistedmatrix.com  Mon Apr 26 12:32:51 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 26 Apr 2010 16:32:51 -0000
Subject: [Twisted-web] Large File Upload
In-Reply-To: <4BD5079B.6020909@mcs.anl.gov>
References: <4BD5079B.6020909@mcs.anl.gov>
Message-ID: <20100426163251.1984.407831574.divmod.xquotient.24@localhost.localdomain>

On 03:25 am, bresnaha at mcs.anl.gov wrote:
>I am creating a service using twisted web that allows clients to upload 
>files using HTTP put.
>
>By reading through issue 288 I understand that the problems I am seeing 
>are have been seen before
>and are outstanding issues.  I have a solution that seems to work for 
>me (I have little concern for
>POST thus my issue is mitigated) but I was hoping to get some community 
>comment on it.
>
>My objective is 1) to authorize clients *before* they upload a large 
>file to temporary storage, and
>2) decrease latency and increase throughput by eliminating the copy to 
>temp files.
>
>I have achieved this by subclassing http.HTTPChannel and overloading 
>allHeadersReceived() in the
>following way:
>
>class MyHTTPChannel(http.HTTPChannel):
>
>    def allHeadersReceived(self):
>        http.HTTPChannel.allHeadersReceived(self)
>
>         ... parse headers for access tokens
>
>         if not access_granted:
>             self.transport.write(<http error message>)
>             self.transport.loseConnection()
>
>        if self._command != "PUT":
>            return
>
>        req = self.requests[-1]
>        req.content = <create my own file-like object>
>
>Then I create a site object:
>
>class MySite(server.Site):
>    protocol = MyHTTPChannel
>
>Thus far this seems to work nicely for me, but my knowledge of the 
>twisted internals is limited.
>Does this seem at all reasonable?

Until #288 is resolved, this seems like as good an approach as any. 
Note that "_command" is a private attribute though, and I wouldn't feel 
bad changing it in a future version of Twisted.

Jean-Paul


From wesleycmathew at gmail.com  Thu Apr 29 07:26:41 2010
From: wesleycmathew at gmail.com (wesley mathew)
Date: Thu, 29 Apr 2010 15:26:41 +0400
Subject: [Twisted-web] Installation of Twisted Web 0.5
Message-ID: <y2x7d3fa2531004290426g512a9cc0y84d2b8140673c79d@mail.gmail.com>

Dear Sir

Subject : Installation of Twisted Web 0.5

I have to install NetWorkSpace Server (nwsserver-1.5.2). It need some other
software supports.
So I installed python 2.6.5 and Twisted 10.0.0 for python 2.6
But I Could not find exact .exe file of the Twisted Web 0.5.
Could you please help me to get the source of Twisted Web 0.5.

Thanks  in advance.

Kind Regards
W. Mathew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20100429/e8544666/attachment.htm 

From exarkun at twistedmatrix.com  Thu Apr 29 09:05:19 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 29 Apr 2010 13:05:19 -0000
Subject: [Twisted-web] Installation of Twisted Web 0.5
In-Reply-To: <y2x7d3fa2531004290426g512a9cc0y84d2b8140673c79d@mail.gmail.com>
References: <y2x7d3fa2531004290426g512a9cc0y84d2b8140673c79d@mail.gmail.com>
Message-ID: <20100429130519.2376.262787224.divmod.xquotient.0@localhost.localdomain>

On 11:26 am, wesleycmathew at gmail.com wrote:
>Dear Sir
>
>Subject : Installation of Twisted Web 0.5
>
>I have to install NetWorkSpace Server (nwsserver-1.5.2). It need some 
>other
>software supports.
>So I installed python 2.6.5 and Twisted 10.0.0 for python 2.6
>But I Could not find exact .exe file of the Twisted Web 0.5.
>Could you please help me to get the source of Twisted Web 0.5.

Twisted Web is part of Twisted.  If you installed Twisted 10.0, then you 
should have Twisted Web installed already.

Jean-Paul


From wesleycmathew at gmail.com  Thu Apr 29 09:18:49 2010
From: wesleycmathew at gmail.com (wesley mathew)
Date: Thu, 29 Apr 2010 17:18:49 +0400
Subject: [Twisted-web] Installation of Twisted Web 0.5
In-Reply-To: <20100429130519.2376.262787224.divmod.xquotient.0@localhost.localdomain>
References: <y2x7d3fa2531004290426g512a9cc0y84d2b8140673c79d@mail.gmail.com>
	<20100429130519.2376.262787224.divmod.xquotient.0@localhost.localdomain>
Message-ID: <l2n7d3fa2531004290618tead82008jfeca99780d321a40@mail.gmail.com>

Thank you very much for your reply.

On Thu, Apr 29, 2010 at 5:05 PM, <exarkun at twistedmatrix.com> wrote:

> On 11:26 am, wesleycmathew at gmail.com wrote:
> >Dear Sir
> >
> >Subject : Installation of Twisted Web 0.5
> >
> >I have to install NetWorkSpace Server (nwsserver-1.5.2). It need some
> >other
> >software supports.
> >So I installed python 2.6.5 and Twisted 10.0.0 for python 2.6
> >But I Could not find exact .exe file of the Twisted Web 0.5.
> >Could you please help me to get the source of Twisted Web 0.5.
>
> Twisted Web is part of Twisted.  If you installed Twisted 10.0, then you
> should have Twisted Web installed already.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>



-- 
Wesley C Mathew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20100429/f1582af4/attachment.htm 

