From bernat at debian.org  Sun Aug  1 13:11:17 2010
From: bernat at debian.org (Vincent Bernat)
Date: Sun, 01 Aug 2010 19:11:17 +0200
Subject: [Twisted-web] Bug#591198: nevow: does not build swf files from
	source
In-Reply-To: <201008010001.10633.geissert@debian.org> (Raphael Geissert's
	message of "Sun, 1 Aug 2010 00:01:09 -0400")
References: <201008010001.10633.geissert@debian.org>
Message-ID: <m3mxt6tg0a.fsf@neo.luffy.cx>

A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20100801/de2ab809/attachment.pgp 

From mithrandi at mithrandi.net  Sun Aug  1 14:45:38 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 1 Aug 2010 20:45:38 +0200
Subject: [Twisted-web] Bug#591198: nevow: does not build swf files from
	source
In-Reply-To: <m3mxt6tg0a.fsf@neo.luffy.cx>
References: <201008010001.10633.geissert@debian.org>
	<m3mxt6tg0a.fsf@neo.luffy.cx>
Message-ID: <AANLkTin6tx-vAnd=xKP4BmmN3dMqQTEpWKsuSHXhgQdM@mail.gmail.com>

On Sun, Aug 1, 2010 at 7:11 PM, Vincent Bernat <bernat at debian.org> wrote:
> I ?have received ?a ?bug report ?against ?nevow package ?in Debian. ?The
> problem ?is ?that Canvas.swf ?is ?shipped ?without ?being compiled ?from
> source. ?It ?seems ?that ?the ?sources (canvas.fla ?and ?canvas.as) ?are
> present. Do anyone if there are opensource tools to turn those two files
> into swf?

It probably makes more sense to just remove these from Nevow (in the
Debian package, at least, if not upstream); they're ancient,
unmaintained, and probably unused.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From bernat at debian.org  Sun Aug  1 16:05:24 2010
From: bernat at debian.org (Vincent Bernat)
Date: Sun, 01 Aug 2010 22:05:24 +0200
Subject: [Twisted-web] Bug#591198: Bug#591198: nevow: does not build swf
	files from source
In-Reply-To: <AANLkTin6tx-vAnd=xKP4BmmN3dMqQTEpWKsuSHXhgQdM@mail.gmail.com>
	(Tristan Seligmann's message of "Sun, 1 Aug 2010 20:45:38 +0200")
References: <201008010001.10633.geissert@debian.org>
	<m3mxt6tg0a.fsf@neo.luffy.cx>
	<AANLkTin6tx-vAnd=xKP4BmmN3dMqQTEpWKsuSHXhgQdM@mail.gmail.com>
Message-ID: <m3bp9mt7y3.fsf@neo.luffy.cx>

OoO Pendant  le journal t?l?vis? du  dimanche 01 ao?t  2010, vers 20:45,
Tristan Seligmann <mithrandi at mithrandi.net> disait?:

>> I ?have received ?a ?bug report ?against ?nevow package ?in Debian. ?The
>> problem ?is ?that Canvas.swf ?is ?shipped ?without ?being compiled ?from
>> source. ?It ?seems ?that ?the ?sources (canvas.fla ?and ?canvas.as) ?are
>> present. Do anyone if there are opensource tools to turn those two files
>> into swf?

> It probably makes more sense to just remove these from Nevow (in the
> Debian package, at least, if not upstream); they're ancient,
> unmaintained, and probably unused.

Thanks for your input!
-- 
Make it clear before you make it faster.
            - The Elements of Programming Style (Kernighan & Plauger)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20100801/473cd296/attachment.pgp 

From exarkun at twistedmatrix.com  Sun Aug  1 19:47:58 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 01 Aug 2010 23:47:58 -0000
Subject: [Twisted-web] Bug#591198: nevow: does not build swf files
	from	source
In-Reply-To: <AANLkTin6tx-vAnd=xKP4BmmN3dMqQTEpWKsuSHXhgQdM@mail.gmail.com>
References: <201008010001.10633.geissert@debian.org>
	<m3mxt6tg0a.fsf@neo.luffy.cx>
	<AANLkTin6tx-vAnd=xKP4BmmN3dMqQTEpWKsuSHXhgQdM@mail.gmail.com>
Message-ID: <20100801234758.2271.2088050190.divmod.xquotient.0@localhost.localdomain>

On 06:45 pm, mithrandi at mithrandi.net wrote:
>On Sun, Aug 1, 2010 at 7:11 PM, Vincent Bernat <bernat at debian.org> 
>wrote:
>>I ?have received ?a ?bug report ?against ?nevow package ?in Debian. 
>>The
>>problem ?is ?that Canvas.swf ?is ?shipped ?without ?being compiled 
>>from
>>source. ?It ?seems ?that ?the ?sources (canvas.fla ?and ?canvas.as) 
>>are
>>present. Do anyone if there are opensource tools to turn those two 
>>files
>>into swf?
>
>It probably makes more sense to just remove these from Nevow (in the
>Debian package, at least, if not upstream); they're ancient,
>unmaintained, and probably unused.

+1 for upstream removal.
>--
>mithrandi, i Ainil en-Balandor, a faer Ambar
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From sergei.vokdin at yandex.ru  Mon Aug  9 07:34:34 2010
From: sergei.vokdin at yandex.ru (Vokdin Sergei)
Date: Mon, 09 Aug 2010 13:34:34 +0200
Subject: [Twisted-web] Gzipped Response with web.client.Agent
Message-ID: <237431281353674@web132.yandex.ru>

Hello,

I've putted together examples from the web (see below) to replace getPage with web.client.Agent and it works fine. Now, I'd like to get gzipped response, but I can't get gunzipping to work before returning result. 

Thanks for help!

class StringGzipReceiver(Protocol):
    def __init__(self):
        self.string = None
        self.deferred = defer.Deferred()

    def dataReceived(self, bytes):
        print "dataReceived"
        print type(bytes)
        if self.string:
            self.string += bytes
        else:
            self.string = bytes

    def connectionLost(self, reason):
        if reason.check(ResponseDone) or reason.check(PotentialDataLoss):
            gzipper = gzip.GzipFile(fileobj=self.string)
            gz = gzipper.read()
            result = unicode(gz, 'UTF-8')
            self.deferred.callback(result)
        else:
            self.deferred.errback(reason)


class StringReceiver(Protocol):
    def __init__(self):
        self.string_io = codecs.getwriter('utf_8')(StringIO())
        self.deferred = defer.Deferred()

    def dataReceived(self, bytes):
        self.string_io.write(bytes)

    def connectionLost(self, reason):
        if reason.check(ResponseDone) or reason.check(PotentialDataLoss):
            self.deferred.callback(self.string_io.getvalue())
        else:
            self.deferred.errback(reason)


class StringProducer(object):
    implements(IBodyProducer)

    def __init__(self, body):
        self.body = body
        self.length = len(body)

    def startProducing(self, consumer):
        consumer.write(self.body)
        return succeed(None)

    def pauseProducing(self):
        pass

    def stopProducing(self):
        pass







def SearchHotelsByID():
    host = 'demo.com'
    postdata = 'some data'   
    headers = {
        'Host'              : [host],
        'Accept-Encoding'   : ['gzip']
        }

    def cbRequest(response):
        stringReceiver = StringGzipReceiver()
        response.deliverBody(stringReceiver)
        return stringReceiver.deferred

    def _noPage(failure):
        print "Error: %s" % failure.getErrorMessage()
        print failure.getTraceback()
        return failure

    agent = Agent(reactor)
    d = agent.request(
        'POST',
        url,
        headers=Headers(headers),
        bodyProducer=StringProducer(postdata)
        )
    d.addCallback(cbRequest)
    d.addErrback(_noPage)
    d.addBoth(finish)

    return d


From exarkun at twistedmatrix.com  Tue Aug 10 10:13:23 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 10 Aug 2010 14:13:23 -0000
Subject: [Twisted-web] Gzipped Response with web.client.Agent
In-Reply-To: <237431281353674@web132.yandex.ru>
References: <237431281353674@web132.yandex.ru>
Message-ID: <20100810141323.2470.670063666.divmod.xquotient.16@localhost.localdomain>

On 9 Aug, 11:34 am, sergei.vokdin at yandex.ru wrote:
>Hello,
>
>I've putted together examples from the web (see below) to replace 
>getPage with web.client.Agent and it works fine. Now, I'd like to get 
>gzipped response, but I can't get gunzipping to work before returning 
>result.
>
>Thanks for help!

What are you having trouble with?  Your code looks okay, more or less. 
If I were writing it, I'd try to make the gzip support more transparent, 
but the way you've done it seems like it should probably work.

A few simple things I notice that could cause problems, but won't 
necessarily...

  * Using repeated string concatenation to buffer the response is going 
to be extremely slow for responses of any significant size.

  * In general, there's no guarantee you'll be able to decode the un- 
gzipped bytes using utf-8.  You could easily have downloaded a gzipped 
TIFF image.

  * Similarly, there's no guarantee that the un-gzipping will succeed if 
you got a truncated response (represented by the PotentialDataLoss 
failure).

  * The server might have sent back un-gzipped contents.  You have to 
check one of the response headers to see if it's appropriate to do the 
decompression.

Jean-Paul
>class StringGzipReceiver(Protocol):
>    def __init__(self):
>        self.string = None
>        self.deferred = defer.Deferred()
>
>    def dataReceived(self, bytes):
>        print "dataReceived"
>        print type(bytes)
>        if self.string:
>            self.string += bytes
>        else:
>            self.string = bytes
>
>    def connectionLost(self, reason):
>        if reason.check(ResponseDone) or 
>reason.check(PotentialDataLoss):
>            gzipper = gzip.GzipFile(fileobj=self.string)
>            gz = gzipper.read()
>            result = unicode(gz, 'UTF-8')
>            self.deferred.callback(result)
>        else:
>            self.deferred.errback(reason)
>
>
>class StringReceiver(Protocol):
>    def __init__(self):
>        self.string_io = codecs.getwriter('utf_8')(StringIO())
>        self.deferred = defer.Deferred()
>
>    def dataReceived(self, bytes):
>        self.string_io.write(bytes)
>
>    def connectionLost(self, reason):
>        if reason.check(ResponseDone) or 
>reason.check(PotentialDataLoss):
>            self.deferred.callback(self.string_io.getvalue())
>        else:
>            self.deferred.errback(reason)
>
>
>class StringProducer(object):
>    implements(IBodyProducer)
>
>    def __init__(self, body):
>        self.body = body
>        self.length = len(body)
>
>    def startProducing(self, consumer):
>        consumer.write(self.body)
>        return succeed(None)
>
>    def pauseProducing(self):
>        pass
>
>    def stopProducing(self):
>        pass
>
>
>
>
>
>
>
>def SearchHotelsByID():
>    host = 'demo.com'
>    postdata = 'some data'
>    headers = {
>        'Host'              : [host],
>        'Accept-Encoding'   : ['gzip']
>        }
>
>    def cbRequest(response):
>        stringReceiver = StringGzipReceiver()
>        response.deliverBody(stringReceiver)
>        return stringReceiver.deferred
>
>    def _noPage(failure):
>        print "Error: %s" % failure.getErrorMessage()
>        print failure.getTraceback()
>        return failure
>
>    agent = Agent(reactor)
>    d = agent.request(
>        'POST',
>        url,
>        headers=Headers(headers),
>        bodyProducer=StringProducer(postdata)
>        )
>    d.addCallback(cbRequest)
>    d.addErrback(_noPage)
>    d.addBoth(finish)
>
>    return d
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From sergei.vokdin at yandex.ru  Wed Aug 11 06:31:23 2010
From: sergei.vokdin at yandex.ru (Vokdin Sergei)
Date: Wed, 11 Aug 2010 12:31:23 +0200
Subject: [Twisted-web] Gzipped Response with web.client.Agent
In-Reply-To: <20100810141323.2470.670063666.divmod.xquotient.16@localhost.localdomain>
References: <237431281353674@web132.yandex.ru>
	<20100810141323.2470.670063666.divmod.xquotient.16@localhost.localdomain>
Message-ID: <390721281522683@web125.yandex.ru>



10.08.10, 16:13, exarkun at twistedmatrix.com:

> On 9 Aug, 11:34 am, sergei.vokdin at yandex.ru wrote:
>  >Hello,
>  >
>  >I've putted together examples from the web (see below) to replace 
>  >getPage with web.client.Agent and it works fine. Now, I'd like to get 
>  >gzipped response, but I can't get gunzipping to work before returning 
>  >result.
>  >
>  >Thanks for help!
>  
>  What are you having trouble with?  Your code looks okay, more or less. 
>  If I were writing it, I'd try to make the gzip support more transparent, 
>  but the way you've done it seems like it should probably work.

Hi,

returned string should be wrapped into file object before passing to gzip module, that was the problem.

>  
>  A few simple things I notice that could cause problems, but won't 
>  necessarily...
>  
>    * Using repeated string concatenation to buffer the response is going 
>  to be extremely slow for responses of any significant size.

Nice catch, I'm forgetting this over and over again

>  
>    * In general, there's no guarantee you'll be able to decode the un- 
>  gzipped bytes using utf-8.  You could easily have downloaded a gzipped 
>  TIFF image.
>  
>    * Similarly, there's no guarantee that the un-gzipping will succeed if 
>  you got a truncated response (represented by the PotentialDataLoss 
>  failure).
>  
>    * The server might have sent back un-gzipped contents.  You have to 
>  check one of the response headers to see if it's appropriate to do the 
>  decompression.

Thanks, for hints. This was next step in implementation.


One issue I've still have is, how to set or implement timeout, so if remote host does not answer in some period of time, request would be cancelled.

Thanks a lot!


