From glumor at faza.ru  Sat Jul  1 07:45:08 2006
From: glumor at faza.ru (glumor@faza.ru)
Date: Sat Jul  1 07:45:32 2006
Subject: [Twisted-web] Visit this sites!
Message-ID: <E1Fweqp-0003gN-Gc@h2.proserv.net.ru>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060701/a46fd49b/attachment.htm
From glumor at faza.ru  Sat Jul  1 09:06:16 2006
From: glumor at faza.ru (glumor@faza.ru)
Date: Sat Jul  1 09:06:16 2006
Subject: [Twisted-web] Visit this sites!
Message-ID: <E1Fwg6y-0004q5-5l@pqc85.pqcservice.net>


Visit %3Cahref%3Dhttp%3A%2F%2Farbat.or.at%2Fadipex%2F%3Ehttp%3A%2F%2Farbat.or.at%2Fadipex%2F%3C%2Fa%3E%3Cahref%3Dhttp%3A%2F%2Farbat.or.at%2Fxanax%2F%3Ehttp%3A%2F%2Farbat.or.at%2Fxanax%2F%3C%2Fa%3E%3Cahref%3Dhttp%3A%2F%2Farbat.or.at%2Fphentermine%2F%3Ehttp%3A%2F%2Farbat.or.at%2Fphentermine%2F%3C%2Fa%3E%3Cahref%3Dhttp%3A%2F%2Farbat.or.at%2Fcialis%2F%3Ehttp%3A%2F%2Farbat.or.at%2Fcialis%2F%3C%2Fa%3E%3Cahref%3Dhttp%3A%2F%2Farbat.or.at%2Fviagra%2F%3Ehttp%3A%2F%2Farbat.or.at%2Fviagra%2F%3C%2Fa%3E

From p.mayers at imperial.ac.uk  Sat Jul  1 16:12:19 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat Jul  1 16:12:29 2006
Subject: [Twisted-web] Athena callRemove with str()
Message-ID: <44A6E533.6050406@imperial.ac.uk>

Is the behaviour that Athena won't permit a server-side callRemote to 
return a str() and mandates a unicode() intentional? If so, what is the 
rationale?

From exarkun at divmod.com  Sat Jul  1 16:20:16 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Jul  1 16:20:31 2006
Subject: [Twisted-web] Athena callRemote with str()
In-Reply-To: <44A6E533.6050406@imperial.ac.uk>
Message-ID: <20060701212016.29014.585032309.divmod.quotient.18279@ohm>

On Sat, 01 Jul 2006 22:12:19 +0100, Phil Mayers <p.mayers@imperial.ac.uk> wrote:
>Is the behaviour that Athena won't permit a server-side callRemote to return 
>a str() and mandates a unicode() intentional? If so, what is the rationale?

Yep.  JavaScript doesn't have a byte string type, only a character string
type.  Athena won't guess what kind of characters you want to result from
a Python str.

Jean-Paul

From p.mayers at imperial.ac.uk  Sat Jul  1 18:01:49 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat Jul  1 18:02:00 2006
Subject: [Twisted-web] Athena callRemote with str()
In-Reply-To: <20060701212016.29014.585032309.divmod.quotient.18279@ohm>
References: <20060701212016.29014.585032309.divmod.quotient.18279@ohm>
Message-ID: <44A6FEDD.4010508@imperial.ac.uk>

Jean-Paul Calderone wrote:
> On Sat, 01 Jul 2006 22:12:19 +0100, Phil Mayers 
> <p.mayers@imperial.ac.uk> wrote:
>> Is the behaviour that Athena won't permit a server-side callRemote to 
>> return a str() and mandates a unicode() intentional? If so, what is 
>> the rationale?
> 
> Yep.  JavaScript doesn't have a byte string type, only a character string
> type.  Athena won't guess what kind of characters you want to result from
> a Python str.

Hmm. I had not appreciated the wholly character-based nature of 
javascript strings. Thanks - I'll recast str() as unicode(). In case 
anyone is interested the specific thing I was passing was packed MAC and 
IP addresses, which of course are not unicode strings, for a host 
management database. I will have to unpack them to get unambiguous 
encodings :o(

On a related note, is there any particular reason that Nevow uses it's 
own json lib instead of $thebetter of the python json libs? Because at 
least one of them has support for pluggable mappings of types to 
serialisers - e.g. DateTime -> $thestringrep - allowing applications to 
be explicit and hook when sending complex types over the wire, but 
without having to do so in boilerplate each call.

Thinking about it some more, when operating in a Mantissa-like 
environment where multiple independent fragments from independent 
applications are running in a single page, the serialiser mappings would 
have to be per-fragment/application. Tricky.

From exarkun at divmod.com  Sat Jul  1 18:13:48 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Jul  1 18:13:49 2006
Subject: [Twisted-web] Athena callRemote with str()
In-Reply-To: <44A6FEDD.4010508@imperial.ac.uk>
Message-ID: <20060701231348.29014.517041147.divmod.quotient.18401@ohm>

On Sun, 02 Jul 2006 00:01:49 +0100, Phil Mayers <p.mayers@imperial.ac.uk> wrote:
>Jean-Paul Calderone wrote:
>>On Sat, 01 Jul 2006 22:12:19 +0100, Phil Mayers <p.mayers@imperial.ac.uk> 
>>wrote:
>>>Is the behaviour that Athena won't permit a server-side callRemote to 
>>>return a str() and mandates a unicode() intentional? If so, what is the 
>>>rationale?
>>
>>Yep.  JavaScript doesn't have a byte string type, only a character string
>>type.  Athena won't guess what kind of characters you want to result from
>>a Python str.
>
>Hmm. I had not appreciated the wholly character-based nature of javascript 
>strings. Thanks - I'll recast str() as unicode(). In case anyone is 
>interested the specific thing I was passing was packed MAC and IP addresses, 
>which of course are not unicode strings, for a host management database. I 
>will have to unpack them to get unambiguous encodings :o(
>
>On a related note, is there any particular reason that Nevow uses it's own 
>json lib instead of $thebetter of the python json libs? Because at least one 
>of them has support for pluggable mappings of types to serialisers - e.g. 
>DateTime -> $thestringrep - allowing applications to be explicit and hook 
>when sending complex types over the wire, but without having to do so in 
>boilerplate each call.

The historical explanation is that nevow's was written before most of the
others (the ones which predate it were unusably bad at the time).

The rest of the explanation is that JSON is not actually part of the
public API provided by Athena.  It's an implementation detail which may
well go away at some future point.  Specifically, I am currently
contemplating using a packed format for client -> server communication.
There aren't plans to replace JSON in server -> client messages yet, but
it could happen at some future point.

Jean-Paul

From terry at jon.es  Sun Jul  2 20:15:32 2006
From: terry at jon.es (Terry Jones)
Date: Sun Jul  2 20:15:39 2006
Subject: [Twisted-web] 
	Thoughts on documentation, wading into Twisted, Nevow, etc.
Message-ID: <17576.28596.853691.126857@terry.jones.tc>

Here's a summary of thoughts I've had over the last month or so. Please try
to take the following as positive / constructive. I'm happy to be involved
in trying to alleviate what some people may agree are problems.  Or people
may not agree that they're problems, which is fine too - more on this
below.

A few months ago I started looking at various (mainly Python) frameworks
with an eye to using one for a project I'm working on. When I found Twisted
(and friends) I was really happy. I've been writing code for what seems
like a long time (30 years) and I think I'm pretty critical and demanding
when it comes to good and clean design. I certainly had not expected to
find something like Twisted and its various additional components. Without
having written a line of Twisted code, I made the decision to throw away a
full year of my own low-level, efficient, debugged, C code (networking,
custom RPC, argument marshaling, tons of sweat). That was a pretty serious
step, not taken lightly, and, I still think, a good one.

That's why I'm still here, spending hours writing this email, wanting to
press ahead, and willing to put in time and effort to help.

In one corner then, we have a great foundation - elegant, dynamic, well
designed, full of potential, nice programming language, written by talented
and responsive developers, etc. But... in the other corner, documentation
that very often seems to be a complete shambles.

There, I've said it.

I don't claim that this is actually a problem. That depends. It may well be
that I've happened along at a moment which is not optimal for my needs and
abilities; that there is a well-organized design, development, and
documentation trajectory; and that I just happened to arrive at a bad point
on that curve.

I fully sympathize with things being less well documented than they could
otherwise be.  I love writing code. Following the rise of highlighting
editors I've even become quite fond of comments. But I'm not even slightly
fond of writing external docs. I think an important part of getting things
right in design is to implement something that feels right and then rework
it until it really feels right and clean, and is also useful. There's
little point in documenting things before they have settled. Writing code,
debugging, re-designing, building apps on top of libraries - all those
things, to me, should take precedence over documentation. I don't believe
in writing fully fleshed-out specs, docs, and tests ahead of
implementation.  I even have little time or sympathy for people (like
myself in this case) who don't have what it takes to use emerging tools
before they're fully documented for use. I've spent plenty of my own free
time in the last 20 years writing, giving away, and supporting, code I felt
like producing.  So I think I understand the equation pretty well.

But, Twisted and its related components are released. Valuable (to the
project) people are trying to use them. This can be frustrating. I think I
have a reasonably high frustration threshold (but maybe I'm wrong - maybe
I'm just old & cranky).

It's quite general to talk about "Twisted and its related components".
There are many moving parts (some conveniently accompanied by moving
names).  So let me just pick on Nevow - it's perhaps in the middle in terms
of maturity, documentation, frustration level, etc. I actually don't mean
to single out Nevow in particular, but it has qualities that make it a good
example target for discussion. Apologies in advance to anyone this seems to
pick on - that's not my intention, I have no idea who wrote (or didn't
write) some of this stuff. I know Matt is involved as he's been kind enough
to several times send me long explanations and code in email.

Again, I'm not claiming there's a problem here.

I find Nevow to be extremely promising and yet quite cryptic. Sadly, I've
built dozens of web sites, many of them commercial, done under contracts
with real deadlines, budgets, staff, etc. I hate editing ugly templates in
awkward ugly non-code file formats. There's just so much disgusting stuff
out there. So to see Nevow and Stan is a real pleasure.  But to try to
understand it... argh. Hop onto google and try "nevow documentation" and
read through some other people's experiences (e.g.
http://www.third-bit.com/pywebblog/archives/cat_twisted.html)

The recent "nevow documentation" thread (kicked off by Manlio, at
http://twistedmatrix.com/pipermail/twisted-web/2006-May/002652.html) is
mainly illustrative for its lack of conclusion. I don't find the suggested
page at http://divmod.org/trac/wiki/TitleIndex to have much (if anything)
to do with documentation - it seems to be links to code. It's not clear if
the wiki is more a help or a hindrance (this is probably too condemning,
but after spending more than enough time looking at things that one later
discovers are out of date, replaced, deprecated, etc., you start to wonder
about everything).

Nevow comes with many examples, and that's great. But they're still
cryptic. E.g., a grep url\\. */*.py in Nevow's examples directory gets me
over 30 hits, but I don't see that class documented anywhere and when I try
to use it in my code it doesn't work. E.g., formless is used in many
examples, but is apparently a dead end. If you disagree with that, you'll
be reinforcing my sentiment that things are a bit of a mess :-).

I can give more examples. There's quite a bit that seems very cryptic, and
I mean beyond the things described in the already very terse and piecemeal
Nevow documentation.  Of course it takes time to spell things out, but if
people want them I will. I already decided to take the evening off, have a
couple of beers, and write this email.

Before trying to finish on a politically correct, upbeat, & constructive
note, here's a question:

How was it that Twisted (or just Nevow?) managed to lose the attentions of
Kieran Holland? He (she?) was clearly into Nevow, put a lot of effort into
understanding things, and yet headed off to Django, which, reading between
the lines, he/she didn't really think was even nearly up to the
Twisted/Nevow standard.  That's a bad loss. People who can read and write
code and who are willing to spend serious amounts of time helping ease
others into projects are so valuable. The Addendum of Kieran's Stan page
(http://www.kieranholland.com/code/documentation/nevow-stan/) seems to
spell things out pretty clearly. It feels like the Nevow (and broader?)
community has done itself a serious disservice in losing Kieran's attention
(but, see above comments on whether this is perceived as a problem,
trajectories, etc).

To me, totally on the outside, I do not get the impression that there is a
clear design, code, and release trajectory in place. It feels like there is
a bunch of very talented designers and coders who are banging out an
increasing number of cool projects at high speed, leaving a frustratingly
incomplete, misleading, and atrophying breadcrumb trail of documentation
behind them.


On to another question: do people think there a problem here, or not?  The
answer may be no.  I think that's fine, I'm happy to be told to read the
code and to shut up. At least that would be definitive, and not at all
unwelcome.

But, if you think there is a problem, what can we do? Here are some
possible concrete steps that wouldn't take huge amounts of time.

 1) Go through all Twisted & friends web sites and wiki and _ruthlessly
    delete everything_ that mentions obsolete, deprecated, or renamed
    projects / modules, broken links, example code using such, etc. There
    are many of these things, and they are highly misleading and
    frustrating and give a bad overall impression.

 2) State, where appropriate, that the source code is currently the best
    documentation. There's no shame in this, and it's much better than
    having people run across and waste time on obsolete docs, or spend time
    looking for things that do not exist. E.g., "At this point the
    nevow.url class is totally undocumented. See examples/{x,y,z} for
    example usage and the code and comments in nevow/url.py for the best
    current documentation."

 3) Have someone, preferably an outsider (could be me), write up and
    maintain a no-punches-pulled overview document about using the various
    Twisted components. Stick a link to this in a prominent place.
    http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted is a good
    start.

 4) Have someone go through example code to stick in more comments, get rid
    of old stuff (no need to rewrite if that takes too long, just throw it
    away). E.g., the widespread use of formless in Nevow examples. Is it
    in, is it out?  If the latter, get rid of it before more people die.

 5) Have someone do some web searches for stuff known to be fixed or out of
    date, and send mail to the authors asking if they'd please consider
    updating or otherwise clarifying what they've written, could they add a
    link or a postscript, to help out future people looking to use Twisted
    & friends? No need to try to hide the fact that things were a bit of a
    mess - just aim not to have people get an out-of-date impression or
    follow links to incorrect / obsolete pages (e.g., links to nevow.com).

I could probably come up with more suggestions. Given the inclinations of
(I assume) many people still reading this message, no-one is too much
inclined towards producing actual documentation (and it may not be the
right moment, as above). So it makes sense to focus on easy hits: purging
old crud, minimizing wasting the time of people looking to get involved,
making it clear what the barriers are (e.g., point people at the source,
tell them that at this point the only way to understand is to ask questions
(but time is precious) and to read the code).

OK, enough words for now. Thanks again for all the help, all the code, etc.

Terry

From exarkun at divmod.com  Sun Jul  2 21:50:14 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun Jul  2 21:50:21 2006
Subject: [Twisted-web] 
	Thoughts on documentation, wading into Twisted, Nevow, etc.
In-Reply-To: 0
Message-ID: <20060703025014.29014.217153318.divmod.quotient.20166@ohm>

On Mon, 3 Jul 2006 03:15:32 +0200, Terry Jones <terry@jon.es> wrote:
>Here's a summary of thoughts I've had over the last month or so. Please try
>to take the following as positive / constructive. I'm happy to be involved
>in trying to alleviate what some people may agree are problems.  Or people
>may not agree that they're problems, which is fine too - more on this
>below.

Thanks for taking the time to write this up, Terry.

>
>A few months ago I started looking at various (mainly Python) frameworks
>with an eye to using one for a project I'm working on. When I found Twisted
>(and friends) I was really happy. I've been writing code for what seems
>like a long time (30 years) and I think I'm pretty critical and demanding
>when it comes to good and clean design. I certainly had not expected to
>find something like Twisted and its various additional components. Without
>having written a line of Twisted code, I made the decision to throw away a
>full year of my own low-level, efficient, debugged, C code (networking,
>custom RPC, argument marshaling, tons of sweat). That was a pretty serious
>step, not taken lightly, and, I still think, a good one.

I'm very happy to hear that you like Twisted, particularly since you
already had such a significant investment in another project at the
time you came upon it.  I'm also glad it means enough to you to take
the time to write an email like this one.

>That's why I'm still here, spending hours writing this email, wanting to
>press ahead, and willing to put in time and effort to help.
>
>In one corner then, we have a great foundation - elegant, dynamic, well
>designed, full of potential, nice programming language, written by talented
>and responsive developers, etc. But... in the other corner, documentation
>that very often seems to be a complete shambles.
>
>There, I've said it.

Actually, I don't think this comes as much of a surprise to anyone. ;)

>
>I don't claim that this is actually a problem. That depends. It may well be
>that I've happened along at a moment which is not optimal for my needs and
>abilities; that there is a well-organized design, development, and
>documentation trajectory; and that I just happened to arrive at a bad point
>on that curve.

I will go so far as to say that it is a problem.  Unfortunately this can't
be blamed on bad timing: if anything, the documentation is in better shape
now than at any other point at which I have been involved with the project.

The project has probably been in better shape with respect to design and 
development planning at various points, but documentation has almost always
been added with little or not forethought to the bigger picture.  The
current plugin document was written because I felt like slacking off work
one afternoon; the producer/consumer document (pitiful as it is) happened
because I was bored one sunday.  I can't really speak for the motivation
behind other writers, but I suspect it is similar in more cases than not.

That said, things have been improving.  The trend is pretty subtle but it
is definitely there.

>I fully sympathize with things being less well documented than they could
>otherwise be.  I love writing code. Following the rise of highlighting
>editors I've even become quite fond of comments. But I'm not even slightly
>fond of writing external docs. I think an important part of getting things
>right in design is to implement something that feels right and then rework
>it until it really feels right and clean, and is also useful. There's
>little point in documenting things before they have settled. Writing code,
>debugging, re-designing, building apps on top of libraries - all those
>things, to me, should take precedence over documentation. I don't believe
>in writing fully fleshed-out specs, docs, and tests ahead of
>implementation.  I even have little time or sympathy for people (like
>myself in this case) who don't have what it takes to use emerging tools
>before they're fully documented for use. I've spent plenty of my own free
>time in the last 20 years writing, giving away, and supporting, code I felt
>like producing.  So I think I understand the equation pretty well.

I can agree with most of what you said above.  The one thing I will disagree
with is not writing tests before the implementation.  Aside from their other
uses, tests can also serve as a form of documentation.  Twisted already
requires tests for all new functionality and all changes to existing
functionality.  Soon it will be required that all tests have docstrings
explaining their purpose.  While this isn't the same as comprehensive prose
describing the motivation and use of a particular API, it can often convey
much of the same information.

>But, Twisted and its related components are released. Valuable (to the
>project) people are trying to use them. This can be frustrating. I think I
>have a reasonably high frustration threshold (but maybe I'm wrong - maybe
>I'm just old & cranky).

True.  Hidden (or not so hidden) here is one of Twisted's biggest problems
right now.  Twisted's developer base is incredibly small, particularly when
considering the scope it encompasses.  Over half of Twisted was developed
by just four people.  With twisted.pb and twisted.web2 one might think that
the load has been spread out a bit more, but other factors have combined to
result in the opposite: over the last year almost 3/5ths of Twisted code
has been written by only three people.  That's a huge amount of effort by
an amazingly small team.

I can't argue that documentation would benefit a great deal of people, but
hopefully it should be clear now why Twisted's documentation isn't better
off than it is.  If anything, I think it's pretty unclear how it is as good
as it is. :)

>It's quite general to talk about "Twisted and its related components".
>There are many moving parts (some conveniently accompanied by moving
>names).  So let me just pick on Nevow - it's perhaps in the middle in terms
>of maturity, documentation, frustration level, etc. I actually don't mean
>to single out Nevow in particular, but it has qualities that make it a good
>example target for discussion. Apologies in advance to anyone this seems to
>pick on - that's not my intention, I have no idea who wrote (or didn't
>write) some of this stuff. I know Matt is involved as he's been kind enough
>to several times send me long explanations and code in email.

Let me clarify Nevow's position a little bit.  Please excuse me if you are
already aware of these details, but I at least want to make sure the archive
contains an accurate description of this.

Glyph started Twisted and accumulated a community of developers.  For a
long time development was performed entirely by volunteers, mostly
scratching a personal itch (ie, no corporate contributions).  There are
a couple exceptions here, but by and large this is an accurate picture.

Later Divmod was started and produced, among other things, Nevow.  Nevow
developed by Divmod in support of a product being developed.  Much of it
went undocumented because the Divmod team knew how it worked well enough
and we had less than no time to spend writing down how to use it for other
people.  Heck, we were already giving it away for free. ;)  Much of what
there is in the way of documentation for Nevow came from the community
after most of the core ideas of Nevow had stabalized.  Unfortunately,
around that point Nevow became complete enough that Divmod didn't need to
invest much time in it (but not complete enough to make all our development
get done overnight by magic elves, so we still didn't have time to document
it) and Nevow started to drift as different parts of the community pulled
it in different directions.  This didn't help the documentation situation
much, since most of the time the only way a new feature was documented was
with another entry in examples.tac.  This went on for a while, as anyone
who has looked at examples.tac might guess.

Lately Nevow has gotten some more attention from Divmod and, while I don't
mean to imply that the directions Nevow was being pulled in by the community
were bad, it was certainly bad that there was no single direction.  A bit
more rudder is being applied now and hopefully in the near future this will
take Nevow to an even greater place than that at which it is now.

These circumstances are all specific to Nevow, of course, and you are talking
about a more general problem.  However, at least you know Nevow's story now,
and anyway it always turns out that whatever project you're talking about has
its own story, too, which explains exactly why it's in the shape it's in. :)

>
>Again, I'm not claiming there's a problem here.
>
>I find Nevow to be extremely promising and yet quite cryptic. Sadly, I've
>built dozens of web sites, many of them commercial, done under contracts
>with real deadlines, budgets, staff, etc. I hate editing ugly templates in
>awkward ugly non-code file formats. There's just so much disgusting stuff
>out there. So to see Nevow and Stan is a real pleasure.  But to try to
>understand it... argh. Hop onto google and try "nevow documentation" and
>read through some other people's experiences (e.g.
>http://www.third-bit.com/pywebblog/archives/cat_twisted.html)
>
>The recent "nevow documentation" thread (kicked off by Manlio, at
>http://twistedmatrix.com/pipermail/twisted-web/2006-May/002652.html) is
>mainly illustrative for its lack of conclusion. I don't find the suggested
>page at http://divmod.org/trac/wiki/TitleIndex to have much (if anything)
>to do with documentation - it seems to be links to code. It's not clear if
>the wiki is more a help or a hindrance (this is probably too condemning,
>but after spending more than enough time looking at things that one later
>discovers are out of date, replaced, deprecated, etc., you start to wonder
>about everything).
>
>Nevow comes with many examples, and that's great. But they're still
>cryptic. E.g., a grep url\\. */*.py in Nevow's examples directory gets me
>over 30 hits, but I don't see that class documented anywhere and when I try
>to use it in my code it doesn't work. E.g., formless is used in many
>examples, but is apparently a dead end. If you disagree with that, you'll
>be reinforcing my sentiment that things are a bit of a mess :-).
>I can give more examples. There's quite a bit that seems very cryptic, and
>I mean beyond the things described in the already very terse and piecemeal
>Nevow documentation.  Of course it takes time to spell things out, but if
>people want them I will. I already decided to take the evening off, have a
>couple of beers, and write this email.
>
>Before trying to finish on a politically correct, upbeat, & constructive
>note, here's a question:
>
>How was it that Twisted (or just Nevow?) managed to lose the attentions of
>Kieran Holland? He (she?) was clearly into Nevow, put a lot of effort into
>understanding things, and yet headed off to Django, which, reading between
>the lines, he/she didn't really think was even nearly up to the
>Twisted/Nevow standard.  That's a bad loss. People who can read and write
>code and who are willing to spend serious amounts of time helping ease
>others into projects are so valuable. The Addendum of Kieran's Stan page
>(http://www.kieranholland.com/code/documentation/nevow-stan/) seems to
>spell things out pretty clearly. It feels like the Nevow (and broader?)
>community has done itself a serious disservice in losing Kieran's attention
>(but, see above comments on whether this is perceived as a problem,
>trajectories, etc).

I don't know the answer to this question.  I am somewhat curious myself.

>To me, totally on the outside, I do not get the impression that there is a
>clear design, code, and release trajectory in place. It feels like there is
>a bunch of very talented designers and coders who are banging out an
>increasing number of cool projects at high speed, leaving a frustratingly
>incomplete, misleading, and atrophying breadcrumb trail of documentation
>behind them.

>From my comments above, you may gather that I don't entirely disagree with
this assessment.  I hope that things are changing, though.

>On to another question: do people think there a problem here, or not?  The
>answer may be no.  I think that's fine, I'm happy to be told to read the
>code and to shut up. At least that would be definitive, and not at all
>unwelcome.
>
>But, if you think there is a problem, what can we do? Here are some
>possible concrete steps that wouldn't take huge amounts of time.
>
> 1) Go through all Twisted & friends web sites and wiki and _ruthlessly
>    delete everything_ that mentions obsolete, deprecated, or renamed
>    projects / modules, broken links, example code using such, etc. There
>    are many of these things, and they are highly misleading and
>    frustrating and give a bad overall impression.

Marking things as deprecated or out of date might be better than deleting
things outright.  On the other hand, any documentation which refers to
code which actually doesn't exist anymore or is known to not work at all
should probably be removed.

> 2) State, where appropriate, that the source code is currently the best
>    documentation. There's no shame in this, and it's much better than
>    having people run across and waste time on obsolete docs, or spend time
>    looking for things that do not exist. E.g., "At this point the
>    nevow.url class is totally undocumented. See examples/{x,y,z} for
>    example usage and the code and comments in nevow/url.py for the best
>    current documentation."

I think this is a good idea.  It seems obvious, but I don't think I've heard
it suggested before.  Of /course/ I always go to the source when I want to
know how something works, and I often recommend that other people do the
same, but having this specifically mentioned /in the documentation/ where
there would otherwise be no mention at all strikes me as very useful.  Just
knowing conclusively that ones search has failed rather than having to keep
looking in case the goal has been overlooked is quite valuable.

> 3) Have someone, preferably an outsider (could be me), write up and
>    maintain a no-punches-pulled overview document about using the various
>    Twisted components. Stick a link to this in a prominent place.
>    http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted is a good
>    start.

This would be quite welcome.

> 4) Have someone go through example code to stick in more comments, get rid
>    of old stuff (no need to rewrite if that takes too long, just throw it
>    away). E.g., the widespread use of formless in Nevow examples. Is it
>    in, is it out?  If the latter, get rid of it before more people die.

This would be useful as well, although I suspect the time would be better
spent writing up real documentation.

> 5) Have someone do some web searches for stuff known to be fixed or out of
>    date, and send mail to the authors asking if they'd please consider
>    updating or otherwise clarifying what they've written, could they add a
>    link or a postscript, to help out future people looking to use Twisted
>    & friends? No need to try to hide the fact that things were a bit of a
>    mess - just aim not to have people get an out-of-date impression or
>    follow links to incorrect / obsolete pages (e.g., links to nevow.com).

This would be useful as well, if it could be done successfully.  I suspect
it is a losing battle, though.  What I would rather see is for more people
to contribute documentation to the project where it could be maintained,
even if the original authors no longer have the motivation to do so.

>I could probably come up with more suggestions. Given the inclinations of
>(I assume) many people still reading this message, no-one is too much
>inclined towards producing actual documentation (and it may not be the
>right moment, as above). So it makes sense to focus on easy hits: purging
>old crud, minimizing wasting the time of people looking to get involved,
>making it clear what the barriers are (e.g., point people at the source,
>tell them that at this point the only way to understand is to ask questions
>(but time is precious) and to read the code).
>
>OK, enough words for now. Thanks again for all the help, all the code, etc.
>
>Terry
>

You're very welcome.  Thank you for the well thought out criticism.

Jean-Paul

From glyph at divmod.com  Sun Jul  2 22:44:51 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Sun Jul  2 22:44:57 2006
Subject: [Twisted-web] 
	Thoughts on documentation, wading into Twisted, Nevow, etc.
In-Reply-To: <20060703025014.29014.217153318.divmod.quotient.20166@ohm>
Message-ID: <20060703034451.29014.529098012.divmod.quotient.20226@ohm>

Thanks, Terry, for writing about this.  I agree with most everything JP said.

On Sun, 2 Jul 2006 22:50:14 -0400, Jean-Paul Calderone <exarkun@divmod.com> wrote:

>Hidden (or not so hidden) here is one of Twisted's biggest problems
>right now.  Twisted's developer base is incredibly small, particularly when
>considering the scope it encompasses.  Over half of Twisted was developed
>by just four people.  With twisted.pb and twisted.web2 one might think that
>the load has been spread out a bit more, but other factors have combined to
>result in the opposite: over the last year almost 3/5ths of Twisted code
>has been written by only three people.  That's a huge amount of effort by
>an amazingly small team.

There is another unfortunate truth hidden (or not so hidden) here.

Fundamentally, while we'd also like this situation to change, someone will have to take responsibility for it.  As JP mentions here, the current maintainers are all overstretched in a number of different directions.  While all open source projects could use more contributions, by my estimation Twisted is something like 10x as overstretched as any other project.

While certain things you've suggested seem like useful stopgaps -- I particularly like the idea of mentioning repeatedly in the documentation that users should consult the source for the most up-to-date information -- the real solution to this problem _requires_ a dedicated documentation maintainer for each project.  That means not just a few hours here and there to fix bugs, but a consistent commitment from someone.  Ad-hoc spurts of effort from the community can be highly useful, but only if, when they arrive, there is a well-maintained list of priority-sorted tasks for the effort to be applied to; and once some work has been done, someone needs to stay around after the party to clean up the mess, make sure all the work goes into the right place in the repository and any critical gaps are filled in.

Terry, perhaps you would like to volunteer to be Nevow's documentation maintainer; or perhaps you know someone you could encourage to fill that role.  Without such a person though, I doubt that we are realistically going to have enough bandwidth with our existing team to even apply your simple suggestions.

From duncan.mcgreggor at gmail.com  Sun Jul  2 22:51:57 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sun Jul  2 22:52:08 2006
Subject: [Twisted-web]  Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <17576.28596.853691.126857@terry.jones.tc>
References: <17576.28596.853691.126857@terry.jones.tc>
Message-ID: <44A8945D.9010704@gmail.com>

Terry Jones wrote:
> Here's a summary of thoughts I've had over the last month or so. Please try
> to take the following as positive / constructive.
Terry, that was a great email. Thanks for the time and consideration.

I'd have to say that I agree with you almost entirely. I tend to run
into two different types of responses when I talk to people about
developing in Twisted (with regard to the documentation):

1) what they hell? how can you possibly use this? I don't understand
what the hell they're talking about! and

2) wow! this is SO much better than what it used to be -- I think I can
actually use twisted now.

I have been using Nevow since it was first made "public" at pycon 2004.
It's the best thing out there for web dev that fits my brain. However, I
have had a very difficult time getting dev shops to adopt it.

Yet, I have had a few wins lately -- because of several fully developed
applications I built for different projects. They were amazed at the
applications' architectures, soundness, etc. -- all thanks to the
relative logic and soundness of Twisted/Nevow and its developers. Living
examples that demonstrate "best practices" may be one of the biggest
lacks in the Nevow docs right now. This has come up several times on
IRC, as well.

What the developers in those shops were able to see for the first time was:
* how python classes were used to construct sections of a site (using
rend.Page)
* how python classes were used to construct sections of a page (using
rend.Fragment)
* how slots are created and filled
* the usefulness of data_*() and render_*() methods
* the manipulation of sequences in the XHTML templates

Once the developers in the shops saw the whole picture with clear, clean
code that did exactly what you would expect it to do, they were sold.
They can't wait to do the next few projects using Nevow (instead of
Plone). I haven't seen these guys this excited in a long time.

It seems there is a need for several tutorials/documentation updates to
fill these needs. One of the greatest strengths of Nevow, though, is its
flexibility. The combination of Twisted and Nevow almost provide more of
a "meta web dev framework" than one of the "competing" web frameworks.
And this naturally makes documentation of "the right way to do it"
rather difficult. One solution may be a series of tutorials addressing
various needs/circumstances while outlining the benefits/reasons for the
given approach.

I've been thinking of writing a new tutorial lately. Maybe we should
crank a few out... hmm, on that thought, maybe there should be a
standard format for Nevow tutorials. "Intended Audience", "What this
tutorial addresses", "What this tutorial doesn't address", "Components
used", etc. Dunno. Just rambling now. Glad you're writing about this :-)

d

From nico at tekNico.net  Mon Jul  3 03:07:05 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Mon Jul  3 03:07:10 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <20060703025014.29014.217153318.divmod.quotient.20166@ohm>
References: <20060703025014.29014.217153318.divmod.quotient.20166@ohm>
Message-ID: <44A8D029.7060502@tekNico.net>

>> How was it that Twisted (or just Nevow?) managed to lose the 
>> attentions of Kieran Holland? He (she?) was clearly into Nevow, put a
>> lot of effort into understanding things, and yet headed off to Django,
>> which, reading between the lines, he/she didn't really think was even
>> nearly up to the Twisted/Nevow standard.  That's a bad loss. People
>> who can read and write code and who are willing to spend serious
>> amounts of time helping ease others into projects are so valuable. The
>> Addendum of Kieran's Stan page 
>> (http://www.kieranholland.com/code/documentation/nevow-stan/) seems to
>>  spell things out pretty clearly. It feels like the Nevow (and
>> broader?) community has done itself a serious disservice in losing
>> Kieran's attention (but, see above comments on whether this is
>> perceived as a problem, trajectories, etc).

> I don't know the answer to this question.  I am somewhat curious myself.

I remember reading that Addendum, and feeling a sad loss too. At the time I
did not follow his advice to check out Django, and now that I did, I regret
not having done so earlier: I now prefer Django to Nevow, too.


Django developers are very careful in organizing the documentation and
keeping it current. They also put much effort in being responsive to the
community at large. Granted, they probably are less overstretched than the
Twisted ones. :-)


Furthermore, it seems to me that the Twisted developers are bent on power
and versatility, sometimes at the expense of simplicity and clarity. The
Django ones have opposite priorities.

Two Nevow-related examples:

1) the URL resolution mechanism in Nevow is very general and powerful, but
makes it hard to see all the URLs in a site, and how they are handled.

The regular expressions used in Django are less general and rather ugly,
but do the job and make it very easy to see all the handled URLs at a glance.

2) the XHTML templating in Nevow (and Kid, and ZPT, and STL) is uselessly
convoluted. The template validability is a red herring, and makes writing
and reading presentation logic needlessly complicated.

The Django templating is again rather ugly, but definitely clearer, without
having a *too* powerful logic. At the same time it has the same power of
Nevow's fragments and slots.


To clarify, I've been using Twisted on the job for three years now, I just
got a new job on that basis mainly (so thanks once again, guys :-) ), and
am the current Twisted website maintainer, so I'm heavily invested in Twisted.

Now I have the problem of a better integration between Twisted and Django,
but it's a solvable problem. ;-)


-- 
Nicola Larosa - http://www.tekNico.net/

We all write shitty software. But only the best developers realize
they're doing it. It'd be ironic if it wasn't so depressing.
 -- Jeff Atwood, March 2006


From paul-lists at perforge.com  Mon Jul  3 04:13:44 2006
From: paul-lists at perforge.com (Paul G)
Date: Mon Jul  3 04:13:48 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
References: <20060703025014.29014.217153318.divmod.quotient.20166@ohm>
	<44A8D029.7060502@tekNico.net>
Message-ID: <02a601c69e80$fc702bd0$6302a8c0@dcore>

i don't use nevow specifically, but i'll throw in my 2 kopecks anyway ;]


----- Original Message ----- 
From: "Nicola Larosa" <nico@tekNico.net>
To: <twisted-web@twistedmatrix.com>
Sent: Monday, July 03, 2006 4:07 AM
Subject: [Twisted-web] Re: Thoughts on documentation, wading into 
Twisted,Nevow, etc.



> 1) the URL resolution mechanism in Nevow is very general and powerful, but
> makes it hard to see all the URLs in a site, and how they are handled.
>
> The regular expressions used in Django are less general and rather ugly,
> but do the job and make it very easy to see all the handled URLs at a 
> glance.

i'll disagree with this on principle. you can easily implement django-style 
url mapping, at least as you've described it, with a few lines of code on 
top of the more general architecture in t.web/t.web2 (and likely nevow, but 
i don't remember the details). the reverse may not be true (and likely 
isn't, but i can't say for sure since i don't know django well enough). 
sure, it'd be nice if it were already written, but it's so trivial that it's 
almost a non-concern. on my end, the django approach would simply be 
completely unusable.

> 2) the XHTML templating in Nevow (and Kid, and ZPT, and STL) is uselessly
> convoluted. The template validability is a red herring, and makes writing
> and reading presentation logic needlessly complicated.

zope has a good reason for this - they have a specific design requirement to 
allow untrusted edits to the templates. i'll agree that it's unwise to 
burden the common (from where i sit) case where all edits are considered 
trusted with the complexity that is inherent in supporting that requirement.

personally, i don't need to validate (and can't, in most cases, because i 
don't have xhtml). i strongly prefer the cheetah approach and dearly wish 
there were official integration with twisted. however, other people have 
said they liked stan, and far be it from me to impose my preferences on 
others; this is a case of different strokes for different folks imho. 
pluggable templating methods would be sweet.



> To clarify, I've been using Twisted on the job for three years now, I just
> got a new job on that basis mainly (so thanks once again, guys :-) ), and
> am the current Twisted website maintainer, so I'm heavily invested in 
> Twisted.
>
> Now I have the problem of a better integration between Twisted and Django,
> but it's a solvable problem. ;-)

good to hear :) there's a lot to be said for twisted, as an appplication 
server model is largely superior to a context-dies-at-end-of-request model 
apache imposes on people for a large set of applications where there's a 
considerable amount of application level context. it's incredibly 
frustrating to see people who don't even realize that there are options 
beyond persisting all state in their rdbms between requests, even when that 
state is transient. there are, however, many different needs in terms of 
frameworks on top of that and nevow fills just one niche; imho, the route to 
go is attempt integration with as many feature distinct frameworks as needed 
to provide good coverage of all the options.

for someone with a simple set of needs, something primitive-and-easy like 
RoR may be the ticket. for someone who's doing heavy lifting and likes stan, 
nevow might be it. etc ad infinitum. i don't think it's realistic to expect 
twisted/divmod devs to do all of this, since (at least for the divmod guys), 
you'd assume nevow works the way they like their web frameworks baked. would 
lobbying the framework developers to integrate with twisted be workable? i'd 
certainly love it if, say, cheetah integration were developed and maintained 
by the cheetah devs, as opposed to me having to roll an in-house 
implementation.

as i said, that's just my 2 kopecks, and if someone's been following russian 
economic development, 2 kopecks isn't worth much nowadays (so i hear from my 
grandma, anyway) <g>

-p 


From moebius.lists at gmail.com  Mon Jul  3 06:12:18 2006
From: moebius.lists at gmail.com (Adrian Perez)
Date: Mon Jul  3 06:15:50 2006
Subject: [Twisted-web]  Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <20060703034451.29014.529098012.divmod.quotient.20226@ohm>
References: <20060703025014.29014.217153318.divmod.quotient.20166@ohm>
	<20060703034451.29014.529098012.divmod.quotient.20226@ohm>
Message-ID: <20060703131218.09ec883b@tron.foobar.homeunix.org>

On Sun, 2 Jul 2006 23:44:51 -0400
glyph@divmod.com wrote:

> Thanks, Terry, for writing about this.  I agree with most everything
> JP said.

I've also found Terry's email quite interesting. I started learning to
use Nevow lately --even not mastering it in depth I find it amazingly
elegant-- and I noticed about some of the problems described. I'm happy
because such a controversial email seems being taken seroiously instead
of provoking a flame.

> On Sun, 2 Jul 2006 22:50:14 -0400, Jean-Paul Calderone
> <exarkun@divmod.com> wrote:
> 
> >Hidden (or not so hidden) here is one of Twisted's biggest problems
> >right now.  Twisted's developer base is incredibly small,
> >particularly when considering the scope it encompasses.  Over half
> >of Twisted was developed by just four people.  With twisted.pb and
> >twisted.web2 one might think that the load has been spread out a bit
> >more, but other factors have combined to result in the opposite:
> >over the last year almost 3/5ths of Twisted code has been written by
> >only three people.  That's a huge amount of effort by an amazingly
> >small team.
> 
> There is another unfortunate truth hidden (or not so hidden) here.
> 
> Fundamentally, while we'd also like this situation to change, someone
> will have to take responsibility for it.  As JP mentions here, the
> current maintainers are all overstretched in a number of different
> directions.  While all open source projects could use more
> contributions, by my estimation Twisted is something like 10x as
> overstretched as any other project.
> 
> While certain things you've suggested seem like useful stopgaps -- I
> particularly like the idea of mentioning repeatedly in the
> documentation that users should consult the source for the most
> up-to-date information [...]

At first I tried searching for documentation, but I had to step through
the code some times. Telling users not to be afraid of reading the code
would avoid people wasting their time surfing the net.

> [...] the real solution to this problem _requires_ a dedicated
> documentation maintainer for each project. That means not just a few
> hours here and there to fix bugs, but a consistent commitment from
> someone [...]

I also agree with you here. Based on my own experience, one person
may take care of the code _and_ the documentation when a project is
small, but when things start growing he/she will find frustating being
the only one taking care of documentation and will focus on code
instead.

> Terry, perhaps you would like to volunteer to be Nevow's
> documentation maintainer; or perhaps you know someone you could
> encourage to fill that role.  Without such a person though, I doubt
> that we are realistically going to have enough bandwidth with our
> existing team to even apply your simple suggestions.

I would like to help, but I don't feel like I could manage being the
main maintainer and I also like coding more than writing documentation.
Even so, if someone decides to takes care of the task, I could find
some spare time to contribute.

I know I am a newcomer here, but those are my two cents.

Cheers,

-- 
Adrian Perez
"Experience is what you get when you don't get what you want"
                                           -- (Dan Stanford)



-- 
Adrian Perez
"Experience is what you get when you don't get what you want"
                                           -- (Dan Stanford)

From glyph at divmod.com  Mon Jul  3 08:23:14 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Mon Jul  3 08:23:17 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <02a601c69e80$fc702bd0$6302a8c0@dcore>
Message-ID: <20060703132314.29014.137899698.divmod.quotient.20729@ohm>



On Mon, 3 Jul 2006 05:13:44 -0400, Paul G <paul-lists@perforge.com> wrote:

>as i said, that's just my 2 kopecks, and if someone's been following russian 
>economic development, 2 kopecks isn't worth much nowadays (so i hear from my 
>grandma, anyway) <g>

Speaking of kopecks, if Nevow documentation is actually worth something to you guys, you could kill two birds with one stone here and all sign up for the Divmod fan club and provide us with the appropriate resources to do it directly, in the form of cash:

    http://divmod.org/trac/wiki/DivmodFanClub

Paypal should convert your kopecks or sheckles into USD for us automatically.

From dialtone at divmod.com  Mon Jul  3 08:28:00 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jul  3 08:28:02 2006
Subject: [Twisted-web] Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <17576.28596.853691.126857@terry.jones.tc>
Message-ID: <20060703132800.29014.695445355.divmod.quotient.20734@ohm>

The others already answered to your email and they basically all said things I agree with, hence I'll concentrate on proposing yet another way of trying to solve this problem. :)

On Mon, 3 Jul 2006 03:15:32 +0200, Terry Jones <terry@jon.es> wrote:

>But, if you think there is a problem, what can we do? Here are some
>possible concrete steps that wouldn't take huge amounts of time.
>
> 1) Go through all Twisted & friends web sites and wiki and _ruthlessly
>    delete everything_ that mentions obsolete, deprecated, or renamed
>    projects / modules, broken links, example code using such, etc. There
>    are many of these things, and they are highly misleading and
>    frustrating and give a bad overall impression.

I agree on this but only when we will finally have a completed twisted.web2 that will allow us to port Nevow to it. Some effors are already going in this direction with the recent #1252 bug in Divmod trac and the no-more-context-1252 branch.

Given the relative simplicity of this newly written code it might be a good way to start looking at Nevow and writing some documentation with developers' aid.

I'll have the last exam of this university year on the 5th, after that day I'll probably have plenty of spare time to develop and help documenting Nevow. Not being a:
1) Native english speaker
and
2) Good at explaining things clearly

I wouldn't be the right person for documenting Nevow in first person while I'd _love_ to help somebody else to write new documentation (by reviewing, answering, completing and whatnot).

I also have some applications under the MIT license that show how to use Nevow mechanism outside Divmod infrastructure (which despite being really well written is not always the best solution for any problem, like they know well enough :)) and the code can be taken as an example or best practice or just a starting point.

> 2) State, where appropriate, that the source code is currently the best
>    documentation. There's no shame in this, and it's much better than
>    having people run across and waste time on obsolete docs, or spend time
>    looking for things that do not exist. E.g., "At this point the
>    nevow.url class is totally undocumented. See examples/{x,y,z} for
>    example usage and the code and comments in nevow/url.py for the best
>    current documentation."

Sometimes the Nevow source code is not really clean and cannot really be understood (the url module is a good example of being mildly obscurish) however it's much better to redirect to it than to provide outdated documentation, this is an unfortunate problem that has plagued nevow since long long ago and nobody bothered fixing because we literally have no time :(.

> 4) Have someone go through example code to stick in more comments, get rid
>    of old stuff (no need to rewrite if that takes too long, just throw it
>    away). E.g., the widespread use of formless in Nevow examples. Is it
>    in, is it out?  If the latter, get rid of it before more people die.

Another thing I agree with. IMHO it's been a while that formless has been more or less discontinued and it should at least be definately separated from nevow if not just dropped. There's also an additional problem to this since currently there are 2 different form libraries one that integrates with athena and another one that does not. formal and liveform.

Also in its current shape formless is not even close to being what it was thought for, I know many use formless currently for their needs but IMHO (and I would like some opinions on this of course) having 3 form projects of which 2 (despite being different) solve the same problem is a waste of resources. Anyone that is spending time and effort on fixing/extending formless should move to formal which is considerably easier and cleaner in its design also it is fairly easy to extend. Yes it doesn't still support form customization but adding it is not a 10 month effort because the rendering class is completely separated from the rest and it could be added with an afternoon of work.

Allowing this would have _many_ positive effects to Nevow. For example rend.py would finally be cleaned up from the code depending on formless, faster startup for less component registration, less code in rend.py, less code in Nevow, no more CARRYOVER and so on. 

Thanks for your mail :)

From moebius.lists at gmail.com  Mon Jul  3 09:27:43 2006
From: moebius.lists at gmail.com (Adrian Perez)
Date: Mon Jul  3 09:31:07 2006
Subject: [Twisted-web] Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <20060703132800.29014.695445355.divmod.quotient.20734@ohm>
References: <17576.28596.853691.126857@terry.jones.tc>
	<20060703132800.29014.695445355.divmod.quotient.20734@ohm>
Message-ID: <20060703162743.4f3b3e32@tron.foobar.homeunix.org>

On Mon, 3 Jul 2006 15:28:00 +0200
Valentino Volonghi aka Dialtone <dialtone@divmod.com> wrote:

> [...] Also in its current shape formless is not even close to being
> what it was thought for, [...] Anyone that is spending time and
> effort on fixing/extending formless should move to formal which is
> considerably easier and cleaner in its design also it is fairly easy
> to extend [...]

I am using formless in Bic (a weblog engine I'm coding)... does this
mean I should move on to formal? I'm not afraid of switching; in fact I
prefer to make changes instead of using a piece of code which nobody
will take care of...

Any explanation is welcome -- I'll search the mailing list archives so
maybe even no explanation is a good one if this topic was already
addressed.

Regards,

-- 
Adrian Perez
"Experience is what you get when you don't get what you want"
                                           -- (Dan Stanford)

From dialtone at divmod.com  Mon Jul  3 10:18:07 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jul  3 10:18:18 2006
Subject: [Twisted-web] Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <20060703162743.4f3b3e32@tron.foobar.homeunix.org>
Message-ID: <20060703151807.29014.2063861995.divmod.quotient.20836@ohm>

On Mon, 3 Jul 2006 16:27:43 +0200, Adrian Perez <moebius.lists@gmail.com> wrote:
>I am using formless in Bic (a weblog engine I'm coding)... does this
>mean I should move on to formal? I'm not afraid of switching; in fact I
>prefer to make changes instead of using a piece of code which nobody
>will take care of...

Yes I think you should. Formless is going away for sure in the future, the only matter is exactly decide when.

>Any explanation is welcome -- I'll search the mailing list archives so
>maybe even no explanation is a good one if this topic was already
>addressed.

formal is just better at the main goal that both formless and formal do. It still lacks some features but those can be implemented.

From lloyd at paisite.com  Mon Jul  3 12:04:30 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Mon Jul  3 12:06:14 2006
Subject: [Twisted-web]  Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <17576.28596.853691.126857@terry.jones.tc>
References: <17576.28596.853691.126857@terry.jones.tc>
Message-ID: <32960.206.173.68.153.1151946270.squirrel@www.wbsysnet.com>

Hello,

On Sun, July 2, 2006 9:15 pm, Terry Jones wrote:
> Here's a summary of thoughts I've had over the last month or so.

As one totally smitten with Twisted but compelled to abandon it due to
lack of documentation, I heartily second Terry Jones's critique and
proposal.

I tried to contribute my small bit toward better Twisted documentation
with the Techno Turkey Adventures series... even created a Techno Turkey
blog.

My assumption was that by starting from a know-nothing stance and asking
embarrassingly naive questions I could tease out enough technical
direction to build enlightening and useful code experiments designed to
accelerate progress up the Twisted learning curve.

But several things brought the endeavor to a premature end:

1) My own limited Python skills meant that I couldn't, on my own hook, dig
much meaning out of the source code. There are a number of Python (or,
perhaps, object) idioms used extenstively in the Twisted corpus that
totally baffle me.

2) I never could get a grasp of the big picture -- how all the parts fit
together -- or don't. Starting from the Twisted root, the corpus seems to
branch out prolifically -- some branches fairly complete and useful, some
under active development, and some abandoned. I just couldn't tell which
was which.

3) Several people from the Twisted community generously offered guidance
and support. Of those, all but one knew little more than I did. These
stalworthy folks helped enormously with testing and identification of
various copy and code errors, but couldn't lead me toward forward
progress. The one person who knew his way through the thicket the way was
more than generous with his suggestions, but too time-constrained to give
much in the way of big picture.

By and large, I had the feeling that the core Twisted developers were
moving so fast exploiting Twisted and progeny commercially, that they had
little time for documentation or bringing others along behind them. No
complaint here; just stating a perception.

4) My own time constraints imposed severe limits on the time I could
commit to the projectd. As a result, I just couldn't learn enough fast
enough to meet a deadline I had for a web project of my own. The result, I
turned to another Python web framework and was able to make significant
progress within days -- not because the framework (Karrigell) was better
documented, but because it so was far less ambitious -- simple-minded even
-- that even a turkey like me could understand it.

I would like to return to Twisted. Indeed I would like to pick up the
Turkey series again if it is deemed helpful to the community. But to do so
I would need one or more talented technical mentors to keep me on a
productive path.

If not Turkey, then I'm still willing to provide all the help I can, given
my limited technical perspective, toward better Twisted documentation.
But, again, as a follower, not a leader.

Cheers, Terry. I'm pulling for your success.

Best wishes,

Lloyd R. Prentice




From lordvan at lordvan.com  Tue Jul  4 13:46:06 2006
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Tue Jul  4 13:46:38 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
References: <17576.28596.853691.126857@terry.jones.tc>
	<44A8945D.9010704@gmail.com>
Message-ID: <pan.2006.07.04.18.45.55.270324@lordvan.com>

On Sun, 02 Jul 2006 21:51:57 -0600, Duncan McGreggor wrote:

> Terry Jones wrote:
>> Here's a summary of thoughts I've had over the last month or so. Please try
>> to take the following as positive / constructive.
> Terry, that was a great email. Thanks for the time and consideration.
yep same here :)
> It seems there is a need for several tutorials/documentation updates to
> fill these needs. One of the greatest strengths of Nevow, though, is its
> flexibility. The combination of Twisted and Nevow almost provide more of
> a "meta web dev framework" than one of the "competing" web frameworks.
> And this naturally makes documentation of "the right way to do it"
> rather difficult. One solution may be a series of tutorials addressing
> various needs/circumstances while outlining the benefits/reasons for the
> given approach.
> 
> I've been thinking of writing a new tutorial lately. Maybe we should
> crank a few out... hmm, on that thought, maybe there should be a
> standard format for Nevow tutorials. "Intended Audience", "What this
> tutorial addresses", "What this tutorial doesn't address", "Components
> used", etc. Dunno. Just rambling now. Glad you're writing about this :-)
> 
> d
maybe it'd be a good idea to have write some templates for tutorials
and/or DTDs/Stylesheets (that if xml will be used) that way we could also
easily generate pdfs,.. i could probably help with that and maybe even a
bit with writing documentation though I haven't used nevow much (some
years ago I've written a complete working [and deployed] webshop using
woven - nevow's predecessor for those who don't know what it is ;) and it
worked great - definitely better than mvc (which was even before woven
hehe)

I really hope this will result in some good tutorials / examples (some of
the woven examples are quite good at the moment as they are (I like the
blog / wiki tutorials though I can't get them to work with current svn
*and* the code generated by axiomatic is quite different ..)

Regards

-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z- 
------END GEEK CODE BLOCK------



From onemoverx at gmail.com  Wed Jul  5 21:11:30 2006
From: onemoverx at gmail.com (=?ISO-8859-1?Q?Yunier_Rojas_Garc=EDa?=)
Date: Wed Jul  5 21:11:33 2006
Subject: [Twisted-web] twisted names server
Message-ID: <9f45496e0607051911p7c675637k489126fa07f77aaa@mail.gmail.com>

can anyone please tell me how can I make a simple dns server using
twisted.names?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060705/7c889d33/attachment.htm
From stephen at thorne.id.au  Wed Jul  5 22:02:53 2006
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed Jul  5 22:02:55 2006
Subject: [Twisted-web] twisted names server
In-Reply-To: <9f45496e0607051911p7c675637k489126fa07f77aaa@mail.gmail.com>
Message-ID: <20060706030253.29014.1646699407.divmod.quotient.24248@ohm>

On Wed, 5 Jul 2006 19:11:30 -0700, Yunier Rojas Garc?a <onemoverx@gmail.com> wrote:
>can anyone please tell me how can I make a simple dns server using
>twisted.names?
>

This is the wrong list for this question, but the answer is simple enough to simply present:

# read the help
mktap dns --help

# create the tap file
mktap names

# test the tap file
twistd --nodaemon --file=dns.py

# run the tap as a daemon
twistd --file=dns.py

I recommend possibly using the twistd --no_save option, to stop a dns-shutdown.tap file from being created (it's something so you can restart the server including all of its state, you probably don't need that).

Stephen.

From terry at jon.es  Thu Jul  6 12:25:34 2006
From: terry at jon.es (Terry Jones)
Date: Thu Jul  6 12:25:45 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: Your message at 19:46:06 on Tuesday, 4 July 2006
References: <17576.28596.853691.126857@terry.jones.tc>
	<44A8945D.9010704@gmail.com>
	<pan.2006.07.04.18.45.55.270324@lordvan.com>
Message-ID: <17581.18318.195399.166703@terry.jones.tc>

Thanks for all the very thoughtful replies to my long mail. I didn't mean
to whine about things and then just disappear back into the woodwork, I
just have to deal with various other things right now. I'm thinking about
what I wrote, the various replies, what might be effectively done, etc. I
hope to be able to follow up again soon.

Terry

From moebius.lists at gmail.com  Thu Jul  6 13:32:14 2006
From: moebius.lists at gmail.com (Adrian Perez)
Date: Thu Jul  6 13:35:55 2006
Subject: [Twisted-web] [Announce] Nevow-based weblog on the works
Message-ID: <20060706203214.0e777771@tron.foobar.homeunix.org>


Hello everybody!

As I mentioned earlier in the Twisted-Web mailing list, I'm coding a
OSS weblog which uses Nevow in my spare time. I started it two weeks
ago but haven't made a big progress because of exams. Now I will be on
holidays (about a week) and I would like you to know about it, because
I would like feedback from the community and some people asked for the
code. The weblog system is named Bic (like the ball-pens).

Currently, it boots up, shows up the main page, per-article pages, has
a form for adding articles, and articles may be edited. Talking with
the people at #divmod (FreeNode) they recommended me to avoid formless.
I plan to move to use formal instead.

Bic needs the Pyramid package in order to work. It's an utility library
I coded myself with some Python utilities I tend to use regularly. Some
notes not written elsewhere:

 - Accessing /article/<id> (or /<id>) will take you to an article given
   its identifier.
 - Accessing /article/<id>/edit (or /<id>/edit) allows for editing
   articles.
 - Accessing /new allows for writing an article (this will change).
 - Accessing /style yields a small page for the installes styles.
 - Adding "?lang=es" in the request URL changes the language to Spanish.
   (the thing has localization support, of course).

The thing is MIT-licensed and you can get a copy of the code if you
want:

 - Use bzr to get a working copy out of the repository:
   $ bzr get http://code.connectical.net/pyramid
   $ bzr get http://code.connectical.net/bic
   (You can also browse the latest revision with your favourite web
   browser.)

 - Get a tarred snapshot of my working copy, the URL is:
   http://code.connectical.net/nn-releases/pyramid+bic-20060706.tar.gz
   (The tarball includes both Bic and Pyramid.)

Any feedback will be greatly appreciated. I'm quite new to Nevow and
Twisted so I am willing to learn how to do the Right Thing(tm).

Best regards,

P.S: One final reminder: be sure to have Pyramid in your PYTHONPATH
before running the Bic tacfile with twistd ;-)

-- 
Adrian Perez
"Experience is what you get when you don't get what you want"
                                           -- (Dan Stanford)

From lloyd at paisite.com  Thu Jul  6 14:34:16 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Thu Jul  6 14:36:12 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted,  Nevow, etc.
In-Reply-To: <17581.18318.195399.166703@terry.jones.tc>
References: <17576.28596.853691.126857@terry.jones.tc>
	<44A8945D.9010704@gmail.com>
	<pan.2006.07.04.18.45.55.270324@lordvan.com>
	<17581.18318.195399.166703@terry.jones.tc>
Message-ID: <32886.206.173.68.153.1152214456.squirrel@www.wbsysnet.com>

Hi Terry,

On Thu, July 6, 2006 1:25 pm, Terry Jones wrote:

> Thanks for all the very thoughtful replies to my long mail. I didn't mean
>  to whine about things and then just disappear back into the woodwork, I
> just have to deal with various other things right now. I'm thinking about
>  what I wrote, the various replies, what might be effectively done, etc.
> I
> hope to be able to follow up again soon.

I was one of the respondents to your much welcomed critique of Twisted
documentation.

And I would like to explore with you and others how to contribute toward
improved Twisted documentation.

Here's what I've done to date to make Twisted more available to the less
technially astute:

http://twisted.paisite.com.

For reasons good and bad the Techno project is stalled, but it might be
worth picking up again.

It seems to me that one of the first questions in software documentation
is: "Who are we writing for?"

Given that, the next question is: "Who much or how little can we assume
that our consumers already know?"

Several questions, then, for the Twisted community:

-- Are we satisfied with the current level of adoption of Twisted in new
projects; e.g. do we want to remain a relatively small commmunity of elite
developers and user or would we like to attract and build a broader
community?

-- Is the corpus of Twisted documentation as it stands sufficiently
serving the needs of the community or is it holding back our efforts
toward longer-term goals?

-- What, if any, are the shortcomings of current documentation?

-- Is it possible for us, given all constraints, to better organize our
efforts toward improved documentation and, if so, how?

Here's my personal experience with Twisted:

I spent considerable time last year studying Twisted documentation. I was
encouraged by an assertion that the Twisted developers were hoping for
widest possible adoption of the Twisted framework. But as I moved further
into the docs I discovered that much of it was written in a highly
specialized argot -- jargon or precise technical language I'll let someone
else decide. But, with full acknowledgement of my own inexperience and
shortcomings, much of it was completely incomprehensible to me.

And looking at the source code I found numerous syntactical constructs
that I simply couldn't penetrate.

Now, granted, I had and still have limited experience with Linux, Python,
and object architectures. But I was highly motivated to learn what I
needed to know to use Twisted in my own projects.

As I widened my studies and dug deeper I discovered yet another problem:
Trying to discern a roadmap through the Twisted thickets was like
following a well-paved road that turned into graded dirt then diverged
into countless sandy paths that then faded into the desert. After several
weeks pursuing the fractal-like tracks I, for one, felt stranded far from
water and shade.

What finally did me in was a severe electrical storm which blew out the
machine on which I was doing my Twisted experimentation.

Now I take full responsibility for my own intellectual and experiential
shortcomings. Fact is, many good people put countless hours into creating
the Twisted corpus of code and documentation. And I'm grateful for every
minute of it. If they didn't reach me, it's not their problem. It's mine.

But as your critique attests, backed by many others on the various lists,
I'm not the only one looking enviously in on the party.

I would have liked very much to have mastered, or at least sufficiently
understood Twisted, to integrate it into my own projects, but there was
simply not world enough nor time given the current state of docs.

Now, encouraged by others seeking improved Twisted documentation, I'm
delighted to offer again my limited skills toward that goal. But I need
folks with knowledge beyond mine to lay out the path and point the way.

All the best,

Lloyd R. Prentice
President
Prentice Associates Incorported










From onemoverx at gmail.com  Fri Jul  7 01:12:37 2006
From: onemoverx at gmail.com (=?ISO-8859-1?Q?Yunier_Rojas_Garc=EDa?=)
Date: Fri Jul  7 01:12:42 2006
Subject: [Twisted-web] Re: Twisted-web Digest, Vol 28, Issue 8
In-Reply-To: <E1FyXDR-0005tW-02@pyramid.twistedmatrix.com>
References: <E1FyXDR-0005tW-02@pyramid.twistedmatrix.com>
Message-ID: <9f45496e0607062312k2b67dcd6i216a49a6dc0bc6b2@mail.gmail.com>

I want to make it from scratch, importing modules, but when I receive a
message I can't find the way to send it back with the correct answer, and in
the dns client (nslookup) says "no answer".

On 7/6/06, twisted-web-request@twistedmatrix.com <
twisted-web-request@twistedmatrix.com> wrote:
>
> Send Twisted-web mailing list submissions to
>         twisted-web@twistedmatrix.com
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> or, via email, send a message with subject or body 'help' to
>         twisted-web-request@twistedmatrix.com
>
> You can reach the person managing the list at
>         twisted-web-owner@twistedmatrix.com
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-web digest..."
>
>
> Today's Topics:
>
>    1. twisted names server ( Yunier Rojas Garc?a )
>    2. Re: twisted names server (Stephen Thorne)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Wed, 5 Jul 2006 19:11:30 -0700
> From: " Yunier Rojas Garc?a " <onemoverx@gmail.com>
> Subject: [Twisted-web] twisted names server
> To: twisted-web@twistedmatrix.com
> Message-ID:
>         <9f45496e0607051911p7c675637k489126fa07f77aaa@mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
>
> can anyone please tell me how can I make a simple dns server using
> twisted.names?
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL:
> http://twistedmatrix.com/pipermail/twisted-web/attachments/20060705/7c889d33/attachment-0001.htm
>
> ------------------------------
>
> Message: 2
> Date: Thu, 6 Jul 2006 13:02:53 +1000
> From: Stephen Thorne <stephen@thorne.id.au>
> Subject: Re: [Twisted-web] twisted names server
> To: Twisted Web World <twisted-web@twistedmatrix.com>
> Message-ID:
>         <20060706030253.29014.1646699407.divmod.quotient.24248@ohm>
> Content-Type: text/plain; format=flowed; charset=utf-8
>
> On Wed, 5 Jul 2006 19:11:30 -0700, Yunier Rojas Garc?a <
> onemoverx@gmail.com> wrote:
> >can anyone please tell me how can I make a simple dns server using
> >twisted.names?
> >
>
> This is the wrong list for this question, but the answer is simple enough
> to simply present:
>
> # read the help
> mktap dns --help
>
> # create the tap file
> mktap names
>
> # test the tap file
> twistd --nodaemon --file=dns.py
>
> # run the tap as a daemon
> twistd --file=dns.py
>
> I recommend possibly using the twistd --no_save option, to stop a
> dns-shutdown.tap file from being created (it's something so you can
> restart the server including all of its state, you probably don't need
> that).
>
> Stephen.
>
>
>
> ------------------------------
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
> End of Twisted-web Digest, Vol 28, Issue 8
> ******************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060706/d92df21b/attachment.htm
From dialtone at divmod.com  Fri Jul  7 07:10:51 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri Jul  7 07:10:59 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <32886.206.173.68.153.1152214456.squirrel@www.wbsysnet.com>
Message-ID: <20060707121052.29014.1459082577.divmod.quotient.26402@ohm>

On Thu, 6 Jul 2006 15:34:16 -0400 (EDT), lloyd@paisite.com wrote:
>It seems to me that one of the first questions in software documentation
>is: "Who are we writing for?"
>
>Given that, the next question is: "Who much or how little can we assume
>that our consumers already know?"
>
>Several questions, then, for the Twisted community:
>
>-- Are we satisfied with the current level of adoption of Twisted in new
>projects; e.g. do we want to remain a relatively small commmunity of elite
>developers and user or would we like to attract and build a broader
>community?

I don't think we can be satisfied but unfortunately IMHO the real problem with
twisted is not twisted itself but the big shift in the way you should think
that drives away most people. I know many intelligent and very capable
programmers that do understand twisted (or are able to) but they do not intend
to learn it because they feel it's hard while threading isn't as hard as we
picture it. Having more and better documentation will help, many graphs about
how things actually work _DO_ help but you can do only so much to attract
new people.

One of the most needed things is to collect a page inside twisted documentation
about the many reasons why threading is harder than the twisted approach and
why. Currently there are many documents that try to explain this at various levels
but a single, clear and simple one is missing. Even writing two alternatives
using the two different models could probably help.

>-- Is the corpus of Twisted documentation as it stands sufficiently
>serving the needs of the community or is it holding back our efforts
>toward longer-term goals?

I don't think I can answer this question. When I first learnt twisted I used
the documentation and found it pretty good.

>-- What, if any, are the shortcomings of current documentation?

Maybe it's too concise. Every word in the current documentation must be carefully
read because it's meaning is incredibly important to actually understand the text.
Some things are implicit in the meaning given to that word and are never explained.

>-- Is it possible for us, given all constraints, to better organize our
>efforts toward improved documentation and, if so, how?
>
>Here's my personal experience with Twisted:
>
>I spent considerable time last year studying Twisted documentation. I was
>encouraged by an assertion that the Twisted developers were hoping for
>widest possible adoption of the Twisted framework. But as I moved further
>into the docs I discovered that much of it was written in a highly
>specialized argot -- jargon or precise technical language I'll let someone
>else decide. But, with full acknowledgement of my own inexperience and
>shortcomings, much of it was completely incomprehensible to me.

Yes, that's what I mean by 'concise'.

>And looking at the source code I found numerous syntactical constructs
>that I simply couldn't penetrate.

This is another 'defect'. Twisted developers are extremely capable in python and
they tend to use the language as much as possible. Of course this requires the
same knowledge from the reader.

In my opinion this is a good thing overall, the only problem is that sometimes
docstrings are missing and this makes reading code harder than it could be.

HTH :)

From ldanielburr at mac.com  Fri Jul  7 08:36:25 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Fri Jul  7 08:36:30 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <20060707121052.29014.1459082577.divmod.quotient.26402@ohm>
References: <20060707121052.29014.1459082577.divmod.quotient.26402@ohm>
Message-ID: <op.tcbmqzxn3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Fri, 07 Jul 2006 07:10:51 -0500, Valentino Volonghi aka Dialtone  
<dialtone@divmod.com> wrote:

> On Thu, 6 Jul 2006 15:34:16 -0400 (EDT), lloyd@paisite.com wrote:
>> It seems to me that one of the first questions in software documentation
>> is: "Who are we writing for?"
>>
>> Given that, the next question is: "Who much or how little can we assume
>> that our consumers already know?"
>>
>> Several questions, then, for the Twisted community:
>>
>> -- Are we satisfied with the current level of adoption of Twisted in new
>> projects; e.g. do we want to remain a relatively small commmunity of  
>> elite
>> developers and user or would we like to attract and build a broader
>> community?
>
> I don't think we can be satisfied but unfortunately IMHO the real  
> problem with
> twisted is not twisted itself but the big shift in the way you should  
> think
> that drives away most people. I know many intelligent and very capable
> programmers that do understand twisted (or are able to) but they do not  
> intend
> to learn it because they feel it's hard while threading isn't as hard as  
> we
> picture it. Having more and better documentation will help, many graphs  
> about
> how things actually work _DO_ help but you can do only so much to attract
> new people.
>

I think that worrying about attracting an audience that prefers to use the
thread-based approach is doomed to failure, in the same way that inviting
a conservative to adopt liberal ideals is doomed to failure.

> One of the most needed things is to collect a page inside twisted  
> documentation
> about the many reasons why threading is harder than the twisted approach  
> and
> why. Currently there are many documents that try to explain this at  
> various levels
> but a single, clear and simple one is missing. Even writing two  
> alternatives
> using the two different models could probably help.
>

I don't think this would help much either, in that people who like to
use threads most definitely do *not* see them as being harder to use
than the twisted approach; on the contrary, they find threads to be far
more natural to their way of thinking, and most of them have never run
into the kinds of serious problems that threading can introduce.  I
sincerely believe that until a person actually encounters a serious
thread-related problem, they cannot be convinced to adopt anything that
does what twisted does.

>> -- Is the corpus of Twisted documentation as it stands sufficiently
>> serving the needs of the community or is it holding back our efforts
>> toward longer-term goals?
>
> I don't think I can answer this question. When I first learnt twisted I  
> used
> the documentation and found it pretty good.
>

I have to agree here.  I have used twisted since the 0.9 days, and I have
always found the documentation to be perfectly adequate.  Honestly, while
I recognize that the vast majority of interested parties find the docs to
be incomplete or confusing, I have never had the problem, and so I am
struggling somewhat in understanding how to solve it.

Note that I am the furthest thing from an expert programmer, in any field,
so I don't think the "only really smart people can understand twisted"
argument doesn't hold in my case.  Quite the opposite, actually; I use
twisted because it solves a lot of the hard problems for me, and I can
just concentrate on my application.

Perhaps the problem is that the twisted docs primarily teach the theory
of operation (Deferreds, Protocols, etc.).  For someone like myself, the
theory of operation is exactly what I want to know.  For others, I suspect
there is more value in documentation that covers things of a very specific
nature, such as "how to build a web application that talks to a database",
or "how to build a DNS server", or other such use-case-oriented fare.

If so, then the real problem is that using twisted requires you to learn
the underlying structure (Deferreds, Protocols, etc) before you can get
started on your application.  There is a movement these days in many
projects to get the user up and running without any prior understanding,
the thinking being that they will pick up the details later, as needed.
Personally, my brain doesn't work that way, but I know many people who
cannot tolerate my approach, and find it unbearably slow.

So, maybe a "Build a real, working, application in 15 minutes" is the
kind of fare needed to make twisted more palatable to the audience that
is currently being frustrated in achieving twisted zen.

L. Daniel Burr

From lloyd at paisite.com  Fri Jul  7 12:13:48 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Fri Jul  7 12:15:38 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted,  Nevow, etc.
In-Reply-To: <20060707121052.29014.1459082577.divmod.quotient.26402@ohm>
References: <32886.206.173.68.153.1152214456.squirrel@www.wbsysnet.com>
	<20060707121052.29014.1459082577.divmod.quotient.26402@ohm>
Message-ID: <33389.206.173.68.153.1152292428.squirrel@www.wbsysnet.com>

Hi Valentino,

On Fri, July 7, 2006 8:10 am, Valentino Volonghi aka Dialtone wrote:

> I don't think we can be satisfied but unfortunately IMHO the real problem
> with twisted is not twisted itself but the big shift in the way you should
> think that drives away most people. I know many intelligent and very
> capable programmers that do understand twisted (or are able to) but they
> do not intend to learn it because they feel it's hard while threading
> isn't as hard as we picture it.

This doesn't really get at my mental stumbling blocks. I find the
arguments for adopting the Twisted approach quite compelling -- indeed
they've fueled my interest and attempts to understand. I think I
understand the theory -- if somewhat dimly. But, for me, there seem to be
big gaps in the explanatory connections between theory, application, and
code. I can't look at a snippet of Twisted code and tell you why it was
written the way it was; much less write my own code.

It's quite possible that I need more hand-holding than the majority. And
it may not be of interest to the community, nor simply cost-effective, to
reach down to folks at my level of incompetence. But, look at it another
way, if I can be made to understand through better documentation then you
know you're reaching the widest possible audience.

Think of me as a tough unit test for documentation.

Note that I have not looked at the documentation in nearly a year; it may
very well have improved substantially since then.

> Even writing two alternatives using the two different models
> could probably help.

As I recall, one of the Python books does this.

Code that I can enter, run, and experiment with is definitely helpful in
my case. One of the problems that I have with many of the code examples in
the Twisted docs is that I don't understand what they're intended to do
nor why I would want to do it. May very well be just the widget I need,
but lack of context keeps me in the dark.

I'm referring here to many of the examples in:

http://twistedmatrix.com/projects/web/documentation/examples/

> I don't think I can answer this question. When I first learnt twisted I
> used the documentation and found it pretty good.

Others have said this as well, so clearly the docs are good so far as they
go. The question is, can they be improved to reach a wider audience and,
if so, how? And are there enough generous folks around with the time,
will, and competencies to make it happen?

> Maybe it's too concise. Every word in the current documentation must be
> carefully read because it's meaning is incredibly important to actually
> understand the text. Some things are implicit in the meaning given to that
> word and are never explained.

Amen.

I found that when I tried to track down enlightening definitions of many
of the technical terms in the Twisted documentation I got stuck in
tautological loops. This was a clue to me that some of the documentation
is the language of an in-group who have worked together closely enough and
long enough to have a large body of tacit understandings and assumptions
that have not found their way into the docs.

This is not a bad thing, per se -- as long as the in-group is only talking
among itself. But it does point to a strategy for improving the docs to
make them more accessable to more people.

Years ago, general semantist S. I. Hayakawa proposed the "ladder of
abstraction." Many language constructs, he proposed, can be arrayed on a
"ladder of abstraction," starting at the first rung with, say, a pointing
operation (I point to Bessie the cow grazing in the field) and ranging up
through "Bessie," a symbolic tag attached to the perceptual object; "cow;"
"ruminant;" "livestock;" "agricultural asset;" and "enterprise capital,"
etc. If I'm thinking Bessie and use the term "agricultural asset," you may
picture a tractor in your mind and... we've just miscommunicated by a fair
stretch.

Anyway, this is old stuff. The solution is not to avoid abstractions --
they're powerful and useful -- but to be careful in using highly abstract
words... qualify them by moving down the ladder of abstraction as far as
possible, ideally to a pointing operation -- in our case, an object
diagram or a working code snippet.

> This is another 'defect'. Twisted developers are extremely capable in
> python and they tend to use the language as much as possible. Of course
> this requires the same knowledge from the reader.

I'm not sure I would call this a defect. We want developers to write the
most efficient code possible. But if a world-class programmer needs less
competent programmers to understand and/or support or use the code, then
he/she is obligated to provide contextual documentation that communicates
at  a level that the code consumers can understand. And, if the programmer
can't do it, then he/she would be wise to recruit/enlist competent
documentation writers and spend the time necessary to help them understand
what they need to know.

I understand, of course, that in the all-volunteer open source army, this
is a difficult thing to do.

>
> In my opinion this is a good thing overall, the only problem is that
> sometimes docstrings are missing and this makes reading code harder than
> it could be.

Yes, clearer and more abundant docstrings would definitely help me, at
least. As would better definitions of technical terms, with explanatory
examples, illustrations, diagrams and code snippets where this would help;
and more short application examples with thorough contextual explanations
of why the code was written the way it was.

Many thanks, Valentino, for your thoughtful consideration of the issue.

Do you have the time and will to help me develop more Techno Turkey
Adventures?

Best wishes,

Lloyd R. Prentice


From corydodt at twistedmatrix.com  Fri Jul  7 13:56:45 2006
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri Jul  7 13:50:51 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <op.tcbmqzxn3oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <20060707121052.29014.1459082577.divmod.quotient.26402@ohm>
	<op.tcbmqzxn3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <44AEAE6D.6090000@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

L. Daniel Burr wrote:
> On Fri, 07 Jul 2006 07:10:51 -0500, Valentino Volonghi aka Dialtone
> 
> I think that worrying about attracting an audience that prefers to use the
> thread-based approach is doomed to failure, in the same way that inviting
> a conservative to adopt liberal ideals is doomed to failure.

Well said.  Let's focus on the positives of Twisted, not the negatives of
threading.  The ones I always come back to are integrating multiple protocols
and absurdly easy development of new protocols.  The big cloud of utilities
like t.py.usage, the service framework, etc. are also big plusses.

Stuff like 'better than threads' and 'integrates with all these gui toolkits'
are not so much evangelism features as they are *reactions to objections to
Twisted*.  Specifically, they are reactions objections that "threading is
easier" and "but I can't use Twisted with GTK/qt/...".  We need to document
those things, but if your goal in writing documentation is to get the reader
hooked early on, put the other stuff first.


> I don't think this would help much either, in that people who like to
> use threads most definitely do *not* see them as being harder to use
> than the twisted approach; on the contrary, they find threads to be far
> more natural to their way of thinking, and most of them have never run
> into the kinds of serious problems that threading can introduce.  I
> sincerely believe that until a person actually encounters a serious
> thread-related problem, they cannot be convinced to adopt anything that
> does what twisted does.

I can actually quibble with this notion from personal experience: I used
Twisted before I did more than very trivial experiments with threading.  I
read and understood in concept the problems with threading.  Only later on,
when I tried to use threads in my Twisted programs did I encounter the hazards
of threading.

This is important because it anecdotally demonstrates that programmers don't
always go straight to threads.  If they understand from the start that
concurrency is going to be hard, they will be (as I was) suspicious of what
threads do, and might (as I did) seek experts who've done this stuff before.

I don't think we can control who goes to threads and who goes to the
asynchronous model, but there will be some of each.

> I have to agree here.  I have used twisted since the 0.9 days, and I have
> always found the documentation to be perfectly adequate.  Honestly, while
> I recognize that the vast majority of interested parties find the docs to
> be incomplete or confusing, I have never had the problem, and so I am
> struggling somewhat in understanding how to solve it.

I think I understand the problem.  The problem is that concurrency is hard.
If you're a new programmer, and you want to start with "a simple network game"
(because somebody told you not to start with Doom), you're going to discover
all kinds of complexity that your brain isn't formatted to handle.

And Twisted's documentation doesn't do that for you.  It assumes that you
understand that new programmers should start with a simple *text processor*,
not a simple network game, then work up to a simple clone of nibbles, then
maybe give a personal IRC bot a try, then ...

It assumes, in short, that you've already done all that, and you're ready to
write a real application at this level.  Should it mention that that other
ground must be covered first or you'll be unhappy with the results?  It could.
Should it cover all that ground for you?  No way.

It's not about how smart you are, it's about whether you have the relevant
experience to write an application that actually needs Twisted.  I think
anyone who actually has the experience necessary to tackle an application with
concurrency is going to find the doc a lot more friendly than someone who
doesn't.  I don't know that that's Twisted's fault.



> Perhaps the problem is that the twisted docs primarily teach the theory
> of operation (Deferreds, Protocols, etc.).  For someone like myself, the
> theory of operation is exactly what I want to know.  For others, I suspect
> there is more value in documentation that covers things of a very specific
> nature, such as "how to build a web application that talks to a database",
> or "how to build a DNS server", or other such use-case-oriented fare.
> ...
> So, maybe a "Build a real, working, application in 15 minutes" is the
> kind of fare needed to make twisted more palatable to the audience that
> is currently being frustrated in achieving twisted zen.
>

Totally agree here, but I still think someone who is ready to "build a web
application that talks to a database" is going to understand the walkthrough a
lot better than someone who isn't.  (I thought the finger tutorial actually
covered that, but I guess it doesn't on quick skim-through.)


Just a final thought: there's still lots of areas that *aren't* adequately
documented by anyone's standards.  There are areas not covered by examples,
there are areas not covered by HOWTO's.  The core is covered, but any new
application worth writing probably uses stuff from the fringes.  So our
hypothetical new Twisted user starts out writing her new application, gets a
handle on the core stuff, and then discovers those gaps in the fringes.  That
can be frustrating.  Everyone uses a different part of the fringes, so the
fringes need to be covered almost as well as the core.

C

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (MingW32)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFErq5t3A5SrXAiHQcRAkUEAJ9nvBkTSq1/M43lm+XWTmlbfUdVDgCeMfUs
4QQgyJYHgK1qVpD1zPosEtA=
=A5qF
-----END PGP SIGNATURE-----

From dialtone at divmod.com  Fri Jul  7 15:20:38 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri Jul  7 15:20:40 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <33389.206.173.68.153.1152292428.squirrel@www.wbsysnet.com>
Message-ID: <20060707202038.29014.1549767371.divmod.quotient.26931@ohm>

On Fri, 7 Jul 2006 13:13:48 -0400 (EDT), lloyd@paisite.com wrote:

>Note that I have not looked at the documentation in nearly a year; it may
>very well have improved substantially since then.

Indeed it has but not enough probably.

>Code that I can enter, run, and experiment with is definitely helpful in
>my case. One of the problems that I have with many of the code examples in
>the Twisted docs is that I don't understand what they're intended to do
>nor why I would want to do it. May very well be just the widget I need,
>but lack of context keeps me in the dark.
>
>I'm referring here to many of the examples in:
>
>http://twistedmatrix.com/projects/web/documentation/examples/

This is a matter of documenting examples... a problem pretty common with all
the twisted-related frameworks I know.

>I'm not sure I would call this a defect. We want developers to write the
>most efficient code possible. But if a world-class programmer needs less
>competent programmers to understand and/or support or use the code, then
>he/she is obligated to provide contextual documentation that communicates
>at  a level that the code consumers can understand. And, if the programmer
>can't do it, then he/she would be wise to recruit/enlist competent
>documentation writers and spend the time necessary to help them understand
>what they need to know.
>
>I understand, of course, that in the all-volunteer open source army, this
>is a difficult thing to do.

It's harder the smaller the community is, the only fact that we are discussing
about improving documentation means that the community is growing anyway.

>Many thanks, Valentino, for your thoughtful consideration of the issue.
>
>Do you have the time and will to help me develop more Techno Turkey
>Adventures?

I wouldn't mind helping out, hopefully the discussion can take place in this
mailing list so that other people (if they want) can help answering/completing/
fixing/evaluating what we write.

Thanks for bringing up this topic anyway.

From lloyd at paisite.com  Fri Jul  7 17:17:39 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Fri Jul  7 17:19:29 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted,  Nevow, etc.
In-Reply-To: <20060707202038.29014.1549767371.divmod.quotient.26931@ohm>
References: <33389.206.173.68.153.1152292428.squirrel@www.wbsysnet.com>
	<20060707202038.29014.1549767371.divmod.quotient.26931@ohm>
Message-ID: <33572.206.173.68.153.1152310659.squirrel@www.wbsysnet.com>

On Fri, July 7, 2006 4:20 pm, Valentino Volonghi aka Dialtone wrote:
> On Fri, 7 Jul 2006 13:13:48 -0400 (EDT), lloyd@paisite.com wrote:

>> Do you have the time and will to help me develop more Techno Turkey
>> Adventures?
>>
>
> I wouldn't mind helping out, hopefully the discussion can take place in
> this mailing list so that other people (if they want) can help
> answering/completing/ fixing/evaluating what we write.
>

Many thanks.

I need to rebuild my Twisted environment -- got blasted away last year by
an electrical storm. I'll try to have it back up sometime next week.

Meanwhile, as you'll note in http:twisted.paisite.com, we had developed
four adventures focusing on twisted.web. The last adventure brought up a
very simple-minded web-page. I waved my hands a bit in explicating the
code. I'm  not fully comfortable yet with the concepts introduced.

It would be tremendously helpful to have a road-map that spells out a
step-by-step development of concepts and suggested programming excercises
designed to deepen the programmer's understanding of Twisted and how to
effectively apply it. In other words, "where next? ...and next?"

I'm not competent enough to lay out the road-map nor to write the
exemplary code.

Each step in the road-map, then can be the subject of back-and-forth Q&A
aimed at bringing crystal clarity to the concepts and guiding the
development of code examples.

With enough people participating it could be fun, without an undue amount
of work for any one person. I can probably contribute best by asking
Mickey-the-Dunce questions and pulling it together into Turkeyese.

Thanks again,

Lloyd




From hartshorne at gmail.com  Fri Jul  7 17:27:51 2006
From: hartshorne at gmail.com (Beau Hartshorne)
Date: Fri Jul  7 17:28:05 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <20060707202038.29014.1549767371.divmod.quotient.26931@ohm>
References: <20060707202038.29014.1549767371.divmod.quotient.26931@ohm>
Message-ID: <54387916-D058-4C18-A430-95C9AE622388@gmail.com>

On 7-Jul-06, at 1:20 PM, Valentino Volonghi aka Dialtone wrote:

> I wouldn't mind helping out, hopefully the discussion can take  
> place in this
> mailing list so that other people (if they want) can help answering/ 
> completing/
> fixing/evaluating what we write.

What do you think about task-oriented snippets and instructions, like  
a Twisted Cookbook? It might make writing and consuming the  
documentation a bit less daunting. Can anyone come up with say ten  
common questions that come up on the list?

From p.mayers at imperial.ac.uk  Fri Jul  7 18:14:38 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri Jul  7 18:14:47 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <44AEAE6D.6090000@twistedmatrix.com>
References: <20060707121052.29014.1459082577.divmod.quotient.26402@ohm>	<op.tcbmqzxn3oj628@l-daniel-burrs-powerbook-g4-17.local>
	<44AEAE6D.6090000@twistedmatrix.com>
Message-ID: <44AEEADE.9000007@imperial.ac.uk>

Cory Dodt wrote:
>>
>> I think that worrying about attracting an audience that prefers to use the
>> thread-based approach is doomed to failure, in the same way that inviting
>> a conservative to adopt liberal ideals is doomed to failure.

Yes!

> 
> I can actually quibble with this notion from personal experience: I used
> Twisted before I did more than very trivial experiments with threading.  I
> read and understood in concept the problems with threading.  Only later on,
> when I tried to use threads in my Twisted programs did I encounter the hazards
> of threading.

Same here.

Ages ago, at about the age of 21 when I was less smart but harder 
working and NIH seemed like a reason, I wrote a parallel SNMP poller. I 
copied the mainloop straight out of fping and ported it to python.

It was trivially obvious even in my naivety that no thread-based 
approach was going to serve ~3000 simultaneous "threads". I looked at 
Stackless, but it (foolishly IMHO) was derided by the BDFL. I didn't 
know about Twisted or asyncore (shudder - though when I did finally see 
it I retched on my keyboard). But I immediately understood the problem 
and the correct solution.

Twisted was something I found later on to do away with my custom loop 
code and concentrate on application code. Now I can tack a web interface 
onto the poller. Oh, and an SSH CLI. Oh, and an SNMP *proxy*.


> 
> This is important because it anecdotally demonstrates that programmers don't
> always go straight to threads.  If they understand from the start that
> concurrency is going to be hard, they will be (as I was) suspicious of what
> threads do, and might (as I did) seek experts who've done this stuff before.

If Python were Erlang (i.e. had stackless), Twisted would not exist. But 
it's not, so it does.

> 
> I think I understand the problem.  The problem is that concurrency is hard.
> If you're a new programmer, and you want to start with "a simple network game"
> (because somebody told you not to start with Doom), you're going to discover
> all kinds of complexity that your brain isn't formatted to handle.

Yep. Simple problems have simple solutions. Complex problems - anyone 
even contemplating solving them has a good chance of knowing why the 
simple solutions have failed.

> 
> It's not about how smart you are, it's about whether you have the relevant
> experience to write an application that actually needs Twisted.  I think

Yes, yes, yes!

> anyone who actually has the experience necessary to tackle an application with
> concurrency is going to find the doc a lot more friendly than someone who
> doesn't.  I don't know that that's Twisted's fault.

It certainly is not.

The previous two mails encapsulate to my mind the core of the issue. 
Anyone who needs Twisted, knows it. Anyone who doesn't cannot be 
persuaded otherwise. They will either discover it, or never need it (and 
more power to them - but that's not me).

Though it rankles, maybe advertising Twisted as a "specialist" framework 
would make more sense?

From dialtone at divmod.com  Fri Jul  7 19:05:10 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri Jul  7 19:05:14 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <33572.206.173.68.153.1152310659.squirrel@www.wbsysnet.com>
Message-ID: <20060708000510.29014.836322568.divmod.quotient.27179@ohm>

On Fri, 7 Jul 2006 18:17:39 -0400 (EDT), lloyd@paisite.com wrote:
>Many thanks.

Thank you :)

>I'm not competent enough to lay out the road-map nor to write the
>exemplary code.

I'll read the adventures and come back here tomorrow with my proposed roadmap that we can discuss then :).

From dialtone at divmod.com  Fri Jul  7 19:12:26 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri Jul  7 19:12:28 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <54387916-D058-4C18-A430-95C9AE622388@gmail.com>
Message-ID: <20060708001226.29014.400477565.divmod.quotient.27190@ohm>

On Fri, 7 Jul 2006 15:27:51 -0700, Beau Hartshorne <hartshorne@gmail.com> wrote:
>What do you think about task-oriented snippets and instructions, like  a 
>Twisted Cookbook? It might make writing and consuming the  documentation a 
>bit less daunting. Can anyone come up with say ten  common questions that 
>come up on the list?

The main question is for sure the following:
- How can I authenticate with guard using a database? (talk about writing checkers)
- How can I use an ORM inside Nevow? (talk about Axiom, twisted.enterprise.adbapi, sqlalchemy+sAsync or simpler transactionToThread)
- How do I handle forms in Nevow? (talk about formal)
- What's the preferred way to share global state in a Nevow application? (talk about passing something in the root page and having the root page to pass that over and over to all children)
- How do I do nested sequences? (there's already an example, should be better documented)
- Man I hate how nested data_* directives behave, what are they doing? (talk about IContainer)
- What is a macro? (talk about one-time renderers)

And other questions that currently I can't remember.

From glyph at divmod.com  Fri Jul  7 19:36:22 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Jul  7 19:36:24 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <44AEEADE.9000007@imperial.ac.uk>
Message-ID: <20060708003622.29014.1974054599.divmod.quotient.27222@ohm>

On Sat, 08 Jul 2006 00:14:38 +0100, Phil Mayers <p.mayers@imperial.ac.uk> wrote:

>If Python were Erlang (i.e. had stackless), Twisted would not exist. But 
>it's not, so it does.

I think that Twisted might still exist.  The protocol implementations in the standard library are pretty bad and it includes very few servers.  Stackless itself, for example, does not include a viable competitor to Twisted (or at least it didn't, when I last looked at it).

The idea behind Twisted is, event driven programming is cool, but we need a standard event model (reactor) in order to write cooperating event-driven programs.  You need this even if your lanaguage supports continuations and coroutines, unless the language itself has _very_ good internal process control and I/O management -- few do.

Python's recent efforts to grow asynchronous coroutines (yield expressions, etc) are a great example of why this is not a language problem, it's a library and support and conventions problem.  The language can give you some support, but unless the runtime is built around these concepts and already includes the support code and conventions that you need, syntax and one-off VM features won't help.

>The previous two mails encapsulate to my mind the core of the issue. Anyone 
>who needs Twisted, knows it. Anyone who doesn't cannot be persuaded 
>otherwise. They will either discover it, or never need it (and more power to 
>them - but that's not me).

This is not quite true.  There are certainly a lot of Python applications - especially the GNOME GUI stuff - that would be a lot better off if they used Twisted but there is a cultural opposition or ignorance of Twisted.

>Though it rankles, maybe advertising Twisted as a "specialist" framework 
>would make more sense?

It's not specialist though.  It's generally useful in a huge variety of problem domains.  Even if you're just doing IPC, not network IO, Twisted can help prevent deadlocks and generally make applications a lot more robust.  The "specialist" label is an unnecessary compromise; if our documentation is crap for some of those domains, then let's just say *that*, and all work to improve it, rather than pretend that there is something wrong with the technology itself as an excuse.  If we officially say "this is not a general-purpose tool", then pretty soon all the functionality it provides outside the "specialist" area we artificially create for it will atrophy and eventually be removed.

From hartshorne at gmail.com  Fri Jul  7 20:58:52 2006
From: hartshorne at gmail.com (Beau Hartshorne)
Date: Fri Jul  7 20:59:01 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <20060708001226.29014.400477565.divmod.quotient.27190@ohm>
References: <20060708001226.29014.400477565.divmod.quotient.27190@ohm>
Message-ID: <41D7FA25-F1A3-4351-8B77-907080EA4E2C@gmail.com>

On 7-Jul-06, at 5:12 PM, Valentino Volonghi aka Dialtone wrote:

> The main question is for sure the following:
> - How can I authenticate with guard using a database? (talk about  
> writing checkers)
> - How can I use an ORM inside Nevow? (talk about Axiom,  
> twisted.enterprise.adbapi, sqlalchemy+sAsync or simpler  
> transactionToThread)
> - How do I handle forms in Nevow? (talk about formal)
> - What's the preferred way to share global state in a Nevow  
> application? (talk about passing something in the root page and  
> having the root page to pass that over and over to all children)
> - How do I do nested sequences? (there's already an example, should  
> be better documented)
> - Man I hate how nested data_* directives behave, what are they  
> doing? (talk about IContainer)
> - What is a macro? (talk about one-time renderers)
>
> And other questions that currently I can't remember.

Those sound more like a FAQ. How about titles more like:
- Authenticating Web Users
- Using ORMs (Databases)
- Parse and Validate a Form
- Share Global State
- Rendering Nested Sequences
- Nested Data Directives
- One-time Renderers

And maybe:
- User Sessions
- Virtual Host Setup

From dreid at dreid.org  Sat Jul  8 00:18:26 2006
From: dreid at dreid.org (David Reid)
Date: Sat Jul  8 00:18:34 2006
Subject: [Twisted-web] Bay Area Twisted Sprint - July 15th and 16th
Message-ID: <44AF4022.5050002@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

This is the official announcement of the Bay Area Twisted Sprint.  It is
to be held on July 15th and 16th at the offices of Three Rings Design
Inc. (the people who brought you that wonderful tool of procrastination
"Puzzle Pirates")  which are located at:

612 Howard St, Suite 500
San Francisco, CA 94150
Google Map: http://tinyurl.com/pb588

The sprint will last from 10am-8pm on Saturday the 15th and Sunday the
16th, and will focus on closing outstanding bugs (perhaps followed by
some sort of maintenance releases.) If you're going to be attending the
sprint reply to this email so that our gracious hosts have some idea of
what to expect.

Thanks
- -David

- --
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.3 (Darwin)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFEr0AirsrO6aeULcgRAvgVAKCJkgO7r/4Bstck16GS3VaYArRUnACfXv8s
sE45pM4dGEdPAQ5hok4IyCs=
=gfYe
-----END PGP SIGNATURE-----

From manlio_perillo at libero.it  Sat Jul  8 03:21:58 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Jul  8 03:19:42 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <20060708001226.29014.400477565.divmod.quotient.27190@ohm>
References: <20060708001226.29014.400477565.divmod.quotient.27190@ohm>
Message-ID: <44AF6B26.1020108@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> [...]

> The main question is for sure the following:

> [...]

> And other questions that currently I can't remember.
>

One little thing is how to use sessions (this is explained in the Woven
tutorial
http://twistedmatrix.com/projects/web/documentation/howto/picturepile.html).

I also would like to see documented how guard works.

It does a little black magic with redirects and it try to works even
with no cookies(?); and I still does not understand how to use guard
without cred integration.
There was an example on the wiki but it is incomplete (and now I can't
find it anymore...)



Thanks and regards  Manlio Perillo

From exarkun at divmod.com  Sat Jul  8 10:57:02 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Jul  8 10:57:06 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <44AF6B26.1020108@libero.it>
Message-ID: <20060708155702.29014.2137085223.divmod.quotient.28063@ohm>

On Sat, 08 Jul 2006 06:21:58 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Valentino Volonghi aka Dialtone ha scritto:
>> [...]
>
>> The main question is for sure the following:
>
>> [...]
>
>> And other questions that currently I can't remember.
>>
>
>One little thing is how to use sessions (this is explained in the Woven
>tutorial
>http://twistedmatrix.com/projects/web/documentation/howto/picturepile.html).
>
>I also would like to see documented how guard works.
>
>It does a little black magic with redirects and it try to works even
>with no cookies(?); and I still does not understand how to use guard
>without cred integration.
>There was an example on the wiki but it is incomplete (and now I can't
>find it anymore...)
>

Guard *is* cred integration.  It doesn't make sense to try to use guard
without cred.

Jean-Paul

From lloyd at paisite.com  Sat Jul  8 11:17:52 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Sat Jul  8 11:19:47 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted, Nevow, etc.
In-Reply-To: <41D7FA25-F1A3-4351-8B77-907080EA4E2C@gmail.com>
References: <20060708001226.29014.400477565.divmod.quotient.27190@ohm>
	<41D7FA25-F1A3-4351-8B77-907080EA4E2C@gmail.com>
Message-ID: <32989.206.173.68.153.1152375472.squirrel@www.wbsysnet.com>

Hello,

Wow!

You folks are amazing. I'm really stoked by the energies behind the last
twenty-four hours of list traffic.

Let me try to summarize/synthesize as best I can. Welcome all
restatements, additions, and excisions.

-- At the end of several insightful comments, Cary Dodt said:

...there's still lots of areas that *aren't* adequately
documented by anyone's standards.  There are areas not covered by examples,
there are areas not covered by HOWTO's.  The core is covered, but any new
application worth writing probably uses stuff from the fringes.  So our
hypothetical new Twisted user starts out writing her new application, gets a
handle on the core stuff, and then discovers those gaps in the fringes. 
That can be frustrating.  Everyone uses a different part of the fringes,
so the fringes need to be covered almost as well as the core.

-- L. Daniel Burr and Valentino Volonghi generously offered help in
resurrecting the Turkey series.

-- Beau Hartshorne suggested:

...What do you think about task-oriented snippets and instructions, like
a Twisted Cookbook? It might make writing and consuming the
documentation a bit less daunting. Can anyone come up with say ten
common questions that come up on the list?

-- L. Daniel Burr responded to my suggestion of a road map:

...As for a roadmap, I think sticking with web-oriented topics is best for
the vast majority of users.  Most people are building web-apps today, so
they represent a large audience.

After perhaps adding some more details to your existing "Hello World"
example, we could move on to "Talking to a database", then the usual
"A web page that talks to a database".  After that you could start
talking about templating, etc.

--Valentino the rolled up his sleeves with the following excellent
suggestions for Turkey topics:

...The main question is for sure the following:

- How can I authenticate with guard using a database? (talk about writing
checkers)

- How can I use an ORM inside Nevow? (talk about Axiom,
twisted.enterprise.adbapi, sqlalchemy+sAsync or simpler
transactionToThread)

- How do I handle forms in Nevow? (talk about formal)

- What's the preferred way to share global state in a Nevow application?
(talk about passing something in the root page and having the root page to
pass that over and over to all children)

- How do I do nested sequences? (there's already an example, should be
better documented)

- Man I hate how nested data_* directives behave, what are they doing?
(talk about IContainer)

- What is a macro? (talk about one-time renderers)

--glyph reminded us that our task could be of value to many people and
covers substantial ground:

...It's (Twisted) generally useful in a huge variety of problem
domains.  Even if you're just doing IPC, not network IO, Twisted can help
prevent deadlocks and generally make applications a lot more robust.  The
"specialist" label is an unnecessary compromise; if our documentation is
crap for some of those domains, then let's just say *that*, and all work
to improve it, rather than pretend that there is something wrong with the
technology itself as an excuse.  If we officially say "this is not a
general-purpose tool", then pretty soon all the functionality it provides
outside the "specialist" area we artificially create for it will atrophy
and eventually be removed.

--Beau Hartshorne elegantly refined Valentino's road-map suggestions:

...How about titles more like:

- Authenticating Web Users
- Using ORMs (Databases)
- Parse and Validate a Form
- Share Global State
- Rendering Nested Sequences
- Nested Data Directives
- One-time Renderers
- User Sessions
- Virtual Host Setup

With these suggestions I believe we're well on our way.

Questions:

--Does Beau's list cover the necessary and sufficient application issues,
conceptual concepts, and code objects and components to bring a newbie to
reasonable competency when it comes to building websites and applications 
in good Twisted form and style?

--Is the list sequenced to build from least assumptions about prior
knowledge to most?

--Should we have an adventure dealing with site security and/or putting a
Twisted site into production?

--The Turkey adventures to date had more-or-less the following structure:

- Short, runnable code example
- Discussion of anticipated results
- Discussion of how it works -- concepts, theory, references to Twisted
docs and source
- Conclusion

Can this structure be improved?

Seems to me that with another round or two of hammering on the road map we
will be well on our way toward developing some real adventures.

Hat's off to all...

Lloyd












From manlio_perillo at libero.it  Sat Jul  8 12:12:52 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Jul  8 12:10:40 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <20060708155702.29014.2137085223.divmod.quotient.28063@ohm>
References: <20060708155702.29014.2137085223.divmod.quotient.28063@ohm>
Message-ID: <44AFE794.8000605@libero.it>

Jean-Paul Calderone ha scritto:
>> I also would like to see documented how guard works.
>>
>> It does a little black magic with redirects and it try to works even
>> with no cookies(?); and I still does not understand how to use guard
>> without cred integration.
>> There was an example on the wiki but it is incomplete (and now I can't
>> find it anymore...)
>>
> 
> Guard *is* cred integration.  It doesn't make sense to try to use guard
> without cred.
> 

As I can see, SessionWrapper is for direct cred integration.
But in the wiki I have seen an example that uses GuardSession directly.

My problem is really with sessions.



Regaeds  Manlio Perillo

From dialtone at divmod.com  Sat Jul  8 13:33:18 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sat Jul  8 13:33:19 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <32989.206.173.68.153.1152375472.squirrel@www.wbsysnet.com>
Message-ID: <20060708183318.29014.2046941954.divmod.quotient.28174@ohm>

On Sat, 8 Jul 2006 12:17:52 -0400 (EDT), lloyd@paisite.com wrote:
>...How about titles more like:
>
>- Authenticating Web Users
>- Using ORMs (Databases)
>- Parse and Validate a Form
>- Share Global State
>- Rendering Nested Sequences
>- Nested Data Directives
>- One-time Renderers
>- User Sessions
>- Virtual Host Setup
>
>With these suggestions I believe we're well on our way.
>
>Questions:
>
>--Does Beau's list cover the necessary and sufficient application issues,
>conceptual concepts, and code objects and components to bring a newbie to
>reasonable competency when it comes to building websites and applications
>in good Twisted form and style?

There's probably one or two more questions:

- What's the difference between macros, data, renders and fragments? How do they
  relate to each other?

- Why is the Templating like it is? Does it work well with designers?

>--Is the list sequenced to build from least assumptions about prior
>knowledge to most?

Not really. Let's reorder:

- IResource interface
- Virtual Host Setup
- User Sessions
- Templating engine (nested sequences, macros, fragments, data, renderers)
- Share Global State
- Using ORMs (Databases)
- Authenticating Web Users
- Per-user State

>--Should we have an adventure dealing with site security and/or putting a
>Twisted site into production?

I think so.
We should talk about integrating with lighttpd and apache like it is already
partly explained in divmod.org trac wiki.

>--The Turkey adventures to date had more-or-less the following structure:
>
>- Short, runnable code example
>- Discussion of anticipated results
>- Discussion of how it works -- concepts, theory, references to Twisted
>docs and source
>- Conclusion
>
>Can this structure be improved?

I think it's fine enough.

From duncan.mcgreggor at gmail.com  Sat Jul  8 13:47:02 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat Jul  8 13:47:12 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <20060708183318.29014.2046941954.divmod.quotient.28174@ohm>
References: <20060708183318.29014.2046941954.divmod.quotient.28174@ohm>
Message-ID: <44AFFDA6.9000101@gmail.com>

Valentino Volonghi aka Dialtone wrote:

>> --Is the list sequenced to build from least assumptions about prior
>> knowledge to most?
> 
> Not really. Let's reorder:
> 
> - IResource interface
> - Virtual Host Setup
> - User Sessions
> - Templating engine (nested sequences, macros, fragments, data, renderers)
> - Share Global State
> - Using ORMs (Databases)
> - Authenticating Web Users
> - Per-user State
> 
>> --Should we have an adventure dealing with site security and/or putting a
>> Twisted site into production?
> 
> I think so.
> We should talk about integrating with lighttpd and apache like it is
> already
> partly explained in divmod.org trac wiki.

Fanboy time: this is exciting, guys :-) I am both looking forward to
seeing where this as well as participating.

From manlio_perillo at libero.it  Sat Jul  8 14:17:11 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Jul  8 14:14:53 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <20060708183318.29014.2046941954.divmod.quotient.28174@ohm>
References: <20060708183318.29014.2046941954.divmod.quotient.28174@ohm>
Message-ID: <44B004B7.20406@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
>> Can this structure be improved?
> 
> I think it's fine enough.
>

I whould like to suggest to add a complete tutorial, like done for
Twisted Core and Woven.

The problem is to found an application with which one can introduce each
concept incrementally (including, hopefully, Athena - but *not* Axiom).

pastebin?



Regards  Manlio Perillo

From ldanielburr at mac.com  Sat Jul  8 14:34:57 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Sat Jul  8 14:35:09 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <44B004B7.20406@libero.it>
References: <20060708183318.29014.2046941954.divmod.quotient.28174@ohm>
	<44B004B7.20406@libero.it>
Message-ID: <op.tcdx0jvo3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Sat, 08 Jul 2006 14:17:11 -0500, Manlio Perillo  
<manlio_perillo@libero.it> wrote:
>
> I whould like to suggest to add a complete tutorial, like done for
> Twisted Core and Woven.
>
> The problem is to found an application with which one can introduce each
> concept incrementally (including, hopefully, Athena - but *not* Axiom).
>

Sure, people like the incremental approach.  The Finger tutorial does the
same thing, but unfortunately I don't think Finger is the kind of example
that interests people.

> pastebin?
>

I think a pastebin tutorial would suffer from the same problems as the
current Finger tutorial.  How many people want actually want to build a
pastebin?  I'm seriously curious; my guess is that the answer is "not
very many".

How about a simple CRUD application?  They are all the rage these days,
and we could create one step by step, using photos or audio files as the
example data to be managed.

Also, I think a CRUD tutorial would provide a great way to showcase some
of the features that make twisted and company so great.

L. Daniel Burr

From terry at jon.es  Sat Jul  8 20:06:14 2006
From: terry at jon.es (Terry Jones)
Date: Sat Jul  8 20:06:25 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted, Nevow, etc.
In-Reply-To: Your message at 12:17:52 on Saturday, 8 July 2006
References: <20060708001226.29014.400477565.divmod.quotient.27190@ohm>
	<41D7FA25-F1A3-4351-8B77-907080EA4E2C@gmail.com>
	<32989.206.173.68.153.1152375472.squirrel@www.wbsysnet.com>
Message-ID: <17584.22150.292264.501331@terry.jones.tc>

I'm not sure which of the many messages to followup on, so I've picked
LLoyd's summary. Below are a couple of thoughts on the recent posts.

First of all, I wasn't meaning to single out the core of Twisted when
talking about documentation. Like some others, I also find the core to be
relatively well documented. But there are a variety of additional
components (as well as parts of the core, I assume) that seem much less
well documented, and some parts that are now deprecated or discontinued
but, confusingly, for which apparently current documentation is still
online. So I don't think we should simply focus on the core part of
Twisted.

I thought Cory's comment was good:

Cory> Just a final thought: there's still lots of areas that *aren't*
Cory> adequately documented by anyone's standards.  There are areas not
Cory> covered by examples, there are areas not covered by HOWTO's.  The
Cory> core is covered, but any new application worth writing probably uses
Cory> stuff from the fringes.  So our hypothetical new Twisted user starts
Cory> out writing her new application, gets a handle on the core stuff, and
Cory> then discovers those gaps in the fringes.  That can be frustrating.
Cory> Everyone uses a different part of the fringes, so the fringes need to
Cory> be covered almost as well as the core.

My feeling is that the documentation falls off pretty steeply. E.g., guard
and sessions in Nevow. There's a lot going on in quard.py. I don't think
this is a particularly fringe issue - in fact it seems likely to be quite
central to many people using twisted.web.

I like the idea of a cookbook with recipes written by various people. That
sounds like it might be the most useful thing to me anyway. I like the
O'Reilly Cookbook series. E.g., the Python and Perl cookbooks. They are
immediately useful, even to a complete newbie. A cookbook distributes
responsibility and allows indefinite expansion. It would be good to have a
cookbook coordinator to set standards on appearance, maintain the cookbook
pages online etc. If someone were really keen, they could approach O'Reilly.

I think it's important that we make an effort to ensure that whatever we
produce does not go out of date. If I (for example) decide to write
something up but I don't commit to maintaining it, then when it inevitably
becomes outdated it begins the slide towards increasing harm and decreasing
good.

Along these lines, and given the power and beauty of Twisted :-), I would
think it should be possible to have a documentation framework in which
example code from a cookbook could be verified as still working. Of course
this requires more time and programmer effort. But it's already clear that
better documentation will have to be a joint effort between people who feel
like helping by writing and people who feel like helping by explaining
things.

One danger along these lines (this is something I mailed Matt Goodall about
wrt Nevow) is that you don't want the framework to obscure clarity. I.e.,
you don't want an all-powerful framework that hides many things, cutting
the examples to the barest elegant minimum, because the poor reader then
has to (potentially) try to figure out how to work backwards and construct
working standalone code given just a fragment from an example.

I'm not saying this is easy - it's not - just that it's a desirable goal.
One way I've done something like this is to have a collection of templates,
and you use make (or other) to cat these together (and test) entire
examples while just including relevant fragments in other documentation.
Again, this needs programmer help to set up.

We should differentiate between trying to help people who want to use
Twisted and people who are shopping around. Both are valid targets for
people who want to write, but we may as well keep the two clearly
separated.

In terms of the latter (people trying to understand what Twisted is, why
they might want it), I think something like the finger example (translated
out of the 1980s) is very compelling. It's one of the things that sold me.
That particular example would benefit from having the new code in each step
highlighted. Look at how much the finger example covers. As I wrote to some
friends a couple of months ago:

    | The following has a great example of the kind of thing you can do
    | with Twisted.
    | 
    | http://twistedmatrix.com/projects/core/documentation/howto/tutorial/index.html
    | 
    | You don't need to read it all of course.  Below is a bullet-point
    | summary of what they do on those pages.
    |
    | Amazingly, the final code is just 225 non-blank lines. If you remove
    | the one-line {class,def,import} statements, and comments, you're left
    | with a mere 118 lines of code. In case it's not clear, the end point
    | is a server doing everything mentioned below, all at the same
    | time. So they wind up handling about 6 different protocols on 6
    | different ports, each one independently pluggable.

You ain't going to be doing anything like that with Django, TurboGears, or
RoR anytime soon - unless I'm greatly mistaken.

So, threading vs async aside, I don't think it's hard to differentiate
Twisted from what I think of as just "web" frameworks - which are all
focused on building web sites.

Glyph - thanks for the vote of confidence, but I can't step up to be the
Nevow documentation coordinator. I just have too much going on, and I think
it would be bad to undertake something like that without feeling like I was
going to commit to continuing for some time, to maintaining it etc. I hope
I can do other things, like write a cookbook chapter, or write code to help
set up a documentation framework, or, my personal choice, use Twisted to
make millions and then just send you cash...

Terry

From lloyd at paisite.com  Mon Jul 10 10:25:35 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Mon Jul 10 10:27:32 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted,  Nevow, etc.
In-Reply-To: <20060708183318.29014.2046941954.divmod.quotient.28174@ohm>
References: <32989.206.173.68.153.1152375472.squirrel@www.wbsysnet.com>
	<20060708183318.29014.2046941954.divmod.quotient.28174@ohm>
Message-ID: <33771.206.173.68.153.1152545135.squirrel@www.wbsysnet.com>

Hi Valentino,

I've consolidated your excellent suggestions below:

- IResource interface
- Virtual host setup
- User sessions
- Templating -- who needs it?
- Templating engine (nested sequences, macros, fragments, data, renderers)
- Share global state
- Using ORMs (databases)
- Authenticating web wsers
- Per-user state
- Web-server trade-offs -- Twisted vs. Apache vs. lighttpd
- Twisted in production
- Twisted security

This tentative roadmap, I'm sure, will be further developed and refined as
we go. But, for now, I think it gives us a good place to start.

Given the structure of existing adventures; e.g.

- Short, runnable code example
- Discussion of anticipated results
- Discussion of how it works -- concepts, theory, references to Twisted
docs and source
- Conclusion

...I've copied the code for Turkey's most recent adventure below. How can
we future develop this or, or start with a new code example, to best
explicate the IResource interface? References to existing documentation
would be helpful.

Meanwhile, I'll work over the next couple of days to bring my Turkey
environment back up and will update the Turkey site with the new roadmap.

Note that Duncan MacGregor has expressed interest in participating...

(Thanks, Duncan. And welcome! Please feel free to jump in. We'll need code
examples, clear, concise conceptual discussions and definitions of
technical terms, testing/debugging when we post new code, critical
editorial eyeballing.)

And Manlio Perillo and L. Daniel Burr have suggested that this series
should focus on building an application -- pastepot or CRUD (Don't know
myself what either of those are). This warrants further discussion. For my
part, I like the idea, but have the following reservations:

-- I'd like to keep the adventures as generic as possible across many
potential applications; I fear that focusing on one application may limit
our scope.

-- Different folks may have widely different levels of interest in
different applications, whereas we all need to master the basics.

-- Developing a production-ready application may get us into a bunch of
nitty-gritty stuff that doesn't have much to do with Twisted, but does
have a lot to do with good programming practice.

That said, maybe after we've covered the basics, using the example of a
good application to put it all together may be an excellent idea. I don't
think we're talking either/or here.

Also, Terry Jones has raised some very pertainent issues -- well worth
further discussion. I'l throw in my two cents in a separate post.

Best wishes,

Lloyd

PS Here's the last code example from Techno Turkey's Adventures:

Matt Goodall's Barebones Dynamic Web Server

from twisted.application import internet, service
from twisted.web import resource, server

LOGPATH = './logs/access.log'
PORT = 8080

class DynamicResource(resource.Resource):
    """A simple, dynamic resource with a name.
    """

    def __init__(self, name):
        resource.Resource.__init__(self)
        self.name = name

    def getChild(self, name, request):
        # if the child's name is '' - the empty segment - then return
        # myself.
        if name == '':
            return self
        # Return an instance of my type with the requested segment name.
        return DynamicResource(name)

    def render(self, request):
        return '<html><p>I am a Dynamic Resource. My name is
%r.</p></html>' % (self.name)

application = service.Application('web-server')
site = server.Site(DynamicResource('root'), logPath=LOGPATH)
internet.TCPServer(PORT, site).setServiceParent(application)




From ldanielburr at mac.com  Mon Jul 10 10:49:43 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Jul 10 10:49:57 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <33771.206.173.68.153.1152545135.squirrel@www.wbsysnet.com>
References: <32989.206.173.68.153.1152375472.squirrel@www.wbsysnet.com>
	<20060708183318.29014.2046941954.divmod.quotient.28174@ohm>
	<33771.206.173.68.153.1152545135.squirrel@www.wbsysnet.com>
Message-ID: <op.tchcw5p73oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Lloyd,


On Mon, 10 Jul 2006 10:25:35 -0500, <lloyd@paisite.com> wrote:

[snip]

> And Manlio Perillo and L. Daniel Burr have suggested that this series
> should focus on building an application -- pastepot or CRUD (Don't know
> myself what either of those are). This warrants further discussion. For  
> my
> part, I like the idea, but have the following reservations:
>

CRUD is just an acronym for Create, Read, Update, Delete, and so-called
"CRUD apps" have become a popular litmus test for how handy/useful a
web application framework is.  The typical CRUD application is used as
an example of how to use a framework to talk to an RDBMS, render data
as HTML, edit data, delete it, etc.  This sort of tutorial is popular
because a large number of web applications boil down to providing a
web UI for editing some data that lives in a database, hence my suggestion.

> -- I'd like to keep the adventures as generic as possible across many
> potential applications; I fear that focusing on one application may limit
> our scope.
>

See above.  CRUD is pretty generic.

> -- Different folks may have widely different levels of interest in
> different applications, whereas we all need to master the basics.
>
> -- Developing a production-ready application may get us into a bunch of
> nitty-gritty stuff that doesn't have much to do with Twisted, but does
> have a lot to do with good programming practice.
>

My suspicion is that the people looking for tutorials and quick-start type
of documentation are, in fact, trying to build a production application in
a big hurry, and want to find something to build on.  With that in mind, I
think that working up to a simple, but production-ready application would
meet with a great deal of approval.

> That said, maybe after we've covered the basics, using the example of a
> good application to put it all together may be an excellent idea. I don't
> think we're talking either/or here.
>

Agreed.

[snip]

> PS Here's the last code example from Techno Turkey's Adventures:
>
> Matt Goodall's Barebones Dynamic Web Server
>
> from twisted.application import internet, service
> from twisted.web import resource, server
>
> LOGPATH = './logs/access.log'
> PORT = 8080
>
> class DynamicResource(resource.Resource):
>     """A simple, dynamic resource with a name.
>     """
>
>     def __init__(self, name):
>         resource.Resource.__init__(self)
>         self.name = name
>
>     def getChild(self, name, request):
>         # if the child's name is '' - the empty segment - then return
>         # myself.
>         if name == '':
>             return self
>         # Return an instance of my type with the requested segment name.
>         return DynamicResource(name)
>
>     def render(self, request):
>         return '<html><p>I am a Dynamic Resource. My name is
> %r.</p></html>' % (self.name)
>
> application = service.Application('web-server')
> site = server.Site(DynamicResource('root'), logPath=LOGPATH)
> internet.TCPServer(PORT, site).setServiceParent(application)
>

The only thing I don't like about this example is that DynamicResource
is returning an instance of itself for requests to childrend of itself.

Granted, this is perfectly legitimate, but I think it introduces some
potential confusion for a new reader.  I would suggest just creating
a "ChildResource" (the nevow examples directory does this), and
perhaps returning that instead, to make it more clear what is being
done in getChild.

Thanks for everyone's efforts and feedback on this, I think we are
headed in the right direction now, and perhaps we will attain the
critical mass of contributions needed to make this documentation effort
a success.

L. Daniel Burr

From lloyd at paisite.com  Mon Jul 10 13:12:38 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Mon Jul 10 13:14:36 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted, Nevow, etc.
In-Reply-To: <op.tchcw5p73oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <32989.206.173.68.153.1152375472.squirrel@www.wbsysnet.com>
	<20060708183318.29014.2046941954.divmod.quotient.28174@ohm>
	<33771.206.173.68.153.1152545135.squirrel@www.wbsysnet.com>
	<op.tchcw5p73oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <33127.206.173.68.153.1152555158.squirrel@www.wbsysnet.com>

Hi Daniel,

On Mon, July 10, 2006 11:49 am, L. Daniel Burr wrote:

>
> CRUD is just an acronym for Create, Read, Update, Delete, and so-called
> "CRUD apps" have become a popular litmus test for how handy/useful a
> web application framework is.  The typical CRUD application is used as an
> example of how to use a framework to talk to an RDBMS, render data as
> HTML, edit data, delete it, etc.  This sort of tutorial is popular
> because a large number of web applications boil down to providing a web UI
> for editing some data that lives in a database, hence my suggestion.

OK. Yeah, does sound valuable way-station in our journey. Where or how
would you see it fitting into, or modifying the road map that I posted
this morning?

>>
>> Matt Goodall's Barebones Dynamic Web Server
>>

>
> The only thing I don't like about this example is that DynamicResource
> is returning an instance of itself for requests to childrend of itself.
>
> Granted, this is perfectly legitimate, but I think it introduces some
> potential confusion for a new reader.  I would suggest just creating a
> "ChildResource" (the nevow examples directory does this), and
> perhaps returning that instead, to make it more clear what is being done in
> getChild.

Can you post modified code and flesh out your critique? Might be good next
step, better preparing us for IResources.

What do you think, Valentino?

All the best,

Lloyd



From dialtone at divmod.com  Tue Jul 11 07:07:37 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Jul 11 07:07:42 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <33127.206.173.68.153.1152555158.squirrel@www.wbsysnet.com>
Message-ID: <20060711120737.29014.1432765793.divmod.quotient.31668@ohm>

On Mon, 10 Jul 2006 14:12:38 -0400 (EDT), lloyd@paisite.com wrote:
>Can you post modified code and flesh out your critique? Might be good next
>step, better preparing us for IResources.
>
>What do you think, Valentino?

For IResource the right example is most_basic which uses the following code:

from zope.interface import implements

from nevow import inevow

##
## How does a request come to the Page?
##
## or How to use Nevow without all the fancy automations
##

# This is a simple Root page object, the inevow.IResource interface
# tells us that it must implement 2 methods:
# locateChild and renderHTTP.
# locateChild is used to find children of the current page, it must return a 
# tuple of (page, remaining_segments)
# if there is no page, and you want to display a 404 page, you will need to return
# a None, () tuple.
class Root(object):
    implements(inevow.IResource)

    def locateChild(self, ctx, segments):
        # This locateChild is 'stupid' since it can only work if the tree of
        # pages is static. Anyway it will work for our simple example
        if segments[0] == '':
            # If the server is looking for the root page segments will be ('',)
            # then renderHTTP will be called on self
            return self, ()
        elif segments[0] == 'foo':
            # Now we received a request whose segments had in the first position
            # the string foo
            # like http://example.org/foo/baz/ -> ('foo', 'baz')
            # after the page has been located we return it with the remaining segments
            # ('baz')
            return self.foo, segments[1:]
        else:
            return None, ()
        
    def renderHTTP(self, ctx):
        # When the server needs to return a response to the request it will call
        # the renderHTTP method that will return a string of what needs to be sent.
        return """<html><body>Hello world!<br />
        <a href="./foo" id="foo">foo</a></body></html>
"""

class Foo(object):
    implements(inevow.IResource)
    
    def locateChild(self, ctx, segments):
        # segments is the remaining segments returned by the root locateChild
        # see segments[1:]
        if segments[0] == 'baz':
            return self.baz, segments[1:]
        else:
            return None, ()
    
    def renderHTTP(self, ctx):
        return """<html><body><h1 id="heading">You are in Foo</h1>
        <a href="./foo/baz" id="baz">baz</a></body></html>
"""

class Baz(object):
    implements(inevow.IResource)
    def locateChild(self, ctx, segments):
        return None, ()
    def renderHTTP(self, ctx):
        return '<html><body><h1 id="heading">You are in Baz</h1></body></html>'

# We are adding children to the pages.
# This could also happen inside the class.
root = Root()
root.foo = Foo()
root.foo.baz = Baz()

This example was written with the clear intent to just show the IResource interface separated from Nevow. Keep in mind that this is the IResource interface from Nevow and not the one from twisted.web.

From lloyd at paisite.com  Tue Jul 11 14:10:58 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Tue Jul 11 14:12:59 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted,  Nevow, etc.
In-Reply-To: <20060711120737.29014.1432765793.divmod.quotient.31668@ohm>
References: <33127.206.173.68.153.1152555158.squirrel@www.wbsysnet.com>
	<20060711120737.29014.1432765793.divmod.quotient.31668@ohm>
Message-ID: <32885.206.173.68.153.1152645058.squirrel@www.wbsysnet.com>

Hi Valentino,

On Tue, July 11, 2006 8:07 am, Valentino Volonghi aka Dialtone wrote:

> For IResource the right example is most_basic which uses the following
> code:

Note that I've added the road map to http://twisted.paisite.com.

When I started to rebuild my Twisted environment, I realized that version
updates may have broken Turkey Adventures one through four.

Todo list:

1. Retest Adventures one through four using current Twisted versions.
2. Update Adventures one through four if necessary

Once I have my environment back up I'll try to tackle these two tasks. If
anyone else feels so inclined, feel free to jump in.

Re: IRequest code:

Great start, Valentino!

Questions:

-- Does this need some kind or wrapper to run it or will it run as is?
-- What's the step-by-step procedure to get it running?
-- What should we see when we do get it running?
-- How does it work?
-- From the big picture point-of-view, what have we learned by running
this code?

Best wishes,

Lloyd


>
>
> from zope.interface import implements
>
> from nevow import inevow
>
> ##
> ## How does a request come to the Page?
> ##
> ## or How to use Nevow without all the fancy automations
> ##
>
>
> # This is a simple Root page object, the inevow.IResource interface
> # tells us that it must implement 2 methods:
> # locateChild and renderHTTP.
> # locateChild is used to find children of the current page, it must return
> a # tuple of (page, remaining_segments)
> # if there is no page, and you want to display a 404 page, you will need
> to return # a None, () tuple.
> class Root(object): implements(inevow.IResource)
>
> def locateChild(self, ctx, segments): # This locateChild is 'stupid' since
> it can only work if the tree of # pages is static. Anyway it will work for
> our simple example if segments[0] == '': # If the server is looking for the
> root page segments will be ('',) # then renderHTTP will be called on self
> return self, () elif segments[0] == 'foo': # Now we received a request
whose
> segments had in the first position # the string foo
> # like http://example.org/foo/baz/ -> ('foo', 'baz')
> # after the page has been located we return it with the remaining segments
>  # ('baz')
> return self.foo, segments[1:] else:
> return None, ()
>
> def renderHTTP(self, ctx): # When the server needs to return a response to
> the request it will call # the renderHTTP method that will return a string
> of what needs to be sent. return """<html><body>Hello world!<br /> <a
> href="./foo" id="foo">foo</a></body></html> """
>
>
> class Foo(object): implements(inevow.IResource)
>
> def locateChild(self, ctx, segments): # segments is the remaining segments
> returned by the root locateChild # see segments[1:]
> if segments[0] == 'baz': return self.baz, segments[1:] else:
> return None, ()
>
> def renderHTTP(self, ctx): return """<html><body><h1 id="heading">You are
> in Foo</h1> <a href="./foo/baz" id="baz">baz</a></body></html>
> """
>
>
> class Baz(object): implements(inevow.IResource) def locateChild(self, ctx,
> segments):
> return None, () def renderHTTP(self, ctx): return '<html><body><h1
> id="heading">You are in Baz</h1></body></html>'
>
> # We are adding children to the pages.
> # This could also happen inside the class.
> root = Root() root.foo = Foo() root.foo.baz = Baz()
>
> This example was written with the clear intent to just show the IResource
> interface separated from Nevow. Keep in mind that this is the IResource
> interface from Nevow and not the one from twisted.web.
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
>



From div.shekhar at gmail.com  Tue Jul 11 14:41:16 2006
From: div.shekhar at gmail.com (Div Shekhar)
Date: Tue Jul 11 14:41:19 2006
Subject: [Twisted-web] web2: reverse dns lookup in twisted reactor thread
Message-ID: <9d4e27520607111241k649c9e2xcfff79279ebb21a0@mail.gmail.com>

Hi,

I've been using web2 for WSGI apps for a few months, and it's been
working fine. However, I did run into one bug this week:

web2 does a reverse dns lookup of the client ip address, and in the
twisted reactor thread, no less! When the dns server is unreachable,
this delays that http request and blocks twisted as well.

I'm planning to solve this by commenting out line 490 in
twisted/web2/channel/http.py:

        host.host = _cachedGetHostByAddr(host.host)

I'd recommend that this lookup be moved to wsgi thread and/or be
turned off by default. Just wanted to check - am I missing something?

Cheers,
Div.

From ldanielburr at mac.com  Tue Jul 11 15:37:17 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue Jul 11 15:37:23 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <32885.206.173.68.153.1152645058.squirrel@www.wbsysnet.com>
References: <33127.206.173.68.153.1152555158.squirrel@www.wbsysnet.com>
	<20060711120737.29014.1432765793.divmod.quotient.31668@ohm>
	<32885.206.173.68.153.1152645058.squirrel@www.wbsysnet.com>
Message-ID: <op.tcjkwfqi3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Tue, 11 Jul 2006 14:10:58 -0500, <lloyd@paisite.com> wrote:

[snip]

> Re: IRequest code:
>

I've got some suggestion for this IResource example, which I will
detail below.

>> from zope.interface import implements
>>
>> from nevow import inevow
>>
>> ##
>> ## How does a request come to the Page?

I'd really prefer to be talking about Resources right from the very
start, rather than web pages.  Note that I mean Resource as in: "The
thing that a URL points to".  Web applications are becoming a bit
less page-centric these days, so it might be helpful to start the
reader off with the Resource concept, rather than talking about
pages.

>> ##
>> ## or How to use Nevow without all the fancy automations
>> ##
>>
>>
>> # This is a simple Root page object, the inevow.IResource interface

Maybe something like this:

"This is a simple resource, representing the root, or top-most resource
of this site.  The inevow.IResource interface..."

>> # tells us that it must implement 2 methods:
>> # locateChild and renderHTTP.
>> # locateChild is used to find children of the current page, it must  
>> return
>> a # tuple of (page, remaining_segments)
>> # if there is no page, and you want to display a 404 page, you will need
>> to return # a None, () tuple.

Let's make this simpler: nevow.rend.NotFound is a much more convenient
and readable way to spell "None, ()".  So, I'd suggest we change this to
something like the following:

"locateChild is used to find children of the current resource.  It must
return a tuple of (resource, remaining_segments).  If no child resource
exists at this location, you may return nevow.rend.NotFound."

This ignores the fact that you could also return your own custom error
resource, but maybe that should be saved for later docs?

>> class Root(object): implements(inevow.IResource)
>>
>> def locateChild(self, ctx, segments): # This locateChild is 'stupid'  
>> since
>> it can only work if the tree of # pages is static. Anyway it will work  
>> for

"if the tree of resources is static"

>> our simple example if segments[0] == '': # If the server is looking for  
>> the
>> root page segments will be ('',) # then renderHTTP will be called on  
>> self
>> return self, () elif segments[0] == 'foo': # Now we received a request
> whose
>> segments had in the first position # the string foo
>> # like http://example.org/foo/baz/ -> ('foo', 'baz')
>> # after the page has been located we return it with the remaining  
>> segments
>>  # ('baz')
>> return self.foo, segments[1:] else:
>> return None, ()
return
>>
>> def renderHTTP(self, ctx): # When the server needs to return a response  
>> to
>> the request it will call # the renderHTTP method that will return a  
>> string
>> of what needs to be sent. return """<html><body>Hello world!<br /> <a
>> href="./foo" id="foo">foo</a></body></html> """
>>
>>
>> class Foo(object): implements(inevow.IResource)
>>
>> def locateChild(self, ctx, segments): # segments is the remaining  
>> segments
>> returned by the root locateChild # see segments[1:]
>> if segments[0] == 'baz': return self.baz, segments[1:] else:
>> return None, ()
>>

"return rend.NotFound"

In general, I think it is better to replace the word "page" with "resource"
so that we don't lock readers into thinking of everything as a page; so
much of what make twisted and nevow handy comes into play when you stop
thinking about web pages as the unit of work, and think about resources.

Anyone agree, violently disagree?

L. Daniel Burr

From glyph at divmod.com  Tue Jul 11 16:14:58 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Tue Jul 11 16:15:00 2006
Subject: [Twisted-web] web2: reverse dns lookup in twisted reactor thread
In-Reply-To: <9d4e27520607111241k649c9e2xcfff79279ebb21a0@mail.gmail.com>
Message-ID: <20060711211458.29014.1034035343.divmod.quotient.32259@ohm>

On Wed, 12 Jul 2006 01:11:16 +0530, Div Shekhar <div.shekhar@gmail.com> wrote:

>I'm planning to solve this by commenting out line 490 in
>twisted/web2/channel/http.py:
>
>        host.host = _cachedGetHostByAddr(host.host)
>
>I'd recommend that this lookup be moved to wsgi thread and/or be
>turned off by default. Just wanted to check - am I missing something?

Wow, thanks for bringing that to my attention.  There's a lot wrong with that function.

 - There's no docstring explaining why the cache is necessary, e.g. why your local caching nameserver isn't good enough.

 - It sets the "host" attribute on the transport, which is not documented by ITransport.

 - As you've noticed, it uses gethostbyaddr rather than the reactor's resolver.  If it really needs to use a hostname, and not a numeric address, it's going to need to return a Deferred.

 - "ISSLTransport(x, None) is not None" seems to have evolved into an idiom, but I'm pretty sure that this is just a reflection of the bad, old interfaces system.  Anybody else know if there's a reason for this rather than a providedBy check?

I'll wait a bit for someone who knows about why it is the way it is before making tickets though.

From foom at fuhm.net  Tue Jul 11 17:01:07 2006
From: foom at fuhm.net (James Y Knight)
Date: Tue Jul 11 17:02:00 2006
Subject: [Twisted-web] web2: reverse dns lookup in twisted reactor thread
In-Reply-To: <9d4e27520607111241k649c9e2xcfff79279ebb21a0@mail.gmail.com>
References: <9d4e27520607111241k649c9e2xcfff79279ebb21a0@mail.gmail.com>
Message-ID: <83E6109F-74C1-4A2F-87C6-E416DD449FB4@fuhm.net>


On Jul 11, 2006, at 3:41 PM, Div Shekhar wrote:

> Hi,
>
> I've been using web2 for WSGI apps for a few months, and it's been
> working fine. However, I did run into one bug this week:
>
> web2 does a reverse dns lookup of the client ip address, and in the
> twisted reactor thread, no less! When the dns server is unreachable,
> this delays that http request and blocks twisted as well.
>
> I'm planning to solve this by commenting out line 490 in
> twisted/web2/channel/http.py:
>
>        host.host = _cachedGetHostByAddr(host.host)
>
> I'd recommend that this lookup be moved to wsgi thread and/or be
> turned off by default. Just wanted to check - am I missing something?

You're missing that it's looking up the _server_ hostname based on  
the _server_ ip address. Therefore, it can only blocks on the dns  
server once per server IP address.

James

From lloyd at paisite.com  Tue Jul 11 17:35:05 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Tue Jul 11 17:37:41 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted, Nevow, etc.
In-Reply-To: <op.tcjkwfqi3oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <33127.206.173.68.153.1152555158.squirrel@www.wbsysnet.com>
	<20060711120737.29014.1432765793.divmod.quotient.31668@ohm>
	<32885.206.173.68.153.1152645058.squirrel@www.wbsysnet.com>
	<op.tcjkwfqi3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <33149.206.173.68.153.1152657305.squirrel@www.wbsysnet.com>

Hi Daniel,

On Tue, July 11, 2006 4:37 pm, L. Daniel Burr wrote:

> I've got some suggestion for this IResource example, which I will
> detail below.

Valentino is better qualified to respond than I. But you've convinced
me... provided that we have a really good definition of "Resource."

"Resource" is one of the concepts that baffled me last year. I couldn't
get my head around what folks were talking about. Your phrase "The thing
that a URL.points to..." definitely helps me see the bigger picture.
Saying this, I realize that my own work has been moving away from the
simple "set of linked pages" model. The Resource concept should give me
better language to talk about what I've been doing.

Since naive folks like me are accustomed to thinking in terms of "pages,"
it would probably be good to sharpen up and present your argument that
many web apps today have more complex structures than "set of linked
pages." We could explicitly point out that  abstracting the notion of
"page" to "Resource," opens the mind to more creative possiblies, then
present a few examples of these possibilties. We should definitely include
"page" as an an example of a "Resource," along with a few other examples.

Want to try your hand at a crisp, evocative definition with examples?

Many thanks,

Lloyd

>
>>> from zope.interface import implements
>>>
>>> from nevow import inevow
>>>
>>> ##
>>> ## How does a request come to the Page?
>>>
>
> I'd really prefer to be talking about Resources right from the very
> start, rather than web pages.  Note that I mean Resource as in: "The thing
> that a URL points to".  Web applications are becoming a bit less
> page-centric these days, so it might be helpful to start the reader off
> with the Resource concept, rather than talking about pages.
>
>>> ##
>>> ## or How to use Nevow without all the fancy automations
>>> ##
>>>
>>>
>>>
>>> # This is a simple Root page object, the inevow.IResource interface
>>>
>
> Maybe something like this:
>
>
> "This is a simple resource, representing the root, or top-most resource
> of this site.  The inevow.IResource interface..."
>
>>> # tells us that it must implement 2 methods:
>>> # locateChild and renderHTTP.
>>> # locateChild is used to find children of the current page, it must
>>> return a # tuple of (page, remaining_segments) # if there is no page,
>>> and you want to display a 404 page, you will need to return # a None,
>>> () tuple.
>>>
>
> Let's make this simpler: nevow.rend.NotFound is a much more convenient
> and readable way to spell "None, ()".  So, I'd suggest we change this to
> something like the following:
>
> "locateChild is used to find children of the current resource.  It must
> return a tuple of (resource, remaining_segments).  If no child resource
> exists at this location, you may return nevow.rend.NotFound."
>
> This ignores the fact that you could also return your own custom error
> resource, but maybe that should be saved for later docs?
>
>>> class Root(object): implements(inevow.IResource)
>>>
>>> def locateChild(self, ctx, segments): # This locateChild is 'stupid'
>>> since it can only work if the tree of # pages is static. Anyway it
>>> will work for
>
> "if the tree of resources is static"
>
>
>>> our simple example if segments[0] == '': # If the server is looking
>>> for the root page segments will be ('',) # then renderHTTP will be
>>> called on self return self, () elif segments[0] == 'foo': # Now we
>>> received a request
>> whose
>>> segments had in the first position # the string foo # like
>>> http://example.org/foo/baz/ -> ('foo', 'baz')
>>> # after the page has been located we return it with the remaining
>>> segments # ('baz')
>>> return self.foo, segments[1:] else: return None, ()
> return
>>>
>>> def renderHTTP(self, ctx): # When the server needs to return a
>>> response to the request it will call # the renderHTTP method that will
>>> return a string of what needs to be sent. return """<html><body>Hello
>>> world!<br /> <a href="./foo" id="foo">foo</a></body></html> """
>>>
>>>
>>> class Foo(object): implements(inevow.IResource)
>>>
>>> def locateChild(self, ctx, segments): # segments is the remaining
>>> segments returned by the root locateChild # see segments[1:] if
>>> segments[0] == 'baz': return self.baz, segments[1:] else: return None,
>>> ()
>>>
>>>
>
> "return rend.NotFound"
>
>
> In general, I think it is better to replace the word "page" with
> "resource"
> so that we don't lock readers into thinking of everything as a page; so
> much of what make twisted and nevow handy comes into play when you stop
> thinking about web pages as the unit of work, and think about resources.
>
> Anyone agree, violently disagree?
>
>
> L. Daniel Burr
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
>



From glyph at divmod.com  Tue Jul 11 17:53:01 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Tue Jul 11 17:53:12 2006
Subject: [Twisted-web] web2: reverse dns lookup in twisted reactor thread
In-Reply-To: <20060711211458.29014.1034035343.divmod.quotient.32259@ohm>
Message-ID: <20060711225301.29014.1100524289.divmod.quotient.32355@ohm>

On Tue, 11 Jul 2006 17:14:58 -0400, glyph@divmod.com wrote:

D'oh.  Hit 'send' too hastily.

>- There's no docstring explaining why the cache is necessary, e.g. why your 
>local caching nameserver isn't good enough.

I want to make it clear that what I'm complaining about here is not that it shouldn't exist - I understand that is trying to not block on repetitive calls - but that this should be explained in a docstring.  Private methods should have maintainer-friendly docstrings.

>- It sets the "host" attribute on the transport, which is not documented by 
>ITransport.

It does this on the address, which _is_ documented.  However, it's documented to be "a dotted-quad IP address".  Something expecting the host to be a name requiring no lookup might pass it to a connection function where it would otherwise have an explicit name-lookup step and that would be bad.

>- As you've noticed, it uses gethostbyaddr rather than the reactor's 
>resolver.  If it really needs to use a hostname, and not a numeric address, 
>it's going to need to return a Deferred.

Also, to clarify: a blocking call like this *might* be fine somewhere that it would definitely be a one-time operation; however, it's exposed to user code, which means that someone expecting a synchronous operation might call it, and then in the case of e.g. a nameserver failure it would block (potentially for a long time).

However, getting the right hostname is a confusing and error-prone activity.  As a data point, this call takes about 30 seconds on my current nameserver, and ends up getting the wrong information anyway (it should be using my NAT-external address, but instead it ends up using my internal address).  It's also made in the server code unconditionally: the host address information is used only in the path where there is no Host: header but we block anyway.  If there is a transient DNS failure, we cache the numeric host name for a process lifetime (e.g. forever) anyway.

Given that I think it would be best to at least be consistent, and always use the numeric in the case where we don't know.

From ldanielburr at mac.com  Tue Jul 11 18:21:33 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue Jul 11 18:21:44 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted,
	Nevow, etc.
In-Reply-To: <33149.206.173.68.153.1152657305.squirrel@www.wbsysnet.com>
References: <33127.206.173.68.153.1152555158.squirrel@www.wbsysnet.com>
	<20060711120737.29014.1432765793.divmod.quotient.31668@ohm>
	<32885.206.173.68.153.1152645058.squirrel@www.wbsysnet.com>
	<op.tcjkwfqi3oj628@l-daniel-burrs-powerbook-g4-17.local>
	<33149.206.173.68.153.1152657305.squirrel@www.wbsysnet.com>
Message-ID: <op.tcjsh7063oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Lloyd,

On Tue, 11 Jul 2006 17:35:05 -0500, <lloyd@paisite.com> wrote:

[snip]

> Valentino is better qualified to respond than I. But you've convinced
> me... provided that we have a really good definition of "Resource."
>

Fair enough, I think the Wikipedia definition is pretty good.

http://en.wikipedia.org/wiki/Resource_(Web)

> "Resource" is one of the concepts that baffled me last year. I couldn't
> get my head around what folks were talking about. Your phrase "The thing
> that a URL.points to..." definitely helps me see the bigger picture.
> Saying this, I realize that my own work has been moving away from the
> simple "set of linked pages" model. The Resource concept should give me
> better language to talk about what I've been doing.
>

Representational State Transfer (REST) is the concept that I most often
use when considering resources in a web application.

http://en.wikipedia.org/wiki/Representational_State_Transfer#Resources

> Since naive folks like me are accustomed to thinking in terms of "pages,"
> it would probably be good to sharpen up and present your argument that
> many web apps today have more complex structures than "set of linked
> pages." We could explicitly point out that  abstracting the notion of
> "page" to "Resource," opens the mind to more creative possiblies, then
> present a few examples of these possibilties. We should definitely  
> include
> "page" as an an example of a "Resource," along with a few other examples.
>

Agreed.

I didn't really "get it" at first, because I had always though in terms
of "web pages".  Once I read Fielding's paper and started thinking about
logical resources, rather than "every URL is a web page", everything just
fell into place, and I have a much easier time designing web applications
these days, even if I don't make them strictly in a REST-style.

> Want to try your hand at a crisp, evocative definition with examples?
>

Hopefully, we can just provide links to the two resources I cited, above.
That's sort of recursive, in a way, but there you have it.

> Many thanks,

Not at all, thanks to you and the others on the list who got the ball
rolling again.

L. Daniel Burr

From andrew-twisted at puzzling.org  Tue Jul 11 19:18:34 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue Jul 11 19:18:48 2006
Subject: [Twisted-web] web2: reverse dns lookup in twisted reactor thread
In-Reply-To: <20060711211458.29014.1034035343.divmod.quotient.32259@ohm>
References: <9d4e27520607111241k649c9e2xcfff79279ebb21a0@mail.gmail.com>
	<20060711211458.29014.1034035343.divmod.quotient.32259@ohm>
Message-ID: <20060712001834.GO482@steerpike.home.puzzling.org>

On Tue, Jul 11, 2006 at 05:14:58PM -0400, glyph@divmod.com wrote:
[...]
> 
> - "ISSLTransport(x, None) is not None" seems to have evolved into an idiom, 
> but I'm pretty sure that this is just a reflection of the bad, old 
> interfaces system.  Anybody else know if there's a reason for this rather 
> than a providedBy check?

The difference I see is that a providedBy check won't lookup an adapter, so
"ISSLTransport.providedBy(x)" doesn't mean the same thing as "ISSLTransport(x,
None) is not None".  It might be what was intended here, of course.

-Andrew.


From dialtone at divmod.com  Tue Jul 11 20:10:24 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Jul 11 20:10:30 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <32885.206.173.68.153.1152645058.squirrel@www.wbsysnet.com>
Message-ID: <20060712011024.29014.1207498669.divmod.quotient.32528@ohm>

On Tue, 11 Jul 2006 15:10:58 -0400 (EDT), lloyd@paisite.com wrote:
>Hi Valentino,
>
>On Tue, July 11, 2006 8:07 am, Valentino Volonghi aka Dialtone wrote:
>
>> For IResource the right example is most_basic which uses the following
>> code:
>
>Note that I've added the road map to http://twisted.paisite.com.
>
>When I started to rebuild my Twisted environment, I realized that version
>updates may have broken Turkey Adventures one through four.
>
>Todo list:
>
>1. Retest Adventures one through four using current Twisted versions.
>2. Update Adventures one through four if necessary
>
>Once I have my environment back up I'll try to tackle these two tasks. If
>anyone else feels so inclined, feel free to jump in.

>From what I've seen in your current adventures I don't think you'll need to
update anything since currently you only use twisted.web which hasn't been
updated for a long time (and twisted.web2 will take its place when ready).

To be honest this changing-situation is true for Nevow too since in a branch
(already working and waiting review and approval) Nevow introduces 2 new objects
and a new way of dealing with pages that removes the context (ctx argument).

This is why in the next adventures I wouldn't spend much time talking about the
context except for some basic notions that are needed to do what the new objects
allow without using it. Don't worry about it too much then.

>Re: IRequest code:
>
>Great start, Valentino!
>
>Questions:
>
>-- Does this need some kind or wrapper to run it or will it run as is?

It will run as is on top of Nevow (which introduces some wrappers for twisted.web).

from twisted.internet import reactor
from nevow import appserver
site = appserver.NevowSite(root)
reactor.listenTCP(8080, site)

this lines added at the end of the file will make it work. You can run the
example obtained in this way using the standard:

python myscript.py
Then browing to http://localhost:8080/ will start the experience.

An alternative solution uses the tac file approach and is the following:

from twisted.application import strports, service
from nevow import appserver
application = service.Application('example')
website = appserver.NevowSite(root)
webservice = strports.service('8080', website)
webservice.setServiceParent(application)

You can run the example obtained in this way using:
twistd -noy myscript.tac
then browsing to http://localhost:8080/ will start the experience.

The tac extension is arbitrary and only used because the file uses this alternative
way of setting up the application.

>-- What's the step-by-step procedure to get it running?

See above.

>-- What should we see when we do get it running?

A root page with an Hello world and a link to a child page named foo.
Trying to get any other url except the one with the child foo will result in a 404.

If you go in the foo child you'll see a page with the content 'you are in foo'
and a link to foo's child page baz. Any other child page will result in a 404.

If you go in the baz child you'll see a page with the content 'you are in baz'.
This page has no children and any other url will result in a 404.

>-- How does it work?
I think it is explained in the comments. I wouldn't know how to explain it better
without precise questions. :)

>-- From the big picture point-of-view, what have we learned by running
>this code?

We have learned that Nevow is fundamentally based on the following request
processing schema:

arrives request \
                 --> root resource \
                                    --> root.locateChild(url segments)
                                    . child_resource.locateChild(url segments[1:])
                                    . child_resource2.locateChild(url segments[2:])
                                    . so forth until url segments == ()
                            ==> FOUND RIGHT RESOURCE
                                    ==> RIGHT_RESOURCE.renderHTTP()  \
browser <================================


HTH.


From dialtone at divmod.com  Tue Jul 11 20:14:53 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Jul 11 20:15:10 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <33149.206.173.68.153.1152657305.squirrel@www.wbsysnet.com>
Message-ID: <20060712011453.29014.1447867916.divmod.quotient.32529@ohm>

On Tue, 11 Jul 2006 18:35:05 -0400 (EDT), lloyd@paisite.com wrote:
>> I've got some suggestion for this IResource example, which I will
>> detail below.
>
>Valentino is better qualified to respond than I. But you've convinced
>me... provided that we have a really good definition of "Resource."

Not really :). You are better qualified because you are learning and teminology helps you a lot more than me.

Anyway I agree with Daniel with the Resource vs Page thing.

From div.shekhar at gmail.com  Tue Jul 11 22:51:23 2006
From: div.shekhar at gmail.com (Div Shekhar)
Date: Tue Jul 11 22:51:25 2006
Subject: [Twisted-web] web2: reverse dns lookup in twisted reactor thread
In-Reply-To: <83E6109F-74C1-4A2F-87C6-E416DD449FB4@fuhm.net>
References: <9d4e27520607111241k649c9e2xcfff79279ebb21a0@mail.gmail.com>
	<83E6109F-74C1-4A2F-87C6-E416DD449FB4@fuhm.net>
Message-ID: <9d4e27520607112051h28fe0f5ftd9372cc9be9be579@mail.gmail.com>

Thanks all for the quick responses. I'll just leave the line commented
till the next release then. :)

James - i assumed it was client ip because i thought i saw multiple
lookups. If it's server ip, then i guess i must have seen one lookup
for 127.0.0.1 and then another one for the public ip.

Cheers,
Div.

From lloyd at paisite.com  Tue Jul 11 23:36:06 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Tue Jul 11 23:38:11 2006
Subject: [Twisted-web] Re: Thoughts on documentation,
	wading into Twisted,  Nevow, etc.
In-Reply-To: <20060712011024.29014.1207498669.divmod.quotient.32528@ohm>
References: <32885.206.173.68.153.1152645058.squirrel@www.wbsysnet.com>
	<20060712011024.29014.1207498669.divmod.quotient.32528@ohm>
Message-ID: <32994.206.173.68.153.1152678966.squirrel@www.wbsysnet.com>

Hi Valentino,

Outstanding!

With this info and Daniel's input on Resources, I should be able to draft
the next Turkey adventure -- just have to get my Twisted environment up
again. I think I also need to take a day or so to bone up on all the
latest Twisted and Nuvow docs. Might take me a week or so to get it all
done.

I take it that I also need to load Nuvow?

Many thanks,

Lloyd


On Tue, July 11, 2006 9:10 pm, Valentino Volonghi aka Dialtone wrote:
> On Tue, 11 Jul 2006 15:10:58 -0400 (EDT), lloyd@paisite.com wrote:
>
>> Hi Valentino,
>>
>>
>> On Tue, July 11, 2006 8:07 am, Valentino Volonghi aka Dialtone wrote:
>>
>>
>>> For IResource the right example is most_basic which uses the
>>> following code:
>>>
>>
>> Note that I've added the road map to http://twisted.paisite.com.
>>
>>
>> When I started to rebuild my Twisted environment, I realized that
>> version updates may have broken Turkey Adventures one through four.
>>
>> Todo list:
>>
>>
>> 1. Retest Adventures one through four using current Twisted versions.
>> 2. Update Adventures one through four if necessary
>>
>>
>> Once I have my environment back up I'll try to tackle these two tasks.
>> If
>> anyone else feels so inclined, feel free to jump in.
>
>> From what I've seen in your current adventures I don't think you'll
>> need to
> update anything since currently you only use twisted.web which hasn't
> been updated for a long time (and twisted.web2 will take its place when
> ready).
>
> To be honest this changing-situation is true for Nevow too since in a
> branch (already working and waiting review and approval) Nevow introduces
> 2 new objects
> and a new way of dealing with pages that removes the context (ctx
> argument).
>
> This is why in the next adventures I wouldn't spend much time talking
> about the context except for some basic notions that are needed to do what
> the new objects allow without using it. Don't worry about it too much
> then.
>
>> Re: IRequest code:
>>
>>
>> Great start, Valentino!
>>
>>
>> Questions:
>>
>>
>> -- Does this need some kind or wrapper to run it or will it run as is?
>>
>
> It will run as is on top of Nevow (which introduces some wrappers for
> twisted.web).
>
> from twisted.internet import reactor from nevow import appserver site =
> appserver.NevowSite(root) reactor.listenTCP(8080, site)
>
> this lines added at the end of the file will make it work. You can run
> the example obtained in this way using the standard:
>
> python myscript.py Then browing to http://localhost:8080/ will start the
> experience.
>
> An alternative solution uses the tac file approach and is the following:
>
>
> from twisted.application import strports, service from nevow import
> appserver application = service.Application('example') website =
> appserver.NevowSite(root) webservice = strports.service('8080', website)
> webservice.setServiceParent(application)
>
> You can run the example obtained in this way using:
> twistd -noy myscript.tac then browsing to http://localhost:8080/ will start
> the experience.
>
> The tac extension is arbitrary and only used because the file uses this
> alternative way of setting up the application.
>
>> -- What's the step-by-step procedure to get it running?
>>
>
> See above.
>
>
>> -- What should we see when we do get it running?
>>
>
> A root page with an Hello world and a link to a child page named foo.
> Trying to get any other url except the one with the child foo will result
> in a 404.
>
> If you go in the foo child you'll see a page with the content 'you are in
> foo' and a link to foo's child page baz. Any other child page will result
> in a 404.
>
> If you go in the baz child you'll see a page with the content 'you are in
> baz'. This page has no children and any other url will result in a 404.
>
>
>> -- How does it work?
>>
> I think it is explained in the comments. I wouldn't know how to explain
> it better without precise questions. :)
>
>> -- From the big picture point-of-view, what have we learned by running
>> this code?
>
> We have learned that Nevow is fundamentally based on the following
> request processing schema:
>
> arrives request \ --> root resource \
> --> root.locateChild(url segments)
> . child_resource.locateChild(url segments[1:])
> . child_resource2.locateChild(url segments[2:])
> . so forth until url segments == ()
> ==> FOUND RIGHT RESOURCE
> ==> RIGHT_RESOURCE.renderHTTP()  \
> browser <================================
>
>
> HTH.
>
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
>



From foom at fuhm.net  Wed Jul 12 00:17:35 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed Jul 12 00:17:46 2006
Subject: [Twisted-web] web2: reverse dns lookup in twisted reactor thread
In-Reply-To: <20060711225301.29014.1100524289.divmod.quotient.32355@ohm>
References: <20060711225301.29014.1100524289.divmod.quotient.32355@ohm>
Message-ID: <DD2115DB-09D8-4315-8D8A-2AAC45B3DAAC@fuhm.net>


On Jul 11, 2006, at 6:53 PM, glyph@divmod.com wrote:
> However, getting the right hostname is a confusing and error-prone  
> activity.  As a data point, this call takes about 30 seconds on my  
> current nameserver, and ends up getting the wrong information  
> anyway (it should be using my NAT-external address, but instead it  
> ends up using my internal address).  It's also made in the server  
> code unconditionally: the host address information is used only in  
> the path where there is no Host: header but we block anyway.  If  
> there is a transient DNS failure, we cache the numeric host name  
> for a process lifetime (e.g. forever) anyway.
>
> Given that I think it would be best to at least be consistent, and  
> always use the numeric in the case where we don't know.

The webserver mainly needs to know its name for generating URLs for  
redirects etc when the client doesn't send a host header. In apache,  
the problem is solved by using the machine's "hostname" for the  
default server name, unless otherwise configured with the  
"ServerName" config parameter. if you want it to use a different  
default "self"-name per IP address, you need to use vhost sections to  
configure that. Upon reflection, this seems like a better thing to  
do, and the current hack should be dispensed with. (Trusting  
"hostname" to give you a valid hostname has its own set of issues but  
hey, that's why its overrideable.) And of course none of this is  
really important if the client sends a Host header, which nearly all  
do anyhow.

See <http://httpd.apache.org/docs/2.0/mod/core.html#servername> and  
<http://httpd.apache.org/docs/2.0/mod/core.html#usecanonicalname>.

James

From dialtone at divmod.com  Wed Jul 12 05:22:58 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed Jul 12 05:23:00 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <32994.206.173.68.153.1152678966.squirrel@www.wbsysnet.com>
Message-ID: <20060712102258.29014.1145735183.divmod.quotient.33124@ohm>

On Wed, 12 Jul 2006 00:36:06 -0400 (EDT), lloyd@paisite.com wrote:
>Hi Valentino,

Hi.

>I take it that I also need to load Nuvow?

Yes. It's called Nevow.

>Many thanks,

Thank YOU.

From wsanchez at wsanchez.net  Thu Jul 13 13:01:36 2006
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Thu Jul 13 13:01:39 2006
Subject: [Twisted-web] Fwd: HTTP Bar BoF Summary
References: <6A51BD0C-EA1A-4FB6-80DC-CCC25FCB390D@mnot.net>
Message-ID: <8B7CE683-1A37-4F15-9603-84EAEA42C30E@wsanchez.net>

   Just FYI.

	-wsv


Begin forwarded message:

> Resent-From: ietf-http-wg@w3.org
> From: Mark Nottingham <mnot@mnot.net>
> Date: July 13, 2006 10:18:08 AM PDT
> To: HTTP Working Group <ietf-http-wg@w3.org>
> Cc: discuss@apps.ietf.org
> Subject: HTTP Bar BoF Summary
>
>
> We talked about potential work on 2616.
>
> Everyone seemed to agree that cleaning up the document (e.g.,  
> folding in errata, documenting the extensibility model) is a clear  
> win. There was also considerable interest in going a bit further;  
> e.g., exploring implementation divergence, potentially deprecating  
> features that have proven to be interoperability problem, and  
> generating operational documentation. When asked, no one thought  
> that this level of activity was a bad idea, several stated keen  
> interest, and some indicated that they would be willing to  
> contribute actively.
>
> No one indicated interest in working on "HTTP/1.2," but rather just  
> more clearly documenting 1.1. There was also interest in defining  
> extensions to HTTP, but those who spoke supported focusing on the  
> 2616 cleanup first.
>
> 2617 was also discussed, in particular Digest authentication; while  
> there are some errata that could be incorporated in a backwards- 
> compatible fashion, several people raised issues that they thought  
> could only be addressed by a backwards-incompatible revision to  
> Digest (i.e., a new Digest-like HTTP authentication scheme within  
> the HTTP authentication framework). Again, there was broad support  
> for such work, and no detractors spoke up. There was some  
> discussion of whether this would be relevant to the activities in  
> the WAE BoF, but those who spoke felt that this effort had a  
> different scope, and would be most appropriate in an HTTP-focused WG.
>
> It was agreed that the next steps to explore these items is to:
>   * Engage implementers, ideally holding an interop (either virtual  
> or real) to discover and explore various problem areas
>   * Write a problem statement exploring the issues to be addressed  
> more deeply
>   * Prepare a straw-man charter for an umbrella HTTP WG
>   * Request a BoF in San Diego
>
> We then recessed to drink beer and eat French fries covered in  
> gravy and cheese.
>
> Attendees:
> - Phillip Hallam-Baker
> - Scott Lawrence
> - Lisa Dusseault
> - Mark Baker
> - Dave Raggett
> - Carsten Bormann
> - Cyrus Daboo
> - Thomas Roessler
> - Yngve Pettersen
> - Alexei Melkinov
> - Mark Nottingham
>
> --
> Mark Nottingham     http://www.mnot.net/


From lloyd at paisite.com  Sat Jul 15 14:40:24 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Sat Jul 15 14:43:02 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <20060703151807.29014.2063861995.divmod.quotient.20836@ohm>
References: <20060703162743.4f3b3e32@tron.foobar.homeunix.org>
	<20060703151807.29014.2063861995.divmod.quotient.20836@ohm>
Message-ID: <32836.206.173.68.153.1152992424.squirrel@www.wbsysnet.com>

Hi Folks,

Here's a rough first draft of Techno Turkey's latest adventure. I've tried
to capture and integrate both Valentino and Daniel's ideas, but if I've
missed or misrepresented anything, please advise.

I haven't had a chance yet to finish setting up my own Twisted development
environment, so I haven't been able to test it. In preparing to set up my
environment, however, I realized that there may be conventions in the
community (directory layout and naming, for example) that would be very
helpful for turkey's like me.

So I've left a hole in the Turkey script for a link to a page (yet to be
written) that lay's out best practices for down-loading Twisted/Nevow and
setting up a productive development environment. My thought was that we
could put this page on the Turkey site, or elsewhere in the Twisted/Nevow
docs, then I could simply link to it from whereever appropriate in Turkey
scripts.

Anybody around to help me write the page? Or, if such a page already
exists, please point me to it.

Best wishes,

Lloyd

PS: I've been reviewing current Twisted/Nevow documentation. Much much
better than I remember from last year. Nevow tutorial is excellent.

So here's... Techno Turkey


Dialtone's Resource Magic


"It's magic!" said Techno Turkey.

"What's magic?" asked Twisted Wizard Daniel.

"I just type it in at the top of my browser and... shazamm... back comes
just the page I'm looking for -- could be from anywhere in the world. It's
like casting a magic spell."

"It's far more magical than you think," says Twisted Wizard Daniel. "Just
consider it's name: 'Uniform Resource Identifier' -- URI."

"I thought it was a URL," said Turkey.

"That was before people understood it's full mojo. Back then they called
it a 'Uniform Resource Locator.' But then they realized that it could be
used to identify anything in cyberspace."

"Anything?" asked Turkey.

"Sure, anything. We use URI's to identify servers, webpages, web services,
images, sound files..."

"But the only thing I ever get back are webpages."

"That's because that's what static HTTP webservers do. They listen for
their designated URI and return the specified HTML web page. But aided by
the right software, they can return anything of a digital nature."

Twisted Wizard Dialtone happened to be listening in.

"Hey, Turkey old bird," said Daniel, "Want to see my Resource magic?"

"The bird's computer got trashed by an electrical storm, remember," said
Daniel.

"No surge protection? No backup?"

"Don't rub it in," said Turkey.

"Never mind, here's how get back up and running again..."

***************

Need link here to step-by-step load and set up instructions for Twisted and
Nevow from both Twisted/Nevow sites and Debian.

Download Twisted from: http://twistedmatrix.com/products/download
Download Nevow from: http://divmod.org/trac/wiki/DivmodNevow#Download

Debian users can get the latest alpha, rc, or release by adding the
following to their /etc/apt/sources.list:

    Woody: deb http://twisted.sourceforge.net/debian/woody/ ./
        Sid/Sarge: deb http://twisted.sourceforge.net/debian/ ./

Once downloaded:

-- how to find Twisted and Nevow source directories
-- how to set up development environment
-- how to set up working directories -- user source, logs,
-- how to set up path variables
-- how to test development environment

Should be sufficiently detailed that even the slowest turkey on the farm
can implement.

Anybody up for fleshing in details for this page? I can edit, put it up on
the Turkey server, and link it into Turkey adventures.

***************

"Now, create a file called ResourceMagic.py in your Twisted source
directoy, and enter the following code:"


from zope.interface import implements

from nevow import inevow

##
## How does a request come to the Resource?
##
## or How to use Nevow without all the fancy automations
##

class Root(object):
    # This is a simple resource, representing the root, or top-most

    # resource of this site.  The inevow.IResource interface
    # tells us that it must implement two methods:
    # locateChild and renderHTTP.
    # locateChild is used to find children of the current resource.  It must
    # return a tuple of (resource, remaining_segments).  If no child resource
    # exists at this location, you may return nevow.rend.NotFound."
    # For more information see:
    # http://divmod.org/users/exarkun/nevow-doc/nevow-traversal.html
    implements(inevow.IResource)

    def locateChild(self, ctx, segments):
        # This locateChild is 'stupid' since it can only work if the tree of
        # resources is static. But it will work for our simple example
        if segments[0] == '':
            # If the server is looking for the root resource segments will
be ('',)
            # then renderHTTP will be called on self
            return self, ()
        elif segments[0] == 'foo':
            # Now we received a request whose segments had in the first
position
            # the string foo like http://example.org/foo/baz/ -> ('foo',
'baz').
            # After the resource has been located we return it with the
remaining segments
            # ('baz')
            return self.foo, segments[1:]

        else:
            return None, ()

    def renderHTTP(self, ctx):
        # When the server needs to return a response to the request it
will call
        # the renderHTTP method that will return a string of what needs to
be sent.
        def renderHTTP(self, ctx):
            return """<html><body>Hello, world!<br />"""

class Foo(object):
    implements(inevow.IResource)

    def locateChild(self, ctx, segments):
        # segments is the remaining segments returned by the root locateChild
        # see segments[1:]
        if segments[0] == 'baz':
            return self.baz, segment[1:]
        else:
            return None, ()

    def renderHTTP(self, ctx):
        return """<html><body><h1 id="heading">You are in Foo</h1>
        <a href="./foo/baz" id="baz">baz</a></body></html>
"""

class Baz(object):
    implements(inevow.IResource)
    def locateChild(self, ctx, segments):
        return None, ()
    def renderHTTP(self, ctx):
        return '<html><body><h1 id="heading">You are in
Baz</h1></body></html>'

# We are adding children to the resources.
# This could also happen inside the class.
root = Root()
root.foo = Foo()
root.foo.baz = Baz()


"Note," said Dialtone, "That this is the IResource interface from Nevow;
not the one from twisted.web."

"So now what?" said Turkey.

"At the end of your ResourceMagic.py source file enter:"

from twisted.internet import reactor
from nevow import appserver
site = appserver.NevowSite(root)
reactor.listenTCP(8080, site)

"Hey, I recognize the reactor bit from earlier adventures, " said
Turkey, "But what's this 'nevow?'"

"Nevow is a web-application construction kit written in Python. Check out
http://divmod.org/trac/wiki/DivmodNevow. But let's keep our eye on the
ball here...

"To cast the spell, just save the ResourceMagic.py file and enter at the
console prompt:"

python ResourceMagic.py

"Then point your browser to:"

http://localhost:8080/

"Wait," said Turkey, "Before we run it, I'm still confused by this word
'Resource.' When you say, 'Resource,' are you talking about web pages?"

"Could be," said Daniel. "But there are many more kinds of Resources than
webpages. A Resource is anything that a URI happens to point to --
anything in cyberspace."

"Well, at least," said Dialtone, "Anything available through the
designated server."

"Like my favorite Radiohead MP3?" said Turky.

"Anything that gets you through the day," said Daniel. "For more info,
check out:"

http://en.wikipedia.org/wiki/Resource_(Web)

"...or:"

http://en.wikipedia.org/wiki/Representational_State_Transfer#Resources

"OK," said Turkey, turning to Dialtone. "How's this magic spell of yours
supposed to work?"

"Well let's run it and see..."


Another way to run the code

Another way to run Dialtone's code uses the tac file approach. Replace
the lines:

from twisted.internet import reactor
from nevow import appserver
site = appserver.NevowSite(root)
reactor.listenTCP(8080, site)

with

from twisted.application import strports, service from nevow import
appserver application = service.Application('example') website =
appserver.NevowSite(root) webservice = strports.service('8080', website)
webservice.setServiceParent(application)

Now, at your browser prompt, enter:

twistd -noy myscript.tac

And point your browser to:

http://localhost:8080/


Anticipated Results:

You should see a root page with "Hello, world!," and a link to a child page
named "foo." Any other url except the one with the child foo will result
in a 404.

If you go in the foo child you'll see a page with the content "you are in
foo" and a link to foo's child page baz. Any other child page will result
in a 404.

If you go in the baz child you'll see a page with the content "you are in
baz." This page has no children and any other url will result in a 404.

How does it work?

Nevow is fundamentally based on the following  request processing schema:

arrives request \
--> root resource \
--> root.locateChild(url segments)
. child_resource.locateChild(url segments[1:])
. child_resource2.locateChild(url segments[2:])
. so forth until url segments == ()
==> FOUND RIGHT RESOURCE
==> RIGHT_RESOURCE.renderHTTP()  \

Where to go from here

Contrast Dialtone's code with Matt Goodall's Barebnes Dynamic Web Server in
Turkey's fourth adventure. Then review:

http://divmod.org/users/exarkun/nevow-doc/nevow-intro.html






-------------- next part --------------
A non-text attachment was scrubbed...
Name: TTResource
Type: application/octet-stream
Size: 8316 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060715/a4afac78/TTResource.obj
From manlio_perillo at libero.it  Sun Jul 16 12:43:29 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun Jul 16 12:41:10 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
	Nevow, etc.
In-Reply-To: <20060708001226.29014.400477565.divmod.quotient.27190@ohm>
References: <20060708001226.29014.400477565.divmod.quotient.27190@ohm>
Message-ID: <44BA7AC1.2080508@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> [...]

> - How do I do nested sequences? (there's already an example, should be
> better documented)


The example uses the IContainer interface
Is this the only solution?



Thanks and regards   Manlio Perillo

From dialtone at divmod.com  Sun Jul 16 16:47:13 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sun Jul 16 16:47:21 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
In-Reply-To: <44BA7AC1.2080508@libero.it>
Message-ID: <20060716214713.29014.57953853.divmod.quotient.40180@ohm>



On Sun, 16 Jul 2006 15:43:29 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:

>> - How do I do nested sequences? (there's already an example, should be
>> better documented)

You can also generate stan on the fly.

From manlio_perillo at libero.it  Sun Jul 16 16:57:14 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun Jul 16 16:54:54 2006
Subject: [Twisted-web] Re: Thoughts on documentation, wading into Twisted, 
In-Reply-To: <20060716214713.29014.57953853.divmod.quotient.40180@ohm>
References: <20060716214713.29014.57953853.divmod.quotient.40180@ohm>
Message-ID: <44BAB63A.4070902@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> 
> 
> On Sun, 16 Jul 2006 15:43:29 -0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
> 
>>> - How do I do nested sequences? (there's already an example, should be
>>> better documented)
> 
> You can also generate stan on the fly.
> 

Only as a last resource.

However I have read some old posts from the archive of the mailing list;
thus I (hope) now understand better how data directives works.



Regards  Manlio Perillo

From manlio_perillo at libero.it  Mon Jul 17 04:40:28 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jul 17 04:38:07 2006
Subject: [Twisted-web] Re: [Twisted-Python] again on nested sequence
In-Reply-To: <44BB543E.90105@libero.it>
References: <20060716222330.29014.966665754.divmod.quotient.40221@ohm>
	<44BB543E.90105@libero.it>
Message-ID: <44BB5B0C.2000608@libero.it>

Manlio Perillo ha scritto:
> Valentino Volonghi aka Dialtone ha scritto:
>>
>> On Sun, 16 Jul 2006 16:18:07 -0200, Manlio Perillo
>> <manlio_perillo@libero.it> wrote:
>>
>> This is off topic here... Twisted-web is the list. 

I have Cc to twisted-web, hoping this will help the archiving.

> 

Just for future reference, here is an alternate solution.
It contains more code, but it is more database friendly
(and I like this - better performance too?).

It also contains some correction for the HTML code.

<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:n="http://nevow.com/ns/nevow/0.1"
      lang="it" xml:lang="it">
  <head>
    <title>Nested sequence II</title>
  </head>
  <body>
    <form action="post" method="post">
      <ul n:render="sequence" n:data="control_list">
        <li n:pattern="item" n:render="control">
          <label><n:slot name="ctrl_label"/>
            <select n:render="option_list">
              <n:attr name="name"><n:slot name="ctrl_name" /></n:attr>
              <option n:pattern="item" n:render="option">
                  <n:attr name="value"><n:slot name="opt_value" /></n:attr>
                  <n:slot name="opt_label" />
                </option>
            </select>
          </label>
        </li>
      </ul>
      <input type="submit" value="send" />
    </form>
  </body>
</html>


class Main(rend.Page):
    addSlash = True
    docFactory = loaders.xmlfile('nestedsequence.xhtml')

    def data_control_list(self, ctx, data):
        return [('a', 'first'),  ('b', 'second')]

    def render_option_list(self, ctx, data):
        option_list = [('1', 'uno'), ('2', 'due')]
        tag = ctx.tag

        pattern = inevow.IQ(ctx).patternGenerator("item")
        content = [pattern(data=option) for option in option_list]

        return ctx.tag.clear()[content]

    def render_control(self, ctx, data):
        print '*', data
        ctx.fillSlots('ctrl_label', data[1])
        ctx.fillSlots('ctrl_name', data[0])

        return ctx.tag

    def render_option(self, ctx, data):
        ctx.fillSlots('opt_label', data[1])
        ctx.fillSlots('opt_value', data[0])

        return ctx


Maybe it is not reusable as the previous solution, but it's not a problem.



Regards  Manlio Perillo

From manlio_perillo at libero.it  Mon Jul 17 12:15:30 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jul 17 12:13:15 2006
Subject: [Twisted-web] Re: [Twisted-Python] again on nested sequence
In-Reply-To: <44BB5B0C.2000608@libero.it>
References: <20060716222330.29014.966665754.divmod.quotient.40221@ohm>	<44BB543E.90105@libero.it>
	<44BB5B0C.2000608@libero.it>
Message-ID: <44BBC5B2.50109@libero.it>

Manlio Perillo ha scritto:
> Manlio Perillo ha scritto:
>> Valentino Volonghi aka Dialtone ha scritto:
>>> On Sun, 16 Jul 2006 16:18:07 -0200, Manlio Perillo
>>> <manlio_perillo@libero.it> wrote:
>>>
>>> This is off topic here... Twisted-web is the list. 
> 
> I have Cc to twisted-web, hoping this will help the archiving.
> 
> 
> Just for future reference, here is an alternate solution.
> It contains more code, but it is more database friendly
> (and I like this - better performance too?).
> 

Here is another solution:

class Main(rend.Page):
    addSlash = True
    docFactory = loaders.xmlfile('nestedsequence.xhtml')

    def data_control_list(self, ctx, data):
        print "data_control_list"

        return [('a', 'first'),  ('b', 'second')]

    def render_control(self, ctx, data):
        print 'render_control'

        ctx.fillSlots('ctrl_label', data[1])
        ctx.fillSlots('ctrl_name', data[0])

        option_list = [('1', 'uno'), ('2', 'due')]
        ctx.remember(option_list, inevow.IData)

        return ctx.tag

    def render_option(self, ctx, data):
        ctx.fillSlots('opt_label', data[1])
        ctx.fillSlots('opt_value', data[0])

        return ctx

The template is the same, the only change is
n:render="sequence" instead of
n:render="option_list"
in the <select> element.

However there is a thing the I don't understand:
why render_control is called two times?

In my previous solution, both render_option_list and render_control are
 called two times.



Thanks and regards  Manlio Perillo

From manlio_perillo at libero.it  Mon Jul 17 12:18:13 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jul 17 12:16:05 2006
Subject: [Twisted-web] Re: [Twisted-Python] again on nested sequence
In-Reply-To: <44BB5B0C.2000608@libero.it>
References: <20060716222330.29014.966665754.divmod.quotient.40221@ohm>	<44BB543E.90105@libero.it>
	<44BB5B0C.2000608@libero.it>
Message-ID: <44BBC655.80209@libero.it>

Manlio Perillo ha scritto:
> [...]
> 
> <!DOCTYPE html
>   PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
>   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
> <html xmlns="http://www.w3.org/1999/xhtml"
>       xmlns:n="http://nevow.com/ns/nevow/0.1"
>       lang="it" xml:lang="it">
>   <head>
>     <title>Nested sequence II</title>
>   </head>
>   <body>
>     <form action="post" method="post">
>       <ul n:render="sequence" n:data="control_list">
>         <li n:pattern="item" n:render="control">
>           <label><n:slot name="ctrl_label"/>
>             <select n:render="option_list">
>               <n:attr name="name"><n:slot name="ctrl_name" /></n:attr>
>               <option n:pattern="item" n:render="option">
>                   <n:attr name="value"><n:slot name="opt_value" /></n:attr>
>                   <n:slot name="opt_label" />
>                 </option>
>             </select>
>           </label>
>         </li>
>       </ul>
>       <input type="submit" value="send" />
>     </form>
>   </body>
> </html>
> 
> 
> class Main(rend.Page):
>     addSlash = True
>     docFactory = loaders.xmlfile('nestedsequence.xhtml')
> 
>     def data_control_list(self, ctx, data):
>         return [('a', 'first'),  ('b', 'second')]
> 
>     def render_option_list(self, ctx, data):
>         option_list = [('1', 'uno'), ('2', 'due')]
>         tag = ctx.tag
> 
>         pattern = inevow.IQ(ctx).patternGenerator("item")
>         content = [pattern(data=option) for option in option_list]
> 
>         return ctx.tag.clear()[content]
> 
>     def render_control(self, ctx, data):
>         print '*', data
>         ctx.fillSlots('ctrl_label', data[1])
>         ctx.fillSlots('ctrl_name', data[0])
> 
>         return ctx.tag
> 


This is very strange.
In my real application (that should be equivalent to this one, only
names changes), the whole <option> node is ignored!

I can't understand why.


Thanks and regards  Manlio Perillo

From dialtone at divmod.com  Mon Jul 17 12:24:43 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jul 17 12:25:20 2006
Subject: [Twisted-web] Re: [Twisted-Python] again on nested sequence
In-Reply-To: <44BBC5B2.50109@libero.it>
Message-ID: <20060717172443.29014.967053806.divmod.quotient.41366@ohm>

On Mon, 17 Jul 2006 15:15:30 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Here is another solution:

The following is NOT a solution for multiple reasons the main of which is that the context is going away and soon you won't be able to use this.

The second is that IData is not for external use but rather internal Nevow usage.

>class Main(rend.Page):
>    addSlash = True
>    docFactory = loaders.xmlfile('nestedsequence.xhtml')
>
>    def data_control_list(self, ctx, data):
>        print "data_control_list"
>
>        return [('a', 'first'),  ('b', 'second')]
>
>    def render_control(self, ctx, data):
>        print 'render_control'
>
>        ctx.fillSlots('ctrl_label', data[1])
>        ctx.fillSlots('ctrl_name', data[0])
>
>        option_list = [('1', 'uno'), ('2', 'due')]
>        ctx.remember(option_list, inevow.IData)
>
>        return ctx.tag
>
>    def render_option(self, ctx, data):
>        ctx.fillSlots('opt_label', data[1])
>        ctx.fillSlots('opt_value', data[0])
>
>        return ctx
>
>The template is the same, the only change is
>n:render="sequence" instead of
>n:render="option_list"
>in the <select> element.
>
>However there is a thing the I don't understand:
>why render_control is called two times?
>
>In my previous solution, both render_option_list and render_control are
> called two times.

I don't remember the template and thus I don't think I can be of any help here. But this way of coding is called 'being clever' and you'll regret it when you'll have to maintain that code or understand how the code actually works.

From manlio_perillo at libero.it  Mon Jul 17 12:31:36 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jul 17 12:29:23 2006
Subject: [Twisted-web] Re: [Twisted-Python] again on nested sequence
In-Reply-To: <44BBC655.80209@libero.it>
References: <20060716222330.29014.966665754.divmod.quotient.40221@ohm>	<44BB543E.90105@libero.it>	<44BB5B0C.2000608@libero.it>
	<44BBC655.80209@libero.it>
Message-ID: <44BBC978.2000105@libero.it>

Manlio Perillo ha scritto:
> [...]
>
> This is very strange.
> In my real application (that should be equivalent to this one, only
> names changes), the whole <option> node is ignored!
> 
> 

Sorry for this message.
Actually the reason is very simple: the data list is empty!

And I have lost a lot of time on this...



Regards  Manlio Perillo

From manlio_perillo at libero.it  Mon Jul 17 12:39:10 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jul 17 12:37:02 2006
Subject: [Twisted-web] Re: [Twisted-Python] again on nested sequence
In-Reply-To: <20060717172443.29014.967053806.divmod.quotient.41366@ohm>
References: <20060717172443.29014.967053806.divmod.quotient.41366@ohm>
Message-ID: <44BBCB3E.9010005@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Mon, 17 Jul 2006 15:15:30 -0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Here is another solution:
> 
> The following is NOT a solution for multiple reasons the main of which
> is that the context is going away and soon you won't be able to use this.
> 

And what about my first solution?
http://twistedmatrix.com/pipermail/twisted-web/2006-July/002813.html

> The second is that IData is not for external use but rather internal
> Nevow usage.
> 

Ok, thanks for the advice.
I have read about this trick in a message in the archive.

Only one last question.
I have read the whole ml archive but I was unable to find any message
where it is explained why the context is bad.


>>
>> In my previous solution, both render_option_list and render_control are
>> called two times.
> 
> I don't remember the template and thus I don't think I can be of any
> help here. 

See the previous link.

> But this way of coding is called 'being clever' and you'll
> regret it when you'll have to maintain that code or understand how the
> code actually works.
> 


Ok.
But I'm searching a simple solution that is database friendly; that is,
where I can map directly database queries to data directives.



Thanks   Manlio Perillo

From dialtone at divmod.com  Mon Jul 17 12:41:09 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jul 17 12:41:13 2006
Subject: [Twisted-web] Re: [Twisted-Python] again on nested sequence
In-Reply-To: <44BBC655.80209@libero.it>
Message-ID: <20060717174109.29014.584601876.divmod.quotient.41386@ohm>

On Mon, 17 Jul 2006 15:18:13 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>>     def render_option_list(self, ctx, data):
>>         option_list = [('1', 'uno'), ('2', 'due')]
>>         tag = ctx.tag
>>
>>         pattern = inevow.IQ(ctx).patternGenerator("item")
>>         content = [pattern(data=option) for option in option_list]
>>
>>         return ctx.tag.clear()[content]

>This is very strange.

Not that much.

>In my real application (that should be equivalent to this one, only
>names changes), the whole <option> node is ignored!

Because you are never calling it. inevow.IQ(tag).patternGenerator('item') is
a much better way to get the pattern item.

Also the renderer you just wrote is basically the sequence renderer except not generic and fairly marginally faster if at all. Is there any valid reason for not using a better initial data structure to avoid rewriting the sequence renderer losing the reusability?

>I can't understand why.

Don't use the context so intensely if you want to avoid weird things, 
understanding it takes considerable effort. The only thing the context is really still useful for is retrieving the tag and the request. Everything else can be done with one of those 2 things.




From dialtone at divmod.com  Mon Jul 17 12:48:33 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jul 17 12:48:40 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <32836.206.173.68.153.1152992424.squirrel@www.wbsysnet.com>
Message-ID: <20060717174833.29014.1236524342.divmod.quotient.41401@ohm>

On Sat, 15 Jul 2006 15:40:24 -0400 (EDT), lloyd@paisite.com wrote:
>I haven't had a chance yet to finish setting up my own Twisted development
>environment, so I haven't been able to test it. In preparing to set up my
>environment, however, I realized that there may be conventions in the
>community (directory layout and naming, for example) that would be very
>helpful for turkey's like me.

There is no such thing for directories AFAIK. It's usually left to the developer and I'd say the follow standard python code organization. The coding standard instead is the Twisted coding style.

http://twistedmatrix.com/projects/core/documentation/howto/policy/coding-standard.html

>So I've left a hole in the Turkey script for a link to a page (yet to be
>written) that lay's out best practices for down-loading Twisted/Nevow and
>setting up a productive development environment. My thought was that we
>could put this page on the Turkey site, or elsewhere in the Twisted/Nevow
>docs, then I could simply link to it from whereever appropriate in Turkey
>scripts.

These are the same that you have for any other python project. An alternative for Nevow is using Combinator (explained in the Divmod Combinator page):
http://divmod.org/trac/wiki/DivmodCombinator
Another alternative for Nevow is using setuptools although I'm unsure how working it is. Yet another for both is using .pth

>Anybody around to help me write the page? Or, if such a page already
>exists, please point me to it.

I hope you like the links :)

>Best wishes,
>
>Lloyd
>
>PS: I've been reviewing current Twisted/Nevow documentation. Much much
>better than I remember from last year. Nevow tutorial is excellent.
>
>So here's... Techno Turkey

Cool :). Looks very good.

From dialtone at divmod.com  Mon Jul 17 13:04:55 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jul 17 13:04:56 2006
Subject: [Twisted-web] Re: [Twisted-Python] again on nested sequence
In-Reply-To: <44BBCB3E.9010005@libero.it>
Message-ID: <20060717180455.29014.111631353.divmod.quotient.41421@ohm>

On Mon, 17 Jul 2006 15:39:10 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>And what about my first solution?
>http://twistedmatrix.com/pipermail/twisted-web/2006-July/002813.html

Better, although it rewrites the sequence renderer for more or less the same functionality. Not too bad of course but could be avoided with less code and more templates (that usually are dealt with by the designer).

>> The second is that IData is not for external use but rather internal
>> Nevow usage.
>>
>
>Ok, thanks for the advice.
>I have read about this trick in a message in the archive.
>
>Only one last question.
>I have read the whole ml archive but I was unable to find any message
>where it is explained why the context is bad.

The context has some bad points:
1) Changes the rules for passing arguments to python functions, instead of
   using normal foo(a, b, c) you do ctx.remember(a, IA)... and foo(ctx), then
   in foo you do IA(ctx) and so on. While this might have an advantage after
   an initial analysis it isn't like that at all since you can always use
   **kwargs and grab the arguments you need from kwargs, and kwargs is
   standard python convention (although explicitly defining arguments is 
   better for most cases).
2) It is slow... each adaptation is a non-trivial function call that might
   end up with multiple lookups into a tree. Of course there are 
   optimizations that could solve this problem but nobody dared to write them
   AND test them AND merge with trunk.
3) The context is slow in a way that can hardly be optimized because for each
   branch in the rendering/childlocating procedures a new context is created.
   I don't have real numbers but I can presume that for each request a 
   minimum of 3 contexts for a mostly static page at root level and an
   unlimited maximum of object creation/collection and this for _each_  
   request.
4) The context makes non trivial understanding what instead should be trivial
   because it saves state that is reused later breaking the tracebacks.

This are the first 4 reasons that came to mind.

>Ok.
>But I'm searching a simple solution that is database friendly; that is,
>where I can map directly database queries to data directives.

Just like everyone else does. Besides that writing a simple function like the following:

def mapComments(comments, for_atom=False):
    for comment in comments:
        yield dict(rank=comment[0],
                   author=comment[1],
                   id=comment[2],
                   body=comment[3],
                   date=comment[4]
                  )

Will give you a dict interface over the comments rows returned from the database without losing much performance compared to the situation without that functions (also thanks to generators).

Also consider that it's better to put time in creating something that makes a specific problem more generic so that an already existing tool can be used to solve it rather than creating many different solutions to the same problem.

 

From ldanielburr at mac.com  Mon Jul 17 13:08:36 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Jul 17 13:08:51 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <20060717174833.29014.1236524342.divmod.quotient.41401@ohm>
References: <20060717174833.29014.1236524342.divmod.quotient.41401@ohm>
Message-ID: <op.tcuh0mfj3oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Valentino,


On Mon, 17 Jul 2006 12:48:33 -0500, Valentino Volonghi aka Dialtone  
<dialtone@divmod.com> wrote:

> On Sat, 15 Jul 2006 15:40:24 -0400 (EDT), lloyd@paisite.com wrote:
>> I haven't had a chance yet to finish setting up my own Twisted  
>> development
>> environment, so I haven't been able to test it. In preparing to set up  
>> my
>> environment, however, I realized that there may be conventions in the
>> community (directory layout and naming, for example) that would be very
>> helpful for turkey's like me.
>
> There is no such thing for directories AFAIK. It's usually left to the  
> developer and I'd say the follow standard python code organization. The  
> coding standard instead is the Twisted coding style.
>
> http://twistedmatrix.com/projects/core/documentation/howto/policy/coding-standard.html
>

I'd like to jump in right here and talk abut directory organization for  
just a second.
While you are correct that no specific directory layout conventions have  
been blessed
by the core development team, I think that there is a lot of value in  
providing one,
if only to give really new users some kind of structural anchor point from  
which to
begin learning web-app development with twisted.

A good example is actually the layout used by the various Divmod apps.  Is  
the set
of directory conventions there the One, True, Code Layout?  Surely not,  
but I think
that they are more than adequate for a newbie, and will give them one less  
thing to
think about while getting started.

So, that said, I propose we use the following directory layout convention  
in the
Turkey Adventures (with the clear understanding that this convention is  
not any
kind of officially mandated thing):

/ProjectName
   /packagename
     /static
       /css
       /js
       /images
     module1.py
     module2.py
     ...

I think this is plenty simple, and will prevent the reader from being  
distracted by
a bunch choices that are less important than learning the actual framework.

Anyway, that's my 2 cents on the issue of directory layout for the  
examples.  I
think the new tutorial looks great!

L. Daniel Burr

From manlio_perillo at libero.it  Mon Jul 17 13:22:10 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jul 17 13:19:56 2006
Subject: [Twisted-web] Re: [Twisted-Python] again on nested sequence
In-Reply-To: <20060717180455.29014.111631353.divmod.quotient.41421@ohm>
References: <20060717180455.29014.111631353.divmod.quotient.41421@ohm>
Message-ID: <44BBD552.8000009@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Mon, 17 Jul 2006 15:39:10 -0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> And what about my first solution?
>> http://twistedmatrix.com/pipermail/twisted-web/2006-July/002813.html
> 
> Better, although it rewrites the sequence renderer for more or less the
> same functionality. Not too bad of course but could be avoided with less
> code and more templates (that usually are dealt with by the designer).
> 

Not Nevow templates...

Now I'm working with a web designer that knows a little of PHP.
I will report how he will interacts with Nevow templates.



> [...]
> 4) The context makes non trivial understanding what instead should be
> trivial
>   because it saves state that is reused later breaking the tracebacks.
>

Indeed, reading the sources, the context handling is the more obscure part.

Nevow is simple in design, I hope that in a future version all the ugly
stuff can go away.

> This are the first 4 reasons that came to mind.
> 
>> Ok.
>> But I'm searching a simple solution that is database friendly; that is,
>> where I can map directly database queries to data directives.
> 
> Just like everyone else does. Besides that writing a simple function
> like the following:
> 
> def mapComments(comments, for_atom=False):
>    for comment in comments:
>        yield dict(rank=comment[0],
>                   author=comment[1],
>                   id=comment[2],
>                   body=comment[3],
>                   date=comment[4]
>                  )
> 
> Will give you a dict interface over the comments rows returned from the
> database without losing much performance compared to the situation
> without that functions (also thanks to generators).
> 
> Also consider that it's better to put time in creating something that
> makes a specific problem more generic so that an already existing tool
> can be used to solve it rather than creating many different solutions to
> the same problem.
> 
>

This is certainly true.
When I have time I will try to refactory the queries.



Thanks and regards   Manlio Perillo

From ldanielburr at mac.com  Mon Jul 17 13:28:27 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Jul 17 13:28:39 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <32836.206.173.68.153.1152992424.squirrel@www.wbsysnet.com>
References: <20060703162743.4f3b3e32@tron.foobar.homeunix.org>
	<20060703151807.29014.2063861995.divmod.quotient.20836@ohm>
	<32836.206.173.68.153.1152992424.squirrel@www.wbsysnet.com>
Message-ID: <op.tcuixpe43oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Lloyd,


On Sat, 15 Jul 2006 14:40:24 -0500, <lloyd@paisite.com> wrote:

[snip]

> So here's... Techno Turkey
>
>
> Dialtone's Resource Magic
>
>
> "It's magic!" said Techno Turkey.
>
> "What's magic?" asked Twisted Wizard Daniel.
>
> "I just type it in at the top of my browser and... shazamm... back comes
> just the page I'm looking for -- could be from anywhere in the world.  
> It's
> like casting a magic spell."
>
> "It's far more magical than you think," says Twisted Wizard Daniel. "Just
> consider it's name: 'Uniform Resource Identifier' -- URI."
>
> "I thought it was a URL," said Turkey.
>
> "That was before people understood it's full mojo. Back then they called
> it a 'Uniform Resource Locator.' But then they realized that it could be
> used to identify anything in cyberspace."
>
> "Anything?" asked Turkey.
>
> "Sure, anything. We use URI's to identify servers, webpages, web  
> services,
> images, sound files..."
>
> "But the only thing I ever get back are webpages."
>
> "That's because that's what static HTTP webservers do. They listen for
> their designated URI and return the specified HTML web page. But aided by
> the right software, they can return anything of a digital nature."
>
> Twisted Wizard Dialtone happened to be listening in.
>
> "Hey, Turkey old bird," said Daniel, "Want to see my Resource magic?"
>

Looks like a typo, above.  I think it is intended to read "said Dialtone".

[snip initial download/install stuff]

> Once downloaded:
>
> -- how to find Twisted and Nevow source directories

I'd just make sure twisted and nevow are installed in site-packages, though
other options are certainly possible.  In the spirit of not distracting the
reader from non-essential information, let's just pick one.

> -- how to set up development environment

Well, we've got to at least cover setup for Win32 and Linux.  I'd argue  
that
OS X and one of the BSDs deserves a little attention too.

> -- how to set up working directories -- user source, logs,

See my response to dialtone's recent email on this list, for my suggestion
regarding directory layout.

> -- how to set up path variables

I suggest using .pth files rather than path variables.  Using .pth files
should "just work" regardless of your OS, and not require any fiddling
around with the environment by hand.

So, basically, for a new web project, you'd create your project dirs, and
then stick a "myproject.pth" file in the site-packages directory,  
containing
"/path/to/my/project/topmost/folder"

> -- how to test development environment
>

To test that the dev environment is set up correctly, I'd just start up a
python interpreter prompt and import twisted, then import nevow, and  
lastly,
import myprojectpackage.

> Should be sufficiently detailed that even the slowest turkey on the farm
> can implement.
>
> Anybody up for fleshing in details for this page? I can edit, put it up  
> on
> the Turkey server, and link it into Turkey adventures.
>
> ***************
>
> "Now, create a file called ResourceMagic.py in your Twisted source
> directoy, and enter the following code:"
>
>
> from zope.interface import implements
>
> from nevow import inevow
>
> ##
> ## How does a request come to the Resource?
> ##
> ## or How to use Nevow without all the fancy automations
> ##
>
> class Root(object):
>     # This is a simple resource, representing the root, or top-most
>
>     # resource of this site.  The inevow.IResource interface
>     # tells us that it must implement two methods:
>     # locateChild and renderHTTP.
>     # locateChild is used to find children of the current resource.  It  
> must
>     # return a tuple of (resource, remaining_segments).  If no child  
> resource
>     # exists at this location, you may return nevow.rend.NotFound."
>     # For more information see:
>     # http://divmod.org/users/exarkun/nevow-doc/nevow-traversal.html
>     implements(inevow.IResource)
>
>     def locateChild(self, ctx, segments):
>         # This locateChild is 'stupid' since it can only work if the  
> tree of
>         # resources is static. But it will work for our simple example
>         if segments[0] == '':
>             # If the server is looking for the root resource segments  
> will
> be ('',)
>             # then renderHTTP will be called on self
>             return self, ()
>         elif segments[0] == 'foo':
>             # Now we received a request whose segments had in the first
> position
>             # the string foo like http://example.org/foo/baz/ -> ('foo',
> 'baz').
>             # After the resource has been located we return it with the
> remaining segments
>             # ('baz')
>             return self.foo, segments[1:]
>
>         else:
>             return None, ()
>
>     def renderHTTP(self, ctx):
>         # When the server needs to return a response to the request it
> will call
>         # the renderHTTP method that will return a string of what needs  
> to
> be sent.
>         def renderHTTP(self, ctx):
>             return """<html><body>Hello, world!<br />"""
>
> class Foo(object):
>     implements(inevow.IResource)
>
>     def locateChild(self, ctx, segments):
>         # segments is the remaining segments returned by the root  
> locateChild
>         # see segments[1:]
>         if segments[0] == 'baz':
>             return self.baz, segment[1:]
>         else:
>             return None, ()
>
>     def renderHTTP(self, ctx):
>         return """<html><body><h1 id="heading">You are in Foo</h1>
>         <a href="./foo/baz" id="baz">baz</a></body></html>
> """
>
> class Baz(object):
>     implements(inevow.IResource)
>     def locateChild(self, ctx, segments):
>         return None, ()
>     def renderHTTP(self, ctx):
>         return '<html><body><h1 id="heading">You are in
> Baz</h1></body></html>'
>
> # We are adding children to the resources.
> # This could also happen inside the class.
> root = Root()
> root.foo = Foo()
> root.foo.baz = Baz()
>
>
> "Note," said Dialtone, "That this is the IResource interface from Nevow;
> not the one from twisted.web."
>
> "So now what?" said Turkey.
>
> "At the end of your ResourceMagic.py source file enter:"
>
> from twisted.internet import reactor
> from nevow import appserver
> site = appserver.NevowSite(root)
> reactor.listenTCP(8080, site)
>
> "Hey, I recognize the reactor bit from earlier adventures, " said
> Turkey, "But what's this 'nevow?'"
>
> "Nevow is a web-application construction kit written in Python. Check out
> http://divmod.org/trac/wiki/DivmodNevow. But let's keep our eye on the
> ball here...
>

I'd move this section up, and place it just after the ResourceMagic  
listing.
The code uses inevow.IResource, so I think it is best to clear that up
right away, rather than having Dialtone mention Nevow, go on to another
code snippet and *then* finally explaining what nevow is.

> "To cast the spell, just save the ResourceMagic.py file and enter at the
> console prompt:"
>
> python ResourceMagic.py
>
> "Then point your browser to:"
>
> http://localhost:8080/
>
> "Wait," said Turkey, "Before we run it, I'm still confused by this word
> 'Resource.' When you say, 'Resource,' are you talking about web pages?"
>
> "Could be," said Daniel. "But there are many more kinds of Resources than
> webpages. A Resource is anything that a URI happens to point to --
> anything in cyberspace."
>
> "Well, at least," said Dialtone, "Anything available through the
> designated server."
>
> "Like my favorite Radiohead MP3?" said Turky.
>
> "Anything that gets you through the day," said Daniel. "For more info,
> check out:"
>
> http://en.wikipedia.org/wiki/Resource_(Web)
>
> "...or:"
>
> http://en.wikipedia.org/wiki/Representational_State_Transfer#Resources
>
> "OK," said Turkey, turning to Dialtone. "How's this magic spell of yours
> supposed to work?"
>
> "Well let's run it and see..."
>
>
> Another way to run the code
>
> Another way to run Dialtone's code uses the tac file approach.

I probably sound like a broken record, but I'd suggest offering one, and
only one, way to run the code, so that users aren't fiddling with things
that are not central to grasping the concepts being presented.

Me, I use .tac files for everything these days, so that's what I would
recommend for use within the tutorials.

Keep up the great work, it is inspiring to see someone take this on.

L. Daniel Burr

From dialtone at divmod.com  Mon Jul 17 13:39:48 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jul 17 13:39:54 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <op.tcuh0mfj3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <20060717183948.29014.2105812457.divmod.quotient.41456@ohm>

On Mon, 17 Jul 2006 13:08:36 -0500, "L. Daniel Burr" <ldanielburr@mac.com> wrote:

>So, that said, I propose we use the following directory layout convention 
>in the
>Turkey Adventures (with the clear understanding that this convention is  not 
>any
>kind of officially mandated thing):

Since we are talking about best practices... :)

>/ProjectName
>   /packagename
>     /static
>       /css
>       /js
>       /images
>     module1.py
>     module2.py
>     ...


/ProjectName
   /static
       /i   - images
       /s   - styles
       /j   - javascript
   /template
   /doc
   /database - sql files
   /bin      - various scripts
   /projectname - python modules
       /web  - for the web stuff
       /storage - for the data layer
       /other_eventual_twisted_using_subparts
      common_python_modules.py

From manlio_perillo at libero.it  Mon Jul 17 13:54:18 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jul 17 13:52:08 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <20060717183948.29014.2105812457.divmod.quotient.41456@ohm>
References: <20060717183948.29014.2105812457.divmod.quotient.41456@ohm>
Message-ID: <44BBDCDA.7000105@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> [...]
> 
> Since we are talking about best practices... :)
> 
> [...]

> /ProjectName
>   /static
>       /i   - images
>       /s   - styles
>       /j   - javascript

An interesting question is:
when one should consider the option of serving static content with a
server like lighttpd, and forward with mod_proxy requests for dynamic
content to twisted web?

static.File is a no match versus lighttpd, but there is the overhead of
mod_proxy and one should also consider how to design the site layout at
the best.


Thanks and regards   Manlio Perillo

From glyph at divmod.com  Mon Jul 17 13:58:14 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Mon Jul 17 13:58:24 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <op.tcuh0mfj3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <20060717185814.29014.2036613098.divmod.quotient.41460@ohm>

On Mon, 17 Jul 2006 13:08:36 -0500, "L. Daniel Burr" <ldanielburr@mac.com> wrote:

>/ProjectName
>   /packagename
>     /static
>       /css
>       /js
>       /images
>     module1.py
>     module2.py
>     ...

There is actually an under-maintained Axiomatic plugin in Mantissa which helps with this somewhat; it probably doesn't work at the moment, but check out "axiomatic mantissa".  It might help with this kind of setup, or at least provide some ideas for tools to expedite the turkey's adventures.

From ldanielburr at mac.com  Mon Jul 17 14:01:40 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Jul 17 14:02:04 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <44BBDCDA.7000105@libero.it>
References: <20060717183948.29014.2105812457.divmod.quotient.41456@ohm>
	<44BBDCDA.7000105@libero.it>
Message-ID: <op.tcukg2m33oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Manlio,


On Mon, 17 Jul 2006 13:54:18 -0500, Manlio Perillo  
<manlio_perillo@libero.it> wrote:

> Valentino Volonghi aka Dialtone ha scritto:
>> [...]
>>
>> Since we are talking about best practices... :)
>>
>> [...]
>
>> /ProjectName
>>   /static
>>       /i   - images
>>       /s   - styles
>>       /j   - javascript
>
> An interesting question is:
> when one should consider the option of serving static content with a
> server like lighttpd, and forward with mod_proxy requests for dynamic
> content to twisted web?
>

For the purposes of the tutorial currently being discussed, I think that
this question is premature.  A later tutorial, concerning production
environments, deployment, etc, would be the perfect place to cover things
like using static web servers to offload certain pieces of content from
twisted.

> static.File is a no match versus lighttpd, but there is the overhead of
> mod_proxy and one should also consider how to design the site layout at
> the best.
>

Agreed, but again, this is a topic for much further down the road.  This
particular tutorial is much more limited in scope, and more beginner
oriented.

Also, I'll point out that the directory layouts proposed by myself and
by dialtone aren't really affected by the use of static.File versus
some other webserver.  The layout can remain the same regardless.

L. Daniel Burr

From glyph at divmod.com  Mon Jul 17 14:17:58 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Mon Jul 17 14:29:25 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <20060717185814.29014.2036613098.divmod.quotient.41460@ohm>
Message-ID: <20060717191758.29014.901936032.divmod.quotient.41476@ohm>


On Mon, 17 Jul 2006 14:58:14 -0400, glyph@divmod.com wrote:

>There is actually an under-maintained Axiomatic plugin in Mantissa which 
>helps with this somewhat; it probably doesn't work at the moment, but check 
>out "axiomatic mantissa".  It might help with this kind of setup, or at 
>least provide some ideas for tools to expedite the turkey's adventures.

I mean "axiomatic project".  I am way too used to typing "axiomatic mantissa" all the time...

From lloyd at paisite.com  Mon Jul 17 14:35:01 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Mon Jul 17 14:37:36 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
Message-ID: <33271.206.173.68.153.1153164901.squirrel@www.wbsysnet.com>

Hi Folks,

Sounds like I kicked off a vital and worthy discussion with my
questions/request re: development environment. Very exciting!

My instincts tell me that it'w worth letting this discussion run it's
course for another couple of days until we arrive at a consensual
plan-of-attack. Best I can contribute is a summery of suggestions to date:

Development Environment:

-- Valentino suggests we take a look at:

> An alternative for Nevow is using Combinator (explained in the Divmod
> Combinator page): http://divmod.org/trac/wiki/DivmodCombinator
> Another alternative for Nevow is using setuptools although I'm unsure how
> working itis. Yet another for both is using .pth


Twisted Coding Standards

-- Valentino also suggests we review:

> http://twistedmatrix.com/projects/core/documentation/howto/policy/coding-standard.html

-- glyph suggests:

There is actually an under-maintained Axiomatic plugin in Mantissa which
helps with this somewhat; it probably doesn't work at the moment, but
check out "axiomatic mantissa".  It might help with this kind of setup, or
at least provide some ideas for tools to expedite the turkey's adventures.


Directory Structure

-- Daniel says:

> While you are correct that no specific directory layout conventions have
> been blessed by the core development team, I think that there is a lot of
> value in  providing one, if only to give really new users some kind of
> structural anchor point from which to begin learning web-app development
> with twisted.

(Speaking for the turkey contingent, I heartily agree.)

-- Daniel suggests:

/ProjectName
   /packagename
     /static
       /css
       /js
       /images
     module1.py
     module2.py
     ...

-- Valentino counters:

/ProjectName
   /static
       /i   - images
       /s   - styles
       /j   - javascript
   /template
   /doc
   /database - sql files
   /bin      - various scripts
   /projectname - python modules
       /web  - for the web stuff
       /storage - for the data layer
       /other_eventual_twisted_using_subparts
      common_python_modules.py

-- Manlio asks:

> An interesting question is: when one should consider the option of serving
>  static content with a server like lighttpd, and forward with mod_proxy
> requests for dynamic content to twisted web?

> static.File is a no match versus lighttpd, but there is the overhead of
> mod_proxy and one should also consider how to design the site layout at
> the best.

.pth vs. PATH

-- Daniel says:

> I suggest using .pth files rather than path variables.  Using .pth files
> should "just work" regardless of your OS, and not require any fiddling
> around with the environment by hand.

> So, basically, for a new web project, you'd create your project dirs, and
> then stick a "myproject.pth" file in the site-packages directory,
> containing "/path/to/my/project/topmost/folder"

Testing development environment

> To test that the dev environment is set up correctly, I'd just start up a
> python interpreter prompt and import twisted, then import nevow, and
> lastly, import myprojectpackage.

Running Twisted code

-- Daniel suggests:

> I probably sound like a broken record, but I'd suggest offering one, and
> only one, way to run the code, so that users aren't fiddling with things
> that are not central to grasping the concepts being presented.

> Me, I use .tac files for everything these days, so that's what I would
> recommend for use within the tutorials.

Seems to me that these are all open questions worth consideration and
further discussion and clarification. As soon as we have some degree of
mutual understanding and concensus, we can discuss how to implement the
Turkey's Guide for Diving into Twisted or whatever we decide to call it,
as well as where to put it.

Meanwhile...

I'll post the next draft of Dialtone's Resource Magic on
http://twisted.paisite.com, incorporating suggested changes.

Many many thanks to all.

Best wishes,

Lloyd





From dialtone at divmod.com  Mon Jul 17 18:40:55 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jul 17 18:40:59 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <44BBDCDA.7000105@libero.it>
Message-ID: <20060717234055.29014.156609022.divmod.quotient.41740@ohm>

On Mon, 17 Jul 2006 16:54:18 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>An interesting question is:
>when one should consider the option of serving static content with a
>server like lighttpd, and forward with mod_proxy requests for dynamic
>content to twisted web?

Fairly easy. Just be sure that all the static content is served from a known (or many _known_) urls like: /static/...

Thus you can use the following rule:

$HTTP["host"] =~ "^(testing.stiq.it|localhost)$" {
        url.rewrite-once = (
		"^/static/.*" => "$0",
                "^/favicon.ico$" => "/static/$0",
		"^/(.*)" => "/vhost/http/%0/$1"
	)
	$HTTP["url"] !~ "^/(static/|favicon.ico)" {
            proxy.server = ( "" =>
                ( (
                    "host" => "127.0.0.1",
                    "port" => 8080
                ) )
            )
	}
	server.document-root = "/usr/local/src/repos/stiq/"
}

Given the rewrite rule urls are rewritten once and then matched to see if
the request should be proxied or served by lighttpd from the document root.

From franz.zieher at gmail.com  Mon Jul 17 19:12:52 2006
From: franz.zieher at gmail.com (Franz Zieher)
Date: Tue Jul 18 01:25:18 2006
Subject: [Twisted-web] Formal validation with custom locateChild 
Message-ID: <loom.20060718T020949-525@post.gmane.org>


Being a beginner in using nevow/formal I can't see that
my form gets validated nor the callbacks are executed 
when I use my own locateChild method. 

Do I have to take special care in the locateChild method if
the form is posted?

Thanks,

Franz



From dialtone at divmod.com  Tue Jul 18 05:34:56 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Jul 18 05:34:57 2006
Subject: [Twisted-web] Formal validation with custom locateChild 
In-Reply-To: <loom.20060718T020949-525@post.gmane.org>
Message-ID: <20060718103456.29014.1456983398.divmod.quotient.42481@ohm>



On Tue, 18 Jul 2006 00:12:52 +0000 (UTC), Franz Zieher <franz.zieher@gmail.com> wrote:
>
>Being a beginner in using nevow/formal I can't see that
>my form gets validated nor the callbacks are executed
>when I use my own locateChild method.
>
>Do I have to take special care in the locateChild method if
>the form is posted?

You always (independently from locateChild) have to upcall the superclass implementation when the current locateChild finished the possibilities to find a child within itself in your customized way.

Then formal should work.

From dq at altern.org  Tue Jul 18 11:04:39 2006
From: dq at altern.org (dq_searchlores)
Date: Tue Jul 18 14:15:26 2006
Subject: [Twisted-web] recursive tree renderer (was: again on nested
	sequence)
References: <20060717180455.29014.111631353.divmod.quotient.41421@ohm>
	<44BBD552.8000009@libero.it>
Message-ID: <loom.20060718T175350-876@post.gmane.org>

Hi there!

I wrote a recursive tree renderer back in 09/2005. Perhaps this can be useful to
other people, or even better if I get feedback from peer review :-)

I've posted the TreeMixin at http://nanobin.nanosouffle.net/1492
and a small sample app at http://nanobin.nanosouffle.net/1493

I just did a quick check to make sure this works in the latest Nevow release.
The TreeMixin should be rather powerful, I intent to use it for a messageboard
application, which is still far away.

There's nearly zero documentation, so let me know if you would like to see more
sample code using the tree renderer.

Manlio, if you post your expected XHTML rendered code, I can try to come up with
a template and a data structure that uses this TreeMixin.

Kind regards,
Don Quijote



From manlio_perillo at libero.it  Tue Jul 18 15:25:13 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Jul 18 15:22:52 2006
Subject: [Twisted-web] recursive tree renderer
In-Reply-To: <loom.20060718T175350-876@post.gmane.org>
References: <20060717180455.29014.111631353.divmod.quotient.41421@ohm>	<44BBD552.8000009@libero.it>
	<loom.20060718T175350-876@post.gmane.org>
Message-ID: <44BD43A9.5080801@libero.it>

dq_searchlores ha scritto:
> Hi there!
> 
> I wrote a recursive tree renderer back in 09/2005. Perhaps this can be useful to
> other people, or even better if I get feedback from peer review :-)
> 
> I've posted the TreeMixin at http://nanobin.nanosouffle.net/1492
> and a small sample app at http://nanobin.nanosouffle.net/1493
> 

I came up with another solution: a generic (reusable) nested_sequence
renderer.

This functions is like the standard sequence render, but instead of
using the "standard" data, it calls a nested_'data_directive_name'
method of the Page instance.

For this to work, there is the need to store the last used data
directive in the context.

II will try to write some code.
I know this is an hack, but it seems to be a reusable pattern.



P.S.
I'm looking at DataFactory and I don't understand this:
	if args:
            return callable(*args)

What's happening here?



Thanks and regards  Manlio Perillo

From manlio_perillo at libero.it  Wed Jul 19 04:51:25 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed Jul 19 04:49:04 2006
Subject: [Twisted-web] authentication on SSL
Message-ID: <44BE009D.5030302@libero.it>

Hi.

I would like to login users on a SSL protected page (using SSL only for
login).

Is this possible with guard?


P.S.
I have seen a new guard implementation on Valentino's dialbox.
Is it mature?


Thanks  Manlio Perillo

From manlio_perillo at libero.it  Wed Jul 19 05:00:53 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed Jul 19 04:58:33 2006
Subject: [Twisted-web] fork to Nevow documentation
Message-ID: <44BE02D5.3070304@libero.it>

Hi.

I have forked the Nevow documentation:
http://svn.python.it/twisted/trunk/contrib/nevow/doc/

Since I'm using Nevow for a project, I will try to document as many
things as I can.



Manlio Perillo

From dialtone at divmod.com  Wed Jul 19 05:33:03 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed Jul 19 05:33:05 2006
Subject: [Twisted-web] authentication on SSL
In-Reply-To: <44BE009D.5030302@libero.it>
Message-ID: <20060719103303.29014.624548920.divmod.quotient.44023@ohm>

On Wed, 19 Jul 2006 07:51:25 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Hi.
>
>I would like to login users on a SSL protected page (using SSL only for
>login).
>
>Is this possible with guard?

Yes although it doesn't make too much sense. Which content is less important than the password that protects it?

>P.S.
>I have seen a new guard implementation on Valentino's dialbox.
>Is it mature?

Yes although it doesn't support cookieless mode and it can be still improved. It passes 66 of 78 tests of current guard.
However it is substantially easier to read and to use to implement persistent and distributed sessions (and the session.py 'example' included that exactly that).

From naked at iki.fi  Wed Jul 19 08:00:05 2006
From: naked at iki.fi (Nuutti Kotivuori)
Date: Wed Jul 19 08:05:16 2006
Subject: [Twisted-web] Re: authentication on SSL
References: <44BE009D.5030302@libero.it>
	<20060719103303.29014.624548920.divmod.quotient.44023@ohm>
Message-ID: <87odvlpx62.fsf@aka.i.naked.iki.fi>

Valentino Volonghi aka Dialtone wrote:
> On Wed, 19 Jul 2006 07:51:25 -0200, Manlio Perillo <manlio_perillo@libero.it>
> 	wrote:
>> Hi.
>>
>> I would like to login users on a SSL protected page (using SSL only for
>> login).
>>
>> Is this possible with guard?
>
> Yes although it doesn't make too much sense. Which content is less
> important than the password that protects it?

Google does this, for example. Google password is kinda important -
but protecting the customized google front page is not that important.

-- Naked


From manlio_perillo at libero.it  Wed Jul 19 10:21:19 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed Jul 19 10:18:59 2006
Subject: [Twisted-web] authentication on SSL
In-Reply-To: <20060719103303.29014.624548920.divmod.quotient.44023@ohm>
References: <20060719103303.29014.624548920.divmod.quotient.44023@ohm>
Message-ID: <44BE4DEF.7050208@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Wed, 19 Jul 2006 07:51:25 -0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Hi.
>>
>> I would like to login users on a SSL protected page (using SSL only for
>> login).
>>
>> Is this possible with guard?
> 
> Yes although it doesn't make too much sense. Which content is less
> important than the password that protects it?
> 

Yes, this is a small protection.

But some people have the bad habit to use the same passwords for every
thing... ;-).




Regards  Manlio Perillo

From michal at pasternak.in  Thu Jul 20 08:14:41 2006
From: michal at pasternak.in (Michal Pasternak)
Date: Thu Jul 20 08:14:52 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <44BE02D5.3070304@libero.it>
References: <44BE02D5.3070304@libero.it>
Message-ID: <200607201514.43479.michal@pasternak.in>

Dnia Wednesday 19 July 2006 12:00, Manlio Perillo napisa?:
> I have forked the Nevow documentation:
> http://svn.python.it/twisted/trunk/contrib/nevow/doc/

Why are you forking it? Any particular reasons you don't want to fix things in 
the mainstream?

-- 
Michal Pasternak

From manlio_perillo at libero.it  Thu Jul 20 12:33:09 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jul 20 12:30:49 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <200607201514.43479.michal@pasternak.in>
References: <44BE02D5.3070304@libero.it>
	<200607201514.43479.michal@pasternak.in>
Message-ID: <44BFBE55.6040407@libero.it>

Michal Pasternak ha scritto:
> Dnia Wednesday 19 July 2006 12:00, Manlio Perillo napisa?:
>> I have forked the Nevow documentation:
>> http://svn.python.it/twisted/trunk/contrib/nevow/doc/
> 
> Why are you forking it? Any particular reasons you don't want to fix things in 
> the mainstream?
> 

For my convenience, of course!
Since I'm using Nevow for a project, I want to annotate all things that
I'm going to learn.



Regards  Manlio Perillo


From exarkun at divmod.com  Thu Jul 20 12:51:38 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu Jul 20 12:52:00 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <44BFBE55.6040407@libero.it>
Message-ID: <20060720175138.29014.566401308.divmod.quotient.46063@ohm>

On Thu, 20 Jul 2006 15:33:09 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Michal Pasternak ha scritto:
>> Dnia Wednesday 19 July 2006 12:00, Manlio Perillo napisa?:
>>> I have forked the Nevow documentation:
>>> http://svn.python.it/twisted/trunk/contrib/nevow/doc/
>>
>> Why are you forking it? Any particular reasons you don't want to fix things in
>> the mainstream?
>>
>
>For my convenience, of course!
>Since I'm using Nevow for a project, I want to annotate all things that
>I'm going to learn.
>

You don't need to fork Nevow's documentation to do this.  Forking just
makes it extremely unlikely that any improvements you make will ever be
re-incorporated into Nevow.  This is detrimental to the community in
numerous ways.  It can discourage improvements to Nevow's documentation,
it can confuse people trying to learn Nevow, and it makes it less likely
that people who do know Nevow well will offer criticism of what you write
or point out flaws in your understanding.

I hope that you will consider offering patches and other contributions
directly to Nevow's documentation instead of maintaining a complete fork
of it.

Jean-Paul

From manlio_perillo at libero.it  Thu Jul 20 13:25:00 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jul 20 13:22:34 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <20060720175138.29014.566401308.divmod.quotient.46063@ohm>
References: <20060720175138.29014.566401308.divmod.quotient.46063@ohm>
Message-ID: <44BFCA7C.4050606@libero.it>

Jean-Paul Calderone ha scritto:

> You don't need to fork Nevow's documentation to do this.  Forking just
> makes it extremely unlikely that any improvements you make will ever be
> re-incorporated into Nevow.  This is detrimental to the community in
> numerous ways.  It can discourage improvements to Nevow's documentation,
> it can confuse people trying to learn Nevow, and it makes it less likely
> that people who do know Nevow well will offer criticism of what you write
> or point out flaws in your understanding.
> 
> I hope that you will consider offering patches and other contributions
> directly to Nevow's documentation instead of maintaining a complete fork
> of it.
> 

Please consider that this is a "private" fork.
I can write a complete new tutorial but I prefer to expand the current
documentation.

Once the work is done, I will submit the patches for the ufficial
documentation.

I hope I can document all aspects of Nevow needed for a complete app,
and I need a central repository for possible feedbacks.


Regards  Manlio Perillo


From exarkun at divmod.com  Thu Jul 20 13:32:59 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu Jul 20 13:33:23 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <44BFCA7C.4050606@libero.it>
Message-ID: <20060720183259.29014.2116460524.divmod.quotient.46108@ohm>

On Thu, 20 Jul 2006 16:25:00 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Jean-Paul Calderone ha scritto:
>
>> You don't need to fork Nevow's documentation to do this.  Forking just
>> makes it extremely unlikely that any improvements you make will ever be
>> re-incorporated into Nevow.  This is detrimental to the community in
>> numerous ways.  It can discourage improvements to Nevow's documentation,
>> it can confuse people trying to learn Nevow, and it makes it less likely
>> that people who do know Nevow well will offer criticism of what you write
>> or point out flaws in your understanding.
>>
>> I hope that you will consider offering patches and other contributions
>> directly to Nevow's documentation instead of maintaining a complete fork
>> of it.
>>
>
>Please consider that this is a "private" fork.
>I can write a complete new tutorial but I prefer to expand the current
>documentation.
>
>Once the work is done, I will submit the patches for the ufficial
>documentation.
>
>I hope I can document all aspects of Nevow needed for a complete app,
>and I need a central repository for possible feedbacks.

You are welcome to commit access to the Nevow repository.

Jean-Paul

From manlio_perillo at libero.it  Thu Jul 20 15:20:18 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jul 20 15:17:53 2006
Subject: [Twisted-web] problems with online api documentation for inevow
Message-ID: <44BFE582.50505@libero.it>

I think this is a know problem, but in
http://divmod.org/users/exarkun/nevow-api/public/nevow.inevow-module.html

there is nothing...



Thanks and regards  Manlio Perillo

From manlio_perillo at libero.it  Thu Jul 20 15:59:32 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jul 20 15:57:06 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <20060720183259.29014.2116460524.divmod.quotient.46108@ohm>
References: <20060720183259.29014.2116460524.divmod.quotient.46108@ohm>
Message-ID: <44BFEEB4.8000706@libero.it>

Jean-Paul Calderone ha scritto:
> [...]
>
>> I hope I can document all aspects of Nevow needed for a complete app,
>> and I need a central repository for possible feedbacks.
> 
> You are welcome to commit access to the Nevow repository.
> 

Thanks but I don't want it, not now.

The reason is
http://svn.python.it/twisted/trunk/contrib/nevow/doc/txt/nevow-sessions.txt

It is by no way a complete and good documentation!
It needs a lot of feedback, but using only the mailing list for
discussion is no good.

Moreover I still have to use sessions in my application, so I can not
test a real working application; for now it is like a placeholder.


Regards  Manlio Perillo

From exarkun at divmod.com  Thu Jul 20 16:00:29 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu Jul 20 16:00:35 2006
Subject: [Twisted-web] problems with online api documentation for inevow
In-Reply-To: <44BFE582.50505@libero.it>
Message-ID: <20060720210029.29014.1503453554.divmod.quotient.46271@ohm>

On Thu, 20 Jul 2006 18:20:18 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>I think this is a know problem, but in
>http://divmod.org/users/exarkun/nevow-api/public/nevow.inevow-module.html
>
>there is nothing...
>

Thanks.  I've taken that documentation down, since it is out of date and
I have no plans to update it.

Jean-Paul

From manlio_perillo at libero.it  Thu Jul 20 16:14:02 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jul 20 16:11:35 2006
Subject: [Twisted-web] problems with online api documentation for inevow
In-Reply-To: <20060720210029.29014.1503453554.divmod.quotient.46271@ohm>
References: <20060720210029.29014.1503453554.divmod.quotient.46271@ohm>
Message-ID: <44BFF21A.6020003@libero.it>

Jean-Paul Calderone ha scritto:
> On Thu, 20 Jul 2006 18:20:18 -0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> I think this is a know problem, but in
>> http://divmod.org/users/exarkun/nevow-api/public/nevow.inevow-module.html
>>
>> there is nothing...
>>
> 
> Thanks.  I've taken that documentation down, since it is out of date and
> I have no plans to update it.
> 

Don't forget to remove the link from http://divmod.org/trac/wiki/DivmodNevow
;-)

By the way, does this means that now there is no online API documentation?



Thanks and regards  Manlio Perillo

From michal at pasternak.in  Thu Jul 20 16:26:15 2006
From: michal at pasternak.in (Michal Pasternak)
Date: Thu Jul 20 16:26:27 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <44BFEEB4.8000706@libero.it>
References: <20060720183259.29014.2116460524.divmod.quotient.46108@ohm>
	<44BFEEB4.8000706@libero.it>
Message-ID: <200607202326.16919.michal@pasternak.in>

Dnia Thursday 20 July 2006 22:59, Manlio Perillo napisa?:
> Jean-Paul Calderone ha scritto:
> > [...]
> >
> >> I hope I can document all aspects of Nevow needed for a complete app,
> >> and I need a central repository for possible feedbacks.
> >
> > You are welcome to commit access to the Nevow repository.
>
> Thanks but I don't want it, not now.

I think, that this is not too wise, Manilo. More people can cooperate on the 
documentation with you when you use official Nevow repository, no matter if 
they're reading the list or not. 

TC,
-- 
Michal Pasternak

From dialtone at divmod.com  Thu Jul 20 16:35:25 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jul 20 16:35:42 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <44BFEEB4.8000706@libero.it>
Message-ID: <20060720213525.29014.1119962131.divmod.quotient.46310@ohm>

On Thu, 20 Jul 2006 18:59:32 -0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>It is by no way a complete and good documentation!
>It needs a lot of feedback, but using only the mailing list for
>discussion is no good.

I disagree. The mailing list instead is a good place to have the feedback and the bugtracker is a good place for patches.

IMHO that session document is not very good :/. The reason is the fact that it uses the session to store information.

While this is not especially bad it has a drawback. It stores state in something that is not persistent nor shared between the servers that might exist in your farm.

User data or preferences or whatever should be stored in the database or in another persistent mechanism.

All unless you use a stateful loadbalancer which would allow to store stuff in the session (although that wouldn't still work with persistent sessions).

>Moreover I still have to use sessions in my application, so I can not
>test a real working application; for now it is like a placeholder.

Sessions are actually only an implementation detail of the web and shouldn't be exposed in any way to the developer or the user. I say shouldn't because there might be usecases where it is actually needed although the general case should even come close to know that there are sessions.

Imho at least.

From mwh at python.net  Fri Jul 21 04:05:22 2006
From: mwh at python.net (Michael Hudson)
Date: Fri Jul 21 04:06:19 2006
Subject: [Twisted-web] Re: problems with online api documentation for inevow
References: <20060720210029.29014.1503453554.divmod.quotient.46271@ohm>
	<44BFF21A.6020003@libero.it>
Message-ID: <2mzmf3z5t9.fsf@starship.python.net>

Manlio Perillo <manlio_perillo@libero.it> writes:

> Jean-Paul Calderone ha scritto:
>> On Thu, 20 Jul 2006 18:20:18 -0200, Manlio Perillo
>> <manlio_perillo@libero.it> wrote:
>>> I think this is a know problem, but in
>>> http://divmod.org/users/exarkun/nevow-api/public/nevow.inevow-module.html
>>>
>>> there is nothing...
>>>
>> 
>> Thanks.  I've taken that documentation down, since it is out of date and
>> I have no plans to update it.
>> 
>
> Don't forget to remove the link from http://divmod.org/trac/wiki/DivmodNevow
> ;-)
>
> By the way, does this means that now there is no online API documentation?

Well, I run pydoctor at Nevow every now and again; the output is here:

http://starship.python.net/crew/mwh/nevowapi/

It knows a lot more about interfaces than epydoc, e.g.:

http://starship.python.net/crew/mwh/nevowapi/nevow.inevow.IQ.html

Cheers,
mwh

-- 
  Finding a needle in a haystack is a lot easier if you burn down
  the haystack and scan the ashes with a metal detector.
      -- the Silicon Valley Tarot (another one nicked from David Rush)


From manlio_perillo at libero.it  Fri Jul 21 04:14:44 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Jul 21 04:12:36 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <20060720213525.29014.1119962131.divmod.quotient.46310@ohm>
References: <20060720213525.29014.1119962131.divmod.quotient.46310@ohm>
Message-ID: <44C09B04.5070208@libero.it>

Valentino Volonghi aka Dialtone ha scritto:
> On Thu, 20 Jul 2006 18:59:32 -0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> It is by no way a complete and good documentation!
>> It needs a lot of feedback, but using only the mailing list for
>> discussion is no good.
> 
> I disagree. The mailing list instead is a good place to have the
> feedback and the bugtracker is a good place for patches.
> 

Maybe I should make this more clear!

For now this documents I'm writing are only:
- placeholders
- containers for put in everything I found on the archive of this
mailing list
- containers for put in my doubts


So, I think that this, for now, should have nothing to do with the
standard documentation.

> IMHO that session document is not very good :/. The reason is the fact
> that it uses the session to store information.
> 
> While this is not especially bad it has a drawback. It stores state in
> something that is not persistent nor shared between the servers that
> might exist in your farm.
> 


Yes, this should be explained in the document, thanks.

> User data or preferences or whatever should be stored in the database or
> in another persistent mechanism.
> 

Of course!
For now I simply want to describe how to use Twisted sessions.


> All unless you use a stateful loadbalancer which would allow to store
> stuff in the session (although that wouldn't still work with persistent
> sessions).
> 
>> Moreover I still have to use sessions in my application, so I can not
>> test a real working application; for now it is like a placeholder.
> 
> Sessions are actually only an implementation detail of the web and
> shouldn't be exposed in any way to the developer or the user. I say
> shouldn't because there might be usecases where it is actually needed

As an example a counter on the number of failed logins.

> although the general case should even come close to know that there are
> sessions.
> 

I whould like to explain every thing, adding usecases and explaining
benefits and problems.



Regards  Manlio Perillo

From duncan.mcgreggor at gmail.com  Fri Jul 21 04:31:32 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Fri Jul 21 04:31:51 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <44C09B04.5070208@libero.it>
References: <20060720213525.29014.1119962131.divmod.quotient.46310@ohm>
	<44C09B04.5070208@libero.it>
Message-ID: <44C09EF4.8050906@gmail.com>

Manlio Perillo wrote:

> Maybe I should make this more clear!
> 
> For now this documents I'm writing are only:
> - placeholders
> - containers for put in everything I found on the archive of this
> mailing list
> - containers for put in my doubts
> 
> 
> So, I think that this, for now, should have nothing to do with the
> standard documentation.

If this was the case, why did you announce a fork? This seems to be your
own personal thing with no immediate impact on the twisted community.

Maybe I missed something...

d

From moof at metamoof.net  Fri Jul 21 04:58:04 2006
From: moof at metamoof.net (Moof)
Date: Fri Jul 21 04:58:07 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <44C09EF4.8050906@gmail.com>
References: <20060720213525.29014.1119962131.divmod.quotient.46310@ohm>
	<44C09B04.5070208@libero.it> <44C09EF4.8050906@gmail.com>
Message-ID: <bff8eeef0607210258t5421dbe5k3f498a14321f0687@mail.gmail.com>

On 7/21/06, Duncan McGreggor <duncan.mcgreggor@gmail.com> wrote:
> Manlio Perillo wrote:
>
> > Maybe I should make this more clear!
> >
> > For now this documents I'm writing are only:
> > - placeholders
> > - containers for put in everything I found on the archive of this
> > mailing list
> > - containers for put in my doubts
> >
> >
> > So, I think that this, for now, should have nothing to do with the
> > standard documentation.
>
> If this was the case, why did you announce a fork? This seems to be your
> own personal thing with no immediate impact on the twisted community.
>
> Maybe I missed something...

Sounds more like a sort of private branch of the repository, rather
than a fork. Maybe it's just a terminology issue?

Moof

From manlio_perillo at libero.it  Fri Jul 21 05:16:26 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Jul 21 05:14:05 2006
Subject: [Twisted-web] fork to Nevow documentation
In-Reply-To: <bff8eeef0607210258t5421dbe5k3f498a14321f0687@mail.gmail.com>
References: <20060720213525.29014.1119962131.divmod.quotient.46310@ohm>	<44C09B04.5070208@libero.it>
	<44C09EF4.8050906@gmail.com>
	<bff8eeef0607210258t5421dbe5k3f498a14321f0687@mail.gmail.com>
Message-ID: <44C0A97A.1070206@libero.it>

Moof ha scritto:
> [...]
> 
> Sounds more like a sort of private branch of the repository, rather
> than a fork. Maybe it's just a terminology issue?
> 

Yes, private branch is the correct term, sorry.


Regards  Manlio Perillo

From manlio_perillo at libero.it  Tue Jul 25 05:51:30 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Jul 25 05:49:10 2006
Subject: [Twisted-web] [Nevow] inevow.IQ
Message-ID: <44C5F7B2.50501@libero.it>

Hi.

In the interface IQ there is a keyed method but it seems that this is
not implemented.
What about it?

It is documented also in stan.py (where there are some other special
stuff like remember).


By the way: what's the difference, say, beetwen
ctx.fillSlots(...) and inevow.IQ(ctx).fillSlots(...)
?



Thanks  Manlio Perillo

From manlio_perillo at libero.it  Tue Jul 25 06:03:06 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Jul 25 06:00:43 2006
Subject: [Twisted-web] [Nevow] changing the attributes of a node
Message-ID: <44C5FA6A.9000401@libero.it>

Hi.

I need to set/unset an attribute (checked) on a <input type="checkbox">
element (in a xml template).

I'm using IQ.onePattern, but the problem is that the node is "removed"
from the "stan context".

Now I'm doing this from my render function:

   checked = ctx.tag.onePattern("checked")
   ... some fillSlots ...

   if ...:
      checked.attributes["checked"] = "true"

   ctx.tag.children[-1] = tags.td[checked]["label"]
   return ctx.tag

(the checkbox is inside a table).


There is a way to insert the node in its original place?
Or (if this make sense), to manipulate it "in place"?


Thanks and regards
Manlio Perillo

From manlio_perillo at libero.it  Tue Jul 25 06:58:58 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Jul 25 06:56:36 2006
Subject: [Twisted-web] [Nevow] changing the attributes of a node
In-Reply-To: <44C5FA6A.9000401@libero.it>
References: <44C5FA6A.9000401@libero.it>
Message-ID: <44C60782.7090706@libero.it>

Manlio Perillo ha scritto:
> Hi.
> 
> I need to set/unset an attribute (checked) on a <input type="checkbox">
> element (in a xml template).
> 
> I'm using IQ.onePattern, but the problem is that the node is "removed"
> from the "stan context".
> 
> Now I'm doing this from my render function:
> 

Sorry, the example was wrong.
Here is my template:

<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:n="http://nevow.com/ns/nevow/0.1"
      lang="en" xml:lang="en">
  <head>
    <title>Test</title>
  </head>
  <body>
    <form action="update" method="post">
      <table>
        <caption />
        <thead />
        <tbody n:render="sequence" n:data="list">
          <tr n:pattern="item" n:render="item">
            <td><n:slot name="x" /></td>
            <td>
              <input n:pattern="checked" type="checkbox">
                <n:attr name="name"><n:slot name="x" /></n:attr>
              </input>
            </td>
          </tr>
        </tbody>
      </table>

      <p>
        <input class="button" type="submit" value="update" />
        <input class="button" type="reset" value="reset" />
      </p>
    </form>
  </body>
</html>


And my code:

from nevow import rend, loaders, inevow, static, url, tags


class Page(rend.Page):
    docFactory = loaders.xmlfile("node.xhtml")

    def data_list(self, ctx, data):
        return [1, 2, 3]

    def render_item(self, ctx, data):
        ctx.fillSlots("x", data)

        checked = ctx.tag.onePattern("checked")
        if data > 1 :
             checked.attributes["checked"] = "true"

        ctx.tag.children[-1] = checked
        return ctx.tag




from twisted.cred import portal, checkers, credentials
from twisted.application import service, strports

from nevow import appserver


application = service.Application("test")
site = appserver.NevowSite(Page())


addr = "tcp:80:interface=127.0.0.1"
strports.service(addr, site).setServiceParent(application)


The code now works, but this is an hack (because I have to know where to
put the node).
Is there a better solution?



Thanks and regards  Manlio Perillo


From exarkun at divmod.com  Tue Jul 25 07:31:05 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue Jul 25 07:31:23 2006
Subject: [Twisted-web] [Nevow] inevow.IQ
In-Reply-To: <44C5F7B2.50501@libero.it>
Message-ID: <20060725123105.29014.669999395.divmod.quotient.53628@ohm>

On Tue, 25 Jul 2006 12:51:30 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Hi.
>
>In the interface IQ there is a keyed method but it seems that this is
>not implemented.
>What about it?

It looks like a very strange operation to me.  It should probably be
removed from the interface.

>
>It is documented also in stan.py (where there are some other special
>stuff like remember).
>

It is?  I can't see any references to it except for on the IQ definition.

>
>By the way: what's the difference, say, beetwen
>ctx.fillSlots(...) and inevow.IQ(ctx).fillSlots(...)
>?

Not a lot.  Neither should be used, though.  Use tag.fillSlots(...)
instead.

Jean-Paul

From exarkun at divmod.com  Tue Jul 25 07:33:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue Jul 25 07:34:02 2006
Subject: [Twisted-web] [Nevow] changing the attributes of a node
In-Reply-To: <44C5FA6A.9000401@libero.it>
Message-ID: <20060725123350.29014.1167686421.divmod.quotient.53631@ohm>

On Tue, 25 Jul 2006 13:03:06 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Hi.
>
>I need to set/unset an attribute (checked) on a <input type="checkbox">
>element (in a xml template).
>
>I'm using IQ.onePattern, but the problem is that the node is "removed"
>from the "stan context".

Instead, put a slot where the input node would have gone.  Create two
patterns, one for the checked mode and one for the unchecked mode, and
then fill the slot with whichever is appropriate.

The document Nevow will give you during page render has been optimized.
Inspecting and mutating it is only supported on nodes with specials, eg
render directives.

Jean-Paul

From manlio_perillo at libero.it  Tue Jul 25 10:29:53 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Jul 25 10:27:31 2006
Subject: [Twisted-web] [Nevow] inevow.IQ
In-Reply-To: <20060725123105.29014.669999395.divmod.quotient.53628@ohm>
References: <20060725123105.29014.669999395.divmod.quotient.53628@ohm>
Message-ID: <44C638F1.80401@libero.it>

Jean-Paul Calderone ha scritto:
> On Tue, 25 Jul 2006 12:51:30 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Hi.
>>
>> In the interface IQ there is a keyed method but it seems that this is
>> not implemented.
>> What about it?
> 
> It looks like a very strange operation to me.  It should probably be
> removed from the interface.
> 

It is not the only strange thing in Nevow source code ;-).


>>
>> It is documented also in stan.py (where there are some other special
>> stuff like remember).
>>
> 
> It is?  I can't see any references to it except for on the IQ definition.
> 

nevow.stan.Tag
    def __call__(self, **kw):
        """Change attributes of this tag. This is implemented using
        __call__ because it then allows the natural syntax::

          table(width="100%", height="50%", border="1")

        Attributes may be 'invisible' tag instances (so that
        C{a(href=invisible(data="foo", render=myhrefrenderer))} works),
        strings, functions, or any other object which has a registered
        flattener.

        If the attribute is a python keyword, such as 'class', you can
        add an underscore to the name, like 'class_'.

        A few magic attributes have values other than these, as they
        are not serialized for output but rather have special purposes
        of their own:

         - data: The value is saved on the context stack and passed to
           render functions.

         - render: A function to call that may modify the tag in any
           way desired.

         - remember: Remember the value on the context stack with
           context.remember(value) for later lookup with
           context.locate()

         - pattern: Value should be a key that can later be used to
           locate this tag with context.patternGenerator() or
           context.allPatterns()

         - key: A string used to give the node a unique label.  This
           is automatically namespaced, so in
C{span(key="foo")[span(key="bar")]}
           the inner span actually has a key of 'foo.bar'.  The key is
           intended for use as e.g. an html 'id' attribute, but will
           is not automatically output.

         - macro - A function which will be called once in the lifetime
           of the template, when the template is loaded. The return
           result from this function will replace this Tag in the template.
        """

>>
>> By the way: what's the difference, say, beetwen
>> ctx.fillSlots(...) and inevow.IQ(ctx).fillSlots(...)
>> ?
> 
> Not a lot. 

An overhead for the adaptation?

> Neither should be used, though.  Use tag.fillSlots(...)
> instead.
> 

Right, thanks.
But it is strange: why I do not get deprecation warnings?



Thanks and regards  Manlio Perillo





From lloyd at paisite.com  Thu Jul 27 12:23:00 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Thu Jul 27 12:25:47 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <33271.206.173.68.153.1153164901.squirrel@www.wbsysnet.com>
References: <33271.206.173.68.153.1153164901.squirrel@www.wbsysnet.com>
Message-ID: <33574.206.173.68.153.1154020980.squirrel@www.wbsysnet.com>

Hello,

I've added Turkey's fifth adventure, "Dialtone's Resource Magic" to
http://twisted.paisite.com

And I've brought up my Twisted environment to test it. (Questions about
this later).

When I run twistd -noy ResourceMagic.py, I get the following error on line 1:

"Failed to load application: No module named zope.interface"

I'm running Debian Sarge. I loaded both Twisted and Nevow through Debian's
Synaptic. Is there something else I need to load? Or what am I missing and
how do I fix it?

Or, maybe it's a configuration problem. The code is at
/home/tt/Adventures/bin. I have a ttAdventures.pth file at
/usr/local/lib/python2.3/site-packages with the content:

/home/tt/Adventures/bin

Can this be my problem? Clue: If I execute twistd -noy ResourceMagic.py in
/home/tt/Adventures, I get the following error:

"Failed to load application: [Errno 2] No such file or directory:
'ResourceMagic.py'"


Also, it'd be helpful if a couple of people could review/proofread/test
"Dialtone's Resource Magic" in http://twisted.paisite.com to affirm that
all is correct and clear. I'll continue to test the code once I get past
this zope.interface problem.

Many thanks,

Lloyd






From dialtone at divmod.com  Thu Jul 27 12:38:17 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jul 27 12:38:29 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <33574.206.173.68.153.1154020980.squirrel@www.wbsysnet.com>
Message-ID: <20060727173817.1717.291876656.divmod.quotient.2778@ohm>

On Thu, 27 Jul 2006 13:23:00 -0400 (EDT), lloyd@paisite.com wrote:
>Hello,
>
>I've added Turkey's fifth adventure, "Dialtone's Resource Magic" to
>http://twisted.paisite.com

Very cool.

>"Failed to load application: No module named zope.interface"

This is right. Nevow and the new Twisted do require zope.interface to work.
It's is present in all ubuntu configurations and I think also debian's. If it's not there you can get it here:

http://www.zope.org/Products/ZopeInterface

>"Failed to load application: [Errno 2] No such file or directory:
>'ResourceMagic.py'"

Yes, twistd doesn't import the file, only loads it and executes it, even if it is in the path it won't be loaded. That's why it is also better to name it  with the tac suffix instead of the py suffix so that people won't believe it's importable.

>Also, it'd be helpful if a couple of people could review/proofread/test
>"Dialtone's Resource Magic" in http://twisted.paisite.com to affirm that
>all is correct and clear. I'll continue to test the code once I get past
>this zope.interface problem.

I'll give it a look later.

From lloyd at paisite.com  Fri Jul 28 14:42:44 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Fri Jul 28 14:45:31 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <20060727173817.1717.291876656.divmod.quotient.2778@ohm>
References: <33574.206.173.68.153.1154020980.squirrel@www.wbsysnet.com>
	<20060727173817.1717.291876656.divmod.quotient.2778@ohm>
Message-ID: <33207.206.173.68.153.1154115764.squirrel@www.wbsysnet.com>

Hi Valentino,

On Thu, July 27, 2006 1:38 pm, Valentino Volonghi aka Dialtone wrote:

> This is right. Nevow and the new Twisted do require zope.interface to
> work. It's is present in all ubuntu configurations and I think also
> debian's.

I've loaded python2.3-zopeinterface from Debian repository and, in my
devel system, have renamed ResourceMagic.py ResourceMagic.tac.

Now when I run twistd -noy ResourceMagic.tac I get the error shown below.
Can't figure out how to track it down.

Thanks,

Lloyd


2006/07/28 15:29 EDT [-] Log opened.
2006/07/28 15:29 EDT [-] twistd 1.3.0rc1 (/usr/bin/python2.3 2.3.5)
starting up
2006/07/28 15:29 EDT [-] reactor class:
twisted.internet.default.SelectReactor
2006/07/28 15:29 EDT [-] Loading ResourceMagic.tac...
2006/07/28 15:29 EDT [-] Traceback (most recent call last):
2006/07/28 15:29 EDT [-] File
"/usr/lib/python2.3/site-packages/twisted/application/app.py", line 123,
in getApplication
2006/07/28 15:29 EDT [-] application = service.loadApplication(filename,
style, passphrase)
2006/07/28 15:29 EDT [-] File
"/usr/lib/python2.3/site-packages/twisted/application/service.py", line
319, in loadApplication
2006/07/28 15:29 EDT [-] application = sob.loadValueFromFile(filename,
'application', passphrase)
2006/07/28 15:29 EDT [-]   File
"/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 213, in
loadValueFromFile
2006/07/28 15:29 EDT [-] exec data in d, d
2006/07/28 15:29 EDT [-] File "<string>", line 11, in ?
2006/07/28 15:29 EDT [-] File
"/usr/lib/python2.3/site-packages/zope/interface/advice.py", line 132, in
advise
2006/07/28 15:29 EDT [-] return callback(newClass)
2006/07/28 15:29 EDT [-] File
"/usr/lib/python2.3/site-packages/zope/interface/declarations.py", line
550, in _implements_advice
2006/07/28 15:29 EDT [-] classImplements(cls, *interfaces)
2006/07/28 15:29 EDT [-] File
"/usr/lib/python2.3/site-packages/zope/interface/declarations.py", line
527, in classImplements
2006/07/28 15:29 EDT [-] spec.declared += tuple(_normalizeargs(interfaces))
2006/07/28 15:29 EDT [-] File
"/usr/lib/python2.3/site-packages/zope/interface/declarations.py", line
1345, in _normalizeargs
2006/07/28 15:29 EDT [-] _normalizeargs(v, output)
2006/07/28 15:29 EDT [-] File
"/usr/lib/python2.3/site-packages/zope/interface/declarations.py", line
1344, in _normalizeargs
2006/07/28 15:29 EDT [-] for v in sequence:
2006/07/28 15:29 EDT [-] TypeError: iteration over non-sequence
2

traceback...
...bunch of stuff...

File "/usr/lib/python2.3/site-packages/zope/interface/advice.py", line
132, in advise
return callback(newClass)
File "/usr/lib/python2.3/site-packages/zope/interface/declarations.py",
line 550, in _implements_advice
classImplements(cls, *interfaces)
File "/usr/lib/python2.3/site-packages/zope/interface/declarations.py",
line 527, in classImplements spec.declared +=
tuple(_normalizeargs(interfaces))
File "/usr/lib/python2.3/site-packages/zope/interface/declarations.py",
line 1345, in _normalizeargs_normalizeargs(v, output)
File "/usr/lib/python2.3/site-packages/zope/interface/declarations.py",
line 1344, in _normalizeargs for v in sequence: exceptions.TypeError:
iteration over non-sequence

Failed to load application: iteration over non-sequence




From exarkun at divmod.com  Fri Jul 28 15:06:06 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri Jul 28 15:06:09 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <33207.206.173.68.153.1154115764.squirrel@www.wbsysnet.com>
Message-ID: <20060728200606.1717.2038969490.divmod.quotient.4580@ohm>



On Fri, 28 Jul 2006 15:42:44 -0400 (EDT), lloyd@paisite.com wrote:
>Hi Valentino,
>
>On Thu, July 27, 2006 1:38 pm, Valentino Volonghi aka Dialtone wrote:
>
>> This is right. Nevow and the new Twisted do require zope.interface to
>> work. It's is present in all ubuntu configurations and I think also
>> debian's.
>
>I've loaded python2.3-zopeinterface from Debian repository and, in my
>devel system, have renamed ResourceMagic.py ResourceMagic.tac.
>
>Now when I run twistd -noy ResourceMagic.tac I get the error shown below.
>Can't figure out how to track it down.
>
>Thanks,
>
>Lloyd
>
>
>2006/07/28 15:29 EDT [-] Log opened.
>2006/07/28 15:29 EDT [-] twistd 1.3.0rc1 (/usr/bin/python2.3 2.3.5)
>starting up
>2006/07/28 15:29 EDT [-] reactor class:
>twisted.internet.default.SelectReactor
>2006/07/28 15:29 EDT [-] Loading ResourceMagic.tac...
>2006/07/28 15:29 EDT [-] Traceback (most recent call last):
>2006/07/28 15:29 EDT [-] File
>"/usr/lib/python2.3/site-packages/twisted/application/app.py", line 123,
>in getApplication
>2006/07/28 15:29 EDT [-] application = service.loadApplication(filename,
>style, passphrase)
>2006/07/28 15:29 EDT [-] File
>"/usr/lib/python2.3/site-packages/twisted/application/service.py", line
>319, in loadApplication
>2006/07/28 15:29 EDT [-] application = sob.loadValueFromFile(filename,
>'application', passphrase)
>2006/07/28 15:29 EDT [-]   File
>"/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 213, in
>loadValueFromFile
>2006/07/28 15:29 EDT [-] exec data in d, d
>2006/07/28 15:29 EDT [-] File "<string>", line 11, in ?
>2006/07/28 15:29 EDT [-] File
>"/usr/lib/python2.3/site-packages/zope/interface/advice.py", line 132, in
>advise
>2006/07/28 15:29 EDT [-] return callback(newClass)
>2006/07/28 15:29 EDT [-] File
>"/usr/lib/python2.3/site-packages/zope/interface/declarations.py", line
>550, in _implements_advice
>2006/07/28 15:29 EDT [-] classImplements(cls, *interfaces)
>2006/07/28 15:29 EDT [-] File
>"/usr/lib/python2.3/site-packages/zope/interface/declarations.py", line
>527, in classImplements
>2006/07/28 15:29 EDT [-] spec.declared += tuple(_normalizeargs(interfaces))
>2006/07/28 15:29 EDT [-] File
>"/usr/lib/python2.3/site-packages/zope/interface/declarations.py", line
>1345, in _normalizeargs
>2006/07/28 15:29 EDT [-] _normalizeargs(v, output)
>2006/07/28 15:29 EDT [-] File
>"/usr/lib/python2.3/site-packages/zope/interface/declarations.py", line
>1344, in _normalizeargs
>2006/07/28 15:29 EDT [-] for v in sequence:
>2006/07/28 15:29 EDT [-] TypeError: iteration over non-sequence
>2
>
>traceback...
>...bunch of stuff...
>
>File "/usr/lib/python2.3/site-packages/zope/interface/advice.py", line
>132, in advise
>return callback(newClass)
>File "/usr/lib/python2.3/site-packages/zope/interface/declarations.py",
>line 550, in _implements_advice
>classImplements(cls, *interfaces)
>File "/usr/lib/python2.3/site-packages/zope/interface/declarations.py",
>line 527, in classImplements spec.declared +=
>tuple(_normalizeargs(interfaces))
>File "/usr/lib/python2.3/site-packages/zope/interface/declarations.py",
>line 1345, in _normalizeargs_normalizeargs(v, output)
>File "/usr/lib/python2.3/site-packages/zope/interface/declarations.py",
>line 1344, in _normalizeargs for v in sequence: exceptions.TypeError:
>iteration over non-sequence
>
>Failed to load application: iteration over non-sequence
>
>
>
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web@twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From exarkun at divmod.com  Fri Jul 28 15:37:49 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri Jul 28 15:37:53 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <33207.206.173.68.153.1154115764.squirrel@www.wbsysnet.com>
Message-ID: <20060728203749.1717.938140181.divmod.quotient.4613@ohm>

On Fri, 28 Jul 2006 15:42:44 -0400 (EDT), lloyd@paisite.com wrote:
>Hi Valentino,
>
>On Thu, July 27, 2006 1:38 pm, Valentino Volonghi aka Dialtone wrote:
>
>> This is right. Nevow and the new Twisted do require zope.interface to
>> work. It's is present in all ubuntu configurations and I think also
>> debian's.
>
>I've loaded python2.3-zopeinterface from Debian repository and, in my
>devel system, have renamed ResourceMagic.py ResourceMagic.tac.
>
>Now when I run twistd -noy ResourceMagic.tac I get the error shown below.
>Can't figure out how to track it down.

You really want to be running a newer Twisted than 1.3.0.  There will
be all sorts of compatibility problems between it, Zope Interface, and
any reasonably recent version of Nevow.

Generally there should be a lot of flex in the version dependencies
between Twisted and Nevow, but the Zope Interface change was massive
and pervasive, so things are pretty much just broken if you don't use
the right versions together.

Jean-Paul

From lloyd at paisite.com  Fri Jul 28 22:12:37 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Fri Jul 28 22:15:26 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <20060728203749.1717.938140181.divmod.quotient.4613@ohm>
References: <33207.206.173.68.153.1154115764.squirrel@www.wbsysnet.com>
	<20060728203749.1717.938140181.divmod.quotient.4613@ohm>
Message-ID: <32848.206.173.68.153.1154142757.squirrel@www.wbsysnet.com>

Hi,

On Fri, July 28, 2006 4:37 pm, Jean-Paul Calderone wrote:
>
>
> You really want to be running a newer Twisted than 1.3.0.  There will
> be all sorts of compatibility problems between it, Zope Interface, and any
> reasonably recent version of Nevow.
>
> Generally there should be a lot of flex in the version dependencies
> between Twisted and Nevow, but the Zope Interface change was massive and
> pervasive, so things are pretty much just broken if you don't use the
> right versions together.

Thanks, Jean-Paul. I'll give it a shot.

Best wishes,

Lloyd

>


From manlio_perillo at libero.it  Sat Jul 29 06:46:03 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Jul 29 06:43:45 2006
Subject: [Twisted-web] updates to documentation
Message-ID: <44CB4A7B.6000600@libero.it>

Hi.

I have added two patches for the documentation:
#1355 and #1356.

I also have updated my private branch:
http://svn.python.it/twisted/trunk/contrib/nevow/doc/txt/

I have added some placeholders, an update (not yet ready for a patch):
http://svn.python.it/twisted/trunk/contrib/nevow/doc/txt/nevow-deployment.txt

and a draft for a new chapter:
http://svn.python.it/twisted/trunk/contrib/nevow/doc/txt/nevow-rendering-base.txt

(plus a small update to nevow-sessions).


I'm planning to update the nevow-rendering chapter with some images that
 will show how rendering machinery works.


Manlio Perillo

From lloyd at paisite.com  Sat Jul 29 10:44:10 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Sat Jul 29 10:46:59 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <20060728203749.1717.938140181.divmod.quotient.4613@ohm>
References: <33207.206.173.68.153.1154115764.squirrel@www.wbsysnet.com>
	<20060728203749.1717.938140181.divmod.quotient.4613@ohm>
Message-ID: <33625.206.173.68.153.1154187850.squirrel@www.wbsysnet.com>

Hello,

On Fri, July 28, 2006 4:37 pm, Jean-Paul Calderone wrote:

> You really want to be running a newer Twisted than 1.3.0.  There will
> be all sorts of compatibility problems between it, Zope Interface, and any
> reasonably recent version of Nevow.

And now my Turkey brain is running on empty. Help, help, help.

All I want to do is get my Twisted environment back up and running so I
can develop and test Turkey Adventures. But everything seems to be broken.

I'm running Debian Sarge. I use Apt-Get or, more usually, Synaptic, to
load applications. I've loaded the following packages:

Python2.3 version: 2.3.5-3sarge1
Python2.3-nevow version: 0.3.0-1
Python2.3-twisted version: 1.3.0-8
Python2.3-zopeinterface version: 3.0.1-1

The only upgrade packages I see when I search via Synaptic are:

Python2.4 version 2.4.1-2
Python2.4-zopeinterface version 3.0.1-1

There are no Python2.4 nevow or twisted upgrades.

When I go to the Twisted download page, all I see are tarballs.

So...

Do I need to go elsewhere to find upgrade files for Debian; e.g. deb
packages?

Or, do I need to use some other method such as tarballs to upgrade (if so,
I'll need a LOT of guidance to put everything in the right place and
properly configure it.)?

Or, am I missing something else entirely?

Once again I seem to bitten by the problem of doc writers assuming that
turkeys like me know more than we do.

Many thanks,

Lloyd








From manlio_perillo at libero.it  Sat Jul 29 11:00:55 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Jul 29 10:58:32 2006
Subject: [Twisted-web] [Nevow] JavaScript code
Message-ID: <44CB8637.9030002@libero.it>

Hi.

In the Nevow source distribution there are some JavaScript code but I
don't understand what files are actually used.

As an example there is defer.js script, but there is also a deferred
support in MochiKit.


Thanks  Manlio Perillo

From dialtone at divmod.com  Sat Jul 29 11:13:25 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sat Jul 29 11:13:27 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <33625.206.173.68.153.1154187850.squirrel@www.wbsysnet.com>
Message-ID: <20060729161325.1717.2082848237.divmod.quotient.5897@ohm>

On Sat, 29 Jul 2006 11:44:10 -0400 (EDT), lloyd@paisite.com wrote:
>I'm running Debian Sarge. I use Apt-Get or, more usually, Synaptic, to
>load applications. I've loaded the following packages:
>
>Python2.3 version: 2.3.5-3sarge1
>Python2.3-nevow version: 0.3.0-1
>Python2.3-twisted version: 1.3.0-8
>Python2.3-zopeinterface version: 3.0.1-1
>
>The only upgrade packages I see when I search via Synaptic are:
>
>Python2.4 version 2.4.1-2
>Python2.4-zopeinterface version 3.0.1-1
>
>There are no Python2.4 nevow or twisted upgrades.
>
>When I go to the Twisted download page, all I see are tarballs.
>
>So...
>
>Do I need to go elsewhere to find upgrade files for Debian; e.g. deb
>packages?
>
>Or, do I need to use some other method such as tarballs to upgrade (if so,
>I'll need a LOT of guidance to put everything in the right place and
>properly configure it.)?
>
>Or, am I missing something else entirely?
>
>Once again I seem to bitten by the problem of doc writers assuming that
>turkeys like me know more than we do.

If you have subversion installed you can do the following:

- Install ZopeInterface 3.1:
$ wget http://www.zope.org/Products/ZopeInterface/3.1.0c1/ZopeInterface-3.1.0c1.tgz
$ tar xzvf ZopeInterface-3.1.0c1.tgz
$ cd ZopeInterface-3.1.0c1
$ python setup.py install

- Install Divmod (Which includes Combinator, Axiom, Mantissa, Epsilon, Nevow, Quotient and many others):
$ cd /usr/src/
$ mkdir Divmod
$ cd Divmod
$ svn co http://divmod.org/svn/Divmod/trunk

- Setup Combinator:
$ echo "`python /usr/src/Divmod/trunk/Combinator/envirnment.py`" >> ~/.bashrc
$ source ~/.bashrc

- Activate trunk branch for Divmod repository:
$ cd /usr/src/
$ chbranch Divmod trunk

- Activate trunk branch for Twisted repository
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk

Reboot your shell


>From now on thanks (or not) to Combinator you'll install libraries in ~/.local/ it's possible to change this although I'm unsure you really want to, IMHO there should be a env var setting that allows for changing this directory, anyway this is not very important for this small installation tutorial.

This is the best setup for working with nevow and twisted and divmod. Updating any of the above packets only requires an svn up in the corresponding directory (Divmod/trunk for Nevow and Divmod related software, Twisted/trunk for Twisted Matrix).

In this tutorial /usr/src/ is considered the projects directory.

As for Debian Sarge... Well that's not really the best system for application development in Twisted since it only contains pretty old versions (for good or for bad reasons). Probably Debian unstable has the latest versions of all those but the best choice for a developer of Twisted is Ubuntu Dapper currently. Of course there's nothing you cannot do in a Debian system that you can do in an Ubuntu system, it's simply a matter of having to do more manual work rather than relying to apt (for example in my projects I use lighttpd and my current hosting provides me only with Ubuntu 5.10 which doesn't have lighttpd packaged and I had to compile it manually, not too bad if you know how to do it but not as comfortable as with Ubuntu Dapper).

From dialtone at divmod.com  Sat Jul 29 11:24:02 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sat Jul 29 11:24:04 2006
Subject: [Twisted-web] [Nevow] JavaScript code
In-Reply-To: <44CB8637.9030002@libero.it>
Message-ID: <20060729162402.1717.1792687475.divmod.quotient.5909@ohm>

On Sat, 29 Jul 2006 18:00:55 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Hi.
>
>In the Nevow source distribution there are some JavaScript code but I
>don't understand what files are actually used.
>
>As an example there is defer.js script, but there is also a deferred
>support in MochiKit.

I'm not the most entitled person to speak about those choices but MochiKit is currently only used for the Stan-like syntax inside Nevow.

The reasons are various and mostly have to do with disagreement in some implementation choices. Basically MochiKit is currently just an implementation detail that nobody should rely on being kept there or updated (currently it's version 1.1).

I'm unsure how much I agree with this choice because if from one hand it means that nevow fixes some problems with MochiKit APIs it also means that Nevow will have to maintain its own version of javascript library which is a problem by itself because, for example, the next MochiKit version will also provide a rich package for visual effects, also MochiKit works with all the main browsers while Nevow currently doesn't work with Opera and Safari (because of Safari) and I'm unsure about IE (although I think it works there).

anyway I'll let the others complete the answer because they know it better than me.

From ldanielburr at mac.com  Sat Jul 29 11:38:34 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Sat Jul 29 11:38:45 2006
Subject: [Twisted-web] [Nevow] JavaScript code
In-Reply-To: <20060729162402.1717.1792687475.divmod.quotient.5909@ohm>
References: <20060729162402.1717.1792687475.divmod.quotient.5909@ohm>
Message-ID: <op.tdglukf13oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Valentino,

On Sat, 29 Jul 2006 11:24:02 -0500, Valentino Volonghi aka Dialtone  
<dialtone@divmod.com> wrote:

[snip]

> I'm unsure how much I agree with this choice because if from one hand it  
> means that nevow fixes some problems with MochiKit APIs it also means  
> that Nevow will have to maintain its own version of javascript library  
> which is a problem by itself because, for example, the next MochiKit  
> version will also provide a rich package for visual effects, also  
> MochiKit works with all the main browsers while Nevow currently doesn't  
> work with Opera and Safari (because of Safari) and I'm unsure about IE  
> (although I think it works there).
>

Some details regarding browser support:  Opera 9 is supported by the
current release of Nevow.Athena; also, there is a patch awaiting review
that will make Opera as fast, or faster, than any other supported browser
for the most common DOM operations that Nevow.Athena performs.

IE is fully supported too, although it doesn't get tested as thoroughly
as Firefox.

Safari is not supported, although it can be as soon as Apple pushes a
release that includes a sufficiently updated version of WebKit.  I have
already done some preliminary hacking on my local runtime.js to enable
Safari support, and with the right WebKit, it will work.  Whenever the
correct WebKit version gets folded into a Safari release, I'll see about
providing a decent patch for Nevow.Athena.

Hope this helps,

L. Daniel Burr

From manlio_perillo at libero.it  Sat Jul 29 13:39:51 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Jul 29 13:37:28 2006
Subject: [Twisted-web] [Nevow] nestedsequence renderer
Message-ID: <44CBAB77.7080406@libero.it>

Hi.

As suggested in a previous post, here is a (hopefully) reusable
nestedsequence renderer, for those who cannot use a hierarchical data
structure (like dictionary).


class IData(Interface):
    # XXX choose a better name
    pass

class ShinDataFactory(object):
    # replacement for rend.DataFactory, to be used as a mixin
    # XXX Is it possible to patch the default implementation? XXX
    implements(inevow.IContainer)

    def child(self, context, n):
        args = []
        if n.find(' ') != -1:
            name, args = n.split(None, 1)
            args = [arg.strip() for arg in args.split(',')]
        else:
            name = n

        # we need to remember the last data directive name
        context.remember(name, IData)
        callable = getattr(self, 'data_%s' % name, None)

        ## If this page doesn't have an appropriate data_* method...
        if callable is None:
            ## See if our self.original has an IContainer...
            container = inevow.IContainer(self.original, None)
            if container is None:
                raise DataNotFoundError("The data named %r was not found
in %r." % (name, self))
            else:
                ## And delegate to it if so.
                return container.child(context, n)

        if args:
            return callable(*args)

        return callable


    def render_nestedsequence(self, context, data):
        name = context.locate(IData)
        nested_name = "nested_data_%s" % name
        # XXX not sure, check for nested_nested_data
        #context.remember(nested_name, IData)

        callable = getattr(self, nested_name, None)

        if callable is not None:
            data = callable(context, data)
        else:
            # XXX Not sure
            raise rend.DataNotFoundError("The nested data named %r was
not found in %r." % (name, self))

        tag = context.tag
        headers = tag.allPatterns("header")
        pattern = tag.patternGenerator("item")
        divider = tag.patternGenerator("divider",
                                       default=tags.invisible)
        content = [
            (pattern(data=element), divider(data=element))
            for element in data
            ]
        if not content:
            content = tag.allPatterns("empty")
        else:
            ## No divider after the last thing.
            content[-1] = content[-1][0]
        footers = tag.allPatterns("footer")

        return tag.clear()[ headers, content, footers ]


Here is an example:

class Main(ShinDataFactory, rend.Page):
    addSlash = True
    docFactory = loaders.xmlfile("nestedsequence.xhtml")


    def data_control_list(self, ctx, data):
        return [('a', "first"),  ('b', "second")]

    def nested_data_control_list(self, ctx, data):
        print "nested_data_control_list", data
        return [('1', "uno"), ('2', "due")]

    def render_control(self, ctx, data):
        ctx.fillSlots("ctrl_label", data[1])
        ctx.fillSlots("ctrl_name", data[0])

        return ctx.tag

    def render_option(self, ctx, data):
        ctx.fillSlots("opt_label", data[1])
        ctx.fillSlots("opt_value", data[0])

        return ctx


<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:n="http://nevow.com/ns/nevow/0.1"
      lang="it" xml:lang="it">
  <head>
    <title>Nested sequence</title>
  </head>
  <body>
    <form action="post" method="post">
      <ul n:render="sequence" n:data="control_list">
        <li n:pattern="item" n:render="control">
          <label><n:slot name="ctrl_label"/>
            <select n:render="nestedsequence">
              <n:attr name="name"><n:slot name="ctrl_name" /></n:attr>
              <option n:pattern="item" n:render="option">
                <n:attr name="value"><n:slot name="opt_value" /></n:attr>
                <n:slot name="opt_label" />
              </option>
            </select>
          </label>
        </li>
      </ul>
      <input type="submit" value="send" />
    </form>
  </body>
</html>



Any suggestions?



Thanks  Manlio Perillo

From mithrandi-twisted-web at mithrandi.za.net  Sat Jul 29 15:15:08 2006
From: mithrandi-twisted-web at mithrandi.za.net (Tristan Seligmann)
Date: Sat Jul 29 15:15:18 2006
Subject: [Twisted-web] [Nevow] JavaScript code
In-Reply-To: <20060729162402.1717.1792687475.divmod.quotient.5909@ohm>
References: <44CB8637.9030002@libero.it>
	<20060729162402.1717.1792687475.divmod.quotient.5909@ohm>
Message-ID: <20060729201507.GB3552@mithrandi.za.net>

* Valentino Volonghi aka Dialtone <dialtone@divmod.com> [2006-07-29 18:24:02 +0200]:

> On Sat, 29 Jul 2006 18:00:55 +0200, Manlio Perillo 
> <manlio_perillo@libero.it> wrote:
> >Hi.
> >
> >In the Nevow source distribution there are some JavaScript code but I
> >don't understand what files are actually used.
> >
> >As an example there is defer.js script, but there is also a deferred
> >support in MochiKit.
> 
> I'm not the most entitled person to speak about those choices but MochiKit 
> is currently only used for the Stan-like syntax inside Nevow.

It is? I believe usage of MochiKit.DOM for this purpose is "deprecated"
within Divmod itself, but there may be some isolated uses. The main
dependency blocking MochiKit's removal is the client-side JSON
serialization functionality.

> The reasons are various and mostly have to do with disagreement in some 
> implementation choices. Basically MochiKit is currently just an 
> implementation detail that nobody should rely on being kept there or 
> updated (currently it's version 1.1).

Specifically, an Athena transport implementation detail.

> I'm unsure how much I agree with this choice because if from one hand it 
> means that nevow fixes some problems with MochiKit APIs it also means that 
> Nevow will have to maintain its own version of javascript library which is 

These APIs do not overlap all that much; in many cases, Athena can
provide a far richer API for certain things than MochiKit could, simply
because of the Widget hierarchy. (eg. the nodeByAttribute Widget method)

> a problem by itself because, for example, the next MochiKit version will 
> also provide a rich package for visual effects, also MochiKit works with 
> all the main browsers while Nevow currently doesn't work with Opera and 
> Safari (because of Safari) and I'm unsure about IE (although I think it 
> works there).

If you want to use MochiKit in your own code, there's not too much
stopping you; currently, it is problematic to try and use a different
version of MochiKit to the one distributed with Nevow, but once this
dependency is completely phased out, that problem will no longer exist.

> anyway I'll let the others complete the answer because they know it better 
> than me.

Basically, it's a mostly orthogonal issue.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060729/b317b9b7/attachment.pgp
From dialtone at divmod.com  Sat Jul 29 15:48:09 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sat Jul 29 15:48:12 2006
Subject: [Twisted-web] [Nevow] JavaScript code
In-Reply-To: <20060729201507.GB3552@mithrandi.za.net>
Message-ID: <20060729204809.1717.114158698.divmod.quotient.6185@ohm>

On Sat, 29 Jul 2006 22:15:08 +0200, Tristan Seligmann <mithrandi-twisted-web@mithrandi.za.net> wrote:

>It is? I believe usage of MochiKit.DOM for this purpose is "deprecated"
>within Divmod itself, but there may be some isolated uses. The main
>dependency blocking MochiKit's removal is the client-side JSON
>serialization functionality.

I didn't know JSON was involved too, but MochiKit.DOM is used throughly in Divmod's Quotient.

>> a problem by itself because, for example, the next MochiKit version will
>> also provide a rich package for visual effects, also MochiKit works with
>> all the main browsers while Nevow currently doesn't work with Opera and
>> Safari (because of Safari) and I'm unsure about IE (although I think it
>> works there).
>
>If you want to use MochiKit in your own code, there's not too much
>stopping you; currently, it is problematic to try and use a different
>version of MochiKit to the one distributed with Nevow, but once this
>dependency is completely phased out, that problem will no longer exist.

Of course. I might use dojo toolkit as well. But having two different deferreds implementations in the same code is quite difficult to deal with. And also using mochikit would only solve the visual effects problem, whereas the browser compatibility problem won't be solved (not that I especially care about the bugged safari).


From mithrandi-twisted-web at mithrandi.za.net  Sat Jul 29 16:44:51 2006
From: mithrandi-twisted-web at mithrandi.za.net (Tristan Seligmann)
Date: Sat Jul 29 16:45:01 2006
Subject: [Twisted-web] [Nevow] JavaScript code
In-Reply-To: <20060729204809.1717.114158698.divmod.quotient.6185@ohm>
References: <20060729201507.GB3552@mithrandi.za.net>
	<20060729204809.1717.114158698.divmod.quotient.6185@ohm>
Message-ID: <20060729214451.GC3552@mithrandi.za.net>

* Valentino Volonghi aka Dialtone <dialtone@divmod.com> [2006-07-29 22:48:09 +0200]:

> >If you want to use MochiKit in your own code, there's not too much
> >stopping you; currently, it is problematic to try and use a different
> >version of MochiKit to the one distributed with Nevow, but once this
> >dependency is completely phased out, that problem will no longer exist.
> 
> Of course. I might use dojo toolkit as well. But having two different 
> deferreds implementations in the same code is quite difficult to deal with. 

Is there anything besides XMLHTTPRequest that you would use MochiKit's
deferreds for? If you're using Athena, you don't have any need for
MochiKit's XHR support, so this seems to be a non-issue...

> And also using mochikit would only solve the visual effects problem, 
> whereas the browser compatibility problem won't be solved (not that I 
> especially care about the bugged safari).

Increasing the usage of MochiKit in Athena would not solve the browser
compatibility problem either: the lack of support for various browsers
stems from functionality that is not implemented in MochiKit at all.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060729/df388c05/attachment.pgp
From wthie at thiengineering.ch  Mon Jul 31 03:05:36 2006
From: wthie at thiengineering.ch (Werner Thie)
Date: Mon Jul 31 03:05:49 2006
Subject: [Twisted-web] [Nevow] JavaScript code
Message-ID: <A7E1D1FB64A65CC3D9EE07A5@[192.168.11.99]>

Hi all

May I chime in with a question as a newbie?

I get the feeling from this particular thread that I am completely on the 
wrong course with my experiments ( http://telinfo.thie.ch ) on hooking 
together my Swiss telephonebook library with a 'live' app in the browser 
window. Mainly because I am using nevow 0.8, MochiKit 1.3.1 and athena for 
the implementation (Safari was never considered to work with this code, 
although it would be nice to have it on board).

If I am wrong in mixing these components, could someone please advise what 
I am supposed to change in my code for not getting some nasty surprises in 
the future when there are updates to nevow?

I like the TechnoTurkeys adventures a lot and would like to provide some 
help although I doubt that I have enough knowledge to help out with more 
than some light testing.

Thxs,
Werner Thie

Experience is what you get, when you expected something else.

Server side code of telinfo.thie.ch attached for reference
---------------------------------------------------------------
# telinfoweb.py - web service functionality test of the PYTHON telinfo 
package
#
# author   : wthie, wth
# last edit: 22.05.2005
# modhistory:
#   28.04.2005 - wth, created
#   22.05.2005 - wth, fiddled with result and status delivery, could do a 
whole
#                     lot more, but we leave it at that for the moment

import sys
import os
import simple_json

if '2.3' in sys.version:
  path = os.path.abspath('./python23/telinfo')

if '2.4' in sys.version:
  path = os.path.abspath('./python24/telinfo')

sys.path.append(path)

import telinfo

tcdpath = 'C:\\Program Files\\telcd\\teldata\\data'
verz = telinfo.SM_TELVERZ | telinfo.SM_PRIVAT | telinfo.SM_PROF

from zope.interface import implements, Interface
from twisted.python.components import registerAdapter
from nevow import athena, inevow, loaders, tags, util, static

class ITelinfoweb(Interface):
  def Search():
    pass

  def SearchExtended():
    pass


class Telinfoweb(object):
  def __init__(self):
    self.limit = 15
    self.result = ''

  def DoSearchPattern(self, pb, pattern):
    pat = pattern.replace(u'\xf6', 'o')
    pat = pat.replace(u'\xfc', 'u')
    pat = pat.replace(u'\xe4', 'a')
    pat = pat.replace(u'\xef', 'i')
    pat = pat.replace(u'\xe7', 'c')
    pat = pat.replace(u'\xe8', 'e')
    pat = pat.replace(u'\xe9', 'e')

    srchpat = pat.split('%')

    for i in range(0, len(srchpat)-1, 2):
      tagname = srchpat[i]
      spat    = srchpat[i+1]

      if (len(spat) > 0):
        tag = telinfo.ILLEGAL_SEARCH

        if (tagname == 'name'):
          tag = telinfo.NAMESEARCH
        elif (tagname == 'vorname'):
          tag = telinfo.FNAMESEARCH
        elif (tagname == 'strasse'):
          tag = telinfo.STREETSEARCH
        elif (tagname == 'ort'):
          tag = telinfo.ORTSEARCH
        elif (tagname == 'beruf'):
          tag = telinfo.BERUFSEARCH
        elif (tagname == 'ledig'):
          tag = telinfo.LEDIGSEARCH
        elif (tagname == 'zusatz'):
          tag = telinfo.ZUSATZSEARCH

        if (tag != telinfo.ILLEGAL_SEARCH):
          pb.Search(tag, spat)

    return


  def BuildResult(self, pb):
    cnt = pb.GetElemCount()
    d = {}
    d['count'] = str(cnt)
    d['limit'] = str(self.limit)
    d['columns'] = ['rvorname', 'rname', 'rstrasse', 'rnr', 'rtelno', 
'rplz', 'rort' ]
    d['rows']    = []

    if cnt > 0:
      if cnt > self.limit:				#limited to some value
        cnt = self.limit

    i = 0
    while (i < cnt):
      row = []
      row.append(unicode(pb.RetrieveField(i, telinfo.VORNAMETAG), 
'iso-8859-1'))
      row.append(unicode(pb.RetrieveField(i, telinfo.NAMETAG), 
'iso-8859-1'))
      row.append(unicode(pb.RetrieveField(i, telinfo.STRASSETAG), 
'iso-8859-1'))
      row.append(unicode(pb.RetrieveField(i, telinfo.HAUSNUMMERTAG), 
'iso-8859-1'))
      row.append(unicode(pb.RetrieveField(i, telinfo.RUFNUMMERTAG), 
'iso-8859-1'))
      row.append(unicode(pb.RetrieveField(i, telinfo.PLZTAG), 'iso-8859-1'))
      row.append(unicode(pb.RetrieveField(i, telinfo.ORTTAG), 'iso-8859-1'))

      d['rows'].append(row)

      i = i + 1

    pb.DropAll()
    return unicode(simple_json.dumps(d))


  def Search(self, pattern):
    pb = telinfo.pypbdb(tcdpath, tcdpath, 20, 0)
    pb.OpenSearchSimple(0, verz, '')
    self.DoSearchPattern(pb, pattern)
    pb.CloseSearch()
    return self.BuildResult(pb)


  def SearchExtended(self, pattern):
    pb = telinfo.pypbdb(tcdpath, tcdpath, 20, 0)
    pb.OpenSearchSimple(1, verz, '')
    self.DoSearchPattern(pb, pattern)
    pb.CloseSearch()
    return self.BuildResult(pb)


class TelinfowebResource(athena.LivePage):
    """
    telinfo in its web incarnation

    All buttons presses in the browser are sent to the server. The server
    evaluates the expression and sets the output in the browser.
    """
    addSlash = True

    #child_html = static.File('html')     #this trick did not work out with 
topstyles preview feature
                                          #will contact the author about 
that problem
    child_images  = static.File('images')
    child_scripts = static.File('scripts')
    child_css = static.File('css')

    docFactory = loaders.xmlfile(util.resource_filename('telinfoweb', 
'html/telinfoweb.html'))


if __name__ == '__main__':
  if True:
    from twisted.internet import reactor
    from twisted.python import log
    from nevow import appserver

    def TelinfowebResourceFactory(original):
        return TelinfowebResource(ITelinfoweb, original)

    registerAdapter(TelinfowebResourceFactory, Telinfoweb, inevow.IResource)

    log.startLogging(sys.stdout)
    site = appserver.NevowSite(Telinfoweb())
    reactor.listenTCP(80, site)
    reactor.run()
  else:
    tstpb = Telinfoweb()
    tstpb.SearchExtended('name%Thie%vorname%W*%')




From alex.greif at gmail.com  Mon Jul 31 05:47:24 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Mon Jul 31 05:47:28 2006
Subject: [Twisted-web] beginners question
Message-ID: <778770d80607310347n144c300asf13fb5e0b4adb36e@mail.gmail.com>

Hi NG,
I am completely new to twisted, but want to give it a try :)

I have a small website running, serving dynamic content with Pylons.
For switching to twisted, do I have to use the web or the web2 module?

thanks,

Alex.

From alex.greif at gmail.com  Mon Jul 31 06:16:15 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Mon Jul 31 06:16:22 2006
Subject: [Twisted-web] web2 distro
Message-ID: <778770d80607310416nc6a0174qbdd7ef505a4d32bf@mail.gmail.com>

Hi,
the latest version of web 2 is of june 2005.
Is it really the latest ?? or should I get the subversion sources?

Alex.

From graemeglass at gmail.com  Mon Jul 31 06:17:26 2006
From: graemeglass at gmail.com (Graeme Glass)
Date: Mon Jul 31 06:17:35 2006
Subject: [Twisted-web] beginners question
In-Reply-To: <778770d80607310347n144c300asf13fb5e0b4adb36e@mail.gmail.com>
References: <778770d80607310347n144c300asf13fb5e0b4adb36e@mail.gmail.com>
Message-ID: <ead817660607310417q5c43f44dx3902ba82984b7637@mail.gmail.com>

Depends on what features you need i suppose. web would be your best
bet if you don't need any of the new features of  web2, as it is still
not completely stable.

On 7/31/06, Alex Greif <alex.greif@gmail.com> wrote:
> Hi NG,
> I am completely new to twisted, but want to give it a try :)
>
> I have a small website running, serving dynamic content with Pylons.
> For switching to twisted, do I have to use the web or the web2 module?
>
> thanks,
>
> Alex.
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From alex.greif at gmail.com  Mon Jul 31 06:29:01 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Mon Jul 31 06:29:06 2006
Subject: [Twisted-web] simple sample problem
Message-ID: <778770d80607310429n5634ba52l85ad45c2ef8dee1b@mail.gmail.com>

just installed twisted 2.2.0 and web2 0.1.0 and tried the sample at:
http://twistedmatrix.com/projects/web2/documentation/howto/intro.html

but get the following exception:
Failed to load application: cannot import name channel

Is the sample old, or the 0.1.0 release outdated?

Alex.

From alex.greif at gmail.com  Mon Jul 31 06:40:05 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Mon Jul 31 06:40:17 2006
Subject: [Twisted-web] beginners question
In-Reply-To: <ead817660607310417q5c43f44dx3902ba82984b7637@mail.gmail.com>
References: <778770d80607310347n144c300asf13fb5e0b4adb36e@mail.gmail.com>
	<ead817660607310417q5c43f44dx3902ba82984b7637@mail.gmail.com>
Message-ID: <778770d80607310440m32504339ifd0f082d36c995a7@mail.gmail.com>

I would start a standalone server that serves static and dynamic content.
The most exciting thing is that I need to handle multipart file uploads.
Is this possible with web or is web2 needed for this.

Currently I can choose between web and web2. Will web2 released in
near future? Is there a release plan?

The latest release of web was in 2005-03-22.
Can anybody tell me why there are no newer releases? no bugfixes? or
is the project not maintained?

Sorry for these direct questions, but IMO for an open source project
it is not quite tipical to have a release that is more than a year
old, with the revision number of 0.x

ALex.







On 7/31/06, Graeme Glass <graemeglass@gmail.com> wrote:
> Depends on what features you need i suppose. web would be your best
> bet if you don't need any of the new features of  web2, as it is still
> not completely stable.
>
> On 7/31/06, Alex Greif <alex.greif@gmail.com> wrote:
> > Hi NG,
> > I am completely new to twisted, but want to give it a try :)
> >
> > I have a small website running, serving dynamic content with Pylons.
> > For switching to twisted, do I have to use the web or the web2 module?
> >
> > thanks,
> >
> > Alex.
> >
> > _______________________________________________
> > Twisted-web mailing list
> > Twisted-web@twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> >
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From general at eepatents.com  Mon Jul 31 07:11:20 2006
From: general at eepatents.com (Ed Suominen)
Date: Mon Jul 31 07:11:51 2006
Subject: [Twisted-web] web2 distro
In-Reply-To: <778770d80607310416nc6a0174qbdd7ef505a4d32bf@mail.gmail.com>
References: <778770d80607310416nc6a0174qbdd7ef505a4d32bf@mail.gmail.com>
Message-ID: <44CDF368.2060509@eepatents.com>

You definitely want the version from SVN trunk. Web2 is still a work in
progress, and a lot of the work is fairly new.

I'm not a developer on the project, but I wonder why web2 isn't ripe for
a release and why it can't start to be viewed as the preferred choice
over web already. I've been using a single web2 server to host my entire
collection of sites for a while now and haven't seen any problems. See
http://foss.eepatents.com/DynamicSite for some of the code.

Best regards, Ed

Alex Greif wrote:
> Hi,
> the latest version of web 2 is of june 2005.
> Is it really the latest ?? or should I get the subversion sources?
> 
> Alex.
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 


From exarkun at divmod.com  Mon Jul 31 08:44:17 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon Jul 31 08:44:21 2006
Subject: [Twisted-web] beginners question
In-Reply-To: <778770d80607310440m32504339ifd0f082d36c995a7@mail.gmail.com>
Message-ID: <20060731134417.1717.709197487.divmod.quotient.9170@ohm>

On Mon, 31 Jul 2006 13:40:05 +0200, Alex Greif <alex.greif@gmail.com> wrote:
>I would start a standalone server that serves static and dynamic content.
>The most exciting thing is that I need to handle multipart file uploads.
>Is this possible with web or is web2 needed for this.
>
>Currently I can choose between web and web2. Will web2 released in
>near future? Is there a release plan?
>
>The latest release of web was in 2005-03-22.

No it isn't.

http://twistedmatrix.com/trac/wiki/TwistedWeb2

Jean-Paul

From mithrandi-twisted-web at mithrandi.za.net  Mon Jul 31 09:03:00 2006
From: mithrandi-twisted-web at mithrandi.za.net (Tristan Seligmann)
Date: Mon Jul 31 09:03:49 2006
Subject: [Twisted-web] web2 distro
In-Reply-To: <44CDF368.2060509@eepatents.com>
References: <778770d80607310416nc6a0174qbdd7ef505a4d32bf@mail.gmail.com>
	<44CDF368.2060509@eepatents.com>
Message-ID: <20060731140259.GE8760@mithrandi.za.net>

* Ed Suominen <general@eepatents.com> [2006-07-31 05:11:20 -0700]:

> I'm not a developer on the project, but I wonder why web2 isn't ripe for
> a release and why it can't start to be viewed as the preferred choice
> over web already. I've been using a single web2 server to host my entire

One reason is that Nevow has not yet been ported to web2, and there are
still a few disruptive API changes looming (the whole streams/prodcons
thing...).
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060731/3be4348d/attachment.pgp
From alex.greif at gmail.com  Mon Jul 31 09:10:32 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Mon Jul 31 09:10:35 2006
Subject: [Twisted-web] fileupload sample
Message-ID: <778770d80607310710h7562ecffiba0aee750cae1b68@mail.gmail.com>

Hi,
where can I find a sample how to handle multipart file uploads with
web2 (or if not available then with web)

Alex.

From p.mayers at imperial.ac.uk  Mon Jul 31 09:57:46 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon Jul 31 09:57:56 2006
Subject: [Twisted-web] [Nevow] JavaScript code
In-Reply-To: <20060729214451.GC3552@mithrandi.za.net>
References: <20060729201507.GB3552@mithrandi.za.net>	<20060729204809.1717.114158698.divmod.quotient.6185@ohm>
	<20060729214451.GC3552@mithrandi.za.net>
Message-ID: <44CE1A6A.5050907@imperial.ac.uk>

Tristan Seligmann wrote:
> * Valentino Volonghi aka Dialtone <dialtone@divmod.com> [2006-07-29 22:48:09 +0200]:
> 
>>> If you want to use MochiKit in your own code, there's not too much
>>> stopping you; currently, it is problematic to try and use a different
>>> version of MochiKit to the one distributed with Nevow, but once this
>>> dependency is completely phased out, that problem will no longer exist.
>> Of course. I might use dojo toolkit as well. But having two different 
>> deferreds implementations in the same code is quite difficult to deal with. 
> 
> Is there anything besides XMLHTTPRequest that you would use MochiKit's
> deferreds for? If you're using Athena, you don't have any need for
> MochiKit's XHR support, so this seems to be a non-issue...

I can think of several reasons one might want MochiKit.

Due to the security model protecting XMLHTTP requests, you can only make 
requests back to the same origin server. Therefore, if you want to call 
an external (non-Twisted, non-Nevow, non-Athena) application from your 
Athena page, you might choose to glue that application into your server 
URL space using server-side reverse proxying.

If Athena is to replace MochiKit, it would need to provide at least as 
good primitives for e.g. JSON-RPC. If it does not, you'd still need a 
library to do so.

In *addition*, my understanding was that many (most?) browsers limited 
the number of outstanding HTTP requests you may have to a given server 
to 2. Therefore, running >2 "event loops" for XMLHTTP requests to e.g. 
different application spaces is impossible. If you happen to have 3 
application spaces deployed into your URL hierarchy, well, tough.

It is an unfortunate choice for some of us.

Finally, I think it's worth pointing out that one might want to use the 
Nevow+Athena code for widgetry and so forth, but if one already had an 
application API as e.g. JSON-RPC calls, exposing those calls *again* to 
an "implementation is internal detail" Athena channel is at best time 
consuming boilerplate, and at worst bug-riddled and insecure.

Athena-JS is more like a domain-specific language IHMO. It's not 
unreasonable to want to code the non-athena specific bits to a more 
general JS platform/framework/library.

My 2pence

> 
>> And also using mochikit would only solve the visual effects problem, 
>> whereas the browser compatibility problem won't be solved (not that I 
>> especially care about the bugged safari).
> 
> Increasing the usage of MochiKit in Athena would not solve the browser
> compatibility problem either: the lack of support for various browsers
> stems from functionality that is not implemented in MochiKit at all.

It seems a peculiar choice to not just fold those fixes back into 
MochiKit. The upstream developer(s) have good reputations for being 
sensible people, do they not?

From mithrandi-twisted-web at mithrandi.za.net  Mon Jul 31 10:21:02 2006
From: mithrandi-twisted-web at mithrandi.za.net (Tristan Seligmann)
Date: Mon Jul 31 10:21:50 2006
Subject: [Twisted-web] [Nevow] JavaScript code
In-Reply-To: <44CE1A6A.5050907@imperial.ac.uk>
References: <20060729201507.GB3552@mithrandi.za.net>
	<20060729204809.1717.114158698.divmod.quotient.6185@ohm>
	<20060729214451.GC3552@mithrandi.za.net>
	<44CE1A6A.5050907@imperial.ac.uk>
Message-ID: <20060731152101.GG8760@mithrandi.za.net>

* Phil Mayers <p.mayers@imperial.ac.uk> [2006-07-31 15:57:46 +0100]:

> >Is there anything besides XMLHTTPRequest that you would use MochiKit's
> >deferreds for? If you're using Athena, you don't have any need for
> >MochiKit's XHR support, so this seems to be a non-issue...
> 
> I can think of several reasons one might want MochiKit.
> 
> Due to the security model protecting XMLHTTP requests, you can only make 
> requests back to the same origin server. Therefore, if you want to call 
> an external (non-Twisted, non-Nevow, non-Athena) application from your 
> Athena page, you might choose to glue that application into your server 
> URL space using server-side reverse proxying.

You could make XHR calls via this reverse-proxy using the Athena
primitives for XHR, though.

> If Athena is to replace MochiKit, it would need to provide at least as 
> good primitives for e.g. JSON-RPC. If it does not, you'd still need a 
> library to do so.

I don't see any reason why Athena has to replace MochiKit. For the most
part, the two libraries are completely orthogonal. If you want to use
MochiKit's JSON-RPC functionality, nothing is stopping you.

> In *addition*, my understanding was that many (most?) browsers limited 
> the number of outstanding HTTP requests you may have to a given server 
> to 2. Therefore, running >2 "event loops" for XMLHTTP requests to e.g. 
> different application spaces is impossible. If you happen to have 3 
> application spaces deployed into your URL hierarchy, well, tough.

MochiKit does not implement any kind of peristent HTTP transport, so
this seems a moot point.

> Finally, I think it's worth pointing out that one might want to use the 
> Nevow+Athena code for widgetry and so forth, but if one already had an 
> application API as e.g. JSON-RPC calls, exposing those calls *again* to 
> an "implementation is internal detail" Athena channel is at best time 
> consuming boilerplate, and at worst bug-riddled and insecure.

I'm not personally concerned with this use case, so I'm not likely to
spend any time on implementing this. I would imagine that patches to
refactor Athena's Widget code to be less dependent on the Athena
client-server transport would be accepted, though, so others are free to
do the work to implement this.

> Athena-JS is more like a domain-specific language IHMO. It's not 
> unreasonable to want to code the non-athena specific bits to a more 
> general JS platform/framework/library.

My point is that nothing is stopping you from doing this, so far as I
can see.

> >>And also using mochikit would only solve the visual effects problem, 
> >>whereas the browser compatibility problem won't be solved (not that I 
> >>especially care about the bugged safari).
> >
> >Increasing the usage of MochiKit in Athena would not solve the browser
> >compatibility problem either: the lack of support for various browsers
> >stems from functionality that is not implemented in MochiKit at all.
> 
> It seems a peculiar choice to not just fold those fixes back into 
> MochiKit. The upstream developer(s) have good reputations for being 
> sensible people, do they not?

There are no "fixes". The copy of MochiKit distributed in Nevow is
completely unmodified so far as I am aware (even if it isn't the latest
version). There is Athena-specific functionality, not implemented at all
by MochiKit, that requires either certain browser functionality, or
browser-runtime-specific code. For example, the Divmod.Class system
results in widespread idiomatic usage of named function expressions.
Safari's JavaScript parser chokes on this as invalid syntax, hence the
lack of Safari support. As was pointed out elsewhere, this problem has
been fixed in WebKit upstream, so will presumably make its way into
Safari at some point; when this happens, doing the rest of the work to
support Safari should not be very difficult.

This is basically all completely orthogonal functionality, however;
Athena is not reimplementing large portions of MochiKit verbatim, it is
implementing different functionality in different ways, with a few
exceptions such as XHR and Deferred.

Once the MochiKit dependency in Athena is completely gone, there will be
no need to distribute MK alongside Athena, and thus developers will be
free to include whatever version of MochiKit they wish for their own
use, without having to jump through hoops.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060731/a903afa0/attachment.pgp
From glyph at divmod.com  Mon Jul 31 10:34:54 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Mon Jul 31 10:34:57 2006
Subject: [Twisted-web] beginners question
In-Reply-To: <778770d80607310347n144c300asf13fb5e0b4adb36e@mail.gmail.com>
Message-ID: <20060731153454.1717.1394310398.divmod.quotient.9305@ohm>



On Mon, 31 Jul 2006 12:47:24 +0200, Alex Greif <alex.greif@gmail.com> wrote:
>Hi NG,
>I am completely new to twisted, but want to give it a try :)
>
>I have a small website running, serving dynamic content with Pylons.
>For switching to twisted, do I have to use the web or the web2 module?

If you want to work at the abstraction level of Pylons, you probably want to ignore the web/web2 distinction and work with Nevow.  That means using web1 for now and web2 when it's ready, with minimal changes to the API.

However, you should read this page with an eye to your specific requirements:

    http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted

(Also, please do not cross-post web questions to twisted-python; we have a separate list on purpose.)

From alex.greif at gmail.com  Mon Jul 31 10:36:05 2006
From: alex.greif at gmail.com (Alex Greif)
Date: Mon Jul 31 10:36:09 2006
Subject: [Twisted-web] FileSaver bug
Message-ID: <778770d80607310836qd59b7ech992de12d0f83d0ba@mail.gmail.com>

Hi

On windows XP (python 2.4.2) the latest svn checkout produces the following bug:
FileSaver converts LF to CRLF automatically, even in binary files!!

I tried to upload files with the following code:

  child_uploadfile = static.FileSaver(destination='d:/agreif/tmp',
                                                expectedFields=['filename'],
                                                maxBytes=10000000,

allowedTypes=[http_headers.MimeType('text', 'x-python'),

http_headers.MimeType('application','x-zip-compressed')])

here is the hexdump of two samples.
You see that in front of every occurrance of "0A" a "0D" is inserted.

Sample 1: textfile
orig:
68616C6C6F0A
uploaded:
68616C6C6F0D0A

Sample 2 binary file (zip)
orig:
504B03040A00000000001589FF34D13172B90500000005000000100000004E6575205465787464617465692E707968616C6C6F504B010214000A00000000001589FF34D13172B905000000050000001000000000000000010020000000000000004E6575205465787464617465692E7079504B050600000000010001003E000000330000000000
uploaded:
504B03040D0A00000000001589FF34D13172B90500000005000000100000004E6575205465787464617465692E707968616C6C6F504B010214000D0A00000000001589FF34D13172B905000000050000001000000000000000010020000000000000004E6575205465787464617465692E7079504B050600000000010001003E000000330000000000


Alex.

From corydodt at twistedmatrix.com  Mon Jul 31 11:45:05 2006
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon Jul 31 11:38:36 2006
Subject: [Twisted-web] FileSaver bug
In-Reply-To: <778770d80607310836qd59b7ech992de12d0f83d0ba@mail.gmail.com>
References: <778770d80607310836qd59b7ech992de12d0f83d0ba@mail.gmail.com>
Message-ID: <44CE3391.7040709@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Alex,

Please submit a bug at <http://twistedmatrix.com/trac>.  The fix for this one
is trivial, but it also needs a failing unit test.  (The current tests would
never have noticed this bug, which is indeed serious.)


C


Alex Greif wrote:
> Hi
> 
> On windows XP (python 2.4.2) the latest svn checkout produces the
> following bug:
> FileSaver converts LF to CRLF automatically, even in binary files!!
> 
> I tried to upload files with the following code:
> 
>  child_uploadfile = static.FileSaver(destination='d:/agreif/tmp',
>                                                expectedFields=['filename'],
>                                                maxBytes=10000000,
> 
> allowedTypes=[http_headers.MimeType('text', 'x-python'),
> 
> http_headers.MimeType('application','x-zip-compressed')])
> 
> here is the hexdump of two samples.
> You see that in front of every occurrance of "0A" a "0D" is inserted.
> 
> Sample 1: textfile
> orig:
> 68616C6C6F0A
> uploaded:
> 68616C6C6F0D0A
> 
> Sample 2 binary file (zip)
> orig:
> 504B03040A00000000001589FF34D13172B90500000005000000100000004E6575205465787464617465692E707968616C6C6F504B010214000A00000000001589FF34D13172B905000000050000001000000000000000010020000000000000004E6575205465787464617465692E7079504B050600000000010001003E000000330000000000
> 
> uploaded:
> 504B03040D0A00000000001589FF34D13172B90500000005000000100000004E6575205465787464617465692E707968616C6C6F504B010214000D0A00000000001589FF34D13172B905000000050000001000000000000000010020000000000000004E6575205465787464617465692E7079504B050600000000010001003E000000330000000000
> 
> 
> 
> Alex.
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (MingW32)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFEzjOR3A5SrXAiHQcRAjQMAJ49Y983MMvo/Quq3rnH3PGhvcIQWwCghSJY
yXe/AiGyNMl/63jTfjZpqSE=
=EEfu
-----END PGP SIGNATURE-----

From manlio_perillo at libero.it  Mon Jul 31 12:10:21 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jul 31 12:07:59 2006
Subject: [Twisted-web] Dos and
 =?utf-8?q?Don=E2=80=99ts_of_Client=2CAuthentication_on_th?=
 =?utf-8?q?e_Web?=
Message-ID: <44CE397D.2030207@libero.it>

I have found this article on the web:
http://pdos.lcs.mit.edu/cookies/pubs/webauth:tr.pdf

And:
http://www.acros.si/papers/session_fixation.pdf


Among the other things, the second article claims (if I'm not wrong)
that url based sessions are not more secure that cookies.

The first article explain the importance of not to leak the user's
passwords (so I need to login on SSL, this makes the default
implementation of guard not usable).


Regards  Manlio Perillo

From dreid at dreid.org  Mon Jul 31 12:24:44 2006
From: dreid at dreid.org (dreid@dreid.org)
Date: Mon Jul 31 12:24:49 2006
Subject: [Twisted-web] web2 distro
In-Reply-To: <778770d80607310416nc6a0174qbdd7ef505a4d32bf@mail.gmail.com>
References: <778770d80607310416nc6a0174qbdd7ef505a4d32bf@mail.gmail.com>
Message-ID: <49401.17.221.46.118.1154366684.squirrel@dreid.org>

> Hi,
> the latest version of web 2 is of june 2005.
> Is it really the latest ?? or should I get the subversion sources?
>
> Alex.

Actually the latest version released was June of 2006 (version number
0.2.)  If you don't like the idea of any software you write breaking
overnight because a major branch got merged you shouldn't be using web2
SVN.  web2 is in the very early development releases and there are
currently no plans to start worrying about backwards compatibility there
is simply too much to do.

-David


From dreid at dreid.org  Mon Jul 31 12:25:21 2006
From: dreid at dreid.org (dreid@dreid.org)
Date: Mon Jul 31 12:25:23 2006
Subject: [Twisted-web] web2 distro
In-Reply-To: <20060731140259.GE8760@mithrandi.za.net>
References: <778770d80607310416nc6a0174qbdd7ef505a4d32bf@mail.gmail.com>
	<44CDF368.2060509@eepatents.com>
	<20060731140259.GE8760@mithrandi.za.net>
Message-ID: <49404.17.221.46.118.1154366721.squirrel@dreid.org>

> * Ed Suominen <general@eepatents.com> [2006-07-31 05:11:20 -0700]:
>
>> I'm not a developer on the project, but I wonder why web2 isn't ripe for
>> a release and why it can't start to be viewed as the preferred choice
>> over web already. I've been using a single web2 server to host my entire
>
> One reason is that Nevow has not yet been ported to web2, and there are
> still a few disruptive API changes looming (the whole streams/prodcons
> thing...).

That sounds like volunteering, I'll go get the bear.

-David


From dan+twisted at catolabs.org  Mon Jul 31 13:15:59 2006
From: dan+twisted at catolabs.org (Dan Aronson)
Date: Mon Jul 31 13:16:30 2006
Subject: [Twisted-web] looking for large scale twisted/web  stories
Message-ID: <44CE48DF.5000803@catolabs.org>

In evaluation the possible implementation of a potentially very large 
scale web service in twisted I would love to talk to anyone who
has used twisted for a large scale application.  Please let me know if 
you would be willing to help out.

--dan aronson


From duncan.mcgreggor at gmail.com  Mon Jul 31 13:28:46 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Mon Jul 31 13:29:04 2006
Subject: [Twisted-web] looking for large scale twisted/web  stories
In-Reply-To: <44CE48DF.5000803@catolabs.org>
References: <44CE48DF.5000803@catolabs.org>
Message-ID: <44CE4BDE.3040201@gmail.com>

Dan Aronson wrote:

> In evaluation the possible implementation of a potentially very large 
> scale web service in twisted I would love to talk to anyone who
> has used twisted for a large scale application.  Please let me know if 
> you would be willing to help out.

Could you give more info on what you mean by large scale? For example, 
you mentioned "web service": are you going to be running an RPC service 
where you expect 1000s of requests per second? Will your app be 
responding with tons of data?

Thanks,

d

From ldanielburr at mac.com  Mon Jul 31 13:36:22 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Jul 31 13:37:23 2006
Subject: [Twisted-web] looking for large scale twisted/web  stories
In-Reply-To: <44CE48DF.5000803@catolabs.org>
References: <44CE48DF.5000803@catolabs.org>
Message-ID: <op.tdkgmwee3oj628@l-daniel-burrs-powerbook-g4-17.local>

Dan,

On Mon, 31 Jul 2006 13:15:59 -0500, Dan Aronson <dan+twisted@catolabs.org>  
wrote:

> In evaluation the possible implementation of a potentially very large  
> scale web service in twisted I would love to talk to anyone who
> has used twisted for a large scale application.  Please let me know if  
> you would be willing to help out.
>

What does "very large scale" mean for you?  Google?  Slashdot?
Something else entirely?  Scale means lots of things to lots of
people, so any clarity you can provide around this will help us
in helping you.

Also, what does "helping out" mean?  Is this going to be an OSS
project, a proprietary one?  Are you looking for volunteers, or
recruiting employees/contractors/consultants?

Have a good one,

L. Daniel Burr

From manlio_perillo at libero.it  Mon Jul 31 14:05:26 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jul 31 14:03:03 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
Message-ID: <44CE5476.8040303@libero.it>

Hi again.

I have read the draft implementation of guard in Valentino's sandbox and
I like it.

However I have some questions:
- why the ISessionMenager interface does not include a name attribute
  (since the default Session class uses the private _name)?
- why Session.authenticatedAs has to be a property?
- I think that there is no need to store tha password but only the
  username, so authenticatedAs -> avatarID
- what's the use for the guard attribute in Session?
- I think that ISessionManager should not have the loggedIn method.
- as I can see the code in SessionManager._tick causes the log
  "Session %r expired" to be issued two times.
- what's the use for mind in a web authentication?
- why credInterface is a variable? It can be something different from
  IResource?
- Session.sessionLifetime is only used on the server side but never set
  on the cookie.
  Only persistent cookies have a not null expiration date.
- As I can see in SessionWrappper.locateChild the code
  request.session = session is executed twice (the first time in
  getSession.


Thanks  Manlio Perillo

From dialtone at divmod.com  Mon Jul 31 15:52:47 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Jul 31 15:52:57 2006
Subject: [Twisted-web] [Nevow] about new guard in sandbox
In-Reply-To: <44CE5476.8040303@libero.it>
Message-ID: <20060731205247.1717.2093160798.divmod.quotient.9709@ohm>

On Mon, 31 Jul 2006 21:05:26 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Hi again.
>
>I have read the draft implementation of guard in Valentino's sandbox and
>I like it.
>
>However I have some questions:
>- why the ISessionMenager interface does not include a name attribute
>  (since the default Session class uses the private _name)?

The reason why it misses the name in the interface is that it's not meant to be accessible from the outside. It's a pretty important internal detail in _this_ SessionManager implementation. There might be many other ways to deal with distributed session rather than simply using name attribute on the sessionmanager and ISessionManager ought to be as generic as possible.

>- why Session.authenticatedAs has to be a property?

Because I wasn't able to find a better name that was somewhat compatible
to using an explicit get/set. And because it's cleaner IMHO.

>- I think that there is no need to store tha password but only the
>  username, so authenticatedAs -> avatarID

Not really... Authentication is rerun for each request because the avatar is not saved and this is the most important detail of that new guard. Also the avatarId is not available in guard because it's a cred implementation detail. And the avatarId might be any object. But I'm open for alternative solutions.

>- what's the use for the guard attribute in Session?

It's explained in the docstring of loggedIn (somehow). It's because it makes
it easier to access the guard that created the session.

>- I think that ISessionManager should not have the loggedIn method.

Why? It allows to change how the application should react to a successfully
logged in session without going through guard code overriding a callback, of a very big method, defined as a closure. IMHO it's a lot cleaner to have it this way unless your reasons are sensible.

>- as I can see the code in SessionManager._tick causes the log
>  "Session %r expired" to be issued two times.

True.

>- what's the use for mind in a web authentication?

I have no idea. There might be a usage, why should you make it impossible
to have a usage of it?

>- why credInterface is a variable? It can be something different from
>  IResource?

iweb2.IResource? Anyway this is absolutely not a valid concern it's simply
a refactoring to allow changing that interface from application level code (again without the need to dig through the code).

>- Session.sessionLifetime is only used on the server side but never set
>  on the cookie.
>  Only persistent cookies have a not null expiration date.

True. In fact sessionLifetime is used for transient sessions that die when you restart your browser and from the serverside they last until sessionLifetime is expired. If the session is logged in the cookies are made persistent by default. If you use the persistent session manager you also have the chance to make the session persistent (by using rememberMe url argument in the login form).

>- As I can see in SessionWrappper.locateChild the code
>  request.session = session is executed twice (the first time in
>  getSession.

I think you might be right also on this. Although it's not that big of a problem it might be worth fixing it. Just by making getSession automatically set the session on the request (and not only with brand new sessions) and removing all the other places where this assignment is done. And then rerunning tests.

Also keep in mind that the most developed version of that code lies in:
http://hg.stiq.it/index.cgi/stiq?f=b9671c61c96b;file=stiq/guard.py;style=gitweb
and
http://hg.stiq.it/index.cgi/stiq?f=eef00c91fd79;file=stiq/session.py;style=gitweb

From lloyd at paisite.com  Mon Jul 31 17:49:00 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Mon Jul 31 17:51:54 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <20060729161325.1717.2082848237.divmod.quotient.5897@ohm>
References: <33625.206.173.68.153.1154187850.squirrel@www.wbsysnet.com>
	<20060729161325.1717.2082848237.divmod.quotient.5897@ohm>
Message-ID: <33463.206.173.68.153.1154386140.squirrel@www.wbsysnet.com>

Hi,



On Sat, July 29, 2006 12:13 pm, Valentino Volonghi aka Dialtone wrote:

> - Install ZopeInterface 3.1:
> $ wget
> http://www.zope.org/Products/ZopeInterface/3.1.0c1/ZopeInterface-3.1.0c1.
> tgz $ tar xzvf ZopeInterface-3.1.0c1.tgz
> $ cd ZopeInterface-3.1.0c1
> $ python setup.py install

At this step I got the following error:

Cube1:~/ZopeInterface-3.1.0c1# python setup.py install
running install
error: invalid Python installation: unable to open
/usr/lib/python2.3/config/Makefile (No such file or directory)

I reinstalled Python2.3 to see if that would make a difference, but it
didn't.

Thanks,

Lloyd





From ldanielburr at mac.com  Mon Jul 31 18:36:57 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Jul 31 18:37:00 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <33463.206.173.68.153.1154386140.squirrel@www.wbsysnet.com>
References: <33625.206.173.68.153.1154187850.squirrel@www.wbsysnet.com>
	<20060729161325.1717.2082848237.divmod.quotient.5897@ohm>
	<33463.206.173.68.153.1154386140.squirrel@www.wbsysnet.com>
Message-ID: <op.tdkujvej3oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Lloyd,


On Mon, 31 Jul 2006 17:49:00 -0500, <lloyd@paisite.com> wrote:

> Hi,
>
>
>
> On Sat, July 29, 2006 12:13 pm, Valentino Volonghi aka Dialtone wrote:
>
>> - Install ZopeInterface 3.1:
>> $ wget
>> http://www.zope.org/Products/ZopeInterface/3.1.0c1/ZopeInterface-3.1.0c1.
>> tgz $ tar xzvf ZopeInterface-3.1.0c1.tgz
>> $ cd ZopeInterface-3.1.0c1
>> $ python setup.py install
>
> At this step I got the following error:
>
> Cube1:~/ZopeInterface-3.1.0c1# python setup.py install
> running install
> error: invalid Python installation: unable to open
> /usr/lib/python2.3/config/Makefile (No such file or directory)
>
> I reinstalled Python2.3 to see if that would make a difference, but it
> didn't.
>

I'm betting you need some kind of python-dev package.  I'm no Linux person,
but I do believe that many distributions split python into two packages,
one with the basic python install, and the other with dev tool, libs, etc.

Hope this helps,

L. Daniel Burr

From lloyd at paisite.com  Mon Jul 31 20:07:26 2006
From: lloyd at paisite.com (lloyd@paisite.com)
Date: Mon Jul 31 20:10:24 2006
Subject: [Twisted-web] documentation -- Techno Turkey's fifth adventure
In-Reply-To: <op.tdkujvej3oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <33625.206.173.68.153.1154187850.squirrel@www.wbsysnet.com>
	<20060729161325.1717.2082848237.divmod.quotient.5897@ohm>
	<33463.206.173.68.153.1154386140.squirrel@www.wbsysnet.com>
	<op.tdkujvej3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <33323.206.173.68.153.1154394446.squirrel@www.wbsysnet.com>

Hi,

On Mon, July 31, 2006 7:36 pm, L. Daniel Burr wrote:

Thanks, Daniel. Definite progress. Did require Python2.3-dev package.

But now... I get to the following step:

- Install ZopeInterface 3.1:
$ wget
http://www.zope.org/Products/ZopeInterface/3.1.0c1/ZopeInterface-3.1.0c1.tgz
$ tar xzvf ZopeInterface-3.1.0c1.tgz
$ cd ZopeInterface-3.1.0c1
$ python setup.py install

- Install Divmod (Which includes Combinator, Axiom, Mantissa, Epsilon, Nevow,
Quotient and many others):
$ cd /usr/src/
$ mkdir Divmod
$ cd Divmod
$ svn co http://divmod.org/svn/Divmod/trunk

- Setup Combinator:
$ echo "`python /usr/src/Divmod/trunk/Combinator/envirnment.py`" >> ~/.bashrc

And I get this error:

 File "/usr/src/Divmod/trunk/Combinator/combinator/branchmgr.py", line
129, in getCurrentBranches
    for yth in os.listdir(self.sitePathsPath):
OSError: [Errno 2] No such file or directory: '/usr/src/combinator_paths'

Please advise.

Thanks again,

Lloyd





