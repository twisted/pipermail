From dvd at gnx.it  Tue Jan  2 11:19:42 2007
From: dvd at gnx.it (david mugnai)
Date: Wed Jan  3 02:05:15 2007
Subject: [Twisted-web] Ticket #2346: HTTP header generation in web2
	according to RFC822
Message-ID: <pan.2007.01.02.17.19.42.47777@gnx.it>

Hi all,

tekNico and I found a problem with the web2 headers generation code.

We opened the ticket #2346 with a patch to the testcase and a patch
to web2.http_headers.

We are not sure we correctly deciphered RFC 822, where it says:

quoted-string = <"> *(qtext/quoted-pair) <">
qtext =  <any CHAR excepting <">, "\" & CR, and including linear-white-space>
quoted-pair =  "\" CHAR

Should the "&" character be construed as a linguistic comma:

    qtext = qtext.replace('\r', '\\\r')

or as a logic AND?

    qtext = qtext.replace('\\\r', '\\\\\r')

Thanks.


From manlio_perillo at libero.it  Wed Jan  3 08:23:03 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed Jan  3 08:23:16 2007
Subject: [Twisted-web] [ANN] nadbapi
Message-ID: <459BBC47.1080100@libero.it>

I have written a small package for the integration of SQLAlchemy with 
Twisted.

The project is hosted at:
https://developer.berlios.de/projects/nadbapi/

I have implemented a custom Pool, Engine and MetaData to allow full 
integration.

The project is still a pre release.


Regards  Manlio Perillo

From grant at osafoundation.org  Wed Jan  3 11:13:18 2007
From: grant at osafoundation.org (Grant Baillie)
Date: Wed Jan  3 11:13:24 2007
Subject: [Twisted-web] Ticket #2346: HTTP header generation in web2
	according to RFC822
In-Reply-To: <pan.2007.01.02.17.19.42.47777@gnx.it>
References: <pan.2007.01.02.17.19.42.47777@gnx.it>
Message-ID: <A798CDB0-FF37-4A21-AD84-E48A928C853B@osafoundation.org>

Have a look at section 3.4.1 (Clarifications>>Quoting):


          Within these constructs, quoting is REQUIRED for  CR  and  "\"
         and for the character(s) that delimit the token (e.g., "(" and
         ")" for a comment).

So, they're saying to backslash escape CR, "\" and double-quote for  
quoted-strings.

HTH,

--Grant

On 2 Jan, 2007, at 09:19, david mugnai wrote:

> Hi all,
>
> tekNico and I found a problem with the web2 headers generation code.
>
> We opened the ticket #2346 with a patch to the testcase and a patch
> to web2.http_headers.
>
> We are not sure we correctly deciphered RFC 822, where it says:
>
> quoted-string = <"> *(qtext/quoted-pair) <">
> qtext =  <any CHAR excepting <">, "\" & CR, and including linear- 
> white-space>
> quoted-pair =  "\" CHAR
>
> Should the "&" character be construed as a linguistic comma:
>
>     qtext = qtext.replace('\r', '\\\r')
>
> or as a logic AND?
>
>     qtext = qtext.replace('\\\r', '\\\\\r')
>
> Thanks.
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From manlio_perillo at libero.it  Thu Jan  4 04:58:16 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jan  4 04:59:00 2007
Subject: [Twisted-web] [Nevow] again on data directive
Message-ID: <459CDDC8.5070301@libero.it>

To put it simple, I would like to have this feature:


<div n:data="xxx" n:render="yyy" />


def render_yyy(request, tag):
    assert tag.data == 'xxx'



That is: data directives are only used to pass data from the template to 
the renderer.

Is this a good idea?

Now what I can do is:

<div data="xxx" n:render="yyy" />

def render-yyy(request, tag):
    assert tag.attributes.pop('data') == 'xxx'




Thanks and regards  Manlio Perillo

From manlio_perillo at libero.it  Thu Jan  4 06:53:06 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jan  4 06:53:29 2007
Subject: Fwd: [Twisted-web] [Nevow] again on data directive
In-Reply-To: <8b339dc40701040432waaa3717q6fccac2494323daf@mail.gmail.com>
References: <mailman.9874.1167913742.4764.twisted-web@twistedmatrix.com>
	<8b339dc40701040432waaa3717q6fccac2494323daf@mail.gmail.com>
Message-ID: <459CF8B2.9040008@libero.it>

sifu ha scritto:
> hmmmm... couldn't send it to the list.
> 
> ---------- Forwarded message ----------
> From: sifu <lists@0xx0.net>
> To: "Twisted Web World" <twisted-web@twistedmatrix.com>
> Date: Thu, 4 Jan 2007 13:28:46 +0100
> Subject: Re: [Twisted-web] [Nevow] again on data directive
> with the current nevow you can do:
> 
> <div n:render="yyy xxx" />
> 
> def render_yyy( self, argument ):
>    def _( ctx, data ):
>        assert argument == 'xxx'
>    return _
> 
> but some nevow developers don't like the feature and want to get rid of it.
> 

The problem with the current implementation is that data directives are 
handled by the Nevow rendering machinery (with object adaptation).

I'm proposing that data directive must be handled by the user.

Here is an example:


<ul n:render="list">
   <li n:data="x" n:render="item" />
   <li n:data="y" n:render="item  />
</ul>


def render_list(request, tag):
    request.data = {'x': 1, 'y': 2}
    return tag

def render_item(request, tag):
    item = request.data[tag.data]
    return tag[item]


Without data directive I have to do:

<ul n:render="list">
   <li n:pattern="x"><n:slot name="value" /></li>
   <li n:pattern="y" /><n:slot name="value" /></li>
</ul>


def render_list(request, tag):
    data = {'x': 1, 'y': 2}
    for key, val in data.iteritems():
       pat = tag.onePattern(key)
       pat.fillSlots('value', val)

    return tag



In this example, using only patterns and slots is easy (and I do not 
have to store data on the request object), but I'm not sure this will be 
the same with a more complex template.

I will try to do same tests.



Regards  Manlio Perillo

From ldanielburr at mac.com  Thu Jan  4 08:15:14 2007
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Thu Jan  4 08:15:10 2007
Subject: [Twisted-web] [Nevow] again on data directive
In-Reply-To: <459CDDC8.5070301@libero.it>
References: <459CDDC8.5070301@libero.it>
Message-ID: <op.tlmu7oec3oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Manlio,

On Thu, 04 Jan 2007 04:58:16 -0600, Manlio Perillo  
<manlio_perillo@libero.it> wrote:

> To put it simple, I would like to have this feature:
>
>
> <div n:data="xxx" n:render="yyy" />
>
>
> def render_yyy(request, tag):
>     assert tag.data == 'xxx'
>
>
>
> That is: data directives are only used to pass data from the template to  
> the renderer.
>
> Is this a good idea?
>

I think it is a bad idea, because it encourages what is, in my opinion, a
bad practice: You shouldn't be passing data from the template to the
renderer.  Data should reside in a model class, not within the attributes
of a template.  The view class should already have access to an instance
of the model, via self.original.

Why do you want to pass data directly from the template to the renderer?
I'm not sure why you want to violate the boundaries in this way, other
than some notion of convenience.  I readily agree that using a Nevow
template can sometimes be less convenient than some other templates,
which allow you to mingle data, logic, and rendering all in one place.
Going this route will lead to a big mess, in my opinion, and if you
want this kind of convenience, there is always PHP ;)

> Now what I can do is:
>
> <div data="xxx" n:render="yyy" />
>
> def render-yyy(request, tag):
>     assert tag.attributes.pop('data') == 'xxx'
>

Again, you seem to want to eliminate the need for a model class, and
I think that is short-sighted, at least from a code maintenance POV.

> Thanks and regards  Manlio Perillo

Hope this helps,

L. Daniel Burr

From manlio_perillo at libero.it  Thu Jan  4 08:48:21 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jan  4 08:48:50 2007
Subject: [Twisted-web] [Nevow] again on data directive
In-Reply-To: <op.tlmu7oec3oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <459CDDC8.5070301@libero.it>
	<op.tlmu7oec3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <459D13B5.8040203@libero.it>

L. Daniel Burr ha scritto:
> Hi Manlio,
> 
> On Thu, 04 Jan 2007 04:58:16 -0600, Manlio Perillo 
> <manlio_perillo@libero.it> wrote:
> 
>> To put it simple, I would like to have this feature:
>>
>>
>> <div n:data="xxx" n:render="yyy" />
>>
>>
>> def render_yyy(request, tag):
>>     assert tag.data == 'xxx'
>>
>>
>>
>> That is: data directives are only used to pass data from the template 
>> to the renderer.
>>
>> Is this a good idea?
>>
> 
> I think it is a bad idea, because it encourages what is, in my opinion, a
> bad practice: You shouldn't be passing data from the template to the
> renderer.  Data should reside in a model class, not within the attributes
> of a template.  The view class should already have access to an instance
> of the model, via self.original.
> 
> Why do you want to pass data directly from the template to the renderer?

Here is an example of "complex" template.
The form handling is done via a package I have written:


   <form method="post" action="./" accept-charset="utf-8"
         n:data="form_data">
     <div class="form_errors" n:render="form_errors" />

     <fieldset>
       <legend>Please, fill this</legend>

       <div n:data="somedate" n:render="form_control">
         <p class="label"><n:slot name="label" /></p>
         <input class="inline" type="text" size="2"
                n:data="somedate.day" n:render="form_value" /> /
         <input class="inline" type="text" size="2"
                n:data="somedate.month" n:render="form_value" /> /
         <input class="inline" type="text" size="4"
                n:data="somedate.year" n:render="form_value" />
         <p><n:slot name="help" /></p>
         <p class="required" n:render="form_required">
            The field is required
         </p>
       </div>

       <div n:data="x" n:render="form_control">
         <label for="x"><n:slot name="label" /></label>
         <select id="x" n:render="form_value">
           <option n:pattern="option" />
         </select>
         <p><n:slot name="help" /></p>
       </div>


The first form_data data directive push the form data into the context.

The form_control renderer fills the slot with label, and so.
The form_value renderer modifies the form control, setting the value 
attribute and so, depending on the type of control.

Without the use of data directives, that helps the renderer to locate 
the data, I can use only one renderer, attached to the <form> element.

Please note that I do not need all the IData stuff, I only need to now 
the tag.data value-

It should be possibile(?) to use only patterns and one renderer, I'll 
try to figure out how.





Regards  Manlio Perillo

From manlio_perillo at libero.it  Thu Jan  4 08:55:35 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jan  4 08:56:07 2007
Subject: [Twisted-web] [Nevow] again on data directive
In-Reply-To: <op.tlmu7oec3oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <459CDDC8.5070301@libero.it>
	<op.tlmu7oec3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <459D1567.5070906@libero.it>

L. Daniel Burr ha scritto:
 > [...]
 >
>  I readily agree that using a Nevow
> template can sometimes be less convenient than some other templates,

Let me say that very often Nevow is much convenient that some other 
templates, since I can modify an XML element in the Python code.

This is not possible with Django (I do not know Kid).


Regards  Manlio Perillo

From manlio_perillo at libero.it  Thu Jan  4 09:18:49 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu Jan  4 09:19:11 2007
Subject: [Twisted-web] [Nevow] again on data directive
In-Reply-To: <op.tlmu7oec3oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <459CDDC8.5070301@libero.it>
	<op.tlmu7oec3oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <459D1AD9.5070906@libero.it>

L. Daniel Burr ha scritto:
> Hi Manlio,
> 
> On Thu, 04 Jan 2007 04:58:16 -0600, Manlio Perillo 
> <manlio_perillo@libero.it> wrote:
> 
>> To put it simple, I would like to have this feature:
>>
>>
>> <div n:data="xxx" n:render="yyy" />
>>
>>
>> def render_yyy(request, tag):
>>     assert tag.data == 'xxx'
>>
>>
>>
>> That is: data directives are only used to pass data from the template 
>> to the renderer.
>>

I just noted that this is already available:

     def data_x(self, ctx, data):
         d = ctx.tag.data
         print d, type(d), d.name
         return 'y'

directive('x') <class 'nevow.stan.directive'> x


So my request is:
please do not remove this feature.
Only remove the IData stuff.



Regards   Manlio Perillo

From griph at mail.ru  Thu Jan  4 15:23:00 2007
From: griph at mail.ru (Mars Agliullin)
Date: Thu Jan  4 15:23:13 2007
Subject: [Twisted-web] SCGI support in Web2
Message-ID: <459D7034.8060501@mail.ru>

Hello, Listers!

Could anyone briefly summarize current status of SCGI support in 
twisted.web2?
What works well, what doesn't, what improvements are needed, what are 
the future directions in this area, etc.

In particular, I'm interested in SCGI authentication and a current point 
of view on a way to implement it.
There are some remarks in ticket #1300, but they were made quite long 
ago. Has anything changed since then?

--
Best regards, Mars Agliullin

From manlio_perillo at libero.it  Sun Jan  7 04:56:27 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun Jan  7 04:56:35 2007
Subject: [Twisted-web] [Nevow] newflat
Message-ID: <45A0D1DB.9080404@libero.it>

Hi.

I have found this code:
http://divmod.org/trac/browser/sandbox/dialtone/newflat

But, again, this is 5 months old.

What's the problem?

I can offer my contribution but I need to know if there is some 
migration plan for Nevow.

As an example, you can create a nevow2 project, or just add a nevow 
subpackage in twisted.web2.

Please, let me know.


Manlio Perillo

From manlio_perillo at libero.it  Sun Jan  7 05:56:13 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun Jan  7 05:56:18 2007
Subject: [Twisted-web] Directory listing limitations
Message-ID: <45A0DFDD.9010705@libero.it>

Hi.

I do not if this is a limitation or a feature but:
1) static.File shows hidden files
2) There is no link to the parent directory


This happens for both web2 and Nevow.


Manlio Perillo

From manlio_perillo at libero.it  Sun Jan  7 06:30:18 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun Jan  7 06:30:32 2007
Subject: [Twisted-web] web2 locateChild
Message-ID: <45A0E7DA.6000600@libero.it>

I have just noted that web2 locateChild has no documentation on how 
childrens are searched (why just not copy it from Nevow?).

Moreover in Nevow, locateChildfirst looks for a 'children' attribute (a 
dictionary).



Regards  Manlio Perillo

From ross at burtonini.com  Sun Jan  7 11:37:44 2007
From: ross at burtonini.com (Ross Burton)
Date: Sun Jan  7 11:45:07 2007
Subject: [Twisted-web] Progress on client POST methods
Message-ID: <1168191463.7709.4.camel@blackadder>

Hi,

I'm writing a Flickr upload tool[1] and would like to be able to show
the progress of the image upload.  Images are uploaded via HTTP POST:

from twisted.web import client
...
return client.getPage("http://api.flickr.com/services/upload/",
                      method="POST",
                      headers=headers,
                      postdata=form)

where form is the encoded title/tags/image data.  Is there a way to get
progress information from twisted.web.client?  If I'm uploading 4M
images the upload takes some time to complete, so I'd like to be able to
have a progress bar.

Also, should I be using twisted.web2.client now, or is it still under
development?

Thanks,
Ross

[1] The library is at http://burtonini.com/bzr/flickrpc/
-- 
Ross Burton                                 mail: ross@burtonini.com
                                          jabber: ross@burtonini.com
                                     www: http://www.burtonini.com./
 PGP Fingerprint: 1A21 F5B0 D8D0 CFE3 81D4 E25A 2D09 E447 D0B4 33DF




From manlio_perillo at libero.it  Sun Jan  7 11:53:40 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun Jan  7 11:53:45 2007
Subject: [Twisted-web] performance of web2
Message-ID: <45A133A4.8080801@libero.it>

Hi.

I have begin to play with twisted.web2.

The first thing I have done is a comparative test against Nevow.

The Nevow code:
class Main(object):
     implements(inevow.IResource)

     def renderHTTP(self, ctx):
         data = "hello world" * 1024
         return data
  	
     def locateChild(self, ctx, segments):
         return self, ()


and twisted.web2 code:
class Main(object):
     implements(iweb.IResource)
  	
     def renderHTTP(self, req):
         data = "hello world" * 1024
         return http.Response(stream=data)

     def locateChild(self, request, segments):
         return self, server.StopTraversal


I have used ab2 from apache2.
With n = 100 and c = 1:
- nevow: 1062 req/sec
- web2:  980 req/sec

With n = 500 and c = 50
- nevow: 1231 req/sec
- web2:  1101 req/sec

(plain twisted.web is a bit faster: 1323 req/seq and 1793 req/seq)

This is not a problem (and maybe the tests are not so accurate), but I 
would like to known if there are still some areas that can be optimized 
in twisted.web2 or the development is stable.



Thanks and regards  Manlio Perillo

From exarkun at divmod.com  Sun Jan  7 12:00:35 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun Jan  7 12:00:37 2007
Subject: [Twisted-web] Progress on client POST methods
In-Reply-To: <1168191463.7709.4.camel@blackadder>
Message-ID: <20070107180035.11447.1668832480.divmod.quotient.9024@ohm>

On Sun, 07 Jan 2007 17:37:44 +0000, Ross Burton <ross@burtonini.com> wrote:
>Hi,
>
>I'm writing a Flickr upload tool[1] and would like to be able to show
>the progress of the image upload.  Images are uploaded via HTTP POST:
>
>from twisted.web import client
>...
>return client.getPage("http://api.flickr.com/services/upload/",
>                      method="POST",
>                      headers=headers,
>                      postdata=form)
>
>where form is the encoded title/tags/image data.  Is there a way to get
>progress information from twisted.web.client?  If I'm uploading 4M
>images the upload takes some time to complete, so I'd like to be able to
>have a progress bar.

Take a look at twisted.web.client.HTTPPageGetter's implementation.  Note
the last thing it does in connectionMade:

    if data is not None:
        self.transport.write(data)

If you want progress reporting, then this is the code to fix in order to
get it.  Rather than writing all of the data at once, this code could use
a producer to write it approximately only as quickly as the peer reads it.
This will let you generate a progress report, since you can keep track of
how many bytes you have written and how many bytes are yet to be written.

Due to the factoring of this code, I don't really see any way to provide
this feature without at least copying all of the code in the existing
connectionMade method and then only changing the last two lines, unless you
refactor it to be more friendly to this use case and contribute a patch.
Such a patch would be welcome, though, if you choose to do this.

Some producer documentation is available here:

http://twistedmatrix.com/projects/core/documentation/howto/producers.html

>
>Also, should I be using twisted.web2.client now, or is it still under
>development?

It is still under development (like much of Twisted - but more likely to
change incompatibly than much of Twisted).

Jean-Paul

From teratorn at twistedmatrix.com  Sun Jan  7 18:01:16 2007
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Sun Jan  7 18:01:50 2007
Subject: [Twisted-web] XML-RPC server returns text/html on fault
In-Reply-To: <45938839.9060907@smartology.nl>
References: <45938839.9060907@smartology.nl>
Message-ID: <op.tls6celxy3d107@office2>

On Thu, 28 Dec 2006 03:02:49 -0600, Remi Cool <mailinglists@smartology.nl>  
wrote:

> I've run into a problem with a twisted XML-RPC server.
>
> When you request a (xml-rpc) function that doesn't exist, the response
> from the twisted server has the wrong content type so that the xml-rpc
> client can't handle it properly.
>
> (using a simple python xml-rpc client - verbose=True)
>
> reply: 'HTTP/1.0 200 OK\r\n'
> header: Date: Thu, 28 Dec 2006 08:50:36 GMT
> header: Content-length: 282
> header: Content-type: text/html; charset=UTF-8
> header: Server: TwistedWeb/2.2.0
> body: "<?xml
> version='1.0'?>\n<methodResponse>\n<fault>\n<value><struct>\n<member>\n<name>faultCode</name>\n<value><int>8001</int></value>\n</member>\n<member>\n<name>faultString</name>\n<value><string>function
> echos not
> found</string></value>\n</member>\n</struct></value>\n</fault>\n</methodResponse>\n"
> ERROR <Fault 8001: 'function echos not found'>
>
> How can I change this behaviour so that it returns a proper xml-rpc
> response with a text/xml content-type header?
>
> - Remi -
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

Could you please add a ticket to the tracker regarding this problem? (You  
will need to register first)

http://twistedmatrix.com/trac

Sorry I'm not a web person, and I don't know how to do what you want. But  
you may be able to get help on #twisted.web on irc.freenode.net.

Cheers,
-- 
Eric Mangold
Twisted/Win32 Co-Maintainer

From glyph at divmod.com  Mon Jan  8 01:14:36 2007
From: glyph at divmod.com (glyph@divmod.com)
Date: Mon Jan  8 01:17:39 2007
Subject: [Twisted-web] performance of web2
Message-ID: <20070108071436.17094.1354717074.divmod.xquotient.739@joule.divmod.com>

On 7 Jan, 05:53 pm, manlio_perillo@libero.it wrote:

>This is not a problem (and maybe the tests are not so accurate), but I would 
>like to known if there are still some areas that can be optimized in 
>twisted.web2 or the development is stable.

twisted.web2 is still officially unstable.  One of the *requirements* for it to be declared officially stable is, in fact, optimization to be as fast as web1 :-).

Patches, especially those which would add some performance tests, would be appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20070108/7ce07373/attachment.htm
From glyph at divmod.com  Mon Jan  8 01:15:49 2007
From: glyph at divmod.com (glyph@divmod.com)
Date: Mon Jan  8 01:17:42 2007
Subject: [Twisted-web] [Nevow] newflat
Message-ID: <20070108071549.17094.1714888828.divmod.xquotient.741@joule.divmod.com>

On 7 Jan, 10:56 am, manlio_perillo@libero.it wrote:
>Hi.
>
>I have found this code:
>http://divmod.org/trac/browser/sandbox/dialtone/newflat
>
>But, again, this is 5 months old.
>
>What's the problem?
>
>I can offer my contribution but I need to know if there is some migration 
>plan for Nevow.
>
>As an example, you can create a nevow2 project, or just add a nevow 
>subpackage in twisted.web2.
>
>Please, let me know.

Is the question here, "When is Nevow going to migrate to web2"?

If so, the answer is "when web2 is declared stable".

See the "web2-gold-master" milestone in the Twisted tracker for more details.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20070108/7c561e9d/attachment.htm
From nico at tekNico.net  Mon Jan  8 02:33:38 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Mon Jan  8 02:34:09 2007
Subject: [Twisted-web] Re: Ticket #2346: HTTP header generation in web2
	according to RFC822
In-Reply-To: <pan.2007.01.02.17.19.42.47777@gnx.it>
References: <pan.2007.01.02.17.19.42.47777@gnx.it>
Message-ID: <ensvl3$r7s$1@sea.gmane.org>

david mugnai wrote:
> tekNico and I found a problem with the web2 headers generation code.
> 
> We opened the ticket #2346 with a patch to the testcase and a patch
> to web2.http_headers.

We reworked the fix and the tests according to the suggestions of jknight.
Is it good enough now?

-- 
Nicola Larosa - http://www.tekNico.net/

Mochikit is well designed and well thought out, and Python/Twisted/Nevow
developers will definitely find its API very familiar. [...] Mochikits's
capabilities will probably surprise you -- the createDOM function,
iteration tools and the asynchronous architecture are a work of art.
 -- Dan Webb, June 2006


From manlio_perillo at libero.it  Mon Jan  8 03:54:37 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jan  8 03:54:44 2007
Subject: [Twisted-web] [Nevow] newflat
In-Reply-To: <20070108071549.17094.1714888828.divmod.xquotient.741@joule.divmod.com>
References: <20070108071549.17094.1714888828.divmod.xquotient.741@joule.divmod.com>
Message-ID: <45A214DD.2070002@libero.it>

glyph@divmod.com ha scritto:
> On 7 Jan, 10:56 am, manlio_perillo@libero.it wrote:
>  >Hi.
>  >
>  >I have found this code:
>  >http://divmod.org/trac/browser/sandbox/dialtone/newflat
>  >
>  >But, again, this is 5 months old.
>  >
>  >What's the problem?
>  >
>  >I can offer my contribution but I need to know if there is some migration
>  >plan for Nevow.
>  >
>  >As an example, you can create a nevow2 project, or just add a nevow
>  >subpackage in twisted.web2.
>  >
>  >Please, let me know.
> 
> Is the question here, "When is Nevow going to migrate to web2"?
> 

No (well, not only).
I can see several migration paths for Nevow.

1) Write the replacement for rend.Page as page.Page.
    This can be done right now (as with page.Element).

2) Write a replacement of flat, with cleaner code but still with support
    for data directives (to maintain compatibility with existing code)

3) Modify appserver and rend to support the new flat

4) Migrate all to web2, remove support for data directives and macros


Another path is:
1) write a new (sub) package named stan (nevow.stan) with only the 
support for rendering

2) add in Nevow the support for stan



I think that writing a new, self contained, simpler and well documented 
stan package is the best solution (since stan can be used with other web 
toolkits - I just read a blog where someone has written a 
reimplementation of stan for Turbogears).



> If so, the answer is "when web2 is declared stable".
> 
> See the "web2-gold-master" milestone in the Twisted tracker for more 
> details.
> 

Ok, thanks.
I should start to use the tracker...



Regards  Manlio Perillo

From manlio_perillo at libero.it  Mon Jan  8 04:26:16 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jan  8 04:29:15 2007
Subject: [Twisted-web] performance of web2
In-Reply-To: <20070108071436.17094.1354717074.divmod.xquotient.739@joule.divmod.com>
References: <20070108071436.17094.1354717074.divmod.xquotient.739@joule.divmod.com>
Message-ID: <45A21C48.2030703@libero.it>

glyph@divmod.com ha scritto:
> On 7 Jan, 05:53 pm, manlio_perillo@libero.it wrote:
> 
>  >This is not a problem (and maybe the tests are not so accurate), but I 
> would
>  >like to known if there are still some areas that can be optimized in
>  >twisted.web2 or the development is stable.
> 
> twisted.web2 is still officially unstable.  One of the *requirements* 
> for it to be declared officially stable is, in fact, optimization to be 
> as fast as web1 :-).
> 

Ok, I *just* have read the ticket. Thanks.

> Patches, especially those which would add some performance tests, would 
> be appreciated.

This is a complex task...

However there are good news.

1) Directory listing is much faster in web2.
    static.File('/usr/bin')

    ab -n 100 -c 1

    web: 0.63 req/sec
    web2: 17.25 req/sec


    ab -n 100 -c 25

    web: timed out
    web2 17.34


2) With keep alive enabled, web2 performs better
    (the same code as in the original post)

    ab -n 100 -c 1

    web: 1398 req/sec
    nevow: 1049 req/sec
    web2: 1186 req/sec

    ab -n 500 -c 50

    web: 1756 req/sec
    nevow: 1202 req/sec
    web2: 1273 req/sec


The result, here, is that web2 is as fast as Nevow.



Regards  Manlio Perillo

From manlio_perillo at libero.it  Mon Jan  8 04:56:05 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jan  8 04:56:16 2007
Subject: [Twisted-web] [Nevow] newflat
In-Reply-To: <45A214DD.2070002@libero.it>
References: <20070108071549.17094.1714888828.divmod.xquotient.741@joule.divmod.com>
	<45A214DD.2070002@libero.it>
Message-ID: <45A22345.9020106@libero.it>

Manlio Perillo ha scritto:
> [...]
> Another path is:
> 1) write a new (sub) package named stan (nevow.stan) with only the 
> support for rendering
> 
> 2) add in Nevow the support for stan
> 
> 
> 
> I think that writing a new, self contained, simpler and well documented 
> stan package is the best solution (since stan can be used with other web 
> toolkits - I just read a blog where someone has written a 
> reimplementation of stan for Turbogears).
> 

I have added a ticket for this (#1877).
I can start to write some code, using newflat in dialtone sandbox.

Now the code is much cleaner, the only stuff I still do not understand 
is the precompile stage.

It will take some time but I think it is the best solution.



Regards  Manlio Perillo


From manlio_perillo at libero.it  Mon Jan 15 05:51:41 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Jan 15 05:51:46 2007
Subject: [Twisted-web] who is using twisted.web2
Message-ID: <45AB6ACD.6090407@libero.it>

I don't know if this information is already present on the web site, but 
how many people are using Twisted Web2 in a production enviroment?


Thanks and regards  Manlio Perillo

From general at eepatents.com  Mon Jan 15 12:14:12 2007
From: general at eepatents.com (Ed Suominen)
Date: Mon Jan 15 12:14:13 2007
Subject: [Twisted-web] who is using twisted.web2
In-Reply-To: <45AB6ACD.6090407@libero.it>
References: <45AB6ACD.6090407@libero.it>
Message-ID: <45ABC474.5030609@eepatents.com>

I have a single twisted.web2 vhost server that runs
http://eepatents.com, http://foss.eepatents.com, and some others. It
also proxies to a Nevow server (unfortunately only usable with
twisted.web at the moment) on the same host for http://valuablepatents.com.

For details and the custom WSGI solution I use for Trac, see
http://foss.eepatents.com/DynamicSite/.

Best regards, Ed

Manlio Perillo wrote:
> I don't know if this information is already present on the web site, but
> how many people are using Twisted Web2 in a production enviroment?
> 
> 
> Thanks and regards  Manlio Perillo
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 

From george at ringdevelopment.com  Tue Jan 16 16:52:30 2007
From: george at ringdevelopment.com (George Pauly)
Date: Tue Jan 16 16:47:33 2007
Subject: [Twisted-web] twisted web2 example simple.py fails
Message-ID: <1168987950.28429.150.camel@localhost.localdomain>

Hello List,

I'm contemplating using web2 to implement a web service, and tried out
the simple.py "very simple server" example from the twisted.web2
introduction.

But it's not working for me.  Apparently I've got some kind of version
conflict.  I'm using the latest Ubuntu python2.4-twisted packages.  

Is there a web2 version problem?  Should I just use twisted web?


thanks,

George



Here are the contents of my _version.py:

# This is an auto-generated file. Use admin/change-versions to update.
from twisted.python import versions
version = versions.Version(__name__[:__name__.rfind('.')], 0, 2, 0)




Here is the output from simple.py:

$ twistd -ny simple.py
2007/01/16 17:27 EST [-] Log opened.
2007/01/16 17:27 EST [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.2)
starting up
2007/01/16 17:27 EST [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2007/01/16 17:27 EST [-] Loading simple.py...
2007/01/16 17:27 EST [-] Traceback (most recent call last):
2007/01/16 17:27 EST [-]   File
"/usr/lib/python2.4/site-packages/twisted/application/app.py", line 156,
in getApplication
2007/01/16 17:27 EST [-]     application =
service.loadApplication(filename, style, passphrase)
2007/01/16 17:27 EST [-]   File
"/usr/lib/python2.4/site-packages/twisted/application/service.py", line
303, in loadApplication
2007/01/16 17:27 EST [-]     application =
sob.loadValueFromFile(filename, 'application', passphrase)
2007/01/16 17:27 EST [-]   File
"/usr/lib/python2.4/site-packages/twisted/persisted/sob.py", line 209,
in loadValueFromFile
2007/01/16 17:27 EST [-]     exec fileObj in d, d
2007/01/16 17:27 EST [-]   File "simple.py", line 3, in ?
2007/01/16 17:27 EST [-]     from twisted.web2 import server, http,
resource, channel
2007/01/16 17:27 EST [-]   File
"/usr/lib/python2.4/site-packages/twisted/web2/__init__.py", line 12,
in ?
2007/01/16 17:27 EST [-]     from twisted.web2._version import version
2007/01/16 17:27 EST [-]   File
"/usr/lib/python2.4/site-packages/twisted/web2/_version.py", line 2,
in ?
2007/01/16 17:27 EST [-]     from twisted.python import versions
2007/01/16 17:27 EST [-] ImportError: cannot import name versions
2007/01/16 17:27 EST [-] Failed to load application: cannot import name
versions
2007/01/16 17:27 EST [-] Traceback (most recent call last):
          File "/usr/bin/twistd", line 25, in ?
            run()
          File
"/usr/lib/python2.4/site-packages/twisted/scripts/twistd.py", line 195,
in run
            app.run(runApp, ServerOptions)
          File
"/usr/lib/python2.4/site-packages/twisted/application/app.py", line 271,
in run
            runApp(config)
          File
"/usr/lib/python2.4/site-packages/twisted/scripts/twistd.py", line 185,
in runApp
            application = app.getApplication(config, passphrase)
        --- <exception caught here> ---
          File
"/usr/lib/python2.4/site-packages/twisted/application/app.py", line 156,
in getApplication
            application = service.loadApplication(filename, style,
passphrase)
          File
"/usr/lib/python2.4/site-packages/twisted/application/service.py", line
303, in loadApplication
            application = sob.loadValueFromFile(filename, 'application',
passphrase)
          File
"/usr/lib/python2.4/site-packages/twisted/persisted/sob.py", line 209,
in loadValueFromFile
            exec fileObj in d, d
          File "simple.py", line 3, in ?
            from twisted.web2 import server, http, resource, channel
          File
"/usr/lib/python2.4/site-packages/twisted/web2/__init__.py", line 12,
in ?
            from twisted.web2._version import version
          File
"/usr/lib/python2.4/site-packages/twisted/web2/_version.py", line 2,
in ?
            from twisted.python import versions
        exceptions.ImportError: cannot import name versions


Failed to load application: cannot import name versions
2007/01/16 17:27 EST [-]



From nico at tekNico.net  Tue Jan 16 23:41:08 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Tue Jan 16 23:41:38 2007
Subject: [Twisted-web] Re: twisted web2 example simple.py fails
In-Reply-To: <1168987950.28429.150.camel@localhost.localdomain>
References: <1168987950.28429.150.camel@localhost.localdomain>
Message-ID: <eokcti$mhv$1@sea.gmane.org>

George Pauly wrote:
> Hello List,
> 
> I'm contemplating using web2 to implement a web service, and tried out
> the simple.py "very simple server" example from the twisted.web2
> introduction.
> 
> But it's not working for me.  Apparently I've got some kind of version
> conflict.  I'm using the latest Ubuntu python2.4-twisted packages.  
> 
> Is there a web2 version problem?  Should I just use twisted web?

twisted.web2 is in active development, therefore you should use code as
recent as possible.

Your package name tells me that you're still on Ubuntu Dapper, which has
the old 2.2 Twisted version, or on an even older Ubuntu version.

Use at least the 2.5 Twisted release, or even better the repository.


-- 
Nicola Larosa - http://www.tekNico.net/

Watch the woman's hands, as she talks to the man
As he talks down to her, as he tells her
He doesn't understand, he doesn't see the fisted hands
Clenched tightly, angrily
 -- Paula Cole, Watch the Woman's Hands, Harbinger, 1994


From manlio_perillo at libero.it  Wed Jan 17 06:05:09 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed Jan 17 06:05:14 2007
Subject: [Twisted-web] [ANN] twvalidator
Message-ID: <45AE10F5.2060300@libero.it>

Hi.

I have added a recipe to the Python cookbook:
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/500263

Its a simple web resource useful for validating XHTML pages that came 
from a twisted.web application.

I hope it can be useful.



Manlio Perillo

From ross at burtonini.com  Thu Jan 18 12:43:08 2007
From: ross at burtonini.com (Ross Burton)
Date: Thu Jan 18 12:43:23 2007
Subject: [Twisted-web] Twisted Flickr API library
Message-ID: <1169145788.22921.2.camel@blackadder>

Hi,

I recently released my Flickr access library, which uses Twisted.  I'd
appreciate it if someone who knew the Twisted framework would have a
look at the code and give it a quick review, to make sure I'm not doing
anything stupid.

The source is available via bzr:

  http://burtonini.com/bzr/flickrpc/

A tarball of 0.1 is also available:

  http://burtonini.com/computing/flickrpc-0.1.tar.gz

Many thanks,
Ross
-- 
Ross Burton                                 mail: ross@burtonini.com
                                          jabber: ross@burtonini.com
                                     www: http://www.burtonini.com./
 PGP Fingerprint: 1A21 F5B0 D8D0 CFE3 81D4 E25A 2D09 E447 D0B4 33DF




From andrew-twisted at puzzling.org  Thu Jan 18 21:35:31 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu Jan 18 21:35:41 2007
Subject: [Twisted-web] Twisted Flickr API library
In-Reply-To: <1169145788.22921.2.camel@blackadder>
References: <1169145788.22921.2.camel@blackadder>
Message-ID: <20070119033531.GA5571@steerpike.home.puzzling.org>

Ross Burton wrote:
> Hi,
> 
> I recently released my Flickr access library, which uses Twisted.  I'd
> appreciate it if someone who knew the Twisted framework would have a
> look at the code and give it a quick review, to make sure I'm not doing
> anything stupid.

At a glance, it seems sane.  One thing I noticed skimming:

        self.auth_getToken(frob=state['frob']).addCallbacks(gotToken, lambda fault: d.errback(fault))

could be just:

        self.auth_getToken(frob=state['frob']).addCallbacks(gotToken, d.errback)

Actually, more importantly, this pattern is a bit odd:

>     def __getattr__(self, method, **kwargs):
>         method = "flickr." + method.replace("_", ".")
>         if not self.__methods.has_key(method):
>             def proxy(method=method, **kwargs):
>                 d = defer.Deferred()
>                 def cb(data):
>                     self.logger.info("%s returned" % method)
>                     xml = ElementTree.XML(data)
>                     if xml.tag == "rsp" and xml.get("stat") == "ok":
>                         d.callback(xml)
>                     elif xml.tag == "rsp" and xml.get("stat") == "fail":
>                         err = xml.find("err")
>                         d.errback(Failure(FlickrError(err.get("code"), err.get("msg"))))
>                     else:
>                         # Fake an error in this case
>                         d.errback(Failure(FlickrError(0, "Invalid response")))
>                 self.__call(method, kwargs).addCallbacks(cb, lambda fault: d.errback(fault))
>                 return d
>             self.__methods[method] = proxy
>         return self.__methods[method]

Here the proxy function creates a deferred ("d"), effectively chains it to the
Deferred from __call, then returns d.  It would be simpler to just use the
Deferred you already have.  So something like (untested...):

    def __getattr__(self, method, **kwargs):
        method = "flickr." + method.replace("_", ".")
        if not self.__methods.has_key(method):
            def proxy(method=method, **kwargs):
                def cb(data):
                    self.logger.info("%s returned" % method)
                    xml = ElementTree.XML(data)
                    if xml.tag == "rsp" and xml.get("stat") == "ok":
                        d.callback(xml)
                    elif xml.tag == "rsp" and xml.get("stat") == "fail":
                        err = xml.find("err")
                        raise FlickrError(err.get("code"), err.get("msg"))
                    else:
                        # Fake an error in this case
                        raise FlickrError(0, "Invalid response")
                return self.__call(method, kwargs)
            self.__methods[method] = proxy
        return self.__methods[method]

Which is noticeably simpler.  You seem to do the same contortion everywhere.

Also, rather than s.spawnlp(os.P_WAIT, "epiphany", "epiphany", "-p", url),
perhaps the stdlib's "webbrowser" module would be more appropriate.

Thanks for sharing this!

-Andrew.


From ross at burtonini.com  Fri Jan 19 04:13:24 2007
From: ross at burtonini.com (Ross Burton)
Date: Fri Jan 19 04:13:38 2007
Subject: [Twisted-web] Re: Twisted Flickr API library
In-Reply-To: <20070119033531.GA5571@steerpike.home.puzzling.org>
References: <1169145788.22921.2.camel@blackadder>
	<20070119033531.GA5571@steerpike.home.puzzling.org>
Message-ID: <1169201604.6735.12.camel@blackadder>

On Fri, 2007-01-19 at 14:35 +1100, Andrew Bennetts wrote:
> At a glance, it seems sane.  One thing I noticed skimming:
> 
>         self.auth_getToken(frob=state['frob']).addCallbacks(gotToken, lambda fault: d.errback(fault))
> 
> could be just:
> 
>         self.auth_getToken(frob=state['frob']).addCallbacks(gotToken, d.errback)

Ah yes, of course.

> Actually, more importantly, this pattern is a bit odd:
> 
> >     def __getattr__(self, method, **kwargs):
> >         method = "flickr." + method.replace("_", ".")
> >         if not self.__methods.has_key(method):
> >             def proxy(method=method, **kwargs):
> >                 d = defer.Deferred()
> >                 def cb(data):
> >                     self.logger.info("%s returned" % method)
> >                     xml = ElementTree.XML(data)
> >                     if xml.tag == "rsp" and xml.get("stat") == "ok":
> >                         d.callback(xml)
> >                     elif xml.tag == "rsp" and xml.get("stat") == "fail":
> >                         err = xml.find("err")
> >                         d.errback(Failure(FlickrError(err.get("code"), err.get("msg"))))
> >                     else:
> >                         # Fake an error in this case
> >                         d.errback(Failure(FlickrError(0, "Invalid response")))
> >                 self.__call(method, kwargs).addCallbacks(cb, lambda fault: d.errback(fault))
> >                 return d
> >             self.__methods[method] = proxy
> >         return self.__methods[method]
> 
> Here the proxy function creates a deferred ("d"), effectively chains it to the
> Deferred from __call, then returns d.  It would be simpler to just use the
> Deferred you already have.  So something like (untested...):
> 
>     def __getattr__(self, method, **kwargs):
>         method = "flickr." + method.replace("_", ".")
>         if not self.__methods.has_key(method):
>             def proxy(method=method, **kwargs):
>                 def cb(data):
>                     self.logger.info("%s returned" % method)
>                     xml = ElementTree.XML(data)
>                     if xml.tag == "rsp" and xml.get("stat") == "ok":
>                         d.callback(xml)
>                     elif xml.tag == "rsp" and xml.get("stat") == "fail":
>                         err = xml.find("err")
>                         raise FlickrError(err.get("code"), err.get("msg"))
>                     else:
>                         # Fake an error in this case
>                         raise FlickrError(0, "Invalid response")
>                 return self.__call(method, kwargs)
>             self.__methods[method] = proxy
>         return self.__methods[method]
> 
> Which is noticeably simpler.  You seem to do the same contortion everywhere.

Ah, I like the raising, I didn't know twisted would handle exceptions
and pass them to the errback.

Your re-written version doesn't actually call cb anywhere.  I introduced
a chained Deferred as I want to get the reply from the method call, and
further process it before the user sees the reply.  This is because a
successful reply from the PoV of the HTTP request can actually contain
an error message, which in cb() is converted to an exception.  Also, the
data from the HTTP call is processed and a different object is passed to
the application's callback.

I've only had my first coffee of the day so am obviously being a little
slow, but where would the addCallback(cb) go in your version, and what
would replace d.callback() inside cb()?

> Also, rather than s.spawnlp(os.P_WAIT, "epiphany", "epiphany", "-p", url),
> perhaps the stdlib's "webbrowser" module would be more appropriate.

Yeah, good call.

Thanks for the help,
Ross
-- 
Ross Burton                                 mail: ross@burtonini.com
                                          jabber: ross@burtonini.com
                                     www: http://www.burtonini.com./
 PGP Fingerprint: 1A21 F5B0 D8D0 CFE3 81D4 E25A 2D09 E447 D0B4 33DF




From mewanttowork at gmail.com  Mon Jan 29 06:50:06 2007
From: mewanttowork at gmail.com (KC Leong)
Date: Mon Jan 29 06:50:15 2007
Subject: [Twisted-web] HTTP authentication and Nevow cred checker
Message-ID: <d3c7f2a50701290450j46bb43aif6537c0dede8dc2a@mail.gmail.com>

Hello,

With Twisted and Nevow I'm building an XML-RPC server that does HTTP
authentication. So a basic XML-RPC client can login using
https://user:passwd@host. I can get the credentials with HTTP
authentication, but how can I check the credentials. I'd tried calling
guard.SessionWrapper.login(....), but I get the error: "exceptions.TypeError:
unbound method login() must be called with SessionWrapper instance as first
argument (got NevowRequest instance instead)".

So I'm guessing that request.getSession() is wrong and I must get the
session of the guard (or something similar). Or I'm calling the wrong
function to check the creds. In the guarded.py example from Nevow the
credentials get checked thru a html form, but that is not what I want.

Below is an example part of my code:

class RootPage(rend.Page):
    ## We are a directory-like resource because we are at the root
    addSlash = True
    ## Doesn't work
    def tryLogin(self, ctx, request):
        session =  request.getSession()
        segments = inevow.ICurrentSegments(ctx)
        httpAuthCredentials = (self.data_username,self.data_password)
        return guard.SessionWrapper.login(request, session,
httpAuthCredentials, segments).addCallback(self._loginSucceeded).addErrback(
self.loginFailed)

    def renderHTTP(self, ctx):
        request = inevow.IRequest(ctx)
        username, password = request.getUser(), request.getPassword()
        ## No REAL authentication yet, must implement it.
        if (username, password) == ('', ''):
            request.setHeader('WWW-Authenticate', 'Basic
realm='+cfg.app_name)
            request.setResponseCode(http.UNAUTHORIZED)
            return "Authentication required."
        ## They provided a username and password, so let's let them in!
horray
        self.data_username, self.data_password = username, password

        self.tryLogin(ctx, request)
        return rend.Page.renderHTTP(self, ctx)

    docFactory = loaders.stan(tags.html[
    tags.body[
        tags.h1["Welcome user!"],
        tags.div["You said: ",
            tags.span(data=tags.directive('username'), render=str),
            " ",
            tags.span(data=tags.directive('password'), render=str),
            tags.a(href=guard.LOGOUT_AVATAR)["Logout"]
            ]]])

Regards,

Kim Chee Leong
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20070129/e78a6de1/attachment.htm
From exarkun at divmod.com  Mon Jan 29 07:14:21 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon Jan 29 07:14:24 2007
Subject: [Twisted-web] HTTP authentication and Nevow cred checker
In-Reply-To: <d3c7f2a50701290450j46bb43aif6537c0dede8dc2a@mail.gmail.com>
Message-ID: <20070129131421.25807.429773571.divmod.quotient.2340@ohm>

On Mon, 29 Jan 2007 13:50:06 +0100, KC Leong <mewanttowork@gmail.com> wrote:
>Hello,
>
>With Twisted and Nevow I'm building an XML-RPC server that does HTTP
>authentication. So a basic XML-RPC client can login using
>https://user:passwd@host. I can get the credentials with HTTP
>authentication, but how can I check the credentials. I'd tried calling
>guard.SessionWrapper.login(....), but I get the error: 
>"exceptions.TypeError:
>unbound method login() must be called with SessionWrapper instance as first
>argument (got NevowRequest instance instead)".

As its name suggests, SessionWrapper is a wrapper.  You're not intended to
call unbound methods from it with instances of an unrelated class. ;)

>
>So I'm guessing that request.getSession() is wrong and I must get the
>session of the guard (or something similar). Or I'm calling the wrong
>function to check the creds. In the guarded.py example from Nevow the
>credentials get checked thru a html form, but that is not what I want.
>
>Below is an example part of my code:
>
>class RootPage(rend.Page):
>    ## We are a directory-like resource because we are at the root
>    addSlash = True
>    ## Doesn't work
>    def tryLogin(self, ctx, request):
>        session =  request.getSession()
>        segments = inevow.ICurrentSegments(ctx)
>        httpAuthCredentials = (self.data_username,self.data_password)
>        return guard.SessionWrapper.login(request, session,
>httpAuthCredentials, segments).addCallback(self._loginSucceeded).addErrback(
>self.loginFailed)
>
>    def renderHTTP(self, ctx):
>        request = inevow.IRequest(ctx)
>        username, password = request.getUser(), request.getPassword()
>        ## No REAL authentication yet, must implement it.
>        if (username, password) == ('', ''):
>            request.setHeader('WWW-Authenticate', 'Basic
>realm='+cfg.app_name)
>            request.setResponseCode(http.UNAUTHORIZED)
>            return "Authentication required."
>        ## They provided a username and password, so let's let them in!
>horray
>        self.data_username, self.data_password = username, password
>
>        self.tryLogin(ctx, request)
>        return rend.Page.renderHTTP(self, ctx)
>

All of this is unnecessary.  Get rid of it and instead, wrap your page in
a SessionWrapper and use the SessionWrapper as your resource.  Take a look
at <http://divmod.org/trac/browser/trunk/Nevow/examples/guarded/guarded.py>,
particularly the createResource function at the end, which closely resembles
what you want to do instead of the above.

>    docFactory = loaders.stan(tags.html[
>    tags.body[
>        tags.h1["Welcome user!"],
>        tags.div["You said: ",
>            tags.span(data=tags.directive('username'), render=str),
>            " ",
>            tags.span(data=tags.directive('password'), render=str),
>            tags.a(href=guard.LOGOUT_AVATAR)["Logout"]
>            ]]])

This stuff will then end up on the wrapped resource, and only be accessible
after SessionWrapper decides authentication has occurred.

Jean-Paul

