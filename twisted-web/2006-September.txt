From moebius.lists at gmail.com  Fri Sep  1 04:21:24 2006
From: moebius.lists at gmail.com (Adrian Perez)
Date: Fri Sep  1 04:21:27 2006
Subject: [Twisted-web] [Release] Bic A1A1
In-Reply-To: <44F0DFF2.6020409@inwind.it>
References: <20060827001436.364f69af@tron.foobar.homeunix.org>
	<44F0DFF2.6020409@inwind.it>
Message-ID: <4f507c000609010221g1eeefb8fqfe4f329db05c4a4d@mail.gmail.com>

On 8/27/06, Alessandro <aleuser@inwind.it> wrote:
> Pages can't see /style/default/main.css , so they are very poor
> Did I make installation error?

I found the problem, it was my fault: the resource which is
under /style/default is determined by the contents of the
"bic_style_name" cookie or, if not defined, by the contents of the
"style" variable in the configuration file. The problem was that I
thought IRequest(ctx).getCookie() would raise KeyError instead of
returning None when the cookie is not set.

It was a small fix, thanks a lot for your report. I attached the
patch, but I hope to upload a new tarball soon, along with some
more improvements I?m working on.Feel free to track the
code with Bzr, http://code.connectical.net/bic is the URL where I
publish the main development branch.

BTW, support for setting the cookie which controls the style is on the
code, but nowhere in the web interface yet. Just access any page adding
"?style=3Dfoo" as query string at the end of the URL.

--
Adrian Perez
"Experience is what you get when you don't get what you want"
                                           -- (Dan Stanford)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: bic-A1A1-wookiecookie.patch
Type: text/x-patch
Size: 459 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060901/ad70e6e3/bic-A1A1-wookiecookie.bin
From p.mayers at imperial.ac.uk  Mon Sep  4 17:59:22 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon Sep  4 17:59:31 2006
Subject: [Twisted-web] Athena DOM manipulation
Message-ID: <44FCAFCA.8090909@imperial.ac.uk>

Is it possible for an athena LivePage to add new LiveElements? To remove 
them?

The application is a web-based database editor which due to operational 
requirements has suddenly had a ballooning in the number of fields per 
HTML page, and the round-tripping of the form submits plus rendering of 
the extremely large HTML in one large block is actually now causing 
operational difficulties.

Something like:

+-(main)-------------------+
| field1: ______           |
| field2: ______           |
| checkbox: [__]           |
|                          |
+-(subitems)---------------+
| key | name | dom |       |
+-----+------+-----+-------+
|     |      |     | [del] | << this is a 3-textbox row for each subitem
+-----+------+-----+-------+
| [Add new subitem?]       | << this is a
+--------------------------+


...with maybe ~60 and climbing rows of subitems. I can handle the 
initial loading of the page taking a bit of time, but a user might want 
to add, change or delete ~10-25 rows of subitems each time they visit 
the page, and the round-tripping is genuinely detrimental.

Can you do something like returning a LiveElement from a callRemote? Or 
can you somehow create (in a supported fashion) a server-side 
LiveElement, return the ID/html/whatever from the callRemote'ed method, 
and then run the client-side widget creation JavaScript, supplying the ID?

Is this just plain a bad idea? Should I somehow make the entire list of 
subitems a single widget (less attractive, because the in-built client 
and server-side demuxing of the LiveElement -> row is attractive)

From exarkun at divmod.com  Mon Sep  4 18:35:20 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon Sep  4 18:35:26 2006
Subject: [Twisted-web] Athena DOM manipulation
In-Reply-To: <44FCAFCA.8090909@imperial.ac.uk>
Message-ID: <20060904233520.1717.911362735.divmod.quotient.39353@ohm>

On Mon, 04 Sep 2006 23:59:22 +0100, Phil Mayers <p.mayers@imperial.ac.uk> wrote:
>Is it possible for an athena LivePage to add new LiveElements? To remove 
>them?
>
>The application is a web-based database editor which due to operational 
>requirements has suddenly had a ballooning in the number of fields per HTML 
>page, and the round-tripping of the form submits plus rendering of the 
>extremely large HTML in one large block is actually now causing operational 
>difficulties.
>
>Something like:
>
>+-(main)-------------------+
>| field1: ______           |
>| field2: ______           |
>| checkbox: [__]           |
>|                          |
>+-(subitems)---------------+
>| key | name | dom |       |
>+-----+------+-----+-------+
>|     |      |     | [del] | << this is a 3-textbox row for each subitem
>+-----+------+-----+-------+
>| [Add new subitem?]       | << this is a
>+--------------------------+
>
>
>...with maybe ~60 and climbing rows of subitems. I can handle the initial 
>loading of the page taking a bit of time, but a user might want to add, 
>change or delete ~10-25 rows of subitems each time they visit the page, and 
>the round-tripping is genuinely detrimental.
>
>Can you do something like returning a LiveElement from a callRemote? Or can 
>you somehow create (in a supported fashion) a server-side LiveElement, 
>return the ID/html/whatever from the callRemote'ed method, and then run the 
>client-side widget creation JavaScript, supplying the ID?
>
>Is this just plain a bad idea? Should I somehow make the entire list of 
>subitems a single widget (less attractive, because the in-built client and 
>server-side demuxing of the LiveElement -> row is attractive)

Hey Phil,

One can indeed add new LiveElements to an already-rendered Athena page. The
simplest way to go about this is to just return the LiveElement from a
method.  The Element will be serialized in the same manner as one included
in the initial page render and arrive as an xml string given to the callback
of the Deferred returned by callRemote on the client.  The xml string can be
added to the page using Divmod.Runtime.theRuntime.{set,append}NodeContent.

Now, this is pretty nasty.

I would much rather this work in a very similar manner, but with the
important difference that the client should receive an actual Widget
instance, rather than an xml string.

I currently have no plans to implement this, but it is the way I would
ultimately like Athena to work.  In order to future proof Athena
applications, I would recommend explicitly serializing the Element when
returning it, rather than relying on Athena to do it for you.  This will
produce exactly the same behavior as I described above, with the difference
that when Athena changes, your application won't suddenly begin receiving
Widgets where it expects xml strings.

Flattening an Element is straightforward: simply pass it to
nevow.flat.flatten.  In order to exactly replicate Athena's treatment, you
will also need to wrap it in a div with the xhtml namespace.  In other words,

flat.flatten(tags.div(xmlns="http://www.w3.org/1999/xhtml")[obj])

Of course, if anyone would care to implement the change I described above,
I would be delighted.

Hope this clears things up,

Jean-Paul

From aleuser at inwind.it  Tue Sep  5 10:14:54 2006
From: aleuser at inwind.it (aleuser@inwind.it)
Date: Tue Sep  5 10:14:58 2006
Subject: [Twisted-web] athena under a vhost: strange issue
Message-ID: <J54L0U$5803B7CCFE564DF2BDA223CB60835237@libero.it>

Hi,
I think I have found a strange issue in athena under a virtual host.

The problem is the 'self.callRemote' server side functions; they will work only the first time, after that (I mean: after one only 'self.callRemote' is executed) the athena page seems to be disconnected and no other dinamic athena function seems to be working!

If I use the same page without the virtual host (browsing directly to the athena web server ) it works ok.

The problem seem to be the deferred returned by the server side 'self.callRemote'. If I don't return it, it will not be executed under a virtual host. 

No errors are reported in the debug athena window and in the firefox javascript console.


In the following examples, the 'msgbox' is an 'alert' client-side in the "liveform.js" file.
...
  function msgbox(self, msg){
    alert(msg);
    return false;
  },
..


Here the code:

class LiveFormExampleFragment(athena.LiveFragment):
    jsClass = u"LiveForm.Checkin"
    docFactory = loaders.stan(T.span(render=T.directive('liveFragment'))[
        'TestInput= ',
        T.input(type="text",
             onchange="Nevow.Athena.Widget.get(this).callRemote('testing', this.value);"),
        'TestInput 2 = ',
        T.input(type="text",
             onchange="""
               ret = Nevow.Athena.Widget.get(this).callRemote('testing2', this.value);
               ret.addCallback(function(arg){
                  alert(arg);
               })
             """),
      ])

    def testing2(self, val):
        aa = self.callRemote('msgbox', u'message1..')
        bb = self.callRemote('msgbox', u'...message2')
        print "I always print val = ", val
        #Under a vhost I cant do a simple """ return 'Finish : %s'%val """ because
        #  it will work only the first time! after that, nothing will work..
        return DeferredList([aa, bb]).addCallback(lambda _: u'Finish : %s'%val)
    athena.expose(testing2)

    def testing(self, val):
        aa = self.callRemote('msgbox', u'message1..')
        bb = self.callRemote('msgbox', u'...message2')
        print "I always print val = ", val
        #if I remove the next 'return DeferredList' the message1 & 2 will be printed on the
        #  screen only the first time! after that, nothing will work..
        return DeferredList([aa, bb]) #<<< so don't remove me!
    athena.expose(testing)


class LiveFormExample(athena.LivePage):
    docFactory = loaders.stan([
                   T.html[T.body[
                     T.invisible(render=T.directive('liveglue')),
                                 T.invisible(render=T.directive("form")),
                   ]]])
    def __init__(self, *a, **kw):
        athena.LivePage.__init__(self, *a, **kw)
        self.jsModules.mapping[u'LiveForm'] = './liveform.js'

    def render_form(self, ctx, data):
        c = LiveFormExampleFragment()
        c.page = self
        return ctx.tag[c]


Alessandro



From naked at iki.fi  Tue Sep  5 10:13:37 2006
From: naked at iki.fi (Nuutti Kotivuori)
Date: Tue Sep  5 10:21:26 2006
Subject: [Twisted-web] Nevow and template like files
Message-ID: <87wt8ibb32.fsf@aka.i.naked.iki.fi>

Hi,

I'm considering the best ways to write a Nevow site that would meet my
needs. I know I can come up with several solutions to my problems
myself, but I am pondering on the best way to achieve them. I will
first describe my needs and then give an idea how I was thinking of
achieving it.

I will have three classes of xhtml files, or templates, that are used
in different parts of the code.

First are layout pages. These will provide the general
layout and functionality for a set of pages that will make up a
section of the site. These pages will contain the actual
html/head/body tags and such.

Second are the content pages. These pages will fit in a certain layout
and provide the actual page content to it. There will be static pages,
dynamic status pages and pages with web forms. The layout pages need
to be able to dig sections out of the content pages to fill in to the
layout; for example additional css/javascript to go into head, sidebar
items, actual content.

Third are so called snippet pages. These will contain a large number
of text snippets (with markup) that are re-used on many content
pages. These snippets need to be easily includable from the content
pages. Some of the snippets are used as is, where as some of the
snippets need to be parameterised - the calling code needs to be able
to fill in some things easily.

And that's it. The way I was going to go about it was rather
straightforward.

Layout pages would be simply Pages, with the layout file as
docFactory and a few macros defined.

Content pages would inherit from layout pages, and specify the content
file somehow (contentDocFactory?). The macros from layout pages would
just directly use patterns from the content pages to fill in stuff.

Snippet pages are a bit troublesome. I was thinking of making a
Fragment that would have the docFactory for such a page. Then that
fragment would be instantiated where ever some snippet was to be used,
and a simple method would be called on it. This method would get the
document, get a pattern from it, call fillSlots a couple times and
return it. I could make a macro which does this based on the arguments
it receives.

But it's all a bit in the air.

Things I'd like to avoid or achieve. I wouldn't want the actual xhtml
templates to be read many times in the life of the program - it may
even be a problem with macros if a page is read once per every pattern
used from it - so I'd like for them to be read just once. I'd like a
way to have some patterns be optional, so I could provide a default
thing to do in case they are not found. And I'd like the lookup of the
snippet patterns be somehow pre-done, so that every inclusion of a
snippet wouldn't have go to through 1000 DOM nodes to find the right
part.

So, any suggestions on how to actually go about making this happen?

-- Naked





From wendell at adsi-m4.com  Tue Sep  5 11:40:04 2006
From: wendell at adsi-m4.com (Wendell Turner)
Date: Tue Sep  5 11:40:06 2006
Subject: [Twisted-web] simple proxy example?
In-Reply-To: <20060828213302.GA5695@dreid.org>
References: <20060828202931.GB13010@adsi-m4.com>
	<20060828213302.GA5695@dreid.org>
Message-ID: <20060905164004.GA16283@adsi-m4.com>

On Mon, Aug 28, 2006 at 02:33:02PM -0700, David Reid wrote:
> On Mon, Aug 28, 2006 at 04:29:31PM -0400, Wendell Turner wrote:
> > 
> > The webdownload.py script in Abe Fettig's book works fine for
> > directly connected machines.  I would like to modify it to use a
> > proxy.  Most of the examples in the twisted docs seem to show
> > how to write a proxy, not how to use one.
> 
> So that everyone is on the same page, are you attempting to download pages via an http proxy?

Yes, just using an http proxy.  Current solution is:

    def gotProtocol(p):
        p.sendMessage("GET " + webpageurl + "\n\r")

    c.connectTCP(proxyhost, proxyport).addCallback(gotProtocol)

But there should be a better way.

> If yes:
>   There is currently a ticket in the tracker about client support for
> proxies http://twistedmatrix.com/trac/ticket/1774

Thanks, I'll take a look at the patch.  Although, according to
the notes, it may take some effort to do it 'properly'.

Wendell


From mike at mkp.ca  Tue Sep  5 12:26:32 2006
From: mike at mkp.ca (Mike Pelletier)
Date: Tue Sep  5 12:26:45 2006
Subject: [Twisted-web] Athena DOM manipulation
In-Reply-To: <20060904233520.1717.911362735.divmod.quotient.39353@ohm>
References: <20060904233520.1717.911362735.divmod.quotient.39353@ohm>
Message-ID: <200609051326.33394.mike@mkp.ca>

On Monday 04 September 2006 19:35, Jean-Paul Calderone wrote:
> One can indeed add new LiveElements to an already-rendered Athena page.

This is great!  I recently had a similar requirement, but I ended up just 
writing a single really complex LiveElement that could handle all 
possibilities instead of composing a bunch of simple LiveElements on an 
as-needed basis.  I knew I was missing something important, because I ended 
up having to pre-render all possible fragments in an invisible container and 
clone them whenever I wanted to add a new sub-Widget, etc.  I couldn't figure 
out how I was supposed to take advantage of Nevow's templating system for new 
Widgets once the page had finished rendering.  This clears up a lot.

Thanks!

Mike.

From dialtone at divmod.com  Tue Sep  5 13:43:35 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Sep  5 13:43:38 2006
Subject: [Twisted-web] Nevow and template like files
In-Reply-To: <87wt8ibb32.fsf@aka.i.naked.iki.fi>
Message-ID: <20060905184335.1717.251110080.divmod.quotient.40093@ohm>

On Tue, 05 Sep 2006 18:13:37 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>First are layout pages. These will provide the general
>layout and functionality for a set of pages that will make up a
>section of the site. These pages will contain the actual
>html/head/body tags and such.
>
>Second are the content pages. These pages will fit in a certain layout
>and provide the actual page content to it. There will be static pages,
>dynamic status pages and pages with web forms. The layout pages need
>to be able to dig sections out of the content pages to fill in to the
>layout; for example additional css/javascript to go into head, sidebar
>items, actual content.

I think what you said sounds reasonable. Maybe have a look here:
http://trac.stiq.it/main/browser/stiq/ui/base.py

Specifically base.Base class which defines 2 class attributes: template and sidebar that are used to fill a sidebar pane and the content pane of the macro.html template.
Basically you just use macro.html as the basis for all the pages and fill the 2 macro slots with a different couple of templates each time.

>Third are so called snippet pages. These will contain a large number
>of text snippets (with markup) that are re-used on many content
>pages. These snippets need to be easily includable from the content
>pages. Some of the snippets are used as is, where as some of the
>snippets need to be parameterised - the calling code needs to be able
>to fill in some things easily.

>Snippet pages are a bit troublesome. I was thinking of making a
>Fragment that would have the docFactory for such a page. Then that
>fragment would be instantiated where ever some snippet was to be used,
>and a simple method would be called on it. This method would get the
>document, get a pattern from it, call fillSlots a couple times and
>return it. I could make a macro which does this based on the arguments
>it receives.

Seems reasonable.

>But it's all a bit in the air.
>
>Things I'd like to avoid or achieve. I wouldn't want the actual xhtml
>templates to be read many times in the life of the program - it may
>even be a problem with macros if a page is read once per every pattern
>used from it - so I'd like for them to be read just once. I'd like a
>way to have some patterns be optional, so I could provide a default
>thing to do in case they are not found. And I'd like the lookup of the
>snippet patterns be somehow pre-done, so that every inclusion of a
>snippet wouldn't have go to through 1000 DOM nodes to find the right
>part.

Each template is rendered/parsed once and only once (not because of my code, but that's how nevow works) unless you modify it (and it's not in a macro, in fact if you modify a template included by a macro you have to modify the macro too).

patterns are always optional.
pre-doing the pattern lookup can be done using self.docFactory as an argument to inevow.IQ(self.docFactory).onePattern() either at class level or at __init__ level. Another way is to simply load a different template for the pattern at class level calling it in another way.
pattern lookup anyway doesn't go through 1000 DOM nodes. Nevow does precompiling of whatever it can.

>So, any suggestions on how to actually go about making this happen?

What you have in mind already seems good enough.

HTH.

From naked at iki.fi  Tue Sep  5 13:42:40 2006
From: naked at iki.fi (Nuutti Kotivuori)
Date: Tue Sep  5 13:43:44 2006
Subject: [Twisted-web] Formal and tabbed pane
Message-ID: <87lkoyb1en.fsf@aka.i.naked.iki.fi>

Another thing I'd like to get working is combining formal with tabbed
pane.

What I'd like to get is a formal form shown as a tabbed pane, with
either each group represented as page in the tabbed pane, or some
other grouping method used to determine which fields belong to which
pane. But I'd still like it to have just one submit button that would
submit all the fields in all the panes.

And, somehow, I'd like it gracefully to degrade to a normal formal
grouped form if Javascript isn't available :-)

But, I'll take what I can get and hack the rest somehow.

-- Naked



From naked at iki.fi  Tue Sep  5 14:48:08 2006
From: naked at iki.fi (Nuutti Kotivuori)
Date: Tue Sep  5 14:49:17 2006
Subject: [Twisted-web] Re: Nevow and template like files
References: <87wt8ibb32.fsf@aka.i.naked.iki.fi>
	<20060905184335.1717.251110080.divmod.quotient.40093@ohm>
Message-ID: <87hczmaydj.fsf@aka.i.naked.iki.fi>

Valentino Volonghi aka Dialtone wrote:
> On Tue, 05 Sep 2006 18:13:37 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>> First are layout pages. These will provide the general
>> layout and functionality for a set of pages that will make up a
>> section of the site. These pages will contain the actual
>> html/head/body tags and such.
>>
>> Second are the content pages. These pages will fit in a certain layout
>> and provide the actual page content to it. There will be static pages,
>> dynamic status pages and pages with web forms. The layout pages need
>> to be able to dig sections out of the content pages to fill in to the
>> layout; for example additional css/javascript to go into head, sidebar
>> items, actual content.
>
> I think what you said sounds reasonable. Maybe have a look here:
> http://trac.stiq.it/main/browser/stiq/ui/base.py
>
> Specifically base.Base class which defines 2 class attributes:
> template and sidebar that are used to fill a sidebar pane and the
> content pane of the macro.html template.  Basically you just use
> macro.html as the basis for all the pages and fill the 2 macro slots
> with a different couple of templates each time.

Thanks! I've looked already at that and it seems nice... except for
two points.

First of all, the content is looked up like this:

,----
| def macro_content(self, ctx):
|     return loaders.xmlfile(self.template+'.html', ignoreDocType=True,
|                            templateDir=conf.TEMPLATE_PATH)
`----

Since I have several patterns in a single file, I would need to append
pattern='content' keyword into that. But if I do that, then the file
will get read once by every macro that uses a pattern from it? That
I'd like to avoid - I'd like to keep the loaders in a class
variable nicely, or a Fragment, or something.

Also, if I say pattern='content', then that loader will throw a hissy
fit if the pattern isn't present. So I'd need a loader that would
return some default value when the .load() method is called and that
sounds like an icky solution again. No worries though, it's easy to
hack.

So, any ideas how I could have just one loader that would load the
file once, and then just use normal nevow machinery to fetch the
patterns from it (where it is easier to get a default value if the
pattern does not exist)?

>> Third are so called snippet pages. These will contain a large
>> number of text snippets (with markup) that are re-used on many
>> content pages. These snippets need to be easily includable from the
>> content pages. Some of the snippets are used as is, where as some
>> of the snippets need to be parameterised - the calling code needs
>> to be able to fill in some things easily.
>
>> Snippet pages are a bit troublesome. I was thinking of making a
>> Fragment that would have the docFactory for such a page. Then that
>> fragment would be instantiated where ever some snippet was to be
>> used, and a simple method would be called on it. This method would
>> get the document, get a pattern from it, call fillSlots a couple
>> times and return it. I could make a macro which does this based on
>> the arguments it receives.
>
> Seems reasonable.

Actually, I have a bit of a problem there - how do I get the whole
document loaded in the methods I have? I can call
self.docFactory.load() in every method ofcourse, but then the context
is a bit screwy - however, I hesitate to pass in the context that is
available at the time of the first call, since that might come from a
different page each time and I'm not sure if the render/macro methods
are going to be invoked from the correct object and such.

>> But it's all a bit in the air.
>>
>> Things I'd like to avoid or achieve. I wouldn't want the actual
>> xhtml templates to be read many times in the life of the program -
>> it may even be a problem with macros if a page is read once per
>> every pattern used from it - so I'd like for them to be read just
>> once. I'd like a way to have some patterns be optional, so I could
>> provide a default thing to do in case they are not found. And I'd
>> like the lookup of the snippet patterns be somehow pre-done, so
>> that every inclusion of a snippet wouldn't have go to through 1000
>> DOM nodes to find the right part.
>
> Each template is rendered/parsed once and only once (not because of
> my code, but that's how nevow works) unless you modify it (and it's
> not in a macro, in fact if you modify a template included by a macro
> you have to modify the macro too).

I thought that the rendered/parsed version of the template resided in
the loaders.xmlfile instance that is created - and if I return a new
loaders.xmlfile instance (with a different pattern clause) from
several different macros, then the page would get loaded as many
times. Or if I returned a loaders.xmlfile instance from a render
method, then the file would be parsed on each rendition of the page -
am I wrong?

> patterns are always optional.  pre-doing the pattern lookup can be
> done using self.docFactory as an argument to
> inevow.IQ(self.docFactory).onePattern() either at class level or at
> __init__ level. Another way is to simply load a different template
> for the pattern at class level calling it in another way.  pattern
> lookup anyway doesn't go through 1000 DOM nodes. Nevow does
> precompiling of whatever it can.

Patterns are optional yes, but if I call

  loaders.xmlfile(filename, pattern='foobar')

that will throw an exception if pattern 'foobar' is not present in the
file. So will onePattern(), but that is easily wrapped in a try/catch
block (or I can use patternGenerator which does take a default
argument in some cases) - where as a loader being wrapped doesn't do
anything since the actual loading happens later (when the load()
method is called).

>> So, any suggestions on how to actually go about making this happen?
>
> What you have in mind already seems good enough.
>
> HTH.

Thanks - I guess my ideas are somewhat in the ballpark of what it
should be - now I just need to iron out the small problems.

-- Naked


From dialtone at divmod.com  Tue Sep  5 19:41:22 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Sep  5 19:41:24 2006
Subject: [Twisted-web] Re: Nevow and template like files
In-Reply-To: <87hczmaydj.fsf@aka.i.naked.iki.fi>
Message-ID: <20060906004122.1717.464031610.divmod.quotient.40378@ohm>

On Tue, 05 Sep 2006 22:48:08 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>Thanks! I've looked already at that and it seems nice... except for
>two points.
>
>First of all, the content is looked up like this:
>
>,----
>| def macro_content(self, ctx):
>|     return loaders.xmlfile(self.template+'.html', ignoreDocType=True,
>|                            templateDir=conf.TEMPLATE_PATH)
>`----
>
>Since I have several patterns in a single file, I would need to append
>pattern='content' keyword into that. But if I do that, then the file

I disagree. If you use a template as a pattern container than load it completely and use inevow.IQ() to get patterns from it. Patterns are not rendered anyway so just style the real content of the template and grab patterns togheter with it. Later on you'll be able to merge the patterns inside the rendering result.

>will get read once by every macro that uses a pattern from it? That

Once by every macro yes, but only once per macro, not once per request per macro. It's a very light cost.

>I'd like to avoid - I'd like to keep the loaders in a class
>variable nicely, or a Fragment, or something.
>Also, if I say pattern='content', then that loader will throw a hissy
>fit if the pattern isn't present. So I'd need a loader that would
>return some default value when the .load() method is called and that
>sounds like an icky solution again. No worries though, it's easy to
>hack.

You should not hack it. Nope, what if the default value is not there too?
Use a Fragment (or rather an Element instead). Besides that I don't really think that templates containing many patterns are a good way to deal with the problem, many templates each with a Fragment associated is a much better way to solve it.

>So, any ideas how I could have just one loader that would load the
>file once, and then just use normal nevow machinery to fetch the
>patterns from it (where it is easier to get a default value if the
>pattern does not exist)?

I told you:

loaded = loaders.xmlfile('file')
some_pattern = inevow.IQ(loaded).onePattern('whatever')

>Actually, I have a bit of a problem there - how do I get the whole
>document loaded in the methods I have? I can call
>self.docFactory.load() in every method ofcourse, but then the context
>is a bit screwy - however, I hesitate to pass in the context that is
>available at the time of the first call, since that might come from a
>different page each time and I'm not sure if the render/macro methods
>are going to be invoked from the correct object and such.

Don't pass the context, what's the problem here?

>I thought that the rendered/parsed version of the template resided in
>the loaders.xmlfile instance that is created - and if I return a new
>loaders.xmlfile instance (with a different pattern clause) from
>several different macros, then the page would get loaded as many
>times. Or if I returned a loaders.xmlfile instance from a render

No because the macro is not reloaded. Just try to modify a file that was compiled in macro. You'll see that unless you modify the file containing the macro nothing changes.

>method, then the file would be parsed on each rendition of the page -
>am I wrong?

Yes a bit.

>Patterns are optional yes, but if I call
>
>  loaders.xmlfile(filename, pattern='foobar')
>
>that will throw an exception if pattern 'foobar' is not present in the

Of course... You are telling it to search exactly for a particular pattern.

>file. So will onePattern(), but that is easily wrapped in a try/catch
>block (or I can use patternGenerator which does take a default
>argument in some cases) - where as a loader being wrapped doesn't do
>anything since the actual loading happens later (when the load()
>method is called).

correct.

It's not very clear what's your problem though. Maybe you should either show some code or try to solve it in the way you explained which seemed reasonable anyway.

From naked at iki.fi  Wed Sep  6 03:03:28 2006
From: naked at iki.fi (Nuutti Kotivuori)
Date: Wed Sep  6 03:04:04 2006
Subject: [Twisted-web] Re: Nevow and template like files
References: <87hczmaydj.fsf@aka.i.naked.iki.fi>
	<20060906004122.1717.464031610.divmod.quotient.40378@ohm>
Message-ID: <87d5a9bewf.fsf@aka.i.naked.iki.fi>

Valentino Volonghi aka Dialtone wrote:
> On Tue, 05 Sep 2006 22:48:08 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>> Thanks! I've looked already at that and it seems nice... except for
>> two points.
>>
>> First of all, the content is looked up like this:
>>
>> ,----
>> | def macro_content(self, ctx):
>> | return loaders.xmlfile(self.template+'.html', ignoreDocType=True,
>> |                            templateDir=conf.TEMPLATE_PATH)
>> `----
>>
>> Since I have several patterns in a single file, I would need to append
>> pattern='content' keyword into that. But if I do that, then the file
>
> I disagree. If you use a template as a pattern container than load
> it completely and use inevow.IQ() to get patterns from it. Patterns
> are not rendered anyway so just style the real content of the
> template and grab patterns togheter with it. Later on you'll be able
> to merge the patterns inside the rendering result.

Yes, I would want to load it completely - but where should I do that
and how? I don't know if I should call the .load() method on the
docfactory myself if I want to keep the preprocessors machinery intact
and everything.

Or hmm, are you proposing on returning the entire docfactory from
somewhere? I don't want to do that as the file contains <html><head>
etc. blocks outside the patterns so that it will be nicer to edit in
HTML editors.

Let's assume I have a content file like this (pseudohtml)

,----[ content.xhtml ]
| <html>
|   <head>
|     <title><n:invisible n:pattern="title">Page title</n:invisible></title>
|     <n:invisible n:pattern="head">
|       <link rel="stylesheet" type="text/css" href="additional.css" />
|     </n:invisible>
|   </head
|   <body>
|     <div class="content">
|       <n:invisible n:pattern="content">
|         <p>Page content.</p>
|       </n:invisible>
|     </div>
|     <div class="help">
|       <n:invisible n:pattern="help">
|         <p>Page help.</p>
|       </n:invisible>
|     </div>
|   </body>
| </html>
`----

Now, from this, I'd want to use the patterns defined by embedding them
in a layout page.

>> will get read once by every macro that uses a pattern from it? That
>
> Once by every macro yes, but only once per macro, not once per
> request per macro. It's a very light cost.

I meant once by every macro - this is no longer really relevant if I
load the whole page completely first.

But if I didn't, loading the whole page once per macro would still
amount to quite a lot of extra loadings of the file if I read the
entire file for each pattern.

>> I'd like to avoid - I'd like to keep the loaders in a class
>> variable nicely, or a Fragment, or something.
>> Also, if I say pattern='content', then that loader will throw a hissy
>> fit if the pattern isn't present. So I'd need a loader that would
>> return some default value when the .load() method is called and that
>> sounds like an icky solution again. No worries though, it's easy to
>> hack.
>
> You should not hack it. Nope, what if the default value is not there
> too?  Use a Fragment (or rather an Element instead). Besides that I
> don't really think that templates containing many patterns are a
> good way to deal with the problem, many templates each with a
> Fragment associated is a much better way to solve it.

Okay, consider the content page shown above. Now let's assume that
most pages don't need the "head" pattern at all. I wouldn't want to
write the empty pattern on all pages just because it has to be there,
instead I would just want to say that put T.invisible() there if the
pattern doesn't exist. (With just the "head" pattern it wouldn't be so
much of a problem, but I might later on have to add some more, and I
don't want to change every content page just because one content page
requires something special.)

So this is what I'd like the default for. But ofcourse, if I load the
entire page first, and then just use the inevow.IQ machinery, making
the default patterns is easy.

>> So, any ideas how I could have just one loader that would load the
>> file once, and then just use normal nevow machinery to fetch the
>> patterns from it (where it is easier to get a default value if the
>> pattern does not exist)?
>
> I told you:
>
> loaded = loaders.xmlfile('file')
> some_pattern = inevow.IQ(loaded).onePattern('whatever')

That seems to work at first - but if there are any macros or render
methods inside the file I load, then I get Could not adapt error to
IMacroFactory.

>> Actually, I have a bit of a problem there - how do I get the whole
>> document loaded in the methods I have? I can call
>> self.docFactory.load() in every method ofcourse, but then the context
>> is a bit screwy - however, I hesitate to pass in the context that is
>> available at the time of the first call, since that might come from a
>> different page each time and I'm not sure if the render/macro methods
>> are going to be invoked from the correct object and such.
>
> Don't pass the context, what's the problem here?

Macros and render methods. In the case of the snippet pages, I would
like them to be interpreted in the context of the Fragment class that
is loading the entire snippet page.

>> I thought that the rendered/parsed version of the template resided in
>> the loaders.xmlfile instance that is created - and if I return a new
>> loaders.xmlfile instance (with a different pattern clause) from
>> several different macros, then the page would get loaded as many
>> times. Or if I returned a loaders.xmlfile instance from a render
>
> No because the macro is not reloaded. Just try to modify a file that
> was compiled in macro. You'll see that unless you modify the file
> containing the macro nothing changes.

I understand that the macro is not reloaded - but each macro will load
the page once. Which would be a problem on a page with hundreds of
snippets if every snippet would cause the page to be loaded once.

>> method, then the file would be parsed on each rendition of the page -
>> am I wrong?
>
> Yes a bit.
>
>> Patterns are optional yes, but if I call
>>
>> loaders.xmlfile(filename, pattern='foobar')
>>
>> that will throw an exception if pattern 'foobar' is not present in the
>
> Of course... You are telling it to search exactly for a particular pattern.

...and this was exactly the problem I was having - if I would use a
construct like that

>> file. So will onePattern(), but that is easily wrapped in a try/catch
>> block (or I can use patternGenerator which does take a default
>> argument in some cases) - where as a loader being wrapped doesn't do
>> anything since the actual loading happens later (when the load()
>> method is called).
>
> correct.
>
> It's not very clear what's your problem though. Maybe you should
> either show some code or try to solve it in the way you explained
> which seemed reasonable anyway.

Okay, I will try to be a bit clearer. For now, I have two problems -
how to load the "content" page all at once and then use patterns with
optional defaults from it. And then the snippet problem. I will
outline the snippet problem later.

I wrote a really tiny testsite outlining my problem. I will put the
three files here:

,----[ testpage.xhtml ]
| <?xml version="1.0"?>
| <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
| "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
| <html xmlns="http://www.w3.org/1999/xhtml"
|   xmlns:n="http://nevow.com/ns/nevow/0.1">
|   <head>
|     <title>
|       <n:invisible n:macro="title">Page Title</n:invisible>
|     </title>
|     <n:invisible n:macro="head" />
|   </head>
| 
|   <body>
|     <h1><n:invisible n:macro="title">Page Title</n:invisible></h1>
| 
|     <div class="plain-content">
|       <n:invisible n:macro="content" />
|     </div>
|   </body>
| </html>
`----

,----[ datapage.xhtml ]
| <?xml version="1.0"?>
| <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
| "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
| <html xmlns="http://www.w3.org/1999/xhtml"
|   xmlns:n="http://nevow.com/ns/nevow/0.1">
|   <head>
|     <title><n:invisible n:pattern="title">Data Page</n:invisible></title>
|     <n:invisible n:pattern="head" />
|   </head>
|   <body>
|     <n:invisible n:pattern="content">
|       <p>
|       <n:invisible n:macro="test">
|           Replaced by test data.
|         </n:invisible>
|       </p>
|     </n:invisible>
|   </body>
| </html>
`----

,----
| from nevow import inevow, loaders, rend, guard, url, stan, tags as T
| 
| class TestPage(rend.Page):
|     docFactory = loaders.xmlfile('testpage.xhtml')
|     datapage = None
| 
|     def macro_title(self, ctx):
|         return loaders.xmlfile(self.datapage, pattern='title')
| 
|     def macro_head(self, ctx):
|         return loaders.xmlfile(self.datapage, pattern='head')
| 
|     def macro_content(self, ctx):
|         return loaders.xmlfile(self.datapage, pattern='content')
| 
| class DataPage(TestPage):
|     datapage = 'datapage.xhtml'
| 
|     def macro_test(self, ctx):
|         return 'Test successful.'
`----

Now, how would I modify this example so that "datapage.xhtml" is
loaded only once, even though there are three different macros using
it. And also so that the "head" pattern could be optional and is
replaced by T.invisible() if not present. All the while not breaking
the macro_test part, splitting the pages into several files or
breaking the normal html rendability/editability of the datapage.

I will come up with something outlining the snippet problem later.

Thanks in advance,
-- Naked


From dialtone at divmod.com  Wed Sep  6 18:45:58 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed Sep  6 18:46:00 2006
Subject: [Twisted-web] Re: Nevow and template like files
In-Reply-To: <87d5a9bewf.fsf@aka.i.naked.iki.fi>
Message-ID: <20060906234558.1717.2092011679.divmod.quotient.41347@ohm>

On Wed, 06 Sep 2006 11:03:28 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>Valentino Volonghi aka Dialtone wrote:
>Okay, consider the content page shown above. Now let's assume that
>most pages don't need the "head" pattern at all. I wouldn't want to
>write the empty pattern on all pages just because it has to be there,
>instead I would just want to say that put T.invisible() there if the
>pattern doesn't exist. (With just the "head" pattern it wouldn't be so
>much of a problem, but I might later on have to add some more, and I
>don't want to change every content page just because one content page
>requires something special.)

>So this is what I'd like the default for. But ofcourse, if I load the
>entire page first, and then just use the inevow.IQ machinery, making
>the default patterns is easy.

Another solution is to write your own loader by implementing inevow.IDocFactory and the using loaders.xmlfile internally so that you can catch exceptions and do what you want with the behavior. This also sounds reasonable a reasonably easy.

>> loaded = loaders.xmlfile('file')
>> some_pattern = inevow.IQ(loaded).onePattern('whatever')
>
>That seems to work at first - but if there are any macros or render
>methods inside the file I load, then I get Could not adapt error to
>IMacroFactory.

Uhmmm... Indeed the problem of the macro factory is not of secondary importance. Basically it doesn't make sense to call load() without a MacroFactory. This can be solved by building your own WovenContext before passing it to the loader.

>> Don't pass the context, what's the problem here?
>
>Macros and render methods. In the case of the snippet pages, I would
>like them to be interpreted in the context of the Fragment class that
>is loading the entire snippet page.

That is done by default if you pass the context you are given by any of the methods in the Fragment.

>I understand that the macro is not reloaded - but each macro will load
>the page once. Which would be a problem on a page with hundreds of
>snippets if every snippet would cause the page to be loaded once.

It's still a one time cost.

>Okay, I will try to be a bit clearer. For now, I have two problems -
>how to load the "content" page all at once and then use patterns with
>optional defaults from it. And then the snippet problem. I will
>outline the snippet problem later.
>
>I wrote a really tiny testsite outlining my problem. I will put the
>three files here:
>
>,----[ testpage.xhtml ]
>| <?xml version="1.0"?>
>| <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>| "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
>| <html xmlns="http://www.w3.org/1999/xhtml"
>|   xmlns:n="http://nevow.com/ns/nevow/0.1">
>|   <head>
>|     <title>
>|       <n:invisible n:macro="title">Page Title</n:invisible>
>|     </title>
>|     <n:invisible n:macro="head" />
>|   </head>
>|
>|   <body>
>|     <h1><n:invisible n:macro="title">Page Title</n:invisible></h1>
>|
>|     <div class="plain-content">
>|       <n:invisible n:macro="content" />
>|     </div>
>|   </body>
>| </html>
>`----
>
>,----[ datapage.xhtml ]
>| <?xml version="1.0"?>
>| <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>| "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
>| <html xmlns="http://www.w3.org/1999/xhtml"
>|   xmlns:n="http://nevow.com/ns/nevow/0.1">
>|   <head>
>|     <title><n:invisible n:pattern="title">Data Page</n:invisible></title>
>|     <n:invisible n:pattern="head" />
>|   </head>
>|   <body>
>|     <n:invisible n:pattern="content">
>|       <p>
>|       <n:invisible n:macro="test">
>|           Replaced by test data.
>|         </n:invisible>
>|       </p>
>|     </n:invisible>
>|   </body>
>| </html>
>`----
>
>,----
>| from nevow import inevow, loaders, rend, guard, url, stan, tags as T
>|
>| class TestPage(rend.Page):
>|     docFactory = loaders.xmlfile('testpage.xhtml')
>|     datapage = None
>|
>|     def macro_title(self, ctx):
>|         return loaders.xmlfile(self.datapage, pattern='title')
>|
>|     def macro_head(self, ctx):
>|         return loaders.xmlfile(self.datapage, pattern='head')
>|
>|     def macro_content(self, ctx):
>|         return loaders.xmlfile(self.datapage, pattern='content')
>|
>| class DataPage(TestPage):
>|     datapage = 'datapage.xhtml'
>|
>|     def macro_test(self, ctx):
>|         return 'Test successful.'
>`----

I'd rewrite the example in the following way:

class TestPage(rend.Page):
    docFactory = loaders.xmlfile('testpage.xhtml')
    patternGenerator = None

    def macro_title(self, ctx):
        return inevow.IQ(self.patternGenerator).onePattern('title')

    def macro_head(self, ctx):
        return inevow.IQ(self.patternGenerator).onePattern('head')

    def macro_content(self, ctx):
        return inevow.IQ(self.patternGenerator).onePattern('content')

class DataPage(TestPage):
    patternGenerator = loaders.xmlfile('datapage.xhtml')

    def macro_test(self, ctx):
        return 'Test successful.'


>Now, how would I modify this example so that "datapage.xhtml" is
>loaded only once, even though there are three different macros using
>it. And also so that the "head" pattern could be optional and is
>replaced by T.invisible() if not present. All the while not breaking
>the macro_test part, splitting the pages into several files or
>breaking the normal html rendability/editability of the datapage.

I think the solution above should work without any problems, except I'm not sure that macro_test could actually work at all in nevow currently, but it may work.

In case you want to avoid to call loaders.xmlfile('datapage.html') each time you might try a simple metaclass solution that grabs patternGenerator attribute before building the class and changes it to be an instance of loaders.xmlfile.

>I will come up with something outlining the snippet problem later.

ok.

From dialtone at divmod.com  Wed Sep  6 18:46:01 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed Sep  6 18:46:03 2006
Subject: [Twisted-web] Re: Nevow and template like files
In-Reply-To: <87d5a9bewf.fsf@aka.i.naked.iki.fi>
Message-ID: <20060906234601.1717.126352322.divmod.quotient.41348@ohm>

On Wed, 06 Sep 2006 11:03:28 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>Valentino Volonghi aka Dialtone wrote:
>Okay, consider the content page shown above. Now let's assume that
>most pages don't need the "head" pattern at all. I wouldn't want to
>write the empty pattern on all pages just because it has to be there,
>instead I would just want to say that put T.invisible() there if the
>pattern doesn't exist. (With just the "head" pattern it wouldn't be so
>much of a problem, but I might later on have to add some more, and I
>don't want to change every content page just because one content page
>requires something special.)

>So this is what I'd like the default for. But ofcourse, if I load the
>entire page first, and then just use the inevow.IQ machinery, making
>the default patterns is easy.

Another solution is to write your own loader by implementing inevow.IDocFactory and the using loaders.xmlfile internally so that you can catch exceptions and do what you want with the behavior. This also sounds reasonable a reasonably easy.

>> loaded = loaders.xmlfile('file')
>> some_pattern = inevow.IQ(loaded).onePattern('whatever')
>
>That seems to work at first - but if there are any macros or render
>methods inside the file I load, then I get Could not adapt error to
>IMacroFactory.

Uhmmm... Indeed the problem of the macro factory is not of secondary importance. Basically it doesn't make sense to call load() without a MacroFactory. This can be solved by building your own WovenContext before passing it to the loader.

>> Don't pass the context, what's the problem here?
>
>Macros and render methods. In the case of the snippet pages, I would
>like them to be interpreted in the context of the Fragment class that
>is loading the entire snippet page.

That is done by default if you pass the context you are given by any of the methods in the Fragment.

>I understand that the macro is not reloaded - but each macro will load
>the page once. Which would be a problem on a page with hundreds of
>snippets if every snippet would cause the page to be loaded once.

It's still a one time cost.

>Okay, I will try to be a bit clearer. For now, I have two problems -
>how to load the "content" page all at once and then use patterns with
>optional defaults from it. And then the snippet problem. I will
>outline the snippet problem later.
>
>I wrote a really tiny testsite outlining my problem. I will put the
>three files here:
>
>,----[ testpage.xhtml ]
>| <?xml version="1.0"?>
>| <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>| "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
>| <html xmlns="http://www.w3.org/1999/xhtml"
>|   xmlns:n="http://nevow.com/ns/nevow/0.1">
>|   <head>
>|     <title>
>|       <n:invisible n:macro="title">Page Title</n:invisible>
>|     </title>
>|     <n:invisible n:macro="head" />
>|   </head>
>|
>|   <body>
>|     <h1><n:invisible n:macro="title">Page Title</n:invisible></h1>
>|
>|     <div class="plain-content">
>|       <n:invisible n:macro="content" />
>|     </div>
>|   </body>
>| </html>
>`----
>
>,----[ datapage.xhtml ]
>| <?xml version="1.0"?>
>| <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>| "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
>| <html xmlns="http://www.w3.org/1999/xhtml"
>|   xmlns:n="http://nevow.com/ns/nevow/0.1">
>|   <head>
>|     <title><n:invisible n:pattern="title">Data Page</n:invisible></title>
>|     <n:invisible n:pattern="head" />
>|   </head>
>|   <body>
>|     <n:invisible n:pattern="content">
>|       <p>
>|       <n:invisible n:macro="test">
>|           Replaced by test data.
>|         </n:invisible>
>|       </p>
>|     </n:invisible>
>|   </body>
>| </html>
>`----
>
>,----
>| from nevow import inevow, loaders, rend, guard, url, stan, tags as T
>|
>| class TestPage(rend.Page):
>|     docFactory = loaders.xmlfile('testpage.xhtml')
>|     datapage = None
>|
>|     def macro_title(self, ctx):
>|         return loaders.xmlfile(self.datapage, pattern='title')
>|
>|     def macro_head(self, ctx):
>|         return loaders.xmlfile(self.datapage, pattern='head')
>|
>|     def macro_content(self, ctx):
>|         return loaders.xmlfile(self.datapage, pattern='content')
>|
>| class DataPage(TestPage):
>|     datapage = 'datapage.xhtml'
>|
>|     def macro_test(self, ctx):
>|         return 'Test successful.'
>`----

I'd rewrite the example in the following way:

class TestPage(rend.Page):
    docFactory = loaders.xmlfile('testpage.xhtml')
    patternGenerator = None

    def macro_title(self, ctx):
        return inevow.IQ(self.patternGenerator).onePattern('title')

    def macro_head(self, ctx):
        return inevow.IQ(self.patternGenerator).onePattern('head')

    def macro_content(self, ctx):
        return inevow.IQ(self.patternGenerator).onePattern('content')

class DataPage(TestPage):
    patternGenerator = loaders.xmlfile('datapage.xhtml')

    def macro_test(self, ctx):
        return 'Test successful.'


>Now, how would I modify this example so that "datapage.xhtml" is
>loaded only once, even though there are three different macros using
>it. And also so that the "head" pattern could be optional and is
>replaced by T.invisible() if not present. All the while not breaking
>the macro_test part, splitting the pages into several files or
>breaking the normal html rendability/editability of the datapage.

I think the solution above should work without any problems, except I'm not sure that macro_test could actually work at all in nevow currently, but it may work.

In case you want to avoid to call loaders.xmlfile('datapage.html') each time you might try a simple metaclass solution that grabs patternGenerator attribute before building the class and changes it to be an instance of loaders.xmlfile.

>I will come up with something outlining the snippet problem later.

ok.

From naked at iki.fi  Thu Sep  7 05:18:42 2006
From: naked at iki.fi (Nuutti Kotivuori)
Date: Thu Sep  7 05:20:07 2006
Subject: [Twisted-web] Re: Nevow and template like files
References: <87d5a9bewf.fsf@aka.i.naked.iki.fi>
	<20060906234601.1717.126352322.divmod.quotient.41348@ohm>
Message-ID: <877j0gasjh.fsf@aka.i.naked.iki.fi>

Valentino Volonghi aka Dialtone wrote:
> On Wed, 06 Sep 2006 11:03:28 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>> Valentino Volonghi aka Dialtone wrote:
>> Okay, consider the content page shown above. Now let's assume that
>> most pages don't need the "head" pattern at all. I wouldn't want to
>> write the empty pattern on all pages just because it has to be
>> there, instead I would just want to say that put T.invisible()
>> there if the pattern doesn't exist. (With just the "head" pattern
>> it wouldn't be so much of a problem, but I might later on have to
>> add some more, and I don't want to change every content page just
>> because one content page requires something special.)
>
>> So this is what I'd like the default for. But ofcourse, if I load
>> the entire page first, and then just use the inevow.IQ machinery,
>> making the default patterns is easy.
>
> Another solution is to write your own loader by implementing
> inevow.IDocFactory and the using loaders.xmlfile internally so that
> you can catch exceptions and do what you want with the
> behavior. This also sounds reasonable a reasonably easy.

Yup. This I actually did already. It is used below.

>>> loaded = loaders.xmlfile('file') some_pattern =
>>> inevow.IQ(loaded).onePattern('whatever')
>>
>> That seems to work at first - but if there are any macros or render
>> methods inside the file I load, then I get Could not adapt error to
>> IMacroFactory.
>
> Uhmmm... Indeed the problem of the macro factory is not of secondary
> importance. Basically it doesn't make sense to call load() without a
> MacroFactory. This can be solved by building your own WovenContext
> before passing it to the loader.

I'm still working on this. This would be for the snippet code.

>>> Don't pass the context, what's the problem here?
>>
>> Macros and render methods. In the case of the snippet pages, I
>> would like them to be interpreted in the context of the Fragment
>> class that is loading the entire snippet page.
>
> That is done by default if you pass the context you are given by any
> of the methods in the Fragment.

But I need to call externally into the Fragment, so it doesn't go
through any of the normal entrypoints - so I guess I will have to
build the context myself.

>> I understand that the macro is not reloaded - but each macro will
>> load the page once. Which would be a problem on a page with
>> hundreds of snippets if every snippet would cause the page to be
>> loaded once.
>
> It's still a one time cost.

Yup.

> I'd rewrite the example in the following way:
>
> class TestPage(rend.Page):
>     docFactory = loaders.xmlfile('testpage.xhtml')
>     patternGenerator = None
>
>     def macro_title(self, ctx):
>         return inevow.IQ(self.patternGenerator).onePattern('title')
>
>     def macro_head(self, ctx):
>         return inevow.IQ(self.patternGenerator).onePattern('head')
>
>     def macro_content(self, ctx):
>         return inevow.IQ(self.patternGenerator).onePattern('content')
>
> class DataPage(TestPage):
>     patternGenerator = loaders.xmlfile('datapage.xhtml')
>
>     def macro_test(self, ctx):
>         return 'Test successful.'

> I think the solution above should work without any problems, except
> I'm not sure that macro_test could actually work at all in nevow
> currently, but it may work.

The macro_test thing does not work in your example, but did work in my
original example.

> In case you want to avoid to call loaders.xmlfile('datapage.html')
> each time you might try a simple metaclass solution that grabs
> patternGenerator attribute before building the class and changes it
> to be an instance of loaders.xmlfile.

Not a problem, actually better that way I think.

Okay, I have the first part of my problem now solved, without the
snippet part. This is my solution:

,----[ testsite.py ]
| _no_default = object()
| 
| class patternLoader(loaders.xmlfile):
|     implements(inevow.IDocFactory)
| 
|     def __init__(self, original, pattern, default=_no_default):
|         self.original = original
|         self.pattern = pattern
|         self.default = default
| 
|     def load(self, *args, **kw):
|         doc = self.original.load(*args, **kw)
|         if self.default is _no_default:
|             return inevow.IQ(doc).onePattern(self.pattern)
|         else:
|             try:
|                 return inevow.IQ(doc).onePattern(self.pattern)
|             except stan.NodeNotFound:
|                 return self.default
| 
| class TestPage(rend.Page):
|     docFactory = loaders.xmlfile('testpage.xhtml')
|     datapageFactory = None
| 
|     def macro_title(self, ctx):
|         return patternLoader(self.datapageFactory, 'title')
| 
|     def macro_head(self, ctx):
|         return patternLoader(self.datapageFactory, 'head', T.invisible())
| 
|     def macro_content(self, ctx):
|         return patternLoader(self.datapageFactory, 'content')
| 
| class DataPage(TestPage):
|     datapageFactory = loaders.xmlfile('datapage.xhtml')
| 
|     def macro_test(self, ctx):
|         return 'Test successful.'
`----

It even does the optional part nicely.

Does this look reasonable? I'm diving in the snippet part next.

-- Naked


From dialtone at divmod.com  Thu Sep  7 05:38:03 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Sep  7 05:38:05 2006
Subject: [Twisted-web] Re: Nevow and template like files
In-Reply-To: <877j0gasjh.fsf@aka.i.naked.iki.fi>
Message-ID: <20060907103803.1717.362997362.divmod.quotient.41787@ohm>

On Thu, 07 Sep 2006 13:18:42 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>Valentino Volonghi aka Dialtone wrote:
>> On Wed, 06 Sep 2006 11:03:28 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>>> Valentino Volonghi aka Dialtone wrote:

>Does this look reasonable? I'm diving in the snippet part next.

Yes it does.

From naked at iki.fi  Thu Sep  7 06:33:56 2006
From: naked at iki.fi (Nuutti Kotivuori)
Date: Thu Sep  7 06:34:53 2006
Subject: [Twisted-web] Re: Nevow and template like files
References: <87d5a9bewf.fsf@aka.i.naked.iki.fi>
	<20060906234601.1717.126352322.divmod.quotient.41348@ohm>
	<877j0gasjh.fsf@aka.i.naked.iki.fi>
Message-ID: <87venzap23.fsf@aka.i.naked.iki.fi>

Nuutti Kotivuori wrote:
> I'm diving in the snippet part next.

Okay. Now I have my first try at the snippet problem.

,----[ datapage.xhtml ]
| <?xml version="1.0"?>
| <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
| "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
| <html xmlns="http://www.w3.org/1999/xhtml"
|   xmlns:n="http://nevow.com/ns/nevow/0.1">
|   <head>
|     <title><n:invisible n:pattern="title">Data Page</n:invisible></title>
|     <n:invisible n:pattern="head" />
|   </head>
|   <body>
|     <n:invisible n:pattern="content">
|       <p>
|       <n:invisible n:macro="test">
|           Replaced by test data.
|         </n:invisible>
|       </p>
|       <p>
|         <n:invisible n:macro="snippet_one">
|           Snippet one.
|         </n:invisible>
|       </p>
|       <p>
|         <n:invisible n:macro="snippet_two">
|           Snippet two.
|         </n:invisible>
|       </p>
|       <p>
|         <n:invisible n:macro="snippet_three">
|           Snippet three.
|         </n:invisible>
|       </p>
|     </n:invisible>
|   </body>
| </html>
`----

,----[ snippets.xhtml ]
| <?xml version="1.0"?>
| <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
| "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
| <html xmlns="http://www.w3.org/1999/xhtml"
|   xmlns:n="http://nevow.com/ns/nevow/0.1">
|   <head>
|     <title>Snippet Page</title>
|   </head>
|   <body>
|     <n:invisible n:pattern="one">
|       <p>Test snippet one.</p>
|     </n:invisible>
|     <n:invisible n:pattern="two">
|       <p>Test snippet two with <n:slot name="arg1">argument
|       1</n:slot> and <n:slot name="arg2">argument 2</n:slot>.</p>
|     </n:invisible>
|     <n:invisible n:pattern="three">
|       <p>Test snippet three with a <n:invisible
|       n:render="three_special">render</n:invisible>.</p>
|     </n:invisible>
|   </body>
| </html>
`----

,----[ datapage.py ]
| class DataPage(TestPage):
|     datapageFactory = loaders.xmlfile('datapage.xhtml')
| 
|     def macro_test(self, ctx):
|         return 'Test successful.'
| 
|     def macro_snippet_one(self, ctx):
|         return Snippets().one(ctx)
| 
|     def macro_snippet_two(self, ctx):
|         return Snippets().two(ctx, 'foo', 'bar')
| 
|     def macro_snippet_three(self, ctx):
|         return Snippets().three(ctx)
| 
| class Snippets(rend.Fragment):
|     docFactory = loaders.xmlfile('snippets.xhtml')
| 
|     def one(self, ctx):
|         context = self.rend(ctx, None)
|         context.tag = inevow.IQ(context.tag).onePattern('one')
|         return context
| 
|     def two(self, ctx, arg1, arg2):
|         context = self.rend(ctx, None)
|         context.tag = inevow.IQ(context.tag).onePattern('two')
|         context.tag = context.tag.fillSlots('arg1', arg1)
|                                  .fillSlots('arg2', arg2)
|         return context
| 
|     def three(self, ctx):
|         context = self.rend(ctx, None)
|         context.tag = inevow.IQ(context.tag).onePattern('three')
|         return context
| 
|     def render_three_special(self, ctx, data):
|         import datetime
|         return 'special render with time %s' % datetime.datetime.now()
`----

Now, this method seems to work, but I'm not sure if I'm too happy with
it yet.

-- Naked


From dialtone at divmod.com  Thu Sep  7 07:10:48 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Sep  7 07:10:54 2006
Subject: [Twisted-web] Re: Nevow and template like files
In-Reply-To: <87venzap23.fsf@aka.i.naked.iki.fi>
Message-ID: <20060907121048.1717.233396244.divmod.quotient.41856@ohm>

On Thu, 07 Sep 2006 14:33:56 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>Nuutti Kotivuori wrote:
>,----[ datapage.py ]
>| class DataPage(TestPage):
>|     datapageFactory = loaders.xmlfile('datapage.xhtml')
>|
>|     def macro_test(self, ctx):
>|         return 'Test successful.'
>|
>|     def macro_snippet_one(self, ctx):
>|         return Snippets().one(ctx)
>|
>|     def macro_snippet_two(self, ctx):
>|         return Snippets().two(ctx, 'foo', 'bar')
>|
>|     def macro_snippet_three(self, ctx):
>|         return Snippets().three(ctx)
>|
>| class Snippets(rend.Fragment):
>|     docFactory = loaders.xmlfile('snippets.xhtml')
>|
>|     def one(self, ctx):
>|         context = self.rend(ctx, None)
>|         context.tag = inevow.IQ(context.tag).onePattern('one')
>|         return context
>|
>|     def two(self, ctx, arg1, arg2):
>|         context = self.rend(ctx, None)
>|         context.tag = inevow.IQ(context.tag).onePattern('two')
>|         context.tag = context.tag.fillSlots('arg1', arg1)
>|                                  .fillSlots('arg2', arg2)
>|         return context
>|
>|     def three(self, ctx):
>|         context = self.rend(ctx, None)
>|         context.tag = inevow.IQ(context.tag).onePattern('three')
>|         return context
>|
>|     def render_three_special(self, ctx, data):
>|         import datetime
>|         return 'special render with time %s' % datetime.datetime.now()
>`----
>
>Now, this method seems to work, but I'm not sure if I'm too happy with
>it yet.

I have to say that this way of organizing code doesn't strike me as too effective. Also you seem to be misusing the Fragment object IMHO. It's pretty useless to call self.rend and then substituting the tag attribute (which was created by the rend object, just don't call rend at all and do something else).

Anyway the real problem with this organization is encapsulation of the relevant methods, in my opinion it might become very hard to handle these very complex templates togheter with their methods. Unfortunately since I've never needed something like this I can't even come up with a valuable solution, sorry.

From naked at iki.fi  Thu Sep  7 08:17:28 2006
From: naked at iki.fi (Nuutti Kotivuori)
Date: Thu Sep  7 08:18:49 2006
Subject: [Twisted-web] Re: Nevow and template like files
References: <87venzap23.fsf@aka.i.naked.iki.fi>
	<20060907121048.1717.233396244.divmod.quotient.41856@ohm>
Message-ID: <87pse7ak9j.fsf@aka.i.naked.iki.fi>

Valentino Volonghi aka Dialtone wrote:
> On Thu, 07 Sep 2006 14:33:56 +0300, Nuutti Kotivuori <naked@iki.fi> wrote:
>> Nuutti Kotivuori wrote:
>> ,----[ datapage.py ]
>> | class DataPage(TestPage):
>> |     datapageFactory = loaders.xmlfile('datapage.xhtml')
>> |
>> |     def macro_test(self, ctx):
>> |         return 'Test successful.'
>> |
>> |     def macro_snippet_one(self, ctx):
>> |         return Snippets().one(ctx)
>> |
>> |     def macro_snippet_two(self, ctx):
>> |         return Snippets().two(ctx, 'foo', 'bar')
>> |
>> |     def macro_snippet_three(self, ctx):
>> |         return Snippets().three(ctx)
>> |
>> | class Snippets(rend.Fragment):
>> |     docFactory = loaders.xmlfile('snippets.xhtml')
>> |
>> |     def one(self, ctx):
>> |         context = self.rend(ctx, None)
>> |         context.tag = inevow.IQ(context.tag).onePattern('one')
>> |         return context
>> |
>> |     def two(self, ctx, arg1, arg2):
>> |         context = self.rend(ctx, None)
>> |         context.tag = inevow.IQ(context.tag).onePattern('two')
>> |         context.tag = context.tag.fillSlots('arg1', arg1)
>> |                                  .fillSlots('arg2', arg2)
>> |         return context
>> |
>> |     def three(self, ctx):
>> |         context = self.rend(ctx, None)
>> |         context.tag = inevow.IQ(context.tag).onePattern('three')
>> |         return context
>> |
>> |     def render_three_special(self, ctx, data):
>> |         import datetime
>> |         return 'special render with time %s' % datetime.datetime.now()
>> `----
>>
>> Now, this method seems to work, but I'm not sure if I'm too happy with
>> it yet.
>
> I have to say that this way of organizing code doesn't strike me as
> too effective. Also you seem to be misusing the Fragment object
> IMHO. It's pretty useless to call self.rend and then substituting
> the tag attribute (which was created by the rend object, just don't
> call rend at all and do something else).

Yes, I am misusing the Fragment object. The rend() method just
happened to be handy there. I'm getting rid of it.

> Anyway the real problem with this organization is encapsulation of
> the relevant methods, in my opinion it might become very hard to
> handle these very complex templates togheter with their
> methods. Unfortunately since I've never needed something like this I
> can't even come up with a valuable solution, sorry.

Well, I hope we can manage. Actually, with the latest bit of code I
wrote, I think this already satisfies the requirements I set for it
originally. Here's the changed part:

,----[ testsite.py ]
| class Snippets(rend.Fragment):
|     docFactory = loaders.xmlfile('snippets.xhtml')
| 
|     def patternContext(self, ctx, name):
|         context = WovenContext(parent=ctx)
|         self.rememberStuff(context)
|         # FIXME: preprocessors?
|         doc = self.docFactory.load(context)
|         context.tag = inevow.IQ(doc).onePattern(name)
|         return context
| 
|     def one(self, ctx):
|         return self.patternContext(ctx, 'one')
| 
|     def two(self, ctx, arg1, arg2):
|         context = self.patternContext(ctx, 'two')
|         context.tag.fillSlots('arg1', arg1).fillSlots('arg2', arg2)
|         return context
| 
|     def three(self, ctx):
|         return self.patternContext(ctx, 'three')
| 
|     def render_three_special(self, ctx, data):
|         import datetime
|         return 'special render with time %s' % datetime.datetime.now()
`----

Now the Fragment object basically only offers the rememberStuff() call
so I don't have to do that myself - and being a Data/Render/Macro
factory etc. Which is pretty much what I want from it anyway. If I
want to cache the pattern lookups, I can do it inside the
patternContext method easily, but I'll do that only if I find out it
ends up being a performance problem.

So, thanks for all the help and guidance. I'll bug people here more
when I run into some more problems.

-- Naked


From manlio_perillo at libero.it  Fri Sep  8 09:55:26 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Sep  8 09:52:49 2006
Subject: [Twisted-web] [Nevow] cookie max-age support
Message-ID: <4501845E.9080709@libero.it>

Hi.
I have just discovered that IExplorer, Mozilla dand Firefox does not
support max-age.
At least when I set max-age to 0 the cookie is not discarded.

Only Opera seems to support this.

So the question: why there is a max-age support with Cookie?
This is a compatible interface for the future support of the new Cookie
standard (Set-Cookie2)?



Thanks  Manlio Perillo

From manlio_perillo at libero.it  Sat Sep  9 13:08:16 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Sep  9 13:05:37 2006
Subject: [Twisted-web] [Nevow] json serializer and strings
Message-ID: <45030310.1020808@libero.it>

Hi.

Why the json serializer does not support plain strings?

I'm having problems because I want to serialize keywords arguments and
the dictionary keys are str objects, not unicode.

There are some problems with this:

    elif isinstance(obj, str):
        w('"')
        w(stringEncode(obj.decode("us-ascii"))
        w('"')
?


I can use simplejson, but I don't want to add too many dependencies.


Thanks   Manlio Perillo

From exarkun at divmod.com  Sat Sep  9 15:22:45 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Sep  9 15:22:47 2006
Subject: [Twisted-web] [Nevow] json serializer and strings
In-Reply-To: <45030310.1020808@libero.it>
Message-ID: <20060909202245.1717.1657744755.divmod.quotient.44197@ohm>

On Sat, 09 Sep 2006 20:08:16 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Hi.
>
>Why the json serializer does not support plain strings?
>
>I'm having problems because I want to serialize keywords arguments and
>the dictionary keys are str objects, not unicode.
>
>There are some problems with this:
>
>    elif isinstance(obj, str):
>        w('"')
>        w(stringEncode(obj.decode("us-ascii"))
>        w('"')
>?

Yes.  What if it is not an ASCII string?  If you know that your strings
are ASCII strings, decode them before you give them to Athena.

>
>
>I can use simplejson, but I don't want to add too many dependencies.
>
>
>Thanks   Manlio Perillo
>

Jean-Paul

From manlio_perillo at libero.it  Sat Sep  9 15:40:53 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat Sep  9 15:38:11 2006
Subject: [Twisted-web] [Nevow] json serializer and strings
In-Reply-To: <20060909202245.1717.1657744755.divmod.quotient.44197@ohm>
References: <20060909202245.1717.1657744755.divmod.quotient.44197@ohm>
Message-ID: <450326D5.8010903@libero.it>

Jean-Paul Calderone ha scritto:
> On Sat, 09 Sep 2006 20:08:16 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> Hi.
>>
>> Why the json serializer does not support plain strings?
>>
>> I'm having problems because I want to serialize keywords arguments and
>> the dictionary keys are str objects, not unicode.
>>
>> There are some problems with this:
>>
>>    elif isinstance(obj, str):
>>        w('"')
>>        w(stringEncode(obj.decode("us-ascii"))
>>        w('"')
>> ?
> 
> Yes.  What if it is not an ASCII string?  

Raise an arror?
Is this really a problem?

Unfortunalety(?) plain strings are widely used in the CPython
implementation (keywords arguments stores keys as str not unicode).

> If you know that your strings
> are ASCII strings, decode them before you give them to Athena.
> 

I'm not using json for Athena, just to serialize a dictionary (keywords
arguments) in JSON format.



Regards  Manlio Perillo



From exarkun at divmod.com  Sat Sep  9 16:42:22 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Sep  9 16:42:26 2006
Subject: [Twisted-web] [Nevow] json serializer and strings
In-Reply-To: <450326D5.8010903@libero.it>
Message-ID: <20060909214222.1717.993832699.divmod.quotient.44271@ohm>

On Sat, 09 Sep 2006 22:40:53 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Jean-Paul Calderone ha scritto:
>> On Sat, 09 Sep 2006 20:08:16 +0200, Manlio Perillo
>> <manlio_perillo@libero.it> wrote:
>>> Hi.
>>>
>>> Why the json serializer does not support plain strings?
>>>
>>> I'm having problems because I want to serialize keywords arguments and
>>> the dictionary keys are str objects, not unicode.
>>>
>>> There are some problems with this:
>>>
>>>    elif isinstance(obj, str):
>>>        w('"')
>>>        w(stringEncode(obj.decode("us-ascii"))
>>>        w('"')
>>> ?
>>
>> Yes.  What if it is not an ASCII string?
>
>Raise an arror?
>Is this really a problem?

Yes.

>
>Unfortunalety(?) plain strings are widely used in the CPython
>implementation (keywords arguments stores keys as str not unicode).
>
>> If you know that your strings
>> are ASCII strings, decode them before you give them to Athena.
>>
>
>I'm not using json for Athena, just to serialize a dictionary (keywords
>arguments) in JSON format.
>

You should probably use another json library, then.  nevow.json is primarily
a support library for athena.

Jean-Paul

From corydodt at gmail.com  Sat Sep  9 16:47:48 2006
From: corydodt at gmail.com (Cory Dodt)
Date: Sat Sep  9 16:47:51 2006
Subject: [Twisted-web] [Nevow] json serializer and strings
In-Reply-To: <450326D5.8010903@libero.it>
References: <20060909202245.1717.1657744755.divmod.quotient.44197@ohm>
	<450326D5.8010903@libero.it>
Message-ID: <c16a94ff0609091447v5eea0333lbab61d7bfd56d50e@mail.gmail.com>

On 9/9/06, Manlio Perillo <manlio_perillo@libero.it> wrote:
>
>
> >> There are some problems with this:
> >>
> >>    elif isinstance(obj, str):
> >>        w('"')
> >>        w(stringEncode(obj.decode("us-ascii"))
> >>        w('"')
> >> ?
> >
> > Yes.  What if it is not an ASCII string?
>
> Raise an arror?
> Is this really a problem?



Yes.  Yes it is.  Javascript strings are unicode.  Therefore the
implementation must be able to convert the encoded string (byte
representation) into Unicode when it arrives.

In order to convert the parameter to unicode, the API has to know what
encoding the original string was; or it must have it in Unicode form
already.  If the API accepts 8-bit str objects, then it must guess at the
encoding to produce a unicode object.  It will guess wrong very often, which
leads to bugs.  Therefore, it does not accept 8-bit str objects.

You must provide Unicode objects to the API so that it does not have to
guess.  The errors you get are essentially the API telling you "I refuse to
guess."  It forces the programmer to tell the API what encoding the original
string had; the way you answer it is by decoding it yourself with the right
encoding argument into a Unicode object.

http://gedcom-parse.sourceforge.net/doc/encoding.html


C
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060909/6af8ad24/attachment.htm
From manlio_perillo at libero.it  Sun Sep 10 04:04:03 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sun Sep 10 04:01:24 2006
Subject: [Twisted-web] [Nevow] json serializer and strings
In-Reply-To: <c16a94ff0609091447v5eea0333lbab61d7bfd56d50e@mail.gmail.com>
References: <20060909202245.1717.1657744755.divmod.quotient.44197@ohm>	<450326D5.8010903@libero.it>
	<c16a94ff0609091447v5eea0333lbab61d7bfd56d50e@mail.gmail.com>
Message-ID: <4503D503.6050105@libero.it>

Cory Dodt ha scritto:
> 
> 
> On 9/9/06, *Manlio Perillo* <manlio_perillo@libero.it
> <mailto:manlio_perillo@libero.it>> wrote:
> 
> 
>     >> There are some problems with this:
>     >>
>     >>    elif isinstance(obj, str):
>     >>        w('"')
>     >>        w(stringEncode(obj.decode("us-ascii"))
>     >>        w('"')
>     >> ?
>     >
>     > Yes.  What if it is not an ASCII string?
> 
>     Raise an arror?
>     Is this really a problem?
> 
> 
> 
> Yes.  Yes it is.  Javascript strings are unicode.  Therefore the
> implementation must be able to convert the encoded string (byte
> representation) into Unicode when it arrives.
> 
> In order to convert the parameter to unicode, the API has to know what
> encoding the original string was; or it must have it in Unicode form
> already.  If the API accepts 8-bit str objects, then it must guess at
> the encoding to produce a unicode object.  It will guess wrong very
> often, which leads to bugs.  Therefore, it does not accept 8-bit str
> objects.
> 

I don't agree, but that's not a problem; I just can decode the keywords
dictionary by myself (or use another library).

However you say:
"it does not accept 8-bit str objects".

Well, all I can say is that by doing obj.decode("us-ascii") we are
accepting 7-bit str objects!

If you like:

try:
  obj.decode("us-ascii")
except UnicodeDecodeError:
  raise ValueError("8-bit strings not supported")


This implementation is just a little more friendly since str objects are
the default in CPython:

 >>> def foo(**kwargs):
 >>>  print type(kwargs.keys()[0])

 >>> foo(a=1)
 <type 'str'>



Regards  Manlio Perillo

From glyph at divmod.com  Tue Sep 12 20:21:16 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Tue Sep 12 20:21:17 2006
Subject: [Twisted-web] Web2: What is to be Done
In-Reply-To: 0
Message-ID: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>

Itamar and I have just created a few new tickets and the "Web2-Gold-Master" milestone for the ascension of web2 to the status of The Web Server For Twisted.  Obviously I'll also have to get in my car and cast the original twisted.web back into the volcano where I originally forged it, but I still visit my parents' house pretty regularly so I don't think that should be a problem.

Details are here:

    http://twistedmatrix.com/trac/ticket/2085

Please read this description, and create / mark any tickets with the appropriate milestone if you believe they are a requirement for this objective.  We may not agree, but we'd appreciate community involvement.

In particular, this is a favorite topic of discussion for pundits.  I have heard many times that our web server situation is why Twisted is not as popular as Linux, or Quake, or Ruby on Rails, or MVS, or BitchX, or whatever today's infrastructure flavor of the month is.  I've had to shrug and admit fault in the past, but now that there is a concrete list of tasks for you all to help out with, I sincerely hope that some of you will choose to do so.

From nico at tekNico.net  Wed Sep 13 03:09:21 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed Sep 13 03:09:21 2006
Subject: [Twisted-web] Please fix the wrapping! [was: Re: Web2: What is to
	be Done]
In-Reply-To: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
Message-ID: <4507BCB1.2090909@tekNico.net>

glyph@divmod.com wrote:
> In particular, this is a favorite topic of discussion for pundits.  I
> have heard many times that our web server situation is why Twisted is
> not as popular as Linux, or Quake, or Ruby on Rails, or MVS, or BitchX,
> or whatever today's infrastructure flavor of the month is.  I've had to
> shrug and admit fault in the past, but now that there is a concrete list
> of tasks for you all to help out with, I sincerely hope that some of you
> will choose to do so.

We surely will. In the meantime, I have an urgent request:

*Please fix the wrapping of your emails!*

Many messages in the archives of mailing lists around Twisted and Divmod
require constant horizontal scrolling, and that's very annoying. It's been
this way for *years*, it shouldn't be that difficult to fix Quotient, or
whatever is the cause of this.

Just to be clear, I read your emails perfectly, wrapped and all, via Gmane
and Thunderbird. The point are *the archives*. There's lots of valuable
stuff in there, but: you do a Google search, find a message, and then are
confronted with the pain of horizontal scrolling. There's a good chance
many people will turn away without ever reading them.

In many years of reading mailing lists and newsgroups, the
Quotient-originated emails are *the only ones* exhibiting this problem:
that's why I think it's you that should be fixing it.

Sorry for ranting, this has been getting on my nerves for too long. :-)


-- 
Nicola Larosa - http://www.tekNico.net/

Many software developers have become hostage to the development
frameworks that they utilise. In turn, many frameworks have made
session state a fundamental building block of web development
because it permits sloppy design. -- Alan Dean, April 2006



From exarkun at divmod.com  Wed Sep 13 08:11:05 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed Sep 13 08:11:07 2006
Subject: [Twisted-web] Please fix the wrapping! [was: Re: Web2: What is
	to be Done]
In-Reply-To: <4507BCB1.2090909@tekNico.net>
Message-ID: <20060913131105.1717.1608139576.divmod.quotient.47969@ohm>

On Wed, 13 Sep 2006 10:09:21 +0200, Nicola Larosa <nico@teknico.net> wrote:
>glyph@divmod.com wrote:
>> In particular, this is a favorite topic of discussion for pundits.  I
>> have heard many times that our web server situation is why Twisted is
>> not as popular as Linux, or Quake, or Ruby on Rails, or MVS, or BitchX,
>> or whatever today's infrastructure flavor of the month is.  I've had to
>> shrug and admit fault in the past, but now that there is a concrete list
>> of tasks for you all to help out with, I sincerely hope that some of you
>> will choose to do so.
>
>We surely will. In the meantime, I have an urgent request:
>
>*Please fix the wrapping of your emails!*

I think you accidentally sent this message to the twisted-web mailing list,
when you intended to send it to the mailman-dev mailing list.

Jean-Paul

From exarkun at divmod.com  Wed Sep 13 08:15:15 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed Sep 13 08:15:19 2006
Subject: [Twisted-web] Web2: What is to be Done
In-Reply-To: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
Message-ID: <20060913131515.1717.2143716872.divmod.quotient.47972@ohm>

On Tue, 12 Sep 2006 21:21:16 -0400, glyph@divmod.com wrote:
>Itamar and I have just created a few new tickets and the "Web2-Gold-Master" 
>milestone for the ascension of web2 to the status of The Web Server For 
>Twisted.  Obviously I'll also have to get in my car and cast the original 
>twisted.web back into the volcano where I originally forged it, but I still 
>visit my parents' house pretty regularly so I don't think that should be a 
>problem.
>
>Details are here:
>
>    http://twistedmatrix.com/trac/ticket/2085
>
>Please read this description, and create / mark any tickets with the 
>appropriate milestone if you believe they are a requirement for this 
>objective.  We may not agree, but we'd appreciate community involvement.
>
>In particular, this is a favorite topic of discussion for pundits.  I have 
>heard many times that our web server situation is why Twisted is not as 
>popular as Linux, or Quake, or Ruby on Rails, or MVS, or BitchX, or whatever 
>today's infrastructure flavor of the month is.  I've had to shrug and admit 
>fault in the past, but now that there is a concrete list of tasks for you 
>all to help out with, I sincerely hope that some of you will choose to do 
>so.
>

Lest anyone misunderstand, please take note:  This does *not* mean that
twisted.web is unmaintained, obsolete, or deprecated.  You do not need
to drop all of your code in favor of a BaseHTTPServer re-write.  Bugs in
twisted.web will continue to be fixed, and if twisted.web2 is ever finished
it will provide a compatible API layer so that it can run your existing
twisted.web-based applications.

Jean-Paul

From nico at tekNico.net  Wed Sep 13 12:07:31 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed Sep 13 12:07:28 2006
Subject: [Twisted-web] Re: Please fix the wrapping! [was: Re: Web2: What is
	to be Done]
In-Reply-To: <20060913131105.1717.1608139576.divmod.quotient.47969@ohm>
References: <4507BCB1.2090909@tekNico.net>
	<20060913131105.1717.1608139576.divmod.quotient.47969@ohm>
Message-ID: <45083AD3.1090202@tekNico.net>

> Nicola Larosa wrote:
>> *Please fix the wrapping of your emails!*

Jean-Paul Calderone wrote:
> I think you accidentally sent this message to the twisted-web mailing list,
> when you intended to send it to the mailman-dev mailing list.

I definitely did not intend anything of the sort. How did you get that
impression?

And why should have I done so? Most known email-generating programs wrap
the lines of message bodies, in keeping with RFC2822:

2.1.1. Line Length Limits

   There are two limits that this standard places on the number of
   characters in a line. Each line of characters MUST be no more than
   998 characters, and SHOULD be no more than 78 characters, excluding
   the CRLF.

Disregarding common practice is bad enough: disregarding the accessibility
of useful information about your own work is even worse. I have difficulty
understanding this stance; can you help me?


-- 
Nicola Larosa - http://www.tekNico.net/

I think the first I ever heard that user session state was "bad" was
from REST proponents, and that was fairly recently. As REST becomes
better and more widely understood, I believe people are starting
to think differently about how to architect a web application.
I certainly am. -- Bill Venners, April 2006



From exarkun at divmod.com  Wed Sep 13 12:19:16 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed Sep 13 12:19:19 2006
Subject: [Twisted-web] Re: Please fix the wrapping! [was: Re: Web2: What
	is to be Done]
In-Reply-To: <45083AD3.1090202@tekNico.net>
Message-ID: <20060913171916.1717.1753588404.divmod.quotient.48150@ohm>

On Wed, 13 Sep 2006 19:07:31 +0200, Nicola Larosa <nico@teknico.net> wrote:
>> Nicola Larosa wrote:
>>> *Please fix the wrapping of your emails!*
>
>Jean-Paul Calderone wrote:
>> I think you accidentally sent this message to the twisted-web mailing list,
>> when you intended to send it to the mailman-dev mailing list.
>
>I definitely did not intend anything of the sort. How did you get that
>impression?
>
>And why should have I done so? Most known email-generating programs wrap
>the lines of message bodies, in keeping with RFC2822:
>
>2.1.1. Line Length Limits
>
>   There are two limits that this standard places on the number of
>   characters in a line. Each line of characters MUST be no more than
>   998 characters, and SHOULD be no more than 78 characters, excluding
>   the CRLF.
>
>Disregarding common practice is bad enough: disregarding the accessibility
>of useful information about your own work is even worse. I have difficulty
>understanding this stance; can you help me?
>

I don't have time to deal with the line-wrapping issues in pipermail.  I
can confidently say that neither does Glyph.  If you'd like to do something
about this, feel free - I'm not opposed to a solution, I'm just not going
to provide one.

Jean-Paul

From nico at tekNico.net  Wed Sep 13 12:33:59 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed Sep 13 12:33:55 2006
Subject: [Twisted-web] Re: Web2: What is to be Done
In-Reply-To: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
Message-ID: <45084107.7000803@tekNico.net>

glyph@divmod.com wrote:
> Itamar and I have just created a few new tickets and the 
> "Web2-Gold-Master" milestone for the ascension of web2 to the status of 
> The Web Server For Twisted.
> ...
> In particular, this is a favorite topic of discussion for pundits.  I 
> have heard many times that our web server situation is why Twisted is 
> not as popular as Linux, or Quake, or Ruby on Rails, or MVS, or BitchX, 
> or whatever today's infrastructure flavor of the month is.

Linux? Quake? MVS? BitchX? I thought this was about web. ;-)

The web server is just a part, the matter is usually about web
*frameworks*; if you want to compare something to RoR and others, that
should be Nevow, not twisted.web2 .

twisted.web(2) is a great web server that works well (albeit in a threaded
environment) with most Python web frameworks, being complementary to them.

I think the main reason Twisted is not popular as other Python web
technologies is its event-based structure. As soon as one tries to
interface other libraries with Twisted, one either uses threads, or wraps
the library's API with Deferreds.

The first solution is suboptimal for Twisted; the second is incompatible
with already existing code that uses that library. This makes Twisted
basically incompatible with all the code not written for it, if one wants
to fully embrace its concurrency model.

This kind of mismatch does not seem something that can be "fixed". I would
however be very glad to be corrected, on this point. :-)


-- 
Nicola Larosa - http://www.tekNico.net/

I think the first I ever heard that user session state was "bad" was
from REST proponents, and that was fairly recently. As REST becomes
better and more widely understood, I believe people are starting
to think differently about how to architect a web application.
I certainly am. -- Bill Venners, April 2006



From nico at tekNico.net  Wed Sep 13 12:41:20 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed Sep 13 12:41:21 2006
Subject: [Twisted-web] Re: Please fix the wrapping! [was: Re: Web2: What is
	to be Done]
In-Reply-To: <20060913171916.1717.1753588404.divmod.quotient.48150@ohm>
References: <45083AD3.1090202@tekNico.net>
	<20060913171916.1717.1753588404.divmod.quotient.48150@ohm>
Message-ID: <450842C0.8080000@tekNico.net>

> I don't have time to deal with the line-wrapping issues in pipermail.

It's not Pipermail, it's Quotient. Enough.


From slamb at slamb.org  Wed Sep 13 13:00:43 2006
From: slamb at slamb.org (Scott Lamb)
Date: Wed Sep 13 13:00:49 2006
Subject: [Twisted-web] web2.client pipelining (was: Web2: What is to be Done)
In-Reply-To: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
Message-ID: <7E06C3D3-4C0A-42BD-A6EA-8CFEE0F6A3F9@slamb.org>

I hadn't noticed until now that y'all have added a  
twisted.web2.client to trunk. (Copied from a web2-client4 branch; I  
guess the previous castle burned down, fell over, and then sank into  
the swamp. ;)

How does the pipelining work? I ask because I've grown quite picky  
about the closing states of HTTP. I'm almost certainly preaching to  
the choir, but I'll quote RFC 2616 section 8.1.2.2:

     Clients which assume persistent connections and pipeline  
immediately
     after connection establishment SHOULD be prepared to retry their
     connection if the first pipelined attempt fails. If a client does
     such a retry, it MUST NOT pipeline before it knows the  
connection is
     persistent. Clients MUST also be prepared to resend their  
requests if
     the server closes the connection before sending all of the
     corresponding responses.

and...umm, I can't find the RFCs, but some combination says that:

(A) the kernel's TCP stack should immediately dump all its buffers  
and abort on a RST, so effectively the application gets a ECONNRESET  
sent back from the future
(B) the sequence the HTTP server takes when receiving a request after  
a FIN causes a RST to be sent

So when using pipelining, the client must be prepared for this case:

    1. send request A
    2. send request B
    3. receive an ECONNRESET...and not even know if the webserver  
received or handled request A, much less what the response might have  
been

For non-idempotent HTTP requests (a lot of SOAP calls), that  
ambiguity is not acceptable, so I need a way to toggle pipelining.  
Looks like that's this?

     p = HTTPClientProtocol()
     p.readPersistent = PERSIST_(NO_)?PIPELINE

Second, if it is using pipelining, it has to do the retry. That part  
I don't see. Is the caller expected to do it? twisted/web2/client/ 
http.py has this:

     def connectionLost(self, reason):
         self.readPersistent = False
         self.setTimeout(None)
         self.manager.clientGone(self)
         # Tell all requests to abort.
         for request in self.inRequests:
             if request is not None:
                 request.connectionLost(reason)

Warm regards,
Scott

-- 
Scott Lamb <http://www.slamb.org/>



From ppergame at gmail.com  Wed Sep 13 14:12:23 2006
From: ppergame at gmail.com (Pavel Pergamenshchik)
Date: Wed Sep 13 14:12:27 2006
Subject: [Twisted-web] Please fix the wrapping! [was: Re: Web2: What is to
	be Done]
In-Reply-To: <4507BCB1.2090909@tekNico.net>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
	<4507BCB1.2090909@tekNico.net>
Message-ID: <4a5c1b500609131212j5e4a452t7d90b9a0801bbda9@mail.gmail.com>

On 9/13/06, Nicola Larosa <nico@teknico.net> wrote:
>
> We surely will. In the meantime, I have an urgent request:
>
> *Please fix the wrapping of your emails!*
>
> Many messages in the archives of mailing lists around Twisted and Divmod
> require constant horizontal scrolling, and that's very annoying. It's been
> this way for *years*, it shouldn't be that difficult to fix Quotient, or
> whatever is the cause of this.
>
> Just to be clear, I read your emails perfectly, wrapped and all, via Gmane
> and Thunderbird. The point are *the archives*. There's lots of valuable
> stuff in there, but: you do a Google search, find a message, and then are
> confronted with the pain of horizontal scrolling. There's a good chance
> many people will turn away without ever reading them.


Perhaps your browser might be capable of wrapping the text for you? Opera
can do it (press ctrl-F11) and there is a bookmarklet to do it in Firefox as
well.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060913/e7bfccbe/attachment.htm
From mike at mkp.ca  Thu Sep 14 09:12:50 2006
From: mike at mkp.ca (Mike Pelletier)
Date: Thu Sep 14 09:50:25 2006
Subject: [Twisted-web] Please fix the wrapping! [was: Re: Web2: What is to
	be Done]
In-Reply-To: <20060913131105.1717.1608139576.divmod.quotient.47969@ohm>
References: <20060913131105.1717.1608139576.divmod.quotient.47969@ohm>
Message-ID: <200609141012.53132.mike@mkp.ca>

On Wednesday 13 September 2006 09:11, Jean-Paul Calderone wrote:
> I think you accidentally sent this message to the twisted-web mailing list,
> when you intended to send it to the mailman-dev mailing list.

79 columns; it's not the law, just a really good idea.

Mike.

From foom at fuhm.net  Thu Sep 14 13:36:26 2006
From: foom at fuhm.net (James Y Knight)
Date: Thu Sep 14 13:36:28 2006
Subject: [Twisted-web] web2.client pipelining (was: Web2: What is to be
	Done)
In-Reply-To: <7E06C3D3-4C0A-42BD-A6EA-8CFEE0F6A3F9@slamb.org>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
	<7E06C3D3-4C0A-42BD-A6EA-8CFEE0F6A3F9@slamb.org>
Message-ID: <3FBA13C0-0A78-43E2-8B61-AE1232832D64@fuhm.net>

On Sep 13, 2006, at 2:00 PM, Scott Lamb wrote:
> I hadn't noticed until now that y'all have added a  
> twisted.web2.client to trunk. (Copied from a web2-client4 branch; I  
> guess the previous castle burned down, fell over, and then sank  
> into the swamp. ;)
>
> <pipelining/retry/etc>

The client that's in there right now is a low-level http client. The  
higher level web client (the connection manager, queuing, pooling,  
etc.) is not completed. That is where the retry logic and the  
determination of which requests can be pipelined and which cannot  
would go. Please note that even *keepalive* can only be (reliably)  
used for idempotent actions. For example, client sends request A,  
gets response A, sends request B, but at the same time, server closes  
the connection from a timeout condition.

The twisted.web2.client.HTTPClientProtocol.submitRequest has a  
keyword arg "closeAfter", which defaults to True. Thus, without you  
doing anything to change it, there is no keepalive and no pipelining.  
Each connection will only be usable for one request. Pipelining and  
keepalive features should really only be enabled when a request is  
submitted by a client manager which is able to handle the appropriate  
failure retry conditions.

James


From slamb at slamb.org  Thu Sep 14 14:25:01 2006
From: slamb at slamb.org (Scott Lamb)
Date: Thu Sep 14 14:25:07 2006
Subject: [Twisted-web] web2.client pipelining (was: Web2: What is to be
	Done)
In-Reply-To: <3FBA13C0-0A78-43E2-8B61-AE1232832D64@fuhm.net>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
	<7E06C3D3-4C0A-42BD-A6EA-8CFEE0F6A3F9@slamb.org>
	<3FBA13C0-0A78-43E2-8B61-AE1232832D64@fuhm.net>
Message-ID: <758E7BEE-94C2-42CA-8892-BAB757647656@slamb.org>

On Sep 14, 2006, at 11:36 AM, James Y Knight wrote:
> The client that's in there right now is a low-level http client.  
> The higher level web client (the connection manager, queuing,  
> pooling, etc.) is not completed. That is where the retry logic and  
> the determination of which requests can be pipelined and which  
> cannot would go.

Okay, cool. So is twisted.web.client (and its dependencies) not going  
to be included in this deprecation, or is there going to be a  
temporary regression in functionality? I have no strong opinion; an  
HTTP/1.0 client wasn't that useful to me to begin with.

> Please note that even *keepalive* can only be (reliably) used for  
> idempotent actions. For example, client sends request A, gets  
> response A, sends request B, but at the same time, server closes  
> the connection from a timeout condition.

Ugh, you're right. Looking over RFC 2616 section 8.1.4, they say the  
same thing you do:

    "Non-idempotent methods or sequences
    MUST NOT be automatically retried, although user agents MAY offer a
    human operator the choice of retrying the request(s)."

It does seem like this problem could have been avoided by the server  
(after gracefully closing) simply reading and discarding that request  
- the client would get the FIN and no RST. There's no circumstance in  
which a server handles a request and then cleanly closes the  
connection without a response, so it would know the server did not  
handle request B. It would have to retry, but it could do so safely  
even for non-idempotent requests. I wonder why they didn't do  
that...bandwidth?

This could be a practical problem for me. I'm stuck using a protocol  
created by a wannabe standards body that has mandated (1) a non- 
idempotent sequence and (2) the client never closing the connection.  
(And no, this is not the first time they've contradicted an  
underlying standard...)

-- 
Scott Lamb <http://www.slamb.org/>



From slamb at slamb.org  Thu Sep 14 14:33:10 2006
From: slamb at slamb.org (Scott Lamb)
Date: Thu Sep 14 14:33:14 2006
Subject: [Twisted-web] web2.client pipelining (was: Web2: What is to be
	Done)
In-Reply-To: <3FBA13C0-0A78-43E2-8B61-AE1232832D64@fuhm.net>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
	<7E06C3D3-4C0A-42BD-A6EA-8CFEE0F6A3F9@slamb.org>
	<3FBA13C0-0A78-43E2-8B61-AE1232832D64@fuhm.net>
Message-ID: <09CDFECA-33FD-4256-804D-00612FADA9FA@slamb.org>

On Sep 14, 2006, at 11:36 AM, James Y Knight wrote:
> The twisted.web2.client.HTTPClientProtocol.submitRequest has a  
> keyword arg "closeAfter", which defaults to True. Thus, without you  
> doing anything to change it, there is no keepalive and no  
> pipelining. Each connection will only be usable for one request.  
> Pipelining and keepalive features should really only be enabled  
> when a request is submitted by a client manager which is able to  
> handle the appropriate failure retry conditions.

Maybe this could be replaced with "idempotent" with an appropriate  
docstring? It'd accomplish the same thing, but it would then be  
obvious to people who haven't read a pile of RFCs under what  
circumstances they need it set in a particular way. With a  
"closeAfter" argument, it's tempting to say "of course I want  
closeAfter=False; I'm sending more stuff and one connection is  
faster" without realizing the consequences. If idempotency is what  
decides the behavior, then that's what the client should tell you.

-- 
Scott Lamb <http://www.slamb.org/>



From foom at fuhm.net  Thu Sep 14 15:26:59 2006
From: foom at fuhm.net (James Y Knight)
Date: Thu Sep 14 15:27:07 2006
Subject: [Twisted-web] web2.client pipelining (was: Web2: What is to be
	Done)
In-Reply-To: <09CDFECA-33FD-4256-804D-00612FADA9FA@slamb.org>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
	<7E06C3D3-4C0A-42BD-A6EA-8CFEE0F6A3F9@slamb.org>
	<3FBA13C0-0A78-43E2-8B61-AE1232832D64@fuhm.net>
	<09CDFECA-33FD-4256-804D-00612FADA9FA@slamb.org>
Message-ID: <B9CBF335-0855-45EB-8DCC-972D098ED628@fuhm.net>

On Sep 14, 2006, at 3:33 PM, Scott Lamb wrote:
> Maybe this could be replaced with "idempotent" with an appropriate  
> docstring? It'd accomplish the same thing, but it would then be  
> obvious to people who haven't read a pile of RFCs under what  
> circumstances they need it set in a particular way. With a  
> "closeAfter" argument, it's tempting to say "of course I want  
> closeAfter=False; I'm sending more stuff and one connection is  
> faster" without realizing the consequences. If idempotency is what  
> decides the behavior, then that's what the client should tell you.

This is the low level http API. In the nonexistent high level client  
API, the user would not concern themselves with this: the connection  
pool manager would default to reusing connections when it's safe to  
do so, and not reusing connections when it's not safe. If you're  
using the low level API directly, you should never set it to False,  
regardless of whether your request is idempotent, unless you really  
know what you're doing (ie: you're basically writing a connection  
manager).

James

From foom at fuhm.net  Thu Sep 14 17:03:57 2006
From: foom at fuhm.net (James Y Knight)
Date: Thu Sep 14 17:04:42 2006
Subject: [Twisted-web] web2.client pipelining (was: Web2: What is to be
	Done)
In-Reply-To: <758E7BEE-94C2-42CA-8892-BAB757647656@slamb.org>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
	<7E06C3D3-4C0A-42BD-A6EA-8CFEE0F6A3F9@slamb.org>
	<3FBA13C0-0A78-43E2-8B61-AE1232832D64@fuhm.net>
	<758E7BEE-94C2-42CA-8892-BAB757647656@slamb.org>
Message-ID: <B7D21F89-0FD5-4236-813B-F1B096BF377A@fuhm.net>

On Sep 14, 2006, at 3:25 PM, Scott Lamb wrote:
> Okay, cool. So is twisted.web.client (and its dependencies) not  
> going to be included in this deprecation, or is there going to be a  
> temporary regression in functionality? I have no strong opinion; an  
> HTTP/1.0 client wasn't that useful to me to begin with.

twisted.web isn't deprecated, and won't be until web2 is an adequate  
replacement.

> This could be a practical problem for me. I'm stuck using a  
> protocol created by a wannabe standards body that has mandated (1)  
> a non-idempotent sequence and (2) the client never closing the  
> connection. (And no, this is not the first time they've  
> contradicted an underlying standard...)

Can you assume the server doesn't close the connection on you except  
on errors? If so, that should be okay.

I don't know which protocol you're talking about, but others like  
this I've seen which assign significance to a long-lived HTTP  
connection have also had the property that the connection doesn't get  
closed out from under the client after approx 30s of inactivity, like  
a normal HTTP server would.


James


From slamb at slamb.org  Thu Sep 14 17:36:27 2006
From: slamb at slamb.org (Scott Lamb)
Date: Thu Sep 14 17:36:34 2006
Subject: [Twisted-web] web2.client pipelining (was: Web2: What is to be
	Done)
In-Reply-To: <B7D21F89-0FD5-4236-813B-F1B096BF377A@fuhm.net>
References: <20060913012116.1717.1185141528.divmod.quotient.47545@ohm>
	<7E06C3D3-4C0A-42BD-A6EA-8CFEE0F6A3F9@slamb.org>
	<3FBA13C0-0A78-43E2-8B61-AE1232832D64@fuhm.net>
	<758E7BEE-94C2-42CA-8892-BAB757647656@slamb.org>
	<B7D21F89-0FD5-4236-813B-F1B096BF377A@fuhm.net>
Message-ID: <B09AD37C-0DB3-4BD6-868A-6027A5BFC613@slamb.org>

On Sep 14, 2006, at 3:03 PM, James Y Knight wrote:
> On Sep 14, 2006, at 3:25 PM, Scott Lamb wrote:
>> Okay, cool. So is twisted.web.client (and its dependencies) not  
>> going to be included in this deprecation, or is there going to be  
>> a temporary regression in functionality? I have no strong opinion;  
>> an HTTP/1.0 client wasn't that useful to me to begin with.
>
> twisted.web isn't deprecated, and won't be until web2 is an  
> adequate replacement.

I thought the desire to deprecate it is what started this thread? I  
don't see any mention of web2.client in http://twistedmatrix.com/trac/ 
ticket/2085 or http://twistedmatrix.com/trac/query? 
status=new&status=assigned&status=reopened&milestone=Web2-Gold-Master.

>> This could be a practical problem for me. I'm stuck using a  
>> protocol created by a wannabe standards body that has mandated (1)  
>> a non-idempotent sequence and (2) the client never closing the  
>> connection. (And no, this is not the first time they've  
>> contradicted an underlying standard...)
>
> Can you assume the server doesn't close the connection on you  
> except on errors? If so, that should be okay.

No, I believe in the last version it was only the client that can't  
close it, and not a word about timeouts.

> I don't know which protocol you're talking about, but others like  
> this I've seen which assign significance to a long-lived HTTP  
> connection have also had the property that the connection doesn't  
> get closed out from under the client after approx 30s of  
> inactivity, like a normal HTTP server would.

Most server implementations are using J2EE code on off-the-shelf  
webservers. I don't think they've touched the timeout settings at all...

If you like staring at train wrecks, you'll love CWMP. Here's the  
original standard:

http://www.dslforum.org/techwork/tr/TR-069.pdf

I think the latest version isn't public yet.

-- 
Scott Lamb <http://www.slamb.org/>



From exarkun at divmod.com  Thu Sep 14 19:32:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu Sep 14 19:32:52 2006
Subject: [Twisted-web] web2.client pipelining (was: Web2: What is to be
	Done)
In-Reply-To: <B09AD37C-0DB3-4BD6-868A-6027A5BFC613@slamb.org>
Message-ID: <20060915003250.1717.308633562.divmod.quotient.49400@ohm>

On Thu, 14 Sep 2006 15:36:27 -0700, Scott Lamb <slamb@slamb.org> wrote:
>On Sep 14, 2006, at 3:03 PM, James Y Knight wrote:
>>On Sep 14, 2006, at 3:25 PM, Scott Lamb wrote:
>>>Okay, cool. So is twisted.web.client (and its dependencies) not  going to 
>>>be included in this deprecation, or is there going to be  a temporary 
>>>regression in functionality? I have no strong opinion;  an HTTP/1.0 client 
>>>wasn't that useful to me to begin with.
>>
>>twisted.web isn't deprecated, and won't be until web2 is an  adequate 
>>replacement.
>
>I thought the desire to deprecate it is what started this thread?

Note, however, that this isn't a contradiction of James' statement.  See
my post earlier in this thread.

Jean-Paul

From markus at bluegap.ch  Thu Sep 21 11:08:16 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Thu Sep 21 11:08:23 2006
Subject: [Twisted-web] fragments with child lookup
Message-ID: <4512B8F0.6010208@bluegap.ch>

Hi,

I would like to use the child lookup mechanism (locateChild or 
childFactory) but then again, I want Fragments. I'm sure there is a 
proper way to do what I want. Let my try to explain with a URL mapping 
to templates mapping:

/           ->     common.xml
/foo        ->     common.xml / foo.xml
/bar        ->     common.xml / bar.xml
/bar/baz    ->     common.xml / bar.xml / baz.xml

common.xml as well as bar.xml both have a 'sub-content' renderer, which 
calls the next template. Of course this all happens dynamically.

I've tried two things:

a) make locateChild always return self, () and save which child it 
contains (and which it has to return as it's 'sub-content'. 
Unfortunately that stops the children lookup and I would have to invoke 
it locateChild of the child with segments[1:] myself. That seems ugly.

b) make locateChild return the real Child. That seems the right thing to 
do. But then I only get the latest child's template (i.e. baz.xml when 
calling the URL '/bar/baz' in the example above). How do I make that 
latest child render it's parents first?

Regards

Markus

From markus at bluegap.ch  Thu Sep 21 11:30:36 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Thu Sep 21 11:30:41 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4512B8F0.6010208@bluegap.ch>
References: <4512B8F0.6010208@bluegap.ch>
Message-ID: <4512BE2C.5040600@bluegap.ch>

Hi,

sorry, I forgot to mention: I'm using twisted 2.4.0 / nevow 0.9 (or svn 
trunk, not sure).

Regards

Markus

Markus Schiltknecht wrote:
> Hi,
> 
> I would like to use the child lookup mechanism (locateChild or 
> childFactory) but then again, I want Fragments. I'm sure there is a 
> proper way to do what I want. Let my try to explain with a URL mapping 
> to templates mapping:
> 
> /           ->     common.xml
> /foo        ->     common.xml / foo.xml
> /bar        ->     common.xml / bar.xml
> /bar/baz    ->     common.xml / bar.xml / baz.xml
> 
> common.xml as well as bar.xml both have a 'sub-content' renderer, which 
> calls the next template. Of course this all happens dynamically.
> 
> I've tried two things:
> 
> a) make locateChild always return self, () and save which child it 
> contains (and which it has to return as it's 'sub-content'. 
> Unfortunately that stops the children lookup and I would have to invoke 
> it locateChild of the child with segments[1:] myself. That seems ugly.
> 
> b) make locateChild return the real Child. That seems the right thing to 
> do. But then I only get the latest child's template (i.e. baz.xml when 
> calling the URL '/bar/baz' in the example above). How do I make that 
> latest child render it's parents first?
> 
> Regards
> 
> Markus
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From markus at bluegap.ch  Fri Sep 22 02:32:47 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Fri Sep 22 02:32:55 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4512BE2C.5040600@bluegap.ch>
References: <4512B8F0.6010208@bluegap.ch> <4512BE2C.5040600@bluegap.ch>
Message-ID: <4513919F.3000202@bluegap.ch>

Hi,

I've now solved my problem, sort of. I'm still wondering, if there is a 
more elegant solution, probably integrated into nevow. Since, IMHO, this 
is one of the use-cases of a template system.

I did more or less the following (simplified, naming could be improved, 
too):


class Container(rend.Page):
	addSlash = True

	def __init__(self, source):
		self.source = source
		self.docFactory = self.source.getFactory();

	def locateChild(self, ctx, segments):
		""" Loads sub-pages (fragments?) for all the remaining
		    segments. It does its own lookup with the
		    childFragmentLookup() method.
		    All children are then added to the slot 'children'
		    in reversed ordering, so I can simply pop()
		"""
		children = []

		child = self
		while len(segments) > 0:
			if segments[0] != '':
				child = child.childFragmentFactory(segments[0])
				if child is None:
					return appserver.NotFound

				children.append(child)

			segments = segments[1:]

		children.reverse()
		ctx.fillSlots('children', children)
		curr_counter = len(children)
		return self, ()

	def childFragmentFactory(self, name):
		""" Tries to create a child for a given name. May return
		    None! (This should probably better raise an
		    exception, no?)
		"""
		child_source = self.source.getChild(name)
		if child_source is not None:
			return Container(child_source)

	def render_content(self, ctx, data):
		""" every fragment may have a 'content' renderer, where
		    it's child fragment should be included. This looks
		    up the next child and returns it for rendering.
		"""
		children = ctx.locateSlotData('children')
		if len(children) > 0:
			child = children.pop()
			curr_counter = len(children)
			return child
		else:
			raise Exception("content renderer called too many times!")



The children have to be stored in the context. I've also tried returning 
  the child in the Container.locateChild() method, and then hook the 
renderHTTP() method to render the parents first. But I've had no luck 
with fetching the parents from the context (and it's parent contexts). I 
would prefer that, because I wouldn't have to write my own childLookup() 
method.

Thoughts? Comments?

Regards

Markus

From manlio_perillo at libero.it  Fri Sep 22 04:23:07 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Sep 22 04:20:20 2006
Subject: [Twisted-web] problems with Trac
Message-ID: <4513AB7B.1040009@libero.it>

Maybe I should report this to the web site maintainer...

There is a problem with Trac on http://twistedmatrix.com/trac

Traceback (most recent call last):
  File "/home/trac/Projects/trac/trunk/trac/web/main.py", line 356, in
dispatch_request
    dispatcher.dispatch(req)
  File "/home/trac/Projects/trac/trunk/trac/web/main.py", line 190, in
dispatch
    req.perm = PermissionCache(self.env, req.authname)
  File "/home/trac/Projects/trac/trunk/trac/perm.py", line 267, in __init__
    self.perms = PermissionSystem(env).get_user_permissions(username)
  File "/home/trac/Projects/trac/trunk/trac/perm.py", line 231, in
get_user_permissions
    for perm in self.store.get_user_permissions(username):
  File "/home/trac/Projects/trac/trunk/trac/perm.py", line 111, in
get_user_permissions
    cursor.execute("SELECT username,action FROM permission")
  File "/home/trac/Projects/trac/trunk/trac/db/util.py", line 48, in execute
    return self.cursor.execute(sql)
  File "/home/trac/Projects/trac/trunk/trac/db/sqlite_backend.py", line
56, in execute
    args or [])
  File "/home/trac/Projects/trac/trunk/trac/db/sqlite_backend.py", line
48, in _rollback_on_error
    return function(self, *args, **kwargs)
OperationalError: database is locked




Regards  Manlio Perillo


From dialtone at divmod.com  Fri Sep 22 07:36:28 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri Sep 22 07:36:30 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4513919F.3000202@bluegap.ch>
Message-ID: <20060922123628.1717.740167549.divmod.quotient.56704@ohm>

On Fri, 22 Sep 2006 09:32:47 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:

>The children have to be stored in the context. I've also tried returning 
>the child in the Container.locateChild() method, and then hook the 
>renderHTTP() method to render the parents first. But I've had no luck with 
>fetching the parents from the context (and it's parent contexts). I would 
>prefer that, because I wouldn't have to write my own childLookup() method.
>
>Thoughts? Comments?

To be honest I've tried reading your first email many times and in different days but I've not understood the actual usecase.

Other than that what *IS* a child of a fragment conceptually? A Fragment is a Fragment, a reusable element of a page.

Another issue is that it uses the context, we are moving away from it and it's highly likely that no new patches/features are accepted if they still use or rely completely on the context.

From exarkun at divmod.com  Fri Sep 22 08:06:42 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri Sep 22 08:06:46 2006
Subject: [Twisted-web] problems with Trac
In-Reply-To: <4513AB7B.1040009@libero.it>
Message-ID: <20060922130642.1717.2071479176.divmod.quotient.56729@ohm>

On Fri, 22 Sep 2006 11:23:07 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>Maybe I should report this to the web site maintainer...
>
>There is a problem with Trac on http://twistedmatrix.com/trac
>
>Traceback (most recent call last):
>  File "/home/trac/Projects/trac/trunk/trac/web/main.py", line 356, in
>dispatch_request
>    dispatcher.dispatch(req)
>  File "/home/trac/Projects/trac/trunk/trac/web/main.py", line 190, in
>dispatch
>    req.perm = PermissionCache(self.env, req.authname)
>  File "/home/trac/Projects/trac/trunk/trac/perm.py", line 267, in __init__
>    self.perms = PermissionSystem(env).get_user_permissions(username)
>  File "/home/trac/Projects/trac/trunk/trac/perm.py", line 231, in
>get_user_permissions
>    for perm in self.store.get_user_permissions(username):
>  File "/home/trac/Projects/trac/trunk/trac/perm.py", line 111, in
>get_user_permissions
>    cursor.execute("SELECT username,action FROM permission")
>  File "/home/trac/Projects/trac/trunk/trac/db/util.py", line 48, in execute
>    return self.cursor.execute(sql)
>  File "/home/trac/Projects/trac/trunk/trac/db/sqlite_backend.py", line
>56, in execute
>    args or [])
>  File "/home/trac/Projects/trac/trunk/trac/db/sqlite_backend.py", line
>48, in _rollback_on_error
>    return function(self, *args, **kwargs)
>OperationalError: database is locked
>

Consider reporting it to the trac developers.  They write the stuff, we
just run it.

Jean-Paul

From markus at bluegap.ch  Fri Sep 22 08:27:38 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Fri Sep 22 08:27:47 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060922123628.1717.740167549.divmod.quotient.56704@ohm>
References: <20060922123628.1717.740167549.divmod.quotient.56704@ohm>
Message-ID: <4513E4CA.7050404@bluegap.ch>

Hi,

Valentino Volonghi aka Dialtone wrote:
> To be honest I've tried reading your first email many times and in 
> different days but I've not understood the actual usecase.

Thank you for trying! I'm not a native English speaker, thus sometimes 
I'm not very good at explaining.

> Other than that what *IS* a child of a fragment conceptually? A Fragment 
> is a Fragment, a reusable element of a page.

Right. I try in nevow terms: I want to write a Page, which dynamically 
displays different Fragments depending on the URL. I wanted to use all 
the 'locateChild()' mechanism for that, but this seems not possible.

Since Pages are derived from Fragments, I didn't think about using 
Fragments in the first place at all. (Of course, I'm 'using' Fragments, 
but hidden from me through the Page class, which inherits from Fragments).

As you can see in my example, I've written my own 
'locateFragmentChild()' method which does exactly what I'm describing above.

The use case is very simple and (IMHO) common: I have a top top level 
template containing all the HTML headers and some common design 
elements. Plus the top level navigation. Depending on the URL, different 
other templates should be inserted (Fragments?). If you know Mason 
(perl) or Myghty (python), I want to migrate from there. They have a 
structure like that:

autohandler			# the default template which gets
                                 # rendered for every request

dhandler                        # a default handler, called if no child
                                 # is given in the URL, i.e.:
                                 # www.mysite.com/

foo.html                        # a normal site available at:
                                 # www.mysite.com/foo.html
                                 # it gets rendered as 'child' of the
                                 # toplevel autohandler, thus it
                                 # inherits it's methods and template.

foo/autohandler			# the template for subdir 'foo' on:
                                 # www.mysite.com/foo/*

foo/bar.html                    # a site in the subdirectory
                                 # www.mysite.com/foo/bar.html
                                 # For this, the toplevel autohandler is
                                 # rendered first, then foo/autohandler
                                 # and then foo/bar.html

This is very usefull when writing 'hierarchical' sites, i.e. where you 
can navigate in a tree. What's the best way to do that in nevow?

> Another issue is that it uses the context, we are moving away from it 
> and it's highly likely that no new patches/features are accepted if they 
> still use or rely completely on the context.

Hm. I don't know if that matters to me.

Something else I'm very thankful about are the 'preprocessors'. It seems 
they have (more or less) recently been added. Any chance I can pass them 
arguments? Currently I simply insert a renderer in my preprocessor, but 
I'm not sure if I can do everything with just inserting renderers (but 
probably I can, I'll see).

Thank you.

Markus

From dialtone at divmod.com  Fri Sep 22 09:20:46 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri Sep 22 09:20:48 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4513E4CA.7050404@bluegap.ch>
Message-ID: <20060922142046.1717.1954789151.divmod.quotient.56787@ohm>

On Fri, 22 Sep 2006 15:27:38 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:
>Right. I try in nevow terms: I want to write a Page, which dynamically 
>displays different Fragments depending on the URL. I wanted to use all the 
>'locateChild()' mechanism for that, but this seems not possible.

Ok but this should be accomplished in a different way IMHO. You should have a Fragments container somewhere and lookup stuff in there. It doesn't make too much sense to have fragment children IMHO.

>Since Pages are derived from Fragments, I didn't think about using Fragments 
>in the first place at all. (Of course, I'm 'using' Fragments, but hidden 
>from me through the Page class, which inherits from Fragments).

Well... Pages can be used in place of the Fragments but they will be considered as Fragments with no extra functionality (even if the code is there) thus it's better to stick with Fragments entirely for this usecase.

>As you can see in my example, I've written my own 'locateFragmentChild()' 
>method which does exactly what I'm describing above.

Well but you just need to lookup stuff here and there, if you need to include  different fragments in a particular fragment then I guess this locateFragmentChild is sort of useful although the name is not the best I can think of, simply locateFragment should be enough (but as I can see there's really no fixed hiararchy of Fragments and you shouldn't use the same mechanism used in locateChild, I'd rather go with a dictionary containing all of them because in the end that's what you are actually doing, including a fragment depending on the url segment).

>The use case is very simple and (IMHO) common: I have a top top level 
>template containing all the HTML headers and some common design elements. 
>Plus the top level navigation. Depending on the URL, different other 
>templates should be inserted (Fragments?). If you know Mason (perl) or 
>Myghty (python), I want to migrate from there. They have a structure like 
>that:

I have never used Myghty nor Mason but I do what you are describing everytime. I use macros and Page objects with a small function that looks up the template that should be included in the macro from an attribute value of the current Page instance.

http://hg.stiq.it/stiq for some more code.

>autohandler                     # the default template which gets
>                                 # rendered for every request
>
>dhandler                        # a default handler, called if no child
>                                 # is given in the URL, i.e.:
>                                 # www.mysite.com/
>
>foo.html                        # a normal site available at:
>                                 # www.mysite.com/foo.html
>                                 # it gets rendered as 'child' of the
>                                 # toplevel autohandler, thus it
>                                 # inherits it's methods and template.
>
>foo/autohandler                 # the template for subdir 'foo' on:
>                                 # www.mysite.com/foo/*
>
>foo/bar.html                    # a site in the subdirectory
>                                 # www.mysite.com/foo/bar.html
>                                 # For this, the toplevel autohandler is
>                                 # rendered first, then foo/autohandler
>                                 # and then foo/bar.html

I don't see a connection between this and the fragments though.

>This is very usefull when writing 'hierarchical' sites, i.e. where you can 
>navigate in a tree. What's the best way to do that in nevow?

There are many different ways of doing it depending on the exact usecase.

>Something else I'm very thankful about are the 'preprocessors'. It seems 
>they have (more or less) recently been added. Any chance I can pass them 
>arguments? Currently I simply insert a renderer in my preprocessor, but I'm 
>not sure if I can do everything with just inserting renderers (but probably 
>I can, I'll see).

Yes, they are a recent addition for a usecase in Quotient. You can pass arguments by using closures of course. But inserting renderers is a strage usecase, I've never needed it and pre-processors were added to change urls on the fly (I think for caching purposes) when loading templates, not for changing templates in that hard way. You might find some problems in doing that, but I've never tried.

From sylvain.thenault at logilab.fr  Wed Sep 13 10:28:04 2006
From: sylvain.thenault at logilab.fr (Sylvain =?iso-8859-1?Q?Th=E9nault?=)
Date: Fri Sep 22 09:35:34 2006
Subject: [Twisted-web] twisted.web2 and blank values in POST
Message-ID: <20060913152804.GB25735@crater.logilab.fr>

Hi there,

I've found a strange behaviour in twisted web2'server : the behaviour with blank values
in form parameters is not consistent between GET and POST: on GET blank values are kept while 
this is not the case on POST. I'ld have expected blank values to be kept on POST as well. Is this 
a bug or an expected behavour ?


PS: if this is a bug, an easy fix is to add keep_blank_values=True to the 
fileupload.parse_urlencoded call in server.py line 91.
-- 
Sylvain Th?nault                               LOGILAB, Paris (France)
Formations Python, Zope, Plone, Debian:  http://www.logilab.fr/formations
D?veloppement logiciel sur mesure:       http://www.logilab.fr/services
Python et calcul scientifique:           http://www.logilab.fr/science


From markus at bluegap.ch  Fri Sep 22 11:47:47 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Fri Sep 22 11:47:53 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060922142046.1717.1954789151.divmod.quotient.56787@ohm>
References: <20060922142046.1717.1954789151.divmod.quotient.56787@ohm>
Message-ID: <451413B3.5040700@bluegap.ch>

Hello Valentino,

You wrote:
> Ok but this should be accomplished in a different way IMHO. You should 
> have a Fragments container somewhere and lookup stuff in there. It 
> doesn't make too much sense to have fragment children IMHO.

Why not? I often have 'sub-templates', like you see in my example, where 
the hierarchy for URL 'www.mysite.com/foo/bar.html' would be:

autohandler > foo/autohandler > foo/bar.html

'autohandler' is never going to include 'foo/bar.html' directly. And 
both 'autohandler' as well as 'foo/autohandler' should always have a 
child to include somewhere.

To clarify the concepts of Pages and Fragments, the top level template 
(the 'autohandler') does not exactly look like a 'Fragment' to me, since 
it includes all the <html><head .../><body .../><html> tags.

> Well... Pages can be used in place of the Fragments but they will be 
> considered as Fragments with no extra functionality (even if the code is 
> there) thus it's better to stick with Fragments entirely for this usecase.

Uhm... but I can add render_xy and data_xy to Fragments, can't I?

>> As you can see in my example, I've written my own 
>> 'locateFragmentChild()' method which does exactly what I'm describing 
>> above.
> 
> Well but you just need to lookup stuff here and there,

No, I need to look stuff up in the Fragment, then that Fragment again 
needs to lookup it's 'child'.

It's not like using a Fragment for the top navigation, one for the 
breadcrumbs and one for the content. Although I could do it that way, it 
would be confusing, because I would always have to check the URL (or the 
segments in nevow). I'd loose the hierarchy information in my code.

> if you need to 
> include  different fragments in a particular fragment then I guess this 
> locateFragmentChild is sort of useful although the name is not the best 
> I can think of, simply locateFragment should be enough (but as I can see 
> there's really no fixed hiararchy of Fragments and you shouldn't use the 
> same mechanism used in locateChild, I'd rather go with a dictionary 
> containing all of them because in the end that's what you are actually 
> doing, including a fragment depending on the url segment).

Well, I think you got it by now: I just really, really, really want to 
arrange my Fragments hierarchically.  :-)

>> <snipped my example>
> 
> I don't see a connection between this and the fragments though.

For me these also looks more like Pages. But I can't set
docFactory = ['autohandler', 'foo/autohandler', 'foo/bar.html']

Or would that probably be an alternative? Write a DocFactory which 
processes multiple templates, which include their child with a special 
content renderer...  Or just read all the templates and output one Stan 
tree, doing the multiple-template-connecting in the DocFactory?

> Yes, they are a recent addition for a usecase in Quotient. You can pass 
> arguments by using closures of course. But inserting renderers is a 
> strage usecase, I've never needed it and pre-processors were added to 
> change urls on the fly (I think for caching purposes) when loading 
> templates, not for changing templates in that hard way. You might find 
> some problems in doing that, but I've never tried.

Why should that lead to problems? Seems like a very clever concept to me 
(adding renderers or data on the fly with preprocessors).

I'm also changing urls on the fly, the relative ones. If I can pass 
arguments to the preprocessor, I can easily get away without adding a 
renderer.

Thank you for your help, I'll have a look at your nevow sources.

Markus


From markus at bluegap.ch  Sat Sep 23 04:12:21 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Sat Sep 23 04:12:31 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060922142046.1717.1954789151.divmod.quotient.56787@ohm>
References: <20060922142046.1717.1954789151.divmod.quotient.56787@ohm>
Message-ID: <4514FA75.5030004@bluegap.ch>

Hi,

Valentino Volonghi aka Dialtone wrote:
> Yes, they are a recent addition for a usecase in Quotient. You can pass 
> arguments by using closures of course.

Oh.. closures! Coming more from the C/C++ world I'm not used to 
closures. I've just read some manuals and howtos. I slowly come to 
thinking that python is just like my girl friend: the more I learn about 
her the more I love her. :-)  Although... I'd never go to bed with a python.

Anyway, thank you for opening my eyes and widening my horizon! (I'm 
still waiting for such a thing to happen regarding the 'hierarchical 
fragments' issue ;-) )

Regards

Markus


From markus at bluegap.ch  Sat Sep 23 07:52:25 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Sat Sep 23 07:52:30 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060922142046.1717.1954789151.divmod.quotient.56787@ohm>
References: <20060922142046.1717.1954789151.divmod.quotient.56787@ohm>
Message-ID: <45152E09.4090109@bluegap.ch>

Hi again,

I've now had a look at your source code:

Valentino Volonghi aka Dialtone wrote:
> http://hg.stiq.it/stiq for some more code.

I've learned about nevow macros. I don't quite understand what the big 
difference to a renderer is, but that's another story...

I'm still trying to get my 'component' based thinking migrated to nevow. 
As an exercise, I thought I'd try to use the nevow example pastebin as a 
component. What I want to achieve is having the pastebin available under 
http://localhost:8080/pastebin/, wrapped within my own template.
http://localhost:8080/  should simply show a welcome page, within the 
same template.

For this experiment, I've simply stuffed a SuperiorRootPage class into 
pastebin.tac. The simplistic template is included as stan. The pastebin 
should be rendered inside that (so, my 'hello world' title would appear 
on top). Of course, the main pastebin template (templates/site.html) 
would need to be adjusted. But not the python code.

I don't know if I should think of the included pastebin as a Fragment? 
Certainly it's a Page, as it is.

Bellow is what I've tried. I still don't know how to make such a thing 
work. Somebody care to enlighten me?

Regards

Markus


Index: pastebin.tac
===================================================================
--- pastebin.tac        (revision 9132)
+++ pastebin.tac        (working copy)
@@ -5,6 +5,7 @@

  from nevow import appserver
  from nevow import vhost
+from nevow import inevow, rend, stan, loaders, tags as T

  from pastebin import interfaces
  from pastebin.service import FSPasteBinService
@@ -16,7 +17,31 @@
  pastebin = FSPasteBinService('data')
  pastebin.setServiceParent(application)

-appResource = pages.RootPage(pastebin)
+class SuperiorRootPage(rend.Page):
+    addSlash = True
+    docFactory = loaders.stan(
+        T.html[
+            T.head(),
+            T.body[
+                T.h1['hello world'],
+                T.invisible(macro=T.directive('content')),
+            ]])
+
+    def locateChild(self, ctx, segments):
+        self.remaining_segments = segments[1:]
+        return self, ()
+
+    child_pastebin = pages.RootPage(pastebin)
+
+    def macro_content(self, ctx):
+        print "remaining_segments: %s" % str(self.remaining_segments)
+        if len(self.remaining_segments) == 0:
+            return "welcome!"
+        else:
+            # what to return here???
+            return "duh!"
+
+appResource = SuperiorRootPage(pastebin)
  appResource.putChild('robots.txt', static.File('static/robots.txt'))
  vResource = vhost.VHostMonsterResource()
  appResource.putChild('vhost', vResource)


From dialtone at divmod.com  Sat Sep 23 09:22:06 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sat Sep 23 09:22:08 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <45152E09.4090109@bluegap.ch>
Message-ID: <20060923142206.1717.2106343201.divmod.quotient.57720@ohm>

>I've learned about nevow macros. I don't quite understand what the big 
>difference to a renderer is, but that's another story...

One is processed once and only once at pre-compile time, the other is not.

>I'm still trying to get my 'component' based thinking migrated to nevow. As 
>an exercise, I thought I'd try to use the nevow example pastebin as a 
>component. What I want to achieve is having the pastebin available under 
>http://localhost:8080/pastebin/, wrapped within my own template.
>http://localhost:8080/  should simply show a welcome page, within the same 
>template.

You can't do that because pastebin is not designed to be used in that way. Otherwise simply return the root page of the pastebin from the child_pastebin method of the root page of your site.


>Index: pastebin.tac
>===================================================================
>--- pastebin.tac        (revision 9132)
>+++ pastebin.tac        (working copy)
>@@ -5,6 +5,7 @@
>
>  from nevow import appserver
>  from nevow import vhost
>+from nevow import inevow, rend, stan, loaders, tags as T
>
>  from pastebin import interfaces
>  from pastebin.service import FSPasteBinService
>@@ -16,7 +17,31 @@
>  pastebin = FSPasteBinService('data')
>  pastebin.setServiceParent(application)
>
>-appResource = pages.RootPage(pastebin)
>+class SuperiorRootPage(rend.Page):
>+    addSlash = True
>+    docFactory = loaders.stan(
>+        T.html[
>+            T.head(),
>+            T.body[
>+                T.h1['hello world'],
>+                T.invisible(macro=T.directive('content')),
>+            ]])
>+
>+    def locateChild(self, ctx, segments):
>+        self.remaining_segments = segments[1:]
>+        return self, ()

This stuff above is just wrong.

>+    child_pastebin = pages.RootPage(pastebin)
>+
>+    def macro_content(self, ctx):
>+        print "remaining_segments: %s" % str(self.remaining_segments)
>+        if len(self.remaining_segments) == 0:
>+            return "welcome!"
>+        else:
>+            # what to return here???
>+            return "duh!"
>+
>+appResource = SuperiorRootPage(pastebin)
>  appResource.putChild('robots.txt', static.File('static/robots.txt'))
>  vResource = vhost.VHostMonsterResource()
>  appResource.putChild('vhost', vResource)


As I told you the first time you should use a dictionary that contains fragments, in fact that's exactly what you should do.

What you are trying to do is far less dynamic than what you tried to explain.

Just pass the docFactory argument to the Page class when you create it and let the Fragments render themselves with the appropriate template (when the are needed, and they are not strictly here).

if you only want to change the outer parts of a page then use the macro system (it is _static_ and request agnostic, it's compiled at the first request but has no connection with it (and it's wrong to act in that way).

Use a single macro.html template in your application and write everything else in order to fill the macro slots, when you need to change the macro change it (the macro template is the docFactory of the base Page class, when the rest inherits it will fill the content macro (or sidebar or whatever macro) with its own template that statically depends on the page you are writing in that moment.

From markus at bluegap.ch  Sun Sep 24 05:19:37 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Sun Sep 24 05:19:49 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060923142206.1717.2106343201.divmod.quotient.57720@ohm>
References: <20060923142206.1717.2106343201.divmod.quotient.57720@ohm>
Message-ID: <45165BB9.6000004@bluegap.ch>

Hi,

Valentino Volonghi aka Dialtone wrote:
> You can't do that because pastebin is not designed to be used in that 
> way.

You mean, even though pastebin's RootPage is derived from a Fragment, I 
can't embed it into another Page? This would mean nevow is not component 
based, according to my understanding at least. I can't believe that.

> Otherwise simply return the root page of the pastebin from the 
> child_pastebin method of the root page of your site.

That does the URL-space-embedding of the pastebin into another page. But 
not the design wise embedding.

> As I told you the first time you should use a dictionary that contains 
> fragments, in fact that's exactly what you should do.

I know. But, sorry if this seems stubborn, I still don't understand how 
a dictionary of fragments would solve my need to have hierarchically 
organized fragments.

> What you are trying to do is far less dynamic than what you tried to 
> explain.

Why? I still didn't encounter an example in nevow with fragments 
containing other fragments, deciding which child-fragment to show based 
on the URL.

> Just pass the docFactory argument to the Page class when you create it 
> and let the Fragments render themselves with the appropriate template 
> (when the are needed, and they are not strictly here).

That does not solve my problem.

> if you only want to change the outer parts of a page then use the macro 
> system (it is _static_ and request agnostic, it's compiled at the first 
> request but has no connection with it (and it's wrong to act in that way).
> 
> Use a single macro.html template in your application and write 
> everything else in order to fill the macro slots, when you need to 
> change the macro change it (the macro template is the docFactory of the 
> base Page class, when the rest inherits it will fill the content macro 
> (or sidebar or whatever macro) with its own template that statically 
> depends on the page you are writing in that moment.

Macros seem far to static and I don't see how they could solve my 
problem neither.

I'll keep trying, as I don't believe nevow is unable to do that.

Regards

Markus


From exarkun at divmod.com  Sun Sep 24 10:27:22 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun Sep 24 10:27:25 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <45165BB9.6000004@bluegap.ch>
Message-ID: <20060924152722.1717.440428078.divmod.quotient.58635@ohm>

On Sun, 24 Sep 2006 12:19:37 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:
>Hi,
>
>Valentino Volonghi aka Dialtone wrote:
>>You can't do that because pastebin is not designed to be used in that way.
>
>You mean, even though pastebin's RootPage is derived from a Fragment, I 
>can't embed it into another Page? This would mean nevow is not component 
>based, according to my understanding at least. I can't believe that.

I don't know what "component based" means.  In any case, you cannot render
a Page as part of another Page.  You should probably pretend that Page does
not subclass Fragment, because that is only an implementation detail.  If
you want to nest renderable objects, you should use Fragments (or Elements)
directly, not Pages.

Jean-Paul

From markus at bluegap.ch  Sun Sep 24 11:35:48 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Sun Sep 24 11:35:52 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060924152722.1717.440428078.divmod.quotient.58635@ohm>
References: <20060924152722.1717.440428078.divmod.quotient.58635@ohm>
Message-ID: <4516B3E4.6000703@bluegap.ch>

Jean-Paul Calderone wrote:
> I don't know what "component based" means.  In any case, you cannot render
> a Page as part of another Page.  You should probably pretend that Page does
> not subclass Fragment, because that is only an implementation detail.  If
> you want to nest renderable objects, you should use Fragments (or Elements)
> directly, not Pages.

I don't mind if I have to use Pages or Fragments. The point is: I don't 
know how to do it with nevow.

I've been experimenting and came to think about using WSGI for what I want:

* A normal nevow page as a container, which has any type of docFactory. 
Then it provides a 'render_content', which fires a WSGI request.

* A 'child fragment', which gets 'exported' via WSGI, and which can then 
be included as part or fragment of the above container.

Of course not all applications can be embedded into another page, for 
some it doesn't even make sense, but for others, a whole lot of new 
possibilities are opened.

WSGI probably has the advantage that it's standard and AFAIK some sort 
of 'child' already exists in nevow/wsgi.py. I don't know if WSGI plays 
that well with deferreds, though.

Regards

Markus

From dialtone at divmod.com  Sun Sep 24 14:43:20 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sun Sep 24 14:43:22 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <45165BB9.6000004@bluegap.ch>
Message-ID: <20060924194320.1717.1943127895.divmod.quotient.58831@ohm>

On Sun, 24 Sep 2006 12:19:37 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:
>Hi,
>
>Valentino Volonghi aka Dialtone wrote:
>>You can't do that because pastebin is not designed to be used in that way.
>
>You mean, even though pastebin's RootPage is derived from a Fragment, I 
>can't embed it into another Page? This would mean nevow is not component 
>based, according to my understanding at least. I can't believe that.

No it means another thing. It means that the RootPage contains information on the children of that page and rendering that as a Fragment will lose this information. This means that the pastebin is not embeddable (which is what I said) and it should also be clear to you (I already tried to explain this and also exarkun did now) that a Page should not be used as a Fragment and it's also wrong to ask a Fragment about its Page children of course.

>>Otherwise simply return the root page of the pastebin from the 
>>child_pastebin method of the root page of your site.
>
>That does the URL-space-embedding of the pastebin into another page. But not 
>the design wise embedding.

That does what the pastebin can do at most. If it's not designed to be embedded than you cannot embed it, simple.

>Why? I still didn't encounter an example in nevow with fragments containing 
>other fragments, deciding which child-fragment to show based on the URL.

That's because nobody ever encountered this usecase, which might mean that what you are trying to do is done in a different way in Nevow or that you are tring to use Nevow in a new way.

But anyway there is only ONE segment that is used by the fragment and thus the ONE segment can be used as a key in a dictionary that contains some Fragments, here is how you can solve this problem. Also if you name you templates in the same way you use for the segment then you can also make this even more dynamic and easy to write.

>>Just pass the docFactory argument to the Page class when you create it and 
>>let the Fragments render themselves with the appropriate template (when the 
>>are needed, and they are not strictly here).
>
>That does not solve my problem.

IMHO it does and fairly well, you might not have completely grasped nevow or I may not have completely understood your usecase.

>Macros seem far to static and I don't see how they could solve my problem 
>neither.

They are not too static.

>I'll keep trying, as I don't believe nevow is unable to do that.

I think you are trying to use nevow in the same way you use other frameworks which unfortunately doesn't work at all.

From markus at bluegap.ch  Mon Sep 25 02:32:59 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon Sep 25 02:33:03 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060924194320.1717.1943127895.divmod.quotient.58831@ohm>
References: <20060924194320.1717.1943127895.divmod.quotient.58831@ohm>
Message-ID: <4517862B.9010003@bluegap.ch>

Hi Valentino,

thank you for your patience.

Valentino Volonghi aka Dialtone wrote:
> I think you are trying to use nevow in the same way you use other 
> frameworks which unfortunately doesn't work at all.

Yeah, I think that's my problem.

Thus I've also tried to do it as you suggest: using a dictionary of 
Fragm... ehm.... Pages. Anyway, this seems to be how a lot of samples 
are built.

It also shows, what I would like to have simplified: I don't want to 
write 'render_content_xy' methods for every level I'm introducing. In 
fact, I'd like to write a ContainerPage, which reads it's content 
entirely from a directory, including what templates to show in which 
order (You will note, that calling www.mysite.com/kontakt/info returns a 
ContactInfoPage, which renders the BasePage.docFactory 
(templates/common.html), then includes fragment 1, and finally fragment 
2 - this is a hierarchy, IMHO).

Regards

Markus



Here is what I think is more nevow like:


from nevow import rend, loaders, tags as T, inevow, static

class BasePage(rend.Page):
     addSlash = True
     docFactory = loaders.xmlfile('templates/common.html')

     fragments_1 = {
         '_default': loaders.xmlfile('templates/default.html', 
ignoreDocType=True),
         'kontakt': loaders.stan(T.span(render=T.directive('content_2'))),
     }

     def render_title(self, ctx, data):
         ctx.fillSlots('title', 'fmt website')
         return ctx

     def render_content_1(self, ctx, data):
         try:
             fragment_name = inevow.ICurrentSegments(ctx)[0]
             ctx.fillSlots('content', self.fragments_1[fragment_name])
         except KeyError:
             ctx.fillSlots('content', self.fragments_1['_default'])
         return ctx

     def render_content_2(self, ctx, data):
         try:
             fragment_name = inevow.ICurrentSegments(ctx)[1]
             ctx.fillSlots('content', self.fragments_2[fragment_name])
         except KeyError:
             ctx.fillSlots('content', self.fragments_2['_default'])
         return ctx

class ContactInfoPage(BasePage):
     pass

class ContactPage(BasePage):
     child_info = ContactInfoPage

class RootPage(BasePage):
     child_kontakt = ContactPage
     child_layout = static.File('layout')


From dialtone at divmod.com  Mon Sep 25 04:42:14 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Sep 25 04:42:19 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4517862B.9010003@bluegap.ch>
Message-ID: <20060925094214.1717.1582556152.divmod.quotient.59441@ohm>

On Mon, 25 Sep 2006 09:32:59 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:
>Here is what I think is more nevow like:

It is indeed much better than the solution used before.

From markus at bluegap.ch  Mon Sep 25 05:01:12 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon Sep 25 05:01:18 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060925094214.1717.1582556152.divmod.quotient.59441@ohm>
References: <20060925094214.1717.1582556152.divmod.quotient.59441@ohm>
Message-ID: <4517A8E8.3050800@bluegap.ch>

Valentino Volonghi aka Dialtone wrote:
> On Mon, 25 Sep 2006 09:32:59 +0200, Markus Schiltknecht 
> <markus@bluegap.ch> wrote:
>> Here is what I think is more nevow like:
> 
> It is indeed much better than the solution used before.

Okay, thanks. But now... how can I remove the hard-coded 'level' number? 
I would like to write 'components' or Fragments which don't care on what 
level they are used.

Currently, the level is hard coded at the docFactory (which level of the 
content renderer to use) as well as in the renderers (which dictionary 
to use). Writing a common renderer, which returns the right Fragment 
seems non trivial. In a way, it's what I'm trying to do all the time.

Another thing that bugs me is the duplicate definition of the children: 
I have to set the child_XY attribute as well as the fragment dictionary. 
But that can easily be avoided, I think.

Regards

Markus

From dialtone at divmod.com  Mon Sep 25 05:22:12 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Sep 25 05:22:15 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4517A8E8.3050800@bluegap.ch>
Message-ID: <20060925102212.1717.1328459195.divmod.quotient.59464@ohm>

On Mon, 25 Sep 2006 12:01:12 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:
>Okay, thanks. But now... how can I remove the hard-coded 'level' number? I 
>would like to write 'components' or Fragments which don't care on what level 
>they are used.

Use -1 as an index. It will take the last segment each time.

>Another thing that bugs me is the duplicate definition of the children: I 
>have to set the child_XY attribute as well as the fragment dictionary. But 
>that can easily be avoided, I think.

Build those dictionary dynamically at startup time.

From markus at bluegap.ch  Mon Sep 25 05:51:41 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon Sep 25 05:51:46 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060925102212.1717.1328459195.divmod.quotient.59464@ohm>
References: <20060925102212.1717.1328459195.divmod.quotient.59464@ohm>
Message-ID: <4517B4BD.6080001@bluegap.ch>

Valentino Volonghi aka Dialtone wrote:
> On Mon, 25 Sep 2006 12:01:12 +0200, Markus Schiltknecht 
> <markus@bluegap.ch> wrote:
>> Okay, thanks. But now... how can I remove the hard-coded 'level' 
>> number? I would like to write 'components' or Fragments which don't 
>> care on what level they are used.
> 
> Use -1 as an index. It will take the last segment each time.

<div nevow:render="content_-1">  probably won't work...


To be able to do it that way, I would have to stuff the dictionaries 
with fragments into an array with levels, i.e.


fragments_1 = {
     '_default': loaders.xmlfile('templates/default.html'),
     'kontakt': loaders.stan(...),
}

fragments_2 = {
     '_default': ..
     'info': ...
}

levels = [fragments_1, fragments_2]


But even then, I cannot write a common renderer, because how does it 
tell which fragment to serve, i.e. at what level it currently is.

def render_content(self, ctx, data):
     try:
         fragment_name = inevow.ICurrentSegments(ctx)[???]
     ...


I tried using the context here and store something in there, i.e. a 
counter which gets incremented every time render_content is called. I'm 
trying stuff like that.

Sill I'm still surprised, nevow does not provide that functionality.

>> Another thing that bugs me is the duplicate definition of the 
>> children: I have to set the child_XY attribute as well as the fragment 
>> dictionary. But that can easily be avoided, I think.
> 
> Build those dictionary dynamically at startup time.

Yep. Easy enough.


 >> That does the URL-space-embedding of the pastebin into another page.
 >> But not the design wise embedding.
 >
 > That does what the pastebin can do at most. If it's not designed to be
 > embedded than you cannot embed it, simple.

I think another way to look at my problem is: how do I code a pastebin 
that _can_ be embedded like that? A pastebin which can be a fragment of 
another page.

Regards

Markus

From dialtone at divmod.com  Mon Sep 25 06:31:30 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Sep 25 06:31:39 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4517B4BD.6080001@bluegap.ch>
Message-ID: <20060925113130.1717.741990179.divmod.quotient.59502@ohm>

On Mon, 25 Sep 2006 12:51:41 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:
><div nevow:render="content_-1">  probably won't work...
>
>
>To be able to do it that way, I would have to stuff the dictionaries with 
>fragments into an array with levels, i.e.
>
>
>fragments_1 = {
>     '_default': loaders.xmlfile('templates/default.html'),
>     'kontakt': loaders.stan(...),
>}
>
>fragments_2 = {
>     '_default': ..
>     'info': ...
>}
>
>levels = [fragments_1, fragments_2]
>
>
>But even then, I cannot write a common renderer, because how does it tell 
>which fragment to serve, i.e. at what level it currently is.
>
>def render_content(self, ctx, data):
>     try:
>         fragment_name = inevow.ICurrentSegments(ctx)[???]
>     ...

I don't completely understand why you really really really need this but...

def render_content(self, level):
    def _(ctx, data):
        try:
            fragment_name = inevow.ICurrentSegments(ctx)[level]
        ...

Used:

<nevow:invisible nevow:render="content 1">...</nevow:invisible>

>Sill I'm still surprised, nevow does not provide that functionality.

It's a bit frustrating for me to keep answering while you consistently say
that 'nevow does not provide XXX functionality', can you please stop implying that nevow is a pile of junk compared to others?

>I think another way to look at my problem is: how do I code a pastebin that 
>_can_ be embedded like that? A pastebin which can be a fragment of another 
>page.

Using macros of course and it's very easy to do, and the code I showed you already does that and no it's not too static because you can make anything that looks static a lot more dynamic, this is python not C++.

From markus at bluegap.ch  Mon Sep 25 08:49:27 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon Sep 25 08:49:32 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060925113130.1717.741990179.divmod.quotient.59502@ohm>
References: <20060925113130.1717.741990179.divmod.quotient.59502@ohm>
Message-ID: <4517DE67.70008@bluegap.ch>

Hi,

Valentino Volonghi aka Dialtone wrote:
> I don't completely understand why you really really really need this but...

I see... unfortunately I don't know how to explain this better. I don't
understand why writing a pastebin, a blog, or a news system should not
be written as a component / Fragment, which can be embedded into other
sites. And by embedded I mean URL _and_ template embedding. Isn't that
obvious to give a lot of flexibility?

> def render_content(self, level):
>    def _(ctx, data):
>        try:
>            fragment_name = inevow.ICurrentSegments(ctx)[level]
>        ...

Hm... looks tricky. I didn't know about def _(...). But who is expected
to pass the level to the renderer? The designer?

> Used:
> 
> <nevow:invisible nevow:render="content 1">...</nevow:invisible>

That way I still have the level hard coded into the template.
Unfortunately, that's not an option for me. The designer should be able
to 'drag' the components around without having to worry about how deep
it's templates are nested.

>> Sill I'm still surprised, nevow does not provide that functionality.
> 
> It's a bit frustrating for me to keep answering while you consistently say
> that 'nevow does not provide XXX functionality', can you please stop 
> implying that nevow is a pile of junk compared to others?

Sorry, I didn't mean to put nevow down. Not at all. I'm quite impressed
by how clever and thought through a templating system can be. And I
would not invest that much time into figuring out how to do what I want
if I didn't believe in it being mostly superior to all others.

>> I think another way to look at my problem is: how do I code a pastebin 
>> that _can_ be embedded like that? A pastebin which can be a fragment 
>> of another page.
> 
> Using macros of course and it's very easy to do, and the code I showed 
> you already does that and no it's not too static because you can make 
> anything that looks static a lot more dynamic, 

Uh.. macros? This is where it gets frustrating for me, because I think 
you still don't known what I want to achieve. Macros don't know a lot. 
Their context is very limited. How am I supposed to resolve the all the 
locateChild machinery? How do I give that information to the 'child', 
the pastebin in my example?

I've tried using a macro, see the code below. With some of my fragment 
code (the dictionary thing, as you said that would be the right way to 
do it). That portion of the code works, but with the macro I don't know 
how pass necessary information around.

As it is done below, only the pastebin's RootPage is displayed. I don't 
know how to make subsites of it work. I.e.:

localhost:8080/            -> okay, renders the _default fragment
localhost:8080/pastebin/   -> okay, renders the pastebin's RootPage
                               embedded in the SuperRootPage's docFactory
                               template
localhost:8080/pastebin/1/ -> not okay, still renders the pastebin's
                               RootPage.

I'm not going to say 'nevow can't do it' anymore, but if it really can, 
I would love to learn _how_ to do it.

Please excuse, but as long as I'm unconvinced of that capability, I have 
a good reason to believe nevow has not implemented that feature, yet. 
That's okay, however, and I believe I should keep trying to make nevow 
do what I want it to do.

> this is python not C++.

Hm... check 'C++ template metaprogramming'  *joking*
How static is that?   :-)

Anyway, once again, thank you for your patience.

Regards

Markus




My macro try:

Index: pastebin.tac
===================================================================
--- pastebin.tac        (revision 9132)
+++ pastebin.tac        (working copy)
@@ -5,6 +5,7 @@

  from nevow import appserver
  from nevow import vhost
+from nevow import inevow, rend, stan, loaders, tags as T

  from pastebin import interfaces
  from pastebin.service import FSPasteBinService
@@ -16,7 +17,33 @@
  pastebin = FSPasteBinService('data')
  pastebin.setServiceParent(application)

-appResource = pages.RootPage(pastebin)
+class SuperRootPage(rend.Page):
+
+    docFactory = loaders.stan(
+        T.div[
+            T.h1['hello world'],
+            T.invisible(render=T.directive('child_content'))
+        ])
+
+    fragments = {
+        '_default': loaders.stan(T.div[T.h2['hello component based 
world']]),
+        'pastebin': 
loaders.stan(T.invisible(macro=T.directive('child_content'))),
+    }
+
+    def render_child_content(self, ctx, data):
+        try:
+            fragment_name = inevow.ICurrentSegments(ctx)[0]
+            return self.fragments[fragment_name]
+        except KeyError:
+            return self.fragments['_default']
+
+    def macro_child_content(self, ctx):
+        return pages.RootPage(pastebin)
+
+    def locateChild(self, ctx, segments):
+        return self, ()
+
+appResource = SuperRootPage()
  appResource.putChild('robots.txt', static.File('static/robots.txt'))
  vResource = vhost.VHostMonsterResource()
  appResource.putChild('vhost', vResource)

From dialtone at divmod.com  Mon Sep 25 10:38:14 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Sep 25 10:38:15 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4517DE67.70008@bluegap.ch>
Message-ID: <20060925153814.1717.885910867.divmod.quotient.59655@ohm>

On Mon, 25 Sep 2006 15:49:27 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:

>I see... unfortunately I don't know how to explain this better. I don't
>understand why writing a pastebin, a blog, or a news system should not
>be written as a component / Fragment, which can be embedded into other
>sites. And by embedded I mean URL _and_ template embedding. Isn't that
>obvious to give a lot of flexibility?
>>def render_content(self, level):
>>    def _(ctx, data):
>>        try:
>>            fragment_name = inevow.ICurrentSegments(ctx)[level]
>>        ...
>
>Hm... looks tricky. I didn't know about def _(...). But who is expected
>to pass the level to the renderer? The designer?

There's no magic in def _()... it's just a closure. Yes, the designer should pass the level to the renderer.

>>Used:
>>
>><nevow:invisible nevow:render="content 1">...</nevow:invisible>
>
>That way I still have the level hard coded into the template.

That's why I told you to always use -1 or simply avoid this confusing thing.

>Uh.. macros? This is where it gets frustrating for me, because I think you 
>still don't known what I want to achieve. Macros don't know a lot. Their 
>context is very limited. How am I supposed to resolve the all the 
>locateChild machinery? How do I give that information to the 'child', the 
>pastebin in my example?

macros are a much better way to integrate a pre-existing template into a basic template. They work at TEMPLATE level not at Page or Fragment level.

>That portion of the code works, but with the macro I don't know how pass 
>necessary information around.

Code conventions is a clear option. Passing arguments is another one.

>Hm... check 'C++ template metaprogramming'  *joking*
>How static is that?   :-)

The point is how easy it is to build abstractions on that stuff? It isn't 
that's why you need to rely on external configuration or whatever machinery, 
because it's too hard to work at code level.

>My macro try:

Maybe I haven't been very clear at first. In order to embed an application in another one you MUST DESIGN one of the two to be embeddable. You CANNOT embed a Page instance in another Page instance, it's wrong and won't work even if you think it might.

Going back to the 'problem':

I have an application and this is the directory structure:

main/
    static/ -- contains images, css, javascript files
    template/ -- contains the application templates
    appname/ -- contains the code

Since we know about Object Oriented Programming we work by providing a base
class that can be inherited to provide some default behavior:

class BasePage(rend.Page):
    docFactory = loaders.xmlfile('mymacro.xhtml', templateDir=templateDir)

    # we define that this BasePage can fill some default macros:
    def macro_content(self, ctx):
        return ctx.tag[loaders.xmlfile(self.__class__.__name__+'.html', ignoreDocType=True).load()]

    def macro_sidebar(self, ctx):
        return ctx.tag[loaders.xmlfile(self.__class__.__name__+'_sidebar.html', ignoreDocType=True).load()]


what does this class do? It allows the classes that inherit from it to embed
html fragments (not the rend.Fragment class) inside a base template. How?

class Root(BasePage):
    #whatever functionality

This class will look for 2 files: root.html and root_sidebar.html.

Let's say that mymacro.xhtml (the default macro template) is the following:

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:nevow="http://nevow.com/ns/nevow/0.1">
    <head>
        Wowow
    </head>

    <body>
        <div id="content" nevow:macro="content" />
        <div id="sidebar" nevow:macro="sidebar" />
    </body>
</html>

Then the 2 root.html and root_sidebar.html templates are:

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<nevow:invisible xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
                 xmlns:nevow="http://nevow.com/ns/nevow/0.1">

    I'm the content of the page arrrrrrrrr!
    aye I define whatever behavior I want, the only thing I care is that
    Root class can provide me with this functionality!

</nevow:invisible>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<nevow:invisible xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
                 xmlns:nevow="http://nevow.com/ns/nevow/0.1">

    I'm the sidebar of the ship, could you believe it?
    <div nevow:render="greeting" />

</nevow:invisible>

When you first try to render this page Nevow runs all the nevow:macro 
directives it can find (because they are pre-compilable, unlike nevow:render and nevow:data directives), this results in the following final template:

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:nevow="http://nevow.com/ns/nevow/0.1">
    <head>
        Wowow
    </head>

    <body>
        <div id="content">

    I'm the content of the page arrrrrrrrr!
    aye I define whatever behavior I want, the only thing I care is that
    Root class can provide me with this functionality!

        </div>
        <div id="sidebar">

    I'm the sidebar of the ship, could you believe it?
    <div nevow:render="greeting" />

        </div>
    </body>
</html>

This template will be used for the Root class ONLY. Any other subclass will re-pre-compile the macro to get its own template.

After having worked in this way... How do you embed applications then?
SIMPLE!! You Change the macro template and instead of providing that one, you 
simply provide a new one that fits your web application defaults while 
keeping the macro slots defined in there so that the application you want to 
embed won't be surprised by the new template. How is that simple? It's so 
simple I shouldn't even tell you... templateDir is a configuration option, 
change it in the configuration and give it a new location where the new 
templates are available.

There is no other way and there's no cleaner way to do this in my opinion.
Why? Because you cannot embed applications randomly without having first planned for this option in the application that needs to be embedded because it has certain requirements about the API and simply moving around class cannot work anyway. Is this good or bad? I don't know, I think it's good. Is it possible to just put applications running in another one like they are completely separate? Of course... it's even easier, just return one's root page from the appropriate link.

The same can be done with Fragments and in fact Mantissa does exactly the 
same thing just with Fragments.

From manlio_perillo at libero.it  Mon Sep 25 12:06:58 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Sep 25 12:04:25 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
Message-ID: <45180CB2.8080405@libero.it>

Hi.

Is it possible (and how) to generate XHTML documents without extra
whitespaces?


Thanks   Manlio Perillo

From markus at bluegap.ch  Mon Sep 25 12:24:43 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon Sep 25 12:24:53 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <20060925153814.1717.885910867.divmod.quotient.59655@ohm>
References: <20060925153814.1717.885910867.divmod.quotient.59655@ohm>
Message-ID: <451810DB.4040300@bluegap.ch>

Hi,

Valentino Volonghi aka Dialtone wrote:
> There's no magic in def _()... it's just a closure. Yes, the designer 
> should pass the level to the renderer.

IMHO, the designer should not have to care about level of nested-ness of 
his templates.

> macros are a much better way to integrate a pre-existing template into a 
> basic template. They work at TEMPLATE level not at Page or Fragment level.

..and that's the problem: working at the template level is not 
sufficient for my application.

> This template will be used for the Root class ONLY. Any other subclass 
> will re-pre-compile the macro to get its own template.
> 
> After having worked in this way... How do you embed applications then?
> SIMPLE!! You Change the macro template and instead of providing that 
> one, you simply provide a new one that fits your web application 
> defaults while keeping the macro slots defined in there so that the 
> application you want to embed won't be surprised by the new template. 
> How is that simple? It's so simple I shouldn't even tell you... 

Yeah, it's simple and works well for a lot of things.

> templateDir is a configuration option, change it in the configuration 
> and give it a new location where the new templates are available.
> 
> There is no other way and there's no cleaner way to do this in my opinion.
> Why? Because you cannot embed applications randomly without having first 
> planned for this option in the application that needs to be embedded 
> because it has certain requirements about the API and simply moving 
> around class cannot work anyway.

Why should that not work? What about WSGI as a simple API? There are 
systems, that use WSGI to pass 'requests' around, processing parts of it 
(i.e. segments, in nevow terms).

> Is this good or bad? I don't know, I 
> think it's good. Is it possible to just put applications running in 
> another one like they are completely separate? Of course... it's even 
> easier, just return one's root page from the appropriate link.

That's fine as long as you don't want to do any processing between the 
parent and the child application. As you say, you have to 'prepare' the 
application which is to be embedded. And it's hard to do that dynamically.


Anyway, I've partly succeeded to do what I want. And sometimes a patch 
says more than 1000 words:


Index: pastebin.tac
===================================================================
--- pastebin.tac	(revision 9132)
+++ pastebin.tac	(working copy)
@@ -5,18 +5,58 @@

  from nevow import appserver
  from nevow import vhost
+from nevow import loaders
+from nevow import tags as T
+from nevow import rend

  from pastebin import interfaces
  from pastebin.service import FSPasteBinService
  from pastebin.web import pages

+from container import ContainerPage

  application = service.Application('pastebin')

  pastebin = FSPasteBinService('data')
  pastebin.setServiceParent(application)

-appResource = pages.RootPage(pastebin)
+class SubContainer(ContainerPage):
+    addSlash = True
+
+    docFactory = loaders.stan(
+        T.div[
+            T.h2['hello component based world'],
+            T.invisible(render=T.directive('child_content'))[
+                T.slot('child_content')]
+        ])
+
+    defaultChildPage = loaders.stan([
+        'another sub pastebin: ',
+        T.a(href='pastebin')['pastebin']])
+
+    child_pastebin = pages.RootPage(pastebin)
+
+class NewSuperRootPage(ContainerPage):
+    addSlash = True
+
+    docFactory = loaders.stan(
+        T.html[
+            T.head(),
+            T.body[
+                T.h1['hallo welt'],
+                T.invisible(render=T.directive('child_content'))[
+                    T.slot('child_content')],
+            ]])
+
+    defaultChildPage = loaders.stan([
+        'a sub component: ',
+        T.a(href='pastebin')['pastebin'], T.br(),
+        T.a(href='sub_component')['a component']])
+
+    child_pastebin = pages.RootPage(pastebin)
+    child_sub_component = SubContainer()
+
+appResource = NewSuperRootPage()
  appResource.putChild('robots.txt', static.File('static/robots.txt'))
  vResource = vhost.VHostMonsterResource()
  appResource.putChild('vhost', vResource)
Index: container.py
===================================================================
--- container.py	(revision 0)
+++ container.py	(revision 0)
@@ -0,0 +1,63 @@
+from zope.interface import implements, Interface
+
+from twisted.application import strports
+from twisted.application import service
+
+from twisted.web import static
+
+from nevow import appserver
+from nevow import vhost
+from nevow import inevow, rend, stan, loaders, tags as T, context
+from nevow.util import qual
+
+class IChildPages(Interface):
+    pass
+
+class ContainerPage(rend.Page):
+
+    def render_child_content(self, ctx, data):
+        print "render_child_content: context: %s" % str(ctx)
+
+        try:
+            child_pages = ctx.locate(IChildPages)
+            child = child_pages[0]
+            print "child: %s" % str(child)
+            ctx.remember(child_pages[1:], IChildPages)
+            ctx.fillSlots('child_content', child)
+        except KeyError:
+            ctx.fillSlots('child_content', self.defaultChildPage)
+        except IndexError:
+            ctx.fillSlots('child_content', self.defaultChildPage)
+
+        return ctx
+
+    def locateChild(self, ctx, segments):
+        if segments[0] == '':
+            return self, ()
+
+        try:
+            child_pages = ctx.locate(IChildPages)
+        except KeyError:
+            print "no IChildPages, yet"
+            child_pages = []
+            child = self
+
+        while len(segments) > 0 and segments[0] != '':
+            if isinstance(child, ContainerPage):
+                print "   querying self for segments %s" % str(segments)
+                child, segments = super(rend.Page, 
self).locateChild(ctx, segments)
+            else:
+                print "   querying child %s for segments %s" % 
(str(child), str(segments))
+                child, segments = child.locateChild(ctx, segments)
+            print "       got child %s" % str(child)
+            print "       segments remaining %s" % str(segments)
+
+            if isinstance(child, ContainerPage):
+                child_pages.append(child)
+
+        if not isinstance(child, ContainerPage):
+            child_pages.append(child)
+
+        ctx.remember(child_pages, IChildPages)
+        print "child_pages: %s" % str(child_pages)
+        return self, segments


Of course this is not perfect, yet. But it's a good start. It serves all 
the URLs I want with the correct templates. The pastebin got embedded twice.

The links are not correct (at least in the pastebin). I have also 
written a preprocessor which takes care of links in the templates. I'm 
not sure how to make the pastebin return the correct links, though.

Imagine all the possibilities this opens: you could for example write a 
Container which holds multiple pastebins for different categories. 
Having a template surrounding the original pastebin and offering to jump 
between the categories. All with just a simple ContainerPage with all 
the comfort of nevow (docFactories, children, renderers, etc...). If you 
don't hard code the boring pastebin example, but make it dynamically 
configurable, you can wrap whatever component you want. You have a 
category chooser which can be applied to any other component. That's 
what I call 'component based'!

And writing a ContainerPage is as simple as giving it a docFactory which 
renders 'child_content', adding some children and adding a defaultChildPage!

Anybody else out here seeing the benefits of that?

Regards

Markus

From ldanielburr at mac.com  Mon Sep 25 12:49:09 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Sep 25 12:49:28 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <451810DB.4040300@bluegap.ch>
References: <20060925153814.1717.885910867.divmod.quotient.59655@ohm>
	<451810DB.4040300@bluegap.ch>
Message-ID: <op.tgf3r7z53oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Markus,


On Mon, 25 Sep 2006 12:24:43 -0500, Markus Schiltknecht  
<markus@bluegap.ch> wrote:

[snip code implementing Markus' URL-component-rendering scheme]

> Imagine all the possibilities this opens: you could for example write a  
> Container which holds multiple pastebins for different categories.  
> Having a template surrounding the original pastebin and offering to jump  
> between the categories. All with just a simple ContainerPage with all  
> the comfort of nevow (docFactories, children, renderers, etc...). If you  
> don't hard code the boring pastebin example, but make it dynamically  
> configurable, you can wrap whatever component you want. You have a  
> category chooser which can be applied to any other component. That's  
> what I call 'component based'!
>

For an example of how awful this kind of design strategy is, please Google
for anything involving Zope Acquisition.  It ends up as a nightmare of
complexity, and the Zope guys got rid of it after a lot of painful  
real-world
experience.

> And writing a ContainerPage is as simple as giving it a docFactory which  
> renders 'child_content', adding some children and adding a  
> defaultChildPage!
>

I agree the concept is simple, and I understand why so many people find it
tempting.  This is why we have WSGI (another bad idea IMO), and various
implementations of "render each URL segment as a child of another segment".

Again, I think this is terrible.  All you've done is inflict the hell of
an arbitrary number of server-side includes into the rendering process.

> Anybody else out here seeing the benefits of that?
>

I'm sorry, but I don't, and I feel very strongly that attempts to provide
this kind of rendering strategy within nevow are misguided.  Twisted does
provide WSGI support, via web2; please consider implementing this as some
kind of WSGI rendering component, so that you can leverage the behavior
you desire without promoting this style of coding within nevow itself.

L. Daniel Burr

From dialtone at divmod.com  Mon Sep 25 12:59:26 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon Sep 25 12:59:53 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <451810DB.4040300@bluegap.ch>
Message-ID: <20060925175926.1717.510948854.divmod.quotient.59758@ohm>

On Mon, 25 Sep 2006 19:24:43 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:
>IMHO, the designer should not have to care about level of nested-ness of his 
>templates.

In fact I've been telling you how this was wrong.

>>macros are a much better way to integrate a pre-existing template into a 
>>basic template. They work at TEMPLATE level not at Page or Fragment level.
>
>..and that's the problem: working at the template level is not sufficient 
>for my application.

You first have to tell me *why*.

>Why should that not work? What about WSGI as a simple API? There are 
>systems, that use WSGI to pass 'requests' around, processing parts of it 
>(i.e. segments, in nevow terms).

You completely failed to understand the problem here... Do you realize that
usually web applications are not just static pages that you can put here and
there right? You have an abstraction to reach the data source, another one
in the url handling, another one in the authorization mechanism, another one
in the authentication mechanism.

How are you going to solve all these *major* issues?

>That's fine as long as you don't want to do any processing between the 
>parent and the child application. As you say, you have to 'prepare' the 
>application which is to be embedded. And it's hard to do that dynamically.

? It's impossible to do that dynamically of course. 'you have to design an application to be embeddable'.

>+        return self, segments

The fact alone that you are returning this from locateChild should ring a 
bell or two. It's plain wrong, discouraged, not recommended and will cause 
cancer (and probably even other side effects).

>The links are not correct (at least in the pastebin). I have also written a 
>preprocessor which takes care of links in the templates. I'm not sure how to 
>make the pastebin return the correct links, though.

request.rememberRootURL()

>Imagine all the possibilities this opens: you could for example write a 
>Container which holds multiple pastebins for different categories. Having a 
>template surrounding the original pastebin and offering to jump between the 
>categories. All with just a simple ContainerPage with all the comfort of 
>nevow (docFactories, children, renderers, etc...). If you don't hard code 
>the boring pastebin example, but make it dynamically configurable, you can 
>wrap whatever component you want. You have a category chooser which can be 
>applied to any other component. That's what I call 'component based'!

All this instead of better designing your database and application? wow... 
Have you ever heard of KISS?
And this has _nothing_ to do with the long thread we just had of course... 
It's already possible without any of the things you just wrote.

However I tried very hard to get you to change your point of view about the 
problem and nevow but you seem to prefer your approach. It's fine though.

From moebius.lists at gmail.com  Mon Sep 25 14:52:44 2006
From: moebius.lists at gmail.com (Adrian Perez)
Date: Mon Sep 25 14:52:11 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
In-Reply-To: <45180CB2.8080405@libero.it>
References: <45180CB2.8080405@libero.it>
Message-ID: <20060925215244.3934ed42@tron.foobar.homeunix.org>

On Mon, 25 Sep 2006 19:06:58 +0200
Manlio Perillo <manlio_perillo@libero.it> wrote:

> Is it possible (and how) to generate XHTML documents without extra
> whitespaces?

No pun intended, just being curious: Do you want that feature for
something else than saving a small amount of bandwidth? I would prefer
generation of properly-indented XHTML as an option, which helps
debugging -- but one can always call tidylib from the renderHTTP()
method ;-)

Cheers,

-- 
There are 2 kinds of people in my world: those who know Unix, Perl,
Vim, GNU, Linux, etc, and those who know COBOL.  It gets very difficult
for me at parties, not knowing which group to socialise with :-)
						Sitaram Chamarty
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060925/fb7ad059/signature.pgp
From manlio_perillo at libero.it  Mon Sep 25 15:12:46 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Sep 25 15:09:58 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
In-Reply-To: <20060925215244.3934ed42@tron.foobar.homeunix.org>
References: <45180CB2.8080405@libero.it>
	<20060925215244.3934ed42@tron.foobar.homeunix.org>
Message-ID: <4518383E.10807@libero.it>

Adrian Perez ha scritto:
> On Mon, 25 Sep 2006 19:06:58 +0200
> Manlio Perillo <manlio_perillo@libero.it> wrote:
> 
>> Is it possible (and how) to generate XHTML documents without extra
>> whitespaces?
> 
> No pun intended, just being curious: Do you want that feature for
> something else than saving a small amount of bandwidth? 

No, I want this feature to avoid possible problems with whitespaces.

> I would prefer
> generation of properly-indented XHTML as an option, which helps
> debugging -- but one can always call tidylib from the renderHTTP()
> method ;-)
> 


No, please.
This can kill the server...



Regards  Manlio Perillo

From moebius.lists at gmail.com  Mon Sep 25 15:32:59 2006
From: moebius.lists at gmail.com (Adrian Perez)
Date: Mon Sep 25 15:32:28 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
In-Reply-To: <4518383E.10807@libero.it>
References: <45180CB2.8080405@libero.it>
	<20060925215244.3934ed42@tron.foobar.homeunix.org>
	<4518383E.10807@libero.it>
Message-ID: <20060925223259.28131b47@tron.foobar.homeunix.org>

On Mon, 25 Sep 2006 22:12:46 +0200
Manlio Perillo <manlio_perillo@libero.it> wrote:

> Adrian Perez ha scritto:
> > On Mon, 25 Sep 2006 19:06:58 +0200
> > Manlio Perillo <manlio_perillo@libero.it> wrote:
> > 
> >> Is it possible (and how) to generate XHTML documents without extra
> >> whitespaces?
> > 
> > No pun intended, just being curious: Do you want that feature for
> > something else than saving a small amount of bandwidth? 
> 
> No, I want this feature to avoid possible problems with whitespaces.

Now I see the point... and now I realize that feature would make some
of my template more readable. Unfortunately I don't know how to
generate code without whitespaces, sorry :-\ 

> > I would prefer
> > generation of properly-indented XHTML as an option, which helps
> > debugging -- but one can always call tidylib from the renderHTTP()
> > method ;-) 
> 
> No, please.
> This can kill the server...

Of course performance would be like a pain in the ass, but I sometimes
do that when checking generated code ?by hand?, but *only* when
debugging ;-P

Cheers,

-- 
I'd like to meet the man who invented sex and see what he's working on
now.


-- 
"Experience is what you get when you don't get what you want"
                                           -- (Dan Stanford)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060925/3297f6ce/signature.pgp
From p.mayers at imperial.ac.uk  Tue Sep 26 14:29:42 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue Sep 26 14:29:51 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
In-Reply-To: <20060925215244.3934ed42@tron.foobar.homeunix.org>
References: <45180CB2.8080405@libero.it>
	<20060925215244.3934ed42@tron.foobar.homeunix.org>
Message-ID: <45197FA6.3060507@imperial.ac.uk>

Adrian Perez wrote:
> On Mon, 25 Sep 2006 19:06:58 +0200
> Manlio Perillo <manlio_perillo@libero.it> wrote:
> 
>> Is it possible (and how) to generate XHTML documents without extra
>> whitespaces?
> 
> No pun intended, just being curious: Do you want that feature for
> something else than saving a small amount of bandwidth? I would prefer

Whitespace IS SIGNIFICANT in xhtml. You cannot just add it anywhere you 
want, like in prior versions of HTML

In answer to the original posters question, stan and appropriately 
formatted disk xhtml templates work in my experience? What exactly is 
not working?

From markus at bluegap.ch  Tue Sep 26 14:41:50 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Tue Sep 26 14:42:01 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <op.tgf3r7z53oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <20060925153814.1717.885910867.divmod.quotient.59655@ohm>	<451810DB.4040300@bluegap.ch>
	<op.tgf3r7z53oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <4519827E.2080502@bluegap.ch>

Hi,

your answer was quite a 'hammer' for me. I've slept over it and though a 
lot about it. Up until now I've been a firm believer in the 'render each 
URL segment as a child of another segment'. Especially with HTML::Mason, 
I've done quite some websites, which follow that architectural 
principle. Thus questioning that is quite hard for me.

Anyway, I'm willing to learn. And I like to question things, so I have 
decided not to give up, but to try to do it the nevow way (yes, without 
that ContainerPage thing).

Thus I think neither Valentino's efforts nor yours are all wasted. And I 
hope he, you or other nevow hackers still has enough patience to answer 
my questions.

L. Daniel Burr wrote:
> For an example of how awful this kind of design strategy is, please Google
> for anything involving Zope Acquisition.  It ends up as a nightmare of
> complexity, and the Zope guys got rid of it after a lot of painful 
> real-world experience.

The FAQ for Zope 3 [1] says: "I expect implicit acquisition to fade from 
usage. Acquisition will still be important, but will be more explicit, 
more predictable, and ultimately, more useful."

"The use of acquisition has been severely narrowed in Zope 3." says the 
Wiki Page about Zope in [2], but unfortunately no reason is given.

The Zope wiki has three links from 'AcquisitionMadness' in [3], two of 
them descripbe acquisition, (mostly saying it's powerful but complex), 
the third is called 'AcquisitionProblems', but it states right at the 
beginning, that the problem 'was fixed'.

So unfortunately, I'm still unclear about what's so awful about it. 
Honestly, I also have to admit that I don't completely understand what 
Acquisition exactly is in Zope.

> I agree the concept is simple, and I understand why so many people find it
> tempting.  This is why we have WSGI (another bad idea IMO), and various
> implementations of "render each URL segment as a child of another segment".

Yes, most people like simple concepts. The question is: does it 
over-simplify? Does it make other things impossible or overly complex?

Above, you state that it "ends up as a nightmare of complexity". But I 
don't see how WSGI (or other implementations) would make anything else 
more complex. A discussion about problems with WSGI in [4] brings up:

- a missing base wsgi package
- slow when servinc static files

I agree with the writer, that serving static files via WSGI is a pain. 
But it can easily be circumvented with a reverse proxy or by letting the 
server (apache) serve static files.

> Again, I think this is terrible.  All you've done is inflict the hell of
> an arbitrary number of server-side includes into the rendering process.

What harm does that do? It's not like that number is growing 
exponentially. In contrast to CPUs, the 'processing power' of template 
designers is not growing steadily.

> I'm sorry, but I don't, and I feel very strongly that attempts to provide
> this kind of rendering strategy within nevow are misguided.  Twisted does
> provide WSGI support, via web2; please consider implementing this as some
> kind of WSGI rendering component, so that you can leverage the behavior
> you desire without promoting this style of coding within nevow itself.

Okay, okay, I won't. I want to learn the nevow way (and why it's 
superior). Please help me with that (see [5]).

Regards

Markus


[1]: Zope 3 FAQ:
http://www.zope.org/Wikis/DevSite/Projects/ComponentArchitecture/FAQ

[2]: Wikipedia about Zope:
http://en.wikipedia.org/wiki/Zope

[3]: http://www.zope.org/Wikis/zope-dev/AcquisitionMadness

[4]: Problems with WSGI:
http://lucumr.pocoo.org/entry/wsgi-and-the-unsolved-problems/

[5]: My current pages.py code.

Hopefully a more nevow-like approach: based on the 'render_switch' I do 
turn on or off certain parts of the template (the docFactory of the 
BasePage). I'm currently only using one template, but I could easily 
split and use macros to include them, as Valentino taught me.

I'm tempted to write a docFactory which compiles a template from 
multiple files, instead of using macros. That could automatically 
include all the 'switches' in the template and the designer would not 
have to hard-wire all children by hand. This would already serve my 
needs, I guess. Would this still count as 'nevow like' or is it a no-no-no?


from nevow import rend, loaders, tags as T, inevow, static

class BasePage(rend.Page):
     docFactory = loaders.xmlfile('templates/common.html')
     title = 'per page title'
     main_menu = 1

     def render_title(self, ctx, data):
         ctx.fillSlots('title', self.title)
         return ctx

     def render_switch(self, attr):
         assert(attr is not None)
         def _(ctx, data):
             if hasattr(self, attr) and self.__getattribute__(attr):
                 return ctx
             else:
                 return ()
         return _

class ContactInfoPage(BasePage):
     pass

class ContactPage(BasePage):
     addSlash = True
     child_info = ContactInfoPage

class ProductsPage(BasePage):
     addSlash = True
     products = True

class EnterPage(BasePage):
     pass

class RootPage(BasePage):
     addSlash = True
     default_background = 1
     main_menu = 0
     child_kontakt = ContactPage
     child_products = ProductsPage

     child_layout = static.File('layout')
     child_enter = EnterPage()


The template has lots of blocks like that one here:

       <nevow:invisible nevow:render="switch products">
         <div id="products"><img src="..." border="0" /></div>
       </nevow:invisible>



From manlio_perillo at libero.it  Tue Sep 26 14:57:50 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Sep 26 14:55:01 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
In-Reply-To: <45197FA6.3060507@imperial.ac.uk>
References: <45180CB2.8080405@libero.it>	<20060925215244.3934ed42@tron.foobar.homeunix.org>
	<45197FA6.3060507@imperial.ac.uk>
Message-ID: <4519863E.7070905@libero.it>

Phil Mayers ha scritto:
> Adrian Perez wrote:
>> On Mon, 25 Sep 2006 19:06:58 +0200
>> Manlio Perillo <manlio_perillo@libero.it> wrote:
>>
>>> Is it possible (and how) to generate XHTML documents without extra
>>> whitespaces?
>>
>> No pun intended, just being curious: Do you want that feature for
>> something else than saving a small amount of bandwidth? I would prefer
> 
> Whitespace IS SIGNIFICANT in xhtml. You cannot just add it anywhere you
> want, like in prior versions of HTML
> 
> In answer to the original posters question, stan and appropriately
> formatted disk xhtml templates work in my experience? 

Is this a question? ;-)

> What exactly is
> not working?
> 

One "problem" is with <n:invisible>:

this template:

      <label>label:
        <select name="a_name" n:render="sequence"
                n:data="a_list">
          <option n:pattern="item">
            <n:invisible n:render="string" n:data="0" />
            <n:attr name="label" n:render="string" n:data="1" />
          </option>
        </select>
      </label>

gives a:

      <label>label:
        <select name="a_name"><option label="a_label">

            1

          </option><option label="another_label">
            2

          </option></select>
      </label>



I'm not having problems (now), I was just curious.




Regards  Manlio Perillo

From ldanielburr at mac.com  Tue Sep 26 15:47:00 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue Sep 26 15:47:19 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4519827E.2080502@bluegap.ch>
References: <20060925153814.1717.885910867.divmod.quotient.59655@ohm>
	<451810DB.4040300@bluegap.ch>
	<op.tgf3r7z53oj628@l-daniel-burrs-powerbook-g4-17.local>
	<4519827E.2080502@bluegap.ch>
Message-ID: <op.tgh6omqn3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Tue, 26 Sep 2006 14:41:50 -0500, Markus Schiltknecht  
<markus@bluegap.ch> wrote:

> Hi,
>
> your answer was quite a 'hammer' for me. I've slept over it and though a  
> lot about it. Up until now I've been a firm believer in the 'render each  
> URL segment as a child of another segment'. Especially with HTML::Mason,  
> I've done quite some websites, which follow that architectural  
> principle. Thus questioning that is quite hard for me.
>

My apologies if my tone was too harsh, but I have some pretty deep-seated
opinions about web application design, and I tend to express them with a
certain degree of fervor.  No offense intended.

> Anyway, I'm willing to learn. And I like to question things, so I have  
> decided not to give up, but to try to do it the nevow way (yes, without  
> that ContainerPage thing).
>
> Thus I think neither Valentino's efforts nor yours are all wasted. And I  
> hope he, you or other nevow hackers still has enough patience to answer  
> my questions.
>

I really appreciate you taking the criticsm so positively, that's a really
excellent response, and one I should practice more often myself.

I'm a bit busy today, but I will respond in greater length about why I do
not care for the "every URL segment is a template" design approach, and
what I prefer to do instead.

Also, thanks for actually reading up on Zope Acquisition and WSGI issues;
I'll try to explain where I think they go wrong.

L. Daniel Burr

From p.mayers at imperial.ac.uk  Tue Sep 26 17:39:12 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue Sep 26 17:39:20 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
In-Reply-To: <4519863E.7070905@libero.it>
References: <45180CB2.8080405@libero.it>	<20060925215244.3934ed42@tron.foobar.homeunix.org>	<45197FA6.3060507@imperial.ac.uk>
	<4519863E.7070905@libero.it>
Message-ID: <4519AC10.3090605@imperial.ac.uk>

Manlio Perillo wrote:
> 
> this template:
> 
>       <label>label:
>         <select name="a_name" n:render="sequence"
>                 n:data="a_list">
>           <option n:pattern="item">
>             <n:invisible n:render="string" n:data="0" />
>             <n:attr name="label" n:render="string" n:data="1" />
>           </option>
>         </select>
>       </label>

> gives a:
> 
>       <label>label:
>         <select name="a_name"><option label="a_label">
> 
>             1
> 
>           </option><option label="another_label">

Erm - yes. Because your template has whitespace in it. Remove it and it 
should work - that is:

<label>label:<select name="a_name" n:render="sequence" 
n:data="a_list"><option n:pattern="item">...

From dialtone at divmod.com  Tue Sep 26 17:42:54 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Sep 26 17:42:57 2006
Subject: [Twisted-web] fragments with child lookup
In-Reply-To: <4519827E.2080502@bluegap.ch>
Message-ID: <20060926224254.1717.1064380235.divmod.quotient.61017@ohm>

On Tue, 26 Sep 2006 21:41:50 +0200, Markus Schiltknecht <markus@bluegap.ch> wrote:
>Thus I think neither Valentino's efforts nor yours are all wasted. And I 
>hope he, you or other nevow hackers still has enough patience to answer my 
>questions.

We always have, although we are a bunch of assholes too. :).

>I'm tempted to write a docFactory which compiles a template from multiple 
>files, instead of using macros. That could automatically include all the 
>'switches' in the template and the designer would not have to hard-wire all 
>children by hand. This would already serve my needs, I guess. Would this 
>still count as 'nevow like' or is it a no-no-no?

This is indeed more nevow-like. When you are in doubt try to work at the 
lowest level possible because the new behavior will be inherited by the upper 
layers (that's why I was suggesting to work at the template layer before).


>from nevow import rend, loaders, tags as T, inevow, static
>
>class BasePage(rend.Page):
>     docFactory = loaders.xmlfile('templates/common.html')
>     title = 'per page title'
>     main_menu = 1
>
>     def render_title(self, ctx, data):
>         ctx.fillSlots('title', self.title)
>         return ctx

ctx.tag.fillSlots(...)
return ctx.tag

>     def render_switch(self, attr):
>         assert(attr is not None)
>         def _(ctx, data):
>             if hasattr(self, attr) and self.__getattribute__(attr):

It's not clear to me what this is for. but in general it's never a good
idea to use special methods directly. In this case you could have done:

getattr(self, attr, default_value)

>                 return ctx

Again: ctx.tag

>             else:
>                 return ()
>         return _
>
>class ContactInfoPage(BasePage):
>     pass
>
>class ContactPage(BasePage):
>     addSlash = True
>     child_info = ContactInfoPage

def child_info(self, ctx):
    return ContactInfoPage()

>class ProductsPage(BasePage):
>     addSlash = True
>     products = True
>
>class EnterPage(BasePage):
>     pass
>
>class RootPage(BasePage):
>     addSlash = True
>     default_background = 1
>     main_menu = 0
>     child_kontakt = ContactPage
>     child_products = ProductsPage
>
>     child_layout = static.File('layout')
>     child_enter = EnterPage()

Same as above, define functions instead.

From manlio_perillo at libero.it  Tue Sep 26 17:56:21 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Sep 26 17:53:30 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
In-Reply-To: <4519AC10.3090605@imperial.ac.uk>
References: <45180CB2.8080405@libero.it>	<20060925215244.3934ed42@tron.foobar.homeunix.org>	<45197FA6.3060507@imperial.ac.uk>	<4519863E.7070905@libero.it>
	<4519AC10.3090605@imperial.ac.uk>
Message-ID: <4519B015.90006@libero.it>

Phil Mayers ha scritto:
> Manlio Perillo wrote:
>>
>> this template:
>>
>>       <label>label:
>>         <select name="a_name" n:render="sequence"
>>                 n:data="a_list">
>>           <option n:pattern="item">
>>             <n:invisible n:render="string" n:data="0" />
>>             <n:attr name="label" n:render="string" n:data="1" />
>>           </option>
>>         </select>
>>       </label>
> 
>> gives a:
>>
>>       <label>label:
>>         <select name="a_name"><option label="a_label">
>>
>>             1
>>
>>           </option><option label="another_label">
> 
> Erm - yes. Because your template has whitespace in it. Remove it and it
> should work - that is:
>
> <label>label:<select name="a_name" n:render="sequence"
> n:data="a_list"><option n:pattern="item">...
> 
>


Ok, but I would like to have a readable template...
This is the reason why I'm asking if it is possible to remove extra
extra whitespaces.


Regards  Manlio Perillo

From sam at spinwardstars.com  Wed Sep 27 09:35:07 2006
From: sam at spinwardstars.com (Samuel Reynolds)
Date: Wed Sep 27 09:35:29 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
Message-ID: <7.0.0.16.0.20060927083459.01f924c8@myedl.com>

At 04:56 PM 9/26/2006, you wrote:
>Phil Mayers ha scritto:
> > Manlio Perillo wrote:
> >>
> >> this template:
> >>
> >>       <label>label:
> >>         <select name="a_name" n:render="sequence"
> >>                 n:data="a_list">
> >>           <option n:pattern="item">
> >>             <n:invisible n:render="string" n:data="0" />
> >>             <n:attr name="label" n:render="string" n:data="1" />
> >>           </option>
> >>         </select>
> >>       </label>
> >
> >> gives a:
> >>
> >>       <label>label:
> >>         <select name="a_name"><option label="a_label">
> >>
> >>             1
> >>
> >>           </option><option label="another_label">
> >
> > Erm - yes. Because your template has whitespace in it. Remove it and it
> > should work - that is:
> >
> > <label>label:<select name="a_name" n:render="sequence"
> > n:data="a_list"><option n:pattern="item">...
> >
> >
>
>
>Ok, but I would like to have a readable template...
>This is the reason why I'm asking if it is possible to remove extra

Maybe do a simple regex cleanup before you use the template.
Something like the following, which removes whitespace between
 > and <, if the whitespace begins with a newline:

    import re
    ...
    RE_removeFreeWhitespace = re.compile( r'>[\n\r]+\s*<' )
    def removeFreeWhitespace( S ):
       return RE_removeFreeWhitespace.sub( r'><', S )
    ...
    templateString = removeFreeWhitespace( templateString )

- Sam



From corydodt at gmail.com  Wed Sep 27 11:50:39 2006
From: corydodt at gmail.com (Cory Dodt)
Date: Wed Sep 27 11:50:42 2006
Subject: [Twisted-web] [Nevow] how to generate XHMTL without whitespaces
In-Reply-To: <7.0.0.16.0.20060927083459.01f924c8@myedl.com>
References: <7.0.0.16.0.20060927083459.01f924c8@myedl.com>
Message-ID: <c16a94ff0609270950x75c4de04n6d67586825967876@mail.gmail.com>

Also, only *some* of the whitespace is significant.  The whitespace inside
<> is not.  That leaves open the possibility of something like this:

<foo bar="1"><
 baz bam="2' /><
 /foo>

Which at least has the virtue of wrapping ln less than 80 columns.  I
frequently format things this way, but I'm sure not everyone will agree that
that is more readable.

C

On 9/27/06, Samuel Reynolds <sam@spinwardstars.com> wrote:
>
> At 04:56 PM 9/26/2006, you wrote:
> >Phil Mayers ha scritto:
> > > Manlio Perillo wrote:
> > >>
> > >> this template:
> > >>
> > >>       <label>label:
> > >>         <select name="a_name" n:render="sequence"
> > >>                 n:data="a_list">
> > >>           <option n:pattern="item">
> > >>             <n:invisible n:render="string" n:data="0" />
> > >>             <n:attr name="label" n:render="string" n:data="1" />
> > >>           </option>
> > >>         </select>
> > >>       </label>
> > >
> > >> gives a:
> > >>
> > >>       <label>label:
> > >>         <select name="a_name"><option label="a_label">
> > >>
> > >>             1
> > >>
> > >>           </option><option label="another_label">
> > >
> > > Erm - yes. Because your template has whitespace in it. Remove it and
> it
> > > should work - that is:
> > >
> > > <label>label:<select name="a_name" n:render="sequence"
> > > n:data="a_list"><option n:pattern="item">...
> > >
> > >
> >
> >
> >Ok, but I would like to have a readable template...
> >This is the reason why I'm asking if it is possible to remove extra
>
> Maybe do a simple regex cleanup before you use the template.
> Something like the following, which removes whitespace between
> > and <, if the whitespace begins with a newline:
>
>     import re
>     ...
>     RE_removeFreeWhitespace = re.compile( r'>[\n\r]+\s*<' )
>     def removeFreeWhitespace( S ):
>        return RE_removeFreeWhitespace.sub( r'><', S )
>     ...
>     templateString = removeFreeWhitespace( templateString )
>
> - Sam
>
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060927/4807d423/attachment-0001.htm
From manlio_perillo at libero.it  Fri Sep 29 15:45:07 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Sep 29 15:42:22 2006
Subject: [Twisted-web] _win32stdio
Message-ID: <451D85D3.1000707@libero.it>

Just to know: who wrote this module?

On my system it simply does not works...
I don't understand why you do not use the Console API.

There are specific reasons for why _win32stdio should be attached at
something else that is not a Console Handle?




Thanks and regards  Manlio Perillo


From glyph at divmod.com  Fri Sep 29 15:57:18 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Sep 29 15:57:19 2006
Subject: [Twisted-web] _win32stdio
In-Reply-To: <451D85D3.1000707@libero.it>
Message-ID: <20060929205718.1717.1293914744.divmod.quotient.63283@ohm>

On Fri, 29 Sep 2006 22:45:07 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:

>There are specific reasons for why _win32stdio should be attached at
>something else that is not a Console Handle?

Yes.  The stdio module is primarily designed for a subprocess spawned with spawnProcess to talk to its parent over pipes.  As I understand it, providing access to the win32 console using the same mechanism would effectively involve writing a terminal emulator.

If you want to use the win32 console, you'll need to use a module specifically for doing that, not Twisted.

From manlio_perillo at libero.it  Fri Sep 29 16:19:23 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Sep 29 16:16:32 2006
Subject: [Twisted-web] _win32stdio
In-Reply-To: <20060929205718.1717.1293914744.divmod.quotient.63283@ohm>
References: <20060929205718.1717.1293914744.divmod.quotient.63283@ohm>
Message-ID: <451D8DDB.8040800@libero.it>

glyph@divmod.com ha scritto:
> On Fri, 29 Sep 2006 22:45:07 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
> 
>> There are specific reasons for why _win32stdio should be attached at
>> something else that is not a Console Handle?
> 
> Yes.  The stdio module is primarily designed for a subprocess spawned
> with spawnProcess to talk to its parent over pipes. 


That is, web2.channel.cgi?

> As I understand it,
> providing access to the win32 console using the same mechanism would
> effectively involve writing a terminal emulator.
> 

I think this is really needed, because the conch script needs this to be
portable to Windows.

> If you want to use the win32 console, you'll need to use a module
> specifically for doing that, not Twisted.
> 

Nobody is interested in writing a generic interface to a terminal,
working on both POSIX and Windows?



Regards  Manlio Perillo


From glyph at divmod.com  Fri Sep 29 16:36:17 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Sep 29 16:36:19 2006
Subject: [Twisted-web] _win32stdio
In-Reply-To: <451D8DDB.8040800@libero.it>
Message-ID: <20060929213617.1717.1725510934.divmod.quotient.63305@ohm>

On Fri, 29 Sep 2006 23:19:23 +0200, Manlio Perillo <manlio_perillo@libero.it> wrote:
>glyph@divmod.com ha scritto:

>> Yes.  The stdio module is primarily designed for a subprocess spawned
>> with spawnProcess to talk to its parent over pipes.

>That is, web2.channel.cgi?

That's one use of this functionality, yes.

>Nobody is interested in writing a generic interface to a terminal,
>working on both POSIX and Windows?

Personally, I'd just use PuTTY if I wanted a terminal supported by Twisted on Windows.

But it sounds like you're interested.  I look forward to seeing your patches :).

From manlio_perillo at libero.it  Fri Sep 29 17:02:23 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri Sep 29 16:59:29 2006
Subject: [Twisted-web] _win32stdio
In-Reply-To: <20060929213617.1717.1725510934.divmod.quotient.63305@ohm>
References: <20060929213617.1717.1725510934.divmod.quotient.63305@ohm>
Message-ID: <451D97EF.5040207@libero.it>

glyph@divmod.com ha scritto:
> On Fri, 29 Sep 2006 23:19:23 +0200, Manlio Perillo
> <manlio_perillo@libero.it> wrote:
>> glyph@divmod.com ha scritto:
> 
>>> Yes.  The stdio module is primarily designed for a subprocess spawned
>>> with spawnProcess to talk to its parent over pipes.
> 
>> That is, web2.channel.cgi?
> 
> That's one use of this functionality, yes.
> 

As I can see this is the only use.
stdio is used only in web2 and conch (but only for terminal input, if
I'm not wrong).

>> Nobody is interested in writing a generic interface to a terminal,
>> working on both POSIX and Windows?
> 
> Personally, I'd just use PuTTY if I wanted a terminal supported by
> Twisted on Windows.
> 

And why not openssh on a Posix system?
I think that if Twisted offers something, this should be portable, if
possible.

> But it sounds like you're interested.  I look forward to seeing your
> patches :).
> 

It will take some time ;-).




Regards  Manlio Perillo

From p.mayers at imperial.ac.uk  Sat Sep 30 18:14:14 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat Sep 30 18:14:19 2006
Subject: [Twisted-web] DOM manipulation in an athena widget
Message-ID: <451EFA46.1070901@imperial.ac.uk>

Following on from my post of a couple of weeks ago, I'm rendering a 
*large* (~150 editable fields) form for a CRUD application and am 
wanting client-side processing of incremental updates to said form, 
since round-tripping adds considerable delay to the user experience.

I'm sending the form as a table with appropriate athena:handler defined. 
On a mouse click, the athena:handler replaces the <span> containing the 
text with an <input type="text" /> or other control as appropriate.

What I'm then trying to do is hook up an event handler to onBlur (or 
whatever) to compare the old and new values, set a dirty flag and enable 
the "save" button.

I couldn't find a way to do this with the Divmod.NotQuiteMochiKit 
packages (indeed, they seem wedded to innerHTML), so I whacked MochiKit 
in the page header and tried this:

class Frag(athena.LiveFragment):
   jsModule = u"db.Record"
   docFactory = loaders.stan(
     T.table(render=T.directive('sequence'), data=T.directive('sql'))[
       T.tr(pattern='item', render=T.directive('mapping'))[
         T.td[T.slot(name='fieldName')],
         T.td[
           athena.handler(event='onclick', handler='editField'),
           T.span[T.slot(name='fieldValue')],
         ], # end of td
       ], # end of tr
     ])

...and the jsmodule has:

db.Record.methods(
   function editField(self, node, event) {
     if (node.inEdit) return false;
     /* make the textbox */
     var tb = INPUT({'type': 'text', 'value': scrapeText(node)});
     /* swap the span for a textbox */
     replaceChildNodes(
       getElementsByTagAndClassName('span', null, node)[0], tb
     );

     /* THIS FAILS */
     connect(tb, 'onblur', self.saveField);

     return false;
   });

The nevow debug console thing logs "self has no properties" - what is 
self in this context of a widget method/event call? Why does it have no 
properties?

Absent a more complete set of DOM and event handling functions, and 
given whatever the (to me) unfathomable incompatibility with Mochi and 
the Divmod runtime is, how does one attach event handlers to client-side 
created DOM nodes? Are the events normalised cross-browser as they are 
in Mochi? There's an "xbevent" function in one of the examples that 
indicates not?

Suggestions welcome. Sorry for abruptness of mail, workrave is nagging 
me to stop typing...

From exarkun at divmod.com  Sat Sep 30 18:36:28 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Sep 30 18:36:29 2006
Subject: [Twisted-web] DOM manipulation in an athena widget
In-Reply-To: <451EFA46.1070901@imperial.ac.uk>
Message-ID: <20060930233628.1717.1503593566.divmod.quotient.63983@ohm>

On Sun, 01 Oct 2006 00:14:14 +0100, Phil Mayers <p.mayers@imperial.ac.uk> wrote:
> [snip]
>
>db.Record.methods(
>   function editField(self, node, event) {
>     if (node.inEdit) return false;
>     /* make the textbox */
>     var tb = INPUT({'type': 'text', 'value': scrapeText(node)});
>     /* swap the span for a textbox */
>     replaceChildNodes(
>       getElementsByTagAndClassName('span', null, node)[0], tb
>     );
>
>     /* THIS FAILS */
>     connect(tb, 'onblur', self.saveField);
>
>     return false;
>   });
>
>The nevow debug console thing logs "self has no properties" - what is self 
>in this context of a widget method/event call? Why does it have no 
>properties?

Athena doesn't automatically bind methods to instances, unfortunately.  This
means when the onblur handler is invoked, saveField will be invoked without
any reference to the widget it came from.  Athena will let this happen, but
self won't be bound properly.  Try connecting this instead:

    function() { self.saveField(); }

Jean-Paul

From glyph at divmod.com  Sat Sep 30 18:38:54 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Sat Sep 30 18:38:56 2006
Subject: [Twisted-web] DOM manipulation in an athena widget
In-Reply-To: <451EFA46.1070901@imperial.ac.uk>
Message-ID: <20060930233854.1717.1999771214.divmod.quotient.63984@ohm>

On Sun, 01 Oct 2006 00:14:14 +0100, Phil Mayers <p.mayers@imperial.ac.uk> wrote:

>What I'm then trying to do is hook up an event handler to onBlur (or 
>whatever) to compare the old and new values, set a dirty flag and enable the 
>"save" button.

>I couldn't find a way to do this with the Divmod.NotQuiteMochiKit packages 

I assume you're talking about Divmod.Runtime?

>(indeed, they seem wedded to innerHTML), so I whacked MochiKit in the page 
>header and tried this:

Some parts of the Divmod infrastructure still use MochiKit.  We're trying to remove this dependency in the future to allow Nevow users to use whatever version of MochiKit they like, but at least for the time being you can get to the version of MochiKit distributed with Nevow by putting an "//import MochiKit.Whatever" statement at the top of your JS module.

>class Frag(athena.LiveFragment):
>   jsModule = u"db.Record"
>   docFactory = loaders.stan(
>     T.table(render=T.directive('sequence'), data=T.directive('sql'))[
>       T.tr(pattern='item', render=T.directive('mapping'))[
>         T.td[T.slot(name='fieldName')],
>         T.td[
>           athena.handler(event='onclick', handler='editField'),
>           T.span[T.slot(name='fieldValue')],
>         ], # end of td
>       ], # end of tr
>     ])

I don't see a render=T.directive("liveFragment") anywhere, so this fragment is going to be complete garbage by the time it reaches the client.  There really ought to be a warning or something but it's a hard thing for the infrastructure to inspect.

>...and the jsmodule has:
>
>db.Record.methods(
>   function editField(self, node, event) {
>     if (node.inEdit) return false;
>     /* make the textbox */
>     var tb = INPUT({'type': 'text', 'value': scrapeText(node)});
>     /* swap the span for a textbox */
>     replaceChildNodes(
>       getElementsByTagAndClassName('span', null, node)[0], tb
>     );
>
>     /* THIS FAILS */
>     connect(tb, 'onblur', self.saveField);
>
>     return false;
>   });
>
>The nevow debug console thing logs "self has no properties" - what is self 
>in this context of a widget method/event call?

It *should* be an instance of db.Record in this case.

>Why does it have no properties?

I am not completely sure but I have a few theories:

 * You didn't include the appropriate render directive to set up the widget.
 * You didn't set 'self.saveField = XXX' anywhere.
 * You stomped on the version of MochiKit that Divmod was using internally.

>Absent a more complete set of DOM and event handling functions, and given 
>whatever the (to me) unfathomable incompatibility with Mochi and the Divmod 
>runtime is, how does one attach event handlers to client-side created DOM 
>nodes? Are the events normalised cross-browser as they are in Mochi? There's 
>an "xbevent" function in one of the examples that indicates not?

The major "incompatibility" is that it's a huge cost to pay on top of the already too-large Divmod runtime.  We're trying to reduce the dependency so that we don't require all users to pay that cost.  However, far from being incompatible, Nevow *includes* a lightly modified version of MochiKit, and will probably continue to so that you can use it as a "divmod module" in Athena applications, even after the Athena core no longer uses it.


From glyph at divmod.com  Sat Sep 30 18:40:22 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Sat Sep 30 18:40:23 2006
Subject: [Twisted-web] DOM manipulation in an athena widget
In-Reply-To: <20060930233628.1717.1503593566.divmod.quotient.63983@ohm>
Message-ID: <20060930234022.1717.1656743033.divmod.quotient.63985@ohm>

On Sat, 30 Sep 2006 19:36:28 -0400, Jean-Paul Calderone <exarkun@divmod.com> wrote:
>On Sun, 01 Oct 2006 00:14:14 +0100, Phil Mayers <p.mayers@imperial.ac.uk> 
>wrote:

>Athena doesn't automatically bind methods to instances, unfortunately.  This
>means when the onblur handler is invoked, saveField will be invoked without
>any reference to the widget it came from.  Athena will let this happen, but
>self won't be bound properly.  Try connecting this instead:
>
>    function() { self.saveField(); }

Ignore my theories, this is the correct explanation.

From glyph at divmod.com  Sat Sep 30 18:43:07 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Sat Sep 30 18:43:08 2006
Subject: [Twisted-web] DOM manipulation in an athena widget
In-Reply-To: <20060930233854.1717.1999771214.divmod.quotient.63984@ohm>
Message-ID: <20060930234307.1717.700290949.divmod.quotient.63987@ohm>



On Sat, 30 Sep 2006 19:38:54 -0400, glyph@divmod.com wrote:
>On Sun, 01 Oct 2006 00:14:14 +0100, Phil Mayers <p.mayers@imperial.ac.uk> 
>wrote:

>I assume you're talking about Divmod.Runtime?
>>(indeed, they seem wedded to innerHTML), so I whacked MochiKit in the page 
>>header and tried this:
>
>Some parts of the Divmod infrastructure still use MochiKit.  

Ahem.  I am confused.  This dependency is in *Mantissa*, not Nevow, and the version of MochiKit there will only conflict with you if you're using chunks of Mantissa which import it.

So technically this sentence here is correct, "some parts of the Divmod infrastructure" do still use MochiKit.  But there were several others which were not.

