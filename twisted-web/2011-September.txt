From schenette at gmail.com  Thu Sep  1 02:34:12 2011
From: schenette at gmail.com (Stephan)
Date: Wed, 31 Aug 2011 23:34:12 -0700
Subject: [Twisted-web] using @defer.inlineCallbacks and yield correctly
Message-ID: <CADozHMXLhaHPO4OVJN4ee=hdi+RYhdXQ-eSLcz0wdUbc08aa+A@mail.gmail.com>

I'm sending this email to separate out the two issues I'm having to
gain a better understanding of how to properly code what I'm
attempting to do.

I'd like to use spawnProcess to spawn a process but with a timeout. If
the timeout is reached I'd like to kill the process. You can see in
the error section that I'm getting an error with defer and no yield. I
was hoping someone could tell me what my code is supposed to do that
it's not doing so that I can stop getting the error found at the
bottom.

from what I understand  @defer.inlineCallbacks is used to defer a
async callback function like how i'm using CallLater below, but where
is the yield supposed to be? and how should the below code change?

========================
Code
========================

        command = "xvfb-run --auto-servernum firefox -P %s" % profile_id
        logging.debug("command: %s", command)
        args = shlex.split(command)

        self.pp = TimedProcessProtocol(self, 100)
        subprocess = reactor.spawnProcess(self.pp, args[0], args, env
= os.environ, usePTY=1)
        logging.debug("spawned a process: pid: %d", subprocess.pid)
        self.pid = subprocess.pid

========================
ProcessProtocol Class
========================

class TimedProcessProtocol(protocol.ProcessProtocol):

    def __init__(self, firefoxProcess, timeout):
        self.timeout = timeout
        self.firefoxProcess = firefoxProcess
        self.killed = None

    def isProcessDead(self):
        logging.debug("isProcessDead called")
        if self.killed is None:
            return False
        else:
            logging.debug("process is dead!!__________")
            return True

    def killProcessIfAlive(self):
        logging.debug("killProcessIfAlive called")
        #@defer.inlineCallbacks
        try:
            #yield self.transport.signalProcess('KILL')
            if self.killed is None:
                os.kill(-self.transport.pid, signal.SIGTERM)
        except error.ProcessExitedAlready:
            logging.debug("process already exited")
            pass

    def connectionMade(self):
        logging.debug("connection made timeout = %d", self.timeout)
        @defer.inlineCallbacks
        def onTimer():
            logging.debug("timeout triggered")
            self.firefoxProcess.handleProcessTimedOut()
            self.killProcessIfAlive()
        d = reactor.callLater(self.timeout, onTimer)


========================
Errors
========================

2011-08-31 12:30:22-0700 [-] Unhandled error in Deferred:
2011-08-31 12:30:22-0700 [-] Unhandled Error
   Traceback (most recent call last):
     File "/usr/lib/python2.6/dist-packages/twisted/internet/base.py",
line 1170, in run
       self.mainLoop()
     File "/usr/lib/python2.6/dist-packages/twisted/internet/base.py",
line 1179, in mainLoop
       self.runUntilCurrent()
     File "/usr/lib/python2.6/dist-packages/twisted/internet/base.py",
line 778, in runUntilCurrent
       call.func(*call.args, **call.kw)
     File "/usr/lib/python2.6/dist-packages/twisted/internet/defer.py",
line 944, in unwindGenerator
       return _inlineCallbacks(None, f(*args, **kwargs), Deferred())
   --- <exception caught here> ---
     File "/usr/lib/python2.6/dist-packages/twisted/internet/defer.py",
line 823, in _inlineCallbacks
3, in _inlineCallbacks
       result = g.send(result)
   exceptions.AttributeError: 'NoneType' object has no attribute 'send'


From rlotun at gmail.com  Thu Sep  1 03:31:27 2011
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 1 Sep 2011 08:31:27 +0100
Subject: [Twisted-web] using @defer.inlineCallbacks and yield correctly
In-Reply-To: <CADozHMXLhaHPO4OVJN4ee=hdi+RYhdXQ-eSLcz0wdUbc08aa+A@mail.gmail.com>
References: <CADozHMXLhaHPO4OVJN4ee=hdi+RYhdXQ-eSLcz0wdUbc08aa+A@mail.gmail.com>
Message-ID: <CAFJezo009VOT6CebT=PNhpZm8vaTzvgHSb1uppx3A9qLLeJmgQ@mail.gmail.com>

Hi Stephan,


> from what I understand  @defer.inlineCallbacks is used to defer a
> async callback function like how i'm using CallLater below, but where
> is the yield supposed to be? and how should the below code change?
>
>
The advantage defer.inlineCallbacks offers is allowing one to wait on the
result of a deferred inline, without having nested blocks and closures.

So a generic example could be:

Without inlinecallbacks:

def my_func():
    d = func_returnning_deferred()
    def handle_result(r):
        # do something with r
        ..
    d.addCallback(handle_result)
    return d

With inlineCallbacks:

@defer.inlineCallbacks
def my_func():
     r = yield func_returning_deferred()
     # do stuff with r

You can see that we don't have to have a nested block with an addCallback.
Here the yield returns the result that we'd get in our callback function (an
likewise if the errBack fired we've have to wrap that line in a try/except
to handle it).

Keep in mind however that @defer.inlineCallbacks can only wrap generators
(functions with a yield statement in it)


>    def connectionMade(self):
>        logging.debug("connection made timeout = %d", self.timeout)
>        @defer.inlineCallbacks
>        def onTimer():
>            logging.debug("timeout triggered")
>            self.firefoxProcess.handleProcessTimedOut()
>            self.killProcessIfAlive()
>        d = reactor.callLater(self.timeout, onTimer)


You can see here that onTimer is not a generator (there's no yield) so
defer.inlineCallbacks cannot be applied to it. Also, based on what you're
doing you don't need it (i.e. you can just remove it).

Keep in mind that callLater doesn't return a deferred - it just schedules
onTimer to be called at a later time, which makes sense for what you are
doing. If for some reason you want a deferred, I'd take a look at
twisted.internet.task.deferLater.

Hope that helps,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   rlotun at twitter.com
@rlotun
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110901/e8879745/attachment.htm 

From schenette at gmail.com  Thu Sep  1 03:39:24 2011
From: schenette at gmail.com (Stephan)
Date: Thu, 1 Sep 2011 00:39:24 -0700
Subject: [Twisted-web] using @defer.inlineCallbacks and yield correctly
In-Reply-To: <CAFJezo009VOT6CebT=PNhpZm8vaTzvgHSb1uppx3A9qLLeJmgQ@mail.gmail.com>
References: <CADozHMXLhaHPO4OVJN4ee=hdi+RYhdXQ-eSLcz0wdUbc08aa+A@mail.gmail.com>
	<CAFJezo009VOT6CebT=PNhpZm8vaTzvgHSb1uppx3A9qLLeJmgQ@mail.gmail.com>
Message-ID: <CADozHMW0Y4W+VT-7kkzcHMhum3mHv6mWqQAQ=0_uSa0W-7_mdA@mail.gmail.com>

thanks Reza,

Can you think of any reason why I would want a deferred in my scenerio?

Stephan

On Thu, Sep 1, 2011 at 12:31 AM, Reza Lotun <rlotun at gmail.com> wrote:
> Hi Stephan,
>>
>> from what I understand ?@defer.inlineCallbacks is used to defer a
>> async callback function like how i'm using CallLater below, but where
>> is the yield supposed to be? and how should the below code change?
>>
>
> The advantage defer.inlineCallbacks offers is allowing one to wait on the
> result of a deferred inline, without having nested blocks and closures.
> So a generic example could be:
> Without inlinecallbacks:
> def my_func():
> ? ? d = func_returnning_deferred()
> ? ? def handle_result(r):
> ? ? ? ? # do something with r
> ? ? ? ? ..
> ? ? d.addCallback(handle_result)
> ? ? return d
> With inlineCallbacks:
> @defer.inlineCallbacks
> def my_func():
> ? ? ?r = yield func_returning_deferred()
> ? ? ?# do stuff with r
> You can see that we don't have to have a nested block with an addCallback.
> Here the yield returns the result that we'd get in our callback function (an
> likewise if the errBack fired we've have to wrap that line in a try/except
> to handle it).
> Keep in mind however that @defer.inlineCallbacks can only wrap generators
> (functions with a yield statement in it)
>
>>
>> ? ?def connectionMade(self):
>> ? ? ? ?logging.debug("connection made timeout = %d", self.timeout)
>> ? ? ? ?@defer.inlineCallbacks
>> ? ? ? ?def onTimer():
>> ? ? ? ? ? ?logging.debug("timeout triggered")
>> ? ? ? ? ? ?self.firefoxProcess.handleProcessTimedOut()
>> ? ? ? ? ? ?self.killProcessIfAlive()
>> ? ? ? ?d = reactor.callLater(self.timeout, onTimer)
>
>
> You can see here that onTimer is not a generator (there's no yield) so
> defer.inlineCallbacks cannot be applied to it. Also, based on what you're
> doing you don't need it (i.e. you can just remove it).
> Keep in mind that callLater doesn't return a deferred - it just schedules
> onTimer to be called at a later time, which makes sense for what you are
> doing. If for some reason you want a deferred, I'd take a look at
> twisted.internet.task.deferLater.
> Hope that helps,
> Reza
> --
> Reza Lotun
> mobile: +44 (0)7521 310 763
> email:? rlotun at gmail.com
> work:?? rlotun at twitter.com
> @rlotun
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>


From p.mayers at imperial.ac.uk  Thu Sep  1 06:01:44 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 01 Sep 2011 11:01:44 +0100
Subject: [Twisted-web] using @defer.inlineCallbacks and yield correctly
In-Reply-To: <CADozHMW0Y4W+VT-7kkzcHMhum3mHv6mWqQAQ=0_uSa0W-7_mdA@mail.gmail.com>
References: <CADozHMXLhaHPO4OVJN4ee=hdi+RYhdXQ-eSLcz0wdUbc08aa+A@mail.gmail.com>	<CAFJezo009VOT6CebT=PNhpZm8vaTzvgHSb1uppx3A9qLLeJmgQ@mail.gmail.com>
	<CADozHMW0Y4W+VT-7kkzcHMhum3mHv6mWqQAQ=0_uSa0W-7_mdA@mail.gmail.com>
Message-ID: <4E5F5808.5040702@imperial.ac.uk>

On 09/01/2011 08:39 AM, Stephan wrote:
> thanks Reza,
>
> Can you think of any reason why I would want a deferred in my scenerio?

Whenever there is a result which isn't available yet, you usually want a 
deferred in Twisted.

In your case, you want a deferred that will give the output of the 
process, or an error if a timeout occurs.

This should really be asked on the main twisted list, not the 
twisted-web list, as it's not web-specific.


From jacek99 at gmail.com  Sat Sep  3 23:28:29 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Sat, 3 Sep 2011 23:28:29 -0400
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
 for twisted.web
In-Reply-To: <CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
Message-ID: <CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>

Hi, I just uploaded CorePost 0.0.5 to PyPi.

CorePost is a REST microframework built on top of the core twisted.web APIs,
providing a Flask-inspired API for building REST applications.

Version 0.0.5 integrates FormEncode for integrated path/form/query argument
validation,
similar to the way Pylons/TurboGears use it.

Example:

from corepost.web import CorePost, validate
from corepost.enums import Http
from formencode import Schema, validators

app = CorePost()

class TestSchema(Schema):
    allow_extra_fields = True
    childId = validators.Regex(regex="^value1|value2$")

@app.route("/validate/<int:rootId>/schema",Http.POST)
@validate(schema=TestSchema)
def postValidateSchema(request,rootId,childId,**kwargs):
    '''Validate using a common schema'''
    return "%s - %s - %s" % (rootId,childId,kwargs)

@app.route("/validate/<int:rootId>/custom",Http.POST)
@validate(childId=validators.Regex(regex="^value1|value2$"))
def postValidateCustom(request,rootId,childId,**kwargs):
    '''Validate using argument-specific validators'
    return "%s - %s - %s" % (rootId,childId,kwargs)


More docs on our site:
https://github.com/jacek99/corepost

Any feedback is welcome

Cheers,
Jacek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110903/5c946d4f/attachment.htm 

From glyph at twistedmatrix.com  Sun Sep  4 00:01:01 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Sep 2011 21:01:01 -0700
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
	for twisted.web
In-Reply-To: <CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
Message-ID: <B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>


On Sep 3, 2011, at 8:28 PM, Jacek Furmankiewicz wrote:

> Any feedback is welcome

Hi Jacek,

Great to see more development going into Twisted-based web stuff! :)

However, I do have one question.  Maybe I'm missing something about the way Flask does things, but it seems very odd to me that the decorators you're using are applied to global functions, rather than instances of an object.  For example, instead of:

app = CorePost()
...
@app.route("/validate/<int:rootId>/schema",Http.POST)
@validate(schema=TestSchema)
def postValidateSchema(request,rootId,childId,**kwargs):
    '''Validate using a common schema'''
    return "%s - %s - %s" % (rootId,childId,kwargs)

You could do:

class MyPost(CorePost):
    @route("/validate/<int:rootId>/schema",Http.POST)
    @validate(schema=TestSchema)
    def postValidateSchema(self,request,rootId,childId,**kwargs):
        '''Validate using a common schema'''
        return "%s - %s - %s" % (rootId,childId,kwargs)

This would allow for re-usable objects; for example, rather than having a "blog article create" API (sorry for the uninspired example, it's late) for your entire site, you would have a "article create" API on a "Blog", which would enable you to have multiple Blog objects (perhaps with different authors, in different permission domains, etc).  This would also make re-using the relevant objects between different applications easier.

In other words, global variables are bad, and this looks like it depends rather heavily on them.

Any thoughts on this?  Am I missing the point?

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110903/3e35bae7/attachment.htm 

From jacek99 at gmail.com  Sun Sep  4 09:09:54 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Sun, 4 Sep 2011 09:09:54 -0400
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
 for twisted.web
In-Reply-To: <B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
Message-ID: <CAGDztiFyyYezHXs7fAZrMyXsoKMzdC8XyaLYi-Moc5N2bgvHCQ@mail.gmail.com>

The point is that I more or less blindly copied the Flask API when starting
on this, due to relative lack of experience with Python :-)
I figured their way must be the Pythonic way and went along with it.

I like your suggestion a lot more, it is definitely more OOP and cleaner.
Expect it to be reworked accordingly in the next release

Cheers
Jacek

On Sun, Sep 4, 2011 at 12:01 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Sep 3, 2011, at 8:28 PM, Jacek Furmankiewicz wrote:
>
> Any feedback is welcome
>
>
> Hi Jacek,
>
> Great to see more development going into Twisted-based web stuff! :)
>
> However, I do have one question.  Maybe I'm missing something about the way
> Flask does things, but it seems very odd to me that the decorators you're
> using are applied to global functions, rather than instances of an object.
>  For example, instead of:
>
> app = CorePost()
> ...
> @app.route("/validate/<int:rootId>/schema",Http.POST)
> @validate(schema=TestSchema)
> def postValidateSchema(request,rootId,childId,**kwargs):
>     '''Validate using a common schema'''
>     return "%s - %s - %s" % (rootId,childId,kwargs)
>
>
> You could do:
>
> class MyPost(CorePost):
>     @route("/validate/<int:rootId>/schema",Http.POST)
>     @validate(schema=TestSchema)
>     def postValidateSchema(self,request,rootId,childId,**kwargs):
>         '''Validate using a common schema'''
>         return "%s - %s - %s" % (rootId,childId,kwargs)
>
>
> This would allow for re-usable objects; for example, rather than having a
> "blog article create" API (sorry for the uninspired example, it's late) for
> your entire site, you would have a "article create" API on a "Blog", which
> would enable you to have multiple Blog objects (perhaps with different
> authors, in different permission domains, etc).  This would also make
> re-using the relevant objects between different applications easier.
>
> In other words, global variables are bad, and this looks like it depends
> rather heavily on them.
>
> Any thoughts on this?  Am I missing the point?
>
> Thanks,
>
> -glyph
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110904/f7d9dfc3/attachment.htm 

From jacek99 at gmail.com  Mon Sep  5 12:14:15 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Mon, 5 Sep 2011 12:14:15 -0400
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
 for twisted.web
In-Reply-To: <B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
Message-ID: <CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>

Hi Glyph,

I looked at your suggestion, but unfortunately the implementation is very
complex, if not impossible.

The main problem is that
a) a class method with a decorator "forgets" its class, so it's impossible
from the decorator which class it belongs to.
The function has not been bound to a class yet when the decorator is called
for the first time, so there is no way for it to notify the containing class
that this function defines a route for it

b) is is next to impossible for a class to scan its own function and find
their decorators. I've seen some hacks on StackOverflow
where it actually parses the source code, but that is an ugly hack to say
the least (and probably prone to many bugs)

In general, it seems decorators on class methods are missing such crucial
functionality as finding out which class the method belongs to.
Sort of a key requirement, if you ask me (at least after lots of experience
with Java or .Net reflection, where getting this sort of info is trivial).

if you have any suggestions on how to accomplish your recommendation, I
would greatly appreciate it.

The decorator in question that I would need to take out of the CorePost
class and make it a standalone function looks like this:

    def
route(self,url,methods=(Http.GET,),accepts=MediaType.WILDCARD,produces=None,cache=True):
        """Main decorator for registering REST functions """
        def wrap(f,*args,**kwargs):
            self.__registerFunction(f, url, methods, accepts,
produces,cache)
            return f
        return wrap

it's obtaining the reference to 'self' when it is not a class method any
more is the problem. Not sure how to get around it.

Cheers,
Jacek

On Sun, Sep 4, 2011 at 12:01 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Sep 3, 2011, at 8:28 PM, Jacek Furmankiewicz wrote:
>
> Any feedback is welcome
>
>
> Hi Jacek,
>
> Great to see more development going into Twisted-based web stuff! :)
>
> However, I do have one question.  Maybe I'm missing something about the way
> Flask does things, but it seems very odd to me that the decorators you're
> using are applied to global functions, rather than instances of an object.
>  For example, instead of:
>
> app = CorePost()
> ...
> @app.route("/validate/<int:rootId>/schema",Http.POST)
> @validate(schema=TestSchema)
> def postValidateSchema(request,rootId,childId,**kwargs):
>     '''Validate using a common schema'''
>     return "%s - %s - %s" % (rootId,childId,kwargs)
>
>
> You could do:
>
> class MyPost(CorePost):
>     @route("/validate/<int:rootId>/schema",Http.POST)
>     @validate(schema=TestSchema)
>     def postValidateSchema(self,request,rootId,childId,**kwargs):
>         '''Validate using a common schema'''
>         return "%s - %s - %s" % (rootId,childId,kwargs)
>
>
> This would allow for re-usable objects; for example, rather than having a
> "blog article create" API (sorry for the uninspired example, it's late) for
> your entire site, you would have a "article create" API on a "Blog", which
> would enable you to have multiple Blog objects (perhaps with different
> authors, in different permission domains, etc).  This would also make
> re-using the relevant objects between different applications easier.
>
> In other words, global variables are bad, and this looks like it depends
> rather heavily on them.
>
> Any thoughts on this?  Am I missing the point?
>
> Thanks,
>
> -glyph
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110905/edc5a4f9/attachment.htm 

From jacek99 at gmail.com  Mon Sep  5 12:41:39 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Mon, 5 Sep 2011 12:41:39 -0400
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
 for twisted.web
In-Reply-To: <CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
Message-ID: <CAGDztiGkN8JAJUjXSVTpodJNURUaDWwiJMx7ndAw+Rb8iSBCUw@mail.gmail.com>

D'oh.

Finally found how to do it. I can use the decorator to attach additional
route-specific attributes to the function
and then the class instance can scan for it from the constructor,
auto-registering each of its own methods
that have route info attached to them.

Sorry for previous question
Jacek

On Mon, Sep 5, 2011 at 12:14 PM, Jacek Furmankiewicz <jacek99 at gmail.com>wrote:

> Hi Glyph,
>
> I looked at your suggestion, but unfortunately the implementation is very
> complex, if not impossible.
>
> The main problem is that
> a) a class method with a decorator "forgets" its class, so it's impossible
> from the decorator which class it belongs to.
> The function has not been bound to a class yet when the decorator is called
> for the first time, so there is no way for it to notify the containing class
> that this function defines a route for it
>
> b) is is next to impossible for a class to scan its own function and find
> their decorators. I've seen some hacks on StackOverflow
> where it actually parses the source code, but that is an ugly hack to say
> the least (and probably prone to many bugs)
>
> In general, it seems decorators on class methods are missing such crucial
> functionality as finding out which class the method belongs to.
> Sort of a key requirement, if you ask me (at least after lots of experience
> with Java or .Net reflection, where getting this sort of info is trivial).
>
> if you have any suggestions on how to accomplish your recommendation, I
> would greatly appreciate it.
>
> The decorator in question that I would need to take out of the CorePost
> class and make it a standalone function looks like this:
>
>     def
> route(self,url,methods=(Http.GET,),accepts=MediaType.WILDCARD,produces=None,cache=True):
>         """Main decorator for registering REST functions """
>         def wrap(f,*args,**kwargs):
>             self.__registerFunction(f, url, methods, accepts,
> produces,cache)
>             return f
>         return wrap
>
> it's obtaining the reference to 'self' when it is not a class method any
> more is the problem. Not sure how to get around it.
>
> Cheers,
> Jacek
>
> On Sun, Sep 4, 2011 at 12:01 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>>
>> On Sep 3, 2011, at 8:28 PM, Jacek Furmankiewicz wrote:
>>
>>  Any feedback is welcome
>>
>>
>> Hi Jacek,
>>
>> Great to see more development going into Twisted-based web stuff! :)
>>
>> However, I do have one question.  Maybe I'm missing something about the
>> way Flask does things, but it seems very odd to me that the decorators
>> you're using are applied to global functions, rather than instances of an
>> object.  For example, instead of:
>>
>> app = CorePost()
>> ...
>> @app.route("/validate/<int:rootId>/schema",Http.POST)
>> @validate(schema=TestSchema)
>> def postValidateSchema(request,rootId,childId,**kwargs):
>>     '''Validate using a common schema'''
>>     return "%s - %s - %s" % (rootId,childId,kwargs)
>>
>>
>> You could do:
>>
>> class MyPost(CorePost):
>>     @route("/validate/<int:rootId>/schema",Http.POST)
>>     @validate(schema=TestSchema)
>>     def postValidateSchema(self,request,rootId,childId,**kwargs):
>>         '''Validate using a common schema'''
>>         return "%s - %s - %s" % (rootId,childId,kwargs)
>>
>>
>> This would allow for re-usable objects; for example, rather than having a
>> "blog article create" API (sorry for the uninspired example, it's late) for
>> your entire site, you would have a "article create" API on a "Blog", which
>> would enable you to have multiple Blog objects (perhaps with different
>> authors, in different permission domains, etc).  This would also make
>> re-using the relevant objects between different applications easier.
>>
>> In other words, global variables are bad, and this looks like it depends
>> rather heavily on them.
>>
>> Any thoughts on this?  Am I missing the point?
>>
>> Thanks,
>>
>> -glyph
>>
>>
>> _______________________________________________
>> Twisted-web mailing list
>> Twisted-web at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110905/94453cb2/attachment.htm 

From ian at ianrees.net  Mon Sep  5 12:43:11 2011
From: ian at ianrees.net (Ian Rees)
Date: Mon, 5 Sep 2011 11:43:11 -0500
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
	for twisted.web
In-Reply-To: <CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
Message-ID: <061111C6-FE76-49B8-92EF-437023A18FBB@ianrees.net>

Hi,

I have some experience using decorators in exact way -- I agree it can be somewhat tricky. I am posting an example of the way I've usually done it -- it may be helpful (if not, disregard my message :)

class Routing(object):
	routes = {}
	@classmethod
	def addroute(cls, route):
		def wrap(handler):
			print "Registering handler %s for route %s"%(handler, route)
			cls.routes[route] = handler
			return handler
		return wrap
		
class View(object):
	@Routing.addroute(r'^/blog/post/$')
	def dosomething(self, *args, **kwargs):
		pass


Thanks,
Ian

On Sep 5, 2011, at 11:14 AM, Jacek Furmankiewicz wrote:

> Hi Glyph,
> 
> I looked at your suggestion, but unfortunately the implementation is very complex, if not impossible.
> 
> The main problem is that
> a) a class method with a decorator "forgets" its class, so it's impossible from the decorator which class it belongs to. 
> The function has not been bound to a class yet when the decorator is called for the first time, so there is no way for it to notify the containing class that this function defines a route for it
> 
> b) is is next to impossible for a class to scan its own function and find their decorators. I've seen some hacks on StackOverflow
> where it actually parses the source code, but that is an ugly hack to say the least (and probably prone to many bugs)
> 
> In general, it seems decorators on class methods are missing such crucial functionality as finding out which class the method belongs to.
> Sort of a key requirement, if you ask me (at least after lots of experience with Java or .Net reflection, where getting this sort of info is trivial).
> 
> if you have any suggestions on how to accomplish your recommendation, I would greatly appreciate it.
> 
> The decorator in question that I would need to take out of the CorePost class and make it a standalone function looks like this:
> 
>     def route(self,url,methods=(Http.GET,),accepts=MediaType.WILDCARD,produces=None,cache=True):
>         """Main decorator for registering REST functions """
>         def wrap(f,*args,**kwargs):
>             self.__registerFunction(f, url, methods, accepts, produces,cache)
>             return f
>         return wrap
> 
> it's obtaining the reference to 'self' when it is not a class method any more is the problem. Not sure how to get around it.
> 
> Cheers,
> Jacek
> 
> On Sun, Sep 4, 2011 at 12:01 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> On Sep 3, 2011, at 8:28 PM, Jacek Furmankiewicz wrote:
> 
>> Any feedback is welcome
> 
> Hi Jacek,
> 
> Great to see more development going into Twisted-based web stuff! :)
> 
> However, I do have one question.  Maybe I'm missing something about the way Flask does things, but it seems very odd to me that the decorators you're using are applied to global functions, rather than instances of an object.  For example, instead of:
> 
> app = CorePost()
> ...
> @app.route("/validate/<int:rootId>/schema",Http.POST)
> @validate(schema=TestSchema)
> def postValidateSchema(request,rootId,childId,**kwargs):
>     '''Validate using a common schema'''
>     return "%s - %s - %s" % (rootId,childId,kwargs)
> 
> You could do:
> 
> class MyPost(CorePost):
>     @route("/validate/<int:rootId>/schema",Http.POST)
>     @validate(schema=TestSchema)
>     def postValidateSchema(self,request,rootId,childId,**kwargs):
>         '''Validate using a common schema'''
>         return "%s - %s - %s" % (rootId,childId,kwargs)
> 
> This would allow for re-usable objects; for example, rather than having a "blog article create" API (sorry for the uninspired example, it's late) for your entire site, you would have a "article create" API on a "Blog", which would enable you to have multiple Blog objects (perhaps with different authors, in different permission domains, etc).  This would also make re-using the relevant objects between different applications easier.
> 
> In other words, global variables are bad, and this looks like it depends rather heavily on them.
> 
> Any thoughts on this?  Am I missing the point?
> 
> Thanks,
> 
> -glyph
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web



From ian at ianrees.net  Mon Sep  5 13:25:32 2011
From: ian at ianrees.net (Ian Rees)
Date: Mon, 5 Sep 2011 12:25:32 -0500
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
	for twisted.web
In-Reply-To: <CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
Message-ID: <006D1176-7726-4C84-8083-BDB130BC2D56@ianrees.net>

Actually, it turns out our solution was a little more complicated :P Here is our basic implementation (our actual class is a bit more involved and allows multiple routes per method, regular expressions, etc..). The view's method decorators are evaluated before the view's class decorator. The class decorator looks at all the methods and sees which have been decorated with the route.

class Routing(object):
	routes = {}

	@classmethod
	def register(cls, viewclass):
		# Check a class for any methods that have routes as attributes
		# 	and add these to the routing dictionary
		for k,v in viewclass.__dict__.items():
			if hasattr(v, 'route'):
				print "Registering %s method %s with route %s"%(viewclass, v.__name__, v.route)
				cls.routes[v.route] = (viewclass, v.__name__)
		return cls
	
	@classmethod
	def addroute(cls, route):
		# This decorator adds the specified routes as attributes to the methods.
		# These routes will be found when the view class is registered.
		def wrap(handler):
			handler.route = route
			return handler
		return wrap
		
	@classmethod
	def resolve(cls, route):
		for r in cls.routes:
			if r == route:
				print "Found handler for %s:"%route, cls.routes[r]
				view, method = cls.routes[r]
				inst = view()
				return getattr(inst, method)
		

@Routing.register
class View(object):
	@Routing.addroute(r'/blog/post/')
	def dosomething(self, title=None, body=None):
		print "Adding blog post:", title, body
		

handler = Routing.resolve('/blog/post/')
handler(title="Test", body="ok")



Thanks,
Ian

On Sep 5, 2011, at 11:14 AM, Jacek Furmankiewicz wrote:

> Hi Glyph,
> 
> I looked at your suggestion, but unfortunately the implementation is very complex, if not impossible.
> 
> The main problem is that
> a) a class method with a decorator "forgets" its class, so it's impossible from the decorator which class it belongs to. 
> The function has not been bound to a class yet when the decorator is called for the first time, so there is no way for it to notify the containing class that this function defines a route for it
> 
> b) is is next to impossible for a class to scan its own function and find their decorators. I've seen some hacks on StackOverflow
> where it actually parses the source code, but that is an ugly hack to say the least (and probably prone to many bugs)
> 
> In general, it seems decorators on class methods are missing such crucial functionality as finding out which class the method belongs to.
> Sort of a key requirement, if you ask me (at least after lots of experience with Java or .Net reflection, where getting this sort of info is trivial).
> 
> if you have any suggestions on how to accomplish your recommendation, I would greatly appreciate it.
> 
> The decorator in question that I would need to take out of the CorePost class and make it a standalone function looks like this:
> 
>     def route(self,url,methods=(Http.GET,),accepts=MediaType.WILDCARD,produces=None,cache=True):
>         """Main decorator for registering REST functions """
>         def wrap(f,*args,**kwargs):
>             self.__registerFunction(f, url, methods, accepts, produces,cache)
>             return f
>         return wrap
> 
> it's obtaining the reference to 'self' when it is not a class method any more is the problem. Not sure how to get around it.
> 
> Cheers,
> Jacek
> 
> On Sun, Sep 4, 2011 at 12:01 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> On Sep 3, 2011, at 8:28 PM, Jacek Furmankiewicz wrote:
> 
>> Any feedback is welcome
> 
> Hi Jacek,
> 
> Great to see more development going into Twisted-based web stuff! :)
> 
> However, I do have one question.  Maybe I'm missing something about the way Flask does things, but it seems very odd to me that the decorators you're using are applied to global functions, rather than instances of an object.  For example, instead of:
> 
> app = CorePost()
> ...
> @app.route("/validate/<int:rootId>/schema",Http.POST)
> @validate(schema=TestSchema)
> def postValidateSchema(request,rootId,childId,**kwargs):
>     '''Validate using a common schema'''
>     return "%s - %s - %s" % (rootId,childId,kwargs)
> 
> You could do:
> 
> class MyPost(CorePost):
>     @route("/validate/<int:rootId>/schema",Http.POST)
>     @validate(schema=TestSchema)
>     def postValidateSchema(self,request,rootId,childId,**kwargs):
>         '''Validate using a common schema'''
>         return "%s - %s - %s" % (rootId,childId,kwargs)
> 
> This would allow for re-usable objects; for example, rather than having a "blog article create" API (sorry for the uninspired example, it's late) for your entire site, you would have a "article create" API on a "Blog", which would enable you to have multiple Blog objects (perhaps with different authors, in different permission domains, etc).  This would also make re-using the relevant objects between different applications easier.
> 
> In other words, global variables are bad, and this looks like it depends rather heavily on them.
> 
> Any thoughts on this?  Am I missing the point?
> 
> Thanks,
> 
> -glyph
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web



From jacek99 at gmail.com  Mon Sep  5 13:41:48 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Mon, 5 Sep 2011 13:41:48 -0400
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
 for twisted.web
In-Reply-To: <006D1176-7726-4C84-8083-BDB130BC2D56@ianrees.net>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
	<006D1176-7726-4C84-8083-BDB130BC2D56@ianrees.net>
Message-ID: <CAGDztiECEDtW0FNJS7EKPw3TtCyoHsiCz8JARcry1nRCAezdLQ@mail.gmail.com>

Hi Ian, I think the problem though is that your solution relies on static
class-level methods and variables, whereas I need more instance-level.

Here's my solution (seems to be working so far)

def
route(url,methods=(Http.GET,),accepts=MediaType.WILDCARD,produces=None,cache=True):
    '''
    Main decorator for registering REST functions
    '''
    def decorator(f):
        def wrap(*args,**kwargs):
            return f
        router = RequestRouter(f, url, methods, accepts, produces, cache)
        setattr(wrap,'corepostRequestRouter',router)

        return wrap
    return decorator

and then the following method is called from the instance constructor:

   def __registerRouters(self):
        from types import FunctionType
        for _,func in self.__class__.__dict__.iteritems():
            if type(func) == FunctionType and
hasattr(func,'corepostRequestRouter'):
                rq = func.corepostRequestRouter
                for method in rq.methods:
                    self.__urls[method][rq.url] = rq
                    self.__routers[func] = rq # needed so that we can lookup
the router for a specific function

I am updating docs and examples, 0.0.6 should be out soon with these
changes,
here's what the API looks like now with these changes:

class HomeApp(CorePost):

    @route("/")
    def home_root(self,request,**kwargs):
        return "HOME %s" % kwargs

class Module1(CorePost):

    @route("/",Http.GET)
    def module1_get(self,request,**kwargs):
        return request.path

    @route("/sub",Http.GET)
    def module1e_sub(self,request,**kwargs):
        return request.path

class Module2(CorePost):

    @route("/",Http.GET)
    def module2_get(self,request,**kwargs):
        return request.path

    @route("/sub",Http.GET)
    def module2_sub(self,request,**kwargs):
        return request.path

def run_app_multi():
    app = Resource()
    app.putChild('', HomeApp())
    app.putChild('module1',Module1())
    app.putChild('module2',Module2())

    factory = Site(app)
    reactor.listenTCP(8081, factory)
    reactor.run()

Jacek


On Mon, Sep 5, 2011 at 1:25 PM, Ian Rees <ian at ianrees.net> wrote:

> Actually, it turns out our solution was a little more complicated :P Here
> is our basic implementation (our actual class is a bit more involved and
> allows multiple routes per method, regular expressions, etc..). The view's
> method decorators are evaluated before the view's class decorator. The class
> decorator looks at all the methods and sees which have been decorated with
> the route.
>
> class Routing(object):
>        routes = {}
>
>        @classmethod
>         def register(cls, viewclass):
>                # Check a class for any methods that have routes as
> attributes
>                #       and add these to the routing dictionary
>                for k,v in viewclass.__dict__.items():
>                        if hasattr(v, 'route'):
>                                print "Registering %s method %s with route
> %s"%(viewclass, v.__name__, v.route)
>                                cls.routes[v.route] = (viewclass,
> v.__name__)
>                return cls
>
>        @classmethod
>        def addroute(cls, route):
>                 # This decorator adds the specified routes as attributes to
> the methods.
>                # These routes will be found when the view class is
> registered.
>                def wrap(handler):
>                        handler.route = route
>                        return handler
>                return wrap
>
>        @classmethod
>        def resolve(cls, route):
>                for r in cls.routes:
>                        if r == route:
>                                print "Found handler for %s:"%route,
> cls.routes[r]
>                                view, method = cls.routes[r]
>                                inst = view()
>                                return getattr(inst, method)
>
>
> @Routing.register
> class View(object):
>        @Routing.addroute(r'/blog/post/')
>         def dosomething(self, title=None, body=None):
>                print "Adding blog post:", title, body
>
>
> handler = Routing.resolve('/blog/post/')
> handler(title="Test", body="ok")
>
>
>
> Thanks,
> Ian
>
> On Sep 5, 2011, at 11:14 AM, Jacek Furmankiewicz wrote:
>
> > Hi Glyph,
> >
> > I looked at your suggestion, but unfortunately the implementation is very
> complex, if not impossible.
> >
> > The main problem is that
> > a) a class method with a decorator "forgets" its class, so it's
> impossible from the decorator which class it belongs to.
> > The function has not been bound to a class yet when the decorator is
> called for the first time, so there is no way for it to notify the
> containing class that this function defines a route for it
> >
> > b) is is next to impossible for a class to scan its own function and find
> their decorators. I've seen some hacks on StackOverflow
> > where it actually parses the source code, but that is an ugly hack to say
> the least (and probably prone to many bugs)
> >
> > In general, it seems decorators on class methods are missing such crucial
> functionality as finding out which class the method belongs to.
> > Sort of a key requirement, if you ask me (at least after lots of
> experience with Java or .Net reflection, where getting this sort of info is
> trivial).
> >
> > if you have any suggestions on how to accomplish your recommendation, I
> would greatly appreciate it.
> >
> > The decorator in question that I would need to take out of the CorePost
> class and make it a standalone function looks like this:
> >
> >     def
> route(self,url,methods=(Http.GET,),accepts=MediaType.WILDCARD,produces=None,cache=True):
> >         """Main decorator for registering REST functions """
> >         def wrap(f,*args,**kwargs):
> >             self.__registerFunction(f, url, methods, accepts,
> produces,cache)
> >             return f
> >         return wrap
> >
> > it's obtaining the reference to 'self' when it is not a class method any
> more is the problem. Not sure how to get around it.
> >
> > Cheers,
> > Jacek
> >
> > On Sun, Sep 4, 2011 at 12:01 AM, Glyph Lefkowitz <
> glyph at twistedmatrix.com> wrote:
> >
> > On Sep 3, 2011, at 8:28 PM, Jacek Furmankiewicz wrote:
> >
> >> Any feedback is welcome
> >
> > Hi Jacek,
> >
> > Great to see more development going into Twisted-based web stuff! :)
> >
> > However, I do have one question.  Maybe I'm missing something about the
> way Flask does things, but it seems very odd to me that the decorators
> you're using are applied to global functions, rather than instances of an
> object.  For example, instead of:
> >
> > app = CorePost()
> > ...
> > @app.route("/validate/<int:rootId>/schema",Http.POST)
> > @validate(schema=TestSchema)
> > def postValidateSchema(request,rootId,childId,**kwargs):
> >     '''Validate using a common schema'''
> >     return "%s - %s - %s" % (rootId,childId,kwargs)
> >
> > You could do:
> >
> > class MyPost(CorePost):
> >     @route("/validate/<int:rootId>/schema",Http.POST)
> >     @validate(schema=TestSchema)
> >     def postValidateSchema(self,request,rootId,childId,**kwargs):
> >         '''Validate using a common schema'''
> >         return "%s - %s - %s" % (rootId,childId,kwargs)
> >
> > This would allow for re-usable objects; for example, rather than having a
> "blog article create" API (sorry for the uninspired example, it's late) for
> your entire site, you would have a "article create" API on a "Blog", which
> would enable you to have multiple Blog objects (perhaps with different
> authors, in different permission domains, etc).  This would also make
> re-using the relevant objects between different applications easier.
> >
> > In other words, global variables are bad, and this looks like it depends
> rather heavily on them.
> >
> > Any thoughts on this?  Am I missing the point?
> >
> > Thanks,
> >
> > -glyph
> >
> >
> > _______________________________________________
> > Twisted-web mailing list
> > Twisted-web at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> >
> >
> > _______________________________________________
> > Twisted-web mailing list
> > Twisted-web at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110905/13393a58/attachment-0001.htm 

From jacek99 at gmail.com  Mon Sep  5 13:46:43 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Mon, 5 Sep 2011 13:46:43 -0400
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
 for twisted.web
In-Reply-To: <CAGDztiECEDtW0FNJS7EKPw3TtCyoHsiCz8JARcry1nRCAezdLQ@mail.gmail.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
	<006D1176-7726-4C84-8083-BDB130BC2D56@ianrees.net>
	<CAGDztiECEDtW0FNJS7EKPw3TtCyoHsiCz8JARcry1nRCAezdLQ@mail.gmail.com>
Message-ID: <CAGDztiEMEKa-wgpmVK5MEBoC1AO8txQ9wqqsxwikO7UCxBS+eQ@mail.gmail.com>

And the re-designed version 0.0.6 is out on PyPI.

More detailed docs on github:
https://github.com/jacek99/corepost

Cheers,
Jacek

On Mon, Sep 5, 2011 at 1:41 PM, Jacek Furmankiewicz <jacek99 at gmail.com>wrote:

> Hi Ian, I think the problem though is that your solution relies on static
> class-level methods and variables, whereas I need more instance-level.
>
> Here's my solution (seems to be working so far)
>
> def
> route(url,methods=(Http.GET,),accepts=MediaType.WILDCARD,produces=None,cache=True):
>     '''
>     Main decorator for registering REST functions
>     '''
>     def decorator(f):
>         def wrap(*args,**kwargs):
>             return f
>         router = RequestRouter(f, url, methods, accepts, produces, cache)
>         setattr(wrap,'corepostRequestRouter',router)
>
>         return wrap
>     return decorator
>
> and then the following method is called from the instance constructor:
>
>    def __registerRouters(self):
>         from types import FunctionType
>         for _,func in self.__class__.__dict__.iteritems():
>             if type(func) == FunctionType and
> hasattr(func,'corepostRequestRouter'):
>                 rq = func.corepostRequestRouter
>                 for method in rq.methods:
>                     self.__urls[method][rq.url] = rq
>                     self.__routers[func] = rq # needed so that we can
> lookup the router for a specific function
>
> I am updating docs and examples, 0.0.6 should be out soon with these
> changes,
> here's what the API looks like now with these changes:
>
> class HomeApp(CorePost):
>
>     @route("/")
>     def home_root(self,request,**kwargs):
>         return "HOME %s" % kwargs
>
> class Module1(CorePost):
>
>     @route("/",Http.GET)
>     def module1_get(self,request,**kwargs):
>         return request.path
>
>     @route("/sub",Http.GET)
>     def module1e_sub(self,request,**kwargs):
>         return request.path
>
> class Module2(CorePost):
>
>     @route("/",Http.GET)
>     def module2_get(self,request,**kwargs):
>         return request.path
>
>     @route("/sub",Http.GET)
>     def module2_sub(self,request,**kwargs):
>         return request.path
>
> def run_app_multi():
>     app = Resource()
>     app.putChild('', HomeApp())
>     app.putChild('module1',Module1())
>     app.putChild('module2',Module2())
>
>     factory = Site(app)
>     reactor.listenTCP(8081, factory)
>     reactor.run()
>
> Jacek
>
>
> On Mon, Sep 5, 2011 at 1:25 PM, Ian Rees <ian at ianrees.net> wrote:
>
>> Actually, it turns out our solution was a little more complicated :P Here
>> is our basic implementation (our actual class is a bit more involved and
>> allows multiple routes per method, regular expressions, etc..). The view's
>> method decorators are evaluated before the view's class decorator. The class
>> decorator looks at all the methods and sees which have been decorated with
>> the route.
>>
>> class Routing(object):
>>        routes = {}
>>
>>        @classmethod
>>         def register(cls, viewclass):
>>                # Check a class for any methods that have routes as
>> attributes
>>                #       and add these to the routing dictionary
>>                for k,v in viewclass.__dict__.items():
>>                        if hasattr(v, 'route'):
>>                                print "Registering %s method %s with route
>> %s"%(viewclass, v.__name__, v.route)
>>                                cls.routes[v.route] = (viewclass,
>> v.__name__)
>>                return cls
>>
>>        @classmethod
>>        def addroute(cls, route):
>>                 # This decorator adds the specified routes as attributes
>> to the methods.
>>                # These routes will be found when the view class is
>> registered.
>>                def wrap(handler):
>>                        handler.route = route
>>                        return handler
>>                return wrap
>>
>>        @classmethod
>>        def resolve(cls, route):
>>                for r in cls.routes:
>>                        if r == route:
>>                                print "Found handler for %s:"%route,
>> cls.routes[r]
>>                                view, method = cls.routes[r]
>>                                inst = view()
>>                                return getattr(inst, method)
>>
>>
>> @Routing.register
>> class View(object):
>>        @Routing.addroute(r'/blog/post/')
>>         def dosomething(self, title=None, body=None):
>>                print "Adding blog post:", title, body
>>
>>
>> handler = Routing.resolve('/blog/post/')
>> handler(title="Test", body="ok")
>>
>>
>>
>> Thanks,
>> Ian
>>
>> On Sep 5, 2011, at 11:14 AM, Jacek Furmankiewicz wrote:
>>
>> > Hi Glyph,
>> >
>> > I looked at your suggestion, but unfortunately the implementation is
>> very complex, if not impossible.
>> >
>> > The main problem is that
>> > a) a class method with a decorator "forgets" its class, so it's
>> impossible from the decorator which class it belongs to.
>> > The function has not been bound to a class yet when the decorator is
>> called for the first time, so there is no way for it to notify the
>> containing class that this function defines a route for it
>> >
>> > b) is is next to impossible for a class to scan its own function and
>> find their decorators. I've seen some hacks on StackOverflow
>> > where it actually parses the source code, but that is an ugly hack to
>> say the least (and probably prone to many bugs)
>> >
>> > In general, it seems decorators on class methods are missing such
>> crucial functionality as finding out which class the method belongs to.
>> > Sort of a key requirement, if you ask me (at least after lots of
>> experience with Java or .Net reflection, where getting this sort of info is
>> trivial).
>> >
>> > if you have any suggestions on how to accomplish your recommendation, I
>> would greatly appreciate it.
>> >
>> > The decorator in question that I would need to take out of the CorePost
>> class and make it a standalone function looks like this:
>> >
>> >     def
>> route(self,url,methods=(Http.GET,),accepts=MediaType.WILDCARD,produces=None,cache=True):
>> >         """Main decorator for registering REST functions """
>> >         def wrap(f,*args,**kwargs):
>> >             self.__registerFunction(f, url, methods, accepts,
>> produces,cache)
>> >             return f
>> >         return wrap
>> >
>> > it's obtaining the reference to 'self' when it is not a class method any
>> more is the problem. Not sure how to get around it.
>> >
>> > Cheers,
>> > Jacek
>> >
>> > On Sun, Sep 4, 2011 at 12:01 AM, Glyph Lefkowitz <
>> glyph at twistedmatrix.com> wrote:
>> >
>> > On Sep 3, 2011, at 8:28 PM, Jacek Furmankiewicz wrote:
>> >
>> >> Any feedback is welcome
>> >
>> > Hi Jacek,
>> >
>> > Great to see more development going into Twisted-based web stuff! :)
>> >
>> > However, I do have one question.  Maybe I'm missing something about the
>> way Flask does things, but it seems very odd to me that the decorators
>> you're using are applied to global functions, rather than instances of an
>> object.  For example, instead of:
>> >
>> > app = CorePost()
>> > ...
>> > @app.route("/validate/<int:rootId>/schema",Http.POST)
>> > @validate(schema=TestSchema)
>> > def postValidateSchema(request,rootId,childId,**kwargs):
>> >     '''Validate using a common schema'''
>> >     return "%s - %s - %s" % (rootId,childId,kwargs)
>> >
>> > You could do:
>> >
>> > class MyPost(CorePost):
>> >     @route("/validate/<int:rootId>/schema",Http.POST)
>> >     @validate(schema=TestSchema)
>> >     def postValidateSchema(self,request,rootId,childId,**kwargs):
>> >         '''Validate using a common schema'''
>> >         return "%s - %s - %s" % (rootId,childId,kwargs)
>> >
>> > This would allow for re-usable objects; for example, rather than having
>> a "blog article create" API (sorry for the uninspired example, it's late)
>> for your entire site, you would have a "article create" API on a "Blog",
>> which would enable you to have multiple Blog objects (perhaps with different
>> authors, in different permission domains, etc).  This would also make
>> re-using the relevant objects between different applications easier.
>> >
>> > In other words, global variables are bad, and this looks like it depends
>> rather heavily on them.
>> >
>> > Any thoughts on this?  Am I missing the point?
>> >
>> > Thanks,
>> >
>> > -glyph
>> >
>> >
>> > _______________________________________________
>> > Twisted-web mailing list
>> > Twisted-web at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>> >
>> >
>> > _______________________________________________
>> > Twisted-web mailing list
>> > Twisted-web at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>>
>>
>> _______________________________________________
>> Twisted-web mailing list
>> Twisted-web at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110905/4d641859/attachment.htm 

From glyph at twistedmatrix.com  Mon Sep  5 19:09:22 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Sep 2011 16:09:22 -0700
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
	for twisted.web
In-Reply-To: <CAGDztiEMEKa-wgpmVK5MEBoC1AO8txQ9wqqsxwikO7UCxBS+eQ@mail.gmail.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
	<006D1176-7726-4C84-8083-BDB130BC2D56@ianrees.net>
	<CAGDztiECEDtW0FNJS7EKPw3TtCyoHsiCz8JARcry1nRCAezdLQ@mail.gmail.com>
	<CAGDztiEMEKa-wgpmVK5MEBoC1AO8txQ9wqqsxwikO7UCxBS+eQ@mail.gmail.com>
Message-ID: <EDCF7FA8-2043-4349-8CC3-071232635978@twistedmatrix.com>


On Sep 5, 2011, at 10:46 AM, Jacek Furmankiewicz wrote:

> And the re-designed version 0.0.6 is out on PyPI.

I'm glad I made that suggestion.  That kind of turnaround is pretty impressive! Any way I can convince you to fix Twisted bugs that fast? (Since you're doing HTTP POSTs, <http://twistedmatrix.com/trac/ticket/288>, perhaps?)

Congrats on the new version,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110905/45b34e11/attachment.htm 

From joaoricardo000 at gmail.com  Mon Sep  5 23:49:57 2011
From: joaoricardo000 at gmail.com (=?ISO-8859-1?Q?Jo=E3o_Ricardo_Mattos_e_Silva?=)
Date: Tue, 6 Sep 2011 00:49:57 -0300
Subject: [Twisted-web] Coding websockets server.
Message-ID: <CAGitN6LQ3=dksibBnhd37peL981bcSrnosBuZOA0g9eNsy=a9g@mail.gmail.com>

Hey,
my first e-mail on this list, I`m beginning to code with twisted, started
after a research about building c10k servers.. (with python)
I am using this lib, heard it is the best for working with websockets
(correct me if you know another)
https://github.com/wulczer/txWebSocket

Well,
There is what I want to do:
I have:

    site = WebSocketSite(root)
    site.addChatHandler('/room*1*', Chathandler)
    reactor.listenTCP(8080, site)

where

class Chathandler(WebSocketHandler):
    users = set()
    def __init__(self, transport):
        WebSocketHandler.__init__(self, transport)

    def __del__(self):
        print 'Deleting handler'

    def setUsers(self,usr):
        self.users = usr

    def frameReceived(self, frame):
        adr = self.transport.getPeer()
        print "Msg rcv from: ", adr
        self.sendChat(adr,frame)

    def connectionMade(self):
        print 'Connected to client.'
        self.users.add(self)

    def connectionLost(self, reason):
        print 'Lost connection.'
        if self in self.users:
            self.users.remove(self)

    def sendChat(self,fr,msg):
        for u in self.users:
            u.transport.write(str(fr)+msg)

My problem is:
If I do this:
    site = WebSocketSite(root)
    site.addChatHandler('/room*1*', Chathandler)
    site.addChatHandler('/room*2*', Chathandler)
    site.addChatHandler('/room*3*', Chathandler)
    reactor.listenTCP(8080, site)

will not work (every room will comunicate with every room), because
the users = set() will be globally between the handlers..
If I put on the __init__, every call on /roomX will have your personal set()
of users including only themselfs.

I am kind stuck on this, I`m new to websocket and server programming, so I
don`t even know if is the best way to code a chatroom server.
If you read this far ans have any (even it looks that stupid for you), might
help right now (:

Thanks,

-- 
*Jo?o Ricardo Mattos e Silva*

Graduando em Ci?ncia da Computa??o na Universidade Federal de Santa Catarina

*Cel: *+55 (48) 96190063  |  *Skype:* jricardomsilva  | * Msn: *
joaoricardo at globalite.com.br
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110906/212247a7/attachment-0001.htm 

From j.veenvan at gmail.com  Tue Sep  6 03:01:09 2011
From: j.veenvan at gmail.com (Jeroen van Veen)
Date: Tue, 6 Sep 2011 09:01:09 +0200
Subject: [Twisted-web] Coding websockets server.
In-Reply-To: <CAGitN6LQ3=dksibBnhd37peL981bcSrnosBuZOA0g9eNsy=a9g@mail.gmail.com>
References: <CAGitN6LQ3=dksibBnhd37peL981bcSrnosBuZOA0g9eNsy=a9g@mail.gmail.com>
Message-ID: <CAAh3Gi=q8_sa=-MoybEAA8cU-_FfNdBeJwpyXacLU4HKiy9pRg@mail.gmail.com>

Hey,

I'm also using txwebsocket for this project. See
https://github.com/phrearch/hwios

kind regards,

Jeroen

2011/9/6 Jo?o Ricardo Mattos e Silva <joaoricardo000 at gmail.com>

> Hey,
> my first e-mail on this list, I`m beginning to code with twisted, started
> after a research about building c10k servers.. (with python)
> I am using this lib, heard it is the best for working with websockets
> (correct me if you know another)
> https://github.com/wulczer/txWebSocket
>
> Well,
> There is what I want to do:
> I have:
>
>     site = WebSocketSite(root)
>     site.addChatHandler('/room*1*', Chathandler)
>     reactor.listenTCP(8080, site)
>
> where
>
> class Chathandler(WebSocketHandler):
>     users = set()
>     def __init__(self, transport):
>         WebSocketHandler.__init__(self, transport)
>
>     def __del__(self):
>         print 'Deleting handler'
>
>     def setUsers(self,usr):
>         self.users = usr
>
>     def frameReceived(self, frame):
>         adr = self.transport.getPeer()
>         print "Msg rcv from: ", adr
>         self.sendChat(adr,frame)
>
>     def connectionMade(self):
>         print 'Connected to client.'
>         self.users.add(self)
>
>     def connectionLost(self, reason):
>         print 'Lost connection.'
>         if self in self.users:
>             self.users.remove(self)
>
>     def sendChat(self,fr,msg):
>         for u in self.users:
>             u.transport.write(str(fr)+msg)
>
> My problem is:
> If I do this:
>     site = WebSocketSite(root)
>     site.addChatHandler('/room*1*', Chathandler)
>     site.addChatHandler('/room*2*', Chathandler)
>     site.addChatHandler('/room*3*', Chathandler)
>     reactor.listenTCP(8080, site)
>
> will not work (every room will comunicate with every room), because
> the users = set() will be globally between the handlers..
> If I put on the __init__, every call on /roomX will have your personal
> set() of users including only themselfs.
>
> I am kind stuck on this, I`m new to websocket and server programming, so I
> don`t even know if is the best way to code a chatroom server.
> If you read this far ans have any (even it looks that stupid for you),
> might help right now (:
>
> Thanks,
>
> --
> *Jo?o Ricardo Mattos e Silva*
>
> Graduando em Ci?ncia da Computa??o na Universidade Federal de Santa
> Catarina
>
> *Cel: *+55 (48) 96190063  |  *Skype:* jricardomsilva  | * Msn: *
> joaoricardo at globalite.com.br
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110906/3e810848/attachment.htm 

From rlotun at gmail.com  Tue Sep  6 04:06:36 2011
From: rlotun at gmail.com (Reza Lotun)
Date: Tue, 6 Sep 2011 09:06:36 +0100
Subject: [Twisted-web] Coding websockets server.
In-Reply-To: <CAGitN6LQ3=dksibBnhd37peL981bcSrnosBuZOA0g9eNsy=a9g@mail.gmail.com>
References: <CAGitN6LQ3=dksibBnhd37peL981bcSrnosBuZOA0g9eNsy=a9g@mail.gmail.com>
Message-ID: <CAFJezo0sEiydd3uiudOgCS-XftK85fVktAEngmnvg7kCwYYZSA@mail.gmail.com>

Hi,

I've done work on the txWebSocket project in the past - it's now slightly
out of date for thew new spec. You're using the fork by wulczer which
supports the new protocol, so that's good. I have to update the main project
at some point to incorporate his work.

Anyway, to answer your quesions...


> My problem is:
> If I do this:
>     site = WebSocketSite(root)
>     site.addChatHandler('/room*1*', Chathandler)
>     site.addChatHandler('/room*2*', Chathandler)
>     site.addChatHandler('/room*3*', Chathandler)
>     reactor.listenTCP(8080, site)
>
> will not work (every room will comunicate with every room), because
> the users = set() will be globally between the handlers..
> If I put on the __init__, every call on /roomX will have your personal
> set() of users including only themselfs.
>
>
Right, I see what your issue is. You really want a mapping from room
resources to state (i.e. '/room1' -> users1, etc). As you've noticed the
users set is a class-level construct, while the __init__ for the handler is
called on every connection. What you really want to be able to do is
associate this resource mapping on the site object. Unfortunately there is
currently no direct way to gain access to this object, and there is no easy
way to determine the resource you've been called at. I'll need to add this
ability.

For the time being I suggest to subclass WebSocketSite, and then access the
object via private access (I know this is *bad*, but there will be a better
option soon) in the handler as self.transport._request.site and the uri as
self.transport._request.uri. That way you can access a mapping on the site
object.

I plan on making access to the site and uri be public which under the hood
will access the above two attributes.

Sorry about the state of txWebsocket - development on it paused as the
websocket spec was going through a state of flux. It seems to have settled
down recently, so now is the time for me to really sort out these issues.
Thanks for bringing it to my attention.


> I am kind stuck on this, I`m new to websocket and server programming, so I
> don`t even know if is the best way to code a chatroom server.
> If you read this far ans have any (even it looks that stupid for you),
> might help right now (:
>

If you're interested in a basic chatroom implementation, the idea you have
sketched above is fine. However, if you're looking to add a tad more
robustness, might I suggest you implement the fan out logic in Redis using
its pub-sub functionality? Check out http://redis.io/topics/pubsub and a
Twisted library for Redis at https://github.com/rlotun/txRedis. Websockets
and your txWebsocket code can then only need to act as a transport to the
end-user (that is, there is mapping from your getPeer() calls on your
self.transport to users, and every internal subscription per user is then
fed back as websocket data to the browser. That way you can avoid "fan out"
type logic as shown in your sendChat method).

I hope this helps - it isn't entirely satisfying I know, but the situation
will improve soon.

Thanks,
Reza


-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   rlotun at twitter.com
@rlotun
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110906/0751a814/attachment.htm 

From jacek99 at gmail.com  Tue Sep  6 09:28:56 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Tue, 6 Sep 2011 09:28:56 -0400
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
 for twisted.web
In-Reply-To: <EDCF7FA8-2043-4349-8CC3-071232635978@twistedmatrix.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
	<006D1176-7726-4C84-8083-BDB130BC2D56@ianrees.net>
	<CAGDztiECEDtW0FNJS7EKPw3TtCyoHsiCz8JARcry1nRCAezdLQ@mail.gmail.com>
	<CAGDztiEMEKa-wgpmVK5MEBoC1AO8txQ9wqqsxwikO7UCxBS+eQ@mail.gmail.com>
	<EDCF7FA8-2043-4349-8CC3-071232635978@twistedmatrix.com>
Message-ID: <CAGDztiGtMfFwoh4WpJw9FBqxH6gpBquwsSOBb6WZ6-hB6pDF8w@mail.gmail.com>

Fortunately enough the code change was minor. The biggest challenge was
getting the decorator function and the class instance to communicate
somehow...past that point it was simple.

I would rather focus on my current problem (beside CorePost enhancements) of
Twisted not installing under PyPy.
PyPy does wonders for Twisted.

Some of the issues are documented here:
http://stackoverflow.com/questions/5126039/how-to-install-twisted-10-2-0-with-pypy-1-4-1

The solution seems pretty trivial (see last comment).

Getting Twisted to install under PyPy would be a major boom. Right now all
the PyPy guys have to do PYTHONPATH hacks.

My initial perf tests with PyPy/Twisted were the reason I chose Twisted over
let's say Node.js.
I just like Python more and the inline callback support is brilliant.

Is there a Twisted bug for the PyPy installation issue?

Jacek


On Mon, Sep 5, 2011 at 7:09 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Sep 5, 2011, at 10:46 AM, Jacek Furmankiewicz wrote:
>
> And the re-designed version 0.0.6 is out on PyPI.
>
>
> I'm glad I made that suggestion.  That kind of turnaround is pretty
> impressive! Any way I can convince you to fix Twisted bugs that fast? (Since
> you're doing HTTP POSTs, <http://twistedmatrix.com/trac/ticket/288>,
> perhaps?)
>
> Congrats on the new version,
>
> -glyph
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110906/dbd8263e/attachment.htm 

From lists at collab.nl  Tue Sep  6 09:44:35 2011
From: lists at collab.nl (Thijs Triemstra)
Date: Tue, 06 Sep 2011 15:44:35 +0200
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
 for twisted.web
In-Reply-To: <CAGDztiGtMfFwoh4WpJw9FBqxH6gpBquwsSOBb6WZ6-hB6pDF8w@mail.gmail.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>	<006D1176-7726-4C84-8083-BDB130BC2D56@ianrees.net>	<CAGDztiECEDtW0FNJS7EKPw3TtCyoHsiCz8JARcry1nRCAezdLQ@mail.gmail.com>	<CAGDztiEMEKa-wgpmVK5MEBoC1AO8txQ9wqqsxwikO7UCxBS+eQ@mail.gmail.com>	<EDCF7FA8-2043-4349-8CC3-071232635978@twistedmatrix.com>
	<CAGDztiGtMfFwoh4WpJw9FBqxH6gpBquwsSOBb6WZ6-hB6pDF8w@mail.gmail.com>
Message-ID: <4E6623C3.9030405@collab.nl>

On 09/06/2011 03:28 PM, Jacek Furmankiewicz wrote:
> Fortunately enough the code change was minor. The biggest challenge was
> getting the decorator function and the class instance to communicate
> somehow...past that point it was simple.
> 
> I would rather focus on my current problem (beside CorePost
> enhancements) of Twisted not installing under PyPy.
> PyPy does wonders for Twisted.
> 
> Some of the issues are documented here:
> http://stackoverflow.com/questions/5126039/how-to-install-twisted-10-2-0-with-pypy-1-4-1
> 
> The solution seems pretty trivial (see last comment).
> 
> Getting Twisted to install under PyPy would be a major boom. Right now
> all the PyPy guys have to do PYTHONPATH hacks.
> 
> My initial perf tests with PyPy/Twisted were the reason I chose Twisted
> over let's say Node.js.
> I just like Python more and the inline callback support is brilliant.
> 
> Is there a Twisted bug for the PyPy installation issue?
> 
> Jacek

That's ticket #5158: http://twistedmatrix.com/trac/ticket/5158

Cheers,

Thijs


From jacek99 at gmail.com  Tue Sep  6 09:55:37 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Tue, 6 Sep 2011 09:55:37 -0400
Subject: [Twisted-web] CorePost - a tiny Flask-style REST microframework
 for twisted.web
In-Reply-To: <4E6623C3.9030405@collab.nl>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
	<006D1176-7726-4C84-8083-BDB130BC2D56@ianrees.net>
	<CAGDztiECEDtW0FNJS7EKPw3TtCyoHsiCz8JARcry1nRCAezdLQ@mail.gmail.com>
	<CAGDztiEMEKa-wgpmVK5MEBoC1AO8txQ9wqqsxwikO7UCxBS+eQ@mail.gmail.com>
	<EDCF7FA8-2043-4349-8CC3-071232635978@twistedmatrix.com>
	<CAGDztiGtMfFwoh4WpJw9FBqxH6gpBquwsSOBb6WZ6-hB6pDF8w@mail.gmail.com>
	<4E6623C3.9030405@collab.nl>
Message-ID: <CAGDztiFjHr8TvQhVYRsPN+H_jqaTvwffJW5NHU74yK9bQAsJwA@mail.gmail.com>

Do you guys have any ETA on this? The discussion within the ticket makes it
seem much more complex
than the simple fix someone suggested on StackOverflow.

It would allow to pit Twisted directly against node.js (and others) and not
suffer from CPython perf limitations.
There is a lot of complaints in the node.js blogs about the type of
spaghetti code async nested callbacks create...
...a chance to show how elegantly Twisted inline callback support solves
this.

Jacek

On Tue, Sep 6, 2011 at 9:44 AM, Thijs Triemstra <lists at collab.nl> wrote:

> On 09/06/2011 03:28 PM, Jacek Furmankiewicz wrote:
> > Fortunately enough the code change was minor. The biggest challenge was
> > getting the decorator function and the class instance to communicate
> > somehow...past that point it was simple.
> >
> > I would rather focus on my current problem (beside CorePost
> > enhancements) of Twisted not installing under PyPy.
> > PyPy does wonders for Twisted.
> >
> > Some of the issues are documented here:
> >
> http://stackoverflow.com/questions/5126039/how-to-install-twisted-10-2-0-with-pypy-1-4-1
> >
> > The solution seems pretty trivial (see last comment).
> >
> > Getting Twisted to install under PyPy would be a major boom. Right now
> > all the PyPy guys have to do PYTHONPATH hacks.
> >
> > My initial perf tests with PyPy/Twisted were the reason I chose Twisted
> > over let's say Node.js.
> > I just like Python more and the inline callback support is brilliant.
> >
> > Is there a Twisted bug for the PyPy installation issue?
> >
> > Jacek
>
> That's ticket #5158: http://twistedmatrix.com/trac/ticket/5158
>
> Cheers,
>
> Thijs
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110906/53eae585/attachment-0001.htm 

From exarkun at twistedmatrix.com  Tue Sep  6 10:23:11 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 06 Sep 2011 14:23:11 -0000
Subject: [Twisted-web] CorePost - a tiny Flask-style REST
	microframework	for twisted.web
In-Reply-To: <CAGDztiFjHr8TvQhVYRsPN+H_jqaTvwffJW5NHU74yK9bQAsJwA@mail.gmail.com>
References: <CAGDztiEagYkRD4rkaZFpDErgHtmi8oXP8-V8qTTocHLhs71fkQ@mail.gmail.com>
	<B6B284F0-91C7-4F3E-A593-910FD18EC8CF@twistedmatrix.com>
	<CAGDztiHuMv6TwUGphGKrOcsvaviKUFYax-MTvsAAerGm9Zq1mw@mail.gmail.com>
	<CAGDztiHF5S4K7ACSP03R1i2hsCwpBdRAHNaUJOgyjS4EaMBLrQ@mail.gmail.com>
	<B32F69BC-4EDD-4700-A48C-E5E3D03DF58C@twistedmatrix.com>
	<CAGDztiHavWvcbc-mv3z99AcDH7X70g7jKD2iDDimGY2SG4nVwA@mail.gmail.com>
	<006D1176-7726-4C84-8083-BDB130BC2D56@ianrees.net>
	<CAGDztiECEDtW0FNJS7EKPw3TtCyoHsiCz8JARcry1nRCAezdLQ@mail.gmail.com>
	<CAGDztiEMEKa-wgpmVK5MEBoC1AO8txQ9wqqsxwikO7UCxBS+eQ@mail.gmail.com>
	<EDCF7FA8-2043-4349-8CC3-071232635978@twistedmatrix.com>
	<CAGDztiGtMfFwoh4WpJw9FBqxH6gpBquwsSOBb6WZ6-hB6pDF8w@mail.gmail.com>
	<4E6623C3.9030405@collab.nl>
	<CAGDztiFjHr8TvQhVYRsPN+H_jqaTvwffJW5NHU74yK9bQAsJwA@mail.gmail.com>
Message-ID: <20110906142311.1808.499455706.divmod.xquotient.297@localhost.localdomain>

On 01:55 pm, jacek99 at gmail.com wrote:
>Do you guys have any ETA on this? The discussion within the ticket 
>makes it
>seem much more complex
>than the simple fix someone suggested on StackOverflow.

The "fix" suggested on StackOverflow is to disable building all 
extension modules all the time.  I love PyPy, but degrading 
functionality on CPython isn't an acceptable resolution to this problem 
at this time.

To make progress, I suppose we can just say that we'll fix PyPy+cpyext 
for now, and worry about PyPy-cpyext later (or never).

That means updating the build configuration so we actually have 
PyPy+cpyext and verifying the issue is really resolved.  Then the branch 
can probably be merged.

Jean-Paul
>It would allow to pit Twisted directly against node.js (and others) and 
>not
>suffer from CPython perf limitations.
>There is a lot of complaints in the node.js blogs about the type of
>spaghetti code async nested callbacks create...
>...a chance to show how elegantly Twisted inline callback support 
>solves
>this.
>
>Jacek
>
>On Tue, Sep 6, 2011 at 9:44 AM, Thijs Triemstra <lists at collab.nl> 
>wrote:
>>On 09/06/2011 03:28 PM, Jacek Furmankiewicz wrote:
>> > Fortunately enough the code change was minor. The biggest challenge 
>>was
>> > getting the decorator function and the class instance to communicate
>> > somehow...past that point it was simple.
>> >
>> > I would rather focus on my current problem (beside CorePost
>> > enhancements) of Twisted not installing under PyPy.
>> > PyPy does wonders for Twisted.
>> >
>> > Some of the issues are documented here:
>> >
>>http://stackoverflow.com/questions/5126039/how-to-install- 
>>twisted-10-2-0-with-pypy-1-4-1
>> >
>> > The solution seems pretty trivial (see last comment).
>> >
>> > Getting Twisted to install under PyPy would be a major boom. Right 
>>now
>> > all the PyPy guys have to do PYTHONPATH hacks.
>> >
>> > My initial perf tests with PyPy/Twisted were the reason I chose 
>>Twisted
>> > over let's say Node.js.
>> > I just like Python more and the inline callback support is 
>>brilliant.
>> >
>> > Is there a Twisted bug for the PyPy installation issue?
>> >
>> > Jacek
>>
>>That's ticket #5158: http://twistedmatrix.com/trac/ticket/5158
>>
>>Cheers,
>>
>>Thijs
>>
>>_______________________________________________
>>Twisted-web mailing list
>>Twisted-web at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>


From jacek99 at gmail.com  Tue Sep  6 10:46:30 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Tue, 6 Sep 2011 10:46:30 -0400
Subject: [Twisted-web] Role-based security authorization
Message-ID: <CAGDztiF=7FNVPrZyfECQKkwMtYjDeC_6+HSo0WMvnoPexNUd1w@mail.gmail.com>

While reading up the docs on Twisted security and HTTP auth, it seems they
are all geared towards pure authentication,
but don't address the authorization part.

For example, in our other apps we often have a security setup like this

a) users with READ_ONLY_ROLE can only access GET endpoints
b) users with READ_WRITE_ROLE can access GET, POST, PUT, DELETE endpoints

Is there any existing Twisted-based projects that provides a role-based
authorization framework on top of the core Twisted authentication APIs?
It would need a custom Avator with roles attached to it (fetched from DB or
elsewhere)

Thanks
Jacek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110906/99ba84f0/attachment.htm 

From cpburnz at gmail.com  Thu Sep 22 12:17:42 2011
From: cpburnz at gmail.com (Caleb P. Burns)
Date: Thu, 22 Sep 2011 12:17:42 -0400
Subject: [Twisted-web] Twisted Conch SSL session Key from Request
Message-ID: <CAOxVj+TeUPYK7z0nCL+LZ=hOb+3ebmkZSccbKgjBjX8=Zvi-eQ@mail.gmail.com>

Is it possible to retrieve the SSL session or master key from a
`twisted.web.http.Request` instance? I want to use it along with other data
to generate a hash-keyed message authentication code (HMAC).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110922/e9d3b6bc/attachment.htm 

From glyph at twistedmatrix.com  Thu Sep 22 14:51:26 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Sep 2011 14:51:26 -0400
Subject: [Twisted-web] Twisted Conch SSL session Key from Request
In-Reply-To: <CAOxVj+TeUPYK7z0nCL+LZ=hOb+3ebmkZSccbKgjBjX8=Zvi-eQ@mail.gmail.com>
References: <CAOxVj+TeUPYK7z0nCL+LZ=hOb+3ebmkZSccbKgjBjX8=Zvi-eQ@mail.gmail.com>
Message-ID: <BCEFEACE-C6A3-4D85-BF69-48E6A7680654@twistedmatrix.com>


On Sep 22, 2011, at 12:17 PM, Caleb P. Burns wrote:

> Is it possible to retrieve the SSL session or master key from a `twisted.web.http.Request` instance? I want to use it along with other data to generate a hash-keyed message authentication code (HMAC).

I think you might be a little confused: Conch speaks SSH, not TLS; these are different protocols.  If you're interested in using pyOpenSSL APIs to access information about your SSH session, you can probably get to them via the request's transport's .getHandle() method, which will give you a pyOpenSSL 'Connection' object in the current implementation.  (This is not a terribly clean access method, and it might change in the future, not too much is guaranteed about 'getHandle()'. Unfortunately Twisted doesn't really wrap the parts of SSL it sounds like you're interested in.)

-glyph

From glyph at twistedmatrix.com  Thu Sep 22 14:52:44 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Sep 2011 14:52:44 -0400
Subject: [Twisted-web] Twisted Conch SSL session Key from Request
In-Reply-To: <BCEFEACE-C6A3-4D85-BF69-48E6A7680654@twistedmatrix.com>
References: <CAOxVj+TeUPYK7z0nCL+LZ=hOb+3ebmkZSccbKgjBjX8=Zvi-eQ@mail.gmail.com>
	<BCEFEACE-C6A3-4D85-BF69-48E6A7680654@twistedmatrix.com>
Message-ID: <10FAEDD5-F16C-4AD0-854F-54075C23A98F@twistedmatrix.com>


On Sep 22, 2011, at 2:51 PM, Glyph Lefkowitz wrote:

> using pyOpenSSL APIs to access information about your SSH session

All these TLSa, ugh.  What I meant to say was:

... using pyOpenSSL APIs to access information about your TLS session (i.e. your SSL session) ...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110922/6e7422f2/attachment.htm 

From cpburnz at gmail.com  Thu Sep 22 15:05:06 2011
From: cpburnz at gmail.com (Caleb Burns)
Date: Thu, 22 Sep 2011 15:05:06 -0400
Subject: [Twisted-web] Twisted Conch SSL session Key from Request
In-Reply-To: <10FAEDD5-F16C-4AD0-854F-54075C23A98F@twistedmatrix.com>
References: <CAOxVj+TeUPYK7z0nCL+LZ=hOb+3ebmkZSccbKgjBjX8=Zvi-eQ@mail.gmail.com>
	<BCEFEACE-C6A3-4D85-BF69-48E6A7680654@twistedmatrix.com>
	<10FAEDD5-F16C-4AD0-854F-54075C23A98F@twistedmatrix.com>
Message-ID: <CAL+07jxUNshxVkRwENZaOFzKSv=qKHv=d57u4fmQnPScucuX0w@mail.gmail.com>

Thanks, I was confusing SSH with TLS/SSL. I'll look at pyOpenSSL.

On Thu, Sep 22, 2011 at 2:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Sep 22, 2011, at 2:51 PM, Glyph Lefkowitz wrote:
>
> using pyOpenSSL APIs to access information about your SSH session
>
>
> All these TLSa, ugh.  What I meant to say was:
>
> ... using pyOpenSSL APIs to access information about your *TLS* session
> (i.e. your *SSL *session) ...
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110922/b2f3b747/attachment.htm 

From ggb at tid.es  Thu Sep 22 18:21:41 2011
From: ggb at tid.es (Gustavo Garcia Bernardo)
Date: Fri, 23 Sep 2011 00:21:41 +0200
Subject: [Twisted-web] sending "100 Continue" from my twisted.web2 server
Message-ID: <B348B152E5F11640B2247E54304E53FC590CDE5EC4@EXCLU2K7.hi.inet>

Hi,

What is the proper way to implement sending a provisional response (100 Continue) before sending the final response (200) with the content?

Thank you,
G.

Este mensaje se dirige exclusivamente a su destinatario. Puede consultar nuestra pol?tica de env?o y recepci?n de correo electr?nico en el enlace situado m?s abajo.
This message is intended exclusively for its addressee. We only send and receive email on the basis of the terms set out at.
http://www.tid.es/ES/PAGINAS/disclaimer.aspx

From jacek99 at gmail.com  Thu Sep 29 17:49:29 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Thu, 29 Sep 2011 17:49:29 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
Message-ID: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>

CorePost 0.0.7, the REST microframework built on top of twisted.web is out.

http://pypi.python.org/pypi/CorePost/0.0.7

This is a big release with lots of enhancements all around content types:

1) automatic parsing of incoming content based on type

@route("/post/json",(Http.POST,Http.PUT))
def test_json(self,request,**kwargs):
    return "%s" % json.dumps(request.json)

@route("/post/xml",(Http.POST,Http.PUT))
def test_xml(self,request,**kwargs):
    return "%s" % ElementTree.tostring(request.xml)

@route("/post/yaml",(Http.POST,Http.PUT))
def test_yaml(self,request,**kwargs):
    return "%s" % yaml.dump(request.yaml)


2) ability to route to different methods for the same URL by incoming
content

@route("/post/by/content",(Http.POST,Http.PUT),MediaType.APPLICATION_JSON)
def test_content_app_json(self,request,**kwargs):
    return request.received_headers[HttpHeader.CONTENT_TYPE]

@route("/post/by/content",(Http.POST,Http.PUT),(MediaType.TEXT_XML,MediaType.APPLICATION_XML))
def test_content_xml(self,request,**kwargs):
    return request.received_headers[HttpHeader.CONTENT_TYPE]

@route("/post/by/content",(Http.POST,Http.PUT),MediaType.TEXT_YAML)
def test_content_yaml(self,request,**kwargs):
    return request.received_headers[HttpHeader.CONTENT_TYPE]

@route("/post/by/content",(Http.POST,Http.PUT))
def test_content_catch_all(self,request,**kwargs):
    return MediaType.WILDCARD

3) ability to return dict/list response and have them automatically convert
to JSON or YAML, depending on what caller can Accept

@route("/return/by/accept")
def test_return_content_by_accepts(self,request,**kwargs):
    val = [{"test1":"Test1"},{"test2":"Test2"}]
    return val

Calling this URL with "Accept: application/json" will return:

[{"test1": "Test1"}, {"test2": "Test2"}]

Calling it with "Accept: text/yaml" will return:

- {test1: Test1}
- {test2: Test2}

4) proper support for *defer.returnValue()* *in @defer.inlineCallbacks
routers (which supports the auto-conversion shown above)

@route("/",Http.GET)
@defer.inlineCallbacks
def root(self,request,**kwargs):
    val1 = yield db.query("SELECT ....")
    val2 = yield db.query("SELECT ....")
    defer.returnValue(val1 + val2)


Cheers,
Jacek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110929/a69b742c/attachment.htm 

From glyph at twistedmatrix.com  Thu Sep 29 23:22:49 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Sep 2011 23:22:49 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
Message-ID: <D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>


On Sep 29, 2011, at 5:49 PM, Jacek Furmankiewicz wrote:

> CorePost 0.0.7, the REST microframework built on top of twisted.web is out.

Congrats on another quick release, Jacek!

It seems like your first example doesn't really need the 'dumps' calls - your other features will automatically serialize those objects, right?

I love the automatic MIME-type negotiation on output.  Very cool.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110929/b967fa68/attachment.htm 

From jacek99 at gmail.com  Fri Sep 30 09:08:02 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Fri, 30 Sep 2011 09:08:02 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
Message-ID: <CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>

Depends. pyaml is very forgiving in terms of what you feed to it, but
json.dumps() only really seems to
accept list/dict without complaining.

I will keep refining this. One shortcoming is that it does not serialize
Python classes (json.dumps() says they're not JSON serializable).
I will probably need to write a custom marshaller that uses a class's
__dict__ to convert it to a dict (including traversing the whole
object graph).

XML does not work either yet, could not find a library that does
dict/list/class conversion to XML. Will need to write one myself too.
But all the underlying plumbing in terms of content routing is there.

Once I am done with all of this I will have a serious look at AMPoule to get
that out-of-the-box multi-core support.

So the next release 0.0.8 should finish all the content type stuff and then
for 0.0.9 should start looking at AMPoule.

Jacek

On Thu, Sep 29, 2011 at 11:22 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

>
> On Sep 29, 2011, at 5:49 PM, Jacek Furmankiewicz wrote:
>
> CorePost 0.0.7, the REST microframework built on top of twisted.web is out.
>
>
> Congrats on another quick release, Jacek!
>
> It seems like your first example doesn't really need the 'dumps' calls -
> your other features will automatically serialize those objects, right?
>
> I love the automatic MIME-type negotiation on output.  Very cool.
>
> -glyph
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110930/a8cbf0e8/attachment-0001.htm 

From jacek99 at gmail.com  Fri Sep 30 09:18:53 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Fri, 30 Sep 2011 09:18:53 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
Message-ID: <CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>

And once I reach 0.1 with all of these features, I will post some blog
entries about this together with PyPy benchmarks...so that people don't
think
Javascript / Node.js is your only option when it comes to async I/O web
frameworks :-)

BTW, is there any progress on getting Twisted to install under PyPy in the
near future? I know you guys have been looking into it....

Thanks!
Jacek

On Fri, Sep 30, 2011 at 9:08 AM, Jacek Furmankiewicz <jacek99 at gmail.com>wrote:

> Depends. pyaml is very forgiving in terms of what you feed to it, but
> json.dumps() only really seems to
> accept list/dict without complaining.
>
> I will keep refining this. One shortcoming is that it does not serialize
> Python classes (json.dumps() says they're not JSON serializable).
> I will probably need to write a custom marshaller that uses a class's
> __dict__ to convert it to a dict (including traversing the whole
> object graph).
>
> XML does not work either yet, could not find a library that does
> dict/list/class conversion to XML. Will need to write one myself too.
> But all the underlying plumbing in terms of content routing is there.
>
> Once I am done with all of this I will have a serious look at AMPoule to
> get that out-of-the-box multi-core support.
>
> So the next release 0.0.8 should finish all the content type stuff and then
> for 0.0.9 should start looking at AMPoule.
>
> Jacek
>
> On Thu, Sep 29, 2011 at 11:22 PM, Glyph Lefkowitz <glyph at twistedmatrix.com
> > wrote:
>
>>
>> On Sep 29, 2011, at 5:49 PM, Jacek Furmankiewicz wrote:
>>
>> CorePost 0.0.7, the REST microframework built on top of twisted.web is
>> out.
>>
>>
>> Congrats on another quick release, Jacek!
>>
>> It seems like your first example doesn't really need the 'dumps' calls -
>> your other features will automatically serialize those objects, right?
>>
>> I love the automatic MIME-type negotiation on output.  Very cool.
>>
>> -glyph
>>
>> _______________________________________________
>> Twisted-web mailing list
>> Twisted-web at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110930/894f172d/attachment.htm 

From exarkun at twistedmatrix.com  Fri Sep 30 09:55:09 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Sep 2011 13:55:09 -0000
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
Message-ID: <20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>

On 01:18 pm, jacek99 at gmail.com wrote:
>And once I reach 0.1 with all of these features, I will post some blog
>entries about this together with PyPy benchmarks...so that people don't
>think
>Javascript / Node.js is your only option when it comes to async I/O web
>frameworks :-)
>
>BTW, is there any progress on getting Twisted to install under PyPy in 
>the
>near future? I know you guys have been looking into it....

http://twistedmatrix.com/trac/ticket/5158 is resolved now.  If there are 
still problems with Twisted trunk at HEAD on PyPy, please let us know. :)

Jean-Paul


From jacek99 at gmail.com  Fri Sep 30 09:59:04 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Fri, 30 Sep 2011 09:59:04 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
Message-ID: <CAGDztiFmvZw5GwWTU70H+8+jdou8UcNdAMO+N7aGK0orSTnH3g@mail.gmail.com>

I wil check it out tonight and try installing with PyPy 1.6.
Any ETA on an official 11.X.X build?

Jacek

On Fri, Sep 30, 2011 at 9:55 AM, <exarkun at twistedmatrix.com> wrote:

> On 01:18 pm, jacek99 at gmail.com wrote:
> >And once I reach 0.1 with all of these features, I will post some blog
> >entries about this together with PyPy benchmarks...so that people don't
> >think
> >Javascript / Node.js is your only option when it comes to async I/O web
> >frameworks :-)
> >
> >BTW, is there any progress on getting Twisted to install under PyPy in
> >the
> >near future? I know you guys have been looking into it....
>
> http://twistedmatrix.com/trac/ticket/5158 is resolved now.  If there are
> still problems with Twisted trunk at HEAD on PyPy, please let us know. :)
>
> Jean-Paul
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110930/c024c98b/attachment.htm 

From jaroslaw.fedewicz at gmail.com  Fri Sep 30 11:55:56 2011
From: jaroslaw.fedewicz at gmail.com (=?utf-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Fri, 30 Sep 2011 18:55:56 +0300
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
Message-ID: <E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>


On Sep 30, 2011, at 16:55 , exarkun at twistedmatrix.com wrote:

> On 01:18 pm, jacek99 at gmail.com wrote:
>> And once I reach 0.1 with all of these features, I will post some blog
>> entries about this together with PyPy benchmarks...so that people don't
>> think
>> Javascript / Node.js is your only option when it comes to async I/O web
>> frameworks :-)
>> 
>> BTW, is there any progress on getting Twisted to install under PyPy in 
>> the
>> near future? I know you guys have been looking into it....
> 
> http://twistedmatrix.com/trac/ticket/5158 is resolved now.  If there are 
> still problems with Twisted trunk at HEAD on PyPy, please let us know. :)
> 

There are in fact some problems.

$ sudo pypy-c ./setup.py install
running install
running bdist_egg
running egg_info
writing top-level names to Twisted.egg-info/top_level.txt
writing requirements to Twisted.egg-info/requires.txt
writing dependency_links to Twisted.egg-info/dependency_links.txt
writing Twisted.egg-info/PKG-INFO
writing manifest file 'Twisted.egg-info/SOURCES.txt'
installing library code to build/bdist.macosx-10.6-i386/egg
running install_lib
running build_py
running build_ext
cc -arch i386 -fPIC -Wimplicit -I/opt/local/lib/pypy/include -c conftest.c -o conftest.o
building 'twisted.runner.portmap' extension
cc -arch i386 -fPIC -Wimplicit -I/opt/local/lib/pypy/include -c twisted/runner/portmap.c -o build/temp.macosx-10.6-i386-2.7/twisted/runner/portmap.o
twisted/runner/portmap.c:10:20: error: Python.h: No such file or directory
twisted/runner/portmap.c:14: error: expected ?=?, ?,?, ?;?, ?asm? or ?__attribute__? before ?*? token
twisted/runner/portmap.c:31: error: expected ?=?, ?,?, ?;?, ?asm? or ?__attribute__? before ?*? token
twisted/runner/portmap.c:45: error: expected ?=?, ?,?, ?;?, ?asm? or ?__attribute__? before ?PortmapMethods?
twisted/runner/portmap.c: In function ?initportmap?:
twisted/runner/portmap.c:55: warning: implicit declaration of function ?Py_InitModule?
twisted/runner/portmap.c:55: error: ?PortmapMethods? undeclared (first use in this function)
twisted/runner/portmap.c:55: error: (Each undeclared identifier is reported only once
twisted/runner/portmap.c:55: error: for each function it appears in.)

I have PyPy 1.6 with cpyext.

This patch seems to fix the C extensions errors:

Index: twisted/topfiles/setup.py
===================================================================
--- twisted/topfiles/setup.py	(revision 32705)
+++ twisted/topfiles/setup.py	(working copy)
@@ -37,10 +37,11 @@
               condition=lambda _: _isCPython and sys.platform == "win32"),
 
     Extension("twisted.python._initgroups",
-              ["twisted/python/_initgroups.c"]),
+              ["twisted/python/_initgroups.c"],
+              condition=lambda _: _isCPython),
     Extension("twisted.internet._sigchld",
               ["twisted/internet/_sigchld.c"],
-              condition=lambda _: sys.platform != "win32"),
+              condition=lambda _: _isCPython and sys.platform != "win32"),
 ]
 
 # Figure out which plugins to include: all plugins except subproject ones
Index: twisted/runner/topfiles/setup.py
===================================================================
--- twisted/runner/topfiles/setup.py	(revision 32705)
+++ twisted/runner/topfiles/setup.py	(working copy)
@@ -1,6 +1,8 @@
 # Copyright (c) Twisted Matrix Laboratories.
 # See LICENSE for details.
 
+from twisted.python.dist import _isCPython
+
 try:
     from twisted.python.dist import setup, ConditionalExtension as Extension
 except ImportError:
@@ -11,7 +13,7 @@
 extensions = [
     Extension("twisted.runner.portmap",
               ["twisted/runner/portmap.c"],
-              condition=lambda builder: builder._check_header("rpc/rpc.h")),
+              condition=lambda builder: _isCPython and builder._check_header("rpc/rpc.h")),
 ]
 
 if __name__ == '__main__':


however, setuptools trigger GC mis(?)behaviour in PyPy and setup fails:

.... lots of logging snipped
Extracting Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg to /opt/local/lib/pypy/site-packages
error: /opt/local/lib/pypy/site-packages/Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg/twisted/enterprise/row.pyc: Too many open files

This error is known to PyPy guys, they, however, insist that setuptools are wrong and not them. Which sounds totally wrong to me, but again, who am I to judge.

From exarkun at twistedmatrix.com  Fri Sep 30 12:25:44 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Sep 2011 16:25:44 -0000
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
	<E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
Message-ID: <20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>

On 03:55 pm, jaroslaw.fedewicz at gmail.com wrote:
>
>On Sep 30, 2011, at 16:55 , exarkun at twistedmatrix.com wrote:
>>On 01:18 pm, jacek99 at gmail.com wrote:
>>>And once I reach 0.1 with all of these features, I will post some 
>>>blog
>>>entries about this together with PyPy benchmarks...so that people 
>>>don't
>>>think
>>>Javascript / Node.js is your only option when it comes to async I/O 
>>>web
>>>frameworks :-)
>>>
>>>BTW, is there any progress on getting Twisted to install under PyPy 
>>>in
>>>the
>>>near future? I know you guys have been looking into it....
>>
>>http://twistedmatrix.com/trac/ticket/5158 is resolved now.  If there 
>>are
>>still problems with Twisted trunk at HEAD on PyPy, please let us know. :)
>
>There are in fact some problems.

>$ sudo pypy-c ./setup.py install
>[snip]
>twisted/runner/portmap.c:10:20: error: Python.h: No such file or 
>directory
>[snip]
>
>I have PyPy 1.6 with cpyext.

Notice the "Python.h" error message here.  I think that some of the PyPy 
binary distributions are broken, missing all of the header files for 
cpyext.

I filed a ticket about this for Windows in the PyPy issue tracker since 
I just observed the issue there.  I didn't realize it affected other 
platforms as well.

https://bugs.pypy.org/issue889
>[snip]
>
>Extracting Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg to 
>/opt/local/lib/pypy/site-packages
>error: /opt/local/lib/pypy/site- 
>packages/Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg/twisted/enterprise/row.pyc: 
>Too many open files
>
>This error is known to PyPy guys, they, however, insist that setuptools 
>are wrong and not them. Which sounds totally wrong to me, but again, 
>who am I to judge.

Another way to look at it is that they are not going to implement 
reference counting for file objects.  So whether they are wrong or not, 
the problem has to be fixed somewhere else.  Hopefully it can be fixed 
in the "distribute" project, which is supposed to be a drop-in 
replacement for setuptools, but with fewer bugs.

Jean-Paul


From jacek99 at gmail.com  Fri Sep 30 12:30:01 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Fri, 30 Sep 2011 12:30:01 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
	<E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
	<20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
Message-ID: <CAGDztiEOQXU=OLbxxYSqmQWnRBo3sFWMnMHshDA0g96er1m+fA@mail.gmail.com>

Is there an option to separate the Twisted core (i.e. the part everyone runs
on PyPy with the PYTHONPATH hack )
from the part with embedded C extensions?

At least allow a trouble-free PyPy install for the core functionality?

On Fri, Sep 30, 2011 at 12:25 PM, <exarkun at twistedmatrix.com> wrote:

> On 03:55 pm, jaroslaw.fedewicz at gmail.com wrote:
> >
> >On Sep 30, 2011, at 16:55 , exarkun at twistedmatrix.com wrote:
> >>On 01:18 pm, jacek99 at gmail.com wrote:
> >>>And once I reach 0.1 with all of these features, I will post some
> >>>blog
> >>>entries about this together with PyPy benchmarks...so that people
> >>>don't
> >>>think
> >>>Javascript / Node.js is your only option when it comes to async I/O
> >>>web
> >>>frameworks :-)
> >>>
> >>>BTW, is there any progress on getting Twisted to install under PyPy
> >>>in
> >>>the
> >>>near future? I know you guys have been looking into it....
> >>
> >>http://twistedmatrix.com/trac/ticket/5158 is resolved now.  If there
> >>are
> >>still problems with Twisted trunk at HEAD on PyPy, please let us know. :)
> >
> >There are in fact some problems.
>
> >$ sudo pypy-c ./setup.py install
> >[snip]
> >twisted/runner/portmap.c:10:20: error: Python.h: No such file or
> >directory
> >[snip]
> >
> >I have PyPy 1.6 with cpyext.
>
> Notice the "Python.h" error message here.  I think that some of the PyPy
> binary distributions are broken, missing all of the header files for
> cpyext.
>
> I filed a ticket about this for Windows in the PyPy issue tracker since
> I just observed the issue there.  I didn't realize it affected other
> platforms as well.
>
> https://bugs.pypy.org/issue889
> >[snip]
> >
> >Extracting Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg to
> >/opt/local/lib/pypy/site-packages
> >error: /opt/local/lib/pypy/site-
>
> >packages/Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg/twisted/enterprise/row.pyc:
> >Too many open files
> >
> >This error is known to PyPy guys, they, however, insist that setuptools
> >are wrong and not them. Which sounds totally wrong to me, but again,
> >who am I to judge.
>
> Another way to look at it is that they are not going to implement
> reference counting for file objects.  So whether they are wrong or not,
> the problem has to be fixed somewhere else.  Hopefully it can be fixed
> in the "distribute" project, which is supposed to be a drop-in
> replacement for setuptools, but with fewer bugs.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110930/3891c6b0/attachment.htm 

From exarkun at twistedmatrix.com  Fri Sep 30 12:52:32 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Sep 2011 16:52:32 -0000
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <CAGDztiEOQXU=OLbxxYSqmQWnRBo3sFWMnMHshDA0g96er1m+fA@mail.gmail.com>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
	<E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
	<20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
	<CAGDztiEOQXU=OLbxxYSqmQWnRBo3sFWMnMHshDA0g96er1m+fA@mail.gmail.com>
Message-ID: <20110930165232.2214.270378342.divmod.xquotient.192@localhost.localdomain>

On 04:30 pm, jacek99 at gmail.com wrote:
>Is there an option to separate the Twisted core (i.e. the part everyone 
>runs
>on PyPy with the PYTHONPATH hack )
>from the part with embedded C extensions?
>
>At least allow a trouble-free PyPy install for the core functionality?

There isn't now.  Given what I know about distutils, it doesn't seem 
like an easy thing to implement.  If anyone has ideas about how it could 
be done, we could discuss it (or feel free to just implement it ;).

Jean-Paul
>On Fri, Sep 30, 2011 at 12:25 PM, <exarkun at twistedmatrix.com> wrote:
>>On 03:55 pm, jaroslaw.fedewicz at gmail.com wrote:
>> >
>> >On Sep 30, 2011, at 16:55 , exarkun at twistedmatrix.com wrote:
>> >>On 01:18 pm, jacek99 at gmail.com wrote:
>> >>>And once I reach 0.1 with all of these features, I will post some
>> >>>blog
>> >>>entries about this together with PyPy benchmarks...so that people
>> >>>don't
>> >>>think
>> >>>Javascript / Node.js is your only option when it comes to async I/O
>> >>>web
>> >>>frameworks :-)
>> >>>
>> >>>BTW, is there any progress on getting Twisted to install under PyPy
>> >>>in
>> >>>the
>> >>>near future? I know you guys have been looking into it....
>> >>
>> >>http://twistedmatrix.com/trac/ticket/5158 is resolved now.  If there
>> >>are
>> >>still problems with Twisted trunk at HEAD on PyPy, please let us know. 
>>:)
>> >
>> >There are in fact some problems.
>>
>> >$ sudo pypy-c ./setup.py install
>> >[snip]
>> >twisted/runner/portmap.c:10:20: error: Python.h: No such file or
>> >directory
>> >[snip]
>> >
>> >I have PyPy 1.6 with cpyext.
>>
>>Notice the "Python.h" error message here.  I think that some of the 
>>PyPy
>>binary distributions are broken, missing all of the header files for
>>cpyext.
>>
>>I filed a ticket about this for Windows in the PyPy issue tracker 
>>since
>>I just observed the issue there.  I didn't realize it affected other
>>platforms as well.
>>
>>https://bugs.pypy.org/issue889
>> >[snip]
>> >
>> >Extracting Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg to
>> >/opt/local/lib/pypy/site-packages
>> >error: /opt/local/lib/pypy/site-
>>
>> >packages/Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg/twisted/enterprise/row.pyc:
>> >Too many open files
>> >
>> >This error is known to PyPy guys, they, however, insist that 
>>setuptools
>> >are wrong and not them. Which sounds totally wrong to me, but again,
>> >who am I to judge.
>>
>>Another way to look at it is that they are not going to implement
>>reference counting for file objects.  So whether they are wrong or 
>>not,
>>the problem has to be fixed somewhere else.  Hopefully it can be fixed
>>in the "distribute" project, which is supposed to be a drop-in
>>replacement for setuptools, but with fewer bugs.
>>
>>Jean-Paul
>>
>>_______________________________________________
>>Twisted-web mailing list
>>Twisted-web at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>


From jacek99 at gmail.com  Fri Sep 30 12:58:06 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Fri, 30 Sep 2011 12:58:06 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <20110930165232.2214.270378342.divmod.xquotient.192@localhost.localdomain>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
	<E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
	<20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
	<CAGDztiEOQXU=OLbxxYSqmQWnRBo3sFWMnMHshDA0g96er1m+fA@mail.gmail.com>
	<20110930165232.2214.270378342.divmod.xquotient.192@localhost.localdomain>
Message-ID: <CAGDztiEP+JSrLh5xR6C+gcGawDYzL777t=BWCV0pzy+0nHytjQ@mail.gmail.com>

could twisted itself be split into two separate packages? e.g. twisted and
twisted-extensions, etc.

I understand the frustration of dealing with pypy/distutils, etc.
but from an end developer's perspective the hurdles one has to go through to
get pypy+twisted working
is a major roadblock when it comes to stealing some of the thunder Node.js
is getting these days.

Cheers,
Jacek

On Fri, Sep 30, 2011 at 12:52 PM, <exarkun at twistedmatrix.com> wrote:

> On 04:30 pm, jacek99 at gmail.com wrote:
> >Is there an option to separate the Twisted core (i.e. the part everyone
> >runs
> >on PyPy with the PYTHONPATH hack )
> >from the part with embedded C extensions?
> >
> >At least allow a trouble-free PyPy install for the core functionality?
>
> There isn't now.  Given what I know about distutils, it doesn't seem
> like an easy thing to implement.  If anyone has ideas about how it could
> be done, we could discuss it (or feel free to just implement it ;).
>
> Jean-Paul
> >On Fri, Sep 30, 2011 at 12:25 PM, <exarkun at twistedmatrix.com> wrote:
> >>On 03:55 pm, jaroslaw.fedewicz at gmail.com wrote:
> >> >
> >> >On Sep 30, 2011, at 16:55 , exarkun at twistedmatrix.com wrote:
> >> >>On 01:18 pm, jacek99 at gmail.com wrote:
> >> >>>And once I reach 0.1 with all of these features, I will post some
> >> >>>blog
> >> >>>entries about this together with PyPy benchmarks...so that people
> >> >>>don't
> >> >>>think
> >> >>>Javascript / Node.js is your only option when it comes to async I/O
> >> >>>web
> >> >>>frameworks :-)
> >> >>>
> >> >>>BTW, is there any progress on getting Twisted to install under PyPy
> >> >>>in
> >> >>>the
> >> >>>near future? I know you guys have been looking into it....
> >> >>
> >> >>http://twistedmatrix.com/trac/ticket/5158 is resolved now.  If there
> >> >>are
> >> >>still problems with Twisted trunk at HEAD on PyPy, please let us know.
> >>:)
> >> >
> >> >There are in fact some problems.
> >>
> >> >$ sudo pypy-c ./setup.py install
> >> >[snip]
> >> >twisted/runner/portmap.c:10:20: error: Python.h: No such file or
> >> >directory
> >> >[snip]
> >> >
> >> >I have PyPy 1.6 with cpyext.
> >>
> >>Notice the "Python.h" error message here.  I think that some of the
> >>PyPy
> >>binary distributions are broken, missing all of the header files for
> >>cpyext.
> >>
> >>I filed a ticket about this for Windows in the PyPy issue tracker
> >>since
> >>I just observed the issue there.  I didn't realize it affected other
> >>platforms as well.
> >>
> >>https://bugs.pypy.org/issue889
> >> >[snip]
> >> >
> >> >Extracting Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg to
> >> >/opt/local/lib/pypy/site-packages
> >> >error: /opt/local/lib/pypy/site-
> >>
> >>
> >packages/Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg/twisted/enterprise/row.pyc:
> >> >Too many open files
> >> >
> >> >This error is known to PyPy guys, they, however, insist that
> >>setuptools
> >> >are wrong and not them. Which sounds totally wrong to me, but again,
> >> >who am I to judge.
> >>
> >>Another way to look at it is that they are not going to implement
> >>reference counting for file objects.  So whether they are wrong or
> >>not,
> >>the problem has to be fixed somewhere else.  Hopefully it can be fixed
> >>in the "distribute" project, which is supposed to be a drop-in
> >>replacement for setuptools, but with fewer bugs.
> >>
> >>Jean-Paul
> >>
> >>_______________________________________________
> >>Twisted-web mailing list
> >>Twisted-web at twistedmatrix.com
> >>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> >
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110930/6494b7c6/attachment.htm 

From jaroslaw.fedewicz at gmail.com  Fri Sep 30 14:11:14 2011
From: jaroslaw.fedewicz at gmail.com (=?utf-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Fri, 30 Sep 2011 21:11:14 +0300
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
	<E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
	<20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
Message-ID: <86E88882-DC84-48F5-BF02-E64665176C75@gmail.com>


On Sep 30, 2011, at 19:25 , exarkun at twistedmatrix.com wrote:
> 
> Notice the "Python.h" error message here.  I think that some of the PyPy 
> binary distributions are broken, missing all of the header files for 
> cpyext.
> 
> I filed a ticket about this for Windows in the PyPy issue tracker since 
> I just observed the issue there.  I didn't realize it affected other 
> platforms as well.
> 


Ehrm. It's a PyPy from MacPorts. Which is in fact a source distribution, took me a whole day to build.

I haven't tried to re-build PyPy's nightly, because I need the machine to work on, but can try to see if a hand-build will make the problem go away (and thus report it to the MacPorts guys).

From exarkun at twistedmatrix.com  Fri Sep 30 14:34:14 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Sep 2011 18:34:14 -0000
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <CAGDztiEP+JSrLh5xR6C+gcGawDYzL777t=BWCV0pzy+0nHytjQ@mail.gmail.com>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
	<E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
	<20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
	<CAGDztiEOQXU=OLbxxYSqmQWnRBo3sFWMnMHshDA0g96er1m+fA@mail.gmail.com>
	<20110930165232.2214.270378342.divmod.xquotient.192@localhost.localdomain>
	<CAGDztiEP+JSrLh5xR6C+gcGawDYzL777t=BWCV0pzy+0nHytjQ@mail.gmail.com>
Message-ID: <20110930183414.2214.1300317163.divmod.xquotient.200@localhost.localdomain>

On 04:58 pm, jacek99 at gmail.com wrote:
>could twisted itself be split into two separate packages? e.g. twisted 
>and
>twisted-extensions, etc.

I'm not sure what you're suggesting.  All the potential solutions I can 
imagine have technical limitations that rule them out.  "split into two 
separate packages" is too general for me to know what you have in mind.

Apart from that, PyPy really just needs to fix their distribution so 
that cpyext actually works.  Then Twisted will build on it as-is.

Jean-Paul
>I understand the frustration of dealing with pypy/distutils, etc.
>but from an end developer's perspective the hurdles one has to go 
>through to
>get pypy+twisted working
>is a major roadblock when it comes to stealing some of the thunder 
>Node.js
>is getting these days.
>
>Cheers,
>Jacek
>
>On Fri, Sep 30, 2011 at 12:52 PM, <exarkun at twistedmatrix.com> wrote:
>>On 04:30 pm, jacek99 at gmail.com wrote:
>> >Is there an option to separate the Twisted core (i.e. the part 
>>everyone
>> >runs
>> >on PyPy with the PYTHONPATH hack )
>> >from the part with embedded C extensions?
>> >
>> >At least allow a trouble-free PyPy install for the core 
>>functionality?
>>
>>There isn't now.  Given what I know about distutils, it doesn't seem
>>like an easy thing to implement.  If anyone has ideas about how it 
>>could
>>be done, we could discuss it (or feel free to just implement it ;).
>>
>>Jean-Paul
>> >On Fri, Sep 30, 2011 at 12:25 PM, <exarkun at twistedmatrix.com> wrote:
>> >>On 03:55 pm, jaroslaw.fedewicz at gmail.com wrote:
>> >> >
>> >> >On Sep 30, 2011, at 16:55 , exarkun at twistedmatrix.com wrote:
>> >> >>On 01:18 pm, jacek99 at gmail.com wrote:
>> >> >>>And once I reach 0.1 with all of these features, I will post 
>>some
>> >> >>>blog
>> >> >>>entries about this together with PyPy benchmarks...so that 
>>people
>> >> >>>don't
>> >> >>>think
>> >> >>>Javascript / Node.js is your only option when it comes to async 
>>I/O
>> >> >>>web
>> >> >>>frameworks :-)
>> >> >>>
>> >> >>>BTW, is there any progress on getting Twisted to install under 
>>PyPy
>> >> >>>in
>> >> >>>the
>> >> >>>near future? I know you guys have been looking into it....
>> >> >>
>> >> >>http://twistedmatrix.com/trac/ticket/5158 is resolved now.  If 
>>there
>> >> >>are
>> >> >>still problems with Twisted trunk at HEAD on PyPy, please let us 
>>know.
>> >>:)
>> >> >
>> >> >There are in fact some problems.
>> >>
>> >> >$ sudo pypy-c ./setup.py install
>> >> >[snip]
>> >> >twisted/runner/portmap.c:10:20: error: Python.h: No such file or
>> >> >directory
>> >> >[snip]
>> >> >
>> >> >I have PyPy 1.6 with cpyext.
>> >>
>> >>Notice the "Python.h" error message here.  I think that some of the
>> >>PyPy
>> >>binary distributions are broken, missing all of the header files for
>> >>cpyext.
>> >>
>> >>I filed a ticket about this for Windows in the PyPy issue tracker
>> >>since
>> >>I just observed the issue there.  I didn't realize it affected other
>> >>platforms as well.
>> >>
>> >>https://bugs.pypy.org/issue889
>> >> >[snip]
>> >> >
>> >> >Extracting Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg to
>> >> >/opt/local/lib/pypy/site-packages
>> >> >error: /opt/local/lib/pypy/site-
>> >>
>> >>
>> >packages/Twisted-11.0.0_r32705-py2.7-macosx-10.6-i386.egg/twisted/enterprise/row.pyc:
>> >> >Too many open files
>> >> >
>> >> >This error is known to PyPy guys, they, however, insist that
>> >>setuptools
>> >> >are wrong and not them. Which sounds totally wrong to me, but 
>>again,
>> >> >who am I to judge.
>> >>
>> >>Another way to look at it is that they are not going to implement
>> >>reference counting for file objects.  So whether they are wrong or
>> >>not,
>> >>the problem has to be fixed somewhere else.  Hopefully it can be 
>>fixed
>> >>in the "distribute" project, which is supposed to be a drop-in
>> >>replacement for setuptools, but with fewer bugs.
>> >>
>> >>Jean-Paul
>> >>
>> >>_______________________________________________
>> >>Twisted-web mailing list
>> >>Twisted-web at twistedmatrix.com
>> >>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>> >
>>
>>_______________________________________________
>>Twisted-web mailing list
>>Twisted-web at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>


From jacek99 at gmail.com  Fri Sep 30 15:23:22 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Fri, 30 Sep 2011 15:23:22 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <20110930183414.2214.1300317163.divmod.xquotient.200@localhost.localdomain>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
	<E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
	<20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
	<CAGDztiEOQXU=OLbxxYSqmQWnRBo3sFWMnMHshDA0g96er1m+fA@mail.gmail.com>
	<20110930165232.2214.270378342.divmod.xquotient.192@localhost.localdomain>
	<CAGDztiEP+JSrLh5xR6C+gcGawDYzL777t=BWCV0pzy+0nHytjQ@mail.gmail.com>
	<20110930183414.2214.1300317163.divmod.xquotient.200@localhost.localdomain>
Message-ID: <CAGDztiGCeTPzMCHUZrPooZXHGLCVZ2RiBumKtWAC5XAgeuJnYw@mail.gmail.com>

OK, I will try to revive the ticket I raised on the PyPy site, point it to
this discussion and maybe get some feedback from them

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110930/3ecc9417/attachment.htm 

From dripton at ripton.net  Fri Sep 30 17:41:16 2011
From: dripton at ripton.net (David Ripton)
Date: Fri, 30 Sep 2011 17:41:16 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <86E88882-DC84-48F5-BF02-E64665176C75@gmail.com>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
	<E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
	<20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
	<86E88882-DC84-48F5-BF02-E64665176C75@gmail.com>
Message-ID: <4E86377C.2000406@ripton.net>

On 09/30/11 14:11, Jaros?aw Fedewicz wrote:

> I haven't tried to re-build PyPy's nightly, because I need the
> machine to work on, but can try to see if a hand-build will make the
> problem go away (and thus report it to the MacPorts guys).

Works for me, with Twisted trunk and PyPy built from the tip this 
morning.  But that's on a Linux box, not a Mac with MacPorts, so I don't 
know if that helps you.

-- 
David Ripton    dripton at ripton.net


From jacek99 at gmail.com  Fri Sep 30 17:49:54 2011
From: jacek99 at gmail.com (Jacek Furmankiewicz)
Date: Fri, 30 Sep 2011 17:49:54 -0400
Subject: [Twisted-web] CorePost 0.0.7 - all about content types
In-Reply-To: <4E86377C.2000406@ripton.net>
References: <CAGDztiHiRKVjmA=-UQ=-3TXLAbev0dXzTZS9ORTmda0jW__Sig@mail.gmail.com>
	<D84D3FF0-04D1-408A-94D4-BE468F21D770@twistedmatrix.com>
	<CAGDztiFAVz5LfrXcKNuofzudPNh_41T9viGFHdDGTE0gJZ772g@mail.gmail.com>
	<CAGDztiF10hugvua7t+2_TammBXOzJTwLoxk6MESDVHBY7eFV0w@mail.gmail.com>
	<20110930135509.2214.1539730898.divmod.xquotient.173@localhost.localdomain>
	<E4E2936A-D90C-4465-8B73-AB5575B78C9B@gmail.com>
	<20110930162544.2214.1916358482.divmod.xquotient.190@localhost.localdomain>
	<86E88882-DC84-48F5-BF02-E64665176C75@gmail.com>
	<4E86377C.2000406@ripton.net>
Message-ID: <CAGDztiEZKcPedL7CknpjKqKNSJvuMaE0AYKhVrZdS7YJhBbhHw@mail.gmail.com>

That's good news. Let's wait till PyPy 1.7 + Twisted 11.0.X (whatever the
next release may be) to try it out.

Thanks for everyone's work on this
Jacek

On Fri, Sep 30, 2011 at 5:41 PM, David Ripton <dripton at ripton.net> wrote:

> On 09/30/11 14:11, Jaros?aw Fedewicz wrote:
>
> > I haven't tried to re-build PyPy's nightly, because I need the
> > machine to work on, but can try to see if a hand-build will make the
> > problem go away (and thus report it to the MacPorts guys).
>
> Works for me, with Twisted trunk and PyPy built from the tip this
> morning.  But that's on a Linux box, not a Mac with MacPorts, so I don't
> know if that helps you.
>
> --
> David Ripton    dripton at ripton.net
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20110930/dff8204f/attachment.htm 

