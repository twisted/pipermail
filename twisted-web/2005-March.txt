From fog at initd.org  Tue Mar  1 01:47:31 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Tue Mar  1 01:47:36 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <22078878f9b7f91afb4402962e1f9cb0@ulaluma.com>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
	<4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
	<1109608440.2996.1.camel@lana.initd.org>
	<27ad0c667440b0b88a9facc9ddbf2b2b@ulaluma.com>
	<1109632141.2986.9.camel@lana.initd.org>
	<22078878f9b7f91afb4402962e1f9cb0@ulaluma.com>
Message-ID: <1109666851.3131.7.camel@lana.initd.org>

Il giorno lun, 28-02-2005 alle 17:54 -0800, Donovan Preston ha scritto:
> On Feb 28, 2005, at 3:09 PM, Federico Di Gregorio wrote:
> > substituting "this" to "node"? It is fine for me and even the "js" name
> > is not too bad (i.e., I can't think of anything better right now.)
> 
> That is correct, and I hope it is ok. The way "literal" (to be renamed 
> "js") is written is very convenient, too:
> 
> handler(mycallable, liveevil.js.this.value)
> 
> Would work just as well (__getattr__ constructs new literal instances). 
> There is already a module-global "document" literal, so you can do 
> livepage.document.getElementById. literal (js) provides __getitem__ as 
> well as __call__ implementations.

Usefull. Can we also have a module-global "this"? And maybe "window"?
document, window and this are almost the only JS globals I can think of
that are used in a normal page.

> I hope it all makes sense, it is somewhat experimental at this point. 
> One good thing about this new implementation is that there are 
> extensive javascript quoting unittests, where there were none before, 
> so hopefully it is less buggy, more flexible, and less likely to change 
> in the future.

Great. :)

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog@debian.org
INIT.D Developer                                           fog@initd.org
                      Sei una bergogna. Vergonga. Vergogna. -- Valentina
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050301/8a5337a5/attachment.bin
From dp at ulaluma.com  Tue Mar  1 08:17:19 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Mar  1 08:17:23 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <1109666851.3131.7.camel@lana.initd.org>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
	<4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
	<1109608440.2996.1.camel@lana.initd.org>
	<27ad0c667440b0b88a9facc9ddbf2b2b@ulaluma.com>
	<1109632141.2986.9.camel@lana.initd.org>
	<22078878f9b7f91afb4402962e1f9cb0@ulaluma.com>
	<1109666851.3131.7.camel@lana.initd.org>
Message-ID: <7970b9558c56370515a0fced49e0a1d6@ulaluma.com>


On Mar 1, 2005, at 12:47 AM, Federico Di Gregorio wrote:

> Usefull. Can we also have a module-global "this"? And maybe "window"?
> document, window and this are almost the only JS globals I can think of
> that are used in a normal page.

Yes. I was going to go through my JavaScript book and make module-level 
globals for all the various things you would use in a globaly way from 
javascript.

dp


From sridharinfinity at gmail.com  Tue Mar  1 09:00:15 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Tue Mar  1 10:42:34 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <7970b9558c56370515a0fced49e0a1d6@ulaluma.com>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
	<4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
	<1109608440.2996.1.camel@lana.initd.org>
	<27ad0c667440b0b88a9facc9ddbf2b2b@ulaluma.com>
	<1109632141.2986.9.camel@lana.initd.org>
	<22078878f9b7f91afb4402962e1f9cb0@ulaluma.com>
	<1109666851.3131.7.camel@lana.initd.org>
	<7970b9558c56370515a0fced49e0a1d6@ulaluma.com>
Message-ID: <8816fcf805030108002d90b164@mail.gmail.com>

On Tue, 1 Mar 2005 07:17:19 -0800, Donovan Preston <dp@ulaluma.com> wrote:
> 
> Yes. I was going to go through my JavaScript book and make module-level
> globals for all the various things you would use in a globaly way from
> javascript.
> 

Why not js.document, js.global ..?

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From dp at ulaluma.com  Tue Mar  1 12:30:13 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Mar  1 12:30:17 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <8816fcf805030108002d90b164@mail.gmail.com>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
	<4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
	<1109608440.2996.1.camel@lana.initd.org>
	<27ad0c667440b0b88a9facc9ddbf2b2b@ulaluma.com>
	<1109632141.2986.9.camel@lana.initd.org>
	<22078878f9b7f91afb4402962e1f9cb0@ulaluma.com>
	<1109666851.3131.7.camel@lana.initd.org>
	<7970b9558c56370515a0fced49e0a1d6@ulaluma.com>
	<8816fcf805030108002d90b164@mail.gmail.com>
Message-ID: <42f253b5fdc537cbf235854e32c2d877@ulaluma.com>


On Mar 1, 2005, at 8:00 AM, Sridhar Ratna wrote:

> Why not js.document, js.global ..?

That's fine too, and that already works in fact.

dp


From shamrin at gmail.com  Wed Mar  2 07:28:36 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Wed Mar  2 07:29:09 2005
Subject: [Twisted-web] Fix for an issue 92 (windows binary distribution made
	with distutils doesn't install data files into package directories)
Message-ID: <28d42ea7050302062872b63fcb@mail.gmail.com>

Hello!

While trying to fix issue 92 [1] I came to PEAK package. To solve the
problems with distutils they use package 'setuptools' from python cvs
repository. They just add 'setuptools' to PEAK repository and use it
in setup.py [2].

So I tried to do the same for nevow. My results (and longer
description) are attached to issue 92 [1]. For example, with
'setuptools' nevow's setup.py become:

===[...setup.py...]===
#!/usr/bin/env python2.3
# -*- test-case-name: "nevow.test -xformless.test" -*-

from setuptools import setup, find_packages
import sys

packages = find_packages() 

## Prevent 'setuptools' package to be included in certain cases
cmd = sys.argv[1]
if cmd.startswith('bdist') or cmd.startswith('install'):
    packages = [pkg for pkg in packages
                    if not pkg.startswith('setuptools')]

setup(
    author='Donovan Preston et al',
    author_email='dp@divmod.org',
    name='nevow',
    version='0.4pre',
    description='Web Application Construction Kit',
    url='http://www.nevow.com/',
    packages = packages,
    package_data = {
        'formless': ['freeform-default.css'],
        'nevow': ['liveevil.js','Canvas.swf'],
    },
    scripts=['bin/nevow-xmlgettext'],
) 
===[...setup.py...]===

P.S. What about documentation issues 158 [3] and 159 [4]? For some
reason I haven't recieved *any* response. Is it because nobody is
interested in them?

Thank you!

[1] http://divmod.org/users/roundup.twistd/nevow/issue92
[2] http://cvs.eby-sarna.com/PEAK/setup.py?rev=1.101&content-type=text/vnd.viewcvs-markup
[3] http://divmod.org/users/roundup.twistd/nevow/issue158
[4] http://divmod.org/users/roundup.twistd/nevow/issue159

-- 
Best regards,
Alexey.

From shamrin at gmail.com  Wed Mar  2 07:45:52 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Wed Mar  2 07:46:29 2005
Subject: [Twisted-web] Re: Fix for an issue 92 (windows binary distribution
	made with distutils doesn't install data files into package
	directories)
In-Reply-To: <28d42ea7050302062872b63fcb@mail.gmail.com>
References: <28d42ea7050302062872b63fcb@mail.gmail.com>
Message-ID: <28d42ea7050302064573752d84@mail.gmail.com>

Hello!

There is also an issue with MANIFEST.in:

http://divmod.org/users/roundup.twistd/nevow/issue167

-- 
Best regards,
Alexey.

From dp at ulaluma.com  Wed Mar  2 08:22:56 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Mar  2 08:23:00 2005
Subject: [Twisted-web] Fix for an issue 92 (windows binary distribution
	made with distutils doesn't install data files into package
	directories)
In-Reply-To: <28d42ea7050302062872b63fcb@mail.gmail.com>
References: <28d42ea7050302062872b63fcb@mail.gmail.com>
Message-ID: <cda92760f85e8ac77e32c72667b72315@ulaluma.com>


On Mar 2, 2005, at 6:28 AM, Alexey Shamrin wrote:

> P.S. What about documentation issues 158 [3] and 159 [4]? For some
> reason I haven't recieved *any* response. Is it because nobody is
> interested in them?

It is not that nobody is interested, but that everyone is very busy. I 
apologize.

dp


From shamrin at gmail.com  Wed Mar  2 12:56:52 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Wed Mar  2 12:57:29 2005
Subject: [Twisted-web] Fix for an issue 92 (windows binary distribution
	made with distutils doesn't install data files into package
	directories)
In-Reply-To: <cda92760f85e8ac77e32c72667b72315@ulaluma.com>
References: <28d42ea7050302062872b63fcb@mail.gmail.com>
	<cda92760f85e8ac77e32c72667b72315@ulaluma.com>
Message-ID: <28d42ea7050302115622b7d5f4@mail.gmail.com>

Hello Donovan!

You don't need to apologize. Your answer is the response I was waiting for %-)

Can I expect that someday someone will look at my patches?

Best regards,
Alexey.

On Wed, 2 Mar 2005 07:22:56 -0800, Donovan Preston <dp@ulaluma.com> wrote:
> 
> On Mar 2, 2005, at 6:28 AM, Alexey Shamrin wrote:
> 
> > P.S. What about documentation issues 158 [3] and 159 [4]? For some
> > reason I haven't recieved *any* response. Is it because nobody is
> > interested in them?
> 
> It is not that nobody is interested, but that everyone is very busy. I
> apologize.
> 
> dp
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From smadim2 at grads.ece.mcmaster.ca  Wed Mar  2 13:29:26 2005
From: smadim2 at grads.ece.mcmaster.ca (M.N.A.Smadi)
Date: Wed Mar  2 13:29:27 2005
Subject: [Twisted-web] SIP MessageParser
Message-ID: <42262226.2050809@grads.ece.mcmaster.ca>

Hi;
does twisted.protocols.sip.MessagesParser 
<http://twistedmatrix.com/documents/current/api/twisted.protocols.sip.MessagesParser.html> 
implement the NOTIFY/REFER method or is it  going to return the 
|invalidMessage(self)

thanks
m.smadi
|

From therve at free.fr  Wed Mar  2 15:11:15 2005
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Wed Mar  2 15:11:18 2005
Subject: [Twisted-web] Re: nevow.liveevil question (dynamically adding a
	link with its own handler)
Message-ID: <1109801475.42263a0396cc9@imp5-q.free.fr>

On Dec 19, 2004, at 12:05 PM, David Moore wrote:

> def adder(client):
> #    newLink = loaders.stan(tags.a(href="#")["Nothing"])
>     newLink = loaders.stan(tags.a(href="#",
>                 onclick=liveevil.handler(adder))["AddAgain"])
>     client.append('content', newLink)

I got a similar problem and actually found the reason : you can't call
liveevil.handler in a function itself called by liveevil.handler (a function
aimed at javascript).

To make things work, I used a small hack :

### Code
def adder(client):
    newLink = tags.a(onclick="myfunc")["AddAgain"]
    client.append('content', newLink)
### END Code

In your page :

### Code
def render_myfunc(context, data);
    return liveevil.handler(adder)
### END Code

And in your html/stan/whatever :

### Code
<script language="javascript">
    function my_func() {
    <span nevow:render="myfunc" />
   }
</script>
### END Code

Hope it'll help

--
Thomas

From matt at pollenation.net  Wed Mar  2 15:48:03 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed Mar  2 15:48:09 2005
Subject: [Twisted-web] Fix for an issue 92 (windows binary distribution
	made with distutils doesn't install data files into package
	directories)
In-Reply-To: <28d42ea7050302115622b7d5f4@mail.gmail.com>
References: <28d42ea7050302062872b63fcb@mail.gmail.com>
	<cda92760f85e8ac77e32c72667b72315@ulaluma.com>
	<28d42ea7050302115622b7d5f4@mail.gmail.com>
Message-ID: <1109803683.3797.70.camel@localhost.localdomain>

On Wed, 2005-03-02 at 22:56 +0300, Alexey Shamrin wrote:
> Hello Donovan!
> 
> You don't need to apologize. Your answer is the response I was waiting for %-)
> 
> Can I expect that someday someone will look at my patches?

Yes, someone will.

I actually started a reply to one of your previous emails (22 Feb) but
got sidetracked by work and it looks like I never even sent it in the
end. Sorry about that.

Please, please, please keep submitting fixes. It you submit enough
you'll probably just get commit access anyway so we don't get fed up
reviewing stuff :wink:.

- Matt

> 
> Best regards,
> Alexey.
> 
> On Wed, 2 Mar 2005 07:22:56 -0800, Donovan Preston <dp@ulaluma.com> wrote:
> > 
> > On Mar 2, 2005, at 6:28 AM, Alexey Shamrin wrote:
> > 
> > > P.S. What about documentation issues 158 [3] and 159 [4]? For some
> > > reason I haven't recieved *any* response. Is it because nobody is
> > > interested in them?
> > 
> > It is not that nobody is interested, but that everyone is very busy. I
> > apologize.
> > 
> > dp
> > 
> > _______________________________________________
> > Twisted-web mailing list
> > Twisted-web@twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> >
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From tv at twistedmatrix.com  Thu Mar  3 06:47:00 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Mar  3 06:47:45 2005
Subject: [Twisted-web] SIP MessageParser
In-Reply-To: <42262226.2050809@grads.ece.mcmaster.ca>
References: <42262226.2050809@grads.ece.mcmaster.ca>
Message-ID: <42271554.9070109@twistedmatrix.com>

M.N.A.Smadi wrote:
> does twisted.protocols.sip.MessagesParser 
> <http://twistedmatrix.com/documents/current/api/twisted.protocols.sip.MessagesParser.html> 
> implement the NOTIFY/REFER method or is it  going to return the 
> |invalidMessage(self)

This is the twisted-*web* mailing list, and you are off topic. Try the
main twisted list.

From andrea at cpushare.com  Thu Mar  3 09:50:18 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Mar  3 09:50:23 2005
Subject: [Twisted-web] Fix for an issue 92 (windows binary distribution
	made with distutils doesn't install data files into package
	directories)
In-Reply-To: <1109803683.3797.70.camel@localhost.localdomain>
References: <28d42ea7050302062872b63fcb@mail.gmail.com>
	<cda92760f85e8ac77e32c72667b72315@ulaluma.com>
	<28d42ea7050302115622b7d5f4@mail.gmail.com>
	<1109803683.3797.70.camel@localhost.localdomain>
Message-ID: <20050303165018.GO8880@opteron.random>

On Wed, Mar 02, 2005 at 10:48:03PM +0000, Matt Goodall wrote:
> Yes, someone will.

btw, I would also like to send a reminder about getting the caching
stuff into the trunk ;). I proved that the hard approach in rend.Page is
significantly more performant than the tags.cached pure approach (even
the hard approach is less clean).

This is what I carry in my own Nevow branch (most of it is dialtone's
Nevow-caching branch):

Index: Nevow/nevow/tags.py
===================================================================
--- Nevow/nevow/tags.py	(revision 1257)
+++ Nevow/nevow/tags.py	(working copy)
@@ -25,7 +25,7 @@
 """
 
 
-from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata
+from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata, cached
 
 
 comment = CommentProto()
@@ -62,7 +62,9 @@
 def inlineJS(s):
     return script(type="text/javascript", language="JavaScript")[xml('\n//<![CDATA[\n%s\n//]]>\n' % s)]
 
-__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object', '_map', 'drange', 'Tag', 'directive', 'xml', 'raw', 'slot', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
+__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object',
+                  '_map', 'drange', 'Tag', 'directive', 'xml', 'raw',
+                  'slot', 'cached', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
 
 
 ########################
Index: Nevow/nevow/__init__.py
===================================================================
--- Nevow/nevow/__init__.py	(revision 1257)
+++ Nevow/nevow/__init__.py	(working copy)
@@ -138,6 +138,8 @@
 nevow.util.remainingSegmentsFactory  nevow.context.RequestContext   nevow.inevow.IRemainingSegments
 nevow.util.currentSegmentsFactory  nevow.context.RequestContext   nevow.inevow.ICurrentSegments
 
+nevow.cache.SiteCache   nevow.context.SiteContext   nevow.inevow.ICache
+
 nevow.query.QueryContext    nevow.context.WovenContext  nevow.inevow.IQ
 nevow.query.QueryLoader     nevow.inevow.IDocFactory      nevow.inevow.IQ
 nevow.query.QueryList       __builtin__.list        nevow.inevow.IQ
@@ -186,6 +188,7 @@
 nevow.flat.flatstan.RendererSerializer            nevow.inevow.IRenderer
 nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive
 nevow.flat.flatstan.SlotSerializer                nevow.stan.slot
+nevow.flat.flatstan.CachedSerializer              nevow.stan.cached 
 nevow.flat.flatstan.ContextSerializer             nevow.context.WovenContext
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.Deferred
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.DeferredList
Index: Nevow/nevow/flat/flatstan.py
===================================================================
--- Nevow/nevow/flat/flatstan.py	(revision 1257)
+++ Nevow/nevow/flat/flatstan.py	(working copy)
@@ -8,11 +8,15 @@
 
 from nevow import util
 from nevow.stan import Proto, Tag, xml, directive, Unset, invisible
-from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData
-from nevow.flat import precompile, serialize
+from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData, ICache
+from nevow.flat import precompile, serialize, iterflatten
 from nevow.accessors import convertToData
 from nevow.context import WovenContext
 
+from time import time as now
+from cStringIO import StringIO
+from twisted.internet import defer
+
 allowSingleton = ('img', 'br', 'hr', 'base', 'meta', 'link', 'param', 'area',
                   'input', 'col', 'basefont', 'isindex', 'frame')
 
@@ -226,6 +230,43 @@
         return serialize(original.default, context)
     return serialize(data, context)
 
+def CachedSerializer(original, context):
+    cache = ICache(original.scope(context))
+    cached = cache.get(original.key, original.lifetime)
+    if cached:
+        yield cached
+        return
+    io = StringIO()
+    for child in iterflatten(original.children, context, io.write,
+                             lambda item: True):
+        if isinstance(child, tuple):
+            childDeferred, childReturner = child
+ 
+            d = defer.Deferred() ## A new deferred for the outer loop, whose result
+            ## we don't care about, because we don't want the outer loop to write
+            ## anything when this deferred fires -- only when the entire for loop
+            ## has completed and we have all the "children" flattened
+ 
+            def innerDeferredResultAvailable(result):
+                childReturner(result) ## Cause the inner iterflatten to continue
+                d.callback('') ## Cause the outer iterflatten to continue
+                return ''
+ 
+            childDeferred.addCallback(innerDeferredResultAvailable)
+ 
+            ## Make the outer loop wait on our new deferred.
+            ## We call the new deferred back with ''
+            ## Which will cause the outer loop to write '' to the request,
+            ## which doesn't matter. It will then call our "returner",
+            ## which is just the noop lambda below, because we don't care
+            ## about the return result of the new deferred, which is just
+            ## ''
+ 
+            yield d, lambda result: ''    
+    result = io.getvalue()
+    cache.set(result, original.key)
+    yield result
+
 def ContextSerializer(original, context):
     originalContext = original.clone(deep=False)
     originalContext.precompile = context and context.precompile or False
Index: Nevow/nevow/stan.py
===================================================================
--- Nevow/nevow/stan.py	(revision 1257)
+++ Nevow/nevow/stan.py	(working copy)
@@ -119,8 +119,40 @@
         """
         raise NotImplementedError, "Stan slot instances are not iterable."
 
+def passThrough(_):
+    return _
 
+class cached(object):
+    """Marker for cached content
+    """
+    __slots__ = ['key', 'children', 'lifetime', 'scope']
 
+    def __init__(self, key, scope=None, lifetime=-1):
+        self.key = key
+        self.children = []
+        self.lifetime = lifetime
+        self.scope = scope
+        if not scope:
+            self.scope = passThrough
+            
+
+    def __repr__(self):
+        return "cached('%s','%s')" % self.key, self.lifetime
+
+    def __getitem__(self, children):
+        """cached content is what is being cached
+        """
+        if not isinstance(children, (list, tuple)):
+            children = [children]
+        self.children.extend(children)
+        return self
+
+    def __iter__(self):
+        """Prevent an infinite loop if someone tries to do
+            for x in cached('foo'):
+        """
+        raise NotImplementedError, "Stan slot instances are not iterable."
+
 class Tag(object):
     """Tag instances represent XML tags with a tag name, attributes,
     and children. Tag instances can be constructed using the Prototype
Index: Nevow/nevow/inevow.py
===================================================================
--- Nevow/nevow/inevow.py	(revision 1257)
+++ Nevow/nevow/inevow.py	(working copy)
@@ -98,8 +98,24 @@
     
     ANY python object is said to implement IData.
     """
+class ICache(compy.Interface):
+    """This object represents the cache that contains all the
+    pre-flattened fragments
+    """
+    def get(self, index, lifetime):
+        """ Get an object from the cache with the given index only if
+        it is less old than lifetime, otherwise return None.
+        """
 
+    def set(self, toBeCached, *indexes):
+        """ Register toBeCached with each of the indexes passed """
 
+    def clear(self, what):
+        """ Clear what keyed element from the cache, or search for
+        what in sequences in all the keys and clear the item
+        """
+        
+
 class IGettable(compy.Interface):
     def get(self, context):
         """Return the data
Index: Nevow/nevow/rend.py
===================================================================
--- Nevow/nevow/rend.py	(revision 1257)
+++ Nevow/nevow/rend.py	(working copy)
@@ -30,6 +30,7 @@
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -376,6 +377,8 @@
         self.children[name] = child
     
 
+_CACHE = {}
+
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
     via the document factory (docFactory).
@@ -389,8 +392,37 @@
     afterRender = None
     addSlash = None
 
+    cache = False
+    lifetime = -1
+    __lastCacheRendering = 0
+
     flattenFactory = flat.flattenFactory
 
+    def hasCache(self, ctx):
+        if not self.cache:
+            return
+
+        _now = now() # run gettimeofday only once
+        timeout = _now > self.__lastCacheRendering + self.lifetime and \
+                  self.lifetime >= 0
+        c = self.lookupCache(ctx)
+        if timeout or c is None:
+            # stop other renders
+            self.__lastCacheRendering = _now
+            c = None
+        return c
+    def cacheRendered(self, ctx, c):
+        if not self.cache:
+            return
+        # overwrite the deferred with the data
+        self.storeCache(ctx, c)
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+    def storeCache(self, ctx, c):
+        _CACHE[self.cacheIDX(ctx)] = c
+    def lookupCache(self, ctx):
+        return _CACHE.get(self.cacheIDX(ctx))
+
     def renderHTTP(self, ctx):
         ## XXX request is really ctx now, change the name here
         request = inevow.IRequest(ctx)
@@ -412,11 +444,18 @@
             if self.afterRender is not None:
                 self.afterRender(ctx)
 
-        if self.buffered:
+        c = self.hasCache(ctx)
+        if c is not None:
+            finishRequest()
+            return c
+
+        if self.buffered or self.cache:
             io = StringIO()
             writer = io.write
             def finisher(result):
-                request.write(io.getvalue())
+                c = io.getvalue()
+                self.cacheRendered(ctx, c)
+                request.write(c)
                 finishRequest()
                 return result
         else:
@@ -500,7 +539,6 @@
             else:
                 ## Use the redirectAfterPost url
                 ref = str(redirectAfterPost)
-            from nevow import url
             refpath = url.URL.fromString(ref)
             magicCookie = str(now())
             refpath = refpath.replace('_nevow_carryover_', magicCookie)
Index: Nevow/nevow/guard.py
===================================================================
--- Nevow/nevow/guard.py	(revision 1257)
+++ Nevow/nevow/guard.py	(working copy)
@@ -24,7 +24,7 @@
 from twisted.protocols import http
 
 # Nevow imports
-from nevow import inevow, url, stan
+from nevow import inevow, url, stan, cache
 
 
 def _sessionCookie():
@@ -315,6 +315,7 @@
                               path="/%s" % '/'.join(request.prepath),
                               secure=secure)
         sz = self.sessions[newCookie] = self.sessionFactory(self, newCookie)
+        sz.setComponent(inevow.ICache, cache.SessionCache())
         sz.args = request.args
         sz.fields = getattr(request, 'fields', {})
         sz.content = request.content
Index: Nevow/nevow/cache.py
===================================================================
--- Nevow/nevow/cache.py	(revision 0)
+++ Nevow/nevow/cache.py	(revision 0)
@@ -0,0 +1,33 @@
+from time import time as now
+from nevow import inevow
+
+class SiteCache(object):
+    __implements__ = inevow.ICache,
+    _content = {}
+    def __init__(self, original):
+        self.original = original
+
+    def get(self, index, lifetime):
+        cached = self._content.get(index, None)
+        if cached is None:
+            return
+        if lifetime < 0:
+            return cached[1]
+        if cached[0] + lifetime > now():
+            return cached[1]
+
+    def set(self, toBeCached, *indexes):
+        _now = now()
+        for index in indexes:
+            self._content[index] = (_now, toBeCached)
+
+    def clear(self, what):
+        if self._content.has_key(what):
+            self._content.pop(what)
+        for key in self._content.keys():
+            if what in key:
+                self._content.pop(key)
+
+class SessionCache(SiteCache):
+    def __init__(self):
+        self._content = {}

This code is working for a few weeks on www.cpushare.com, so far so
good (all http part is completely cached with the rand.Page lifetime and
it delivers >200 req per second of those small pages). I also use the
tags.caching from dialtime in various places.

Thanks a lot to dialtone and everyone else for making this possible.

From corydodt at twistedmatrix.com  Thu Mar  3 10:33:42 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu Mar  3 10:37:05 2005
Subject: [Twisted-web] Fix for an issue 92 (windows binary distribution
	made with distutils doesn't install data files into
	package	directories)
In-Reply-To: <20050303165018.GO8880@opteron.random>
References: <28d42ea7050302062872b63fcb@mail.gmail.com>	<cda92760f85e8ac77e32c72667b72315@ulaluma.com>	<28d42ea7050302115622b7d5f4@mail.gmail.com>	<1109803683.3797.70.camel@localhost.localdomain>
	<20050303165018.GO8880@opteron.random>
Message-ID: <42274A76.2080502@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

+1 performance-enhancing drugs.

BTW, is there an example of using cached anywhere?

C


Andrea Arcangeli wrote:
| On Wed, Mar 02, 2005 at 10:48:03PM +0000, Matt Goodall wrote:
|
|>Yes, someone will.
|
|
| btw, I would also like to send a reminder about getting the caching
| stuff into the trunk ;). I proved that the hard approach in rend.Page is
| significantly more performant than the tags.cached pure approach (even
| the hard approach is less clean).
|
| This is what I carry in my own Nevow branch (most of it is dialtone's
| Nevow-caching branch):
|
| Index: Nevow/nevow/tags.py
| ===================================================================
| --- Nevow/nevow/tags.py	(revision 1257)
| +++ Nevow/nevow/tags.py	(working copy)
| @@ -25,7 +25,7 @@
|  """
|
|
| -from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto,
invisible, slot, cdata
| +from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto,
invisible, slot, cdata, cached
|
|
|  comment = CommentProto()
| @@ -62,7 +62,9 @@
|  def inlineJS(s):
|      return script(type="text/javascript",
language="JavaScript")[xml('\n//<![CDATA[\n%s\n//]]>\n' % s)]
|
| -__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object',
'_map', 'drange', 'Tag', 'directive', 'xml', 'raw', 'slot', 'cdata',
'inlineJS'] + ['_%s' % x for x in range(100)]
| +__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object',
| +                  '_map', 'drange', 'Tag', 'directive', 'xml', 'raw',
| +                  'slot', 'cached', 'cdata', 'inlineJS'] + ['_%s' % x for x
in range(100)]
|
|
|  ########################
| Index: Nevow/nevow/__init__.py
| ===================================================================
| --- Nevow/nevow/__init__.py	(revision 1257)
| +++ Nevow/nevow/__init__.py	(working copy)
| @@ -138,6 +138,8 @@
|  nevow.util.remainingSegmentsFactory  nevow.context.RequestContext
nevow.inevow.IRemainingSegments
|  nevow.util.currentSegmentsFactory  nevow.context.RequestContext
nevow.inevow.ICurrentSegments
|
| +nevow.cache.SiteCache   nevow.context.SiteContext   nevow.inevow.ICache
| +
|  nevow.query.QueryContext    nevow.context.WovenContext  nevow.inevow.IQ
|  nevow.query.QueryLoader     nevow.inevow.IDocFactory      nevow.inevow.IQ
|  nevow.query.QueryList       __builtin__.list        nevow.inevow.IQ
| @@ -186,6 +188,7 @@
|  nevow.flat.flatstan.RendererSerializer            nevow.inevow.IRenderer
|  nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive
|  nevow.flat.flatstan.SlotSerializer                nevow.stan.slot
| +nevow.flat.flatstan.CachedSerializer              nevow.stan.cached
|  nevow.flat.flatstan.ContextSerializer             nevow.context.WovenContext
|  nevow.flat.flatstan.DeferredSerializer
twisted.internet.defer.Deferred
|  nevow.flat.flatstan.DeferredSerializer
twisted.internet.defer.DeferredList
| Index: Nevow/nevow/flat/flatstan.py
| ===================================================================
| --- Nevow/nevow/flat/flatstan.py	(revision 1257)
| +++ Nevow/nevow/flat/flatstan.py	(working copy)
| @@ -8,11 +8,15 @@
|
|  from nevow import util
|  from nevow.stan import Proto, Tag, xml, directive, Unset, invisible
| -from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData
| -from nevow.flat import precompile, serialize
| +from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData, ICache
| +from nevow.flat import precompile, serialize, iterflatten
|  from nevow.accessors import convertToData
|  from nevow.context import WovenContext
|
| +from time import time as now
| +from cStringIO import StringIO
| +from twisted.internet import defer
| +
|  allowSingleton = ('img', 'br', 'hr', 'base', 'meta', 'link', 'param', 'area',
|                    'input', 'col', 'basefont', 'isindex', 'frame')
|
| @@ -226,6 +230,43 @@
|          return serialize(original.default, context)
|      return serialize(data, context)
|
| +def CachedSerializer(original, context):
| +    cache = ICache(original.scope(context))
| +    cached = cache.get(original.key, original.lifetime)
| +    if cached:
| +        yield cached
| +        return
| +    io = StringIO()
| +    for child in iterflatten(original.children, context, io.write,
| +                             lambda item: True):
| +        if isinstance(child, tuple):
| +            childDeferred, childReturner = child
| +
| +            d = defer.Deferred() ## A new deferred for the outer loop,
whose result
| +            ## we don't care about, because we don't want the outer loop to
write
| +            ## anything when this deferred fires -- only when the entire
for loop
| +            ## has completed and we have all the "children" flattened
| +
| +            def innerDeferredResultAvailable(result):
| +                childReturner(result) ## Cause the inner iterflatten to
continue
| +                d.callback('') ## Cause the outer iterflatten to continue
| +                return ''
| +
| +            childDeferred.addCallback(innerDeferredResultAvailable)
| +
| +            ## Make the outer loop wait on our new deferred.
| +            ## We call the new deferred back with ''
| +            ## Which will cause the outer loop to write '' to the request,
| +            ## which doesn't matter. It will then call our "returner",
| +            ## which is just the noop lambda below, because we don't care
| +            ## about the return result of the new deferred, which is just
| +            ## ''
| +
| +            yield d, lambda result: ''
| +    result = io.getvalue()
| +    cache.set(result, original.key)
| +    yield result
| +
|  def ContextSerializer(original, context):
|      originalContext = original.clone(deep=False)
|      originalContext.precompile = context and context.precompile or False
| Index: Nevow/nevow/stan.py
| ===================================================================
| --- Nevow/nevow/stan.py	(revision 1257)
| +++ Nevow/nevow/stan.py	(working copy)
| @@ -119,8 +119,40 @@
|          """
|          raise NotImplementedError, "Stan slot instances are not iterable."
|
| +def passThrough(_):
| +    return _
|
| +class cached(object):
| +    """Marker for cached content
| +    """
| +    __slots__ = ['key', 'children', 'lifetime', 'scope']
|
| +    def __init__(self, key, scope=None, lifetime=-1):
| +        self.key = key
| +        self.children = []
| +        self.lifetime = lifetime
| +        self.scope = scope
| +        if not scope:
| +            self.scope = passThrough
| +
| +
| +    def __repr__(self):
| +        return "cached('%s','%s')" % self.key, self.lifetime
| +
| +    def __getitem__(self, children):
| +        """cached content is what is being cached
| +        """
| +        if not isinstance(children, (list, tuple)):
| +            children = [children]
| +        self.children.extend(children)
| +        return self
| +
| +    def __iter__(self):
| +        """Prevent an infinite loop if someone tries to do
| +            for x in cached('foo'):
| +        """
| +        raise NotImplementedError, "Stan slot instances are not iterable."
| +
|  class Tag(object):
|      """Tag instances represent XML tags with a tag name, attributes,
|      and children. Tag instances can be constructed using the Prototype
| Index: Nevow/nevow/inevow.py
| ===================================================================
| --- Nevow/nevow/inevow.py	(revision 1257)
| +++ Nevow/nevow/inevow.py	(working copy)
| @@ -98,8 +98,24 @@
|
|      ANY python object is said to implement IData.
|      """
| +class ICache(compy.Interface):
| +    """This object represents the cache that contains all the
| +    pre-flattened fragments
| +    """
| +    def get(self, index, lifetime):
| +        """ Get an object from the cache with the given index only if
| +        it is less old than lifetime, otherwise return None.
| +        """
|
| +    def set(self, toBeCached, *indexes):
| +        """ Register toBeCached with each of the indexes passed """
|
| +    def clear(self, what):
| +        """ Clear what keyed element from the cache, or search for
| +        what in sequences in all the keys and clear the item
| +        """
| +
| +
|  class IGettable(compy.Interface):
|      def get(self, context):
|          """Return the data
| Index: Nevow/nevow/rend.py
| ===================================================================
| --- Nevow/nevow/rend.py	(revision 1257)
| +++ Nevow/nevow/rend.py	(working copy)
| @@ -30,6 +30,7 @@
|  from nevow import flat
|  from nevow.util import log
|  from nevow import util
| +from nevow import url
|
|  import formless
|  from formless import iformless
| @@ -376,6 +377,8 @@
|          self.children[name] = child
|
|
| +_CACHE = {}
| +
|  class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
|      """A page is the main Nevow resource and renders a document loaded
|      via the document factory (docFactory).
| @@ -389,8 +392,37 @@
|      afterRender = None
|      addSlash = None
|
| +    cache = False
| +    lifetime = -1
| +    __lastCacheRendering = 0
| +
|      flattenFactory = flat.flattenFactory
|
| +    def hasCache(self, ctx):
| +        if not self.cache:
| +            return
| +
| +        _now = now() # run gettimeofday only once
| +        timeout = _now > self.__lastCacheRendering + self.lifetime and \
| +                  self.lifetime >= 0
| +        c = self.lookupCache(ctx)
| +        if timeout or c is None:
| +            # stop other renders
| +            self.__lastCacheRendering = _now
| +            c = None
| +        return c
| +    def cacheRendered(self, ctx, c):
| +        if not self.cache:
| +            return
| +        # overwrite the deferred with the data
| +        self.storeCache(ctx, c)
| +    def cacheIDX(self, ctx):
| +        return str(url.URL.fromContext(ctx))
| +    def storeCache(self, ctx, c):
| +        _CACHE[self.cacheIDX(ctx)] = c
| +    def lookupCache(self, ctx):
| +        return _CACHE.get(self.cacheIDX(ctx))
| +
|      def renderHTTP(self, ctx):
|          ## XXX request is really ctx now, change the name here
|          request = inevow.IRequest(ctx)
| @@ -412,11 +444,18 @@
|              if self.afterRender is not None:
|                  self.afterRender(ctx)
|
| -        if self.buffered:
| +        c = self.hasCache(ctx)
| +        if c is not None:
| +            finishRequest()
| +            return c
| +
| +        if self.buffered or self.cache:
|              io = StringIO()
|              writer = io.write
|              def finisher(result):
| -                request.write(io.getvalue())
| +                c = io.getvalue()
| +                self.cacheRendered(ctx, c)
| +                request.write(c)
|                  finishRequest()
|                  return result
|          else:
| @@ -500,7 +539,6 @@
|              else:
|                  ## Use the redirectAfterPost url
|                  ref = str(redirectAfterPost)
| -            from nevow import url
|              refpath = url.URL.fromString(ref)
|              magicCookie = str(now())
|              refpath = refpath.replace('_nevow_carryover_', magicCookie)
| Index: Nevow/nevow/guard.py
| ===================================================================
| --- Nevow/nevow/guard.py	(revision 1257)
| +++ Nevow/nevow/guard.py	(working copy)
| @@ -24,7 +24,7 @@
|  from twisted.protocols import http
|
|  # Nevow imports
| -from nevow import inevow, url, stan
| +from nevow import inevow, url, stan, cache
|
|
|  def _sessionCookie():
| @@ -315,6 +315,7 @@
|                                path="/%s" % '/'.join(request.prepath),
|                                secure=secure)
|          sz = self.sessions[newCookie] = self.sessionFactory(self, newCookie)
| +        sz.setComponent(inevow.ICache, cache.SessionCache())
|          sz.args = request.args
|          sz.fields = getattr(request, 'fields', {})
|          sz.content = request.content
| Index: Nevow/nevow/cache.py
| ===================================================================
| --- Nevow/nevow/cache.py	(revision 0)
| +++ Nevow/nevow/cache.py	(revision 0)
| @@ -0,0 +1,33 @@
| +from time import time as now
| +from nevow import inevow
| +
| +class SiteCache(object):
| +    __implements__ = inevow.ICache,
| +    _content = {}
| +    def __init__(self, original):
| +        self.original = original
| +
| +    def get(self, index, lifetime):
| +        cached = self._content.get(index, None)
| +        if cached is None:
| +            return
| +        if lifetime < 0:
| +            return cached[1]
| +        if cached[0] + lifetime > now():
| +            return cached[1]
| +
| +    def set(self, toBeCached, *indexes):
| +        _now = now()
| +        for index in indexes:
| +            self._content[index] = (_now, toBeCached)
| +
| +    def clear(self, what):
| +        if self._content.has_key(what):
| +            self._content.pop(what)
| +        for key in self._content.keys():
| +            if what in key:
| +                self._content.pop(key)
| +
| +class SessionCache(SiteCache):
| +    def __init__(self):
| +        self._content = {}
|
| This code is working for a few weeks on www.cpushare.com, so far so
| good (all http part is completely cached with the rand.Page lifetime and
| it delivers >200 req per second of those small pages). I also use the
| tags.caching from dialtime in various places.
|
| Thanks a lot to dialtone and everyone else for making this possible.
|
| _______________________________________________
| Twisted-web mailing list
| Twisted-web@twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCJ0p23A5SrXAiHQcRApmdAJ96j3+OTlRyXjb5crYzoq6xq/lDBACcCEas
F0Mrvrylx1FOipT8q0EfQ8Y=
=iRMT
-----END PGP SIGNATURE-----

From sa at c-area.ch  Thu Mar  3 10:41:12 2005
From: sa at c-area.ch (Steven Armstrong)
Date: Thu Mar  3 10:41:15 2005
Subject: [Twisted-web] patch: default values for slots from html templates
Message-ID: <42274C38.4080701@c-area.ch>

Hi all

I've found out lately that you can give a slot a default value when
using stan. Attached is a patch that enables that functionality for
xmlstring and xmlfile templates.

Stan:
T.span[T.slot("my_slot_name", default="Whatever")]

HTML:
<span><n:slot name="my_slot_name" default="Whatever" /></span>


regards
Steven
-------------- next part --------------
Index: nevow/flat/flatsax.py
===================================================================
--- nevow/flat/flatsax.py	(revision 1213)
+++ nevow/flat/flatsax.py	(working copy)
@@ -103,7 +103,7 @@
             if name == 'invisible':
                 name = ''
             elif name == 'slot':
-                el = slot(attrs[(None,'name')])
+                el = slot(attrs[(None,'name')], attrs.get((None, 'default'), None))
                 self.stack.append(el)
                 self.current.append(el)
                 self.current = el.children
Index: nevow/flat/flatmdom.py
===================================================================
--- nevow/flat/flatmdom.py	(revision 1213)
+++ nevow/flat/flatmdom.py	(working copy)
@@ -43,7 +43,7 @@
         if name == 'invisible':
             name = ''
         elif name == 'slot':
-            return slot(element.attributes['name'])[
+            return slot(element.attributes['name'], element.attributes.get("default", None))[
                 precompile(serialize(element.childNodes, context), context)]
     
     attrs = dict(element.attributes) # get rid of CaseInsensitiveDict
From andrea at cpushare.com  Thu Mar  3 11:07:40 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Mar  3 11:07:44 2005
Subject: [Twisted-web] Fix for an issue 92 (windows binary distribution
	made with distutils doesn't install data files into
	package	directories)
In-Reply-To: <42274A76.2080502@twistedmatrix.com>
References: <28d42ea7050302062872b63fcb@mail.gmail.com>
	<cda92760f85e8ac77e32c72667b72315@ulaluma.com>
	<28d42ea7050302115622b7d5f4@mail.gmail.com>
	<1109803683.3797.70.camel@localhost.localdomain>
	<20050303165018.GO8880@opteron.random>
	<42274A76.2080502@twistedmatrix.com>
Message-ID: <20050303180740.GP8880@opteron.random>

On Thu, Mar 03, 2005 at 09:33:42AM -0800, Cory Dodt wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> +1 performance-enhancing drugs.
> 
> BTW, is there an example of using cached anywhere?

weever has some example for tags cached.

The hard rand.Page cache is much simpler to use, my code looks like this:

LIFETIME = 60

class forever_cached_page_class(rend.Page):
	cache = True
class cached_page_class(forever_cached_page_class):
	lifetime = LIFETIME

class myclass(rend.Page, cached_page_class):
	...

class myclass(rand.Page, forever_cached_page_class):
	...


If the renderings are static you can cache forever, mine are dynamic
over time, so I more frequently use multiple inheritance
with cached_page_class.

Trivial isn't it?

It has taken me _minutes_ to cache my whole site.

Try w/ cache and w/o cache ab2 -n 1000 -c 100 localhost:8080/

Still there are parts where I don't cache anything (since I don't want
to complicate things too much), and for those the optimizations in compy
should payoff significantly.

Thanks!

From sridharinfinity at gmail.com  Thu Mar  3 11:28:12 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Thu Mar  3 11:28:56 2005
Subject: [Twisted-web] patch: default values for slots from html templates
In-Reply-To: <42274C38.4080701@c-area.ch>
References: <42274C38.4080701@c-area.ch>
Message-ID: <8816fcf805030310282c112a35@mail.gmail.com>

> HTML:
> <span><n:slot name="my_slot_name" default="Whatever" /></span>
> 

Shouldn't this be 
<span><n:slot name="my_slot_name">Whatever</n:slot></span>

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From general at eepatents.com  Thu Mar  3 11:47:06 2005
From: general at eepatents.com (Ed Suominen)
Date: Thu Mar  3 11:46:48 2005
Subject: [Twisted-web] patch: default values for slots from html templates
In-Reply-To: <42274C38.4080701@c-area.ch>
References: <42274C38.4080701@c-area.ch>
Message-ID: <200503031047.06490.general@eepatents.com>

Cool! I for one will find that useful when it's committed (hint hint)...

---
Ed Suominen
Registered Patent Agent
Open-Source Software Author (yes, both...)
Web Site: http://www.eepatents.com

On Thursday 03 March 2005 09:41 am, Steven Armstrong wrote:
> Hi all
>
> I've found out lately that you can give a slot a default value when
> using stan. Attached is a patch that enables that functionality for
> xmlstring and xmlfile templates.
>
> Stan:
> T.span[T.slot("my_slot_name", default="Whatever")]
>
> HTML:
> <span><n:slot name="my_slot_name" default="Whatever" /></span>
>
>
> regards
> Steven

From sa at c-area.ch  Thu Mar  3 12:21:04 2005
From: sa at c-area.ch (Steven Armstrong)
Date: Thu Mar  3 12:21:10 2005
Subject: [Twisted-web] patch: default values for slots from html templates
In-Reply-To: <8816fcf805030310282c112a35@mail.gmail.com>
References: <42274C38.4080701@c-area.ch>
	<8816fcf805030310282c112a35@mail.gmail.com>
Message-ID: <422763A0.4000302@c-area.ch>

On 03/03/05 19:28, Sridhar Ratna wrote:
>> HTML:
>> <span><n:slot name="my_slot_name" default="Whatever" /></span>
>> 
> 
> Shouldn't this be 
> <span><n:slot name="my_slot_name">Whatever</n:slot></span>
> 

That's not the same.

e.g: given a dict like:
people = [{'name': "Fred", 'surname': "Flintstone"}]

<div n:data="people" n:render="sequence">
  <div n:pattern="item" n:render="mapping">
    <n:slot name="name" />
    <n:slot name="surname" />
    <n:slot name="age">Not defined</n:slot> <-- This raises a KeyError
    <n:slot name="age" default="Not defined" /> <-- This doesn't
  </div>
</div>

The cool thing about default="whatever" is that you can (mis)use it to
mark slots as optional.

IMHO it makes the render="mapping" functionality even more powerfull.

From ste at demaledetti.net  Thu Mar  3 14:05:36 2005
From: ste at demaledetti.net (Stefano Debenedetti)
Date: Thu Mar  3 14:02:42 2005
Subject: [Twisted-web] patch: default values for slots from html templates
Message-ID: <42277C20.7080306@demaledetti.net>

Steven Armstrong ha scritto:

> The cool thing about default="whatever" is that you can (mis)use it to
> mark slots as optional.
> 
> IMHO it makes the render="mapping" functionality even more powerfull.

Yes, +1 for the defaulting functionality: tremendously useful, makes for more elegant templates and code.

But I like more the syntax suggested by srid for specifying the default: 

+ more similar to what other popular templating languages do, XSLT for one but also some java-based I think
+ makes templates more useful when looked at in a browser by themselves (w/o nevow rendering), when testing the l'n'f

just my .02

ciao
ste

From tv at twistedmatrix.com  Thu Mar  3 13:40:44 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Mar  3 14:36:56 2005
Subject: [Twisted-web] patch: default values for slots from html templates
In-Reply-To: <42277C20.7080306@demaledetti.net>
References: <42277C20.7080306@demaledetti.net>
Message-ID: <4227764C.8080203@twistedmatrix.com>

Stefano Debenedetti wrote:
> But I like more the syntax suggested by srid for specifying the default:
> + more similar to what other popular templating languages do, XSLT for 
> one but also some java-based I think
> + makes templates more useful when looked at in a browser by themselves 
> (w/o nevow rendering), when testing the l'n'f

The problem with that is that a lot of existing templates already use
<n:slot name="foo">Stuff for the web monkey to see</n:slot>, and you
certainly don't want that to be the default.

Also, I'd imagine it's a valid use case to want to see some "example
data" in the template, when viewed directly, and still set the default
to something else.

<p class="person">
   <n:slot name="fullname" default="MISSING">John Doe</n:slot>
</p>

The biggest downside with the default="foo" syntax is its inability
to do non-strings.

Taking all of the above into consideration, I'd suggest something like

<p class="person">
   <n:slot name="fullname">
     <n:slotdefault>MISSING</n:slotdefault>
     John Doe
   </n:slot>
</p>

and possibly also allow the default="MISSING", to make simple case
simple.

From foom at fuhm.net  Thu Mar  3 14:48:47 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu Mar  3 14:48:54 2005
Subject: [Twisted-web] patch: default values for slots from html templates
In-Reply-To: <4227764C.8080203@twistedmatrix.com>
References: <42277C20.7080306@demaledetti.net>
	<4227764C.8080203@twistedmatrix.com>
Message-ID: <d589c40eba4a63c71b9274432a0d060f@fuhm.net>

On Mar 3, 2005, at 3:40 PM, Tommi Virtanen wrote:
> The problem with that is that a lot of existing templates already use
> <n:slot name="foo">Stuff for the web monkey to see</n:slot>, and you
> certainly don't want that to be the default.
>
> Also, I'd imagine it's a valid use case to want to see some "example
> data" in the template, when viewed directly, and still set the default
> to something else.

If that's a requirement, I don't think your proposed syntax will do it, 
because the webmonkey will see both MISSING *and* John Doe. If that's 
not a requirement (and I personally don't think it needs to be, but as 
I don't do much webmonkeying, could be convinced otherwise), a much 
simpler solution is to do <n:slot name="fullname" 
allowDefault="true">MISSING</n:slot>. That also has the advantage of 
not breaking any current code and allowing arbitrary default contents.

James


From tv at twistedmatrix.com  Thu Mar  3 14:06:27 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Mar  3 15:02:44 2005
Subject: [Twisted-web] patch: default values for slots from html templates
In-Reply-To: <d589c40eba4a63c71b9274432a0d060f@fuhm.net>
References: <42277C20.7080306@demaledetti.net>	<4227764C.8080203@twistedmatrix.com>
	<d589c40eba4a63c71b9274432a0d060f@fuhm.net>
Message-ID: <42277C53.206@twistedmatrix.com>

James Y Knight wrote:
> If that's a requirement, I don't think your proposed syntax will do it, 
> because the webmonkey will see both MISSING *and* John Doe. If that's 
> not a requirement (and I personally don't think it needs to be, but as I 
> don't do much webmonkeying, could be convinced otherwise), a much 

You have a point there. I always forget the ugliness that is HTML.
Also, I don't see _any_ way to hide the default from the webmonkey,
except for CSS :(

> simpler solution is to do <n:slot name="fullname" 
> allowDefault="true">MISSING</n:slot>. That also has the advantage of not 
> breaking any current code and allowing arbitrary default contents.

Gag. Make XML tags lowercase only, please. Just default="true"?

From ste at demaledetti.net  Thu Mar  3 15:33:41 2005
From: ste at demaledetti.net (Stefano Debenedetti)
Date: Thu Mar  3 15:30:46 2005
Subject: [Twisted-web] patch: default values for slots from html templates
Message-ID: <422790C5.8040803@demaledetti.net>

James Y Knight ha scritto:
> On Mar 3, 2005, at 3:40 PM, Tommi Virtanen wrote:
[..]
>> Also, I'd imagine it's a valid use case to want to see some "example
>> data" in the template, when viewed directly, and still set the default
>> to something else.
> 
> If that's a requirement, I don't think your proposed syntax will do it, 
> because the webmonkey will see both MISSING *and* John Doe. If that's 

That won't be a problem for the web monkey (see below for the reason why) but even if it was the web monkey would then promply do:

<p class="person">
   <n:slot name="fullname">
     <n:slotdefault style="display:none">MISSING</n:slotdefault>
     John Doe
   </n:slot>
</p>

which does the trick in Mozilla. Oh well, the web monkey doesn't love IE anyway.. ;-)

(it will work on IE too for text/xml content with an external CSS)

> not a requirement (and I personally don't think it needs to be, but as 
> I don't do much webmonkeying, could be convinced otherwise), a much 

It wouldn't be a problem anyway for the web monkey because it is usually a matter of text size, not of actual content: when the page is used as a mockup the actual text is usually some dummy string like "Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam..." while the default text is usually something really short like "-" or "N/A" or "Nothing here sorry".

So even if the mockup text showed "N/ALorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam..." it would make no difference whatsoever (in most cases).

> simpler solution is to do <n:slot name="fullname" 
> allowDefault="true">MISSING</n:slot>. That also has the advantage of 
> not breaking any current code and allowing arbitrary default contents.

+1 for not breaking current code so my preferred solution would be what you suggest but with an added check so that:

if allowDefault="true" *and* there exists a n:slotdefault then take *only* the n:slotdefault content as default value,
else if only allowDefault="true" then use the whole contents of the slot as default value,
else bail out like it does now.

ciao
ste



From dialtone at divmod.com  Thu Mar  3 15:51:25 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Mar  3 15:51:27 2005
Subject: [Twisted-web] Fix for an issue 92 (windows binary distribution
	made with distutils doesn't install data files into
	package	directories)
In-Reply-To: <20050303165018.GO8880@opteron.random>
References: <28d42ea7050302062872b63fcb@mail.gmail.com>	<cda92760f85e8ac77e32c72667b72315@ulaluma.com>	<28d42ea7050302115622b7d5f4@mail.gmail.com>	<1109803683.3797.70.camel@localhost.localdomain>
	<20050303165018.GO8880@opteron.random>
Message-ID: <422794ED.7090003@divmod.com>

Andrea Arcangeli wrote:

>On Wed, Mar 02, 2005 at 10:48:03PM +0000, Matt Goodall wrote:
>  
>
>>Yes, someone will.
>>    
>>
>
>btw, I would also like to send a reminder about getting the caching
>stuff into the trunk ;). I proved that the hard approach in rend.Page is
>significantly more performant than the tags.cached pure approach (even
>the hard approach is less clean).
>
>This is what I carry in my own Nevow branch (most of it is dialtone's
>Nevow-caching branch):
>  
>
The patch has been applied (with some improvements) in the caching branch.

I'm on your side here and I would like to make a decision on this feature.

We have 2 implementations:
foom's:
The cache is keyed with the interfaces' values that the cached tag uses 
internally and a new context, that only remembers those selected 
interfaces, is created and passed through the cached tag to render its 
content.
+ very secure
- hard to understand why you should always key with at least 
IRendererFactory

mine:
The cache can be keyed with any object, if you pass a sequence the 
cached tag will be registered for each item in the sequence and the 
sequence itself. An optional scope argument can be used to tell where 
the cached content should be stored (anything that implements ICache can 
act as a CacheStore), by default there are 2 scopes: sitewide (without 
any extra argument passed to t.cached tag) and ISession (which stores a 
cached item per user).
+ easier to understand for a beginner
- less secure and harder to use, since you have to manually provide a 
unique key, when there are many many many cached  items.

Now, I must say that I like foom's idea but it need a bit of tweaking 
IMHO to allow easier use for beginners.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.3.8
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de


From andrea at cpushare.com  Thu Mar  3 17:25:03 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Mar  3 17:25:08 2005
Subject: [Twisted-web] Fix for an issue 92 (windows binary distribution
	made with distutils doesn't install data files into
	package	directories)
In-Reply-To: <422794ED.7090003@divmod.com>
References: <28d42ea7050302062872b63fcb@mail.gmail.com>
	<cda92760f85e8ac77e32c72667b72315@ulaluma.com>
	<28d42ea7050302115622b7d5f4@mail.gmail.com>
	<1109803683.3797.70.camel@localhost.localdomain>
	<20050303165018.GO8880@opteron.random>
	<422794ED.7090003@divmod.com>
Message-ID: <20050304002503.GT8880@opteron.random>

On Thu, Mar 03, 2005 at 11:51:25PM +0100, Valentino Volonghi wrote:
> The patch has been applied (with some improvements) in the caching branch.

Thanks! I'll check it.

> I'm on your side here and I would like to make a decision on this feature.

Sure.

> The cache is keyed with the interfaces' values that the cached tag uses 
> internally and a new context, that only remembers those selected 
> interfaces, is created and passed through the cached tag to render its 
> content.
> + very secure
> - hard to understand why you should always key with at least 
> IRendererFactory

Interfaces are nice in theory, but I'm not a big fan of interfaces in
practice. I find often just a slowdown without no advantages (yeah,
class namespace __dict__ remains clean, but often there is no other
advantage), so I doubt I'll like the IRendererFactory way. In my own
twisted code (not the web part) I intentionally never use interfaces to
be sure not to run into unnecessary slowdowns.

How would I implement the equivalent of this?

	def render_copyright(self, ctx, data):
		return ctx.tag[tags.cached('copyright_class-' + str(self.inside_account(ctx)),
					   lifetime = LIFETIME)[
			copyright_class()]]

self.inside_account(ctx) returns True or False, I'm just trying to
understand the details of the interface way.

From sridharinfinity at gmail.com  Fri Mar  4 06:58:44 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Fri Mar  4 06:58:49 2005
Subject: [Twisted-web] Basic wsgi implementation
Message-ID: <8816fcf805030405585686c791@mail.gmail.com>

I have hacked (that's a long time back) wsgi.py (new) and put the files here

http://srid.bsdnerds.org/hacking/wsgi/

wsgi.py: replacement for nevow.wsgi
test.py: test cgi script that uses nevow.wsgi

Basic URL traversal and template processing works.  Liveevil, Guard
and Sessions for sure will not work.

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From sridharinfinity at gmail.com  Sat Mar  5 01:42:44 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Sat Mar  5 01:42:49 2005
Subject: [Twisted-web] Re: Basic wsgi implementation
In-Reply-To: <8816fcf805030405585686c791@mail.gmail.com>
References: <8816fcf805030405585686c791@mail.gmail.com>
Message-ID: <8816fcf8050305004270aadace@mail.gmail.com>

> 
> http://srid.bsdnerds.org/hacking/wsgi/
> 
> wsgi.py: replacement for nevow.wsgi
> test-cgi.py: test cgi script that uses nevow.wsgi
> 

It now works with mod_python.  Find the test script as test-modpy.py

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From kid at kendermedia.com  Sat Mar  5 13:38:04 2005
From: kid at kendermedia.com (Kevin Dangoor)
Date: Sat Mar  5 13:38:38 2005
Subject: [Twisted-web] mixing livepage with threads
Message-ID: <422A18AC.5090303@kendermedia.com>

I'm using a relatively recent vintage Twisted and Nevow (say within the 
past 3 weeks). I'm trying to do something like this:

def myLPHandler(self, client):
    def progress(message):
       # there are a couple of miscellaneous things that happen here... 
trivial, non-blocking, non-io stuff.
       client.set("someid", message)

    def wrappedprogress(message):
       reactor.callFromThread(progress, message)

    reactor.callInThread(someLongRunningThing, wrappedprogress)

Here's what happens:
1) user clicks a button that calls the method above
2) someLongRunningThing starts up
3) it sends progress messages to wrappedprogress
4) a couple messages show up, but after that they just get buffered (I 
can see this with liveevil.DEBUG=True)

Should this work? Is there something else I should be doing to keep 
sending messages across the livepage link?

Generally speaking, LivePage has been great fun to use. It's so easy and 
yet so powerful!

Kevin

From kid at kendermedia.com  Sat Mar  5 14:03:17 2005
From: kid at kendermedia.com (Kevin Dangoor)
Date: Sat Mar  5 14:03:55 2005
Subject: [Twisted-web] livepage and threads does work
Message-ID: <422A1E95.5080102@kendermedia.com>

Follow-up to my last message... I suddenly noticed that my current 
version of that was doing a deferToThread and passing progress, not 
wrappedProgress. D'oh! Everything works fine if I do the threads properly.

Kevin

From daverz at gmail.com  Mon Mar  7 02:23:40 2005
From: daverz at gmail.com (Dave Cook)
Date: Mon Mar  7 02:24:23 2005
Subject: [Twisted-web] liveevil and unicode
Message-ID: <7a59f025050307012335a4f789@mail.gmail.com>

Has anyone had any success sending unicode back and forth between
client and server (using nevow 0.3).  I'm testing with the simple
liveevil.py example:

from nevow import liveevil, inevow, tags, rend, loaders
from twisted.internet import reactor
reactor.listenTCP(8080,
liveevil.LiveSite(rend.Page(docFactory=loaders.stan(tags.html[tags.head[liveevil.glue],
tags.body[ tags.input(type="text", onchange=liveevil.handler(lambda
client, text: client.alert(text), "node.value"))]]))))
reactor.run()

Either the server doesn't understand the input from Firefox, or in the
case of Safari, send back garbage.

A good example of the kind of character I want to send is:

?

U+010D LATIN SMALL LETTER C WITH CARON

General Character Properties

Unicode category: Letter, Lowercase
Canonical decomposition: U+0063 LATIN SMALL LETTER C + U+030C COMBINING CARON

Various Useful Representations

UTF-8: 0xC4 0x8D
Octal escaped UTF-8: \304\215
Decimal entity reference: &#269;

Thanks,
Dave Cook

From foom at fuhm.net  Mon Mar  7 08:45:37 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon Mar  7 08:46:06 2005
Subject: [Twisted-web] liveevil and unicode
In-Reply-To: <7a59f025050307012335a4f789@mail.gmail.com>
References: <7a59f025050307012335a4f789@mail.gmail.com>
Message-ID: <dbe860b4d44d962eb5804d2a703cf774@fuhm.net>

On Mar 7, 2005, at 4:23 AM, Dave Cook wrote:
> Either the server doesn't understand the input from Firefox, or in the

Bug fixed after 0.3

> case of Safari, send back garbage.

Bug in safari -- it ignores the charset the server sends for 
XMLHTTPRequests. IIRC there was the possibility of a workaround, but I 
don't remember if it was committed.

James


From daverz at gmail.com  Mon Mar  7 16:19:10 2005
From: daverz at gmail.com (Dave Cook)
Date: Mon Mar  7 16:19:43 2005
Subject: [Twisted-web] liveevil and unicode
In-Reply-To: <dbe860b4d44d962eb5804d2a703cf774@fuhm.net>
References: <7a59f025050307012335a4f789@mail.gmail.com>
	<dbe860b4d44d962eb5804d2a703cf774@fuhm.net>
Message-ID: <7a59f02505030715191fa58666@mail.gmail.com>

On Mon, 7 Mar 2005 10:45:37 -0500, James Y Knight <foom@fuhm.net> wrote:
> On Mar 7, 2005, at 4:23 AM, Dave Cook wrote:

> > Either the server doesn't understand the input from Firefox, or in the

> Bug fixed after 0.3

Thanks.  I tried nevow svn, but the liveevil.py example doesn't seem
to work with it (still using twisted 1.3.0).  The liveanimal.tac
example seems to work well, though.

Dave Cook

From tegmine at gmail.com  Thu Mar 10 16:34:26 2005
From: tegmine at gmail.com (Luis N)
Date: Thu Mar 10 16:35:03 2005
Subject: [Twisted-web] Nevow + adbapi
Message-ID: <77bfa81a05031015344b576d56@mail.gmail.com>

I must be a total moron:

I have this:

def query():
    return dbpool.runQuery("SELECT english FROM lang WHERE spanish LIKE 'hola'")

def result(res):
    if res:
        print res[0][0]
    else:
        print "Failed."

def words(ctx, data):
    query().addCallback(result)

class PData(rend.Page):
    addSlash=True
    docFactory = loaders.stan(tags.html[
        tags.div(data="words")[ words ]])

And I get this at the terminal, which is correct:

2005/03/10 23:30 GMT [HTTPChannel,0,148.241.73.37] 148.241.73.37 - -
[10/Mar/2005:23:30:09 +0000] "GET / HTTP/1.1" 200 126 "-" "Mozilla/4.0
(compatible; MSIE 6.0; Windows NT 5.0)"
2005/03/10 23:30 GMT [-] hello

But I get a big red None on the web.

From tegmine at gmail.com  Thu Mar 10 16:59:19 2005
From: tegmine at gmail.com (Luis N)
Date: Thu Mar 10 16:59:51 2005
Subject: [Twisted-web] Re: Nevow + adbapi
In-Reply-To: <77bfa81a05031015344b576d56@mail.gmail.com>
References: <77bfa81a05031015344b576d56@mail.gmail.com>
Message-ID: <77bfa81a050310155963332ecd@mail.gmail.com>

Google is my friend.

def words(ctx, data):
    return dbpool.runQuery("SELECT english FROM lang WHERE spanish
LIKE %s'" % data)

class PData(rend.Page):
    addSlash=True
    docFactory = loaders.stan(tags.html[
        tags.div(data="hola")[ words ]])

From radeex at gmail.com  Thu Mar 10 17:06:47 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu Mar 10 17:06:50 2005
Subject: [Twisted-web] Nevow + adbapi
In-Reply-To: <77bfa81a05031015344b576d56@mail.gmail.com>
References: <77bfa81a05031015344b576d56@mail.gmail.com>
Message-ID: <60ed19d4050310160675110d50@mail.gmail.com>

On Thu, 10 Mar 2005 17:34:26 -0600, Luis N <tegmine@gmail.com> wrote:
> I must be a total moron:
> 
> I have this:
> 
> def query():
>     return dbpool.runQuery("SELECT english FROM lang WHERE spanish LIKE 'hola'")
> 
> def result(res):
>     if res:
>         print res[0][0]
>     else:
>         print "Failed."

Change that 'print res[0][0]' to a 'return res[0][0]', perhaps.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash

From matt at pollenation.net  Thu Mar 10 17:08:50 2005
From: matt at pollenation.net (Matt Goodall)
Date: Thu Mar 10 17:08:57 2005
Subject: [Twisted-web] Nevow + adbapi
In-Reply-To: <77bfa81a05031015344b576d56@mail.gmail.com>
References: <77bfa81a05031015344b576d56@mail.gmail.com>
Message-ID: <1110499730.23817.7.camel@localhost.localdomain>

On Thu, 2005-03-10 at 17:34 -0600, Luis N wrote:
> I must be a total moron:
> 
> I have this:
> 
> def query():
>     return dbpool.runQuery("SELECT english FROM lang WHERE spanish LIKE 'hola'")
> 
> def result(res):
>     if res:
>         print res[0][0]
>     else:
>         print "Failed."
> 
> def words(ctx, data):
>     query().addCallback(result)
> 
> class PData(rend.Page):
>     addSlash=True
>     docFactory = loaders.stan(tags.html[
>         tags.div(data="words")[ words ]])
> 
> And I get this at the terminal, which is correct:
> 
> 2005/03/10 23:30 GMT [HTTPChannel,0,148.241.73.37] 148.241.73.37 - -
> [10/Mar/2005:23:30:09 +0000] "GET / HTTP/1.1" 200 126 "-" "Mozilla/4.0
> (compatible; MSIE 6.0; Windows NT 5.0)"
> 2005/03/10 23:30 GMT [-] hello
> 
> But I get a big red None on the web.

You are not returning the word from the callback chain. The value
returned from a callback chain is the result of the last callback in the
chain. result() needs to return the word if found:

        def result(res):
            if res:
                print res[0][0]
                return res[0][0]
            else:
                print "Failed."

Also, unless you return the deferred from words(), Nevow will not know
it should wait for the deferred to fire:

        def words(ctx, data):
            return query().addCallback(result)


- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From matt at pollenation.net  Thu Mar 10 17:15:48 2005
From: matt at pollenation.net (Matt Goodall)
Date: Thu Mar 10 17:15:53 2005
Subject: [Twisted-web] Re: Nevow + adbapi
In-Reply-To: <77bfa81a050310155963332ecd@mail.gmail.com>
References: <77bfa81a05031015344b576d56@mail.gmail.com>
	<77bfa81a050310155963332ecd@mail.gmail.com>
Message-ID: <1110500148.23817.15.camel@localhost.localdomain>

On Thu, 2005-03-10 at 17:59 -0600, Luis N wrote:
> Google is my friend.

OK, so you found the answer just as I hit send ;-).

> 
> def words(ctx, data):
>     return dbpool.runQuery("SELECT english FROM lang WHERE spanish
> LIKE %s'" % data)

This is bad. You should not use Python's string formatting to build
queries - pass the queries args as a tuple and let the database module
prepare the query:

        return dbpool.runQuery(
            "SELECT english FROM lang WHERE spanish LIKE %s",
            (data,))

In particular, this lets the database module correctly quote ''data''
and protects you from SQL insertion problems.

- Matt

> 
> class PData(rend.Page):
>     addSlash=True
>     docFactory = loaders.stan(tags.html[
>         tags.div(data="hola")[ words ]])
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From andrea at cpushare.com  Fri Mar 11 05:54:58 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Mar 11 05:55:11 2005
Subject: [Twisted-web] feedback on svn updates
Message-ID: <20050311125458.GP26348@opteron.random>

1) The cached branch on top of svn trunk generates an exception in
CachedSerializer, unfortunately I didn't save the exception. Since I
don't strictly need the tags.cached, I left only the rend.Page cache
below in my tree:

Index: Nevow/nevow/rend.py
===================================================================
--- Nevow/nevow/rend.py	(revision 1334)
+++ Nevow/nevow/rend.py	(working copy)
@@ -30,6 +30,7 @@
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -381,6 +382,8 @@
         self.children[name] = child
     
 
+_CACHE = {}
+
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
     via the document factory (docFactory).
@@ -394,8 +397,37 @@
     afterRender = None
     addSlash = None
 
+    cache = False
+    lifetime = -1
+    __lastCacheRendering = 0
+
     flattenFactory = lambda self, *args: flat.flattenFactory(*args)
 
+    def hasCache(self, ctx):
+        if not self.cache:
+            return
+
+        _now = now() # run gettimeofday only once
+        timeout = _now > self.__lastCacheRendering + self.lifetime and \
+                  self.lifetime >= 0
+        c = self.lookupCache(ctx)
+        if timeout or c is None:
+            # stop other renders
+            self.__lastCacheRendering = _now
+            c = None
+        return c
+    def cacheRendered(self, ctx, c):
+        if not self.cache:
+            return
+        # overwrite the deferred with the data
+        self.storeCache(ctx, c)
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+    def storeCache(self, ctx, c):
+        _CACHE[self.cacheIDX(ctx)] = c
+    def lookupCache(self, ctx):
+        return _CACHE.get(self.cacheIDX(ctx))
+
     def renderHTTP(self, ctx):
         if self.beforeRender is not None:
             return util.maybeDeferred(self.beforeRender,ctx).addCallback(
@@ -421,11 +453,18 @@
             if self.afterRender is not None:
                 return util.maybeDeferred(self.afterRender,ctx)
 
-        if self.buffered:
+        c = self.hasCache(ctx)
+        if c is not None:
+            finishRequest()
+            return c
+
+        if self.buffered or self.cache:
             io = StringIO()
             writer = io.write
             def finisher(result):
-                request.write(io.getvalue())
+                c = io.getvalue()
+                self.cacheRendered(ctx, c)
+                request.write(c)
                 return util.maybeDeferred(finishRequest).addCallback(lambda r: result)
         else:
             writer = request.write
@@ -507,7 +546,6 @@
             else:
                 ## Use the redirectAfterPost url
                 ref = str(redirectAfterPost)
-            from nevow import url
             refpath = url.URL.fromString(ref)
             magicCookie = '%s%s%s' % (now(),request.getClientIP(),random.random())
             refpath = refpath.replace('_nevow_carryover_', magicCookie)


2) self.locateConfigurable returns a deferred, so I changed my code to
get the retval via addCallback, so this is fine.

3) The renderForms has changed layout with <legend>. You can see the
layout of the new code (already online) here
https://www.cpushare.com/verify_email/. Now I don't dislike this change
but I would like to keep the legend at the center of the page (not on
the left), is that possible with some css tweak? I tried to do that in
the fieldset but that screwed the alignment of everything else too. I
only want the legend to be centered instead. Hints?

Thanks and keep up the great work.

From tim at se.linux.org  Sun Mar 13 10:43:44 2005
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Sun Mar 13 10:43:48 2005
Subject: [Twisted-web] leightweight CMS
Message-ID: <Pine.LNX.4.44.0503131734130.22887-100000@naskur.se.linux.org>

Is there an Open Source leightweight CMS or web system of any kind
that uses twisted and nevow and that stores content (atleast articles)
as files?

Tim


From joe.halliwell at gmail.com  Sun Mar 13 13:12:14 2005
From: joe.halliwell at gmail.com (Joe Halliwell)
Date: Sun Mar 13 13:12:44 2005
Subject: [Twisted-web] nevow:attr problem and patch
Message-ID: <1110744734.12378.15.camel@localhost.localdomain>

Hullo,
        
I recently encountered a problem with the following XML snippet:

<input type="checkbox" n:data="m_friend" n:render="if">
  <n:attr name="checked">true</n:attr>
</input>

where the page defines:

def render_if(self, ctx, data):
   if data:
       return self.tag
   else:
       return self.tag.clear()

The problem is that due to the way nevow:attr is parsed the <input> ends
up with an unwanted checked attribute.

One way to fix this is to clear Tag valued attributes when a tag is
clear()'d. The type test in the following patch is possibly a bit too
hacky, but I'm hoping someone will be able to improve on it :)

Cheers,
Joe

Index: stan.py
===================================================================
--- stan.py     (revision 1346)
+++ stan.py     (working copy)
@@ -352,6 +352,9 @@
         """Clear any existing children from this tag.
         """
         self._specials = {}
+        for (a,v) in self.attributes.items():
+            if type(v)!=unicode:
+                del self.attributes[a]
         self.children = []
         return self



From andrea at cpushare.com  Sun Mar 13 15:18:12 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Mar 13 15:18:16 2005
Subject: [Twisted-web] leightweight CMS
In-Reply-To: <Pine.LNX.4.44.0503131734130.22887-100000@naskur.se.linux.org>
References: <Pine.LNX.4.44.0503131734130.22887-100000@naskur.se.linux.org>
Message-ID: <20050313221812.GS9270@opteron.random>

On Sun, Mar 13, 2005 at 06:43:44PM +0100, Tim Terleg?rd wrote:
> Is there an Open Source leightweight CMS or web system of any kind
> that uses twisted and nevow and that stores content (atleast articles)
> as files?

FS I/O is a blocking operation (even writes can be blocking, but
more normally only reads out of cache are blocking) so reading the files
would stall the whole server while you wait for I/O to complete. So it's
ok for small projects where performance isn't a big issue, but it should
be generally discouraged since it breaks the async model of twisted. If
you really want files, you should consider doing all blocking I/O in a
separate thread.

From radeex at gmail.com  Sun Mar 13 15:37:14 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun Mar 13 18:24:05 2005
Subject: [Twisted-web] leightweight CMS
In-Reply-To: <20050313221812.GS9270@opteron.random>
References: <Pine.LNX.4.44.0503131734130.22887-100000@naskur.se.linux.org>
	<20050313221812.GS9270@opteron.random>
Message-ID: <60ed19d405031314378692806@mail.gmail.com>

On Sun, 13 Mar 2005 23:18:12 +0100, Andrea Arcangeli
<andrea@cpushare.com> wrote:
> On Sun, Mar 13, 2005 at 06:43:44PM +0100, Tim Terleg?rd wrote:
> > Is there an Open Source leightweight CMS or web system of any kind
> > that uses twisted and nevow and that stores content (atleast articles)
> > as files?
> 
> FS I/O is a blocking operation (even writes can be blocking, but
> more normally only reads out of cache are blocking) so reading the files
> would stall the whole server while you wait for I/O to complete. So it's
> ok for small projects where performance isn't a big issue, but it should
> be generally discouraged since it breaks the async model of twisted. If
> you really want files, you should consider doing all blocking I/O in a
> separate thread.

I think this is a bit of an overstatement. It's not really that big of
a deal. static.File uses blocking I/O to read files, and I've written
other code that writes to them as well; if you do it in chunks of
(say) 1024kb, and don't do something stupid like run it on NFS, then
it doesn't stall the server and doesn't break the "async model of
Twisted". I always suggest evaluating files as a storage mechanism
before moving on to something more complex.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash

From andrea at cpushare.com  Sun Mar 13 18:51:01 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Mar 13 18:51:06 2005
Subject: [Twisted-web] leightweight CMS
In-Reply-To: <60ed19d405031314378692806@mail.gmail.com>
References: <Pine.LNX.4.44.0503131734130.22887-100000@naskur.se.linux.org>
	<20050313221812.GS9270@opteron.random>
	<60ed19d405031314378692806@mail.gmail.com>
Message-ID: <20050314015101.GV9270@opteron.random>

On Mon, Mar 14, 2005 at 09:37:14AM +1100, Christopher Armstrong wrote:
> I think this is a bit of an overstatement. It's not really that big of
> a deal. static.File uses blocking I/O to read files, and I've written
> other code that writes to them as well; if you do it in chunks of
> (say) 1024kb, and don't do something stupid like run it on NFS, then
> it doesn't stall the server and doesn't break the "async model of
> Twisted". I always suggest evaluating files as a storage mechanism
> before moving on to something more complex.

Writing in small chunks is worthless in terms of kernel blocking I/O.
1024k chunks is too small too, I suggest to write 8k at least every time
to be somewhat more optimal.

The problem isn't the cpu-bound-stall: the problem is that if you've a
fast network and your disk is busy (like during a backup) you might fill
the writeback cache faster than the disk can keep up flushing it, and at
some point every one of those write(8k) (or every one of those
write(1k), no difference since the kernel coalesce them togehter) can
take half a second or similar, and during such an half a second all
clients will hang, even if all but one could still receive data from
cache. That would break the async model of twisted, that's a fact. All
those addCallbacks pains you do everywhere to keep the thing async and
to let it scale with an huge number of connections without wasting tons
of memory in kernel stacks, ptes, fds that a thread-per-connection model
would require, gets completely screwed up by the single sync-writer (or
sync-reader) of the lazy code.

For reads is the very same issue, except it's much more likely to happen
for reads in real life if all your files don't fit in cache: if you do
something like what was suggested here i.e. to keep the db of the
articles in files instead of in a db.

For writes it will only happen on a big upload with fast intranet and
disk busy doing backup or some other I/O workload, so it's less
realistic but still a plausible scenario.

If you've just to implement a tiny app going lazy is ok, but it should
be discouraged.

Note that I use some os.listdir myself too in a few places, but those
places are masked by the rand.Page cache, and most important they've a
tiny size, and they're guaranteed to be cached. The bulk of the data
should be provided in a async way if it doesn't fit in cache.

In the long run twisted should support kernel async-io (and even more
important epoll for different reasons), then you won't have to use an
helper thread to do the bulk I/O. Using an sql server is the current
best solution to keep everything async and it normally provides several
other advantages too ;).

From foom at fuhm.net  Sun Mar 13 23:02:58 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun Mar 13 23:03:08 2005
Subject: [Twisted-web] leightweight CMS
In-Reply-To: <20050314015101.GV9270@opteron.random>
References: <Pine.LNX.4.44.0503131734130.22887-100000@naskur.se.linux.org>
	<20050313221812.GS9270@opteron.random>
	<60ed19d405031314378692806@mail.gmail.com>
	<20050314015101.GV9270@opteron.random>
Message-ID: <ac4d40ecbd86b8ac639f7d8cbe92b9a7@fuhm.net>

On Mar 13, 2005, at 8:51 PM, Andrea Arcangeli wrote:
> In the long run twisted should support kernel async-io (and even more
> important epoll for different reasons), then you won't have to use an
> helper thread to do the bulk I/O. Using an sql server is the current
> best solution to keep everything async and it normally provides several
> other advantages too ;).

Of course you are correct, but I would disagree about the short-term 
importance. I suspect you'll get better performance actually by reading 
files blockingly than by using an SQL server. For a typical website, I 
expect all the most active content will fit in the cache quite handily, 
and that which is not as active can be read off disk quickly enough to 
not matter. If you read in small chunks, the disk will likely be able 
to read quicker than your kernel TCP buffers can become empty. However, 
notice my use of the "likely", "expect", "suspect" qualifiers: I have 
not actually *done* this measurement, but from my experience with SQL 
servers, they are not excessively speedy.

Spawning threads to do your reads is of course an option, but not one I 
would recommend worrying about unless you've?actually measured it being 
a problem. And, if you *have* done that measurement, please help to 
write a generic async-disk-io module for Twisted which can use either 
threads or kernel async IO, as appropriate, and put this to rest once 
and for all. :)

James


From andrea at cpushare.com  Mon Mar 14 18:03:56 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon Mar 14 18:04:03 2005
Subject: [Twisted-web] leightweight CMS
In-Reply-To: <ac4d40ecbd86b8ac639f7d8cbe92b9a7@fuhm.net>
References: <Pine.LNX.4.44.0503131734130.22887-100000@naskur.se.linux.org>
	<20050313221812.GS9270@opteron.random>
	<60ed19d405031314378692806@mail.gmail.com>
	<20050314015101.GV9270@opteron.random>
	<ac4d40ecbd86b8ac639f7d8cbe92b9a7@fuhm.net>
Message-ID: <20050315010356.GJ7699@opteron.random>

On Mon, Mar 14, 2005 at 01:02:58AM -0500, James Y Knight wrote:
> Of course you are correct, but I would disagree about the short-term 
> importance. I suspect you'll get better performance actually by reading 
> files blockingly than by using an SQL server. For a typical website, I 
> expect all the most active content will fit in the cache quite handily, 

A typical website yes, but an application server with potentially a ton
of articles may not allow all data to fit in cache.

And if the cache is flushed by some other task the sync behaviour will
return.

> not matter. If you read in small chunks, the disk will likely be able 
> to read quicker than your kernel TCP buffers can become empty. However, 

Depends on the performance of the HD and of the network. For small/mid
projects it's ok of course, but I doubt people should risk to build
anything significant on top of this model.

> notice my use of the "likely", "expect", "suspect" qualifiers: I have 
> not actually *done* this measurement, but from my experience with SQL 
> servers, they are not excessively speedy.

The object is to allow the high traffic part of the website to be
served while somebody is browsing the old articles that don't fit in
cache.

The latency of the sql server isn't the interesting point here.

> Spawning threads to do your reads is of course an option, but not one I 
> would recommend worrying about unless you've?actually measured it being 
> a problem. And, if you *have* done that measurement, please help to 
> write a generic async-disk-io module for Twisted which can use either 
> threads or kernel async IO, as appropriate, and put this to rest once 
> and for all. :)

Sure, I didn't mean people should implement the async-disk-io module
immediatly, but they should be aware that reading or writing within
twisted breaks the async model and that they must be prepared to fix it
if something goes wrong. After the user is aware about this, it's up to
him/her to balance the tradeoff between coding simplicity and the
scalability of his code. It's perfectly ok to go for code simplicity for
small/mid projects that don't get more than 1 connection per second (in
1 second tons of I/O can happen of course).

From alengarbage at yahoo.com  Mon Mar 14 22:35:38 2005
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Mon Mar 14 22:36:12 2005
Subject: [Twisted-web] web2
In-Reply-To: 6667
Message-ID: <20050315053539.77487.qmail@web31513.mail.mud.yahoo.com>


  Looking through the archives, I saw a lot of
discussion about web2 in September, but not much since
then.  Anyone care to comment on status?

  I'm really looking forward web2 for a couple of
reasons, the most pressing being that I need to handle
file uploads from multipart/form-data.  In twisted.web
 this means holding the entire request in memory (as
you know), which isn't so good when large files are
sent.

  I'd also love to see a new client get in there (is
this being worked on as well)?  Right now, I'm using
httplib logic spun off in a deferToThread because that
was the only way I could figure out how to do client
file upload via mulitpart/form-data efficiently (same
problem as above -- large requests generated).

  I did download a 0.1.0 version of web2, but haven't
had time to upgrade to python2.4 yet to try it out.  I
am considering moving forward with web2, since I know
I'll need it in production -- am I early in doing this
(is the API still really unstable, etc.)?  Should I
wait?

  Thanks in advance for any guidance / info,
  -- Lenny G.


		
__________________________________ 
Do you Yahoo!? 
Yahoo! Small Business - Try our new resources site!
http://smallbusiness.yahoo.com/resources/ 

From andrea at cpushare.com  Tue Mar 15 06:35:39 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Mar 15 06:35:46 2005
Subject: [Twisted-web] web2
In-Reply-To: <20050315053539.77487.qmail@web31513.mail.mud.yahoo.com>
References: <20050315053539.77487.qmail@web31513.mail.mud.yahoo.com>
Message-ID: <20050315133539.GP7699@opteron.random>

On Mon, Mar 14, 2005 at 09:35:38PM -0800, Lenny G Arbage wrote:
>   I did download a 0.1.0 version of web2, but haven't
> had time to upgrade to python2.4 yet to try it out.  I
> am considering moving forward with web2, since I know
> I'll need it in production -- am I early in doing this
> (is the API still really unstable, etc.)?  Should I
> wait?

On a related question, what web2 is supposed to improve besides the file
upload not being pinned in ram?

Being able to do incremental improvements to software is a major
benefit, normally rewrites are needed when something is fundamentally
wrong in the design of the older code and so it's quicker to rewrite
than to do incremental updates.

From foom at fuhm.net  Tue Mar 15 10:37:31 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue Mar 15 10:37:48 2005
Subject: [Twisted-web] web2
In-Reply-To: <20050315133539.GP7699@opteron.random>
References: <20050315053539.77487.qmail@web31513.mail.mud.yahoo.com>
	<20050315133539.GP7699@opteron.random>
Message-ID: <d246129b82049480faafaa242fa3c924@fuhm.net>


On Mar 15, 2005, at 8:35 AM, Andrea Arcangeli wrote:
> On a related question, what web2 is supposed to improve besides the 
> file
> upload not being pinned in ram?
>
> Being able to do incremental improvements to software is a major
> benefit, normally rewrites are needed when something is fundamentally
> wrong in the design of the older code and so it's quicker to rewrite
> than to do incremental updates.

The main problem is that the API in twisted.web has many deficiencies. 
Most of the API has already been changed by Nevow, as it subclasses the 
twisted.web classes and completely changes their behavior. It's not 
truly a complete rewrite, but, was taken from the work in twisted.web 
and nevow.appserver/rend, and changed in API-incompatible ways, so it 
needed a new namespace. (there is an adapter to let you use most older 
resources, but it is not perfect compatibility, still)

But as for improvements it's supposed to bring:
- streaming upload data
- multiple headers of the same name
- better factoring of lowlevel HTTP vs highlevel request handling, to 
allow other transports (e.g. CGI) to be more easily plugged in
- IResource interface improvements from Nevow
- more versatile outgoing data streaming API.
- header parsing correctness
- full HTTP1.1 support
- output filters (e.g. HTTP range support done in a generic fashion)
- I dunno, probably some more stuff I forgot at the moment.

It's not done enough yet for me to recommend using it in production, 
but I would like other people to hack on it. Basically, various other 
people have claimed they're going to help out, but none of that has 
ever materialized, thus the delay. I also got a new job for which 
web-ish stuff is not my job function.

I've used it to serve up a small website for myself without problems, 
and it can also run most Nevow apps, using the "web2-2" branch of 
Nevow, so it's good enough for hacking to commence. ;)

I hope to get some stuff on it done next week (PyCon), and to convince 
some other people to help out, then do a prerelease after that.

I've asked radix to not do a web2 release with Twisted 2.0, but I know 
some did sneak out there with one of the alphas. That doesn't mean it's 
ready to use.

There is no client, but that's on the list of things to do eventually.

James


From andrea at cpushare.com  Tue Mar 15 11:02:33 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Mar 15 11:02:40 2005
Subject: [Twisted-web] web2
In-Reply-To: <d246129b82049480faafaa242fa3c924@fuhm.net>
References: <20050315053539.77487.qmail@web31513.mail.mud.yahoo.com>
	<20050315133539.GP7699@opteron.random>
	<d246129b82049480faafaa242fa3c924@fuhm.net>
Message-ID: <20050315180233.GU7699@opteron.random>

On Tue, Mar 15, 2005 at 12:37:31PM -0500, James Y Knight wrote:
> But as for improvements it's supposed to bring:
> - streaming upload data
> - multiple headers of the same name
> - better factoring of lowlevel HTTP vs highlevel request handling, to 
> allow other transports (e.g. CGI) to be more easily plugged in
> - IResource interface improvements from Nevow
> - more versatile outgoing data streaming API.
> - header parsing correctness
> - full HTTP1.1 support
> - output filters (e.g. HTTP range support done in a generic fashion)
> - I dunno, probably some more stuff I forgot at the moment.

Sounds very good.

> I've used it to serve up a small website for myself without problems, 
> and it can also run most Nevow apps, using the "web2-2" branch of 
> Nevow, so it's good enough for hacking to commence. ;)

;)

I guess web2 will have to become good enough so that at some point Nevow
trunk can be moved on top of it.

I wish I had some time to help finishing web2...

Keep up the great work!

From jason.mobarak at gmail.com  Tue Mar 15 12:29:34 2005
From: jason.mobarak at gmail.com (Jason Mobarak)
Date: Tue Mar 15 12:29:38 2005
Subject: [Twisted-web] Pastebin behind a ReverseProxyResource
Message-ID: <b194c91905031511293ad9cced@mail.gmail.com>

Hi --

I'm trying to set up the pastebin example from Nevow SVN behind a
ReverseProxyResource. I have the following tac file [1] setting
everything up. The doc strings for VHostMonsterResource state that the
paths on the main site and the proxy site should be the same. For
example something like "http://foo.com/bar" would be written to
"http://foo.com:8080/bar", however everything seems to be rewritten
incorrectly. You can see how everything comes up here [2].

1: http://deadbeefbabe.org/dbb.tac.txt
2: http://deadbeefbabe.org/paste

Thanks
,,Jason

From matt at pollenation.net  Tue Mar 15 15:49:51 2005
From: matt at pollenation.net (Matt Goodall)
Date: Tue Mar 15 15:50:21 2005
Subject: [Twisted-web] Pastebin behind a ReverseProxyResource
In-Reply-To: <b194c91905031511293ad9cced@mail.gmail.com>
References: <b194c91905031511293ad9cced@mail.gmail.com>
Message-ID: <1110926991.14836.17.camel@localhost.localdomain>

On Tue, 2005-03-15 at 12:29 -0700, Jason Mobarak wrote:
> Hi --
> 
> I'm trying to set up the pastebin example from Nevow SVN behind a
> ReverseProxyResource. I have the following tac file [1] setting
> everything up. The doc strings for VHostMonsterResource state that the
> paths on the main site and the proxy site should be the same. For
> example something like "http://foo.com/bar" would be written to
> "http://foo.com:8080/bar", however everything seems to be rewritten
> incorrectly. You can see how everything comes up here [2].
> 
> 1: http://deadbeefbabe.org/dbb.tac.txt
> 2: http://deadbeefbabe.org/paste

The problem is that the pastebin expects to be the root resource. It
loads the CSS and images (if there are any, I can't remember now) from /
and not /paste. To mount the pastebin at /paste you will need to update
it so that it knows that's where it's mounted.

It's not just the pastebin that has this problem. If any app is to be
mounted at /foo then it needs to be written to know that from the start.

However ... a long time ago now, I wrote a simple reroot renderer that
may help with this sort of problem. It's in sandbox/mg/reroot.py. A
macro would be better for this though (see dp's latest macro branch)
because then the reroot would only happen once and not every request.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From corydodt at twistedmatrix.com  Wed Mar 16 17:28:46 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Wed Mar 16 17:32:16 2005
Subject: [Twisted-web] liveevil.py import breaks py2exe
Message-ID: <4238CF3E.9080900@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

The following patch is the quickest hack I could think of to make liveevil
import successfully (albeit non-usefully) in an app that bundles nevow with
py2exe.

Liveevil won't *work* under these conditions, so someone needs to think of a
way to tell it how to find liveevil.js if they want py2exe + liveevil.  This
should permit non-liveevil nevow apps work ok though, which currently they
don't.  Without this patch you get an error along the lines of IOError: No
such file "C:\...\library.zip\nevow\liveevil.js".

C


Index: liveevil.py
===================================================================
- --- liveevil.py	(revision 1334)
+++ liveevil.py	(working copy)
@@ -294,16 +294,20 @@
~     return os.path.join(dirname, 'liveevil.js')


- -_glueJS = _locateGlueJS()
+try:
+    _glueJS = _locateGlueJS()

- -# A static.File resource that can be used from a <link>
- -glueJS = static.File(_glueJS, 'text/javascript')
+    # A static.File resource that can be used from a <link>
+    glueJS = static.File(_glueJS, 'text/javascript')

- -# Inline JavaScript glue. TODO: deprecate this.
- -glue = tags.inlineJS(open(_glueJS).read())
+    # Inline JavaScript glue. TODO: deprecate this.
+    glue = tags.inlineJS(open(_glueJS).read())

- -# Glue which tells livepage to only allow clientToServer events, not async
serverToClient events
- -inputOnlyGlue = tags.inlineJS("var auto_open = false; var liveevil_unload =
true;\n" + ''.join(open(_glueJS).readlines()[1:]))
+    # Glue which tells livepage to only allow clientToServer events, not
async serverToClient events
+    inputOnlyGlue = tags.inlineJS("var auto_open = false; var liveevil_unload
= true;\n" + ''.join(open(_glueJS).readlines()[1:]))
+except EnvironmentError:
+    glueJS = inputOnlyGlue = glue = None
+    warnings.warn("Could not open liveevil.js")


~ ctsTemplate = "nevow_clientToServerEvent('%s',this%s);%s"
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCOM8+3A5SrXAiHQcRAhfiAJ0RsKqQ7ocEDjvX1ha1LSqBZZEb6gCfafkP
OPfCUxJ9gF6HZmSOA4ki1i0=
=RwLw
-----END PGP SIGNATURE-----

From corydodt at twistedmatrix.com  Wed Mar 16 17:55:35 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Wed Mar 16 17:59:04 2005
Subject: [Twisted-web] [resent.. patch fixed] liveevil.py import breaks
	py2exe
In-Reply-To: <4238CF3E.9080900@twistedmatrix.com>
References: <4238CF3E.9080900@twistedmatrix.com>
Message-ID: <4238D587.8040208@twistedmatrix.com>

Cory Dodt wrote:
> The following patch is the quickest hack I could think of to make liveevil
> import successfully (albeit non-usefully) in an app that bundles nevow with
> py2exe.
> 
> Liveevil won't *work* under these conditions, so someone needs to think 
> of a
> way to tell it how to find liveevil.js if they want py2exe + liveevil.  
> This
> should permit non-liveevil nevow apps work ok though, which currently they
> don't.  Without this patch you get an error along the lines of IOError: No
> such file "C:\...\library.zip\nevow\liveevil.js".
> 
> C
> 

Index: liveevil.py
===================================================================
--- liveevil.py	(revision 1334)
+++ liveevil.py	(working copy)
@@ -294,16 +294,20 @@
      return os.path.join(dirname, 'liveevil.js')


-_glueJS = _locateGlueJS()
+try:
+    _glueJS = _locateGlueJS()

-# A static.File resource that can be used from a <link>
-glueJS = static.File(_glueJS, 'text/javascript')
+    # A static.File resource that can be used from a <link>
+    glueJS = static.File(_glueJS, 'text/javascript')

-# Inline JavaScript glue. TODO: deprecate this.
-glue = tags.inlineJS(open(_glueJS).read())
+    # Inline JavaScript glue. TODO: deprecate this.
+    glue = tags.inlineJS(open(_glueJS).read())

-# Glue which tells livepage to only allow clientToServer events, not async 
serverToClient events
-inputOnlyGlue = tags.inlineJS("var auto_open = false; var liveevil_unload = 
true;\n" + ''.join(open(_glueJS).readlines()[1:]))
+    # Glue which tells livepage to only allow clientToServer events, not 
async serverToClient events
+    inputOnlyGlue = tags.inlineJS("var auto_open = false; var liveevil_unload 
= true;\n" + ''.join(open(_glueJS).readlines()[1:]))
+except EnvironmentError:
+    glueJS = inputOnlyGlue = glue = None
+    warnings.warn("Could not open liveevil.js")


  ctsTemplate = "nevow_clientToServerEvent('%s',this%s);%s"

From jarrod.roberson at gmail.com  Wed Mar 16 21:15:08 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Wed Mar 16 21:15:39 2005
Subject: [Twisted-web] does Nevow work with Twisted 2.x ?
Message-ID: <2389d4730503162015611c5d74@mail.gmail.com>

I guess the subject says it all, I have the latest Twisted from svn
and the latest Nevow from svn and I get lots of deprecation warnings
and can't get any of the examples actually work

From andrea at cpushare.com  Thu Mar 17 09:59:34 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Mar 17 09:59:39 2005
Subject: [Twisted-web] does Nevow work with Twisted 2.x ?
In-Reply-To: <2389d4730503162015611c5d74@mail.gmail.com>
References: <2389d4730503162015611c5d74@mail.gmail.com>
Message-ID: <20050317165934.GQ21597@opteron.random>

On Wed, Mar 16, 2005 at 11:15:08PM -0500, jarrod roberson wrote:
> I guess the subject says it all, I have the latest Twisted from svn
> and the latest Nevow from svn and I get lots of deprecation warnings
> and can't get any of the examples actually work

Use python -W ignore at the top of twistd, my website works with
SVN-trunk + nevow trunk, so far so good.

From corydodt at twistedmatrix.com  Thu Mar 17 09:58:24 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu Mar 17 10:01:57 2005
Subject: [Twisted-web] does Nevow work with Twisted 2.x ?
In-Reply-To: <20050317165934.GQ21597@opteron.random>
References: <2389d4730503162015611c5d74@mail.gmail.com>
	<20050317165934.GQ21597@opteron.random>
Message-ID: <4239B730.8070302@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

You can do this without modifying twistd.

At the top of your code (your tac, probably)

import warnings; warnings.filterwarnings('ignore')

Andrea Arcangeli wrote:
| On Wed, Mar 16, 2005 at 11:15:08PM -0500, jarrod roberson wrote:
|
|>I guess the subject says it all, I have the latest Twisted from svn
|>and the latest Nevow from svn and I get lots of deprecation warnings
|>and can't get any of the examples actually work
|
|
| Use python -W ignore at the top of twistd, my website works with
| SVN-trunk + nevow trunk, so far so good.
|
| _______________________________________________
| Twisted-web mailing list
| Twisted-web@twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCObcw3A5SrXAiHQcRAm6xAJ964uL1g5IpnVPS0FqDVf7hyvvbkwCfbqqj
h1ZV/27Amsy+EcDA5AzWhMU=
=uHdt
-----END PGP SIGNATURE-----

From alengarbage at yahoo.com  Thu Mar 17 12:35:39 2005
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Thu Mar 17 12:36:13 2005
Subject: [Twisted-web] web2
In-Reply-To: 6667
Message-ID: <20050317193539.62633.qmail@web31510.mail.mud.yahoo.com>


--- James Y Knight <foom@fuhm.net> wrote:
> 
> But as for improvements it's supposed to bring:
> - streaming upload data
> - multiple headers of the same name
> - better factoring of lowlevel HTTP vs highlevel
> request handling, to 
> allow other transports (e.g. CGI) to be more easily
> plugged in
> - IResource interface improvements from Nevow
> - more versatile outgoing data streaming API.
> - header parsing correctness
> - full HTTP1.1 support
> - output filters (e.g. HTTP range support done in a
> generic fashion)
> - I dunno, probably some more stuff I forgot at the
> moment.
> 
> It's not done enough yet for me to recommend using
> it in production,


  web2 sounds like it will be fabulous.  

  I hope you don't mind me asking for a bit more
advice-- suppose I do need to fix the streaming file
upload problem* right away (or at least fairly soon). 
Do I use nevow instead of web?  Do I use web2 from
svn?  What other options do I have before me?  Which
of these paths will allow me to bring my webserver
back to web2 with the least resistence when web2 is
released?

  -- thanks, Lenny G


* btw, isn't this a security hole for any webserver
running off of twisted-web.resource.Resource -based
websites -- if a client does a post with
multipart/form-data and then just streams data
endlessly, the server process mushrooms to fill all
available memory and swap?

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 

From christopher.zorn at gmail.com  Thu Mar 17 16:02:54 2005
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Thu Mar 17 16:03:27 2005
Subject: [Twisted-web] does Nevow work with Twisted 2.x ?
In-Reply-To: <2389d4730503162015611c5d74@mail.gmail.com>
References: <2389d4730503162015611c5d74@mail.gmail.com>
Message-ID: <149014b9050317150218b7e46c@mail.gmail.com>

On Wed, 16 Mar 2005 23:15:08 -0500, jarrod roberson
<jarrod.roberson@gmail.com> wrote:
> I guess the subject says it all, I have the latest Twisted from svn
> and the latest Nevow from svn and I get lots of deprecation warnings
> and can't get any of the examples actually work

I have not looked at it much, but I can not get it to work either. 
For code that worked with twisted 1.3 and nevow 0.3 I get the following error

Failed to load application: type.__new__(MetaTypedInterface):
MetaTypedInterface is not a subtype of type

I can post the entire thing if that will help, let me know. 


> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From andrea at cpushare.com  Thu Mar 17 16:29:31 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Mar 17 16:29:35 2005
Subject: [Twisted-web] web2
In-Reply-To: <20050317193539.62633.qmail@web31510.mail.mud.yahoo.com>
References: <20050317193539.62633.qmail@web31510.mail.mud.yahoo.com>
Message-ID: <20050317232931.GV21597@opteron.random>

On Thu, Mar 17, 2005 at 11:35:39AM -0800, Lenny G Arbage wrote:
> * btw, isn't this a security hole for any webserver
> running off of twisted-web.resource.Resource -based
> websites -- if a client does a post with
> multipart/form-data and then just streams data
> endlessly, the server process mushrooms to fill all
> available memory and swap?

I hope there is a limit to it. OTOH this is a memleak only, nevow
carryover has memleak possibilities too. So while in the long run it
would need to be fixed (as well as nevow carryover, with a simple
timestamp to collect the obsolete entries), this would be a minor
security issue after all.

From andrea at cpushare.com  Thu Mar 17 16:31:20 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Mar 17 16:31:23 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050217192730.GA99428@count.jamwt.com>
References: <20050217192730.GA99428@count.jamwt.com>
Message-ID: <20050317233120.GW21597@opteron.random>

On Thu, Feb 17, 2005 at 01:27:30PM -0600, J Turner wrote:
> > 1) the '%(xx)d' format for integeres/logs insn't recognized. I'd like to use
> >    "%(xx)d" to be strict for integers.
> 
> This is fixed.

I'm afraid this isn't necessary anymore, pgasync also dropped support
for %d recently, so perhaps you can back it out now.

From jarrod.roberson at gmail.com  Thu Mar 17 19:58:05 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Thu Mar 17 19:58:38 2005
Subject: [Twisted-web] does Nevow work with Twisted 2.x ?
In-Reply-To: <149014b9050317150218b7e46c@mail.gmail.com>
References: <2389d4730503162015611c5d74@mail.gmail.com>
	<149014b9050317150218b7e46c@mail.gmail.com>
Message-ID: <2389d47305031718586540b7af@mail.gmail.com>

On Thu, 17 Mar 2005 18:02:54 -0500, Christopher Zorn
<christopher.zorn@gmail.com> wrote:
> On Wed, 16 Mar 2005 23:15:08 -0500, jarrod roberson
> <jarrod.roberson@gmail.com> wrote:
> > I guess the subject says it all, I have the latest Twisted from svn
> > and the latest Nevow from svn and I get lots of deprecation warnings
> > and can't get any of the examples actually work
> 
> I have not looked at it much, but I can not get it to work either.
> For code that worked with twisted 1.3 and nevow 0.3 I get the following error
> 
> Failed to load application: type.__new__(MetaTypedInterface):
> MetaTypedInterface is not a subtype of type
> 
> I can post the entire thing if that will help, let me know.
> 

Twisted 2.0 needs the zope.interface package

and I had to do a

from zope.interface import implements

and change all the __implements__ = to implements()

From dialtone at divmod.com  Thu Mar 17 21:25:47 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Mar 17 21:25:56 2005
Subject: [Twisted-web] does Nevow work with Twisted 2.x ?
In-Reply-To: <2389d47305031718586540b7af@mail.gmail.com>
References: <2389d4730503162015611c5d74@mail.gmail.com>	<149014b9050317150218b7e46c@mail.gmail.com>
	<2389d47305031718586540b7af@mail.gmail.com>
Message-ID: <423A584B.3020000@divmod.com>

jarrod roberson wrote:

>Twisted 2.0 needs the zope.interface package
>
>and I had to do a
>
>from zope.interface import implements
>
>and change all the __implements__ = to implements()
>  
>
Twisted needs this, not nevow. You must not convert any __implements__ 
to implements() in Nevow.
You should use compy until after the next Nevow release, where you will 
be able to use implements().

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.3.8
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de


From andrea at cpushare.com  Sat Mar 19 11:10:31 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Mar 19 11:10:36 2005
Subject: [Twisted-web] does Nevow work with Twisted 2.x ?
In-Reply-To: <423A584B.3020000@divmod.com>
References: <2389d4730503162015611c5d74@mail.gmail.com>
	<149014b9050317150218b7e46c@mail.gmail.com>
	<2389d47305031718586540b7af@mail.gmail.com>
	<423A584B.3020000@divmod.com>
Message-ID: <20050319181030.GW7778@opteron.random>

On Fri, Mar 18, 2005 at 05:25:47AM +0100, Valentino Volonghi wrote:
> You should use compy until after the next Nevow release, where you will 
> be able to use implements().

Cool ;), thanks!

From daverz at gmail.com  Sun Mar 20 18:24:29 2005
From: daverz at gmail.com (Dave Cook)
Date: Sun Mar 20 18:25:02 2005
Subject: [Twisted-web] LivePage client.set()
Message-ID: <7a59f02505032017245ee7fd92@mail.gmail.com>

I'd like to set the <option>s in on <select> based on user input from
another (using Nevow 0.3).  I tried something like

client.set("mySelect", [tags.option[optionText] for optionText  in
myListOfStrings])

in my handler.  This works great for Safari, but Firefox seems to
ignore the <option> tags and just inserts text into the DOM at that
point.  *Should* the above work generally, or was I just lucky with
Safari?

Thanks,
Dave Cook

From tegmine at gmail.com  Mon Mar 21 15:13:49 2005
From: tegmine at gmail.com (Luis N)
Date: Mon Mar 21 15:14:22 2005
Subject: [Twisted-web] Re: Nevow + adbapi
In-Reply-To: <1110500148.23817.15.camel@localhost.localdomain>
References: <77bfa81a05031015344b576d56@mail.gmail.com>
	<77bfa81a050310155963332ecd@mail.gmail.com>
	<1110500148.23817.15.camel@localhost.localdomain>
Message-ID: <77bfa81a050321141345512442@mail.gmail.com>

On Fri, 11 Mar 2005 00:15:48 +0000, Matt Goodall <matt@pollenation.net> wrote:
> On Thu, 2005-03-10 at 17:59 -0600, Luis N wrote:
> This is bad. You should not use Python's string formatting to build
> queries - pass the queries args as a tuple and let the database module 
> prepare the query:
> 
>        return dbpool.runQuery(
>            "SELECT english FROM lang WHERE spanish LIKE %s",
>            (data,))
> 
> In particular, this lets the database module correctly quote ''data''
> and protects you from SQL insertion problems.
> 
> - Matt
> 

Thank you. Now that I know how to use nevow and adbapi, I'm confused
by xmlrpc and adbapi.

class Educators(xmlrpc.XMLRPC):
    def xmlrpc_authEducator(self, educator, identify):
        self.educator = educator
        self.identify = identify
        if authenticate(self.educator).addCallback(authResult) == self.identify:
            return 1
        else:
            return 0

def authenticate(educator):
    return dbpool.runQuery("SELECT password FROM educatorgroup WHERE
educator LIKE %s", (educator,))

def authResult(db):
    if db:
        return db[0][0]
    else:
        return 0


xmlrpc_authEducator always returns 0, but if I change authResult to
print I know that the result is correct.

From andrew-twisted at puzzling.org  Mon Mar 21 21:21:33 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon Mar 21 21:22:13 2005
Subject: [Twisted-web] Re: Nevow + adbapi
In-Reply-To: <77bfa81a050321141345512442@mail.gmail.com>
References: <77bfa81a05031015344b576d56@mail.gmail.com>
	<77bfa81a050310155963332ecd@mail.gmail.com>
	<1110500148.23817.15.camel@localhost.localdomain>
	<77bfa81a050321141345512442@mail.gmail.com>
Message-ID: <20050322042133.GA26971@trogdor.home.puzzling.org>

On Mon, Mar 21, 2005 at 04:13:49PM -0600, Luis N wrote:
[...]
> 
> Thank you. Now that I know how to use nevow and adbapi, I'm confused
> by xmlrpc and adbapi.
> 
> class Educators(xmlrpc.XMLRPC):
>     def xmlrpc_authEducator(self, educator, identify):
>         self.educator = educator
>         self.identify = identify
>         if authenticate(self.educator).addCallback(authResult) == self.identify:
>             return 1
>         else:
>             return 0

addCallback returns the Deferred, not the result of the callback.  It has
to; the callback normally won't have been run yet, because the Deferred
won't have been fired yet.

The xmlrpc.XMLRPC class can handle Deferreds just fine, though, so instead,
you can do this:

class Educators(xmlrpc.XMLRPC):
    def xmlrpc_authEducator(self, educator, identify):
        d = authenticate(educator)
        d.addCallback(authResult)
        d.addCallback(isExpectedIdentity, identity)
        return d

def isExpectedIdentity(result, identity):
    return result == identity

I've also removed the unnecessary assignments to self.educator and
self.identify.

> def authenticate(educator):
>     return dbpool.runQuery("SELECT password FROM educatorgroup WHERE
> educator LIKE %s", (educator,))
> 
> def authResult(db):
>     if db:
>         return db[0][0]
>     else:
>         return 0

These are fine.

-Andrew.


From daverz at gmail.com  Tue Mar 22 02:03:01 2005
From: daverz at gmail.com (Dave Cook)
Date: Tue Mar 22 02:03:40 2005
Subject: [Twisted-web] Re: LivePage client.set()
In-Reply-To: <7a59f02505032017245ee7fd92@mail.gmail.com>
References: <7a59f02505032017245ee7fd92@mail.gmail.com>
Message-ID: <7a59f025050322010344e989c4@mail.gmail.com>

Here's a simple example (attached).

This doesn't work at all in IE 6.  I think the issue is that
document.innerHTML is not standard.

I ended up writing a Javascript function that accepts the option text as lines:

    myfuncs = T.script(language="javascript")[
        T.xml("""

        function setOptions(selectID, optionsString) {
            select = document.getElementById(selectID)
            select.options.length = 0
            optionList = optionsString.split(/\\n/)
            for (i=0; i < optionList.length; i++) {
                option = document.createElement("option")
                option.text = option.value = optionList[i]
                select.appendChild(option)
            }
        }
        """)]

Dave Cook
-------------- next part --------------
A non-text attachment was scrubbed...
Name: clientset.py
Type: application/x-python
Size: 952 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050322/4a3bfb0b/clientset.bin
From daverz at gmail.com  Tue Mar 22 02:08:17 2005
From: daverz at gmail.com (Dave Cook)
Date: Tue Mar 22 02:08:51 2005
Subject: [Twisted-web] Re: LivePage client.set()
In-Reply-To: <7a59f025050322010344e989c4@mail.gmail.com>
References: <7a59f02505032017245ee7fd92@mail.gmail.com>
	<7a59f025050322010344e989c4@mail.gmail.com>
Message-ID: <7a59f025050322010860c93a52@mail.gmail.com>

On Tue, 22 Mar 2005 01:03:01 -0800, Dave Cook <daverz@gmail.com> wrote:
> Here's a simple example (attached).

Oops, that was a slightly diddled script.   I'll just paste it in:

from twisted.internet import reactor
from nevow import loaders
from nevow import rend
from nevow import tags as T
from nevow import liveevil

choices = [[0,1,2], [3,4,5], [6,7,8]]

def setOptions(client, text):
    client.set("target", [T.option[s] for s in choices[int(text)]])

myhandler = liveevil.handler(setOptions,
                             "node.options[node.selectedIndex].text")

class Page(rend.Page):
    """Example of using stan to render a page.
    """
    addSlash = True
    docFactory = loaders.stan(
        T.html[
            T.head[
                liveevil.glue,
                T.title['client.set test'],
                ],
            T.body[
                T.select(onchange=myhandler)[
                  [T.option[str(i)] for i in range(3)]
                ],
                T.select(id="target"),
            ]
        ]
      )

reactor.listenTCP(8080, liveevil.LiveSite(Page()))
reactor.run()

From dp at ulaluma.com  Tue Mar 22 09:55:27 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Mar 22 09:55:33 2005
Subject: [Twisted-web] LivePage client.set()
In-Reply-To: <7a59f02505032017245ee7fd92@mail.gmail.com>
References: <7a59f02505032017245ee7fd92@mail.gmail.com>
Message-ID: <e0766968c27be355cca47b7e5b3bb597@ulaluma.com>


On Mar 20, 2005, at 8:24 PM, Dave Cook wrote:

> I'd like to set the <option>s in on <select> based on user input from
> another (using Nevow 0.3).  I tried something like
>
> client.set("mySelect", [tags.option[optionText] for optionText  in
> myListOfStrings])
>
> in my handler.  This works great for Safari, but Firefox seems to
> ignore the <option> tags and just inserts text into the DOM at that
> point.  *Should* the above work generally, or was I just lucky with
> Safari?

Doing things like this is highly dependent on how well a browser lets 
you arbitrarily swap out dom elements after the page is already 
rendered. As you observed, this works on Safari but not IE or Firefox. 
I don't think there is really any technique besides experimentation to 
determine what does and does not work.

.innerHTML is not standard, but it was invented by IE and is very 
widely supported by all other major browsers now. It works the most 
reliably of any techniques I have found short of using the actual w3c 
DOM createElement/appendChild APIs to programatically construct nodes 
in the client, which would be a real pain in the ass to render.

I suggest trying something like this instead to see if browsers can 
cope with it a little better:

tags.span(id="mySelect")[...]

client.set("mySelect", tags.select[[tags.option[optionText] for 
optionText in myListOfStrings]])

dp


From tegmine at gmail.com  Wed Mar 23 12:15:26 2005
From: tegmine at gmail.com (Luis N)
Date: Wed Mar 23 12:15:57 2005
Subject: [Twisted-web] Re: Nevow + adbapi
In-Reply-To: <20050322042133.GA26971@trogdor.home.puzzling.org>
References: <77bfa81a05031015344b576d56@mail.gmail.com>
	<77bfa81a050310155963332ecd@mail.gmail.com>
	<1110500148.23817.15.camel@localhost.localdomain>
	<77bfa81a050321141345512442@mail.gmail.com>
	<20050322042133.GA26971@trogdor.home.puzzling.org>
Message-ID: <77bfa81a05032311152df68907@mail.gmail.com>

On Tue, 22 Mar 2005 15:21:33 +1100, Andrew Bennetts
<andrew-twisted@puzzling.org> wrote:

> addCallback returns the Deferred, not the result of the callback.  It has 
> to; the callback normally won't have been run yet, because the Deferred
> won't have been fired yet.
> 
> -Andrew.

Thank you, I thought that may have been what was happening. You've
very nicely explained the concept of deferreds. I'll take another read
through the "deferreds are beautiful" doc.

Just one more question, where should I place dbpool =
adbapi.ConnectionPool(), so that I don't open a new connection every
xmlrpc call.

Or, for three calls, is this normal at server shutdown. 

2005/03/23 19:13 GMT [-] adbapi closing: psycopg
2005/03/23 19:13 GMT [-] adbapi closing: psycopg
2005/03/23 19:13 GMT [-] adbapi closing: psycopg

From therve at free.fr  Wed Mar 23 14:13:51 2005
From: therve at free.fr (Thomas HERVE)
Date: Wed Mar 23 14:14:26 2005
Subject: [Twisted-web] Nevow liveglue and proxy
Message-ID: <20050323221351.g45fmb2bpjm88sk4@itchy.wasabout.net>

I've just updated to nevow 0.4.1 and I enjoy the improvements, especially on the
LivePage API. But i've found something that doesn't work for me in the new way
to render livepage "glue" : the render_liveglue method uses the url.here()
function, and as I'm using an Apache proxy to access the site it gives me
"http://localhost:8080[...]" instead of the URL I'm accessing.

For now I've set manually the liveglue.js in my header, and I think it's a clean
way to do it, but I was wondering if there was a another way to get "good" URL
(which means the one the browser see).

Anyway thanks for that great work !

-- 
Thomas HERVE

----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.

From matt at pollenation.net  Wed Mar 23 15:41:38 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed Mar 23 15:41:49 2005
Subject: [Twisted-web] Nevow liveglue and proxy
In-Reply-To: <20050323221351.g45fmb2bpjm88sk4@itchy.wasabout.net>
References: <20050323221351.g45fmb2bpjm88sk4@itchy.wasabout.net>
Message-ID: <4241F0A2.4020107@pollenation.net>

Thomas HERVE wrote:

>I've just updated to nevow 0.4.1 and I enjoy the improvements, especially on the
>LivePage API. But i've found something that doesn't work for me in the new way
>to render livepage "glue" : the render_liveglue method uses the url.here()
>function, and as I'm using an Apache proxy to access the site it gives me
>"http://localhost:8080[...]" instead of the URL I'm accessing.
>
>For now I've set manually the liveglue.js in my header, and I think it's a clean
>way to do it, but I was wondering if there was a another way to get "good" URL
>(which means the one the browser see).
>
>Anyway thanks for that great work !
>
>  
>
This is a common problem with proxied applications. It affects anything 
that generates URLs.

You need to add a nevow.vhost.VHostMonsterResource to your site. See the 
docstring for details, including how to configure the Apache proxy.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \	       Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From tegmine at gmail.com  Wed Mar 23 16:36:08 2005
From: tegmine at gmail.com (Luis N)
Date: Wed Mar 23 16:36:43 2005
Subject: [Twisted-web] Re: Nevow + adbapi
In-Reply-To: <77bfa81a05032311152df68907@mail.gmail.com>
References: <77bfa81a05031015344b576d56@mail.gmail.com>
	<77bfa81a050310155963332ecd@mail.gmail.com>
	<1110500148.23817.15.camel@localhost.localdomain>
	<77bfa81a050321141345512442@mail.gmail.com>
	<20050322042133.GA26971@trogdor.home.puzzling.org>
	<77bfa81a05032311152df68907@mail.gmail.com>
Message-ID: <77bfa81a05032315366981db19@mail.gmail.com>

> Or, for three calls, is this normal at server shutdown.
> 
> 2005/03/23 19:13 GMT [-] adbapi closing: psycopg
> 2005/03/23 19:13 GMT [-] adbapi closing: psycopg
> 2005/03/23 19:13 GMT [-] adbapi closing: psycopg
> 

Okay, this was a stupid question. I ran a loop with 100 xmlrpc calls,
and only 5 connections were open to be closed when I shut the server
down.

From therve at free.fr  Thu Mar 24 02:30:21 2005
From: therve at free.fr (Thomas HERVE)
Date: Thu Mar 24 02:31:05 2005
Subject: [Twisted-web] Nevow liveglue and proxy
In-Reply-To: <4241F0A2.4020107@pollenation.net>
References: <20050323221351.g45fmb2bpjm88sk4@itchy.wasabout.net>
	<4241F0A2.4020107@pollenation.net>
Message-ID: <20050324103021.1vrsllqo9dcsswks@itchy.wasabout.net>

Quoting Matt Goodall <matt@pollenation.net>:

> This is a common problem with proxied applications. It affects 
> anything that generates URLs.
>
> You need to add a nevow.vhost.VHostMonsterResource to your site. See 
> the docstring for details, including how to configure the Apache 
> proxy.

Well in fact I use a resource wrapped in a guard.SessionWrapper to get the
authentication functionnality, and the only solution I've seen for 
using vhosts
is the small hack found here :
http://twistedmatrix.com/pipermail/twisted-web/2004-October/000801.html.
There's not seem to have a clean solution for this problem, and I'm not (yet
:)) able to judge if I should use this.

-- 
Thomas


From therve at free.fr  Thu Mar 24 05:26:13 2005
From: therve at free.fr (Thomas HERVE)
Date: Thu Mar 24 05:26:48 2005
Subject: [Twisted-web] Nevow liveglue and proxy
In-Reply-To: <20050324103021.1vrsllqo9dcsswks@itchy.wasabout.net>
References: <20050323221351.g45fmb2bpjm88sk4@itchy.wasabout.net>
	<4241F0A2.4020107@pollenation.net>
	<20050324103021.1vrsllqo9dcsswks@itchy.wasabout.net>
Message-ID: <20050324132613.j651vx2y4g0080o8@itchy.wasabout.net>

Quoting Thomas HERVE <therve@free.fr>:

> Quoting Matt Goodall <matt@pollenation.net>:
>
>> You need to add a nevow.vhost.VHostMonsterResource to your site. See 
>> the docstring for details, including how to configure the Apache 
>> proxy.
>
> Well in fact I use a resource wrapped in a guard.SessionWrapper to get the
> authentication functionnality, and the only solution I've seen for 
> using vhosts
> is the small hack found here :
> http://twistedmatrix.com/pipermail/twisted-web/2004-October/000801.html.
> There's not seem to have a clean solution for this problem, and I'm not (yet
> :)) able to judge if I should use this.

As always, it's faster to talk than it is to search, and I found a solution in
svn sandbox, in tv/monsterguard. It "simply" uses an intermediate root page to
declare the VHostMonster.

I looks like this :
In apache configuration :
ProxyPass /app http://localhost:8080/vhost/http/www.example.com/app

In tac file :
# Start code
realm = mysite.MyRealm()
portal = portal.Portal(realm)
portal.registerChecker(checkers.AllowAnonymousAccess(), 
credentials.IAnonymous)
portal.registerChecker(mysite.MyCredChecker())

// Create a small static page, should not be accessed
root = static.Data('This is the private server, not accessible from the
Internet. It hosts <a href="app/">app</a>', 'text/html')
root.putChild('', root)
root.putChild('vhost', vhost.VHostMonsterResource())
root.putChild('app', guard.SessionWrapper(portal,
mindFactory=livepage.LivePage))

// MySite is an appserver.Site
site = mysite.MySite(root)

application = service.Application("mysite")
internet.TCPServer(8080, site).setServiceParent(application)
# END Code

Et voila.

-- 
Thomas


From xifxif at gmail.com  Thu Mar 24 12:12:53 2005
From: xifxif at gmail.com (Xif)
Date: Thu Mar 24 12:13:26 2005
Subject: [Twisted-web] Authenticating users and refering them to personal
	URLs based on the authentication result.
Message-ID: <975ab1d1050324111275c06d23@mail.gmail.com>

Hi

I'm just starting with Nevow, and wanted to know if this is possible,
and if so get a few leads.

I want:

1) to authenticate users (from a form with a "username" and a
"password" field) based on data stored in a database.

2) after authentication is performed, the user is sent to a URL  based
on some of the data from the database. For example, if the database
query revealed him to be named "John Smith", he shall be refered to
http://appserver.com/JohnDoe. Subsequently, he should remain at this
URL, and all links should refer to addresses "below" his personal
address. For example, http://appserver.com/JohnDoe/configuration,
http://appserver.com/JohnDoe/mail, etc.

Thanks in advance,

Xif

From tv at twistedmatrix.com  Thu Mar 24 12:22:23 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Mar 24 12:22:56 2005
Subject: [Twisted-web] Authenticating users and refering them to personal
	URLs based on the authentication result.
In-Reply-To: <975ab1d1050324111275c06d23@mail.gmail.com>
References: <975ab1d1050324111275c06d23@mail.gmail.com>
Message-ID: <4243136F.2050301@twistedmatrix.com>

Xif wrote:
> 1) to authenticate users (from a form with a "username" and a
> "password" field) based on data stored in a database.

nevow.guard, twisted.cred

> 2) after authentication is performed, the user is sent to a URL  based
> on some of the data from the database. For example, if the database
> query revealed him to be named "John Smith", he shall be refered to
> http://appserver.com/JohnDoe. Subsequently, he should remain at this
> URL, and all links should refer to addresses "below" his personal
> address. For example, http://appserver.com/JohnDoe/configuration,
> http://appserver.com/JohnDoe/mail, etc.

Make the Realm return url.here.child(avatarID) to redirect to the
username.

From erik at splunktechnology.com  Fri Mar 25 12:09:36 2005
From: erik at splunktechnology.com (ErikSwan)
Date: Fri Mar 25 12:09:40 2005
Subject: [Twisted-web] xslt nevow and escaped xml
Message-ID: <2424dcb40c455c2853444f3acc6f12a4@splunktechnology.com>

Hi all,

We are using XSLT with twisted/nevow and want to pass xml through 
fillslots or stan generated API without getting escaped.
Any suggestions or pointers to how to do?

Thanks,
e



 > erik swan
 > splunk technologies
 > 548 Fourth St. San Francisco

 >> spelunk vb: explore natural caves
 >> splunk  vb : explore IT infrastructure
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 464 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050325/ecae9de1/attachment.bin
From sa at c-area.ch  Fri Mar 25 12:46:19 2005
From: sa at c-area.ch (Steven Armstrong)
Date: Fri Mar 25 12:46:31 2005
Subject: [Twisted-web] xslt nevow and escaped xml
In-Reply-To: <2424dcb40c455c2853444f3acc6f12a4@splunktechnology.com>
References: <2424dcb40c455c2853444f3acc6f12a4@splunktechnology.com>
Message-ID: <42446A8B.8070006@c-area.ch>

On 03/25/05 20:09, ErikSwan wrote:
> Hi all,
> 
> We are using XSLT with twisted/nevow and want to pass xml through 
> fillslots or stan generated API without getting escaped.
> Any suggestions or pointers to how to do?
> 
> Thanks,
> e
> 

Hi Erik

I've had the same problem within a sequence-mapping renderer.
Attached is an example of the workaround I used. Maybe it gives you some
ideas for possible solutions.

The trick is to use:
tags.xml(someData)

A cooler solution would be if one could set a flag on slots telling
nevow how they should be rendered.
e.g:
<nevow:slot name="myslot" escape="false" />

But for this to work you'ld have to hack nevow itself.

hth
cheers
Steven
-------------- next part --------------
A non-text attachment was scrubbed...
Name: html.py
Type: text/x-python
Size: 1537 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050325/1ce5c5c8/html.py
From daverz at gmail.com  Sun Mar 27 15:05:46 2005
From: daverz at gmail.com (Dave Cook)
Date: Sun Mar 27 15:06:18 2005
Subject: [Twisted-web] Weird issue with formless and Firefox/Mozilla
Message-ID: <7a59f0250503271405769f0d7f@mail.gmail.com>

Short story: bizarre problem with a corrupted popdown list in Firefox
and Mozilla on unix systems.

I'm trying to render some unicode strings in a popdown, basing my code
on the formpost2.py example in nevow 0.4.1:

class IMyForm(annotate.TypedInterface):

    def composer(self,
                 composers=annotate.Choice(choices=choices,
                                            label="Choose a composer",
                                            valueToKey=unicode,
                                            stringify=unicode,
                                            keyToValue=unicode,
                                            unicode=True),
                                         
            ):
        pass
    composer = annotate.autocallable(composer)

The full code is here:

http://members.cox.net/davecook/pythonstuff/test.py

This seems to work great.  Well, at least the unicode strings seem to
roundtrip from the server to the browser, and there aren't any
encoding tracebacks.

That is, it works great in Safari, Konqueror, IE6, and win32 Firefox,
but with Firefox (1.0.2) on OS X and Linux and Mozilla (1.7.6) on
Linux the popdown gets corrupted and clicking on the popdown button is
not effective, you have to click to the left of the button to popdown
the menu, and the menu is misaligned.  The scrollbar in the dropdown
list even disappears on Linux.

Unless my code is doing something nasty, I'm guessing this is a
Firefox bug.  So the next question is, how do I report a bug like
this?  Will they take a nevow script as a test case?

Thanks,
Dave Cook

From daverz at gmail.com  Sun Mar 27 16:40:42 2005
From: daverz at gmail.com (Dave Cook)
Date: Sun Mar 27 16:41:14 2005
Subject: [Twisted-web] Re: Weird issue with formless and Firefox/Mozilla
In-Reply-To: <7a59f0250503271405769f0d7f@mail.gmail.com>
References: <7a59f0250503271405769f0d7f@mail.gmail.com>
Message-ID: <7a59f02505032715407bd0a89b@mail.gmail.com>

On Sun, 27 Mar 2005 14:05:46 -0800, Dave Cook <daverz@gmail.com> wrote:

> Short story: bizarre problem with a corrupted popdown list in Firefox
> and Mozilla on unix systems.
> 
> I'm trying to render some unicode strings in a popdown, basing my code
> on the formpost2.py example in nevow 0.4.1:

I tested this with nevow 0.3.  The problem with the Firefox popdown
corruption doesn't occur there.
Of course, there's no valueToKey, keyToValue, or unicode parameters in 0.3.

Dave Co

From daverz at gmail.com  Mon Mar 28 11:01:47 2005
From: daverz at gmail.com (Dave Cook)
Date: Mon Mar 28 11:06:08 2005
Subject: [Twisted-web] Re: Weird issue with formless and Firefox/Mozilla
In-Reply-To: <7a59f02505032715407bd0a89b@mail.gmail.com>
References: <7a59f0250503271405769f0d7f@mail.gmail.com>
	<7a59f02505032715407bd0a89b@mail.gmail.com>
Message-ID: <7a59f02505032810015e2de668@mail.gmail.com>

On Sun, 27 Mar 2005 14:05:46 -0800, Dave Cook <daverz@gmail.com> wrote: 
> > Short story: bizarre problem with a corrupted popdown list in Firefox
> > and Mozilla on unix systems.

Correction: it only happens on native OS X Firefox and when throwing
Firefox or Mozilla windows to the OS X11 server from my Linux box, so
maybe it's some Aqua issue.

Dave Cook

From ianb at colorstudy.com  Tue Mar 29 21:14:34 2005
From: ianb at colorstudy.com (Ian Bicking)
Date: Tue Mar 29 21:14:12 2005
Subject: [Twisted-web] Twisted web WSGI
Message-ID: <424A27AA.50004@colorstudy.com>

Hi all.  Where might I find that spiffy new bug-free Twisted WSGI server?

-- 
Ian Bicking  /  ianb@colorstudy.com  / http://blog.ianbicking.org

From foom at fuhm.net  Wed Mar 30 07:44:01 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed Mar 30 07:44:07 2005
Subject: [Twisted-web] Twisted web WSGI
In-Reply-To: <424A27AA.50004@colorstudy.com>
References: <424A27AA.50004@colorstudy.com>
Message-ID: <f90fab46240634e7066728933bca5d7f@fuhm.net>

On Mar 29, 2005, at 11:14 PM, Ian Bicking wrote:
> Hi all.  Where might I find that spiffy new bug-free Twisted WSGI 
> server?

Part of web2. I am not so bold as to claim it is "bug free" yet, but 
one can always hope.
twisted/web2/wsgi.py

demo.py has a little wsgi app in it that demonstrates that at least 
some stuff works.
Run with: "twistd -noy twisted/web2/demo.py"

James


From Jeffrey.Kunce at mdc.mo.gov  Wed Mar 30 08:38:56 2005
From: Jeffrey.Kunce at mdc.mo.gov (Jeffrey Kunce)
Date: Wed Mar 30 08:39:11 2005
Subject: [Twisted-web] nevow development refresh
Message-ID: <s24a740c.017@mdc.mo.gov>

Hi-

This is most probably FAQ, but I swear I couldn't find it - please have
mercy on a nevow/twisted newbie :)

If I make some changes in the python code for a nevow application, is
there a way to refresh and test those changes without killing/restarting
my twisted server?

Thanks.

  --Jeff

From daverz at gmail.com  Wed Mar 30 15:12:32 2005
From: daverz at gmail.com (Dave Cook)
Date: Wed Mar 30 15:13:04 2005
Subject: [Twisted-web] nevow development refresh
In-Reply-To: <s24a740c.017@mdc.mo.gov>
References: <s24a740c.017@mdc.mo.gov>
Message-ID: <7a59f025050330141255ba6d4d@mail.gmail.com>

On Wed, 30 Mar 2005 09:38:56 -0600, Jeffrey Kunce
<Jeffrey.Kunce@mdc.mo.gov> wrote:

> This is most probably FAQ, but I swear I couldn't find it - please have
> mercy on a nevow/twisted newbie :)

Here's the FAQ:

http://divmod.org/users/wiki.twistd/nevow/moin.cgi/FrequentlyAskedQuestions

And here's the start of a cookbook:

http://divmod.org/users/wiki.twistd/nevow/moin.cgi/CookBook

Dave Cook

From mwh at python.net  Thu Mar 31 04:28:32 2005
From: mwh at python.net (Michael Hudson)
Date: Thu Mar 31 04:29:42 2005
Subject: [Twisted-web] overdesign is me
Message-ID: <2mll84dpgf.fsf@starship.python.net>

Has anyone done anything like Archetypes from the zope world with
Nevow?  I.e take some schema description for a type and automatically
from that make bare-bones views and editors for the object?

Cheers,
mwh

-- 
  We've had a lot of problems going from glibc 2.0 to glibc 2.1.
  People claim binary compatibility.  Except for functions they
  don't like.                       -- Peter Van Eynde, comp.lang.lisp


From dangoor at gmail.com  Thu Mar 31 08:52:38 2005
From: dangoor at gmail.com (Kevin Dangoor)
Date: Thu Mar 31 08:52:43 2005
Subject: [Twisted-web] nevow development refresh
In-Reply-To: <7a59f025050330141255ba6d4d@mail.gmail.com>
References: <s24a740c.017@mdc.mo.gov>
	<7a59f025050330141255ba6d4d@mail.gmail.com>
Message-ID: <3f085ecd05033107521b2ec91a@mail.gmail.com>

I've also found this cookbook recipe for updating instances after
reloading a module to be handy:
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/160164

At the moment, I'm just going in via a manhole and manually reloading
modules when I change them in development. I'm sure this can be
automated, though.

This route has the advantage that you don't have to restructure your
code into non-objects in the way that the cookbook suggests.

Kevin

From mwh at python.net  Thu Mar 31 09:50:31 2005
From: mwh at python.net (Michael Hudson)
Date: Thu Mar 31 09:53:05 2005
Subject: [Twisted-web] Re: nevow development refresh
References: <s24a740c.017@mdc.mo.gov>
	<7a59f025050330141255ba6d4d@mail.gmail.com>
	<3f085ecd05033107521b2ec91a@mail.gmail.com>
Message-ID: <2m64z7ep48.fsf@starship.python.net>

Kevin Dangoor <dangoor@gmail.com> writes:

> I've also found this cookbook recipe for updating instances after
> reloading a module to be handy:
> http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/160164

This is the sort of thing I wrote it for!

In practice, I'm finding a few issues (mostly to do with upgrading
state of instances).

> At the moment, I'm just going in via a manhole and manually reloading
> modules when I change them in development. I'm sure this can be
> automated, though.

Hmm, manhole.  I should probably try that.

> This route has the advantage that you don't have to restructure your
> code into non-objects in the way that the cookbook suggests.

I don't understand this comment, though?

Cheers,
mwh

-- 
  One of the great skills in using any language is knowing what not
  to use, what not to say.  ... There's that simplicity thing again.
                                                       -- Ron Jeffries


From matt.feifarek at gmail.com  Thu Mar 31 14:47:49 2005
From: matt.feifarek at gmail.com (Matt Feifarek)
Date: Thu Mar 31 14:48:22 2005
Subject: [Twisted-web] Static.File and browser caching
Message-ID: <6fb6dbfe0503311347462bc7f5@mail.gmail.com>

Hello.

Static.File doesn't seem to support any of the cache features that
modern browsers use.

There are various HTTP headers that govern this, including Etag,
Cache-Control, Expires, etc. The Twisted server returns a
comparatively minimal set of headers (hit twistedmatrix.com and look
at the headers).

Also, as far as I can tell, a "good citizen" HTTPD changes the
response from a "200" to another response code that indicates "nothing
new here", under certain circumstances. OR, it lets the browser figure
that out... but it has to give the browser enough headers for it to do
so.

Is there a subclass of Static.File somewhere in Twisted that supports
these features, or am I perhaps looking in the wrong place for this
functionality?

Thanks.

From general at eepatents.com  Thu Mar 31 15:14:34 2005
From: general at eepatents.com (Ed Suominen)
Date: Thu Mar 31 15:14:23 2005
Subject: [Twisted-web] Static.File and browser caching
In-Reply-To: <6fb6dbfe0503311347462bc7f5@mail.gmail.com>
References: <6fb6dbfe0503311347462bc7f5@mail.gmail.com>
Message-ID: <200503311414.35109.general@eepatents.com>

This was suggested by "jerub" on #twisted.web for Nevow usage.  Maybe 
you'll find it helpful for figuring out how to deal with the caching 
issue with twisted.web as well.

Best regards, Ed


class StaticData(static.Data):
    """
    I am an override to Nevow's static.Data class to render static
    objects with the time they were created. Hopefully won't be
    necessary with a newer release of Nevow
    
    """
    def __init__(self, *arg, **kw):
        self.createTime = time.time()
        static.Data.__init__(self, *arg, **kw)

    def renderHTTP(self, ctx):
        request = IRequest(ctx)
        request.setLastModified(self.createTime)
        return static.Data.renderHTTP(self, ctx)


On Thursday 31 March 2005 01:47 pm, Matt Feifarek wrote:
> Hello.
>
> Static.File doesn't seem to support any of the cache features that
> modern browsers use.
>
> There are various HTTP headers that govern this, including Etag,
> Cache-Control, Expires, etc. The Twisted server returns a
> comparatively minimal set of headers (hit twistedmatrix.com and look
> at the headers).
>
> Also, as far as I can tell, a "good citizen" HTTPD changes the
> response from a "200" to another response code that indicates
> "nothing new here", under certain circumstances. OR, it lets the
> browser figure that out... but it has to give the browser enough
> headers for it to do so.
>
> Is there a subclass of Static.File somewhere in Twisted that supports
> these features, or am I perhaps looking in the wrong place for this
> functionality?
>

From foom at fuhm.net  Thu Mar 31 18:14:42 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu Mar 31 18:14:54 2005
Subject: [Twisted-web] Static.File and browser caching
In-Reply-To: <6fb6dbfe0503311347462bc7f5@mail.gmail.com>
References: <6fb6dbfe0503311347462bc7f5@mail.gmail.com>
Message-ID: <16a978a15b5f124348b03e3a536b6ef2@fuhm.net>

On Mar 31, 2005, at 4:47 PM, Matt Feifarek wrote:
> Hello.
>
> Static.File doesn't seem to support any of the cache features that
> modern browsers use.

static.File supports If-Modified-Since and Last-Modified:
Try running:
$ curl -H'If-Modified-Since: Mon, 28 Mar 2005 04:58:37 GMT' -i  
'http://twistedmatrix.com/'
and notice how it returns a 304 Not Modified.

Cache-Control and Expires are not relevant to a static file resource. 
But yes, it's not returning an ETag.

James


