From martin at moellenbecks.de  Sun Jan  1 10:26:03 2006
From: martin at moellenbecks.de (=?ISO-8859-1?Q?Martin_M=F6llenbeck?=)
Date: Sun Jan  1 11:26:10 2006
Subject: [Twisted-web] Is it possible to call the client from the server
	with nevow/athena
Message-ID: <AE62395B-81B2-4934-B2C3-5B386A446786@moellenbecks.de>

Hi and happy new year,

is it possible to call the client from the server with nevow/athena  
like nevow/livepage?

I have take a look to the source, but I didn't unterstand it quite well.

Any help would be great.

Thanks Martin



From exarkun at divmod.com  Sun Jan  1 10:36:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun Jan  1 11:36:11 2006
Subject: [Twisted-web] Is it possible to call the client from the server
	with nevow/athena
In-Reply-To: <AE62395B-81B2-4934-B2C3-5B386A446786@moellenbecks.de>
Message-ID: <20060101173609.1217.522427915.divmod.quotient.9475@ohm>

On Sun, 1 Jan 2006 18:26:03 +0100, Martin M?llenbeck <martin@moellenbecks.de> wrote:
>Hi and happy new year,
>
>is it possible to call the client from the server with nevow/athena  like 
>nevow/livepage?
>
>I have take a look to the source, but I didn't unterstand it quite well.
>

Both LivePage and LiveFragment have a "callRemote" method which will invoke some JavaScript function on the client.  The "widgets" example demonstrates this.  You can find the Python for this example at <http://divmod.org/trac/browser/trunk/Nevow/examples/athenademo/widgets.py> and the JavaScript at <http://divmod.org/trac/browser/trunk/Nevow/examples/athenademo/widgets.js>.

Hope this helps,

Jean-Paul

From martin at moellenbecks.de  Sun Jan  1 14:22:26 2006
From: martin at moellenbecks.de (=?ISO-8859-1?Q?Martin_M=F6llenbeck?=)
Date: Sun Jan  1 15:22:31 2006
Subject: [Twisted-web] Is it possible to call the client from the server
	with nevow/athena
In-Reply-To: <20060101173609.1217.522427915.divmod.quotient.9475@ohm>
References: <20060101173609.1217.522427915.divmod.quotient.9475@ohm>
Message-ID: <B4A6A3D8-6039-46D5-935A-06B61ED544E2@moellenbecks.de>

thanks,

that exactly what I am looking for.

Great work "twisted" and "nevow" ;-). I am happy too use it.

Martin

Am 01.01.2006 um 18:36 schrieb Jean-Paul Calderone:

> On Sun, 1 Jan 2006 18:26:03 +0100, Martin M?llenbeck  
> <martin@moellenbecks.de> wrote:
>> Hi and happy new year,
>>
>> is it possible to call the client from the server with nevow/ 
>> athena  like nevow/livepage?
>>
>> I have take a look to the source, but I didn't unterstand it quite  
>> well.
>>
>
> Both LivePage and LiveFragment have a "callRemote" method which  
> will invoke some JavaScript function on the client.  The "widgets"  
> example demonstrates this.  You can find the Python for this  
> example at <http://divmod.org/trac/browser/trunk/Nevow/examples/ 
> athenademo/widgets.py> and the JavaScript at <http://divmod.org/ 
> trac/browser/trunk/Nevow/examples/athenademo/widgets.js>.
>
> Hope this helps,
>
> Jean-Paul
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From qk at wheel.pl  Tue Jan  3 05:18:05 2006
From: qk at wheel.pl (Maciej Kucharz)
Date: Tue Jan  3 06:18:17 2006
Subject: [Twisted-web] Few forms on page.
Message-ID: <6A0CCAC2-15FF-4117-94D1-05ACA5B0FDCD@wheel.pl>

Hi,

Is there any way to add few forms (Matt's forms) to one page ?
I tried to use fragments (rend.Fragment), but i have only errors.

Thanks for any advice..

-- 
Maciej Kucharz

-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060103/e40543e4/PGP.pgp
From alain.frehel at ehess.fr  Tue Jan  3 06:59:30 2006
From: alain.frehel at ehess.fr (Alain =?ISO-8859-1?Q?Fr=E9hel?=)
Date: Tue Jan  3 07:59:57 2006
Subject: [Twisted-web] XForms HTTP POST with twisted web ?
Message-ID: <1136296771.17345.29.camel@digitale.gestion.ehess.fr>

Hi,

I have an application using XForms and I would like to know if it is
possible to receive (and process) the XML instance sent via XForms' HTTP
POST submission (that is having method="post" in the <submission>
element).

Until now the only way I manage to receive any data is by using
method="get" or method="urlencoded-post", which is not what I want. I
need the original XML instance, not a dictionary of elements/values.

I'm debuting with twisted, so if I'm missing something trivial, please
forgive me. I'm using twisted 1.3.0-8 (Debian Sarge).

-- 
Alain Fr?hel


From tv at twistedmatrix.com  Tue Jan  3 14:53:55 2006
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue Jan  3 15:54:13 2006
Subject: [Twisted-web] XForms HTTP POST with twisted web ?
In-Reply-To: <1136296771.17345.29.camel@digitale.gestion.ehess.fr>
References: <1136296771.17345.29.camel@digitale.gestion.ehess.fr>
Message-ID: <43BAF272.6040601@twistedmatrix.com>

Alain Fr?hel wrote:
> I have an application using XForms and I would like to know if it is
> possible to receive (and process) the XML instance sent via XForms' HTTP
> POST submission (that is having method="post" in the <submission>
> element).
> 
> Until now the only way I manage to receive any data is by using
> method="get" or method="urlencoded-post", which is not what I want. I
> need the original XML instance, not a dictionary of elements/values.

What's the content-type for XForms method="post"?
Twisted.web currently parses multipart/form-data and
application/x-www-form-urlencoded POSTs, everything
else should be left in request.content.

From matt at pollenation.net  Wed Jan  4 03:45:13 2006
From: matt at pollenation.net (Matt Goodall)
Date: Wed Jan  4 04:45:07 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
 nesting, and convenience descriptor generator
In-Reply-To: <E1Eu2Qr-00017B-Tx@divmod.org>
References: <E1Eu2Qr-00017B-Tx@divmod.org>
Message-ID: <43BBA739.6080501@pollenation.net>

Hi all,

I really don't see any benefit in introducing a Nevow dependency on
Epsilon for this change.

In fact, the whole epsilon.descriptor module looks a little pointless to
me. All it does, AFAICT, is make something that's a property not look
like a property anymore and *maybe* adds an extra method call per
property access (I'm not sure how the standard property() is implemented
so perhaps they're the same in the end).

For those who don't want to read the changeset, but have valid comments,
here are some example uses:

Epsilon-dependent way:

    from epsilon import descriptor

    class Foo(object):
        _foo = 0
        class foo(descriptor.attribute):
            def get(self):
                return self._foo

+ Ha ha, fooled you ... I can't think of any ;-)
- Obfuscated
- Extra method call per property access ?

Normal way:

    class Foo(object):
        _foo = 0
        def getFoo(self):
            return self._foo
        foo = property(getFoo)

+ Obvious
+ Definitely no extra method call
+ Also provides a getFoo method (why do people insist on hiding them?)

Normal way but with a hidden getter method:

    class Foo(object):
        _foo = 0
        def foo():
            def get(self):
                return self._foo
            return property(get)
        foo = foo()

+ Still fairly obvious
+ Hides the foo get method without meta magic
+ Definitely no extra method call


My feelings are probably fairly obvious ;-) but what do others in the
Divmod community think?


Note: I have absolutely no objection to packages dependencies when
useful. I just don't think this qualifies as useful at all.


- Matt


Glyph Lefkowitz wrote:
> MIME-Version: 1.0
> Content-Type: text/plain; charset=UTF-8
> 
> Author: glyph
> Date: Wed Jan  4 01:47:36 2006
> New Revision: 3904
> 
> Added:
>    branches/signup-config-464-9/Epsilon/epsilon/descriptor.py
>    branches/signup-config-464-9/Epsilon/epsilon/test/test_descriptor.py
> Modified:
>    branches/signup-config-464-9/Nevow/nevow/athena.py
>    branches/signup-config-464-9/Nevow/nevow/test/test_athena.py
> Log:
> server-side (fragment) nesting, and convenience descriptor generator
> 
> 
> 
> Modified: branches/signup-config-464-9/Nevow/nevow/athena.py
> ==============================================================================
> --- branches/signup-config-464-9/Nevow/nevow/athena.py	(original)
> +++ branches/signup-config-464-9/Nevow/nevow/athena.py	Wed Jan  4 01:47:36 2006
> @@ -320,7 +320,7 @@
>      def _newClientID(self):
>          return guard._sessionCookie()
>  
> -
> +from epsilon import descriptor
>  
>  class LivePage(rend.Page):
>      transportFactory = LivePageTransport
> @@ -347,6 +347,10 @@
>      # bugs.
>      TRANSPORT_IDLE_TIMEOUT = 300
>  
> +    class page(descriptor.attribute):
> +        def get(self):
> +            return self
> +
>      def __init__(self, iface=None, rootObject=None, jsModules=None, jsModuleRoot=None, *a, **kw):
>          super(LivePage, self).__init__(*a, **kw)
>  
> @@ -356,6 +360,7 @@
>              jsModules = JSPackage(jsDeps.mapping)
>          self.jsModules = jsModules
>          self.jsModuleRoot = jsModuleRoot
> +        self.liveFragmentChildren = []
>          self._includedModules = ['MochiKit', 'Divmod', 'Nevow.Athena']
>  
>  
> @@ -612,12 +617,43 @@
>  
>      jsClass = u'Nevow.Athena.Widget'
>  
> +    def __init__(self, *a, **k):
> +        super(LiveFragment, self).__init__(*a, **k)
> +        self.liveFragmentChildren = []
> +
>      def rend(self, context, data):
>          self._athenaID = self.page.addLocalObject(self)
>          context.fillSlots('athena:id', self._athenaID)
>          return super(LiveFragment, self).rend(context, data)
>  
>  
> +    def setFragmentParent(self, fragmentParent):
> +        """
> +        Sets the L{LiveFragment} (or L{LivePage}) which is the logical parent
> +        of this fragment.  This should parallel the client-side hierarchy.
> +
> +        All LiveFragments must have setFragmentParent called on them before
> +        they are rendered for the client; otherwise, they will be unable to
> +        properly hook up to the page.
> +
> +        LiveFragments should have their own setFragmentParent called before
> +        calling setFragmentParent on any of their own children.  The normal way
> +        to accomplish this is to instantiate your fragment children during the
> +        render pass.
> +
> +        If that isn't feasible, instead override setFragmentParent and
> +        instantiate your children there.
> +
> +        This architecture might seem contorted, but what it allows that is
> +        interesting is adaptation of foreign objects to LiveFragment.  Anywhere
> +        you adapt to LiveFragment, setFragmentParent is the next thing that
> +        should be called.
> +        """
> +        self.fragmentParent = fragmentParent
> +        self.page = fragmentParent.page
> +        fragmentParent.liveFragmentChildren.append(self)
> +
> +
>      def _getModuleForClass(self):
>          return jsDeps.getModuleForClass(self.jsClass)
>  
> 
> Modified: branches/signup-config-464-9/Nevow/nevow/test/test_athena.py
> ==============================================================================
> --- branches/signup-config-464-9/Nevow/nevow/test/test_athena.py	(original)
> +++ branches/signup-config-464-9/Nevow/nevow/test/test_athena.py	Wed Jan  4 01:47:36 2006
> @@ -68,3 +68,27 @@
>                  # All dependencies should be loaded before the module
>                  # that depends upon them.
>                  self.failUnless(allDeps.index(d) < allDeps.index(m))
> +
> +class TestFragment(athena.LiveFragment):
> +    pass
> +
> +class Nesting(unittest.TestCase):
> +
> +    def testFragmentNesting(self):
> +        lp = athena.LivePage()
> +        tf1 = TestFragment()
> +        tf2 = TestFragment()
> +
> +        tf1.setFragmentParent(lp)
> +        tf2.setFragmentParent(tf1)
> +
> +        self.assertEquals(lp.liveFragmentChildren, [tf1])
> +        self.assertEquals(tf1.liveFragmentChildren, [tf2])
> +        self.assertEquals(tf2.liveFragmentChildren, [])
> +        self.assertEquals(tf2.fragmentParent, tf1)
> +        self.assertEquals(tf1.fragmentParent, lp)
> +
> +        self.assertEquals(tf2.page, lp)
> +        self.assertEquals(tf1.page, lp)
> +
> +
> 
> _______________________________________________
> Nevow-commits mailing list
> Nevow-commits@divmod.org
> http://divmod.org/users/mailman.twistd/listinfo/nevow-commits

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.

From glyph at divmod.com  Wed Jan  4 07:48:40 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Wed Jan  4 08:48:43 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <43BBA739.6080501@pollenation.net>
Message-ID: <20060104144840.1217.2028726432.divmod.quotient.9892@ohm>



On Wed, 04 Jan 2006 10:45:13 +0000, Matt Goodall <matt@pollenation.net> wrote:

>I really don't see any benefit in introducing a Nevow dependency on
>Epsilon for this change.

Whoops.  Didn't realize that particular dependency got made for the first time there - it'll be removed before it gets to trunk.

From matt at pollenation.net  Wed Jan  4 08:37:58 2006
From: matt at pollenation.net (Matt Goodall)
Date: Wed Jan  4 09:37:52 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060104144840.1217.2028726432.divmod.quotient.9892@ohm>
References: <20060104144840.1217.2028726432.divmod.quotient.9892@ohm>
Message-ID: <43BBEBD6.8070805@pollenation.net>

glyph@divmod.com wrote:
> 
> 
> On Wed, 04 Jan 2006 10:45:13 +0000, Matt Goodall <matt@pollenation.net>
> wrote:
> 
>> I really don't see any benefit in introducing a Nevow dependency on
>> Epsilon for this change.
> 
> 
> Whoops.  Didn't realize that particular dependency got made for the
> first time there - it'll be removed before it gets to trunk.

Hurray and many thanks.

- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.

From m-lists at the-moon.net  Wed Jan  4 11:30:35 2006
From: m-lists at the-moon.net (Richard Wall)
Date: Wed Jan  4 12:30:36 2006
Subject: [Twisted-web] Donovan Preston: Nevow wiki content
Message-ID: <43BC144B.20702@the-moon.net>

Donovan,

I really like the document you wrote about Nevow / Formless
http://www.python.org/pycon/dc2004/papers/60/
...and wanted your permission to copy and update some of it for use on
the Nevow wiki. Or perhaps you'd prefer to update it yourself. Either
way I think it would be a valuable addition to the wiki.

Thanks.
-- 
Richard Wall

From wsanchez at wsanchez.net  Thu Jan  5 22:53:16 2006
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Thu Jan  5 23:53:20 2006
Subject: [Twisted-web] Resource.child_()
Message-ID: <6538AF90-FA92-4CD3-84A3-9B752CBA8A84@wsanchez.net>

   I'm wondering how married we are to the child_ method registration  
implementation for children in Resource.  it's a bit of a strange way  
to do this... it means that valid URI characters can't be used, for  
one thing.

   Additionally, File doesn't use this mechanism at all, and instead  
puts registered children into a dictionary instead.  That  
implementation is more flexible, but not compatible with the  
documented API in its Resource superclass, which says that putChild 
("foo", x) means child_foo() = x.

   Furthermore, Resource also allows for a childFactory() method to  
be a source for children, and that API is also ignored by File.  My  
feeling is that Resource should be doing none of this at all, and  
that there should be two subclasses (ie.  
FunkyChildMethodDispatchingResource and FactoryResource) which do one  
or the other, if we need these mechanisms to be provided by web2 in a  
generic class at all.

   Going to the extreme, the notion of resources having children at  
all is a strange thing to build into a generic HTTP resource.   
Resources that contain other resources (collections) are specified in  
WebDAV, but (intentionally) not in HTTP.  A lot of implementations  
map URIs with slashes in them to a hierarchical back-end (eg. a file  
system), but that's not inherrent in HTTP; /foo and /foo/ can be  
different and completely unrelated resources.  That leads me to think  
that locateChild() itself shouldn't be an IResource thing, but  
perhaps that's too pedantic given common usage of URI paths.

	-wsv


From andrea at cpushare.com  Fri Jan  6 08:03:06 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan  6 09:03:12 2006
Subject: [Twisted-web] Donovan Preston: Nevow wiki content
In-Reply-To: <43BC144B.20702@the-moon.net>
References: <43BC144B.20702@the-moon.net>
Message-ID: <20060106150306.GD1612@opteron.random>

On Wed, Jan 04, 2006 at 06:30:35PM +0000, Richard Wall wrote:
> Donovan,
> 
> I really like the document you wrote about Nevow / Formless
> http://www.python.org/pycon/dc2004/papers/60/
> ...and wanted your permission to copy and update some of it for use on
> the Nevow wiki. Or perhaps you'd prefer to update it yourself. Either
> way I think it would be a valuable addition to the wiki.

I'm afraid it may be obsolete, I already get deprecation warnings in my
code using formless that way... I didn't update to the new mode yet
because I want to wait it to settle down, I'd rather rewrite it only
once ;)

From andrea at cpushare.com  Fri Jan  6 08:08:09 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan  6 09:08:13 2006
Subject: [Twisted-web] Nevow PageCache
In-Reply-To: <20051214014712.GH23878@opteron.random>
References: <20051213224302.GB23878@opteron.random>
	<20051213234800.GA24295@divmod.com>
	<20051214014712.GH23878@opteron.random>
Message-ID: <20060106150809.GE1612@opteron.random>

On Wed, Dec 14, 2005 at 02:47:12AM +0100, Andrea Arcangeli wrote:
> On Wed, Dec 14, 2005 at 12:48:00AM +0100, Valentino Volonghi wrote:
> > The right strategy would be to write something similar for twisted.web2 using
> > filters maybe. This would make the implementation significantly easier to
> > maintain and probably shorter.
> 
> So, we should defer it to the time nevow will switch over web2? 
> 
> > Nevow would be the place of fragment caches (for which there is an already
> > implemented API as you may recall).
> 
> Yep, at some point I started using it but then it complicated things too
> much and I removed them. The benefit wasn't big enough. Those caches
> require explicit coding, while the PageCache is instead totally
> transparent and it only requires a two liner patch to be enabled and the
> patched code runs backwards compatible if run on a pristine nevow tree.
> So to me the PageCache is more important and it does 99% of the work.

Can we focus on the API of the app? That's the most important thing
after all, it's the only one that must not change.

My current API is this:

class forever_cached_page_class(rend.Page):
	cache = True
class cached_page_class(forever_cached_page_class):
	lifetime = LIFETIME

class cached_page_class(rend.Page):
	cache = True
	lifetime = LIFETIME
	max_cache_size = 20*1024*1024

(LIFETIME in seconds)

If this API is good, then I suggest adding my patch now even if it's not
the long term implementation, and then once nevow will switch over to
web2, it'll transparently support the same API with web2 support instead
of the PageCache inside nevow.

The PageCache class is absolutely invisible to the web application code
and as such it doesn't need to be a long term implementation.

The only thing we have to focus before including that code, is the API
provided to the nevow application.

Perhaps lifetime should be renamed to cache_lifetime or do you have
other suggestions?

Thanks.

From dp at ulaluma.com  Fri Jan  6 11:24:45 2006
From: dp at ulaluma.com (Donovan Preston)
Date: Fri Jan  6 12:24:16 2006
Subject: [Twisted-web] Donovan Preston: Nevow wiki content
In-Reply-To: <20060106150306.GD1612@opteron.random>
References: <43BC144B.20702@the-moon.net>
	<20060106150306.GD1612@opteron.random>
Message-ID: <D07E5F6D-A895-4BFB-8AB9-DF43E4ED4982@ulaluma.com>


On Jan 6, 2006, at 7:03 AM, Andrea Arcangeli wrote:

> On Wed, Jan 04, 2006 at 06:30:35PM +0000, Richard Wall wrote:
>> Donovan,
>>
>> I really like the document you wrote about Nevow / Formless
>> http://www.python.org/pycon/dc2004/papers/60/
>> ...and wanted your permission to copy and update some of it for  
>> use on
>> the Nevow wiki. Or perhaps you'd prefer to update it yourself. Either
>> way I think it would be a valuable addition to the wiki.
>
> I'm afraid it may be obsolete, I already get deprecation warnings  
> in my
> code using formless that way... I didn't update to the new mode yet
> because I want to wait it to settle down, I'd rather rewrite it only
> once ;)

Yes. It's obsolete. It has been for years :-) It could be updated  
though.

dp


From chazen at gmail.com  Sat Jan  7 11:48:43 2006
From: chazen at gmail.com (charlie detar)
Date: Sat Jan  7 12:48:45 2006
Subject: [Twisted-web] simple registry failure - __adapt__
Message-ID: <b89831b80601071048y7a3067d1h632d0ede1d472c7d@mail.gmail.com>

Hi,

I noticed an email from Dickon Reed referencing this issue last June
(http://twistedmatrix.com/pipermail/twisted-web/2005-June/001536.html),
but there is no reply in the archives - I was wondering if someone had
discovered a solution?

I am attempting to write a simple rpi script which uses a registry, as
described in the documentation:
http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto17

My rpy script is as follows:
----
from twisted.web import resource

class Counter:
    def __init__(self):
        self.value = 0
    def increment(self):
        self.value += 1
    def getValue(self):
        return self.value

counter = registry.getComponent(Counter)
if not counter:
   registry.setComponent(Counter, Counter())
counter = registry.getComponent(Counter)

class MyResource(resource.Resource):
    def render_GET(self, request):
        counter.increment()
        return "you are visitor %d" % counter.getValue()

resource = MyResource()
----

I get the following error:

exceptions.AttributeError: class Counter has no attribute '__adapt__'
/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/site-packages/twisted/web/server.py,
line 152 in process
150    self.postpath = map(unquote, string.split(self.path[1:], '/'))
151    try:
152      resrc = self.site.getResourceFor(self)
153      self.render(resrc)
...

I would be happy to send the full traceback if it would be useful in
identifying the problem.

I am using Twisted, Twisted Web, and Zope Interfaces installed from
the 2005-11-06 Twisted "Sumo" build on an OS X 10.3.9 G5 running
python 2.3 (the latest for OS 10.3.x).

cheers,
Charlie

From exarkun at divmod.com  Sat Jan  7 12:01:59 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Jan  7 13:02:00 2006
Subject: [Twisted-web] simple registry failure - __adapt__
In-Reply-To: <b89831b80601071048y7a3067d1h632d0ede1d472c7d@mail.gmail.com>
Message-ID: <20060107190159.1217.610961388.divmod.quotient.10731@ohm>

On Sat, 7 Jan 2006 13:48:43 -0500, charlie detar <chazen@gmail.com> wrote:
>Hi,
>
>I noticed an email from Dickon Reed referencing this issue last June
>(http://twistedmatrix.com/pipermail/twisted-web/2005-June/001536.html),
>but there is no reply in the archives - I was wondering if someone had
>discovered a solution?
>
>I am attempting to write a simple rpi script which uses a registry, as
>described in the documentation:
>http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.html#auto17
>
>My rpy script is as follows:
>----
>from twisted.web import resource
>
>class Counter:
>    def __init__(self):
>        self.value = 0
>    def increment(self):
>        self.value += 1
>    def getValue(self):
>        return self.value
>
>counter = registry.getComponent(Counter)
>if not counter:
>   registry.setComponent(Counter, Counter())
>counter = registry.getComponent(Counter)
>
>class MyResource(resource.Resource):
>    def render_GET(self, request):
>        counter.increment()
>        return "you are visitor %d" % counter.getValue()
>
>resource = MyResource()
>----

The component registry is not intended as a dumping ground for 
random global variables.  I am not sure if the particular usage 
above was ever supported behavior (I am inclined to think not, 
but tpc was some heinous stuff, so who knows), but it is definitely 
no longer supported.

Replace the argument to getComponent and the first argument to 
setComponent with an interface (a subclass of zope.interface.Interface),
or just skip components entirely and use a boring dictionary:

import myproject
counter = myproject.globals.get(Counter, None)
if counter is None:
    counter = myproject.globals[Counter] = Counter()

Hope this helps,

Jean-Paul

From chazen at gmail.com  Sat Jan  7 12:26:10 2006
From: chazen at gmail.com (charlie detar)
Date: Sat Jan  7 13:26:14 2006
Subject: [Twisted-web] simple registry failure - __adapt__
In-Reply-To: <20060107190159.1217.610961388.divmod.quotient.10731@ohm>
References: <b89831b80601071048y7a3067d1h632d0ede1d472c7d@mail.gmail.com>
	<20060107190159.1217.610961388.divmod.quotient.10731@ohm>
Message-ID: <b89831b80601071126j40d0055eyda1130429e90b0fe@mail.gmail.com>

Jean-Paul Calderone wrote:
> import myproject
> counter = myproject.globals.get(Counter, None)
> if counter is None:
>     counter = myproject.globals[Counter] = Counter()
>
> Hope this helps,

Very much so!  Thanks.

-Charlie

From m-lists at the-moon.net  Wed Jan 11 10:20:47 2006
From: m-lists at the-moon.net (Richard Wall)
Date: Wed Jan 11 11:20:21 2006
Subject: [Twisted-web] Different behaviour of Nevow loaders xmlstr and stan
 when used in macro methods.
Message-ID: <43C53E6F.5050406@the-moon.net>

A few hours ago I posted a unit test to #twisted.web that I thought
demonstrated a problem I'm having with Nevow. It was wrong though, and
this is an updated version:

http://rafb.net/paste/results/sf5B5s57.html

What the test is supposed to demonstrate, is a difference in the
behaviour of loaders.stan and loaders.xmlstr (or xmlfile).

The test contains a rend.Page class with a macro_pattern(ctx, name)
method. The purpose of the macro is to lookup patterns called "name"
from a nevow.loaders.* instance at self.patternFactory.

If a matching pattern is found in patternFactory, it's children are
inserted into the tag that called the macro otherwise the original
contents are returned instead. So given a patternFactory:

<div n:pattern="body">
	<p>Page specific Text</p>
</div>

...and docFactory:...

<div n:macro="pattern body">
	<p>Default text</p>
</div>

You'd get:
<div>
	<p>Default text</p>
</div>

That works fine with both loaders.stan and loaders.xmlstr. If however
the pattern its self uses the same macro, I get a recursion error in
loaders.xmlstr only. eg

<div n:pattern="body">
	<div n:macro="pattern menu">
		<ul>
			<li>Default menu</li>
		</ul>
	</div>
	<p>Page specific Text</p>
</div>

I can understand why this might cause recursion, and i have managed to
fix it in my app by adding checks to the macro method. I just don't
understand why the xml and stan loaders don't behave the same. I have
tried to isolate where the recursion starts and it seems to be in
loaders.xmlstr.load (~L200):
doc = flatsax.parseString(self.template, self.ignoreDocType,
self.ignoreComment)
# recursion seems to start here.
doc = flat.precompile(doc, ctx)

...I can't work out how the stan version prevents the recursion though.

Has anyone come across this before? Is it a bug or just an unsupported
use of macros? If anyone has any ideas, I'd be grateful.

I hope to post a fuller example of what I'm trying to achieve with this
later. Something like what I remember of Zope, where child pages can
inherit page patterns from parent pages.
-- 
Richard Wall

From andrea at cpushare.com  Thu Jan 12 04:07:19 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 12 05:07:26 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <43BBEBD6.8070805@pollenation.net>
References: <20060104144840.1217.2028726432.divmod.quotient.9892@ohm>
	<43BBEBD6.8070805@pollenation.net>
Message-ID: <20060112110719.GY15897@opteron.random>

On Wed, Jan 04, 2006 at 03:37:58PM +0000, Matt Goodall wrote:
> glyph@divmod.com wrote:
> > 
> > 
> > On Wed, 04 Jan 2006 10:45:13 +0000, Matt Goodall <matt@pollenation.net>
> > wrote:
> > 
> >> I really don't see any benefit in introducing a Nevow dependency on
> >> Epsilon for this change.
> > 
> > 
> > Whoops.  Didn't realize that particular dependency got made for the
> > first time there - it'll be removed before it gets to trunk.
> 
> Hurray and many thanks.

Seconded!

From andrea at cpushare.com  Thu Jan 12 04:12:10 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 12 05:12:14 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <43BBA739.6080501@pollenation.net>
References: <E1Eu2Qr-00017B-Tx@divmod.org> <43BBA739.6080501@pollenation.net>
Message-ID: <20060112111210.GZ15897@opteron.random>

On Wed, Jan 04, 2006 at 10:45:13AM +0000, Matt Goodall wrote:
> Note: I have absolutely no objection to packages dependencies when
> useful. I just don't think this qualifies as useful at all.

Just a side note: I would have objection even if useful, I'd rather
prefer the other package to be merged into a new directory of nevow
repository if it's so small anyway. The stack should remain:

	python -> twisted -> nevow -> whatever

Not the other way around. This is about usability and avoiding
unecessairly mess. The zope interfaces are already annoying enough ;).
Some people thought they had to install zope to use twisted, really. The
sooner that zopeintefaces thing gets merged into twisted the better
(keeping it in sync wouldn't be such a nightmare as long as it remains
in readonly mode inside twisted repository).

From matt at pollenation.net  Thu Jan 12 05:21:16 2006
From: matt at pollenation.net (Matt Goodall)
Date: Thu Jan 12 06:21:03 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060112111210.GZ15897@opteron.random>
References: <E1Eu2Qr-00017B-Tx@divmod.org> <43BBA739.6080501@pollenation.net>
	<20060112111210.GZ15897@opteron.random>
Message-ID: <43C649BC.3080206@pollenation.net>

Andrea Arcangeli wrote:
> On Wed, Jan 04, 2006 at 10:45:13AM +0000, Matt Goodall wrote:
> 
>>Note: I have absolutely no objection to packages dependencies when
>>useful. I just don't think this qualifies as useful at all.
> 
> 
> Just a side note: I would have objection even if useful, I'd rather
> prefer the other package to be merged into a new directory of nevow
> repository if it's so small anyway. The stack should remain:
> 
> 	python -> twisted -> nevow -> whatever
> 
> Not the other way around. This is about usability and avoiding
> unecessairly mess.

My objection was seeing the dependency added for something so trivial
and of debatable use. I would *much* rather see Nevow depend on Epsilon
than see bits of Epsilon copied into Nevow (if that's what you're
suggesting).

If anything, we should be removing modules from Nevow (appserver,
static, etc), not adding more.

> The zope interfaces are already annoying enough ;).
> Some people thought they had to install zope to use twisted, really. The
> sooner that zopeintefaces thing gets merged into twisted the better
> (keeping it in sync wouldn't be such a nightmare as long as it remains
> in readonly mode inside twisted repository).

zope.interface is already included in Twisted if you get the Sumo
distribution. In any case, if you try to import twisted you get a good
descriptive exception that even includes the URL!

- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.

From andrea at cpushare.com  Thu Jan 12 05:42:52 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 12 06:43:06 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <43C649BC.3080206@pollenation.net>
References: <E1Eu2Qr-00017B-Tx@divmod.org> <43BBA739.6080501@pollenation.net>
	<20060112111210.GZ15897@opteron.random>
	<43C649BC.3080206@pollenation.net>
Message-ID: <20060112124252.GD15897@opteron.random>

On Thu, Jan 12, 2006 at 12:21:16PM +0000, Matt Goodall wrote:
> than see bits of Epsilon copied into Nevow (if that's what you're
> suggesting).

That's what I was suggesting if something.

> If anything, we should be removing modules from Nevow (appserver,
> static, etc), not adding more.

I disagree. I think even forms must be included in nevow repository.
What is the point of saving a few kbytes on disk when forms totally
depends on nevow? I've 250G harddisks these days.

From dialtone at divmod.com  Thu Jan 12 06:11:23 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jan 12 07:11:44 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060112124252.GD15897@opteron.random>
References: <E1Eu2Qr-00017B-Tx@divmod.org> <43BBA739.6080501@pollenation.net>
	<20060112111210.GZ15897@opteron.random>
	<43C649BC.3080206@pollenation.net>
	<20060112124252.GD15897@opteron.random>
Message-ID: <20060112131123.GA18300@divmod.com>

On Thu, Jan 12, 2006 at 01:42:52PM +0100, Andrea Arcangeli wrote:
> > If anything, we should be removing modules from Nevow (appserver,
> > static, etc), not adding more.
> 
> I disagree. I think even forms must be included in nevow repository.
> What is the point of saving a few kbytes on disk when forms totally
> depends on nevow? I've 250G harddisks these days.

Simplifying the project. Anyway I think you are talking on 2 different levels.
static and appserver (and others like formless IMHO) should be removed for one
of the following 2 reasons:
1) No more maintained or supported (formless, although useful and different
from forms it's currently unmaintained and should be rewritten on top of
forms instead of the current library, this is just an example anyway).
2) Doesn't belong to Nevow. static, appserver, guard and others should be
provided by the web server instead of by Nevow. It wouldn't be bad if Nevow
only provided some default Resource subclasses (athena.LivePage and
rend.Page) and a rendering engine with the forms package.
Of course this is all IMHO.

Looking into the future Nevow will be ported on web2 (strategy to be defined
yet) and will drop guard, static and appserver at once for sure. IMHO we could
also deprecate formless waiting for it to be ported over forms. The current
formless API is already similar to forms and far from what it was in the old
days.

We could start a discussion on this of course.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060112/d8ae3988/attachment.pgp
From andrea at cpushare.com  Thu Jan 12 06:24:31 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 12 07:24:36 2006
Subject: [Twisted-web] [PATCH] nonbuffered cache
Message-ID: <20060112132431.GE15897@opteron.random>

Hello,

After klive pages become larger and the db become larger too, I realized
that enabling my PageCache methods was destroing the very nice and
useful nonbuffered mode that allows showing the fragment of pages that
are already rendered while nevow keeps working to finishing rendering
the whole page. The nonbuffered mode makes interactive behaviour
completely different for klive (while it's almost invisible for other
projects that renders much more quickly because of much smaller pages).

Disabling the cache is a no way, a simple ab2 would DoS the server
without cache, it wouldn't even survive ./ .

So I modified the my cache patches to support nonbuffered mode. That was
very easy. I cleaned up the code a bit too.

I added some db queries to take several seconds to complete to block the
page rendering a few times, and it was real fun to open 3 browsers and
see the bar on the right enlarging every few seconds on all three
browsers at the same time after each query returned. Clicking reload
also re-display only the part of the page already rendered and then it
waits nevow to complete.

Performance is excellent as usual (it greatly exceeds the performance of
the network, it'd require gigabit ethernet to the internet to saturate
the link):

andrea@opteron:~> ab2 -n2000 -c 200 http://localhost:8818/
This is ApacheBench, Version 2.0.41-dev <$Revision: 1.121.2.12 $>
apache-2.0
Copyright (c) 1996 Adam Twiss, Zeus Technology Ltd,
http://www.zeustech.net/
Copyright (c) 1998-2002 The Apache Software Foundation,
http://www.apache.org/

Benchmarking localhost (be patient)
Completed 200 requests
Completed 400 requests
Completed 600 requests
Completed 800 requests
Completed 1000 requests
Completed 1200 requests
Completed 1400 requests
Completed 1600 requests
Completed 1800 requests
Finished 2000 requests


Server Software:        TwistedWeb/SVN-Trunk
Server Hostname:        localhost
Server Port:            8818

Document Path:          /
Document Length:        166396 bytes

Concurrency Level:      200
Time taken for tests:   7.210944 seconds
Complete requests:      2000
Failed requests:        0
Write errors:           0
Total transferred:      335883918 bytes
HTML transferred:       335625492 bytes
Requests per second:    277.36 [#/sec] (mean)
Time per request:       721.094 [ms] (mean)
Time per request:       3.605 [ms] (mean, across all concurrent
requests)
Transfer rate:          45487.94 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0  104 547.7      0    3003
Processing:   204  563 470.2    390    1978
Waiting:      110  334  68.9    329     544
Total:        204  667 716.4    390    3625

Percentage of the requests served within a certain time (ms)
  50%    390
  66%    449
  75%    498
  80%    530
  90%   1959
  95%   1977
  98%   3528
  99%   3543
 100%   3625 (longest request)

Even while the benchmark runs the server is accessible immediately. This
delivered 45Mbytes/sec of payload (not megabit), with 277 requests per
second. Without it such an ab2 command DoS the server. You can see the
effect online as usual on klive website.

I recommend applying to nevow CVS so others can use it too. If you don't
change your code to enable it with the following API this patch *cannot*
break anything even if it would be completely broken, so there are no
excuses for not applying it ;), this is in the _obviously_ safe
category.

Here the API to enable it in your code. NOTE: you cannot use
nevow_carryover/IHand with this, it makes no sense to cache forms output
anyway. Recommended use is with cached_page_class and a LIFETIME of 5
seconds (the above benchmark has a lifetime of 5 sec).

class forever_cached_page_class(rend.Page):
        cache = True
class cached_page_class(forever_cached_page_class):
        lifetime = LIFETIME

class cached_page_class(rend.Page):
        cache = True
        lifetime = LIFETIME
        max_cache_size = 20*1024*1024

(LIFETIME in seconds)

I consider this a must-have for most nevow sites, thanks!

Index: Nevow/nevow/util.py
===================================================================
--- Nevow/nevow/util.py	(revision 4051)
+++ Nevow/nevow/util.py	(working copy)
@@ -132,6 +132,7 @@
     from twisted.python import failure
     from twisted.python.failure import Failure
     from twisted.python import log
+    from twisted.internet import reactor
 
 except ImportError:
     class Deferred(object): pass
Index: Nevow/nevow/rend.py
===================================================================
--- Nevow/nevow/rend.py	(revision 4051)
+++ Nevow/nevow/rend.py	(working copy)
@@ -491,6 +491,62 @@
         self.children[name] = child
 
 
+class PageCache(object):
+    def __init__(self):
+        self.__db = {}
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+    def __storeCache(self, cacheIDX, c):
+        self.__db[cacheIDX] = c
+    def __deleteCache(self, cacheIDX):
+        del self.__db[cacheIDX]
+    def __deleteCacheData(self, cacheIDX, page):
+        size = self.__db[cacheIDX][1]
+        assert len(self.__db[cacheIDX][0]) == size
+        page.subCacheSize(size)
+        self.__deleteCache(cacheIDX)
+    def __lookupCache(self, cacheIDX):
+        return self.__db.get(cacheIDX)
+    def getCache(self, ctx, request):
+        cacheIDX = self.cacheIDX(ctx)
+        c = self.__lookupCache(cacheIDX)
+
+        if c is None:
+            c = ['', (util.Deferred(), request)]
+            self.__storeCache(cacheIDX, c)
+            def writer(buf):
+                c[0] += buf
+                for d, r in c[1:]:
+                    r.write(buf)
+            return None, writer
+        elif isinstance(c, list):
+            d = util.Deferred()
+            request.write(c[0])
+            c.append((d, request))
+            return d, None
+
+        return c[0], None
+    def cacheRendered(self, ctx, result, page):
+        cacheIDX = self.cacheIDX(ctx)
+        defer_list = self.__lookupCache(cacheIDX)
+        assert isinstance(defer_list[1][0], util.Deferred)
+        data = defer_list[0]
+        size = len(data)
+        if page.canCache(size):
+            # overwrite the deferred with the data
+            timer = None
+            if page.lifetime > 0:
+                timer = util.reactor.callLater(page.lifetime,
+                                               self.__deleteCacheData, cacheIDX, page)
+            page.addCacheSize(size)
+            self.__storeCache(cacheIDX, (data, size, timer, ))
+        else:
+            self.__deleteCache(cacheIDX)
+        for d,r in defer_list[1:]:
+            d.callback(result)
+
+_CACHE = PageCache()
+
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
     via the document factory (docFactory).
@@ -504,8 +560,23 @@
     afterRender = None
     addSlash = None
 
+    cache = False
+    lifetime = 0
+    max_cache_size = None
+    __cache_size = 0
+
     flattenFactory = lambda self, *args: flat.flattenFactory(*args)
 
+    def addCacheSize(self, size):
+        assert self.canCache(size)
+        self.__cache_size += size
+    def subCacheSize(self, size):
+        self.__cache_size -= size
+        assert self.__cache_size >= 0
+    def canCache(self, size):
+        return self.max_cache_size is None or \
+               self.__cache_size + size <= self.max_cache_size
+
     def renderHTTP(self, ctx):
         if self.beforeRender is not None:
             return util.maybeDeferred(self.beforeRender,ctx).addCallback(
@@ -530,7 +601,18 @@
             if self.afterRender is not None:
                 return util.maybeDeferred(self.afterRender,ctx)
 
-        if self.buffered:
+        if self.cache:
+            cache, writer = _CACHE.getCache(ctx, request)
+            if cache:
+                return cache
+
+            assert not self.buffered
+            assert self.afterRender is None
+
+            def finisher(result):
+                _CACHE.cacheRendered(ctx, result, self)
+                return result
+        elif self.buffered:
             io = StringIO()
             writer = io.write
             def finisher(result):

From andrea at cpushare.com  Thu Jan 12 06:43:56 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 12 07:44:04 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060112131123.GA18300@divmod.com>
References: <E1Eu2Qr-00017B-Tx@divmod.org> <43BBA739.6080501@pollenation.net>
	<20060112111210.GZ15897@opteron.random>
	<43C649BC.3080206@pollenation.net>
	<20060112124252.GD15897@opteron.random>
	<20060112131123.GA18300@divmod.com>
Message-ID: <20060112134356.GF15897@opteron.random>

On Thu, Jan 12, 2006 at 02:11:23PM +0100, Valentino Volonghi wrote:
> Simplifying the project. Anyway I think you are talking on 2 different levels.
> static and appserver (and others like formless IMHO) should be removed for one
> of the following 2 reasons:
> 1) No more maintained or supported (formless, although useful and different
> from forms it's currently unmaintained and should be rewritten on top of
> forms instead of the current library, this is just an example anyway).
> 2) Doesn't belong to Nevow. static, appserver, guard and others should be
> provided by the web server instead of by Nevow. It wouldn't be bad if Nevow
> only provided some default Resource subclasses (athena.LivePage and
> rend.Page) and a rendering engine with the forms package.
> Of course this is all IMHO.

formless is already a different directory isn't it? Isn't that enough?

I was talking about the repository not the directory. There's a
directory already: Nevow/nevow, Nevow/nevow is where nevow sits. I'm not
saying forms should be under the nevow directory, but in Nevow/forms.

> Looking into the future Nevow will be ported on web2 (strategy to be defined
> yet) and will drop guard, static and appserver at once for sure. IMHO we could
> also deprecate formless waiting for it to be ported over forms. The current
> formless API is already similar to forms and far from what it was in the old
> days.

Why should you obsolete formless? It's yet another package depending on
nevow. It won't get development, it won't get the latest features, but I
see no need of obsoleting it if there are project depending on them.

Backwards compatibility matters. It matters in python as much as it
metters in twisted and nevow. It's not like python provides backwards
compatibility and nevow can not.

It all depends if you're interested in growing the twisted/nevow user
base or not, if you break stuff without any good reason to break stuff,
the userbase will walk away to ruby on rails or some other project.

I'm not talking about the internals, if my cache patches breaks that's
fine, it's a feature not a bug, but if my app breaks that's annoying.

From dialtone at divmod.com  Thu Jan 12 08:48:21 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jan 12 09:48:46 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060112134356.GF15897@opteron.random>
References: <E1Eu2Qr-00017B-Tx@divmod.org> <43BBA739.6080501@pollenation.net>
	<20060112111210.GZ15897@opteron.random>
	<43C649BC.3080206@pollenation.net>
	<20060112124252.GD15897@opteron.random>
	<20060112131123.GA18300@divmod.com>
	<20060112134356.GF15897@opteron.random>
Message-ID: <20060112154821.GA18618@divmod.com>

On Thu, Jan 12, 2006 at 02:43:56PM +0100, Andrea Arcangeli wrote:
> formless is already a different directory isn't it? Isn't that enough?
> 
> I was talking about the repository not the directory. There's a
> directory already: Nevow/nevow, Nevow/nevow is where nevow sits. I'm not
> saying forms should be under the nevow directory, but in Nevow/forms.

Where something is located doesn't matter that much. It's still code that has
to be maintained and supported. Currently I think nobody will fix anything
about formless for many reasons.

> Why should you obsolete formless? It's yet another package depending on
> nevow. It won't get development, it won't get the latest features, but I
> see no need of obsoleting it if there are project depending on them.

Who is going to support it? When you provide a package people expects it to
work and if he finds any bugs they expect them to be fixed. It's not a matter
of features that much, although porting nevow to web2 is quite a big leap and
would require active porting of formless.

> Backwards compatibility matters. It matters in python as much as it
> metters in twisted and nevow. It's not like python provides backwards
> compatibility and nevow can not.

I wouldn't walk this path at all. We are providing backwards compatibility for
nevow versions that are long gone and we will provide it even when moving to
web2. But notice that nevow is quite a bit different than python in many ways.

But still even bigger projects break backwards compatibility (Zope, Python
itself, Cherrypy between version 2 and 2.1, Ruby on Rails itself) when needed.

> It all depends if you're interested in growing the twisted/nevow user
> base or not, if you break stuff without any good reason to break stuff,
> the userbase will walk away to ruby on rails or some other project.

To be honest I don't care that much. I do as much as I can to help people and
to develop Nevow with the time I have available. If people is so stupid to
leave a project because it is evolving to help developing with it then fine, I
don't care at all.

> I'm not talking about the internals, if my cache patches breaks that's
> fine, it's a feature not a bug, but if my app breaks that's annoying.

As I said we will have backwards compatibility code. Worrying about something
that is not even started seems a bit out of place. I have applications that
run on Nevow too and I won't be happy to fix them all indeed.

I hope to not sound harsh, it's not what I mean to be :).

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060112/7165fdf0/attachment-0001.pgp
From dialtone at divmod.com  Thu Jan 12 09:06:12 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jan 12 10:06:44 2006
Subject: [Twisted-web] [PATCH] nonbuffered cache
In-Reply-To: <20060112132431.GE15897@opteron.random>
References: <20060112132431.GE15897@opteron.random>
Message-ID: <20060112160612.GB18618@divmod.com>

On Thu, Jan 12, 2006 at 02:24:31PM +0100, Andrea Arcangeli wrote:
> Hello,

Cool, the patch looks good. I'm going to apply it as soon as there are
unittests. Some ideas for unittests is to have a counter on the page and check
that it never updates while the pages are cached and similar things.

There's also my cache module that needs unittests, if you feel like writing a
'general' test for caching frameworks then I would apply my own caching module
that is currently here:
http://divmod.org/trac/ticket/291

I suggest also adding a ticket to trac for your patch.

After this I'll apply the patch indeed and happily.
> Server Software:        TwistedWeb/SVN-Trunk
> Server Hostname:        localhost
> Server Port:            8818
> 
> Document Path:          /
> Document Length:        166396 bytes
> 
> Concurrency Level:      200
> Time taken for tests:   7.210944 seconds
> Complete requests:      2000
> Failed requests:        0
> Write errors:           0
> Total transferred:      335883918 bytes
> HTML transferred:       335625492 bytes
> Requests per second:    277.36 [#/sec] (mean)
> Time per request:       721.094 [ms] (mean)
> Time per request:       3.605 [ms] (mean, across all concurrent
> requests)
> Transfer rate:          45487.94 [Kbytes/sec] received

Impressive.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060112/d0731e8c/attachment.pgp
From andrea at cpushare.com  Thu Jan 12 12:44:47 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 12 13:44:54 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060112154821.GA18618@divmod.com>
References: <E1Eu2Qr-00017B-Tx@divmod.org> <43BBA739.6080501@pollenation.net>
	<20060112111210.GZ15897@opteron.random>
	<43C649BC.3080206@pollenation.net>
	<20060112124252.GD15897@opteron.random>
	<20060112131123.GA18300@divmod.com>
	<20060112134356.GF15897@opteron.random>
	<20060112154821.GA18618@divmod.com>
Message-ID: <20060112194447.GN15897@opteron.random>

On Thu, Jan 12, 2006 at 04:48:21PM +0100, Valentino Volonghi wrote:
> Where something is located doesn't matter that much. It's still code that has

Where something is located doesn't matter, but having to checkout 10
different things when a single checkout command would make it the same
way, seems quite unnecessary to me.

If we were talking about huge repositories, then saving network
bandwidth and disk space could make sense, but for small things that
totally depends on nevow, the annoyance is more than the benefit. 

> I wouldn't walk this path at all. We are providing backwards compatibility for
> nevow versions that are long gone and we will provide it even when moving to
> web2. But notice that nevow is quite a bit different than python in many ways.

Yes, and I can report that I had zero breakages in my code so far. But
moving away from formless isn't going to be trivial and infact I'm
deferring it as long as I can, because I don't want to risk forms to
suddently change API after I ported to it. The later I move into forms,
the less risk of wasting time ;)

> But still even bigger projects break backwards compatibility (Zope, Python
> itself, Cherrypy between version 2 and 2.1, Ruby on Rails itself) when needed.

Even the kernel does.

But here I'm seeing quite a few projects being advertized and after one
year going in "obsolete" mode and being replaced right away with
something else written from scratch. Atop is one example. It's not all
necessairly bad, but especially after seeing atop, I wouldn't even dream
to touch axiom for example. I've to thank you a lot for suggesting me to
use postgresql as backend, that was a good and correct choice for my web
apps.

> To be honest I don't care that much. I do as much as I can to help people and
> to develop Nevow with the time I have available. If people is so stupid to
> leave a project because it is evolving to help developing with it then fine, I
> don't care at all.

I was especially talking about breaking stuff without a good reason for
it.

I trust you for the direction of the project, my message is more a
"think twice before breaking stuff", than "never break anything". I
perfectly know sometime something has to be broken sometime.

But I wanted to make my point that porting from formless isn't trivial
and that obsoleting formless may hurt some users currently depending on
it.

> As I said we will have backwards compatibility code. Worrying about something
> that is not even started seems a bit out of place. I have applications that
> run on Nevow too and I won't be happy to fix them all indeed.

I'm not worried, I'm sending my opinion before it starts exactly to
perhaps influence future decision.

I wouldn't like a project that never evolves because it's forced to
remain backwards compatible, but at the same time when major apis are
obsoleted and replaced right away, something smells like not enough
attention is being paid.

One perfect example of this, is how can I be getting a formless
deprecation warnings if formless is obsolete? Who had this idea of
changing formless with yet another API? formless currently asks me to
add some bind method and to stop using the interfaces. So now we've
_two_ formless APIs, and both of them going obsolete soon. I'm certainly
not porting my code to the new-formless-already-obsolete API when I know
I will have to switch to forms in a year or so. And furthermore I'm not
even switching to forms until I'm forced to, to reduce the probability
of forms breakages.

So I think I'm right asking to be more careful, because this new
bind method formless API is the proof some effort is being wasted.

From andrea at cpushare.com  Thu Jan 12 12:47:22 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 12 13:47:26 2006
Subject: [Twisted-web] [PATCH] nonbuffered cache
In-Reply-To: <20060112160612.GB18618@divmod.com>
References: <20060112132431.GE15897@opteron.random>
	<20060112160612.GB18618@divmod.com>
Message-ID: <20060112194722.GO15897@opteron.random>

On Thu, Jan 12, 2006 at 05:06:12PM +0100, Valentino Volonghi wrote:
> Cool, the patch looks good. I'm going to apply it as soon as there are
> unittests. Some ideas for unittests is to have a counter on the page and check
> that it never updates while the pages are cached and similar things.

The ideal unittest would depend on the timings too. Are unittest allowed
to depend on the timigs?  However writing the unittest is going to be
more difficult than writing the feature ;)

> I suggest also adding a ticket to trac for your patch.

Ok. BTW, in the meantime I did a minor cleanup, the first deferred in
the list isn't needed, it can be replaced by Null, that saves some bytes
at runtime (nothing measurable but anyway).

Thanks!

From glyph at divmod.com  Thu Jan 12 14:06:13 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Jan 12 15:06:15 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060112111210.GZ15897@opteron.random>
Message-ID: <20060112210613.26200.314699208.divmod.quotient.278@ohm>



On Thu, 12 Jan 2006 12:12:10 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>Just a side note: I would have objection even if useful, I'd rather
>prefer the other package to be merged into a new directory of nevow
>repository if it's so small anyway. The stack should remain:
>
>	python -> twisted -> nevow -> whatever
>
>Not the other way around. This is about usability and avoiding
>unecessairly mess. The zope interfaces are already annoying enough ;).
>Some people thought they had to install zope to use twisted, really. The
>sooner that zopeintefaces thing gets merged into twisted the better
>(keeping it in sync wouldn't be such a nightmare as long as it remains
>in readonly mode inside twisted repository).

It's likely that Nevow will come to depend upon Epsilon at some point in the future: for example, code shared between Axiom and Nevow will not be scattered through the Divmod repository in multiple places.  However, if the depth of dependencies concern you, it would be useful if you could help by making some automated-dependency-resolving packages for twisted, epsilon, and nevow, such as debian packages (testing with ubuntu would surely be appreciated by a large community) and python eggs.

It doesn't really matter what the dependencies are as long as the user-experience of beginning to develop with Nevow is 'apt-get install nevow'.

From dialtone at divmod.com  Thu Jan 12 14:18:51 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jan 12 15:43:27 2006
Subject: [Twisted-web] [PATCH] nonbuffered cache
In-Reply-To: <20060112194722.GO15897@opteron.random>
References: <20060112132431.GE15897@opteron.random>
	<20060112160612.GB18618@divmod.com>
	<20060112194722.GO15897@opteron.random>
Message-ID: <20060112211851.GC18618@divmod.com>

On Thu, Jan 12, 2006 at 08:47:22PM +0100, Andrea Arcangeli wrote:

> The ideal unittest would depend on the timings too. Are unittest allowed
> to depend on the timigs?  However writing the unittest is going to be
> more difficult than writing the feature ;)

Create a deferred, create a timer, return the deferred from the test,
the deferred will be fired when the timer triggers it.

> > I suggest also adding a ticket to trac for your patch.
> 
> Ok. BTW, in the meantime I did a minor cleanup, the first deferred in
> the list isn't needed, it can be replaced by Null, that saves some bytes
> at runtime (nothing measurable but anyway).

I don't think we care about bytes. The cleaner the better.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060112/66c3abce/attachment.pgp
From andrew-twisted at puzzling.org  Thu Jan 12 17:51:51 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu Jan 12 18:59:17 2006
Subject: [Twisted-web] [PATCH] nonbuffered cache
In-Reply-To: <20060112194722.GO15897@opteron.random>
References: <20060112132431.GE15897@opteron.random>
	<20060112160612.GB18618@divmod.com>
	<20060112194722.GO15897@opteron.random>
Message-ID: <20060113005151.GA14635@home.puzzling.org>

On Thu, Jan 12, 2006 at 08:47:22PM +0100, Andrea Arcangeli wrote:
> On Thu, Jan 12, 2006 at 05:06:12PM +0100, Valentino Volonghi wrote:
> > Cool, the patch looks good. I'm going to apply it as soon as there are
> > unittests. Some ideas for unittests is to have a counter on the page and check
> > that it never updates while the pages are cached and similar things.
> 
> The ideal unittest would depend on the timings too. Are unittest allowed
> to depend on the timigs?  However writing the unittest is going to be
> more difficult than writing the feature ;)

Timings are extremely difficult to test reliably, but that doesn't mean you
can't test your code.

Valuable things to test include (assuming I understand the purpose of the patch
correctly):
  - pages are still renderable/retrievable as normal with caching enabled,
  - invalidating the cache manually (rather than relying on timing) causes the
    page to be freshly rendered,
  - two concurrent clients for the same page work -- they get the page they
    expect,
  - and that two concurrent clients for the same page cause the page to be
    generated just once (i.e. request A is received, page starts being
    generated, a request B that occurs while request A is still unfinished
    should not cause a second page generation to occur).

This doesn't make the test suite ensure that caches still get the N pages/sec
throughput you're after -- but it does ensure that they don't break, and that at
a coarse level that it's doing the right things for good performance (e.g. the
last suggestion in that list ensures that someone can't simply replace your
cache infrastructure with no-ops by accident and still have tests pass).

There are probably many other acheivable and worthwhile tests like these you
could do.

It's not a complete solution, but it's a heck of a lot better than nothing!

-Andrew.


From andrea at cpushare.com  Thu Jan 12 21:00:36 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 12 22:00:43 2006
Subject: [Twisted-web] [PATCH] nonbuffered cache
In-Reply-To: <20060112211851.GC18618@divmod.com>
References: <20060112132431.GE15897@opteron.random>
	<20060112160612.GB18618@divmod.com>
	<20060112194722.GO15897@opteron.random>
	<20060112211851.GC18618@divmod.com>
Message-ID: <20060113040036.GS15897@opteron.random>

On Thu, Jan 12, 2006 at 10:18:51PM +0100, Valentino Volonghi wrote:
> I don't think we care about bytes. The cleaner the better.

Well, certainly it's a very minor optimization, but it's a bit cleaner,
otherwise somebody could think such an unused deferred was actually
meant to do something. Once I post updates I'll post the new version, at
the moment such a small change is not worth the bandwidth ;)

From andrea at cpushare.com  Thu Jan 12 21:15:30 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 12 22:16:11 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060112210613.26200.314699208.divmod.quotient.278@ohm>
References: <20060112111210.GZ15897@opteron.random>
	<20060112210613.26200.314699208.divmod.quotient.278@ohm>
Message-ID: <20060113041530.GT15897@opteron.random>

On Thu, Jan 12, 2006 at 04:06:13PM -0500, glyph@divmod.com wrote:
> It's likely that Nevow will come to depend upon Epsilon at some point in 
> the future: for example, code shared between Axiom and Nevow will not be 
> scattered through the Divmod repository in multiple places.  However, if 

What is this code? I'd like to understand. Perhaps you're right it worth
it but without knowing the details I've some doubt. I'm really very
annoyed by unnecessary dependencies. I want to checkout stuff from
SVN/CVS repositories not eggs/rpm/deb.

BTW, I'm not a believer in axiom, I bought into the atop hype initially
but about one year ago I luckily listened to Valentino that postgresql
was much better choice. I think one should either don't use a db at all
and index stuff by hand in the filesystem, or use a real DBMS
(postgresql/mysql/commercial) [yes I know axiom can be ported from
sqllite to othe things but I think if SQL is the backend, one would
better understand SQL and write SQL by hand, SQL read committed semantics
must be in the mind of the programmer or things will be racy in real life]

From exarkun at divmod.com  Thu Jan 12 21:43:12 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu Jan 12 22:43:14 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060113041530.GT15897@opteron.random>
Message-ID: <20060113044312.26200.622342207.divmod.quotient.376@ohm>

On Fri, 13 Jan 2006 05:15:30 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>On Thu, Jan 12, 2006 at 04:06:13PM -0500, glyph@divmod.com wrote:
>> It's likely that Nevow will come to depend upon Epsilon at some point in
>> the future: for example, code shared between Axiom and Nevow will not be
>> scattered through the Divmod repository in multiple places.  However, if
>
>What is this code? I'd like to understand.

You can browse it online: <http://divmod.org/trac/browser/trunk/Epsilon/epsilon>.  It amounts to a general utility library.

>Perhaps you're right it worth
>it but without knowing the details I've some doubt. I'm really very
>annoyed by unnecessary dependencies. I want to checkout stuff from
>SVN/CVS repositories not eggs/rpm/deb.

Well, I doubt we're ever going to optimize for that :)  If you want to track development, great, but it's not the common case, and it's definitely not how /I/ want to install software.  "apt get install ..." is much simpler, and being able to install every single package I use that way would make me quite happy.

That said, I don't think you need to worry about an Epsilon dependency.  Epsilon and Nevow are in the same SVN repository :)  If you are currently grabbing Nevow by checking out <http://divmod.org/svn/Divmod/trunk/Nevow>, you can keep things just as simple and get Epsilon, too, by checking out <http://divmod.org/svn/Divmod/trunk>.  Perhaps this will give you a few other things you're not interested in (Nevow is by far the largest package in the repository, though), but as you said, you have plenty of disk space.

>
>BTW, I'm not a believer in axiom, I bought into the atop hype initially
>but about one year ago I luckily listened to Valentino that postgresql
>was much better choice. I think one should either don't use a db at all
>and index stuff by hand in the filesystem, or use a real DBMS
>(postgresql/mysql/commercial) [yes I know axiom can be ported from
>sqllite to othe things but I think if SQL is the backend, one would
>better understand SQL and write SQL by hand, SQL read committed semantics
>must be in the mind of the programmer or things will be racy in real life]

That's cool (although, I have to ask - what hype?  What I remember is telling everyone I could /not/ to use Atop ;).  Nevow is not going to come to depend on Axiom.  There's just no point.

Jean-Paul

From andrea at cpushare.com  Fri Jan 13 06:58:24 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 13 07:58:30 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060113044312.26200.622342207.divmod.quotient.376@ohm>
References: <20060113041530.GT15897@opteron.random>
	<20060113044312.26200.622342207.divmod.quotient.376@ohm>
Message-ID: <20060113135824.GX15897@opteron.random>

On Thu, Jan 12, 2006 at 11:43:12PM -0500, Jean-Paul Calderone wrote:
> You can browse it online: 
> <http://divmod.org/trac/browser/trunk/Epsilon/epsilon>.  It amounts to a 
> general utility library.

This lib totally depends on twisted, so IMHO it has to go in twisted SVN
repository. Otherwise why don't you move twisted.flow into divmod
repository?

> Well, I doubt we're ever going to optimize for that :)  If you want to 
> track development, great, but it's not the common case, and it's definitely 
> not how /I/ want to install software.  "apt get install ..." is much 
> simpler, and being able to install every single package I use that way 
> would make me quite happy.

Not everyone uses apt. For istance the only thing I upgrade in my server
is the python stack and the kernel and I use the core repositories for
that. Nothing else get updated (modulo the critical security updates). I
avoid to update anything else. I think it's the difference between
development and productivity. For development installing with rpm or apt
get may be fine.

But to me it's also a means of avoiding unnecessary steps, when this
thing is a twisted utility lib, it can go inside twisted repository just
fine, people will split the packages anyway, you already depend on
twisted.web so what, just add the dependency on twisted.epsilon, not
such a big deal, requiring a separate epslion package that infact
depends on twisted would be even confusing, so distro will make
twisted-epsilon not just epsilon.

> That said, I don't think you need to worry about an Epsilon dependency.  
> Epsilon and Nevow are in the same SVN repository :)  If you are currently 
> grabbing Nevow by checking out <http://divmod.org/svn/Divmod/trunk/Nevow>, 
> you can keep things just as simple and get Epsilon, too, by checking out 
> <http://divmod.org/svn/Divmod/trunk>.  Perhaps this will give you a few 
> other things you're not interested in (Nevow is by far the largest package 
> in the repository, though), but as you said, you have plenty of disk space.

That's better indeed.

>From an usability standpoint it makes not much difference given I
already track both twisted and divmod repository, but I believe
twisted.epsilon is more appropriate.

Another question is why you separate twisted and divmod repositories,
what's the point? Since you seem to own both of them, why don't you just
move all stuff in twistedmatrix.com into divmod repository? What's the
need of this separation? The website can stay, I mean the development
repositories.

My suggestion is a single SVN like this:

	Twisted/twisted/
	Twisted/twisted/epsilon
	Twisted/twisted/flow
	Zope/Interfaces (twisted readonly copy)
	Nevow/nevow
	Nevow/formless
	Nevow/forms
	Axiom/
	WhateverDivmodOpenSourceProject

If you don't mind mixing your productive "apps" with things like Nevow
and Epsilon that are in the same category as Twisted, why not to merge
Twisted into it as well. Perhaps if Twisted was there already, you have
done the natural choice of moving epsilon inside twisted.epsilon
already.

> [..] what hype?  What I remember is 

That's a mistake from my part, I owe you an apology, I shouldn't have
used that word, I guess I read too many webpages about atop at the time
when I was researching how to design the storage of my app ;).

Keep up the great work!

From mithrandi-twisted-web at mithrandi.za.net  Fri Jan 13 10:32:21 2006
From: mithrandi-twisted-web at mithrandi.za.net (Tristan Seligmann)
Date: Fri Jan 13 11:32:34 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060113135824.GX15897@opteron.random>
References: <20060113041530.GT15897@opteron.random>
	<20060113044312.26200.622342207.divmod.quotient.376@ohm>
	<20060113135824.GX15897@opteron.random>
Message-ID: <20060113173220.GA4169@mithrandi.za.net>

* Andrea Arcangeli <andrea@cpushare.com> [2006-01-13 14:58:24 +0100]:

> On Thu, Jan 12, 2006 at 11:43:12PM -0500, Jean-Paul Calderone wrote:
> > You can browse it online: 
> > <http://divmod.org/trac/browser/trunk/Epsilon/epsilon>.  It amounts to a 
> > general utility library.
> 
> This lib totally depends on twisted, so IMHO it has to go in twisted SVN
> repository. Otherwise why don't you move twisted.flow into divmod
> repository?

I don't follow this reasoning. Twisted totally depends on Python, should
Twisted go in the Python SVN repository? Should Python go in the Twisted
SVN repository?

> such a big deal, requiring a separate epslion package that infact
> depends on twisted would be even confusing, so distro will make
> twisted-epsilon not just epsilon.

No, the Debian package would be named python-epsilon, and have a
dependency on the python-twisted package.

It seems to me that separate projects should be, well, separate. It's
really not hard to check out code from different svn repositories; you
can even have svn do it automatically for you with svn:externals and so
on. What compelling benefits does squashing everything together in one
monolithic jumble have? It just seems more confusing to me.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060113/8fdd2295/attachment.pgp
From glyph at divmod.com  Fri Jan 13 11:35:47 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Jan 13 12:35:48 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060113135824.GX15897@opteron.random>
Message-ID: <20060113183547.26200.701627694.divmod.quotient.562@ohm>



On Fri, 13 Jan 2006 14:58:24 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>On Thu, Jan 12, 2006 at 11:43:12PM -0500, Jean-Paul Calderone wrote:

>> <http://divmod.org/trac/browser/trunk/Epsilon/epsilon>

>This lib totally depends on twisted, so IMHO it has to go in twisted SVN
>repository. Otherwise why don't you move twisted.flow into divmod
>repository?

If twisted.flow had been written by Divmod, for Divmod projects, that's where it would be.  Since it was written by a Twisted developer, before Divmod existed, it went into Twisted - but since it's not being used by any Twisted projects it is actually going to move out of Twisted into its own repository at some point.  (It definitely won't be in the next full-Twisted release.)

>> Well, I doubt we're ever going to optimize for that :)

>Not everyone uses apt.

Ah!  We have identified the real problem ;-)

>For istance the only thing I upgrade in my server
>is the python stack and the kernel and I use the core repositories for
>that. Nothing else get updated (modulo the critical security updates).

Strangely enough, that's how apt works, if you run a stable debian or ubuntu distribution.  They even have a phrase for it - a distribution is stable and released if it is "security supported", because it is only receiving security updates.

>But to me it's also a means of avoiding unnecessary steps, when this
>thing is a twisted utility lib, it can go inside twisted repository just
>fine, people will split the packages anyway, you already depend on
>twisted.web so what, just add the dependency on twisted.epsilon, not
>such a big deal, requiring a separate epslion package that infact
>depends on twisted would be even confusing, so distro will make
>twisted-epsilon not just epsilon.

Releasing Twisted projects is more work than releasing Divmod projects, because there is more infrastructure involved.  All code in Twisted must support Python 2.3.  Divmod sets the minimum requirement at 2.4, and will move to 2.5 sooner after it's released.  It has a smaller user-base, it is generally accepted to be less stable.

Epsilon specifically contains code to 'hot fix' certain critical issues in Twisted releases so we do not need to depend upon Twisted trunk, and can be more flexible about what's installed on a user's system.  Putting it into Twisted would have the effect of blocking all Divmod releases on Twisted releases, which is exactly not the point.

Some of epsilon will move into Twisted at some point in the future.  Such a move has a non-trivial cost in management overhead.

>> That said, I don't think you need to worry about an Epsilon dependency.

>That's better indeed.

Despite what I said above, it sounds like Combinator (the Divmod project which manages your Python path and automatically integrate our multi-project repository into one PYTHONPATH entry) and an SVN checkout would be the way you'd prefer to manage your deployments rather than actual releases.

That's cool, and in fact it is probably the best-supported option at this point - but it is an unusual preference.  Most people want to work with stable, released versions, with well-defined upgrade paths :).

>>From an usability standpoint it makes not much difference given I
>already track both twisted and divmod repository, but I believe
>twisted.epsilon is more appropriate.

It really doesn't make any sense to me why you think so.  At any rate, it's not going to move there, period.  A large portion of the reason Epsilon exists at all is that many of its modules *can't* move into Twisted (for various reasons listed above), and it is a lot easier to just check them into the Divmod repository and work on them there than to have a long, unrepsonsive discussion with the whole Twisted user-community about whether anyone needs us to not use feature X or version Y.

>Another question is why you separate twisted and divmod repositories,
>what's the point? Since you seem to own both of them, why don't you just
>move all stuff in twistedmatrix.com into divmod repository? What's the
>need of this separation? The website can stay, I mean the development
>repositories.

I am the CTO of Divmod (at least I think that's my title, I'm never quite sure).  I am also the leader of the Twisted project.  I try to keep those responsibilities as separated as I can, which is a big challenge.  You are the first person who has suggested that I should intentionally confuse them and subvert Twisted for Divmod's commercial gain.  ;-)

>My suggestion is a single SVN like this:
>
>	Twisted/twisted/
>	Twisted/twisted/epsilon
>	Twisted/twisted/flow
>	Zope/Interfaces (twisted readonly copy)
>	Nevow/nevow
>	Nevow/formless
>	Nevow/forms
>	Axiom/
>	WhateverDivmodOpenSourceProject

Twisted's SVN layout should change sometime soon to break out into more top-level directories like Divmod's, just to make packaging easier; however, what you suggest will almost certainly never happen.  The Divmod code just has a different set of requirements driving its development.

>Keep up the great work!

Thank you :).  You too!

From andrea at cpushare.com  Fri Jan 13 15:06:59 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 13 16:07:06 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060113183547.26200.701627694.divmod.quotient.562@ohm>
References: <20060113135824.GX15897@opteron.random>
	<20060113183547.26200.701627694.divmod.quotient.562@ohm>
Message-ID: <20060113220659.GB15897@opteron.random>

On Fri, Jan 13, 2006 at 01:35:47PM -0500, glyph@divmod.com wrote:
> Epsilon specifically contains code to 'hot fix' certain critical issues in 
> Twisted releases so we do not need to depend upon Twisted trunk, and can be 
> more flexible about what's installed on a user's system.  Putting it into 

This sounds wrong to me, instead of requiring the user to upgrade
twisted, you ask the user to use buggy twisted plus epsilon?

> responsibilities as separated as I can, which is a big challenge.  You are 
> the first person who has suggested that I should intentionally confuse them 
> and subvert Twisted for Divmod's commercial gain.  ;-)

I actually don't care about who gains what, I care about the code and
easy of checkout/use. svn://svn.twistedmatrix.com vs svn://divmod.org,
the former looked the .com one without knowing the details.

> however, what you suggest will almost certainly never happen.  The Divmod 
> code just has a different set of requirements driving its development.

So that's fine with me. I only need twisted and nevow and I don't
appreciate unnecessary dependencies, especially if they're related in
any way with missing twisted bugfixes ;)

From mary-twisted at puzzling.org  Fri Jan 13 17:24:34 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri Jan 13 18:24:43 2006
Subject: [Twisted-web] Documentation virtual sprint, TODAY, Sat 14th January
Message-ID: <20060114002434.GJ6454@sourdust.home.puzzling.org>

Hi all,

Today (well, soon for non-Australians) is of course the day of the
documentation virtual sprint.

What are we doing? We're reviewing the existing Twisted documentation
from both user and expert points of view to highlight obvious areas of
improvement.

How can you help? Read Twisted documentation and make suggestions for
improvement. We need reviews from both Twisted users (the intended
audience of the documentation) and Twisted experts (who are the people
who, if the docs aren't good, have to fill in the gaps in their spare
time in email and IRC).

The sprint participants will be on IRC on the irc.freenode.net network.
I've created a dedicated sprint channel #twisted-sprint but I expect
there will be discussion also in #twisted. (I am less likely to be
following it closely.) Anyone wanting my attention personally should ask
for me in #twisted-sprint (I am user "hypatia") and keep in mind that I
keep Australian east coast daylight hours ;)

The reviews will be coordinated on a wiki: if you need assistance
working out how to create and edit pages on the wiki, please ask on IRC.

For more details, see instructions at
http://twistedmatrix.com/trac/register/wiki/DocumentationAnalysis and
http://twistedmatrix.com/trac/register/wiki/DocumentationAnalysis/DocumentList
to get a good idea of what you need to do: for anything missing ask me
on IRC.

As I wrote yesterday I will be online between 0400 - 0700 UTC if there
are any people in Australian timezones or US nightowls wanting to do
stuff. I'll be back around 2100 UTC (that's late Saturday afternoon in
the US) for some more work. Others will be around at other times.

-Mary

-- 
<radix> uh oh.
<radix> 'destroy here' isn't a good idea. :)

From mary-twisted at puzzling.org  Fri Jan 13 17:42:52 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri Jan 13 18:42:58 2006
Subject: [Twisted-web] Re: Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060114002434.GJ6454@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
Message-ID: <20060114004252.GL6454@sourdust.home.puzzling.org>

On Sat, Jan 14, 2006, Mary Gardiner wrote:
> The sprint participants will be on IRC on the irc.freenode.net network.
> I've created a dedicated sprint channel #twisted-sprint but I expect
> there will be discussion also in #twisted. (I am less likely to be
> following it closely.) Anyone wanting my attention personally should ask
> for me in #twisted-sprint (I am user "hypatia") and keep in mind that I
> keep Australian east coast daylight hours ;)

Oh, and if anyone wants to participate in the sprint and won't, for
whatever reason, be on IRC, you're welcome to. Just follow the
directions at the link I gave and ask sprint questions on whichever of
twisted-python@twistedmatrix.com or twisted-web@twistedmatrix.com seems
appropriate (don't cross-post).

-Mary

From andrea at cpushare.com  Sat Jan 14 05:44:45 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 14 06:44:56 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060113173220.GA4169@mithrandi.za.net>
References: <20060113041530.GT15897@opteron.random>
	<20060113044312.26200.622342207.divmod.quotient.376@ohm>
	<20060113135824.GX15897@opteron.random>
	<20060113173220.GA4169@mithrandi.za.net>
Message-ID: <20060114124445.GD15897@opteron.random>

On Fri, Jan 13, 2006 at 07:32:21PM +0200, Tristan Seligmann wrote:
> I don't follow this reasoning. Twisted totally depends on Python, should
> Twisted go in the Python SVN repository? Should Python go in the Twisted
> SVN repository?

It's only a matter of size.

If it wasn't because of the checkout size (both for space it takes, and
network bandwidth it requires), it could as well be all in a single SVN.
But those are significant sized project so there is different people
working on them, so splitting make administration a bit simpler.

But this is not true for epsilon, epsilon a is a few bytes, nevow is 14M
Twisted is 51M. Furthermore if epsilon contains twisted fixes needed by
divmod to become productive with old twisted version there's no chance
that the fine Nevow can depend on such a dirty package that workaround
twisted bugs.

I have one twisted-workaround lib in my app, but the whole point of this
lib is __not__ to require people to run apt get. If they require to run
apt get to install epsilon to workaround twisted bugs, then they should
have run apt get to upgrade twisted instead!!!

The whole point of a workaround-lib that fixes bugs in older twisted
releases is to avoid running apt get at all and to run the app, so to
_remove_ dependencies, not to add new ones. The only possible reason one
can want to workaround twisted bugs is to remove dependencies, there's
no chance one would ever add a epsilon dependency to install with apt to
workaround a twisted bug. In suse we even use binary diff deltas to
optimize the upgrade of big packages, just replace epsilon with a good
package manager that supports diff deltas (dunno if apt supports that).

Furthremore Nevow is a fine open source project, it's not Divmod
product. If Divmod want to customize Nevow to run on older Twisted
release they have to _fork_ it, the same way the distro fork the kernel
to customize it for their customers (i.e. freeze and stabilize 2.6 for
months, backport stric fixes etc..). You can't screw the official nevow
repository at your commercial gain. That would be something I'm against,
because I only care about the code, so if code becomes worse in any way
due divmod commercial constraints or schedule, that concerns me a lot.
I don't care where those packages are located.

However I'd prefer Twisted and Nevow to be in the same repository, be it
divmod.org or twistedmatrix.com. Apparently the .com one is the
no-profit community one, and the .org one is the commercial one, weird.
So apparently the .com one is more appropriate for nevow as well.

Then you can fork Nevow from twistedmatrix.com into divmod.org and
customize it with epsilon (or you can create a branch called divmod into
the twistedmatrix.com to add the epsilon dependency to fix bugs).

You all have checkin rights in both, so I don't see why should you care
too. If you want more stuff into divmod.org to get the credit of its
development that's fine with me, merge Twisted into divmod.org too then,
if that can help writing better code and to remove any interest in
creating divmod packages like epsilon that workaround twisted bugs.

I'm very serious when I say this, it's a matter of perception, you can't
base Nevow on a tiny package that totally depends on twisted and that
even includes twisted workarounds. Perhaps if that was a _stable_ branch
of nevow, that would be remotely acceptable. But like every open source
project out there, the _trunk_ must be aligned for the long term, and
definitely not for the short term gain of some commercial entity.

Many mistakes happened already, the obsolescence of too many apis is the
proof. I understand that one always want to learn from its own mistakes
and that you won't believe others until you scratched you head on it,
but you may as well decide to trust me and not to add silly dependencies.

The important thing is not yast2 -i or apt get that will get everything
right automaticaly, the important thing is that "python setup.py" will
just work. Requiring a "python setup.py install" of a tiny package is
silly.

Note that there is people out there that must be in violent agreement
with me. Please try to run setup.py install of zope3, does it ask for
anything? No, it just runs. Then go in src/twisted. Hey surprise,
there's twisted in there. That twisted copy takes 28M on my harddisk,
not 700K like zope.interface. To avoid a dependency they waste 28M of
HD, and yet you refuse to copy zope.interface into twisted repository
and you require an external checkout or rpm install (and I believe you're
losing users because of that, again it's a matter of perception and
solidity and self-containment of the project). Not to tell about epsilon
that is just a few bytes.

Epsilon repository should be deleted, the good parts of it must be
merged into twisted repository as twisted.epsilon or twisted.python or
whatever twisted.*, and the bug workarounds must be dropped. This is
about the community development, I don't care if you fork one of those
packages for your needs, but you can only mess in the divmod-fork, you're not
allowed to screwup the trunk developed by the community. In the
community developed one the fixes must go into mainline twisted, not in
a epsilon package!

This as long as you think a community really exists around twisted and
nevow, and that you're not the only users of twisted and nevow. Your
behaviour would be perfectly ok if Divmod was the only nevow user.

Note that I'm overall very happy with the development happening, sadly
when I have to send emails is because I think something is going wrong,
time is limited and when things goes well one doesn't need to send
emails. But as much as I like the development, sometime I see some
frightening nosenses too (new formless api wasted effort, atop wasted
effort, many twisted api going obsolete) and this epsilon thing is one
of those nosense. So this time I'm trying to help before you scratch
your head into it by yourself and before you risk to scare people away
from the project. And again, there is people who understand things that
lives very close to you, you just have to look at the zope folks merging
twisted in to avoid external checkouts to understand this, how can
explain the fact they merged twisted and they waste 28M of disk and
bandwidth when you refuse to merge a few bytes into twisted just becasue
it's not a divmod.org?

I cannot care less who gains what and what url I have to checkout, I
only care about code and there's no chance I can agree with an epsilon
dependency if it's the nevow trunk you're talking about, you're free to
add it in a nevow-divmod trunk, that's perfect!

So please trust me on this. Thanks!

From andrea at cpushare.com  Sat Jan 14 05:57:56 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 14 06:58:03 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060113183547.26200.701627694.divmod.quotient.562@ohm>
References: <20060113135824.GX15897@opteron.random>
	<20060113183547.26200.701627694.divmod.quotient.562@ohm>
Message-ID: <20060114125756.GE15897@opteron.random>

On Fri, Jan 13, 2006 at 01:35:47PM -0500, glyph@divmod.com wrote:
> 
> 
> On Fri, 13 Jan 2006 14:58:24 +0100, Andrea Arcangeli <andrea@cpushare.com> 
> wrote:
> >On Thu, Jan 12, 2006 at 11:43:12PM -0500, Jean-Paul Calderone wrote:
> 
> >><http://divmod.org/trac/browser/trunk/Epsilon/epsilon>
> 
> >This lib totally depends on twisted, so IMHO it has to go in twisted SVN
> >repository. Otherwise why don't you move twisted.flow into divmod
> >repository?
> 
> If twisted.flow had been written by Divmod, for Divmod projects, that's 
> where it would be.  Since it was written by a Twisted developer, before 

Note that this is a total nosense and it's probably the source of the
mess that is happening. I didn't quote it last night (I wanted to sleep
on it first ;), but this seems the source of the problems, and those
problems now extended to the point of infecting the nevow trunk.

> I am the CTO of Divmod (at least I think that's my title, I'm never
> quite  
> sure).  I am also the leader of the Twisted project.  I try to keep
> those
> responsibilities as separated as I can, which is a big challenge.  You
> are 
> the first person who has suggested that I should intentionally confuse
> them
> and subvert Twisted for Divmod's commercial gain.  ;-)

Here you say that you can't move twisted into divmod.org, but then you
say that whatever thing was written by divmod - like if it were divmod
creating twisted.flow -  then twisted.flow would go into divmod.org
instead of twistedmatrix.com.

So what, let's assume everybody did this with every project out there,
can you imagine the mess.

Think if IBM were to keep all their kernel drivers into ibm.com instead
of sending them upstream...

I tell you this beahaviour of yours above is a recipe for disaster, as a
CTO you should know this without me having to tell you. So please
realize the huge mistake and fix this. A successful product doesn't only
require good code, it also requires a perception of solidity, and a
dependency on a few bytes package won't give it. Note that many totally
dislike the mess of dependencies of projects like gnome too.

When you touch nevow trunk you must do it with twistedmatrix open source
mind, not with divmod mind.

The fix is to add this simple rule (that I thought was obvious) to your
divmod guidelines: the decision of where to put what, must not be in
function of who wrote it. It's a one line rule, it collides with your
claim at the top and I understand this sometime can go against your
commecial interest, but I think you've a bigger interest to defend that
is to leave twisted/nevow a community effort.

PS. Discussion@cpushare.com, of@cpushare.com, twisted.web@cpushare.com,
    Nevow@cpushare.com emails don't exist, I guess your mailer is
    getting confused, never mind, this is just for your info ;).

From andrea at cpushare.com  Sat Jan 14 08:57:24 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 14 09:57:31 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060114124445.GD15897@opteron.random>
References: <20060113041530.GT15897@opteron.random>
	<20060113044312.26200.622342207.divmod.quotient.376@ohm>
	<20060113135824.GX15897@opteron.random>
	<20060113173220.GA4169@mithrandi.za.net>
	<20060114124445.GD15897@opteron.random>
Message-ID: <20060114155724.GK15897@opteron.random>

On Sat, Jan 14, 2006 at 01:44:45PM +0100, Andrea Arcangeli wrote:
> but you may as well decide to trust me and not to add silly dependencies.

btw, just to show that I'm not smoking, read the top of this page:

	http://www.rubyonrails.org/down

"Get ruby on rails in no time Rails is low on dependencies"

Yes, this is great thing: _low_on_dependencies_. They know dependencies
are evil, you should learn this at the very least.

Note that currently twisted is very good, there's nearly no dependency
except for pyopenssl which is of course a must-have, so it's fine. nevow
depends on twisted which is fine too. zopeinterfaces is the only
annoyance, I don't want more than zopeinterfaces as annoyances.

I won't allow divmod.com to derail the twisted/nevow train ;).

From andrew-twisted at puzzling.org  Sat Jan 14 16:37:32 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat Jan 14 17:36:54 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060114155724.GK15897@opteron.random>
References: <20060113041530.GT15897@opteron.random>
	<20060113044312.26200.622342207.divmod.quotient.376@ohm>
	<20060113135824.GX15897@opteron.random>
	<20060113173220.GA4169@mithrandi.za.net>
	<20060114124445.GD15897@opteron.random>
	<20060114155724.GK15897@opteron.random>
Message-ID: <20060114233732.GB16034@home.puzzling.org>

On Sat, Jan 14, 2006 at 04:57:24PM +0100, Andrea Arcangeli wrote:
[...]
> Note that currently twisted is very good, there's nearly no dependency
> except for pyopenssl which is of course a must-have, so it's fine. nevow
> depends on twisted which is fine too. zopeinterfaces is the only
> annoyance, I don't want more than zopeinterfaces as annoyances.

Believe me, zope.interface is far less of an annoyance than the NIH mess we had
before it.  There are deb and rpm packages for it for most distros, so I really
don't see this as a big issue.

-Andrew.


From paul-lists at perforge.com  Sat Jan 14 16:53:42 2006
From: paul-lists at perforge.com (Paul G)
Date: Sat Jan 14 18:47:21 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side
	(fragment)nesting, and convenience descriptor generator
References: <20060113041530.GT15897@opteron.random><20060113044312.26200.622342207.divmod.quotient.376@ohm><20060113135824.GX15897@opteron.random><20060113173220.GA4169@mithrandi.za.net><20060114124445.GD15897@opteron.random><20060114155724.GK15897@opteron.random>
	<20060114233732.GB16034@home.puzzling.org>
Message-ID: <0fdb01c6196d$3ac386a0$6402a8c0@dcore>


----- Original Message ----- 
From: "Andrew Bennetts" <andrew-twisted@puzzling.org>
To: "Twisted Web World" <twisted-web@twistedmatrix.com>
Sent: Saturday, January 14, 2006 6:37 PM
Subject: Re: [Twisted-web] Re: [Nevow-commits] r3904 - server-side 
(fragment)nesting, and convenience descriptor generator


> On Sat, Jan 14, 2006 at 04:57:24PM +0100, Andrea Arcangeli wrote:
> [...]
>> Note that currently twisted is very good, there's nearly no dependency
>> except for pyopenssl which is of course a must-have, so it's fine. nevow
>> depends on twisted which is fine too. zopeinterfaces is the only
>> annoyance, I don't want more than zopeinterfaces as annoyances.
>
> Believe me, zope.interface is far less of an annoyance than the NIH mess 
> we had
> before it.  There are deb and rpm packages for it for most distros, so I 
> really
> don't see this as a big issue.

i'll second this - i've never had a problem installing z.i and have never 
talked to anyone who considered it to be an issue worth talking about. with 
that said, i also don't see any reason (unless there are licensing issues) 
with including a certain z.i snapshot with twisted core releases, since it 
would have presumably been certified with them. wait, the -sumo release 
already does that.

;)

-p 


From golux at comcast.net  Sat Jan 14 18:00:17 2006
From: golux at comcast.net (Stephen Waterbury)
Date: Sat Jan 14 19:00:22 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060114233732.GB16034@home.puzzling.org>
References: <20060113041530.GT15897@opteron.random>	<20060113044312.26200.622342207.divmod.quotient.376@ohm>	<20060113135824.GX15897@opteron.random>	<20060113173220.GA4169@mithrandi.za.net>	<20060114124445.GD15897@opteron.random>	<20060114155724.GK15897@opteron.random>
	<20060114233732.GB16034@home.puzzling.org>
Message-ID: <43C99EA1.8080008@comcast.net>

Andrew Bennetts wrote:
> On Sat, Jan 14, 2006 at 04:57:24PM +0100, Andrea Arcangeli wrote:
> [...]
> 
>>Note that currently twisted is very good, there's nearly no dependency
>>except for pyopenssl which is of course a must-have, so it's fine. nevow
>>depends on twisted which is fine too. zopeinterfaces is the only
>>annoyance, I don't want more than zopeinterfaces as annoyances.
> 
> Believe me, zope.interface is far less of an annoyance than the NIH mess we had
> before it.  There are deb and rpm packages for it for most distros, so I really
> don't see this as a big issue.

I strongly agree!  I know this is a non-issue for most people,
but just to reinforce the point:  zope.interface had one of the first
implementations of interfaces, represents a lot of good work, is
well supported, and is receptive to supporting twisted requirements
... and twisted developers already have more than enough on their
plates without having to maintain yet another component architecture
(beyond the extensions of zope.interface that are currently maintained
by twisted).

All those reasons more than justify the "annoyance", IMO.

Steve

From glyph at divmod.com  Sat Jan 14 20:13:56 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Sat Jan 14 21:13:58 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
In-Reply-To: <20060114124445.GD15897@opteron.random>
Message-ID: <20060115031356.26200.1113602544.divmod.quotient.900@ohm>



On Sat, 14 Jan 2006 13:44:45 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>On Fri, Jan 13, 2006 at 07:32:21PM +0200, Tristan Seligmann wrote:
>> I don't follow this reasoning. Twisted totally depends on Python, should
>> Twisted go in the Python SVN repository? Should Python go in the Twisted
>> SVN repository?
>
>It's only a matter of size.

No... it isn't?

Different open source projects have different requirements, and different audiences.  They also have different release cycles and different expectations of maturity.  Finally they have different release managers and different pressures which affect releases.

>If it wasn't because of the checkout size (both for space it takes, and
>network bandwidth it requires), it could as well be all in a single SVN.
>But those are significant sized project so there is different people
>working on them, so splitting make administration a bit simpler.

Exactly the same things are true of Divmod and Twisted; Divmod, like Twisted, contains several projects (Nevow Axiom Epsilon ...), it's just that Divmod started out with the goal of having them well-separated, whereas Twisted didn't realize that until many years into its life.

>But this is not true for epsilon, epsilon a is a few bytes, nevow is 14M
>Twisted is 51M. Furthermore if epsilon contains twisted fixes needed by
>divmod to become productive with old twisted version there's no chance
>that the fine Nevow can depend on such a dirty package that workaround
>twisted bugs.

Epsilon only contains bug-fixes that have already been contributed to Twisted.  It only installs them if a package specifically requires a fix.  If Nevow wants to require unreleased fixes to Twisted, Epsilon would be one way to go about it; rather than requiring users to upgrade to unreleased versions of Twisted so that we can do a release of Nevow, Nevow's developers can simply drop in the appropriate Twisted fix, and then use it.  The fix will only be enabled when it is requested, so it will not conflict with other libraries which depend on the buggy behavior unless they are being used by the same process.

If such a thing were necessary, Nevow could quite easily depend upon it.  That probably will not be a requirement until Nevow is mature enough to have a 1.0 release, however.

One way to avoid this would be for you to volunteer to be the release manager of Twisted and be very responsive to release requests.  If arbitrary Divmod project releases could easily depend upon Twisted releases being made very quickly, a work-around package would be less important.

>I have one twisted-workaround lib in my app, but the whole point of this
>lib is __not__ to require people to run apt get. If they require to run
>apt get to install epsilon to workaround twisted bugs, then they should
>have run apt get to upgrade twisted instead!!!

That requires that every version of Epsilon (and Nevow, and Axiom) have a paired release of Twisted.

The release manager for Twisted (Christopher Armstrong) knows the Divmod team well, and vice versa.  He certainly wouldn't mind doing us a favor every so often.

However, when we need to publish a release of Divmod, perhaps for some internal goal, perhaps because one of our contracting clients requires it, we don't employ Chris.  We can't call him up and say, "do a release now, becuase it is your job".  Maybe Twisted can't release the appropriate subproject for some reason - a release goal hasn't been met, several buildslaves have been taken offline for days' worth of maintenance - whatever.

>The whole point of a workaround-lib that fixes bugs in older twisted
>releases is to avoid running apt get at all and to run the app, so to
>_remove_ dependencies, not to add new ones. The only possible reason one
>can want to workaround twisted bugs is to remove dependencies, there's
>no chance one would ever add a epsilon dependency to install with apt to
>workaround a twisted bug. In suse we even use binary diff deltas to
>optimize the upgrade of big packages, just replace epsilon with a good
>package manager that supports diff deltas (dunno if apt supports that).

Before we get to apt or yast or whatever, we have to produce upstream releases.  Producing an upstream release of Twisted is substantially more work than producing an upstream release of a Divmod product, even Nevow.  Producing a release of Epsilon requires at most an hour or two of work.

>Furthremore Nevow is a fine open source project, it's not Divmod
>product. If Divmod want to customize Nevow to run on older Twisted
>release they have to _fork_ it, the same way the distro fork the kernel
>to customize it for their customers (i.e. freeze and stabilize 2.6 for
>months, backport stric fixes etc..). You can't screw the official nevow
>repository at your commercial gain. That would be something I'm against,
>because I only care about the code, so if code becomes worse in any way
>due divmod commercial constraints or schedule, that concerns me a lot.
>I don't care where those packages are located.

Hahahahahahahaha.

You may be confused by the fact that Nevow discussion takes place on this list, because it is a popular Twisted-capable web framework.  However:  go to nevow.com.  Where does that take you?  What is the *first word* on the page that you see?  What is the SVN URL for Nevow?  Are you detecting a theme yet?

I really appreciate the open-source contributions from the Nevow community.  They have been substantial, and it certainly wouldn't be the product it is today if we hadn't had them.  However, its full name is "*Divmod* Nevow".  Divmod has paid for every stage of its development, and written the vast majority of its code (>80%).  Its primary author, Donovan Preston, stopped working on it when he left Divmod, and maintenance has been taken over by JP Calderone, who currently works -- surprise, surprise -- at Divmod.

>However I'd prefer Twisted and Nevow to be in the same repository, be it
>divmod.org or twistedmatrix.com. Apparently the .com one is the
>no-profit community one, and the .org one is the commercial one, weird.

Yeah, the story behind that is kind of weird.  twistedmatrix.com is an older domain, that I bought when I was 16 or so, and *everybody* was registering .com names.  Domain squatters have long since purchased .org and .net.  When Divmod was registered, we got the .org for our open-source works and the .com for our commercial service.

>So apparently the .com one is more appropriate for nevow as well.

No, it isn't, because Divmod develops Nevow, and the Twisted team develops Twisted.

>Then you can fork Nevow from twistedmatrix.com into divmod.org and
>customize it with epsilon (or you can create a branch called divmod into
>the twistedmatrix.com to add the epsilon dependency to fix bugs).

None of this fixes the release-management problem I've described repeatedly, which doesn't seem to concern you at all.  I understand that you don't use a package manager, or even downloaded tarballs of released version of projects, but that is an extreme minority position.  In many companies where it is allowed to use open source at all, it is *strictly* disallowed to use un-released and/or unpackaged versions on production machines.

>You all have checkin rights in both, so I don't see why should you care
>too. If you want more stuff into divmod.org to get the credit of its
>development that's fine with me, merge Twisted into divmod.org too then,
>if that can help writing better code and to remove any interest in
>creating divmod packages like epsilon that workaround twisted bugs.

Not true.  Moe, for example, has checkin rights to Divmod and not Twisted.  There are plenty of people who have commit access to Twisted who would not even want to work on any Divmod projects.  I certainly don't think that all Twisted committers should have automatic commit access to Divmod, and I definitely don't think that Twisted committers would be happy if a job at Divmod automatically resulted in getting Twisted commit with no feedback from the rest of the community.

>I'm very serious when I say this, it's a matter of perception, you can't
>base Nevow on a tiny package that totally depends on twisted and that
>even includes twisted workarounds. Perhaps if that was a _stable_ branch
>of nevow, that would be remotely acceptable. But like every open source
>project out there, the _trunk_ must be aligned for the long term, and
>definitely not for the short term gain of some commercial entity.

It's worth noting, by the way, that we *did* honor the community's request to elide that dependency when it wasn't providing any significant benefit, and Nevow doesn't depend on Epsilon yet.  If and when it does, there will be a good reason.

>Many mistakes happened already, the obsolescence of too many apis is the
>proof. I understand that one always want to learn from its own mistakes
>and that you won't believe others until you scratched you head on it,
>but you may as well decide to trust me and not to add silly dependencies.

This argument boils down to "you have made mistakes (unrelated to what we are discussing) in the past, so you should not take any actions which may have consequences, because they too might be mistakes".  If I listened to this, I would never do anything, I would be afraid to even get out of bed in the morning.

>The important thing is not yast2 -i or apt get that will get everything
>right automaticaly, the important thing is that "python setup.py" will
>just work. Requiring a "python setup.py install" of a tiny package is
>silly.

So - you want the convenience of a package manager (installations that work instantly and with no manual intervention to install dependencies) but you also want to be on the absolute bleeding edge of SVN development?

Sorry, but you can't have it both ways.  Packaging systems are a lot of work.  Dependencies are hard to manage.  Communication between projects is hard - Divmod and Twisted are managed by very similar and very friendly groups of people (which overlap significantly) and even *that* communication is hard.

If you want this kind of ease, help us produce eggs, or debs, or improve our installation instructions.  I thought this thread began as a helpful (albeit misguided) suggestion, but it is quickly devolving into a simple whine: "why doesn't divmod do everything the way I want?"

Let's say you did convince everyone involved that this was a really good idea, and the various repositories should be merged.  It is still probably several weeks of work to do this.  What about bugtrackers?  What about repository performance (doubling the size of the repository in one commit is not going to make SVN happy).  What about merge history on outstanding branches?

>Note that there is people out there that must be in violent agreement
>with me. Please try to run setup.py install of zope3, does it ask for
>anything? No, it just runs. Then go in src/twisted. Hey surprise,
>there's twisted in there. That twisted copy takes 28M on my harddisk,
>not 700K like zope.interface. To avoid a dependency they waste 28M of
>HD, and yet you refuse to copy zope.interface into twisted repository
>and you require an external checkout or rpm install (and I believe you're
>losing users because of that, again it's a matter of perception and
>solidity and self-containment of the project). Not to tell about epsilon
>that is just a few bytes.

Twisted already includes a zope.interface tarball in sumo releases.  The expectation is that if you are working from the repository, you should not be doing setup.py install anyway - that pollutes your installed directory with an unspecified development version.

Your main point, that people are in "violent agreement" with, is that obstacles to installation should be removed.  The Divmod team agrees with that too, which is why Epsilon and Nevow are *already* in the same repository, and in fact, if you use Combinator to set them up, they will both be in you sys.path automatically.

In the event that we did make Nevow depend upon Epsilon, it would take you less time to contribute all the appropriate patches to bundle a release of Epsilon inside Nevow, or copy it during setup.py install from an SVN export, than it has to write all the messages in this thread.  I suggest you conserve your energy and do that.

>Epsilon repository should be deleted, the good parts of it must be
>merged into twisted repository as twisted.epsilon or twisted.python or
>whatever twisted.*, and the bug workarounds must be dropped. This is
>about the community development, I don't care if you fork one of those
>packages for your needs, but you can only mess in the divmod-fork, you're not
>allowed to screwup the trunk developed by the community. In the
>community developed one the fixes must go into mainline twisted, not in
>a epsilon package!

1. Epsilon isn't a separate repository, it's a package within Divmod trunk.

2. "You're not allowed to screwup the trunk developed by the community?"  Pardon me, but we are an integral part of the community.  'svn blame' does not seem to think that *you* are.  This really had me laughing.  "You are not allowed to commit things I do not like to your projects, Divmod!  Go to your room!"

3.  The Twisted fixes, which Divmod developers we put versions into Epsilon *to make installing Divmod projects easier*, which is something that you want.  Do you even have any idea what these fixes are?  Have you read any of the code you are claiming to be such an expert on, that we should "trust you" about?

>This as long as you think a community really exists around twisted and
>nevow, and that you're not the only users of twisted and nevow. Your
>behaviour would be perfectly ok if Divmod was the only nevow user.

We do not always see eye-to-eye with the community on what is best for Nevow, but other productive contributors (who do not have anything to do with Divmod) have already disagreed with you publicly.  They do not seem to have a problem with our "behavior".

>Note that I'm overall very happy with the development happening, sadly
>when I have to send emails is because I think something is going wrong,
>time is limited and when things goes well one doesn't need to send
>emails.

Thank you kindly.

>But as much as I like the development, sometime I see some
>frightening nosenses too (new formless api wasted effort, atop wasted
>effort, many twisted api going obsolete) and this epsilon thing is one
>of those nosense. So this time I'm trying to help before you scratch
>your head into it by yourself and before you risk to scare people away
>from the project. And again, there is people who understand things that
>lives very close to you, you just have to look at the zope folks merging
>twisted in to avoid external checkouts to understand this, how can
>explain the fact they merged twisted and they waste 28M of disk and
>bandwidth when you refuse to merge a few bytes into twisted just becasue
>it's not a divmod.org?

Since you keep repeating yourself, I will keep repeating myself to make sure you hear the answer: Twisted fixes are merged to Twisted before they are replicaetd in Epsilon.  There is only one such fix so far.  Read epsilon.hotfix for details.  If Epsilon discovers that it is running on a Twisted version with the appropriate fix already made, it does nothing.  The hotfix facility is just a way for bits of Divmod code to say "I really need this particular bugfix/feature in library XXX, called YYY, but you do not need to upgrade that library to SVN"

>I cannot care less who gains what and what url I have to checkout, I
>only care about code and there's no chance I can agree with an epsilon
>dependency if it's the nevow trunk you're talking about, you're free to
>add it in a nevow-divmod trunk, that's perfect!

>So please trust me on this. Thanks!

Andrea, I have a lot of respect for you, but in this case you quite literally do not know what you are talking about.  You also haven't expressed yourself very clearly: what is it you want exactly?  *Why* is an Epsilon dependency a problem?  The reasons you have given -- it's harder to install, I can't run it from an SVN checkout, I have to use apt, Divmod is not giving changes back to Twisted -- are all wrong.  Sometimes they are confusing and wrong, sometimes they are insulting and wrong, but there are very few actual facts you have offered.  Your suggestions for a remedy are also extremely labor-intensive on the part of the Twisted community, the Nevow community, and Divmod.  While we would not implement these changes either way, it would have been a nice show of good faith for you to offer to do some of the work required yourself.

What started this discussion was MG objecting to an unnecessary dependency.  He was correct: every dependency has a cost, and therefore there must be a benefit to establishing the dependency that exceeds that cost.  The change being discussed was basically zero benefit, so even if the cost was tiny it should not be introduced.  I understood this criticism, I agreed with it, and I corrected the mistake.  What you're saying, though, is that adding a dependency on a project which is small on disk is the WORST thing that ANY project can do EVER.  That is simply not true.  You are objecting to a hypothetical dependency which is being introduced for some hypothetical reason, which since it is hypothetical, could be totally awesome.

I know you also think the zope.interface dependency was a bad idea - again, you find yourself in a tiny minority.  Everyone who knew the old Twisted components system seems to agree that the Zope people did a *much* better job and it is a great thing that we are using their components system.  Everyone who knew Twisted pre-interfaces seems to agree that introducing them (even the crappy, pre-zope interfaces) simplified a lot of things and improved the documentation.

From glyph at divmod.com  Sat Jan 14 20:45:21 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Sat Jan 14 21:45:23 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
In-Reply-To: <20060114125756.GE15897@opteron.random>
Message-ID: <20060115034521.26200.196850746.divmod.quotient.906@ohm>



On Sat, 14 Jan 2006 13:57:56 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>On Fri, Jan 13, 2006 at 01:35:47PM -0500, glyph@divmod.com wrote:

>> If twisted.flow had been written by Divmod, for Divmod projects, that's
>> where it would be.  Since it was written by a Twisted developer, before

>Note that this is a total nosense and it's probably the source of the
>mess that is happening. I didn't quote it last night (I wanted to sleep
>on it first ;), but this seems the source of the problems, and those
>problems now extended to the point of infecting the nevow trunk.

What problems?  Nobody sees any problems but you, and the only manifestation of said problems is that you and I are generating a lot of noise on this mailing list.  :)

>Here you say that you can't move twisted into divmod.org, but then you
>say that whatever thing was written by divmod - like if it were divmod
>creating twisted.flow -  then twisted.flow would go into divmod.org
>instead of twistedmatrix.com.

And that would have been correct.  Nothing in Twisted uses twisted.flow, so it is a good thing that it is removed :-).

>So what, let's assume everybody did this with every project out there,
>can you imagine the mess.

That *is* what everybody does with every project out there.  You don't have to imagine the mess, you can *visit* the mess at http://sourceforge.net/

You could argue that sometimes people start new projects when they should contribute to an existing one, but there is another side to that coin: all the people starting separate projects reduce the management overhead of the existing ones.  Also, this is not the case with Divmod - as just one example, JP Calderone shoulders a huge amount of Twisted's maintenance and he works with Divmod.  If we had any resources to spare, we would all do more of this during work time :).

>Think if IBM were to keep all their kernel drivers into ibm.com instead
>of sending them upstream...

The kernel is the exception, not the rule, and there are probably a lot of ways the technology could improved (either at the version-control layer or within the kernel itself) to allow the groups which contributed various drivers to maintain them separately.  This is the rule in the open source world, since, for example, Gaim is not part of GNOME.  Even so, in kernel land, many projects *are* maintained separately, and only periodically merged.   Some examples off the top of my head (and I am certainly no kernel expert):

http://linuxwacom.sourceforge.net/ http://www.netfilter.org/ http://secure.netroedge.com/~lm78/ http://www.bluez.org/

You could think of Linux in this way as functioning more as a distribution than as a project of its own.  In that sense, if Twisted and Nevow could be distributed in up-to-date versions by Debian, IBM:Drivers:Linux:::Divmod:Nevow:Debian

>I tell you this beahaviour of yours above is a recipe for disaster, as a
>CTO you should know this without me having to tell you. So please
>realize the huge mistake and fix this. A successful product doesn't only
>require good code, it also requires a perception of solidity, and a
>dependency on a few bytes package won't give it. Note that many totally
>dislike the mess of dependencies of projects like gnome too.

As a CTO I should also know that contributing anything to the open source community is a huge waste of time.  Luckily I do not believe what people tell me unless they have good reasons :).

The perception of solidity that you want could more easily be provided by better test coverage and removing certain fragile pieces of the API (such as WovenContext, which we have been talking about removing for months) than by obscure future guarantees of not depending on certain code.  Want to write some tests instead of some flames? :)

>When you touch nevow trunk you must do it with twistedmatrix open source
>mind, not with divmod mind.

"When you post about Divmod projects, you must do it with Divmod mind, not with CPUShare mind."

Please stop telling me what to do because I "must" or I am "allowed".  If I had the feeling that you were saying this with the backing of a large community, I might be more inclined to do something about it, but I would still be unhappy with your tone.  Considering that you are a lone voice though, you are going to have to give me convincing facts and specific suggestions, or I will happily ignore you.

Frankly, I don't even understand why *you* think this is such a serious problem.  What's under discussion here is how you think that *one day possibly* introducing a dependency on Epsilon for a *good reason* is a huge problem that we all need to think about fixing right now.

>The fix is to add this simple rule (that I thought was obvious) to your
>divmod guidelines: the decision of where to put what, must not be in
>function of who wrote it. It's a one line rule, it collides with your
>claim at the top and I understand this sometime can go against your

Not only do I not think what you are saying is obvious, it is so obviously wrong that it strains my imagination to even consider how you might think so.  Who writes things is a very important consideration, possibly even the only real reason, for where they go.  There are people who contribute to more than one place, and the Divmod team does check quite a bit of code into Twisted, but there are rarely projects that accept from more than one source, almost by definition.

FreeBSD developers, for example, do not put much stuff into the Linux kernel.  I have not received any patches from Django developers for Nevow, even though they certainly have expertise that could be applied to it - neither have I written any patches for SQLObject, despite the fact that I know some things about ORMs in Python.  The first version of Twisted could easily have gone into Python and replaced asyncore, but I am not a Python core developer and I was the one writing it.

>commecial interest, but I think you've a bigger interest to defend that
>is to leave twisted/nevow a community effort.

If there is ever a general outcry in either of these communities that something we have *actually done* is really wrong, I can promise you that we will consider it.  One developer's deployment preferences do not constitute a "general outcry".

From andrea at cpushare.com  Sun Jan 15 03:39:02 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 15 04:39:08 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
	nesting, and convenience descriptor generator
In-Reply-To: <20060114233732.GB16034@home.puzzling.org>
References: <20060113041530.GT15897@opteron.random>
	<20060113044312.26200.622342207.divmod.quotient.376@ohm>
	<20060113135824.GX15897@opteron.random>
	<20060113173220.GA4169@mithrandi.za.net>
	<20060114124445.GD15897@opteron.random>
	<20060114155724.GK15897@opteron.random>
	<20060114233732.GB16034@home.puzzling.org>
Message-ID: <20060115103902.GO15897@opteron.random>

On Sun, Jan 15, 2006 at 10:37:32AM +1100, Andrew Bennetts wrote:
> Believe me, zope.interface is far less of an annoyance than the NIH mess we had
> before it.  There are deb and rpm packages for it for most distros, so I really
> don't see this as a big issue.

It's not a big issue, I certainly agree ;).

From andrea at cpushare.com  Sun Jan 15 06:04:06 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 15 07:04:15 2006
Subject: [Twisted-web] Re: [Nevow-commits] r3904 - server-side (fragment)
In-Reply-To: <20060115031356.26200.1113602544.divmod.quotient.900@ohm>
References: <20060114124445.GD15897@opteron.random>
	<20060115031356.26200.1113602544.divmod.quotient.900@ohm>
Message-ID: <20060115130406.GP15897@opteron.random>

On Sat, Jan 14, 2006 at 10:13:56PM -0500, glyph@divmod.com wrote:
> Epsilon only contains bug-fixes that have already been contributed to 
> Twisted.  It only installs them if a package specifically requires a fix.  
> If Nevow wants to require unreleased fixes to Twisted, Epsilon would be one 
> way to go about it; rather than requiring users to upgrade to unreleased 
> versions of Twisted so that we can do a release of Nevow, Nevow's 
> developers can simply drop in the appropriate Twisted fix, and then use it. 
> The fix will only be enabled when it is requested, so it will not conflict 
> with other libraries which depend on the buggy behavior unless they are 
> being used by the same process.

What you're saying is that if there's a twisted bug and not fixed by
epsilon either, instead of upgrading twisted to fix the bug, you require
upgrading epsilon. If there's a bug you have to upgrade something
anyway, why don't you upgrade the buggy thing in the first place?

What you're missing is that your epsilon hotfix.py grand plan works only
today, 15 Jan 2006, because you release epsilon today, and you know the
bugs that happened in the last years, so today epsilon can fix all those
bugs without upgrading twisted. But on 15 Jan 2007 you will have to
upgrade epsilon, or do you plan to ship an epsilon2 package to plug on
top of epsilon1?

If the bug exists you should release an hotfix release of twisted,
stable releases exists in all projects out there, so _all_ apps
including CPUShare and KLive will be fixed, not just Nevow thanks to the
suggested epsilon dependency.

> If such a thing were necessary, Nevow could quite easily depend upon it.  
> That probably will not be a requirement until Nevow is mature enough to 
> have a 1.0 release, however.

I hope it'll never be a requirement ;)

> One way to avoid this would be for you to volunteer to be the release 
> manager of Twisted and be very responsive to release requests.  If 
> arbitrary Divmod project releases could easily depend upon Twisted releases 
> being made very quickly, a work-around package would be less important.

This is exactly the point. When a bug happens, there should be a stable
release of twisted. As said above all twisted apps needs this, not just
Nevow.

If there is need of a release manager for hotfix releases, I can offer
my help. But why don't we use this algorithm instead?

	twisted_stable_release_manager = epsilon_release_manager
	del epsilon_release_manager
	del epsilon

My primary interest is that twisted/nevow is healty and successful
project. Even if I had no 20k lines invested already into twisted and I
had to start from scratch, I would be still starting with twisted a
second time since it seems the easiest of all to write code. Even
bittorrent uses twisted core these days (but I assume you all know this
already).

Also note: while currently twisted is the best choice, I'm not religious
about python/twisted, and I can't predict the load over time, if python
will be too slow I may be forced to rewrite the whole thing in C++ but
to kickstart the thing python is much faster.

> we don't employ Chris.  We can't call him up and say, "do a release now, 
> becuase it is your job".  Maybe Twisted can't release the appropriate 
> subproject for some reason - a release goal hasn't been met, several 
> buildslaves have been taken offline for days' worth of maintenance - 
> whatever.

Note the problem you mention is the same for all open source projects
out there. The only solution for you is to fork the project when you get
the request from your customer, and to ship a divmod-twisted package. If
you use the delta patch like yast update does, the hotfixes will be tiny. 

I don't really see the problem you're talking about, assume you need to
ship mozilla to your customer, are you going to get a certain release of
mozilla to suit you schedule? Of course not, the open source projects
goes with their schedule, this is the norm.

Note however that the stable branches exists exactly so you can apply
the hotfix without having to test with buildslaves etc... Assume that
there is a major and obvious security hole, the one liner fix will be
obvious to everyone, so releasing a new stable twisted would be required
quickly. You _can't_ fix a major security hole with epsilon, or only nevow
will be safe.

If the kernel is released in days when a hotfix arrives, you must be
able to do that with twisted too.

> Before we get to apt or yast or whatever, we have to produce upstream 
> releases.  Producing an upstream release of Twisted is substantially more 
> work than producing an upstream release of a Divmod product, even Nevow.  
> Producing a release of Epsilon requires at most an hour or two of work.

Then fix the process of releasing a stable release of twisted. You see
the frequency that kernel releases are released? The y in 2.6.x.y
changes at rapid peace. You don't need to make big PR every time a
release is issued. That's a stable cycle exactly for this kind of
hotfixes. Checking the patch into the stable branch and launching a
command that creates and uploads the tarball is more than enough. I
don't see the problem, you must be prepared for this already in case of
security issues.

> You may be confused by the fact that Nevow discussion takes place on this 
> list, because it is a popular Twisted-capable web framework.  However:  go 
> to nevow.com.  Where does that take you?  What is the *first word* on the 
> page that you see?  What is the SVN URL for Nevow?  Are you detecting a 
> theme yet?
> 
> I really appreciate the open-source contributions from the Nevow community. 
> They have been substantial, and it certainly wouldn't be the product it is 
> today if we hadn't had them.  However, its full name is "*Divmod* Nevow".  
> Divmod has paid for every stage of its development, and written the vast 
> majority of its code (>80%).  Its primary author, Donovan Preston, stopped 
> working on it when he left Divmod, and maintenance has been taken over by 
> JP Calderone, who currently works -- surprise, surprise -- at Divmod.

The thing is quite simple, if Divmod customize nevow for its own
commercial interest adding dependencies on epsilon package to make life
easier for its customers (and I never said you don't have any right to
do that), then the community as well has the right to take nevow and
fork and develop it in a way that is more long term oriented without
silly dependencies that can scare away users.

> Yeah, the story behind that is kind of weird.  twistedmatrix.com is an 
> older domain, that I bought when I was 16 or so, and *everybody* was 
> registering .com names.  Domain squatters have long since purchased .org 
> and .net.  When Divmod was registered, we got the .org for our open-source 
> works and the .com for our commercial service.

Ah ok ;)

> None of this fixes the release-management problem I've described 
> repeatedly, which doesn't seem to concern you at all.  I understand that 
> you don't use a package manager, or even downloaded tarballs of released 
> version of projects, but that is an extreme minority position.  In many 
> companies where it is allowed to use open source at all, it is *strictly* 
> disallowed to use un-released and/or unpackaged versions on production 
> machines.

Yep and this is why you must be already able to make quick releases of
twisted, to solve any security hotfix problem. Furthermore if the bug is
minor, you should fork the thing and ship your customized version to
your customers like if it's mozilla.

> Not true.  Moe, for example, has checkin rights to Divmod and not Twisted.  

Ok one person has not access rights to twistedmatrix.com SVN, but I
assume it would be ok to give him checkin rights into the
twistedmatrix.com Nevow repository right? It can't be such a big deal.

> There are plenty of people who have commit access to Twisted who would not 
> even want to work on any Divmod projects.  I certainly don't think that all 

I was suggesting moving stuff from divmod.org to twistedmatrix.com, so
that's not an issue.

> If you want this kind of ease, help us produce eggs, or debs, or improve 
> our installation instructions.  I thought this thread began as a helpful 
> (albeit misguided) suggestion, but it is quickly devolving into a simple 
> whine: "why doesn't divmod do everything the way I want?"

It now turned into: why don't we copy Nevow into twistedmatrix.com.

> Let's say you did convince everyone involved that this was a really good 
> idea, and the various repositories should be merged.  It is still probably 
> several weeks of work to do this.  What about bugtrackers?  What about 
> repository performance (doubling the size of the repository in one commit 
> is not going to make SVN happy).  What about merge history on outstanding 
> branches?

I'd be ok to even risk losing all of it, I keep lots of backups too for
the exact reason that if you delete nevow I won't risk losing it.
Losing the history would be annoying but it's by far not the most
important thing if compared to the code itself.

> Twisted already includes a zope.interface tarball in sumo releases.  The 
> expectation is that if you are working from the repository, you should not 
> be doing setup.py install anyway - that pollutes your installed directory 
> with an unspecified development version.

My build script are not polluting anything, but I know that's an
uncommon way of updating... ;)

> Your main point, that people are in "violent agreement" with, is that 
> obstacles to installation should be removed.  The Divmod team agrees with 

Ok great ;). This is by far the most important thing.

> with Divmod) have already disagreed with you publicly.  They do not seem to 
> have a problem with our "behavior".

You're right to admit there is a "behaviour", if they're fine with it
good, I'm not and I find attractive to exercise the rights you given me
by releasing nevow open source.

> What started this discussion was MG objecting to an unnecessary dependency. 

Things got worse from my part when you started describing what epsilon
does.

> dependency on a project which is small on disk is the WORST thing that ANY 
> project can do EVER.  That is simply not true.  You are objecting to a 

Every case is a bit different, but trust me it would be more acceptable
for me to have a dependency on something useful, not an hotfix package
that only works today because you know the bugs of the past, and then
it'll require an upgrade too next year (but by that time you'll have
epsilon2 ready anyway).

From tv at twistedmatrix.com  Sun Jan 15 15:11:14 2006
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun Jan 15 16:11:21 2006
Subject: [Twisted-web] Twisted should have frequent-er stable releases
In-Reply-To: <20060115130406.GP15897@opteron.random>
References: <20060114124445.GD15897@opteron.random>	<20060115031356.26200.1113602544.divmod.quotient.900@ohm>
	<20060115130406.GP15897@opteron.random>
Message-ID: <43CAC882.1040802@twistedmatrix.com>

Andrea Arcangeli wrote:
> This is exactly the point. When a bug happens, there should be a stable
> release of twisted. As said above all twisted apps needs this, not just
> Nevow.

Yes. I agree. That would be a lot better than any "epsilon" package.

Clearly what the community needs is a more automated build process, so
we don't burn out our beloved Release Manager. Work on tools and
automation would be very much appreciated, I am sure.
I'd love to help but honestly don't have the time right now, I'm
too busy to release even the projects I do release manager tasks for :(

From radeex at gmail.com  Sun Jan 15 15:35:37 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun Jan 15 16:35:39 2006
Subject: [Twisted-web] Twisted should have frequent-er stable releases
In-Reply-To: <43CAC882.1040802@twistedmatrix.com>
References: <20060114124445.GD15897@opteron.random>
	<20060115031356.26200.1113602544.divmod.quotient.900@ohm>
	<20060115130406.GP15897@opteron.random>
	<43CAC882.1040802@twistedmatrix.com>
Message-ID: <60ed19d40601151435t18eeefb4ma0267625203073a3@mail.gmail.com>

Speaking of which, I'm probably going to get together a Twisted
Weekend soon focused on killing bugs and doing a 2.2. I was going to
do it this past weekend, but didn't want to conflict with the
doc-vsprint. How about next weekend, or the weekend after?

To be fair, the automation around actually producing tarballs for
Twisted, all subprojects, and sumo is now pretty quick. There are
still lots of problems around web site maintenance and documentation
management (apart from the content itself), so that would be an
excellent place to put your effort.

On 1/16/06, Tommi Virtanen <tv@twistedmatrix.com> wrote:
> Andrea Arcangeli wrote:
> > This is exactly the point. When a bug happens, there should be a stable
> > release of twisted. As said above all twisted apps needs this, not just
> > Nevow.
>
> Yes. I agree. That would be a lot better than any "epsilon" package.
>
> Clearly what the community needs is a more automated build process, so
> we don't burn out our beloved Release Manager. Work on tools and
> automation would be very much appreciated, I am sure.
> I'd love to help but honestly don't have the time right now, I'm
> too busy to release even the projects I do release manager tasks for :(


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+

From andrea at cpushare.com  Mon Jan 16 02:35:57 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon Jan 16 03:36:05 2006
Subject: [Twisted-web] Twisted should have frequent-er stable releases
In-Reply-To: <60ed19d40601151435t18eeefb4ma0267625203073a3@mail.gmail.com>
References: <20060114124445.GD15897@opteron.random>
	<20060115031356.26200.1113602544.divmod.quotient.900@ohm>
	<20060115130406.GP15897@opteron.random>
	<43CAC882.1040802@twistedmatrix.com>
	<60ed19d40601151435t18eeefb4ma0267625203073a3@mail.gmail.com>
Message-ID: <20060116093557.GX15897@opteron.random>

On Mon, Jan 16, 2006 at 09:35:37AM +1100, Christopher Armstrong wrote:
> still lots of problems around web site maintenance and documentation
> management (apart from the content itself), so that would be an
> excellent place to put your effort.

The website update isn't really required. To me the important things are
the tarball to download and the mailing list announce. I wouldn't spend
much time on the website, when you can do something more useful: just
create a list like twisted-announce. Website is a very inefficient
medium to release updates, if a major security bugs hits, you can't
depend on people clicking on the website to inform them.
twisted-announce should be more than enough. However if there was a way
to automate the rendering of this page dynamically it was better:

http://twistedmatrix.com/projects/core/

For example I do a os.listdir() on the files, to get the highest name.

From andrea at cpushare.com  Mon Jan 16 04:29:34 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon Jan 16 05:29:41 2006
Subject: [Twisted-web] guard in web2?
Message-ID: <20060116112934.GA15897@opteron.random>

Hello,

is there a guard functionality in web2 that could obsolete the nevow
guard? Is it under a different name perhaps? I think the guard could
very well belong to web2 the same way vhost does. Or should I rewrite
the guard in my code?

Comments welcome, thanks!

PS. if my code will be broken anyway by the obsolescence of formless and
web2, to be safer in terms of API stability for the long term future,
I'm considering moving away from divmod products and stick with twisted
only that has a bigger chance to be solid, but the guard is something
I'd rather not want to duplicate in my code given it may be useful to
more people like vhost.

From hartshorne at gmail.com  Mon Jan 16 08:47:19 2006
From: hartshorne at gmail.com (Beau Hartshorne)
Date: Mon Jan 16 09:47:16 2006
Subject: [Twisted-web] Twisted should have frequent-er stable releases
In-Reply-To: <60ed19d40601151435t18eeefb4ma0267625203073a3@mail.gmail.com>
References: <20060114124445.GD15897@opteron.random>
	<20060115031356.26200.1113602544.divmod.quotient.900@ohm>
	<20060115130406.GP15897@opteron.random>
	<43CAC882.1040802@twistedmatrix.com>
	<60ed19d40601151435t18eeefb4ma0267625203073a3@mail.gmail.com>
Message-ID: <8BE1164F-D48B-477B-B2BA-BE345BD45329@gmail.com>

What kind of help is needed here? What can I do?

On 15-Jan-06, at 2:35 PM, Christopher Armstrong wrote:

> still lots of problems around web site maintenance and documentation
> management (apart from the content itself), so that would be an
> excellent place to put your effort.


From william at opensource4you.com  Mon Jan 16 11:55:52 2006
From: william at opensource4you.com (william)
Date: Mon Jan 16 14:21:53 2006
Subject: [Twisted-web] Good ROM tool ?
Message-ID: <loom.20060116T194513-691@post.gmane.org>

I'm looking for a simple but good solution that can avoid me to type required
sql statements (select, update, remove, ...).

Does any one have already look at sqlalchemy or pydo2 ?
Does those solution could work within Twisted ?

Thanks





From cso at netcenturion.biz  Mon Jan 16 18:56:14 2006
From: cso at netcenturion.biz (James R. Saker Jr.)
Date: Mon Jan 16 19:58:30 2006
Subject: [Twisted-web] Deferred fun
Message-ID: <200601161956.15174.cso@netcenturion.biz>

Per new years resolution 'I will learn how to use deferreds in twisted', I've 
got a little puzzle in an xmlrpc remote nmap tool that I put together to try 
to learn deferreds (as well as automate scans on my firewall from outside my 
net), figuring the speed of nmap returning the results of a scan can be 
excessively long and should make for a good deferred experiment. Except I 
keep hitting an AssertionError and think it may have to do with what happens 
to my deferred when it completes:

#!/usr/bin/python
"""
pyrscand.py
Python remote scanner: Nmap XML-RPC module for processing scan requests from a 
remote host
"""
import os
from twisted.internet import defer
from twisted.web import xmlrpc, server

NMAP_PATH = '/usr/bin/nmap' # location of nmap binary on host

class ScanServer(xmlrpc.XMLRPC):
    """
    XMLRPC server for remote scan processing
    """

    def handleScan(self, type, ip, detectOS, timing):
	"""
	Simplistic scans only for now!
	"""
        result = ''
        print "running scanner..."
        scandata = os.popen('%s -%s -A -T%s %s -oX -' % \
            (NMAP_PATH, type, timing, ip), 'r')
        for line in scandata:
            result += line  # return xml in a string - not a list object
        print "got result: \n%s" % result
        return result

    def handleFailure(self, f):
        print "errback"
        print "we got an exception: %s" % (f.getTraceback(),)
        f.trap(RuntimeError)
        return 'Error'
        
    def xmlrpc_scan(self, type, ip, detectOS, timing):
        """
        Inputs: type (sS, sT, sP), ip, detectOS flag, timing performance (0-5)
        Outputs: XML formatted report value compliant with nmap schema
        """
        print "scanner"
        d = defer.Deferred()
        d.addCallback(self.handleScan(type, ip, detectOS, timing))
        d.addErrback(self.handleFailure)
    
if __name__ == '__main__':
    from twisted.internet import reactor
    r = ScanServer()
    reactor.listenTCP(7080, server.Site(r))
    reactor.run()


Running it actually shows the nmap xml output is returned to handleScan but 
from there we hit an AssertionError:

Traceback (most recent call last):
  File "/usr/lib/python2.4/site-packages/twisted/web/http.py", line 557, in 
requestReceived
    self.process()
  File "/usr/lib/python2.4/site-packages/twisted/web/server.py", line 153, in 
process
    self.render(resrc)
  File "/usr/lib/python2.4/site-packages/twisted/web/server.py", line 160, in 
render
    body = resrc.render(self)
  File "/usr/lib/python2.4/site-packages/twisted/web/xmlrpc.py", line 118, in 
render
    defer.maybeDeferred(function, *args).addErrback(
--- <exception caught here> ---
  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py", line 107, 
in maybeDeferred
    result = f(*args, **kw)
  File "pyrscand.py", line 39, in xmlrpc_scan
    d.addCallback(self.handleScan(type, ip, detectOS, timing))
  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py", line 191, 
in addCallback
    callbackKeywords=kw)
  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py", line 175, 
in addCallbacks
    assert callable(callback)
exceptions.AssertionError:

My xmlrpc client is pretty short and taken directly from online howto:

from twisted.web.xmlrpc import Proxy
from twisted.internet import reactor

def printValue(value):
    print repr(value)
    reactor.stop()

def printError(error):
    print 'error', error
    reactor.stop()

proxy = Proxy('http://localhost:7080/XMLRPC')
proxy.callRemote('scan', 'sP', '69.63.110.1',\ 		
				1, 5).addCallbacks(printValue,printError)
reactor.run()


Any thoughts would be greatly appreciated -


Jamie

From andrew-twisted at puzzling.org  Mon Jan 16 19:41:38 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon Jan 16 20:40:32 2006
Subject: [Twisted-web] Deferred fun
In-Reply-To: <200601161956.15174.cso@netcenturion.biz>
References: <200601161956.15174.cso@netcenturion.biz>
Message-ID: <20060117024138.GF7771@home.puzzling.org>

On Mon, Jan 16, 2006 at 07:56:14PM -0600, James R. Saker Jr. wrote:
> Per new years resolution 'I will learn how to use deferreds in twisted', I've 
> got a little puzzle in an xmlrpc remote nmap tool that I put together to try 
> to learn deferreds (as well as automate scans on my firewall from outside my 
> net), figuring the speed of nmap returning the results of a scan can be 
> excessively long and should make for a good deferred experiment. Except I 
> keep hitting an AssertionError and think it may have to do with what happens 
> to my deferred when it completes:

I'll point out the problems that jumped out at me:

> #!/usr/bin/python
> """
> pyrscand.py
> Python remote scanner: Nmap XML-RPC module for processing scan requests from a 
> remote host
> """
> import os
> from twisted.internet import defer
> from twisted.web import xmlrpc, server
> 
> NMAP_PATH = '/usr/bin/nmap' # location of nmap binary on host
> 
> class ScanServer(xmlrpc.XMLRPC):
>     """
>     XMLRPC server for remote scan processing
>     """
> 
>     def handleScan(self, type, ip, detectOS, timing):
> 	"""
> 	Simplistic scans only for now!
> 	"""
>         result = ''
>         print "running scanner..."
>         scandata = os.popen('%s -%s -A -T%s %s -oX -' % \
>             (NMAP_PATH, type, timing, ip), 'r')

os.popen is not safe to use with Twisted, due to the joys of signal handling.
See the Using Processes developer guide for details:
http://twistedmatrix.com/projects/core/documentation/howto/process.html

The short answer in this case is to use twisted.internet.utils.getProcessOutput:

    def handleScan(self, type, ip, detectOS, timing):
        return getProcessOutput(NMAP_PATH, 
            args=['-' + type, '-A', '-T' + timing, ip, '-oX', '-'])

(docstring omitted for brevity)

>     def handleFailure(self, f):
>         print "errback"
>         print "we got an exception: %s" % (f.getTraceback(),)
>         f.trap(RuntimeError)
>         return 'Error'

I'm not sure why you're catching RuntimeError, as it's never raised anywhere
that I can see.

>     def xmlrpc_scan(self, type, ip, detectOS, timing):
>         """
>         Inputs: type (sS, sT, sP), ip, detectOS flag, timing performance (0-5)
>         Outputs: XML formatted report value compliant with nmap schema
>         """
>         print "scanner"
>         d = defer.Deferred()
>         d.addCallback(self.handleScan(type, ip, detectOS, timing))

In general, when you want a callback to be run with arguments, you say:

    d.addCallback(func, arg1, arg2)

*not*:

    d.addCallback(func(arg1, arg2))

Because the latter will call the function immediately, rather than make it all
callback.

Also, a callback function needs to expect the result of the deferred as its
first argument, before any extras you pass to addCallback.

But this is all moot, because what you really want is for handleScan to *create*
and *return* a Deferred, not be a callback, because it is handleScan that is the
operation that you are waiting for the result from, rather than being an action
you want to take when you get a result.  Helpfully, getProcessOutput returns a
deferred of the process output for you, so your xmlrpc_scan function can become:

    def xmlrpc_scan(self, type, ip, detectOS, timing):
        d = self.handleScan(type, ip, detectOS, timing)
        d.addErrback(self.handleFailure)
        return d

-Andrew.


From paul-lists at perforge.com  Mon Jan 16 19:46:31 2006
From: paul-lists at perforge.com (Paul G)
Date: Mon Jan 16 20:46:37 2006
Subject: [Twisted-web] Deferred fun
References: <200601161956.15174.cso@netcenturion.biz>
Message-ID: <13ae01c61b10$39e7b130$6402a8c0@dcore>


----- Original Message ----- 
From: "James R. Saker Jr." <cso@netcenturion.biz>
To: <twisted-web@twistedmatrix.com>
Sent: Monday, January 16, 2006 8:56 PM
Subject: [Twisted-web] Deferred fun

--- snip ---

you do not understand deferreds. a deferred is a means to register success 
and error handlers for an asynchronous operation. it is *not* a means to 
asynchronously invoke an operation, as you seem to think with 
"d.addCallback(self.handleScan(type, ip, detectOS, timing))". moreover, the 
'start a blocking program with popen' is, of course, a *blocking* operation 
and using twisted/deferreds/a rabbit foot is not going to make it 
asynchronous automagically. i suggest you read the excellent introductory 
documentation on twistedmatrix.com.

hints on how to make this work:

call handleScan with tiwsted.internet.threads.deferToThread(). this gives 
you a deferred; add a callback to this deferred which returns the result to 
your xmlrpc client.

also, this should be on the main twisted-l, not on twisted-web.

-p 


From catalin at bounce-software.com  Tue Jan 17 02:02:28 2006
From: catalin at bounce-software.com (Catalin Constantin)
Date: Tue Jan 17 03:03:00 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <loom.20060116T194513-691@post.gmane.org>
References: <loom.20060116T194513-691@post.gmane.org>
Message-ID: <1275029704.20060117110228@bounce-software.com>

http://www.sqlobject.org
as long as you deferToThread(..)

Monday, January 16, 2006, 8:55:52 PM, william wrote:
> I'm looking for a simple but good solution that can avoid me to type required
> sql statements (select, update, remove, ...).

> Does any one have already look at sqlalchemy or pydo2 ?
> Does those solution could work within Twisted ?

> Thanks


-- 
Catalin Constantin



From l.oluyede at gmail.com  Tue Jan 17 03:22:26 2006
From: l.oluyede at gmail.com (Lawrence Oluyede)
Date: Tue Jan 17 04:22:30 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <1275029704.20060117110228@bounce-software.com>
References: <loom.20060116T194513-691@post.gmane.org>
	<1275029704.20060117110228@bounce-software.com>
Message-ID: <9eebf5740601170222t66c4c316yd13b6914b0c3d881@mail.gmail.com>

On 1/17/06, Catalin Constantin <catalin@bounce-software.com> wrote:
> http://www.sqlobject.org
> as long as you deferToThread(..)

It's seems that SQLAlchemy does a better job with Twisted. Valentino
Volonghi also spotted this out on our local italian newsgroup:
http://groups.google.it/group/it.comp.lang.python/msg/35539f1329960eef

--
Lawrence
http://www.oluyede.org/blog
From therve at free.fr  Tue Jan 17 03:41:53 2006
From: therve at free.fr (Thomas HERVE)
Date: Tue Jan 17 04:42:14 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <1275029704.20060117110228@bounce-software.com>
References: <loom.20060116T194513-691@post.gmane.org>
	<1275029704.20060117110228@bounce-software.com>
Message-ID: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>

Quoting Catalin Constantin <catalin@bounce-software.com>:

> http://www.sqlobject.org
> as long as you deferToThread(..)

Beware when you use sqlobject. The cache management can be really tricky :
* if you use cache, fine, but you must be the only application accessing the
database
* if not, sqlobject is useless and creates lots of performance problems (too
many requests when you access data).

You may look at tada (http://www.darkarts.co.za/projects/tada/) which seems to
integrate better with Twisted (although I don't understand why it doesn't use
adbapi).

Anyway Axiom will rule the world, no ?

-- 
Thomas


From catalin at bounce-software.com  Tue Jan 17 03:49:25 2006
From: catalin at bounce-software.com (Catalin Constantin)
Date: Tue Jan 17 04:49:57 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
References: <loom.20060116T194513-691@post.gmane.org>
	<1275029704.20060117110228@bounce-software.com>
	<20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
Message-ID: <195026392.20060117124925@bounce-software.com>

i don't think so :)

as long as ...." Axiom currently supports only SQLite ...." , not a
chance :)


Tuesday, January 17, 2006, 12:41:53 PM, Thomas HERVE wrote:
> Anyway Axiom will rule the world, no ?


-- 
Catalin Constantin



From paul-lists at perforge.com  Tue Jan 17 04:03:49 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue Jan 17 05:03:57 2006
Subject: [Twisted-web] Good ROM tool ?
References: <loom.20060116T194513-691@post.gmane.org><1275029704.20060117110228@bounce-software.com>
	<20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
Message-ID: <149401c61b55$b253e310$6402a8c0@dcore>


----- Original Message ----- 
From: "Thomas HERVE" <therve@free.fr>
To: <twisted-web@twistedmatrix.com>
Sent: Tuesday, January 17, 2006 5:41 AM
Subject: Re: [Twisted-web] Good ROM tool ?


> Anyway Axiom will rule the world, no ?

from the perspective of a person who is in the process of evaluating how to 
do databases in a forthcoming twisted-based app, this is highly unlikely. i 
think elaborating on the technical issues would be flamebait-y, so i won't. 
however, from a business risk perspective, what happens if divmod goes away? 
python is unlikely to go away; mysql, say, isn't either. MySQLdb is popular 
enough and small enough for maintenance to be taken over by somone and taken 
over successfully; twisted has a sizable group of non-divmod users and 
maintainers. i wish the divmod folks the best of luck with their business, 
as anyone who is gratefully using their code does, but this is not a 
managable risk for me. i expect a bunch of folks are in the same boat.

-p 


From paul-lists at perforge.com  Tue Jan 17 04:08:01 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue Jan 17 05:08:10 2006
Subject: [Twisted-web] Good ROM tool ?
References: <loom.20060116T194513-691@post.gmane.org><1275029704.20060117110228@bounce-software.com>
	<9eebf5740601170222t66c4c316yd13b6914b0c3d881@mail.gmail.com>
Message-ID: <14aa01c61b56$49aeaec0$6402a8c0@dcore>


----- Original Message ----- 
From: "Lawrence Oluyede" <l.oluyede@gmail.com>
To: "Catalin Constantin" <catalin@bounce-software.com>; "Twisted Web World" 
<twisted-web@twistedmatrix.com>
Sent: Tuesday, January 17, 2006 5:22 AM
Subject: Re: [Twisted-web] Good ROM tool ?


> On 1/17/06, Catalin Constantin <catalin@bounce-software.com> wrote:
>> http://www.sqlobject.org
>> as long as you deferToThread(..)
>
> It's seems that SQLAlchemy does a better job with Twisted. Valentino
> Volonghi also spotted this out on our local italian newsgroup:
> http://groups.google.it/group/it.comp.lang.python/msg/35539f1329960eef

hmm, the absence of deferToThread in that code is conspicuous. how are the 
db operations made asynchronous? any chance a kind, italian-reading soul can 
translate/elaborate? signor valentino, perhaps?

-p 


From l.oluyede at gmail.com  Tue Jan 17 04:20:40 2006
From: l.oluyede at gmail.com (Lawrence Oluyede)
Date: Tue Jan 17 05:20:43 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <14aa01c61b56$49aeaec0$6402a8c0@dcore>
References: <loom.20060116T194513-691@post.gmane.org>
	<1275029704.20060117110228@bounce-software.com>
	<9eebf5740601170222t66c4c316yd13b6914b0c3d881@mail.gmail.com>
	<14aa01c61b56$49aeaec0$6402a8c0@dcore>
Message-ID: <9eebf5740601170320s463efd35t64b43b5b9d227d4a@mail.gmail.com>

> hmm, the absence of deferToThread in that code is conspicuous. how are the
> db operations made asynchronous? any chance a kind, italian-reading soul can
> translate/elaborate? signor valentino, perhaps?

I'm going to translate the message as-is:

-------
from Valentino Volonghi:

SQLAlchemy is very good. I'm trying it in these days and it's
wonderful. Yesterday I had a bunch of minutes available to write
something interesting:

#--- snip for the code ---#

Keep in mind that the transact() function cannot access to anything
not thread-safe and so it must be used CAREFULLY or the world can go
down on you :D It's an example to show that I'm using it with Twisted
because it's thread-safe and it's very good. I'm not using the very
interesting ORM layer that I think it's not fully usable in Twisted
(due to its lazyness in some spots).

To me it's the best ORM tool around in this moment because it doesn't
force the ORM to users and it's also for people who likes SQL and
knows when and where it can be useful.
-------

HTH


--
Lawrence
http://www.oluyede.org/blog
From paul-lists at perforge.com  Tue Jan 17 04:54:57 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue Jan 17 05:55:53 2006
Subject: [Twisted-web] Good ROM tool ?
References: <loom.20060116T194513-691@post.gmane.org><1275029704.20060117110228@bounce-software.com><9eebf5740601170222t66c4c316yd13b6914b0c3d881@mail.gmail.com><14aa01c61b56$49aeaec0$6402a8c0@dcore>
	<9eebf5740601170320s463efd35t64b43b5b9d227d4a@mail.gmail.com>
Message-ID: <14dd01c61b5c$ef832b90$6402a8c0@dcore>


----- Original Message ----- 
From: "Lawrence Oluyede" <l.oluyede@gmail.com>
To: "Twisted Web World" <twisted-web@twistedmatrix.com>
Sent: Tuesday, January 17, 2006 6:20 AM
Subject: Re: [Twisted-web] Good ROM tool ?


>> hmm, the absence of deferToThread in that code is conspicuous. how are 
>> the
>> db operations made asynchronous? any chance a kind, italian-reading soul 
>> can
>> translate/elaborate? signor valentino, perhaps?

of course, as soon as i sent that, i realized that i missed a deferToThread 
;]


> I'm going to translate the message as-is:

thank you muchly.

> Keep in mind that the transact() function cannot access to anything
> not thread-safe and so it must be used CAREFULLY or the world can go
> down on you :D It's an example to show that I'm using it with Twisted
> because it's thread-safe and it's very good. I'm not using the very
> interesting ORM layer that I think it's not fully usable in Twisted
> (due to its lazyness in some spots).

it would be interesting to hear where the problem points are from valentino, 
since sqlalchemy is what i'm looking at using right now and he's obviously 
looked into it already. i suspect that doing unspeakable things to the 'Unit 
Of Work' part of sqlalchemy might be needed to get the ORM stuff working 
with twisted. thoughts?

-p 


From mary-twisted at puzzling.org  Tue Jan 17 04:57:53 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue Jan 17 05:58:01 2006
Subject: [Twisted-web] Re: [Twisted-Python] Documentation virtual sprint,
	TODAY, Sat 14th January
In-Reply-To: <20060114002434.GJ6454@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
Message-ID: <20060117115753.GD6785@sourdust.home.puzzling.org>

Unfortunately, the sprint involved less people than I'd hoped. I'd like
to thank Andrew Bennetts and David Blewett for their documentation
revies at
http://twistedmatrix.com:8080/twisted/wiki/DocumentationAnalysis/DocumentList
though, and Chris Armstrong and Jean-Paul Calderone for being around to
help out people who showed up. And also anyone who poked their head in
while I was out.

Where to from here?

Well, first of all I still think the idea of documentation reviews is a
reasonably good way to improve the documentation, because it forces
people to think about who the intended audience of the document is and
what the purpose of the document will be. This is surprisingly hard to
do when you just sit down and write something -- really! Also, Andrew
assures me that writing an expert review is easier than writing a
document.

So while I know that only a small percentage of users have the time or
inclination to be project contributors, I'd like to encourage anyone who
finds an eager but disappointed documentation user to go through the
process of
http://twistedmatrix.com:8080/twisted/wiki/DocumentationAnalysis/DocumentList
I intend this to be an ongoing project.

At some point I will also do a template for 'reviewing' non-existant
documents -- David's valiant review of non-existant documentation shows
that I could improve the template for this task.

Next up will be another sprint in a month or two to *act* on the
reviews. I am hoping that improving a document based on a review will be
far easier than improving it based on scattered one-shot bug reports or
our gut instincts. Dates and times soon.

Further discussion of documentation improvement ideas welcome on
twisted-python@twistedmatrix.com

-Mary

-- 
<ilikewine> that mp3 sounds like that band is from williamsburg
<ilikewine> its an awful place
<ilikewine> where everybody wears stripes

From andrea at cpushare.com  Tue Jan 17 07:01:28 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 17 08:01:36 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <149401c61b55$b253e310$6402a8c0@dcore>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore>
Message-ID: <20060117140128.GG19010@opteron.random>

On Tue, Jan 17, 2006 at 06:03:49AM -0500, Paul G wrote:
> from the perspective of a person who is in the process of evaluating how to 
> do databases in a forthcoming twisted-based app, this is highly unlikely. i 
> think elaborating on the technical issues would be flamebait-y, so i won't. 
> however, from a business risk perspective, what happens if divmod goes 
> away? python is unlikely to go away; mysql, say, isn't either. MySQLdb is 
> popular enough and small enough for maintenance to be taken over by somone 
> and taken over successfully; twisted has a sizable group of non-divmod 
> users and maintainers. i wish the divmod folks the best of luck with their 
> business, as anyone who is gratefully using their code does, but this is 
> not a managable risk for me. i expect a bunch of folks are in the same boat.

Seconded.

I'm using psycopg2 and works pretty well, it convers all types
automatically. For really simple apps if something I could consider
simple interfaces that avoids to write the sql word.

Now I'm integrating twisted web2 with Cheetah (credit to Paul for
pointing me at Cheetah) so I'm removing the too fragile nevow dependency
(and Cheetah seems much faster too, or perhaps it's web2 dunno). It's a
bit tricky to rewrite the code (i've to use explicit deferreds instead
of the implcit ones in nevow) but it seems worth it and performance will
be better anyway.

(and if web2 API changes that's ok of course, it still has no chance to
obsolete all forms and the html rendering, Cheetah is solid and fast and
with huge userbase unlike nevow)

From cso at netcenturion.biz  Tue Jan 17 07:05:31 2006
From: cso at netcenturion.biz (James R. Saker Jr.)
Date: Tue Jan 17 08:07:51 2006
Subject: [Twisted-web] Deferred fun
In-Reply-To: <20060117024138.GF7771@home.puzzling.org>
References: <200601161956.15174.cso@netcenturion.biz>
	<20060117024138.GF7771@home.puzzling.org>
Message-ID: <200601170805.32071.cso@netcenturion.biz>

Thanks Andrew and Paul for some great perspective on deferreds - I'm going to 
work that again and see if I can't get it in my head this time!

Jamie


From glyph at divmod.com  Tue Jan 17 08:56:25 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Tue Jan 17 09:56:27 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <149401c61b55$b253e310$6402a8c0@dcore>
Message-ID: <20060117155625.26200.337530353.divmod.quotient.1447@ohm>

On Tue, 17 Jan 2006 06:03:49 -0500, Paul G <paul-lists@perforge.com> wrote:

>however, from a business risk perspective, what happens if divmod goes away?

Man, this kind of FUD is so 1990s.  I thought about a lot of different ways to respond to this, but I think the best one is:

"Good thing that Lucid is still in the Fortune 500 or all those LEmacs users would be *screwed*."

From william at opensource4you.com  Tue Jan 17 08:55:50 2006
From: william at opensource4you.com (william)
Date: Tue Jan 17 09:57:07 2006
Subject: [Twisted-web] Re: Good ROM tool ?
References: <loom.20060116T194513-691@post.gmane.org><1275029704.20060117110228@bounce-software.com>
	<9eebf5740601170222t66c4c316yd13b6914b0c3d881@mail.gmail.com>
	<14aa01c61b56$49aeaec0$6402a8c0@dcore>
Message-ID: <loom.20060117T165216-268@post.gmane.org>

Paul G <paul-lists <at> perforge.com> writes:

> > It's seems that SQLAlchemy does a better job with Twisted. Valentino
> > Volonghi also spotted this out on our local italian newsgroup:
> > http://groups.google.it/group/it.comp.lang.python/msg/35539f1329960eef
> 
> hmm, the absence of deferToThread in that code is conspicuous. how are the 
> db operations made asynchronous? any chance a kind, italian-reading soul can 
> translate/elaborate? signor valentino, perhaps?
> 
> -p 
> 

??? I see well a deferToThread ???

"return threads.deferToThread(_1) "

It's in the "transact" decorator.

Thanks Paul, I'll try this solution. 
This sounds to be a nice one.


William


From andrea at cpushare.com  Tue Jan 17 09:24:31 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 17 10:24:39 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <20060117155625.26200.337530353.divmod.quotient.1447@ohm>
References: <149401c61b55$b253e310$6402a8c0@dcore>
	<20060117155625.26200.337530353.divmod.quotient.1447@ohm>
Message-ID: <20060117162431.GL19010@opteron.random>

On Tue, Jan 17, 2006 at 10:56:25AM -0500, glyph@divmod.com wrote:
> "Good thing that Lucid is still in the Fortune 500 or all those LEmacs 
> users would be *screwed*."

Good thing that atop is still in the fortune 500 or all those atop users
would be *screwed*.

From matt at pollenation.net  Tue Jan 17 09:48:07 2006
From: matt at pollenation.net (Matt Goodall)
Date: Tue Jan 17 10:47:49 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <20060117162431.GL19010@opteron.random>
References: <149401c61b55$b253e310$6402a8c0@dcore>	<20060117155625.26200.337530353.divmod.quotient.1447@ohm>
	<20060117162431.GL19010@opteron.random>
Message-ID: <43CD1FC7.4020508@pollenation.net>

Andrea Arcangeli wrote:
> On Tue, Jan 17, 2006 at 10:56:25AM -0500, glyph@divmod.com wrote:
> 
>>"Good thing that Lucid is still in the Fortune 500 or all those LEmacs 
>>users would be *screwed*."
> 
> 
> Good thing that atop is still in the fortune 500 or all those atop users
> would be *screwed*.

Jeez guys! ;-)

We all know that one of the best things about open source (other than
the community, of course) is that if an organisation goes down or just
decides they don't want to support a product anymore then all is not lost.

Atop users have the code. They can still support it. Heck, I bet the
Divmod guys would still help out when possible.

- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.

From dialtone at divmod.com  Tue Jan 17 09:51:35 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Jan 17 10:52:11 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <14dd01c61b5c$ef832b90$6402a8c0@dcore>
References: <9eebf5740601170320s463efd35t64b43b5b9d227d4a@mail.gmail.com>
	<14dd01c61b5c$ef832b90$6402a8c0@dcore>
Message-ID: <20060117165135.GB335@divmod.com>

On Tue, Jan 17, 2006 at 06:54:57AM -0500, Paul G wrote:
> it would be interesting to hear where the problem points are from 
> valentino, since sqlalchemy is what i'm looking at using right now and he's 
> obviously looked into it already. i suspect that doing unspeakable things 
> to the 'Unit Of Work' part of sqlalchemy might be needed to get the ORM 
> stuff working with twisted. thoughts?

SQLAlchemy is failry simple and little. There are only a bunch of things that
run queries and you only have to be sure that those are the only things that
need to run in a thread.

things like the execute/fetch*/commit/select calls need to go in a separate
thread, everything else can be done inthread without worries. SQLAlchemy is
thread safe (it may contain bugs anyway) and it should work without problems.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060117/3328037d/attachment.pgp
From dialtone at divmod.com  Tue Jan 17 10:02:18 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Jan 17 11:02:38 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <20060117140128.GG19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore>
	<20060117140128.GG19010@opteron.random>
Message-ID: <20060117170218.GC335@divmod.com>

On Tue, Jan 17, 2006 at 03:01:28PM +0100, Andrea Arcangeli wrote:

> Now I'm integrating twisted web2 with Cheetah (credit to Paul for
> pointing me at Cheetah) so I'm removing the too fragile nevow dependency
> (and Cheetah seems much faster too, or perhaps it's web2 dunno). It's a
> bit tricky to rewrite the code (i've to use explicit deferreds instead
> of the implcit ones in nevow) but it seems worth it and performance will
> be better anyway.

To be honest I'd rather be plagued with termites rather than writing Cheetah
templates. But this is just me.

From the performance point of view if speed is all you want pure stan is
faster than cheetah almost for sure. and by pure stan I mean no sequence
renderer for sequences but rather gen exps or list comprehensions and similar
things.

Of course IMHO this is not enough of a reason to avoid nevow. First of all
citing nevow as fragile is unfair. You said yourself that you haven't had to
change your code since version 0.3. And now you state that it's fragile.

The next time I'll just break the API so that people saying that Nevow is
fragile will be definately right.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060117/22042e13/attachment-0001.pgp
From dialtone at divmod.com  Tue Jan 17 10:17:46 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Jan 17 11:18:22 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <43CD1FC7.4020508@pollenation.net>
References: <149401c61b55$b253e310$6402a8c0@dcore>
	<20060117155625.26200.337530353.divmod.quotient.1447@ohm>
	<20060117162431.GL19010@opteron.random>
	<43CD1FC7.4020508@pollenation.net>
Message-ID: <20060117171746.GD335@divmod.com>

On Tue, Jan 17, 2006 at 04:48:07PM +0000, Matt Goodall wrote:
> Jeez guys! ;-)
> 
> We all know that one of the best things about open source (other than
> the community, of course) is that if an organisation goes down or just
> decides they don't want to support a product anymore then all is not lost.
> 
> Atop users have the code. They can still support it. Heck, I bet the
> Divmod guys would still help out when possible.

I don't think that's the point anymore. Because Andrea never used atop and
nobody has ever recommended using it (even Divmod guys).

It's like getting upset because Windows Vista because they rewrote the TCP/IP
stack while using Linux for everything.

There are many open source projects written in python for just about
everything. Installing a python software is a no brainer. Keeping up with the
svn development of many different projects is even simpler. Not reusing
projects because of dependencies is plain stupid.

If keeping up with many different SVN trees is hard use this:

import py

for x in py.path.local().listdir():
    if x.check(dir=False): continue
    wc = py.path.svnwc(x)
    if wc.check(versioned=True):
        print 'SVN', wc,
        wc_rev_old = wc.info().rev
        wc.update()
        wc_rev = wc.info().rev
        if wc_rev > wc_rev_old:
            print "... UPDATED from %s to %s" % (wc_rev_old, wc_rev),
        print
    elif x / 'CVS' in x.listdir():
        print "CVS", x
        try:
            old = x.chdir()
            out = py.process.cmdexec('cvs -q -z3 up -dP')
            old.chdir()
            if out.strip():
                print out
                print "="*20
        except py.process.cmdexec.Error, err:
            print err

this is a script I use to update my Projects directory in which there are
about 55 different projects that I use or that I keep track of.

Injecting additional dependencies is perfectly fine as long as it is a
meaningful dependency. There is NO, and I want to put some more emphasis on
it, NO REASON to avoid a dependency when, for example, you need to handle
dates, or when you need to handle system calls not wrapped in python or to add
some indexers and so on.

I hope this is clear enough. Anyway I'm not in position to take decisions for
anything that is not Nevow, and even there I'm still one in the developers
pool which means I'm just talking for myself (and I'm not a Divmod employee).

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060117/a7a43cc6/attachment.pgp
From paul-lists at perforge.com  Tue Jan 17 10:34:25 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue Jan 17 11:34:40 2006
Subject: [Twisted-web] Good ROM tool ?
References: <20060117155625.26200.337530353.divmod.quotient.1447@ohm>
Message-ID: <15d701c61b8c$430b8e40$6402a8c0@dcore>


----- Original Message ----- 
From: <glyph@divmod.com>
To: "Twisted Web World" <twisted-web@twistedmatrix.com>
Sent: Tuesday, January 17, 2006 10:56 AM
Subject: Re: [Twisted-web] Good ROM tool ?


> On Tue, 17 Jan 2006 06:03:49 -0500, Paul G <paul-lists@perforge.com> 
> wrote:
>
>>however, from a business risk perspective, what happens if divmod goes 
>>away?
>
> Man, this kind of FUD is so 1990s.  I thought about a lot of different 
> ways to respond to this, but I think the best one is:
>
> "Good thing that Lucid is still in the Fortune 500 or all those LEmacs 
> users would be *screwed*."

see, this is exactly what i didn't want to happen. i like 
twisted/nevow/$project_in_twisted_ecosphere and appreciate the work done on 
it. i didn't go writing what i did of my own volition, with no context, just 
looking to stir up some trouble - i responded to a specific statement. i 
believe that reasonable people can agree to disagree on holding reasonable 
views. i don't see that my risk analysis, wrt my own situation, is 
unreasonable. i certainly resent the implication that i've posted with an 
ulterior goal of getting everybody to avoid $project. i should've just kept 
my mout shut, because any statements on the topic are just begging to be 
misconstrued.

-p 


From andrea at cpushare.com  Tue Jan 17 11:58:56 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 17 12:59:03 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <20060117170218.GC335@divmod.com>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore>
	<20060117140128.GG19010@opteron.random>
	<20060117170218.GC335@divmod.com>
Message-ID: <20060117185856.GM19010@opteron.random>

On Tue, Jan 17, 2006 at 06:02:18PM +0100, Valentino Volonghi wrote:
> Of course IMHO this is not enough of a reason to avoid nevow. First of all
> citing nevow as fragile is unfair. You said yourself that you haven't had to
> change your code since version 0.3. And now you state that it's fragile.

Formless and most of the nevow api is fragile since it has been declared
obsoleted already (web2 seems to replace a good part of it already), and
yet I already get obsolete warnings in formless code (even despite your
intention is to drop it). All this even ignoring the epsilon pointless
dependency and atop that don't matter much to me.

I've fallen in the trap once with formless, some people likely fallen in
the atop trap (thankfully I avoided it so it's only a web GUI breakage
for me), I can't take risks anymore, I've to take the obvious route
since I can't affor the cost of forking off a project, nor the risk of
keeping porting at every new breakage of the divmod APIs.

Plus nevow has lots of inefficiencies inside (I posted the profiling a
few times, most of the time is spent in the interfaces code), so going
to something lighter and faster without interfaces bloat has some
advantage too, even if it means writing more code. I'll let you know if
performance changes are visible.

Changes like from rend.notFound to Null (like the porting from nevow
to web2 of some of my code) are not a problem for me. The problem for me
is having to rewrite from scratch stuff, without any change of a
readable diff. If the diff is readable, it's quick as well to verify
there are no bugs introduced.

That's what happened with formless (and atop), so I can't let it happen
anymore, even if that means living at a lower layer and generating the
html by hand or with Cheetah (like if i was running on top of cherrpy
instead of twisted). I'll still try to use twisted async model with
Cheetah. Since I don't depend on nevow for the html generation anymore,
I can as well plug my code right on top of web2. (in the short term of
course I'll keep using nevow on twisted.web, going on top of web2 is the
mid term plan, first I'll port klive to it that is easier since there
are no forms at all and no guard too) Hopefully after web2 will start to
stabilize, its API will live long.

From andrea at cpushare.com  Tue Jan 17 12:06:03 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 17 13:06:10 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <43CD1FC7.4020508@pollenation.net>
References: <149401c61b55$b253e310$6402a8c0@dcore>
	<20060117155625.26200.337530353.divmod.quotient.1447@ohm>
	<20060117162431.GL19010@opteron.random>
	<43CD1FC7.4020508@pollenation.net>
Message-ID: <20060117190603.GN19010@opteron.random>

On Tue, Jan 17, 2006 at 04:48:07PM +0000, Matt Goodall wrote:
> the community, of course) is that if an organisation goes down or just
> decides they don't want to support a product anymore then all is not lost.

This only works when the product has a critical mass of users, if the
world would be using nevow and atop, and nevow and atop were in the
twistedmatrix.com repository controlled by the community, it would be a
safer decision to depend on them. But if you're the only user of formless
(or atop) and you can't or don't want to maintain it yourself, you're
screwed. This is why I believe twisted.web2 and Cheetah are much safer
dependencies than nevow (and I hope this time I will have a chance for
my code to keep working for more than 1 year before getting deprecation
warnings that I already get with nevow for example).

From dialtone at divmod.com  Tue Jan 17 12:54:05 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Jan 17 13:54:52 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <20060117185856.GM19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore>
	<20060117140128.GG19010@opteron.random>
	<20060117170218.GC335@divmod.com>
	<20060117185856.GM19010@opteron.random>
Message-ID: <20060117195405.GE335@divmod.com>

On Tue, Jan 17, 2006 at 07:58:56PM +0100, Andrea Arcangeli wrote:
> Formless and most of the nevow api is fragile since it has been declared
> obsoleted already (web2 seems to replace a good part of it already), and
> yet I already get obsolete warnings in formless code (even despite your
> intention is to drop it). All this even ignoring the epsilon pointless
> dependency and atop that don't matter much to me.

Notice that formless is a pretty special case. And the change from formless to
something else (forms) is _VERY_ simple and removes quite a lot of
limitations, although output customization is still missing. The intention is
to rewrite formless on top of forms and in a better way.

There is no pointless epsilon dependency because Nevow doesn't depend on
epsilon.

> I've fallen in the trap once with formless, some people likely fallen in
> the atop trap (thankfully I avoided it so it's only a web GUI breakage
> for me), I can't take risks anymore, I've to take the obvious route
> since I can't affor the cost of forking off a project, nor the risk of
> keeping porting at every new breakage of the divmod APIs.

So, instead of rewriting one little portion of the application (the forms) to
use something else you rewrite the entire application in something completely
different (and in heavy development like web2 is).

Also Nevow development is not lead by Divmod. There are quite a few people
developing it in various ways. Divmod is one of them and they are also hosting
Divmod in their repository. If we are to drop formless that's because it is
not as good as _we_ (developers) wanted it to be.

Don't blame always Divmod.

> Plus nevow has lots of inefficiencies inside (I posted the profiling a
> few times, most of the time is spent in the interfaces code), so going
> to something lighter and faster without interfaces bloat has some
> advantage too, even if it means writing more code. I'll let you know if
> performance changes are visible.

Part of the reasons why we want to remove the context is to avoid some of
those inefficiencies. This being said: you are using the king of interface
bloat also called Formless and you are also complaining about it being changed
(and we changed it because of interface bloat). Again: you are complaining
about a change in the direction that you like best - avoiding interfaces as
much as possible for things that they are not meant to.

> Changes like from rend.notFound to Null (like the porting from nevow
> to web2 of some of my code) are not a problem for me. The problem for me
> is having to rewrite from scratch stuff, without any change of a
> readable diff. If the diff is readable, it's quick as well to verify
> there are no bugs introduced.

Changes between web2 and Nevow are quite big. If you think the only change is
that one then you are not using web2 at all.

And diffs are not useful to understand if code is broken. Tests are.

> That's what happened with formless (and atop), so I can't let it happen
> anymore, even if that means living at a lower layer and generating the
> html by hand or with Cheetah (like if i was running on top of cherrpy
> instead of twisted). I'll still try to use twisted async model with
> Cheetah. Since I don't depend on nevow for the html generation anymore,
> I can as well plug my code right on top of web2. (in the short term of
> course I'll keep using nevow on twisted.web, going on top of web2 is the
> mid term plan, first I'll port klive to it that is easier since there
> are no forms at all and no guard too) Hopefully after web2 will start to
> stabilize, its API will live long.

If you think web2 will stabilize shortly you are making a bet. web2 has been
under development for quite some time (at least as much forms has been) and
the API has been changed during the development.
Please notice that I'm not criticizing your move away from Nevow or
twisted.web since I personally don't care that much. I'm criticizing the fact
that you say Nevow/Formless is fragile and yet you move to a more fragile API
betting that soon it will stabilize. web2 changed API quite a lot in the last
month (for example by removing the context).

Then your main concern with Nevow is formless, but klive has no forms at all
as you say and has no authentication. So basically your app will and does work
at least for quite some time in the foreseeable future without modifications,
but you are rewriting it from scratch.

I think there are some contraddictions and you are overreacting.

Just a note at the end: Remember that I warned you against using formless
because it wasn't the right tool for the job (and I've been warning tons of
people wanting to use formless).

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060117/81f46195/attachment.pgp
From nico at tekNico.net  Tue Jan 17 13:22:41 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Tue Jan 17 14:24:27 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <20060117170218.GC335@divmod.com>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>	<149401c61b55$b253e310$6402a8c0@dcore>	<20060117140128.GG19010@opteron.random>
	<20060117170218.GC335@divmod.com>
Message-ID: <dqjjmh$lqd$1@sea.gmane.org>

> To be honest I'd rather be plagued with termites rather than writing Cheetah
> templates. But this is just me.

No, me too.

-- 
Nicola Larosa - http://www.tekNico.net/

Welcome to the *real* Web 2.0. Now shut up and buy some stuff.
 -- Richard S. Tallent, II, November 2005


From andrea at cpushare.com  Tue Jan 17 14:08:52 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 17 15:09:00 2006
Subject: [Twisted-web] Good ROM tool ?
In-Reply-To: <20060117195405.GE335@divmod.com>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore>
	<20060117140128.GG19010@opteron.random>
	<20060117170218.GC335@divmod.com>
	<20060117185856.GM19010@opteron.random>
	<20060117195405.GE335@divmod.com>
Message-ID: <20060117210852.GO19010@opteron.random>

On Tue, Jan 17, 2006 at 08:54:05PM +0100, Valentino Volonghi wrote:
> Also Nevow development is not lead by Divmod. There are quite a few people
> developing it in various ways. Divmod is one of them and they are also hosting

The only ones not inside divmod that comes to mind are Matt and you. Two
people doesn't define as critical mass (following the Lucid example).

> Divmod in their repository. If we are to drop formless that's because it is
> not as good as _we_ (developers) wanted it to be.

This is the problem: since there are nearly no users, only the developers
matters.

> Changes between web2 and Nevow are quite big. If you think the only change is
> that one then you are not using web2 at all.

I've klive running on top of web2 already, I see the *whole* difference,
the deferreds are the most painful thing since Cheetah doesn't
understand them, so I've to s.write() by hand after every query is
complete, and I can use templates only for the tables (which is after
all the only place where I need the templates). I could use templates
for the normal pages too, but then I'd need to use #block #end. Perhaps
I can teach Cheetah how to handle the stream + deferreds. That would be
more than enough for me to be really confortable, but even current
Cheetah is ok, since the only place where I the templates makes my life
easier is the rendering of the tables.

> And diffs are not useful to understand if code is broken. Tests are.

Disagree, diffs auditing is by far the most important thing for me when
moving to a new api. Test are useful too, since they verify that web2
had no regression after the change.

> that you say Nevow/Formless is fragile and yet you move to a more fragile API
> betting that soon it will stabilize. web2 changed API quite a lot in the last
> month (for example by removing the context).

Removing the context is a trivial change, compared to change of the html
rendering of all forms. KLive homepage already runs under web2, all the
time was wasted in the changes of the html rendering, almost zero time
to rename ctx to req.

> Then your main concern with Nevow is formless, but klive has no forms at all
> as you say and has no authentication. So basically your app will and does work
> at least for quite some time in the foreseeable future without modifications,
> but you are rewriting it from scratch.

I'm porting it, it's not a rewrite from scratch. I'm starting with KLive
exactly because it nearly doesn't use nevow except for the rendering
that I'm going to replace with Cheetah. No need of reinventing
wheels with nevow for the rendering of the tables when Cheetah has large
userbase.

This way I learn the web2 API, then I can start rewriting the forms and
port CPUShare to web2 as well. The only thing I have to rewrite from
scratch are the forms, and there's no way around it. Once I start
touching that code, for sure I won't take risks anymore.

One thing I'm interested about is to have a guard in web2, that's a
piece of code I'd rather contribute to web2 than to keep local.

> Just a note at the end: Remember that I warned you against using formless
> because it wasn't the right tool for the job (and I've been warning tons of
> people wanting to use formless).

I take the blame for using formless, I'm sure not blaming anyone else.

Thanks.

From paul-lists at perforge.com  Tue Jan 17 17:14:03 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue Jan 17 18:14:13 2006
Subject: [Twisted-web] Re: Good ROM tool ?
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>	<149401c61b55$b253e310$6402a8c0@dcore>	<20060117140128.GG19010@opteron.random><20060117170218.GC335@divmod.com>
	<dqjjmh$lqd$1@sea.gmane.org>
Message-ID: <16b801c61bc4$173d2160$6402a8c0@dcore>


----- Original Message ----- 
From: "Nicola Larosa" <nico@tekNico.net>
To: <twisted-web@twistedmatrix.com>
Sent: Tuesday, January 17, 2006 3:22 PM
Subject: [Twisted-web] Re: Good ROM tool ?


>> To be honest I'd rather be plagued with termites rather than writing 
>> Cheetah
>> templates. But this is just me.
>
> No, me too.

care to enlighten me, since i have not yet seen the pain? valentino, you're 
very welcome to chime in too. help me save me from myself ;)

-p 


From andrea at cpushare.com  Tue Jan 17 19:56:41 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 17 20:56:49 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <16b801c61bc4$173d2160$6402a8c0@dcore>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqjjmh$lqd$1@sea.gmane.org>
	<16b801c61bc4$173d2160$6402a8c0@dcore>
Message-ID: <20060118025641.GP19010@opteron.random>

On Tue, Jan 17, 2006 at 07:14:03PM -0500, Paul G wrote:
> care to enlighten me, since i have not yet seen the pain? valentino, you're 
> very welcome to chime in too. help me save me from myself ;)

I just finished porting klive from nevow to web2+Cheetah and the
homepage takes exactly half the time to render... that speaks for how
much nevow templating implementation is inefficient compared to Cheetah.
The main downside is that now it's up to me to handle the chain of
deferred, Cheetah don't speak deferreds. So I call stream.write() after
each block-rendering is finished. I'm using #block blockname #end block
for that, so I load the template only once at the first invocation of
render(req) and then I fill it over time when the deferred fires. The
bonus is that the templates are now smaller than with nevow because
Cheetah is a lot more flexible than nevow. Perhaps in the future we can
teach Cheetah how to handle deferreds.

I'm going to keep testing KLive on web2 for a while (web2 is already
online, so we also test if web2 from trunk is going well, the traffic on
klive site is reasonable).

Then once there is an agreement that the API of web2 is remotely stable,
I'll start porting CPUShare on top of web2 as well. In the meantime I'll
leave CPUShare on top of nevow in a freezed-obsolete state, the web side
is the least interesting part of CPUShare anyway, and I want to finish
the network protocol before rewriting all forms and templates with
Cheetah.

Note: I'm fine to break the web2 API over time, I'm fine to change API
for good reasons, but breaking an API is quite different from obsoleting
an whole subsystem (like formless/atop). Obsoleting whole subsystems is
what requires deep rewrites, breaking apis often is fine thing to handle
and I'm very ready to handle it (or I wouldn't be porting on top of
web2 ;).

With web2 I still have to fixup the log (it stopped loggin) and the
revese proxy (including peer information forwarding, something I added
to twisted.web but not to twisted.web2 yet). So I'll do that next.

From andrea at cpushare.com  Tue Jan 17 22:42:46 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Jan 17 23:42:54 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <20060118025641.GP19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqjjmh$lqd$1@sea.gmane.org>
	<16b801c61bc4$173d2160$6402a8c0@dcore>
	<20060118025641.GP19010@opteron.random>
Message-ID: <20060118054246.GQ19010@opteron.random>

On Wed, Jan 18, 2006 at 03:56:41AM +0100, Andrea Arcangeli wrote:
> to twisted.web but not to twisted.web2 yet). So I'll do that next.

I did quite an hack to avoid having to update the reverse proxy on the
other end (my modified twisted.web reverse proxy):

class myvhost(object):
	from zope.interface import implements
	from twisted.web2 import iweb
	implements(iweb.IResource)

	def __init__(self, uri, res, web_port):
		self.res = res
		self.scheme = 'http'
		self.host = 'klive.cpushare.com'
		self.port = web_port

	def renderHTTP(self, req):
		return http.Response(responsecode.NOT_FOUND)

	def locateChild(self, req, segments):
		req.scheme = self.scheme
		req.host = self.host
		req.port = self.port

		if not req.prepath and segments[0] == 'vhost':
			host, port = segments[3].split(':')
			class remote(object):
				def __init__(self, host, port):
					from twisted.internet import address
					self.client = address.IPv4Address("TCP", host, int(port))
				def getRemoteHost(self):
					return self.client
			req.chanRequest.getRemoteHost = remote(host,port).getRemoteHost
			cut_len = len('/'.join(segments[:4])) + 1
			req.uri = req.uri[cut_len:]
			req.path = req.path[cut_len:]
			segments = segments[4:]

		return self.res, segments

Cheetah over web2 is all productive online at klive.cpushare.com, it's a
100% complete port of the nevow version, nothing is missing and it
works fine so far but at more than twice the speed that nevow rendered
it (2 sec vs 5 sec). If there are problems with web2 I'll let you know.
Pratically now all time is spent in the db... this is really good, the
nevow performance bottlenecks I reported in the past are all gone.

I'll wait quite a bit before moving CPUShare to Cheetah+web2 (CPUShare
web side is just the boring part, it's not really important as long as I
know I've a safe mid term exit path with web2+Cheetah that I'm currently
exercising with klive), but I'll move it too as soon as I feel web2 sort
of stabilized (breakages that don't require full rewrites will always be
fine of course).

Could somebody suggest the best way to solve the reverse proxy sanely in
web2?

Notably we must allow the remote IP to be passed through the proxy (the
autorewrite class already contemplated it but it was never implemented).
Currently I'm sending it down with a string prefix like
"/vhost/http/klive.cpushare.com/xx.xx.xx.xx:yyy/". I guess getRemoteHost
need changes for this, my one is a true hack....

Also please keep the web2 related discussions CC'ed to the list, not
everyone has time to spend on IRC.

If you want to see how to replace nevow with Cheetah for the templates
and how to plug on top of web2 (svn trunk), you can compare the diff
between klive-0.17.tar.bz2 and klive-0.18.tar.bz2. Cheetah is a breath
of fresh air and web2 looks nice too. BTW, stuff like the below could
really go in shared code.

class AccessLoggingObserver(log.BaseCommonAccessLoggingObserver):
	def __init__(self, logpath):
		self.f = file(logpath, 'a')

	def logMessage(self, message):
		self.f.write(message + '\n')
		self.f.flush()


Thanks!

From andrea at cpushare.com  Tue Jan 17 23:19:18 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 18 00:19:28 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <dqjjmh$lqd$1@sea.gmane.org>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore>
	<20060117140128.GG19010@opteron.random>
	<20060117170218.GC335@divmod.com> <dqjjmh$lqd$1@sea.gmane.org>
Message-ID: <20060118061918.GR19010@opteron.random>

On Tue, Jan 17, 2006 at 09:22:41PM +0100, Nicola Larosa wrote:
> > To be honest I'd rather be plagued with termites rather than writing Cheetah
> > templates. But this is just me.
> 
> No, me too.

As a matter of fact it's an order of magnitude faster in the rendering,
it's more flexible, it follows the library approach (it doesn't force an
API on you, it's always you calling Cheetah, not Cheetah calling in your
code, very great bonus for flexibility and to be able to guarantee
performance in hot paths), it's simpler to use too and it has a much
larger userbase. Only donwside is that porting nevow code to it takes
some time, and it doesn't understand deferreds, so one has to use
#block and render each piece separately as the deferred fires. But the
deferred bit could be improved by making a real integration. Or you can
defertothread the whole thing and use pgasync or other sync libs without
using deferreds at all (performance should be still similar to
mod_python even if you create one thread per connection).

From paul-lists at perforge.com  Tue Jan 17 23:39:51 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed Jan 18 00:40:05 2006
Subject: [Twisted-web] Re: Good ROM tool ?
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net><149401c61b55$b253e310$6402a8c0@dcore><20060117140128.GG19010@opteron.random><20060117170218.GC335@divmod.com>
	<dqjjmh$lqd$1@sea.gmane.org>
	<20060118061918.GR19010@opteron.random>
Message-ID: <17c601c61bf9$fd46a570$6402a8c0@dcore>


----- Original Message ----- 
From: "Andrea Arcangeli" <andrea@cpushare.com>
To: "Twisted Web World" <twisted-web@twistedmatrix.com>
Sent: Wednesday, January 18, 2006 1:19 AM
Subject: Re: [Twisted-web] Re: Good ROM tool ?


> On Tue, Jan 17, 2006 at 09:22:41PM +0100, Nicola Larosa wrote:
>> > To be honest I'd rather be plagued with termites rather than writing 
>> > Cheetah
>> > templates. But this is just me.
>>
>> No, me too.
>
> As a matter of fact it's an order of magnitude faster in the rendering,
> it's more flexible, it follows the library approach (it doesn't force an
> API on you, it's always you calling Cheetah, not Cheetah calling in your
> code, very great bonus for flexibility and to be able to guarantee
> performance in hot paths), it's simpler to use too and it has a much
> larger userbase....

all of these are, quite possibly, valid arguments. with that said, i'd like 
to suggest that we might benefit from positive discussion best going 
forward. personally, i think there have been a few too many 
$some-twisted-thing sucks posts here recently (i may have contributed one, i 
think, due to a momentary lapse in judgement). while such discussions, if 
they remain constructive, certainly have their place, if the overall balance 
of positivity on a dev list is not maintained, things usually go downhill 
fast in my experience. folks doing open source work need to keep themselves 
motivated to work on their projects after a hard day on the job, for 
example, and the overall tone might matter to some of them in that respect.

i do not presume to tell anyone what to do, mind you, just a suggestion from 
my end.

-p 


From nico at tekNico.net  Wed Jan 18 00:49:42 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed Jan 18 01:50:06 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <16b801c61bc4$173d2160$6402a8c0@dcore>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>	<149401c61b55$b253e310$6402a8c0@dcore>	<20060117140128.GG19010@opteron.random><20060117170218.GC335@divmod.com>	<dqjjmh$lqd$1@sea.gmane.org>
	<16b801c61bc4$173d2160$6402a8c0@dcore>
Message-ID: <dqkrun$ari$1@sea.gmane.org>

dialtone:
>>> To be honest I'd rather be plagued with termites rather than writing
>>> Cheetah templates. But this is just me.

tekNico:
>> No, me too.

Paul G:
> care to enlighten me, since i have not yet seen the pain? valentino,
> you're very welcome to chime in too. help me save me from myself ;)

Look at this:

http://www.cheetahtemplate.org/examples.html

Sure, Cheetah is cleaner than PSP, but it still mixes syntax elements with
text, and I really dislike it. If I want to generate any kind of text while
keeping Python syntax, I'll use Quixote's PTLs:

http://www.mems-exchange.org/software/quixote/Quixote-2.4.tar.gz/Quixote-2.4/doc/PTL.html

On the other hand, for XHTML templating, I prefer having hooks in
attributes, as Nevow and Zope's ZPT do:

http://divmod.org/trac/browser/trunk/Nevow/examples/table/tablehtml.html

http://zpt.sourceforge.net/

-- 
Nicola Larosa - http://www.tekNico.net/

You asked about my "path to world domination". Well, I guess I want
the whole world to be like the Oberlin CS Lab was: a sharing community
where people assume that improving the system is within anyone's reach.
 -- Karl Fogel, November 2005


From paul-lists at perforge.com  Wed Jan 18 01:25:03 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed Jan 18 02:25:45 2006
Subject: [Twisted-web] Re: Good ROM tool ?
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>	<149401c61b55$b253e310$6402a8c0@dcore>	<20060117140128.GG19010@opteron.random><20060117170218.GC335@divmod.com>	<dqjjmh$lqd$1@sea.gmane.org><16b801c61bc4$173d2160$6402a8c0@dcore>
	<dqkrun$ari$1@sea.gmane.org>
Message-ID: <17eb01c61c08$c231af70$6402a8c0@dcore>


----- Original Message ----- 
From: "Nicola Larosa" <nico@tekNico.net>
To: <twisted-web@twistedmatrix.com>
Sent: Wednesday, January 18, 2006 2:49 AM
Subject: [Twisted-web] Re: Good ROM tool ?


> dialtone:
>>>> To be honest I'd rather be plagued with termites rather than writing
>>>> Cheetah templates. But this is just me.
>
> tekNico:
>>> No, me too.
>
> Paul G:
>> care to enlighten me, since i have not yet seen the pain? valentino,
>> you're very welcome to chime in too. help me save me from myself ;)
>
> Look at this:
>
> http://www.cheetahtemplate.org/examples.html
>
> Sure, Cheetah is cleaner than PSP, but it still mixes syntax elements with
> text, and I really dislike it.

--- snip ---

>On the other hand, for XHTML templating, I prefer having hooks in
> attributes

ah, this appears to be a perfectly valid difference of opinion then. i 
certainly find that it is reasonable (and expedient) to have presentation 
logic in a template - cheetah isn't designer friendly enough to let a 
designer loose on it, but i could definitely get a php monkey to update the 
template instead of having a dev fudge with it. you seem to want any sort of 
code out of there, which is a perfectly reasonable preference as well.

thank you for your input, it is much appreciated.

-p 


From andrea at cpushare.com  Wed Jan 18 09:25:38 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 18 10:25:47 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <17eb01c61c08$c231af70$6402a8c0@dcore>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqkrun$ari$1@sea.gmane.org>
	<17eb01c61c08$c231af70$6402a8c0@dcore>
Message-ID: <20060118162538.GV19010@opteron.random>

On Wed, Jan 18, 2006 at 03:25:03AM -0500, Paul G wrote:
> ah, this appears to be a perfectly valid difference of opinion then. i 
> certainly find that it is reasonable (and expedient) to have presentation 
> logic in a template - cheetah isn't designer friendly enough to let a 
> designer loose on it, but i could definitely get a php monkey to update the 
> template instead of having a dev fudge with it. you seem to want any sort 
> of code out of there, which is a perfectly reasonable preference as well.

I can make an example, to render the CPUShare book I had to write this
code (thanks a lot to Valentino for the help, or I wouldn't even get
this far by myself):

	def render_book_composite(self, ctx, data):
		ptrn_bid = inevow.IQ(ctx).patternGenerator('book_sequence_bid')
		ptrn_ask = inevow.IQ(ctx).patternGenerator('book_sequence_ask')
		return ctx.tag[[ tags.tr(_class="book_outside")
				 [tags.td(_class="book_outside")[ptrn_bid(data=(x[0], x[1], x[2]))],
				  tags.td(_class="book_outside")[ptrn_ask(data=(x[0], x[3], x[4]))]]
				 for x in data ]]
	def render_book_sequence(self, ctx, data): 
		'This is the same as "sequence" but uses data[1] instead of data'
		tag = ctx.tag
		headers = tag.allPatterns('header')
		pattern = tag.patternGenerator('item')
		divider = tag.patternGenerator('divider', default=tags.invisible)
		content = [(pattern(data=element), divider(data=element)) for element in data[2]]
		if not content:
			content = tag.allPatterns('empty')
		else:
			## No divider after the last thing.
			content[-1] = content[-1][0]
		footers = tag.allPatterns('footer')

		return tag.clear()[ headers, content, footers ]
	def render_book_header(self, ctx, data):
		currency = data[0]
		nr_orders = data[1]
		ctx.fillSlots('currency', currency)
		nr_orders_str = '%d Order' % nr_orders
		if nr_orders != 1:
			nr_orders_str += 's'
		if nr_orders > BOOK_SIZE:
			nr_orders_str += ' (%d not shown)' % (nr_orders-BOOK_SIZE)
		ctx.fillSlots('nr_orders', nr_orders_str)
		return ctx.tag

If you find the above readable after 1 day, then it means you've a very
good memory and you only work on Nevow, I work on a moltitude of
different projects so there's no way I can know exactly what the
patternGenerator does or other subtle details with allPatterns,
inevow.IQ etc...  Plus the code renders slow (no surprise given all
those inevow.* and tags.pattern*).

As soon as I rewrite the whole thing with Cheetah it'll be like this!!

#for $currency in $currencies
	<table>
#for $entry in $currency
		<table>
[..]
		<td>$entry.something</td>
[..]
		</table>
#end for
	</table>
#end for

It's obvious what is an order of magnitude more readable... There's no
chance I may not be able to understand the above, with Cheetah one
doesn't need to be a nevow hacker to render two nested tables.

As said yesterday it's a breath of fresh air being able to get full
flexibility with full python control mixed with html, without having to
call into obscure things like nevow.IQ. If you prefer the nevow version
of rendering nested tables, I think you must be a nevow developer, no
mere mortal out there could ever prefer the nevow version if compared to
the Cheetah version.

Also note, I'm recompiling the templates every time, the same way nevow
parses xml every time. There's also the option to precompile them to get
even high perf, but since I can't measure any slowdown in the rendering
anymore (it's already a lot faster than nevow), there's no point for me
to precompile the templates right now.

The most painful thing of porting CPUShare to web2+Cheetah will be the
authentication with secure cookie... I still don't know if others are
working to create a guard on web2.

On the long term techning Cheetah how to handle a deferred would be
cool.

BTW, twisted.web2 is working like a charm on klive.cpushare.com, keep up
the great work Twisted developers! ;)

From dialtone at divmod.com  Wed Jan 18 10:40:08 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed Jan 18 11:42:31 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <20060118162538.GV19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqkrun$ari$1@sea.gmane.org>
	<17eb01c61c08$c231af70$6402a8c0@dcore>
	<20060118162538.GV19010@opteron.random>
Message-ID: <20060118174008.GB28841@divmod.com>

On Wed, Jan 18, 2006 at 05:25:38PM +0100, Andrea Arcangeli wrote:

> 	def render_book_composite(self, ctx, data):
> 		ptrn_bid = inevow.IQ(ctx).patternGenerator('book_sequence_bid')
> 		ptrn_ask = inevow.IQ(ctx).patternGenerator('book_sequence_ask')
> 		return ctx.tag[[ tags.tr(_class="book_outside")
> 				 [tags.td(_class="book_outside")[ptrn_bid(data=(x[0], x[1], x[2]))],
> 				  tags.td(_class="book_outside")[ptrn_ask(data=(x[0], x[3], x[4]))]]
> 				 for x in data ]]
> 	def render_book_sequence(self, ctx, data): 
> 		'This is the same as "sequence" but uses data[1] instead of data'
> 		tag = ctx.tag
> 		headers = tag.allPatterns('header')
> 		pattern = tag.patternGenerator('item')
> 		divider = tag.patternGenerator('divider', default=tags.invisible)
> 		content = [(pattern(data=element), divider(data=element)) for element in data[2]]
> 		if not content:
> 			content = tag.allPatterns('empty')
> 		else:
> 			## No divider after the last thing.
> 			content[-1] = content[-1][0]
> 		footers = tag.allPatterns('footer')
> 
> 		return tag.clear()[ headers, content, footers ]
> 	def render_book_header(self, ctx, data):
> 		currency = data[0]
> 		nr_orders = data[1]
> 		ctx.fillSlots('currency', currency)
> 		nr_orders_str = '%d Order' % nr_orders
> 		if nr_orders != 1:
> 			nr_orders_str += 's'
> 		if nr_orders > BOOK_SIZE:
> 			nr_orders_str += ' (%d not shown)' % (nr_orders-BOOK_SIZE)
> 		ctx.fillSlots('nr_orders', nr_orders_str)
> 		return ctx.tag
> 
> If you find the above readable after 1 day, then it means you've a very
> good memory and you only work on Nevow, I work on a moltitude of
> different projects so there's no way I can know exactly what the
> patternGenerator does or other subtle details with allPatterns,
> inevow.IQ etc...  Plus the code renders slow (no surprise given all
> those inevow.* and tags.pattern*).

I agree the code above is ugly, today I wouldn't write it that way of course.
Since I don't remember your constraints I can't comment too much on the code
above. Besides one thing:

I've been rather dumb with the code above to be honest.

data[2] can be done pretty easily with:

<tr nevow:pattern="item">
    <td nevow:data="2" nevow:render="blabla" />
</tr>

One thing that I remember though was the constraint on having a renderer to
generate the book_header because you didn't want to repeat the html for the 3
currencies (something that any designer would do to style the page in the
right way). There is a much better way to deal with that problem and it's the
way you used below for cheetah:

<table nevow:data="currencies">
    <tr nevow:render="sequence">
        <td nevow:pattern="item">
            <table nevow:render="sequence">
                <tr nevow:pattern="item">
                    <td nevow:data="0" nevow:render="data" />
                    <td nevow:data="1" nevow:render="data" />
                    <td nevow:data="2" nevow:render="data" />
                    ...
                </tr>
            </table>
        </td>
    </tr>
</table>

> As soon as I rewrite the whole thing with Cheetah it'll be like this!!
> 
> #for $currency in $currencies
> 	<table>
> #for $entry in $currency
> 		<table>
> [..]
> 		<td>$entry.something</td>
> [..]
> 		</table>
> #end for
> 	</table>
> #end for

> It's obvious what is an order of magnitude more readable... There's no
> chance I may not be able to understand the above, with Cheetah one
> doesn't need to be a nevow hacker to render two nested tables.

As I showed the code here is translated with the simple yet more flexible
template above. With a bit more work (like returning a dictionary from the
query instead of a list) it could become:


<table nevow:data="currencies">
    <tr nevow:render="sequence">
        <td nevow:pattern="item">
            <table nevow:render="sequence">
                <tr nevow:pattern="item" nevow:render="mapping">
                    <td><nevow:slot name="first_column" /></td>
                    <td><nevow:slot name="second_column" /></td>
                    <td><nevow:slot name="third_column" /></td>
                    <td><nevow:slot name="fourth_column" /></td>
                    <td><nevow:slot name="fifth_column" /></td>
                </tr>
            </table>
        </td>
    </tr>
</table>

Which would be even faster thanks to using only one render instead of 4/5
(which means only 1 python function call, which is what is slow).

> As said yesterday it's a breath of fresh air being able to get full
> flexibility with full python control mixed with html, without having to
> call into obscure things like nevow.IQ. If you prefer the nevow version
> of rendering nested tables, I think you must be a nevow developer, no
> mere mortal out there could ever prefer the nevow version if compared to
> the Cheetah version.

The nevow way of rendering nested tables is the one above. The one I gave you
a year ago does something wrong (or it does that in face of some kind of
constraint).

And yes, Nevow is not perfect. Now you are starting insulting the others' work
just because you haven't been able to understand it at all. We are friends and
I don't think my work (but not only mine) deserves such a bad judgement. First
of all if you think you can do better then do it, and after if you don't like
Nevow then fine, but your recent rants seem to grow from something else than
technical problems. See? That's exactly why after some point, and I speak for
myself, I stop caring for users. This is something that happens to me daily
with both twisted and Nevow and others, I don't have the time to care for all
the users complaining because they want X or Y and/or because they don't like
Z. Nobody is paying me to work for them on what they want, I have a job,
university to finish and some free time that I want to preserve. If you
disagree then step in or pay some of us to work on
twisted/nevow/something_else otherwise then you should have made some
library/framework evaluation before starting with your life's project and you
can't blame anyone because you made that evaluation wrong even if you are now
frustrated.

> Also note, I'm recompiling the templates every time, the same way nevow
> parses xml every time. There's also the option to precompile them to get
> even high perf, but since I can't measure any slowdown in the rendering
> anymore (it's already a lot faster than nevow), there's no point for me
> to precompile the templates right now.

And now we start with FUD. Just to show you don't actually understand nevow
you are saying something plain false. Nevow never recompiles templates unless
you modify them. It parses and precompiles templates once.

> On the long term techning Cheetah how to handle a deferred would be
> cool.

And impossible if Cheetah is not extremely well designed (by impossible I mean
more work than outcome is worth).

Now to put an end to this: I don't think I'll have the time to keep answering
in this thread, both because I've lost any interest in this thread and because
It's clear that you simply don't like Nevow which is fine, but I beg you not
to spread any more FUD.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060118/d5d8cefc/attachment.pgp
From nico at tekNico.net  Wed Jan 18 10:42:44 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed Jan 18 11:43:48 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <20060118162538.GV19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>	<149401c61b55$b253e310$6402a8c0@dcore>
	<dqkrun$ari$1@sea.gmane.org>	<17eb01c61c08$c231af70$6402a8c0@dcore>
	<20060118162538.GV19010@opteron.random>
Message-ID: <dqlun2$els$1@sea.gmane.org>

> As said yesterday it's a breath of fresh air being able to get full
> flexibility with full python control mixed with html, without having to
> call into obscure things like nevow.IQ.

It bears repeating, you may want to try Quixote's PTLs.

-- 
Nicola Larosa - http://www.tekNico.net/

You asked about my "path to world domination". Well, I guess I want
the whole world to be like the Oberlin CS Lab was: a sharing community
where people assume that improving the system is within anyone's reach.
 -- Karl Fogel, November 2005


From dreid at dreid.org  Wed Jan 18 14:24:26 2006
From: dreid at dreid.org (David Reid)
Date: Wed Jan 18 15:11:08 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <20060118054246.GQ19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqjjmh$lqd$1@sea.gmane.org>
	<16b801c61bc4$173d2160$6402a8c0@dcore>
	<20060118025641.GP19010@opteron.random>
	<20060118054246.GQ19010@opteron.random>
Message-ID: <1137619466.3416.6.camel@audrey.local>

On Wed, 2006-01-18 at 06:42 +0100, Andrea Arcangeli wrote:
> On Wed, Jan 18, 2006 at 03:56:41AM +0100, Andrea Arcangeli wrote:
> > to twisted.web but not to twisted.web2 yet). So I'll do that next.
> 
> I did quite an hack to avoid having to update the reverse proxy on the
> other end (my modified twisted.web reverse proxy):
> 
> class myvhost(object):

I'm not sure why this code was necessary, it looks like a less generic
version of twisted.web2.vhost.VHostURIRewrite.  

> Could somebody suggest the best way to solve the reverse proxy sanely in
> web2?

Give me copious amounts of money (or cookies) to whip a client branch
into shape.

> Notably we must allow the remote IP to be passed through the proxy (the
> autorewrite class already contemplated it but it was never implemented).

Yes it was.  twisted.web2.vhost.VHostAutoURIRewrite, but the proxy needs
to give us certain headers to get the client IP this is always the case
(and trust is an issue)

> class AccessLoggingObserver(log.BaseCommonAccessLoggingObserver):
> 	def __init__(self, logpath):
> 		self.f = file(logpath, 'a')
> 
> 	def logMessage(self, message):
> 		self.f.write(message + '\n')
> 		self.f.flush()
> 

Create a patch (probably to twisted.web2.log) and submit it to the
bugtracker, assigned to either foom or dreid. (ideally with unittests)

-David


From andrea at cpushare.com  Wed Jan 18 14:16:42 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 18 15:16:50 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <20060118174008.GB28841@divmod.com>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqkrun$ari$1@sea.gmane.org>
	<17eb01c61c08$c231af70$6402a8c0@dcore>
	<20060118162538.GV19010@opteron.random>
	<20060118174008.GB28841@divmod.com>
Message-ID: <20060118211642.GA19010@opteron.random>

On Wed, Jan 18, 2006 at 06:40:08PM +0100, Valentino Volonghi wrote:
> <table nevow:data="currencies">
>     <tr nevow:render="sequence">
>         <td nevow:pattern="item">
>             <table nevow:render="sequence">
>                 <tr nevow:pattern="item">
>                     <td nevow:data="0" nevow:render="data" />
>                     <td nevow:data="1" nevow:render="data" />
>                     <td nevow:data="2" nevow:render="data" />
>                     ...
>                 </tr>
>             </table>
>         </td>
>     </tr>
> </table>

I recall I tried this but nevow can't handle nesting. Perhaps I
misunderstood. Anyway the above is certainly more complicated for me to
read and maintain than the below strightforward Cheetah syntax. I don't
want to deal with data="" render="", pattern="" render="data" anymore. I
don't even get the point why data and rendering are provided with
separate callbacks (I already told this once I recall). You may like it,
but I don't, I never did, and it's just yet another complication.

> > #for $currency in $currencies
> > 	<table>
> > #for $entry in $currency
> > 		<table>
> > [..]
> > 		<td>$entry.something</td>
> > [..]
> > 		</table>
> > #end for
> > 	</table>
> > #end for
> 
> And yes, Nevow is not perfect. Now you are starting insulting the others' work

Saying that Cheetah is much better, isn't insulting Nevow. I didn't say
Nevow is bad, I'm saying Cheetah is much better and I'm going to switch
to it completely. Nevow was the best I known until Paul made me pay
attention at Cheetah too.

> Nevow then fine, but your recent rants seem to grow from something else than
> technical problems. See? That's exactly why after some point, and I speak for

They are technical problems, I complained in the past many times about
the slow performance of nevow. This is also why I wrote those caching
patches, to try to workaround those problems.

> Z. Nobody is paying me to work for them on what they want, I have a job,
> university to finish and some free time that I want to preserve. If you
> disagree then step in or pay some of us to work on
> twisted/nevow/something_else otherwise then you should have made some
> library/framework evaluation before starting with your life's project and you
> can't blame anyone because you made that evaluation wrong even if you are now
> frustrated.

I am not blaming anyone, really. Infact I wouldn't even blame myself.
It's not your duty to maintain formless or nevow or twisted, this is a
best effort and I appreciate it. I learnt a lot from you btw, I owe you
a lot. My move away from nevow has nothing personal with anybody, it's a
technological move.

Infact if something I was sticking with nevow so long despite the
inefficiency and the complexity of its machinery also because I greatly
appreciate the help you gave me. And the main reason I was sticking with
nevow wa formless. What made my life easier wasn't nevow but formless.
Infact klive almost didn't increase in size after moving from nevow to
Cheetah. This means I was nearly not using nevow at all (except for the
templates rendering that is more efficient and IMHO much simpler with
Cheetah). So if I miss formless I can remove the dependency on nevow as
well at no additional cost (modulo the guard that IMHO belongs to web2 ;).

I quickly noticed the rendering bad performance and I posted profilings
a few times and I started to work on caching code to workaround it. I
mostly gave the blame to the interface code (all CPU time is spent
there, I measured it several times). It's not like I'm complaining only
now, I complained the performance from the day zero, and now I've fixed
it in a definitive way with Cheetah.

I understand that formless is too simple for developers to appreciate
it, you want to play the fancy AJAX, I understand that, fine with me, so
I'm already getting depreactionwarnings, and I'll soon switch to Cheetah
and web2 completely. Riding the wave of the eye-candy isn't my
objective, I want a decent look but I stay away from the new
fast-changing eye-candy technologies and effects as much as I can.
Nevow is diverging in a direction that collides with my interest.

> And now we start with FUD. Just to show you don't actually understand nevow
> you are saying something plain false. Nevow never recompiles templates unless
> you modify them. It parses and precompiles templates once.

It wasn't FUD, I was talking about Cheetah not nevow. Sorry for not
being clear. Cheetah isn't precompiled, so it re-reads them every time
(so here probably nevow is theoretically more efficient, but in practice
Cheetah renders stuff much faster even if it doesn't cache it).

> Now to put an end to this: I don't think I'll have the time to keep answering
> in this thread, both because I've lost any interest in this thread and because
> It's clear that you simply don't like Nevow which is fine, but I beg you not
> to spread any more FUD.

I'm posting this, so people that may have similar needs to mine, may
consider Cheetah as an alternative to use on top of web2. I'd like to
create a web2 + Cheetah effort with those potential users. that's one
reason of talking about it here. After all this is the twisted-web list,
it's not called twisted-nevow, so my emails on web2+Cheetah are
definitely on-topic. I'm sorry if you're not interested.

I'd like to teach Cheetah to learn what a deferred is. I think such an
effort could benefit greatly from your help and the help of the
twisted-web community. That way I could stop using #block... that would
cleanup a few lines of code away.

From andrea at cpushare.com  Wed Jan 18 14:28:10 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 18 15:28:18 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <dqlun2$els$1@sea.gmane.org>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqkrun$ari$1@sea.gmane.org>
	<17eb01c61c08$c231af70$6402a8c0@dcore>
	<20060118162538.GV19010@opteron.random>
	<dqlun2$els$1@sea.gmane.org>
Message-ID: <20060118212810.GB19010@opteron.random>

On Wed, Jan 18, 2006 at 06:42:44PM +0100, Nicola Larosa wrote:
> > As said yesterday it's a breath of fresh air being able to get full
> > flexibility with full python control mixed with html, without having to
> > call into obscure things like nevow.IQ.
> 
> It bears repeating, you may want to try Quixote's PTLs.

Thanks a lot for the tip, I appreciate. That looks quite attractive I
agree.

I believe the library approach, where the templating engine is separate
from the rest of the webserver is very nice. I want my code to run on
raw web2, then it's up to me if I render one page using Cheetah and the
next page using PTL. That way there is more flexibility and higher
performance.

From andrea at cpushare.com  Wed Jan 18 14:36:28 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 18 15:36:36 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <1137619466.3416.6.camel@audrey.local>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqjjmh$lqd$1@sea.gmane.org>
	<16b801c61bc4$173d2160$6402a8c0@dcore>
	<20060118025641.GP19010@opteron.random>
	<20060118054246.GQ19010@opteron.random>
	<1137619466.3416.6.camel@audrey.local>
Message-ID: <20060118213627.GC19010@opteron.random>

On Wed, Jan 18, 2006 at 01:24:26PM -0800, David Reid wrote:
> On Wed, 2006-01-18 at 06:42 +0100, Andrea Arcangeli wrote:
> > On Wed, Jan 18, 2006 at 03:56:41AM +0100, Andrea Arcangeli wrote:
> > > to twisted.web but not to twisted.web2 yet). So I'll do that next.
> > 
> > I did quite an hack to avoid having to update the reverse proxy on the
> > other end (my modified twisted.web reverse proxy):
> > 
> > class myvhost(object):
> 
> I'm not sure why this code was necessary, it looks like a less generic
> version of twisted.web2.vhost.VHostURIRewrite.  

Correct, the only difference (and in turn the only reason I need it) is
the getRemoteHost wrapper class I created in my code. I need the client
IP passed through the proxy. I created an API for that (I sent patches
for twisted.web). So twisted.web+nevow is now talking to twisted.web2,
and this code is allowing twisted.web2 to overwrite the peer ip address.

> > Could somebody suggest the best way to solve the reverse proxy sanely in
> > web2?
> 
> Give me copious amounts of money (or cookies) to whip a client branch
> into shape.

8) I guess the cookies could fit in my current budget ;)

> > Notably we must allow the remote IP to be passed through the proxy (the
> > autorewrite class already contemplated it but it was never implemented).
> 
> Yes it was.  twisted.web2.vhost.VHostAutoURIRewrite, but the proxy needs
> to give us certain headers to get the client IP this is always the case
> (and trust is an issue)

What branch are you looking at? I'm looking trunk and I see:

        # FIXME: remote_ip ?

this is why I said the remote IP forwarding was never implemented. It
receives it, but it does nothing with the received information.

> Create a patch (probably to twisted.web2.log) and submit it to the
> bugtracker, assigned to either foom or dreid. (ideally with unittests)

I already have to use bugtruckers for my job, why can't we just use
email? Thankfully the kernel development doesn't require patches to pass
through bugzilla and Andrew gets them by email. And this is not a bug,
it's a feature... so it should go in the featuretracker if something 8)

I'll have to learn using unittest, I appreciated the email from Andrew
B. on how to create a unittest for the caching feature (the one for
vhost will be simpler).

From paul-lists at perforge.com  Wed Jan 18 15:58:26 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed Jan 18 16:58:35 2006
Subject: [Twisted-web] Re: Good ROM tool ?
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net><149401c61b55$b253e310$6402a8c0@dcore>
	<dqkrun$ari$1@sea.gmane.org><17eb01c61c08$c231af70$6402a8c0@dcore>
	<20060118162538.GV19010@opteron.random>
Message-ID: <18a801c61c82$b1d60fc0$6402a8c0@dcore>


----- Original Message ----- 
From: "Andrea Arcangeli" <andrea@cpushare.com>
To: "Twisted Web World" <twisted-web@twistedmatrix.com>
Sent: Wednesday, January 18, 2006 11:25 AM
Subject: Re: [Twisted-web] Re: Good ROM tool ?


> On the long term techning Cheetah how to handle a deferred would be
> cool.

i've been thinking about this a bit, since i originally planned to have 
cheetah templating run in a threadpool. i don't think this makes sense - all 
changes to mutable objects are, afaik, synchronized by the gil (global 
interpreter lock - think the BKL, andrea ;), so we're synchronizing very 
heavily anyway. i'm going to benchmark running it synzhronously (with 
precompiled/preloaded templates) and  running it as a separate process, with 
pb or shm for io.

-p 


From dreid at dreid.org  Wed Jan 18 16:18:00 2006
From: dreid at dreid.org (David Reid)
Date: Wed Jan 18 17:04:40 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <20060118213627.GC19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqjjmh$lqd$1@sea.gmane.org>
	<16b801c61bc4$173d2160$6402a8c0@dcore>
	<20060118025641.GP19010@opteron.random>
	<20060118054246.GQ19010@opteron.random>
	<1137619466.3416.6.camel@audrey.local>
	<20060118213627.GC19010@opteron.random>
Message-ID: <1137626280.3416.9.camel@audrey.local>

On Wed, 2006-01-18 at 22:36 +0100, Andrea Arcangeli wrote:
> What branch are you looking at? I'm looking trunk and I see:

I'm looking at the mythical branch that I will create and apply your
patch to when you send me one. :)

-David


From paul-lists at perforge.com  Wed Jan 18 16:08:57 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed Jan 18 17:09:13 2006
Subject: [Twisted-web] Cheetah+twisted.web2
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net><149401c61b55$b253e310$6402a8c0@dcore>
	<dqjjmh$lqd$1@sea.gmane.org><16b801c61bc4$173d2160$6402a8c0@dcore><20060118025641.GP19010@opteron.random><20060118054246.GQ19010@opteron.random><1137619466.3416.6.camel@audrey.local>
	<20060118213627.GC19010@opteron.random>
Message-ID: <18d701c61c84$2da385f0$6402a8c0@dcore>


----- Original Message ----- 
From: "Andrea Arcangeli" <andrea@cpushare.com>
To: "Twisted Web World" <twisted-web@twistedmatrix.com>
Sent: Wednesday, January 18, 2006 4:36 PM
Subject: Re: [Twisted-web] Cheetah+twisted.web2



> I already have to use bugtruckers for my job, why can't we just use
> email? Thankfully the kernel development doesn't require patches to pass
> through bugzilla and Andrew gets them by email. And this is not a bug,
> it's a feature... so it should go in the featuretracker if something 8)

bugtrackers (issue trackers actually) are Good (tm). the kernel is an 
impressive effort, to be sure, but that doesn't mean that its processes port 
well to all other projects or are best for them. in our case, the ability to 
track issues and their progress in trac and assign changesets to issues when 
closing them is a huge boon.

> I'll have to learn using unittest, I appreciated the email from Andrew
> B. on how to create a unittest for the caching feature (the one for
> vhost will be simpler).

unittests are very good, as well. if only we could have unittests for the 
kernel ;)

-p 


From dreid at dreid.org  Wed Jan 18 16:25:03 2006
From: dreid at dreid.org (David Reid)
Date: Wed Jan 18 17:11:43 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <20060118212810.GB19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqkrun$ari$1@sea.gmane.org>
	<17eb01c61c08$c231af70$6402a8c0@dcore>
	<20060118162538.GV19010@opteron.random> <dqlun2$els$1@sea.gmane.org>
	<20060118212810.GB19010@opteron.random>
Message-ID: <1137626703.3416.11.camel@audrey.local>

On Wed, 2006-01-18 at 22:28 +0100, Andrea Arcangeli wrote:
> I believe the library approach, where the templating engine is separate
> from the rest of the webserver is very nice. I want my code to run on
> raw web2, then it's up to me if I render one page using Cheetah and the
> next page using PTL. That way there is more flexibility and higher
> performance.

It may be worth noting that one of the long-term goals of twisted.web2
is to allow Nevow to become just a rendering engine on top of web2.
It'll still be a framework, but it'll be a much smaller one (and
probably faster one.)

-David


From andrea at cpushare.com  Wed Jan 18 16:56:14 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 18 17:56:22 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <1137626703.3416.11.camel@audrey.local>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqkrun$ari$1@sea.gmane.org>
	<17eb01c61c08$c231af70$6402a8c0@dcore>
	<20060118162538.GV19010@opteron.random>
	<dqlun2$els$1@sea.gmane.org>
	<20060118212810.GB19010@opteron.random>
	<1137626703.3416.11.camel@audrey.local>
Message-ID: <20060118235614.GF19010@opteron.random>

On Wed, Jan 18, 2006 at 03:25:03PM -0800, David Reid wrote:
> It may be worth noting that one of the long-term goals of twisted.web2
> is to allow Nevow to become just a rendering engine on top of web2.
> It'll still be a framework, but it'll be a much smaller one (and
> probably faster one.)

This makes perfect sense. The fact the klive size almost didn't increase
at all after porting from nevow to web2, is quite a proof that it's
achieving its objective well.

Leaving the option to the web devloper if to render stuff with nevow or
Cheetah or PTL, and leaving the rendering engine indipendent sounds very
good.

Thanks!

From andrea at cpushare.com  Wed Jan 18 17:02:52 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 18 18:02:58 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <18a801c61c82$b1d60fc0$6402a8c0@dcore>
References: <20060118162538.GV19010@opteron.random>
	<18a801c61c82$b1d60fc0$6402a8c0@dcore>
Message-ID: <20060119000252.GG19010@opteron.random>

On Wed, Jan 18, 2006 at 05:58:26PM -0500, Paul G wrote:
> all changes to mutable objects are, afaik, synchronized by the gil (global 
> interpreter lock - think the BKL, andrea ;), so we're synchronizing very 
> heavily anyway. i'm going to benchmark running it synzhronously (with 
> precompiled/preloaded templates) and  running it as a separate process, 
> with pb or shm for io.

Note that my deferreds aren't the ones invoking Cheetah. My deferreds
return data on disk (or kernel cache), and this data will fill the
Cheetah templates. I render synchronously (I'm not using a pool of
threads to render Cheetah). What I do is to get the data from the db
async, but the rendering is sync.

So the idea is that the db query will return a deferred, I'd like to do
something like:

	t = Template('$something')
	t.something = self.sql.query() # will return a deferred
	stream.write(t)

And I'd like Cheetah to interact with web2 stream write automatically.

What I do right now is to render different blocks of the template by
hand, as soon as the deferred fires, I use multiple stream.write by
hand. This way the page remains nicely interactive, but it's not
automatic like it was with nevow. Nevow understood deferred, Cheetah
doesn't.

From andrea at cpushare.com  Wed Jan 18 17:06:08 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Jan 18 18:06:15 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <1137626280.3416.9.camel@audrey.local>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqjjmh$lqd$1@sea.gmane.org>
	<16b801c61bc4$173d2160$6402a8c0@dcore>
	<20060118025641.GP19010@opteron.random>
	<20060118054246.GQ19010@opteron.random>
	<1137619466.3416.6.camel@audrey.local>
	<20060118213627.GC19010@opteron.random>
	<1137626280.3416.9.camel@audrey.local>
Message-ID: <20060119000608.GH19010@opteron.random>

On Wed, Jan 18, 2006 at 03:18:00PM -0800, David Reid wrote:
> On Wed, 2006-01-18 at 22:36 +0100, Andrea Arcangeli wrote:
> > What branch are you looking at? I'm looking trunk and I see:
> 
> I'm looking at the mythical branch that I will create and apply your
> patch to when you send me one. :)

Tell me how you want to override the getRemoteHost then, currently the
transport.peer is returned. I don't think we can mess with the
transport. Clearly we need a setRemoteHost, it should be enough to add a
variable like chan.remote_host and return it from getRemoteHost.

From dreid at dreid.org  Wed Jan 18 21:34:39 2006
From: dreid at dreid.org (David Reid)
Date: Wed Jan 18 22:21:16 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <20060119000608.GH19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqjjmh$lqd$1@sea.gmane.org>
	<16b801c61bc4$173d2160$6402a8c0@dcore>
	<20060118025641.GP19010@opteron.random>
	<20060118054246.GQ19010@opteron.random>
	<1137619466.3416.6.camel@audrey.local>
	<20060118213627.GC19010@opteron.random>
	<1137626280.3416.9.camel@audrey.local>
	<20060119000608.GH19010@opteron.random>
Message-ID: <1137645279.4593.3.camel@audrey.local>

On Thu, 2006-01-19 at 01:06 +0100, Andrea Arcangeli wrote:
> On Wed, Jan 18, 2006 at 03:18:00PM -0800, David Reid wrote:
> > On Wed, 2006-01-18 at 22:36 +0100, Andrea Arcangeli wrote:
> > > What branch are you looking at? I'm looking trunk and I see:
> > 
> > I'm looking at the mythical branch that I will create and apply your
> > patch to when you send me one. :)
> 
> Tell me how you want to override the getRemoteHost then

Ok, in the latest svn trunk the remote IAddress is exposed directly on
the request

this is set when the initial request is processed to
self.chanRequest.getRemoteHost() so just set req.remote_addr and use
that farther down the line.

Request.chanRequest won't be public much longer.

-David


From glyph at divmod.com  Wed Jan 18 22:34:05 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Wed Jan 18 23:34:06 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <1137645279.4593.3.camel@audrey.local>
Message-ID: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>



On Wed, 18 Jan 2006 20:34:39 -0800, David Reid <dreid@dreid.org> wrote:

>this is set when the initial request is processed to
>self.chanRequest.getRemoteHost() so just set req.remote_addr and use
>that farther down the line.

erm, maybe I'm missing something - is there a reason that second attribute name violates the coding standard?

From dreid at dreid.org  Wed Jan 18 23:04:41 2006
From: dreid at dreid.org (David Reid)
Date: Wed Jan 18 23:51:18 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>
References: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>
Message-ID: <1137650682.4593.6.camel@audrey.local>

On Thu, 2006-01-19 at 00:34 -0500, glyph@divmod.com wrote:
> 
> On Wed, 18 Jan 2006 20:34:39 -0800, David Reid <dreid@dreid.org> wrote:
> 
> >this is set when the initial request is processed to
> >self.chanRequest.getRemoteHost() so just set req.remote_addr and use
> >that farther down the line.
> 
> erm, maybe I'm missing something - is there a reason that second attribute name violates the coding standard?

oh, because I'm a doofus and wasn't paying attention to the code I was
actually writing. (fixed in r15632)

-David


From andrea at cpushare.com  Thu Jan 19 05:52:26 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 06:52:39 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <1137650682.4593.6.camel@audrey.local>
References: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>
	<1137650682.4593.6.camel@audrey.local>
Message-ID: <20060119125226.GI19010@opteron.random>

On Wed, Jan 18, 2006 at 10:04:41PM -0800, David Reid wrote:
> On Thu, 2006-01-19 at 00:34 -0500, glyph@divmod.com wrote:
> > 
> > On Wed, 18 Jan 2006 20:34:39 -0800, David Reid <dreid@dreid.org> wrote:
> > 
> > >this is set when the initial request is processed to
> > >self.chanRequest.getRemoteHost() so just set req.remote_addr and use
> > >that farther down the line.
> > 
> > erm, maybe I'm missing something - is there a reason that second attribute name violates the coding standard?
> 
> oh, because I'm a doofus and wasn't paying attention to the code I was
> actually writing. (fixed in r15632)

This fixes one logging bug:

Index: twisted/web2/log.py
===================================================================
--- twisted/web2/log.py	(revision 15632)
+++ twisted/web2/log.py	(working copy)
@@ -144,7 +144,7 @@
         
         self.logMessage(
             '%s - %s [%s] "%s" %s %d "%s" "%s"' %(
-                request.chanRequest.getRemoteHost().host,
+                request.remoteAddr.host,
                 # XXX: Where to get user from?
                 "-",
                 self.logDateString(


This is the diff for klive to adapt to the new logic:

Index: server/web.py
===================================================================
RCS file: /home/andrea/crypto/cvs/klive/server/web.py,v
retrieving revision 1.110
retrieving revision 1.111
diff -u -p -r1.110 -r1.111
--- server/web.py	18 Jan 2006 08:02:23 -0000	1.110
+++ server/web.py	19 Jan 2006 12:39:12 -0000	1.111
@@ -131,7 +131,7 @@ class basefrag_class(object):
 		if ip == self.all:
 			return ''
 		if 1:
-			web_client_ip = req.chanRequest.getRemoteHost().host
+			web_client_ip = req.remoteAddr.host
 			if ip != web_client_ip:
 				return
 		kwargs['host'] = md5.new(ip).hexdigest()
@@ -623,7 +623,7 @@ class smp_class(basefrag_class):
 
 class ip_class(basefrag_class):
 	def render(self, req):
-		ip = req.chanRequest.getRemoteHost().host
+		ip = req.remoteAddr.host
 		entries = [(self.all,), (ip,),]
 		t = Template(file=XMLDIR+'archs.xml')
 		t.entries = (self.render_machine(req, x) for x in entries)
@@ -1063,13 +1063,8 @@ class myvhost(object):
 
 		if not req.prepath and segments[0] == 'vhost':
 			host, port = segments[3].split(':')
-			class remote(object):
-				def __init__(self, host, port):
-					from twisted.internet import address
-					self.client = address.IPv4Address("TCP", host, int(port))
-				def getRemoteHost(self):
-					return self.client
-			req.chanRequest.getRemoteHost = remote(host,port).getRemoteHost
+			from twisted.internet import address
+			req.remoteAddr = address.IPv4Address("TCP", host, int(port))
 			cut_len = len('/'.join(segments[:4])) + 1
 			req.uri = req.uri[cut_len:]
 			req.path = req.path[cut_len:]


A few things on vhost (without going into the guard details yet):

1) the web2.vhost seems buggy not fixing up the req.uri, I had to fixup
req.uri to get logging right in my vhost hack that understand the
twisted.web reverse proxy with clientPass=True (my old twisted.web patch)
2) assuming that I had web2 on the reverse proxy, would it already pass
down the remote_ip information, or only apache2 does that? (the only one
capable of receiving the remote_ip is AutoVHostURIRewrite, but the
deployment only talks about apache2, Also note for me it's fundamentally
important for security reasons to have the port too, one needs the port
to safely indentify a box behind a nat (assuming the nat admin is
capable of logging all connection tracking but if he doesn't he will
take the blame). Is the apache2/twisted.web2 reverseproxy protocol
passing down the peer port too in the x-forwarded-host?
3) if answer to 2 is no, can I forward port to web2 my simple hack to
twisted.web that I need in order to plug klive on top twisted.web2?

Here for reference my old patch that is running on cpushare.com today
and that my web2 vhost hack is understanding and that passes down to
klive both ip and port (setClient was actually used by the nevow.vhost,
now obsoleted by web2 req.remoteAddr)

Index: Twisted/twisted/web/http.py
===================================================================
--- Twisted/twisted/web/http.py	(revision 15632)
+++ Twisted/twisted/web/http.py	(working copy)
@@ -876,6 +876,10 @@
         self.received_headers["host"] = host
         self.host = address.IPv4Address("TCP", host, port)
 
+    def setClient(self, host, port):
+        """Same as setHost but for the client address"""
+        self.client = address.IPv4Address("TCP", host, port)
+
     def getClientIP(self):
         if isinstance(self.client, address.IPv4Address):
             return self.client.host
Index: Twisted/twisted/web/proxy.py
===================================================================
--- Twisted/twisted/web/proxy.py	(revision 15632)
+++ Twisted/twisted/web/proxy.py	(working copy)
@@ -162,23 +162,33 @@
     to a different server.
     """
 
-    def __init__(self, host, port, path):
+    def __init__(self, host, port, path, passClient = False):
         resource.Resource.__init__(self)
         self.host = host
         self.port = port
         self.path = path
+        self.passClient = passClient
 
+    def getPath(self, request):
+        path = self.path
+        if self.passClient:
+            path += '/%s:%d' % (request.client.host, request.client.port)
+        return path
+
     def getChild(self, path, request):
-        return ReverseProxyResource(self.host, self.port, self.path+'/'+path)
+        return ReverseProxyResource(self.host, self.port, self.getPath(request)+'/'+path, False)
 
     def render(self, request):
         request.received_headers['host'] = self.host
         request.content.seek(0, 0)
+
+        path = self.getPath(request)
+
         qs = urlparse.urlparse(request.uri)[4]
         if qs:
-            rest = self.path + '?' + qs
+            rest = path + '?' + qs
         else:
-            rest = self.path
+            rest = path
         clientFactory = ProxyClientFactory(request.method, rest, 
                                      request.clientproto, 
                                      request.getAllHeaders(),

One more question, you said the channel is private, why don't we add __
in front of it. Python is capable of autodocumenting without possibility
for mistakes all private parts of a class.

Thanks a lot!

From andrea at cpushare.com  Thu Jan 19 07:17:04 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 08:17:13 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <1137619466.3416.6.camel@audrey.local>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqjjmh$lqd$1@sea.gmane.org>
	<16b801c61bc4$173d2160$6402a8c0@dcore>
	<20060118025641.GP19010@opteron.random>
	<20060118054246.GQ19010@opteron.random>
	<1137619466.3416.6.camel@audrey.local>
Message-ID: <20060119141704.GL19010@opteron.random>

On Wed, Jan 18, 2006 at 01:24:26PM -0800, David Reid wrote:
> (and trust is an issue)

I didn't answer to this one. Yes, it should be well documented that this
is safe only if you're only allowing the server to connect. A bit of
authentication can be provided by using /vhost+random/ as root path to
the vhost, as long as both the reverse proxy and the web server code is
both non readable and the connection happens through localhost (so only
sniffable by root or by the computers on the intranet).

From andrea at cpushare.com  Thu Jan 19 09:19:35 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 10:19:44 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
Message-ID: <20060119161935.GM19010@opteron.random>

What do twisted-web readers think about FormKit as a replacement for
formless? (Cheetah replaced the template rendering of nevow already)

I really want to use the library approach with no connection between the
webserver and the html rendering _at_all_. My code will plug on top of
web2 only. The html rendering code must know nothing about the
webserver because it doesn't need to. At most the html rendering code
may learn about what a deferred is, but the deffered callback is the
maxmium connection I want between html rendering and web server.

Being able to mix something like FormKit with Cheetah for the html
rendering seems to be a reasonable path. Cheetah will have the template
with something like $form inside, and FormKit will render the html to
put in the template (t.form = f.tag()). This is really strightforward
because the form rendering is non-blocking (modulo the cpu cost of it),
so doing it under twisted.web2 or under mod_python with apache will be
exactly the same code.

FormKit gets a dict in input for processing, that should fit well with
the web2 post params too.

Here an example:

	http://formkit.python-hosting.com/file/tags/r_0.9b2/Examples/compound-field-example.py

The great bonus of the library model, is that this time if the FormKit
project becomes obsolete like nevow.formless, it'll be truly easy to
embed FormKit inside my app because its only dependency is python.
The same is true for Cheetah of course. So depending on it may be
reasonably safe and it should avoids to write big html by hand. I think
I'll try it, then if it misses too many features, I'll give it up and
write the html of the forms by hand (perhaps you didn't notice but I
really dislike forms html, that was the main reason I liked nevow
initially ;).

I feel this time with twisted.web2 things will go well.

From dreid at dreid.org  Thu Jan 19 10:24:01 2006
From: dreid at dreid.org (David Reid)
Date: Thu Jan 19 11:24:18 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <20060119125226.GI19010@opteron.random>
References: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>	<1137650682.4593.6.camel@audrey.local>
	<20060119125226.GI19010@opteron.random>
Message-ID: <43CFCB31.8000905@dreid.org>

Andrea Arcangeli wrote:
> This fixes one logging bug:

Thanks


> 1) the web2.vhost seems buggy not fixing up the req.uri, I had to fixup
> req.uri to get logging right in my vhost hack that understand the
> twisted.web reverse proxy with clientPass=True (my old twisted.web patch)

Judging from the way Request actually deals with .uri it should be _uri, 
I'll discuss this with foom and fix it later.

> 2) assuming that I had web2 on the reverse proxy, would it already pass
> down the remote_ip information, or only apache2 does that? (the only one
> capable of receiving the remote_ip is AutoVHostURIRewrite, but the
> deployment only talks about apache2, Also note for me it's fundamentally
> important for security reasons to have the port too, one needs the port
> to safely indentify a box behind a nat (assuming the nat admin is
> capable of logging all connection tracking but if he doesn't he will
> take the blame). Is the apache2/twisted.web2 reverseproxy protocol
> passing down the peer port too in the x-forwarded-host?

As far as I know twisted.web.proxy.ReverseProxyResource doesn't send 
X-Forwarded-For.  I don't think Apache2 sends the port.  I'm not sure 
what to do about this other than subclass and fix, it seems like a 
pretty special case to me, perhaps security would be better provided 
through another means, because as you said, it only works if the 
connection tracking is logged.  Which most SOHO devices don't do.

> 3) if answer to 2 is no, can I forward port to web2 my simple hack to
> twisted.web that I need in order to plug klive on top twisted.web2?

Twisted.web2 is backwards compatible, in that it knows what a 
twisted.web resource expects, and is capable of translating them from 
what Twisted.web2 uses (see twisted.web2.compat)  You should be able to 
just drop that exact ReverseProxyResource into a twisted.web2 tree and 
have it work.  (While you're at it you might as well patch it to send 
the client via X-Forwarded-For (and send the other headers 
AutoURIRewrite expects while you're at it))

> Here for reference my old patch that is running on cpushare.com today
> and that my web2 vhost hack is understanding and that passes down to
> klive both ip and port (setClient was actually used by the nevow.vhost,
> now obsoleted by web2 req.remoteAddr)

I'm not sure if tacking a :port onto the X-Forwarded-For header will 
break other http servers.

> One more question, you said the channel is private, why don't we add __
> in front of it. Python is capable of autodocumenting without possibility
> for mistakes all private parts of a class.

Send me a patch (on or offlist) that changes chanRequest to _chanRequest[1]

--David

[1] See twisted coding standards: 
http://twistedmatrix.com/projects/core/documentation/howto/policy/coding-standard.html



From exarkun at divmod.com  Thu Jan 19 10:35:44 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu Jan 19 11:35:46 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
In-Reply-To: <20060119161935.GM19010@opteron.random>
Message-ID: <20060119173544.2697.1760511889.divmod.quotient.240@ohm>

On Thu, 19 Jan 2006 17:19:35 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>What do twisted-web readers think about FormKit as a replacement for
>formless? (Cheetah replaced the template rendering of nevow already)

Are you suggesting Nevow documentation recommend FormKit as a means of dealing with HTML forms, or are you suggesting FormKit be imported into the repository?  I could perhaps get on board with the former, but I don't think the latter is very likely.  As you said, FormKit doesn't depend on anything except Python, so there doesn't seem to be any reason to bundle it.

Jean-Paul

From dialtone at divmod.com  Thu Jan 19 12:09:28 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Jan 19 13:11:55 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
In-Reply-To: <20060119161935.GM19010@opteron.random>
References: <20060119161935.GM19010@opteron.random>
Message-ID: <20060119190928.GA3791@divmod.com>

On Thu, Jan 19, 2006 at 05:19:35PM +0100, Andrea Arcangeli wrote:
> What do twisted-web readers think about FormKit as a replacement for
> formless? (Cheetah replaced the template rendering of nevow already)

formless is not a web library but webform was.

I don't think the form library should be bundled with the web server. It's
something that has to do with the toolkit. And Nevow already has a replacement
for that called forms, which is similar in the API to that of FormKit but it
can understand deferreds. Since Nevow is going to remove the context somehow
even forms will remove it, once that is done you could easily use forms with
web2 without Nevow (although form rendering depends on Nevow of course since
it uses stan).

Of course I think it is right to bundle it with your new toolkit (sigh... yet
another one in the python world).

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060119/418ec0e7/attachment.pgp
From glyph at divmod.com  Thu Jan 19 12:34:24 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Jan 19 13:34:26 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
In-Reply-To: <20060119161935.GM19010@opteron.random>
Message-ID: <20060119193424.2697.56156085.divmod.quotient.248@ohm>

On Thu, 19 Jan 2006 17:19:35 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>What do twisted-web readers think about FormKit as a replacement for
>formless? (Cheetah replaced the template rendering of nevow already)

It doesn't even qualify.  The essence of formless was a form generation library *for nevow* - I understand that's not what you want, but that is what a replacement would have to do.  Right now there are 2 main contenders for a replacement for formless - since FormKit is not integrated with Nevow, it's not one of them.

One is Matt Goodall's library, named "Nevow Forms" and confusingly just referred to as "forms" most of the time.  Another is the LiveForm Fragment/Widget combination which currently lives in Mantissa.  They're really serving different needs: MG's lib does sophisticated and customizable form generation, whereas LiveForm's form generation is incredibly simplistic - it's focused almost entirely on aggregating input and batching it up as sensible, typed input to Python functions in the context of athena widgets, submitting input when a button is pressed.  The user is expected to provide their own templates if they want a customized look.

Considering that "forms" seems the main contender to replace the generation portion of freeform, it'd be nice if there were some way to integrate it with LiveForm.  I don't think there is yet, but considering that you can plug an arbitrary docFactory into a LiveForm, maybe it will just work.

You're welcome to use FormKit, of course.  I don't think that using it under Twisted would be substantially different than under any other web server.

You could also just take over maintenance of formless - if you like it, why stop using it?  It's not going to break just because *we* don't think it's the best idea any more.

>The great bonus of the library model (...)

Yes yes.  We all understand you, since you've said this in six or seven other posts this week, often at great length.  You prefer code that does not have many dependencies and does not invert control.  There are drawbacks to the library model too.  Rather than debating this, do you think you could simply stop repeating it in every post you make?  While you're entitled to your opinions, repeating them so often is bordering on trolling.  I'm sure that some people on this list agree with you, but a large contingent on this list certainly *dis*agree with you, as evidenced by the frameworkish nature of Twisted/Nevow/Mantissa/web/web2.

By the way, those are the things that this list is supposed to be discussing, not Cheetah and FormKit.  There is a WebWare list for that stuff.

>I feel this time with twisted.web2 things will go well.

Since you have complained numerous times of API instability, and you complained about Atop even though you were vigorously warned off of it, I want to make sure the message is very clear here:

                  twisted.web2 HAS NO STABLE RELEASE YET!!!!!

You may well have to rewrite your application yet again when the code changes.  There is also no guarantee that the web2 team won't just move to a new module, say, "w3b", and obsolete web2 because they discover a radically better abstraction for dealing with HTTP.  The whole point of not having a stable release is that they're preserving that kind of freedom until they're comfortable enough with the code to commit to it.

It continues to baffle me that you have gotten so worked up about API stability and version changes, but as a solution to that problem, you are now rewriting all your code and moving to a less stable API.

From general at eepatents.com  Thu Jan 19 14:15:47 2006
From: general at eepatents.com (Ed Suominen)
Date: Thu Jan 19 15:15:58 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
In-Reply-To: <20060119193424.2697.56156085.divmod.quotient.248@ohm>
References: <20060119193424.2697.56156085.divmod.quotient.248@ohm>
Message-ID: <43D00183.6000306@eepatents.com>

glyph@divmod.com wrote:

>> I feel this time with twisted.web2 things will go well.
>
>
> Since you have complained numerous times of API instability, and you
> complained about Atop even though you were vigorously warned off of
> it, I want to make sure the message is very clear here:
>
>                  twisted.web2 HAS NO STABLE RELEASE YET!!!!!
>
> You may well have to rewrite your application yet again when the code
> changes.  There is also no guarantee that the web2 team won't just
> move to a new module, say, "w3b", and obsolete web2 because they
> discover a radically better abstraction for dealing with HTTP.  The
> whole point of not having a stable release is that they're preserving
> that kind of freedom until they're comfortable enough with the code to
> commit to it.
>
> It continues to baffle me that you have gotten so worked up about API
> stability and version changes, but as a solution to that problem, you
> are now rewriting all your code and moving to a less stable API.

While I'm disappointed to see the strident tone of some postings here
lately, I do share some of Andrea's frustrations with
Nevow/Twisted/Divmod. A couple of years ago I spent a huge amount of
time getting a production web server (http://valuablepatents.com)
running on Nevow because it seemed to be the best way for me, a fairly
capable Python programmer and Twisted devotee, to implement some unique
layout requirements. I also figured I was investing in the foundation of
additional virtual domain sites to come, e.g., a rewrite of my old
standby http://eepatents.com.

Unfortunately,  even after all this time has passed, there still doesn't
seem to be any solid footing for maintaining a Twisted-based web server.
The old twisted.web package seems to be highly disparaged and lingers in
the shadow the of the inevitable Next Big Thing (web2) being worked on
by the Twisted developers, though web2 is itself disavowed for
production use as we've seen in the quoted message above. Nevow seems to
be a somewhat forgotten stepchild off by itself; I would have found it
very difficult to use without some serious help that was generously
supplied on #twisted.web, and things don't seem to have improved lately.

At this point, I will confess that I'm tempted to just "wget -R" the
whole Nevow vhost site and just render the HTML statically from some
other server. I still have plans to do some Python web stuff, but
there's not exactly a shortage of Python frameworks. Indeed, the thought
has occurred to me that both the Nevow code I've written (reST and image
rendering, caching, dynamic config updating & parsing) and Nevow itself
may be destined for culling in the restructuring of the whole overgrown
Web-on-Python herd that will probably begin in earnest at some point
soon. The overabundance and fragmentation of Python web frameworks has
been much criticized and lamented lately, especially in view of how a
certain single package has established clear dominance for a certain
other OOP language.

That said, I continue to be fascinated and impressed by Twisted itself
and have high hopes for it.

Best regards,
Ed Suominen

From andrea at cpushare.com  Thu Jan 19 14:29:34 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 15:29:44 2006
Subject: [Twisted-web] Cheetah+twisted.web2
In-Reply-To: <43CFCB31.8000905@dreid.org>
References: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>
	<1137650682.4593.6.camel@audrey.local>
	<20060119125226.GI19010@opteron.random>
	<43CFCB31.8000905@dreid.org>
Message-ID: <20060119212934.GN19010@opteron.random>

On Thu, Jan 19, 2006 at 09:24:01AM -0800, David Reid wrote:
> Judging from the way Request actually deals with .uri it should be _uri, 
> I'll discuss this with foom and fix it later.

So you mean, it should be private? But then how can the vhost fixup the
uri if it's private?

> As far as I know twisted.web.proxy.ReverseProxyResource doesn't send 
> X-Forwarded-For.  I don't think Apache2 sends the port.  I'm not sure 
> what to do about this other than subclass and fix, it seems like a 
> pretty special case to me, perhaps security would be better provided 
> through another means, because as you said, it only works if the 
> connection tracking is logged.  Which most SOHO devices don't do.

There are large ISP that I assume log the stuff properly.

> >3) if answer to 2 is no, can I forward port to web2 my simple hack to
> >twisted.web that I need in order to plug klive on top twisted.web2?
> 
> Twisted.web2 is backwards compatible, in that it knows what a 
> twisted.web resource expects, and is capable of translating them from 
> what Twisted.web2 uses (see twisted.web2.compat)  You should be able to 
> just drop that exact ReverseProxyResource into a twisted.web2 tree and 
> have it work.  (While you're at it you might as well patch it to send 
> the client via X-Forwarded-For (and send the other headers 
> AutoURIRewrite expects while you're at it))

Ok, it may take a bit of time since I'm not ready to move on top of web2
yet, but I'll start testing, I've to fix this anyway before I can move
on top of web2.

> I'm not sure if tacking a :port onto the X-Forwarded-For header will 
> break other http servers.

I don't know. Should I use a x-forwarded-port instead?

> Send me a patch (on or offlist) that changes chanRequest to _chanRequest[1]

What do you mean exactly with [1]? And why only one "_" I thought two __
were needed to make it private. Or you want it only as an hint?

Thanks!

From andrea at cpushare.com  Thu Jan 19 14:43:55 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 15:44:02 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
In-Reply-To: <20060119173544.2697.1760511889.divmod.quotient.240@ohm>
References: <20060119161935.GM19010@opteron.random>
	<20060119173544.2697.1760511889.divmod.quotient.240@ohm>
Message-ID: <20060119214355.GO19010@opteron.random>

On Thu, Jan 19, 2006 at 12:35:44PM -0500, Jean-Paul Calderone wrote:
> Are you suggesting Nevow documentation recommend FormKit as a means of 
> dealing with HTML forms, or are you suggesting FormKit be imported into the 

I was just an opinion on using FormKit on top of web2 (w/ or w/o Nevow,
I use Cheetah instead of Nevow but you could use FormKit with Nevow too,
that's exactly why the library approach is nice, you use what you
prefer, each tool does its job).

I asked because another option would be FormEncode but FormKit looks
simpler to use.

Apparently Subway = Cheerypy+Cheetah+FormKit+SQLObject, that's
very similar with my current planned model:
twisted.web2+Cheetah+FormKit+psycopg2 (I prefer writing the sql by hand,
my apps aren't that simple to be able to ignore sql). So looking the
similarity with Subway for everything related to html rendering, I think
this could be a good choice after all. (btw, it's not exactly clear to
me if Subway uses FormKit or FormEncode, I think they tried both, and
now they use FormKit, the dates on some webpages weren't easy to find)

FormKit is so simple that it doesn't even have a install script, I had
to copy in site-packages by hand ;). FormEncode has an install script
but it's so bleeding edge that I had to upgrade and copy stuff around to
install it, and then it complained about some dependency so I failed to
produce html with it yet, while formkit examples are strightforward of
course. I like obvious simple things, so I couldn't find anything
better than FormKit yet to replace formless.

> think the latter is very likely.  As you said, FormKit doesn't depend on 
> anything except Python, so there doesn't seem to be any reason to bundle it.

Yep agreed.

From dreid at dreid.org  Thu Jan 19 14:59:28 2006
From: dreid at dreid.org (David Reid)
Date: Thu Jan 19 15:59:43 2006
Subject: twisted.web2.vhost and X-Forwarded-For (was Re: [Twisted-web]
	Cheetah+twisted.web2
In-Reply-To: <20060119212934.GN19010@opteron.random>
References: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>	<1137650682.4593.6.camel@audrey.local>	<20060119125226.GI19010@opteron.random>	<43CFCB31.8000905@dreid.org>
	<20060119212934.GN19010@opteron.random>
Message-ID: <43D00BC0.20909@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Andrea Arcangeli wrote:
> On Thu, Jan 19, 2006 at 09:24:01AM -0800, David Reid wrote:
>> Judging from the way Request actually deals with .uri it should be _uri, 
>> I'll discuss this with foom and fix it later.
> 
> So you mean, it should be private? But then how can the vhost fixup the
> uri if it's private?

well uri actually gets parsed out to all the things that VHostURIRewrite
 assigns to.  What is more likely to happen in the next few days is
request.uri will become a URI object and req.path, req.scheme, req.host,
req.port etc will all be provided instead by req.uri.scheme etc ...
This way assigning something to req.uri will make sense and actually
affect things.  Currently nothing important actually happens if you
assign to request.uri (because by the time we get to user code we've
already parsed out all the useful bits)

> There are large ISP that I assume log the stuff properly.

You know what they say about assumptions. :)

>> I'm not sure if tacking a :port onto the X-Forwarded-For header will 
>> break other http servers.
> 
> I don't know. Should I use a x-forwarded-port instead?

probably X-Forwarded-For-Port or something.  I'm not sure, I was kinda
hoping someone else could give some input.

>> Send me a patch (on or offlist) that changes chanRequest to _chanRequest[1]
> 
> What do you mean exactly with [1]? And why only one "_" I thought two __
> were needed to make it private. Or you want it only as an hint?

[1] indicates a footnote, which could be found after my name (I probably
should have
put it before my name it was meant to indicate that you should read the
Twisted coding standards and that this document would explain why '_'
instead of '__'.

- -David
[
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFD0Au/rsrO6aeULcgRAsfeAJ90lg4B6HBQv37na70JHRzdywfouwCeI6aI
zeeixXNzOIf9T2GNNyag0X0=
=n/hp
-----END PGP SIGNATURE-----

From andrea at cpushare.com  Thu Jan 19 15:18:19 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 16:18:25 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
In-Reply-To: <20060119193424.2697.56156085.divmod.quotient.248@ohm>
References: <20060119161935.GM19010@opteron.random>
	<20060119193424.2697.56156085.divmod.quotient.248@ohm>
Message-ID: <20060119221819.GP19010@opteron.random>

On Thu, Jan 19, 2006 at 02:34:24PM -0500, glyph@divmod.com wrote:
> You could also just take over maintenance of formless - if you like it, why 
> stop using it?  It's not going to break just because *we* don't think it's 
> the best idea any more.

That's a good point. However I got sick of the interfaces, and formless
(at least the first API) uses them extensively. They're the main source
of slowdown in nevow too. I know twisted.web2 uses some too...
So I prefer to get rid of nevow completely and I'm already feeling the
benefits of it (especially on the performance side, the bottleneck is
gone). There's no chance I'd be writing code with stan or tags or
whatever else, I want to get rid of all artificial complexities. They
may make life easier to you, but to me they just hurts me in the long
run, I couldn't even find a way to make nested tables.

> By the way, those are the things that this list is supposed to be 
> discussing, not Cheetah and FormKit.  There is a WebWare list for that 
> stuff.

This is the twisted-web list so I don't see why nevow can be discussed
and other equivalent technologies can't, especially if they work
substantially better.

> You may well have to rewrite your application yet again when the code 
> changes.  There is also no guarantee that the web2 team won't just move to 
> a new module, say, "w3b", and obsolete web2 because they discover a 
> radically better abstraction for dealing with HTTP.  The whole point of not 
> having a stable release is that they're preserving that kind of freedom 
> until they're comfortable enough with the code to commit to it.

Thanks for the warnings, if things break totally to require a full
rewrite (like formless), I'll go back to twisted.web or cherrpy to avoid
wasting too much time. But if the API changes without requiring full
rewrites I've no problem at all to keep following, plus I think I can
provide a valuable service to the twisted.web2 developers keeping a site
with reasonable traffic online on twisted.web2 (only the last two weeks
about 1.5G of html+css was transferred on it, after excluding all search
engines and my traffic).

From andrea at cpushare.com  Thu Jan 19 15:22:07 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 16:22:14 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
In-Reply-To: <43D00183.6000306@eepatents.com>
References: <20060119193424.2697.56156085.divmod.quotient.248@ohm>
	<43D00183.6000306@eepatents.com>
Message-ID: <20060119222207.GQ19010@opteron.random>

Hi Ed,

On Thu, Jan 19, 2006 at 01:15:47PM -0800, Ed Suominen wrote:
> At this point, I will confess that I'm tempted to just "wget -R" the
> whole Nevow vhost site and just render the HTML statically from some
> other server. I still have plans to do some Python web stuff, but
> there's not exactly a shortage of Python frameworks. Indeed, the thought
> has occurred to me that both the Nevow code I've written (reST and image
> rendering, caching, dynamic config updating & parsing) and Nevow itself
> may be destined for culling in the restructuring of the whole overgrown
> Web-on-Python herd that will probably begin in earnest at some point
> soon. The overabundance and fragmentation of Python web frameworks has
> been much criticized and lamented lately, especially in view of how a
> certain single package has established clear dominance for a certain
> other OOP language.
> 
> That said, I continue to be fascinated and impressed by Twisted itself
> and have high hopes for it.

Agreed.

From andrea at cpushare.com  Thu Jan 19 15:32:06 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 16:32:14 2006
Subject: twisted.web2.vhost and X-Forwarded-For (was Re: [Twisted-web]
	Cheetah+twisted.web2
In-Reply-To: <43D00BC0.20909@dreid.org>
References: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>
	<1137650682.4593.6.camel@audrey.local>
	<20060119125226.GI19010@opteron.random>
	<43CFCB31.8000905@dreid.org>
	<20060119212934.GN19010@opteron.random> <43D00BC0.20909@dreid.org>
Message-ID: <20060119223206.GR19010@opteron.random>

On Thu, Jan 19, 2006 at 01:59:28PM -0800, David Reid wrote:
> well uri actually gets parsed out to all the things that VHostURIRewrite
>  assigns to.  What is more likely to happen in the next few days is
> request.uri will become a URI object and req.path, req.scheme, req.host,
> req.port etc will all be provided instead by req.uri.scheme etc ...
> This way assigning something to req.uri will make sense and actually

Will prepath/postpath go there too?

> affect things.  Currently nothing important actually happens if you
> assign to request.uri (because by the time we get to user code we've
> already parsed out all the useful bits)

Yep. The only place where request.uri was needed, was is in the log. The
log was screwed without my own patching of req.uri (the same way you
also patched req.path). The log is the only reason I've changed the uri.

> You know what they say about assumptions. :)

Well, then in the unlikely case they log, and in the unlikely case that
there's a legal inquiry, they would then require me to know the port ;).

> probably X-Forwarded-For-Port or something.  I'm not sure, I was kinda
> hoping someone else could give some input.

Looks good to me.

> >> Send me a patch (on or offlist) that changes chanRequest to _chanRequest[1]
> > 
> > What do you mean exactly with [1]? And why only one "_" I thought two __
> > were needed to make it private. Or you want it only as an hint?
> 
> [1] indicates a footnote, which could be found after my name (I probably

Oh well that was fun... sorry for not noticing the footnote (I mistaken it
for a mailing list signature).

From dreid at dreid.org  Thu Jan 19 16:12:24 2006
From: dreid at dreid.org (David Reid)
Date: Thu Jan 19 17:12:33 2006
Subject: twisted.web2.vhost and X-Forwarded-For (was Re: [Twisted-web]
	Cheetah+twisted.web2
In-Reply-To: <20060119223206.GR19010@opteron.random>
References: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>	<1137650682.4593.6.camel@audrey.local>	<20060119125226.GI19010@opteron.random>	<43CFCB31.8000905@dreid.org>	<20060119212934.GN19010@opteron.random>
	<43D00BC0.20909@dreid.org> <20060119223206.GR19010@opteron.random>
Message-ID: <43D01CD8.5030800@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Andrea Arcangeli wrote:
> Will prepath/postpath go there too?

No because they're not parts of the uri they're just bookmarks for where
we are in the path handling they'll stay on the request.

- -David
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)

iD8DBQFD0BzQrsrO6aeULcgRAgcqAJ9TcKjzSvvBZSR0mvSod5idKPIv0gCfSQzD
+NjL0vevbep0/M+Gu21+nyo=
=qhd9
-----END PGP SIGNATURE-----

From andrea at cpushare.com  Thu Jan 19 16:38:36 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 17:38:43 2006
Subject: twisted.web2.vhost and X-Forwarded-For (was Re: [Twisted-web]
	Cheetah+twisted.web2
In-Reply-To: <43D01CD8.5030800@dreid.org>
References: <20060119053405.2697.1937967919.divmod.quotient.165@ohm>
	<1137650682.4593.6.camel@audrey.local>
	<20060119125226.GI19010@opteron.random>
	<43CFCB31.8000905@dreid.org>
	<20060119212934.GN19010@opteron.random> <43D00BC0.20909@dreid.org>
	<20060119223206.GR19010@opteron.random>
	<43D01CD8.5030800@dreid.org>
Message-ID: <20060119233836.GU19010@opteron.random>

On Thu, Jan 19, 2006 at 03:12:24PM -0800, David Reid wrote:
> No because they're not parts of the uri they're just bookmarks for where
> we are in the path handling they'll stay on the request.

Ok good.

From andrea at cpushare.com  Thu Jan 19 16:43:41 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 17:43:47 2006
Subject: [Twisted-web] Re: Good ROM tool ?
In-Reply-To: <20060118211642.GA19010@opteron.random>
References: <20060117114153.ox28jev7mswwk0k0@itchy.wasabout.net>
	<149401c61b55$b253e310$6402a8c0@dcore> <dqkrun$ari$1@sea.gmane.org>
	<17eb01c61c08$c231af70$6402a8c0@dcore>
	<20060118162538.GV19010@opteron.random>
	<20060118174008.GB28841@divmod.com>
	<20060118211642.GA19010@opteron.random>
Message-ID: <20060119234341.GV19010@opteron.random>

On Wed, Jan 18, 2006 at 10:16:42PM +0100, Andrea Arcangeli wrote:
> being clear. Cheetah isn't precompiled, so it re-reads them every time
> (so here probably nevow is theoretically more efficient, but in practice
> Cheetah renders stuff much faster even if it doesn't cache it).

Well the above was incorrect, I was just looking into that right now to
optimize this bit and see if it would render even faster, and I found
out that Cheetah reads the template only once, it remembers the file,
and it re-reads only it if it's being modified on disk. The strace shows
only two stats every time I re-read the same template. That's optimal.

From glyph at divmod.com  Thu Jan 19 17:38:22 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Jan 19 18:38:25 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
In-Reply-To: <43D00183.6000306@eepatents.com>
Message-ID: <20060120003822.2697.1030184341.divmod.quotient.261@ohm>



On Thu, 19 Jan 2006 13:15:47 -0800, Ed Suominen <general@eepatents.com> wrote:
>glyph@divmod.com wrote:

>Unfortunately,  even after all this time has passed, there still doesn't
>seem to be any solid footing for maintaining a Twisted-based web server.

This is definitely a big problem.  The fact that web2 hasn't stabilized yet is actually an indication that things are going to get better.  We are trying to minimize the number of half-supported revisions out there, so that when web2 is released as "stable", there is a clear, defined migration path.

I understand your frustration, and to some extent, I even share it - believe me, Divmod's life would be a lot easier if web2 were totally stable and productionized and we could just move Nevow over to it.

>there's not exactly a shortage of Python frameworks.

That's very true.  Unless you have a need for Twisted in your web application, there's no particular reason you need to use it.  There's a certain irrational exuberance that follows Twisted and related projects around, which sadly encourages people to develop apps on top of it that have no compelling reason to be on top of it, rather than first contributing the development and maintenance effort required to productionize whatever subproject is being used.

It's important to get some perspective, though.  Crummy as the current web situation is in Twisted, there is an INSANE amount of stuff in the TwistedVerse right now even if you don't look beyond the small sphere of the Twisted project and the Divmod repository.  There is a group of maybe two dozen people (and that's being really optimistic) maintaining a list of project that competes, at least partially, with each of the following projects that corresponds to a category of software:

apache (web/web2)
turbogears (nevow/mantissa)
asterisk (sine)
sqlobject (axiom)
skype (shtoom)
jabberd (words)
gaim (words.im, MOST, etc)
bind (names)
wordpress (quotient, eventually hyperbola)
exim (xquotient)
nnptd (twisted.news)
cyrus (twisted.protocols.imap4, quotient)
ACE (twisted.internet)
openssh (twisted.conch)
ncurses (twisted.conch.insults)
docbook (twisted.lore)
ORBit (twisted.pb)
inetd (twisted.runner)
jUnit (trial)

Then you have projects like Vertex and Radical, for which there _is_ no meaningful competitive space yet, because they're so unique.

Granted, in each of these categories, most of the alternatives to Twisted are more full-featured than the Twisted project at this point.  However, this is an _absolutely insane_ amount of code to have been written by the tiny number of people who work on Twisted on a regular basis.  There is no other project which even comes remotely close to having this much functionality available for integration into a single paradigm (and not only that, a single process, if you want).  On each of those competitive projects, there is a comparable number of distinct developers to the entire Twisted+Divmod team.  It's overwhelming, and maintenance slips sometimes.

Overall, we need HELP.  If you're just a user, every project needs some help.  Find some bugs in the Twisted or Divmod bugtracker; there are plenty related to web2 or Nevow.

>That said, I continue to be fascinated and impressed by Twisted itself
>and have high hopes for it.

Thanks.  It's always nice to hear this.  I guess I just probably explained why that is true :).

From dreid at dreid.org  Thu Jan 19 18:10:05 2006
From: dreid at dreid.org (David Reid)
Date: Thu Jan 19 19:10:11 2006
Subject: [Twisted-web] twisted.web2+Cheetah+FormKit
In-Reply-To: <20060120003822.2697.1030184341.divmod.quotient.261@ohm>
References: <20060120003822.2697.1030184341.divmod.quotient.261@ohm>
Message-ID: <43D0386D.3070307@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

glyph@divmod.com wrote:
> apache (web/web2)
> turbogears (nevow/mantissa)
> asterisk (sine)
> sqlobject (axiom)
> skype (shtoom)
> jabberd (words)
> gaim (words.im, MOST, etc)
> bind (names)
> wordpress (quotient, eventually hyperbola)
> exim (xquotient)
> nnptd (twisted.news)
> cyrus (twisted.protocols.imap4, quotient)
> ACE (twisted.internet)
> openssh (twisted.conch)
> ncurses (twisted.conch.insults)
> docbook (twisted.lore)
> ORBit (twisted.pb)
> inetd (twisted.runner)
> jUnit (trial)
hamachi (Vertex)

> Then you have projects like Vertex and Radical, for which there _is_ no
> meaningful competitive space yet, because they're so unique.

It's sad that you don't get more time or manpower working on the
_unique_ problems.  I really wish I could help out more with vertex, but
your pycon presentation prep nearly made my head explode. I guess I'll
just work on this endpoints stuff.

- -David
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)

iD8DBQFD0DhprsrO6aeULcgRAuqSAJwOiw/VZreAv+mtyNay6JePVljZTACfTiFf
DFTXVH70VEJDkGmf5lEElA0=
=7Nwk
-----END PGP SIGNATURE-----

From andrea at cpushare.com  Thu Jan 19 19:35:38 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Jan 19 20:35:48 2006
Subject: [Twisted-web] web2 log patch
Message-ID: <20060120023538.GW19010@opteron.random>

This fixes a typo in CVS and adds a common handler for file logging:

Index: Twisted/twisted/web2/log.py
===================================================================
--- Twisted/twisted/web2/log.py	(revision 15644)
+++ Twisted/twisted/web2/log.py	(working copy)
@@ -137,7 +137,7 @@
         request = eventDict['request']
         response = eventDict['response']
         loginfo = eventDict['loginfo']
-        firstLine = '%s %s HTTP/%' %(
+        firstLine = '%s %s HTTP/%s' %(
             request.method,
             request.uri,
             '.'.join([str(x) for x in request.clientproto]))
@@ -166,6 +166,13 @@
         tlog.removeObserver(self.emit)
 
 
+class FileAccessLoggingObserver(BaseCommonAccessLoggingObserver):
+	def __init__(self, logpath):
+		self.f = file(logpath, 'a', 1)
+
+	def logMessage(self, message):
+		self.f.write(message + '\n')
+
 class DefaultCommonAccessLoggingObserver(BaseCommonAccessLoggingObserver):
     """Log requests to default twisted logfile."""
     def logMessage(self, message):

From exarkun at divmod.com  Thu Jan 19 20:31:20 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu Jan 19 21:31:21 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120023538.GW19010@opteron.random>
Message-ID: <20060120033120.2697.1969860855.divmod.quotient.300@ohm>

On Fri, 20 Jan 2006 03:35:38 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>This fixes a typo in CVS and adds a common handler for file logging:
>

Andrea,

Thanks for the patch.  Could you attach it to an issue at <http://twistedmatrix.com/bugs/>?  Also, patches with unit tests are likely to be applied more quickly than those without.

Jean-Paul

From dreid at dreid.org  Fri Jan 20 00:27:12 2006
From: dreid at dreid.org (David Reid)
Date: Fri Jan 20 01:27:34 2006
Subject: [Twisted-web] All night Twisted sprint @SuperHappyDevHouse.
Message-ID: <43D090D0.3010700@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

After attending several (read: all of them) SuperHappyDevHouse[1]
events, with several other Twisted developers, I've decided to organize
an official Twisted sprint for the January 28th event.  In case you're
not aware SuperHappyDevHouse is an all night Hack-a-thon organized by
Jeff Lindsay[2] and David E. Weekly[3] (of the Community Colo[4]) in the
Bay Area, CA.  It's typically filled with a lot of Web2.0 startups, (and
the companies that buy them (read: Yahoo and Google))  I'm hoping to
have a large portion of this sprint take place in meat space, but as
with all past Twisted sprints IRC and Mailing List traffic is always
appreciated.

The SuperHappyDevHouse is located at 2735 Skyfarm Drive, Hillsborough,
CA.  It's easy enough to find, Google Maps[5] knows right where it is.
Parking is kind of sparse so carpool if you can, or if you'd like to
take CalTrain we'll find someone to pick you up.  The most important
thing is to get as many Twisted developers and Fan Boys[6] in the same
place as possible.

Sprint attendees and topics will include Brian Warner working on newpb,
and David Reid (Me) working on twisted.web2 including the unreleased
client branch, and cleaning up trunk for a potential 0.2 release.

So I guess I'm really bad at this, but _anyone_ on the West Coast should
show up.  It'll be great it's a wonderful friendly atmosphere with
wonderfully smart people some great new ideas.</plug>

[1] http://superhappydevhouse.com/
[2] http://blogrium.com/
[3] http://david.weekly.org/
[4] http://communitycolo.net/
[5] http://maps.google.com/maps?q=2735+Skyfarm+Drive,+Hillsborough,+CA
[6] http://www.urbandictionary.com/define.php?term=fanboy

- -David Reid

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)

iD8DBQFD0JDGrsrO6aeULcgRAkYeAJ9pvjXPLHfgMW0WIV43RtCou6E7zQCeMLb1
3hdgkTL6LGK64bCxQeuKi5o=
=v1nJ
-----END PGP SIGNATURE-----

From andrea at cpushare.com  Fri Jan 20 11:36:21 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 20 12:37:35 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120033120.2697.1969860855.divmod.quotient.300@ohm>
References: <20060120023538.GW19010@opteron.random>
	<20060120033120.2697.1969860855.divmod.quotient.300@ohm>
Message-ID: <20060120183621.GE10354@opteron.random>

On Thu, Jan 19, 2006 at 10:31:20PM -0500, Jean-Paul Calderone wrote:
> On Fri, 20 Jan 2006 03:35:38 +0100, Andrea Arcangeli <andrea@cpushare.com> 
> wrote:
> >This fixes a typo in CVS and adds a common handler for file logging:
> >
> 
> Andrea,
> 
> Thanks for the patch.  Could you attach it to an issue at 
> <http://twistedmatrix.com/bugs/>?  Also, patches with unit tests are likely 
> to be applied more quickly than those without.

My test suite is the CPUShare server code, I tested it. This is a
trivial patch and I hope I can be applied right away without special
requirements (a bug was checked into trunk and this fixes it, plus it
adds one more class that nobody can be using yet, so it can't make
things worse). Or at least I've not nearly the time to write testsuites
for such trivial fixes, nor to attach them somewhere with a web browser,
sorry. I hoped I could contribute despite significant constraints, I'm
sorry if that's not the case. I think development of twisted is too
slow if it requires these formalities (especially given this is a web2
_unstable_ branch, I didn't touch anything else in my patch).

So I'm going to fork twisted into a private twisted-CPUShare branch for
my own server use where I won't have to waste time to fix bugs and, I'll
keep merging stuff from trunk as long as it makes sense. Ideally my
branch will be the same as trunk but I don't care anymore if that's not
the case. I'm going to write right now a prorprietary CPUShare guard
with caching of the cookies in ram, and real storage of the cookies in
sql.  This way restarting the server won't logout users like it happens
currently with nevow, which is unacceptable for the long term. The login
mechanism of twisted is overkill complicated and it provides zero
benefits, so I'll simplify it with the library-model as usual, while I
solve the harddisk persistence at the same time (I'll stop using all
those portal/realm nosense, where I even had to hack the logout with a
local function because it was missing parameters to the callback). From
twisted.web2 I only need the functionality to read cookies which seems
doable with the http_header response, I don't want to depend on anything
more complicated then that.  I can publish that guard code once it works
if there's interest, but only by email, I've no time for anything else
sorry. I hope to have the basic login working before the end of the
weekend (then next weekend I'll rewrite all the forms and rendering with
Cheetah and FormKit). If something goes wrong in this process I'll drop
twisted entirely from the server side since I've wasted enough time
already (I can still use it on the client side since it worked well
there, there's no http involved in the client side after all and
furthermore there are no smp scalability concerns on the client side).

From foom at fuhm.net  Fri Jan 20 12:27:47 2006
From: foom at fuhm.net (James Y Knight)
Date: Fri Jan 20 13:28:08 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120183621.GE10354@opteron.random>
References: <20060120023538.GW19010@opteron.random>
	<20060120033120.2697.1969860855.divmod.quotient.300@ohm>
	<20060120183621.GE10354@opteron.random>
Message-ID: <63D08D59-98BF-4219-A80C-12E8F32F1608@fuhm.net>

On Jan 20, 2006, at 1:36 PM, Andrea Arcangeli wrote:
> My test suite is the CPUShare server code, I tested it.

That is not a unit test.

And if you don't care if things keep working, that's okay. However,  
people generally _do_ like things to continue working. That's what  
unit tests are for. The logging code has worked in the past, but, as  
seen by the brokenness currently existing in svn, not having a test  
means someone may break it and nobody may notice. That's bad.  
Wouldn't you like to fix that?

> This is a
> trivial patch and I hope I can be applied right away without special
> requirements (a bug was checked into trunk and this fixes it, plus it
> adds one more class that nobody can be using yet, so it can't make
> things worse)

Fixing a bug without adding a test makes things slightly better, but  
fixing a bug *and* adding a test makes things much better. It'd be  
nice if you could help out by writing a test, even though it doesn't  
currently exist. However, even without that, yes, the bugfix will be  
made. Thanks for reporting it.

However, committing a new untested API to trunk makes things overall  
potentially worse not better, as it increases the likelihood of bugs  
being added unnoticed. Yes, I've been guilty of doing this, but it's  
not a _good_ thing.

James

From glyph at divmod.com  Fri Jan 20 13:03:54 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Jan 20 14:04:49 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120183621.GE10354@opteron.random>
Message-ID: <20060120200354.2697.1955877068.divmod.quotient.433@ohm>



On Fri, 20 Jan 2006 19:36:21 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>On Thu, Jan 19, 2006 at 10:31:20PM -0500, Jean-Paul Calderone wrote:

>> Andrea,
>>
>> Thanks for the patch.  Could you attach it to an issue at
>> <http://twistedmatrix.com/bugs/>?  Also, patches with unit tests are likely
>> to be applied more quickly than those without.
>
>My test suite is the CPUShare server code, I tested it.

James put this pretty well: if you fixed it this one time, how do we know that this won't just be reverted and broken again by some other patch?  We have tests for a reason.  We're not going to run CPUShare every time to make sure that it didn't break again.

>I hope I can be applied right away without special requirements

This is not a special requirement.  All patches are required to come with unit tests - JP's response is repeated so often, it was probably just some text he keeps in his clipboard whenever he is reading email.  You are asking for special consideration which, I might add, is more likely to be afforded to those who have a good track-record of writing tests and filing bugs.  You've contributed patches, but always free-form on the mailing list with little explanation and no tests - in some cases, that's more work to figure out than fixing the bug myself.

> Or at least I've not nearly the time to write testsuites
>for such trivial fixes,

Maybe if you did, my kernel wouldn't crash once a week... :)

>nor to attach them somewhere with a web browser, sorry.

Yet, you spent *all this time* in your email client.  How is that easier?  This message contained 5x as much text as would have been required in the bug report, probably more than would have been in the test and the report combined.

>I hoped I could contribute despite significant constraints, I'm

You are not special.  We are *all* operating under significant time constraints for working on Twisted.

>sorry if that's not the case. I think development of twisted is too
>slow if it requires these formalities (especially given this is a web2
>_unstable_ branch, I didn't touch anything else in my patch).

At this point, and I realize this may not be intentional, you are actually contributing negatively.  The "formalities" are in place to speed up the development process.  Without tests, we'd be spending twice or three times as much time reviewing every patch, and preparing for a release would require acceptance testing from dozens or hundreds of people.

>So I'm going to fork twisted into a private twisted-CPUShare branch for
>my own server use where I won't have to waste time to fix bugs and, I'll
>keep merging stuff from trunk as long as it makes sense.

You remember that 'epsilon' thing you objected to?  That is effectively Divmod doing exactly this.  It's a great idea.  Please do it!

>This way restarting the server won't logout users like it happens
>currently with nevow, which is unacceptable for the long term.

Libraries provide mechanism, user code provides policy.  Nevow did not want to specify a required persistence mechanism for sessions, so it is up to the user to implement that - but it has specific hooks (*documented*, *tested* specific hooks, even) which support this use case.  There are at least two examples of this: the old Quotient repository, at <http://divmod.org/svn/Quotient/trunk/quotient/web/sessionpersist.py> and one in the new Mantissa, at <http://divmod.org/svn/Divmod/trunk/Mantissa/xmantissa/websession.py>.  Both of these use the guard provided by nevow.

>I'll simplify it with the library-model as usual

I already asked you to stop trolling.

>(I'll stop using all those portal/realm nosense,

I'm sorry you don't understand cred, but that doesn't make it "nonsense".  Care to provide a specific criticism?

> where I even had to hack the logout with a
>local function because it was missing parameters to the callback).

(By the way, this doesn't count as a "specific criticism" - the convention of using closures in Lisp to accomplish this probably predates the programming career of anyone who posts to this list, and while it wasn't available in early releases of Python, bound methods were used to accomplish the same effect.)

>I've no time for anything else sorry.

Why do you assume that everyone else has so much time, to write tests for your code, to file your bugs for you?  For that matter, where does all this time for posting to mailing lists come from?

>I'll drop twisted entirely from the server side since I've wasted enough time
>already

You've certainly wasted enough of everyone's time at this point.  If you are going to keep using Twisted, could you direct your energies towards more positive contributions?  Your bugfixes are welcome enough, but >1 post per day about the "library model" isn't helping anybody, least of all you.

From dialtone at divmod.com  Fri Jan 20 13:58:42 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri Jan 20 14:59:07 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120183621.GE10354@opteron.random>
References: <20060120023538.GW19010@opteron.random>
	<20060120033120.2697.1969860855.divmod.quotient.300@ohm>
	<20060120183621.GE10354@opteron.random>
Message-ID: <20060120205842.GB3791@divmod.com>

On Fri, Jan 20, 2006 at 07:36:21PM +0100, Andrea Arcangeli wrote:

> My test suite is the CPUShare server code, I tested it. This is a
> trivial patch and I hope I can be applied right away without special
> requirements (a bug was checked into trunk and this fixes it, plus it
> adds one more class that nobody can be using yet, so it can't make
> things worse). Or at least I've not nearly the time to write testsuites
> for such trivial fixes, nor to attach them somewhere with a web browser,
> sorry. I hoped I could contribute despite significant constraints, I'm
> sorry if that's not the case. I think development of twisted is too
> slow if it requires these formalities (especially given this is a web2
> _unstable_ branch, I didn't touch anything else in my patch).

Unstable doesn't mean broken. Writing unittests might be boring but it's
absolutely required for projects developed by more than 2 people. And the
linux kernel shows how this is true quite well, and I also understand why
unstable is equal to broken for you.
Not counting the "many" rewrites that happen in the kernel each release.
We don't have 200-to-1000 developers regularly payed by international
corporations. Considering the free time we have and how many things are in
twisted (and I've yet to see a project in any language being as complete as it
is) I could say that the development is even fast.
Nobody has always committed unittests together with fixes but still this is
wrong and it's not yet another reason to insult the others' work especially
when what you say is false.

The rest of the post is pure FUD and trolling so I won't consider it.

> Cheetah and FormKit). If something goes wrong in this process I'll drop
> twisted entirely from the server side since I've wasted enough time
> already (I can still use it on the client side since it worked well
> there, there's no http involved in the client side after all and
> furthermore there are no smp scalability concerns on the client side).

I'm sorry to say this but... given your latest behavior I'd be happy if you
stopped using twisted at all since you are actually harming the community
instead of making it better. Maybe more time spent on unittests, bug trackers
and documentation or source code could have done better than the last 10-15
emails.
I'm sure that the ever crashing cherrypy web server will serve your pages
better and faster until it will crash for deadlocks. <g>

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
New Pet: http://www.stiq.it
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060120/7e12e98b/attachment.pgp
From ralf at brainbot.com  Fri Jan 20 14:42:44 2006
From: ralf at brainbot.com (Ralf Schmitt)
Date: Fri Jan 20 15:43:32 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120200354.2697.1955877068.divmod.quotient.433@ohm>
References: <20060120200354.2697.1955877068.divmod.quotient.433@ohm>
Message-ID: <43D15954.8060108@brainbot.com>

glyph@divmod.com schrieb:
>
>
> On Fri, 20 Jan 2006 19:36:21 +0100, Andrea Arcangeli 
> <andrea@cpushare.com> wrote:
>> On Thu, Jan 19, 2006 at 10:31:20PM -0500, Jean-Paul Calderone wrote:
>
>>> Andrea,
>>>
>>> Thanks for the patch.  Could you attach it to an issue at
>>> <http://twistedmatrix.com/bugs/>?  Also, patches with unit tests are 
>>> likely
>>> to be applied more quickly than those without.
>>
>> My test suite is the CPUShare server code, I tested it.
>
> James put this pretty well: if you fixed it this one time, how do we 
> know that this won't just be reverted and broken again by some other 
> patch?  We have tests for a reason.  We're not going to run CPUShare 
> every time to make sure that it didn't break again.
>
>> I hope I can be applied right away without special requirements
>
> This is not a special requirement.  All patches are required to come 
> with unit tests - JP's response is repeated so often, it was probably 
> just some text he keeps in his clipboard whenever he is reading 
> email.  You are asking for special consideration which, I might add, 
> is more likely to be afforded to those who have a good track-record of 
> writing tests and filing bugs.  You've contributed patches, but always 
> free-form on the mailing list with little explanation and no tests - 
> in some cases, that's more work to figure out than fixing the bug myself.
>
>> Or at least I've not nearly the time to write testsuites
>> for such trivial fixes,
>
> Maybe if you did, my kernel wouldn't crash once a week... :)
>
>> nor to attach them somewhere with a web browser, sorry.
>
> Yet, you spent *all this time* in your email client.  How is that 
> easier?  This message contained 5x as much text as would have been 
> required in the bug report, probably more than would have been in the 
> test and the report combined.
>
>> I hoped I could contribute despite significant constraints, I'm
>
> You are not special.  We are *all* operating under significant time 
> constraints for working on Twisted.
>
>> sorry if that's not the case. I think development of twisted is too
>> slow if it requires these formalities (especially given this is a web2
>> _unstable_ branch, I didn't touch anything else in my patch).
>
> At this point, and I realize this may not be intentional, you are 
> actually contributing negatively.  The "formalities" are in place to 
> speed up the development process.  Without tests, we'd be spending 
> twice or three times as much time reviewing every patch, and preparing 
> for a release would require acceptance testing from dozens or hundreds 
> of people.
>
>> So I'm going to fork twisted into a private twisted-CPUShare branch for
>> my own server use where I won't have to waste time to fix bugs and, I'll
>> keep merging stuff from trunk as long as it makes sense.
>
> You remember that 'epsilon' thing you objected to?  That is 
> effectively Divmod doing exactly this.  It's a great idea.  Please do it!
>
This is only a great idea since patches tend to rot in the bugtracker. 
I've added a patch for sending new style classes via pb at the end of 2003.
10 months later this has been assigned, in march 2005 db3l asks why this 
patch hasn't been applied (he's using it successfully).
In April things start to fly: tests are being written, code is committed 
(not my simple 3 line diff, something else).
However, my test program still doesn't work. In the end it's fixed 
[http://twistedmatrix.com/bugs/issue426]
So, maybe you should check your "formalities" that speed up the 
development process. I guess they aren't working that good.

It doesn't make sense for everyone to manage their own patched twisted, 
fixing the same bugs...


- Ralf


From andrea at cpushare.com  Fri Jan 20 15:36:58 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 20 16:38:09 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <43D15954.8060108@brainbot.com>
References: <20060120200354.2697.1955877068.divmod.quotient.433@ohm>
	<43D15954.8060108@brainbot.com>
Message-ID: <20060120223658.GH10354@opteron.random>

On Fri, Jan 20, 2006 at 10:42:44PM +0100, Ralf Schmitt wrote:
> This is only a great idea since patches tend to rot in the bugtracker. 
> I've added a patch for sending new style classes via pb at the end of 2003.
> 10 months later this has been assigned, in march 2005 db3l asks why this 
> patch hasn't been applied (he's using it successfully).

The same happened for the ssl exceptions.

> So, maybe you should check your "formalities" that speed up the 
> development process. I guess they aren't working that good.

Agreed.

> It doesn't make sense for everyone to manage their own patched twisted, 
> fixing the same bugs...

I can consider exporting my branch instead of keeping it private. I use
mercurial, so development wouldn't be centralized. I could pull from
anybody else branch and anybody could pull from mine.

I now understand Rogers's choice, but I think a stable branch without
formalities could give more confidence (it does for me, and if that
fails too, I'll take rogers path).

http://twistedmatrix.com/pipermail/twisted-python/2005-May/010300.html

From andrea at cpushare.com  Fri Jan 20 16:18:38 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 20 17:19:49 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120205842.GB3791@divmod.com>
References: <20060120023538.GW19010@opteron.random>
	<20060120033120.2697.1969860855.divmod.quotient.300@ohm>
	<20060120183621.GE10354@opteron.random>
	<20060120205842.GB3791@divmod.com>
Message-ID: <20060120231838.GI10354@opteron.random>

On Fri, Jan 20, 2006 at 09:58:42PM +0100, Valentino Volonghi wrote:
> I'm sorry to say this but... given your latest behavior I'd be happy if you
> stopped using twisted at all since you are actually harming the community
> instead of making it better. Maybe more time spent on unittests, bug trackers
> and documentation or source code could have done better than the last 10-15
> emails.

If stuff like is checked into SVN trunk (instead of the file logging
feature I posted!), it means I'm not the only one that could spend his
time better.

http://svn.twistedmatrix.com/cvs/trunk/doc/fun/Twisted.Quotes?r1=15551&r2=15652&p1=trunk/doc/fun/Twisted.Quotes&p2=trunk/doc/fun/Twisted.Quotes

From glyph at divmod.com  Fri Jan 20 16:24:36 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Jan 20 17:24:38 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <43D15954.8060108@brainbot.com>
Message-ID: <20060120232436.2697.114965641.divmod.quotient.437@ohm>


On Fri, 20 Jan 2006 22:42:44 +0100, Ralf Schmitt <ralf@brainbot.com> wrote:
>glyph@divmod.com schrieb:
>>You remember that 'epsilon' thing you objected to?  That is effectively 
>>Divmod doing exactly this.  It's a great idea.  Please do it!

>This is only a great idea since patches tend to rot in the bugtracker.

Most Divmod team members are on the core development team for Twisted, and we *only* put patches in Epsilon which have *already* been applied to Twisted.  I've said this at least twice in this thread already.

It's a good idea because there is *work* associated with releasing Twisted, work which neither you nor certain other posters seem willing to do.

> I've added a patch for sending new style classes via pb at the end of 2003.

... with no unit tests

>10 months later this has been assigned, in march 2005 db3l asks why this 
>patch hasn't been applied (he's using it successfully).

... with no unit tests

>In April things start to fly: tests are being written,

Here's the causality:

"In April, unit tests are written, and things start to fly."

I won't promise that all patches in the tracker will be applied immediately, even with appropriate tests - after all, review takes some work too, and as I keep repeating, we are short on manpower - but they certainly rot less in the tracker than they would if they were just some random mailing list post.  That bug report provided a hub for quite a bit of discussion, patches, etc, whereas the same thing as a mailing list thread might have been resurrected 5 or 6 times with no actual work being done.

More importantly, if the peanut gallery ever decides to start going through the tracker and fixing things rather than trolling the various lists, the presence of your bug report there will give them some meat to work on.  The last thing a contributor who is strapped for time wants to do is come to a project and read every message in the last 6 years of archives in reverse-date order, looking for something to work on.

>However, my test program still doesn't work.

You almost certainly would have had a better experience if you had submitted it in the form of a unit test.

Trial currently has a feature which allows you to return a Deferred from a unit test.  The code you submitted could have been several lines *shorter* and been in the correct format; the deferred created by callRemote effectively terminates the test.  Even if this code was submitted before Trial added that feature, there are tests for PB which hit the network that you could have cribbed from.

>So, maybe you should check your "formalities" that speed up the development 
>process. I guess they aren't working that good.

http://www.gamesfromwithin.com/articles/0503/000078.html

"""
Here's the interesting part, though: I claim that once you're comfortable with TDD and you've applied it to a large amount of code, your development speed will actually be faster than it would be without TDD. So not only you get all the other benefits, but things will go faster and more smoothly. How's that possible?
"""

All you are looking at is the speed to apply your one patch - Twisted's overall development speed includes the time taken to fix the bugs introduced by such patches.  It may not contain any - but, without tests, how do we know?

>It doesn't make sense for everyone to manage their own patched twisted, 
>fixing the same bugs...

You're right about that.  Like Divmod, anyone maintaining a local fork because they depend on bugfixes should submit those bugfixes, with tests, to the Twisted project **first**.

Finally, this policy isn't going to change.  For every minor inconvenience it has caused you, it has saved Twisted contributors days or weeks of work.  Whining about it just convinces me that people who don't write tests are whiners who produce buggy code, and who should therefore be ignored.  Is this the image you are trying to project?

From glyph at divmod.com  Fri Jan 20 16:39:32 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Jan 20 17:40:35 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120231838.GI10354@opteron.random>
Message-ID: <20060120233932.2697.1764341163.divmod.quotient.438@ohm>



On Sat, 21 Jan 2006 00:18:38 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:

>If stuff like is checked into SVN trunk (instead of the file logging
>feature I posted!), it means I'm not the only one that could spend his
>time better.
>
> (... Twisted.Quotes ...)

Let me clarify my position - unit tests are not required for commits to Twisted.Quotes.  If you have a patch to that file we will evaluate it purely on its humorousness and relationship to the various individuals who contribute to Twisted on a regular basis.  I apologize for not having previously stated the official requirements for inclusion in the quote file in a public forum outside of IRC.

Seriously though, are you *trying* to convince us all that you are the biggest jerk in the world?  First, you tell Divmod what we are and aren't allowed to do with our own code.  Then, you waste a bunch of our time because you won't allow anyone to tell *you* what the requirements are for getting code included in Twisted.  Finally, you tell the Twisted team what we can and can't do with our free time.  Perhaps you have become confused and you believe you are in a managerial position because you, or CPUShare, have recently contributed a large sum of money to the Twisted team.  Let me assure you that you that you are not - I just checked my paypal account, and it has nothing to say about you.

Wasting our time and pissing us off with repetitive posting of (mostly  incorrect) opinions to a mailing list is not quite the same thing as the Twisted developers getting together to have a good time on IRC.  If you want to spend your time chatting with *your* friends on IRC (or even on AIM or MSN!  Twisted supports all these protocols!) please, be my guest.

From general at eepatents.com  Fri Jan 20 16:46:36 2006
From: general at eepatents.com (Ed Suominen)
Date: Fri Jan 20 17:46:46 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120231838.GI10354@opteron.random>
References: <20060120023538.GW19010@opteron.random>	<20060120033120.2697.1969860855.divmod.quotient.300@ohm>	<20060120183621.GE10354@opteron.random>	<20060120205842.GB3791@divmod.com>
	<20060120231838.GI10354@opteron.random>
Message-ID: <43D1765C.90407@eepatents.com>

I've expressed my admiration for the Twisted project and the brilliance
of its developers on numerous occassions.  I like to think that my
background in patenting things gives me an eye for spotting innovative
work, and there's a *lot* of innovation going on with Twisted that,
thankfully, Glyph et al. have essentially given to the public for its
free use.

I hope that background gives me a little room to concur in some of the
criticism being aired here.  Perhaps we are long overdue for the kind of
hearing that Andrea is creating with his willingness to speak his mind. 
The Twisted team is great about sticking to good programming practices
and showing professionalism and maturity in certain cases but comes
across far differently in many others.  The religious fervor around unit
tests is a positive example, but the goofy naming conventions (jelly,
banana, manhole, etc.) that don't impart much if any information to the
source code reader are a very contrary case in point.  Andrea points out
another example below; there's a lot of just plain crud and useless
amusements littering up the SVN tree, yet many classes and methods in
the code are devoid of meaningful docstrings.

I once made the mistake of trying to check out SVN/branches -rHEAD and
found that there are several *gigabytes* of utterly worthless cruft in
there, the vast majority of which will never, ever be touched.  A huge
debate on IRC ensued about the wisdom of keeping abandoned stuff in the
HEAD revision of *any* SVN repository.  You can guess what my viewpoint
was, and I figured it fit well into the "do everything excellently even
to the point of pain" vision of the Twisted developers, but I was wrong
about that.

I even saw a bit of this contradictory zeitgeist on the #twisted IRC
channel recently, when someone was criticized for off topic posts about
more general Python stuff.  I pointed out that there is a lot of utter
nonsense on the IRC channel, including a lot of frankly silly,
repetitive stuff about poking, eating shoulders, stabbing in the eye, etc.

Sure, this is all free software and we're all largely in it to have some
fun, but I think there's some reasonable grounds for not-always positive
comments from the user base, and that hardly is "harming the community."

Best regards, Ed

Andrea Arcangeli wrote:

>On Fri, Jan 20, 2006 at 09:58:42PM +0100, Valentino Volonghi wrote:
>  
>
>>I'm sorry to say this but... given your latest behavior I'd be happy if you
>>stopped using twisted at all since you are actually harming the community
>>instead of making it better. Maybe more time spent on unittests, bug trackers
>>and documentation or source code could have done better than the last 10-15
>>emails.
>>    
>>
>
>If stuff like is checked into SVN trunk (instead of the file logging
>feature I posted!), it means I'm not the only one that could spend his
>time better.
>
>http://svn.twistedmatrix.com/cvs/trunk/doc/fun/Twisted.Quotes?r1=15551&r2=15652&p1=trunk/doc/fun/Twisted.Quotes&p2=trunk/doc/fun/Twisted.Quotes
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web@twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>  
>


From foom at fuhm.net  Fri Jan 20 17:01:03 2006
From: foom at fuhm.net (James Y Knight)
Date: Fri Jan 20 18:01:15 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <43D1765C.90407@eepatents.com>
References: <20060120023538.GW19010@opteron.random>	<20060120033120.2697.1969860855.divmod.quotient.300@ohm>	<20060120183621.GE10354@opteron.random>	<20060120205842.GB3791@divmod.com>
	<20060120231838.GI10354@opteron.random>
	<43D1765C.90407@eepatents.com>
Message-ID: <FA590771-FB7A-401C-97B9-86C1BA8DA86E@fuhm.net>

On Jan 20, 2006, at 6:46 PM, Ed Suominen wrote:
> Sure, this is all free software and we're all largely in it to have  
> some
> fun, but I think there's some reasonable grounds for not-always  
> positive
> comments from the user base, and that hardly is "harming the  
> community."

I completely agree with that, in principle, but I think we've passed  
the reasonableness threshold on this set of threads at least 5 days  
ago. At the rate this discussion is degenerating, it shouldn't be  
long too long until the truth of Godwin's Law is demonstrated.

James

From mike at mkp.ca  Fri Jan 20 17:05:48 2006
From: mike at mkp.ca (Mike Pelletier)
Date: Fri Jan 20 18:06:00 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120233932.2697.1764341163.divmod.quotient.438@ohm>
References: <20060120233932.2697.1764341163.divmod.quotient.438@ohm>
Message-ID: <200601201905.48574.mike@mkp.ca>

They say it's better to say nothing and be thought a fool.  Allow me to 
demonstrate as I recklessly jump into an already overheated discussion.

On Fri January 20 2006 18:39, glyph@divmod.com wrote:
> Seriously though, are you *trying* to convince us all that you are the
> biggest jerk in the world?

It's been interesting following the list for the last week or so.  Andrea's 
served, consciously or not, as a pretty fair Devil's Advocate.  I've always 
looked forward to what the movers and shakers on the list will make out of 
the latest bug up his... bonnet.  It's a credit to the list that things have 
remained as civil as they have, and that his concerns have been given as much 
attention as they have.

But it's starting to get old.  There's got to come a time when one has to just 
laugh, tussle his hair, and say, "Oh, that Andrea."  Surely that time has 
come by now.  For instance, and do correct me if I'm wrong, I think he's 
admitted in passing to not having used unit tests before.  Like everything 
else that has come up which he isn't familiar with, he later dismissed them 
as pointless.  How long can this sort of "that's not the way Mom does it" 
criticism be taken seriously?  Andrea seems determined to find an answer to 
that question.

Mike.


From ralf at brainbot.com  Fri Jan 20 17:48:33 2006
From: ralf at brainbot.com (Ralf Schmitt)
Date: Fri Jan 20 18:49:21 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060120232436.2697.114965641.divmod.quotient.437@ohm>
References: <20060120232436.2697.114965641.divmod.quotient.437@ohm>
Message-ID: <43D184E1.8080407@brainbot.com>

glyph@divmod.com schrieb:
>> I've added a patch for sending new style classes via pb at the end of 
>> 2003.
>
> ... with no unit tests
>
Come on. I added a simple test program. If someone told me to write unit 
tests for it, I would have done it. But there has just been
no reaction for 10 months.

Do the twisted developers only start fixing bugs if the bug reporter 
writes a unit test revealing that bug?

>> 10 months later this has been assigned, in march 2005 db3l asks why 
>> this patch hasn't been applied (he's using it successfully).
>
> ... with no unit tests
>
>> In April things start to fly: tests are being written,
>
> Here's the causality:
>
> "In April, unit tests are written, and things start to fly."
>
> I won't promise that all patches in the tracker will be applied 
> immediately, even with appropriate tests - after all, review takes 
> some work too, and as I keep repeating, we are short on manpower - but 
> they certainly rot less in the tracker than they would if they were 
> just some random mailing list post.  That bug report provided a hub 
> for quite a bit of discussion, patches, etc, whereas the same thing as 
> a mailing list thread might have been resurrected 5 or 6 times with no 
> actual work being done.
>
ACK

> More importantly, if the peanut gallery ever decides to start going 
> through the tracker and fixing things rather than trolling the various 
> lists, the presence of your bug report there will give them some meat 
> to work on.  The last thing a contributor who is strapped for time 
> wants to do is come to a project and read every message in the last 6 
> years of archives in reverse-date order, looking for something to work 
> on.
>
I'm not trolling. Reporting bugs is also a form of contribution, people 
spent time on doing it, even sent a patch, and get ignored.
[http://twistedmatrix.com/bugs/issue392]. And you start insulting them 
(btw. what is peanut gallery?), instead of being glad that they
give back their feedback?

>> However, my test program still doesn't work.
>
> You almost certainly would have had a better experience if you had 
> submitted it in the form of a unit test.
>
My experience was fine. We were already using the patched version. But, 
to repeat myself:
I would have written unit tests if someone told me to do it.


>> So, maybe you should check your "formalities" that speed up the 
>> development process. I guess they aren't working that good.
>
> http://www.gamesfromwithin.com/articles/0503/000078.html
>
> """
> Here's the interesting part, though: I claim that once you're 
> comfortable with TDD and you've applied it to a large amount of code, 
> your development speed will actually be faster than it would be 
> without TDD. So not only you get all the other benefits, but things 
> will go faster and more smoothly. How's that possible?
> """
>
> All you are looking at is the speed to apply your one patch - 
> Twisted's overall development speed includes the time taken to fix the 
> bugs introduced by such patches.  It may not contain any - but, 
> without tests, how do we know?
>
I look at the speed of fixing bugs. And in this particular case it took 
18 months or so to fix it.
I have added other bug reports, without getting any reaction.

IMHO, having working code without tests is better than having buggy code 
without tests (well, one might argue that it's the same...).

>> It doesn't make sense for everyone to manage their own patched 
>> twisted, fixing the same bugs...
>
> You're right about that.  Like Divmod, anyone maintaining a local fork 
> because they depend on bugfixes should submit those bugfixes, with 
> tests, to the Twisted project **first**.
>
I admit that it's nice for the twisted developers to have bug reports in 
the form of failing unit tests. But you can't expect everyone
to write them.

> Finally, this policy isn't going to change.  For every minor 
> inconvenience it has caused you, it has saved Twisted contributors 
> days or weeks of work.  Whining about it just convinces me that people 
> who don't write tests are whiners who produce buggy code, and who 
> should therefore be ignored.  Is this the image you are trying to 
> project?
>
I'm not whining (actually I write unit tests at work). We use twisted at 
our company and appreciate the work that has gone into it.
But one thinks about saving that work of reporting bugs, when they just 
aren't dealt with.


- Ralf


From glyph at divmod.com  Fri Jan 20 17:51:59 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Jan 20 18:52:01 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <43D1765C.90407@eepatents.com>
Message-ID: <20060121005159.2697.1428286767.divmod.quotient.443@ohm>



On Fri, 20 Jan 2006 15:46:36 -0800, Ed Suominen <general@eepatents.com> wrote:
>I've expressed my admiration for the Twisted project and the brilliance
>of its developers on numerous occassions.  I like to think that my
>background in patenting things gives me an eye for spotting innovative
>work, and there's a *lot* of innovation going on with Twisted that,
>thankfully, Glyph et al. have essentially given to the public for its
>free use.

Hint to other people with criticism - this is a good way to start a message :)

(Thanks, Ed)

>I hope that background gives me a little room to concur in some of the
>criticism being aired here.  Perhaps we are long overdue for the kind of
>hearing that Andrea is creating with his willingness to speak his mind.

Yes.

I am frequently looking for criticism of various Twisted (and Divmod) projects; especially from competent people with specific goals in mind.  I have been heard to complain about this, actually - useful criticism is hard to find.  I probably hear more baseless hagiography than baseless insults.  It's equally useless :).

A pipe-dream of mine is to get a thorough efficiency review of the Twisted codebase from a really experienced C++ programmer; to have them just totally rip it apart and suggest (or better yet, of course, provide) a reactor implementation that is maximally efficient according to the best known practices for async I/O.  Jason Beardsley, can you hear me? :)

Perhaps we can turn this thread into a productive discussion.

>The Twisted team is great about sticking to good programming practices
>and showing professionalism and maturity in certain cases but comes
>across far differently in many others.  The religious fervor around unit
>tests is a positive example, but the goofy naming conventions (jelly,
>banana, manhole, etc.) that don't impart much if any information to the
>source code reader are a very contrary case in point.

There should *definitely* be more documentation around things like PB - and a bit less silliness in naming perhaps.  However, I do note that the coding standard allows for silliness in module names, but forbids it in class, method, and function names.  A certain amount of silliness is unavoidable.  Corporate people call silliness "branding". What information does "ActiveX" or "Vista" or "Cocoa" impart to the user? but if you have any examples of where the standard has been violated, or you would like to improve the documentation of what the various silly names mean, *please* go ahead.

(Although, probably PB doc bug discussions should go on the other mailing list...)

>Andrea points out
>another example below; there's a lot of just plain crud and useless
>amusements littering up the SVN tree, yet many classes and methods in
>the code are devoid of meaningful docstrings.

Twisted.Quotes is a single file, and I have actually received quite a bit of positive feedback about the file's utility in understanding the IRC culture of the Twisted development team and lubricating social interactions that take place there, especially for people less familiar with IRC.  It's amusing, and perhaps not as useful as code, but it's not "crud" or "useless".

>I once made the mistake of trying to check out SVN/branches -rHEAD and
>found that there are several *gigabytes* of utterly worthless cruft in
>there, the vast majority of which will never, ever be touched.  A huge
>debate on IRC ensued about the wisdom of keeping abandoned stuff in the
>HEAD revision of *any* SVN repository.  You can guess what my viewpoint
>was, and I figured it fit well into the "do everything excellently even
>to the point of pain" vision of the Twisted developers, but I was wrong
>about that.

This, on the other hand, is definitely a useful observation.  Let me try my hand at that productive-conversation thing I mentioned before!

I missed this discussion, and if I hadn't, I would have agreed with you :-).  /branches in the Twisted repository is insane.  I actually removed some branches recently: around r15627.

Not to be too hard on the developers responsible for it - much of the crap in there is auto-generated.  cvs2svn generates branches if you *sneeze*.

Some of it belongs to people who are hard to contact, and currently the rudeness of just deleting it without warning outweighs the benefits of having a smaller checkout of /branches.

Divmod's repository tries hard to keep /branches to a reasonable size: everything at http://divmod.org/svn/Divmod/branches/ is something we're actually working on.  You'll note there is nothing older than a week.  I would like it *very much* if Twisted could get to that point.

>I even saw a bit of this contradictory zeitgeist on the #twisted IRC
>channel recently, when someone was criticized for off topic posts about
>more general Python stuff.  I pointed out that there is a lot of utter
>nonsense on the IRC channel, including a lot of frankly silly,
>repetitive stuff about poking, eating shoulders, stabbing in the eye, etc.

I think I can half-defend this behavior.  The silliness is done by people who are active contributors.  In reality, they're just people who were formerly active contributors or who are friends of contributors, which is why I can only half-defend it.

The silliness is energizing to developers, as are on-topic questions.  However, new people who show up to ask off-topic but technical questions are soaking up the time that #twisted's denizens want to spend either being silly or working on Twisted.  If someone were to pay a Twisted developer to support Python (or some Linux distribution, as those questions are sometimes heard too) I'm sure that you'd find them very prompt and courteous, as well as knowledgeable.

In many cases, this support fatigue is related to half a decade spent in #python, answering the same question hundreds or thousands of times.  There's nothing wrong with simple Python questions, but there is an appropriate forum on IRC already, and there are plenty of people there who can help you.

>Sure, this is all free software and we're all largely in it to have some
>fun, but I think there's some reasonable grounds for not-always positive
>comments from the user base, and that hardly is "harming the community."

The harm to the community comes from the frequent implications of things like "Divmod told me to use Atop, and it ruined my business!".  Mr. Arcangeli hasn't ever stated that directly, of course, but he continues to strongly imply it.  I consider this *personally* very insulting, since Divmod has put a lot of money, time, and energy (argubaly more than was wise) into building a reputation with the open-source community.  That reputation has been immensely valuable, since we have gotten lots of help from tireless contributors like Matt Goodall.  Such a thing can be easily destroyed, and future contributors repelled, by a few misleading comments about the availability of support, or lack thereof, for our code.

The harm comes from continuously repeating the same vague, baseless differences of opinion with Twisted developers.  The fact that Andrea Arcangeli happens to prefer code that is in the library model rather than the framework model is not a serious criticism of Twisted.  Nor is the fact that he doesn't like to close over arguments rather than have them passed to him from the framework.

There are LOTS of problems with Nevow.  To mention a few: livepage.LivePage should be converted into a backward-compatibility wrapper around athena.LivePage.  The flatten() system can get stuck in a dead loop if you do apparently-innocuous things.  Lots of things are undocumented.  Fragments largely obviate the need for the evil 'ctx' and 'data' arguments on every renderer.  These are all problems about which very concrete things can be said.  Here are some more:

<http://divmod.org/trac/query?status=new&status=assigned&status=reopened&groupdesc=1&group=priority&component=Nevow&order=priority>

You might ask, "Why then, glyph, do you bother to respond?  Shouldn't you be fixing those problems?"  I do actually have a reason :-).  Comments like the ones we're talking about are discouraging.  There are lots of developers working on webby Twisted things that are frequently frustrated enough to throw their hands up and go play Crack Attack instead, just because of the volume of *legitimate* problems we have to deal with.  Responding to emphasize that this  rudeness isn't important feedback is important.  It turns a long-winded screed about how worthless all the Nevow team's efforts have been into an amusing flamewar ;-).

Still, I *would* rather be spending my time on more positive ways to keep them energized.

From andrea at cpushare.com  Fri Jan 20 18:14:56 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 20 19:16:08 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <200601201905.48574.mike@mkp.ca>
References: <20060120233932.2697.1764341163.divmod.quotient.438@ohm>
	<200601201905.48574.mike@mkp.ca>
Message-ID: <20060121011456.GJ10354@opteron.random>

On Fri, Jan 20, 2006 at 07:05:48PM -0500, Mike Pelletier wrote:
> admitted in passing to not having used unit tests before.  Like everything 

I've not used unit test in my CPUShare work related to Twisted, but that's
because I've no time for that and this isn't going to change.

Please don't confuse the kernel work I do, with the CPUShare work. The
CPUShare work I do happens in the spare time with very little resources,
so I'm not even dreaming of writing unit tests.

In the kernel we use things like LTP or other stress test like cerberus
to check for regression. But those packages are separated. In my 8 years
of lkml experience I've never heard one single time that one fix or
feature wasn't applied because the author didn't write a corresponding
LTP testcase yet (I've heard all sort of arguments but not yet the
missing unittest). The group of people doing LTP is infact almost not
overlapping with the people writing the kernel code.  Furthermore the
LTP and the other stress tests are in userland, so there's a moltitude
of kernel-internal apis they can't hope to test.  However we've some
subsystem module like the packet injection engine or the RCU torture
test module that can stress some kernel internal apis to spot race
conditions or bugs. But to make an example, the RCU torture test was
posted and included _years_ after RCU made into the kernel and after
being used by routing cache, IPC and dcache for years. The idea is to
first make things working, then once stuff works, we can spend some time
for the unittest.

It's shoking for me to hear that valid bugfixes and features are left
hanging around for years in bugrackers because no unit test exists.

The twisted branch that CPUShare will use in production on the server
side from now on is published at the below URL. This is a fork in the
sense that I'll change whatever I need on the server side (while still
providing backwards compatibility). I'll closely track twisted SVN trunk
on a weekly or monthly (or daily) basis. I'll try to keep the thing
working stable as much as I can, since it'll be used on live servers.
For example if I feel twisted.web2 is changing too fast I may freeze it
for a while in my branch to reduce the number of breakages to the apps.
Fixes and new features will be applied promptly and without formalities.
I'll send fixes upstream through the mailing list but I don't expect
them to be applied due the lack of unittest.

	http://www.cpushare.com/hg/Twisted

You can check it out with mercurial:

	http://www.selenic.com/mercurial/
	http://www.selenic.com/mercurial/wiki/index.cgi/QuickStart

quickstart:

wget http://www.selenic.com/mercurial/mercurial-snapshot.tar.gz
tar xzf mercurial-snapshot.tar.gz
cd mercurial-snapshot
python setup.py install
hg clone http://www.cpushare.com/hg/Twisted /whereveryouwant/Twisted

then edit /whereveryouwant/Twisted, "hg ci", and publish on your server
so I can pull it back.  here the twisted.web2 module to publish on your
server (hgwebdir.cgi is from twisted dir):

from twisted.web2 import server, twcgi, channel
from twisted.internet import defer

site = server.Site(twcgi.FilteredScript('hgwebdir.cgi',
					filters=['python']))

from twisted.application import service, strports
application = service.Application("mercurial")
s = strports.service('tcp:8080', channel.HTTPFactory(site))
s.setServiceParent(application)

From andrea at cpushare.com  Fri Jan 20 18:45:41 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 20 19:46:52 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <20060121005159.2697.1428286767.divmod.quotient.443@ohm>
References: <43D1765C.90407@eepatents.com>
	<20060121005159.2697.1428286767.divmod.quotient.443@ohm>
Message-ID: <20060121014541.GK10354@opteron.random>

On Fri, Jan 20, 2006 at 07:51:59PM -0500, glyph@divmod.com wrote:
> The harm comes from continuously repeating the same vague, baseless 
> differences of opinion with Twisted developers.  The fact that Andrea 
> Arcangeli happens to prefer code that is in the library model rather than 
> the framework model is not a serious criticism of Twisted.  Nor is the fact 

I repeated it so many times but it seems you didn't got what I meant
yet. It was never a criticism to Twisted, I was talking about
Nevow. The only criticism I have to Twisted is that it doesn't scale in
SMP, despite it theoretically could but nobody attempted it yet (ok,
python would be bad at running it so I guess it wouldn't make much sense
in practice even if it's an attractive idea in theory). Not scaling in
smp is bad but I don't want to get into those details, for now getting
twisted.web2 stable single threaded would be enough...

The API provided by Twisted is not a limitation because it offers all
features already, it's just an extension of the socket API (which is
fixed in stone anyway). Twisted just provides an abstraction of it and
that's good in my opinion.

To make a parallel in the kernel we've lots of apis where you've to
register into.  The VFS is the most obvious example of that.
Filesystems have to be written following a strict API and there's no
(sane) way to make a filesystem without following those strict rules and
those strict callbacks. Because again this API is the one that userland
sees (reiser4 tried to break that rule, but I think they backed it out
since it wasn't backwards compatible).

However in a moltitude of other cases it's possible to create a library
that is being called (instead of calling). USB is an example of that.
The lowlevel drivers just use a library. It's the driver code that calls
into the usb highlevel, not the other way around. parport is similar.
When it's possible to do that, it's much nicer to do that, since it
leaves an higher degree of flexibility to the developer.

SCSI unfortunately didn't do that, and scsi become hard to maintain in
fact. All scsi drivers in linux are just implementing callbacks and
that's sometime not flexible enough (I had myself troubles with
recursion into the scsi higlevel code when I was hacking on ppa
initially).

Please don't confuse my criticism to the nevow way of hooking inside the
app way beyond its templating library job, with a criticism to twisted.

From andrea at cpushare.com  Fri Jan 20 22:05:50 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Jan 20 23:07:01 2006
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051117205537.GC62588@prometheusresearch.com>
References: <1132186939.7885.10.camel@audrey.local>
	<20051117115711.10365.635838822.divmod.quotient.8775@ohm>
	<20051117205537.GC62588@prometheusresearch.com>
Message-ID: <20060121050550.GM10354@opteron.random>

On Thu, Nov 17, 2005 at 03:55:37PM -0500, Clark C. Evans wrote:
> So, this is what I mean by per-request state.  Since each stage of
> execution happens by a distinct Resource, a great deal of information
> needs to be stored in the Request object (or what ever you want to call
> it).   Now if a ClarkRequest extends a HttpRequest to add what I need,
> so be it; right now my code is sloppy -- I just modify the request
> object's dict.  Perhaps it is poor pratice; but with a decent regression
> test it really isn't a problem at all.   I only have a handful of 
> variables that are needed.

I'm also clobbering the req dict namespace for similar reasons:

	def start_timer(self, req):
		req.start_time = time.time()
	def render(self, req):
		self.start_timer(req)

and I'm also doing session authentication by hand with the cookie + db,
so I plan to clobber more of the req for the session. Using interfaces
would avoid the clobbering but it's slower.

And what was the final decision about getCookie/setCookie? If they're
added I can change my code to them too ;).

Thanks.

From glyph at divmod.com  Fri Jan 20 22:09:44 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Jan 20 23:09:45 2006
Subject: [Twisted-web] Actual Useful Post
In-Reply-To: 0
Message-ID: <20060121050944.2697.434668864.divmod.quotient.497@ohm>

Going back over the recent thread that everyone else has probably already killfile'd, I have extracted several useful points, and I will present them here detached from the other thread so they don't get lost in the noise.  The fact that I took exception to the presentation of these ideas doesn't mean that the problems aren't real.

#1, something for the Twisted team to do

The bugtracker(s) need to be kept in a more up-to-date state.  If a patch has been stalled for lack of tests, it should be very clear that it's been stalled for lack of tests so that people can write some.  For lack of a better convention, maintainers, please look at your bug-lists and make sure that the status is "need-eg" (in roundup) or it has the keyword "testblocked" (in trac) if they need more tests or an explanation.  There is a stark difference between tickets which might not receive attention because the maintainer doesn't have any time, and tickets which definitely won't receive attention because other tickets that have tests already, or are in the maintainer's interests, are higher priority.  This will also make it easier for people who don't want to submit tests to submit patches and have a mechanism for test fanatics to contribute tests to those fixes they want merged.

In trac I have also tried to mark tickets with "low" or "lowest" priority if they are tickets that I would prefer someone to steal from me.  I would suggest that others do the same.

#2, something for the community to do

Twisted, and Twisted's web-related projects should have more regular releases, so that other projects don't need to track them or deal with self-installed monkeypatches any longer than necessary.  Although I've defended this practice, and I do think that it's a requirement of the practical necessity of providing the community with stable releases, it's *not* ideal; if everyone were running apt and we had a dedicated package maintainer and a mechanism for strict backwards compatibility verification, I'd want to update every copy of Twisted in the world when we fixed a bug.

What we need to do a stable release of Twisted is fixes for the few release-critical bugs, and then user-testing of the package.  Normally the release manager does this, but the more feedback we have, the surer we are that the package is ready to go, and the less that the release manager has to do.  You can help out by looking at the 'admin/subproject.txt' in Twisted.  Make a release using the technique described there, run the unit tests, use some applications, and verify that whatever code you've written using Twisted is still working.  Look over the SVN log for noteworthy changes and help write a NEWS file that summarizes them comprehensibly.

Anything that turns the buildbot greener also increases the chance that a release will be forthcoming.

I am lead to believe that Chris Armstrong (our GLORIOUS release-manager, hallowed be his name for all time, amen) is going to be putting together a release this weekend.  I hope he will post a followup that includes more detailed instructions.  (Hint, hint.)

From glyph at divmod.com  Fri Jan 20 22:22:03 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Jan 20 23:22:05 2006
Subject: [Twisted-web] web2 log patch
In-Reply-To: <43D184E1.8080407@brainbot.com>
Message-ID: <20060121052203.2697.838199551.divmod.quotient.501@ohm>

On Sat, 21 Jan 2006 01:48:33 +0100, Ralf Schmitt <ralf@brainbot.com> wrote:
>glyph@divmod.com schrieb:
>>>I've added a patch for sending new style classes via pb at the end of 
>>>2003.
>>
>>... with no unit tests
>Come on. I added a simple test program. If someone told me to write unit 
>tests for it, I would have done it. But there has just been
>no reaction for 10 months.

Yes.  This is a serious problem.  I just wrote another post which mentions it.  I hope that it does not happen in the future.

I misunderstood your first post and thought that you were aware of the requirement and chose to disregard it - I'm sorry.

>Do the twisted developers only start fixing bugs if the bug reporter writes 
>a unit test revealing that bug?

No.  I could probably argue for a while over whether the bug you submitted was really high-priority; subtle issues opened by the patch; some still-unresolved problems with PB and new-style classes.  It's all pretty much moot, though, and offtopic for this list.

I remember having several in-person exchanges about that _particular_ patch, none of which were recorded in the tracker.  That, also, is a problem, but we have so few in-person exchanges it's hardly worth worrying about.  The context of the unit-tests discussion is this: if you need a fix, and a Twisted developer *doesn't* think it's important, the inclusion of unit tests will likely see it merged regardless.

> (...) I would have written unit tests if someone told me to do it. (...)

Since you had to repeat yourself, let me repeat the apology.  I was confused by the context of your objection.

>I look at the speed of fixing bugs. And in this particular case it took 18 
>months or so to fix it.
>I have added other bug reports, without getting any reaction.

If you'd like to mention them off-list I will have a look and we can discuss the priority they're at and what other possibly undisclosed requirements or requests for more information that there are.  I think tests are important, that doesn't mean I think people should feel ignored by the Twisted team when they're submitting valuable bug reports.

>IMHO, having working code without tests is better than having buggy code 
>without tests (well, one might argue that it's the same...).

I think that the parenthetical comment there pretty much makes my argument for me :).

>I admit that it's nice for the twisted developers to have bug reports in the 
>form of failing unit tests. But you can't expect everyone
>to write them.

Yes.  Let me reiterate - if you discover a serious bug, report it, and it will be fixed, roughly in order of its importance (as determined by some random person on the Twisted project, whose priorities may not be in line with your own).  You don't need to include any tests, or a patch.

*If you have written a patch*, which is seriously important to you, and you want to do what you can to get it merged faster, copious unit tests, and a distant second, a good explanation of what it's for, will get it merged faster.  If you can explain that it is covered by existing tests, and fixes an intermittent failure, that's almost as good.  (For example, I added process support to the default reactor on Windows recently, and there were existing tests which covered that functionality that were previously disabled.  I just turned them on.)

If a Twisted developer chooses to fix your bug, it is almost certain that they will write their *own* tests when they do it, or get endless shit from the rest of us about it :).

>I'm not whining (actually I write unit tests at work). We use twisted at our 
>company and appreciate the work that has gone into it.
>But one thinks about saving that work of reporting bugs, when they just 
>aren't dealt with.

It sounds like we agree on more of this than we disagree on, so I suspect that as I misread your message, you also slightly misread my reply.  People should report bugs, people should send patches.  They won't be harrassed for either, tests or no tests, nor will the patches and bugs be disregarded.  They just shouldn't expect patches with no tests that are not directly in line with a developer's interest to be considered high-priority.

(Of course, on a project with the developer/work ratio of Twisted, anything that isn't high-priority just isn't going to happen.)

From radeex at gmail.com  Fri Jan 20 22:45:50 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Fri Jan 20 23:45:52 2006
Subject: [Twisted-web] Actual Useful Post
In-Reply-To: <20060121050944.2697.434668864.divmod.quotient.497@ohm>
References: <20060121050944.2697.434668864.divmod.quotient.497@ohm>
Message-ID: <60ed19d40601202145m243be34cid30099645d93fa1d@mail.gmail.com>

On 1/21/06, glyph@divmod.com <glyph@divmod.com> wrote:
> #2, something for the community to do
...
> What we need to do a stable release of Twisted is fixes for the few release-critical bugs, and then user-testing of the package.  Normally the release manager does this, but the more feedback we have, the surer we are that the package is ready to go, and the less that the release manager has to do.  You can help out by looking at the 'admin/subproject.txt' in Twisted.  Make a release using the technique described there, run the unit tests, use some applications, and verify that whatever code you've written using Twisted is still working.  Look over the SVN log for noteworthy changes and help write a NEWS file that summarizes them comprehensibly.

admin/subproject.txt is at least accurate, but certainly not very
descriptive. I'll try to write a proper document this weekend about
how releases get done.


> I am lead to believe that Chris Armstrong (our GLORIOUS release-manager, hallowed be his name for all time, amen) is going to be putting together a release this weekend.  I hope he will post a followup that includes more detailed instructions.  (Hint, hint.)

Hey Glyph, can I get a Twisted RM Holy Robe +2?

Anyway, as I said earlier, the thing that needs the most work that's
related to releases is web site and documentation stuff. API docs are
basically impossible to generate for mortals right now. I've heard
some people can get epydoc to work if they do crazy stuff, but it's
not worked for me in a long time. I'd be impressed if someone can get
API docs being generated on a regular basis. It'd be especially nice
if we can get the web site updated with these docs on a regular basis,
in both per-release and "in development" doc sections. Same goes for
the Developer Guide.

If anyone wants to help out with these (but *not* another web site
redesign, please), then I'd be glad to consult.

As for release procedure, as I said above I'll try to come up with
something a bit more comprehensive this weekend.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+

From nico at tekNico.net  Sat Jan 21 01:54:00 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Sat Jan 21 02:54:22 2006
Subject: [Twisted-web] Re: web2 log patch
In-Reply-To: <200601201905.48574.mike@mkp.ca>
References: <20060120233932.2697.1764341163.divmod.quotient.438@ohm>
	<200601201905.48574.mike@mkp.ca>
Message-ID: <dqssr9$nph$1@sea.gmane.org>

> How long can this sort of "that's not the way Mom does it" 
> criticism be taken seriously?

Exactly. It looks like a typically Italian, self-centered, "Mommist" world
view, and rather limiting too.


> Content-Type: text/plain;
>   charset="iso-8859-6"

Mmh... Arabic?!?

-- 
Nicola Larosa - http://www.tekNico.net/

You asked about my "path to world domination". Well, I guess I want
the whole world to be like the Oberlin CS Lab was: a sharing community
where people assume that improving the system is within anyone's reach.
 -- Karl Fogel, November 2005


From mwh at python.net  Sat Jan 21 03:35:23 2006
From: mwh at python.net (Michael Hudson)
Date: Sat Jan 21 04:35:40 2006
Subject: [Twisted-web] Re: web2 log patch
References: <43D1765C.90407@eepatents.com>
	<20060121005159.2697.1428286767.divmod.quotient.443@ohm>
Message-ID: <2macdpoolw.fsf@starship.python.net>

glyph@divmod.com writes:

> Twisted.Quotes is a single file, and I have actually received quite
> a bit of positive feedback about the file's utility in understanding
> the IRC culture of the Twisted development team and lubricating
> social interactions that take place there, especially for people
> less familiar with IRC.  It's amusing, and perhaps not as useful as
> code, but it's not "crud" or "useless".

Twisted.Quotes is *great* and the idea that time spent maintaining
that file is time wasted that should have been spent, e.g., working on
twisted.web2.client is so wrong-headed as to be completely baffling.

Cheers,
mwh

-- 
  Hmm, that attempt at trolling did not work out as well as I had
  hoped.                                     -- Steve VanDevender, asr


From paul-lists at perforge.com  Sat Jan 21 02:18:11 2006
From: paul-lists at perforge.com (Paul G)
Date: Sat Jan 21 17:01:23 2006
Subject: [Twisted-web] Re: web2 log patch
References: <20060120233932.2697.1764341163.divmod.quotient.438@ohm><200601201905.48574.mike@mkp.ca>
	<dqssr9$nph$1@sea.gmane.org>
Message-ID: <20e301c61ede$9597bbc0$6402a8c0@dcore>


----- Original Message ----- 
From: "Nicola Larosa" <nico@tekNico.net>
To: <twisted-web@twistedmatrix.com>
Sent: Saturday, January 21, 2006 3:54 AM
Subject: [Twisted-web] Re: web2 log patch


>> How long can this sort of "that's not the way Mom does it"
>> criticism be taken seriously?
>
> Exactly. It looks like a typically Italian, self-centered, "Mommist" world
> view, and rather limiting too.

i hate to break it to you, but behavioural generalizations based on 
nationality have rarely worked based on my observations. for example, i am 
neither an avid vodka drinker (no time to be wasted) nor a mafia operative 
(i wasn't good enough at battering people to death with blunt objects when i 
was a teenager).

>> Content-Type: text/plain;
>>   charset="iso-8859-6"
>
> Mmh... Arabic?!?

... and what does that have to do with anything? i'm not the political 
correctness police by any means, but i fail to see how such remarks are 
relevant to this discussion or this list. i fear the 'not too long before 
godwin strikes' prediction has been more spot on than i'd hoped.

-p 


From andrea at cpushare.com  Sat Jan 21 18:53:12 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 21 19:59:39 2006
Subject: [Twisted-web] CPUShare-Twisted
Message-ID: <20060122015312.GC20603@opteron.random>

Hello everyone,

if you've pending patches that have not been applied or you've
no time for unittests until your project works, you can consider
switching to CPUShare-Twisted. Mercurial allows distributed development
so we can merge our branches against each other with very little effort.

If you've suggestion for betters names you're welcome. I could have done
it over sourceforge but they lack mercurial AFIK and since I've the
setup on cpushare.com I was quick to add Twisted to it. We can move it
elsewhere later if needed (especially if it consumes too much network
bandwidth ;).

I have no interest to maintain twisted except for the fact I'm using it
in semi-production and I plan to use it in production, and so I need it
to be stable, and with all possible bugfixes and features applied
without formalities. I assume other business usages of twisted may have
the same needs, so perhaps we can join our efforts with this project.

My choice was to either dump twisted or to maintain it locally, and so I
clearly have an interest to make the CPUShare-Twisted branch public and
to include other people fixes and features (I was already maintaining it
over the last year except it was just a patch with fixes that I failed
to push in SVN, and not a real fork).

You can find the quickstart, basic objectives (including the not trying
to reinvent the wheel) and mailing list details on the project page:

	http://www.cpushare.com/twisted

I'll keep tracking SVN. I'll also keep submitting patches upstream since
one can always hope for the best.

Also note, over the last year I've fixed at least one bug in core
twisted basic protocols that would have never been found with any
unittest out there. Careful auditing and reading code and filtering of
the patches, and thinking deeply about the design before writing code
(to write the code in a way that won't break easily over time), is much
more important than spending time on unittests. Unittests still makes
perfect sense after stuff is included and works in basic testing, but
they should be separated from the logic of committing valid patches to
the tree.

NOTE: before clicking on that page you may want to also answer these
questions:

1) is python much better than ruby and all other language on earth?
2) is twisted much better than any other framework to write network apps?
3) are twisted and python fast and scalable enough for all applications?
4) is the single threaded model scalable enough for all applications in
   smp?
5) is async programming using deferreds simpler to code for a webserver
   that is stateless and that only does sql queries over the network?
6) would you rather prefer to go broke than to use code
   "not-invented-here" or not written with python and twisted?
   (of course the python interpreter the c compiler and the underlying
   operative system are magically excluded from the not-invented-here
   clause for whatever unknown reason)

I'm welcome anybody who wants to join cpushare-twisted, but if the
answer of _any_ of the above questions is "yes", I think you may be
better off ignoring this email.

From andrea at cpushare.com  Sat Jan 21 19:01:52 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 21 20:08:19 2006
Subject: [Twisted-web] [cpushare@cpushare.com: KLive Exception]
Message-ID: <20060122020152.GD20603@opteron.random>

Hello,

I've already sent it to David privately, but posting it here may have a
larger audience (I imagine foom may be interested in it too). This is
the first sms/email-exception since I deployed web2 in production (told
you it would have been a good contribution to start testing it). It was
harmless, but we've to fix it.

Checking for self.stream is not None would be enough, but I suspect it
would be the wrong fix. I mean, how can it happen that the stream is
NULL in the _LogByteCounter?

    def close(self):
        if self.done:
            done=self.done; self.done=None
            done(False, self.len)
        self.stream.close()
	^^^^^^^^^^^ was NULL

btw, I'm going to add in the CPUShare-Twisted branch addCookie/isSecure
to the request and setCookie to the response objects (if you start using
mercurial you'll then get them by pulling my tree).

----- Forwarded message from cpushare@cpushare.com -----

Date: Sat, 21 Jan 2006 10:02:31 +0100 (CET)
From: cpushare@cpushare.com
Subject: KLive Exception
X-Mailbox-Line: From nobody Sat Jan 21 10:02:31 2006

Traceback (most recent call last):
  File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 307, in _runCallbacks
    
  File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/server.py", line 375, in _cbFinishRender
    
  File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 229, in callback
    
  File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 294, in _startRunCallbacks
    
--- <exception caught here> ---
  File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 307, in _runCallbacks
    
  File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/http.py", line 404, in writeResponse
    
  File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/log.py", line 41, in close
    
exceptions.AttributeError: 'NoneType' object has no attribute 'close'

----- End forwarded message -----

From andrea at cpushare.com  Sat Jan 21 19:23:48 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 21 20:30:15 2006
Subject: [Twisted-web] [cpushare@cpushare.com: KLive Exception]
In-Reply-To: <20060122020152.GD20603@opteron.random>
References: <20060122020152.GD20603@opteron.random>
Message-ID: <20060122022348.GE20603@opteron.random>

I just got another (different) exception from web2:

          File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 307, in _runCallbacks
            
          File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/server.py", line 375, in _cbFinishRender
            
          File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 229, in callback
            
          File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 294, in _startRunCallbacks
            
        --- <exception caught here> ---
          File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 307, in _runCallbacks
            
          File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/server.py", line 365, in filterit
            
          File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/server.py", line 43, in preconditionfilter
            
          File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/http.py", line 242, in checkPreconditions
            
        twisted.web2.http.HTTPError: 

        if request.method in ("HEAD", "GET"):
            # If it's a range request, don't allow a weak ETag, as that
            # would break. 
            canBeWeak = not request.headers.hasHeader('Range')
            if notModified != False and matchETag(inm, canBeWeak):
                raise HTTPError(NotModifiedResponse(response))
		^^^^^ this one

Here it looks like an exception isn't being trapped.

From andrea at cpushare.com  Sat Jan 21 20:13:57 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 21 21:20:24 2006
Subject: [Twisted-web] [cpushare@cpushare.com: KLive Exception]
In-Reply-To: <20060122020152.GD20603@opteron.random>
References: <20060122020152.GD20603@opteron.random>
Message-ID: <20060122031357.GF20603@opteron.random>

On Sun, Jan 22, 2006 at 03:01:52AM +0100, Andrea Arcangeli wrote:
> Checking for self.stream is not None would be enough, but I suspect it
> would be the wrong fix. I mean, how can it happen that the stream is
> NULL in the _LogByteCounter?

Ok, looks like the response.stream can be null sometime (at least there
is other code that contemplates this possibility) and we probably want
to log those requests with null stream.

So the obvious fix should be the right fix too:

	http://www.cpushare.com/hg/Twisted/?cs=57753be7d975

(click on the "raw" button to download a clean patch to apply to SVN if
you don't want to use mercurial in the first place to pull the tree)

Now looking into the other exception that I reported...

From andrea at cpushare.com  Sat Jan 21 20:42:59 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 21 21:49:25 2006
Subject: [Twisted-web] [cpushare@cpushare.com: KLive Exception]
In-Reply-To: <20060122022348.GE20603@opteron.random>
References: <20060122020152.GD20603@opteron.random>
	<20060122022348.GE20603@opteron.random>
Message-ID: <20060122034259.GG20603@opteron.random>

On Sun, Jan 22, 2006 at 03:23:48AM +0100, Andrea Arcangeli wrote:
> I just got another (different) exception from web2:
> 
>           File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 307, in _runCallbacks
>             
>           File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/server.py", line 375, in _cbFinishRender
>             
>           File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 229, in callback
>             
>           File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 294, in _startRunCallbacks
>             
>         --- <exception caught here> ---
>           File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/internet/defer.py", line 307, in _runCallbacks
>             
>           File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/server.py", line 365, in filterit
>             
>           File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/server.py", line 43, in preconditionfilter
>             
>           File "/home/build/bin/i686/python-20060121/lib/python2.4/site-packages/twisted/web2/http.py", line 242, in checkPreconditions
>             
>         twisted.web2.http.HTTPError: 
> 
>         if request.method in ("HEAD", "GET"):
>             # If it's a range request, don't allow a weak ETag, as that
>             # would break. 
>             canBeWeak = not request.headers.hasHeader('Range')
>             if notModified != False and matchETag(inm, canBeWeak):
>                 raise HTTPError(NotModifiedResponse(response))
> 		^^^^^ this one
> 
> Here it looks like an exception isn't being trapped.

This one above seems just a side effect of the other bug just fixed, so
the other fix should make this one go away too.

From andrea at cpushare.com  Sat Jan 21 21:27:18 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Jan 21 22:33:45 2006
Subject: [Twisted-web] fix web2 connection lost error handler
Message-ID: <20060122042718.GH20603@opteron.random>

comments and patch here:

http://www.cpushare.com/hg/Twisted/?cs=a924218612ef

thanks.

From glyph at divmod.com  Sat Jan 21 21:55:44 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Sat Jan 21 22:55:47 2006
Subject: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122015312.GC20603@opteron.random>
Message-ID: <20060122045544.2697.96381428.divmod.quotient.702@ohm>

On Sun, 22 Jan 2006 02:53:12 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:

>if you've pending patches that have not been applied or you've
>no time for unittests until your project works, you can consider
>switching to CPUShare-Twisted. Mercurial allows distributed development
>so we can merge our branches against each other with very little effort.

If you've pending patches that have not been applied, would you please consider instead to agitate for those patches on the mailing lists, and add information to them in the tracker?  Discussing an abandoned patch can cast some light where it is needed.  Putting it into the CPUShare fork rather than the bugtracker virtually guarantees that no core Twisted developer will ever look at it.  Not that you can't do both - I just want to make it clear that we're going to keep working off the bugtracker and SVN, not off of random mercurial (or git or bzr or monotone - not to pick on hg) repositories run by users.

Also, Andrea, would you mind making sure that your codebase is visually distinct from Twisted in some way that is identifiable when it is run?  My main concern here is that if CPUShare-Twisted is to become popular, it seems likely that users might confuse it with the actual Twisted.  Since you have loudly declared your animosity towards filing bugs, I assume CPUShare-Twisted will not have its own bugtracker, and since you are opposed to test-driven development, I am sure that it will be full of bugs.  I would prefer it if we could avoid asking the Twisted team to deal with those bugs as well as actual bugs in Twisted, when users discover the only Twisted bugtracker is on twistedmatrix.com.

The best option would be to avoid using the same module name, but I understand that tracking trunk would be made more difficult with a diff that touched every import.  Perhaps instead you could change the version from SVN-Trunk to 'HG-CPUShare', so that the CPUShare-ness of the code is visible at the beginning of any logs, and change the names of the command line tools to e.g. cpushare-twistd and cpushare-mktap?  This would save time since developers could reject bugs immediately upon seeing one of those commands or the telltale log message rather than having to identify that the line numbers are all wrong before doing so.

From tjstebbing at gmail.com  Sat Jan 21 23:17:51 2006
From: tjstebbing at gmail.com (Tim Stebbing)
Date: Sun Jan 22 00:23:54 2006
Subject: [Twisted-web] nevow + ajax - lite
Message-ID: <972281650601212217q335b56f5j4fd0babd3ff47a30@mail.gmail.com>

Just recently someone commented on how people where starting to write
form field validation using athena, I mean, talk about overkill. I've
been using something like this little snippet of code since about the
time athena got json.py added with great success to build
mochikit-using ajax UIs.

Athena rocks, but unless you actually want to receive server side
events, its usually overkill, things like field validation are a great
example of this. If you think hard about the type of app you're
writing its more often than not the common case not to be expecting
serverside events.

from twisted.internet.defer import maybeDeferred
from twisted.python import log
from nevow import rend, static, json

class AjaxResource(rend.Page):

    def childFactory(self, ctx, methodName):
        f = getattr(self, 'ajax_' + methodName, None)
        if f:
            d = maybeDeferred(f, ctx)
            d.addCallback(lambda r: static.Data(json.serialize(r),'text/html'))
            d.addErrback(log.err)
            return d
        return json.serialize(u"Method not found")


this could be a mixin, but I usually just subclass it, you just add an
ajax_foo(self, ctx) method and call it from javascript using
mochikit's loadJSONDoc, inside your ajax_ method you access
inevow.IRequest(ctx).args to get any params. Perhaps some smart person
could make it extract the args and pass them to the method if they
liked. Its designed to be about as simple as you can get, I think
thats a good point.

hope this is useful for someone

-tjs

From andrea at cpushare.com  Sat Jan 21 23:52:18 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 22 00:52:24 2006
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122045544.2697.96381428.divmod.quotient.702@ohm>
References: <20060122015312.GC20603@opteron.random>
	<20060122045544.2697.96381428.divmod.quotient.702@ohm>
Message-ID: <20060122065218.GI20603@opteron.random>

On Sat, Jan 21, 2006 at 11:55:44PM -0500, glyph@divmod.com wrote:
> If you've pending patches that have not been applied, would you please 
> consider instead to agitate for those patches on the mailing lists, and add 

These are the very old ones (ignore the web2 part that is recent).

http://www.cpushare.com/hg/Twisted/?cs=400da64bd5a6

IIRC you said that disconnecting isn't present in all protocols, not sure if
you added disconnecting to all protocols. There was a discussion to add
more names, but I didn't see any fix going into SVN trunk. I need it in
tcp and these fixes are good enough for my usage (call it dirty fix but
it works for me). The other is a fundamental feature I need from the
proxy, it's backwards compatible so it doesn't add up any risk but I
never received feedback on it. Without it, it's impossible to safely
stack one server on top of the other without losing the client info.

I'm in discussion how to add it to web2 with headers instead of path
mangling.

> information to them in the tracker?  Discussing an abandoned patch can cast 
> some light where it is needed.  Putting it into the CPUShare fork rather 

I agree, but I always needed the fix since day zero. I had to maintain
it for so long. The fact I'm exporting the tree in a public way can't make
things worse as far as SVN integration is concerned. If something it can
make things better, since with a public tree there may be more interest
from your part in reducing the diff to nothing ;).

> than the bugtracker virtually guarantees that no core Twisted developer 
> will ever look at it.  Not that you can't do both - I just want to make it 
> clear that we're going to keep working off the bugtracker and SVN, not off 
> of random mercurial (or git or bzr or monotone - not to pick on hg) 
> repositories run by users.

Sure I understand that.

> Also, Andrea, would you mind making sure that your codebase is visually 
> distinct from Twisted in some way that is identifiable when it is run?  My 
> main concern here is that if CPUShare-Twisted is to become popular, it 
> seems likely that users might confuse it with the actual Twisted.  Since 
> you have loudly declared your animosity towards filing bugs, I assume 
> CPUShare-Twisted will not have its own bugtracker, and since you are 
> opposed to test-driven development, [..]

My developmnt is generally test-driven. I'm only opposed to unit-test
mandatory development to fix bugs or add new features. Writing unit-test
isn't the only way to test code. It's nice to have a unit test, even a
simple one, but it shouldn't be mandatory.

> [..] I am sure that it will be full of bugs. 

Time will tell. Since you made your prediction I'll make mine. I'm sure
axiom is wasted time in its current API (at least as far as twisted is
concerned).

I don't see how you can advertize axiom saying "We do plan to add some
later, and perhaps also support other databases in the future.". Sure
you can add it, but if you do it, the whole axiom api will fall apart
unless you want to make synchronous queries over the network. The only
two deferreds you have are during startup and in the testsuite, just
grep for the word Deferred. Making synchronous sql queries in the
twisted async model is unacceptable for anything serious.  Infact even
sqllite queries are obviously unacceptable once the db grows beyond the
size of the cache (and for sure you can't scale the queries over
different servers to have more ram-cache when using sqllite).

Ironically axiom current api would have a chance to work well with
threads, with twisted single threaded async model not.

There are good python storage packages to use with twisted and threads
(heck there is even pgasync if you're religious about not using
threads, why do you think people like me, Valentino and the pgasync
author care about using non-blocking solutions while doing queries to
the db?). I can't imagine why you insist on making your inferior
solution with a design that can't work well with twisted.

I'm feeling guilty for risking hitting the harddisk for a few msec when
people clicks on the mailing list archives, and infact I keep two
webservers exactly to avoid hurting the scalability of the ssl one.

> I would prefer it if we could avoid asking the Twisted team to deal with 
> those bugs as well as actual bugs in Twisted, when users discover the only 
> Twisted bugtracker is on twistedmatrix.com.

Sure.

> The best option would be to avoid using the same module name, but I 
> understand that tracking trunk would be made more difficult with a diff 
> that touched every import.  Perhaps instead you could change the version 
> from SVN-Trunk to 'HG-CPUShare', so that the CPUShare-ness of the code is 

Ok, I'll make this change right away. I already did that for the web2 side.

> visible at the beginning of any logs, and change the names of the command 
> line tools to e.g. cpushare-twistd and cpushare-mktap?  This would save 
> time since developers could reject bugs immediately upon seeing one of 
> those commands or the telltale log message rather than having to identify 
> that the line numbers are all wrong before doing so.

This is a very fair requirement (changing the version is trivial).
However I don't see much point in changing the commands if the module
name is the same. Either I change both, or none. I mean, changing
cpushare-twistd won't prevent a python app importing the reactor to get
mine instead of the official one, so you would still risk to get bogus
bugreports unless I rename both. I think I can rename the module later
if some people uses it, right now I've no idea if people will use it, or
if I'll remain the only user (clearly as long as I'm the only user I
don't need to rename the module ;).

From glyph at divmod.com  Sun Jan 22 03:02:41 2006
From: glyph at divmod.com (glyph@divmod.com)
Date: Sun Jan 22 04:02:42 2006
Subject: [Twisted-web] fix web2 connection lost error handler
In-Reply-To: 0
Message-ID: <20060122100241.2697.651049258.divmod.quotient.769@ohm>

On Sun, 22 Jan 2006 05:27:18 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>comments and patch here:
>
>http://www.cpushare.com/hg/Twisted/?cs=a924218612ef

Please send comments and patches to the bugtracker:

    http://twistedmatrix.com/bugs/

It's a basic courtesy, like using the proper format of diff.  You can just as easily link to external repositories or files from there as from the mailing list.

I skimmed the patch since it was so short, although I do wish it had been in the tracker.

 - You're disabling logging which someone else may have been depending upon in the same revision as you're fixing an arguably legitimate bug.  An exception was being trapped incorrectly.  Maybe you want to log a message rather than an error in the event of disconnects?  Maybe it should be an option?  At any rate, not separating the issues makes it harder to include the patch.

 - The aforementioned 'legitimate bugfix' is still wrong, except now it's slow and stylistically wrong instead of fast and logically wrong.  The appropriate API to use there is reason.check(error.ConnectionLost).  (Actually, I personally think it should be reason.trap(error.ConnectionLost), but then you'd depend on finalizing-deferred exception reporting, and it looks like someone was trying to avoid that...?)

 - You didn't really explain what the problem was, besides log noise.  What is the expected behavior?  Why is it expected?  What is the incorrect observed behavior?  You're randomly changing things around to suit your personal preferences (Twisted does not include an SMS log exception reporter, so I'm sure that wasn't bothering anyone else), and while that's fine for you, to be included in a release other people will use, it should have some justification.

One procedural error for every line of code that you changed - *and* you didn't write tests, not because you didn't have time yet, but because you refuse to.  Do you really wonder why your patches don't get included?

From l.oluyede at gmail.com  Sun Jan 22 03:33:56 2006
From: l.oluyede at gmail.com (Lawrence Oluyede)
Date: Sun Jan 22 04:33:59 2006
Subject: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122015312.GC20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
Message-ID: <9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>

> Also note, over the last year I've fixed at least one bug in core
> twisted basic protocols that would have never been found with any
> unittest out there. Careful auditing and reading code and filtering of
> the patches, and thinking deeply about the design before writing code
> (to write the code in a way that won't break easily over time), is much
> more important than spending time on unittests. Unittests still makes
> perfect sense after stuff is included and works in basic testing, but
> they should be separated from the logic of committing valid patches to
> the tree.

I think nobody here is claiming that you're not a useful to the
Twisted effort. Mr. Lefkowitz has already apologized for the delays of
applying patches (mostly due to lack of unit tests and manpower) but
stating that a great eye on code is better than automatic testing I
think it's wron and I don't know where one excludes the other. You can
can write test, use your experience to read through it and find if
it's correct and submit to the Twisted folks. It's very normal to
apply a pending patch on your local Twisted tree while waiting that
they apply it on the trunk. Delays? Why you don't join the project?

> NOTE: before clicking on that page you may want to also answer these
> questions:

Let me say that reading those kind of question I'm starting to think
that Twisted it's not what you need in first place, so why bother
rewriting your app N times or wasting your time here if Twisted is not
what you need? I specifically refer to the question #5

> 1) is python much better than ruby and all other language on earth?

Than Ruby? The answer is no. It's a matter of tastes. Than all the
languages? Who knows them all?

> 2) is twisted much better than any other framework to write network apps?

Which other framework do you know? I'm aware of ACE for C++ and
another for Perl. Full stop. There are languages like E, like Oz
having concurrency support builtin but they aren't "frameworks"

> 3) are twisted and python fast and scalable enough for all applications?

Twisted and Python are scalable enough for all applications that uses
them. If you need something powerful why using them? I don't
understand your kind of questions.

> 4) is the single threaded model scalable enough for all applications in
>    smp?

The same as above.

> 5) is async programming using deferreds simpler to code for a webserver
>    that is stateless and that only does sql queries over the network?

That's my main concern. If you have stateless stuff and you do only
sql queries, do you really need all the twisted power?

> 6) would you rather prefer to go broke than to use code
>    "not-invented-here" or not written with python and twisted?
>    (of course the python interpreter the c compiler and the underlying
>    operative system are magically excluded from the not-invented-here
>    clause for whatever unknown reason)

What's the meaning of such a question?

> I'm welcome anybody who wants to join cpushare-twisted, but if the
> answer of _any_ of the above questions is "yes", I think you may be
> better off ignoring this email.

I wish you luck but this clause terrifies me:
"If the CPUShare-Twisted fork fails to be successful, CPUShare will
stop using Twisted, so the use of this fork is at your own risk."

If you have find time to write countless emails on this mailing list,
to say that Nevow is ugly and slow, to whatever... why didn't write
unit tests for patches and stop?

I don't understand the real point to your argues.

--
Lawrence
http://www.oluyede.org/blog
From mike at mkp.ca  Sun Jan 22 08:34:48 2006
From: mike at mkp.ca (Mike Pelletier)
Date: Sun Jan 22 09:35:12 2006
Subject: [Twisted-web] Re: web2 log patch
In-Reply-To: <dqssr9$nph$1@sea.gmane.org>
References: <20060120233932.2697.1764341163.divmod.quotient.438@ohm>
	<200601201905.48574.mike@mkp.ca> <dqssr9$nph$1@sea.gmane.org>
Message-ID: <200601221034.49571.mike@mkp.ca>

On Sat January 21 2006 03:54, Nicola Larosa wrote:
> > How long can this sort of "that's not the way Mom does it"
> > criticism be taken seriously?
>
> Exactly. It looks like a typically Italian...

Yikes.  I was being rude, yeah, but I didn't mean anything like that.  
Apologies to Andrea and the list if I seemed to be implying it.

> > Content-Type: text/plain;
> >   charset="iso-8859-6"
>
> Mmh... Arabic?!?

Don't ask me.  KMail automatically chose the encoding based on the content.  
Strange choice, but not incorrect.

Mike.

From andrea at cpushare.com  Sun Jan 22 10:04:40 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 22 11:04:47 2006
Subject: [Twisted-web] CPUShare-Twisted
In-Reply-To: <9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>
References: <20060122015312.GC20603@opteron.random>
	<9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>
Message-ID: <20060122170440.GK20603@opteron.random>

On Sun, Jan 22, 2006 at 11:33:56AM +0100, Lawrence Oluyede wrote:
> think it's wron and I don't know where one excludes the other. You can

I've never said one excludes the other, I say that unit-test should not
be mandatory, and if you should write the unit-test _after_ reviewing
the code, not before.

> Let me say that reading those kind of question I'm starting to think
> that Twisted it's not what you need in first place, so why bother
> rewriting your app N times or wasting your time here if Twisted is not
> what you need? I specifically refer to the question #5

I started to think the same indeed, especially the more time I spend
answering email like this one ;). However I still feel that it's quicker
to get things working with twisted in the short term, and given all my
founding are my savings I've to be dirty and quick (I can't pretend to
debug memory corruption or memory leaks with so little resources, so an
interpreter is a sane choice), but if I had more resources I could
afford not using it and it would be a lot faster and it would scale to a
larger number of users using the same hardware resources.

> That's my main concern. If you have stateless stuff and you do only
> sql queries, do you really need all the twisted power?

No my app isn't stateless, or I would be using the thread model too.
The very cpushare protocol is complex in the way it handles race
conditions and async event like disconnects, twisted makes life easy at
the expense of scalability. This helps getting things working quick. And
I use pb to attach the webserver to the cpushare server, this is why
it's confortable for me to use twisted on the web side too (I'm not
making queries to the db only).

But most people with simpler projects would be better off with threads
to write web apps. Infact twisted web already provides a model like
this, my mercurial export already use it, moinmoin also uses it. the
webserver it's twisted.web for both and they're threaded.

> I wish you luck but this clause terrifies me:
> "If the CPUShare-Twisted fork fails to be successful, CPUShare will
> stop using Twisted, so the use of this fork is at your own risk."

I wrote it to scare people indeed, I'm careful not to generate any hype,
you know what you get when you work with me. If you get on the
CPUShare-Twisted project it probably means you already had to maintain
your own set of patches for over one year, so joining efforts won't make
thing worse even if I decide to dump twisted from my proejct (I can
only tell that my twisted branch has solid backups and I can guarantee
an export will remain availble if things go wrong).

> If you have find time to write countless emails on this mailing list,
> to say that Nevow is ugly and slow, to whatever... why didn't write
> unit tests for patches and stop?

Even before you write the unittest you should fix nevow, and that's not
going to happen, it didn't happen in one year after I sent the first
performance bottleneck reports, it sure can't happen in the few hours I
spent writing these emails.

Plus it'd be terrible to waste time on nevow when Cheetah is already an
order of magnitude better and faster (IMHO of course).

> I don't understand the real point to your argues.

The point is: if you think the same way I think, if you've similar needs
to mine, switch to CPUShare-Twisted.

From andrea at cpushare.com  Sun Jan 22 10:29:53 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 22 11:30:01 2006
Subject: [Twisted-web] fix web2 connection lost error handler
In-Reply-To: <20060122100241.2697.651049258.divmod.quotient.769@ohm>
References: <20060122100241.2697.651049258.divmod.quotient.769@ohm>
Message-ID: <20060122172953.GL20603@opteron.random>

On Sun, Jan 22, 2006 at 05:02:41AM -0500, glyph@divmod.com wrote:
> Please send comments and patches to the bugtracker:
> 
>    http://twistedmatrix.com/bugs/

Done.

> It's a basic courtesy, like using the proper format of diff.  You can just 

Format diff is one click away, "raw". You want me to use the web to
file bugreports, so I thought you would be confortable with web reports too ;)

> slow and stylistically wrong instead of fast and logically wrong.  The 
> appropriate API to use there is reason.check(error.ConnectionLost).  

That's nicer, I'll fix that thanks!

> - You didn't really explain what the problem was, besides log noise.  What 
> is the expected behavior?  Why is it expected?  What is the incorrect 
> observed behavior?  You're randomly changing things around to suit your 
> personal preferences (Twisted does not include an SMS log exception 
> reporter, so I'm sure that wasn't bothering anyone else), and while that's 
> fine for you, to be included in a release other people will use, it should 
> have some justification.

It's a design decision, I want twisted to never generate exceptions,
unless there's a bug in twisted. An exception showing up in the log must
be like a kernel oops, when it happens it must signal a bug.

I considered logging a message but I thought it was not worth it, but
OTOH given this is still code under development, you're probably right
that it's a good idea (so if it happens too often we may want to review
the code).

> One procedural error for every line of code that you changed - *and* you 

My code work right, SVN didn't, so don't blame on me for fixing bugs
please. It's only a style error, not anything that could harm the
runtime. But I agree in making it more eye candy.

From l.oluyede at gmail.com  Sun Jan 22 12:06:42 2006
From: l.oluyede at gmail.com (Lawrence Oluyede)
Date: Sun Jan 22 13:06:45 2006
Subject: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122170440.GK20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
	<9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>
	<20060122170440.GK20603@opteron.random>
Message-ID: <9eebf5740601221106r26783955wf6a0e923a67b76d1@mail.gmail.com>

On 1/22/06, Andrea Arcangeli <andrea@cpushare.com> wrote:
> On Sun, Jan 22, 2006 at 11:33:56AM +0100, Lawrence Oluyede wrote:
> > think it's wron and I don't know where one excludes the other. You can
>
> I've never said one excludes the other, I say that unit-test should not
> be mandatory, and if you should write the unit-test _after_ reviewing
> the code, not before.

I think that tests MUST BE mandatory in every project used and/or
developed from more than 1 people.

As Mr. Lefkowitz said in the other message Twisted is not test driven,
requires only test for submitted code and I think it's the right way
to go if you won't break older or future code.

> No my app isn't stateless, or I would be using the thread model too.
> The very cpushare protocol is complex in the way it handles race
> conditions and async event like disconnects, twisted makes life easy at
> the expense of scalability. This helps getting things working quick. And
> I use pb to attach the webserver to the cpushare server, this is why
> it's confortable for me to use twisted on the web side too (I'm not
> making queries to the db only).

Ok so you need Twisted, no question about that.

> Even before you write the unittest you should fix nevow, and that's not
> going to happen, it didn't happen in one year after I sent the first
> performance bottleneck reports, it sure can't happen in the few hours I
> spent writing these emails.

Why didn't you ask to join the project?

> Plus it'd be terrible to waste time on nevow when Cheetah is already an
> order of magnitude better and faster (IMHO of course).

Ok we are in the tastes domain :)

> The point is: if you think the same way I think, if you've similar needs
> to mine, switch to CPUShare-Twisted.

Understood.

--
Lawrence
http://www.oluyede.org/blog
From andrea at cpushare.com  Sun Jan 22 17:03:42 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 22 18:03:47 2006
Subject: [Twisted-web] how to send parallel requests to the dbms while
	rendering html with Cheetah
Message-ID: <20060123000342.GT20603@opteron.random>

Hello,

With Cheetah I have full control on the serialization or parallelism of
my queries and thanks to a real dbms I can execute very expensive
queries in parallel on multiple cpus with just a small change:

--- server/web.py	20 Jan 2006 03:16:08 -0000	1.113
+++ server/web.py	22 Jan 2006 23:24:05 -0000
@@ -907,6 +907,17 @@ class root_page_class(cached_basepage_cl
 		t.title = 'KLive: Linux Kernel Live Usage Monitor'
 		s.write(t.block_title())
 
+		render_list = [
+			self.render_nr_sessions(req),
+			defer.maybeDeferred(archs_class().render, req),
+			defer.maybeDeferred(kernels_class().render, req),
+			defer.maybeDeferred(fs_class().render, req),
+			defer.maybeDeferred(mod_class().render, req),
+			defer.maybeDeferred(pci_class().render, req), 
+			defer.maybeDeferred(branch_class().render, req),
+			defer.maybeDeferred(vendor_class().render, req),
+			]
+
 		def finish(result):
 			t.latest_install = 'klive.sh'
 			t.latest_tac = 'klive.tac'
@@ -916,35 +927,21 @@ class root_page_class(cached_basepage_cl
 			s.write(self.render_copyright(req))
 			s.finish()
 
-		def render_branch(result):
-			d = defer.maybeDeferred(branch_class().render, req)
-			d = d.addCallback(s.write)
-			d = d.addCallback(finish)
-		def render_pci(result):
-			d = defer.maybeDeferred(pci_class().render, req)
-			d = d.addCallback(s.write)
-			d = d.addCallback(render_branch)
-		def render_vendor(result):
-			d = defer.maybeDeferred(vendor_class().render, req)
-			d = d.addCallback(s.write)
-			d = d.addCallback(render_pci)
-		def render_mod(result):
-			d = defer.maybeDeferred(mod_class().render, req)
-			d = d.addCallback(s.write)
-			d = d.addCallback(render_vendor)
-		def render_fs(result):
-			d = defer.maybeDeferred(fs_class().render, req)
-			d = d.addCallback(s.write)
-			d = d.addCallback(render_mod)
-
+		def render_list_callback(result):
+			try:
+				d = render_list.pop(0)
+			except IndexError:
+				finish(result)
+			else:
+				d = d.addCallback(s.write)
+				d = d.addCallback(render_list_callback)
 		def back_archs(result):
 			t.archs = result
 			s.write(t.block_archs())
 
-			d = defer.maybeDeferred(kernels_class().render, req)
+			d = render_list.pop(0)
 			d = d.addCallback(s.write)
-			d = d.addCallback(render_fs)
-
+			d = d.addCallback(render_list_callback)
 		def back_nr_sessions(result):
 			t.nr_sessions = result
 			t.live = live_class().render(req)
@@ -954,9 +951,11 @@ class root_page_class(cached_basepage_cl
 			t.ip = ip_class().render(req)
 			s.write(t.block_desc1())
 
-			d = defer.maybeDeferred(archs_class().render, req).addCallback(back_archs)
+			d = render_list.pop(0)
+			d.addCallback(back_archs)
 
-		self.render_nr_sessions(req).addCallback(back_nr_sessions)
+		d = render_list.pop(0)
+		d.addCallback(back_nr_sessions)
 
 		return http.Response(responsecode.OK,
 				     {'content-type': http_headers.MimeType('text', 'html')},

I've an old (slow) 2-way smp server, and by sending (readonly) queries
to postgresql in parallel I just reduce the time it takes to render the
usual klive pages from 2.9sec to 1.49sec (2 cpus working at 100%
executes the queries in parallel and so the results now arrives in
_exactly_ half the time, postgresql is really scaling perfectly in this
test). This new smp improvement comes after the huge boost I had after
moving from Nevow to Cheetah for the rendering of the html (from >5.9sec
to 2.9sec). On my 4-way dualcore opteron desktop the rendering time
changes from ~1sec to ~370msec.

So the overall since I started migrating to Cheetah, the time it takes
to render the klive homepage went down from 5.9sec (old
nevow+twisted.web code) to 1.5sec (new cheetah+twisted.web2 code). A
~300% performance improvement in rendering pages isn't bad. The code is
almost unchanged, just the html rendering model has changed.

This is just to share my real life experience and perhaps this could be
useful to others.

Now the 1.5sec are almost all spent waiting the sql queries and anyway
both cpus are fully utilized (Cheetah renders the first #blocks while
the other cpu calculates the results for the next block in parallel), so
there's probably not much left to optimize (nothing as easy as the
changes I did in the last days to move from 5.9sec to 1.5sec at least).

Parallel expensive queries to the db, is something that the axiom model
will never be able to achieve (as long as the api isn't changed to
return deferreds to allow real dbms instead of sqllite, which means all
code written today for the current axiom API will have to changed
significantly). Having to schedule to another context while waiting the
deferred to fire, may open a window for for race conditions too,
and have fun writing unit-test verifying race conditions.

While you can scale the network load by running multiple twisted
servers, you can't scale the db queries coming from different twisted
servers in parallel with the axiom API. This ignoring the fact nevow
doesn't contemplates the possibility of sending all queries in parallel.

From exarkun at divmod.com  Sun Jan 22 17:46:39 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun Jan 22 18:46:41 2006
Subject: [Twisted-web] how to send parallel requests to the dbms while
	rendering html with Cheetah
In-Reply-To: <20060123000342.GT20603@opteron.random>
Message-ID: <20060123004639.2697.321637470.divmod.quotient.908@ohm>

On Mon, 23 Jan 2006 01:03:42 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
>Hello,
>
>With Cheetah I have full control on the serialization or parallelism of
>my queries and thanks to a real dbms I can execute very expensive
>queries in parallel on multiple cpus with just a small change:
>
> [snip big diff]
>
>I've an old (slow) 2-way smp server, and by sending (readonly) queries
>to postgresql in parallel I just reduce the time it takes to render the
>usual klive pages from 2.9sec to 1.49sec (2 cpus working at 100%
>executes the queries in parallel and so the results now arrives in
>_exactly_ half the time, postgresql is really scaling perfectly in this
>test). This new smp improvement comes after the huge boost I had after
>moving from Nevow to Cheetah for the rendering of the html (from >5.9sec
>to 2.9sec). On my 4-way dualcore opteron desktop the rendering time
>changes from ~1sec to ~370msec.
>
>So the overall since I started migrating to Cheetah, the time it takes
>to render the klive homepage went down from 5.9sec (old
>nevow+twisted.web code) to 1.5sec (new cheetah+twisted.web2 code). A
>~300% performance improvement in rendering pages isn't bad. The code is
>almost unchanged, just the html rendering model has changed.
>
>This is just to share my real life experience and perhaps this could be
>useful to others.
>
>Now the 1.5sec are almost all spent waiting the sql queries and anyway
>both cpus are fully utilized (Cheetah renders the first #blocks while
>the other cpu calculates the results for the next block in parallel), so
>there's probably not much left to optimize (nothing as easy as the
>changes I did in the last days to move from 5.9sec to 1.5sec at least).
>

That's great, Andrea.

>Parallel expensive queries to the db, is something that the axiom model
>will never be able to achieve (as long as the api isn't changed to
>return deferreds to allow real dbms instead of sqllite, which means all
>code written today for the current axiom API will have to changed
>significantly). Having to schedule to another context while waiting the
>deferred to fire, may open a window for for race conditions too,
>and have fun writing unit-test verifying race conditions.
>
>While you can scale the network load by running multiple twisted
>servers, you can't scale the db queries coming from different twisted
>servers in parallel with the axiom API. This ignoring the fact nevow
>doesn't contemplates the possibility of sending all queries in parallel.

I don't understand why you insist on continuing to harp on this point, though.  Even if it were accurate (which I must stress, it /isn't/, and if you care to discuss the technical merits of Axiom, I'd be happy to do so on <divmod-dev@divmod.org> but /not/ here), no one cares.  You've been asked repeatedly to let it go, and by refusing to do so you are being very rude to the people who wrote the software you continue to use.  Please, you do your thing, let us do ours.

Jean-Paul

From maillists at ivsn.com  Sun Jan 22 18:01:03 2006
From: maillists at ivsn.com (Paul Reznicek)
Date: Sun Jan 22 19:01:39 2006
Subject: [Twisted-web] Web Shop (e-commerce)
In-Reply-To: <43C53E6F.5050406@the-moon.net>
References: <43C53E6F.5050406@the-moon.net>
Message-ID: <43D42ACF.3030208@ivsn.com>

Hi all,
do somebody know an existing (and working) web shop in Python?
-p

From dialtone at divmod.com  Sun Jan 22 18:24:18 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sun Jan 22 19:25:30 2006
Subject: [Twisted-web] how to send parallel requests to the dbms while
	rendering html with Cheetah
In-Reply-To: <20060123004639.2697.321637470.divmod.quotient.908@ohm>
References: <20060123000342.GT20603@opteron.random>
	<20060123004639.2697.321637470.divmod.quotient.908@ohm>
Message-ID: <20060123012418.GC27930@divmod.com>

On Sun, Jan 22, 2006 at 07:46:39PM -0500, Jean-Paul Calderone wrote:

> I don't understand why you insist on continuing to harp on this point, 
> though.  Even if it were accurate (which I must stress, it /isn't/, and if 
> you care to discuss the technical merits of Axiom, I'd be happy to do so on 
> <divmod-dev@divmod.org> but /not/ here), no one cares.  You've been asked 
> repeatedly to let it go, and by refusing to do so you are being very rude 
> to the people who wrote the software you continue to use.  Please, you do 
> your thing, let us do ours.

Indeed.

Or at least use your (andrea) new mailing list. Whoever was interested in your
results has already subscribed. Everyone else couldn't care less, other than
being rude and quite insulting to others' work.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
New Pet: http://www.stiq.it
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20060123/b6b64c78/attachment.pgp
From andrea at cpushare.com  Sun Jan 22 18:25:43 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun Jan 22 19:25:50 2006
Subject: [Twisted-web] how to send parallel requests to the dbms while
	rendering html with Cheetah
In-Reply-To: <20060123004639.2697.321637470.divmod.quotient.908@ohm>
References: <20060123000342.GT20603@opteron.random>
	<20060123004639.2697.321637470.divmod.quotient.908@ohm>
Message-ID: <20060123012543.GU20603@opteron.random>

On Sun, Jan 22, 2006 at 07:46:39PM -0500, Jean-Paul Calderone wrote:
> I don't understand why you insist on continuing to harp on this point, 
> though.  Even if it were accurate (which I must stress, it /isn't/, and if 
> you care to discuss the technical merits of Axiom, I'd be happy to do so on
> <divmod-dev@divmod.org> but /not/ here), no one cares.  You've been asked

It was basically a followup to this:

	http://twistedmatrix.com/pipermail/twisted-python/2006-January/012357.html

Furthermore axiom seems to be considered seriously from the twisted
community. See the homepage: http://twistedmatrix.com/:

	Australian Twisted Sprint 2005.2 (2005-08-07)
	
	A Twisted Sprint will be held in Sydney Australia on the 19-21 August
	2005. Topics will probably include documentation, a VFS layer (including
	WebDAV support), the new Axiom database, and whatever else anyone can
	think of. For more information, please see the Australian Twisted Sprint
	Wiki. Thanks to Linux Australia for funding this sprint.

I assume some people seems to believe axiom is a good thing to use, some
may even think they can port over a real dbms later if sqllite doesn't
scale.

Note that if you designed the API in a way that had a slight chance to
work with a real dbms without requiring changes to all queries, I
wouldn't be dismissing it as worthless.

I provided an example that showed some of the problems axiom currently
would have, the object of the post wasn't axiom, but I taken the
opportunity to mention axiom given it was so relevant for such db
workload (and also given others from divmod mentioned axiom on these
lists).

Now that I've told my opinion on it, I promise not to mention it
anymore. Also note, my opinion can change, if the code (notably the API)
changes too.

Thanks.

From mwh at python.net  Mon Jan 23 03:45:11 2006
From: mwh at python.net (Michael Hudson)
Date: Mon Jan 23 04:45:47 2006
Subject: [Twisted-web] Re: Actual Useful Post
References: <20060121050944.2697.434668864.divmod.quotient.497@ohm>
	<60ed19d40601202145m243be34cid30099645d93fa1d@mail.gmail.com>
Message-ID: <2mwtgrmde0.fsf@starship.python.net>

Christopher Armstrong <radeex@gmail.com> writes:

> Anyway, as I said earlier, the thing that needs the most work that's
> related to releases is web site and documentation stuff. API docs are
> basically impossible to generate for mortals right now. I've heard
> some people can get epydoc to work if they do crazy stuff, but it's
> not worked for me in a long time. I'd be impressed if someone can get
> API docs being generated on a regular basis. It'd be especially nice
> if we can get the web site updated with these docs on a regular basis,
> in both per-release and "in development" doc sections. Same goes for
> the Developer Guide.
>
> If anyone wants to help out with these (but *not* another web site
> redesign, please), then I'd be glad to consult.

Well, I've had a quick pop at the interesting bit of this task while
travelling over the weekend: using the compiler module I can extract
the docstrings and class hierachy of all the stuff in the Twisted
source.  It's a touch fragile, but seems to work for all the
constructions used by Twisted.

One issue is classes that are defined in one file but generally used
from another, for example twisted.spread.jelly.Serializable is often
(always?) imported as twisted.spread.pb.Serializable.  Where should it
be documented it?

The boring bit of the task (for me, at least) is HTML generation.  I'd
love some help with this :) I guess I should get on IRC and talk about
what people actually want/need from these tools, but I'm at a PyPy
sprint this week so I'm *slightly* busy...

Cheers,
mwh

-- 
  Considering that this thread is completely on-topic in the way only
  c.l.py threads can be, I think I can say that you should replace
  "Oblivion" with "Gravity", and increase your Radiohead quotient.
                                      -- Ben Wolfson, comp.lang.python


From j_s_nightingale at yahoo.co.uk  Mon Jan 23 11:28:21 2006
From: j_s_nightingale at yahoo.co.uk (Stephen Nightingale)
Date: Mon Jan 23 12:28:25 2006
Subject: [Twisted-web] Unhashable Instance with Twisted imported into Jython
Message-ID: <20060123182821.65560.qmail@web25715.mail.ukl.yahoo.com>

 
  
  Not sure if this is a Twisted issue or a Jython issue or both, so I'll post both ways.  Using Jython 2.2 alpha, the latest.
  
  Trying to import Twisted into Jython on Win XP I get:
  TypeError:  unhashable instance  
  With the following stacktrace:
  
  Jython 2.2a1 on java1.4.2_03 (JIT: null)
  Type "copyright", "credits" or "license" for more information.
  >>> import twisted
  Traceback (innermost last):
    File "<console>", line 1, in ?
    File "c:\R.and.D\Jython\Lib\site-packages\twisted\__init__.py", line 18, in ?
    File "c:\R.and.D\Jython\Lib\site-packages\zope\interface\__init__.py", line 54, in ?
    File "c:\R.and.D\Jython\Lib\site-packages\zope\interface\interface.py", line 802, in ?
    File "c:\R.and.D\Jython\Lib\site-packages\zope\interface\interface.py", line 418, in __in
  it__
    File "c:\R.and.D\Jython\Lib\site-packages\zope\interface\interface.py", line 225, in __in
  it__
    File "c:\R.and.D\Jython\Lib\weakref.py", line 147, in __init__
  TypeError: unhashable instance
  >>>
  
  There is a prior issue that Jython doesn't recognize site-packages on Win XP, though this seems to be solved with:
     sitedirs = [prefix, makepath(prefix, "Lib", "site-packages")]
  
  
  Can anybody in this list shed light on the problem?
  
  Regards,
  
  Stephen Nightingale.
   
  

		
---------------------------------
  Yahoo! Cars NEW - sell your car and browse thousands of new and used cars online search now  
---------------------------------
  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060123/9c199885/attachment.htm
From ldanielburr at mac.com  Mon Jan 23 11:43:41 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Jan 23 12:43:45 2006
Subject: [Twisted-web] Unhashable Instance with Twisted imported into
	Jython
In-Reply-To: <20060123182821.65560.qmail@web25715.mail.ukl.yahoo.com>
References: <20060123182821.65560.qmail@web25715.mail.ukl.yahoo.com>
Message-ID: <op.s3ugy3g33oj628@zetsuei>

On Mon, 23 Jan 2006 12:28:21 -0600, Stephen Nightingale  
<j_s_nightingale@yahoo.co.uk> wrote:

>  Not sure if this is a Twisted issue or a Jython issue or both, so I'll  
> post both ways.  Using Jython 2.2 alpha, the latest.
>  Trying to import Twisted into Jython on Win XP I get:
>   TypeError:  unhashable instance
>   With the following stacktrace:
>  Jython 2.2a1 on java1.4.2_03 (JIT: null)
>   Type "copyright", "credits" or "license" for more information.
>   >>> import twisted
>   Traceback (innermost last):
>     File "<console>", line 1, in ?
>     File "c:\R.and.D\Jython\Lib\site-packages\twisted\__init__.py", line  
> 18, in ?
>     File  
> "c:\R.and.D\Jython\Lib\site-packages\zope\interface\__init__.py", line  
> 54, in ?
>     File  
> "c:\R.and.D\Jython\Lib\site-packages\zope\interface\interface.py", line  
> 802, in ?
>     File  
> "c:\R.and.D\Jython\Lib\site-packages\zope\interface\interface.py", line  
> 418, in __in
>   it__
>     File  
> "c:\R.and.D\Jython\Lib\site-packages\zope\interface\interface.py", line  
> 225, in __in
>   it__
>     File "c:\R.and.D\Jython\Lib\weakref.py", line 147, in __init__
>   TypeError: unhashable instance
>   >>>
>  There is a prior issue that Jython doesn't recognize site-packages on  
> Win XP, though this seems to be solved with:
>      sitedirs = [prefix, makepath(prefix, "Lib", "site-packages")]
>  Can anybody in this list shed light on the problem?
>  Regards,
>  Stephen Nightingale.

Might be better to ask this question on the zope3-dev list, as the problem  
appears to involve zope.interface.

HTH,

L. Daniel Burr

From radeex at gmail.com  Mon Jan 23 14:23:23 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon Jan 23 15:23:26 2006
Subject: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2mwtgrmde0.fsf@starship.python.net>
References: <20060121050944.2697.434668864.divmod.quotient.497@ohm>
	<60ed19d40601202145m243be34cid30099645d93fa1d@mail.gmail.com>
	<2mwtgrmde0.fsf@starship.python.net>
Message-ID: <60ed19d40601231323n6ec5d9e8o52bca94e4ae3ba9b@mail.gmail.com>

On 1/23/06, Michael Hudson <mwh@python.net> wrote:
> Well, I've had a quick pop at the interesting bit of this task while
> travelling over the weekend: using the compiler module I can extract
> the docstrings and class hierachy of all the stuff in the Twisted
> source.  It's a touch fragile, but seems to work for all the
> constructions used by Twisted.
>
> One issue is classes that are defined in one file but generally used
> from another, for example twisted.spread.jelly.Serializable is often
> (always?) imported as twisted.spread.pb.Serializable.  Where should it
> be documented it?
>
> The boring bit of the task (for me, at least) is HTML generation.  I'd
> love some help with this :) I guess I should get on IRC and talk about
> what people actually want/need from these tools, but I'm at a PyPy
> sprint this week so I'm *slightly* busy...

Funny, I wrote a doc extractor over the weekend too ;-) It's currently
at 104 lines and sitting in sandbox/radix/extractdocs.py. Where's
yours?

As for HTML output, I'm thinking outputting to Effbot's new Pyref
format[1] would be really cool (and really easy), if he releases the
tools soon.

1: http://effbot.org//zone/pythondoc-lib.htm

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+

From mwh at python.net  Tue Jan 24 02:32:14 2006
From: mwh at python.net (Michael Hudson)
Date: Tue Jan 24 03:32:42 2006
Subject: [Twisted-web] Re: Actual Useful Post
References: <20060121050944.2697.434668864.divmod.quotient.497@ohm>
	<60ed19d40601202145m243be34cid30099645d93fa1d@mail.gmail.com>
	<2mwtgrmde0.fsf@starship.python.net>
	<60ed19d40601231323n6ec5d9e8o52bca94e4ae3ba9b@mail.gmail.com>
Message-ID: <2m7j8qm0o1.fsf@starship.python.net>

Christopher Armstrong <radeex@gmail.com> writes:

> On 1/23/06, Michael Hudson <mwh@python.net> wrote:
>> Well, I've had a quick pop at the interesting bit of this task while
>> travelling over the weekend: using the compiler module I can extract
>> the docstrings and class hierachy of all the stuff in the Twisted
>> source.  It's a touch fragile, but seems to work for all the
>> constructions used by Twisted.
>>
>> One issue is classes that are defined in one file but generally used
>> from another, for example twisted.spread.jelly.Serializable is often
>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>> be documented it?
>>
>> The boring bit of the task (for me, at least) is HTML generation.  I'd
>> love some help with this :) I guess I should get on IRC and talk about
>> what people actually want/need from these tools, but I'm at a PyPy
>> sprint this week so I'm *slightly* busy...
>
> Funny, I wrote a doc extractor over the weekend too ;-) It's currently
> at 104 lines and sitting in sandbox/radix/extractdocs.py. Where's
> yours?

Mine's a bit more over-engineered, a bit longer, makes an effort to
work out class's bases and only on my hard drive... or rather, it's here:

http://codespeak.net/svn/user/mwh/docextractor/

> As for HTML output, I'm thinking outputting to Effbot's new Pyref
> format[1] would be really cool (and really easy), if he releases the
> tools soon.
>
> 1: http://effbot.org//zone/pythondoc-lib.htm

I haven't looked at this yet...

Cheers,
mwh

-- 
  When physicists speak of a TOE, they don't really mean a theory
  of *everything*.  Taken literally, "Everything" covers a lot of
  ground, including biology, art, decoherence and the best way to
  barbecue ribs.                    -- John Baez, sci.physics.research


From suhaonay at gmail.com  Tue Jan 24 06:23:00 2006
From: suhaonay at gmail.com (Suha Onay)
Date: Tue Jan 24 07:23:03 2006
Subject: [Twisted-web] Formless disabling widget
Message-ID: <49a67b230601240523n490b1783rd90a03c40e2a9a6f@mail.gmail.com>

Hi,

Is there a way to disable a formless widget(i.e. annotate.Text) ?
I could not find any solution.
... annotate.Text(..., disable=True)
... annotate.Text(..., attributes={'disable': True})

Thanks

--

Suha
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060124/3318c797/attachment.htm
From steg at linuxops.net  Tue Jan 24 09:54:08 2006
From: steg at linuxops.net (Steven Holmes)
Date: Tue Jan 24 10:54:15 2006
Subject: [Twisted-web] Formless disabling widget
In-Reply-To: <49a67b230601240523n490b1783rd90a03c40e2a9a6f@mail.gmail.com>
References: <49a67b230601240523n490b1783rd90a03c40e2a9a6f@mail.gmail.com>
Message-ID: <15CF6709-5425-478B-BC33-44FB65FE3F28@linuxops.net>

On 24 Jan 2006, at 13:23, Suha Onay wrote:

> Hi,
>
> Is there a way to disable a formless widget(i.e. annotate.Text) ?
> I could not find any solution.
> ... annotate.Text(..., disable=True)
> ... annotate.Text(..., attributes={'disable': True})
>
> Thanks
>
> -- 
>
> Suha
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Hi,

What is it you mean by disable? If you mean "don't render with
webform", you would need to create your own class derived from Text
and register its ITypedRenderer adapter as
formless.webform.NullRenderer.

This is hardly convenient.

I have a patch here that alters formless so you can pass in a keyword
argument to a typed specifying whether it should or shouldn't be
renderered (eg. annotate.Text(render=False)). If you would like me to
post it, reply letting me know and I'll clean it up and add unit
tests.

Cheers,

Steven Holmes (aka steg)


From mike at mkp.ca  Tue Jan 24 10:32:54 2006
From: mike at mkp.ca (Mike Pelletier)
Date: Tue Jan 24 11:33:10 2006
Subject: [Twisted-web] Formless disabling widget
In-Reply-To: <15CF6709-5425-478B-BC33-44FB65FE3F28@linuxops.net>
References: <49a67b230601240523n490b1783rd90a03c40e2a9a6f@mail.gmail.com>
	<15CF6709-5425-478B-BC33-44FB65FE3F28@linuxops.net>
Message-ID: <200601241232.55114.mike@mkp.ca>

On Tue January 24 2006 11:54, Steven Holmes wrote:
> Hi,
>
> What is it you mean by disable?

I think what's probably meant is, generate a tag with the disabled attribute 
set.  Ie:

	<input type="checkbox" name="foo" disabled="1" />

Mike.

From suha at likyabilisim.com  Wed Jan 25 02:24:04 2006
From: suha at likyabilisim.com (Suha Onay)
Date: Wed Jan 25 03:24:08 2006
Subject: [Twisted-web] Formless disabling widget
In-Reply-To: <200601241232.55114.mike@mkp.ca>
References: <49a67b230601240523n490b1783rd90a03c40e2a9a6f@mail.gmail.com>
	<15CF6709-5425-478B-BC33-44FB65FE3F28@linuxops.net>
	<200601241232.55114.mike@mkp.ca>
Message-ID: <49a67b230601250124q4066e4cw9aeed854c7dd4469@mail.gmail.com>

Hi,

Mike is right. I want my widgets to be disabled by setting an attribute
'disabled':

<input disabled type="text" name="xxx" /> or <input type="checkbox"
name="foo" disabled="1" />

Is it possible without writing custom render methods to my own widgets?
I use my own widgets to overwrite only the error messages
("requiredFailMessage") of the annotate classes.
If it is not possible with webform rendering, Steven I think I need your
post :)

Thanks

On 1/24/06, Mike Pelletier <mike@mkp.ca> wrote:
>
> On Tue January 24 2006 11:54, Steven Holmes wrote:
> > Hi,
> >
> > What is it you mean by disable?
>
> I think what's probably meant is, generate a tag with the disabled
> attribute
> set.  Ie:
>
>         <input type="checkbox" name="foo" disabled="1" />
>
> Mike.
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>



--

Suha ONAY

Likya Yaz?l?m ve Bili?im Hizmetleri Ltd.?ti.
Kosgeb Teknoloji Geli?tirme Merkezi
ODT? Teknokent No:219
06531 Ankara - T?RK?YE
Tel :: (312) 210 13 00-217
Fax :: (312) 210 13 09
Web ::  www.likyabilisim.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060125/b239198b/attachment.htm
From steg at linuxops.net  Wed Jan 25 10:26:59 2006
From: steg at linuxops.net (Steven Holmes)
Date: Wed Jan 25 11:27:06 2006
Subject: [Twisted-web] Formless disabling widget
In-Reply-To: <49a67b230601250124q4066e4cw9aeed854c7dd4469@mail.gmail.com>
References: <49a67b230601240523n490b1783rd90a03c40e2a9a6f@mail.gmail.com>
	<15CF6709-5425-478B-BC33-44FB65FE3F28@linuxops.net>
	<200601241232.55114.mike@mkp.ca>
	<49a67b230601250124q4066e4cw9aeed854c7dd4469@mail.gmail.com>
Message-ID: <918E1C1D-62F9-4AB0-B08D-59F91075E20D@linuxops.net>


On 25 Jan 2006, at 09:24, Suha Onay wrote:

> Hi,
>
> Mike is right. I want my widgets to be disabled by setting an  
> attribute 'disabled':
>
> <input disabled type="text" name="xxx" /> or <input type="checkbox"  
> name="foo" disabled="1" />
>
> Is it possible without writing custom render methods to my own  
> widgets?
> I use my own widgets to overwrite only the error messages  
> ("requiredFailMessage") of the annotate classes.
> If it is not possible with webform rendering, Steven I think I need  
> your post :)
>
> Thanks
>

As far as I know, it is impossible to add custom attributes without
writing your own renderer. This is unfortunate because it means you
can end up with a bunch of very similar rendering classes. (Although
if you look at what happens to keyword arguments in annotate.Typed,
you'll see it'd be reasonably easy to pass in custom attribute
arguments and access them in your custom renderer).

An alternative, if you don't mind running with a customized formless,
is altering annotate.py so that your Typed accepts a "disabled"
argument. You could then alter webform.py so the TypedRenderers there
check this value and if appropriate add the attribute in.

This isn't a brilliant solution either though, as I can't see a
reasonable way to do this in one place for all of the
TypedRenderers. You'd need to alter each of them that you wanted to be
able to use the attribute. Of course, when you decide to add another
custom attribute, you need to do the same all over again. :)

Perhaps it would be nice if formless had a way for you to tell it to
add particular attributes... a custom_attributes dictionary to
annotate.Typed for instance. It'd be very handy in situations like
this, but could be abused to go against formless's idea of seperating
the argument types from the way they're rendered. Comments on this
would be appreciated.

Cheers and hope this helps,

Steven Holmes


From suha at likyabilisim.com  Thu Jan 26 01:53:54 2006
From: suha at likyabilisim.com (Suha Onay)
Date: Thu Jan 26 02:53:57 2006
Subject: [Twisted-web] Formless disabling widget
In-Reply-To: <918E1C1D-62F9-4AB0-B08D-59F91075E20D@linuxops.net>
References: <49a67b230601240523n490b1783rd90a03c40e2a9a6f@mail.gmail.com>
	<15CF6709-5425-478B-BC33-44FB65FE3F28@linuxops.net>
	<200601241232.55114.mike@mkp.ca>
	<49a67b230601250124q4066e4cw9aeed854c7dd4469@mail.gmail.com>
	<918E1C1D-62F9-4AB0-B08D-59F91075E20D@linuxops.net>
Message-ID: <49a67b230601260053m59c201f2ld9dd6abec544f01c@mail.gmail.com>

Hi,

Changing annotate.py and adding a "disabled" attribute, as you said,
is not the best solution. Also writing custom render methods is lots of work
and error prone. The best way I think is adding custom attributes to '
annotate.Typed'.
custom_attributes dictionary is a good solution. By this way adding any
attribute is easy.
But since it should be done at nevow level, I will prefer writing custom
render methods
to the needed widgets.

Thanks for all your help.
Regards,

Suha



As far as I know, it is impossible to add custom attributes without
> writing your own renderer. This is unfortunate because it means you
> can end up with a bunch of very similar rendering classes. (Although
> if you look at what happens to keyword arguments in annotate.Typed,
> you'll see it'd be reasonably easy to pass in custom attribute
> arguments and access them in your custom renderer).
>
> An alternative, if you don't mind running with a customized formless,
> is altering annotate.py so that your Typed accepts a "disabled"
> argument. You could then alter webform.py so the TypedRenderers there
> check this value and if appropriate add the attribute in.
>
> This isn't a brilliant solution either though, as I can't see a
> reasonable way to do this in one place for all of the
> TypedRenderers. You'd need to alter each of them that you wanted to be
> able to use the attribute. Of course, when you decide to add another
> custom attribute, you need to do the same all over again. :)
>
> Perhaps it would be nice if formless had a way for you to tell it to
> add particular attributes... a custom_attributes dictionary to
> annotate.Typed for instance. It'd be very handy in situations like
> this, but could be abused to go against formless's idea of seperating
> the argument types from the way they're rendered. Comments on this
> would be appreciated.
>
> Cheers and hope this helps,
>
> Steven Holmes
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>



--

Suha ONAY

Likya Yaz?l?m ve Bili?im Hizmetleri Ltd.?ti.
Kosgeb Teknoloji Geli?tirme Merkezi
ODT? Teknokent No:219
06531 Ankara - T?RK?YE
Tel :: (312) 210 13 00-217
Fax :: (312) 210 13 09
Web ::  www.likyabilisim.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20060126/0ab5aef5/attachment.htm
