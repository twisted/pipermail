From alpha04 at netvigator.com  Sun May 13 22:39:48 2007
From: alpha04 at netvigator.com (Andrey)
Date: Sun May 13 23:40:09 2007
Subject: [Twisted-web] Actual working example of XMLRPC server w/ auth
Message-ID: <f28i5o$rjq$1@sea.gmane.org>

Hi

i am very new to twisted.
i wanted to setup a xmlrpc webservice with authorization (simple HTTP)

I spend some time on google but still... without luck. I know there are some 
working example on HTTP auth on nevow (web2). But somehow i cannot get the 
nevow working..

I wonder if someone had already done this and able to help, posting a 
working example here.

PS my xmlrpc server is working and running fine now, i just want to warp it 
with the auth part.
BTW, there are some examples on HTTP auth, but how to actually warp it to a 
XML_RPC class?

thx
Andrey




From alpha04 at netvigator.com  Mon May 14 00:02:08 2007
From: alpha04 at netvigator.com (Andrey)
Date: Mon May 14 00:02:37 2007
Subject: [Twisted-web] Re: Actual working example of XMLRPC server w/ auth
References: <f28i5o$rjq$1@sea.gmane.org>
Message-ID: <f28n06$g7a$1@sea.gmane.org>

Or any XMLRPC server authorization using web2

thx
Andrey 




From terry at jon.es  Mon May 14 12:13:34 2007
From: terry at jon.es (Terry Jones)
Date: Mon May 14 12:35:43 2007
Subject: [Twisted-web] Twisted/Python job in Barcelona
Message-ID: <17992.35502.215711.929755@terry-jones-computer.local>

With apologies to those who don't appreciate job ads or cross-posting, I've
just posted a Python job ad.

Briefly, I'm looking for someone to work with in Barcelona, Spain.  There's
a fair amount of Twisted coding involved, and hopefully there will be more.

Details at:

  http://fluidinfo.com/jobs/python-programmers.html

You can find out a little more about me at http://jon.es

Regards,
Terry Jones

From alpha04 at netvigator.com  Tue May 15 00:14:05 2007
From: alpha04 at netvigator.com (Andrey)
Date: Tue May 15 00:14:23 2007
Subject: [Twisted-web] passing Avatar info to XMLRPC?
Message-ID: <f2bc2f$cgb$1@sea.gmane.org>

Hi

i wonder how to pass the avatar info to a xmlrpc class after the login 
process against DB?

my xmlrpc is using this web2 structure

root = wrapper.HTTPAuthResource(Xrpc(),credFactories,portal,ifaces) 




From alpha04 at netvigator.com  Wed May 16 17:27:48 2007
From: alpha04 at netvigator.com (Andrey)
Date: Wed May 16 17:28:14 2007
Subject: [Twisted-web] xmlrpc web2 connection lost
Message-ID: <f2ft0l$9dh$1@sea.gmane.org>

Hi

I have a xmlrpc service running in web2, application high lvl structure.

I wonder what should i do if i want to know when the client's connection is 
finished,
so that i can flush some transaction.

thanks very much for reading or replying
Andrey 




From dreid at dreid.org  Thu May 17 01:23:19 2007
From: dreid at dreid.org (David Reid)
Date: Thu May 17 01:23:44 2007
Subject: [Twisted-web] xmlrpc web2 connection lost
In-Reply-To: <f2ft0l$9dh$1@sea.gmane.org>
References: <f2ft0l$9dh$1@sea.gmane.org>
Message-ID: <0F6F6ACF-E5AF-486B-81FC-8263E6D5D3D6@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On May 16, 2007, at 2:27 PM, Andrey wrote:

> Hi
>
> I have a xmlrpc service running in web2, application high lvl  
> structure.
>
> I wonder what should i do if i want to know when the client's  
> connection is
> finished,
> so that i can flush some transaction.

HTTP is a stateless protocol.  The TCP connection is completely  
unrelated to the Request & Responses.  As a result web2 exposes no  
way of dealing with the underlying connections.  There are lots of  
ways to shoehorn state into HTTP (sessions via cookies (or if you're  
using XML-RPC just an argument that is passed to all the commands.))   
99.9% of the time the underlying TCP connection is meaningless.

- -David
http://dreid.org/

"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz




-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.5 (Darwin)

iD8DBQFGS+bMrsrO6aeULcgRAqbnAJ49AVe3+HAGHX+1VYxkTygKreictwCghffQ
XCcEQJMng3AM5ZNNDaq/5kQ=
=ZkhU
-----END PGP SIGNATURE-----

From alpha04 at netvigator.com  Thu May 17 02:58:25 2007
From: alpha04 at netvigator.com (Andrey)
Date: Thu May 17 02:59:02 2007
Subject: [Twisted-web] Re: xmlrpc web2 connection lost
References: <f2ft0l$9dh$1@sea.gmane.org>
	<0F6F6ACF-E5AF-486B-81FC-8263E6D5D3D6@dreid.org>
Message-ID: <f2guem$2e4$1@sea.gmane.org>

first of all, thank you for your reply

got it now. thanks a lot

so in order to achive the 'flush db' task for my xmlrpc service, i had setup 
a timer loop (reactor.callLater())
monitoring the last-touch timestamp, and if its old, say 30secs before, then 
i will flush the DB.

are there better way or i m on the right direction?

Thanks
Andrey


"David Reid" <dreid@dreid.org> wrote in message 
news:0F6F6ACF-E5AF-486B-81FC-8263E6D5D3D6@dreid.org...
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On May 16, 2007, at 2:27 PM, Andrey wrote:
>
>> Hi
>>
>> I have a xmlrpc service running in web2, application high lvl  structure.
>>
>> I wonder what should i do if i want to know when the client's  connection 
>> is
>> finished,
>> so that i can flush some transaction.
>
> HTTP is a stateless protocol.  The TCP connection is completely  unrelated 
> to the Request & Responses.  As a result web2 exposes no  way of dealing 
> with the underlying connections.  There are lots of  ways to shoehorn 
> state into HTTP (sessions via cookies (or if you're  using XML-RPC just an 
> argument that is passed to all the commands.))   99.9% of the time the 
> underlying TCP connection is meaningless.
>
> - -David
> http://dreid.org/
>
> "Usually the protocol is this: I appoint someone for a task,
> which they are not qualified to do.  Then, they have to fight
> a bear if they don't want to do it." -- Glyph Lefkowitz
>
>
>
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.5 (Darwin)
>
> iD8DBQFGS+bMrsrO6aeULcgRAqbnAJ49AVe3+HAGHX+1VYxkTygKreictwCghffQ
> XCcEQJMng3AM5ZNNDaq/5kQ=
> =ZkhU
> -----END PGP SIGNATURE----- 




From suhaonay at gmail.com  Thu May 17 08:49:33 2007
From: suhaonay at gmail.com (Suha Onay)
Date: Thu May 17 08:49:43 2007
Subject: [Twisted-web] Nevow, annotate.MethodBinding, JavaScript integration
Message-ID: <49a67b230705170549s1007fb7dy4c4fe848e92b4ed5@mail.gmail.com>

Hi,

I want to do smth in javascript when the combo changes.
How can I add an onchange action to my combo?
Thanks...

    def bind_xxx(self, ctx):
        desc =3D 'aaa'
        return annotate.MethodBinding(
            'xxx',
            annotate.Method(
                arguments=3D[
                    annotate.Argument('ctx', annotate.Context()),
                    annotate.Argument('fisturu', annotate.Choice(
self.getComboInput, stringify=3Dlambda x:self.combos[x], label=3D'Xyz')),
                ],
                label=3D'eee:',
            ),
            action=3D'OK'
        )

    def xxx(self, ctx, **args):
        ...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20070517/c0=
4ee09a/attachment.htm
From iacovou at gmail.com  Thu May 17 10:57:35 2007
From: iacovou at gmail.com (kgi)
Date: Thu May 17 10:58:39 2007
Subject: [Twisted-web] Quick Questions about JS mapping in Athena.
Message-ID: <200705171757.35710.iacovou@gmail.com>


Hi all.

I have a couple of quick questions regarding JS in Athena. At least, they're 
quick to ask; I hope they're also quick to answer.

First of all, it looks like the mapping of package/module to JS source 
file "ought" to be contained in a plugin.

This is described in the Athena page, and (almost) mandated by the fact that 
athena.py's allJavascriptPackages() performs a plugin search like this:

    from nevow import plugins
    [...]
    d = {}
    for p in plugin.getPlugIns(inevow.IJavascriptPackage, plugins):
        d.update(p.mapping)
    return d

... which uses the fact that a module passed to getPlugins() will use that as 
the search path, so this will in fact search nevow/plugins/, and that's 
hard-coded.

However, the story doesn't end there: nevow/plugins/__init__.py contains the 
line:

  __path__ = [os.path.abspath(os.path.join(x, 'nevow', 'plugins')) for x in 
sys.path]

This means that if I look for modules under nevow/plugins, I will magically 
pick up any module that has been put under a nevow/plugins directory in my 
sys.path.

(Innocent onlookers can see the bottom of 
http://docs.python.org/tut/node8.html for the details; I didn't know this was 
possible until I saw this method being mentioned in the twisted plugin docs 
at http://twistedmatrix.com/projects/core/documentation/howto/plugin.html).

Now this is quite clever, but if I've understood the mechanism right, it's not 
necessarily all that handy, because it dictates either the location of 
particular directories within one's project (i.e. my athena code is not at 
the top-level of my code tree, so I'd prefer not to have 'nevow/plugins' at 
the top-level for getPlugins() to pick up via sys.path) or an unnecessary 
entry into sys.path.

So, my questions is: is there a way to register the JS mapping elsewhere? It 
looks like modifying self.jsModules.mapping directly inside the constructor 
of a LivePage might do it, but that feels hacky as heck.

As an aside: I desperately don't want to ruffle any feathers here, but I also 
feel that using the twisted plugins system to store what amounts to a 
dictionary is a bit of a sledgehammer and nut thing. Since the actual 
LiveElement classes don't even live in the same place as the mapping, it's 
not as if the athena.JSPackages are really "plugins", as they only contain 
data, not code. Wouldn't having a "jsFile" attribute directly on the 
LiveElements be more natural, since in any case, the renderer looks up 
the "jsClass" attribute and looks up the corresponding JS file in jsModules? 
Possibly in conjunction with an attribute (allElements?) on LivePage that you 
can set to pre-declare all Elements you intend to use ahead of time so all 
the JS gets included in the page in the same place).

Secondly, what are the requirements on the naming of JS packages? Many of the 
examples use a dotted notation ("Foo.Bar"), but not all. Is there any 
advantage on the JS side to having multiple modules share a top-level module 
name (memory usage, runtime speed)? Are the strings significant at all? As 
far as I can tell, the keys in the jsModules are arbitrary and just need to 
match the jsClass declarations in the LiveElements and the "// import" 
declarations in JS source files. Am I right in believing that there's no 
requirement that they match the class instances actually used in the JS 
source files?

Anyway, that's my two questions and an aside; thanks for your patience, and 
thanks for any help you can afford.

Regards,

Ricky

From exarkun at divmod.com  Thu May 17 11:31:59 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu May 17 11:32:05 2007
Subject: [Twisted-web] Quick Questions about JS mapping in Athena.
In-Reply-To: <200705171757.35710.iacovou@gmail.com>
Message-ID: <20070517153159.30678.885824153.divmod.quotient.1354@ohm>

On Thu, 17 May 2007 17:57:35 +0300, kgi <iacovou@gmail.com> wrote:
>
>Hi all.
>
>I have a couple of quick questions regarding JS in Athena. At least, they're
>quick to ask; I hope they're also quick to answer.
>
> [snip]
>
>So, my questions is: is there a way to register the JS mapping elsewhere? It
>looks like modifying self.jsModules.mapping directly inside the constructor
>of a LivePage might do it, but that feels hacky as heck.

This works, but I agree it has a hackish feel.

>
>As an aside: I desperately don't want to ruffle any feathers here, but I also
>feel that using the twisted plugins system to store what amounts to a
>dictionary is a bit of a sledgehammer and nut thing. Since the actual
>LiveElement classes don't even live in the same place as the mapping, it's
>not as if the athena.JSPackages are really "plugins", as they only contain
>data, not code. Wouldn't having a "jsFile" attribute directly on the
>LiveElements be more natural, since in any case, the renderer looks up
>the "jsClass" attribute and looks up the corresponding JS file in jsModules?
>Possibly in conjunction with an attribute (allElements?) on LivePage that you
>can set to pre-declare all Elements you intend to use ahead of time so all
>the JS gets included in the page in the same place).

The import system requires more or less complete knowledge of what modules
are defined in order to resolve dependencies.  If each LiveElement took
care to declaring which file it needed, then the page would need to be
rendered completely before Athena could figure out which modules needed to
be loaded, by which time it is a little too late to include them in the
page (perhaps this could be made to work, but it would be a hassle).

I can sympthatize somewhat with your desire to avoid conforming to the
structure required by the Twisted plugin system here, but I don't have a
better solution to suggest now.  In my copious spare time, I am trying to
push something better into Twisted (plugins are really a low level thing,
not what you actually want to be interacting with), but that's not likely
to see any results for quite a while to come.

I wouldn't be happy to see a solution that required declaring all LiveElement
classes a LivePage is going to use, since my own most common use-case for
LivePages involves my not having any idea what most of the LiveElements will
be (and in fact, changing what they will be with almost every render).  I'm
open to other suggestions and discussion about improving this area of Athena,
though.

>
>Secondly, what are the requirements on the naming of JS packages? Many of the
>examples use a dotted notation ("Foo.Bar"), but not all. Is there any
>advantage on the JS side to having multiple modules share a top-level module
>name (memory usage, runtime speed)? Are the strings significant at all? As
>far as I can tell, the keys in the jsModules are arbitrary and just need to
>match the jsClass declarations in the LiveElements and the "// import"
>declarations in JS source files. Am I right in believing that there's no
>requirement that they match the class instances actually used in the JS
>source files?

The idea is to provide a package hierarchy, as Python has.  The strings will
be split on "." in a couple places, but if there is simply no "." in them,
this will work (since it is equivalent to any top-level name in an
arrangement which does use dotted names).  The goal of dotted names is to
avoid polluting the top-level namespace more than necessary.  For sanity's
sake, I would define classes in a module as attributes of that module, rather
than using arbitrary other names, but there's little or nothing Athena can
actually do to prevent this, and as long as you aren't clobbering any names
which Athena itself uses (and almost all such names are beneath the Divmod or
Nevow namespace), it probably won't do anything to interfer with Athena.

>
>Anyway, that's my two questions and an aside; thanks for your patience, and
>thanks for any help you can afford.

Hope this helps,

Jean-Paul

From iacovou at gmail.com  Thu May 17 12:29:26 2007
From: iacovou at gmail.com (kgi)
Date: Thu May 17 12:29:58 2007
Subject: [Twisted-web] Quick Questions about JS mapping in Athena.
In-Reply-To: <20070517153159.30678.885824153.divmod.quotient.1354@ohm>
References: <20070517153159.30678.885824153.divmod.quotient.1354@ohm>
Message-ID: <200705171929.26139.iacovou@gmail.com>

On Thursday 17 May 2007 18:31:59 Jean-Paul Calderone wrote:

Hi Jean-Paul; thanks for your quick answer.

> The import system requires more or less complete knowledge of what modules
> are defined in order to resolve dependencies.  If each LiveElement took
> care to declaring which file it needed, then the page would need to be
> rendered completely before Athena could figure out which modules needed to
> be loaded, by which time it is a little too late to include them in the
> page (perhaps this could be made to work, but it would be a hassle).

OK, I guess I'll just have to bite the bullet. Adding something to sys.path is 
not such a big deal.

> I wouldn't be happy to see a solution that required declaring all
> LiveElement classes a LivePage is going to use, since my own most common
> use-case for LivePages involves my not having any idea what most of the
> LiveElements will be (and in fact, changing what they will be with almost
> every render).  I'm open to other suggestions and discussion about
> improving this area of Athena, though.

Oh, really? That's interesting. How does Athena push new Javascript code to a 
page after the initial render? I didn't even know it was possible to do such 
a thing: for me, Javascript has always been something you link to from the 
page header. Looks like my 4th Edition "JS Definitive Guide" (2001) is 
showing its age :-)

> The idea is to provide a package hierarchy, as Python has.  The strings
> will be split on "." in a couple places, but if there is simply no "." in
> them, this will work (since it is equivalent to any top-level name in an
> arrangement which does use dotted names).  The goal of dotted names is to
> avoid polluting the top-level namespace more than necessary.

You're talking about Javascript's top-level namespace, right? (I assume these 
strings never go anywhere near Python's namespace). OK, that sounds logical; 
I was just wondering whether there was anything more to it that.

>  For sanity's
> sake, I would define classes in a module as attributes of that module,
> rather than using arbitrary other names

Hmm, I'm not quite sure I understand what you mean in this context. I *think* 
you're talking about JS classes, but the terminology is Python terminology.

If the former (JS classes) do you mean, you'd prefer to have a single (or a 
few) javascript file(s) and have these define the JS for *lots* of related 
LiveElement classes, which all declare themselves to be a (namespaced) 
jsClass, and all these jsClasses map to the same physical JS file?

In other words, for project "Cutlery":

# In Python LivePage stuff:

class Fork ( LiveElement ):
    jsClass = u'Cutlery.Fork'

class Spoon ( LiveElement ):
    jsClass = u'Cutlery.Spoon'

class Knife ( LiveElement ):
    jsClass = u'Cutlery.Knife'

# In Python plugin code:

jsModules.mapping = {
  # Note: the same file!
  u'Cutlery.Fork' : 'cutlery.js',
  u'Cutlery.Spoon' : 'cutlery.js',
  u'Cutlery.Knife' : 'cutlery.js',
}

# In the file cutlery.js:

Cutlery = {};

Cutlery.Fork = Nevow.Athena.Widget.subclass ( 'Cutlery.Fork' );
Cutlery.Fork.methods ( ... );

Cutlery.Spoon = Nevow.Athena.Widget.subclass ( 'Cutlery.Spoon' );
Cutlery.Spoon.methods ( ... );

Cutlery.Knife = Nevow.Athena.Widget.subclass ( 'Cutlery.Knife' );
Cutlery.Knife.methods ( ... );

Is this what you mean?

Actually, I have a couple more very quick questions that I thought up while 
typing this:

- Am I right in thinking that no athena JS files ever need to have declare any 
of the modules mentioned in BOOTSTRAP_MODULES (e.g. Divmod, Nevow.Athena)?

- Is there a recommended way for LiveElements to access each other on the 
server? For example, I click on an element of (client-side) Foo that invokes 
a method on (server-side) Foo; this then needs to update the state of 
(server-side) Bar, which needs to update (client-side) Bar. At the moment I'm 
using an manual ad-hoc registry, with the occasional (naughty?) 
obj.fragmentParent thrown in. I was wondering if there was a more robust 
method already in place that I had totally missed (like the LiveElements 
being assigned names upon creation, which can then be automagically found 
through something like page.findElementByName ( "Bar" )).

Regards,

Ricky

From exarkun at divmod.com  Thu May 17 12:54:40 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu May 17 12:54:44 2007
Subject: [Twisted-web] Quick Questions about JS mapping in Athena.
In-Reply-To: <200705171929.26139.iacovou@gmail.com>
Message-ID: <20070517165440.30678.2034232467.divmod.quotient.1389@ohm>

On Thu, 17 May 2007 19:29:26 +0300, kgi <iacovou@gmail.com> wrote:
>On Thursday 17 May 2007 18:31:59 Jean-Paul Calderone wrote:
>
>Hi Jean-Paul; thanks for your quick answer.
>
>> The import system requires more or less complete knowledge of what modules
>> are defined in order to resolve dependencies.  If each LiveElement took
>> care to declaring which file it needed, then the page would need to be
>> rendered completely before Athena could figure out which modules needed to
>> be loaded, by which time it is a little too late to include them in the
>> page (perhaps this could be made to work, but it would be a hassle).
>
>OK, I guess I'll just have to bite the bullet. Adding something to sys.path is
>not such a big deal.
>
>> I wouldn't be happy to see a solution that required declaring all
>> LiveElement classes a LivePage is going to use, since my own most common
>> use-case for LivePages involves my not having any idea what most of the
>> LiveElements will be (and in fact, changing what they will be with almost
>> every render).  I'm open to other suggestions and discussion about
>> improving this area of Athena, though.
>
>Oh, really? That's interesting. How does Athena push new Javascript code to a
>page after the initial render? I didn't even know it was possible to do such
>a thing: for me, Javascript has always been something you link to from the
>page header. Looks like my 4th Edition "JS Definitive Guide" (2001) is
>showing its age :-)

Basically it just notices when some required javascript is absent, loads it
from the server, and eval()'s it.  The same dependency system is used to
resolve dependencies at page render time (which are turned into <script>
tags in the <head> of the rendered page) and dynamically after the initial
page render (which are turned into these dynamic load/evals).

>
>> The idea is to provide a package hierarchy, as Python has.  The strings
>> will be split on "." in a couple places, but if there is simply no "." in
>> them, this will work (since it is equivalent to any top-level name in an
>> arrangement which does use dotted names).  The goal of dotted names is to
>> avoid polluting the top-level namespace more than necessary.
>
>You're talking about Javascript's top-level namespace, right? (I assume these
>strings never go anywhere near Python's namespace). OK, that sounds logical;
>I was just wondering whether there was anything more to it that.

Yep.

>
>>  For sanity's
>> sake, I would define classes in a module as attributes of that module,
>> rather than using arbitrary other names
>
>Hmm, I'm not quite sure I understand what you mean in this context. I *think*
>you're talking about JS classes, but the terminology is Python terminology.

Yep.  Python has a pretty reasonable module system.  Athena's JS "module
system" is loosely based on it, so a lot of Python terminology makes sense
for it as well.

>
>If the former (JS classes) do you mean, you'd prefer to have a single (or a
>few) javascript file(s) and have these define the JS for *lots* of related
>LiveElement classes, which all declare themselves to be a (namespaced)
>jsClass, and all these jsClasses map to the same physical JS file?

I didn't mean to imply anything about how much or little JS is in any single
source file.  Mostly I just wanted to point out that I think a single source
file should completely define any particular module.  ie, if a.js puts things
onto the JS "module" A, b.js should _not_ put things onto it.

>
>In other words, for project "Cutlery":
>
># In Python LivePage stuff:
>
>class Fork ( LiveElement ):
>    jsClass = u'Cutlery.Fork'
>
>class Spoon ( LiveElement ):
>    jsClass = u'Cutlery.Spoon'
>
>class Knife ( LiveElement ):
>    jsClass = u'Cutlery.Knife'
>
># In Python plugin code:
>
>jsModules.mapping = {
>  # Note: the same file!
>  u'Cutlery.Fork' : 'cutlery.js',
>  u'Cutlery.Spoon' : 'cutlery.js',
>  u'Cutlery.Knife' : 'cutlery.js',
>}

Note that since the dependency resolution system works upwards, this
mapping only needs one entry for this example to work:

    jsModules.mapping = {u'Cutlery': 'cutlery.js'}

>
># In the file cutlery.js:
>
>Cutlery = {};
>
>Cutlery.Fork = Nevow.Athena.Widget.subclass ( 'Cutlery.Fork' );
>Cutlery.Fork.methods ( ... );
>
>Cutlery.Spoon = Nevow.Athena.Widget.subclass ( 'Cutlery.Spoon' );
>Cutlery.Spoon.methods ( ... );
>
>Cutlery.Knife = Nevow.Athena.Widget.subclass ( 'Cutlery.Knife' );
>Cutlery.Knife.methods ( ... );
>
>Is this what you mean?

I... think?  so...  I'm not sure if you were trying to demonstrate something
by putting the jsModules mapping into the same file as the rest of the
Python (since you pointed it out, I suspect you were, but I'm not sure what).

>
>Actually, I have a couple more very quick questions that I thought up while
>typing this:
>
>- Am I right in thinking that no athena JS files ever need to have declare any
>of the modules mentioned in BOOTSTRAP_MODULES (e.g. Divmod, Nevow.Athena)?

Well, it'll work if they don't, since those are always loaded on every page,
but I might decide to change what's in BOOTSTRAP_MODULES. :)  To be safe,
I'd declare any dependency, even one that's in that collection at the time.

>
>- Is there a recommended way for LiveElements to access each other on the
>server? For example, I click on an element of (client-side) Foo that invokes
>a method on (server-side) Foo; this then needs to update the state of
>(server-side) Bar, which needs to update (client-side) Bar. At the moment I'm
>using an manual ad-hoc registry, with the occasional (naughty?)
>obj.fragmentParent thrown in. I was wondering if there was a more robust
>method already in place that I had totally missed (like the LiveElements
>being assigned names upon creation, which can then be automagically found
>through something like page.findElementByName ( "Bar" )).
>

Unfortunately, names would have to be unique within the context of a page,
which leads to the possibility of collisions.  Resolving this would make
it impossible to know the actual name of the element you want. :)  I'd
suggest instantiating your LiveElements with direct references to whatever
other objects they need.

This is somewhat similar to a problem many people have when implementing
protocols with Twisted.  I don't know of a general solution, but arranging
for the right objects to be referencable from the right places should solve
any particular case that comes up.

Jean-Paul

From iacovou at gmail.com  Fri May 18 05:18:14 2007
From: iacovou at gmail.com (kgi)
Date: Fri May 18 05:18:33 2007
Subject: [Twisted-web] Quick Questions about JS mapping in Athena.
In-Reply-To: <20070517165440.30678.2034232467.divmod.quotient.1389@ohm>
References: <20070517165440.30678.2034232467.divmod.quotient.1389@ohm>
Message-ID: <200705181218.14500.iacovou@gmail.com>

On Thursday 17 May 2007 19:54:40 Jean-Paul Calderone wrote:

Again, Jean-Paul, thanks for your reply; you've been very helpful.

> Note that since the dependency resolution system works upwards, this
> mapping only needs one entry for this example to work:
>
>     jsModules.mapping = {u'Cutlery': 'cutlery.js'}

Ah, that's good to have confirmed. I was seeing the request to retrieve the 
top-level package come in and suspected that something of the sort was afoot.

> I... think?  so...  I'm not sure if you were trying to demonstrate
> something by putting the jsModules mapping into the same file as the rest
> of the Python (since you pointed it out, I suspect you were, but I'm not
> sure what).

Oh, sorry. I didn't mean to imply that the jsModules mapping goes into the 
same file as the rest of the Python, merely that all the JS mappings point to 
the same JS file (cutlery.js) rather than having multiple files, one for each 
submodule of the JS package.

But in any case, your pointing out that I can just use the top-level package 
name renders that moot.

Regards,

Ricky

From terry at jon.es  Thu May 24 10:12:28 2007
From: terry at jon.es (Terry Jones)
Date: Thu May 24 10:13:23 2007
Subject: [Twisted-web] Different behavior of twistd with and without -n
Message-ID: <18005.40268.995881.848767@terry-jones-computer.local>

I'm not sure if this belongs in Twisted Python or Twisted Web.

I have a twisted.web2 server that, among other things, makes calls to
PyLucene.  Without going into detail, I'd like to ask a general question to
see if there's a high-level explanation for what I'm seeing.

When I run twistd without -n, I can take actions in the web UI that fairly
reliably cause a call into PyLucene that stops the twistd server. I don't
know what's going on, but the server definitely dies (it no longer appears
in ps, and you can't telnet to its port).  There's nothing in the log file,
no core file (I have ulimit -c unlimited), nothing. This is on Mac OS X
10.4.9, PyLucene 2.1.0-2, Python 2.5, Twisted trunk revision 20059. When I
stick in debug prints to stderr, I can see that (usually) a call to
PyLucene.IndexWriter.optimize and (sometimes) a call to
PyLucene.IndexReader.open never returns.

The weird thing is that when I run twistd -n using the same .tac file, I
can't make the thing fall over. I can click away to my heart's content in
the application UI, and it all just works. I also tried running twistd
under pydb and the thing wouldn't crash.

While I realize there's probably something up with PyLucene, I'm wondering
if anyone can suggest why running with twistd -n is preventing the
crashing.  What else does -n do, other than (presumably) forking and
running the server in the child?

Regards,
Terry

From exarkun at divmod.com  Thu May 24 11:12:29 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu May 24 11:12:36 2007
Subject: [Twisted-web] Different behavior of twistd with and without -n
In-Reply-To: <18005.40268.995881.848767@terry-jones-computer.local>
Message-ID: <20070524151229.30678.68567980.divmod.quotient.5175@ohm>

On Thu, 24 May 2007 16:12:28 +0200, Terry Jones <terry@jon.es> wrote:
>I'm not sure if this belongs in Twisted Python or Twisted Web.
>
> [snip - errors with twistd and PyLucene, unreproducable with twistd -n]
>
>While I realize there's probably something up with PyLucene, I'm wondering
>if anyone can suggest why running with twistd -n is preventing the
>crashing.  What else does -n do, other than (presumably) forking and
>running the server in the child?

A completely wild guess is that forking is confusing PyLucene in a fatal
way.  Are you importing PyLucene in the .tac file itself?  If so, it may
help to avoid doing this, so that no code from PyLucene even gets a chance
to run until after the process has already daemonized.

Jean-Paul

From terry at jon.es  Thu May 24 12:04:57 2007
From: terry at jon.es (Terry Jones)
Date: Thu May 24 12:40:53 2007
Subject: [Twisted-web] Different behavior of twistd with and without -n
In-Reply-To: Your message at 11:12:29 on Thursday, 24 May 2007
References: <18005.40268.995881.848767@terry-jones-computer.local>
	<20070524151229.30678.68567980.divmod.quotient.5175@ohm>
Message-ID: <18005.47017.67899.468242@terry-jones-computer.local>

>>>>> "JP" == Jean-Paul Calderone <exarkun@divmod.com> writes:
JP> A completely wild guess is that forking is confusing PyLucene in a
JP> fatal way.  Are you importing PyLucene in the .tac file itself?  If so,
JP> it may help to avoid doing this, so that no code from PyLucene even
JP> gets a chance to run until after the process has already daemonized.

Hi JP. Thanks for the suggestion.

Yes, the PyLucene import does happen as a result of an import in the .tac
file. I just made some changes to delay the import until PyLucene is
actually needed. That didn't work, and nor did further hiding the import by
using __import__.

Is it right that all the -n switch to twistd does is prevent the fork?

Terry

From exarkun at divmod.com  Thu May 24 13:44:52 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu May 24 13:45:01 2007
Subject: [Twisted-web] Different behavior of twistd with and without -n
In-Reply-To: <18005.47017.67899.468242@terry-jones-computer.local>
Message-ID: <20070524174452.30678.779279034.divmod.quotient.5229@ohm>

On Thu, 24 May 2007 18:04:57 +0200, Terry Jones <terry@jon.es> wrote:
>>>>>> "JP" == Jean-Paul Calderone <exarkun@divmod.com> writes:
>JP> A completely wild guess is that forking is confusing PyLucene in a
>JP> fatal way.  Are you importing PyLucene in the .tac file itself?  If so,
>JP> it may help to avoid doing this, so that no code from PyLucene even
>JP> gets a chance to run until after the process has already daemonized.
>
>Hi JP. Thanks for the suggestion.
>
>Yes, the PyLucene import does happen as a result of an import in the .tac
>file. I just made some changes to delay the import until PyLucene is
>actually needed. That didn't work, and nor did further hiding the import by
>using __import__.
>
>Is it right that all the -n switch to twistd does is prevent the fork?

It does a couple other minor things, like changing the default logging to
go to stdout instead of twistd.log, but preventing the fork is the only big
thing, yes.

Jean-Paul

From glyph at divmod.com  Thu May 24 17:39:14 2007
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu May 24 17:39:19 2007
Subject: [Twisted-web] Different behavior of twistd with and without -n
In-Reply-To: <20070524174452.30678.779279034.divmod.quotient.5229@ohm>
References: <18005.47017.67899.468242@terry-jones-computer.local>
	<20070524174452.30678.779279034.divmod.quotient.5229@ohm>
Message-ID: <20070524213914.5459.1268812588.divmod.xquotient.9@joule.divmod.com>

T24gMDU6NDQgcG0sIGV4YXJrdW5AZGl2bW9kLmNvbSB3cm90ZToKPk9uIFRodSwgMjQgTWF5IDIw
MDcgMTg6MDQ6NTcgKzAyMDAsIFRlcnJ5IEpvbmVzIDx0ZXJyeUBqb24uZXM+IHdyb3RlOgo+Pj4+
Pj4+IkpQIiA9PSBKZWFuLVBhdWwgQ2FsZGVyb25lIDxleGFya3VuQGRpdm1vZC5jb20+IHdyaXRl
czoKPj5KUD4gQSBjb21wbGV0ZWx5IHdpbGQgZ3Vlc3MgaXMgdGhhdCBmb3JraW5nIGlzIGNvbmZ1
c2luZyBQeUx1Y2VuZSBpbiBhCj4+SlA+IGZhdGFsIHdheS4gIEFyZSB5b3UgaW1wb3J0aW5nIFB5
THVjZW5lIGluIHRoZSAudGFjIGZpbGUgaXRzZWxmPyAKPj5JZiBzbywKPj5KUD4gaXQgbWF5IGhl
bHAgdG8gYXZvaWQgZG9pbmcgdGhpcywgc28gdGhhdCBubyBjb2RlIGZyb20gUHlMdWNlbmUgCj4+
ZXZlbgo+PkpQPiBnZXRzIGEgY2hhbmNlIHRvIHJ1biB1bnRpbCBhZnRlciB0aGUgcHJvY2VzcyBo
YXMgYWxyZWFkeSAKPj5kYWVtb25pemVkLgo+Pgo+PkhpIEpQLiBUaGFua3MgZm9yIHRoZSBzdWdn
ZXN0aW9uLgo+Pgo+PlllcywgdGhlIFB5THVjZW5lIGltcG9ydCBkb2VzIGhhcHBlbiBhcyBhIHJl
c3VsdCBvZiBhbiBpbXBvcnQgaW4gdGhlIAo+Pi50YWMKPj5maWxlLiBJIGp1c3QgbWFkZSBzb21l
IGNoYW5nZXMgdG8gZGVsYXkgdGhlIGltcG9ydCB1bnRpbCBQeUx1Y2VuZSBpcwo+PmFjdHVhbGx5
IG5lZWRlZC4gVGhhdCBkaWRuJ3Qgd29yaywgYW5kIG5vciBkaWQgZnVydGhlciBoaWRpbmcgdGhl
IAo+PmltcG9ydCBieQo+PnVzaW5nIF9faW1wb3J0X18uCj4+Cj4+SXMgaXQgcmlnaHQgdGhhdCBh
bGwgdGhlIC1uIHN3aXRjaCB0byB0d2lzdGQgZG9lcyBpcyBwcmV2ZW50IHRoZSBmb3JrPwo+Cj5J
dCBkb2VzIGEgY291cGxlIG90aGVyIG1pbm9yIHRoaW5ncywgbGlrZSBjaGFuZ2luZyB0aGUgZGVm
YXVsdCBsb2dnaW5nIAo+dG8KPmdvIHRvIHN0ZG91dCBpbnN0ZWFkIG9mIHR3aXN0ZC5sb2csIGJ1
dCBwcmV2ZW50aW5nIHRoZSBmb3JrIGlzIHRoZSBvbmx5IAo+YmlnCj50aGluZywgeWVzLgoKVGhl
IGZvcmsgZG9lcyBzb21lIG90aGVyIHRoaW5ncyB0aG91Z2gsIGFuZCBpdCdzIGhhcmQgdG8gc2F5
IHdoaWNoIG9uZSAKaXMgYWZmZWN0aW5nIHRoZSBleGVjdXRpb24gb2YgeW91ciBwcm9ncmFtLCBl
c3BlY2lhbGx5IHNpbmNlIFB5THVjZW5lIGlzIApkb2luZyBhIGJ1bmNoIG9mIHRoaW5ncyBhdCB0
aGUgbWFjaGluZS1jb2RlIGxldmVsIHdoaWNoIGFyZSBoaWdobHkgCnN1cnByaXNpbmcgdG8gUHl0
aG9uIHByb2dyYW1tZXJzLgoKSGF2ZSB5b3UgdHJpZWQgcnVubmluZyAnc3RyYWNlJyBvbiB0aGlz
IHByb2Nlc3MgeWV0PwotLS0tLS0tLS0tLS0tLSBuZXh0IHBhcnQgLS0tLS0tLS0tLS0tLS0KQW4g
SFRNTCBhdHRhY2htZW50IHdhcyBzY3J1YmJlZC4uLgpVUkw6IGh0dHA6Ly90d2lzdGVkbWF0cml4
LmNvbS9waXBlcm1haWwvdHdpc3RlZC13ZWIvYXR0YWNobWVudHMvMjAwNzA1MjQvYjQ5ZDU5YjIv
YXR0YWNobWVudC5odG0K
From terry at jon.es  Thu May 24 19:52:51 2007
From: terry at jon.es (Terry Jones)
Date: Thu May 24 19:53:24 2007
Subject: [Twisted-web] Different behavior of twistd with and without -n
In-Reply-To: Your message at 21:39:14 on Thursday, 24 May 2007
References: <18005.47017.67899.468242@terry-jones-computer.local>
	<20070524174452.30678.779279034.divmod.quotient.5229@ohm>
	<20070524213914.5459.1268812588.divmod.xquotient.9@joule.divmod.com>
Message-ID: <18006.9555.787682.730279@terry-jones-computer.local>

Hi Glyph

| The fork does some other things though, and it's hard to say which one is
| affecting the execution of your program, especially since PyLucene is doing
| a bunch of things at the machine-code level which are highly surprising to
| Python programmers.

I'm too old to be highly surprised any more, and I'm barely a Python
programmer... :-)

| Have you tried running 'strace' on this process yet?

No, I hadn't, thanks. Running ktrace sheds a little light on things. The
final output before it writes the core file is:

  7826 Python   CALL  write(0x2,0xbfff971f,0x18)
  7826 Python   GIO   fd 2 wrote 24 bytes
       "thread_get_state failed
       "
  7826 Python   RET   write 24/0x18
  7826 Python   CALL  sigprocmask(0x3,0xbfff9b08,0)
  7826 Python   RET   sigprocmask 0
  7826 Python   CALL  kill(0x1e92,0x6)
  7826 Python   RET   kill 0
  7826 Python   PSIG  SIGABRT SIG_DFL
  7826 Python   NAMI  "/cores/core.7826"

Nothing fails before that.  The "thread_get_state failed\n" message does
not appear in the twisted server log. The kill is an abort to this process
(0x1e92 = 7826). So something (but not a system call) has gone wrong and
the code has called abort. That at least explains why the server abruptly
dies.

Running gdb python /cores/core.7826 and using where/bt provides no useful
info:

  (gdb) where
  #0  0x00000000 in _mh_dylib_header ()


>From the kdump output, the process is clearly in the middle of doing
PyLucene things (there are a bunch of access calls to files that are in my
PyLucene index directories).

Grepping for 'thread_get_state failed' in Python, Twisted, and PyLucene
gets me just one hit:

  $ grep -i 'thread_get_state failed'  /usr/local/lib/*
  Binary file /usr/local/lib/libgcj.6.dylib matches

Which is a GCJ library file distributed with the Mac OS X binary version of
PyLucene. Google thread_get_state failed gives some leads.

I'll go bug the PyLucene folks now... :-)

Thanks again for the trace suggestion.

Terry

From jarek.zgoda at sensisoft.com  Fri May 25 03:30:04 2007
From: jarek.zgoda at sensisoft.com (Jarek Zgoda)
Date: Fri May 25 03:30:45 2007
Subject: [Twisted-web] Different behavior of twistd with and without -n
In-Reply-To: <18005.40268.995881.848767@terry-jones-computer.local>
References: <18005.40268.995881.848767@terry-jones-computer.local>
Message-ID: <4656907C.3020600@sensisoft.com>

Terry Jones napisa?(a):

> While I realize there's probably something up with PyLucene, I'm wondering
> if anyone can suggest why running with twistd -n is preventing the
> crashing.  What else does -n do, other than (presumably) forking and
> running the server in the child?

I have other issues regarding forking in twistd and PyLucene. My server
works reliably (on linux, didn't try on OSX) only if I run it without
daemonizong twistd. If I daemonize twistd, the memory consumption grows
out of control and finally system's oomkiller starts killing processes.
There's one Queue object that holds indexing requests and it grows
indefinitely without freeing any memory, so the whole twistd process
eats more and more memory while requests come to the system.

As a temporary solution we start the server under screen session.

-- 
Jarek Zgoda

"We read Knuth so you don't have to."

From sebastien.lelong at dexia-securities.fr  Fri May 25 05:45:07 2007
From: sebastien.lelong at dexia-securities.fr (=?iso-8859-15?q?S=E9bastien_LELONG?=)
Date: Fri May 25 05:45:56 2007
Subject: [Twisted-web] Different behavior of twistd with and without -n
In-Reply-To: <20070524151229.30678.68567980.divmod.quotient.5175@ohm>
References: <20070524151229.30678.68567980.divmod.quotient.5175@ohm>
Message-ID: <200705251145.07944.sebastien.lelong@dexia-securities.fr>

> A completely wild guess is that forking is confusing PyLucene in a fatal
> way.

FWIW, I have an application running CherryPy over Twisted, using PyLucene. 
Since PyLucene isn't thread-safe, every thread must subclass 
PyLucene.PythonThread, so the underlying "java runtime garbage collector is 
aware about the python thread upon their creation" 
(http://lists.osafoundation.org/pipermail/pylucene-dev/2004-June/000037.html). 
Without this, the apps simply crashes (segfault, see also 
http://chandlerproject.org/PyLucene/ThreadingInPyLucene). Maybe there's 
something about that while twistd is daemonizing the process ?

Hope that helps.

Cheers,

Seb

-- 
S?bastien LELONG
http://www.sirloon.net
sebastien.lelong[at]sirloon.net

From manlio_perillo at libero.it  Fri May 25 07:57:16 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri May 25 07:57:53 2007
Subject: [Twisted-web] atomic log write
Message-ID: <4656CF1C.2090302@libero.it>

Hi.

Since I want to write to the same log file from multiple Twisted
processes, I need to know if the log write is atomic.

Reading the twisted log source, I can see that the log entry is written
using only one write, so the question is if this operation if always
atomic, even for large buffers.


Thanks  Manlio Perillo



From thostrup at gmail.com  Fri May 25 08:20:42 2007
From: thostrup at gmail.com (Henrik Thostrup Jensen)
Date: Fri May 25 08:20:46 2007
Subject: [Twisted-web] atomic log write
In-Reply-To: <4656CF1C.2090302@libero.it>
References: <4656CF1C.2090302@libero.it>
Message-ID: <f33a4da20705250520p74105c8cr53d21123b907030f@mail.gmail.com>

On 5/25/07, Manlio Perillo <manlio_perillo@libero.it> wrote:
>
>
> Since I want to write to the same log file from multiple Twisted
> processes, I need to know if the log write is atomic.
>
> Reading the twisted log source, I can see that the log entry is written
> using only one write, so the question is if this operation if always
> atomic, even for large buffers.


This depends  on the semantics of the Posix write call. I'm not sure, but I
think the result of multiple concurrent writes is undefined. It's doubtfull
that this will work

I would probably create my own logging daemon (or use an existing logging
daemon). The easy and straghtforward solution is to log to seperate files
:-). As long as they are timestamped you can always merge them if any
analysis is needed.


-- =

   - Henrik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20070525/ec=
2de29d/attachment.htm
From terry at jon.es  Fri May 25 11:24:17 2007
From: terry at jon.es (Terry Jones)
Date: Fri May 25 11:24:52 2007
Subject: [Twisted-web] Different behavior of twistd with and without -n
In-Reply-To: Your message at 11:45:07 on Friday, 25 May 2007
References: <20070524151229.30678.68567980.divmod.quotient.5175@ohm>
	<200705251145.07944.sebastien.lelong@dexia-securities.fr>
Message-ID: <18006.65441.837518.491168@terry-jones-computer.local>

>>>>> "Seb" =3D=3D S=E9bastien LELONG <sebastien.lelong@dexia-securities.=
fr> writes:

Seb> FWIW, I have an application running CherryPy over Twisted, using
Seb> PyLucene.  Since PyLucene isn't thread-safe, every thread must
Seb> subclass PyLucene.PythonThread, so the underlying "java runtime
Seb> garbage collector is aware about the python thread upon their
Seb> creation"
Seb> (http://lists.osafoundation.org/pipermail/pylucene-dev/2004-June/000=
037.html).
Seb> Without this, the apps simply crashes (segfault, see also
Seb> http://chandlerproject.org/PyLucene/ThreadingInPyLucene). Maybe
Seb> there's something about that while twistd is daemonizing the process=
 ?

Hi S=E9bastien.

I read those pages at some point, but seeing as my code doesn't use threa=
ds
I never paid that much attention.

My app runs through the code where it crashes multiple times before thing=
s
die, so I'm not suffering from the kind of segfaulting you saw. From what=
 I
can tell, something is deliberately calling abort(3) when it detects a
problem. It doesn't look like a signal is received or a system call is
failing.

Thanks a lot for the suggestion. I hope I'm understanding you right - tha=
t
it's not an issue for me as I'm not using threads directly (but is Twiste=
d?
I'm not sure).

Terry

From alpha04 at netvigator.com  Sat May 26 16:09:24 2007
From: alpha04 at netvigator.com (Andrey)
Date: Sat May 26 16:09:52 2007
Subject: [Twisted-web] XML-RPC and Authentication
Message-ID: <f3a45n$ecp$1@sea.gmane.org>

In the xmlrpc auth with auth.wrapper example below, how to pass the avatar 
information to the EXAMPLE(XML_RPC) class?
e.g.
=============================
xmlrpc_welcome(){
    return "Welcome "+username
}
=============================
Cheers
Andrey


from zope.interface import Interface, implements
from twisted.cred import portal
from twisted.cred import checkers
from twisted.web2 import channel
from twisted.web2 import http
from twisted.web2 import responsecode
from twisted.web2 import server
from twisted.web2 import xmlrpc
from twisted.web2.auth import digest
from twisted.web2.auth import basic
from twisted.web2.auth import wrapper

from twisted.application import service, strports

class IHTTPUser(Interface):
    pass

class HTTPUser(object):
    implements(IHTTPUser)

class HTTPAuthRealm(object):
    implements(portal.IRealm)

    def requestAvatar(self, avatarId, mind, *interfaces):
        if IHTTPUser in interfaces:            return IHTTPUser, HTTPUser()

        raise NotImplementedError("Only IHTTPUser interface is supported")

class Example(xmlrpc.XMLRPC):
    """An example object to be published."""

    addSlash = True

    def xmlrpc_echo(self, request, x):
        """Return all passed args."""
        return x

    def xmlrpc_add(self, request, a, b):
        """Return sum of arguments."""
        return a + b

portal = portal.Portal(HTTPAuthRealm())
checker = checkers.InMemoryUsernamePasswordDatabaseDontUse(guest='guest123')
portal.registerChecker(checker)
rsrc = Example()
credFactories = (basic.BasicCredentialFactory('My Realm'),
    digest.DigestCredentialFactory('md5', 'My Realm'))
ifaces = (IHTTPUser,)
root = wrapper.HTTPAuthResource(rsrc, credFactories, portal, ifaces)

site = server.Site(root)
application = service.Application("XML-RPC Auth Demo")
s = strports.service('tcp:8080', channel.HTTPFactory(site))
s.setServiceParent(application) 




From iacovou at gmail.com  Tue May 29 18:44:07 2007
From: iacovou at gmail.com (kgi)
Date: Tue May 29 18:44:18 2007
Subject: [Twisted-web] Trouble chaining Javascript module calls in Athena
	(example code attached).
Message-ID: <200705300144.07550.iacovou@gmail.com>


Hi all.

I'm doing a lot of Athena stuff at the moment. Calls from client->server and 
server-> client (which is virtually 100% of the calls) are working 
wonderfully. However, I'm having difficulty getting one Javascript module to 
call directly onto another Javascript module (that is, client->client) in a 
way that I would expect, and I think it's something in the package/module 
system Athena uses that I haven't yet grokked.

I've attached a minimal test case. Since it actually has a directory 
structure, I've tar-gzipped it; sorry for the additional inconvenience. 
Directions are in the README file. The only requirement is that you modify 
PYTHONPATH before twistd-ing the tac file (actually, it's a .py file, but it 
should be a .tac file).

Briefly, the problem is this: I've got two Javascript modules associated with 
LiveElements; in the example these are XCall.A and XCall.B. XCall.A knows 
about XCall.B through an import "statement"; that is, it has a line:

    // import XCall.B

It tries to call a method on XCall.B (XCall.B.chain()), but it can't see this 
method and throws an exception (which is caught by Nevow).

Examining the Javascript objects through Firebug shows that XCall.B doesn't 
have any of the methods passed to its methods() method in the object 
top-level namespace; instead, these are all available in the "prototype" 
attribute.

In other words, I can call XCall.B.prototype.chain(), but not XCall.B.chain().

Now, I know that the "prototype" attribute is the kooky way that Javascript 
implements some of its OO-ness, but all the Nevow code seems not to do it 
this way: it just imports and uses directly:

    // import Foo.Bar
    Foo.Bar.doStuff()

so I'm confused as to why I can't do the same thing myself. 

I'm running Python 2.5, Twisted 2.5.0, and have the same problem on both Nevow 
0.9.18 and on trunk head.

Can anyone spot what I'm doing wrong?

Thanks,

Ricky

-------------- next part --------------
A non-text attachment was scrubbed...
Name: xcall.tar.gz
Type: application/x-tgz
Size: 1622 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20070530/918cf08d/xcall.tar.bin
From exarkun at divmod.com  Tue May 29 19:25:23 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue May 29 19:25:56 2007
Subject: [Twisted-web] Trouble chaining Javascript module calls in Athena
	(example code attached).
In-Reply-To: <200705300144.07550.iacovou@gmail.com>
Message-ID: <20070529232523.30678.930574423.divmod.quotient.7359@ohm>

On Wed, 30 May 2007 01:44:07 +0300, kgi <iacovou@gmail.com> wrote:
>
>Hi all.
>
>I'm doing a lot of Athena stuff at the moment. Calls from client->server and
>server-> client (which is virtually 100% of the calls) are working
>wonderfully. However, I'm having difficulty getting one Javascript module to
>call directly onto another Javascript module (that is, client->client) in a
>way that I would expect, and I think it's something in the package/module
>system Athena uses that I haven't yet grokked.
>
>I've attached a minimal test case. Since it actually has a directory
>structure, I've tar-gzipped it; sorry for the additional inconvenience.
>Directions are in the README file. The only requirement is that you modify
>PYTHONPATH before twistd-ing the tac file (actually, it's a .py file, but it
>should be a .tac file).
>
>Briefly, the problem is this: I've got two Javascript modules associated with
>LiveElements; in the example these are XCall.A and XCall.B. XCall.A knows
>about XCall.B through an import "statement"; that is, it has a line:
>
>    // import XCall.B
>
>It tries to call a method on XCall.B (XCall.B.chain()), but it can't see this
>method and throws an exception (which is caught by Nevow).

This is like trying to call an unbound method in Python.  What you really
want to be doing is calling chain on an /instance/ of XCall.B, not on the
class object itself.

Also, I'd recommend not clobbering XCall.A and XCall.B with your class
objects, since those are set up to be module objects because they each
have a corresponding .js file.  Athena's module system tries to mimick
many aspects of Python's - in this case, XCall corresponds to a package,
XCall.A and XCall.B are modules in that package, and you want to be
defining things like XCall.A.Foo and XCall.B.Bar as attributes of those
modules.

Jean-Paul

From aleuser at inwind.it  Wed May 30 04:55:40 2007
From: aleuser at inwind.it (aleuser@inwind.it)
Date: Wed May 30 04:56:17 2007
Subject: [Twisted-web] nevow "context removal"
Message-ID: <JIUJGS$4528F6814933B293DF7C6B43604294C4@libero.it>

Hi,
 I read the follwing
http://divmod.org/trac/wiki/DivmodNevow/ContextRemoval

but I cant find "page.Page"

>>> from nevow.page import Page
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
ImportError: cannot import name Page

Where can I find it?

Thanks
Alessandro 


------------------------------------------------------
Leggi GRATIS le tue mail con il telefonino i-mode? di Wind
http://i-mode.wind.it/


From iacovou at gmail.com  Wed May 30 05:58:48 2007
From: iacovou at gmail.com (kgi)
Date: Wed May 30 05:58:59 2007
Subject: [Twisted-web] Trouble chaining Javascript module calls in Athena
	(example code attached).
In-Reply-To: <20070529232523.30678.930574423.divmod.quotient.7359@ohm>
References: <20070529232523.30678.930574423.divmod.quotient.7359@ohm>
Message-ID: <200705301258.48660.iacovou@gmail.com>

On Wednesday 30 May 2007 02:25:23 Jean-Paul Calderone wrote:
> On Wed, 30 May 2007 01:44:07 +0300, kgi <iacovou@gmail.com> wrote:

Hi Jean-Paul; thanks yet again for chiming in with a timely response.

> This is like trying to call an unbound method in Python.  What you really
> want to be doing is calling chain on an /instance/ of XCall.B, not on the
> class object itself.

I see what you mean. I *thought* I was just mimicking the approach used in 
lots of the Nevow code itself, but now I see The Error Of My Ways. Just to 
make sure that my insight is not bogus, can you comment on the "truthiness" 
of the following statements:

1. When a LiveElement is rendered, it is assigned an Athena Id (probably 
server-side) and something in the Nevow runtime creates a class *instance*, 
identifiable and accessible from the server through the magic of the Athena 
Id. In other words, there is rarely (never?) direct instantiation in JS code 
of objects ("var f = new Foo()") when the classes are Athena subclasses.

2. If I instantiated N LiveElements of the same class, all N would be 
individually accessible from the server just by calling object.callRemote().

3. However, whereas server->client calls have implicit access to the Athena 
Id, so the callRemote() can be routed accordingly to the right instance, 
client-side Javascript doesn't have this.

I think I was confused by the fact that up until now I've only been having one 
LiveElement instance of each type on a page, so I never had to think about 
object disambiguation.

If this is the case, then I need a way of informing *client* side objects how 
to find each other. In other words, I need to embed the callee javascript 
object's Athena Id into the caller, either at creation time, or later. Is 
this a "done thing"?

(Either that, or I go via the server)

> Also, I'd recommend not clobbering XCall.A and XCall.B with your class
> objects, since those are set up to be module objects because they each
> have a corresponding .js file.  Athena's module system tries to mimick
> many aspects of Python's - in this case, XCall corresponds to a package,
> XCall.A and XCall.B are modules in that package, and you want to be
> defining things like XCall.A.Foo and XCall.B.Bar as attributes of those
> modules.

Ah, I see. You mean that the very existence of the files XCall/A.js sets up 
the (empty?) XCall.A namespace, and within XCall.A.js I define classes like:

  XCall.A.Foo = Nevow.Athena.Widget.subclass ( 'XCall.A.Foo' );

Thanks again for your help, Jean-Paul, I know how busy you guys are. I'm sorry 
if it takes two or three attempts to get my head round some of the muddier 
aspects of how it all fits together - it's all pretty new and unfamiliar.

Regards,

Ricky

From exarkun at divmod.com  Wed May 30 08:07:25 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed May 30 08:07:26 2007
Subject: [Twisted-web] nevow "context removal"
In-Reply-To: <JIUJGS$4528F6814933B293DF7C6B43604294C4@libero.it>
Message-ID: <20070530120725.30678.464283609.divmod.quotient.7566@ohm>

On Wed, 30 May 2007 10:55:40 +0200, "aleuser@inwind.it" <aleuser@inwind.it> wrote:
>Hi,
> I read the follwing
>http://divmod.org/trac/wiki/DivmodNevow/ContextRemoval
>
>but I cant find "page.Page"
>
>>>> from nevow.page import Page
>Traceback (most recent call last):
>  File "<stdin>", line 1, in ?
>ImportError: cannot import name Page
>
>Where can I find it?
>

This is yet a work in progress.  Currently, Page is only available
in a branch.  http://divmod.org/trac/ticket/1252 details the current
state of the effort.

Jean-Paul

From exarkun at divmod.com  Wed May 30 08:15:56 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed May 30 08:15:59 2007
Subject: [Twisted-web] Trouble chaining Javascript module calls in Athena
	(example code attached).
In-Reply-To: <200705301258.48660.iacovou@gmail.com>
Message-ID: <20070530121556.30678.1364857909.divmod.quotient.7568@ohm>

On Wed, 30 May 2007 12:58:48 +0300, kgi <iacovou@gmail.com> wrote:
>On Wednesday 30 May 2007 02:25:23 Jean-Paul Calderone wrote:
>> On Wed, 30 May 2007 01:44:07 +0300, kgi <iacovou@gmail.com> wrote:
>
>Hi Jean-Paul; thanks yet again for chiming in with a timely response.
>
>> This is like trying to call an unbound method in Python.  What you really
>> want to be doing is calling chain on an /instance/ of XCall.B, not on the
>> class object itself.
>
>I see what you mean. I *thought* I was just mimicking the approach used in
>lots of the Nevow code itself, but now I see The Error Of My Ways. Just to
>make sure that my insight is not bogus, can you comment on the "truthiness"
>of the following statements:

Sure.

>
>1. When a LiveElement is rendered, it is assigned an Athena Id (probably
>server-side) and something in the Nevow runtime creates a class *instance*,
>identifiable and accessible from the server through the magic of the Athena
>Id. In other words, there is rarely (never?) direct instantiation in JS code
>of objects ("var f = new Foo()") when the classes are Athena subclasses.

Yep.  To be specific, "Nevow.Athena.Widget subclasses", though I don't think there are any other interested classes in the Nevow.Athena namespace. ;)

>
>2. If I instantiated N LiveElements of the same class, all N would be
>individually accessible from the server just by calling object.callRemote().

Right.  Each server-side LiveElement instance is tangled up with its
corresponding client-side Nevow.Athena.Widget (subclass) instance, and
vice versa.

>
>3. However, whereas server->client calls have implicit access to the Athena
>Id, so the callRemote() can be routed accordingly to the right instance,
>client-side Javascript doesn't have this.

Roughly correct, but see below.

>
>I think I was confused by the fact that up until now I've only been having one
>LiveElement instance of each type on a page, so I never had to think about
>object disambiguation.
>
>If this is the case, then I need a way of informing *client* side objects how
>to find each other. In other words, I need to embed the callee javascript
>object's Athena Id into the caller, either at creation time, or later. Is
>this a "done thing"?
>
>(Either that, or I go via the server)
>

Widgets on the client have a hierarchical relationship with each other which
reflects the hierarchical relationship of their corresponding server-side
LiveElement progenitors.  That is, if LiveElement B has setFragmentParent
called on it with LiveElement A as an argument, then Widget B will have a
widgetParent property which refers to Widget A; similarly, Widget A's
childWidgets array property will include widget B.  These relationships
can be used to pass messages between widgets in the browser without
involving the server.

>> Also, I'd recommend not clobbering XCall.A and XCall.B with your class
>> objects, since those are set up to be module objects because they each
>> have a corresponding .js file.  Athena's module system tries to mimick
>> many aspects of Python's - in this case, XCall corresponds to a package,
>> XCall.A and XCall.B are modules in that package, and you want to be
>> defining things like XCall.A.Foo and XCall.B.Bar as attributes of those
>> modules.
>
>Ah, I see. You mean that the very existence of the files XCall/A.js sets up
>the (empty?) XCall.A namespace, and within XCall.A.js I define classes like:
>
>  XCall.A.Foo = Nevow.Athena.Widget.subclass ( 'XCall.A.Foo' );

Yep.

>
>Thanks again for your help, Jean-Paul, I know how busy you guys are. I'm sorry
>if it takes two or three attempts to get my head round some of the muddier
>aspects of how it all fits together - it's all pretty new and unfamiliar.
>

No problem. :)  Hope this helps,

Jean-Paul

From iacovou at gmail.com  Wed May 30 10:53:11 2007
From: iacovou at gmail.com (kgi)
Date: Wed May 30 10:55:30 2007
Subject: [Twisted-web] Trouble chaining Javascript module calls in Athena
	(example code attached).
In-Reply-To: <20070530121556.30678.1364857909.divmod.quotient.7568@ohm>
References: <20070530121556.30678.1364857909.divmod.quotient.7568@ohm>
Message-ID: <200705301753.11190.iacovou@gmail.com>

On Wednesday 30 May 2007 15:15:56 Jean-Paul Calderone wrote:

Hi Jean-Paul; thanks for your email - very helpful.

> Widgets on the client have a hierarchical relationship with each other
> which reflects the hierarchical relationship of their corresponding
> server-side LiveElement progenitors.  That is, if LiveElement B has
> setFragmentParent called on it with LiveElement A as an argument, then
> Widget B will have a widgetParent property which refers to Widget A;
> similarly, Widget A's childWidgets array property will include widget B. 
> These relationships can be used to pass messages between widgets in the
> browser without involving the server.

Yep, I see the attributes for traversing along the hierarchy. Unless I've 
misunderstood, in order for a widget's Javascript to be able to call another 
widget's Javascript, it has to do something like:

  self.widgetParent.widgetParent.widgetParent ... 
childWidgets[0].childWidgets[1].doStuff()

This feels somewhat wrong, partly because of fragility: if I move the location 
of a widget in the hierarchy, its Javascript code will need updating. 

Is there a way of accessing another widget in the page directly by name? An 
example might be a panel where I want any widget to be able to append status 
messages.

I would imagine this might entail assigning a user-controlled widget id to the 
top-level DOM node of a LiveElement (as opposed to *subnodes* of the widget, 
in which ids are rewritten for use by nodeById(), and which need the athena 
id to access).

I suppose the stan would look like this (this doesn't work, because the id 
gets clobbered by the autogenerated id):

    T.div ( _id = 'my-unique-id', render = T.directive ( "mywidget" ) ),
    T.div ( _id = 'another-unique-id', render = T.directive ( "mywidget" ) )

Then in JS code of another widget:

    w = self.getAthenaWidgetByName ( 'my-unique-id' );
    w.doStuff()

Obviously, the LiveElement nodes are already all assigned a unique id, it's 
just that it's done automatically and there's no obvious way of getting at 
them ahead-of-time.

I guess I could always cheat and wrap all LiveElements inside named divs and 
do document.getElementById(), but that feels silly, given that the divs are 
already named.

There are plenty of methods in Nevow/nevow/js/Nevow/Athena/__init__.js for 
getting hold of things but they all seem to need either the *numeric* athena 
id (fromAthenaID, callByAthenaID) or a reference to a node (athenaIDFromNode, 
athenaClassFromNode).

Ricky




From exarkun at divmod.com  Wed May 30 11:12:32 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed May 30 11:12:33 2007
Subject: [Twisted-web] Trouble chaining Javascript module calls in Athena
	(example code attached).
In-Reply-To: <200705301753.11190.iacovou@gmail.com>
Message-ID: <20070530151232.30678.1349496059.divmod.quotient.7610@ohm>

On Wed, 30 May 2007 17:53:11 +0300, kgi <iacovou@gmail.com> wrote:
>On Wednesday 30 May 2007 15:15:56 Jean-Paul Calderone wrote:
>
>Hi Jean-Paul; thanks for your email - very helpful.
>
>> Widgets on the client have a hierarchical relationship with each other
>> which reflects the hierarchical relationship of their corresponding
>> server-side LiveElement progenitors.  That is, if LiveElement B has
>> setFragmentParent called on it with LiveElement A as an argument, then
>> Widget B will have a widgetParent property which refers to Widget A;
>> similarly, Widget A's childWidgets array property will include widget B.
>> These relationships can be used to pass messages between widgets in the
>> browser without involving the server.
>
>Yep, I see the attributes for traversing along the hierarchy. Unless I've
>misunderstood, in order for a widget's Javascript to be able to call another
>widget's Javascript, it has to do something like:
>
>  self.widgetParent.widgetParent.widgetParent ...
>childWidgets[0].childWidgets[1].doStuff()
>
>This feels somewhat wrong, partly because of fragility: if I move the location
>of a widget in the hierarchy, its Javascript code will need updating.
>

Yep.  One solution to this is to do something like:

    self.widgetParent.doStuffToSpecificThing()

Supplying an implementation of doStuffToSpecific for whatever the widget's
parent happens to be which knows about its position in the overall page
layout.  This keeps the inter-widget dependency limited to a single step.

>Is there a way of accessing another widget in the page directly by name? An
>example might be a panel where I want any widget to be able to append status
>messages.
>
>I would imagine this might entail assigning a user-controlled widget id to the
>top-level DOM node of a LiveElement (as opposed to *subnodes* of the widget,
>in which ids are rewritten for use by nodeById(), and which need the athena
>id to access).
>
>I suppose the stan would look like this (this doesn't work, because the id
>gets clobbered by the autogenerated id):
>
>    T.div ( _id = 'my-unique-id', render = T.directive ( "mywidget" ) ),
>    T.div ( _id = 'another-unique-id', render = T.directive ( "mywidget" ) )
>
>Then in JS code of another widget:
>
>    w = self.getAthenaWidgetByName ( 'my-unique-id' );
>    w.doStuff()
>
>Obviously, the LiveElement nodes are already all assigned a unique id, it's
>just that it's done automatically and there's no obvious way of getting at
>them ahead-of-time.
>
>I guess I could always cheat and wrap all LiveElements inside named divs and
>do document.getElementById(), but that feels silly, given that the divs are
>already named.
>
>There are plenty of methods in Nevow/nevow/js/Nevow/Athena/__init__.js for
>getting hold of things but they all seem to need either the *numeric* athena
>id (fromAthenaID, callByAthenaID) or a reference to a node (athenaIDFromNode,
>athenaClassFromNode).
>

Something about this approach rubs me the wrong way.  Identifiers which are
required to be globally unique sends one down the path of being limited to
only supporting certain page configurations.  Maybe if there were some well
defined algorithm for choosing the "nearest" widget with a given identifier,
something could be worked out.  I'm not too sure about this either, though.

You can already do something like this, though, if the class name is a
sufficient identifier for the widget you want (find the node with the right
value for athena:class, then find the widget associated with the node).
I tend to discourage this approach in favor of the one I gave at the top
of the message, though.

Jean-Paul

From ldanielburr at mac.com  Wed May 30 11:16:27 2007
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Wed May 30 11:17:31 2007
Subject: [Twisted-web] Trouble chaining Javascript module calls in Athena
	(example code attached).
In-Reply-To: <200705301753.11190.iacovou@gmail.com>
References: <20070530121556.30678.1364857909.divmod.quotient.7568@ohm>
	<200705301753.11190.iacovou@gmail.com>
Message-ID: <op.ts5bdpvq3oj628@l-daniel-burrs-powerbook-g4-17.local>

Pardon me for jumping in here, but I think you're making this too hard.

On Wed, 30 May 2007 09:53:11 -0500, kgi <iacovou@gmail.com> wrote:

> Yep, I see the attributes for traversing along the hierarchy. Unless I've
> misunderstood, in order for a widget's Javascript to be able to call  
> another
> widget's Javascript, it has to do something like:
>
>   self.widgetParent.widgetParent.widgetParent ...
> childWidgets[0].childWidgets[1].doStuff()
>

You can certainly do that, but there are plenty of other means of
accomplishing this aim.

For example, a widget has __init__() and nodeInserted() methods that
you can override.  If you want your widget instances accessible by
some name known to you, then just do:

self.widgetParent.someNameILikeToUseForThisParticularWidget = self;

Better still, use a client-side event dispatching mechanism, and
just let interested widget subscribe to a given "channel":

MyDispatcher = {
     _subscribers: [],
     publish: function(channel, message){
         ...
     },
     subscribe: function(channel){
     }
     ...
};

Hopefully, this gives you some easier options to consider.

-- 
L. Daniel Burr
ldanielburr@mac.com

From iacovou at gmail.com  Wed May 30 11:53:47 2007
From: iacovou at gmail.com (kgi)
Date: Wed May 30 11:54:01 2007
Subject: [Twisted-web] Trouble chaining Javascript module calls in Athena
	(example code attached).
In-Reply-To: <20070530151232.30678.1349496059.divmod.quotient.7610@ohm>
References: <20070530151232.30678.1349496059.divmod.quotient.7610@ohm>
Message-ID: <200705301853.47193.iacovou@gmail.com>

On Wednesday 30 May 2007 18:12:32 Jean-Paul Calderone wrote:
> Something about this approach rubs me the wrong way.  Identifiers which are
> required to be globally unique sends one down the path of being limited to
> only supporting certain page configurations.  Maybe if there were some well
> defined algorithm for choosing the "nearest" widget with a given
> identifier, something could be worked out.  I'm not too sure about this
> either, though.

Is it the resultant uniqueness or the interdependency that worries you?

I can see why this would be icky if the unique widget name were somehow 
hard-coded into the LiveElement class definition (meaning you could only 
create one such widget) but I don't see how it would be in any way harmful or 
limiting if the unique widget identifier were specified at widget 
construction time. Some things really do need to exist exactly once; no-one 
balks at putting '<div id="navigation">' in a web page (it would be confusing 
to have two navigation panels).

I suppose that if you're trying to write 100% re-usable widgets then having 
cross-widget dependencies is a bad idea, but that's a problem that affects 
all the techniques described here (except for Daniel's publish/subscribe 
approach).

It looks like boshing something into the parent namespace in the widget's 
__init__ method is the simplest approach, but of course it's also the 
evillest approach as it does indeed limit you to one such widget.

Anyway, I'll have a think about the various options; thanks for your input!

Ricky


From mircea at ag-projects.com  Thu May 31 11:09:19 2007
From: mircea at ag-projects.com (Mircea Amarascu)
Date: Thu May 31 08:09:28 2007
Subject: [Twisted-web] Problem with web2 HTTP server + authentication
Message-ID: <465EE51F.7000203@ag-projects.com>

Hello,

I'm using a web2 server with Basic authentication provided by 
twisted.web2.auth.basic

There are cases when PUT requests with attachments from a client time 
out, as following:

1. When the client issues the first PUT request, without an 
Authentication header, the server responds with a 401 Unauthorized 
before receiving all the attachment (I see this in a TCP trace made with 
ngrep). I want to ask if this is the right behavior, I saw that Apache 
waits for the entire attachment before replying with 401.

2.
The client I used sends the next PUT request right after the attachment, 
without an \r\n separator, e.g.

...<closing-xml-tag>PUT /resource HTTP/1.1
Host: ...

Is this normal ?

 Sometimes, when the attachment is bigger, some 10KB, the second PUT 
sent by the client (with the Authentication header present),  is not 
entirely received by the server, which times out as it waits for the 
entire attachment, with size = ContentLength. I've printed the data 
received on the TCP socket, in the doRead() method of 
twisted.internet.tcp.Connection, and I think sometimes in the processing 
the HTTPChannel or HTTPFactory stops reading the data, it close the 
connection for reading, or something like that.

Did anyone got a similar behavior?
Thank you.


From foom at fuhm.net  Thu May 31 13:29:21 2007
From: foom at fuhm.net (James Y Knight)
Date: Thu May 31 13:29:33 2007
Subject: [Twisted-web] Problem with web2 HTTP server + authentication
In-Reply-To: <465EE51F.7000203@ag-projects.com>
References: <465EE51F.7000203@ag-projects.com>
Message-ID: <D0B95860-CCB4-4CFE-98FC-8CCF04E7BF86@fuhm.net>

On May 31, 2007, at 11:09 AM, Mircea Amarascu wrote:
> There are cases when PUT requests with attachments from a client  
> time out, as following:
>
> 1. When the client issues the first PUT request, without an  
> Authentication header, the server responds with a 401 Unauthorized  
> before receiving all the attachment (I see this in a TCP trace made  
> with ngrep). I want to ask if this is the right behavior, I saw  
> that Apache waits for the entire attachment before replying with 401.

It is allowed to do so (and is doing so on purpose). But in this  
case, I believe it should be sending a Connection: close in the  
response.

> 2.
> The client I used sends the next PUT request right after the  
> attachment, without an \r\n separator, e.g.
>
> ...<closing-xml-tag>PUT /resource HTTP/1.1
> Host: ...
>
> Is this normal ?

Yes, that is correct. But assuming the first statement is true (the  
first response properly included a Connection: close), the client  
should not be sending a second request on the same socket at all.


> Sometimes, when the attachment is bigger, some 10KB, the second PUT  
> sent by the client (with the Authentication header present),  is  
> not entirely received by the server, which times out as it waits  
> for the entire attachment, with size = ContentLength. I've printed  
> the data received on the TCP socket, in the doRead() method of  
> twisted.internet.tcp.Connection, and I think sometimes in the  
> processing the HTTPChannel or HTTPFactory stops reading the data,  
> it close the connection for reading, or something like that.

If you can provide a minimal server that exhibits this problem and a  
packet trace of the interaction your client (or, a recipe to  
reproduce with a commonly available client), it would be helpful.

James

