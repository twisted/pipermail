From dialtone at divmod.com  Tue Feb  1 05:58:49 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Feb  1 05:58:51 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <A7D910CA-7412-11D9-A757-000A95A50FB2@fuhm.net>
Message-ID: <20050201125849.7026.318243443.divmod.quotient.16503@ohm>

On Tue, 1 Feb 2005 00:32:25 -0500, James Y Knight <foom@fuhm.net> wrote:
> Yes, it is. One thing that I think would make it more useful, if it can 
> be pulled off, is to allow caching at any level. That is, something 
> like the following stan:
> html[body[cached(timeout=10, keys=(IFoo, 
> IBar))[semi_constant_header_stuff], very_dynamic_content]]
> 
> That is, a function which will render its contents to a string the 
> first time it's called, and store/return it for the next 10 seconds, 
> using the same mechanism as the posted patch. The cache would be keyed 
> off certain interfaces, and only those will get passed on to the 
> functions being rendered inside, thus ensuring the safety of the cache.
> 
> I think there are a lot of pages that are mostly "semi-static", but 
> have some very dynamic content in them, so something like could be 
> *very* useful.
> 
> Anyhow, this is just an outline of how I think it might work, but I 
> haven't tried to implement it yet, so I don't know if it will work out 
> the way I'd like it to. :)

Here I am. Below there's a more fine grained implementation. You can use it like this:

cached(name="foo", lifetime=10)[t.p['hi boy']]

the name should be enough to give a cache for everyone since you can do:

cached(name=IAvatar(ctx).uid, lifetime=60)[t.p['Hi ', IAvatar(ctx).username]]

If you don't pass the lifetime parameter it won't be cached.

I must admit I haven't tested it yet since I don't know how to write unittests for this stuff... ;P. Let me know what do you think about. I also think that having another nevow tag for this cached would be ok.

Index: nevow/tags.py
===================================================================
--- nevow/tags.py       (revision 1136)
+++ nevow/tags.py       (working copy)
@@ -62,7 +62,9 @@
 def inlineJS(s):
     return script(type="text/javascript", language="JavaScript")[xml('\n//<![CDATA[\n%s\n//]]>\n' % s)]
 
-__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object', '_map', 'drange', 'Tag', 'directive', 'xml', 'raw', 'slot', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
+__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object',
+                  '_map', 'drange', 'Tag', 'directive', 'xml', 'raw',
+                  'slot', 'cached', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
 
 
 ########################
Index: nevow/flat/flatstan.py
===================================================================
--- nevow/flat/flatstan.py      (revision 1136)
+++ nevow/flat/flatstan.py      (working copy)
@@ -226,6 +226,31 @@
         return serialize(original.default, context)
     return serialize(data, context)
 
+_CACHE = {}
+from time import time as now
+def CachedSerializer(original, context):
+    if context.precompile:
+        original.children = precompile(original.children, context)
+        return original
+
+    cached = _CACHE.get(original.name, None)
+    if cached and cached[0] > now()-original.lifetime:
+        return cached[1]
+    toSerialize = serialize(original.children, context)
+    tmp = []
+    while 1:
+        try:
+            d = toSerialize.next()
+            tmp.append(d)
+        except StopIteration:
+            c = ''.join(tmp)
+            break
+        except AttributeError:
+            c = toSerialize
+            break
+    _CACHE[original.name] = (now(), c)
+    return c
+
 def ContextSerializer(original, context):
     originalContext = original.clone(deep=False)
     originalContext.precompile = context and context.precompile or False
Index: nevow/__init__.py
===================================================================
--- nevow/__init__.py   (revision 1136)
+++ nevow/__init__.py   (working copy)
@@ -182,6 +182,7 @@
 nevow.flat.flatstan.RendererSerializer            nevow.inevow.IRenderer
 nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive
 nevow.flat.flatstan.SlotSerializer                nevow.stan.slot
+nevow.flat.flatstan.CachedSerializer              nevow.stan.cached 
 nevow.flat.flatstan.ContextSerializer             nevow.context.WovenContext
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.Deferred
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.DeferredList
Index: nevow/stan.py
===================================================================
--- nevow/stan.py       (revision 1136)
+++ nevow/stan.py       (working copy)
@@ -119,8 +119,33 @@
         """
         raise NotImplementedError, "Stan slot instances are not iterable."
 
+class cached(object):
+    """Marker for cached content
+    """
+    __slots__ = ['name', 'children', 'lifetime']
 
+    def __init__(self, name, lifetime=0):
+        self.name = name
+        self.children = []
+        self.lifetime = lifetime
 
+    def __repr__(self):
+        return "cached('%s','%s')" % self.name, self.lifetime
+
+    def __getitem__(self, children):
+        """cached content is what is being cached
+        """
+        if not isinstance(children, (list, tuple)):
+            children = [children]
+        self.children.extend(children)
+        return self
+
+    def __iter__(self):
+        """Prevent an infinite loop if someone tries to do
+            for x in cached('foo'):
+        """
+        raise NotImplementedError, "Stan slot instances are not iterable."
+
 class Tag(object):
     """Tag instances represent XML tags with a tag name, attributes,
     and children. Tag instances can be constructed using the Prototype


From dialtone at divmod.com  Tue Feb  1 09:05:40 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Feb  1 09:05:43 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050201125849.7026.318243443.divmod.quotient.16503@ohm>
Message-ID: <20050201160540.7026.1085493566.divmod.quotient.16656@ohm>

On Tue, 01 Feb 2005 12:58:49 GMT, Valentino Volonghi aka Dialtone <dialtone@divmod.com> wrote:

The first version of the patch didn't actually work. But I wrote a new version, also thanks to fzZzy and this time it works although it has a flaw since in weever caching the content slot (which is filled with a Fragment) results in 2 big red Nones and the rendered fragment.

As I said in the first mail you can use caching with:

t.cached(name=some_sensible_name, lifetime=MAX_LIFE)[cached_content]

This patch provides, probably, the finest granularity in caching the rendering.

Anyway the patch is below:

Index: nevow/tags.py
===================================================================
--- nevow/tags.py       (revision 1136)
+++ nevow/tags.py       (working copy)
@@ -25,7 +25,7 @@
 """
 
 
-from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata
+from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata, cached
 
 
 comment = CommentProto()
@@ -62,7 +62,9 @@
 def inlineJS(s):
     return script(type="text/javascript", language="JavaScript")[xml('\n//<![CDATA[\n%s\n//]]>\n' % s)]
 
-__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object', '_map', 'drange', 'Tag', 'directive', 'xml', 'raw', 'slot', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
+__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object',
+                  '_map', 'drange', 'Tag', 'directive', 'xml', 'raw',
+                  'slot', 'cached', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
 
 
 ########################
Index: nevow/flat/flatstan.py
===================================================================
--- nevow/flat/flatstan.py      (revision 1136)
+++ nevow/flat/flatstan.py      (working copy)
@@ -9,7 +9,7 @@
 from nevow import util
 from nevow.stan import Proto, Tag, xml, directive, Unset, invisible
 from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData
-from nevow.flat import precompile, serialize
+from nevow.flat import precompile, serialize, iterflatten
 from nevow.accessors import convertToData
 from nevow.context import WovenContext
 
@@ -226,6 +226,56 @@
         return serialize(original.default, context)
     return serialize(data, context)
 
+_CACHE = {}
+from time import time as now
+from cStringIO import StringIO
+from twisted.internet import defer
+def CachedSerializer(original, context):
+    cached = _CACHE.get(original.name, None)
+    life = now()-original.lifetime
+    if cached and cached[0] > life:
+##         print "="*20
+##         print cached[0]
+##         print life
+##         print "="*20        
+        yield cached[1]
+        return
+##     if cached:
+##         print "="*20
+##         print cached[0]
+##         print life
+##         print "="*20
+    io = StringIO()
+    for child in iterflatten(original.children, context, io.write,
+                             lambda item: True):
+        if isinstance(child, tuple):
+            childDeferred, childReturner = child
+ 
+            d = defer.Deferred() ## A new deferred for the outer loop, whose result
+            ## we don't care about, because we don't want the outer loop to write
+            ## anything when this deferred fires -- only when the entire for loop
+            ## has completed and we have all the "children" flattened
+ 
+            def innerDeferredResultAvailable(result):
+                childReturner(result) ## Cause the inner iterflatten to continue
+                d.callback('') ## Cause the outer iterflatten to continue
+                return ''
+ 
+            childDeferred.addCallback(innerDeferredResultAvailable)
+ 
+            ## Make the outer loop wait on our new deferred.
+            ## We call the new deferred back with ''
+            ## Which will cause the outer loop to write '' to the request,
+            ## which doesn't matter. It will then call our "returner",
+            ## which is just the noop lambda below, because we don't care
+            ## about the return result of the new deferred, which is just
+            ## ''
+ 
+            yield d, lambda result: None    
+    result = io.getvalue()
+    _CACHE[original.name] = (now(), result)
+    yield result
+
 def ContextSerializer(original, context):
     originalContext = original.clone(deep=False)
     originalContext.precompile = context and context.precompile or False
Index: nevow/__init__.py
===================================================================
--- nevow/__init__.py   (revision 1136)
+++ nevow/__init__.py   (working copy)
@@ -182,6 +182,7 @@
 nevow.flat.flatstan.RendererSerializer            nevow.inevow.IRenderer
 nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive
 nevow.flat.flatstan.SlotSerializer                nevow.stan.slot
+nevow.flat.flatstan.CachedSerializer              nevow.stan.cached 
 nevow.flat.flatstan.ContextSerializer             nevow.context.WovenContext
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.Deferred
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.DeferredList
Index: nevow/stan.py
===================================================================
--- nevow/stan.py       (revision 1136)
+++ nevow/stan.py       (working copy)
@@ -119,8 +119,33 @@
         """
         raise NotImplementedError, "Stan slot instances are not iterable."
 
+class cached(object):
+    """Marker for cached content
+    """
+    __slots__ = ['name', 'children', 'lifetime']
 
+    def __init__(self, name, lifetime=0):
+        self.name = name
+        self.children = []
+        self.lifetime = lifetime
 
+    def __repr__(self):
+        return "cached('%s','%s')" % self.name, self.lifetime
+
+    def __getitem__(self, children):
+        """cached content is what is being cached
+        """
+        if not isinstance(children, (list, tuple)):
+            children = [children]
+        self.children.extend(children)
+        return self
+
+    def __iter__(self):
+        """Prevent an infinite loop if someone tries to do
+            for x in cached('foo'):
+        """
+        raise NotImplementedError, "Stan slot instances are not iterable."
+
 class Tag(object):
     """Tag instances represent XML tags with a tag name, attributes,
     and children. Tag instances can be constructed using the Prototype

From matt at pollenation.net  Tue Feb  1 10:15:01 2005
From: matt at pollenation.net (Matt Goodall)
Date: Tue Feb  1 10:15:19 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050201160540.7026.1085493566.divmod.quotient.16656@ohm>
References: <20050201160540.7026.1085493566.divmod.quotient.16656@ohm>
Message-ID: <1107278102.24853.36.camel@localhost.localdomain>

On Tue, 2005-02-01 at 16:05 +0000, Valentino Volonghi aka Dialtone
wrote:
> On Tue, 01 Feb 2005 12:58:49 GMT, Valentino Volonghi aka Dialtone <dialtone@divmod.com> wrote:
> 
> The first version of the patch didn't actually work. But I wrote a new version, also thanks to fzZzy and this time it works although it has a flaw since in weever caching the content slot (which is filled with a Fragment) results in 2 big red Nones and the rendered fragment.
> 
> As I said in the first mail you can use caching with:
> 
> t.cached(name=some_sensible_name, lifetime=MAX_LIFE)[cached_content]
> 
> This patch provides, probably, the finest granularity in caching the rendering.
> 
> Anyway the patch is below:

I think it would be much better if the _CACHE module-scope dict was
replaced with an object remembered in the context. There are a couple of
reasons for this:

      * We can have persistence to the file system when necessary.
      * We can remember a cache manager on a resource to allow drop-in
        components (and their child resources) to manage their own
        caching. This also allows some root resource class to have
        multiple instances, where the interface names used as the cache
        keys will likely be the same, to be deployed under a single
        site.
      * The cache manager API can be extended in the future to allow
        manual clearing of cache items, i.e. some public web UI can
        cache parts of the page indefintely and an admin UI (that shares
        the same cache manager) can clear cached data as objects are
        modified.

There are also a couple of features that I can see stan.cached "growing"
later on. I've mentioned some of these on IRC.

      * Cache scope, i.e. application vs session. As I've said on IRC, I
        can see a real use case for session-scoped caching, i.e. I get
        my cached version; you get yours.
      * It might be nice to allow timeouts to be defined as "every
        hour", "every fifteen minutes", "at 12am". Yeah, I'm talking
        cron-like ;-).

Hmm, one last idea is cache groups. I think this is especially
applicable to the above idea of having an API to clear cache objects.

Say some part of the page includes content from two objects: a Foo with
id 3 and a Bar with id 8. The fragment could be cached against the key
((Foo,3),(Bar,8)). If some user then changed the Foo,3 object it would
clear (Foo,3) cached objects; if Bar,8 was changed it would clear
(Bar,8) cached objects. Either one would remove the ((Foo,3),(Bar,8))
cached content.

Obviously, it would be up to the application to choose its keys carefull
but, basically, if the equivalent of "(Foo,3) in ((Foo,3),(Bar,8))"
succeeds then the object would be cleared.

I don't think we have to add all these features right now as long as the
initial API takes these sorts of use cases into consideration.

Cheers, Matt


> 
> Index: nevow/tags.py
> ===================================================================
> --- nevow/tags.py       (revision 1136)
> +++ nevow/tags.py       (working copy)
> @@ -25,7 +25,7 @@
>  """
>  
> 
> -from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata
> +from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata, cached
>  
> 
>  comment = CommentProto()
> @@ -62,7 +62,9 @@
>  def inlineJS(s):
>      return script(type="text/javascript", language="JavaScript")[xml('\n//<![CDATA[\n%s\n//]]>\n' % s)]
>  
> -__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object', '_map', 'drange', 'Tag', 'directive', 'xml', 'raw', 'slot', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
> +__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object',
> +                  '_map', 'drange', 'Tag', 'directive', 'xml', 'raw',
> +                  'slot', 'cached', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
>  
> 
>  ########################
> Index: nevow/flat/flatstan.py
> ===================================================================
> --- nevow/flat/flatstan.py      (revision 1136)
> +++ nevow/flat/flatstan.py      (working copy)
> @@ -9,7 +9,7 @@
>  from nevow import util
>  from nevow.stan import Proto, Tag, xml, directive, Unset, invisible
>  from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData
> -from nevow.flat import precompile, serialize
> +from nevow.flat import precompile, serialize, iterflatten
>  from nevow.accessors import convertToData
>  from nevow.context import WovenContext
>  
> @@ -226,6 +226,56 @@
>          return serialize(original.default, context)
>      return serialize(data, context)
>  
> +_CACHE = {}
> +from time import time as now
> +from cStringIO import StringIO
> +from twisted.internet import defer
> +def CachedSerializer(original, context):
> +    cached = _CACHE.get(original.name, None)
> +    life = now()-original.lifetime
> +    if cached and cached[0] > life:
> +##         print "="*20
> +##         print cached[0]
> +##         print life
> +##         print "="*20        
> +        yield cached[1]
> +        return
> +##     if cached:
> +##         print "="*20
> +##         print cached[0]
> +##         print life
> +##         print "="*20
> +    io = StringIO()
> +    for child in iterflatten(original.children, context, io.write,
> +                             lambda item: True):
> +        if isinstance(child, tuple):
> +            childDeferred, childReturner = child
> + 
> +            d = defer.Deferred() ## A new deferred for the outer loop, whose result
> +            ## we don't care about, because we don't want the outer loop to write
> +            ## anything when this deferred fires -- only when the entire for loop
> +            ## has completed and we have all the "children" flattened
> + 
> +            def innerDeferredResultAvailable(result):
> +                childReturner(result) ## Cause the inner iterflatten to continue
> +                d.callback('') ## Cause the outer iterflatten to continue
> +                return ''
> + 
> +            childDeferred.addCallback(innerDeferredResultAvailable)
> + 
> +            ## Make the outer loop wait on our new deferred.
> +            ## We call the new deferred back with ''
> +            ## Which will cause the outer loop to write '' to the request,
> +            ## which doesn't matter. It will then call our "returner",
> +            ## which is just the noop lambda below, because we don't care
> +            ## about the return result of the new deferred, which is just
> +            ## ''
> + 
> +            yield d, lambda result: None    
> +    result = io.getvalue()
> +    _CACHE[original.name] = (now(), result)
> +    yield result
> +
>  def ContextSerializer(original, context):
>      originalContext = original.clone(deep=False)
>      originalContext.precompile = context and context.precompile or False
> Index: nevow/__init__.py
> ===================================================================
> --- nevow/__init__.py   (revision 1136)
> +++ nevow/__init__.py   (working copy)
> @@ -182,6 +182,7 @@
>  nevow.flat.flatstan.RendererSerializer            nevow.inevow.IRenderer
>  nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive
>  nevow.flat.flatstan.SlotSerializer                nevow.stan.slot
> +nevow.flat.flatstan.CachedSerializer              nevow.stan.cached 
>  nevow.flat.flatstan.ContextSerializer             nevow.context.WovenContext
>  nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.Deferred
>  nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.DeferredList
> Index: nevow/stan.py
> ===================================================================
> --- nevow/stan.py       (revision 1136)
> +++ nevow/stan.py       (working copy)
> @@ -119,8 +119,33 @@
>          """
>          raise NotImplementedError, "Stan slot instances are not iterable."
>  
> +class cached(object):
> +    """Marker for cached content
> +    """
> +    __slots__ = ['name', 'children', 'lifetime']
>  
> +    def __init__(self, name, lifetime=0):
> +        self.name = name
> +        self.children = []
> +        self.lifetime = lifetime
>  
> +    def __repr__(self):
> +        return "cached('%s','%s')" % self.name, self.lifetime
> +
> +    def __getitem__(self, children):
> +        """cached content is what is being cached
> +        """
> +        if not isinstance(children, (list, tuple)):
> +            children = [children]
> +        self.children.extend(children)
> +        return self
> +
> +    def __iter__(self):
> +        """Prevent an infinite loop if someone tries to do
> +            for x in cached('foo'):
> +        """
> +        raise NotImplementedError, "Stan slot instances are not iterable."
> +
>  class Tag(object):
>      """Tag instances represent XML tags with a tag name, attributes,
>      and children. Tag instances can be constructed using the Prototype
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From foom at fuhm.net  Tue Feb  1 10:34:54 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue Feb  1 10:35:07 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <1107278102.24853.36.camel@localhost.localdomain>
References: <20050201160540.7026.1085493566.divmod.quotient.16656@ohm>
	<1107278102.24853.36.camel@localhost.localdomain>
Message-ID: <95E88084-7477-11D9-A757-000A95A50FB2@fuhm.net>


On Feb 1, 2005, at 12:15 PM, Matt Goodall wrote:
> I think it would be much better if the _CACHE module-scope dict was
> replaced with an object remembered in the context. There are a couple 
> of
> reasons for this:

I was actually thinking you could just store it in the 'cached' class 
itself.

>       * Cache scope, i.e. application vs session. As I've said on IRC, 
> I
>         can see a real use case for session-scoped caching, i.e. I get
>         my cached version; you get yours.

This would be solved by keying off of which bits of context you allow 
through. If you let ISession through to the cached rendering context, 
it would have to be equal to use that cached representation. If you 
don't let it through, then there's no way you can mess up and let 
people get eachothers' session data. I think that also does what you 
were saying about cache groups.

James


From andrea at cpushare.com  Tue Feb  1 12:09:57 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Feb  1 12:10:02 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050201160540.7026.1085493566.divmod.quotient.16656@ohm>
References: <20050201125849.7026.318243443.divmod.quotient.16503@ohm>
	<20050201160540.7026.1085493566.divmod.quotient.16656@ohm>
Message-ID: <20050201190957.GA8446@opteron.random>

On Tue, Feb 01, 2005 at 04:05:40PM +0000, Valentino Volonghi wrote:
> Anyway the patch is below:

Looks a great start.

I'll give it a spin overnight to see what happens.

> +_CACHE = {}

Shouldn't this be stored in the respective classes?

> +def CachedSerializer(original, context):
> +    cached = _CACHE.get(original.name, None)
> +    life = now()-original.lifetime

Can we execute only one single gettimeofday? gettimeofday is one of the
biggest kernel costs of twisted in general (modulo poll). I will deploy
initially on x86 (on x86-64 with vsyscalls gettimeofday is zerocost).

Could you also keep it similar to my patch where a timeout <= 0 means
"cache forever"?

> +    if cached and cached[0] > life:
> +##         print "="*20
> +##         print cached[0]
> +##         print life
> +##         print "="*20        
> +        yield cached[1]
> +        return

Why yield if you return immediatly? Why not return cached[1]?

> +    _CACHE[original.name] = (now(), result)

what is contained in original.name? How to identify exactly which object
is being cached? (just to understand how should I use this exactly)

> +    yield result

here again, why not return result?


Do I understand correctly this more finegriend cache doesn't obsolete
the other cache?

The other cache is probably the fastest we can get, and it pretty much
solves my problem for the high traffic part.

However I will definitely need this finegrined cache as well in the
longer run, even if it's lower priority. One of my first objectives
would be to workaround the dogslow rendering of the annotate.Choice
renderer. But I'll get great benefit in the header fragment and in other
fragments too.

As for the session cache, that's a much lower prio to me, the real
obvious caching we can do is for _global_ stuff that is the same for the
whole site, always.

Thanks and keep up the great work! ;)

PS. Still I would like to see compy removed, since not everything will
be cached. There are parts where I will not cache anything.

From dialtone at divmod.com  Tue Feb  1 13:02:27 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue Feb  1 13:02:29 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050201190957.GA8446@opteron.random>
Message-ID: <20050201200227.21318.1114589713.divmod.quotient.93@ohm>

On Tue, 1 Feb 2005 20:09:57 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
> > Anyway the patch is below:
> 
> Looks a great start.
> 
> I'll give it a spin overnight to see what happens.
> 
> > +_CACHE = {}
> 
> Shouldn't this be stored in the respective classes?

There are MANY ideas on where to put this _CACHE.
jamwt volunteered for writing a memcache like http://www.danga.com/memcached/
Which will probably be one of the backends. 

There are also other problems to solve about this cache, but it is working with this patch (that is now committed in the caching branch) and people can test it or provide  different behaviours.

> > +def CachedSerializer(original, context):
> > +    cached = _CACHE.get(original.name, None)
> > +    life = now()-original.lifetime
> 
> Can we execute only one single gettimeofday? gettimeofday is one of the
> biggest kernel costs of twisted in general (modulo poll). I will deploy
> initially on x86 (on x86-64 with vsyscalls gettimeofday is zerocost).
> 
> Could you also keep it similar to my patch where a timeout <= 0 means
> "cache forever"?

Yep, this is just a first attempt. Further work will be done on the caching branch.

> > +    if cached and cached[0] > life:
> > +##         print "="*20
> > +##         print cached[0]
> > +##         print life
> > +##         print "="*20        
> > +        yield cached[1]
> > +        return
> 
> Why yield if you return immediatly? Why not return cached[1]?

Try it yourself :)

In python you cannot have a return statement with arguments when inside a generator.
CachedSerializer is in fact a generator (because of the yield keyword inside the func body) and can't have a return statement with arguments.

> > +    _CACHE[original.name] = (now(), result)
> 
> what is contained in original.name? How to identify exactly which object
> is being cached? (just to understand how should I use this exactly)

original name is the first argument of the tag instance.

t.cached(name="foobar")

this will create an empty cached tag with name foobar, you can also do:

t.cached(name=(IFoo, IBar)) 

as was suggested if you need. No check is done on the type of name but it must be hashable.

> Do I understand correctly this more finegriend cache doesn't obsolete
> the other cache?

I think it does and will surely do if someone will write the flatsax stuff to use it with xhtml templates.

with stan you can do:

    docFatory = loaders.stan(t.cached(name="MainPage", lifetime=10)[t.html[....]])

Which will do the same thing as the first ancient patch. I also get similar performances with the new patch: 26 req/sec and it shouldn't be any slower.
 
> The other cache is probably the fastest we can get, and it pretty much
> solves my problem for the high traffic part.

I still think 250 req/sec are too much. Are you sure that is not the redirect page in guard?
 
> PS. Still I would like to see compy removed, since not everything will
> be cached. There are parts where I will not cache anything.

I've talked to dp and he said that compy will be there only to not depend on twisted but it will definately directly use zope.interface if present.

From andrea at cpushare.com  Tue Feb  1 19:48:40 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Feb  1 19:48:40 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050201200227.21318.1114589713.divmod.quotient.93@ohm>
References: <20050201190957.GA8446@opteron.random>
	<20050201200227.21318.1114589713.divmod.quotient.93@ohm>
Message-ID: <20050202024840.GE8446@opteron.random>

On Tue, Feb 01, 2005 at 08:02:27PM +0000, Valentino Volonghi wrote:
> On Tue, 1 Feb 2005 20:09:57 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
> > > Anyway the patch is below:
> > 
> > Looks a great start.
> > 
> > I'll give it a spin overnight to see what happens.
> > 
> > > +_CACHE = {}
> > 
> > Shouldn't this be stored in the respective classes?
> 
> There are MANY ideas on where to put this _CACHE.
> jamwt volunteered for writing a memcache like http://www.danga.com/memcached/
> Which will probably be one of the backends. 

Is that a separate task? One of the benefits of having cache inside the
python VM that runs the webserver is no context switches and no inter
process communication. So I'm not very excited about caching outside
nevow ;)

> In python you cannot have a return statement with arguments when
> inside a generator.  CachedSerializer is in fact a generator (because
> of the yield keyword inside the func body) and can't have a return
> statement with arguments.

Didn't know about that...

> > > +    _CACHE[original.name] = (now(), result)
> > 
> > what is contained in original.name? How to identify exactly which object
> > is being cached? (just to understand how should I use this exactly)
> 
> original name is the first argument of the tag instance.
> 
> t.cached(name="foobar")
> 
> this will create an empty cached tag with name foobar, you can also do:
> 
> t.cached(name=(IFoo, IBar)) 
> 
> as was suggested if you need. No check is done on the type of name but it must be hashable.

Ok, so it's up to me to avoid collisions, it's not like the more
lowlevel cache where the url was picked automatically.

> > Do I understand correctly this more finegriend cache doesn't obsolete
> > the other cache?
> 
> I think it does and will surely do if someone will write the flatsax stuff to use it with xhtml templates.
> 
> with stan you can do:
> 
>     docFatory = loaders.stan(t.cached(name="MainPage", lifetime=10)[t.html[....]])
> 
> Which will do the same thing as the first ancient patch. I also get
> similar performances with the new patch: 26 req/sec and it shouldn't
> be any slower.

All my pages are using xml (except for the forms that come from
formless), so I'd need the cache for xml templates too.

But I really liked the caching using URL, I don't want having to write
name="something" by hand.

> > The other cache is probably the fastest we can get, and it pretty much
> > solves my problem for the high traffic part.
> 
> I still think 250 req/sec are too much. Are you sure that is not the redirect page in guard?

There's no guard (I know the issue with the guard redirect), I get 200
req/sec just fine (over loopback, it goes down to 180req/sec with
ethernet in the middle).

I cannot easily evalute if your same approach for xml is going to work
at the same speed of the httprendering, but for sure I don't want having
to write name="xxx" by hand. So for now I stick with the cache in the
httprendering that guarantees me no cpu bottleneck until 200req/sec.

The httprender cache is so easy to use and so efficient and gets
automatically right the whole http site, that it doesn't worth for me to
even think at messing things up and convert stuff to the new method,
even if only because I'd need to choose the index of the hash by hand
(and even assuming it has the same performance). So I'd still suggest to
apply that patch to the trunk. Not everyone will want to use the more
finegrined caches, for dynamic but mostly static data, the httprender
cache is just ideal.

For the SSL site where I cannot use the httprender cache at all, I'll
need the xml loader caching or the fragments, since I only used xml fragments.

But I suspect this stan cache could already solve all the forms
rendering if I do something like tags.cached(..)[webform.renderForms()],
I'm going to try it in a few minutes ;). If I can optimize the forms
with this cache it'll be great.

> I've talked to dp and he said that compy will be there only to not
> depend on twisted but it will definately directly use zope.interface
> if present.

Ok great news! Thanks ;)

From mesozoic at polynode.com  Tue Feb  1 20:21:22 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Tue Feb  1 20:21:54 2005
Subject: [Twisted-web] Re: html cache with timeout
In-Reply-To: <20050202024840.GE8446@opteron.random>
References: <20050201190957.GA8446@opteron.random>
	<20050201200227.21318.1114589713.divmod.quotient.93@ohm>
	<20050202024840.GE8446@opteron.random>
Message-ID: <20050202032122.GI1223@perpetual.moxn.net>

On Wed, Feb 02, 2005 at 03:48:40AM +0100, Andrea Arcangeli wrote:
> > jamwt volunteered for writing a memcache like http://www.danga.com/memcached/
> > Which will probably be one of the backends. 
> 
> Is that a separate task? One of the benefits of having cache inside the
> python VM that runs the webserver is no context switches and no inter
> process communication. So I'm not very excited about caching outside
> nevow ;)

I think the aim should be to make this caching feature sufficiently useful
on its own, while being sufficiently extensible to allow people to do what
they want with it. It'd be nice to have the option of using memcached, or an
in-process cache, or... well, you get the idea.

I liked Matt's idea of storing something in the context, like an
ICacheManager. Of course, I should disclose I liked the idea because I'd
planned on the same thing for Payago. :)

> Ok, so it's up to me to avoid collisions, it's not like the more
> lowlevel cache where the url was picked automatically.

Yes, and if you don't trust yourself to avoid collisions, having the cache
manager remembered in the context will let you implement a URL picker :)

Of course, I think caching is one of those problems that will always be very
site-specific, and any implementation that involves modifying the Page class
is going to be either too general-purpose to be useful, or too invasive to
be stable all the time, for all projects. Your httprender patch is useful,
but probably better placed in a subclass.

My two cents (adjusted for inflation).

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/
 
"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_

From andrea at cpushare.com  Tue Feb  1 20:23:20 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Feb  1 20:23:20 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050202024840.GE8446@opteron.random>
References: <20050201190957.GA8446@opteron.random>
	<20050201200227.21318.1114589713.divmod.quotient.93@ohm>
	<20050202024840.GE8446@opteron.random>
Message-ID: <20050202032320.GF8446@opteron.random>

On Wed, Feb 02, 2005 at 03:48:40AM +0100, Andrea Arcangeli wrote:
> rendering if I do something like tags.cached(..)[webform.renderForms()],
> I'm going to try it in a few minutes ;). If I can optimize the forms
> with this cache it'll be great.

Works great indeed ;). In the first form where I tested it, the
rendering time improved from 263msec, to 145msec. In some other form
with huge RequiredChoice this should be even more dramatic. If we do the
same thing for the xml rendering of the headers I'll like be able to
take the time down to 40msec or less.

Still this is nothing if compared to the httprendering cache (httprender
turns the rendering down to 5msec). So I'm most certainly going to use
both httprendering for the high traffic dynamic (but temporary static)
data, and the stan cache for the forms and other bits that allows
partial caching but that have always dynamic data inside.

Here below a very small improvement over your code. This way by default
if you don't pass the lifetime parameter it means "cache forever", and
that's exactly how I'm going to use it. This conforms with the
httprender API that also cache forever with a value == 0. Plus it
microoptimizes away one gettimeofday for each rendering.

If one is skilled enough to use rebuild (I'm not yet ;), he can sure do
a _CACHE = {} too, so I expect most usages will not pass the lifetime
and they will use a "forever" cache.

BTW, if we keep using the name _CACHE for all caches it'll be easier to
find all bits we have to flush to create an API just for rebuild or
manhole, to flush all caches.

--- ./nevow/flat/flatstan.py.~1~	2005-02-02 03:51:27.000000000 +0100
+++ ./nevow/flat/flatstan.py	2005-02-02 04:06:18.000000000 +0100
@@ -233,8 +233,9 @@ def SlotSerializer(original, context):
 _CACHE = {}
 def CachedSerializer(original, context):
     cached = _CACHE.get(original.name, None)
-    life = now()-original.lifetime
-    if cached and cached[0] > life:
+    _now = now()
+    life = _now-original.lifetime
+    if cached and (cached[0] > life or not original.lifetime):
         yield cached[1]
         return
     io = StringIO()
@@ -265,7 +266,7 @@ def CachedSerializer(original, context):
  
             yield d, lambda result: ''    
     result = io.getvalue()
-    _CACHE[original.name] = (now(), result)
+    _CACHE[original.name] = (_now, result)
     yield result
 
 def ContextSerializer(original, context):

From dialtone at divmod.com  Wed Feb  2 00:56:14 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed Feb  2 00:56:25 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050202024840.GE8446@opteron.random>
Message-ID: <20050202075614.21318.1291353150.divmod.quotient.788@ohm>

On Wed, 2 Feb 2005 03:48:40 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
> Is that a separate task? One of the benefits of having cache inside the
> python VM that runs the webserver is no context switches and no inter
> process communication. So I'm not very excited about caching outside
> nevow ;)

The benefits are that it scales to multiple computers, which means a better way to distribute the load. But, as I said, it's just one of the possible backends.
 
> Ok, so it's up to me to avoid collisions, it's not like the more
> lowlevel cache where the url was picked automatically.

In weever I did a test, and I simply put this in the base class where I fill the content slot (each page is a main page which contains a content slot that is filled with the content Fragment):

t.cached(name=str(self.__class__)+IA(ctx).get('uid', ''), lifetime=10)[...]

Doing this in the main baseclass gave me caching on ALL pages with a per/user cache.
Anyway this is just an implementation problem. Nobody stops you from doing:

def myHttpCache(ctx, lifetime):
    return t.cached(name=str(url.URL.fromContext(ctx)), lifetime=lifetime)

Which will give you the same result.
 
> All my pages are using xml (except for the forms that come from
> formless), so I'd need the cache for xml templates too.
> 
> But I really liked the caching using URL, I don't want having to write
> name="something" by hand.

When I say that it won't work with xml templates I mean that you need a way to create a cached tag from the xml. This is all.

From andrea at cpushare.com  Wed Feb  2 11:12:29 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Feb  2 11:12:25 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050202075614.21318.1291353150.divmod.quotient.788@ohm>
References: <20050202024840.GE8446@opteron.random>
	<20050202075614.21318.1291353150.divmod.quotient.788@ohm>
Message-ID: <20050202181229.GB9326@opteron.random>

On Wed, Feb 02, 2005 at 07:56:14AM +0000, Valentino Volonghi wrote:
> The benefits are that it scales to multiple computers, which means a
> better way to distribute the load. But, as I said, it's just one of
> the possible backends.

For most common sites, I doubt the gain of scaling the caching could
ever be significant. There's so much memory on each system that local
caching w/o context switches and w/o interprocess communication makes
more sense IMHO. Especially if you can get to the data in almost
constant time with hashes. I get a 4/5msec total time for each page with
local caching in the httprender, it would probably get at visible
slowdown if I were to access the cache remotely through sockets.

Anyway I'm not against options, infact I'd like to keep the option
myself to use the so handy and trivial to use httprender cache ;), I'm
just prioritizing on what's is more important first ;)

> In weever I did a test, and I simply put this in the base class where
> I fill the content slot (each page is a main page which contains a
> content slot that is filled with the content Fragment):
> 
> t.cached(name=str(self.__class__)+IA(ctx).get('uid', ''), lifetime=10)[...]

Isn't that going to leak memory badly with tons of users seldom
accessing the site? At least for my usage I can't do the above or it
would risk to run my app out of memory.  lifetime isn't a timer, so
it'll never be freed.

To get automatic garbage collection one should store it in the
session, or at least attach a timer that fires indipendently if the
rendering is enabled or not.

> Doing this in the main baseclass gave me caching on ALL pages with a per/user cache.
> Anyway this is just an implementation problem. Nobody stops you from doing:
> 
> def myHttpCache(ctx, lifetime):
>     return t.cached(name=str(url.URL.fromContext(ctx)), lifetime=lifetime)
> 
> Which will give you the same result.

I'm using this only for the forms right now:

def renderCachedForms(ctx, lifetime=0, *args, **kwargs):
	return tags.cached(lifetime=lifetime,
			   name='formless-'+str(url.URL.fromContext(ctx)))[webform.renderForms(*args, **kwargs)]

It's very handy to use by just repalcing webform.renderForms() with
renderCachedForms(ctx).

> When I say that it won't work with xml templates I mean that you need
> a way to create a cached tag from the xml. This is all.

I still doubt it'll be as fast as httprender cache, but I can try.

It has taken me minutes to enable httprender caching in the whole http
site, so I tend to consider that API more handy, and peformance should
be a bit higher too. So I don't see much point to use the stan cache in
order to cache whole documents when the other lowlevel cache can be used
in the rend.Page.

From andrea at cpushare.com  Wed Feb  2 11:25:19 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Feb  2 11:25:14 2005
Subject: [Twisted-web] Re: html cache with timeout
In-Reply-To: <20050202032122.GI1223@perpetual.moxn.net>
References: <20050201190957.GA8446@opteron.random>
	<20050201200227.21318.1114589713.divmod.quotient.93@ohm>
	<20050202024840.GE8446@opteron.random>
	<20050202032122.GI1223@perpetual.moxn.net>
Message-ID: <20050202182519.GC9326@opteron.random>

On Tue, Feb 01, 2005 at 10:21:22PM -0500, Alex Levy wrote:
> I think the aim should be to make this caching feature sufficiently useful
> on its own, while being sufficiently extensible to allow people to do what
> they want with it. It'd be nice to have the option of using memcached, or an
> in-process cache, or... well, you get the idea.
> 
> I liked Matt's idea of storing something in the context, like an
> ICacheManager. Of course, I should disclose I liked the idea because I'd
> planned on the same thing for Payago. :)

Sure, I'm not against options.

> Of course, I think caching is one of those problems that will always be very
> site-specific, and any implementation that involves modifying the Page class
> is going to be either too general-purpose to be useful, or too invasive to
> be stable all the time, for all projects. Your httprender patch is useful,

That's why it can be enabled on a page-by-page basis. And I get 100%
caching of the whole http site with the pure cache in rend.Page and it
has taken me minutes to enable it and now it runs at 200req/sec instead
of 7req/sec. If I change it, I will get no benefit, the API will be more
complex, and I only risk to run slower.

All forms I have are under ssl, for the ssl part I could pratically
cache nothing with that cache and I need the more finegrined one (that I
already successfully enabled on all forms but one that is so dynamic
that I can't cache it even with the stan cache, but luckily it's the one
for the account registration, so it's sure not high traffic).

If you could give me a way to use the finegrined cache to cache a whole
xml page, then I could benchmark the difference and evaluate if perhaps
I should take the pain of using the more complex less ideal API for the
http part just to reduce the nevow complexity and to avoid changing
rend.Page. I never use loader.stan for the http part (and that's the
part I can easily benchmark since it has no guard and no ssl).

> but probably better placed in a subclass.

That would probably duplicate code, so I don't think it's ideal, even if
it would save you a check on self.cacheTimeout per rendering if you
don't use it.

From dialtone at divmod.com  Wed Feb  2 11:35:30 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed Feb  2 11:35:31 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050202181229.GB9326@opteron.random>
Message-ID: <20050202183530.21318.2096369544.divmod.quotient.1360@ohm>

On Wed, 2 Feb 2005 19:12:29 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
> > t.cached(name=str(self.__class__)+IA(ctx).get('uid', ''), lifetime=10)[...]
> 
> Isn't that going to leak memory badly with tons of users seldom
> accessing the site? At least for my usage I can't do the above or it
> would risk to run my app out of memory.  lifetime isn't a timer, so
> it'll never be freed.

Since you are the one that is setting the cache this is actually not a problem at all. You can do

isLogged = IA(ctx).get('uid', None)
t.cached(name=str(self.__class__)+('1','0')[isLogged == False], lifetime=10)[..]

This won't leak anything except for logged/not logged users which is what you want.

Now it should be clear what are the advantages of being able to set the name yourself :).
 
> To get automatic garbage collection one should store it in the
> session, or at least attach a timer that fires indipendently if the
> rendering is enabled or not.

Just running the same thing that expires the sessions is enough. It's 5 lines of code or something like that, of course this should be left to the cache manager implementation.

> I'm using this only for the forms right now:
> 
> def renderCachedForms(ctx, lifetime=0, *args, **kwargs):
> 	return tags.cached(lifetime=lifetime,
> 			   name='formless-'+str(url.URL.fromContext(ctx)))[webform.renderForms(*args, **kwargs)]
> 
> It's very handy to use by just repalcing webform.renderForms() with
> renderCachedForms(ctx).

I think you can cache the result of self.docFactory.load() in the same way you put t.cached() in loader.stan()

> I still doubt it'll be as fast as httprender cache, but I can try.

from my tests it shouldn't be that slower. But  you do over 200 req/sec so it can be different.
 
> It has taken me minutes to enable httprender caching in the whole http
> site, so I tend to consider that API more handy, and peformance should
> be a bit higher too. So I don't see much point to use the stan cache in
> order to cache whole documents when the other lowlevel cache can be used
> in the rend.Page.

With this it should take a lot less. 

From andrea at cpushare.com  Wed Feb  2 12:03:47 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Feb  2 12:08:12 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050202183530.21318.2096369544.divmod.quotient.1360@ohm>
References: <20050202181229.GB9326@opteron.random>
	<20050202183530.21318.2096369544.divmod.quotient.1360@ohm>
Message-ID: <20050202190347.GA8406@opteron.random>

On Wed, Feb 02, 2005 at 06:35:30PM +0000, Valentino Volonghi wrote:
> I think you can cache the result of self.docFactory.load() in the same way you put t.cached() in loader.stan()

I'd certainly need to cache the xml fragments.

I've code like this:

class xx_class(rend.Fragment):
	docFactory = loaders.xmlfile('xxx.xml', XMLDIR, ignoreDocType = True)

I'd need to cache the output of the above.

It's not exactly clear to me how to do that with the stan cache, could
you make an example (or if you already did it in weever let me know and
I'll have a look).

If I can use the stan cache for the above, then I can use it for the
rend.Page too, and I can benchmark if there's any difference.

thanks!

From dialtone at divmod.com  Wed Feb  2 17:13:10 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed Feb  2 17:13:17 2005
Subject: [Twisted-web] html cache with timeout
In-Reply-To: <20050202190347.GA8406@opteron.random>
Message-ID: <20050203001310.21318.527566406.divmod.quotient.1640@ohm>

On Wed, 2 Feb 2005 20:03:47 +0100, Andrea Arcangeli <andrea@cpushare.com> wrote:
> I'd certainly need to cache the xml fragments.
> 
> I've code like this:
> 
> class xx_class(rend.Fragment):
> 	docFactory = loaders.xmlfile('xxx.xml', XMLDIR, ignoreDocType = True)
> 
> I'd need to cache the output of the above.
> 
> It's not exactly clear to me how to do that with the stan cache, could
> you make an example (or if you already did it in weever let me know and
> I'll have a look).

http://svn.berlios.de/viewcvs/weever/branches/new-db/src/web/main.py?rev=167&view=markup

Here it is.
Search for the render_content method inside the MasterPage class.

It is like this:

    def render_content(self, ctx, data):
        ct = t.cached(name=str(self.__class__), lifetime=10)[self.content(self.args, data[FIRST_POST])]
        ctx.tag.fillSlots('content', ct)
        return ctx.tag

I already know that using self.__class__ as a name is not enough, but that was just a test and I already removed it until it is merged in nevow trunk.

From jbauer at rubic.com  Fri Feb  4 10:56:21 2005
From: jbauer at rubic.com (Jeff Bauer)
Date: Fri Feb  4 10:56:53 2005
Subject: [Twisted-web] Twisted Web with SSL?
Message-ID: <4203B745.1020308@rubic.com>

I've looked for information about implmenting a Twisted
web server with SSL, but came up short.  A quick scan
of mail on this list for the past year doesn't have
any discussion about SSL, or I may have just overlooked
it.

David Mertz's Linux Zone article, which is otherwise
complimentary, doesn't appear too encouraging:

http://gnosis.cx/publish/programming/twisted_4.html

"Twisted does come with an SSL framework; however, as
with most things in Twisted, exactly how it might work
is poorly documented -- I tried downloading two likely
support packages to try to get the Twisted v.1.0.6 script
test_ssl.py to work (see Resources). I am sure that with
some version of the right 3rd party libraries (and some
Twisted version) -- and perhaps after corrections to
erroneous examples -- it is possible to use SSL with
Twisted, but I have not done so for this article."

-Jeff

From foom at fuhm.net  Fri Feb  4 12:58:47 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Feb  4 12:58:56 2005
Subject: [Twisted-web] Twisted Web with SSL?
In-Reply-To: <4203B745.1020308@rubic.com>
References: <4203B745.1020308@rubic.com>
Message-ID: <2E5E7F6D-76E7-11D9-A757-000A95A50FB2@fuhm.net>

On Feb 4, 2005, at 12:56 PM, Jeff Bauer wrote:
> I've looked for information about implmenting a Twisted
> web server with SSL, but came up short.  A quick scan
> of mail on this list for the past year doesn't have
> any discussion about SSL, or I may have just overlooked
> it.

There's probably no discussion, because it just works.

# Standard startup procedure for HTTP port (you need to have setup site 
above, of course)
application = service.Application("web")
i = internet.TCPServer(8080, site)
i.setServiceParent(service.IServiceCollection(application))

# Add two more lines to start a HTTPs port. (you'll need to have made 
your ssl key/crt beforehand)
i = internet.SSLServer(8081, site, 
ssl.DefaultOpenSSLContextFactory("ssl.key", "ssl.crt"))
i.setServiceParent(service.IServiceCollection(application))

James


From matt at pollenation.net  Sat Feb  5 02:29:25 2005
From: matt at pollenation.net (Matt Goodall)
Date: Sat Feb  5 02:29:32 2005
Subject: [Twisted-web] Twisted Web with SSL?
In-Reply-To: <2E5E7F6D-76E7-11D9-A757-000A95A50FB2@fuhm.net>
References: <4203B745.1020308@rubic.com>
	<2E5E7F6D-76E7-11D9-A757-000A95A50FB2@fuhm.net>
Message-ID: <1107595765.24060.15.camel@localhost.localdomain>

On Fri, 2005-02-04 at 14:58 -0500, James Y Knight wrote:
> On Feb 4, 2005, at 12:56 PM, Jeff Bauer wrote:
> > I've looked for information about implmenting a Twisted
> > web server with SSL, but came up short.  A quick scan
> > of mail on this list for the past year doesn't have
> > any discussion about SSL, or I may have just overlooked
> > it.
> 
> There's probably no discussion, because it just works.
> 
> # Standard startup procedure for HTTP port (you need to have setup site 
> above, of course)
> application = service.Application("web")
> i = internet.TCPServer(8080, site)
> i.setServiceParent(service.IServiceCollection(application))
> 
> # Add two more lines to start a HTTPs port. (you'll need to have made 
> your ssl key/crt beforehand)
> i = internet.SSLServer(8081, site, 
> ssl.DefaultOpenSSLContextFactory("ssl.key", "ssl.crt"))
> i.setServiceParent(service.IServiceCollection(application))


There's also twisted.application.strports which, in my opinion, makes
this even easier:


# HTTP on port 8080
s = strports.service('tcp:8080', site)
s.setServiceParent(application)
# HTTPS on port 8443
s = strports.service('ssl:8443:privateKey=ssl.key:certKey=ssl.crt',
site)
s.setServiceParent(application)


Cheers, Matt


From andrea at cpushare.com  Sat Feb  5 08:29:56 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat Feb  5 08:30:00 2005
Subject: [Twisted-web] Twisted Web with SSL?
In-Reply-To: <2E5E7F6D-76E7-11D9-A757-000A95A50FB2@fuhm.net>
References: <4203B745.1020308@rubic.com>
	<2E5E7F6D-76E7-11D9-A757-000A95A50FB2@fuhm.net>
Message-ID: <20050205152955.GB5747@opteron.random>

On Fri, Feb 04, 2005 at 02:58:47PM -0500, James Y Knight wrote:
> # Add two more lines to start a HTTPs port. (you'll need to have made 
> your ssl key/crt beforehand)

Here an example of this (which is the only non trivial bit):

		from twisted.internet import ssl
		from OpenSSL import SSL
		ssl_context = ssl.DefaultOpenSSLContextFactory(config.get('https_privkey'),
							       config.get('https_cert'),
							       SSL.SSLv23_METHOD,)
		internet.SSLServer(int(config.get('https_port')), nevow_site,
				   ssl_context,
				   backlog = int(config.get('https_backlog')),
				   interface = config.get('https_interface'),).setServiceParent(service_collection)

From jbauer at rubic.com  Sun Feb  6 06:49:42 2005
From: jbauer at rubic.com (Jeff Bauer)
Date: Sun Feb  6 06:50:16 2005
Subject: [Twisted-web] Re: Twisted Web with SSL?
Message-ID: <42062076.7030106@rubic.com>

Thanks for your responses.  I also found some
information on Mike Fletcher's blog:

   http://blog.vrplumber.com/356

Jeff Bauer
Rubicon, Inc.

From snacktime at gmail.com  Tue Feb  8 16:45:06 2005
From: snacktime at gmail.com (snacktime)
Date: Tue Feb  8 16:45:39 2005
Subject: [Twisted-web] HTTP Post with getPage
Message-ID: <1f060c4c05020815454a32c7cf@mail.gmail.com>

Is there a way to get at the HTTPClientFactory instance variables
using getPage, or do I need to create my own factory that inherits
HTTPClientFactory to get at them?  

Chris

From snacktime at gmail.com  Tue Feb  8 23:25:20 2005
From: snacktime at gmail.com (snacktime)
Date: Tue Feb  8 23:25:53 2005
Subject: [Twisted-web] HTTPClientFactory questions
Message-ID: <1f060c4c05020822255ee6c412@mail.gmail.com>

I'm trying to figure out the best way to catch all the different
possible errors when using HTTPClientFactory and am kind of stuck.

First, what is the best way to catch errors before or during the
connection, such as connection time outs or dns lookup errors? If a
response isn't sent to the client, status,version, and message will
never get set.  I need the status code for all responses, but I need a
way to catch all errors that don't set the status so I know if status
is available or not.

I tried inheriting HTTPClientFactory and providing my own
clientConnectionFailed() method, and that's when I ran into another
issue.  I happened to try connecting to a host that gave me an ssl
handshake failure, and an exception was caught in twisted.internet.tcp
and printed.  However it didn't register an errback but went ahead
with the callback (complete code is below).


from twisted.internet import reactor,ssl
from twisted.web.client import HTTPClientFactory
import sys

class Test:

  def Start(self):
      self.factory = HTTPClientFactory('https://www.he.net',method='GET')
      contextFactory = ssl.ClientContextFactory()
      reactor.connectSSL('www.he.net', 443, self.factory, contextFactory)
      self.factory.deferred.addCallback(self.Success)
      self.factory.deferred.addErrback(self.Error)
      reactor.run()

  def Success(self,data):
    print "Success: %s " % data
    reactor.stop()

  def Error(self,data):
     print "Error: %s " % data
     reactor.stop()


c = Test()
c.Start()

From andrea at cpushare.com  Wed Feb  9 18:59:00 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Feb  9 18:59:04 2005
Subject: [Twisted-web] caching patch updated
Message-ID: <20050210015900.GK18573@opteron.random>

Hello everyone,

This is an updated version of the caching patch against current SVN.
This is mostly code from the Nevow-caching branch from dialtone with the
addition of a cacheTimeout logic on the whole rendering that I use for
the whole non-user dependent dynamic pages of my site. I also use
dialtone's stan cache for some fragment (not all unfortunately) and that
was a significant speedup but I still need the other more aggressive
caching in the Page class.

Please let me know if you see any bug in this code, thanks! To me it
looks useful enough to be merged in trunk but that's just my humble
opinion.

This code allows >200req per second to be served for dynamic but mostly
static data. It doesn't max out a 100mbit yet with <5k pages, but it
greatly exceeds the bandwidth of a 10mbit.

Index: Nevow/nevow/tags.py
===================================================================
--- Nevow/nevow/tags.py	(revision 1185)
+++ Nevow/nevow/tags.py	(working copy)
@@ -25,7 +25,7 @@
 """
 
 
-from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata
+from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata, cached
 
 
 comment = CommentProto()
@@ -62,7 +62,9 @@
 def inlineJS(s):
     return script(type="text/javascript", language="JavaScript")[xml('\n//<![CDATA[\n%s\n//]]>\n' % s)]
 
-__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object', '_map', 'drange', 'Tag', 'directive', 'xml', 'raw', 'slot', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
+__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object',
+                  '_map', 'drange', 'Tag', 'directive', 'xml', 'raw',
+                  'slot', 'cached', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
 
 
 ########################
Index: Nevow/nevow/__init__.py
===================================================================
--- Nevow/nevow/__init__.py	(revision 1185)
+++ Nevow/nevow/__init__.py	(working copy)
@@ -183,6 +183,7 @@
 nevow.flat.flatstan.RendererSerializer            nevow.inevow.IRenderer
 nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive
 nevow.flat.flatstan.SlotSerializer                nevow.stan.slot
+nevow.flat.flatstan.CachedSerializer              nevow.stan.cached 
 nevow.flat.flatstan.ContextSerializer             nevow.context.WovenContext
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.Deferred
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.DeferredList
Index: Nevow/nevow/flat/flatstan.py
===================================================================
--- Nevow/nevow/flat/flatstan.py	(revision 1185)
+++ Nevow/nevow/flat/flatstan.py	(working copy)
@@ -9,10 +9,14 @@
 from nevow import util
 from nevow.stan import Proto, Tag, xml, directive, Unset, invisible
 from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData
-from nevow.flat import precompile, serialize
+from nevow.flat import precompile, serialize, iterflatten
 from nevow.accessors import convertToData
 from nevow.context import WovenContext
 
+from time import time as now
+from cStringIO import StringIO
+from twisted.internet import defer
+
 allowSingleton = ('img', 'br', 'hr', 'base', 'meta', 'link', 'param', 'area',
                   'input', 'col', 'basefont', 'isindex', 'frame')
 
@@ -226,6 +230,45 @@
         return serialize(original.default, context)
     return serialize(data, context)
 
+_CACHE = {}
+def CachedSerializer(original, context):
+    cached = _CACHE.get(original.name, None)
+    _now = now()
+    life = _now-original.lifetime
+    if cached and (cached[0] > life or not original.lifetime):
+        yield cached[1]
+        return
+    io = StringIO()
+    for child in iterflatten(original.children, context, io.write,
+                             lambda item: True):
+        if isinstance(child, tuple):
+            childDeferred, childReturner = child
+ 
+            d = defer.Deferred() ## A new deferred for the outer loop, whose result
+            ## we don't care about, because we don't want the outer loop to write
+            ## anything when this deferred fires -- only when the entire for loop
+            ## has completed and we have all the "children" flattened
+ 
+            def innerDeferredResultAvailable(result):
+                childReturner(result) ## Cause the inner iterflatten to continue
+                d.callback('') ## Cause the outer iterflatten to continue
+                return ''
+ 
+            childDeferred.addCallback(innerDeferredResultAvailable)
+ 
+            ## Make the outer loop wait on our new deferred.
+            ## We call the new deferred back with ''
+            ## Which will cause the outer loop to write '' to the request,
+            ## which doesn't matter. It will then call our "returner",
+            ## which is just the noop lambda below, because we don't care
+            ## about the return result of the new deferred, which is just
+            ## ''
+ 
+            yield d, lambda result: ''    
+    result = io.getvalue()
+    _CACHE[original.name] = (_now, result)
+    yield result
+
 def ContextSerializer(original, context):
     originalContext = original.clone(deep=False)
     originalContext.precompile = context and context.precompile or False
Index: Nevow/nevow/stan.py
===================================================================
--- Nevow/nevow/stan.py	(revision 1185)
+++ Nevow/nevow/stan.py	(working copy)
@@ -119,8 +119,33 @@
         """
         raise NotImplementedError, "Stan slot instances are not iterable."
 
+class cached(object):
+    """Marker for cached content
+    """
+    __slots__ = ['name', 'children', 'lifetime']
 
+    def __init__(self, name, lifetime=0):
+        self.name = name
+        self.children = []
+        self.lifetime = lifetime
 
+    def __repr__(self):
+        return "cached('%s','%s')" % self.name, self.lifetime
+
+    def __getitem__(self, children):
+        """cached content is what is being cached
+        """
+        if not isinstance(children, (list, tuple)):
+            children = [children]
+        self.children.extend(children)
+        return self
+
+    def __iter__(self):
+        """Prevent an infinite loop if someone tries to do
+            for x in cached('foo'):
+        """
+        raise NotImplementedError, "Stan slot instances are not iterable."
+
 class Tag(object):
     """Tag instances represent XML tags with a tag name, attributes,
     and children. Tag instances can be constructed using the Prototype
Index: Nevow/nevow/rend.py
===================================================================
--- Nevow/nevow/rend.py	(revision 1185)
+++ Nevow/nevow/rend.py	(working copy)
@@ -30,6 +30,7 @@
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -374,6 +375,7 @@
             self.children = {}
         self.children[name] = child
     
+_CACHE = {}
 
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
@@ -384,12 +386,48 @@
 
     buffered = False
 
+    cacheTimeout = None # 0 means cache forever, >0 sets the seconds of caching
+    __lastCacheRendering = 0 # this should not be touched by the parent class
+
     beforeRender = None
     afterRender = None
     addSlash = None
 
     flattenFactory = flat.flattenFactory
 
+    def hasCache(self, ctx):
+        if self.cacheTimeout is None:
+            return None
+
+        _now = now() # run gettimeofday only once
+        timeout = _now > self.__lastCacheRendering + self.cacheTimeout and \
+                  self.cacheTimeout > 0
+        c = self.lookupCache(ctx)
+        if timeout or c is None:
+            self.__lastCacheRendering = _now # stop other renders
+            from twisted.internet.defer import Deferred
+            d = Deferred()
+            self.storeCache(ctx, d)
+            # force only this rendering, others will wait the deferred
+            c = None
+        return c
+    def chainDeferredCache(self, ctx, d):
+        if self.cacheTimeout is None:
+            return d
+
+        from twisted.internet.defer import Deferred
+        c = self.lookupCache(ctx)
+        if isinstance(c, Deferred):
+            # we're the thread that went ahead to refresh the cache
+            d.chainDeferred(c)
+        return d
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+    def storeCache(self, ctx, c):
+        _CACHE[self.cacheIDX(ctx)] = c
+    def lookupCache(self, ctx):
+        return _CACHE.get(self.cacheIDX(ctx))
+
     def renderHTTP(self, ctx, doBefore=True):
         ## XXX request is really ctx now, change the name here
         request = inevow.IRequest(ctx)
@@ -412,11 +450,17 @@
             if self.afterRender is not None:
                 return util.maybeDeferred(self.afterRender,ctx)
 
-        if self.buffered:
+        c = self.hasCache(ctx)
+        if c:
+            return util.maybeDeferred(finishRequest).addCallback(lambda r: c)
+
+        if self.buffered or self.cacheTimeout is not None:
             io = StringIO()
             writer = io.write
             def finisher(result):
-                request.write(io.getvalue())
+                c = io.getvalue()
+                self.storeCache(ctx, c)
+                request.write(c)
                 return util.maybeDeferred(finishRequest).addCallback(lambda r: result)
         else:
             writer = request.write
@@ -426,7 +470,7 @@
         doc = self.docFactory.load()
         ctx =  WovenContext(ctx, tags.invisible[doc])
 
-        return self.flattenFactory(doc, ctx, writer, finisher)
+        return self.chainDeferredCache(ctx, self.flattenFactory(doc, ctx, writer, finisher))
 
     def rememberStuff(self, ctx):
         Fragment.rememberStuff(self, ctx)


This last bit avoids an error at runtime, clearly getStyleSheet should
be overriden then (not stylesheet).

Index: Nevow/nevow/vhost.py
===================================================================
--- Nevow/nevow/vhost.py	(revision 1185)
+++ Nevow/nevow/vhost.py	(working copy)
@@ -19,7 +19,7 @@
 """
 
     def getStyleSheet(self):
-        return self.stylesheet
+        return VirtualHostList.stylesheet
  
     def data_hostlist(self, context, data):
         return self.nvh.hosts.keys()

From mikem at supportsoft.com  Wed Feb  9 21:41:14 2005
From: mikem at supportsoft.com (Mike Marchionna)
Date: Wed Feb  9 21:41:47 2005
Subject: [Twisted-web] Bug found 1.3.0 twisted.web.static module
Message-ID: <EAD7DA48A2628346A2CDD3E5CE596210ADBDC1@hqmail01.supportsoft.com>

This bug has occurs when a client request partial content of a
static.File resource.

 

There are three problems.

 

1)    The Content-Length header value is off by 1.  For example a
request with a Range: bytes=0-1999 would yield Content-Length of 1999
when it should actually be Content-Length: 2000.

2)    The Content-Range response header was generated incorrectly.  For
example the request with a Range: bytes=0-1999 header for a file of
100000 bytes in size would yield a Content-Range header like
Content-Range:  bytes 0-1999/1999, when it should be Content-Range:
bytes 0-1999/100000.

3)    The ASISProcessor incorrectly instantiated the File instance by
passing a registry parameter to the defaultType argument.

 

 

The diffs are as follows:

 

diff -u static.py.orig static.py

--- static.py.orig      2005-02-09 18:52:35.422310000 -0800

+++ static.py     2005-02-09 19:11:23.181906600 -0800

@@ -319,7 +319,7 @@

             return self.redirect(request)

 

         #for content-length

-        fsize = size = self.getFileSize()

+        fsize = csize = self.getFileSize()

 

         request.setHeader('accept-ranges','bytes')

 

@@ -350,20 +350,19 @@

                        "Syntactically invalid http range header!"

                 start, end = string.split(bytesrange[1],'-')

                 if start:

-                    f.seek(int(start))

+                    start = int(start)

+                    f.seek(start)

                 if end:

-                    end = int(end)

-                    size = end

+                    csize = int(end) - start + 1

                 else:

-                    end = size

+                    csize -= start

                 request.setResponseCode(http.PARTIAL_CONTENT)

-                request.setHeader('content-range',"bytes %s-%s/%s " % (

-                    str(start), str(end), str(size)))

-                #content-length should be the actual size of the stuff
we're

-                #sending, not the full size of the on-server entity.

-                fsize = end - int(start)

+                request.setHeader('content-range',"bytes %s-%s/%s " % \

+                                  (start, end, fsize))

+            #content-length should be the actual size of the stuff
we're

+            #sending, not the full size of the on-server entity.

+            request.setHeader('content-length', str(csize))

 

-            request.setHeader('content-length', str(fsize))

         except:

             traceback.print_exc(file=log.logfile)

 

@@ -371,7 +370,7 @@

             return ''

 

         # return data

-        FileTransfer(f, size, request)

+        FileTransfer(f, csize, request)

         # and make sure the connection doesn't get closed

         return server.NOT_DONE_YET

 

@@ -422,17 +421,16 @@

         self.file = file

         self.size = size

         self.request = request

-        self.written = self.file.tell()

         request.registerProducer(self, 0)

 

     def resumeProducing(self):

         if not self.request:

             return

-        data = self.file.read(min(abstract.FileDescriptor.bufferSize,
self.size - self.written))

+        data = self.file.read(min(abstract.FileDescriptor.bufferSize,
self.size))

         if data:

-            self.written += len(data)

             self.request.write(data)

-        if self.file.tell() == self.size:

+            self.size -= len(data)

+        if self.size <= 0:

             self.request.unregisterProducer()

             self.request.finish()

             self.request = None

@@ -473,5 +471,5 @@

 

     def render(self, request):

         request.startedWriting = 1

-        res = static.File(self.path, self.registry)

+        res = static.File(self.path, registry=self.registry)

         return res.render(request)

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20050209/25035019/attachment-0001.htm
From andrea at cpushare.com  Wed Feb  9 22:47:51 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed Feb  9 22:47:56 2005
Subject: [Twisted-web] mailman with twisted
Message-ID: <20050210054751.GL18573@opteron.random>

I'm trying to setup mailman, but I had not much luck so far.

I'm testing it like this:

import pwd
uid = pwd.getpwnam('andrea')[2]
gid = int(file('/etc/mailman/mailman.cgi-gid').read())

from twisted.application import service
application = service.Application('mailman', uid=uid, gid=gid)

from twisted.application import internet, service

s = service.MultiService()

from twisted.web import server, distrib, twcgi, static
from twisted.spread import pb

r = twcgi.CGIDirectory('/usr/lib/mailman/cgi-bin')
r.putChild('pipermail', static.File('/var/lib/mailman/archives/public'))

site = server.Site(r)

internet.UNIXServer('/var/lib/mailman/.twistd-web-pb',
		    pb.PBServerFactory(distrib.ResourcePublisher(site))).setServiceParent(s)

s.setServiceParent(service.IServiceCollection(application))


However the above isn't good, the socket is created word writeable, and
it's owned by root, the setuid is executed later on (which is a good
thing normally to bind ports <1024, but not in this case). And if the file is
already present I get the below problem. Why can't simply bind the device
without recreating it? I don't recall any bind(2) limitation in the kernel that
forces to recreate the device. At least there should be an option to auto-delete it.

opteron:/home/andrea/cpushare/server/cpushare/cpushare/web # twistd -r poll -noy mailman.tac
2005/02/10 06:45 CET [-] Log opened.
2005/02/10 06:45 CET [-] twistd SVN-trunk (/home/andrea/bin/i686/python-20050207/bin/python 2.4.1) starting up
2005/02/10 06:45 CET [-] reactor class: twisted.internet.pollreactor.PollReactor
2005/02/10 06:45 CET [-] Loading mailman.tac...
2005/02/10 06:45 CET [-] /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/web/woven/interfaces.py:60: twisted.python.components.ComponentsDeprecationWarning: Please don't use __adapt__ on Interface subclasses
2005/02/10 06:45 CET [-] /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/web/woven/interfaces.py:135: twisted.python.components.ComponentsDeprecationWarning: Please don't use __adapt__ on Interface subclasses
2005/02/10 06:45 CET [-] Loaded.
2005/02/10 06:45 CET [-] twisted.spread.pb.PBServerFactory starting on "'/var/lib/mailman/.twistd-web-pb'"
2005/02/10 06:45 CET [-] Starting factory <twisted.spread.pb.PBServerFactory instance at 0x55e36bcc>
2005/02/10 06:45 CET [-] Traceback (most recent call last):
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python/bin/twistd", line 25, in ?
2005/02/10 06:45 CET [-]     run()
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/scripts/twistd.py", line 171, in run
2005/02/10 06:45 CET [-]     app.run(runApp, ServerOptions)
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/application/app.py", line 221, in run
2005/02/10 06:45 CET [-]     runApp(config)
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/scripts/twistd.py", line 162, in runApp
2005/02/10 06:45 CET [-]     startApplication(config, application)
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/scripts/twistd.py", line 146, in startApplication
2005/02/10 06:45 CET [-]     service.IService(application).privilegedStartService()
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/application/service.py", line 194, in privilegedStartService
2005/02/10 06:45 CET [-]     service.privilegedStartService()
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/application/service.py", line 194, in privilegedStartService
2005/02/10 06:45 CET [-]     service.privilegedStartService()
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/application/internet.py", line 65, in privilegedStartService
2005/02/10 06:45 CET [-]     self._port = self._getPort()
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/application/internet.py", line 82, in _getPort
2005/02/10 06:45 CET [-]     return getattr(reactor, 'listen'+self.method)(*self.args, **self.kwargs)
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/internet/posixbase.py", line 322, in listenUNIX
2005/02/10 06:45 CET [-]     p.startListening()
2005/02/10 06:45 CET [-]   File "/home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/internet/unix.py", line 85, in startListening
2005/02/10 06:45 CET [-]     raise CannotListenError, (None, self.port, le)
2005/02/10 06:45 CET [-] twisted.internet.error.CannotListenError: Couldn't listen on any:/var/lib/mailman/.twistd-web-pb: (98, 'Address already in use').

Second worse problem is in pb, when I connect the nevow server to this
remote server with this:

class something(rend.Page):
[..]
	from twisted.web import server, distrib, twcgi, static
	child_mailman = distrib.ResourceSubscription('unix', '/var/lib/mailman/.twistd-web-pb')
[..]

When I try to fetch /mailman I get this:

2005/02/10 05:52 CET [Broker,client] [Failure instance: Traceback: twisted.spread.jelly.InsecureJelly, Class not allowed for instance: twisted.internet.defer.Deferred <Deferred at 0x561eed6c>
        /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/spread/pb.py:855:_sendMessage
        /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/spread/pb.py:809:serialize
        /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/spread/jelly.py:838:jelly
        /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/spread/jelly.py:444:jelly
        /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/spread/jelly.py:400:jelly
        /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/spread/flavors.py:304:jellyFor
        /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/spread/jelly.py:448:jelly
        /home/andrea/bin/i686/python-20050207/lib/python2.4/site-packages/twisted/spread/jelly.py:473:jelly
        ]
2005/02/10 06:08 CET [Broker,client] could not connect to distributed web service: connection dropped
2005/02/10 06:08 CET [Broker,client] Stopping factory <twisted.spread.pb.PBClientFactory instance at 0x561ffa6c>

The only document I found about it, is this:

http://twistedmatrix.com/pipermail/twisted-web/2004-July/000555.html

The absurd thing is that the test programs works fine (test_distrib.py and
silly-web.py both works).

I'm lost... ;) (last resort is always to run apache on port 8080 just
for mailman, but I'd rather avoid opening two webservers in the
firewall)

This problem must be already solved somehow since twistedmatrix.com has
it working.

I'm running SVN trunk for everything, except python that is the 2.4
branch.

Thanks in advance for any help.

From andrea at cpushare.com  Thu Feb 10 12:13:14 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Feb 10 12:13:18 2005
Subject: [Twisted-web] mailman with twisted
In-Reply-To: <20050210054751.GL18573@opteron.random>
References: <20050210054751.GL18573@opteron.random>
Message-ID: <20050210191314.GO18573@opteron.random>

If somebody has answered please add me in CC, I've seen no reply in the
list ;).

I'm still very stuck on this. At least everything else has been
absolutely trivial in the administration side, this even would be
trivial if I would giveup and use apache on 8080 ;).

I'll try to join some IRC channel too in hope of somebody willing to
help setting up twisted+mailman.

Thanks!

From tv at twistedmatrix.com  Thu Feb 10 13:35:42 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Feb 10 13:36:17 2005
Subject: [Twisted-web] mailman with twisted
In-Reply-To: <20050210054751.GL18573@opteron.random>
References: <20050210054751.GL18573@opteron.random>
Message-ID: <420BC59E.2050002@twistedmatrix.com>

Andrea Arcangeli wrote:
> internet.UNIXServer('/var/lib/mailman/.twistd-web-pb',
> 		    pb.PBServerFactory(distrib.ResourcePublisher(site))).setServiceParent(s)

> However the above isn't good, the socket is created word writeable, and
> it's owned by root, the setuid is executed later on (which is a good
> thing normally to bind ports <1024, but not in this case).

Pass in a different mode.

def listenUNIX(self, address, factory, backlog=5, mode=0666, wantPID=0):

UNIXServer should accept the same args.

 > And if the file is
> already present I get the below problem. Why can't simply bind the device
> without recreating it? I don't recall any bind(2) limitation in the kernel that
> forces to recreate the device.

If a file by given name exists, bind(2) returns -1, EADDRINUSE.
Twisted is just passing that straight-through to you.

 > At least there should be an option to auto-delete it.

Maybe, but that option would need to default to False.
I consider to be too risky to automate in a library. If another process
is listening on that socket, removing it just hides that fact.

Of course, if you really want it, you could just run

try:
     os.unlink(sockName)
except OSError, e:
     if e.errno == errno.ENOENT:
         pass
     else:
         raise

before binding.

From tv at twistedmatrix.com  Thu Feb 10 14:42:53 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Feb 10 14:43:29 2005
Subject: [Twisted-web] HTTPClientFactory questions
In-Reply-To: <1f060c4c05020822255ee6c412@mail.gmail.com>
References: <1f060c4c05020822255ee6c412@mail.gmail.com>
Message-ID: <420BD55D.6010201@twistedmatrix.com>

snacktime wrote:
> I'm trying to figure out the best way to catch all the different
> possible errors when using HTTPClientFactory and am kind of stuck.
> 
> First, what is the best way to catch errors before or during the
> connection, such as connection time outs or dns lookup errors? If a
> response isn't sent to the client, status,version, and message will
> never get set.  I need the status code for all responses, but I need a
> way to catch all errors that don't set the status so I know if status
> is available or not.
> 
> I tried inheriting HTTPClientFactory and providing my own
> clientConnectionFailed() method, and that's when I ran into another
> issue.  I happened to try connecting to a host that gave me an ssl
> handshake failure, and an exception was caught in twisted.internet.tcp
> and printed.  However it didn't register an errback but went ahead
> with the callback (complete code is below).

The error is server not supporting SSL3.0.
HTTPClientFactory.connectionLost is called.
HTTPPageGetter.connectionLost is called.
   http.HTTPClient.connectionLost is called.
     http.HTTPClient.handleResponseEnd is called.
     HTTPPageGetter.handleResponse is called with "".
       self.failed is 0
       self.length is None
       HTTPClientFactory.page is called with ""
       HTTPPageGetter.transport.loseConnection is called.
     HTTPClientFactory.noPage is called.

Hmmph, seems like that case should show up as an error and not a
successful 0-length page.

Please see these for more:

http://twistedmatrix.com/bugs/issue883
http://twistedmatrix.com/bugs/issue882

From tv at twistedmatrix.com  Thu Feb 10 14:57:10 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Feb 10 14:57:43 2005
Subject: [Twisted-web] Bug found 1.3.0 twisted.web.static module
In-Reply-To: <EAD7DA48A2628346A2CDD3E5CE596210ADBDC1@hqmail01.supportsoft.com>
References: <EAD7DA48A2628346A2CDD3E5CE596210ADBDC1@hqmail01.supportsoft.com>
Message-ID: <420BD8B6.3020200@twistedmatrix.com>

Mike Marchionna wrote:
> 1)    The Content-Length header value is off by 1.  For example a
> request with a Range: bytes=0-1999 would yield Content-Length of 1999
> when it should actually be Content-Length: 2000.
> 
> 2)    The Content-Range response header was generated incorrectly.  For
> example the request with a Range: bytes=0-1999 header for a file of
> 100000 bytes in size would yield a Content-Range header like
> Content-Range:  bytes 0-1999/1999, when it should be Content-Range:
> bytes 0-1999/100000.
 >
 > 3)    The ASISProcessor incorrectly instantiated the File instance by
 > passing a registry parameter to the defaultType argument.

1) and 2)
------------------------------------------------------------------------
r12615 | foom | 2004-11-30 01:23:40 +0200 (Tue, 30 Nov 2004) | 2 lines

remove range support because it's horribly broken.

------------------------------------------------------------------------


3)
------------------------------------------------------------------------
r12816 | mesozoic | 2005-01-03 01:33:41 +0200 (Mon, 03 Jan 2005) | 2 lines

Make sure ASISProcessor actually works.

------------------------------------------------------------------------

From andrea at cpushare.com  Thu Feb 10 15:14:45 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Feb 10 15:14:51 2005
Subject: [Twisted-web] mailman with twisted
In-Reply-To: <420BC59E.2050002@twistedmatrix.com>
References: <20050210054751.GL18573@opteron.random>
	<420BC59E.2050002@twistedmatrix.com>
Message-ID: <20050210221445.GY18573@opteron.random>

On Thu, Feb 10, 2005 at 10:35:42PM +0200, Tommi Virtanen wrote:
> Pass in a different mode.
> 
> def listenUNIX(self, address, factory, backlog=5, mode=0666, wantPID=0):
> 
> UNIXServer should accept the same args.

Ok fine, the mode should be enough because I'm lucky and the directory
has g+s.

> If a file by given name exists, bind(2) returns -1, EADDRINUSE.
> Twisted is just passing that straight-through to you.

29253 bind(5, {sa_family=AF_FILE,
path="/var/lib/mailman/.twistd-web-pb"}, 33) = -1 EADDRINUSE (Address
already in use)

Ok my bad ;) it was a kernel issue here.

		err = path_lookup(sunaddr->sun_path, LOOKUP_PARENT, &nd);
		if (err)
			goto out_mknod_parent;
[..]
out_mknod_parent:
	if (err==-EEXIST)
		err=-EADDRINUSE;

I didn't think the check should have been made on the existence of the
dentry, but only on the fact that some other task was actively listening
to such socket already.

It would be easy to relax this restrictive API (perhaps with a check
that the process uid is the same as the socket uid) and then twisted
would just work fine even if it doesn't delete the file but it would
probably break the standard API.

I can workaround it outside twisted easily (an fuser + rm as root before
starting the app, is sure enough ;)

So at least those two problems are clear thanks.

> > At least there should be an option to auto-delete it.
> 
> Maybe, but that option would need to default to False.

Agreed.

> I consider to be too risky to automate in a library. If another process
> is listening on that socket, removing it just hides that fact.

Correct.

> Of course, if you really want it, you could just run
> 
> try:
>     os.unlink(sockName)
> except OSError, e:
>     if e.errno == errno.ENOENT:
>         pass
>     else:
>         raise
> 
> before binding.

The equivalent of fuser before OSError would be best, fuser in this case
is the userspace equivalent of checking the unix_socket_table on the
kernel side. (except it's racy if done in userspace, but good enough to
be used to avoid the basic mistakes of deleting a socket in-use).
A connect would do the trick too (again racy but good enough), if it
returns ECONNREFUSED it means we can delete it.

About the other problem of nevow+distrib, it seems you found the right
issue on IRC, some bugfix has been forgotten here:

http://divmod.org/users/roundup.twistd/nevow/file24/nevow-distrib-2.diff
http://divmod.org/users/roundup.twistd/nevow/file25/nevow-flatstan.diff

Anyway I'm following your suggestion to use eoc instead of mailman, that
seems to be the quickest to setup and it doesn't require web
subscription, but certainly it would be still nice to know the solution
of nevow+mailman just as an exercise ;). I guess reverse proxying as you
suggested on irc would have worked much better than distrib ;)

there are apparently 5 pending things missing in nevow trunk:

1) the above distrib fix
2) the static.File fix posted here for twisted that affects nevow too
3) dialtone's tags.cached
4) dialtone's rend.Page cache improved with cacheTimeout logic.
5) minor non interesting runtime fix in vhost.py

The latter 4 entries are appened here (I hope I didn't add typos while
merging the static.File fix by hand, the mailer got it screwed in the
original submission from Mike Marchionna).

Thanks for the help!

Index: Nevow/nevow/tags.py
===================================================================
--- Nevow/nevow/tags.py	(revision 1192)
+++ Nevow/nevow/tags.py	(working copy)
@@ -25,7 +25,7 @@
 """
 
 
-from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata
+from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata, cached
 
 
 comment = CommentProto()
@@ -62,7 +62,9 @@
 def inlineJS(s):
     return script(type="text/javascript", language="JavaScript")[xml('\n//<![CDATA[\n%s\n//]]>\n' % s)]
 
-__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object', '_map', 'drange', 'Tag', 'directive', 'xml', 'raw', 'slot', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
+__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object',
+                  '_map', 'drange', 'Tag', 'directive', 'xml', 'raw',
+                  'slot', 'cached', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
 
 
 ########################
Index: Nevow/nevow/__init__.py
===================================================================
--- Nevow/nevow/__init__.py	(revision 1192)
+++ Nevow/nevow/__init__.py	(working copy)
@@ -183,6 +183,7 @@
 nevow.flat.flatstan.RendererSerializer            nevow.inevow.IRenderer
 nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive
 nevow.flat.flatstan.SlotSerializer                nevow.stan.slot
+nevow.flat.flatstan.CachedSerializer              nevow.stan.cached 
 nevow.flat.flatstan.ContextSerializer             nevow.context.WovenContext
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.Deferred
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.DeferredList
Index: Nevow/nevow/flat/flatstan.py
===================================================================
--- Nevow/nevow/flat/flatstan.py	(revision 1192)
+++ Nevow/nevow/flat/flatstan.py	(working copy)
@@ -9,10 +9,14 @@
 from nevow import util
 from nevow.stan import Proto, Tag, xml, directive, Unset, invisible
 from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData
-from nevow.flat import precompile, serialize
+from nevow.flat import precompile, serialize, iterflatten
 from nevow.accessors import convertToData
 from nevow.context import WovenContext
 
+from time import time as now
+from cStringIO import StringIO
+from twisted.internet import defer
+
 allowSingleton = ('img', 'br', 'hr', 'base', 'meta', 'link', 'param', 'area',
                   'input', 'col', 'basefont', 'isindex', 'frame')
 
@@ -226,6 +230,45 @@
         return serialize(original.default, context)
     return serialize(data, context)
 
+_CACHE = {}
+def CachedSerializer(original, context):
+    cached = _CACHE.get(original.name, None)
+    _now = now()
+    life = _now-original.lifetime
+    if cached and (cached[0] > life or not original.lifetime):
+        yield cached[1]
+        return
+    io = StringIO()
+    for child in iterflatten(original.children, context, io.write,
+                             lambda item: True):
+        if isinstance(child, tuple):
+            childDeferred, childReturner = child
+ 
+            d = defer.Deferred() ## A new deferred for the outer loop, whose result
+            ## we don't care about, because we don't want the outer loop to write
+            ## anything when this deferred fires -- only when the entire for loop
+            ## has completed and we have all the "children" flattened
+ 
+            def innerDeferredResultAvailable(result):
+                childReturner(result) ## Cause the inner iterflatten to continue
+                d.callback('') ## Cause the outer iterflatten to continue
+                return ''
+ 
+            childDeferred.addCallback(innerDeferredResultAvailable)
+ 
+            ## Make the outer loop wait on our new deferred.
+            ## We call the new deferred back with ''
+            ## Which will cause the outer loop to write '' to the request,
+            ## which doesn't matter. It will then call our "returner",
+            ## which is just the noop lambda below, because we don't care
+            ## about the return result of the new deferred, which is just
+            ## ''
+ 
+            yield d, lambda result: ''    
+    result = io.getvalue()
+    _CACHE[original.name] = (_now, result)
+    yield result
+
 def ContextSerializer(original, context):
     originalContext = original.clone(deep=False)
     originalContext.precompile = context and context.precompile or False
Index: Nevow/nevow/stan.py
===================================================================
--- Nevow/nevow/stan.py	(revision 1192)
+++ Nevow/nevow/stan.py	(working copy)
@@ -119,8 +119,33 @@
         """
         raise NotImplementedError, "Stan slot instances are not iterable."
 
+class cached(object):
+    """Marker for cached content
+    """
+    __slots__ = ['name', 'children', 'lifetime']
 
+    def __init__(self, name, lifetime=0):
+        self.name = name
+        self.children = []
+        self.lifetime = lifetime
 
+    def __repr__(self):
+        return "cached('%s','%s')" % self.name, self.lifetime
+
+    def __getitem__(self, children):
+        """cached content is what is being cached
+        """
+        if not isinstance(children, (list, tuple)):
+            children = [children]
+        self.children.extend(children)
+        return self
+
+    def __iter__(self):
+        """Prevent an infinite loop if someone tries to do
+            for x in cached('foo'):
+        """
+        raise NotImplementedError, "Stan slot instances are not iterable."
+
 class Tag(object):
     """Tag instances represent XML tags with a tag name, attributes,
     and children. Tag instances can be constructed using the Prototype
Index: Nevow/nevow/rend.py
===================================================================
--- Nevow/nevow/rend.py	(revision 1192)
+++ Nevow/nevow/rend.py	(working copy)
@@ -30,6 +30,7 @@
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -374,6 +375,7 @@
             self.children = {}
         self.children[name] = child
     
+_CACHE = {}
 
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
@@ -384,12 +386,48 @@
 
     buffered = False
 
+    cacheTimeout = None # 0 means cache forever, >0 sets the seconds of caching
+    __lastCacheRendering = 0 # this should not be touched by the parent class
+
     beforeRender = None
     afterRender = None
     addSlash = None
 
     flattenFactory = flat.flattenFactory
 
+    def hasCache(self, ctx):
+        if self.cacheTimeout is None:
+            return None
+
+        _now = now() # run gettimeofday only once
+        timeout = _now > self.__lastCacheRendering + self.cacheTimeout and \
+                  self.cacheTimeout > 0
+        c = self.lookupCache(ctx)
+        if timeout or c is None:
+            self.__lastCacheRendering = _now # stop other renders
+            from twisted.internet.defer import Deferred
+            d = Deferred()
+            self.storeCache(ctx, d)
+            # force only this rendering, others will wait the deferred
+            c = None
+        return c
+    def chainDeferredCache(self, ctx, d):
+        if self.cacheTimeout is None:
+            return d
+
+        from twisted.internet.defer import Deferred
+        c = self.lookupCache(ctx)
+        if isinstance(c, Deferred):
+            # we're the thread that went ahead to refresh the cache
+            d.chainDeferred(c)
+        return d
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+    def storeCache(self, ctx, c):
+        _CACHE[self.cacheIDX(ctx)] = c
+    def lookupCache(self, ctx):
+        return _CACHE.get(self.cacheIDX(ctx))
+
     def renderHTTP(self, ctx):
         ## XXX request is really ctx now, change the name here
         request = inevow.IRequest(ctx)
@@ -411,11 +449,18 @@
             if self.afterRender is not None:
                 self.afterRender(ctx)
 
-        if self.buffered:
+        c = self.hasCache(ctx)
+        if c:
+            finishRequest()
+            return c
+
+        if self.buffered or self.cacheTimeout is not None:
             io = StringIO()
             writer = io.write
             def finisher(result):
-                request.write(io.getvalue())
+                c = io.getvalue()
+                self.storeCache(ctx, c)
+                request.write(c)
                 finishRequest()
                 return result
         else:
@@ -427,7 +472,7 @@
         doc = self.docFactory.load()
         ctx =  WovenContext(ctx, tags.invisible[doc])
 
-        return self.flattenFactory(doc, ctx, writer, finisher)
+        return self.chainDeferredCache(ctx, self.flattenFactory(doc, ctx, writer, finisher))
 
     def rememberStuff(self, ctx):
         Fragment.rememberStuff(self, ctx)
Index: Nevow/nevow/vhost.py
===================================================================
--- Nevow/nevow/vhost.py	(revision 1192)
+++ Nevow/nevow/vhost.py	(working copy)
@@ -19,7 +19,7 @@
 """
 
     def getStyleSheet(self):
-        return self.stylesheet
+        return VirtualHostList.stylesheet
  
     def data_hostlist(self, context, data):
         return self.nvh.hosts.keys()
Index: Nevow/nevow/static.py
===================================================================
--- Nevow/nevow/static.py	(revision 1192)
+++ Nevow/nevow/static.py	(working copy)
@@ -271,7 +271,7 @@
             return self.redirect(request)
 
         #for content-length
-        fsize = size = self.getFileSize()
+        fsize = csize = self.getFileSize()
 
         request.setHeader('accept-ranges','bytes')
 
@@ -302,20 +302,20 @@
                        "Syntactically invalid http range header!"
                 start, end = string.split(bytesrange[1],'-')
                 if start:
-                    f.seek(int(start))
+                    start = int(start)
+                    f.seek(start)
                 if end:
-                    end = int(end)
-                    size = end
+                    csize = int(end) - start + 1
                 else:
-                    end = size
+                    csize -= start
                 request.setResponseCode(http.PARTIAL_CONTENT)
                 request.setHeader('content-range',"bytes %s-%s/%s " % (
-                    str(start), str(end), str(size)))
+                    str(start), str(end), str(fsize)))
                 #content-length should be the actual size of the stuff we're
                 #sending, not the full size of the on-server entity.
                 fsize = end - int(start)
 
-            request.setHeader('content-length', str(fsize))
+            request.setHeader('content-length', str(csize))
         except:
             traceback.print_exc(file=log.logfile)
 
@@ -323,7 +323,7 @@
             return ''
 
         # return data
-        FileTransfer(f, size, request)
+        FileTransfer(f, csize, request)
         # and make sure the connection doesn't get closed
         return request.deferred
 
@@ -354,17 +354,16 @@
         self.file = file
         self.size = size
         self.request = request
-        self.written = self.file.tell()
         request.registerProducer(self, 0)
 
     def resumeProducing(self):
         if not self.request:
             return
-        data = self.file.read(min(abstract.FileDescriptor.bufferSize, self.size - self.written))
+        data = self.file.read(min(abstract.FileDescriptor.bufferSize, self.size))
         if data:
-            self.written += len(data)
             self.request.write(data)
-        if self.file.tell() == self.size:
+            self.size -= len(data)
+        if self.size <= 0:
             self.request.unregisterProducer()
             self.request.finish()
             self.request = None

From tv at twistedmatrix.com  Thu Feb 10 15:57:27 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Feb 10 15:58:09 2005
Subject: [Twisted-web] Bug found 1.3.0 twisted.web.static module
In-Reply-To: <420BD8B6.3020200@twistedmatrix.com>
References: <EAD7DA48A2628346A2CDD3E5CE596210ADBDC1@hqmail01.supportsoft.com>
	<420BD8B6.3020200@twistedmatrix.com>
Message-ID: <420BE6D7.6010707@twistedmatrix.com>

Tommi Virtanen wrote:
> Mike Marchionna wrote:
> 
>> 1)    The Content-Length header value is off by 1.  For example a
>> request with a Range: bytes=0-1999 would yield Content-Length of 1999
>> when it should actually be Content-Length: 2000.
>>
>> 2)    The Content-Range response header was generated incorrectly.  For
>> example the request with a Range: bytes=0-1999 header for a file of
>> 100000 bytes in size would yield a Content-Range header like
>> Content-Range:  bytes 0-1999/1999, when it should be Content-Range:
>> bytes 0-1999/100000.

Added .todo unit tests to twisted.web.test.test_static.

Fixed the exact same bugs, and added unit test, to nevow.

From tv at twistedmatrix.com  Thu Feb 10 16:10:38 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Feb 10 16:11:15 2005
Subject: [Twisted-web] mailman with twisted
In-Reply-To: <20050210221445.GY18573@opteron.random>
References: <20050210054751.GL18573@opteron.random>	<420BC59E.2050002@twistedmatrix.com>
	<20050210221445.GY18573@opteron.random>
Message-ID: <420BE9EE.4050205@twistedmatrix.com>

Andrea Arcangeli wrote:
> Index: Nevow/nevow/vhost.py
> ===================================================================
> --- Nevow/nevow/vhost.py	(revision 1192)
> +++ Nevow/nevow/vhost.py	(working copy)
> @@ -19,7 +19,7 @@
>  """
>  
>      def getStyleSheet(self):
> -        return self.stylesheet
> +        return VirtualHostList.stylesheet
>   
>      def data_hostlist(self, context, data):
>          return self.nvh.hosts.keys()

Why would you do that?

self.stylesheet allows subclasses to override the stylesheet easily.

> Index: Nevow/nevow/static.py
> ===================================================================
> --- Nevow/nevow/static.py	(revision 1192)
> +++ Nevow/nevow/static.py	(working copy)
> @@ -271,7 +271,7 @@
>              return self.redirect(request)
>  
>          #for content-length
> -        fsize = size = self.getFileSize()
> +        fsize = csize = self.getFileSize()
>  
>          request.setHeader('accept-ranges','bytes')
>  
> @@ -302,20 +302,20 @@
>                         "Syntactically invalid http range header!"
>                  start, end = string.split(bytesrange[1],'-')
>                  if start:
> -                    f.seek(int(start))
> +                    start = int(start)
> +                    f.seek(start)
>                  if end:
> -                    end = int(end)
> -                    size = end
> +                    csize = int(end) - start + 1
>                  else:
> -                    end = size
> +                    csize -= start
>                  request.setResponseCode(http.PARTIAL_CONTENT)
>                  request.setHeader('content-range',"bytes %s-%s/%s " % (
> -                    str(start), str(end), str(size)))
> +                    str(start), str(end), str(fsize)))
>                  #content-length should be the actual size of the stuff we're
>                  #sending, not the full size of the on-server entity.
>                  fsize = end - int(start)
>  
> -            request.setHeader('content-length', str(fsize))
> +            request.setHeader('content-length', str(csize))
>          except:
>              traceback.print_exc(file=log.logfile)
>  
> @@ -323,7 +323,7 @@
>              return ''
>  
>          # return data
> -        FileTransfer(f, size, request)
> +        FileTransfer(f, csize, request)
>          # and make sure the connection doesn't get closed
>          return request.deferred
>  

This part I just wrote independently and committed.

> @@ -354,17 +354,16 @@
>          self.file = file
>          self.size = size
>          self.request = request
> -        self.written = self.file.tell()
>          request.registerProducer(self, 0)
>  
>      def resumeProducing(self):
>          if not self.request:
>              return
> -        data = self.file.read(min(abstract.FileDescriptor.bufferSize, self.size - self.written))
> +        data = self.file.read(min(abstract.FileDescriptor.bufferSize, self.size))
>          if data:
> -            self.written += len(data)
>              self.request.write(data)
> -        if self.file.tell() == self.size:
> +            self.size -= len(data)
> +        if self.size <= 0:
>              self.request.unregisterProducer()
>              self.request.finish()
>              self.request = None

..and now this part, too. r1197

From andrea at cpushare.com  Thu Feb 10 16:34:45 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Feb 10 16:34:48 2005
Subject: [Twisted-web] mailman with twisted
In-Reply-To: <420BE9EE.4050205@twistedmatrix.com>
References: <20050210054751.GL18573@opteron.random>
	<420BC59E.2050002@twistedmatrix.com>
	<20050210221445.GY18573@opteron.random>
	<420BE9EE.4050205@twistedmatrix.com>
Message-ID: <20050210233445.GA18573@opteron.random>

On Fri, Feb 11, 2005 at 01:10:38AM +0200, Tommi Virtanen wrote:
> Andrea Arcangeli wrote:
> >Index: Nevow/nevow/vhost.py
> >===================================================================
> >--- Nevow/nevow/vhost.py	(revision 1192)
> >+++ Nevow/nevow/vhost.py	(working copy)
> >@@ -19,7 +19,7 @@
> > """
> > 
> >     def getStyleSheet(self):
> >-        return self.stylesheet
> >+        return VirtualHostList.stylesheet
> >  
> >     def data_hostlist(self, context, data):
> >         return self.nvh.hosts.keys()
> 
> Why would you do that?

Current code generated an exception, don't ask me why, you're the python
experts, I know C better ;). The exception went away with this one
liner. I can try again and show you the exact exception if you think
current code is supposed to work. Or perhaps it was fixed with the right
fix meanwhile? I didn't get rejects on my patch though (so if it was
fixed probably it wasn't fixed in this same place).

> This part I just wrote independently and committed.
> ..and now this part, too. r1197

thanks! ;)

From kid at kendermedia.com  Fri Feb 11 05:54:03 2005
From: kid at kendermedia.com (Kevin Dangoor)
Date: Fri Feb 11 05:54:29 2005
Subject: [Twisted-web] Nevow and Twisted 2.0 deprecations
Message-ID: <420CAAEB.8020302@kendermedia.com>

Hi,

I've just decided to switch to Nevow (from Quixote) for an application 
I'm working on. I'm using Nevow from svn and the Twisted 2.0 pre-alpha. 
I'm seeing some deprecation warnings, but I'm not sure what the 
Nevow/Twisted 2.0 plan is. Would it be helpful if I submit patches for 
Nevow's use of deprecated routines?

Kevin

From chmod007 at gmail.com  Fri Feb 11 10:24:28 2005
From: chmod007 at gmail.com (David Remahl)
Date: Fri Feb 11 10:25:01 2005
Subject: [Twisted-web] Encoding bug in Safari's XMLHttpRequest
Message-ID: <e5873e0b05021109245302ea3b@mail.gmail.com>

Playing around with LiveSite I encountered a bug in Apple's webkit
which is used by Safari, OmniWeb and a few other browsers. The
XMLHttpRequest object used by those browsers (and probably KHTML based
browsers, too, if they've integerated the code) has a bug which causes
the response to always be interpreted as ISO-8859-1 instead of in the
encoding specified by the content-type, xml document or the parent
document.

I sent a mail to Apple's webcore mailing list
<http://lists.apple.com/archives/webcore-dev/2005/Feb/msg00001.html>
and got a reply saying that the bug has been fixed in an unreleased
version of the framework.

How would people feel about cluttering liveevil.js with code for
checking for WebKit versions up to and including the current one, and
attempt to re-interpret the string as UTF-8 if found?

A version check and then something along the lines of _from_utf8() on
<http://homepage3.nifty.com/aokura/jscript/utf8.html> should do it,
but that would add dozens of lines to the beautifully simple script...

/ Sincerely, David

From foom at fuhm.net  Fri Feb 11 11:42:08 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Feb 11 11:42:16 2005
Subject: [Twisted-web] Encoding bug in Safari's XMLHttpRequest
In-Reply-To: <e5873e0b05021109245302ea3b@mail.gmail.com>
References: <e5873e0b05021109245302ea3b@mail.gmail.com>
Message-ID: <A2610042-7C5C-11D9-9DB9-000A95A50FB2@fuhm.net>


On Feb 11, 2005, at 12:24 PM, David Remahl wrote:
> How would people feel about cluttering liveevil.js with code for
> checking for WebKit versions up to and including the current one, and
> attempt to re-interpret the string as UTF-8 if found?
>
> A version check and then something along the lines of _from_utf8() on
> <http://homepage3.nifty.com/aokura/jscript/utf8.html> should do it,
> but that would add dozens of lines to the beautifully simple script...

My opinion is that livepage should do what it has to, in order to work 
with existing browsers.

I have one suggestion for this case, though: don't do a version check, 
send a known "magic string" from server->client when first establishing 
the request. E.g. a single Unicode character. If the browser gets that 
known character, you're okay. If it shows up as two ISO8859-1 
characters that are the UTF-8 encoding of the known character, apply 
from_utf8. If it's something else entirely, die with an error message.

James


From dp at ulaluma.com  Fri Feb 11 14:50:44 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Fri Feb 11 14:50:49 2005
Subject: [Twisted-web] Nevow and Twisted 2.0 deprecations
In-Reply-To: <420CAAEB.8020302@kendermedia.com>
References: <420CAAEB.8020302@kendermedia.com>
Message-ID: <1d2ae908d94414da9a6091d2f0c6ff54@ulaluma.com>


On Feb 11, 2005, at 4:54 AM, Kevin Dangoor wrote:

> Hi,
>
> I've just decided to switch to Nevow (from Quixote) for an application 
> I'm working on. I'm using Nevow from svn and the Twisted 2.0 
> pre-alpha. I'm seeing some deprecation warnings, but I'm not sure what 
> the Nevow/Twisted 2.0 plan is. Would it be helpful if I submit patches 
> for Nevow's use of deprecated routines?

This is just one of those things that I haven't gotten around to fixing 
yet because it's not super important. I'm not sure I even want to fix 
this before 0.4; I might recommend people use 1.3 with 0.4. I 
absolutely certainly want to fix them before 0.5, which is going to be 
an optimization release.

Here is a blob of code you can put at the top of your tac or somewhere 
early in the lifetime of the program to shut them up for now:

import warnings
from twisted.python import components
warnings.filterwarnings('ignore', 
category=components.ComponentsDeprecationWarning)
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=FutureWarning)

dp


From dp at ulaluma.com  Fri Feb 11 14:53:50 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Fri Feb 11 14:53:55 2005
Subject: [Twisted-web] Encoding bug in Safari's XMLHttpRequest
In-Reply-To: <A2610042-7C5C-11D9-9DB9-000A95A50FB2@fuhm.net>
References: <e5873e0b05021109245302ea3b@mail.gmail.com>
	<A2610042-7C5C-11D9-9DB9-000A95A50FB2@fuhm.net>
Message-ID: <baef06200c8b2a03dc8ad0789d8c91d4@ulaluma.com>


On Feb 11, 2005, at 10:42 AM, James Y Knight wrote:

>
> On Feb 11, 2005, at 12:24 PM, David Remahl wrote:
>> How would people feel about cluttering liveevil.js with code for
>> checking for WebKit versions up to and including the current one, and
>> attempt to re-interpret the string as UTF-8 if found?
>>
>> A version check and then something along the lines of _from_utf8() on
>> <http://homepage3.nifty.com/aokura/jscript/utf8.html> should do it,
>> but that would add dozens of lines to the beautifully simple script...
>
> My opinion is that livepage should do what it has to, in order to work 
> with existing browsers.
>
> I have one suggestion for this case, though: don't do a version check, 
> send a known "magic string" from server->client when first 
> establishing the request. E.g. a single Unicode character. If the 
> browser gets that known character, you're okay. If it shows up as two 
> ISO8859-1 characters that are the UTF-8 encoding of the known 
> character, apply from_utf8. If it's something else entirely, die with 
> an error message.

+1 on this; liveevil.js should abstract all of these problems away from 
the developer. If nobody else generates a patch, I will do one in the 
manner which James suggests some weekend soon.

dp


From gustavo at grahal.net  Fri Feb 11 09:15:19 2005
From: gustavo at grahal.net (Gustavo Rahal)
Date: Fri Feb 11 15:02:37 2005
Subject: [Twisted-web] how to authenticate with a SSL apache server?
Message-ID: <cuilku$4o5$1@sea.gmane.org>

Hi

I'm using apache as proxy to a xmlrpc server. How do I set the client 
xmlrpc to connect to apache using ssl, username and passaword?

A prototype of what my idea:


from twisted.web.xmlrpc import Proxy
from twisted.internet import reactor

proxy = Proxy('https://localhost/RPC2')
""" apache should redirect to 192.168.2.22:7080... how do I send 
username and password? """"

proxy.callRemote('status_mds').addCallbacks(self.buildMDSObject, 
self.printError)
........

Thanks
Gustavo


From ste at demaledetti.net  Fri Feb 11 18:57:29 2005
From: ste at demaledetti.net (Stefano Debenedetti)
Date: Fri Feb 11 18:55:16 2005
Subject: [Twisted-web] generating Canvas.swf without needing Flash
Message-ID: <420D6289.4050806@demaledetti.net>

Hello,

I have done some experiments [1] in generating the Canvas.swf file using the excellent and free-of-charge KineticFusion SWF compiler [2] instead of the expensive Flash IDE.

At first I simply used an empty RVML file (KF's XML format for representing SWFs) and tried to include the original canvas.as from SVN trunk but I got some (I guess trivial) compilation errors due to KineticFusion being slightly pickier than Flash on ECMAScript syntax.

So I decompiled the original Canvas.swf, cut and pasted all the ECMAScript code to a new canvas.as and included that one and not only it works like a charm but the resulting SWF is slightly smaller too.

Maybe this will enable future Nevow releases to ship without the Canvas.fla file, which is then redundant and introduces a dependency on Flash for people willing to grok it.

ciao
ste

[1] http://demaledetti.net/ste/nevow/
[2] http://www.kinesissoftware.com

From sridharinfinity at gmail.com  Sat Feb 12 05:31:14 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Sat Feb 12 05:31:17 2005
Subject: [Twisted-web] 'mapping' renderer must not use 'slot'
Message-ID: <8816fcf8050212043127e783e1@mail.gmail.com>

I will put it shortly.  Imagine a mapping type like this ..

map = {
   '1': 'ordinary_string_suitable_for_slot', # simple value
   '2': [ {4:5}, {6:7} ] # complex value
}

If data_foo returns the above dict, the usual way to render it is
using render="mapping". (we assume perfect decoupling between logic
and presentation)

But 'mapping' renderer uses 'slots'.  'slots' could handle only the
first value (keyed '1'), but not the second value (keyed '2') in the
dict.  That is 'slots' cannot handle complex values like [ {4:5},
{6:7} ].  In this case, the list should be rendered using 'sequence'
renderer.  But the 'sequence' requires 'data' and 'slot' deals with
presentation.  Thus is no (decoupled) way to render the above dict
(map) say.  The best one could come up with is

    <div n:data="foo" n:render="mapping">
        <h2><n:slot name="1"/></h2>
        <!-- <p><n:slot name="2"/></p> - throws exception requiring
          flatterner for the dict (or any object if it is used -->
        <!-- <p>In <n:slot name="tags"><ul render="sequence">
            <li n:pattern="item" n:render="tag"></li>
        </ul></n:slot></p> isn't a right syntax .. as n:slot takes care of
        presentation and not data-->
    </div>

For me, the perfect solution to this problem seems to be using
'pattern' instead of 'slot' for the 'mapping' renderer.  The only
advantage of 'slot' to 'pattern' is simplicity of use, but it
introduces some restrictions as we just saw the in the above example.

PS: 'mapping' renderer is just one example, with which I met the conflict.

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From dialtone at divmod.com  Sat Feb 12 05:45:03 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sat Feb 12 05:45:06 2005
Subject: [Twisted-web] 'mapping' renderer must not use 'slot'
In-Reply-To: <8816fcf8050212043127e783e1@mail.gmail.com>
References: <8816fcf8050212043127e783e1@mail.gmail.com>
Message-ID: <420DFA4F.80109@divmod.com>

Sridhar Ratna wrote:

>I will put it shortly.  Imagine a mapping type like this ..
>
>map = {
>   '1': 'ordinary_string_suitable_for_slot', # simple value
>   '2': [ {4:5}, {6:7} ] # complex value
>}
>
>If data_foo returns the above dict, the usual way to render it is
>using render="mapping". (we assume perfect decoupling between logic
>and presentation)
>
>But 'mapping' renderer uses 'slots'.  'slots' could handle only the
>
>  
>
But you are misusing rendering machinery.

<div n:data="foo">
    <h2><span n:data="1" n:render="string" /></h2>
   <h3><span n:data="2" n:render="mapping"><n:slot name="foo.2" 
/><n:slot name="foo.2bis" /></span></h3>
</div>

works and does what you need.

From sridharinfinity at gmail.com  Sat Feb 12 07:06:42 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Sat Feb 12 07:06:48 2005
Subject: Hidden tricks (Re: [Twisted-web] 'mapping' renderer must not use
	'slot')
In-Reply-To: <420DFA4F.80109@divmod.com>
References: <8816fcf8050212043127e783e1@mail.gmail.com>
	<420DFA4F.80109@divmod.com>
Message-ID: <8816fcf805021206061b533791@mail.gmail.com>

> 
> <div n:data="foo">
>     <h2><span n:data="1" n:render="string" /></h2>
>    <h3><span n:data="2" n:render="mapping"><n:slot name="foo.2"
> /><n:slot name="foo.2bis" /></span></h3>
> </div>
> 
> works and does what you need.
> 

Good, this is really a hidden use case.  It must be documented!

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From dp at ulaluma.com  Sat Feb 12 15:00:43 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Sat Feb 12 15:00:55 2005
Subject: [Twisted-web] generating Canvas.swf without needing Flash
In-Reply-To: <420D6289.4050806@demaledetti.net>
References: <420D6289.4050806@demaledetti.net>
Message-ID: <b0799569108698f572f33c9b709c93e3@ulaluma.com>


On Feb 11, 2005, at 5:57 PM, Stefano Debenedetti wrote:

> Hello,
>
> I have done some experiments [1] in generating the Canvas.swf file 
> using the excellent and free-of-charge KineticFusion SWF compiler [2] 
> instead of the expensive Flash IDE.

This sounds absolutely wonderful. Thank you for trying this; I never 
would have had time to do so.

> At first I simply used an empty RVML file (KF's XML format for 
> representing SWFs) and tried to include the original canvas.as from 
> SVN trunk but I got some (I guess trivial) compilation errors due to 
> KineticFusion being slightly pickier than Flash on ECMAScript syntax.

If the errors are trivial, I am +100 on someone pointing me at an 
environment where I can try this and see the errors, and a guide on how 
to fix said errors. I would prefer to create ecmascript-compliant code 
as much as possible (both in canvas and livepage, if possible -- don't 
know how much the ecmascript standard actually relates to javascript in 
the wild?)

> So I decompiled the original Canvas.swf, cut and pasted all the 
> ECMAScript code to a new canvas.as and included that one and not only 
> it works like a charm but the resulting SWF is slightly smaller too.

Excellent.

> Maybe this will enable future Nevow releases to ship without the 
> Canvas.fla file, which is then redundant and introduces a dependency 
> on Flash for people willing to grok it.

Yes. I will attempt to get an environment where Canvas.swf can be 
generated without Flash asap; it irritates me that I have to have Flash 
running, which is ugly and a pig, just to press Command-0 every time I 
change the .as file.

Donovan


From rpiwork at notebookmargins.com  Sat Feb 12 17:52:12 2005
From: rpiwork at notebookmargins.com (rpiwork@notebookmargins.com)
Date: Sat Feb 12 17:52:16 2005
Subject: [Twisted-web] generating Canvas.swf without needing Flash
In-Reply-To: <b0799569108698f572f33c9b709c93e3@ulaluma.com>
References: <420D6289.4050806@demaledetti.net>
	<b0799569108698f572f33c9b709c93e3@ulaluma.com>
Message-ID: <1214.24.195.30.213.1108255932.spork@webmail.notebookmargins.com>

Hi Folks,

Questionmark?

I just subscribed to this list because twisted seems like such a
fascinating thing and was surprised by this post. Is the twisted web
community interested in swf? I confess to have thought that there would be
prejudice against it's use in the twisted community. Was this a prejudice
of my own? Ironic. Has swf truely become that accepted? I hadn't imagined
it would be.

Followup questionmarks, and more to the point.

What is canvas.swf for? What would your desires be along these lines?

Thanks,

-Cort


> On Feb 11, 2005, at 5:57 PM, Stefano Debenedetti wrote:
>
>> Hello,
>>
>> I have done some experiments [1] in generating the Canvas.swf file
>> using the excellent and free-of-charge KineticFusion SWF compiler [2]
>> instead of the expensive Flash IDE.
>
> This sounds absolutely wonderful. Thank you for trying this; I never
> would have had time to do so.
>
>> At first I simply used an empty RVML file (KF's XML format for
>> representing SWFs) and tried to include the original canvas.as from
>> SVN trunk but I got some (I guess trivial) compilation errors due to
>> KineticFusion being slightly pickier than Flash on ECMAScript syntax.
>
> If the errors are trivial, I am +100 on someone pointing me at an
> environment where I can try this and see the errors, and a guide on how
> to fix said errors. I would prefer to create ecmascript-compliant code
> as much as possible (both in canvas and livepage, if possible -- don't
> know how much the ecmascript standard actually relates to javascript in
> the wild?)
>
>> So I decompiled the original Canvas.swf, cut and pasted all the
>> ECMAScript code to a new canvas.as and included that one and not only
>> it works like a charm but the resulting SWF is slightly smaller too.
>
> Excellent.
>
>> Maybe this will enable future Nevow releases to ship without the
>> Canvas.fla file, which is then redundant and introduces a dependency
>> on Flash for people willing to grok it.
>
> Yes. I will attempt to get an environment where Canvas.swf can be
> generated without Flash asap; it irritates me that I have to have Flash
> running, which is ugly and a pig, just to press Command-0 every time I
> change the .as file.
>
> Donovan
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>


From chmod007 at gmail.com  Sat Feb 12 23:24:39 2005
From: chmod007 at gmail.com (David Remahl)
Date: Sat Feb 12 23:25:14 2005
Subject: [Twisted-web] Encoding bug in Safari's XMLHttpRequest
In-Reply-To: <baef06200c8b2a03dc8ad0789d8c91d4@ulaluma.com>
References: <e5873e0b05021109245302ea3b@mail.gmail.com>
	<A2610042-7C5C-11D9-9DB9-000A95A50FB2@fuhm.net>
	<baef06200c8b2a03dc8ad0789d8c91d4@ulaluma.com>
Message-ID: <e5873e0b05021222245b99b8f5@mail.gmail.com>

On Fri, 11 Feb 2005 13:53:50 -0800, Donovan Preston <dp@ulaluma.com> wrote:
> 
> +1 on this; liveevil.js should abstract all of these problems away from
> the developer. If nobody else generates a patch, I will do one in the
> manner which James suggests some weekend soon.
> 
> dp

I've created a patch now. The problem turned out to be rather more
difficult than originally anticipated. I chose to go with the "magic"
method suggested by James.

The first time nevow_liveOutput is requested, a second argument is
passed. magicEcho is the URI encoded version of "\u9b54\u8853"
(Japanese for "magic", clever huh? ;-). nevow_liveOutput prefixes its
reply with magicEcho. No extra roundtrips, and very little overhead
since the magic is passed only on the first liveOutput query.

The problems started when I realized that AppleWebKit does not simply
interpret each byte in the stream as \xXX. The encoding it defaults to
is not iso-8859-1, it is windows latin-1 (including cp1252). This
means that for example \x91 becomes \u2018 (left single quotation
mark).

I ended up creating a lookup table for going back to something
resembling the original stream (which could then be passed to
from_utf8). Unfortunately five bytes map to the same character, namely
\ufffd (undefined) (\x81, \x8d, \x8f, \x90 and \x9d). This makes it
impossible to perfectly reconstruct the original stream if it
contained one of those bytes. This affects roughly 10% of unicode
characters smaller than 0x10000.

In any case, allowing Safari to process 90% of all characters is
better than getting erroneous output for 99.9% of them...

The only other workaround I can think of is for the client to request
a re-send of the latest message in some 7-bit encoded form (base64 or
something like that). The advantage is that the interpretation would
always be accurate and that we don't have to include the cp1252
conversion table. Disadvantages include that it requires the server to
remember the latest message, that it requires an extra xmlhttprequest
round trip, that it is relatively space inefficient and that
liveevil.js would have to include a base64 decoding function on top of
from_utf8(). Magic would still be required to determine whether a
re-transmission is necessary (i.e. if the JS implementation is buggy).

Does this seem like a reasonable compromise? If so, I'll clean up the
patch, create some unit tests and submit it for consideration.

/ Sincerely, David Remahl

From matt at pollenation.net  Sun Feb 13 04:49:24 2005
From: matt at pollenation.net (Matt Goodall)
Date: Sun Feb 13 04:49:32 2005
Subject: [Twisted-web] generating Canvas.swf without needing Flash
In-Reply-To: <1214.24.195.30.213.1108255932.spork@webmail.notebookmargins.com>
References: <420D6289.4050806@demaledetti.net>
	<b0799569108698f572f33c9b709c93e3@ulaluma.com>
	<1214.24.195.30.213.1108255932.spork@webmail.notebookmargins.com>
Message-ID: <1108295364.22067.73.camel@localhost.localdomain>

On Sat, 2005-02-12 at 16:52 -0800, rpiwork@notebookmargins.com wrote:
>Hi Folks,
>
>Questionmark?
>
>I just subscribed to this list because twisted seems like such a
>fascinating thing and was surprised by this post. Is the twisted web
>community interested in swf? I confess to have thought that there would be
>prejudice against it's use in the twisted community. Was this a prejudice
>of my own? Ironic. Has swf truely become that accepted? I hadn't imagined
>it would be.

I think it's fair to say that most people, and not just in the open
source world either, dislike web pages that use Flash *unnecessarily*
but accept that Flash does have some uses. Open source people are
probably more vocal about the issue though ;-).

Anyway, Twisted and Twisted Web do not use Flash. It is only used in one
small part of Nevow (see below). I work on and with Nevow and, so far, I
have not touched the Flash file except for running the examples to see
what fun I'm missing out on ;-).


>
>Followup questionmarks, and more to the point.
>
>What is canvas.swf for?

canvas.swf is a small Flash file (movie?) that supports the nevow.canvas
module. nevow.canvas allows the server to actively draw on the canvas in
the browser. canvas.swf also sends user events (mouse clicks etc) back
to the server.

I believe divmod are using canvas in Quotient to render "real-time"
performance graphs, or something like that.

Get Nevow from svn trunk and have a look.


>What would your desires be along these lines?

I'm not sure what you mean by this? Personally, I would like canvas to
keep out of the way ... until I need it. Fortunately, 
that's exactly how it is already.

It's probably worth noting that livepage's predecessor used Flash for
bidirectional communication between client and server. Now that most
browsers support (or will support) JavaScript's XMLHttpRequest, livepage
uses that instead of Flash.


>
>Thanks,
>
>-Cort
>
>
>> On Feb 11, 2005, at 5:57 PM, Stefano Debenedetti wrote:
>>
>>> Hello,
>>>
>>> I have done some experiments [1] in generating the Canvas.swf file
>>> using the excellent and free-of-charge KineticFusion SWF compiler [2]
>>> instead of the expensive Flash IDE.
>>
>> This sounds absolutely wonderful. Thank you for trying this; I never
>> would have had time to do so.
>>
>>> At first I simply used an empty RVML file (KF's XML format for
>>> representing SWFs) and tried to include the original canvas.as from
>>> SVN trunk but I got some (I guess trivial) compilation errors due to
>>> KineticFusion being slightly pickier than Flash on ECMAScript syntax.
>>
>> If the errors are trivial, I am +100 on someone pointing me at an
>> environment where I can try this and see the errors, and a guide on how
>> to fix said errors. I would prefer to create ecmascript-compliant code
>> as much as possible (both in canvas and livepage, if possible -- don't
>> know how much the ecmascript standard actually relates to javascript in
>> the wild?)
>>
>>> So I decompiled the original Canvas.swf, cut and pasted all the
>>> ECMAScript code to a new canvas.as and included that one and not only
>>> it works like a charm but the resulting SWF is slightly smaller too.
>>
>> Excellent.
>>
>>> Maybe this will enable future Nevow releases to ship without the
>>> Canvas.fla file, which is then redundant and introduces a dependency
>>> on Flash for people willing to grok it.
>>
>> Yes. I will attempt to get an environment where Canvas.swf can be
>> generated without Flash asap; it irritates me that I have to have Flash
>> running, which is ugly and a pig, just to press Command-0 every time I
>> change the .as file.
>>
>> Donovan
>>
>>
>> _______________________________________________
>> Twisted-web mailing list
>> Twisted-web@twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>>
>
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web@twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From sridharinfinity at gmail.com  Sun Feb 13 04:51:38 2005
From: sridharinfinity at gmail.com (Sridhar Ratna aka Srid)
Date: Sun Feb 13 04:51:42 2005
Subject: [Twisted-web] Nevow with CGI - Using URLs in xml templates
Message-ID: <8816fcf80502130351db6c5f9@mail.gmail.com>

I am using [1]  Nevow in CGI environment

Both relative and absolute URLs cannnot be used in xml templates. 
Consider the following apache setup.

http://server/blog is rewritten (mod_rewrite) to
http://server/cgi-bin/blog/index.py

Now if an xml template contains this line
<link rel="stylesheet" href="styles/screen.css" type="text/css" />

without rewrite the URL the browser will see is 
http://server/cgi-bin/blog/styles/screen.css

and with rewritten the browser will see http://server/blog/styles/screen.css

This depends on the current page, so sometimes the browser will see
http://server/blog/2004/04/styles/screen.css (as the URL is relative).


To cope with this problem with url.URL generation, I remember the
parent-root URL in ctx.  But I feel this is difficult to do with
xml-templates as they are controlled by the user.  Is there anyway to
do translation in nevow?

[1] http://srid.bsdnerds.org/blog/2005/02/06/nevow-with-cgi-and-wsgi-adaptor/

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From sridharinfinity at gmail.com  Sun Feb 13 04:55:19 2005
From: sridharinfinity at gmail.com (Sridhar Ratna aka Srid)
Date: Sun Feb 13 04:55:21 2005
Subject: [Twisted-web] Parametrized data_foo method?
Message-ID: <8816fcf80502130355329046f8@mail.gmail.com>

<n:invisible data="foo" ....

I would like to pass custom argument to data_foo depending the usage
in xml templates.  Is this possible?

Another question ...

        <div n:data="foo">
            <h2>
                <n:invisible n:data="title" n:render="post_title"/>
            </h2>

data_foo returns a dictionary say {"title":... "name": ... }

Here how to access the "name" dict item from render_post_title?

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From fog at initd.org  Sun Feb 13 05:13:51 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Sun Feb 13 05:13:19 2005
Subject: [Twisted-web] Nevow with CGI - Using URLs in xml templates
In-Reply-To: <8816fcf80502130351db6c5f9@mail.gmail.com>
References: <8816fcf80502130351db6c5f9@mail.gmail.com>
Message-ID: <1108296831.6763.6.camel@iris>

Il giorno dom, 13-02-2005 alle 17:21 +0530, Sridhar Ratna aka Srid ha
scritto:
> I am using [1]  Nevow in CGI environment
> 
> Both relative and absolute URLs cannnot be used in xml templates. 
> Consider the following apache setup.
> 
> http://server/blog is rewritten (mod_rewrite) to
> http://server/cgi-bin/blog/index.py

For files that have absolute positions, use absolute URLS and a
VirtualHostMonster (import vhost ...).

federico


From sridharinfinity at gmail.com  Sun Feb 13 07:03:23 2005
From: sridharinfinity at gmail.com (Sridhar Ratna aka Srid)
Date: Sun Feb 13 07:03:27 2005
Subject: [Twisted-web] Redering common patterns
Message-ID: <8816fcf805021306031391a266@mail.gmail.com>

Hello all,

I have sequence of Posts to render.  The Post object has an involved
xml-template as show below

    <!-- List of recent Posts -->
    <n:invisible n:data="recentPosts" n:render="sequence">
        
        <!-- A Post -->
        <div n:pattern="item" class="blogEntryBody">
            <h2 class="title">
                <n:invisible n:data="title" n:render="post_title"/>
            </h2>
            <div n:data="at" n:render="post_date"  class="date"></div>
            <div n:data="body" n:render="xml"></div>
            <div class="posted">
                in <span n:data="tags" n:render="sequence">
                <n:invisible n:pattern="item" n:render="tag"></n:invisible>
                <span n:pattern="divider">|</span>
                </span>
            </div>
        </div>
        
    </n:invisible>

Now, I need to re-use this Post pattern (below 'A Post comment) in
multiple places.  If you place them in a seperate file, it would be
imposibble to use them in this example (sequence renderer).

Do you think of any solution?

"duplication is bad idea, so could not resist"

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From sridharinfinity at gmail.com  Sun Feb 13 07:15:51 2005
From: sridharinfinity at gmail.com (Sridhar Ratna aka Srid)
Date: Sun Feb 13 07:15:54 2005
Subject: [Twisted-web] Re: Redering common patterns
In-Reply-To: <8816fcf805021306031391a266@mail.gmail.com>
References: <8816fcf805021306031391a266@mail.gmail.com>
Message-ID: <8816fcf80502130615158235be@mail.gmail.com>

> I have sequence of Posts to render.  The Post object has an involved
> xml-template as show below
[snip ... code]
> 
> 
> Now, I need to re-use this Post pattern (below 'A Post comment) in
> multiple places.  If you place them in a seperate file, it would be
> imposibble to use them in this example (sequence renderer).
> 
> Do you think of any solution?


I just looked at Fragments (rend.Fragment).  The problem with fragment
is Post data comes from outside the fragment (outer tag's 'data'
attribute).  How is it possible to send the data  to fragment

Please note that this DOES NOT work

    <n:invisible n:data="recentPosts" n:render="sequence">        
        <n:invisible n:render="content">
            <n:slot name="content" />
        </n:invisible>        
    </n:invisible>

actually 'content' has the patterns for the 'recentPosts' sequence,
but nevow throws exception

"The pattern named 'item' wasn't found in the template."


-- 
Sridhar Ratna - http://srid.bsdnerds.org

From rpiwork at notebookmargins.com  Sun Feb 13 07:22:27 2005
From: rpiwork at notebookmargins.com (rpiwork@notebookmargins.com)
Date: Sun Feb 13 07:22:29 2005
Subject: [Twisted-web] generating Canvas.swf without needing Flash
In-Reply-To: <1108295364.22067.73.camel@localhost.localdomain>
References: <420D6289.4050806@demaledetti.net><b0799569108698f572f33c9b709c93e3@ulaluma.com><1214.24.195.30.213.1108255932.spork@webmail.notebookmargins.com>
	<1108295364.22067.73.camel@localhost.localdomain>
Message-ID: <1073.24.195.30.213.1108304547.spork@webmail.notebookmargins.com>

Hi Matt,

Fair enough. I was just surprised.

> canvas.swf is a small Flash file (movie?) that supports the nevow.canvas
> module. nevow.canvas allows the server to actively draw on the canvas in
> the browser. canvas.swf also sends user events (mouse clicks etc) back
> to the server.
>
> I believe divmod are using canvas in Quotient to render "real-time"
> performance graphs, or something like that.
>
> Get Nevow from svn trunk and have a look.

I will, I was able to get an idea of what twisted is from the site, but
wasn't quite sure what nevow or a couple of the other projects are. I will
take a look at whatever examples are there(and continue to lurk in order
to learn more about the projects). Certainly there seems to be a lot of
interesting-to-awesome stuff going on.

>>What would your desires be along these lines?
>
> I'm not sure what you mean by this? Personally, I would like canvas to
> keep out of the way ... until I need it. Fortunately,
> that's exactly how it is already.

Ha Ha, yes. I just meant that I could imagine Donovan's fustration with
having to use the flash ide just to compile a file and that by knowing
more what was needed, that I could look into it. It sounds like kinetic
fusion is currently all that's needed, but I asked in case there are other
similar problems somewhere that would be nice to have solved.

Thank you for your answer. I was really just wierded out by that. But it
all makes sense now.

-Cort

From fog at initd.org  Sun Feb 13 12:05:15 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Sun Feb 13 12:05:21 2005
Subject: [Twisted-web] when formless is useless
Message-ID: <1108321516.3098.7.camel@lana.initd.org>

Hi *,

I have a very simple problem rendering forms that formless currently
does not solve (at least, I was unable to solve it in formless.) I have
two group of "controls" (input fields) that I'd like to put in separate
fieldsets but in the same form. The problem here is that formless uses
templates that are instantiated and then put in the form-arguments slot
without any possibility of doing what I need. 

Obviously (as suggested on #twisted.web by dialtone and Tv) I can write
the whole form from scratch, fill-in some custom slots for the value
attributes from form defaults before calling renderForms() and let
formless manage only the error checking. But this is so much work that
*not using* formless results in less code.

Ideas?

federico
 
-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog@debian.org
INIT.D Developer                                           fog@initd.org
  Those who do not study Lisp are doomed to reimplement it. Poorly.
                                     -- from Karl M. Hegbloom .signature
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050213/eff3d0d2/attachment.bin
From fog at initd.org  Sun Feb 13 13:01:59 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Sun Feb 13 13:02:04 2005
Subject: [Twisted-web] when formless is useless (II)
Message-ID: <1108324919.3098.11.camel@lana.initd.org>

Please, forget about my previous mail. I found a way to do what I was
looking for. I just need to use *both* a template and a slot for every
"argument!!foo". Sorry for having increased the noise-to-signal ratio.
(Maybe documenting this somewhere would be nice..)

federico
 
-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog@debian.org
INIT.D Developer                                           fog@initd.org
  Se si insegna a un bambino a programmare in qualche linguaggio
   informatico, questo esercizio logico lo render? padrone e non
   schiavo del computer.                                  -- Umberto Eco
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050213/170448dd/attachment.bin
From jbauer at rubic.com  Sun Feb 13 17:08:36 2005
From: jbauer at rubic.com (Jeff Bauer)
Date: Sun Feb 13 17:09:11 2005
Subject: [Twisted-web] wiki: MeLearnNevow
Message-ID: <420FEC04.70603@rubic.com>

I'm in the process of learning Nevow. I thought I'd
post some running commentary on the wiki while working
through the examples.

http://divmod.org/users/wiki.twistd/nevow/moin.cgi/MeLearnNevow

Please feel free to fill in the gaps.

Jeff Bauer
Rubicon, Inc.

From sridharinfinity at gmail.com  Sun Feb 13 18:25:55 2005
From: sridharinfinity at gmail.com (Sridhar Ratna aka Srid)
Date: Sun Feb 13 18:25:58 2005
Subject: [Twisted-web] Nevow with CGI - Using URLs in xml templates
In-Reply-To: <1108296831.6763.6.camel@iris>
References: <8816fcf80502130351db6c5f9@mail.gmail.com>
	<1108296831.6763.6.camel@iris>
Message-ID: <8816fcf805021317253c783737@mail.gmail.com>

On Sun, 13 Feb 2005 13:13:51 +0100, Federico Di Gregorio <fog@initd.org> wrote:
> 
> For files that have absolute positions, use absolute URLS and a
> VirtualHostMonster (import vhost ...).
> 

Btw, for simplicity, I simply 'remember'ed the prefix URL in context.

prefix_url_from_config = http://server/cgi-bin/blog/index.py
ctx.remember(prefix_url_from_config, IRootURL)

print url.URL.fromString(IRootURL(ctx)).child('foo').child('bar')
http://server/cgi-bin/blog/index.py/foo/bar

That's it.

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From sridharinfinity at gmail.com  Sun Feb 13 18:29:19 2005
From: sridharinfinity at gmail.com (Sridhar Ratna aka Srid)
Date: Sun Feb 13 18:29:22 2005
Subject: [Twisted-web] wiki: MeLearnNevow
In-Reply-To: <420FEC04.70603@rubic.com>
References: <420FEC04.70603@rubic.com>
Message-ID: <8816fcf8050213172944c3a9fa@mail.gmail.com>

> I'm in the process of learning Nevow. I thought I'd
> post some running commentary on the wiki while working
> through the examples.
> 
> http://divmod.org/users/wiki.twistd/nevow/moin.cgi/MeLearnNevow
> 

Good work.  I recommend you to use svn nevow.

> Please feel free to fill in the gaps.

I was just thinking about doing something like this (putting in my
blog). I will try to fill in the gaps.

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From sridharinfinity at gmail.com  Sun Feb 13 18:59:20 2005
From: sridharinfinity at gmail.com (Sridhar Ratna aka Srid)
Date: Sun Feb 13 18:59:22 2005
Subject: [Twisted-web] wiki: MeLearnNevow
In-Reply-To: <8816fcf8050213172944c3a9fa@mail.gmail.com>
References: <420FEC04.70603@rubic.com>
	<8816fcf8050213172944c3a9fa@mail.gmail.com>
Message-ID: <8816fcf80502131759dfa9e49@mail.gmail.com>

> I was just thinking about doing something like this (putting in my
> blog). I will try to fill in the gaps.

I just created MeLearnNevowWithCGI page in the wiki.

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From djm at software.net.nz  Sun Feb 13 21:59:20 2005
From: djm at software.net.nz (David Moore)
Date: Sun Feb 13 22:06:21 2005
Subject: [Twisted-web] Open Source eLearning Project / Position Available
Message-ID: <20050214175920.3ccc89c0.djm@software.net.nz>


Hi all,

eXe is an open-source project at the University of Auckland to create an
off-line, web-based authoring tool that will enable teachers and
academics to publish web content without the need to become proficient
in HTML or XML markup.  

Our first release of eXe can be downloaded from
http://eduforge.org/frs/?group_id=20.  It still has a long way to go,
but is already creating interest in education circles.  

eXe is being developed in Python using the Twisted framework.  XUL
components are planned for the future.

We're now looking to hire another Python programmer to add to the eXe
development team.  If you're interested please have a look at
http://www.vacancies.auckland.ac.nz/positiondetail.asp?P=2992.

More information on the eXe project can be found on Eduforge
http://eduforge.org/projects/exe/ or through the eXe team's wiki at:
http://exe.cfdl.auckland.ac.nz/wiki.


Thanks, 
David Moore.
University of Auckland,
New Zealand.
-- 

From tv at twistedmatrix.com  Mon Feb 14 05:42:02 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon Feb 14 05:42:36 2005
Subject: [Twisted-web] Nevow with CGI - Using URLs in xml templates
In-Reply-To: <8816fcf805021317253c783737@mail.gmail.com>
References: <8816fcf80502130351db6c5f9@mail.gmail.com>	<1108296831.6763.6.camel@iris>
	<8816fcf805021317253c783737@mail.gmail.com>
Message-ID: <42109C9A.1080501@twistedmatrix.com>

Sridhar Ratna aka Srid wrote:
> Btw, for simplicity, I simply 'remember'ed the prefix URL in context.
> 
> prefix_url_from_config = http://server/cgi-bin/blog/index.py
> ctx.remember(prefix_url_from_config, IRootURL)
> 
> print url.URL.fromString(IRootURL(ctx)).child('foo').child('bar')
> http://server/cgi-bin/blog/index.py/foo/bar
> 
> That's it.

IMHO: Full URLs in configuration are Considered Harmful.

They prevent a lot of useful things like providing the same service
over HTTP and HTTPS.

From sridharinfinity at gmail.com  Mon Feb 14 07:21:48 2005
From: sridharinfinity at gmail.com (Sridhar Ratna aka Srid)
Date: Mon Feb 14 07:21:51 2005
Subject: [Twisted-web] Nevow with CGI - Using URLs in xml templates
In-Reply-To: <42109C9A.1080501@twistedmatrix.com>
References: <8816fcf80502130351db6c5f9@mail.gmail.com>
	<1108296831.6763.6.camel@iris>
	<8816fcf805021317253c783737@mail.gmail.com>
	<42109C9A.1080501@twistedmatrix.com>
Message-ID: <8816fcf8050214062169d2879e@mail.gmail.com>

On Mon, 14 Feb 2005 14:42:02 +0200, Tommi Virtanen <tv@twistedmatrix.com> wrote:
> 
> IMHO: Full URLs in configuration are Considered Harmful.
> 
> They prevent a lot of useful things like providing the same service
> over HTTP and HTTPS.
> 

Anyways, I have switched to twisted/filesystemdb (from cgi/sqlite) for
my blog application. ;-)

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From dp at ulaluma.com  Mon Feb 14 07:36:29 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Feb 14 07:36:35 2005
Subject: [Twisted-web] Parametrized data_foo method?
In-Reply-To: <8816fcf80502130355329046f8@mail.gmail.com>
References: <8816fcf80502130355329046f8@mail.gmail.com>
Message-ID: <a09a9b5a0ca53748436de6f6e6081bd0@ulaluma.com>


On Feb 13, 2005, at 3:55 AM, Sridhar Ratna aka Srid wrote:

> <n:invisible data="foo" ....
>
> I would like to pass custom argument to data_foo depending the usage
> in xml templates.  Is this possible?
>
> Another question ...
>
>         <div n:data="foo">
>             <h2>
>                 <n:invisible n:data="title" n:render="post_title"/>
>             </h2>
>
> data_foo returns a dictionary say {"title":... "name": ... }
>
> Here how to access the "name" dict item from render_post_title?

If you want to access both the "title" and the "name" attribute from 
render_post_title, then don't restrict render_post_title's view of the 
data to only the "title" key.

In other words, simply remove n:data="title".

(BTW, although the subject of this post says "Parameterized data_foo 
method", this post has nothing to do with parameterized data methods)

dp


From tazzo at email.it  Mon Feb 14 15:25:19 2005
From: tazzo at email.it (Tazzo)
Date: Mon Feb 14 15:25:45 2005
Subject: [Twisted-web] file upload without formless
Message-ID: <558bfb0b5abfebd99c2e1ac1d9478183@151.29.234.10>

I have some problem with formless and the use a did
with locateChild method. I'm working to solve the problem
using Configurable but it's hard because formbuilder.py
is the only example I found ... is there any other example? 
In the meantime someone could send me a simple example of a 
file upload for big files (...no blocking code :) without formless?

thanks 
 --
 Email.it, the professional e-mail, gratis per te: http://www.email.it/f
 
 Sponsor:
 Proteggi la tua moto dalle intemperie e... dagli sguardi indiscreti con il
Telo Coprimoto!
 Clicca qui: http://adv.email.it/cgi-bin/foclick.cgi?mid=2744&d=20050214



From snacktime at gmail.com  Mon Feb 14 17:24:54 2005
From: snacktime at gmail.com (snacktime)
Date: Mon Feb 14 17:25:26 2005
Subject: [Twisted-web] Connection reset by peer with
Message-ID: <1f060c4c0502141624120d7320@mail.gmail.com>

After a successful request, a minute later I get this exception.  Why
is the server still trying to read at this point?  The resource class
and code I use to start the server is below

Traceback (most recent call last):
          File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
line 52, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 64, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
line 43, in callWithContext
            return func(*args,**kw)
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/default.py",
line 535, in _doReadOrWrite
            why = getattr(selectable, method)()
        --- <exception caught here> ---
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 98, in doRead
            return Connection.doRead(self)
          File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
line 239, in doRead
            data = self.socket.recv(self.bufferSize)
        OpenSSL.SSL.SysCallError: (54, 'Connection reset by peer')

----------------------------------------------------------------------------------------------------

class SimpleWeb(resource.Resource):
    isLeaf = True
    def render_GET(self, request):
         return "<html>Hello world</html>"          
  
application = service.Application("otransact")
OTService = service.IServiceCollection(application)
web = SimpleWeb()
site = server.Site(web)
OTWeb = internet.SSLServer(8080, site,ServerContextFactory())
OTWeb.setServiceParent(OTService)

From snacktime at gmail.com  Mon Feb 14 17:49:54 2005
From: snacktime at gmail.com (snacktime)
Date: Mon Feb 14 17:50:27 2005
Subject: [Twisted-web] Re: Connection reset by peer with
In-Reply-To: <1f060c4c0502141624120d7320@mail.gmail.com>
References: <1f060c4c0502141624120d7320@mail.gmail.com>
Message-ID: <1f060c4c050214164956297aec@mail.gmail.com>

Never mind, turned out those errors were from the client not using ssl...

Chris


On Mon, 14 Feb 2005 16:24:54 -0800, snacktime <snacktime@gmail.com> wrote:
> After a successful request, a minute later I get this exception.  Why
> is the server still trying to read at this point?  The resource class
> and code I use to start the server is below
> 
> Traceback (most recent call last):
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py",
> line 52, in callWithContext
>            return context.call({ILogContext: newCtx}, func, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
> line 64, in callWithContext
>            return self.currentContext().callWithContext(ctx, func, *args, **kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/python/context.py",
> line 43, in callWithContext
>            return func(*args,**kw)
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/default.py",
> line 535, in _doReadOrWrite
>            why = getattr(selectable, method)()
>        --- <exception caught here> ---
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
> line 98, in doRead
>            return Connection.doRead(self)
>          File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py",
> line 239, in doRead
>            data = self.socket.recv(self.bufferSize)
>        OpenSSL.SSL.SysCallError: (54, 'Connection reset by peer')
> 
> ----------------------------------------------------------------------------------------------------
> 
> class SimpleWeb(resource.Resource):
>    isLeaf = True
>    def render_GET(self, request):
>         return "<html>Hello world</html>"
> 
> application = service.Application("otransact")
> OTService = service.IServiceCollection(application)
> web = SimpleWeb()
> site = server.Site(web)
> OTWeb = internet.SSLServer(8080, site,ServerContextFactory())
> OTWeb.setServiceParent(OTService)
>

From andrea at cpushare.com  Tue Feb 15 02:51:02 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Feb 15 02:51:06 2005
Subject: [Twisted-web] file upload without formless
In-Reply-To: <558bfb0b5abfebd99c2e1ac1d9478183@151.29.234.10>
References: <558bfb0b5abfebd99c2e1ac1d9478183@151.29.234.10>
Message-ID: <20050215095102.GW13712@opteron.random>

On Mon, Feb 14, 2005 at 11:25:19PM +0100, Tazzo wrote:
> I have some problem with formless and the use a did
> with locateChild method. I'm working to solve the problem
> using Configurable but it's hard because formbuilder.py
> is the only example I found ... is there any other example? 
> In the meantime someone could send me a simple example of a 
> file upload for big files (...no blocking code :) without formless?

File upload and no blocking code is impossible (with linux kernel)
unless you store the file in a separate process or unless you use kernel
async-io support.

So either you use a sql db with "binary" field, or you have to store the
file using a "pb" server, in a separate twisted process.

Some discussion happend on twisted-python and it seems somebody is
working on it. I even considered writing a generic storage daemon that
would avoid the twisted core to block on I/O, but then I giveup
completely and I use only postgresql under Valentino suggestion, and it
works great ;)

From andrea at cpushare.com  Tue Feb 15 18:12:36 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue Feb 15 18:12:41 2005
Subject: [Twisted-web] various formless types
In-Reply-To: <20050131173500.GI11494@opteron.random>
References: <20050131173500.GI11494@opteron.random>
Message-ID: <20050216011236.GG2071@opteron.random>

On Mon, Jan 31, 2005 at 06:35:00PM +0100, andrea@cpushare.com wrote:
> class Email(MaxlengthString):
> 	def coerce(self, val, configurable):
> 		r = super(Email, self).coerce(val, configurable)
> 		if invalid_email(val):
> 			raise annotate.InputError("%r is not a valid email address." % val)
> 		return r

Just in case somebody uses the above, I noticed one little bug with the case,
see now I return r.lower().

def invalid_email(email):
	return not re.match(r'^[\w\-~@.+]+\Z', email) or \
	       re.search(r'@[^@]*@', email) or \
	       not re.match(r'^[\w\-~.+]+@.*[\w\-~+]+\.[\w]{2,}\Z', email)
class Email(MaxlengthString):
	def coerce(self, val, configurable):
		r = super(Email, self).coerce(val, configurable)
		if invalid_email(r):
			raise annotate.InputError("%r is not a valid email address." % val)
		return r.lower()

Now I'm doing checking on the domain with twisted dns capabilities too before
trying to send an email address (this helps against typos). But I do that 
in the handlers, not in the coerce method (it apparently doesn't like if 
I return a deferred from a coerce method). No problem of course (though
it'd be a bit cleaner if I could handle deferreds in the coerce methods too).

I'd need ctx passed to coerce too, I had to implement my ProcessTypedContext in
one case due the lack of ctx being passed to coerce, as described in the
previous email.

thanks!

From sridharinfinity at gmail.com  Tue Feb 15 23:19:56 2005
From: sridharinfinity at gmail.com (Sridhar Ratna aka Srid)
Date: Tue Feb 15 23:19:58 2005
Subject: [Twisted-web] Re: Parametrized data_foo method?
In-Reply-To: <8816fcf80502130355329046f8@mail.gmail.com>
References: <8816fcf80502130355329046f8@mail.gmail.com>
Message-ID: <8816fcf805021522192d3e1a3a@mail.gmail.com>

> 
> I would like to pass custom argument to data_foo depending the usage
> in xml templates.  Is this possible?
> 

Well, the solution for this problem is 'macros'

yo fzZzy, merge your macros branch man! :-)

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From jamwt-twistedlist at jamwt.com  Thu Feb 17 12:27:30 2005
From: jamwt-twistedlist at jamwt.com (J Turner)
Date: Thu Feb 17 12:27:12 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
Message-ID: <20050217192730.GA99428@count.jamwt.com>

Andrea,

Thanks for your suggestions; sorry I've taken so long to get back to
them, but I haven't had time to work on pgasync until now... 

On Thu, Jan 20, 2005 at 02:15:36AM +0100, Andrea Arcangeli wrote:
> Next thing I had to fix to be able to login has been to add this:

[snip bool patch]

I've patched that in, thanks.


> With the above a good part of my app started working. But it's not enough.
> 
> Here a list of the remaining issues (which I believe aren't related anymore to
> the API, as far as I'm concerned the current adbapi wrapper is all I need ;).
> 
> 1) the '%(xx)d' format for integeres/logs insn't recognized. I'd like to use
>    "%(xx)d" to be strict for integers.

This is fixed.

> btw, is there any difference in python between %u and %d at all?

Nope, I don't think so.

> 2) it cannot handle a ";" at the end of the sql string. so I deleted all the
>    finals ";" and I left only the intermediate ones.

This is fixed as well.

> 3) it doesn't print the nevow url type, note that such parameter is just
>    incidentally passed down to the sql query, and pgasync should ignore it
>    instead of complaining since it never gets resolved

It's not trival to determine whether or not something gets resolved.  If
it's a keyword argument situation, then I need to search the format
string for some variation of %(keyword)s.  If it's just tuple-style,
then I need to count the number of %s/d/whatevers and determine whether
or not it's beyond the limit.

This seems ugly, and needlessly expensive for a corner case; I think the
right answer is, only pass things to format() that are intended to be
formatted and made safe for insertion into SQL.

But, then again, maybe I'm misunderstanding you.

 - Jamie

From andrea at cpushare.com  Thu Feb 17 19:48:57 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Feb 17 19:49:01 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050217192730.GA99428@count.jamwt.com>
References: <20050217192730.GA99428@count.jamwt.com>
Message-ID: <20050218024857.GP2071@opteron.random>

On Thu, Feb 17, 2005 at 01:27:30PM -0600, J Turner wrote:
> Andrea,
> 
> Thanks for your suggestions; sorry I've taken so long to get back to
> them, but I haven't had time to work on pgasync until now... 

No problem, take your time. Sorry for not having discussed things last
time in IRC, but I was busy fighting with the mailing lists ;)

> I've patched that in, thanks.

You're welcome ;).

> This is fixed.

Ok fine!

> Nope, I don't think so.

Ok, I also couldn't find anything in the docs, perhaps %u should start
raising a deprecation warning, it's way confusing when two things do the
same thing and you never know if they're really the same thing ;)

> This is fixed as well.

fine, and this part I already fixed in my app too 8) I had no idea the ;
was added by the lib. it's actually the only part I changed after the
pgasync test, along with the compatibility code for the deferreds in
interaction that should allow me now to exchange psycopg2 with pgasync
back and forth with full compatibility.

> It's not trival to determine whether or not something gets resolved.  If
> it's a keyword argument situation, then I need to search the format
> string for some variation of %(keyword)s.  If it's just tuple-style,
> then I need to count the number of %s/d/whatevers and determine whether
> or not it's beyond the limit.
> 
> This seems ugly, and needlessly expensive for a corner case; I think the
> right answer is, only pass things to format() that are intended to be
> formatted and made safe for insertion into SQL.
> 
> But, then again, maybe I'm misunderstanding you.

You got it perfectly right, and I see your point, it'd be an unnecessary
slowdown to parse the string too.

But you could silenty convert to string if you can't find the conversion
type. In this case I'm suggesting to actually make it less strict but it
simplfy my code a lot.

I've tons of cases where I've a kwargs filled with stuff that is needed
by lots of chained deferreds. Now the sql one is using a few of the
kwargs entries, and then later on the email deferred uses other entries.

So if I can work with a single kwargs that has all the arguments
collected while the form action starts, the code is a lot simpler.

So my suggestion is not to give it up, but to try to convert to string,
and format it like string if __str__ did its job.

Comments? As soon as we sorted out this last bit, I'll give it a new
spin and perhaps it'll just work without a changing anything on my app.

From andrea at cpushare.com  Thu Feb 17 21:15:57 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Feb 17 21:16:01 2005
Subject: [Twisted-web] caching branch
In-Reply-To: <420E36FA.1080003@divmod.com>
References: <20050211020344.GC18573@opteron.random>
	<20050211094342.21318.71034328.divmod.quotient.11760@ohm>
	<20050212163814.GF31014@opteron.random>
	<420E36FA.1080003@divmod.com>
Message-ID: <20050218041557.GT2071@opteron.random>

The tags.cached keeps working fine in the caching branch (which btw
applied cleanly on top of trunk).

What doesn't work is the rend.Page. I'm very curious to compare the
performance of the caching branch with my previous code that is
currently online already.

Locals
rest	[<listiterator object at 0x56c6fcac>]
item	<generator object at 0x56c6fc8c>
gen	<generator object at 0x56c6fc8c>
/home/andrea/bin/x86_64/python/lib/python2.4/site-packages/nevow/flat/flatstan.py, line 234 in CachedSerializer
232

233

def CachedSerializer(original, context):

234

    cache = ICache(original.scope(context))

235

    cached = cache.get(original.key, original.lifetime)

Locals
original	<cached instance at 1455889540>
context	<WovenContext instance at 1455880172>
Globals
ICache	<MetaInterface nevow.inevow.ICache>
CachedSerializer	<function CachedSerializer at 0x56c63614>

I also suggest to apply this patch to the code or it doesn't even
startup.

--- Nevow/nevow/rend.py.~1~	2005-02-18 04:39:54.208615490 +0100
+++ Nevow/nevow/rend.py	2005-02-18 05:06:15.272641191 +0100
@@ -30,6 +30,7 @@ from nevow import tags
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -416,7 +417,7 @@ class Page(Fragment, ConfigurableFactory
         if self.buffered:
             io = StringIO()
             writer = io.write
-            def finisher(result):                
+            def finisher(result):
                 request.write(io.getvalue())
                 finishRequest()
                 return result
@@ -428,7 +429,7 @@ class Page(Fragment, ConfigurableFactory
 
         doc = self.docFactory.load()
         if self.cache:
-            name = url.URL.fromContext(ctx).path
+            name = str(url.URL.fromContext(ctx))
             doc = tags.cached(name, self.lifetime)[doc]
         ctx =  WovenContext(ctx, tags.invisible[doc])
 
@@ -504,7 +505,6 @@ class Page(Fragment, ConfigurableFactory
             else:
                 ## Use the redirectAfterPost url
                 ref = str(redirectAfterPost)
-            from nevow import url
             refpath = url.URL.fromString(ref)
             magicCookie = str(now())
             refpath = refpath.replace('_nevow_carryover_', magicCookie)

From andrea at cpushare.com  Thu Feb 17 22:37:35 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Feb 17 22:37:39 2005
Subject: [Twisted-web] caching branch
In-Reply-To: <20050218041557.GT2071@opteron.random>
References: <20050211020344.GC18573@opteron.random>
	<20050211094342.21318.71034328.divmod.quotient.11760@ohm>
	<20050212163814.GF31014@opteron.random>
	<420E36FA.1080003@divmod.com>
	<20050218041557.GT2071@opteron.random>
Message-ID: <20050218053735.GV2071@opteron.random>

I ported the html caching on top of ICache and I left the tags.cached
part unchanged and as expcted the ICache generates a significant
slowdown, -20%. I get around 180 req/sec while I was getting 220 (never
less than 200) req per second with my previous patch that avoided the
ICache adapters from compy.

I really don't want this ICache abstraction slowdown that hurts
performance in the core html caching.

This below is the code that I benchmarked (against trunk + caching
branch).

The ICache is a nice abstraction for lower-performance caches like
tags.cache to keep code clean, but the html caching has to run raw w/o
slowdowns. So I'll resurrect my original code to get that bit of
performance back. I exclude I'll switch over to the the current caching
branch for the global rand.Page caching even if it would work, since
that one will be even slower than the below patch that only gets
disturbed by a single ICache lookup without even taking into account all
the flattener (I never run the flattener).

BTW, this confirms my theory that compy is the worst offender
performance-wise.

I'll post an updated patch suitable for merging with the
high-performance code as soon as I finish to port it and test it.

--- Nevow/nevow/rend.py.~1~	2005-02-18 04:39:54.208615490 +0100
+++ Nevow/nevow/rend.py	2005-02-18 06:29:54.440482008 +0100
@@ -30,6 +30,7 @@ from nevow import tags
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -387,11 +388,41 @@ class Page(Fragment, ConfigurableFactory
     beforeRender = None
     afterRender = None
     addSlash = None
+
     cache = False
     lifetime = -1
 
     flattenFactory = flat.flattenFactory
 
+    def hasCache(self, ctx):
+        if not self.cache:
+            return
+
+        c = self.lookupCache(ctx)
+        if c:
+            return c
+
+        from twisted.internet.defer import Deferred
+        d = Deferred()
+        # do only this rendering, others will wait the deferred
+        self.storeCache(ctx, d)
+    def chainDeferredCache(self, ctx, d):
+        if not self.cache:
+            return d
+
+        from twisted.internet.defer import Deferred
+        c = self.lookupCache(ctx)
+        if isinstance(c, Deferred):
+            # we're the thread that went ahead to refresh the cache
+            d.chainDeferred(c)
+        return d
+    def storeCache(self, ctx, c):
+        inevow.ICache(ctx).set(c, self.cacheIDX(ctx))
+    def lookupCache(self, ctx):
+        return inevow.ICache(ctx).get(self.cacheIDX(ctx), self.lifetime)
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+
     def renderHTTP(self, ctx):
         ## XXX request is really ctx now, change the name here
         request = inevow.IRequest(ctx)
@@ -413,11 +444,18 @@ class Page(Fragment, ConfigurableFactory
             if self.afterRender is not None:
                 self.afterRender(ctx)
 
-        if self.buffered:
+        c = self.hasCache(ctx)
+        if c:
+            finishRequest()
+            return c
+
+        if self.buffered or self.cache:
             io = StringIO()
             writer = io.write
-            def finisher(result):                
-                request.write(io.getvalue())
+            def finisher(result):
+                c = io.getvalue()
+                self.storeCache(ctx, c)
+                request.write(c)
                 finishRequest()
                 return result
         else:
@@ -427,12 +465,9 @@ class Page(Fragment, ConfigurableFactory
                 return result
 
         doc = self.docFactory.load()
-        if self.cache:
-            name = url.URL.fromContext(ctx).path
-            doc = tags.cached(name, self.lifetime)[doc]
         ctx =  WovenContext(ctx, tags.invisible[doc])
 
-        return self.flattenFactory(doc, ctx, writer, finisher)
+        return self.chainDeferredCache(ctx, self.flattenFactory(doc, ctx, writer, finisher))
 
     def rememberStuff(self, ctx):
         Fragment.rememberStuff(self, ctx)
@@ -504,7 +539,6 @@ class Page(Fragment, ConfigurableFactory
             else:
                 ## Use the redirectAfterPost url
                 ref = str(redirectAfterPost)
-            from nevow import url
             refpath = url.URL.fromString(ref)
             magicCookie = str(now())
             refpath = refpath.replace('_nevow_carryover_', magicCookie)

From andrea at cpushare.com  Thu Feb 17 23:31:51 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Feb 17 23:31:56 2005
Subject: [Twisted-web] caching branch
In-Reply-To: <20050218053735.GV2071@opteron.random>
References: <20050211020344.GC18573@opteron.random>
	<20050211094342.21318.71034328.divmod.quotient.11760@ohm>
	<20050212163814.GF31014@opteron.random>
	<420E36FA.1080003@divmod.com>
	<20050218041557.GT2071@opteron.random>
	<20050218053735.GV2071@opteron.random>
Message-ID: <20050218063151.GW2071@opteron.random>

On Fri, Feb 18, 2005 at 06:37:35AM +0100, Andrea Arcangeli wrote:
> I'll post an updated patch suitable for merging with the
> high-performance code as soon as I finish to port it and test it.

here we go, I improved it even further, now it handles 225-230req/sec vs
180req/sec with still full html caching with the cleaner but
significantly slower ICache adapter. I found that not doing any deferred
stuff at all, even if it risks to call multiple rendering paysoff
measurably since the fast path won't have to execute a number of checks.
I doubt it can get any faster than 230req/sec without moving into
twisted space. But 230 are more than enough ;), not comparable to the
~5req/sec I get w/o caching.

This below is the diff against the caching branch (and it should really
be applied at least to the caching branch since there's no way the
ICache on top of tags.cached like in current caching branch can reach
the same performance I get with the below). Note the API is absolutely
unchanged, I had not to change a line of my app after I ported it to the
caching branch the first time. Don't get me wrong the ICache is nice,
but the only point of the cache is to go _fast_, the nicer (and slower)
stuff already happens during the real rendering. Still it's fine to use
ICache in the tags.cached since tags.cached has somewhat lower
performance priority and it remains a very significant optimization.

--- Nevow/nevow/rend.py.~1~	2005-02-18 04:39:54.208615490 +0100
+++ Nevow/nevow/rend.py	2005-02-18 07:13:57.082073549 +0100
@@ -30,6 +30,7 @@ from nevow import tags
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -375,6 +376,8 @@ class ChildLookupMixin(FreeformChildMixi
         self.children[name] = child
     
 
+_CACHE = {}
+
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
     via the document factory (docFactory).
@@ -387,11 +390,38 @@ class Page(Fragment, ConfigurableFactory
     beforeRender = None
     afterRender = None
     addSlash = None
+
     cache = False
     lifetime = -1
+    __lastCacheRendering = 0
 
     flattenFactory = flat.flattenFactory
 
+    def hasCache(self, ctx):
+        if not self.cache:
+            return
+
+        _now = now() # run gettimeofday only once
+        timeout = _now > self.__lastCacheRendering + self.lifetime and \
+                  self.lifetime >= 0
+        c = self.lookupCache(ctx)
+        if timeout or c is None:
+            # stop other renders
+            self.__lastCacheRendering = _now
+            c = None
+        return c
+    def cacheRendered(self, ctx, c):
+        if not self.cache:
+            return
+        # overwrite the deferred with the data
+        self.storeCache(ctx, c)
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+    def storeCache(self, ctx, c):
+        _CACHE[self.cacheIDX(ctx)] = c
+    def lookupCache(self, ctx):
+        return _CACHE.get(self.cacheIDX(ctx))
+
     def renderHTTP(self, ctx):
         ## XXX request is really ctx now, change the name here
         request = inevow.IRequest(ctx)
@@ -413,11 +443,18 @@ class Page(Fragment, ConfigurableFactory
             if self.afterRender is not None:
                 self.afterRender(ctx)
 
-        if self.buffered:
+        c = self.hasCache(ctx)
+        if c is not None:
+            finishRequest()
+            return c
+
+        if self.buffered or self.cache:
             io = StringIO()
             writer = io.write
-            def finisher(result):                
-                request.write(io.getvalue())
+            def finisher(result):
+                c = io.getvalue()
+                self.cacheRendered(ctx, c)
+                request.write(c)
                 finishRequest()
                 return result
         else:
@@ -427,9 +464,6 @@ class Page(Fragment, ConfigurableFactory
                 return result
 
         doc = self.docFactory.load()
-        if self.cache:
-            name = url.URL.fromContext(ctx).path
-            doc = tags.cached(name, self.lifetime)[doc]
         ctx =  WovenContext(ctx, tags.invisible[doc])
 
         return self.flattenFactory(doc, ctx, writer, finisher)
@@ -504,7 +538,6 @@ class Page(Fragment, ConfigurableFactory
             else:
                 ## Use the redirectAfterPost url
                 ref = str(redirectAfterPost)
-            from nevow import url
             refpath = url.URL.fromString(ref)
             magicCookie = str(now())
             refpath = refpath.replace('_nevow_carryover_', magicCookie)



And this below is the patch of caching branch from dialtone + my above
incremental patch that speedup the rend.Page caching without changing
the API at all, all against trunk (i.e. the code that's going online in
a few more minutes ;).

Note that the original bugreport I sent in this thread is still
unsolved, I've no idea why the current caching branch doesn't work in
rend.Page, and I recommend dialtone to look into it, just in case the
same bug can happen even while using tags.cached normally (and I use
tags.cached normally too to cache some component).

I think the below might be good enough for merging into trunk too.

Index: Nevow/nevow/tags.py
===================================================================
--- Nevow/nevow/tags.py	(revision 1228)
+++ Nevow/nevow/tags.py	(working copy)
@@ -25,7 +25,7 @@
 """
 
 
-from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata
+from nevow.stan import Proto, Tag, directive, raw, xml, CommentProto, invisible, slot, cdata, cached
 
 
 comment = CommentProto()
@@ -62,7 +62,9 @@
 def inlineJS(s):
     return script(type="text/javascript", language="JavaScript")[xml('\n//<![CDATA[\n%s\n//]]>\n' % s)]
 
-__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object', '_map', 'drange', 'Tag', 'directive', 'xml', 'raw', 'slot', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
+__all__ = tags + ['invisible', 'comment', '_dir', '_del', '_object',
+                  '_map', 'drange', 'Tag', 'directive', 'xml', 'raw',
+                  'slot', 'cached', 'cdata', 'inlineJS'] + ['_%s' % x for x in range(100)]
 
 
 ########################
Index: Nevow/nevow/__init__.py
===================================================================
--- Nevow/nevow/__init__.py	(revision 1228)
+++ Nevow/nevow/__init__.py	(working copy)
@@ -138,6 +138,8 @@
 nevow.util.remainingSegmentsFactory  nevow.context.RequestContext   nevow.inevow.IRemainingSegments
 nevow.util.currentSegmentsFactory  nevow.context.RequestContext   nevow.inevow.ICurrentSegments
 
+nevow.cache.SiteCache   nevow.context.SiteContext   nevow.inevow.ICache
+
 nevow.query.QueryContext    nevow.context.WovenContext  nevow.inevow.IQ
 nevow.query.QueryLoader     nevow.inevow.IDocFactory      nevow.inevow.IQ
 nevow.query.QueryList       __builtin__.list        nevow.inevow.IQ
@@ -186,6 +188,7 @@
 nevow.flat.flatstan.RendererSerializer            nevow.inevow.IRenderer
 nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive
 nevow.flat.flatstan.SlotSerializer                nevow.stan.slot
+nevow.flat.flatstan.CachedSerializer              nevow.stan.cached 
 nevow.flat.flatstan.ContextSerializer             nevow.context.WovenContext
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.Deferred
 nevow.flat.flatstan.DeferredSerializer            twisted.internet.defer.DeferredList
Index: Nevow/nevow/flat/flatstan.py
===================================================================
--- Nevow/nevow/flat/flatstan.py	(revision 1228)
+++ Nevow/nevow/flat/flatstan.py	(working copy)
@@ -8,11 +8,15 @@
 
 from nevow import util
 from nevow.stan import Proto, Tag, xml, directive, Unset, invisible
-from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData
-from nevow.flat import precompile, serialize
+from nevow.inevow import IRenderer, IRendererFactory, IGettable, IData, ICache
+from nevow.flat import precompile, serialize, iterflatten
 from nevow.accessors import convertToData
 from nevow.context import WovenContext
 
+from time import time as now
+from cStringIO import StringIO
+from twisted.internet import defer
+
 allowSingleton = ('img', 'br', 'hr', 'base', 'meta', 'link', 'param', 'area',
                   'input', 'col', 'basefont', 'isindex', 'frame')
 
@@ -226,6 +230,43 @@
         return serialize(original.default, context)
     return serialize(data, context)
 
+def CachedSerializer(original, context):
+    cache = ICache(original.scope(context))
+    cached = cache.get(original.key, original.lifetime)
+    if cached:
+        yield cached
+        return
+    io = StringIO()
+    for child in iterflatten(original.children, context, io.write,
+                             lambda item: True):
+        if isinstance(child, tuple):
+            childDeferred, childReturner = child
+ 
+            d = defer.Deferred() ## A new deferred for the outer loop, whose result
+            ## we don't care about, because we don't want the outer loop to write
+            ## anything when this deferred fires -- only when the entire for loop
+            ## has completed and we have all the "children" flattened
+ 
+            def innerDeferredResultAvailable(result):
+                childReturner(result) ## Cause the inner iterflatten to continue
+                d.callback('') ## Cause the outer iterflatten to continue
+                return ''
+ 
+            childDeferred.addCallback(innerDeferredResultAvailable)
+ 
+            ## Make the outer loop wait on our new deferred.
+            ## We call the new deferred back with ''
+            ## Which will cause the outer loop to write '' to the request,
+            ## which doesn't matter. It will then call our "returner",
+            ## which is just the noop lambda below, because we don't care
+            ## about the return result of the new deferred, which is just
+            ## ''
+ 
+            yield d, lambda result: ''    
+    result = io.getvalue()
+    cache.set(result, original.key)
+    yield result
+
 def ContextSerializer(original, context):
     originalContext = original.clone(deep=False)
     originalContext.precompile = context and context.precompile or False
Index: Nevow/nevow/stan.py
===================================================================
--- Nevow/nevow/stan.py	(revision 1228)
+++ Nevow/nevow/stan.py	(working copy)
@@ -119,8 +119,40 @@
         """
         raise NotImplementedError, "Stan slot instances are not iterable."
 
+def passThrough(_):
+    return _
 
+class cached(object):
+    """Marker for cached content
+    """
+    __slots__ = ['key', 'children', 'lifetime', 'scope']
 
+    def __init__(self, key, scope=None, lifetime=-1):
+        self.key = key
+        self.children = []
+        self.lifetime = lifetime
+        self.scope = scope
+        if not scope:
+            self.scope = passThrough
+            
+
+    def __repr__(self):
+        return "cached('%s','%s')" % self.key, self.lifetime
+
+    def __getitem__(self, children):
+        """cached content is what is being cached
+        """
+        if not isinstance(children, (list, tuple)):
+            children = [children]
+        self.children.extend(children)
+        return self
+
+    def __iter__(self):
+        """Prevent an infinite loop if someone tries to do
+            for x in cached('foo'):
+        """
+        raise NotImplementedError, "Stan slot instances are not iterable."
+
 class Tag(object):
     """Tag instances represent XML tags with a tag name, attributes,
     and children. Tag instances can be constructed using the Prototype
Index: Nevow/nevow/inevow.py
===================================================================
--- Nevow/nevow/inevow.py	(revision 1228)
+++ Nevow/nevow/inevow.py	(working copy)
@@ -98,8 +98,24 @@
     
     ANY python object is said to implement IData.
     """
+class ICache(compy.Interface):
+    """This object represents the cache that contains all the
+    pre-flattened fragments
+    """
+    def get(self, index, lifetime):
+        """ Get an object from the cache with the given index only if
+        it is less old than lifetime, otherwise return None.
+        """
 
+    def set(self, toBeCached, *indexes):
+        """ Register toBeCached with each of the indexes passed """
 
+    def clear(self, what):
+        """ Clear what keyed element from the cache, or search for
+        what in sequences in all the keys and clear the item
+        """
+        
+
 class IGettable(compy.Interface):
     def get(self, context):
         """Return the data
Index: Nevow/nevow/rend.py
===================================================================
--- Nevow/nevow/rend.py	(revision 1228)
+++ Nevow/nevow/rend.py	(working copy)
@@ -30,6 +30,7 @@
 from nevow import flat
 from nevow.util import log
 from nevow import util
+from nevow import url
 
 import formless
 from formless import iformless
@@ -375,6 +376,8 @@
         self.children[name] = child
     
 
+_CACHE = {}
+
 class Page(Fragment, ConfigurableFactory, ChildLookupMixin):
     """A page is the main Nevow resource and renders a document loaded
     via the document factory (docFactory).
@@ -388,8 +391,37 @@
     afterRender = None
     addSlash = None
 
+    cache = False
+    lifetime = -1
+    __lastCacheRendering = 0
+
     flattenFactory = flat.flattenFactory
 
+    def hasCache(self, ctx):
+        if not self.cache:
+            return
+
+        _now = now() # run gettimeofday only once
+        timeout = _now > self.__lastCacheRendering + self.lifetime and \
+                  self.lifetime >= 0
+        c = self.lookupCache(ctx)
+        if timeout or c is None:
+            # stop other renders
+            self.__lastCacheRendering = _now
+            c = None
+        return c
+    def cacheRendered(self, ctx, c):
+        if not self.cache:
+            return
+        # overwrite the deferred with the data
+        self.storeCache(ctx, c)
+    def cacheIDX(self, ctx):
+        return str(url.URL.fromContext(ctx))
+    def storeCache(self, ctx, c):
+        _CACHE[self.cacheIDX(ctx)] = c
+    def lookupCache(self, ctx):
+        return _CACHE.get(self.cacheIDX(ctx))
+
     def renderHTTP(self, ctx):
         ## XXX request is really ctx now, change the name here
         request = inevow.IRequest(ctx)
@@ -411,11 +443,18 @@
             if self.afterRender is not None:
                 self.afterRender(ctx)
 
-        if self.buffered:
+        c = self.hasCache(ctx)
+        if c is not None:
+            finishRequest()
+            return c
+
+        if self.buffered or self.cache:
             io = StringIO()
             writer = io.write
             def finisher(result):
-                request.write(io.getvalue())
+                c = io.getvalue()
+                self.cacheRendered(ctx, c)
+                request.write(c)
                 finishRequest()
                 return result
         else:
@@ -499,7 +538,6 @@
             else:
                 ## Use the redirectAfterPost url
                 ref = str(redirectAfterPost)
-            from nevow import url
             refpath = url.URL.fromString(ref)
             magicCookie = str(now())
             refpath = refpath.replace('_nevow_carryover_', magicCookie)
Index: Nevow/nevow/guard.py
===================================================================
--- Nevow/nevow/guard.py	(revision 1228)
+++ Nevow/nevow/guard.py	(working copy)
@@ -24,7 +24,7 @@
 from twisted.protocols import http
 
 # Nevow imports
-from nevow import inevow, url, stan
+from nevow import inevow, url, stan, cache
 
 
 def _sessionCookie():
@@ -315,6 +315,7 @@
                               path="/%s" % '/'.join(request.prepath),
                               secure=secure)
         sz = self.sessions[newCookie] = self.sessionFactory(self, newCookie)
+        sz.setComponent(inevow.ICache, cache.SessionCache())
         sz.args = request.args
         sz.fields = getattr(request, 'fields', {})
         sz.content = request.content


As usual this below nosense, no idea why it fixed things for me...

Index: Nevow/nevow/vhost.py
===================================================================
--- Nevow/nevow/vhost.py	(revision 1228)
+++ Nevow/nevow/vhost.py	(working copy)
@@ -19,7 +19,7 @@
 """
 
     def getStyleSheet(self):
-        return self.stylesheet
+        return VirtualHostList.stylesheet
  
     def data_hostlist(self, context, data):
         return self.nvh.hosts.keys()

From andrea at cpushare.com  Thu Feb 17 23:34:28 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu Feb 17 23:34:31 2005
Subject: [Twisted-web] caching branch
In-Reply-To: <20050218063151.GW2071@opteron.random>
References: <20050211020344.GC18573@opteron.random>
	<20050211094342.21318.71034328.divmod.quotient.11760@ohm>
	<20050212163814.GF31014@opteron.random>
	<420E36FA.1080003@divmod.com>
	<20050218041557.GT2071@opteron.random>
	<20050218053735.GV2071@opteron.random>
	<20050218063151.GW2071@opteron.random>
Message-ID: <20050218063428.GX2071@opteron.random>

On Fri, Feb 18, 2005 at 07:31:51AM +0100, Andrea Arcangeli wrote:
> And this below is the patch of caching branch from dialtone + my above
> incremental patch that speedup the rend.Page caching without changing
> the API at all, all against trunk (i.e. the code that's going online in
> a few more minutes ;).

sorry for yet another self followup but this bit from the caching branch
was missing, it was a new file and I merged into trunk using patch
instead of svn merge...

Index: nevow/cache.py
===================================================================
--- nevow/cache.py	(revision 0)
+++ nevow/cache.py	(revision 0)
@@ -0,0 +1,33 @@
+from time import time as now
+from nevow import inevow
+
+class SiteCache(object):
+    __implements__ = inevow.ICache,
+    _content = {}
+    def __init__(self, original):
+        self.original = original
+
+    def get(self, index, lifetime):
+        cached = self._content.get(index, None)
+        if cached is None:
+            return
+        if lifetime < 0:
+            return cached[1]
+        if cached[0] + lifetime > now():
+            return cached[1]
+
+    def set(self, toBeCached, *indexes):
+        _now = now()
+        for index in indexes:
+            self._content[index] = (_now, toBeCached)
+
+    def clear(self, what):
+        if self._content.has_key(what):
+            self._content.pop(what)
+        for key in self._content.keys():
+            if what in key:
+                self._content.pop(key)
+
+class SessionCache(SiteCache):
+    def __init__(self):
+        self._content = {}


From sam at SpinwardStars.com  Fri Feb 18 07:22:03 2005
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Fri Feb 18 07:32:17 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050217192730.GA99428@count.jamwt.com>
References: <20050217192730.GA99428@count.jamwt.com>
Message-ID: <6.1.2.0.0.20050218072044.0643ce08@mail.myedl.com>

At 2005-02-17 01:27 PM -0600, you wrote:
> > btw, is there any difference in python between %u and %d at all?
>
>Nope, I don't think so.

Yes, there is.

%d -- integer (signed)
%u -- Unsigned integer

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam@SpinwardStars.com 



From foom at fuhm.net  Fri Feb 18 10:12:03 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Feb 18 10:12:17 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <6.1.2.0.0.20050218072044.0643ce08@mail.myedl.com>
References: <20050217192730.GA99428@count.jamwt.com>
	<6.1.2.0.0.20050218072044.0643ce08@mail.myedl.com>
Message-ID: <3547971A-81D0-11D9-9DB9-000A95A50FB2@fuhm.net>

On Feb 18, 2005, at 9:22 AM, Samuel Reynolds wrote:
> At 2005-02-17 01:27 PM -0600, you wrote:
>> > btw, is there any difference in python between %u and %d at all?
>>
>> Nope, I don't think so.
>
> Yes, there is.
>
> %d -- integer (signed)
> %u -- Unsigned integer

Nope, there isn't, in 2.4 and up. In 2.3 %u does the following:
 >>> "%u"%-5
__main__:1: FutureWarning: %u/%o/%x/%X of negative int will return a 
signed string in Python 2.4 and up
'4294967291'

James


From jamwt-twistedlist at jamwt.com  Fri Feb 18 11:02:14 2005
From: jamwt-twistedlist at jamwt.com (J Turner)
Date: Fri Feb 18 11:01:56 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050218024857.GP2071@opteron.random>
References: <20050217192730.GA99428@count.jamwt.com>
	<20050218024857.GP2071@opteron.random>
Message-ID: <20050218180213.GA39821@count.jamwt.com>

On Fri, Feb 18, 2005 at 03:48:57AM +0100, Andrea Arcangeli wrote:
> On Thu, Feb 17, 2005 at 01:27:30PM -0600, J Turner wrote:
> > It's not trival to determine whether or not something gets resolved.  If
> > it's a keyword argument situation, then I need to search the format
> > string for some variation of %(keyword)s.  If it's just tuple-style,
> > then I need to count the number of %s/d/whatevers and determine whether
> > or not it's beyond the limit.
> > 
> > This seems ugly, and needlessly expensive for a corner case; I think the
> > right answer is, only pass things to format() that are intended to be
> > formatted and made safe for insertion into SQL.
>
> So my suggestion is not to give it up, but to try to convert to string,
> and format it like string if __str__ did its job.

This makes sense.  I was hesitant to "just str()" it because the whole
point of format() (or, at least, the biggest point) is that it makes
things safely escaped for insertion into a SQL statement--no malicious
injection.

If I did it the way you suggest, however, and do something like
STRING(str(unknown_thing)) so that it was sure to be escaped properly, 
that seems like it would be a useful thing.  

 - Jamie

From andrea at cpushare.com  Fri Feb 18 18:23:22 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri Feb 18 18:23:26 2005
Subject: [Twisted-web] pgasync (was: /freeform_post!!random causes
	exceptions)
In-Reply-To: <20050218180213.GA39821@count.jamwt.com>
References: <20050217192730.GA99428@count.jamwt.com>
	<20050218024857.GP2071@opteron.random>
	<20050218180213.GA39821@count.jamwt.com>
Message-ID: <20050219012322.GI2071@opteron.random>

On Fri, Feb 18, 2005 at 12:02:14PM -0600, J Turner wrote:
> If I did it the way you suggest, however, and do something like
> STRING(str(unknown_thing)) so that it was sure to be escaped properly, 
> that seems like it would be a useful thing.  

Yes, the idea is to convert ot str and then to excape it with STRING.

I could duplicate the hash and purify it myself, and it'd still work
with pgasync too, but I'd need to write more code for it that would be
unnecessary with the above. With the abvoe I could pass down as well an
url and have it converted to string automatically by pgasync.

The main cons is decreased strictness that might actually hide bugs if
somebody pass down a weird type. So if you don't want to do that, I can
as well try to purfy the stuff myself.

From tegmine at gmail.com  Fri Feb 18 20:40:02 2005
From: tegmine at gmail.com (Luis N)
Date: Fri Feb 18 20:40:34 2005
Subject: [Twisted-web] Atop Storeup
Message-ID: <77bfa81a05021819405bf00814@mail.gmail.com>

Would someone be able to explain how I can get something out of an
Atop database such as
http://www.divmod.org/cvs/trunk/doc/examples/atop-storeup.py?rev=5251&view=markup
a la http://radix.twistedmatrix.com/archives/000091.html using
StoreUps.

From shamrin at gmail.com  Sun Feb 20 18:23:33 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Sun Feb 20 18:24:05 2005
Subject: [Twisted-web] Bugs in Nevow documentation
Message-ID: <28d42ea705022017234fa561e3@mail.gmail.com>

Hello!

I am currently reading the new Nevow documentation in order to learn
it. It's nice, thank you! Who is the author?

I have found a typo there. Go to the nevow-traversal.txt, class
Documentation example and look at the following line:

fullpath = os.path.join(self, name) 

It must be:

fullpath = os.path.join(self.directory, name)

And I also want to mention the fact that there are lots of places in
the docs where the author misses import statements. It must be pretty
obvious where this places a, so I wouldn't list this places here...

P.S. Is posting to this mailing list the right way to report the bugs?
Is it required to prepare a diff?

-- 
Best regards,
Alexey.

From jbauer at rubic.com  Sun Feb 20 18:28:04 2005
From: jbauer at rubic.com (Jeff Bauer)
Date: Sun Feb 20 18:28:40 2005
Subject: [Twisted-web] more MeLearnNevow wiki
Message-ID: <42193924.9030102@rubic.com>

I've added a couple more entries to MeLearnNevow.

http://divmod.org/users/wiki.twistd/nevow/moin.cgi/MeLearnNevow

Please feel free to correct any mistakes in my commentary.  I'm
very much a slow beginner. Thanks.

Jeff Bauer
Rubicon, Inc.

From matt at pollenation.net  Mon Feb 21 05:09:25 2005
From: matt at pollenation.net (Matt Goodall)
Date: Mon Feb 21 05:09:33 2005
Subject: [Twisted-web] Bugs in Nevow documentation
In-Reply-To: <28d42ea705022017234fa561e3@mail.gmail.com>
References: <28d42ea705022017234fa561e3@mail.gmail.com>
Message-ID: <1108987765.6685.44.camel@localhost.localdomain>

On Mon, 2005-02-21 at 04:23 +0300, Alexey Shamrin wrote:
> Hello!
> 
> I am currently reading the new Nevow documentation in order to learn
> it. It's nice, thank you! Who is the author?
> 
> I have found a typo there. Go to the nevow-traversal.txt, class
> Documentation example and look at the following line:
> 
> fullpath = os.path.join(self, name) 
> 
> It must be:
> 
> fullpath = os.path.join(self.directory, name)

Thanks, fixed in svn trunk.

> 
> And I also want to mention the fact that there are lots of places in
> the docs where the author misses import statements. It must be pretty
> obvious where this places a, so I wouldn't list this places here...
> 
> P.S. Is posting to this mailing list the right way to report the bugs?
> Is it required to prepare a diff?

There is also the roundup tracker. A diff would be great if you can
produce one.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From cmoad at indiana.edu  Mon Feb 21 08:14:26 2005
From: cmoad at indiana.edu (Charles Moad)
Date: Mon Feb 21 08:14:43 2005
Subject: [Twisted-web] No output on attr error
Message-ID: <4219FAD2.5060509@indiana.edu>

For this simple example I can call the soap method test and the reactor 
prints no error message.  It correctly returns a fault of "Method test 
failed." since I did not import the string module.  I post this code for 
a simple case, but I was running into this for fairly complex code. 
Shouldn't the reactor print some sort of error?  I am using twisted-1.3.0.

--------------------------------------------------
from twisted.web import server, soap
from twisted.internet import reactor, defer

class MySOAP(soap.SOAPPublisher):
     def soap_test(self):
         return string.split('hello world')

reactor.listenTCP(10081, server.Site(MySOAP()))
reactor.run()
--------------------------------------------------

Thanks,
	Charlie

From ste at demaledetti.net  Mon Feb 21 08:17:48 2005
From: ste at demaledetti.net (Stefano Debenedetti)
Date: Mon Feb 21 08:15:15 2005
Subject: [Twisted-web] canvas without flash and optimization patches
Message-ID: <4219FB9C.4090707@demaledetti.net>

Hello,

I did some further tests on Canvas, the compilation errors I got with KineticFusion were definitely trivial (only two missing semicolons) so I prepared a little patch that corrects those and adds the RVML file, which includes a comment with instructions for downloading KineticFusion and building the Canvas SWF with it.

I also turned compression on for a further size improvement, now the generated SWF is less than 2KB.

Perhaps more importantly, I found out why the Canvas demo is crashing Mozilla/Firefox on linux: it is too fast (i.e. the linux Flash player is too crappy)! Indeed it is not crashing, if you stop the server the browser resurrects, so I guess it is more appropriate to call it a choke.

The demo uses twisted.internet.task to send commands to the client approximatively every 0.25 seconds, raising that value to 0.3 is enough to avoid the choke, at least on my system.

So I tried optimizing the canvas.as file and I found out that by changing the Canvas protocol in order to use plain old crappy TSV instead of XML gives it a performance boost that allows me to push the above mentioned refresh rate of the demo to 0.21, i.e. even better than the 0.25 that was unreachable before.

Of course this has other drawbacks, for example you have take care of potential conflicts between the separator token you choose and the string data you want to send to the client, you lose ease of extensibility of the hierarchical structure and so on but it's worth giving it a try when the goal is absolute performance.

The first patch I attach is just the semicolons fixes + the RVML file, the second one is the same plus the optimizations, sorry about the data duplication but I couldn't figure out a quick way to do incremental patches with SVN without committing first.

ciao
ste





-------------- next part --------------
A non-text attachment was scrubbed...
Name: nevow-canvas-rvml.diff
Type: text/x-patch
Size: 2148 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050221/f152701c/nevow-canvas-rvml.bin
-------------- next part --------------
A non-text attachment was scrubbed...
Name: nevow-canvas-rvml-plus-optimization.diff
Type: text/x-patch
Size: 3781 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050221/f152701c/nevow-canvas-rvml-plus-optimization.bin
From sa at c-area.ch  Mon Feb 21 09:45:58 2005
From: sa at c-area.ch (Steven Armstrong)
Date: Mon Feb 21 09:46:02 2005
Subject: [Twisted-web] canvas without flash and optimization patches
In-Reply-To: <4219FB9C.4090707@demaledetti.net>
References: <4219FB9C.4090707@demaledetti.net>
Message-ID: <421A1046.5080902@c-area.ch>

On Mon, 21 Feb 2005 16:17:48 +0100 Stefano Debenedetti wrote:
> Hello,
> 
> I did some further tests on Canvas, the compilation errors I got with KineticFusion were definitely trivial (only two missing semicolons) so I prepared a little patch that corrects those and adds the RVML file, which includes a comment with instructions for downloading KineticFusion and building the Canvas SWF with it.
> 
> I also turned compression on for a further size improvement, now the generated SWF is less than 2KB.
> 
> Perhaps more importantly, I found out why the Canvas demo is crashing Mozilla/Firefox on linux: it is too fast (i.e. the linux Flash player is too crappy)! Indeed it is not crashing, if you stop the server the browser resurrects, so I guess it is more appropriate to call it a choke.
> 
> The demo uses twisted.internet.task to send commands to the client approximatively every 0.25 seconds, raising that value to 0.3 is enough to avoid the choke, at least on my system.
> 
> So I tried optimizing the canvas.as file and I found out that by changing the Canvas protocol in order to use plain old crappy TSV instead of XML gives it a performance boost that allows me to push the above mentioned refresh rate of the demo to 0.21, i.e. even better than the 0.25 that was unreachable before.
> 
> Of course this has other drawbacks, for example you have take care of potential conflicts between the separator token you choose and the string data you want to send to the client, you lose ease of extensibility of the hierarchical structure and so on but it's worth giving it a try when the goal is absolute performance.
> 
> The first patch I attach is just the semicolons fixes + the RVML file, the second one is the same plus the optimizations, sorry about the data duplication but I couldn't figure out a quick way to do incremental patches with SVN without committing first.
> 
> ciao
> ste

Wouldn't it be possible to use something like JSON [1] instead of XML?
Like that you may have the best of both worlds. Structured data and a
lighter format than xml. JS and Python work very nicely with it.

[1] http://www.json.org

cheers
Steven

--
All I know is that I know nothing -- Socrates

From dp at ulaluma.com  Mon Feb 21 12:37:07 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Feb 21 12:37:19 2005
Subject: [Twisted-web] canvas without flash and optimization patches
In-Reply-To: <4219FB9C.4090707@demaledetti.net>
References: <4219FB9C.4090707@demaledetti.net>
Message-ID: <3913699e73d162bd720a15842afd300d@ulaluma.com>


On Feb 21, 2005, at 7:17 AM, Stefano Debenedetti wrote:

> So I tried optimizing the canvas.as file and I found out that by 
> changing the Canvas protocol in order to use plain old crappy TSV 
> instead of XML gives it a performance boost that allows me to push the 
> above mentioned refresh rate of the demo to 0.21, i.e. even better 
> than the 0.25 that was unreachable before.

This is very amusing. It boggles my mind, really. The reason I used XML 
for the Canvas RPC mechanism rather than plain text was because in 
theory an XML parser written in C should exhibit better performance 
than a text parser written in pure actionscript. In fact, all the other 
work I had ever done with Flash used a plain old text format, and 
switching to XML was supposed to be an optimization.

With a plain text format, there is the additional difficulty of 
supporting nested structures (which is simple in XML). Some of the 
encodings include dicts and lists.

Anyway, this is very cool. Thank you.

dp


From ste at demaledetti.net  Mon Feb 21 13:02:40 2005
From: ste at demaledetti.net (Stefano Debenedetti)
Date: Mon Feb 21 13:00:07 2005
Subject: [Twisted-web] canvas without flash and optimization patches
Message-ID: <421A3E60.109@demaledetti.net>

Steven Armstrong wrote:
> Wouldn't it be possible to use something like JSON [1] instead of XML?
> Like that you may have the best of both worlds. Structured data and a
> lighter format than xml. JS and Python work very nicely with it.
> 
> [1] http://www.json.org

At first glance, it seems not so easy because the eval function in Flash does not work like in Javascript: its parameter can only be "a string containing the name of a variable, property, object, or movie clip to retrieve" and not any arbitrary expression [1].

Of course you can do that yourself but then you would probably find out that Flash's native XML parser does a better job.. that would be interesting to find out...

ciao
ste

[1] http://www.macromedia.com/support/flash/action_scripts/actionscript_dictionary/actionscript_dictionary200.html

From ste at demaledetti.net  Mon Feb 21 13:51:13 2005
From: ste at demaledetti.net (Stefano Debenedetti)
Date: Mon Feb 21 13:48:37 2005
Subject: [Twisted-web] canvas without flash and optimization patches
Message-ID: <421A49C1.1060002@demaledetti.net>

Donovan Preston wrote:
> This is very amusing. It boggles my mind, really. The reason I used XML 
> for the Canvas RPC mechanism rather than plain text was because in 
> theory an XML parser written in C should exhibit better performance 
> than a text parser written in pure actionscript. In fact, all the other 
> work I had ever done with Flash used a plain old text format, and 
> switching to XML was supposed to be an optimization.

The problem here is that you need quite a lot of non-native code to extract data from the pseudo-DOM that the XML parser returns while you need very little to make sense of an Array returned by the String.split method, which is written in C too.

So String.split() (native) + myarray[n] (non-native) is likely to be faster than XML.parseXML() (native) + myxml.childNodes[n].firstChild.attributes.etcetc (non-native)... 

An optimization rule of thumb that is more effective in Flash than in other environments is: the less code you write, the faster it is, unfortunately this often makes for poorly readable code that tends to give too much for granted.

> With a plain text format, there is the additional difficulty of 
> supporting nested structures (which is simple in XML). Some of the 
> encodings include dicts and lists.

Choosing the right format for keeping the features while not losing speed will be a cool challenge, I hope I manage to dedicate some more time to it once I get to play with Canvas a little more, for today I am just happy to know I can rely on it as it won't necessarily crash my browser, shame on the linux version of the plugin anyway, it has always been sadly behind its Win/Mac counterparts in many ways.

ciao
ste



From chch at kit.tomsk.ru  Mon Feb 21 21:14:56 2005
From: chch at kit.tomsk.ru (Andrey Chichak)
Date: Mon Feb 21 21:15:02 2005
Subject: [Twisted-web] memory leaks
Message-ID: <421AB1C0.2020306@kit.tomsk.ru>

Good day!

I've partialy migrated my site from php to twisted-web and now under 
high load a memory size occupied by server raises from 12Mb to 130Mb 
during 1 day.

I need help !!!!

Andrey Chichak.

From andrew-twisted at puzzling.org  Mon Feb 21 21:27:11 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon Feb 21 21:27:25 2005
Subject: [Twisted-web] memory leaks
In-Reply-To: <421AB1C0.2020306@kit.tomsk.ru>
References: <421AB1C0.2020306@kit.tomsk.ru>
Message-ID: <20050222042711.GW1374@localhost.localdomain>

On Tue, Feb 22, 2005 at 10:14:56AM +0600, Andrey Chichak wrote:
> Good day!
> 
> I've partialy migrated my site from php to twisted-web and now under 
> high load a memory size occupied by server raises from 12Mb to 130Mb 
> during 1 day.
> 
> I need help !!!!

What version of Twisted?  What sort of application are you running in
twisted-web?  How many hits/day?

There was a small leak in the 1.3.0 release... it was fixed in r10970 in
SVN.  As a workaround, you can delete twisted/protocols/_c_urlarg.so.  But
this is purely guesswork, please give us more details!

-Andrew.


From chch at kit.tomsk.ru  Mon Feb 21 22:19:03 2005
From: chch at kit.tomsk.ru (Andrey Chichak)
Date: Mon Feb 21 22:19:06 2005
Subject: [Twisted-web] memory leaks
In-Reply-To: <20050222042711.GW1374@localhost.localdomain>
References: <421AB1C0.2020306@kit.tomsk.ru>
	<20050222042711.GW1374@localhost.localdomain>
Message-ID: <421AC0C7.2050101@kit.tomsk.ru>

Andrew Bennetts wrote:

> On Tue, Feb 22, 2005 at 10:14:56AM +0600, Andrey Chichak wrote:
> 
>>Good day!
>>
>>I've partialy migrated my site from php to twisted-web and now under 
>>high load a memory size occupied by server raises from 12Mb to 130Mb 
>>during 1 day.
>>
>>I need help !!!!
> 
> 
> What version of Twisted? 

1.3.0

> What sort of application are you running in twisted-web? 

webchat

> How many hits/day?

~650000 hits per 24 hours

> There was a small leak in the 1.3.0 release... it was fixed in r10970 in
> SVN.  As a workaround, you can delete twisted/protocols/_c_urlarg.so.  But

I'll check this.

> this is purely guesswork, please give us more details!

len(gc.get_objects()) is ~ 30000, and don't change in time.

> -Andrew.

/usr/local/lib/python2.3/site-packages/twisted/web/twcgi.py:81: 
exceptions.DeprecationWarning: IPv4Address.__getitem__ is deprecated. 
Use attributes instead.

> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Andrey Chichak

From andrew-twisted at puzzling.org  Mon Feb 21 23:51:50 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon Feb 21 23:52:04 2005
Subject: [Twisted-web] memory leaks
In-Reply-To: <421AC0C7.2050101@kit.tomsk.ru>
References: <421AB1C0.2020306@kit.tomsk.ru>
	<20050222042711.GW1374@localhost.localdomain>
	<421AC0C7.2050101@kit.tomsk.ru>
Message-ID: <20050222065150.GA1374@localhost.localdomain>

On Tue, Feb 22, 2005 at 11:19:03AM +0600, Andrey Chichak wrote:
> Andrew Bennetts wrote:
[...]
> >What version of Twisted? 
> 
> 1.3.0
> 
[...]
> >How many hits/day?
> 
> ~650000 hits per 24 hours
> 
> >There was a small leak in the 1.3.0 release... it was fixed in r10970 in
> >SVN.  As a workaround, you can delete twisted/protocols/_c_urlarg.so.  But
> 
> I'll check this.

Ok, this sounds like this leak is at least a large part of that.  Assuming
the average URL length is 40 bytes, that version would leak 26MB in 24
hours, according to the stats you give.  If requested URLs are much longer
(e.g. due to forms using request method GET), it may well account for all of
it.

> >this is purely guesswork, please give us more details!
> 
> len(gc.get_objects()) is ~ 30000, and don't change in time.

This strongly suggests the leak is in a C module somewhere, which is
consistent with the _c_urlarg bug.

-Andrew.


From chch at kit.tomsk.ru  Tue Feb 22 00:47:34 2005
From: chch at kit.tomsk.ru (Andrey Chichak)
Date: Tue Feb 22 00:47:41 2005
Subject: [Twisted-web] memory leaks
In-Reply-To: <20050222065150.GA1374@localhost.localdomain>
References: <421AB1C0.2020306@kit.tomsk.ru>	<20050222042711.GW1374@localhost.localdomain>	<421AC0C7.2050101@kit.tomsk.ru>
	<20050222065150.GA1374@localhost.localdomain>
Message-ID: <421AE396.8060209@kit.tomsk.ru>

Andrew Bennetts wrote:

>>>How many hits/day?
>>
>>~650000 hits per 24 hours
>>
>>
>>>There was a small leak in the 1.3.0 release... it was fixed in r10970 in
>>>SVN.  As a workaround, you can delete twisted/protocols/_c_urlarg.so.  But
>>
>>I'll check this.

3 hours of running without twisted/protocols/_c_urlarg.so - memory Ok.

> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From mailinglists at shechen.at  Tue Feb 22 01:00:46 2005
From: mailinglists at shechen.at (noema)
Date: Tue Feb 22 01:01:20 2005
Subject: [Twisted-web] Newov Login Forward
Message-ID: <421AE6AE.80400@shechen.at>


I think an answer to the following issue could be useful for many 
people: (1) When I have a login page resource like the one listed here 
how can I return another page than the root one? (2) How can I return a 
certain page resource depending on the username?

hoping somebody knows that,
#noema

PS: Will post an article to the wiki if someone enlightens me


class LoginPage(rend.Page):
   def __init__(self, name):
     rend.Page.__init__(self)
     self.name = name

   docFactory = loaders.stan(
     tags.html[
     tags.head[tags.title["Not Logged In"]],
     tags.body[
     tags.form(action=url.root.child(guard.LOGIN_AVATAR), method='post')[
       tags.table[
         tags.tr[
           tags.td[ "Username:" ],
           tags.td[ tags.input(type='text',name='username') ],
         ],
         tags.tr[
           tags.td[ "Password:" ],
           tags.td[ tags.input(type='password',name='password') ],
         ]
       ],
     tags.input(type='submit')
   ]
   ]
   ]
   )

From andy at thecablelounge.com  Tue Feb 22 05:05:20 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue Feb 22 05:05:30 2005
Subject: [Twisted-web] Newov Login Forward
In-Reply-To: <421AE6AE.80400@shechen.at>
References: <421AE6AE.80400@shechen.at>
Message-ID: <421B2000.5010105@thecablelounge.com>

noema wrote:

> I think an answer to the following issue could be useful for many 
> people: (1) When I have a login page resource like the one listed here 
> how can I return another page than the root one? (2) How can I return a 
> certain page resource depending on the username?

G'day Noema,

Have a look a guarded.py in the examples directory.  Guard uses the 
realm you've associated with your site's portal to determine which 
object represents your site's root page.

Until the user logs in, guard requests an avatar for the 
checkers.ANONYMOUS user - so your realm usually returns a login page for 
this user.  When a user successfully authenticates themselves with 
guard, guard will ask your realm for an object that matches the user's 
userid.

So for 1/ - arrange for your sites realm to return the new root page 
once you have an authenticated userid

for 2/ I'd approach this using components and adaptors.  Represent each 
user type as an implementation of an interface for that user type - for 
example you might have IUser and IUserAdmin.  Then create adaptors from 
the IUser interface to nevow.IResource and IUserAdmin to nevow.IResource.

Your realm can then simply return a user object which is either an 
implementation of IUser or IUserAdmin - and the correct page will be drawn.

These links might be useful:

http://twistedmatrix.com/documents/current/howto/cred
http://twistedmatrix.com/documents/current/howto/components

Hoping I haven't missed what you've actually asked :)

Andy.




From shamrin at gmail.com  Tue Feb 22 06:38:53 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Tue Feb 22 06:39:28 2005
Subject: [Twisted-web] Bugs in Nevow documentation
In-Reply-To: <1108987765.6685.44.camel@localhost.localdomain>
References: <28d42ea705022017234fa561e3@mail.gmail.com>
	<1108987765.6685.44.camel@localhost.localdomain>
Message-ID: <28d42ea705022205384675a767@mail.gmail.com>

Hello!

Thank you for your answer.

While reading further, I have found two other problems in the
documentation and described them in roundup as issues 158 and 159:

http://divmod.org/users/roundup.twistd/nevow/issue158
http://divmod.org/users/roundup.twistd/nevow/issue159

There is also an attached patch for an issue 158.

P.S. Is it okay to mention about the roundup issues here? Should I had
to wait patiently while someone in charge will find the issues I've
created?

On Mon, 21 Feb 2005 12:09:25 +0000, Matt Goodall <matt@pollenation.net> wrote:
> On Mon, 2005-02-21 at 04:23 +0300, Alexey Shamrin wrote:
> > Hello!
> >
> > I am currently reading the new Nevow documentation in order to learn
> > it. It's nice, thank you! Who is the author?
> >
> > I have found a typo there. Go to the nevow-traversal.txt, class
> > Documentation example and look at the following line:
> >
> > fullpath = os.path.join(self, name)
> >
> > It must be:
> >
> > fullpath = os.path.join(self.directory, name)
> 
> Thanks, fixed in svn trunk.
> 
> >
> > And I also want to mention the fact that there are lots of places in
> > the docs where the author misses import statements. It must be pretty
> > obvious where this places a, so I wouldn't list this places here...
> >
> > P.S. Is posting to this mailing list the right way to report the bugs?
> > Is it required to prepare a diff?
> 
> There is also the roundup tracker. A diff would be great if you can
> produce one.
> 
> Cheers, Matt

-- 
Best regards,
Alexey.

From mailinglists at shechen.at  Tue Feb 22 13:18:30 2005
From: mailinglists at shechen.at (noema)
Date: Tue Feb 22 13:19:04 2005
Subject: [Twisted-web] Newov Login Forward
In-Reply-To: <421B2000.5010105@thecablelounge.com>
References: <421AE6AE.80400@shechen.at> <421B2000.5010105@thecablelounge.com>
Message-ID: <421B9396.3070009@shechen.at>


> Until the user logs in, guard requests an avatar for the 
> checkers.ANONYMOUS user - so your realm usually returns a login page for 
> this user.  When a user successfully authenticates themselves with 
> guard, guard will ask your realm for an object that matches the user's 
> userid.
> 
> So for 1/ - arrange for your sites realm to return the new root page 
> once you have an authenticated userid

Thanks Andy for the speedy answer,

I see what you mean. Your reply got me thinking in the right 
direction...but first let me elaborate on what exactly I intent to do.

I kind of want to preseerve the tree structure so one can see the 
current location in the url field -- e.g a user's home directory should 
always be /user/username. Processing a different RootPage(rend.Page) 
depending on which user has logged is almost like remounting root to the 
user's home dir on linux. In my case I would just want to move deeper 
into the dir tree to a certain home dir.

The idea I cam up with is: If I just rewrite the request object (meaning 
the url path segments) in requestAvatar() I should get exactly the 
result I am looking for. The question now is how do I get my hands on 
the request object in requestAvatar().

#noema


From smadim2 at grads.ece.mcmaster.ca  Tue Feb 22 18:10:35 2005
From: smadim2 at grads.ece.mcmaster.ca (M.N.A.Smadi)
Date: Tue Feb 22 18:10:41 2005
Subject: [Twisted-web] Problem running finger program
Message-ID: <421BD80B.30908@grads.ece.mcmaster.ca>

hi;

i have installed twisted and i know it is working fine because i can run 
shtoom (which uses twisted).  Am trying to use some of the classes to 
right my own program.  I started with the finger tutorial.  I downloaded 
the example  from:
http://twistedmatrix.com/documents/current/howto/tutorial/listings/finger/finger11.py

then did
twistd -ny finger11.py
at the command line, the thing ran, but am not sure what is a good way 
to test it? I am fingering a user locally but that is always returning 
something regardless of the finger11.py program is running or not.  Any 
hints please?



thanks
m. smadi

From andy at thecablelounge.com  Tue Feb 22 19:02:27 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue Feb 22 19:02:34 2005
Subject: [Twisted-web] Newov Login Forward
In-Reply-To: <421B9396.3070009@shechen.at>
References: <421AE6AE.80400@shechen.at> <421B2000.5010105@thecablelounge.com>
	<421B9396.3070009@shechen.at>
Message-ID: <421BE433.7010606@thecablelounge.com>

noema wrote:

> I kind of want to preseerve the tree structure so one can see the 
> current location in the url field -- e.g a user's home directory should 
> always be /user/username. Processing a different RootPage(rend.Page) 
> depending on which user has logged is almost like remounting root to the 
> user's home dir on linux. In my case I would just want to move deeper 
> into the dir tree to a certain home dir.

Your analogy is a good one and in imo highlights the strength of 
cred/guard's way of doing things.

In a tradional web app your functionality is available through urls to 
files that offer that functionality.  Since your file structure is fixed 
all functionality must always be exposed via urls and your files have to 
have a bunch of if statements to modify or turn off functionality as 
required.

You also have to handle a lot more cases:

once a user logs in, when they go to / (the login page) do they still 
see the same login page, or a page saying you've logged in, or (i think 
this is the one your after?) should they be redirected to /user/username.

If they go to the url /user/boss but are logged in as /user/username how 
should this be handled?

Difficult to ensure you've got it right and haven't left a hole.

With cred - your application does everything through an avatar - and 
like a chroot you've got a certain guarantee of security since if the 
user is not allowed to do something, their avatar should simply be 
physically incapable of doing it - no if statements ..

If your ok with the above, but still wanted the /user/username for 
cosmetics, you could have the realm return a page which redirects itself 
and all children not /user/username to /user/username and sets up a 
child /user/username that does the meat ?

There's probably a better way of pulling that off though?

Otherwise your likely looking at dropping guard and always having the 
same site tree with if statements at the nodes controlling behaviour 
whether the user is logged in or not / type of user  ...

Andy.

From fog at initd.org  Wed Feb 23 05:54:25 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Wed Feb 23 05:55:21 2005
Subject: [Twisted-web] problems with data_XXX in formless templates
Message-ID: <1109163265.3034.33.camel@lana.initd.org>

Hi,

I am having some problems using nevow:data attributes inside a formless
managed form. I want to extract some data from a database and show it at
the beginning of the form and IMHO, nevow:data is the Right Way (TM) but
unfortunately nevow tries to pass the current configurable as the 'data'
parameter to my data_XXX methods and:

nevow.accessors.NoAccessor: <MethodBinding submitted=Method at
0x4229164c> does not implement IContainer, and there is no registered
adapter.

Right now I am using a render_XXX method that does not suffer from the
same problem but I find this limitation quite frustrating. Or, maybe, I
am missing something (again :)

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog@debian.org
INIT.D Developer                                           fog@initd.org
  Se consideri l'uso del software libero una concessione tu stesso,
   come potrai proporla agli altri?                         -- Nick Name
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050223/ca997b8b/attachment.bin
From tv at twistedmatrix.com  Wed Feb 23 05:59:53 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed Feb 23 06:00:28 2005
Subject: [Twisted-web] Problem running finger program
In-Reply-To: <421BD80B.30908@grads.ece.mcmaster.ca>
References: <421BD80B.30908@grads.ece.mcmaster.ca>
Message-ID: <421C7E49.9030004@twistedmatrix.com>

M.N.A.Smadi wrote:
> then did
> twistd -ny finger11.py
> at the command line, the thing ran, but am not sure what is a good way 
> to test it? I am fingering a user locally but that is always returning 
> something regardless of the finger11.py program is running or not.  Any 
> hints please?

Try "finger foo@localhost"

From tv at twistedmatrix.com  Wed Feb 23 06:03:09 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed Feb 23 06:03:41 2005
Subject: [Twisted-web] Newov Login Forward
In-Reply-To: <421BE433.7010606@thecablelounge.com>
References: <421AE6AE.80400@shechen.at>
	<421B2000.5010105@thecablelounge.com>	<421B9396.3070009@shechen.at>
	<421BE433.7010606@thecablelounge.com>
Message-ID: <421C7F0D.5060001@twistedmatrix.com>

Andy Gayton wrote:
> Otherwise your likely looking at dropping guard and always having the 
> same site tree with if statements at the nodes controlling behaviour 
> whether the user is logged in or not / type of user  ...

I wouldn't recommend _dropping_ guard, even in that case.
Twisted sandbox/tv/newlyguarded.nevow-issue59 with the following patch
is an example of using guard, but only making certain resources secret.

Index: login.py
===================================================================
--- login.py    (revision 12804)
+++ login.py    (working copy)
@@ -56,7 +56,7 @@
      def render_form(self, context, data):
          request = context.locate(inevow.IRequest)
          current = url.URL.fromRequest(request)
-        root = request.getComponent(inevow.ISessionRoot)
+        root = url.URL.fromString(request.getRootURL())
          action = getActionURL(current, root)
          context.fillSlots('action-url', str(action))
          return context.tag

From tv at twistedmatrix.com  Wed Feb 23 06:04:18 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed Feb 23 06:04:51 2005
Subject: [Twisted-web] problems with data_XXX in formless templates
In-Reply-To: <1109163265.3034.33.camel@lana.initd.org>
References: <1109163265.3034.33.camel@lana.initd.org>
Message-ID: <421C7F52.8060007@twistedmatrix.com>

Federico Di Gregorio wrote:
> nevow.accessors.NoAccessor: <MethodBinding submitted=Method at
> 0x4229164c> does not implement IContainer, and there is no registered
> adapter.

Anytime you see an error message about IContainer, that probably means
you have nested n:datas where you did not want them to be nested.

From chch at kit.tomsk.ru  Wed Feb 23 06:09:47 2005
From: chch at kit.tomsk.ru (Andrey Chichak)
Date: Wed Feb 23 06:09:53 2005
Subject: [Twisted-web] better PHP support
Message-ID: <421C809B.7050709@kit.tomsk.ru>

Good day !

What about adding FCGI functionality into twisted, it will be better for 
migrating (or building dual twisted-php) servers. In CGI mode load is to 
high.

One more : for PHP environment variable "DOCUMENT_ROOT" is often used - 
it means root of PHP project.

I'm new in twisted and can't add this self.
Maybe twisted community can help me?

Andrey Chichak.

From mszumocki at contman.pl  Wed Feb 23 06:20:01 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Wed Feb 23 06:23:14 2005
Subject: [Twisted-web] Shutting down server via web-request with nice status
	page
In-Reply-To: <E1D3aGA-0003ws-03@pyramid.twistedmatrix.com>
Message-ID: <20050223142001.b028ce68@poczta.contman.pl>

Hello, 

 I have question about how does reactor.stop() work with Nevow.
I have a simple web server (in twisted/nevow) that does something in background, and
there's a page that's supposed to close the server gracefully. I would like the request
to be served this way:
 - client sends the request (opens the page in browser)
 - he gets half-finished page with something like "Shutting down..."
 - server does some possibly time-confusing stuff then sends "Finished" completing the page
 - server stops
I'm pretty new to both twisted and nevow, and this is what i've come up so far quickly.
Surprisingly, it works to some extent, as in server does indeed stop, but i'm looking for 
a way to make it non-blocking, so other client who connect in the same time would get
alternative page with "server closing down" message.

class Terminate(rend.Page):
    """
    Rendering this resource will stop the import process if it's running, then save current
    state and configuration and gracefully shutdown import server
    """

    NAME = 'Terminating server'

    docFactory = loaders.stan(
        html[
            head[page_title(NAME)],
            body[
                main_header(NAME, url.root),
                ul(data = directive('execute'), render=directive("sequence"))[
                    li(pattern='item')[span(render=directive("string")), "... "],
                ],
                hr,
                h2['Server stopped'],
                ]
            ]
    )

    def data_execute(self, context, data):
        if work.running():
            yield "Stopping import process"
            work.stop()
        yield "Saving configuration"
        work.save()
        yield "Shutting down"
        work.terminate()
        yield "Done."

work.terminate() simply calls reactor.stop() at the moment. work.stop() and work.save() are the parts
of blocking code - i intentd to rewrite them to either work in thread or by using deferreds (assuming i manage to
figure out how do deferreds work exactly ;) 
Could you please give me some ideas as to how should data_execute method look to achieve effect i want?

Maciej Szumocki


From fog at initd.org  Wed Feb 23 07:33:52 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Wed Feb 23 07:34:45 2005
Subject: [Twisted-web] problems with data_XXX in formless templates
In-Reply-To: <421C7F52.8060007@twistedmatrix.com>
References: <1109163265.3034.33.camel@lana.initd.org>
	<421C7F52.8060007@twistedmatrix.com>
Message-ID: <1109169232.3034.42.camel@lana.initd.org>

Il giorno mer, 23-02-2005 alle 15:04 +0200, Tommi Virtanen ha scritto:
> Federico Di Gregorio wrote:
> > nevow.accessors.NoAccessor: <MethodBinding submitted=Method at
> > 0x4229164c> does not implement IContainer, and there is no registered
> > adapter.
> 
> Anytime you see an error message about IContainer, that probably means
> you have nested n:datas where you did not want them to be nested.

There are no nested n:data (I did not wanted them nested :) Next step?

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog@debian.org
INIT.D Developer                                           fog@initd.org
  There are 10 types of people in this world, those that understand
   binary, and those that don't.                   -- Michael Gittelsohn
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050223/52d9abaf/attachment.bin
From dp at ulaluma.com  Wed Feb 23 07:51:10 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Feb 23 07:51:15 2005
Subject: [Twisted-web] problems with data_XXX in formless templates
In-Reply-To: <1109169232.3034.42.camel@lana.initd.org>
References: <1109163265.3034.33.camel@lana.initd.org>
	<421C7F52.8060007@twistedmatrix.com>
	<1109169232.3034.42.camel@lana.initd.org>
Message-ID: <9ba7c5d486f72491d38acb9cdcf0f793@ulaluma.com>


On Feb 23, 2005, at 6:33 AM, Federico Di Gregorio wrote:

> Il giorno mer, 23-02-2005 alle 15:04 +0200, Tommi Virtanen ha scritto:
>> Federico Di Gregorio wrote:
>>> nevow.accessors.NoAccessor: <MethodBinding submitted=Method at
>>> 0x4229164c> does not implement IContainer, and there is no registered
>>> adapter.
>>
>> Anytime you see an error message about IContainer, that probably means
>> you have nested n:datas where you did not want them to be nested.
>
> There are no nested n:data (I did not wanted them nested :) Next step?

Well, somehow an instance of MethodBinding is being stuck on the 
context as the IData. I'm pretty sure Nevow won't do this by itself. So 
your job is to figure out why this is happening. Do other data_ methods 
in the page work?

dp


From general at eepatents.com  Wed Feb 23 13:41:10 2005
From: general at eepatents.com (Ed Suominen)
Date: Wed Feb 23 13:40:53 2005
Subject: [Twisted-web] Fwd: Re: [Ossri] data collection
Message-ID: <200502231241.10319.general@eepatents.com>

Thought this might be of interest as a use case.

---
Ed Suominen
Registered Patent Agent
Open-Source Software Author (yes, both...)
Web Site: http://www.eepatents.com

----------  Forwarded Message  ----------

Subject: Re: [Ossri] data collection (WAS: dual-thread processors)
Date: Wednesday 23 February 2005 12:36 pm
From: Ed Suominen <general@eepatents.com>
To: ossri@harvee.org

Joe, that is a great idea!

I could run the site, as my server is Python-based (using the
Twisted/Nevow packages) and it very flexible. I've already got
something running that involves registered users logging in and
uploading and downloading binary files (PDFs of documents) to and from
a MySQL database. Tying the binaries to user IDs and transcripted text
would be very straightforward. I couldn't do much work in it for
another month or so, though.

On Wednesday 23 February 2005 12:25 pm, Joe Phillips wrote:
> On Wed, 2005-02-23 at 15:05 -0500, Willie Walker wrote:
> > To make Sphinx-4 really viable for
> > desktop dictation, we'll need to get some better data than
> > can be obtained from the Linguistic Data Consortium (LDC).
> > This, of course, could be something where the open source
> > community can really shine - for the acoustic models, we just
> > need hours and hours of transcribed audio (e.g., "a1.wav
> > contains the words 'now is the time for all good people to
> > come to the aid of sphinx'")
>
> I think the opensource community would be great for data generation.
>
> Can/will anyone setup a site to expedite data collection?  Perhaps
> this is where OSSRI can contribute?  Say... upload a WAV, upload a
> transcription and include some sort of web of trust where a
> transcription isn't official until some other users approve it.
> The website should at least document transcription style and format
> for those of us who would like to contribute but cannot in some more
> technical way.
>
> I for one would be happy to contribute recordings and transcriptions
> of myself if I knew the data would be put to good use in sphinx.
>
> Willie, can you expand on what would be most useful to improving
> sphinx?
>
> -joe

_______________________________________________
Ossri mailing list
Ossri@harvee.org
http://harvee.org/mailman/listinfo/ossri

-------------------------------------------------------

From fog at initd.org  Wed Feb 23 17:03:18 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Wed Feb 23 17:01:41 2005
Subject: [Twisted-web] problems with data_XXX in formless templates
In-Reply-To: <9ba7c5d486f72491d38acb9cdcf0f793@ulaluma.com>
References: <1109163265.3034.33.camel@lana.initd.org>
	<421C7F52.8060007@twistedmatrix.com>
	<1109169232.3034.42.camel@lana.initd.org>
	<9ba7c5d486f72491d38acb9cdcf0f793@ulaluma.com>
Message-ID: <1109203398.12872.2.camel@iris>

Il giorno mer, 23-02-2005 alle 06:51 -0800, Donovan Preston ha scritto:
> Well, somehow an instance of MethodBinding is being stuck on the 
> context as the IData. I'm pretty sure Nevow won't do this by itself. So 
> your job is to figure out why this is happening. Do other data_ methods 
> in the page work?

I don't understand exactly what you're saying. You mean that my code is
sticking the MethodBinding instance on the context? Anyway, I wrote a
very simple tac that exposes the problem (to make it easier understand
what's happening.) Maybe you'd like to have a look at it. The tarball
with the tac and two xml templates is just 1.2Kb so I am attaching it to
this email. :)

federico

-------------- next part --------------
A non-text attachment was scrubbed...
Name: doesnotwork.tar.gz
Type: application/x-compressed-tar
Size: 1319 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050224/b07fc1bd/doesnotwork.tar.bin
From tv at twistedmatrix.com  Thu Feb 24 00:41:07 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu Feb 24 00:41:44 2005
Subject: [Twisted-web] problems with data_XXX in formless templates
In-Reply-To: <1109203398.12872.2.camel@iris>
References: <1109163265.3034.33.camel@lana.initd.org>	<421C7F52.8060007@twistedmatrix.com>	<1109169232.3034.42.camel@lana.initd.org>	<9ba7c5d486f72491d38acb9cdcf0f793@ulaluma.com>
	<1109203398.12872.2.camel@iris>
Message-ID: <421D8513.8010304@twistedmatrix.com>

Federico Di Gregorio wrote:
> Il giorno mer, 23-02-2005 alle 06:51 -0800, Donovan Preston ha scritto:
> 
>>Well, somehow an instance of MethodBinding is being stuck on the 
>>context as the IData. I'm pretty sure Nevow won't do this by itself. So 
>>your job is to figure out why this is happening. Do other data_ methods 
>>in the page work?
> 
> 
> I don't understand exactly what you're saying. You mean that my code is
> sticking the MethodBinding instance on the context? Anyway, I wrote a
> very simple tac that exposes the problem (to make it easier understand
> what's happening.) Maybe you'd like to have a look at it. The tarball
> with the tac and two xml templates is just 1.2Kb so I am attaching it to
> this email. :)

It all seems to relate to using n:data inside the webform.renderForms
pattern. Don't know what the real problem with that is, or how to fix
it. If you don't get a more helpful reply from someone else within a
few days, please file a bug report:
http://divmod.org/users/roundup.twistd/nevow/

A workaround is to do the data and render outside of the template.
Slots are one possibility, see attachment.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: workaround.diff
Type: text/x-patch
Size: 1308 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050224/75bc71a8/workaround.bin
From fog at initd.org  Thu Feb 24 01:55:53 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Thu Feb 24 01:55:59 2005
Subject: [Twisted-web] problems with data_XXX in formless templates
In-Reply-To: <421D8513.8010304@twistedmatrix.com>
References: <1109163265.3034.33.camel@lana.initd.org>
	<421C7F52.8060007@twistedmatrix.com>
	<1109169232.3034.42.camel@lana.initd.org>
	<9ba7c5d486f72491d38acb9cdcf0f793@ulaluma.com>
	<1109203398.12872.2.camel@iris>  <421D8513.8010304@twistedmatrix.com>
Message-ID: <1109235353.3053.13.camel@lana.initd.org>

Il giorno gio, 24-02-2005 alle 09:41 +0200, Tommi Virtanen ha scritto:
> It all seems to relate to using n:data inside the webform.renderForms
> pattern. Don't know what the real problem with that is, or how to fix
> it. If you don't get a more helpful reply from someone else within a
> few days, please file a bug report:
> http://divmod.org/users/roundup.twistd/nevow/

I modified nevow a little bit to spit out debug information and it seems
that it is the generic flatten code that puts the MethodBinding instance
in the context as IData, not the formless code. I'll post some more
information after the nice-afternoon-debugging-session.

Btw, would make sense to have ctx.remember actually check that the given
adapter really support the interfaces it is rememberd for?

> A workaround is to do the data and render outside of the template.
> Slots are one possibility, see attachment.

You workaround is fine right now but, unfortunately, remove one level of
abstraction from what I am trying to do. Using slots means you have to
*explicitly* put in one of the render methods the slot filling code
while using data and (for example) a dict renderer makes possible to
write only one method and put the rendering in the template (I better
like to put simple rendering in the template.)

Thank you very much!
federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog@debian.org
INIT.D Developer                                           fog@initd.org
                             Best friends are often failed lovers. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050224/9b380ac3/attachment.bin
From dp at ulaluma.com  Thu Feb 24 08:28:50 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Thu Feb 24 08:28:53 2005
Subject: [Twisted-web] problems with data_XXX in formless templates
In-Reply-To: <1109235353.3053.13.camel@lana.initd.org>
References: <1109163265.3034.33.camel@lana.initd.org>
	<421C7F52.8060007@twistedmatrix.com>
	<1109169232.3034.42.camel@lana.initd.org>
	<9ba7c5d486f72491d38acb9cdcf0f793@ulaluma.com>
	<1109203398.12872.2.camel@iris>
	<421D8513.8010304@twistedmatrix.com>
	<1109235353.3053.13.camel@lana.initd.org>
Message-ID: <0867d45748fc30547b460d6fa84a1cef@ulaluma.com>


On Feb 24, 2005, at 12:55 AM, Federico Di Gregorio wrote:
>
> Btw, would make sense to have ctx.remember actually check that the 
> given
> adapter really support the interfaces it is rememberd for?

*Every* python object is said to implement IData. It is merely a marker 
interface. Not every IData is required to implement IContainer, 
although if IContainer is not implemented then problems like this one 
occur if you try to use data directives.

It might make sense to check for other interfaces, but I'm -0 on the 
idea.

dp


From fog at initd.org  Thu Feb 24 09:01:51 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Thu Feb 24 08:51:15 2005
Subject: [Twisted-web] problems with data_XXX in formless templates
In-Reply-To: <0867d45748fc30547b460d6fa84a1cef@ulaluma.com>
References: <1109163265.3034.33.camel@lana.initd.org>
	<421C7F52.8060007@twistedmatrix.com>
	<1109169232.3034.42.camel@lana.initd.org>
	<9ba7c5d486f72491d38acb9cdcf0f793@ulaluma.com>
	<1109203398.12872.2.camel@iris>
	<421D8513.8010304@twistedmatrix.com>
	<1109235353.3053.13.camel@lana.initd.org>
	<0867d45748fc30547b460d6fa84a1cef@ulaluma.com>
Message-ID: <20050224160151.GA14839@initd.org>

On Thu, Feb 24, 2005 at 07:28:50AM -0800, Donovan Preston wrote:
> >Btw, would make sense to have ctx.remember actually check that the 
> >given adapter really support the interfaces it is rememberd for?
> 
> *Every* python object is said to implement IData. It is merely a marker 
> interface. Not every IData is required to implement IContainer, 
> although if IContainer is not implemented then problems like this one 
> occur if you try to use data directives.
> 
> It might make sense to check for other interfaces, but I'm -0 on the 
> idea.

I understand. Probably there are also other cases of an interface used
just as a marker without a real request on the remembered object to
implement it.

About my problem: it would be that bad to have MethodBinding implement
IContainer? Or it is an error of the data directive trying to adapt
to IContainer every object remembered as IData? I am a little bit
confused about the data directive/IData/IContainer stuff and how it
is supposed to work.

federico

From gmane at goldenspud.com  Thu Feb 24 20:32:16 2005
From: gmane at goldenspud.com (Matthew Scott)
Date: Thu Feb 24 20:34:29 2005
Subject: [Twisted-web] Re: when formless is useless (II)
In-Reply-To: <1108324919.3098.11.camel@lana.initd.org>
References: <1108324919.3098.11.camel@lana.initd.org>
Message-ID: <421E9C40.7070007@goldenspud.com>

Federico Di Gregorio wrote:
> Please, forget about my previous mail. I found a way to do what I was
> looking for. I just need to use *both* a template and a slot for every
> "argument!!foo". Sorry for having increased the noise-to-signal ratio.
> (Maybe documenting this somewhere would be nice..)

We're running into the same issue you did, I think;  however my Nevow 
knowledge isn't quite to the point I would like it to be as of yet, so 
I'm not quite sure how to translate this message into a concrete 
solution in the form of Python code.

If you have the opportunity, could post a small "canonical" example of 
what you did to solve this problem (one form containing multiple sets of 
fields within fieldset tags)?  It would serve nicely as the 
documentation that you made mention of ;-)

Thanks,

-- 
Matthew R. Scott


From upadhyay at gmail.com  Fri Feb 25 00:09:05 2005
From: upadhyay at gmail.com (Amit Upadhyay)
Date: Fri Feb 25 00:09:39 2005
Subject: [Twisted-web] nevow: rend.htmlfile not found
Message-ID: <349edb38050224230940aa9b8b@mail.gmail.com>

Hello all,

I recently started exploring twisted.web, and there I got suggestion
for using woven/nevow. I downloaded 0.3.0 from nevow.com, and examples
from http://nevow.com/Nevow2004Tutorial.html.

loc Example4]$ twistd -noy sched.tac 
2005/02/25 07:14 CST [-] Log opened.
2005/02/25 07:14 CST [-] twistd 1.3.0rc1 (/usr/bin/python 2.3.4) starting up
2005/02/25 07:14 CST [-] reactor class: twisted.internet.default.SelectReactor
2005/02/25 07:14 CST [-] Loading sched.tac...
2005/02/25 07:14 CST [-] Traceback (most recent call last):
2005/02/25 07:14 CST [-]   File
"/usr/lib/python2.3/site-packages/twisted/application/app.py", line
118, in getApplication
2005/02/25 07:14 CST [-]     application =
service.loadApplication(filename, style, passphrase)
2005/02/25 07:14 CST [-]   File
"/usr/lib/python2.3/site-packages/twisted/application/service.py",
line 319, in loadApplication
2005/02/25 07:14 CST [-]     application =
sob.loadValueFromFile(filename, 'application', passphrase)
2005/02/25 07:14 CST [-]   File
"/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 213,
in loadValueFromFile
2005/02/25 07:14 CST [-]     exec data in d, d
2005/02/25 07:14 CST [-]   File "<string>", line 5, in ?
2005/02/25 07:14 CST [-]   File "./schedule.py", line 12, in ?
2005/02/25 07:14 CST [-]     class ScheduleRoot(rend.Page):
2005/02/25 07:14 CST [-]   File "./schedule.py", line 13, in ScheduleRoot
2005/02/25 07:14 CST [-]     docFactory = rend.htmlfile('Month.html')
2005/02/25 07:14 CST [-] AttributeError: 'module' object has no
attribute 'htmlfile'
2005/02/25 07:14 CST [-] Failed to load application: 'module' object
has no attribute 'htmlfile'
2005/02/25 07:14 CST [-] Traceback (most recent call last):
          File "/usr/bin/twistd", line 36, in ?
            run()
          File "/usr/lib/python2.3/site-packages/twisted/scripts/twistd.py",
line 184, in run
            app.run(runApp, ServerOptions)
          File "/usr/lib/python2.3/site-packages/twisted/application/app.py",
line 205, in run
            runApp(config)
          File "/usr/lib/python2.3/site-packages/twisted/scripts/twistd.py",
line 174, in runApp
            application = app.getApplication(config, passphrase)
        --- <exception caught here> ---
          File "/usr/lib/python2.3/site-packages/twisted/application/app.py",
line 118, in getApplication
            application = service.loadApplication(filename, style, passphrase)
          File "/usr/lib/python2.3/site-packages/twisted/application/service.py",
line 319, in loadApplication
            application = sob.loadValueFromFile(filename,
'application', passphrase)
          File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py",
line 213, in loadValueFromFile
            exec data in d, d
          File "<string>", line 5, in ?
            
          File "./schedule.py", line 12, in ?
            class ScheduleRoot(rend.Page):
          File "./schedule.py", line 13, in ScheduleRoot
            docFactory = rend.htmlfile('Month.html')
        exceptions.AttributeError: 'module' object has no attribute 'htmlfile'


Failed to load application: 'module' object has no attribute 'htmlfile'
2005/02/25 07:14 CST [-] 

-----------------------------------------------------------------------------------------


And it seems there is no htmlfile member in nevow.rend.

loc Example4]$ python
Python 2.3.4 (#1, Oct 26 2004, 16:42:40) 
[GCC 3.4.2 20041017 (Red Hat 3.4.2-6.fc3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> from nevow import rend
>>> dir(rend)
['ChildLookupMixin', 'ConfigurableFactory', 'DataFactory',
'FourOhFour', 'Fragment', 'FreeformChildMixin', 'LiveEvilChildMixin',
'NodeNotFound', 'NotFound', 'Page', 'PageContext', 'RenderFactory',
'RequestContext', 'StringIO', 'WovenContext', '_CARRYOVER',
'__builtins__', '__doc__', '__file__', '__name__', 'compy',
'defaultsFactory', 'errorsFactory', 'flat', 'formless', 'handFactory',
'iformless', 'inevow', 'log', 'mapping', 'now', 'originalFactory',
'os', 'sequence', 'statusFactory', 'tags', 'traceback', 'urllib',
'util', 'warnings']
>>> 

What am I doing wrong? How do I get the example running?

TIA,
 
-- 
Amit Upadhyay
Blog: http://www.rootshell.be/~upadhyay
+91-9820-859-701

From tv at twistedmatrix.com  Fri Feb 25 01:05:02 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri Feb 25 01:05:41 2005
Subject: [Twisted-web] nevow: rend.htmlfile not found
In-Reply-To: <349edb38050224230940aa9b8b@mail.gmail.com>
References: <349edb38050224230940aa9b8b@mail.gmail.com>
Message-ID: <421EDC2E.7080602@twistedmatrix.com>

Amit Upadhyay wrote:
> And it seems there is no htmlfile member in nevow.rend.

Please learn grep.

nevow.loaders.htmlfile

From upadhyay at gmail.com  Fri Feb 25 01:08:56 2005
From: upadhyay at gmail.com (Amit Upadhyay)
Date: Fri Feb 25 01:09:33 2005
Subject: [Twisted-web] nevow: rend.htmlfile not found
In-Reply-To: <421EDC2E.7080602@twistedmatrix.com>
References: <349edb38050224230940aa9b8b@mail.gmail.com>
	<421EDC2E.7080602@twistedmatrix.com>
Message-ID: <349edb380502250008606ebf63@mail.gmail.com>

Thanks, 

Also I found: getting the latest source using "svn co
svn://divmod.org/svn/Nevow/trunk Nevow" and running the examples.tac
from the examples directory; more useful than following the tutorial
as a beginner.


On Fri, 25 Feb 2005 10:05:02 +0200, Tommi Virtanen <tv@twistedmatrix.com> wrote:
> Amit Upadhyay wrote:
> > And it seems there is no htmlfile member in nevow.rend.
> 
> Please learn grep.
> 
> nevow.loaders.htmlfile
> 


-- 
Amit Upadhyay
Blog: http://www.rootshell.be/~upadhyay
+91-9820-859-701

From jbauer at rubic.com  Fri Feb 25 07:06:42 2005
From: jbauer at rubic.com (Jeff Bauer)
Date: Fri Feb 25 07:07:23 2005
Subject: [Twisted-web] nevow: rend.htmlfile not found
In-Reply-To: <349edb380502250008606ebf63@mail.gmail.com>
References: <349edb38050224230940aa9b8b@mail.gmail.com>	<421EDC2E.7080602@twistedmatrix.com>
	<349edb380502250008606ebf63@mail.gmail.com>
Message-ID: <421F30F2.3060408@rubic.com>

Amit Upadhyay wrote:
> Also I found: getting the latest source using "svn co
> svn://divmod.org/svn/Nevow/trunk Nevow" and running the examples.tac
> from the examples directory; more useful than following the tutorial
> as a beginner.

Amit,

Check out my efforts at learning Nevow:

http://divmod.org/users/wiki.twistd/nevow/moin.cgi/MeLearnNevow

Please feel free to supplement my comments there.

-Jeff

From upadhyay at gmail.com  Fri Feb 25 07:44:26 2005
From: upadhyay at gmail.com (Amit Upadhyay)
Date: Fri Feb 25 07:44:58 2005
Subject: [Twisted-web] nevow: rend.htmlfile not found
In-Reply-To: <421F30F2.3060408@rubic.com>
References: <349edb38050224230940aa9b8b@mail.gmail.com>
	<421EDC2E.7080602@twistedmatrix.com>
	<349edb380502250008606ebf63@mail.gmail.com>
	<421F30F2.3060408@rubic.com>
Message-ID: <349edb38050225064441c501ba@mail.gmail.com>

> Check out my efforts at learning Nevow:
> 
> http://divmod.org/users/wiki.twistd/nevow/moin.cgi/MeLearnNevow
> 
> Please feel free to supplement my comments there.

Thanks for the link Jeff, it was quite helpful to me. Also it would be
great if you could also include a simple form processing example, or I
will do it once I spend sometime understanding it.

-- 
Amit Upadhyay
Blog: http://www.rootshell.be/~upadhyay
+91-9820-859-701

From fog at initd.org  Fri Feb 25 18:16:36 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Fri Feb 25 18:14:52 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
Message-ID: <1109380596.11601.15.camel@iris>

Hi all,

I don't know if this is a known problem or the way it is supposed to
work but the following code results in a "lost" liveevil handler:

class Blah(rend.Page):
    def render_blah(self, ctx, data):
        def do_something(client):
            client.alert("You will never see this message!")
        return ctx.tag.clear()[T.span(
            onclick=liveevil.handler(do_something))["Click me"]]

The do_something is not recognized as a closure (actually it is not :)
so its "path" is saved away as module.do_something and does not get
resolved at call time. I know about the identifier keyword something
about it should probably be added to the docs. Maybe is would be even
better (and safer) to remove the reflect part and use only the events.

federico



From mailinglists at shechen.at  Fri Feb 25 22:47:39 2005
From: mailinglists at shechen.at (noema)
Date: Fri Feb 25 22:48:12 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <1109380596.11601.15.camel@iris>
References: <1109380596.11601.15.camel@iris>
Message-ID: <42200D7B.40303@shechen.at>



I think I encountered similar symptoms once and after quite some time of 
confusion I concluded that it must have to do with python's garbage 
collector. It seemed to me that there needs to be something refereced in 
the do_something() method to prevent it from being wiped before the call 
comes back from the client.

In most of my code (like in the following example) I have a referenced 
variable and therefore it works. But I totally agree this behavior 
should be documented otherwise it can be very frustrating.

#noema


This structure works resolves correctly:

class Blah(rend.Page):
     def render_blah(self, ctx, data):
         def do_something(client):
             some_variable
             client.alert("You will never see this message!")
         some_variable = None
         return ctx.tag.clear()[T.span(
             onclick=liveevil.handler(do_something))["Click me"]]



Federico Di Gregorio wrote:
> Hi all,
> 
> I don't know if this is a known problem or the way it is supposed to
> work but the following code results in a "lost" liveevil handler:
> 
> class Blah(rend.Page):
>     def render_blah(self, ctx, data):
>         def do_something(client):
>             client.alert("You will never see this message!")
>         return ctx.tag.clear()[T.span(
>             onclick=liveevil.handler(do_something))["Click me"]]
> 
> The do_something is not recognized as a closure (actually it is not :)
> so its "path" is saved away as module.do_something and does not get
> resolved at call time. I know about the identifier keyword something
> about it should probably be added to the docs. Maybe is would be even
> better (and safer) to remove the reflect part and use only the events.
> 
> federico
> 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 

From sridharinfinity at gmail.com  Sat Feb 26 02:47:23 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Sat Feb 26 02:47:25 2005
Subject: [Twisted-web] Nevow URL trouble
Message-ID: <8816fcf8050226014740f40c4@mail.gmail.com>

I am rewriting wsgi.py in nevow.  I face some problems with the nevow
url module.

Firstly, only guard and rootaccessor uses IRequest.getRootURL()

In twisted the root url is always like http://domain.com/ .  In
non-twisted setups like wsgi, it is not so.  And well, nevow is
designed to work with cgi apps too (nevow-deployment.txt)

Consider this cgi/wsgi/nevow setup:

  http://example.com/cgi-bin/nevowcgi.py/a/b/c

nevowcgi.py will createWSGIApplication and call run_with_cgi. The
wsgi.py module will then use the PATH_INFO environment variable for
request URI (IRequest.uri).  Thus in the above example, IRequest.uri
is '/a/b/c'.  wsgi.py in addition sets the appRootURL to
'http://example.com/cgi-bin/nevowcgi.py/' which is passed from
nevowcgi.py

Lot of code in nevow doesn't use the appRootURL.  For example if
PageC.addSlash is True, the above url will be redirected to
http://example.com/a/b/c/ and not
http://example.com/cgi-bin/nevowcgi.py/a/b/c/ as expected (not the
leading slash)

Because of this reason, I couldn't get wsgi.py work fully.  To fix
some problems (excluding the redirect problem) WSGIRequest.prePathURL
will return the full URL prefixed with appRootURL (which is not the
case with twisted.web.server.Request.prePathURL


-- 
Sridhar Ratna - http://srid.bsdnerds.org

From daverz at gmail.com  Sat Feb 26 19:41:54 2005
From: daverz at gmail.com (Dave Cook)
Date: Sat Feb 26 19:42:27 2005
Subject: [Twisted-web] Problem using 'immutable' attribute in form field.
Message-ID: <7a59f0250502261841451b3e02@mail.gmail.com>

I'd like to use an immutable field for a database row ID:

class IMyForm(annotate.TypedInterface):
    def recording(self,
                  request=annotate.Request(),
                  recording_id=annotate.Integer(label='Recording ID',
                                                immutable=True,
                                                default=999
                                                ),
                  ...
                  ):
        pass
        
    recording = annotate.autocallable(recording, action='Save')

...

Then in my page this is implemented with:

    def recording(self, request, **kw):
         # do stuff with kw

However, if I use 'immutable', kw['recording_id'] is always None.  If
I remove the immutable attribute it works fine, but I don't want the
user editing the row ID.

From sridharinfinity at gmail.com  Sun Feb 27 04:14:47 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Sun Feb 27 04:14:51 2005
Subject: [Twisted-web] Re: Nevow URL trouble
In-Reply-To: <8816fcf8050226014740f40c4@mail.gmail.com>
References: <8816fcf8050226014740f40c4@mail.gmail.com>
Message-ID: <8816fcf805022703145934fa8d@mail.gmail.com>

> I am rewriting wsgi.py in nevow.  I face some problems with the nevow
> url module.
> [snip]
> 

Herewith I am attaching the current wsgi.py

---
# TODO:
#  1. make exception renderer work 

import os, sys, socket, math, time
import cgi # for FieldStorage
import types
from urllib import unquote, quote

from nevow import context, flat, inevow, util
from nevow import __version__ as nevowversion

def log(msg):
    print >>sys.stderr, "WSGI: {%s}" % str(msg)

errorMarker = object()

class NevowWSGISite(object):

    def __init__(self, request, resource):
        self.request = request
        self.resource = resource
        self.context = context.SiteContext()

    def remember(self, obj, inter=None):
        self.context.remember(obj, inter)

    def getPageContextForRequestContext(self, ctx):
        """Retrieve a resource from this site for a particular request. The
        resource will be wrapped in a PageContext which keeps track
        of how the resource was located.
        """
        path = inevow.IRemainingSegments(ctx)
        res = inevow.IResource(self.resource)
        pageContext = context.PageContext(tag=res, parent=ctx)
        return self.handleSegment(
                res.locateChild(pageContext, path),
                ctx.tag, path, pageContext)

    def handleSegment(self, result, request, path, pageContext):
        if result is errorMarker:
            return errorMarker

        newres, newpath = result
        
        # If the child resource is None then display a 404 page
        if newres is None:
            from nevow.rend import FourOhFour
            return context.PageContext(tag=FourOhFour(), parent=pageContext)

        # If we got a deferred then we need to call back later, once the
        # child is actually available.
        #if isinstance(newres, defer.Deferred):
        #    return newres.addCallback(
        #        lambda actualRes: self.handleSegment(
        #            (actualRes, newpath), request, path, pageContext))

        newres = inevow.IResource(newres, persist=True)
        if newres is pageContext.tag:
            assert not newpath is path, "URL traversal cycle detected
when attempting to locateChild %r from resource %r." % (path,
pageContext.tag)
            assert  len(newpath) < len(path), "Infinite loop impending..."

        ## We found a Resource... update the request.prepath and postpath
        for x in xrange(len(path) - len(newpath)):
            request.prepath.append(request.postpath.pop(0))

        ## Create a context object to represent this new resource
        ctx = context.PageContext(tag=newres, parent=pageContext)
        ctx.remember(tuple(request.prepath), inevow.ICurrentSegments)
        ctx.remember(tuple(request.postpath), inevow.IRemainingSegments)

        res = newres
        path = newpath

        if not path:
            return ctx

        return self.handleSegment(
                res.locateChild(ctx, path),
                request, path, ctx)


    
def createWSGIApplication(page, rootURL=None):
    """Given a Page instance, return a WSGI callable.
    `rootURL` - URL to be remembered as root
    """
    page.flattenFactory = flat.iterflatten
    siteCtx = context.SiteContext(tag=None)
    def application(environ, start_response):
        request = WSGIRequest(environ, start_response)
        if rootURL:
            request.rememberRootURL(rootURL)
        site = NevowWSGISite(request, page)
        request.site = site
        result = request.process()
        
        if not request.headersSent:
            request.write('') # send headers now
        if isinstance(result, str):
            yield result
        elif isinstance(result, util.Deferred):
            ## So we can use the wsgi module if twisted is installed
            ## TODO use render synchronously instead maybe? I'm pretty
            ## sure after the application callable returns, the request
            ## is "closed". Investigate with the latest wsgi spec and
            ## some implementations.
            #raise 'PH' + str(dir(result)) + '{{%s}}' % str(result.result)
            yield result.result
        else:
            for x in result:
                yield x
            
    return application

    
# TODO: convert interface comments
class WSGIRequest(object):
    __implements__ = inevow.IRequest,
    """A HTTP request.

    Subclasses should override the process() method to determine how
    the request will be processed.
    
    @ivar method: The HTTP method that was used.
    @ivar uri: The full URI that was requested (includes arguments).
    @ivar path: The path only (arguments not included).
    @ivar args: All of the arguments, including URL and POST arguments.
    @type args: A mapping of strings (the argument names) to lists of values.
                i.e.,
?foo=bar&foo=lf._parseQuery(environ.get('QUERY_STRING', ''))
        for k,v in environ.items():
            if k.startswith('HTTP_'):
                self.received_headers[k[5:].lower()] = v
        self.setResponseCode("200")baz&quux=spam results in
                {'foo': ['bar', 'baz'], 'quux': ['spam']}.
    @ivar received_headers: All received headers
    """

    def __init__(self, environ, start_response):
        self.environ = environ
        self.start_response = start_response
        self.outgoingHeaders = []
        self.received_headers = {}
        self.lastModified = None
        self.etag = None
        self.method = environ.get('REQUEST_METHOD', 'GET')
        self.args = self._parseQuery(environ.get('QUERY_STRING', ''))
        self.host = (self.environ['REMOTE_ADDR'],
int(self.environ['REMOTE_PORT']))
        for k,v in environ.items():
            if k.startswith('HTTP_'):
                self.received_headers[k[5:].lower()] = v
        self.setResponseCode("200")
        self.headersSent = False
        self.appRootURL = None
        self.deferred = util.Deferred()

    def process(self):
        """When a form is POSTed,
        we create a cgi.FieldStorage instance using the data posted,
        and set it as the request.fields attribute. This way, we can
        get at information about filenames and mime-types of
        files that were posted."""
        if self.method == 'POST':
            self.fields = cgi.FieldStorage(
                            self.environ['wsgi.input'],
                            self.received_headers, 
                            environ={'REQUEST_METHOD': 'POST'})

        # set various default headers
        self.setHeader('server', nevowversion)
        year, month, day, hh, mm, ss, wd, y, z = time.gmtime(time.time())
        # HTTP date string format
        s = "%s, %02d %3s %4d %02d:%02d:%02d GMT" % (
                weekdayname[wd],
                day, monthname[month], year,
                hh, mm, ss)
        self.setHeader('date', s)
        self.setHeader('content-type', 'text/html; charset=UTF-8')

        # Resource Identification
        self.prepath = []
        self.postpath = map(unquote, self.path[1:].split('/'))
        self.sitepath = []

        requestContext = context.RequestContext(
            parent=self.site.context, tag=self)
        requestContext.remember( (), inevow.ICurrentSegments)
        requestContext.remember(tuple(self.postpath), inevow.IRemainingSegments)

        pageContext = self.site.getPageContextForRequestContext(requestContext)

        return self.gotPageContext(pageContext)

    def gotPageContext(self, pageContext):
        if pageContext is errorMarker:
            return None
        html = pageContext.tag.renderHTTP(pageContext)
        if isinstance(html, util.Deferred):
            # This is a deferred object
            # Let us return it synchronously
            # (wsgi has nothing to do with sync, async)
            # XXX: Is this correct?
            html = html.result
        
        # FIXME: I dunno what to do when a generator comes ..
        #      Perhaps, it may generate non-str? I dunno
        if type(html) is types.GeneratorType:
            html = ''.join(list(html))

        if html is errorMarker:
            ## Error webpage has already been rendered and finish called
            pass
        elif isinstance(html, str):
            return html
        else:
            res = inevow.IResource(html, None)
            if res is not None:
                pageContext = context.PageContext(tag=res, parent=pageContext)
                return self.gotPageContext(pageContext)
            else:              
                # import traceback; traceback.print_stack()
                print >>sys.stderr, "html is not a string: %s on %s" %
(str(html), pageContext.tag)
        return html

    def _parseQuery(self, qs):
        d = {}
        items = [s2 for s1 in qs.split("&") for s2 in s1.split(";")]
        for item in items:
            try:
                k, v = item.split("=", 1)
            except ValueError:
                # no strict parsing
                continue
            k = unquote(k.replace("+", " "))
            v = unquote(v.replace("+", " "))
            if k in d:
                d[k].append(v)
            else:
                d[k] = [v]
        return d

    def _getPath(self):
        pth = self.environ.get('PATH_INFO', '')
        if not pth: pth = '/'
        return pth
    path = property(_getPath)
    
    def _getURI(self):
        query = self.environ.get('QUERY_STRING', '')
        if query:
            query = '?' + query
        return self.path + query
    uri = property(_getURI)
    
    # Methods for received request
    def getHeader(self, key):
        """Get a header that was sent from the network.
        """
        return self.received_headers.get(key.lower())
        
    def getCookie(self, key):
        """Get a cookie that was sent from the network.
        """ 


    def getAllHeaders(self):
        """Return dictionary of all headers the request received."""
        return self.received_headers

    def getRequestHostname(self):
        """Get the hostname that the user passed in to the request.

        This will either use the Host: header (if it is available) or the
        host we are listening on if the header is unavailable.
        """
        return (self.getHeader('host') or
                socket.gethostbyaddr(self.getHost()[1])[0]
                ).split(':')[0]


    def getHost(self):
        """Get my originally requesting transport's host.

        Don't rely on the 'transport' attribute, since Request objects may be
        copied remotely.  For information on this method's return value, see
        twisted.internet.tcp.Port.
        """
        
    def getClientIP(self):
        return self.environ.get('REMOTE_ADDR', None)
        
    def getClient(self):
        pass
    def getUser(self):
        pass
    def getPassword(self):
        pass
    def isSecure(self):
        return self.environ['wsgi.url_scheme'] == 'https'

    def getSession(self, sessionInterface = None):
        pass
    
    def URLPath(self):
        from nevow import url
        return url.URL.fromString(self.appRootURL+self.uri)

    def prePathURL(self):
        if self.isSecure():
            default = 443
        else:
            default = 80
        # TODO: use getHost().port after getHost is implemented
        port = default 
        if port == default:
            hostport = ''
        else:
            hostport = ':%d' % port
        # FIXME: This hack, until url module is fixed to support RootURLs
        #        Or is this the right way to do?
        if self.appRootURL:
            return quote('%s%s' % (self.appRootURL, 
                            '/'.join(self.prepath)),
                        '/:')
        return quote('http%s://%s%s/%s' % (
            self.isSecure() and 's' or '',
            self.getRequestHostname(),
            hostport,
            '/'.join(self.prepath)), '/:')

    def rememberRootURL(self, url=None):
        # result = p.renderHTTP(pctx)
        """
        Remember the currently-processed part of the URL for later
        recalling.
        """
        if url is None:
            raise NotImplementedError
        self.appRootURL = url
        
    def getRootURL(self):
        """
        Get a previously-remembered URL.
        """
        return self.appRootURL
        
    # Methods for outgoing request
    def finish(self):
        """We are finished writing data."""

    def write(self, data):
        """
        Write some data as a result of an HTTP request.  The first
        time this is called, it writes out response data.
        """
        if self.headersSent:
            self._write(data)
            return
        headerkeys = [k for k,v in self.outgoingHeaders]
        self._write = self.start_response(
                    self.responseCode, self.outgoingHeaders, None)
        self.headersSent = True
        if data:
            self._write(data)
            
    def addCookie(self, k, v, expires=None, domain=None, path=None,
max_age=None, comment=None, secure=None):
        """Set an outgoing HTTP cookie.

        In general, you should consider using sessions instead of cookies, see
        twisted.web.server.Request.getSession and the
        twisted.web.server.Session class for details.
        """

    def setResponseCode(self, code, message=None):
        """Set the HTTP response code.
        """
        self.responseCode = '%s %s' % (code, RESPONSES[int(str(code))])

    def setHeader(self, header, value):
        """Set an outgoing HTTP header.
        """
        self.outgoingHeaders.append((header.lower(), value))

    def redirect(self, url):
        """Utility function that does a redirect.

        The request should have finish() called after this.
        """
        log('REDIRECT to ' + str(url))
        self.setResponseCode(str(302))
        self.setHeader('location', url)

    def setLastModified(self, when):
        """Set the X{Last-Modified} time for the response to this request.

        If I am called more than once, I ignore attempts to set
        Last-Modified earlier, only replacing the Last-Modified time
        if it is to a later value.

        If I am a conditional request, I may modify my response code
        to L{NOT_MODIFIED} if appropriate for the time given.

        @param when: The last time the resource being returned was
            modified, in seconds since the epoch.
        @type when: number
        @return: If I am a X{If-Modified-Since} conditional request and
            the time given is not newer than the condition, I return
            L{http.CACHED<CACHED>} to indicate that you should write no
            body.  Otherwise, I return a false value.
        """
        # time.time() may be a float, but the HTTP-date strings are
        # only good for whole seconds.
        when = long(math.ceil(when))
        if (not self.lastModified) or (self.lastModified < when):
            self.lastModified = when

        modified_since = self.getHeader('if-modified-since')
        if modified_since:
            modified_since = stringToDatetime(modified_since)
            if modified_since >= when:
                self.setResponseCode(NOT_MODIFIED)
                return '' # TODO: return http.CACHED (requires Twisted)
        return None

    def setETag(self, etag):
        """Set an X{entity tag} for the outgoing response.

        That's \"entity tag\" as in the HTTP/1.1 X{ETag} header, \"used
        for comparing two or more entities from the same requested
        resource.\"

        If I am a conditional request, I may modify my response code
        to L{NOT_MODIFIED<twisted.protocols.http.NOT_MODIFIED>} or
        L{PRECONDITION_FAILED<twisted.protocols.http.PRECONDITION_FAILED>},
        if appropriate for the tag given.

        @param etag: The entity tag for the resource being returned.
        @type etag: string
        @return: If I am a X{If-None-Match} conditional request and
            the tag matches one in the request, I return
            L{CACHED<twisted.protocols.http.CACHED>} to indicate that
            you should write no body.  Otherwise, I return a false
            value.
        """
        if etag:
            self.etag = etag

        tags = self.getHeader("if-none-match")
        if tags:
            tags = tags.split()
            if (etag in tags) or ('*' in tags):
                self.setResponseCode(((self.method in ("HEAD", "GET"))
                                      and NOT_MODIFIED)
                                     or PRECONDITION_FAILED)
                return '' # TODO: return http.CACHED (requires Twisted)
        return None

    def setHost(self, host, port, ssl=0):
        """Change the host and port the request thinks it's using.

        This method is useful for working with reverse HTTP proxies (e.g.
        both Squid and Apache's mod_proxy can do this), when the address
        the HTTP client is using is different than the one we're listening on.

        For example, Apache may be listening on
https://www.example.com, and then
        forwarding requests to http://localhost:8080, but we don't
want HTML produced
        by Twisted to say 'http://localhost:8080', they should say
'https://www.example.com',
        so we do:

        >>> request.setHost('www.example.com', 443, ssl=1)

        This method is experimental.
        """

    # Methods not part of IRequest
    #

    producer = None
    def registerProducer(self, other, _):
        assert self.producer is None
        self.producer = other
        while self.producer is not None:
            self.producer.resumeProducing()

    def unregisterProducer(self):
        self.producer = None

    def finish(self):
        self.deferred.callback('')

# FIXME: copied from twisted.web.http
_CONTINUE = 100
SWITCHING = 101

OK                              = 200
CREATED                         = 201
ACCEPTED                        = 202
NON_AUTHORITATIVE_INFORMATION   = 203
NO_CONTENT                      = 204
RESET_CONTENT                   = 205
PARTIAL_CONTENT                 = 206
MULTI_STATUS                    = 207

MULTIPLE_CHOICE                 = 300
MOVED_PERMANENTLY               = 301
FOUND                           = 302
SEE_OTHER                       = 303
NOT_MODIFIED                    = 304
USE_PROXY                       = 305
TEMPORARY_REDIRECT              = 307

BAD_REQUEST                     = 400
UNAUTHORIZED                    = 401
PAYMENT_REQUIRED                = 402
FORBIDDEN                       = 403
NOT_FOUND                       = 404
NOT_ALLOWED                     = 405
NOT_ACCEPTABLE                  = 406
PROXY_AUTH_REQUIRED             = 407
REQUEST_TIMEOUT                 = 408
CONFLICT                        = 409
GONE                            = 410
LENGTH_REQUIRED                 = 411
PRECONDITION_FAILED             = 412
REQUEST_ENTITY_TOO_LARGE        = 413
REQUEST_URI_TOO_LONG            = 414
UNSUPPORTED_MEDIA_TYPE          = 415
REQUESTED_RANGE_NOT_SATISFIABLE = 416
EXPECTATION_FAILED              = 417

INTERNAL_SERVER_ERROR           = 500
NOT_IMPLEMENTED                 = 501
BAD_GATEWAY                     = 502
SERVICE_UNAVAILABLE             = 503
GATEWAY_TIMEOUT                 = 504
HTTP_VERSION_NOT_SUPPORTED      = 505
INSUFFICIENT_STORAGE_SPACE      = 507
NOT_EXTENDED                    = 510

RESPONSES = {
    # 100
    _CONTINUE: "Continue",
    SWITCHING: "Switching Protocols",

    # 200
    OK: "OK",
    CREATED: "Created",
    ACCEPTED: "Accepted",
    NON_AUTHORITATIVE_INFORMATION: "Non-Authoritative Information",
    NO_CONTENT: "No Content",
    RESET_CONTENT: "Reset Content.",
    PARTIAL_CONTENT: "Partial Content",
    MULTI_STATUS: "Multi-Status",

    # 300
    MULTIPLE_CHOICE: "Multiple Choices",
    MOVED_PERMANENTLY: "Moved Permanently",
    FOUND: "Found",
    SEE_OTHER: "See Other",
    NOT_MODIFIED: "Not Modified",
    USE_PROXY: "Use Proxy",
    # 306 not defined??
    TEMPORARY_REDIRECT: "Temporary Redirect",

    # 400
    BAD_REQUEST: "Bad Request",
    UNAUTHORIZED: "Unauthorized",
    PAYMENT_REQUIRED: "Payment Required",
    FORBIDDEN: "Forbidden",
    NOT_FOUND: "Not Found",
    NOT_ALLOWED: "Method Not Allowed",
    NOT_ACCEPTABLE: "Not Acceptable",
    PROXY_AUTH_REQUIRED: "Proxy Authentication Required",
    REQUEST_TIMEOUT: "Request Time-out",
    CONFLICT: "Conflict",
    GONE: "Gone",
    LENGTH_REQUIRED: "Length Required",
    PRECONDITION_FAILED: "Precondition Failed",
    REQUEST_ENTITY_TOO_LARGE: "Request Entity Too Large",
    REQUEST_URI_TOO_LONG: "Request-URI Too Long",
    UNSUPPORTED_MEDIA_TYPE: "Unsupported Media Type",
    REQUESTED_RANGE_NOT_SATISFIABLE: "Requested Range not satisfiable",
    EXPECTATION_FAILED: "Expectation Failed",

    # 500
    INTERNAL_SERVER_ERROR: "Internal Server Error",
    NOT_IMPLEMENTED: "Not Implemented",
    BAD_GATEWAY: "Bad Gateway",
    SERVICE_UNAVAILABLE: "Service Unavailable",
    GATEWAY_TIMEOUT: "Gateway Time-out",
    HTTP_VERSION_NOT_SUPPORTED: "HTTP Version not supported",
    INSUFFICIENT_STORAGE_SPACE: "Insufficient Storage Space",
    NOT_EXTENDED: "Not Extended"
}

weekdayname = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
monthname = [None,
             'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
             'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

---



-- 
Sridhar Ratna - http://srid.bsdnerds.org

From shamrin at gmail.com  Sun Feb 27 06:19:58 2005
From: shamrin at gmail.com (Alexey Shamrin)
Date: Sun Feb 27 06:20:31 2005
Subject: [Twisted-web] Nevow documentation style and other bugs
Message-ID: <28d42ea705022705195944384f@mail.gmail.com>

Hello!

1. I have attached the patch to issue 159 [1]. It fixes the style of
the documentation in nevow-traversal.txt. Please take a look at it and
report if the patch is acceptable. I can make similar patches to the
rest of the documentation.

2. Then, I have found minor bug in nevow.url module. It is described
in issue 165 [2]. Patch included.

3. There is still a bug in the Directory example in
nevow-traversal.txt. Take a look at issue 158 [3]. I have made a
patch, but I am not sure if it is okay.

Thank you!

[1] http://divmod.org/users/roundup.twistd/nevow/issue159
[2] http://divmod.org/users/roundup.twistd/nevow/issue165
[3] http://divmod.org/users/roundup.twistd/nevow/issue158

-- 
Best regards,
Alexey.

From fog at initd.org  Sun Feb 27 13:55:51 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Sun Feb 27 13:56:15 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <42200D7B.40303@shechen.at>
References: <1109380596.11601.15.camel@iris>  <42200D7B.40303@shechen.at>
Message-ID: <1109537751.3469.6.camel@lana.initd.org>

Il giorno ven, 25-02-2005 alle 21:47 -0800, noema ha scritto:
> 
> I think I encountered similar symptoms once and after quite some time of 
> confusion I concluded that it must have to do with python's garbage 
> collector. It seemed to me that there needs to be something refereced in 
> the do_something() method to prevent it from being wiped before the call 
> comes back from the client.

That's why if you use "identifier" the handler is managed in a different
way (using events instead of reflect) and keeps a reference to the
callable object. Just I don't like to have to put "identifier"
everywhere, it would be much better to define handlers in a uniform way
without having to know what kind of callable you're passing as argument.

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog@debian.org
INIT.D Developer                                           fog@initd.org
   Abandon the search for Truth; settle for a good fantasy. -- Anonymous
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050227/d3676470/attachment.bin
From mailinglists at shechen.at  Sun Feb 27 18:20:16 2005
From: mailinglists at shechen.at (noema)
Date: Sun Feb 27 18:20:51 2005
Subject: [Twisted-web] livepage url confused
Message-ID: <422271D0.4010504@shechen.at>


In my livepage code the url tree seems to be confused

url.root   ... returns the current path while

url.root.child('some child')   .... throws me an error


When I looked at url.py I noticed that one may call rememberRootURL() on 
the rootpage to remember the correct root...doing something like this 
failed though:

req = context.locate(inevow.IRequest)
req.rememberRootURL()

How and where would I remember the correct root url?

#noema



From sridharinfinity at gmail.com  Sun Feb 27 18:52:37 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Sun Feb 27 18:52:39 2005
Subject: [Twisted-web] livepage url confused
In-Reply-To: <422271D0.4010504@shechen.at>
References: <422271D0.4010504@shechen.at>
Message-ID: <8816fcf80502271752668f25a6@mail.gmail.com>

On Sun, 27 Feb 2005 17:20:16 -0800, noema <mailinglists@shechen.at> wrote:
> 
> In my livepage code the url tree seems to be confused
> 
> url.root   ... returns the current path while
> 
> url.root.child('some child')   .... throws me an error
> 
> When I looked at url.py I noticed that one may call rememberRootURL() on
> the rootpage to remember the correct root...doing something like this
> failed though:
> 
> req = context.locate(inevow.IRequest)
> req.rememberRootURL()
> 
> How and where would I remember the correct root url?
> 

AFAIK, only url.root (in url.py) and 'guard' uses IRequest.getRootURL
(i.e. appRootURL).  This is actually a nevow bug.  You should see my
previous post - 'Nevow URL trouble'.

-- 
Sridhar Ratna - http://srid.bsdnerds.org

From dp at ulaluma.com  Mon Feb 28 09:26:50 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Feb 28 09:26:53 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <1109537751.3469.6.camel@lana.initd.org>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
Message-ID: <4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>


On Feb 27, 2005, at 12:55 PM, Federico Di Gregorio wrote:

> Il giorno ven, 25-02-2005 alle 21:47 -0800, noema ha scritto:
>>
>> I think I encountered similar symptoms once and after quite some time 
>> of
>> confusion I concluded that it must have to do with python's garbage
>> collector. It seemed to me that there needs to be something refereced 
>> in
>> the do_something() method to prevent it from being wiped before the 
>> call
>> comes back from the client.
>
> That's why if you use "identifier" the handler is managed in a 
> different
> way (using events instead of reflect) and keeps a reference to the
> callable object. Just I don't like to have to put "identifier"
> everywhere, it would be much better to define handlers in a uniform way
> without having to know what kind of callable you're passing as 
> argument.

Using the function name as the identifier was an experiment which I 
think was a bad idea. I'll roll that code back out.

Before I started using the function name, I used an arbitrary 
identifier which was opaque and made debugging difficult. With the 
addition of the programmer-supplied identifier, debugging can be made 
easier by providing it, and an opaque identifier can be used if none is 
provided.

dp


From fog at initd.org  Mon Feb 28 09:34:00 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Mon Feb 28 09:34:05 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
	<4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
Message-ID: <1109608440.2996.1.camel@lana.initd.org>

Il giorno lun, 28-02-2005 alle 08:26 -0800, Donovan Preston ha scritto:
> Using the function name as the identifier was an experiment which I 
> think was a bad idea. I'll roll that code back out.
> 
> Before I started using the function name, I used an arbitrary 
> identifier which was opaque and made debugging difficult. With the 
> addition of the programmer-supplied identifier, debugging can be made 
> easier by providing it, and an opaque identifier can be used if none is 
> provided.

I completely agree. Sorry for the noise but I stopped following the HEAD
for some weeks so I somehow lost the "story" of the changes.

Another little problem: isn't liveevil.js missing an eval() call on the
handler extra arguments? 

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog@debian.org
INIT.D Developer                                           fog@initd.org
   stiamo parlando di lesbiche. secondo te ce ne frega qualcosa? -- <Md>


From simon at hedberg.net  Mon Feb 28 11:36:20 2005
From: simon at hedberg.net (Simon)
Date: Mon Feb 28 11:37:03 2005
Subject: [Twisted-web] patch to guard
Message-ID: <000001c51dc4$65d328a0$506271d5@hp>

Posted a patch [1] to the Nevow tracker regarding guard.SessionWrapper.
I leave to those with better knowledge of this to decide if it's good
enough for a commit.

The need for the patch comes from that I want to be able to
differentiate between incorrect logins and logins denied due to, for
example, too many failed attempts. 
The patch modifies SessionWrapper.ebLoginError to trap LoginFailed
instead of 
UnauthorizedLogin and therefor catches all the subclasses of LoginFailed
(including UnauthorizedLogin and LoginDenied). 
The patch also let's you decide the message that will be appended to the
login-failure argument of the URL by taking the text representation of
the failure.

[1] http://divmod.org/users/roundup.twistd/nevow/issue166

/Simon


From dp at ulaluma.com  Mon Feb 28 15:17:13 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Feb 28 15:17:16 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <1109608440.2996.1.camel@lana.initd.org>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
	<4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
	<1109608440.2996.1.camel@lana.initd.org>
Message-ID: <27ad0c667440b0b88a9facc9ddbf2b2b@ulaluma.com>


On Feb 28, 2005, at 8:34 AM, Federico Di Gregorio wrote:

> Il giorno lun, 28-02-2005 alle 08:26 -0800, Donovan Preston ha scritto:
>> Using the function name as the identifier was an experiment which I
>> think was a bad idea. I'll roll that code back out.
>>
>> Before I started using the function name, I used an arbitrary
>> identifier which was opaque and made debugging difficult. With the
>> addition of the programmer-supplied identifier, debugging can be made
>> easier by providing it, and an opaque identifier can be used if none 
>> is
>> provided.
>
> I completely agree. Sorry for the noise but I stopped following the 
> HEAD
> for some weeks so I somehow lost the "story" of the changes.
>
> Another little problem: isn't liveevil.js missing an eval() call on the
> handler extra arguments?

No; python string literals are now treated as javascript string 
literals. To produce a javascript string which won't get quoted (and 
thus will be evaled when it arrives in the browser) you should now use 
the nevow.livepage.literal string wrapper. The name "literal" will 
probably change to "js" or something more suitable soon. (Suggestions 
please?)

dp


From fog at initd.org  Mon Feb 28 16:09:01 2005
From: fog at initd.org (Federico Di Gregorio)
Date: Mon Feb 28 16:09:07 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <27ad0c667440b0b88a9facc9ddbf2b2b@ulaluma.com>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
	<4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
	<1109608440.2996.1.camel@lana.initd.org>
	<27ad0c667440b0b88a9facc9ddbf2b2b@ulaluma.com>
Message-ID: <1109632141.2986.9.camel@lana.initd.org>

Il giorno lun, 28-02-2005 alle 14:17 -0800, Donovan Preston ha scritto:
> > Another little problem: isn't liveevil.js missing an eval() call on the
> > handler extra arguments?
> 
> No; python string literals are now treated as javascript string 
> literals. To produce a javascript string which won't get quoted (and 
> thus will be evaled when it arrives in the browser) you should now use 
> the nevow.livepage.literal string wrapper. The name "literal" will 
> probably change to "js" or something more suitable soon. (Suggestions 
> please?)

So the string won't be evaluated in the context of the
nevow_clientToServerEvent() function but directly in the event call,
isn't it? So hanlders like:

	handler(mycallable, "node.value")

should now be written:

	handler(mycallable, liveevil.js("this.value"))

substituting "this" to "node"? It is fine for me and even the "js" name
is not too bad (i.e., I can't think of anything better right now.)

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog@debian.org
INIT.D Developer                                           fog@initd.org
  Nessuno dice che non si possa sognare in dettaglio, essere realistici
   e magari realizzarlo pure, il sogno.                        -- <dani>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20050301/84963003/attachment.bin
From dp at ulaluma.com  Mon Feb 28 18:54:53 2005
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Feb 28 18:55:00 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <1109632141.2986.9.camel@lana.initd.org>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
	<4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
	<1109608440.2996.1.camel@lana.initd.org>
	<27ad0c667440b0b88a9facc9ddbf2b2b@ulaluma.com>
	<1109632141.2986.9.camel@lana.initd.org>
Message-ID: <22078878f9b7f91afb4402962e1f9cb0@ulaluma.com>


On Feb 28, 2005, at 3:09 PM, Federico Di Gregorio wrote:

> So the string won't be evaluated in the context of the
> nevow_clientToServerEvent() function but directly in the event call,
> isn't it? So hanlders like:
>
> 	handler(mycallable, "node.value")
>
> should now be written:
>
> 	handler(mycallable, liveevil.js("this.value"))
>
> substituting "this" to "node"? It is fine for me and even the "js" name
> is not too bad (i.e., I can't think of anything better right now.)

That is correct, and I hope it is ok. The way "literal" (to be renamed 
"js") is written is very convenient, too:

handler(mycallable, liveevil.js.this.value)

Would work just as well (__getattr__ constructs new literal instances). 
There is already a module-global "document" literal, so you can do 
livepage.document.getElementById. literal (js) provides __getitem__ as 
well as __call__ implementations.

I hope it all makes sense, it is somewhat experimental at this point. 
One good thing about this new implementation is that there are 
extensive javascript quoting unittests, where there were none before, 
so hopefully it is less buggy, more flexible, and less likely to change 
in the future.

dp


From sridharinfinity at gmail.com  Mon Feb 28 19:28:44 2005
From: sridharinfinity at gmail.com (Sridhar Ratna)
Date: Mon Feb 28 19:29:23 2005
Subject: [Twisted-web] liveevil problem: nested functions get lost
In-Reply-To: <1109632141.2986.9.camel@lana.initd.org>
References: <1109380596.11601.15.camel@iris> <42200D7B.40303@shechen.at>
	<1109537751.3469.6.camel@lana.initd.org>
	<4783b8060d481ecf62ed7c7aca26a6c8@ulaluma.com>
	<1109608440.2996.1.camel@lana.initd.org>
	<27ad0c667440b0b88a9facc9ddbf2b2b@ulaluma.com>
	<1109632141.2986.9.camel@lana.initd.org>
Message-ID: <8816fcf8050228182879afae02@mail.gmail.com>

On Tue, 01 Mar 2005 00:09:01 +0100, Federico Di Gregorio <fog@initd.org> wrote:
> 
> should now be written:
> 
>         handler(mycallable, liveevil.js("this.value"))
> 

Or handler(mycallable, liveevil.js('this').value)

hmm, now I could think of the power of Lisp.  Python can just do
literals (in obvious way). :-)

-- 
Sridhar Ratna - http://srid.bsdnerds.org

