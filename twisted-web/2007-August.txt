From bernat at luffy.cx  Wed Aug  1 08:42:03 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Wed Aug  1 08:42:10 2007
Subject: [Twisted-web] Twisted and RESTful app
Message-ID: <9536db4da1b0e353166fc824d579766f@imap.luffy.cx>


Hi !

I would like to add a RESTful interface to an existing Twisted
application. To allow a human to interact easily with the
application, I want to output bare minimal XHTML (1990 HTML
without any presentation, just some class to allow to easily
parse the result).

I have looked at twisted.web framework. One good point is that
there are different methods for each action (GET, HEAD, POST,
PUT, DELETE). However, there is nothing to generate XHTML easily.

I have looked at Nevow which contains two interesting ways to
generate XHTML code (Stan and templates). But the only method to
render is renderHTTP. I suppose that the HTTP action is somewhere
in the context, but I did not find where yet.

I could mix twisted.web with Stan or with Nevow templates. I
could also just use twisted.web and use ElementTree to generate
simple XHTML page. But do some of you have some suggestions about
implementing a RESTful service using Twisted ?

Thanks !



From ldanielburr at mac.com  Wed Aug  1 08:53:37 2007
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Wed Aug  1 08:54:29 2007
Subject: [Twisted-web] Twisted and RESTful app
In-Reply-To: <9536db4da1b0e353166fc824d579766f@imap.luffy.cx>
References: <9536db4da1b0e353166fc824d579766f@imap.luffy.cx>
Message-ID: <op.twdsrnay3oj628@l-daniel-burrs-computer.local>

Hi Vincent,

On Wed, 01 Aug 2007 07:42:03 -0500, Vincent Bernat <bernat@luffy.cx> wrote:

>
> Hi !
>
> I would like to add a RESTful interface to an existing Twisted
> application. To allow a human to interact easily with the
> application, I want to output bare minimal XHTML (1990 HTML
> without any presentation, just some class to allow to easily
> parse the result).
>
> I have looked at twisted.web framework. One good point is that
> there are different methods for each action (GET, HEAD, POST,
> PUT, DELETE). However, there is nothing to generate XHTML easily.
>
> I have looked at Nevow which contains two interesting ways to
> generate XHTML code (Stan and templates). But the only method to
> render is renderHTTP. I suppose that the HTTP action is somewhere
> in the context, but I did not find where yet.
>

To obtain the request, do this:

request = inevow.IRequest(ctx)

Then, just dispatch based on request.method

> I could mix twisted.web with Stan or with Nevow templates. I
> could also just use twisted.web and use ElementTree to generate
> simple XHTML page. But do some of you have some suggestions about
> implementing a RESTful service using Twisted ?
>

It really depends upon your personal tastes in this case.  You
could use plain twisted.web, with some templating library; you
could use twisted.web2 with some templating library; you could
use nevow.  All will work just fine in a REST-style design, as
they all support the same basic IResource interface, more or
less.

Hope this helps,

Daniel

From iacovou at gmail.com  Wed Aug  1 09:07:15 2007
From: iacovou at gmail.com (kgi)
Date: Wed Aug  1 09:07:23 2007
Subject: [Twisted-web] Adding Athena JS handlers in render methods?
In-Reply-To: <20070730142543.4947.229535084.divmod.quotient.16652@ohm>
References: <20070730142543.4947.229535084.divmod.quotient.16652@ohm>
Message-ID: <200708011607.16188.iacovou@gmail.com>

On Monday 30 July 2007 17:25:43 Jean-Paul Calderone wrote:

> It's unsupported.  What you can do instead is to put the event handlers
> into the template (stan or xhtml) as patterns.  This will result in them
> being rewritten properly.  Your render and data methods will thus be able
> to load them, already pre-processed, from the docFactory and put them in
> the page.

Hi Jean-Paul; thanks for your answer; that makes a lot of sense.

In the meantime I worked around the problem by inserting the "expanded" 
javascript (that is, Nevow.Athena.Widget.handleEvent()) into the stan in the 
special methods. It's hacky but it works - I'll implement your suggestion 
next time I visit that piece of code.

If you're not fed up with Athena-related questions, I do have another one.

At the moment I've got some active content in a LiveElement that I update 
multiple times throughout the lifetime of a page. This updating is done by JS 
DOM manipulation on parameters that get passed over an Athena call (paying 
greater client complexity and load in return for lower server load and lower 
bandwidth).

However, the content has to have *something* when the LiveElement is first 
rendered, so I'm having to implement the same logic twice: once in the stan 
to provide the initial content, and once in the JS to update the page.

I'd like to kill the stan version by arranging to call the LiveElement's 
update code after the page has rendered; however, I'm unsure where the hook 
should go. I already have code to allow the LiveElements to request a 
callback, I just need to know when the Athena link is up and running.

Digging about a bit, I can see that rend.Page's self.afterRender gets called 
after renderHTTP, if it's defined, but this is too early: it gets called when 
rendering has been done on the *server*, way before the browser even starts 
requesting the various page elements (JS files, CSS files, etc). That also 
rules out trying to hook onto LivePage's _becomeLive, because that gets 
called even before renderHTTP. LivePageFactory's addClient() runs similarly 
early.

I've even considered having a special child resource (a 1x1 transparent image, 
say), placed towards the bottom of the body, access to whose resource path 
triggers the process of updating the LiveElements, but that's really the last 
resort.

Is there an approved way to achieve this?

Thanks,

Ricky

From mithrandi-twisted-web at mithrandi.za.net  Wed Aug  1 09:43:23 2007
From: mithrandi-twisted-web at mithrandi.za.net (Tristan Seligmann)
Date: Wed Aug  1 09:44:51 2007
Subject: [Twisted-web] Adding Athena JS handlers in render methods?
In-Reply-To: <200708011607.16188.iacovou@gmail.com>
References: <20070730142543.4947.229535084.divmod.quotient.16652@ohm>
	<200708011607.16188.iacovou@gmail.com>
Message-ID: <20070801134323.GA20929@mithrandi.za.net>

* kgi <iacovou@gmail.com> [2007-08-01 16:07:15 +0300]:

> I'd like to kill the stan version by arranging to call the LiveElement's 
> update code after the page has rendered; however, I'm unsure where the hook 
> should go. I already have code to allow the LiveElements to request a 
> callback, I just need to know when the Athena link is up and running.

I think the usual way to handle this is to make a client-to-server
callRemote from the widget's nodeInserted method; the server-side method
could either return the update in response to that call, or simply
perform a server-to-client callRemote to do the update. I believe both
of those options are equally efficient in terms of network behaviour.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar

From iacovou at gmail.com  Wed Aug  1 10:07:12 2007
From: iacovou at gmail.com (kgi)
Date: Wed Aug  1 10:07:19 2007
Subject: [Twisted-web] Adding Athena JS handlers in render methods?
In-Reply-To: <20070801134323.GA20929@mithrandi.za.net>
References: <20070730142543.4947.229535084.divmod.quotient.16652@ohm>
	<200708011607.16188.iacovou@gmail.com>
	<20070801134323.GA20929@mithrandi.za.net>
Message-ID: <200708011707.12217.iacovou@gmail.com>

On Wednesday 01 August 2007 16:43:23 Tristan Seligmann wrote:
> I think the usual way to handle this is to make a client-to-server
> callRemote from the widget's nodeInserted method; the server-side method
> could either return the update in response to that call, or simply
> perform a server-to-client callRemote to do the update. I believe both
> of those options are equally efficient in terms of network behaviour.

*Slaps forehead*

Of course, that makes perfect sense! I was grepping and glimpse-ing all 
the .py files in the hope of finding a hook; it never occurred to me to look 
in the .js files.

Thank you very, very much Tristan, you've saved me from a fate worse than 
death: I was halfway through implementing my dirty "special resource" hack 
when your reply came in!

Ricky


From p.mayers at imperial.ac.uk  Fri Aug  3 06:27:45 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri Aug  3 06:28:22 2007
Subject: [Twisted-web] athena and widget.nodeById
Message-ID: <1186136865.13243.24.camel@doorstop.net.ic.ac.uk>

I've got this:

class logwatch(athena.LiveFragment):
  jsClass = u"app.logwatch"

  docFactory = loaders.stan(
    T.div(render=T.directive('liveFragment'))[
      T.div(id='content'),
    ])

  def msg(self, m):
    return self.callRemote('msg', m)

...and in app.js

app.logwatch = Nevow.Athena.Widget.subclass('app.logwatch');
app.logwatch.methods(
  function msg(self, m) {
    // MochiKit is included...
    appendChildNodes(
      self.nodeById('content'),
      P(null, m)
    );
  })

This fails for some reason - I think because the HTML the page generates
looks like this:

<div id="athena:1" xmlns:athena="http://divmod.org/ns/athena/0.7"
athena:class="app.logwatch">
 logs
 <div id="athenaid:1-athenaid:1-content"/>
</div>

...node the athena node id prefixs the child IDs twice?

Also, the exception this code generates under Firefox (2.0.0.4) also
breaks the javascript-python exception bridge code:

   File "/usr/lib64/python2.5/site-packages/twisted/internet/defer.py",
line 107, in maybeDeferred
     result = f(*args, **kw)
   File "/usr/lib/python2.5/site-packages/nevow/athena.py", line 434, in
renderHTTP
     response = self.messageDeliverer.basketCaseReceived(ctx,
messageData)
   File "/usr/lib/python2.5/site-packages/nevow/athena.py", line 638, in
basketCaseReceived
     self.livePage.liveTransportMessageReceived(ctx, msg)
   File "/usr/lib/python2.5/site-packages/nevow/athena.py", line 886, in
liveTransportMessageReceived
     method(ctx, *args)
   File "/usr/lib/python2.5/site-packages/nevow/athena.py", line 929, in
action_respond
     callDeferred.errback(getJSFailure(result, self.jsModules.mapping))
   File "/usr/lib/python2.5/site-packages/nevow/athena.py", line 403, in
getJSFailure
     text = '%s: %s' % (exc[u'name'], exc[u'message'])
 exceptions.KeyError: u'name'

Ideas?


From p.mayers at imperial.ac.uk  Fri Aug  3 07:54:19 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri Aug  3 07:54:55 2007
Subject: [Twisted-web] Re: athena and widget.nodeById
In-Reply-To: <1186136865.13243.24.camel@doorstop.net.ic.ac.uk>
References: <1186136865.13243.24.camel@doorstop.net.ic.ac.uk>
Message-ID: <1186142059.13243.44.camel@doorstop.net.ic.ac.uk>

On Fri, 2007-08-03 at 11:27 +0100, Phil Mayers wrote:
> I've got this:
> 
> class logwatch(athena.LiveFragment):

This works if I used a LiveElement




From iacovou at gmail.com  Mon Aug  6 13:48:56 2007
From: iacovou at gmail.com (kgi)
Date: Mon Aug  6 13:49:10 2007
Subject: [Twisted-web] Passing events to (Athena) event handlers.
In-Reply-To: <20070718190833.26384.932443664.divmod.xquotient.920@joule.divmod.com>
References: <200707181645.18215.iacovou@gmail.com>
	<20070718190833.26384.932443664.divmod.xquotient.920@joule.divmod.com>
Message-ID: <200708062048.57126.iacovou@gmail.com>

On Wednesday 18 July 2007 22:08:33 glyph@divmod.com wrote:
> You may have noticed JavaScript unit tests lying around in our various
> codebases.  A good example of some pretty thorough unit testing is in
> Mantissa.Test.TestRegionModel.  You'd need to add coverage for your
> event handler stuff that used these tests and ran under trial.
>
> Some other test examples, that will be even closer to the feature you
> are trying to implement, are in
> Nevow.Test.TestWidget.WidgetTests.test_connectDOMEvent*.

Hi Glyph et al.

I'm having a little trouble running (or indeed, understanding) the unit 
testing infrastructure. This is in relation to the patch I mentioned 
previously that allows the event to be passed along with the node to event 
handlers.

I've read through

  http://divmod.org/trac/wiki/DivmodNevow/AthenaTesting

and also

  http://blackjml.livejournal.com/21602.html

You mentioned "trial", but the pages above refer to "nit". From what I've 
worked, trial is the general purpose testing infrastructure and nit is a 
Nevow-specific thing that actually requires a browser (rather than using a 
standalone JS interpreter, say). Does trial use nit, nit use trial, or are 
they completely separate?

(And I've got no idea how "nose" fits into all this).

I can see that Nevow/nevow/js/Nevow/Test/TestWidget.js contains exactly the 
sort of tests that I want to extend, just like you said. I intend to leave 
the existing tests alone (to prove that passing and event to methods that 
aren't expecting events still work) and a new test that receives and examines 
the event (to prove that the event getting passed is indeed the type, etc, I 
expect)[1].

I've managed to run the nevow tests by running "nit nevow" and pointing 
Firefox to http://localhost:8080.

However, when I run open Firebug and go to the "Script" tab I would expect to 
see "Nevow.Test" as an option in the dropdown list of modules. However, it 
looks like this isn't included at all, which means that Firefox hasn't loaded 
it because the test "page" doesn't include it.

It occurred to me that it's possible that it's "pushed" to the browser 
dynamically, but it's not available even after the tests have run. At that 
point I'd definitely expect all relevant JS to have been loaded.

(The list of JS files is: Divmod, Divmod.Base|Defer|Inspect|Runtime|
Runtime.Tests, Nevow, Nevow.Athena, Nevow.Athena.Test, Nevow.Athena.Tests, 
Nevow.Athena.Tests.Resources.

Is the JS code you pointed me to not run by the "nit nevow" tests? If not, how 
can I run that test code?

Thanks,

Ricky

[1] Plus any other tests that fail as a result of the changes; for example, 
Nevow/nevow/test/test_athena.py:test_handlerMacro() checks a serialized 
athena handler against a hardcoded string; if _handlerFormat is changed, this 
will fail and need updating.

From 2le at 2le.net  Mon Aug 20 13:11:33 2007
From: 2le at 2le.net (=?ISO-8859-1?Q?S=E9bastien_HEITZMANN?=)
Date: Mon Aug 20 13:07:38 2007
Subject: [Twisted-web] rest webservice and big data.
Message-ID: <46C9CB45.1030604@2le.net>

Hi

I'm new to twisted programming and I'm wonder how to do the following thing.

I would like to save in a file the content of a PUT method. But i need
this in a stream mode ( the data may be handred of MB )

Here is a part of my code.

class DataResource(resource.Resource):
    def __init__(self, dbConnection):
        resource.Resource.__init__(self)

    def render_PUT(self, request):
        request.content.seek(0)
        file('data.dat','wb').write(request.content.read())
        request.write('OK')
        request.finish()


Thats inspired by an exemple of the oreilly book.

Is there a way to get a coolback juste after the header was sended and
to handle the reading of the remaining data myself ?

I use only web, not the new web2 api.

Thanks in advance for any help or link.

Sebastien.



From ldanielburr at mac.com  Mon Aug 20 13:40:49 2007
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Aug 20 13:41:43 2007
Subject: [Twisted-web] rest webservice and big data.
In-Reply-To: <46C9CB45.1030604@2le.net>
References: <46C9CB45.1030604@2le.net>
Message-ID: <op.txdcqbf73oj628@dev007.texturallc.net>

Hi S?bastien,

On Mon, 20 Aug 2007 12:11:33 -0500, S?bastien HEITZMANN <2le@2le.net>  
wrote:

> Hi
>
> I'm new to twisted programming and I'm wonder how to do the following  
> thing.
>
> I would like to save in a file the content of a PUT method. But i need
> this in a stream mode ( the data may be handred of MB )
>
> Here is a part of my code.
>
> class DataResource(resource.Resource):
>     def __init__(self, dbConnection):
>         resource.Resource.__init__(self)
>
>     def render_PUT(self, request):
>         request.content.seek(0)
>         file('data.dat','wb').write(request.content.read())
>         request.write('OK')
>         request.finish()
>
>
> Thats inspired by an exemple of the oreilly book.
>
> Is there a way to get a coolback juste after the header was sended and
> to handle the reading of the remaining data myself ?
>
> I use only web, not the new web2 api.
>

You cannot stream large files using twisted.web unless you write your
own mechanism.  On the other hand, web2 *does* support streaming file
uploads, so I would advise you to think about using web2 instead, if
you really want streaming.

Someone with deeper knowledge of twisted.web may be able to propose
a strategy for implementing streaming file uploads, but I expect it
would be a fair amount of work, and end up looking similar to what
is already in web2.

> Thanks in advance for any help or link.
>
> Sebastien.
>

Hope this helps,

-- 
L. Daniel Burr

From exarkun at divmod.com  Mon Aug 20 14:13:09 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon Aug 20 14:13:14 2007
Subject: [Twisted-web] rest webservice and big data.
In-Reply-To: <op.txdcqbf73oj628@dev007.texturallc.net>
Message-ID: <20070820181309.8162.1942883510.divmod.quotient.70@ohm>

On Mon, 20 Aug 2007 12:40:49 -0500, "L. Daniel Burr" <ldanielburr@mac.com> wrote:
>Hi S?bastien,
>
>On Mon, 20 Aug 2007 12:11:33 -0500, S?bastien HEITZMANN <2le@2le.net> 
>wrote:
>>Hi
>>
>>I'm new to twisted programming and I'm wonder how to do the following 
>>thing.
>>
>>I would like to save in a file the content of a PUT method. But i need
>>this in a stream mode ( the data may be handred of MB )
>>
>>Here is a part of my code.
>>
>>class DataResource(resource.Resource):
>>     def __init__(self, dbConnection):
>>         resource.Resource.__init__(self)
>>
>>     def render_PUT(self, request):
>>         request.content.seek(0)
>>         file('data.dat','wb').write(request.content.read())
>>         request.write('OK')
>>         request.finish()
>>
>>
>>Thats inspired by an exemple of the oreilly book.
>>
>>Is there a way to get a coolback juste after the header was sended and
>>to handle the reading of the remaining data myself ?
>>
>>I use only web, not the new web2 api.
>
>You cannot stream large files using twisted.web unless you write your
>own mechanism.  On the other hand, web2 *does* support streaming file
>uploads, so I would advise you to think about using web2 instead, if
>you really want streaming.
>
>Someone with deeper knowledge of twisted.web may be able to propose
>a strategy for implementing streaming file uploads

Don't mind if I do ;)

HTTPChannel already notices the difference between when the headers have
all been received and when the body has been received entirely. When the
former occurs, allHeadersReceived is called.  In the base implementation
this sets up a file-like object into which the body will be written.  It
would be possible to do something slightly different here in order to
support streaming uploads: do resource traversal to find the IResource
the upload is being sent to and then let it deal with bytes received in
the body of the request.

The only other things which might not be obvious here.  Changes to
twisted.web should be backwards compatible so that existing twisted.web
applications continue to work without being modified.  Implementing
what I've described above without regard for backwards compatibility would
probably mean subjecting existing applications to two things:

  * resource traversal would be performed earlier than usual for the
    application.  This might have adverse consequences, or it might not.
    In the absense of any way to know for sure, we shouldn't change this
    behavior.  So, instead, the code might require a new kind of site, or
    an attribute to be set on the root resource, or something else of this
    sort which would allow new applications to indicate their preference
    for the new behavior while preserving the existing behavior for existing
    applications.

  * The body of a request is currently available in the request object
    itself.  Existing applications won't expect it to be elsewhere, nor
    will they expect to have to handle the upload as it is happening.  It
    should be required that resources indicate in some way that they are
    capable of handling streaming uploads.  This might be done by adding a
    new interface which they must implement (since they will need to provide
    methods for handling bytes from the upload, this is necessary anyway).

>but I expect it would be a fair amount of work, and end up looking similar
>to what is already in web2.

Well, "fair" is quite subjective, so maybe it is and maybe it isn't ;)  It
doesn't strike me as a massive undertaking, though.  I think an initial
patch could probably be done in a day or two.  Allow another couple of days
(not necessarily elapsed - there might be some latency in finding reviews,
etc) to get feedback and make whatever improvements are suggested, and that
would probably be it.

FWIW, what I described doesn't resemble the support for this functionality
in web2 at all, I think.

Jean-Paul

From ldanielburr at mac.com  Mon Aug 20 14:33:09 2007
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Aug 20 14:33:50 2007
Subject: [Twisted-web] rest webservice and big data.
In-Reply-To: <20070820181309.8162.1942883510.divmod.quotient.70@ohm>
References: <20070820181309.8162.1942883510.divmod.quotient.70@ohm>
Message-ID: <op.txde5jir3oj628@dev007.texturallc.net>

On Mon, 20 Aug 2007 13:13:09 -0500, Jean-Paul Calderone  
<exarkun@divmod.com> wrote:

[Discusion of streaming file uploads in twisted.web]

>> Someone with deeper knowledge of twisted.web may be able to propose
>> a strategy for implementing streaming file uploads
>
> Don't mind if I do ;)
>

Always good to have a core developer weigh in on these matters ;)

> HTTPChannel already notices the difference between when the headers have
> all been received and when the body has been received entirely. When the
> former occurs, allHeadersReceived is called.  In the base implementation
> this sets up a file-like object into which the body will be written.  It
> would be possible to do something slightly different here in order to
> support streaming uploads: do resource traversal to find the IResource
> the upload is being sent to and then let it deal with bytes received in
> the body of the request.
>

That sounds pretty reasonable.

> The only other things which might not be obvious here.  Changes to
> twisted.web should be backwards compatible so that existing twisted.web
> applications continue to work without being modified.  Implementing
> what I've described above without regard for backwards compatibility  
> would
> probably mean subjecting existing applications to two things:
>

You lost me here.  First you say that changes to twisted.web should be
backwards-compatible, then you go on to describe how to do things in
a non-compatible manner.  I don't have a preference regarding the
issue of compatibility, but I'm not clear as to whether you do.

>   * resource traversal would be performed earlier than usual for the
>     application.  This might have adverse consequences, or it might not.
>     In the absense of any way to know for sure, we shouldn't change this
>     behavior.  So, instead, the code might require a new kind of site, or
>     an attribute to be set on the root resource, or something else of 
>     this sort which would allow new applications to indicate their
>     preference for the new behavior while preserving the existing
>     behavior for existing applications.
>

Sure, this sounds a bit like the way nevow uses Element for doing
things in the new, context-less way, while leaving Fragment in place
to handle the existing, context-laden way.

>   * The body of a request is currently available in the request object
>     itself.  Existing applications won't expect it to be elsewhere, nor
>     will they expect to have to handle the upload as it is happening.  It
>     should be required that resources indicate in some way that they are
>     capable of handling streaming uploads.  This might be done by adding  
>     a new interface which they must implement (since they will need to  
>     provide methods for handling bytes from the upload, this is  
> necessary     anyway).
>
>> but I expect it would be a fair amount of work, and end up looking  
>> similar
>> to what is already in web2.
>
> Well, "fair" is quite subjective, so maybe it is and maybe it isn't ;)

Point taken, although I'll point out that from the perspective of the
original poster, "fair amount of work" might mean "lots of work and
cursing", given the usual newbie experience with twisted and its
learning curve.

> It
> doesn't strike me as a massive undertaking, though.  I think an initial
> patch could probably be done in a day or two.  Allow another couple of  
> days
> (not necessarily elapsed - there might be some latency in finding  
> reviews,
> etc) to get feedback and make whatever improvements are suggested, and  
> that
> would probably be it.
>

Well, that'd be pretty awesome, and would benefit nevow users too.

> FWIW, what I described doesn't resemble the support for this  
> functionality
> in web2 at all, I think.
>

True, and I'm somewhat surprised, given the work currently going on
with web2.  Isn't dialtone's consumer/producer oriented stream stuff
going to be "the way" to do this sort of thing?  Does twisted.web
have to approach it differently, due to design constraints?

Thanks for taking the time to think through this,

L. Daniel Burr

From manlio_perillo at libero.it  Mon Aug 20 14:38:02 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon Aug 20 14:39:35 2007
Subject: [Twisted-web] rest webservice and big data.
In-Reply-To: <46C9CB45.1030604@2le.net>
References: <46C9CB45.1030604@2le.net>
Message-ID: <46C9DF8A.5000804@libero.it>

S?bastien HEITZMANN ha scritto:
> Hi
> 
> I'm new to twisted programming and I'm wonder how to do the following thing.
> 
> I would like to save in a file the content of a PUT method. But i need
> this in a stream mode ( the data may be handred of MB )
> 

You can use nginx as a proxy server.

nginx can save the entire request body in a file.
You can pass the file name to the application using an header.

 > [...]


Regards  Manlio Perillo

From exarkun at divmod.com  Mon Aug 20 14:53:24 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon Aug 20 14:53:26 2007
Subject: [Twisted-web] rest webservice and big data.
In-Reply-To: <op.txde5jir3oj628@dev007.texturallc.net>
Message-ID: <20070820185324.8162.1932544998.divmod.quotient.81@ohm>

On Mon, 20 Aug 2007 13:33:09 -0500, "L. Daniel Burr" <ldanielburr@mac.com> wrote:
> [snip]
>>The only other things which might not be obvious here.  Changes to
>>twisted.web should be backwards compatible so that existing twisted.web
>>applications continue to work without being modified.  Implementing
>>what I've described above without regard for backwards compatibility  would
>>probably mean subjecting existing applications to two things:
>
>You lost me here.  First you say that changes to twisted.web should be
>backwards-compatible, then you go on to describe how to do things in
>a non-compatible manner.  I don't have a preference regarding the
>issue of compatibility, but I'm not clear as to whether you do.

Oops :)  To clarify, when this is implemented, it should be implemented in
a way which _is_ backwards compatible.

> [snip]
>>FWIW, what I described doesn't resemble the support for this  functionality
>>in web2 at all, I think.
>
>True, and I'm somewhat surprised, given the work currently going on
>with web2.  Isn't dialtone's consumer/producer oriented stream stuff
>going to be "the way" to do this sort of thing?  Does twisted.web
>have to approach it differently, due to design constraints?

Fitting this into twisted.web with an API similar to that of twisted.web2
would be more challenging.  It might be possible though.  Perhaps one of
the web2 developers can comment on that in more detail.

Jean-Paul

From bernat at luffy.cx  Tue Aug 21 10:34:34 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Tue Aug 21 10:34:40 2007
Subject: [Twisted-web] Nevow, IRequest and REST
Message-ID: <5389e427004b7a0f106e1baf7d675b72@imap.luffy.cx>


Hi !

In REST world, to overcome limitations of some navigators or
limitations of XHTML, there is a method called "overloaded"
POST. When you want to use PUT or DELETE method but you cannot,
you use POST and you add "_method" to POST arguments whose value
is either "PUT" or "DELETE".

I have inherited from rend.Page and used some code like this to
implement this idea:
 request = inevow.IRequest(ctx)
 if request.method == "POST" and request.args.get("_method") in ["PUT",
"DELETE"]):
    request.method = request.args.get("_method")
    del request.args["_method"]

However, I now would like to use the same snippet in
rend.Fragment. I could subclass rend.Fragment but maybe there is
a better way to centralize all those modifications in one
place. Could I redefine IRequest adapter (where is it?) to
achieve this? And how to explain to the registry that my adapter
must be used in place of the original adapter?

In a similar manner, I would like to modify stan such that
T.form(method="PUT") to be turned into
T.form(method="POST")[T.input(type="hidden", name="_method",
value="PUT")]. Is it some easy way to do this ?

Thanks !


From tarjei at nu.no  Thu Aug 23 06:39:23 2007
From: tarjei at nu.no (tarjei)
Date: Thu Aug 23 06:40:47 2007
Subject: [Twisted-web] RH init.d
Message-ID: <46CD63DB.2060208@nu.no>

Does anyone have a sample init.d file for Redhat for running a twisted
application from standard python?

I.e. a wrapper around twisted -oy app.tac ?

Regards,
Tarjei

From tarjei at nu.no  Thu Aug 23 07:07:04 2007
From: tarjei at nu.no (tarjei)
Date: Thu Aug 23 07:08:14 2007
Subject: [Twisted-web] Nevow application as a plugin
Message-ID: <46CD6A58.1000303@nu.no>

Hi, as part of making my application ready for prime time, I'm looking
for solutions / suggestions to a few problems.

My goal is to be able to launch the application using twistd <appname>
--some-param and not have to know the path to the app.tap file and be
able to mix normal twistd commandline options and extra application
specific options.

Does anyone have an example of a Nevow application running as a plugin? [1]

Is the document referenced above using the new plugin system or the old
one? (twisted.plugins vs twisted.python.plugin)

I have found some nuts and bolts, but I am not too sure on how they fit
together.

As I've understood it, if I got a package myapp that contains the
modules for the application, then there should be a file inside this
directory called plugins.tml that defines the twisted plugin.

This file contains a method:

register('myapp', 'myapp.tap',
 description='My webapp',
 type='tap', tapname='myapp')


then I can run "twisted myapp" to run this class. I would expect there
to be an extra interface to do the actual creation of services. As I've
understood it, that is the role of the function makeService(config)
function that should be placed in myapp/tap.py.

Is this correct or very wrong? What is the correct way to do this? What
is missing? I tried to find the interface for the register function, but
I didn't find it. Please give me some pointers or an example of how to
do this.

As you can see, I think I understand 20% of plugins - but am missing the
other 80.

I've tried subclassing the Options class to be able to add my own
configuration options. When I do this and try to start the application
using twistd -oy app.tap, it bombs out because the normal twistd
commandline options are not included. What am I doing wrong?

class VdOptions(usage.Options):

    optParameters = [
        ['config', 'c', '/etc/app.ini'],
        ]



cli = VdOptions()
try:
    cli.parseOptions() # When given no argument, parses sys.argv[1:]
except usage.UsageError, errortext:
    print '%s: %s' % (sys.argv[0], errortext)
    print '%s: Try --help for usage details.' % (sys.argv[0])
    sys.exit(1)


Links:
1.http://twistedmatrix.com/projects/core/documentation/howto/tutorial/configuration.html

Thanks a lot for any input on this.

Kind regards,
Tarjei


From glyph at divmod.com  Thu Aug 23 09:25:08 2007
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Aug 23 09:25:13 2007
Subject: [Twisted-web] Nevow application as a plugin
In-Reply-To: <46CD6A58.1000303@nu.no>
References: <46CD6A58.1000303@nu.no>
Message-ID: <20070823132508.21185.1941322179.divmod.xquotient.1600@joule.divmod.com>

On 11:07 am, tarjei@nu.no wrote:
>Hi, as part of making my application ready for prime time, I'm looking
>for solutions / suggestions to a few problems.
>
>My goal is to be able to launch the application using twistd <appname>
>--some-param and not have to know the path to the app.tap file and be
>able to mix normal twistd commandline options and extra application
>specific options.
>
>Does anyone have an example of a Nevow application running as a plugin? 
>[1]

http://divmod.org/trac/browser/trunk/Nevow/twisted/plugins/nevow_widget.py
http://divmod.org/trac/browser/trunk/Nevow/nevow/_widget_plugin.py

This could stand to be improved.  In particular it would be good if it 
instantiated a new page/widget each time rather than using one that can 
only be rendered once.  But it should be a fairly concise example of the 
basics.
>Is the document referenced above using the new plugin system or the old
>one? (twisted.plugins vs twisted.python.plugin)

Assuming you mean 
http://twistedmatrix.com/projects/core/documentation/howto/tutorial/configuration.html

"plugins.tml" is a dead giveaway that it's the bad, old one.  That 
document should probably just be deleted.  The new, good plugin system 
is documented here:

http://twistedmatrix.com/projects/core/documentation/howto/plugin.html

and here:

http://twistedmatrix.com/projects/core/documentation/howto/tap.html

Good luck :).

From daniel.cuesta at iavante.es  Thu Aug 30 06:55:26 2007
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Thu Aug 30 06:56:44 2007
Subject: [Twisted-web] Deferred inside XMLRPC method
Message-ID: <46D6A21E.8060902@iavante.es>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20070830/09ad16a8/attachment.htm
From karnaugh at karnaugh.za.net  Thu Aug 30 07:09:58 2007
From: karnaugh at karnaugh.za.net (Colin Alston)
Date: Thu Aug 30 07:10:07 2007
Subject: [Twisted-web] Deferred inside XMLRPC method
In-Reply-To: <46D6A21E.8060902@iavante.es>
References: <46D6A21E.8060902@iavante.es>
Message-ID: <46D6A586.7010404@karnaugh.za.net>

On 30/08/2007 12:55 Daniel de la Cuesta wrote:
>   Hi,
> 
> I am developing an middleware XMLRPC Server. It connects with a mail 
> server and provides and XMLRPC interface to read and send mail.
> 
> Is there any way to return the result of the xmlrpc method in deferred's 
> callback?
> 
> Is there any way to return a deferred object inside the xmlrpc method?
> 
> Is it a good solution using asynchronous chunks (deferreds) inside a 
> synchronous protocol as it is XML-RPC (HTTP)?

I use this pattern on the server side

def xmlrpc_getStuff(self, stuff):
     def fail(_):
         print "Oh dear!"
         return False

     def returnStuff(dbResult):
         otherstuff = doStuffWith(dbResult)
         return otherStuff

     return self.db.getStuff(stuff).addCallbacks(returnStuff, fail)

And this one on the client side

def checkKey(stuff):
     def fail(_):
         return False
     def good(stuff):
         return stuff
     return Proxy(xmlServer, allowNone=True).callRemote('getStuff', 
stuff).addCallbacks(good, fail)

There are better ways depending on what you're really doing..

-- 
Colin Alston ~ http://www.karnaugh.za.net/
"To the world you may be one person, to one person you may be the 
world" ~ Rachel Ann Nunes.

Terms and conditions: http://www.karnaugh.za.net/email.rpy

