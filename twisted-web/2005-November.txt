From robbyd at u20.org  Tue Nov  1 22:38:47 2005
From: robbyd at u20.org (Robby Dermody)
Date: Tue Nov  1 22:38:04 2005
Subject: [Twisted-web] livepage connection "timing out"/dying randomly
In-Reply-To: <6C18BD20-063C-405D-B5BA-1DD18965A4C7@fuhm.net>
References: <43611359.6050207@u20.org>
	<6C18BD20-063C-405D-B5BA-1DD18965A4C7@fuhm.net>
Message-ID: <436850E7.4010001@u20.org>

James Y Knight wrote:
> On Oct 27, 2005, at 1:50 PM, Robby Dermody wrote:
> 
>> I seem to have a problem with client browsers to my guarded  livepage 
>> application loosing their livepage connections. It seems  that the 
>> guard session doesn?t expire, but the livepage system on  the server 
>> side seems like it will loose track of the client?s  nevow handle. 
>> This is under the Nevow 0.5.0 release, and it happens  under both IE 
>> 6.0.x and Firefox 1.0.x.
> 
> 
> I believe both livepage and athena currently have broken reconnect  
> support, so if the server->client socket closes unexpectedly for  
> whatever reason (the most common reason is you have an HTTP proxy  with 
> a timeout of a small number of seconds), the client will attempt  to 
> reconnect to the same livepage session with the same client id (as  it 
> should), but the server doesn't accept the reconnect attempt and  throws 
> an error.
> 
> James
> 

Hi James,

It seems to be that way. The connection I was browsing the page through 
was being port-forwarded through a PIX firewall. I've gone through the 
VPN (an alternative route that doesn't hit the firewall) and haven't run 
into a timeout issue so far.

Any idea if there's a fix in the works, or if there is anything that I 
can do? At the very least, it's good to know that the issue is known. 
Thanks for the insight!

Robby

From alberto.trujillo at ucd.ie  Thu Nov  3 07:49:26 2005
From: alberto.trujillo at ucd.ie (Alberto Trujillo)
Date: Thu Nov  3 07:50:00 2005
Subject: [Twisted-web] transferring datas between select box.
Message-ID: <436A2376.8070102@ucd.ie>

Hi everybody:

My question is the next one.
I have a form with two select box. The first one is full of datas 
(select1), and the second one is empty(select2). Also I have two 
buttons, one to transfer datas from select1 to select2 (button1) and the 
other to do the opposite.
I have done this before with javascript, but now I need to do it in 
Nevow 0.5 and with livepage.
Could anybody help me?

Thanks in advance.

From jmalonzo at gmail.com  Fri Nov  4 03:39:30 2005
From: jmalonzo at gmail.com (Jan Alonzo)
Date: Fri Nov  4 04:18:56 2005
Subject: [Twisted-web] HTTP client TODOs
Message-ID: <87vez8r925.fsf@unpluggable.com>



Hi,

Good day everyone! I have a project that I want to port to Twisted. It's an
HTTP client (feed aggregator) and one of the reasons why I want to port it is
so that I can take advantage of what twisted has to offer and focus on other more
important features (and having test apps is, I guess, also good for the
project right? :)

I am new to twisted and one of my priority right now is to help out with the
HTTP client code in the web2 module. Is there a TODO specific to the client
library somewhere that I can look at? 


Cheers,

-- 
Jan Alonzo                          <jmalonzo@unpluggable.com>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 188 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051104/f40f2e89/attachment.bin
From denis.leborgne at rieter.com  Fri Nov  4 08:24:12 2005
From: denis.leborgne at rieter.com (denis.leborgne@rieter.com)
Date: Fri Nov  4 08:25:10 2005
Subject: [Twisted-web] Memory leak with twisted web server on QNX
In-Reply-To: <20051019140530.GP19919@trogdor.home.puzzling.org>
Message-ID: <OF1CEE3A5C.4CBC26DE-ONC12570AF.00539385-C12570AF.00549D13@rieter.com>

thanks for help.

I did not see any difference with the new _c_urlarg moduIe. I made then 
several trials and I found that Python 2.4.1 with Twisted 1.3.0 seems to 
be stable. It now runs for several days without leak. Something a little 
bit strange is that I tried Python 2.4.1 with Twisted 2.0.1 and TwistedWeb 
0.5.0, but with this configuration the memory leak is very important. Yet 
with this config the objects number (length of gc.get_objects()) is 
growing with no collection, as I use exactly the same environment except 
Twisted version.

Can you see a reason for that ?





Andrew Bennetts <andrew-twisted@puzzling.org> 
Sent by: twisted-web-bounces@twistedmatrix.com
19/10/2005 16:05
Please respond to
"Discussion of twisted.web, Nevow,      and Woven" 
<twisted-web@twistedmatrix.com>


To
"Discussion of twisted.web, Nevow,      and Woven" 
<twisted-web@twistedmatrix.com>
cc

Subject
Re: [Twisted-web] Memory leak with twisted web server on QNX





Security Level:?        Internal
On Wed, Oct 19, 2005 at 10:15:24AM +0200, denis.leborgne@rieter.com wrote:
> 
> Hi,
> 
> I use twisted as a very simple web server to serve python scripts. I now 
have a
> problem of memory leak on the server. I use Python 2.2.1 on QNX 6.3, 
Twisted
> version is 1.3.0.
[...]
> About every 4 "refresh", the memory used by my server increases by 96k, 
with
> nor release of memory. I checked the object number by watching len
> (gc.get_objects()), but it is stable.
> Any idea to help me to solve this problem, my server is expected to run
> continuously.

There was a leak in the _c_urlarg.c module in 1.3.0, which causes a string
the size of the url to be leaked every request.  This doesn't sound like 
it
would account for the 96k per 4 requests to me, but perhaps the memory
allocation strategy on QNX explains that.

Either upgrade to Twisted 2.0 or newer, or grab _c_urlarg.c from that
version or SVN (it's a one-line fix) and recompile it, or just delete the
compiled module -- it'll fall back to the slower pure-python version in 
the
standard library, but it won't leak.

Let us know if that solves it, or at least helps.

-Andrew.


_______________________________________________
Twisted-web mailing list
Twisted-web@twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20051104/eeae9d60/attachment.htm
From slamb at slamb.org  Fri Nov  4 08:58:51 2005
From: slamb at slamb.org (Scott Lamb)
Date: Fri Nov  4 08:59:02 2005
Subject: [Twisted-web] HTTP client TODOs
In-Reply-To: <87vez8r925.fsf@unpluggable.com>
References: <87vez8r925.fsf@unpluggable.com>
Message-ID: <436B853B.8040909@slamb.org>

Jan Alonzo wrote:
> I am new to twisted and one of my priority right now is to help out with the
> HTTP client code in the web2 module. Is there a TODO specific to the client
> library somewhere that I can look at? 

I saw some '@@@' markers in comments indicating things that need to be 
fixed or tested.

I have some patches which aren't quite ready for inclusion. No unit 
tests, plus the stream-kludgey-reset.patch is true to its name; it needs 
to be reworked in the manner described in the list discussion.

Actually, the auth-python23.patch is ready, if a committer can merge it. 
I added a unit test in the last patch, which Jp broke on Python 2.3 when 
he applied it. (Don't mess with perfection. ;)

Regards,
Scott
-------------- next part --------------
Fixes bug in which authorization retries of POST actions would not send the
actual data.

http://twistedmatrix.com/pipermail/twisted-web/2005-September/001924.html

Index: twisted/web2/stream.py
===================================================================
--- twisted/web2/stream.py	(revision 14571)
+++ twisted/web2/stream.py	(working copy)
@@ -9,7 +9,8 @@
 
 The IStream interface is very simple. It consists of two methods:
 read, and close. The read method should either return some data, None
-if there is no data left to read, or a Deferred. Close frees up any
+if there is no data left to read, or a Deferred. The reset method will
+make subsequent reads start over from the beginning. Close frees up any
 underlying resources and causes read to return None forevermore.
 
 IByteStream adds a bit more to the API:
@@ -61,6 +62,10 @@
         Errors may be indicated by exception or by a Deferred of a Failure.
         """
         
+
+    def reset():
+        """Resets the stream."""
+
     def close():
         """Prematurely close. Should also cause further reads to
         return None."""
@@ -249,16 +254,19 @@
             if len(mem) < length:
                 raise ValueError("len(mem) < start + length")
             self.length = length
+        self.written = False
 
+    def reset(self):
+        self.written = False
+
     def read(self):
-        if self.mem is None:
+        if self.mem is None or self.written:
             return None
+        self.written = True
         if self.length == 0:
             result = None
         else:
             result = buffer(self.mem, self.start, self.length)
-        self.mem = None
-        self.length = 0
         return result
 
     def close(self):
Index: twisted/web2/client/http.py
===================================================================
--- twisted/web2/client/http.py	(revision 14571)
+++ twisted/web2/client/http.py	(working copy)
@@ -52,8 +52,8 @@
     @ivar extraHeaders: Additional headers you want sent as part of the
         http request
 
-    @type body: str
-    @ivar body: The data associated with this request. This value can be None.
+    @type stream: IByteStream
+    @ivar stream: The data associated with this request. This value can be None.
 
     @type deferred: Deferred
     @ivar deferred: The C{Deferred} that will fire when this
@@ -286,7 +286,7 @@
         # Lastly, if there's a body, send that.
         if self.request.stream:
             if self.factory.logging:
-                _doLog("[Sent] body (%d byte(s))" % len(self.request.body))
+                _doLog("[Started Sending Body]")
 
             d = stream.StreamProducer(self.request.stream).beginProducing(self.transport)
             d.addCallback(self._endSendRequest)
@@ -709,6 +709,8 @@
         if authHeader and self.authHandlers:
             creds = self.authHandlers[authHeader[0].lower()].getCredentials(authHeader[1], request)
             if creds:
+                if request.stream is not None:
+                    request.stream.reset()
                 req = Request(request.method, request.uri, request.args,
                               request.headers, request.stream)
 
-------------- next part --------------
Fixes direct SSL connections. (Though you should use stunnel as a proxy,
anyway - it's much faster.)

Index: twisted/web2/client/http.py
===================================================================
--- twisted/web2/client/http.py	(revision 14553)
+++ twisted/web2/client/http.py	(working copy)
@@ -659,7 +659,7 @@
         if hasattr(self, "wrappingFactory"):
             result = reactor.connectTCP(self.host, self.port, self.wrappingFactory)
         elif self.sslContextFactory is not None:
-            result = reactor.connectSSL(self.host, self.port, self.sslContextFactory, self)
+            result = reactor.connectSSL(self.host, self.port, self, self.sslContextFactory)
         else:
             result = reactor.connectTCP(self.host, self.port, self)
 
-------------- next part --------------
Fixes a bug which caused a new HTTP connection for every request.

HTTPClient._endResponse() was calling self.response.stream.finish(), then
immediately checking if there are any more requests and, since there weren't
any, shutting down the connection. stream._StreamReader doesn't call the
completion deferred until later (with a callLater(0).) Thus, my load tester's
_handleFullResponse was never getting a chance to say "hey, I do have another
request". Give it that chance by using the same CallLater(0) trick before
deciding whether to tear down the connection.

Index: twisted/web2/client/http.py
===================================================================
--- twisted/web2/client/http.py	(revision 14553)
+++ twisted/web2/client/http.py	(working copy)
@@ -482,12 +482,18 @@
             self.state = CONNECTED
         self._decoder = None
 
-        connection = None
         if self.response is not None:
             if self.response.stream is not None:
                 self.response.stream.unregisterProducer()
                 self.response.stream.finish()
 
+        reactor.callLater(0, self._endResponse2)
+
+    def _endResponse2(self):
+        connection = None
+        if self.factory.logging:
+            _doLog("[End Response 2]")
+
         # assert(self.connection is not None)
 #             if self.request is not None and self.request.deferred is not None:
 #                 self.request.deferred.callback(self.response)
-------------- next part --------------
Makes basic authorization work on Python 2.3, which doesn't have b64encode.

Index: twisted/web2/client/auth.py
===================================================================
--- twisted/web2/client/auth.py	(revision 14553)
+++ twisted/web2/client/auth.py	(working copy)
@@ -54,7 +54,7 @@
     scheme = 'Basic'
 
     def encodeCredentials(self, creds, challenge, request=None):
-        return base64.b64encode(':'.join(creds))
+        return base64.encodestring(':'.join(creds)).strip()
 
 
 class HTTPDigestAuthHandler(BaseHTTPAuthHandler):
From slamb at slamb.org  Fri Nov  4 09:13:32 2005
From: slamb at slamb.org (Scott Lamb)
Date: Fri Nov  4 09:13:42 2005
Subject: [Twisted-web] HTTP client TODOs
In-Reply-To: <87vez8r925.fsf@unpluggable.com>
References: <87vez8r925.fsf@unpluggable.com>
Message-ID: <436B88AC.3020201@slamb.org>

Oh, and here's a couple more:

* It doesn't have any cookie management. You can add a raw header for 
cookies, but probably most clients will want more than that. I haven't 
looked at what twisted.web.client does.

* There's some circumstance in which timeouts can be canceled twice, 
yielding the traceback below. I haven't gotten it in a while, but I 
think it's still there.

What's the policy on bugs in branches? Should I add this to the tracker?


Traceback (most recent call last):
   File "./load_generator.py", line 204, in main
     reactor.run()
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 206, in run
     self.mainLoop()
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 217, in mainLoop
     self.doIteration(t)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/internet/selectreactor.py", 
line 133, in doSelect
     _logrun(selectable, _drdw, selectable, method, dict)
--- <exception caught here> ---
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/python/log.py", 
line 58, in callWithLogger
     return callWithContext({"system": lp}, func, *args, **kw)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/python/log.py", 
line 43, in callWithContext
     return context.call({ILogContext: newCtx}, func, *args, **kw)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/python/context.py", 
line 59, in callWithContext
     return self.currentContext().callWithContext(ctx, func, *args, **kw)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/python/context.py", 
line 37, in callWithContext
     return func(*args,**kw)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/internet/selectreactor.py", 
line 149, in _doReadOrWrite
     self._disconnectSelectable(selectable, why, method=="doRead")
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 238, in _disconnectSelectable
     selectable.readConnectionLost(f)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 390, in readConnectionLost
     self.connectionLost(reason)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 555, in connectionLost
     Connection.connectionLost(self, reason)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 401, in connectionLost
     protocol.connectionLost(reason)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/web2/client/http.py", 
line 351, in connectionLost
     self._dealWithFailure(failure)
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/web2/client/http.py", 
line 323, in _dealWithFailure
     self.request.cancelTimeout()
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/web2/client/http.py", 
line 120, in cancelTimeout
     self._timeoutCall.cancel()
   File 
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/internet/base.py", 
line 75, in cancel
     raise error.AlreadyCalled
twisted.internet.error.AlreadyCalled: Tried to cancel an already-called 
event.

From dreid at dreid.org  Fri Nov  4 09:39:35 2005
From: dreid at dreid.org (dreid@dreid.org)
Date: Fri Nov  4 09:39:33 2005
Subject: [Twisted-web] HTTP client TODOs
In-Reply-To: <436B88AC.3020201@slamb.org>
References: <87vez8r925.fsf@unpluggable.com> <436B88AC.3020201@slamb.org>
Message-ID: <49544.67.166.157.80.1131122375.squirrel@dreid.org>

Ok, time to clear things up about the web2-client.  Do not count on
branches/dreid/web2-client/ It isn't going to be maintained.  Why? Because
it is full of kludges, doesn't even do http/1.1 properly and is known to
break intermittently.  dreid/web2-client was created for my employer, it
works in the confines of what we're doing, which isn't very much http, but
we still needed something that worked differently than twisted.web.client.
 So in all likely hood dreid/web2-client will NOT be touched again, that
probably includes bug fixes.  Discussion is underway to build a true
http/1.1 client that supports all the pipelining and stuff of http/1.1 but
no code has been written for it.  So the TODO for a twisted.web2 client?

 * Design one.
 * Write one.

Scott,
  I feel iffy about that fix, but I've always felt iffy about the way it
creates a new request object.  I'll let foom comment on the changes made
to stream.  And the AlreadyCalled exception is a known bug, we've
encountered it maybe twice at work, in the 3 or so months that we've
been using the branch of the branch.  I haven't been able to reproduce
it reliably enough to fix it.  As for cookies, there is very rudimentary
support in my employers branch of the code.  All it does is add the
appropriate outgoing header to the factories headers when it recieves a
Set-Cookie header.  Which I know is quite wrong because it sends the
cookie to everything served by that host which could possibly be more
than one domain.  So yes, dreid/web2-client ... not my best work, it's a
lot of kludges I'm sorry for inflicting this upon you, I'm even more
sorry that I have to tell you that it's not going to go anywhere, and
backwards compatibility isn't going to happen.

-David



From slamb at slamb.org  Fri Nov  4 10:47:14 2005
From: slamb at slamb.org (Scott Lamb)
Date: Fri Nov  4 10:47:22 2005
Subject: [Twisted-web] HTTP client TODOs
In-Reply-To: <49544.67.166.157.80.1131122375.squirrel@dreid.org>
References: <87vez8r925.fsf@unpluggable.com> <436B88AC.3020201@slamb.org>
	<49544.67.166.157.80.1131122375.squirrel@dreid.org>
Message-ID: <335F9872-78E4-41A8-A21E-419DF53D4642@slamb.org>

On Nov 4, 2005, at 8:39 AM, dreid@dreid.org wrote:
> Ok, time to clear things up about the web2-client.  Do not count on
> branches/dreid/web2-client/ It isn't going to be maintained.  Why?  
> Because
> it is full of kludges, doesn't even do http/1.1 properly and is  
> known to
> break intermittently.

It doesn't do HTTP/1.1 properly? What's wrong?

>   dreid/web2-client was created for my employer, it
> works in the confines of what we're doing, which isn't very much  
> http, but
> we still needed something that worked differently than  
> twisted.web.client.

Likewise.

> Scott,
>   I feel iffy about that fix, but I've always felt iffy about the  
> way it
> creates a new request object.  I'll let foom comment on the changes  
> made
> to stream.

The POST stream fix? Yeah, I know that one's crap. But it works for  
me. My patch includes a hyperlink to the discussion of a better fix,  
but I haven't had time to actually do it.

>   And the AlreadyCalled exception is a known bug, we've
> encountered it maybe twice at work, in the 3 or so months that we've
> been using the branch of the branch.  I haven't been able to reproduce
> it reliably enough to fix it.

For a while, I had it happening consistently. Maybe I can get that to  
happen again...

> So yes, dreid/web2-client ... not my best work, it's a
> lot of kludges I'm sorry for inflicting this upon you, I'm even more
> sorry that I have to tell you that it's not going to go anywhere, and
> backwards compatibility isn't going to happen.

Dude, you can apologize all you want, but I'm calling it a tremendous  
success. Even if all copies of dreid/web2-client-related code were to  
be annihilated tomorrow, it totally saved my ass.

Let me tell you how I used it. I had to load test our HTTP-based  
protocol. I had a Java-based load tester tool that a contractor had  
spent...stories vary...one guy said four months, another said six to  
nine months...writing. He would tell them things like "if I just make  
this change, it will compile". Ridiculously low standards. Bizarre  
verbose code with no point. I had this thing dumped on me and needed  
it working in a week. It took me a couple days to figure out that  
there was nothing salvagable there at all.

So I looked for something else. I like Python. I'd heard of Twisted  
but never used it before. I saw that twisted.web.client didn't do  
Keep-Alives, which I needed. Google showed me one of your commits on  
this branch, and I started coding. In a day, I had something usable.  
It wasn't great, but it was a hell of a lot better than using the  
contractor's code. I developed it as I needed it. Now I've got a tool  
that can generate a load that is quite configurable, is reasonably  
fast, is pleasant to run (nice optparse stuff; SIGINT, SIGHUP, and  
SIGTERM do a nice graceful shutdown), reports quick results during  
the run, and generates full reports into a relational database which  
I have a web interface for and a nice graph tool. The load tester is  
700 lines of code, with verbose comments.

I have absolutely no idea how I could have done the rapid development  
I needed had dreid/web2-client not existed. Even if I have to  
completely rewrite my tool from scratch, I needed it _right_then_.  
Even if I hadn't, it was useful as a prototype.

Anyway, I don't think the situation with this branch is nearly as bad  
as you say. Yes, it's kludgey. Yes, I found like 10 bugs. But it  
essentially works, and I don't think the design is fundamentally  
flawed. Tests can be added, and it can be refactored. Other people  
like me will come along, desperately need it, and fix a bunch of  
problems.

-- 
Scott Lamb <http://www.slamb.org/>



From slamb at slamb.org  Fri Nov  4 10:58:01 2005
From: slamb at slamb.org (Scott Lamb)
Date: Fri Nov  4 10:58:06 2005
Subject: [Twisted-web] HTTP client TODOs
In-Reply-To: <335F9872-78E4-41A8-A21E-419DF53D4642@slamb.org>
References: <87vez8r925.fsf@unpluggable.com> <436B88AC.3020201@slamb.org>
	<49544.67.166.157.80.1131122375.squirrel@dreid.org>
	<335F9872-78E4-41A8-A21E-419DF53D4642@slamb.org>
Message-ID: <D68AC1C6-5C71-4EA3-84EB-A2640269698F@slamb.org>

On Nov 4, 2005, at 9:47 AM, Scott Lamb wrote:
> The load tester is 700 lines of code, with verbose comments.

Oh, I forgot the context here. The previous tool was 10,000 lines of  
Java code that didn't work. Python + Twisted - stupid = an order of  
magnitude less code.

-- 
Scott Lamb <http://www.slamb.org/>



From dreid at dreid.org  Fri Nov  4 11:04:47 2005
From: dreid at dreid.org (David Reid)
Date: Fri Nov  4 11:04:42 2005
Subject: [Twisted-web] HTTP client TODOs
In-Reply-To: <D68AC1C6-5C71-4EA3-84EB-A2640269698F@slamb.org>
References: <87vez8r925.fsf@unpluggable.com> <436B88AC.3020201@slamb.org>
	<49544.67.166.157.80.1131122375.squirrel@dreid.org>
	<335F9872-78E4-41A8-A21E-419DF53D4642@slamb.org>
	<D68AC1C6-5C71-4EA3-84EB-A2640269698F@slamb.org>
Message-ID: <50590097-E286-4240-AC49-B876A00B55CF@dreid.org>

On Nov 4, 2005, at 9:58 AM, Scott Lamb wrote:

> On Nov 4, 2005, at 9:47 AM, Scott Lamb wrote:
>> The load tester is 700 lines of code, with verbose comments.
>
> Oh, I forgot the context here. The previous tool was 10,000 lines  
> of Java code that didn't work. Python + Twisted - stupid = an order  
> of magnitude less code.

Well I'm glad it works for you, but I promise something better is on  
the way, the code is flawed in a couple of less that subtle ways, it  
doesn't share a lot of parsing code with the server, which is silly,  
and the API just can't make pipelining work comfortably, the  
abstractions are all wrong, but It's being discussed and something  
better is coming.

-David

From zsombor at niif.hu  Fri Nov  4 17:25:31 2005
From: zsombor at niif.hu (Nagy Zsombor)
Date: Fri Nov  4 17:25:48 2005
Subject: [Twisted-web] Re: Memory leak with twisted web server on QNX
In-Reply-To: <E1EY5es-0001UQ-03@pyramid.twistedmatrix.com>
References: <E1EY5es-0001UQ-03@pyramid.twistedmatrix.com>
Message-ID: <436BFBFB.6010303@niif.hu>

Hello everyone!

[this is my first post]

I had a serious memory leak with twisted 2.0.1 and twisted web 0.5, when 
I created a web server with TLS, and every client connection increased 
the memory usage.
I played with it a lot, and found out, if I comment out line of code in 
twisted.internet.posixbase, the leak is gone...

This one:

     322         def _startTLS(self):
     323             self.TLS = 1
     324             klass = self.__class__
     325             class TLSConnection(_TLSMixin, klass):
     326                 implements(interfaces.ISSLTransport)
!!  327             #components.backwardsCompatImplements(TLSConnection)
     328             self.__class__ = TLSConnection

So if I uncomment this 'backwardCompatImplements' there is a serious 
memory leak, if I comment it out, there is no leak.

I can show you the test programs if you want me to.

Bye,
Zsombor


From exarkun at divmod.com  Fri Nov  4 17:33:53 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri Nov  4 17:33:55 2005
Subject: [Twisted-web] Re: Memory leak with twisted web server on QNX
In-Reply-To: <436BFBFB.6010303@niif.hu>
Message-ID: <20051105003353.10365.1839840690.divmod.quotient.4476@ohm>

On Sat, 05 Nov 2005 01:25:31 +0100, Nagy Zsombor <zsombor@niif.hu> wrote:
>Hello everyone!
>
>[this is my first post]
>
>I had a serious memory leak with twisted 2.0.1 and twisted web 0.5, when I 
>created a web server with TLS, and every client connection increased the 
>memory usage.
>I played with it a lot, and found out, if I comment out line of code in 
>twisted.internet.posixbase, the leak is gone...
>
>This one:
>
>     322         def _startTLS(self):
>     323             self.TLS = 1
>     324             klass = self.__class__
>     325             class TLSConnection(_TLSMixin, klass):
>     326                 implements(interfaces.ISSLTransport)
>!!  327             #components.backwardsCompatImplements(TLSConnection)
>     328             self.__class__ = TLSConnection
>
>So if I uncomment this 'backwardCompatImplements' there is a serious memory 
>leak, if I comment it out, there is no leak.
>
>I can show you the test programs if you want me to.

This makes sense.  I'll see what I can do about it.

Jean-Paul

From exarkun at divmod.com  Fri Nov  4 17:47:41 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri Nov  4 17:47:43 2005
Subject: [Twisted-web] Re: Memory leak with twisted web server on QNX
In-Reply-To: <20051105003353.10365.1839840690.divmod.quotient.4476@ohm>
Message-ID: <20051105004741.10365.100132520.divmod.quotient.4477@ohm>

On Fri, 4 Nov 2005 19:33:53 -0500, Jean-Paul Calderone <exarkun@divmod.com> wrote:
>On Sat, 05 Nov 2005 01:25:31 +0100, Nagy Zsombor <zsombor@niif.hu> wrote:
>>Hello everyone!
>>
>>[this is my first post]
>>
>>I had a serious memory leak with twisted 2.0.1 and twisted web 0.5, when I 
>>created a web server with TLS, and every client connection increased the 
>>memory usage.
>>I played with it a lot, and found out, if I comment out line of code in 
>>twisted.internet.posixbase, the leak is gone...
>>
>>This one:
>>
>>     322         def _startTLS(self):
>>     323             self.TLS = 1
>>     324             klass = self.__class__
>>     325             class TLSConnection(_TLSMixin, klass):
>>     326                 implements(interfaces.ISSLTransport)
>>!!  327             #components.backwardsCompatImplements(TLSConnection)
>>     328             self.__class__ = TLSConnection
>>
>>So if I uncomment this 'backwardCompatImplements' there is a serious memory 
>>leak, if I comment it out, there is no leak.
>>
>>I can show you the test programs if you want me to.
>
>This makes sense.  I'll see what I can do about it.
>

This should be fixed in r15022.  Could you give it a try and let me know?  If it fixes it, we should be able to get this into the next point release.

>Jean-Paul
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web@twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From zsombor at niif.hu  Sat Nov  5 07:02:46 2005
From: zsombor at niif.hu (Nagy Zsombor)
Date: Sat Nov  5 07:02:22 2005
Subject: [Twisted-web] Re: Memory leak with twisted web server on QNX
In-Reply-To: <E1EY6nG-0002Gf-03@pyramid.twistedmatrix.com>
References: <E1EY6nG-0002Gf-03@pyramid.twistedmatrix.com>
Message-ID: <436CBB86.70203@niif.hu>

> This should be fixed in r15022.  Could you give it a try and let me know?  If it fixes it, we should be able to get this into the next point release.

Yes, it fixes it, there is no leak now! :)

Thanks!

Zsombor Nagy


(in my previous mail, i wrote it wrong. it was in twisted.internet.tcp, 
not in posixbase, of course)

From wsanchez at wsanchez.net  Sun Nov  6 23:40:54 2005
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Sun Nov  6 23:41:00 2005
Subject: [Twisted-web] Problems with web2.test.test_static.TestFileSaver
Message-ID: <4C6B9685-7E2E-4441-8967-E9EC1002088E@wsanchez.net>

   web2.test.test_static.TestFileSaver has been failing on my DAV  
branch.  dreid and I were looking into it at SHDH and were generally  
baffled by the breakage.

   I remain baffled, but have managed to figure out that the test  
isn't breaking due to the addition of code, but by the simple  
existence of the test modules in my code.  I can reproduce the  
problem in trunk by doing the following:

	cd twisted/web2
	mkdir dav
	touch dav/__init__.py
	mkdir test
	touch dav/test/__init__.py
	echo "import twisted.web2.static" > dav/test/test_OPTIONS.py

   And then run "trial twisted.web2" and watch it blow up in  
TestFileSaver.

   In  
twisted.web2.test.test_static.TestFileSaver.testCompareFileContents 
(), when the callback gotFname() gets called, if the dav test is not  
present, then fname is being set to this string:

     fname = "y>\ntwisted.web2.test.test_static/TestFileSaver/ 
testCompareFileContents/2336.1/4eb6d0fcd8319ae61aa0639f3c4c1128: File  
type not allowed MimeType('text', 'plain', {})"

... which is apparently including some previous error condition which  
is being passed along in a strange sort of way.

	-wsv


From alberto.trujillo at ucd.ie  Mon Nov  7 06:05:08 2005
From: alberto.trujillo at ucd.ie (Alberto Trujillo)
Date: Mon Nov  7 06:05:11 2005
Subject: [Twisted-web] problems with select boxes.
Message-ID: <436F5104.7060003@ucd.ie>

Hi everybody:

My question is the next one.
I have implement a form in stan with two select box. The first one is full of datas 
(select1), and the second one is empty(select2). Also I have two 
buttons, one to transfer datas from select1 to select2 (button1) and the 
other to do the opposite.

Until now I only can get the value of the item which is selected, but I don't know how to get the text.
This is what I'm doing.


    /T.input(name="button1", value="+", type="button",
    onclick=livepage.server.handle("addItem", /
    /livepage.get("select1").value, livepage.get("select1").text)/

    /..../

    /def handle_addItem(self,ctx, value, text):/
    /  print "value: %s text: %s" % (value, text)/
    /  yield livepage.set("select2", value, text)/

I only can see the value with the print function, because text is undefined.
How can I get the text, and how can add this values after in the select2?

I'm running Nevow 0.5.

Thanks in advance.


From denis.leborgne at rieter.com  Mon Nov  7 07:09:59 2005
From: denis.leborgne at rieter.com (denis.leborgne@rieter.com)
Date: Mon Nov  7 07:10:12 2005
Subject: [Twisted-web] Re: Memory leak with twisted web server on QNX
In-Reply-To: <20051105004741.10365.100132520.divmod.quotient.4477@ohm>
Message-ID: <OFCBA512E3.E2EBDA32-ONC12570B2.004D9BA0-C12570B2.004DD1C8@rieter.com>

I tried also the release 15022, in my case it doesn't fix the memory leak. 
Do you have any idea about objects not collected ?




Jean-Paul Calderone <exarkun@divmod.com> 
Sent by: twisted-web-bounces@twistedmatrix.com
05/11/2005 01:47
Please respond to
"Discussion of twisted.web, Nevow,      and Woven" 
<twisted-web@twistedmatrix.com>


To
Discussion of twisted.web, Nevow, and Woven 
<twisted-web@twistedmatrix.com>
cc

Subject
Re: [Twisted-web] Re: Memory leak with twisted web server on QNX





Security Level:?        Internal
On Fri, 4 Nov 2005 19:33:53 -0500, Jean-Paul Calderone 
<exarkun@divmod.com> wrote:
>On Sat, 05 Nov 2005 01:25:31 +0100, Nagy Zsombor <zsombor@niif.hu> wrote:
>>Hello everyone!
>>
>>[this is my first post]
>>
>>I had a serious memory leak with twisted 2.0.1 and twisted web 0.5, when 
I 
>>created a web server with TLS, and every client connection increased the 

>>memory usage.
>>I played with it a lot, and found out, if I comment out line of code in 
>>twisted.internet.posixbase, the leak is gone...
>>
>>This one:
>>
>>     322         def _startTLS(self):
>>     323             self.TLS = 1
>>     324             klass = self.__class__
>>     325             class TLSConnection(_TLSMixin, klass):
>>     326                 implements(interfaces.ISSLTransport)
>>!!  327             #components.backwardsCompatImplements(TLSConnection)
>>     328             self.__class__ = TLSConnection
>>
>>So if I uncomment this 'backwardCompatImplements' there is a serious 
memory 
>>leak, if I comment it out, there is no leak.
>>
>>I can show you the test programs if you want me to.
>
>This makes sense.  I'll see what I can do about it.
>

This should be fixed in r15022.  Could you give it a try and let me know? 
If it fixes it, we should be able to get this into the next point release.

>Jean-Paul
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web@twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

_______________________________________________
Twisted-web mailing list
Twisted-web@twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20051107/a677bcdb/attachment.htm
From andrew-twisted at puzzling.org  Mon Nov  7 09:12:26 2005
From: andrew-twisted at puzzling.org (andrew-twisted@puzzling.org)
Date: Mon Nov  7 09:12:31 2005
Subject: [Twisted-web] Re: Memory leak with twisted web server on QNX
In-Reply-To: <OFCBA512E3.E2EBDA32-ONC12570B2.004D9BA0-C12570B2.004DD1C8@rieter.com>
References: <20051105004741.10365.100132520.divmod.quotient.4477@ohm>
	<OFCBA512E3.E2EBDA32-ONC12570B2.004D9BA0-C12570B2.004DD1C8@rieter.com>
Message-ID: <20051107161226.GA20302@home.puzzling.org>

On Mon, Nov 07, 2005 at 03:09:59PM +0100, denis.leborgne@rieter.com wrote:
> I tried also the release 15022, in my case it doesn't fix the memory leak. 
> Do you have any idea about objects not collected ?

Use something like http://twistedmatrix.com/users/spiv/countrefs.py to get an
idea about which objects are leaking.  It should help you narrow down the
problem.

-Andrew.


From foom at fuhm.net  Mon Nov  7 21:52:15 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon Nov  7 21:52:22 2005
Subject: [Twisted-web] Problems with web2.test.test_static.TestFileSaver
In-Reply-To: <4C6B9685-7E2E-4441-8967-E9EC1002088E@wsanchez.net>
References: <4C6B9685-7E2E-4441-8967-E9EC1002088E@wsanchez.net>
Message-ID: <0D7E5F09-8E3F-454B-8FB1-B35C6E8C4040@fuhm.net>

On Nov 7, 2005, at 1:40 AM, Wilfredo S?nchez Vega wrote:
>   web2.test.test_static.TestFileSaver has been failing on my DAV  
> branch.  dreid and I were looking into it at SHDH and were  
> generally baffled by the breakage.
>
>   I remain baffled, but have managed to figure out that the test  
> isn't breaking due to the addition of code, but by the simple  
> existence of the test modules in my code.  I can reproduce the  
> problem in trunk by doing the following:
>

First let me apologize for not being around this weekend, I would  
have liked to help out, but I've had a nasty fever and have basically  
been sleeping.

Anyhow, I can solve this mystery for you. It is caused by the reload 
() of twisted.web2.http_headers in twisted/web2/test/__init__.py.  
That causes twisted.web2.http_headers.MimeType to be a new class, but  
the old instances created in static.FileSaver.allowedTypes still  
pointed to the old class. Thus the "File type not allowed" bit.

It is fixed by using twisted.python.rebuild.rebuild() instead, which  
updates said references. Except that rebuild doesn't seem to rebuild  
instances of oldstyle classes. So I updated the classes to be  
newstyle, which they should be anyhow.

The reason for the odd output is that the test case used data 
[data.find(...)+11:data.find(...)]. If find fails, it returns -1. As  
the MimeType passed was not in the allowed set, the file was not  
being saved and the output was not as expected. Fixed that to  
use .index instead so it fails more obviously.

James


From jmalonzo at unpluggable.com  Mon Nov  7 15:41:14 2005
From: jmalonzo at unpluggable.com (Jan Alonzo)
Date: Tue Nov  8 04:48:44 2005
Subject: [Twisted-web] Re: HTTP client TODOs
In-Reply-To: <50590097-E286-4240-AC49-B876A00B55CF@dreid.org> (David Reid's
	message of "Fri, 4 Nov 2005 10:04:47 -0800")
References: <87vez8r925.fsf@unpluggable.com> <436B88AC.3020201@slamb.org>
	<49544.67.166.157.80.1131122375.squirrel@dreid.org>
	<335F9872-78E4-41A8-A21E-419DF53D4642@slamb.org>
	<D68AC1C6-5C71-4EA3-84EB-A2640269698F@slamb.org>
	<50590097-E286-4240-AC49-B876A00B55CF@dreid.org>
Message-ID: <87y840jd2t.fsf@unpluggable.com>



David, 


Hi! Thanks for clearing up the situation.

David Reid <dreid@dreid.org> writes:


<snip>

> make pipelining work comfortably, the  abstractions are all wrong, but It's
> being discussed and something  better is coming.
>

So is this still on the drawing board or there's already a branch somewhere?
I've got some time to spare and I would love to help out (either it's coding
or testing).

Cheers,

-- 
Jan Alonzo                          <jmalonzo@unpluggable.com>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 188 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051108/08b47132/attachment.pgp
From jay at meangrape.com  Tue Nov  8 20:36:15 2005
From: jay at meangrape.com (Jay)
Date: Tue Nov  8 20:35:55 2005
Subject: [Twisted-web] Instance of child element class never goes away?
Message-ID: <20051109033615.GB6066@mail.meangrape.com>

Hi, all.

This is my first swing at using twisted...and I'm not much of a python
jockey either.  I'm using twisted.web2, python 2.4.2 on FreeBSD.

I've got a simple (two page) application right now -- most of it is
shamelessly cribbed from the example provided in the documentation.

There's the TopLevel which has one child page -- child_antitrypsin.
child_antitrypsin is an instance of a Query class that returns a plain old
HTML string via http.Response.

Now, to get that string, the Query class has to send a request to another
server, get and parse an XML document and construct the string.  All well
and good.

The problem I'm having is that the first child_antitrypsin that gets
instantiated seems to be the only one that ever gets created.  Refreshing
the page -- or clicking on the link -- gives me the string twice...or three
times or however many.  So, if the first result was "APPLE", the second
time, I'd get "APPLEAPPLE" and so on.

lynx -dump -head shows that the Last-Modified time is always the same (ie,
the creation time).

The behavior I expected was for the link to get clicked, the child to get
instantiated, do its work, return a result and go away.  Do I need to
explicitly kill the child object?  

Thanks!

-- 
Jay.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 187 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051108/00607efe/attachment.pgp
From tv at twistedmatrix.com  Wed Nov  9 01:16:48 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed Nov  9 01:16:59 2005
Subject: [Twisted-web] Instance of child element class never goes away?
In-Reply-To: <20051109033615.GB6066@mail.meangrape.com>
References: <20051109033615.GB6066@mail.meangrape.com>
Message-ID: <4371B070.1070505@twistedmatrix.com>

Jay wrote:
> There's the TopLevel which has one child page -- child_antitrypsin.
> child_antitrypsin is an instance of a Query class that returns a plain old
> HTML string via http.Response.
...
> The problem I'm having is that the first child_antitrypsin that gets
> instantiated seems to be the only one that ever gets created.  Refreshing
> the page -- or clicking on the link -- gives me the string twice...or three
> times or however many.  So, if the first result was "APPLE", the second
> time, I'd get "APPLEAPPLE" and so on.

I'm guessing you have

class TopLevel(...):
    ...
    child_antitrypsin = Query()

which instantiates the child exactly once, at program startup.
You probably wanted

class TopLevel(...):
    ...
    def child_antitrypsin(self, ctx): return Query()

But as you provided no details, this is just a guess.
And my crystal ball is all dusty.

From jay at meangrape.com  Wed Nov  9 05:12:36 2005
From: jay at meangrape.com (Jay)
Date: Wed Nov  9 05:12:19 2005
Subject: [Twisted-web] Instance of child element class never goes away?
In-Reply-To: <4371B070.1070505@twistedmatrix.com>
References: <20051109033615.GB6066@mail.meangrape.com>
	<4371B070.1070505@twistedmatrix.com>
Message-ID: <20051109121236.GA13029@mail.meangrape.com>

Morning, everyone,

On Wed, Nov 09, 2005 at 10:16:48AM +0200, Tommi Virtanen wrote:
> You probably wanted
> 
> class TopLevel(...):
>     ...
>     def child_antitrypsin(self, ctx): return Query()
 
> But as you provided no details, this is just a guess.
> And my crystal ball is all dusty.

Your crystal ball is looking pretty good from here.  That's exactly what the
problem is -- makes perfect sense, too.

Thanks!

-- 
Jay.

From spex66 at gmx.net  Wed Nov  9 15:59:21 2005
From: spex66 at gmx.net (Peter Arwanitis)
Date: Wed Nov  9 15:59:24 2005
Subject: [Twisted-web] why doesn't work nevow.example.callremote with IE
	(InternetExplorer)?
Message-ID: <4f5e04810511091459i49720f0cp57304a8b1a223596@mail.gmail.com>

Hi there,

callremote example demonstrates the notifyOnDisconnect() feature for
athena-livepages (using twisted2.0.1 / nevow0.6.0 / python2.3.5 on winXP).

Firefox triggers with a reload of the page or a change to another page the
callbacks added to notifyOnDisconnect _immediately_ --> perfect!
'A client lives!'
'A client dies!' twisted.internet.error.ConnectionDone: Connection was
closed cleanly.
'A client lives!'
'A client dies!' twisted.internet.error.ConnectionDone: Connection was
closed cleanly.
...
Why doesn't this work with IE, too??? The connections dies in a delayed
timeout... but not immediately. The problem is, that meanwhile open
connections from IE to webserver was established, and they are limited to
TWO!!! And the whole things hangs, waiting for timeouts to free the
connections.So this will be a serious bottleneck! (at least for my design
:-/)
'A client lives!'
'A client lives!'
...
...
later: 'A client dies!' twisted.internet.error.TimeoutError: User timeout
transports created by client.

thanks to exarkun on irc and his hint to
http://www.winguides.com/registry/display.php/536, you can play with number
of needed connections, but leaving / refreshing a livepage

The mechanism is based on twisted.web.server.Request.notifyFinish() and
hopes that this one is throwing a
"twisted.internet.error.ConnectionDone: Connection was closed cleanly." if
the connection got lost.

But this error to trigger the req.notifyFinish().addErrback(...) does not
come with IE leaving or reloading a page.

Is this specific for me, or can somebody else reproduce this "feature".

Does someone have deeper knowledge about the live-connection hold with IE
from athena? And how notifyOnDisconnect() could work with IE, too???

thanks a lot

greetings from germany, munich
Peter
(=PA=)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20051109/d00c8ba5/attachment.htm
From spex66 at gmx.net  Wed Nov  9 17:10:31 2005
From: spex66 at gmx.net (Peter Arwanitis)
Date: Wed Nov  9 17:10:35 2005
Subject: [Twisted-web] Re: why doesn't work nevow.example.callremote with IE
	(InternetExplorer)?
In-Reply-To: <4f5e04810511091459i49720f0cp57304a8b1a223596@mail.gmail.com>
References: <4f5e04810511091459i49720f0cp57304a8b1a223596@mail.gmail.com>
Message-ID: <4f5e04810511091610j25b6e436ue04a7746b63ebd7e@mail.gmail.com>

Hmm first self-reply...

after irc and own deja-vu... I started to compare chatola based on older
lifepage implementation, because same
req.notifyFinish().addErrback(...)
thingy was used in
nevow.livepage.OutputHandlerResource.renderHTTP(...)

and strange... chatola based on this can handle leaving IE's immediately!

But I cannot see the difference of the two connection-pattern
(athena/livepage)... there are too much surrounding code-jungle for me

anybody else?
Peter
(=PA=)

On 11/9/05, Peter Arwanitis <spex66@gmx.net> wrote:
>
> Hi there,
>
> callremote example demonstrates the notifyOnDisconnect() feature for
> athena-livepages (using twisted2.0.1 / nevow0.6.0 / python2.3.5 on winXP).
>
> Firefox triggers with a reload of the page or a change to another page the
> callbacks added to notifyOnDisconnect _immediately_ --> perfect!
> 'A client lives!'
> 'A client dies!' twisted.internet.error.ConnectionDone: Connection was
> closed cleanly.
> 'A client lives!'
> 'A client dies!' twisted.internet.error.ConnectionDone: Connection was
> closed cleanly.
> ...
> Why doesn't this work with IE, too??? The connections dies in a delayed
> timeout... but not immediately. The problem is, that meanwhile open
> connections from IE to webserver was established, and they are limited to
> TWO!!! And the whole things hangs, waiting for timeouts to free the
> connections.So this will be a serious bottleneck! (at least for my design
> :-/)
> 'A client lives!'
> 'A client lives!'
> ...
> ...
> later: 'A client dies!' twisted.internet.error.TimeoutError: User timeout
> transports created by client.
>
> thanks to exarkun on irc and his hint to
> http://www.winguides.com/registry/display.php/536, you can play with
> number of needed connections, but leaving / refreshing a livepage
>
> The mechanism is based on twisted.web.server.Request.notifyFinish() and
> hopes that this one is throwing a
> "twisted.internet.error.ConnectionDone: Connection was closed cleanly." if
> the connection got lost.
>
> But this error to trigger the req.notifyFinish().addErrback(...) does not
> come with IE leaving or reloading a page.
>
> Is this specific for me, or can somebody else reproduce this "feature".
>
> Does someone have deeper knowledge about the live-connection hold with IE
> from athena? And how notifyOnDisconnect() could work with IE, too???
>
> thanks a lot
>
> greetings from germany, munich
> Peter
> (=PA=)
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20051110/db711198/attachment.htm
From spex66 at gmx.net  Wed Nov  9 18:28:42 2005
From: spex66 at gmx.net (Peter Arwanitis)
Date: Wed Nov  9 18:28:45 2005
Subject: [Twisted-web] Re: why doesn't work nevow.example.callremote with IE
	(InternetExplorer)?
In-Reply-To: <4f5e04810511091610j25b6e436ue04a7746b63ebd7e@mail.gmail.com>
References: <4f5e04810511091459i49720f0cp57304a8b1a223596@mail.gmail.com>
	<4f5e04810511091610j25b6e436ue04a7746b63ebd7e@mail.gmail.com>
Message-ID: <4f5e04810511091728i4fa8c470pdc4bb36ad250dc91@mail.gmail.com>

third and solved

another irc and thanks to harshaw, who have found the missing link between
liveglue.js and athena.js

indeed a IE specific thing. he postet a fix against athena.js from nevow060,
porting a part from liveglue.js:
http://deadbeefbabe.org/paste/2093

and the world is spinning again
thanks exarkun, harshaw!

good night from germany
Peter
(=PA=)

On 11/10/05, Peter Arwanitis <spex66@gmx.net> wrote:
>
> Hmm first self-reply...
>
> after irc and own deja-vu... I started to compare chatola based on older
> lifepage implementation, because same
> req.notifyFinish().addErrback(...)
> thingy was used in
> nevow.livepage.OutputHandlerResource.renderHTTP(...)
>
> and strange... chatola based on this can handle leaving IE's immediately!
>
> But I cannot see the difference of the two connection-pattern
> (athena/livepage)... there are too much surrounding code-jungle for me
>
> anybody else?
> Peter
> (=PA=)
>
> On 11/9/05, Peter Arwanitis <spex66@gmx.net> wrote:
> >
> > Hi there,
> >
> > callremote example demonstrates the notifyOnDisconnect() feature for
> > athena-livepages (using twisted2.0.1 / nevow0.6.0 / python2.3.5 on
> > winXP).
> >
> > Firefox triggers with a reload of the page or a change to another page
> > the callbacks added to notifyOnDisconnect _immediately_ --> perfect!
> > 'A client lives!'
> > 'A client dies!' twisted.internet.error.ConnectionDone: Connection was
> > closed cleanly.
> > 'A client lives!'
> > 'A client dies!' twisted.internet.error.ConnectionDone: Connection was
> > closed cleanly.
> > ...
> > Why doesn't this work with IE, too??? The connections dies in a delayed
> > timeout... but not immediately. The problem is, that meanwhile open
> > connections from IE to webserver was established, and they are limited to
> > TWO!!! And the whole things hangs, waiting for timeouts to free the
> > connections.So this will be a serious bottleneck! (at least for my
> > design :-/)
> > 'A client lives!'
> > 'A client lives!'
> > ...
> > ...
> > later: 'A client dies!' twisted.internet.error.TimeoutError: User
> > timeout transports created by client.
> >
> > thanks to exarkun on irc and his hint to
> > http://www.winguides.com/registry/display.php/536, you can play with
> > number of needed connections, but leaving / refreshing a livepage
> >
> > The mechanism is based on twisted.web.server.Request.notifyFinish() and
> > hopes that this one is throwing a
> > "twisted.internet.error.ConnectionDone: Connection was closed cleanly."
> > if the connection got lost.
> >
> > But this error to trigger the req.notifyFinish().addErrback(...) does
> > not come with IE leaving or reloading a page.
> >
> > Is this specific for me, or can somebody else reproduce this "feature".
> >
> > Does someone have deeper knowledge about the live-connection hold with
> > IE from athena? And how notifyOnDisconnect() could work with IE, too???
> >
> > thanks a lot
> >
> > greetings from germany, munich
> > Peter
> > (=PA=)
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20051110/8726815b/attachment.htm
From mailinglists at smartology.nl  Thu Nov 10 01:12:02 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Thu Nov 10 01:12:09 2005
Subject: [Twisted-web] Weird problem with XMLRPC -> ('405',
	'Method Not Allowed')
Message-ID: <437300D2.8030701@smartology.nl>

I've run into a problem with my twisted xmlrpc test server (using
twisted version 2.01 or 2.1).

Every time the client calls the echo function a '405 Method Not Allowed
is returned'.

This code ran in Twisted 1.3 without problems ... what's changed besides the zope interface 
implements.

Any ideas?

Here's the server code:

#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-

""""""
import sys

from twisted.application import internet, service
from twisted.internet import reactor, protocol, defer
from twisted.web import resource, server, static, xmlrpc
from twisted.python import components, rebuild
from zope.interface import Interface, implements


class myXMLRPC(xmlrpc.XMLRPC):
    """This class contains all root xmlrpc methods and the modules
subhandler."""
    def __init__(self, service):
        xmlrpc.XMLRPC.__init__(self)
        self.service = service
   
    def xmlrpc_echo(self, x):
        """Simple echo function"""
        return x
       
   
def catchError(err):
    return "Internal error in server"
   
   
class IowwService(components.Interface):
    """"""
    def rebuild(self, modname):
        """Rebuild classes in given module"""
       

class httpResource(resource.Resource):

    implements(resource.IResource)
   
    def __init__(self, service):
        resource.Resource.__init__(self)
        self.service = service
        self.putChild('RPC2', myXMLRPC(self.service))      

    def render(self, request):
        self._clientIP = request.getClientIP()
        return resource.Resource.render(self, request)

    def render_GET(self, request):
        """Process HTTP GET Requests."""
        return '<html><body><h3>Not Implemented</h3></body></html>'
       
    def getChild(self, path, request):
        """This method handles http calls"""
        return httpResource(self.service)

components.registerAdapter(httpResource, IowwService, resource.IResource)


class owwService(service.Service):
    """"""
    implements(IowwService)
   
    def rebuild(self, modname):
        """Rebuild classes in given module"""
        mod = sys.modules[modname]
        rebuild.rebuild(mod)

       
def main():
    """"""
    application = service.Application('OWW', uid=100, gid=100)
    s = owwService()
    serviceCollection = service.IServiceCollection(application)
    internet.TCPServer(7080,
server.Site(resource.IResource(s))).setServiceParent(serviceCollection)
    serviceCollection.startService() 
    reactor.run()

if __name__ == '__main__':
    main()


And the client code:

#!/usr/bin/env python

from twisted.web.xmlrpc import Proxy
from twisted.internet import reactor

def printValue(value):
    print repr(value)
    reactor.stop()

def printError(error):
    print 'error', error
    reactor.stop()

proxy = Proxy('http://localhost:7080')
proxy.callRemote('echo', 'hello world').addCallbacks(printValue, printError)
reactor.run()


From mailinglists at smartology.nl  Thu Nov 10 01:39:17 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Thu Nov 10 01:39:26 2005
Subject: [Twisted-web] Weird problem with XMLRPC -> ('405',	'Method Not
	Allowed')
In-Reply-To: <437300D2.8030701@smartology.nl>
References: <437300D2.8030701@smartology.nl>
Message-ID: <43730735.3090107@smartology.nl>

Remi Cool wrote:

>I've run into a problem with my twisted xmlrpc test server (using
>twisted version 2.01 or 2.1).
>
>Every time the client calls the echo function a '405 Method Not Allowed
>is returned'.
>
>This code ran in Twisted 1.3 without problems ... what's changed besides the zope interface 
>implements.
>
A print statement in the render method:

def render(self, request):
   self._clientIP = request.getClientIP()
   print 'REQUEST:', request
   return resource.Resource.render(self, request)


gave: "<POST / HTTP/1.0>" ... shouldn't that be "<POST /RPC2 HTTP/1.0>" ?

The client code works fine with a simplefied server:

#!/usr/bin/env python

from twisted.web import xmlrpc, server

class Example(xmlrpc.XMLRPC):
    """An example object to be published."""

    def xmlrpc_echo(self, x):
        """Return all passed args."""
        return x

if __name__ == '__main__':
    from twisted.internet import reactor
    r = Example()
    reactor.listenTCP(7080, server.Site(r))
    reactor.run()





From abdallah.deeb at gmail.com  Sat Nov 12 15:53:27 2005
From: abdallah.deeb at gmail.com (Abdallah Deeb)
Date: Sat Nov 12 15:53:30 2005
Subject: [Twisted-web] PHP support on Windows
Message-ID: <6cb54b580511121453wf5405d1o6257b722bb11e72a@mail.gmail.com>

Hello everyone,

I'm trying to run some php code on twisted.web using some simple code.
it works on my gentoo system but fails on Windows XP. The problem only
appears when running PHP code, html is served with no problems.

The code is as follows: (taken from one of the samples)

import os
from twisted.internet import reactor
from twisted.application import internet, service
from twisted.web import static, server, twcgi, script

class PHPScript(twcgi.FilteredScript):
    filter = 'c:\\PHP\\php'

root = static.File(os.getcwd())
root.processors = {
            '.php': PHPScript,
            '.epy': script.PythonScript,
            '.rpy': script.ResourceScript,
}
application = service.Application('web')
site = server.Site(root)
reactor.listenTCP(1999, site)
reactor.run()

and the error I get is ... (partially)
C:\Python24\lib\site-packages\twisted\internet\default.py, line 179 in
spawnProcess
177    #    raise NotImplementedError, "process not available since
win32all is not installed"
178    else:
179      raise NotImplementedError, "process only available in this " \
180         "reactor on POSIX, use win32eventreactor on Windows"

I'm running php 4.3.7 with the latest release of twisted, python 2.4.1
and Windows XP Pro

TIA
Abdallah Deeb

From dmitrikozhevin at gmail.com  Sat Nov 12 18:47:50 2005
From: dmitrikozhevin at gmail.com (Dan Shidlovsky)
Date: Sat Nov 12 18:47:53 2005
Subject: [Twisted-web] PHP support on Windows
In-Reply-To: <6cb54b580511121453wf5405d1o6257b722bb11e72a@mail.gmail.com>
References: <6cb54b580511121453wf5405d1o6257b722bb11e72a@mail.gmail.com>
Message-ID: <765bf0040511121747u9500972g@mail.gmail.com>

Do you install  pywin extension from
http://sourceforge.net/project/showfiles.php?group_id=78018 ?

From glyph at divmod.com  Sat Nov 12 19:31:07 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Sat Nov 12 19:31:09 2005
Subject: [Twisted-web] PHP support on Windows
In-Reply-To: <6cb54b580511121453wf5405d1o6257b722bb11e72a@mail.gmail.com>
Message-ID: <20051113023107.10365.430913310.divmod.quotient.7135@ohm>

On Sun, 13 Nov 2005 00:53:27 +0200, Abdallah Deeb <abdallah.deeb@gmail.com> wrote:

>179      raise NotImplementedError, "process only available in this " \
>180         "reactor on POSIX, use win32eventreactor on Windows"

Are you, as the error message suggests, using the win32 reactor?

From abdallah.deeb at gmail.com  Sun Nov 13 02:10:28 2005
From: abdallah.deeb at gmail.com (Abdallah Deeb)
Date: Sun Nov 13 02:10:31 2005
Subject: [Twisted-web] PHP support on Windows
In-Reply-To: <20051113023107.10365.430913310.divmod.quotient.7135@ohm>
References: <6cb54b580511121453wf5405d1o6257b722bb11e72a@mail.gmail.com>
	<20051113023107.10365.430913310.divmod.quotient.7135@ohm>
Message-ID: <6cb54b580511130110m2748c0c7u9c25ac082f6ffbf7@mail.gmail.com>

> Do you install  pywin extension from ...
if by pywin you mean Mark Hammond's win32 extensions, then they are installed.

> Are you, as the error message suggests, using the win32 reactor?
replacing the default reactor with the win32 reactor removes the error
and everything else ... the program runs, but does not respond to any
requests. I might be doing it the wrong way though. Could you give me
an example on how to use the win32 reactor. here's what I have so far:
(and it's not working)

import os
from twisted.internet import reactor, win32eventreactor
from twisted.application import internet, service
from twisted.web import static, server, twcgi, script

class PHPScript(twcgi.FilteredScript):
    filter = 'c:\\PHP\\php.exe'

root = static.File(os.getcwd())
root.processors = {
            '.php': PHPScript,
            '.epy': script.PythonScript,
            '.rpy': script.ResourceScript,
}
application = service.Application('web')
site = server.Site(root)
reactor = win32eventreactor.Win32Reactor()
reactor.listenTCP(1999, site)
reactor.run()

From exarkun at divmod.com  Sun Nov 13 10:14:03 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun Nov 13 10:14:06 2005
Subject: [Twisted-web] PHP support on Windows
In-Reply-To: <6cb54b580511130110m2748c0c7u9c25ac082f6ffbf7@mail.gmail.com>
Message-ID: <20051113171403.10365.880424356.divmod.quotient.7321@ohm>

On Sun, 13 Nov 2005 11:10:28 +0200, Abdallah Deeb <abdallah.deeb@gmail.com> wrote:
>> Do you install  pywin extension from ...
>if by pywin you mean Mark Hammond's win32 extensions, then they are installed.
>
>> Are you, as the error message suggests, using the win32 reactor?
>replacing the default reactor with the win32 reactor removes the error
>and everything else ... the program runs, but does not respond to any
>requests. I might be doing it the wrong way though. Could you give me
>an example on how to use the win32 reactor. here's what I have so far:
>(and it's not working)
>
>import os
>from twisted.internet import reactor, win32eventreactor
>from twisted.application import internet, service
>from twisted.web import static, server, twcgi, script
>
>class PHPScript(twcgi.FilteredScript):
>    filter = 'c:\\PHP\\php.exe'
>
>root = static.File(os.getcwd())
>root.processors = {
>            '.php': PHPScript,
>            '.epy': script.PythonScript,
>            '.rpy': script.ResourceScript,
>}
>application = service.Application('web')
>site = server.Site(root)
>reactor = win32eventreactor.Win32Reactor()
>reactor.listenTCP(1999, site)
>reactor.run()

http://twistedmatrix.com/projects/core/documentation/howto/choosing-reactor.html#auto8

Jean-Paul

From abdallah.deeb at gmail.com  Sun Nov 13 11:08:29 2005
From: abdallah.deeb at gmail.com (Abdallah Deeb)
Date: Sun Nov 13 11:08:32 2005
Subject: [Twisted-web] PHP support on Windows
In-Reply-To: <20051113171403.10365.880424356.divmod.quotient.7321@ohm>
References: <6cb54b580511130110m2748c0c7u9c25ac082f6ffbf7@mail.gmail.com>
	<20051113171403.10365.880424356.divmod.quotient.7321@ohm>
Message-ID: <6cb54b580511131008x5645746fs63b63e853fa4d394@mail.gmail.com>

Jean-Paul,

Thank you, we're heading somewhere... now it's serving the HTML files
correctly, but PHP scripts die with a:
CGI Script Error
Premature end of script headers.

from twisted.internet import reactor, win32eventreactor
...
win32eventreactor.install()
reactor = win32eventreactor.Win32Reactor()
reactor.listenTCP(1999, site)
reactor.run()

>From the logs:
cmdline	'c:\\PHP\\php c:\\Code\\Web\\index.php'
command	'c:\\PHP\\php'
path	'c:\\Code\\Web'

Any ideas would be appreciated.

Thank you all guys for your help.

On 11/13/05, Jean-Paul Calderone <exarkun@divmod.com> wrote:
> http://twistedmatrix.com/projects/core/documentation/howto/choosing-reactor.html#auto8
>
--
Abdallah Deeb

From andrew-twisted at puzzling.org  Sun Nov 13 22:41:25 2005
From: andrew-twisted at puzzling.org (andrew-twisted@puzzling.org)
Date: Sun Nov 13 22:41:31 2005
Subject: [Twisted-web] PHP support on Windows
In-Reply-To: <6cb54b580511131008x5645746fs63b63e853fa4d394@mail.gmail.com>
References: <6cb54b580511130110m2748c0c7u9c25ac082f6ffbf7@mail.gmail.com>
	<20051113171403.10365.880424356.divmod.quotient.7321@ohm>
	<6cb54b580511131008x5645746fs63b63e853fa4d394@mail.gmail.com>
Message-ID: <20051114054125.GA31774@home.puzzling.org>

On Sun, Nov 13, 2005 at 08:08:29PM +0200, Abdallah Deeb wrote:
> Jean-Paul,
> 
> Thank you, we're heading somewhere... now it's serving the HTML files
> correctly, but PHP scripts die with a:
> CGI Script Error
> Premature end of script headers.

It may be that the twisted.web CGI module doesn't expect non-unix line
endings.  You'll probably need to dig in the source a little if you are stuck.

-Andrew.


From ronaldoussoren at mac.com  Sun Nov 13 23:53:09 2005
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Sun Nov 13 23:54:25 2005
Subject: [Twisted-web] PHP support on Windows
In-Reply-To: <6cb54b580511131008x5645746fs63b63e853fa4d394@mail.gmail.com>
References: <6cb54b580511130110m2748c0c7u9c25ac082f6ffbf7@mail.gmail.com>
	<20051113171403.10365.880424356.divmod.quotient.7321@ohm>
	<6cb54b580511131008x5645746fs63b63e853fa4d394@mail.gmail.com>
Message-ID: <B5E08047-48C8-4C99-A143-EA3D98A0D0ED@mac.com>


On 13-nov-2005, at 19:08, Abdallah Deeb wrote:

> Jean-Paul,
>
> Thank you, we're heading somewhere... now it's serving the HTML files
> correctly, but PHP scripts die with a:
> CGI Script Error
> Premature end of script headers.
>
> from twisted.internet import reactor, win32eventreactor
> ...
> win32eventreactor.install()
> reactor = win32eventreactor.Win32Reactor()
> reactor.listenTCP(1999, site)
> reactor.run()

 From the top of my head:

from twisted.internet import win32eventreactor
win32eventreactor.install()

from twisted.internet import reactor
...

reactor.listenTCP(1999, site)
reactor.run()


Note that this is explained in the documentation.

>
>> From the logs:
> cmdline	'c:\\PHP\\php c:\\Code\\Web\\index.php'
> command	'c:\\PHP\\php'
> path	'c:\\Code\\Web'
>
> Any ideas would be appreciated.
>
> Thank you all guys for your help.
>
> On 11/13/05, Jean-Paul Calderone <exarkun@divmod.com> wrote:
>> http://twistedmatrix.com/projects/core/documentation/howto/ 
>> choosing-reactor.html#auto8
>>
> --
> Abdallah Deeb
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From mailinglists at smartology.nl  Mon Nov 14 08:35:46 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Mon Nov 14 08:35:54 2005
Subject: [Twisted-web] Can't get XMLRPC server working with Twisted 2.1
Message-ID: <4378AED2.9050802@smartology.nl>

Hello Twisters,

I've looked in the documentation, searched the archives and the web, but
found no solution to the XMLRPC problem I'm having.

I've used the finger example code to create an XMLRPC server, but I keep
getting the 405 Method not allowed error. I'm probably overlooking
something very obvious, call me stupid, but I can't get it to work.
Below the code I'm using.

If someone has a clue ... please enlighten me.

-- Remi --

Server code:

#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-

""""""
import sys

from twisted.application import internet, service
from twisted.internet import reactor, protocol, defer
from twisted.web import resource, server, static, xmlrpc
from twisted.python import components, rebuild
from zope.interface import Interface, implements


class myXMLRPC(xmlrpc.XMLRPC):
    """This class contains all root xmlrpc methods and the modules
subhandler."""
    def __init__(self, service):
        xmlrpc.XMLRPC.__init__(self)
        self.service = service
   
    def xmlrpc_echo(self, x):
        """Simple echo function"""
        return x
       
   
def catchError(err):
    return "Internal error in server"
   
   
class IowwService(components.Interface):
    """"""
    def rebuild(self, modname):
        """Rebuild classes in given module"""
       

class httpResource(resource.Resource):

    implements(resource.IResource)
   
    def __init__(self, service):
        resource.Resource.__init__(self)
        self.service = service
        self.putChild('RPC2', myXMLRPC(self.service))      

    def render(self, request):
        self._clientIP = request.getClientIP()
        return resource.Resource.render(self, request)

    def render_GET(self, request):
        """Process HTTP GET Requests."""
        return '<html><body><h3>Not Implemented</h3></body></html>'
       
    def getChild(self, path, request):
        """This method handles http calls"""
        return httpResource(self.service)

components.registerAdapter(httpResource, IowwService, resource.IResource)


class owwService(service.Service):
    """"""
    implements(IowwService)
   
    def rebuild(self, modname):
        """Rebuild classes in given module"""
        mod = sys.modules[modname]
        rebuild.rebuild(mod)

       
def main():
    """"""
    application = service.Application('OWW', uid=100, gid=100)
    s = owwService()
    serviceCollection = service.IServiceCollection(application)
    internet.TCPServer(7080,
server.Site(resource.IResource(s))).setServiceParent(serviceCollection)
    serviceCollection.startService() 
    reactor.run()

if __name__ == '__main__':
    main()


And the client code:

#!/usr/bin/env python

from twisted.web.xmlrpc import Proxy
from twisted.internet import reactor

def printValue(value):
    print repr(value)
    reactor.stop()

def printError(error):
    print 'error', error
    reactor.stop()

proxy = Proxy('http://localhost:7080')
proxy.callRemote('echo', 'hello world').addCallbacks(printValue, printError)
reactor.run()



From ldanielburr at mac.com  Mon Nov 14 09:06:11 2005
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Mon Nov 14 09:06:35 2005
Subject: [Twisted-web] Can't get XMLRPC server working with Twisted 2.1
In-Reply-To: <4378AED2.9050802@smartology.nl>
References: <4378AED2.9050802@smartology.nl>
Message-ID: <op.sz8m0lwi3oj628@zetsuei>

Remi,

Your client code specifies the wrong URL.  Just change  
Proxy('http://localhost:7080') to Proxy('http://localhost:7080/RPC2'), and  
you'll receive the echo response you are expecting.

Also, since you are using Twisted 2.1, I'd suggest abandoning the use of  
components.Interface, and use zope.interface.Interface directly.  See the  
revised interfaces and adapters documentation on the web site for examples  
of using zope.interface.Interface.

Hope this helps,

L. Daniel Burr

On Mon, 14 Nov 2005 09:35:46 -0600, Remi Cool <mailinglists@smartology.nl>  
wrote:

> Hello Twisters,
>
> I've looked in the documentation, searched the archives and the web, but
> found no solution to the XMLRPC problem I'm having.
>
> I've used the finger example code to create an XMLRPC server, but I keep
> getting the 405 Method not allowed error. I'm probably overlooking
> something very obvious, call me stupid, but I can't get it to work.
> Below the code I'm using.
>
> If someone has a clue ... please enlighten me.
>
> -- Remi --
>
> Server code:
>
> #!/usr/bin/env python
> # -*- coding: iso-8859-15 -*-
>
> """"""
> import sys
>
> from twisted.application import internet, service
> from twisted.internet import reactor, protocol, defer
> from twisted.web import resource, server, static, xmlrpc
> from twisted.python import components, rebuild
> from zope.interface import Interface, implements
>
>
> class myXMLRPC(xmlrpc.XMLRPC):
>     """This class contains all root xmlrpc methods and the modules
> subhandler."""
>     def __init__(self, service):
>         xmlrpc.XMLRPC.__init__(self)
>         self.service = service
>    def xmlrpc_echo(self, x):
>         """Simple echo function"""
>         return x
> def catchError(err):
>     return "Internal error in server"
> class IowwService(components.Interface):
>     """"""
>     def rebuild(self, modname):
>         """Rebuild classes in given module"""
>
> class httpResource(resource.Resource):
>
>     implements(resource.IResource)
>    def __init__(self, service):
>         resource.Resource.__init__(self)
>         self.service = service
>         self.putChild('RPC2', myXMLRPC(self.service))
>
>     def render(self, request):
>         self._clientIP = request.getClientIP()
>         return resource.Resource.render(self, request)
>
>     def render_GET(self, request):
>         """Process HTTP GET Requests."""
>         return '<html><body><h3>Not Implemented</h3></body></html>'
>    def getChild(self, path, request):
>         """This method handles http calls"""
>         return httpResource(self.service)
>
> components.registerAdapter(httpResource, IowwService, resource.IResource)
>
>
> class owwService(service.Service):
>     """"""
>     implements(IowwService)
>    def rebuild(self, modname):
>         """Rebuild classes in given module"""
>         mod = sys.modules[modname]
>         rebuild.rebuild(mod)
>
> def main():
>     """"""
>     application = service.Application('OWW', uid=100, gid=100)
>     s = owwService()
>     serviceCollection = service.IServiceCollection(application)
>     internet.TCPServer(7080,
> server.Site(resource.IResource(s))).setServiceParent(serviceCollection)
>     serviceCollection.startService()
>     reactor.run()
>
> if __name__ == '__main__':
>     main()
>
>
> And the client code:
>
> #!/usr/bin/env python
>
> from twisted.web.xmlrpc import Proxy
> from twisted.internet import reactor
>
> def printValue(value):
>     print repr(value)
>     reactor.stop()
>
> def printError(error):
>     print 'error', error
>     reactor.stop()
>
> proxy = Proxy('http://localhost:7080')
> proxy.callRemote('echo', 'hello world').addCallbacks(printValue,  
> printError)
> reactor.run()
>
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web



From matt at pollenation.net  Mon Nov 14 09:10:31 2005
From: matt at pollenation.net (Matt Goodall)
Date: Mon Nov 14 09:10:11 2005
Subject: [Twisted-web] Can't get XMLRPC server working with Twisted 2.1
In-Reply-To: <4378AED2.9050802@smartology.nl>
References: <4378AED2.9050802@smartology.nl>
Message-ID: <4378B6F7.3060104@pollenation.net>

Remi Cool wrote:
> Hello Twisters,
> 
> I've looked in the documentation, searched the archives and the web, but
> found no solution to the XMLRPC problem I'm having.
> 
> I've used the finger example code to create an XMLRPC server, but I keep
> getting the 405 Method not allowed error. I'm probably overlooking
> something very obvious, call me stupid, but I can't get it to work.
> Below the code I'm using.
> 
> If someone has a clue ... please enlighten me.

The "self.putChild('RPC2', myXMLRPC(self.service))" line in the server
code makes your XMLRPC resource available as the "RPC2" child of the
root resource. That gives a full URL path to the XMLRPC resource of "/PRC2"

Your client code is not using the correct URL, so it's not requesting
the XMLRPC resource. The creation of the Proxy instance should be:

  proxy = Proxy('http://localhost:7080/RPC2')

Hope this helps.

- Matt

> 
> -- Remi --
> 
> Server code:
> 
> #!/usr/bin/env python
> # -*- coding: iso-8859-15 -*-
> 
> """"""
> import sys
> 
> from twisted.application import internet, service
> from twisted.internet import reactor, protocol, defer
> from twisted.web import resource, server, static, xmlrpc
> from twisted.python import components, rebuild
> from zope.interface import Interface, implements
> 
> 
> class myXMLRPC(xmlrpc.XMLRPC):
>     """This class contains all root xmlrpc methods and the modules
> subhandler."""
>     def __init__(self, service):
>         xmlrpc.XMLRPC.__init__(self)
>         self.service = service
>    
>     def xmlrpc_echo(self, x):
>         """Simple echo function"""
>         return x
>        
>    
> def catchError(err):
>     return "Internal error in server"
>    
>    
> class IowwService(components.Interface):
>     """"""
>     def rebuild(self, modname):
>         """Rebuild classes in given module"""
>        
> 
> class httpResource(resource.Resource):
> 
>     implements(resource.IResource)
>    
>     def __init__(self, service):
>         resource.Resource.__init__(self)
>         self.service = service
>         self.putChild('RPC2', myXMLRPC(self.service))      
> 
>     def render(self, request):
>         self._clientIP = request.getClientIP()
>         return resource.Resource.render(self, request)
> 
>     def render_GET(self, request):
>         """Process HTTP GET Requests."""
>         return '<html><body><h3>Not Implemented</h3></body></html>'
>        
>     def getChild(self, path, request):
>         """This method handles http calls"""
>         return httpResource(self.service)
> 
> components.registerAdapter(httpResource, IowwService, resource.IResource)
> 
> 
> class owwService(service.Service):
>     """"""
>     implements(IowwService)
>    
>     def rebuild(self, modname):
>         """Rebuild classes in given module"""
>         mod = sys.modules[modname]
>         rebuild.rebuild(mod)
> 
>        
> def main():
>     """"""
>     application = service.Application('OWW', uid=100, gid=100)
>     s = owwService()
>     serviceCollection = service.IServiceCollection(application)
>     internet.TCPServer(7080,
> server.Site(resource.IResource(s))).setServiceParent(serviceCollection)
>     serviceCollection.startService() 
>     reactor.run()
> 
> if __name__ == '__main__':
>     main()
> 
> 
> And the client code:
> 
> #!/usr/bin/env python
> 
> from twisted.web.xmlrpc import Proxy
> from twisted.internet import reactor
> 
> def printValue(value):
>     print repr(value)
>     reactor.stop()
> 
> def printError(error):
>     print 'error', error
>     reactor.stop()
> 
> proxy = Proxy('http://localhost:7080')
> proxy.callRemote('echo', 'hello world').addCallbacks(printValue, printError)
> reactor.run()
> 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.

From jbauer at rubic.com  Mon Nov 14 23:48:10 2005
From: jbauer at rubic.com (Jeff Bauer)
Date: Mon Nov 14 23:48:14 2005
Subject: [Twisted-web] bug in README
Message-ID: <437984AA.1010608@rubic.com>

In current README:

< svn co svn://divmod.org/svn/Nevow/trunk Nevow
 > svn co http://divmod.org/svn/Divmod/trunk/Nevow Nevow

Is there a better way to report bugs?  The divmod trac
is restricted.

-- 
Jeff Bauer      http://serpentaddiction.blogspot.com
Rubicon, Inc.   http://www.rubic.com

From mailinglists at smartology.nl  Tue Nov 15 00:18:40 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Tue Nov 15 00:18:55 2005
Subject: [Twisted-web] Can't get XMLRPC server working with Twisted 2.1
In-Reply-To: <4378B6F7.3060104@pollenation.net>
References: <4378AED2.9050802@smartology.nl> <4378B6F7.3060104@pollenation.net>
Message-ID: <43798BD0.4020101@smartology.nl>

Matt Goodall wrote:

>Remi Cool wrote:
>  
>
>>Hello Twisters,
>>
>>I've looked in the documentation, searched the archives and the web, but
>>found no solution to the XMLRPC problem I'm having.
>>
>>I've used the finger example code to create an XMLRPC server, but I keep
>>getting the 405 Method not allowed error. I'm probably overlooking
>>something very obvious, call me stupid, but I can't get it to work.
>>Below the code I'm using.
>>
>>If someone has a clue ... please enlighten me.
>>    
>>
>
>The "self.putChild('RPC2', myXMLRPC(self.service))" line in the server
>code makes your XMLRPC resource available as the "RPC2" child of the
>root resource. That gives a full URL path to the XMLRPC resource of "/PRC2"
>
>Your client code is not using the correct URL, so it's not requesting
>the XMLRPC resource. The creation of the Proxy instance should be:
>
>  proxy = Proxy('http://localhost:7080/RPC2')
>
>Hope this helps.
>
>- Matt
>  
>
Thanks, that solved the problem.

- Remi -

>  
>
>>-- Remi --
>>
>>Server code:
>>
>>#!/usr/bin/env python
>># -*- coding: iso-8859-15 -*-
>>
>>""""""
>>import sys
>>
>>from twisted.application import internet, service
>>from twisted.internet import reactor, protocol, defer
>>from twisted.web import resource, server, static, xmlrpc
>>from twisted.python import components, rebuild
>>from zope.interface import Interface, implements
>>
>>
>>class myXMLRPC(xmlrpc.XMLRPC):
>>    """This class contains all root xmlrpc methods and the modules
>>subhandler."""
>>    def __init__(self, service):
>>        xmlrpc.XMLRPC.__init__(self)
>>        self.service = service
>>   
>>    def xmlrpc_echo(self, x):
>>        """Simple echo function"""
>>        return x
>>       
>>   
>>def catchError(err):
>>    return "Internal error in server"
>>   
>>   
>>class IowwService(components.Interface):
>>    """"""
>>    def rebuild(self, modname):
>>        """Rebuild classes in given module"""
>>       
>>
>>class httpResource(resource.Resource):
>>
>>    implements(resource.IResource)
>>   
>>    def __init__(self, service):
>>        resource.Resource.__init__(self)
>>        self.service = service
>>        self.putChild('RPC2', myXMLRPC(self.service))      
>>
>>    def render(self, request):
>>        self._clientIP = request.getClientIP()
>>        return resource.Resource.render(self, request)
>>
>>    def render_GET(self, request):
>>        """Process HTTP GET Requests."""
>>        return '<html><body><h3>Not Implemented</h3></body></html>'
>>       
>>    def getChild(self, path, request):
>>        """This method handles http calls"""
>>        return httpResource(self.service)
>>
>>components.registerAdapter(httpResource, IowwService, resource.IResource)
>>
>>
>>class owwService(service.Service):
>>    """"""
>>    implements(IowwService)
>>   
>>    def rebuild(self, modname):
>>        """Rebuild classes in given module"""
>>        mod = sys.modules[modname]
>>        rebuild.rebuild(mod)
>>
>>       
>>def main():
>>    """"""
>>    application = service.Application('OWW', uid=100, gid=100)
>>    s = owwService()
>>    serviceCollection = service.IServiceCollection(application)
>>    internet.TCPServer(7080,
>>server.Site(resource.IResource(s))).setServiceParent(serviceCollection)
>>    serviceCollection.startService() 
>>    reactor.run()
>>
>>if __name__ == '__main__':
>>    main()
>>
>>
>>And the client code:
>>
>>#!/usr/bin/env python
>>
>>from twisted.web.xmlrpc import Proxy
>>from twisted.internet import reactor
>>
>>def printValue(value):
>>    print repr(value)
>>    reactor.stop()
>>
>>def printError(error):
>>    print 'error', error
>>    reactor.stop()
>>
>>proxy = Proxy('http://localhost:7080')
>>proxy.callRemote('echo', 'hello world').addCallbacks(printValue, printError)
>>reactor.run()
>>
>>
>>
>>_______________________________________________
>>Twisted-web mailing list
>>Twisted-web@twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>>    
>>
>
>  
>

From mailinglists at smartology.nl  Tue Nov 15 00:53:39 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Tue Nov 15 00:53:46 2005
Subject: [Twisted-web] Use Nevow in conjunction with XMLRPC
Message-ID: <43799403.7010109@smartology.nl>

G'day,

My goal is to create a Twisted server that implements XMLRPC, Nevow and
PHP (for transition of the old webapp).

XMLRPC works again (thanks to Daniel and Matt) ... but I can't get Nevow
working as a child of the httpResource. Or is there a better (Twisted)
way of doing this (without using tap)?

The code:

from formless.annotate import TypedInterface, Integer, String
from nevow import rend, tags, loaders
from formless import webform

class ISimpleMethod(TypedInterface):
    def simple(self,
        name=String(description="Your name."),
        age=Integer(description="Your age.")):
        """Simple

        Please enter your name and age.
        """

class Implementation(object):

    implements(ISimpleMethod)

    def simple(self, name, age):
        print "Hello, %s, who is %s" % (name, age)


class WebForm(rend.Page):
    document = loaders.stan(tags.html[
    tags.body[ tags.h1["Here is the form:"],
                        webform.renderForms('original')]])



class httpResource(resource.Resource):

    implements(resource.IResource)

    def __init__(self, service):
        resource.Resource.__init__(self)
        self.service = service
        self.putChild('RPC2', Example(self.service))
        self.putChild('formtest',
resource.Resource(WebForm(Implementation())))

    def render(self, request):
        self._clientIP = request.getClientIP()
        return resource.Resource.render(self, request)

    def render_GET(self, request):
        """Process HTTP GET Requests."""
        print 'GET: request ->', request
        return '<html><body><h3>Not Implemented</h3></body></html>'

    def getChild(self, path, request):
        """This method handles http calls"""
        print 'getChild path:', path
        print 'getChild request:', request
        if path=="":
            return httpResource(self.service)
        else:
            return httpResource(self.service)

components.registerAdapter(httpResource, IowwService, resource.IResource)



From nico at tekNico.net  Tue Nov 15 01:11:43 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Tue Nov 15 01:14:10 2005
Subject: [Twisted-web] Re: bug in README
In-Reply-To: <437984AA.1010608@rubic.com>
References: <437984AA.1010608@rubic.com>
Message-ID: <dlc57v$tks$1@sea.gmane.org>

Jeff Bauer wrote:
> In current README:
> 
> < svn co svn://divmod.org/svn/Nevow/trunk Nevow
>> svn co http://divmod.org/svn/Divmod/trunk/Nevow Nevow
> 
> Is there a better way to report bugs?  The divmod trac
> is restricted.

You just need to register, and then you'll be able to change wiki pages and
create tickets (but not modify them).

-- 
Nicola Larosa - nico@tekNico.net

...Linux security has been better than many rivals. However, even
the best systems today are totally inadequate. Saying Linux is
more secure than Windows isn't really addressing the bigger issue
 - neither is good enough. -- Alan Cox, September 2005


From mailinglists at smartology.nl  Tue Nov 15 03:24:19 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Tue Nov 15 03:24:26 2005
Subject: [Twisted-web] Use Nevow in conjunction with XMLRPC
In-Reply-To: <43799403.7010109@smartology.nl>
References: <43799403.7010109@smartology.nl>
Message-ID: <4379B753.90104@smartology.nl>

Remi Cool wrote:

>G'day,
>
>My goal is to create a Twisted server that implements XMLRPC, Nevow and
>PHP (for transition of the old webapp).
>
>XMLRPC works again (thanks to Daniel and Matt) ... but I can't get Nevow
>working as a child of the httpResource. Or is there a better (Twisted)
>way of doing this (without using tap)?
>  
>
I've got it running somewhat using:

class httpResource(resource.Resource):

    implements(resource.IResource)
   
    def __init__(self, service):
        resource.Resource.__init__(self)
        self.service = service
        self.putChild('RPC2', Example(self.service))
        self.putChild('formtest', WebForm(Implementation()))
       
    def render(self, request):
        self._clientIP = request.getClientIP()
        return resource.Resource.render(self, request)

    def render_GET(self, request):
        """Process HTTP GET Requests."""
        print 'GET: request ->', request
        return '<html><body><h3>Not Implemented</h3></body></html>'
       
    def getChild(self, path, request):
        """This method handles http calls"""
        print 'getChild path:', path
        print 'getChild request:', request
        if path=="":
            return httpResource(self.service)
        else:
            return httpResource(self.service)


components.registerAdapter(httpResource, IowwService, resource.IResource)


def main():
    """"""
    application = service.Application('OWW', uid=1000, gid=1000)
    s = owwService()
    serviceCollection = service.IServiceCollection(application)
    internet.TCPServer(7080,
appserver.NevowSite(resource.IResource(s))).setServiceParent(serviceCollection)
    serviceCollection.startService()
    reactor.run()


Now I need the form to render, all I got was the h1.

>The code:
>
>from formless.annotate import TypedInterface, Integer, String
>from nevow import rend, tags, loaders
>from formless import webform
>
>class ISimpleMethod(TypedInterface):
>    def simple(self,
>        name=String(description="Your name."),
>        age=Integer(description="Your age.")):
>        """Simple
>
>        Please enter your name and age.
>        """
>
>class Implementation(object):
>
>    implements(ISimpleMethod)
>
>    def simple(self, name, age):
>        print "Hello, %s, who is %s" % (name, age)
>
>
>class WebForm(rend.Page):
>    document = loaders.stan(tags.html[
>    tags.body[ tags.h1["Here is the form:"],
>                        webform.renderForms('original')]])
>
>
>
>class httpResource(resource.Resource):
>
>    implements(resource.IResource)
>
>    def __init__(self, service):
>        resource.Resource.__init__(self)
>        self.service = service
>        self.putChild('RPC2', Example(self.service))
>        self.putChild('formtest',
>resource.Resource(WebForm(Implementation())))
>
>    def render(self, request):
>        self._clientIP = request.getClientIP()
>        return resource.Resource.render(self, request)
>
>    def render_GET(self, request):
>        """Process HTTP GET Requests."""
>        print 'GET: request ->', request
>        return '<html><body><h3>Not Implemented</h3></body></html>'
>
>    def getChild(self, path, request):
>        """This method handles http calls"""
>        print 'getChild path:', path
>        print 'getChild request:', request
>        if path=="":
>            return httpResource(self.service)
>        else:
>            return httpResource(self.service)
>
>components.registerAdapter(httpResource, IowwService, resource.IResource)
>
>
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web@twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>  
>

From matt at pollenation.net  Tue Nov 15 06:49:00 2005
From: matt at pollenation.net (Matt Goodall)
Date: Tue Nov 15 06:48:43 2005
Subject: [Twisted-web] bug in README
In-Reply-To: <437984AA.1010608@rubic.com>
References: <437984AA.1010608@rubic.com>
Message-ID: <4379E74C.6060800@pollenation.net>

Jeff Bauer wrote:
> In current README:
> 
> < svn co svn://divmod.org/svn/Nevow/trunk Nevow
>> svn co http://divmod.org/svn/Divmod/trunk/Nevow Nevow
> 
> Is there a better way to report bugs?  The divmod trac
> is restricted.

I've fixed the svn URL, thanks.

The link to the Twisted site was pointing to an old downloads (1.3) page
so I changed that too.

- Matt

From cce at clarkevans.com  Tue Nov 15 21:05:09 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue Nov 15 21:05:15 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
Message-ID: <20051116040509.GA38991@prometheusresearch.com>

Hello.  I didn't see any examples of how to do HTTP Digest
authentication with twisted.web2, so I updated my ancient code in the
sandbox -- it was easier than I expected.  Nice job with web2. 

   http://cvs.twistedmatrix.com/cvs/sandbox/cce/digest2.py

I had a few observations with my first run /w web2:

 1.  It would be delightful if WebContext had a request()
     helper method that did the appropriate adaptation
     to an IRequest

 2.  It would be excellent if locateChild was deferrable,
     often times you need to access a database to construct
     dynamically the appropriate resource.  This is not a 
     syncronous operation.

 3.  It would be wonderful if HTTPError took arguments that
     would construct an appropriate Response... it is trivial,
     but a nice touch if it did.
     
Overall, web2 is looking quite nice; I'll have more feedback once
my entire application is ported.

Cheers,

Clark

From cce at clarkevans.com  Tue Nov 15 23:17:22 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue Nov 15 23:17:28 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051116040509.GA38991@prometheusresearch.com>
References: <20051116040509.GA38991@prometheusresearch.com>
Message-ID: <20051116061722.GA48211@prometheusresearch.com>

On Tue, Nov 15, 2005 at 11:05:09PM -0500, Clark C. Evans wrote:
| Hello.  I didn't see any examples of how to do HTTP Digest
| authentication with twisted.web2, so I updated my ancient code in the
| sandbox -- it was easier than I expected.  Nice job with web2. 
| 
|    http://cvs.twistedmatrix.com/cvs/sandbox/cce/digest2.py
| 
| I had a few observations with my first run /w web2:
| 
|  1.  It would be delightful if WebContext had a request()
|      helper method that did the appropriate adaptation
|      to an IRequest

This one-liner would be valueable; I just made an error by accidently
requesting the IRequest interface from the wrong object.... and got
puzzled with the results.

| 
|  2.  It would be excellent if locateChild was deferrable,
|      often times you need to access a database to construct
|      dynamically the appropriate resource.  This is not a 
|      syncronous operation.

My bad.  It looks like this is specified in the interface!  This
is a serious improvement over twisted.web.... nice.

|  3.  It would be wonderful if HTTPError took arguments that
|      would construct an appropriate Response... it is trivial,
|      but a nice touch if it did.

It's absolutely no burden to do HTTPError(Response(..)), so 
this is a dumb request.

|      
| Overall, web2 is looking quite nice; I'll have more feedback once
| my entire application is ported.
| 
| Cheers,
| 
| Clark
| 
| _______________________________________________
| Twisted-web mailing list
| Twisted-web@twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
| 

From glyph at divmod.com  Wed Nov 16 02:34:11 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Wed Nov 16 02:34:18 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051116040509.GA38991@prometheusresearch.com>
Message-ID: <20051116093411.10365.537171680.divmod.quotient.8466@ohm>



On Tue, 15 Nov 2005 23:05:09 -0500, "Clark C. Evans" <cce@clarkevans.com> wrote:

> 1.  It would be delightful if WebContext had a request()
>     helper method that did the appropriate adaptation
>     to an IRequest

It would be even nicer if WebContext went away entirely, since the only thing anyone ever does with it is retrieve the request.

From anand at maunakeatech.com  Wed Nov 16 03:50:53 2005
From: anand at maunakeatech.com (Ananda Tallur)
Date: Wed Nov 16 03:51:03 2005
Subject: [Twisted-web] Concurrency in a twisted.web application
Message-ID: <35FF4505-0289-4FE9-8775-1C63B373F74C@maunakeatech.com>

Dear twisted.web developpers and users,

I have written a twisted application for viewing and exporting movies.
These movies are in a format specific to my company.
I use : twisted 2.1.0, twisted.web 0.5.0, and nevow 0.5.0 (all html  
templates are written using nevow).

In this web application, there is a feature for exporting a movie  
file into mpeg, and sending it to the client web browser (file  
download).

This feature is handled by a resource object which is a subclass of  
static.File.
Exporting a movie into mpeg implies :
-> opening the original video file
-> doing the conversion (which can take as long as 1 minute or more)
-> sending the resulting mpeg file to the browser (file download)

The problem is that while the twisted web application is working  
handling the export request, the twisted web server is not responsive  
to any other HTTP request, as long as the video conversion and file  
transfer is not finished.

I would like to know if there is a standard or recommanded way of  
setting up concurrency into a twisted.web application.
And also if there is a sample program available somewhere.

I would like my web application to be still responsive to other HTTP  
requests while :
-> file conversion to mpeg is being processing
-> mpeg file is being transfered to the client browser (which is  
handled by a static.File subclass resource)


Thank you very much for all your answers.
I appreciate very much working with twisted.web and interested to get  
more insight into the way twisted core handles requests.

Anand



From tv at twistedmatrix.com  Wed Nov 16 08:28:42 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed Nov 16 08:28:51 2005
Subject: [Twisted-web] Concurrency in a twisted.web application
In-Reply-To: <35FF4505-0289-4FE9-8775-1C63B373F74C@maunakeatech.com>
References: <35FF4505-0289-4FE9-8775-1C63B373F74C@maunakeatech.com>
Message-ID: <437B502A.3000304@twistedmatrix.com>

Ananda Tallur wrote:
> The problem is that while the twisted web application is working 
> handling the export request, the twisted web server is not responsive 
> to any other HTTP request, as long as the video conversion and file 
> transfer is not finished.

If you are running Linux, you _really_ want to isolate the
movie conversion to another process. reactor.spawnProcess.

(Yes, process, not thread.)

From mailinglists at smartology.nl  Wed Nov 16 08:49:46 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Wed Nov 16 08:49:55 2005
Subject: [Twisted-web] Nevow IResource trouble 
Message-ID: <437B551A.5060307@smartology.nl>

Hello, after batteling with XMLRPC and getting nevow to put something on
the screen, I got stuck implementing a livepage and webform example.

After changing the implements to inevow.IResource in httpResource, I got
a message about a missing locateChild method (is that about the same as
the getChild method in a twisted web resource?) ... I've created one,
but I'm not shure if it's correct.

Bottomline is I can't get it to work, not from the code and not from a
resource file ... what's wrong with this code?


Here's my code:
-----------------------------------------------------------------------------------------------

class ISimpleMethod(TypedInterface):
    def simple(self, name=String(description="Your name."),
age=Integer(description="Your age.")):
        """Simple
       
        Please enter your name and age.
        """

class Implementation(object):
   
    implements(ISimpleMethod)

    def simple(self, name, age):
        print "Hello, %s, who is %s" % (name, age)


class WebForm(rend.Page):
   
    print 'WEBFORMS:', webform.renderForms('original')
   
    docFactory = loaders.stan(tags.html[
                                tags.body[
                                    tags.h1["Here is the form:"],
                                        webform.renderForms()]])


class httpResource(resource.Resource):

    implements(inevow.IResource)
   
    def __init__(self, service):
        resource.Resource.__init__(self)
        self.service = service
        ##self.putChild('RPC2', Example(self.service))
        self.putChild('formtest', WebForm(Implementation()))
           
        rt = static.File("rpy")
        rt.ignoreExt(".rpy")
        rt.processors = {'.rpy': script.ResourceScript}
        self.putChild('rpy', rt)
       
       
    def render(self, request):
        self._clientIP = request.getClientIP()
        return resource.Resource.render(self, request)

    def render_GET(self, request):
        """Process HTTP GET Requests."""
        print 'GET: request ->', request
        return '<html><body><h3>Not Implemented</h3></body></html>'
       
    def getChild(self, path, request):
        """This method handles http calls"""
        print 'getChild path:', path
        print 'getChild request:', request
        if path=="":
            return httpResource(self.service)
        else:
            return httpResource(self.service)

    def locateChild(self, ctx, segments):
        """"""
        print 'CTX:', ctx
        print 'SEGMENTS:', segments
        return self, segments

components.registerAdapter(httpResource, IowwService, inevow.IResource)


def main():
    """"""
    application = service.Application('OWW', uid=1000, gid=1000)
    s = owwService()
    serviceCollection = service.IServiceCollection(application)
    internet.TCPServer(7080,
appserver.NevowSite(s)).setServiceParent(serviceCollection)
    serviceCollection.startService()
    reactor.run()

if __name__ == '__main__':
    main()
   
----------------------------------------------------------------------------
livepage.rpy
----------------------------------------------------------------------------
from nevow.livepage import handler
from nevow import rend, tags, loaders


def greeter(client, nodeName):
    client.alert("Greetings. You clicked the %s node." % nodeName)

# Any string arguments after the event handler function will be evaluated
# as JavaScript in the context of the web browser and results passed to the
# Python event handler
handler = handler(greeter, 'node.name')

class Live(rend.Page):
    docFactory = loaders.stan(
    tags.html[
    tags.body[
        tags.ol[
            tags.li(onclick=handler, name="one")["One"],
            tags.li(onclick=handler, name="two")["Two"],
            tags.li(onclick=handler, name="three")["Three"]
        ]
    ]
])

resource = Live()

------------------------------------------------------------------
testform.rpy
------------------------------------------------------------------
from formless.annotate import TypedInterface, Integer, String
from nevow import rend, tags, loaders, appserver, inevow
from formless import webform
from zope.interface import Interface, implements

class ISimpleMethod(TypedInterface):
    def simple(self, name=String(description="Your name."),
age=Integer(description="Your age.")):
        """Simple
       
        Please enter your name and age.
        """

class Implementation(object):
   
    implements(ISimpleMethod)

    def simple(self, name, age):
        print "Hello, %s, who is %s" % (name, age)


class WebForm(rend.Page):
   
    print 'WEBFORMS:', webform.renderForms('original')
   
    docFactory = loaders.stan(tags.html[
                                tags.body[
                                    tags.h1["Here is the form:"],
                                        webform.renderForms()]])

resource = WebForm(Implementation())



From foom at fuhm.net  Wed Nov 16 09:11:49 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed Nov 16 09:11:55 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051116093411.10365.537171680.divmod.quotient.8466@ohm>
References: <20051116093411.10365.537171680.divmod.quotient.8466@ohm>
Message-ID: <980A6D2D-489A-4586-825A-753A500C3DC5@fuhm.net>


On Nov 16, 2005, at 4:34 AM, glyph@divmod.com wrote:

>
>
> On Tue, 15 Nov 2005 23:05:09 -0500, "Clark C. Evans"  
> <cce@clarkevans.com> wrote:
>
>
>> 1.  It would be delightful if WebContext had a request()
>>     helper method that did the appropriate adaptation
>>     to an IRequest
>>
>
> It would be even nicer if WebContext went away entirely, since the  
> only thing anyone ever does with it is retrieve the request.

I think I agree that it should be removed from web2, as its nesting  
features are pretty much not necessary, and that accounts for most of  
the complexity. The only concern I have is of where users will store  
per-request data (what to replace it with). In twisted.web, Request  
was a Componentized. In Nevow, they currently have ctx. If you remove  
both these possibilities, what then? JP argues that users should not  
store per-request data associated with the request, but rather,  
somewhere else handwavy depending on the circumstances. I don't know  
that I believe him.

I think of something like parsing user authentication information at  
a high level up in the resource tree and making it available to a  
Resource low in the tree. It is fairly clearly a per-request bit of  
state which may be useful to a some subset of the pages, and as such  
seems like it should be attached to the Request. Just going and  
adding random attributes onto Request is not nice thing to do, so  
I'll pretend I didn't just consider it. But it really seems like some  
designated storage spot for extra data is necessary.

James


From foom at fuhm.net  Wed Nov 16 09:12:50 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed Nov 16 09:13:00 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051116061722.GA48211@prometheusresearch.com>
References: <20051116040509.GA38991@prometheusresearch.com>
	<20051116061722.GA48211@prometheusresearch.com>
Message-ID: <B087972C-348C-4129-868F-C2369189CF92@fuhm.net>


On Nov 16, 2005, at 1:17 AM, Clark C. Evans wrote:
>
> |
> |  2.  It would be excellent if locateChild was deferrable,
> |      often times you need to access a database to construct
> |      dynamically the appropriate resource.  This is not a
> |      syncronous operation.
>
> My bad.  It looks like this is specified in the interface!  This
> is a serious improvement over twisted.web.... nice.
>
> |  3.  It would be wonderful if HTTPError took arguments that
> |      would construct an appropriate Response... it is trivial,
> |      but a nice touch if it did.
>
> It's absolutely no burden to do HTTPError(Response(..)), so
> this is a dumb request.
>
> |
> | Overall, web2 is looking quite nice; I'll have more feedback once
> | my entire application is ported.

Glad I could help with those issues. ;)

James


From cce at clarkevans.com  Wed Nov 16 11:48:12 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed Nov 16 11:48:22 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
Message-ID: <20051116184812.GA84796@prometheusresearch.com>

Hello.  I am in the middle of porting my application(s) to web2, 
and it seems that general authentication and session handling is 
not yet implemented.   My requirement is rather simple:

  1. When the user connects to my system (via HTTPS), I check for
     a cookie that indicates their server-side session.  If they
     have a session active, I touch() the session so that the 
     expiration date is pushed out.

  2. If the cookie does not exist, or the session has expired,
     then I send them through one of 3 authentication mechanisms
     depending on either their IP, a query argument, or what
     resource they are trying to access.
    
     a) If they are coming from a YALE IP address and have not
        explicitly asked for HTTP Digest authentication, I use the CAS
        authentication mechanism: http://www.yale.edu/tp/auth/cas20.html
    
     b) Else, if they are viewing a limited "semi-restricted" set of
        resources, I use another custom challenge-response mechanism
        that is similar to CAS (but slightly different)

     c) Otherwise, I use HTTP Digest Authenitication.

     All of these methods require that the request be cut short,
     and either a 401 is returned, or a HTTP Redirect (for CAS).

  3. Once I have an authorized user; I create a session for them,
     and set a 20 minute timeout.  I might have multiple requests
     active for the same session.

Once I have a session, I need a few things:

  1. A way to getSession() from a given request; in particular,
     most resource authorization is based on the user's identity.

  2. Request specific storage of temporary working data so that
     requests in-progress can accumulate results before the
     response is generated.

  3. Session specific storage, so that information about the user's
     context can be maintained.  This needs to be synronized with
     a database server since the Session may be shared across
     multiple servers.

  4. A JobQueue for that particular Session.  Many queries take
     a long time to run; and incremental results and/or failure
     notices need to be managed between each request.

  Of these requirements, #1 is most important, and #4 is a wish-list
  item for the next version of my application.

We had a chat on IRC today, and a few random notes/ideas emerged:

  a) There was a strong preference to keep Session and Authentication
     completely separate.  Currently Nevow's Guard mixes the two and
     thus is overly complicated and non-modular.  Nevow also uses
     Componentized, which is depreciated (in favor of... ?)

     http://divmod.org/trac/browser/trunk/Nevow/nevow/guard.py
     http://divmod.org/trac/browser/import/Nevow/sandbox/mg/guarded/guard.py

  b) Besides Nevow's GuardSession, there are a few other session
     implementations besides the older twisted.web implementation.
     A requtil.py in web2 seems to be a straight-forward port of
     tw.web's sessions.  Quixote also has a session manager,
     http://quixote.idyll.org/session2/ which is licensed to steal.

  c) Exarkun expressed a strong (ok, mandatory) preference for the
     use of tw.cred in any Authentication solution.  However, it was
     noted that tw.cred does not allow for challenge-response 
     authentication mechanisms (which all of mine are).  Specific
     examples were noted: twisted.protocols.sip, SASL, OTP

  d) There was talk that the Session manager should actually be
     a filter on the Response object; so that it can rewite paths
     and/or inject cookies as needed before the response is sent.
     This seems a bit complicated, no?

  e) I can probalby help in some ways, but I'm not a Twisted expert.
     I could continue to collect requirements and post; but I have
     short term deadlines (as usual).  If you wish I could put two
     files in twisted.web2, marked 'experimental':

        session.py    This would contain session manager, how ever
                      it is eventually implemented.

        guard.py      This would contain the gule to link tw.cred
                      to web2.

      I prefer an iterative; implement the simplest solution first,
      and then grow it as needed approach (with clear marks on 
      instability).  I wouldn't mind owning these two files and
      collecting feedback, etc.  

Anyway, thanks for listening.  Any thoughts as to how to best proceed
would be very welcome.

Kind Regards,

Clark

P.S.  For now, I'm hacking my own session and auth code.
      There is a requtil.py in web2 which is a stab at sessions,
      and both David Reid and I have HTTP Auth code in our sandbox. 


From cce at clarkevans.com  Wed Nov 16 15:42:34 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed Nov 16 15:42:45 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
Message-ID: <20051116224234.GA8812@prometheusresearch.com>

I'm still having fun with web2, it is such a huge improvment over
twisted.web and I'm absolutely thrilled with it.  However, I have
a few suggestions:
 
   1. It would be supreme if render() and locateChild() just provided
      me the Request object; the incantation to ctx.locate() seems a
      tedious an unnecessary step.

   2. I would love a request.getCookie('cookie-name') and 
      response.setCookie('cookie-name','cookie-value', path = '/')
      helper; that adds the given cookie to the current list.

   3. Make the 'path' in the Cookie constructor and setCookie default
      to '/'.  Almost all of the time you want your cookies to be 
      site-wide; adding path = '/' to each request adds a point of
      failure that makes the system less usable.

Kind Regards,

Clark

P.S.  Following is sample cookie code that works with web2

---
from twisted.internet import reactor, defer
from twisted.web2 import server, http, resource, channel, iweb
from twisted.web2.http_headers import Cookie

class Toplevel(resource.Resource):
    addSlash = True
    def render(self, ctx):
        request = ctx.locate(iweb.IRequest)
        found = False
        for cookie in request.headers.getHeader('cookie',[]):
            if cookie.name == 'testing':
                print "found", cookie.value
                found = True
        response = http.Response(stream="Hello monkey!")
        if not found:
            print "not-found"
            cookie = Cookie("testing","womble",path="/")
            response.headers.setHeader('Set-Cookie',(cookie,))
        return response

# Standard twisted application Boilerplate
from twisted.application import service, strports
application = service.Application("demoserver")
site = server.Site(Toplevel())
s = strports.service('tcp:8080', channel.HTTPFactory(site))
s.setServiceParent(application)


From dreid at dreid.org  Wed Nov 16 17:22:19 2005
From: dreid at dreid.org (David Reid)
Date: Wed Nov 16 17:22:23 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051116224234.GA8812@prometheusresearch.com>
References: <20051116224234.GA8812@prometheusresearch.com>
Message-ID: <1132186939.7885.10.camel@audrey.local>

On Wed, 2005-11-16 at 17:42 -0500, Clark C. Evans wrote:
> I'm still having fun with web2, it is such a huge improvment over
> twisted.web and I'm absolutely thrilled with it.  However, I have
> a few suggestions:
>  
>    1. It would be supreme if render() and locateChild() just provided
>       me the Request object; the incantation to ctx.locate() seems a
>       tedious an unnecessary step.

You're in luck context is going away.  Far far away never to be seen again.  
As soon as an appropriate method for per-request data can be decided upon.

>    2. I would love a request.getCookie('cookie-name') and 
>       response.setCookie('cookie-name','cookie-value', path = '/')
>       helper; that adds the given cookie to the current list.

I'm personally against polluting the request and response interfaces
with this kind of stuff, in my opinion cookies are just headers, they
shouldn't be special.  I wouldn't be opposed to higher level cookie
management that presented a similar interface to both the client and the
server developer, but I probably won't have any interest in writing
it.  

>    3. Make the 'path' in the Cookie constructor and setCookie default
>       to '/'.  Almost all of the time you want your cookies to be 
>       site-wide; adding path = '/' to each request adds a point of
>       failure that makes the system less usable.

I'm all for sane-defaults, but I'm not sure this is one.  I'll let foom
decide.

-David


From glyph at divmod.com  Thu Nov 17 04:47:27 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Nov 17 04:47:29 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <20051116184812.GA84796@prometheusresearch.com>
Message-ID: <20051117114727.10365.819776455.divmod.quotient.8771@ohm>

On Wed, 16 Nov 2005 13:48:12 -0500, "Clark C. Evans" <cce@clarkevans.com> wrote:

>We had a chat on IRC today, and a few random notes/ideas emerged:
>
>  a) There was a strong preference to keep Session and Authentication
>     completely separate.  Currently Nevow's Guard mixes the two and
>     thus is overly complicated and non-modular.  Nevow also uses
>     Componentized, which is depreciated (in favor of... ?)
>
>     http://divmod.org/trac/browser/trunk/Nevow/nevow/guard.py
>     http://divmod.org/trac/browser/import/Nevow/sandbox/mg/guarded/guard.py

I'm not sure what "completely separate" means in this context.  I don't think I agree, although I'm not sure about the specifics of the implementation.  I do think that there should be no public session-management API divorced from authentication though.

The use of getSession() is a mistake in every single case where it's used, except those in guard itself.  What resource you're viewing should implicitly represent what session you are talking to.  The whole idea of a session is entirely internal state that should not be exposed to the user.  What it amounts to is a rewrite of Python's argument-passing convention, used to pass stuff in an implicit, out-of-band way that's hard to document and impossible to test for.  All the discussion of Componentized and Context and all these other objects that are pretty much just different names for a free-form dictionary are indications that session-management == encapsulation violation, if it's exposed to the user.

Every session is associated with a user.  The representation of the session is the top of the resource tree.  If you need to persist information about the session, your resource tree should be pointed at a persistence system of some kind.  Perhaps the session manager should have better/more explicit support for simultaneous distinct sessions; in the case of anonymous sessions that would certainly be helpful.

As JP stipulated, this all *must* go through cred.  A separate session interface is unacceptable.  It is already hard enough managing the insanity of HTTP in a multi-protocol server.

I am aware that this is not how "most" appservers do things.  However, "most" appservers also spawn hundreds of threads, and operate by putting conditional structures in a special-purpose scripting language into templates.  Add "exposed session interface" to the list of common design mistakes :).

All that said, I don't think that your requirements are wrong, and I do think that the implementation specifics of the Nevow session initiation implementation are pretty bad, and they are mostly my fault.

>  c) Exarkun expressed a strong (ok, mandatory) preference for the
>     use of tw.cred in any Authentication solution.  However, it was
>     noted that tw.cred does not allow for challenge-response
>     authentication mechanisms (which all of mine are).  Specific
>     examples were noted: twisted.protocols.sip, SASL, OTP

Hmm.  How did you get this idea?  Cred's design was specifically to facilitate challenge-response authentication.  That's why login() takes credentials and returns a Deferred.  The assumption is that the credentials object will encapsulate whatever facets of the user's connection are required to do the negotiation process.

Again, this may be a place that Nevow's current session-initialization strategy falls down; IIRC it wouldn't allow for that Deferred to be fired by multiple different web-page hits, since it is a Deferred which is expected to itself return a Resource.  That's a limitation of guard though, not cred.

>  d) There was talk that the Session manager should actually be
>     a filter on the Response object; so that it can rewite paths
>     and/or inject cookies as needed before the response is sent.
>     This seems a bit complicated, no?

Seems so to me.  Then again, the implementation specifics of the session manager are often pretty horrible.  This is another major reason that I think that the API for sessions should be kept as far away from the user as possible.

>  e) I can probalby help in some ways, but I'm not a Twisted expert.
>     I could continue to collect requirements and post; but I have
>     short term deadlines (as usual).  If you wish I could put two
>     files in twisted.web2, marked 'experimental':
>
>        session.py    This would contain session manager, how ever
>                      it is eventually implemented.
>
>        guard.py      This would contain the gule to link tw.cred
>                      to web2.

web2 is itself experimental, and you are taking a risk by doing work with short-term deadlines on something unfinished.  Keep in mind that if these files are determined to be a bad idea later, they may be removed without warning and without regard for your project or deadlines.  You may want to work in a branch to provide yourself (and your employer) with some guarantee of stability.

From glyph at divmod.com  Thu Nov 17 04:49:16 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Nov 17 04:49:18 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051116224234.GA8812@prometheusresearch.com>
Message-ID: <20051117114916.10365.841126786.divmod.quotient.8772@ohm>



On Wed, 16 Nov 2005 17:42:34 -0500, "Clark C. Evans" <cce@clarkevans.com> wrote:
>I'm still having fun with web2, it is such a huge improvment over
>twisted.web and I'm absolutely thrilled with it.  However, I have
>a few suggestions:

>   1. It would be supreme if render() and locateChild() just provided
>      me the Request object; the incantation to ctx.locate() seems a
>      tedious an unnecessary step.

>   2. I would love a request.getCookie('cookie-name') and
>      response.setCookie('cookie-name','cookie-value', path = '/')
>      helper; that adds the given cookie to the current list.

>   3. Make the 'path' in the Cookie constructor and setCookie default
>      to '/'.  Almost all of the time you want your cookies to be
>      site-wide; adding path = '/' to each request adds a point of
>      failure that makes the system less usable.

Agreed on all points.  Especially that first one. ;)

From glyph at divmod.com  Thu Nov 17 04:57:11 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Nov 17 04:57:13 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <1132186939.7885.10.camel@audrey.local>
Message-ID: <20051117115711.10365.635838822.divmod.quotient.8775@ohm>

On Wed, 16 Nov 2005 16:22:19 -0800, David Reid <dreid@dreid.org> wrote:
>On Wed, 2005-11-16 at 17:42 -0500, Clark C. Evans wrote:
>> I'm still having fun with web2, it is such a huge improvment over
>> twisted.web and I'm absolutely thrilled with it.  However, I have
>> a few suggestions:

>You're in luck context is going away.  Far far away never to be seen again.
>As soon as an appropriate method for per-request data can be decided upon.

Do we have a list of use-cases somewhere that detail what "per-request data" is really a requirement?  Most places I've seen the context actually *used* in this manner it has been a disaster...

>>    2. I would love a request.getCookie('cookie-name') and
>>       response.setCookie('cookie-name','cookie-value', path = '/')
>>       helper; that adds the given cookie to the current list.
>
>I'm personally against polluting the request and response interfaces
>with this kind of stuff, in my opinion cookies are just headers, they
>shouldn't be special.  I wouldn't be opposed to higher level cookie
>management that presented a similar interface to both the client and the
>server developer, but I probably won't have any interest in writing
>it.

"content-length" and "connection" are just headers too: but the code has to support them because they're in the RFC.  Technically speaking cookies aren't in the *same* RFC, but they do have a standard of their own, rfc2109.

If there were multiple possible implementations of cookies, I'd say there should be an adapter or something to keep it separate.  Since there is just the one way to do them, though, I think that it's reasonable to treat the standards as merged, and just put the methods on request to handle it.  Pragmatically speaking cookies are not an "optional" extension to HTTP/1.1.

>>    3. Make the 'path' in the Cookie constructor and setCookie default
>>       to '/'.  Almost all of the time you want your cookies to be
>>       site-wide; adding path = '/' to each request adds a point of
>>       failure that makes the system less usable.
>
>I'm all for sane-defaults, but I'm not sure this is one.  I'll let foom
>decide.

I can speak from experience that cce's right; when you need a path, you know it, and you can pass it.  When you don't need a path, what you mean (in every case I've ever worked on) is /.

From aerkalov at mi2.hr  Thu Nov 17 05:23:26 2005
From: aerkalov at mi2.hr (Aleksandar Erkalovic)
Date: Thu Nov 17 05:23:32 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051117114916.10365.841126786.divmod.quotient.8772@ohm>
References: <20051116224234.GA8812@prometheusresearch.com>
	<20051117114916.10365.841126786.divmod.quotient.8772@ohm>
Message-ID: <20051117122325.GA18785@localhost.localdomain>

:> >I'm still having fun with web2, it is such a huge improvment over
:> >twisted.web and I'm absolutely thrilled with it.  However, I have
:> >a few suggestions:
:> 
:> >  1. It would be supreme if render() and locateChild() just provided
:> >     me the Request object; the incantation to ctx.locate() seems a
:> >     tedious an unnecessary step.

i also noticed this talks about removing context from the web2, and
nevow.  i dont know how much is this connected, but i would like to hear what
other people think about this.

currently i am working on one multilingual finance application (that somebody
else wrote and i have to maintain). it is one big beast that was working
in Woven and now is changed to work in Nevow. so obviously from the
start it is not designed in the best possible way. 

it uses nevow.i18n and i18n uses context to store the information about
current language. and some of my renderers are using context to get
information about the language and blah blah.i am just interested, 
the moment context goes away, where will this kind of information be
stored? i am aware it depends from application and design, but i would
like to hear some suggestions or something. for instance urls are:
   /ngode/en/account/1021/report
   /ngode/account/1021/report
   /ngode/hr/account/1021/report

will i be forced to carry my language flag around in my data model and
learn my loaders and renderers to get from data model what template to
load or maybe you guys are thinking that Request object could be used
to carry this kind of information? so far context looked like a nice
place where to put it and data does not change (just representation)
according to the selected language.

aco


-- 
 http://aco.mi2.hr/

From dialtone at divmod.com  Thu Nov 17 05:17:11 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Nov 17 05:24:41 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <20051117114727.10365.819776455.divmod.quotient.8771@ohm>
References: <20051116184812.GA84796@prometheusresearch.com>
	<20051117114727.10365.819776455.divmod.quotient.8771@ohm>
Message-ID: <20051117121711.GA1114@divmod.com>

On Thu, Nov 17, 2005 at 06:47:27AM -0500, glyph@divmod.com wrote:
> I'm not sure what "completely separate" means in this context.  I don't 
> think I agree, although I'm not sure about the specifics of the 
> implementation.  I do think that there should be no public 
> session-management API divorced from authentication though.

The point of separation is:
web services don't need session management but they might require
authentication.

And session management can be required without requiring authentication.

Having separate filters for session management and authentication should be
possible without many problems using filters.

Currently the filter signature is the following (none of the below functions
exist yet):

def sessionfilter(req, res, ctx):
    # do session handling here

def authenticationfilter(req, res, ctx):
    # do authentication handling here

Then setting these as explicit filters in the interface will allow to have
separate session and authentication handling without even having them know of
each other existence, which is a good improvement IMHO.

The logic I proposed for the session management is the following:

- Request arrives at the server
- sessionfilter looks for cookie/urlsegment/whatever.
  - there is a cookie, search for the corresponding session in the
    sessionstorage.
    - there is a session then: retrieve the session from the session storage
      (this returns a deferred and then adds as callback the rendering of the
      page).
    - there is no session then: create a new 'proxy' session and make the
      rendering buffered.
  - there is no cookie information then: create a new 'proxy' session and make
    the rendering buffered.
- the page is rendered (and the user data in the session might be modified in
  some way).
- if the session data was modified:
  - if the session is a proxy object: during the first modification it will
    create a local session object and marks it as touched.
  - if the session is a real session object: mark it as touched.
- if the session data was not modified: ignore
- very end: if the session was touched commit the changes back in the session
  storage.

There might be inconsistencies in the above flowgraph of course, I wrote this
down without thinking too much about current APIs or limitations. It might be
too much complicated or whatever, the only purpose is to discuss how to do
this :).

The authenticator logic is similar:
- request arrives: gather credentials from the request
- call portal.login()
- if the credentials are not met return a FORBIDDEN responsecode and blabla
- if the credentials are met: return the adapted resource returned by portal
  and start the locateChild on the remaining segments on that resource (?
  judging from the current API of the filters this can be hard though to
  implement in this way, since the filters are called after the resource has
  been located IIRC).

> As JP stipulated, this all *must* go through cred.  A separate session 
> interface is unacceptable.  It is already hard enough managing the insanity 
> of HTTP in a multi-protocol server.

Indeed. Totally agreed.

> All that said, I don't think that your requirements are wrong, and I do 
> think that the implementation specifics of the Nevow session initiation 
> implementation are pretty bad, and they are mostly my fault.

We are trying to find a new way to do things without boundaries to old APIs
and such :). So many changes have to be made that discussing with backwards
compatibility in mind is just a waste of time IMHO. It is good if we could
just brainstorm some stuff and bash each other. :)

> Again, this may be a place that Nevow's current session-initialization 
> strategy falls down; IIRC it wouldn't allow for that Deferred to be fired 
> by multiple different web-page hits, since it is a Deferred which is 
> expected to itself return a Resource.  That's a limitation of guard though, 
> not cred.

This is interesting to integrate with the filters idea then and might be
useful (given the problem identified above).

Hope everything makes some sort of sense.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051117/90026ff5/attachment-0001.pgp
From glyph at divmod.com  Thu Nov 17 06:17:25 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Nov 17 06:17:27 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <980A6D2D-489A-4586-825A-753A500C3DC5@fuhm.net>
Message-ID: <20051117131725.10365.1102336207.divmod.quotient.8793@ohm>



On Wed, 16 Nov 2005 11:11:49 -0500, James Y Knight <foom@fuhm.net> wrote:

>I think of something like parsing user authentication information at  a high 
>level up in the resource tree and making it available to a  Resource low in 
>the tree. It is fairly clearly a per-request bit of  state which may be 
>useful to a some subset of the pages, and as such  seems like it should be 
>attached to the Request. Just going and  adding random attributes onto 
>Request is not nice thing to do, so  I'll pretend I didn't just consider it. 
>But it really seems like some  designated storage spot for extra data is 
>necessary.

Abstractly: if you have a page which requires some "per-request state" to be set by a resource higher up in the tree, and can't operate without it, how do you guarantee it's been set?  Can we come up with any declarative interface for specifying this relationship?  I've never seen one and it seems like it would be insanely hard to do.  The convention in Nevow is to look for something in the context, find 'None', and midway through rendering a page, vomit a "'NoneType' object has no attribute 'x'" traceback onto the user's page with no explanation of what data was expected or where it was supposed to come from.  Regardless of whether we use the context or not, this is not a convention I think we should continue with.

Concretely: come to think of it I've never heard of a legitimate requirement other than "currently logged in user", which ought to be handled by another system anyway.  As per CCE's previous emails, the system for initializing those and setting them up needs to be pretty flexible in terms of how and when login forms get displayed, but the use of cred is non-negotiable.  We need a unifying cross-protocol abstraction.

Though I missed the conversation, I imagine the handwavy stuff that JP was suggesting was "the top resource, which is a proxy for the user, should pass information down to its children as it creates them".  Some kind of explicit relationship is required.

Let me try to anticipate the argument against this here: you have a top-level site which is an application.  One of its children is some generic type of resource with no mechanism to pass additional information down through it, such as a static.File.  That static.File has a dynamic child which is a super-simple epy-style script that is nevertheless part of the application - it needs to know what user is currently logged in, or it needs to display a little shopping cart emblem that indicates that the currently logged-in user can buy stuff on this page, and a link to the user-specific page where they can buy it.

I'll here backpedal just a tiny bit on my earlier adamance on getSession and say that perhaps there is a valid use for access to the currently logged-in user as request data.  By "currently logged-in user" I mean "'topmost' resource object".

This still establishes a slightly more implicit interface than I'd like, but without it, it would be difficult to write any kind of generic 'dispatcher' resource (virtual hosting, etc) which exists below a session-capable application.  At least the rules are simple: certain kinds of resources are "applications" or "sites".  Any resources they return from locateChild should expect them, and ONLY them, or nothing, as the current site resource.  Rather than being of the "something was missing" variety, errors will instead be of the "I expected a site of type X, instead I got one of type Y" variety, which tend to be easier to diagnose. Sketch of an interface:

Site resources call Request.setSiteResource() in locateChild - this method takes no arguments, and preserves the current URL being processed as well as the current resource.

Regular resources can, at any time, call Request.getSiteResource() or Request.getSiteURL() which return, respectively, the last resource to call setSiteResource() and a nevow.url-style object that indicates its location.

This was the intent of the original twisted.web Site object, although it has become clear over time that it isn't really feasible to use Site for this since putting them anywhere but at the absolute top of the resource hierarchy causes other problems.

I still think that this sort of interface should be used sparingly, but it has several advantages over the context as manifested in Nevow.

 - The relationship between objects which require implicit state and objects which provide it is more explicit.  They must both be resources, one calls setSiteResource, one calls getSiteResource.

 - By default, no site resource is set, so you must always implement both halves of the interface.  In other words, this is entirely a facility for an application to communicate with itself, no framework code should ever provide a site resource, and no framework code should ever expect to find anything useful from the site resource.

 - All information required by a given application must be encapsulated by the single top-level resource.  No piecemeal assembling of required information from 5 different interfaces set by 5 different systems during resource traversal.  If you need information from a different system, the top-level resource can aggregate it using traditional means (methods returning different objects, attributes, adaptation, etc)

 - All information is specifically "per HTTP request" rather than "per abstract transaction execution" - Nevow (or other templating / page generating mechanisms used with web2) can be expected to do any necessary translations at render time and not abuse the same mechanism used by the dispatch mechanism.

 - By providing a URL as well as a site object, sub-applications can properly link to resources defined by the application.  I'm sure that most people will ignore that and link directly to / most of the time, but at least it is the kind of issue which *can* be resolved by using this interface.

 - As I mentioned previously, error messages can be more detailed, since they will indicate what type the current site resource is, and thereby provide the developer some indication of how the offending resource got where it is.  Furthermore the URL can also be used to aid in error reporting, so the developer can tell "where" the path traversal went wrong.  If we want to push the error reporting even harder, we can have an explicit 'interface' argument which has to be passed to both setSiteResource and getSiteResource, used for nothing but matching up to make sure that the implicit state matches the application's expectations.

Thoughts?

From glyph at divmod.com  Thu Nov 17 06:26:36 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Nov 17 06:26:44 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051117122325.GA18785@localhost.localdomain>
Message-ID: <20051117132636.10365.1997014543.divmod.quotient.8796@ohm>



On Thu, 17 Nov 2005 13:23:26 +0100, Aleksandar Erkalovic <aerkalov@mi2.hr> wrote:

>will i be forced to carry my language flag around in my data model and
>learn my loaders and renderers to get from data model what template to
>load or maybe you guys are thinking that Request object could be used
>to carry this kind of information? so far context looked like a nice
>place where to put it and data does not change (just representation)
>according to the selected language.

This is a good use case, but your language flag *should* be in your data model.  It's simply a mistake to put it in the context.  For example: user A (who speaks en_US) is browsing your site.  They perform an action which impacts user B (who speaks fr_FR).  You need to generate an email to user B.  You look at the context: I guess the email should be in english (whoops!).

If you don't know more about a user other than that they've selected a language to view your site in, then you should have a "virtual user", an anonymous user object that pages can refer to, which does not implement the full range of behavior of a persistent user with an account, but does implement language-related methods.

From dreid at dreid.org  Thu Nov 17 12:09:42 2005
From: dreid at dreid.org (David Reid)
Date: Thu Nov 17 12:09:41 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <20051117114727.10365.819776455.divmod.quotient.8771@ohm>
References: <20051117114727.10365.819776455.divmod.quotient.8771@ohm>
Message-ID: <D3346953-9BFD-4A5D-A710-F99BFFFE8EA7@dreid.org>


On Nov 17, 2005, at 3:47 AM, glyph@divmod.com wrote:

> On Wed, 16 Nov 2005 13:48:12 -0500, "Clark C. Evans"  
> <cce@clarkevans.com> wrote:
>
>>  c) Exarkun expressed a strong (ok, mandatory) preference for the
>>     use of tw.cred in any Authentication solution.  However, it was
>>     noted that tw.cred does not allow for challenge-response
>>     authentication mechanisms (which all of mine are).  Specific
>>     examples were noted: twisted.protocols.sip, SASL, OTP
>
> Hmm.  How did you get this idea?  Cred's design was specifically to  
> facilitate challenge-response authentication.  That's why login()  
> takes credentials and returns a Deferred.  The assumption is that  
> the credentials object will encapsulate whatever facets of the  
> user's connection are required to do the negotiation process.

While it might be a valid assumption, there is no common public  
interface provided to facilitate it.  Perhaps because no one knows  
what that should look like, perhaps because no one felt it was  
necessary.  But I do believe that something like  
twisted.protocols.sip.IAuthorizer, that allows for an arbitrary  
number of round trips should be in cred, either the ICredentials  
interface should be extended (probably through a subclass) or a new  
interface should be created.  I'm toying with some ideas of how to  
best do this, but I don't really "get" cred so if you have any  
requirements other than arbitrary number of round trips, let me know  
so i can take those into account now rather than later.

-David

From cce at clarkevans.com  Thu Nov 17 13:29:34 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu Nov 17 13:29:52 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051117132636.10365.1997014543.divmod.quotient.8796@ohm>
References: <20051117122325.GA18785@localhost.localdomain>
	<20051117132636.10365.1997014543.divmod.quotient.8796@ohm>
Message-ID: <20051117202934.GB62588@prometheusresearch.com>

On Thu, Nov 17, 2005 at 08:26:36AM -0500, glyph@divmod.com wrote:
| On Thu, 17 Nov 2005 13:23:26 +0100, Aleksandar Erkalovic wrote:
| >will i be forced to carry my language flag around in my data model and
| >learn my loaders and renderers to get from data model what template to
| >load or maybe you guys are thinking that Request object could be used
| >to carry this kind of information? 

The acceptable languages that the _response_ is allowed to take can be
found in the 'Accept-Language' header.  This has the advantage of
allowing more than one language choice, eighted by preference and
typically auto-configured by your browser from the operating system
defaults.  In most browsers this setting can be changed; for example, 
in Firefox go to about:config and navigate to intl.accept_languages.

That said, if you have an authenticated user, you might want to provide
a server-side override mechanism so that people using an internet cafe'
in a foreign country are given their primary language.   However, this
is more of a 'Avatar' property.

You can use a path segment to do this I suppose; but it is not standard
and is quite ugly [1].

| This is a good use case, but your language flag *should* be in your data 
| model.  It's simply a mistake to put it in the context.  For example: 
| user A (who speaks en_US) is browsing your site.  They perform an action 
| which impacts user B (who speaks fr_FR).  You need to generate an email 
| to user B.  You look at the context: I guess the email should be in 
| english (whoops!).

This is totally unrelated.  Of course, if an action is going to be
carried out _beyond_ the response; then the application needs to 
know about the users and respond appropriately.  *winks*

Best,

Clark

[1] On a related note, I use a generic PathArgs resource that "consumes"
path segments that have an equal sign in them.  This resource then
modifies the cookies of the incoming request as if they were sent via a
Cookie header.   The advantage of this approach is that an arbitrary
number of /key=value/ path segments can occur in the top of the URL if
the browser doesn't support cookies.   Then a SessionManager resource
sits right below the PathArgs and looks for the 'session' cookie, etc.


From cce at clarkevans.com  Thu Nov 17 13:55:37 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu Nov 17 13:55:54 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051117115711.10365.635838822.divmod.quotient.8775@ohm>
References: <1132186939.7885.10.camel@audrey.local>
	<20051117115711.10365.635838822.divmod.quotient.8775@ohm>
Message-ID: <20051117205537.GC62588@prometheusresearch.com>

Glyph,

On Thu, Nov 17, 2005 at 06:57:11AM -0500, glyph@divmod.com wrote:
| Do we have a list of use-cases somewhere that detail what "per-request 
| data" is really a requirement?  Most places I've seen the context 
| actually *used* in this manner it has been a disaster...

The system that I've layered over Twisted that I'm now porting to web2
is a request re-write system.  Basically, I view request handling as a
series of stages which _alter_ the request (I don't particularly like
the special status given to path segments in web2, btw; this should
be much higher-level logic).   For example:

  1.  I have one stage that converts /k=v/ path segments into cookie entries,
      so that user agents lacking a good cookie mechansim can still use
      the parts of my application that require "context" handling.

  2.  I have another stage that simply looks for a in-memory session object, 
      and attaches it to the request (for further down-stream stages).

  3.  My next stage does authentication; if a session object is already 
      marked authorized, this step is a no-op.  Otherwise, it handles
      one of many authentication protocols.

  4.  My application has many many ways to ask for the same thing, so
      my next stage simply 'canonicalizes' the request.  This replaces
      various short-cuts in the request's path segments or arguments
      with more tedious but explicit request.

  5.  Following is an 'authorization' step; which verifies that the
      current identity is allowed to perform the activity expressed
      by the (now canonicalized) request.

  6.  At this point; depending on many factors, my processing tree has
      many branches -- but at all stages, I'm passing around a request
      that is being continually modified to reflect the status of the
      request and where it goes next.  I use a state-transition graph to
      make sure that my request gets in the correct queue.

So, this is what I mean by per-request state.  Since each stage of
execution happens by a distinct Resource, a great deal of information
needs to be stored in the Request object (or what ever you want to call
it).   Now if a ClarkRequest extends a HttpRequest to add what I need,
so be it; right now my code is sloppy -- I just modify the request
object's dict.  Perhaps it is poor pratice; but with a decent regression
test it really isn't a problem at all.   I only have a handful of 
variables that are needed.

Anyway Glyph, I'm not quite certain I understand what you're saying or
recommending.  If you could detail a bit more, it would be wonderful.

| >I'm personally against polluting the request and response interfaces
| >with this kind of stuff, in my opinion cookies are just headers, they
| >shouldn't be special.  I wouldn't be opposed to higher level cookie
| >management that presented a similar interface to both the client and the
| >server developer, but I probably won't have any interest in writing
| >it.

You got to put it this stuff somewhere.  An adapter is quite a kludgy,
but I guess workable.  The current solution, however, is ugly.

| Pragmatically speaking cookies are not an "optional" extension to HTTP/1.1.

Hear! Hear!

Clark

From dsalvatore at freesurf.fr  Thu Nov 17 14:10:38 2005
From: dsalvatore at freesurf.fr (dsalvatore@freesurf.fr)
Date: Thu Nov 17 14:10:42 2005
Subject: [Twisted-web] css File with Nevow
Message-ID: <33329.83.112.77.248.1132261838.squirrel@arlette.freesurf.fr>

Hello,

I would like to use an externel xml file linked to a style sheet

<html xmlns:nevow="http://nevow.com/ns/nevow/0.1">
<head>
<link rel="stylesheet" href="style.css" type="text/css" />
</head>
.......

The problem is that the syle sheet is not teken in account.
Could someone tell me how to proceed ?

Thank you very much

Regards

Salvatoe




From cce at clarkevans.com  Thu Nov 17 14:20:05 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu Nov 17 14:20:23 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051117131725.10365.1102336207.divmod.quotient.8793@ohm>
References: <980A6D2D-489A-4586-825A-753A500C3DC5@fuhm.net>
	<20051117131725.10365.1102336207.divmod.quotient.8793@ohm>
Message-ID: <20051117212005.GD62588@prometheusresearch.com>

On Thu, Nov 17, 2005 at 08:17:25AM -0500, glyph@divmod.com wrote:
| On Wed, 16 Nov 2005 11:11:49 -0500, James Y Knight <foom@fuhm.net> wrote:
| > I think of something like parsing user authentication information at a 
| > high level up in the resource tree and making it available to a  
| > Resource low in the tree.

Must we assume that resources form a Tree?  Mine form a Graph; I have
many resources which can be entered in any number of contexts with 
different "parent" resources.   Viewed this way, the resources which
a _request_ has passed through forms a stack; but it isn't a tree.  

| >It is fairly clearly a per-request bit of  
| >state which may be useful to a some subset of the pages, and as such  
| >seems like it should be attached to the Request. Just going and  adding 
| >random attributes onto Request is not nice thing to do, so  I'll pretend 
| >I didn't just consider it. But it really seems like some  designated 
| >storage spot for extra data is necessary.

Currently, it is my application; and I modify the request object to
my heart's content.  It may seem dangerous, but I've yet to hit a 
single bug from this usage.

| Abstractly: if you have a page which requires some "per-request state" to 
| be set by a resource higher up in the tree, and can't operate without it, 
| how do you guarantee it's been set?  Can we come up with any declarative 
| interface for specifying this relationship?  I've never seen one and it 
| seems like it would be insanely hard to do. 

Each of my Resources 'assert' pre- and post- conditions.  If the assertion
fails, I get a nice internal server error and a stack trace.  What more
could a programmer want ;)

| Concretely: come to think of it I've never heard of a legitimate 
| requirement other than "currently logged in user", which ought to be 
| handled by another system anyway. 

See my previous email.  My resources go through many stages of
processing and are heavily modified by the time I'm ready to
generate a Response.

| Though I missed the conversation, I imagine the handwavy stuff that JP 
| was suggesting was "the top resource, which is a proxy for the user, 
| should pass information down to its children as it creates them".  Some 
| kind of explicit relationship is required.

This statement, I don't get at all.  As I understand it, a resource
processes more than one request; and hence, will be associated with
more than one user.

| I'll here backpedal just a tiny bit on my earlier adamance on getSession 
| and say that perhaps there is a valid use for access to the currently 
| logged-in user as request data.  By "currently logged-in user" I mean 
| "'topmost' resource object".

Sorry, I'm lost.   Are you saying that:
  
    (a) An Avatar is a "auto-generated" resource perhaps constructed
        from the SessionManager resource?

    (b) Each Request object would have a 'stack' of 'previous-resources'
        that it has visited?  And that I could ask for the 'Avatar'
        resource in that 'stack' via a method on the request object?

If so, it sounds more complicated than plain-old getSession().  Perhaps
I just don't understand what problems you've had with getSession?

| Sketch of an interface:
| 
| Site resources call Request.setSiteResource() in locateChild - this 
| method takes no arguments, and preserves the current URL being processed 
| as well as the current resource.
| 
| Regular resources can, at any time, call Request.getSiteResource() or 
| Request.getSiteURL() which return, respectively, the last resource to 
| call setSiteResource() and a nevow.url-style object that indicates its 
| location.

Ok.  That's very nice.   Just remove the word 'Resource' and you're all
set; just let it be a regular object.

    request.setSite(myobject that complies with ISite)

| I still think that this sort of interface should be used sparingly, but 
| it has several advantages over the context as manifested in Nevow.
| 
| - The relationship between objects which require implicit state and 
| objects which provide it is more explicit.  They must both be resources, 
| one calls setSiteResource, one calls getSiteResource.
| 
| - By default, no site resource is set, so you must always implement both 
| halves of the interface.  In other words, this is entirely a facility for 
| an application to communicate with itself, no framework code should ever 
| provide a site resource, and no framework code should ever expect to find 
| anything useful from the site resource.

This similar system would work with Session then?

   request.setSession( my ISession object )
   
| - All information required by a given application must be encapsulated by 
| the single top-level resource.  No piecemeal assembling of required 
| information from 5 different interfaces set by 5 different systems during 
| resource traversal.  If you need information from a different system, the 
| top-level resource can aggregate it using traditional means (methods 
| returning different objects, attributes, adaptation, etc)

Ok.  This is where I get confused.  The top level resource can handle
multiple requests.  I think you're just referring to one's application
data?  Perhaps...

   request.setAppData(an IAppData object)
  
where IAppData is any old object that the application wants.
  
| - All information is specifically "per HTTP request" rather than "per 
| abstract transaction execution" - Nevow (or other templating / page 
| generating mechanisms used with web2) can be expected to do any necessary 
| translations at render time and not abuse the same mechanism used by the 
| dispatch mechanism.

A big problem with my current codebase is that I don't have the 
notion of a Transaction.  I need one.  My back-end system has the
notion of 'Actions'.  Typically, you have one Action per Request,
but sometimes you have more than one Action per request and 
they need to all succeed or all fail.   

In my system, each Action has its own URL, and is essentially its own
mini Request, only that the "parent" request aggregates the results.


| - By providing a URL as well as a site object, sub-applications can 
| properly link to resources defined by the application.  I'm sure that 
| most people will ignore that and link directly to / most of the time, but 
| at least it is the kind of issue which *can* be resolved by using this 
| interface.
|
| - As I mentioned previously, error messages can be more detailed, since 
| they will indicate what type the current site resource is, and thereby 
| provide the developer some indication of how the offending resource got 
| where it is.  Furthermore the URL can also be used to aid in error 
| reporting, so the developer can tell "where" the path traversal went 
| wrong.  If we want to push the error reporting even harder, we can have 
| an explicit 'interface' argument which has to be passed to both 
| setSiteResource and getSiteResource, used for nothing but matching up to 
| make sure that the implicit state matches the application's expectations.

Sorry; I don't get this one -- do you mind explaining a bit more?

Best,

Clark

From cce at clarkevans.com  Thu Nov 17 14:29:36 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu Nov 17 14:29:54 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <20051117121711.GA1114@divmod.com>
References: <20051116184812.GA84796@prometheusresearch.com>
	<20051117114727.10365.819776455.divmod.quotient.8771@ohm>
	<20051117121711.GA1114@divmod.com>
Message-ID: <20051117212936.GE62588@prometheusresearch.com>

On Thu, Nov 17, 2005 at 01:17:11PM +0100, Valentino Volonghi aka Dialtone:
| Currently the filter signature is the following (none of the below
| functions exist yet):
| 
| def sessionfilter(req, res, ctx):
|     # do session handling here
| 
| def authenticationfilter(req, res, ctx):
|     # do authentication handling here
|

1. How do I know what the response is before I even authenticate or
   create a session?

2. Which comes first, I assume session then authentication.

3. These need to come _before_ any of my other resources get
   the request.

It seems that the dispatch mechansim might need a way to "register"
that a filter should be applied at the end of processing; so that
once the Response is generated, it can be wrapped on the way out.

| We are trying to find a new way to do things without boundaries to old APIs
| and such :). So many changes have to be made that discussing with backwards
| compatibility in mind is just a waste of time IMHO. It is good if we could
| just brainstorm some stuff and bash each other. :)

Web2 is already substantially different from Web: don't stop now!

Clark

From dialtone at divmod.com  Thu Nov 17 15:15:01 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Nov 17 15:15:20 2005
Subject: [Twisted-web] css File with Nevow
In-Reply-To: <33329.83.112.77.248.1132261838.squirrel@arlette.freesurf.fr>
References: <33329.83.112.77.248.1132261838.squirrel@arlette.freesurf.fr>
Message-ID: <20051117221501.GA15344@divmod.com>

On Thu, Nov 17, 2005 at 10:10:38PM +0100, dsalvatore@freesurf.fr wrote:
> Hello,
> 
> I would like to use an externel xml file linked to a style sheet
> 
> <html xmlns:nevow="http://nevow.com/ns/nevow/0.1">
> <head>
> <link rel="stylesheet" href="style.css" type="text/css" />
> </head>
> .......
> 
> The problem is that the syle sheet is not teken in account.
> Could someone tell me how to proceed ?

you have to manually export the file to the Nevow object tree.

from nevow import rend, static
class MyPage(rend.Page):
    child_css = static.File('on_filesystem_css_directory/')

This will export the entire content of the on_filesystem_css_directory/ in an
'online' directory named css/ so considering MyPage as the root page (in /)
the css will be in /css/style.css

If you really want stuff like 'style.css' at root level you have 2 choices:

put in the class the dictionary:

class MyPage(rend.Page):
   children = { 'style.css':
                static.File('on_filesystem_css_directory/cssfile.css')
   }

or

class MyPage(rend.Page):
   setattr(MyPage, 'child_style.css', static.File('on_file.......'))

HTH

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051117/8a12e42a/attachment-0001.pgp
From dialtone at divmod.com  Thu Nov 17 15:24:02 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu Nov 17 15:24:47 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <20051117212936.GE62588@prometheusresearch.com>
References: <20051116184812.GA84796@prometheusresearch.com>
	<20051117114727.10365.819776455.divmod.quotient.8771@ohm>
	<20051117121711.GA1114@divmod.com>
	<20051117212936.GE62588@prometheusresearch.com>
Message-ID: <20051117222402.GB15344@divmod.com>

On Thu, Nov 17, 2005 at 04:29:36PM -0500, Clark C. Evans wrote:
> | def sessionfilter(req, res, ctx):
> |     # do session handling here
> | 
> | def authenticationfilter(req, res, ctx):
> |     # do authentication handling here
> |
> 
> 1. How do I know what the response is before I even authenticate or
>    create a session?

In order to start writing the response to the outside you have to call
response.startProducing()

So you can 'easily' avoid transmitting anything but keep producing the page with
a BufferedStream that can consume but not produce until you tell it to. In
this way the environment will change without any output and then you will be
able to see the changes at the end and decide consequently.

> 2. Which comes first, I assume session then authentication.

Easily changeable by changing the order of Request.responseFilters

> 3. These need to come _before_ any of my other resources get
>    the request.

I don't understand the implication of this. Can you elaborate a bit? :)

> It seems that the dispatch mechansim might need a way to "register"
> that a filter should be applied at the end of processing; so that
> once the Response is generated, it can be wrapped on the way out.

There already is:
Request.addResponseFilter(f, atEnd=False)

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051117/1eb57077/attachment.pgp
From glyph at divmod.com  Thu Nov 17 19:47:52 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Nov 17 19:47:54 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <D3346953-9BFD-4A5D-A710-F99BFFFE8EA7@dreid.org>
Message-ID: <20051118024752.10365.2007756776.divmod.quotient.8979@ohm>



On Thu, 17 Nov 2005 11:09:42 -0800, David Reid <dreid@dreid.org> wrote:

>While it might be a valid assumption, there is no common public  interface 
>provided to facilitate it.

The interface is ICredentialsChecker, specifically, requestAvatarID.  

>Perhaps because no one knows  what that should 
>look like, perhaps because no one felt it was  necessary.

Return a Deferred from requestAvatarID...?

>But I do believe 
>that something like  twisted.protocols.sip.IAuthorizer, that allows for an 
>arbitrary  number of round trips should be in cred,

That's not what IAuthorizer does.  That's what Deferreds do: you can call deferred-returning methods from within requestAvatarID.  That allows for an arbitrary number of round trips.

I really don't see how IAuthorizer is relevant to this discussion at all, in fact.

>either the ICredentials 
>interface should be extended (probably through a subclass) or a new 
>interface should be created.

Clearly, but that doesn't mean that something should be in cred.  From ICredentials' documentation:

"""
    Implementors _must_ specify which sub-interfaces of ICredentials
    to which it conforms, using zope.interface.implements().
"""

ICredentials is explicitly listed as a super-interface, it doesn't mean anything by itself, you have to create subinterfaces for every different kind of authorization.

>I'm toying with some ideas of how to  best do 
>this, but I don't really "get" cred

Clearly not :)

>so if you have any  requirements other 
>than arbitrary number of round trips, let me know  so i can take those into 
>account now rather than later.

Honestly, I have no idea what you're talking about.  Have you read Abe's new book?  He covers everything in terms of cred.

From glyph at divmod.com  Thu Nov 17 19:50:52 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Nov 17 19:50:54 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051117202934.GB62588@prometheusresearch.com>
Message-ID: <20051118025052.10365.82077404.divmod.quotient.8980@ohm>



On Thu, 17 Nov 2005 15:29:34 -0500, "Clark C. Evans" <cce@clarkevans.com> wrote:

>The acceptable languages that the _response_ is allowed to take can be
>found in the 'Accept-Language' header.  This has the advantage of
>allowing more than one language choice, eighted by preference and
>typically auto-configured by your browser from the operating system
>defaults.  In most browsers this setting can be changed; for example,
>in Firefox go to about:config and navigate to intl.accept_languages.

In this case, since the 'request' object is available, simply pass the appropriate data from the header in question down to the object which needs to be rendered.  In this case there is even less need for the context: a regular HTTP request encapsulates all the data you need!

From glyph at divmod.com  Thu Nov 17 19:53:12 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Thu Nov 17 19:53:14 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051117205537.GC62588@prometheusresearch.com>
Message-ID: <20051118025312.10365.139958332.divmod.quotient.8982@ohm>

On Thu, 17 Nov 2005 15:55:37 -0500, "Clark C. Evans" <cce@clarkevans.com> wrote:
>Anyway Glyph, I'm not quite certain I understand what you're saying or
>recommending.  If you could detail a bit more, it would be wonderful.

I'll try to provide more detail later.  I'm also trying to digest your "stage"-based approach here.  Although certainly possible to implement in terms of t.w/w2/nevow abstractions it seems rather alien to the mindset involved.  

From foom at fuhm.net  Thu Nov 17 23:26:49 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu Nov 17 23:26:58 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051117115711.10365.635838822.divmod.quotient.8775@ohm>
References: <20051117115711.10365.635838822.divmod.quotient.8775@ohm>
Message-ID: <146AF7A6-A6EC-4519-8CAE-B4F9B56112FB@fuhm.net>

On Nov 17, 2005, at 6:57 AM, glyph@divmod.com wrote:
> "content-length" and "connection" are just headers too: but the  
> code has to support them because they're in the RFC.  Technically  
> speaking cookies aren't in the *same* RFC, but they do have a  
> standard of their own, rfc2109.
>
> If there were multiple possible implementations of cookies, I'd say  
> there should be an adapter or something to keep it separate.  Since  
> there is just the one way to do them, though, I think that it's  
> reasonable to treat the standards as merged, and just put the  
> methods on request to handle it.  Pragmatically speaking cookies  
> are not an "optional" extension to HTTP/1.1.
>

Agreed, cookies are important. But, there's not just one possible  
implementation. To start with, you've got three specs: netscape,  
RFC2109, and RFC2965. I believe RFC2109 is essentially dead, and  
shouldn't be cared about.

The code is there to parse and unparse all the cookie headers in both  
Netscape and RFC2965 format, in the same way the code is there to  
parse and unparse content-length. As cce indicated, you can directly  
manipulate the parsed header representation. However, a higher-level  
interface to cookies should be implemented.

However, this higher level implementation is not entirely trivial,  
which is why I haven't done it yet. As an example of some of the non- 
trivialities:

The Netscape cookie spec is insecure, often allowing random other  
hosts on the internet to set cookies for your host(*). Uptake of the  
RFC2965 spec is slow but gaining somewhat, and supporting it would be  
a good move. It adds the ability to determine what host/path the  
cookie was set for, so your application can verify that it isn't  
getting cookies from an unexpected source. So, the high level  
interface has to be more than a simple dictionary, it has to be  
filterable by acceptable source host/port/path. But only when you  
know you're talking to a client that supports RFC2965, which you can  
tell because of various attributes. And when setting a cookie,  
probably both Set-Cookie and Set-Cookie2 should be sent.

And stuff like that. All doable, and should be done, but to say  
there's only one obvious way to do things is not exactly true. :)


(*): Most common example: User follows a link to http:// 
attacker.co.uk/. Said webpage makes a request in the background to  
http://myserver.co.uk/ and I setup a new session and send back a  
cookie with the session id: SID=1234. Attacker then sends back to  
user a cookie: SID=1234, domain=.co.uk and redirects user to http:// 
myserver.co.uk/. Myserver gets the SID cookie, and uses that session.  
Attacker now has access to all data available through user's session.  
D'oh!

This was originally supposed to be prevented by the rule implemented  
in browsers that you cannot set a prefix cookie for domains without a  
dot, but that only protects domains which sell the second level  
(e.g. .com, .org, .net).

James

From foom at fuhm.net  Fri Nov 18 00:12:42 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Nov 18 00:12:51 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051117131725.10365.1102336207.divmod.quotient.8793@ohm>
References: <20051117131725.10365.1102336207.divmod.quotient.8793@ohm>
Message-ID: <EEE75A9C-2BAD-44CB-9FE6-4E1BCD354549@fuhm.net>


On Nov 17, 2005, at 8:17 AM, glyph@divmod.com wrote:

> Concretely: come to think of it I've never heard of a legitimate  
> requirement other than "currently logged in user", which ought to  
> be handled by another system anyway.  As per CCE's previous emails,  
> the system for initializing those and setting them up needs to be  
> pretty flexible in terms of how and when login forms get displayed,  
> but the use of cred is non-negotiable.  We need a unifying cross- 
> protocol abstraction.

Just some random thoughts on authentication. Userid information can  
come into the app in a wide variety of ways: REMOTE_USER var from  
*CGI, username from a verified SSL client certificate, HTTP  
authentication headers, session data from a previously filled out  
HTML login form, or something else completely. And no matter how I  
figure out who the user is, it has to be passed through to the rest  
of the site, including passing it on externally via *CGI outgoing  
REQUEST_USER. This I can see being done via the same mechanism used  
to include any other per-request data.

I find that operation to be conceptually separate from the operation  
of "given an authenticated userid, give me his toplevel Resource".  
Also completely separate is "gimme a new session". That current guard  
merges all three together into one operation is where I've always had  
trouble with it. Sometimes the three intersect, sometimes they don't,  
it depends upon the application.

James

From foom at fuhm.net  Fri Nov 18 00:13:49 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri Nov 18 00:14:07 2005
Subject: [Twisted-web] web2 response.setCookie and request.getCookie
	shortcuts?
In-Reply-To: <20051118025052.10365.82077404.divmod.quotient.8980@ohm>
References: <20051118025052.10365.82077404.divmod.quotient.8980@ohm>
Message-ID: <B70B3CD6-755E-4DA8-9EB9-819E706E403B@fuhm.net>

On Nov 17, 2005, at 9:50 PM, glyph@divmod.com wrote:
> On Thu, 17 Nov 2005 15:29:34 -0500, "Clark C. Evans"  
> <cce@clarkevans.com> wrote:
>
>
>> The acceptable languages that the _response_ is allowed to take  
>> can be
>> found in the 'Accept-Language' header.  This has the advantage of
>> allowing more than one language choice, eighted by preference and
>> typically auto-configured by your browser from the operating system
>> defaults.  In most browsers this setting can be changed; for example,
>> in Firefox go to about:config and navigate to intl.accept_languages.
>>
>
> In this case, since the 'request' object is available, simply pass  
> the appropriate data from the header in question down to the object  
> which needs to be rendered.  In this case there is even less need  
> for the context: a regular HTTP request encapsulates all the data  
> you need!

Of course as noted before, it is often a requirement that a user be  
able to override this setting via an interface in the web application  
itself. Ideally that wouldn't be required, but idealism isn't often  
achievable when web browsers are involved. :) The override may take  
the form of a cookie, data in a session, part of the url, or whatever  
else app specific. In the way I'd envision creating an application,  
processing the language pref inputs into the single "preferred  
languages order" attribute takes place in a resource near the top of  
the graph, for use by all resources under it in the application. Said  
resource has to communicate the information somehow.

I like CCE's description of his processing stages -- it seems to  
match the way I think as well, although he takes it to more of an  
extreme than I would.

James

From dsalvatore at freesurf.fr  Fri Nov 18 04:18:06 2005
From: dsalvatore at freesurf.fr (dsalvatore@freesurf.fr)
Date: Fri Nov 18 04:18:10 2005
Subject: [Twisted-web] css File with Nevow
In-Reply-To: <20051117221501.GA15344@divmod.com>
References: <20051117221501.GA15344@divmod.com>
Message-ID: <33195.83.112.193.168.1132312686.squirrel@jose.freesurf.fr>

Grazie Valentino :-)

> On Thu, Nov 17, 2005 at 10:10:38PM +0100, dsalvatore@freesurf.fr wrote:
>> Hello,
>>
>> I would like to use an externel xml file linked to a style sheet
>>
>> <html xmlns:nevow="http://nevow.com/ns/nevow/0.1">
>> <head>
>> <link rel="stylesheet" href="style.css" type="text/css" />
>> </head>
>> .......
>>
>> The problem is that the syle sheet is not teken in account.
>> Could someone tell me how to proceed ?
>
> you have to manually export the file to the Nevow object tree.
>
> from nevow import rend, static
> class MyPage(rend.Page):
>    child_css = static.File('on_filesystem_css_directory/')
>
> This will export the entire content of the on_filesystem_css_directory/
> in an 'online' directory named css/ so considering MyPage as the root
> page (in /) the css will be in /css/style.css
>
> If you really want stuff like 'style.css' at root level you have 2
> choices:
>
> put in the class the dictionary:
>
> class MyPage(rend.Page):
>   children = { 'style.css':
>                static.File('on_filesystem_css_directory/cssfile.css')
>   }
>
> or
>
> class MyPage(rend.Page):
>   setattr(MyPage, 'child_style.css', static.File('on_file.......'))
>
> HTH
>
> --
> Valentino Volonghi aka Dialtone
> Now Running MacOSX 10.4
> Blog: http://vvolonghi.blogspot.com
> http://weever.berlios.de




From mailinglists at smartology.nl  Fri Nov 18 08:41:59 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Fri Nov 18 08:42:14 2005
Subject: [Twisted-web] Nevow IResource trouble
In-Reply-To: <437B551A.5060307@smartology.nl>
References: <437B551A.5060307@smartology.nl>
Message-ID: <437DF647.3020608@smartology.nl>

Remi Cool wrote:

>Hello, after batteling with XMLRPC and getting nevow to put something on
>the screen, I got stuck implementing a livepage and webform example.
>
>After changing the implements to inevow.IResource in httpResource, I got
>a message about a missing locateChild method (is that about the same as
>the getChild method in a twisted web resource?) ... I've created one,
>but I'm not shure if it's correct.
>
>Bottomline is I can't get it to work, not from the code and not from a
>resource file ... what's wrong with this code?
>
>  
>
I was using twisted.web.static and not nevow.static and that mistake was
responsible for the cannotAdapt errors.

The webforms example worked after changing the ISimpleMethod class to:

class ISimpleMethod(TypedInterface):
    def simple(self, name=String(description="Your name."),
age=Integer(description="Your age.")):
        """Simple
       
        Please enter your name and age.
        """
    simple = annotate.autocallable(simple)


The Livepage example also needed a little touchup ...

class Live(LivePage):
    addSlash = True
    docFactory = loaders.stan(
    tags.html[
        tags.head[livepage.glue],
        tags.body[
            tags.ol[
                tags.li(onclick="server.handle('greeter', this.name)",
name="one")["One"],
                tags.li(onclick="server.handle('greeter', this.name)",
name="two")["Two"],
                tags.li(onclick="server.handle('greeter', this.name)",
name="three")["Three"]
            ]
        ]
    ])
    def __init__(self):
        livepage.LivePage.__init__(self)

    def handle_greeter(self, ctx, value):
        return livepage.alert("you've clicked %s" % value)

Most important was the tags.head[livepage.glue] addition.

Now that everything works, I can go on to the next step (pfew) ...
calling the client from the server with livepage, sessions,
authentication and experimenting with nufox XUL.

- Remi -

From dreid at dreid.org  Fri Nov 18 10:51:12 2005
From: dreid at dreid.org (David Reid)
Date: Fri Nov 18 10:50:49 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <20051118024752.10365.2007756776.divmod.quotient.8979@ohm>
References: <20051118024752.10365.2007756776.divmod.quotient.8979@ohm>
Message-ID: <1132336272.24425.13.camel@audrey.local>

On Thu, 2005-11-17 at 21:47 -0500, glyph@divmod.com wrote:
> 
> On Thu, 17 Nov 2005 11:09:42 -0800, David Reid <dreid@dreid.org> wrote:
> 
> >While it might be a valid assumption, there is no common public  interface 
> >provided to facilitate it.
> 
> The interface is ICredentialsChecker, specifically, requestAvatarID.  

I don't see that working for things like HTTP Basic and Digest auth,
even if ICredentials.checkPassword, returns a deferred, which fires
after the last step has been completed, most ICredentialsCheckers do
things with the credentials before they even call checkPassword, like
check the username exists.  

But in Basic and Digest auth you don't have the username until you get
the response to your challenge.  So this is where IAuthorizer comes in
it handles all the steps prior to having something that you can use to
build a credentials.  

So if IAuthorizer has nothing to do with this discussion, where would
you generate your challenge, and parse the response?

You could implement your own ICredentialsChecker and actually do these
things in requestAvatarId, via some interface on the credentials, but I
know you can't be suggesting that is the right way to do it, because
that would break all the modularity of cred.

> Honestly, I have no idea what you're talking about.  Have you read Abe's new book?  He covers everything in terms of cred.

Clearly I'm not explaining myself very well, but yes, the only things
I've ever read about cred are the source code and Abe's book.  But then
I looked at the actual HTTP AUTH implementations, and I feel there is
something more needed to support this properly.  I'm also wondering
where exarkun is, because this extension to cred was his idea in the
first place.

-David


From andreas.destefani at ucd.ie  Fri Nov 18 11:12:51 2005
From: andreas.destefani at ucd.ie (Andreas De Stefani)
Date: Fri Nov 18 11:14:44 2005
Subject: [Twisted-web] sending svg code from livepage
Message-ID: <437E19A3.8050604@ucd.ie>

Hi all,

I would like to display svg which is generated on the server side, I 
tried to do so with nevow and livepage but i experienced some problems...
i tried both sending the code embedded in a <embed> and <object > tag 
but none of this worked... when i use a iframe to display the svg it 
gets all screwed up and no graphics are shown....

i was wondering if this was related to nevow/twisted as if i just point 
my browser (firefox) to the file ... it works just fine!

thanks for any help!

Andreas

From glyph at divmod.com  Fri Nov 18 12:48:17 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Nov 18 12:48:19 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051117212005.GD62588@prometheusresearch.com>
Message-ID: <20051118194817.32735.1400407017.divmod.quotient.204@ohm>


On Thu, 17 Nov 2005 16:20:05 -0500, "Clark C. Evans" <cce@clarkevans.com> wrote:
>On Thu, Nov 17, 2005 at 08:17:25AM -0500, glyph@divmod.com wrote:
>| On Wed, 16 Nov 2005 11:11:49 -0500, James Y Knight <foom@fuhm.net> wrote:
>| > I think of something like parsing user authentication information at a
>| > high level up in the resource tree and making it available to a
>| > Resource low in the tree.

>Must we assume that resources form a Tree?  Mine form a Graph; I have
>many resources which can be entered in any number of contexts with
>different "parent" resources.   Viewed this way, the resources which
>a _request_ has passed through forms a stack; but it isn't a tree.

>From the perspective of the request, yes, resources form a tree.  Although a tree-style API can certainly be used to access a graph, there is a definite "up" and "down" *with respect to a particular request*, and if your resources have relationships outside of that, then they can hold regular object references to each other and call methods on each other or whatever, but the web server should not grow abstractions to specifically support that.

Graphs can be problematic as a web data structure, for example, graphs can have cycles, which Nevow specifically disallows (and I think that is generally a good decision).

>Currently, it is my application; and I modify the request object to
>my heart's content.  It may seem dangerous, but I've yet to hit a
>single bug from this usage.

You'll continue to be able to do that indefinitely.  It certainly breaks encapsulation however, and encouraging it as a general technique will almost certainly create problems related to namespace clashes.  We shouldn't break it, but we also shouldn't suggest it.

>| Concretely: come to think of it I've never heard of a legitimate
>| requirement other than "currently logged in user", which ought to be
>| handled by another system anyway.
>
>See my previous email.  My resources go through many stages of
>processing and are heavily modified by the time I'm ready to
>generate a Response.

I've gone through that message now and more thoroughly understood what is going on.  Those stages are interesting, but I don't think that any of them belong in twisted.web2.  Twisted's model of web interoperability is, and has always been, object publishing.  We aren't going to change that to a stage-based or filter-based scheme.

>| Though I missed the conversation, I imagine the handwavy stuff that JP
>| was suggesting was "the top resource, which is a proxy for the user,
>| should pass information down to its children as it creates them".  Some
>| kind of explicit relationship is required.
>
>This statement, I don't get at all.  As I understand it, a resource
>processes more than one request; and hence, will be associated with
>more than one user.

A resource is an object.  It may process requests for one user, or for many.  In the twisted.cred model of looking at resources, each user's top resource is unique to that user.  Depending on session management policy the anonymous resource may or may not be shared between anonymous sessions.  It may *wrap* a resource which is common to all users, but the cred way of looking at an object is that each user has a distinct object they communicate with, which determines their view of the world.

Think of it this way: a resource should know what it looks like.  If you are looking at a page that says "Welcome, Clark!", then "Welcome, Clark!" should be an attribute of that resource.  Perhaps that data came from a cookie, perhaps it was somehow identified by a session identifier in the URL, but by whatever technique, by the time you are rendering a resource, it should not be looking at the Request object to determine every little thing about itself.  Things like accept-encodings and accept-languages can modify or filter the result, but the basic data that's there should be accessed by the application by looking at self, not by looking at request.getSession().getComponent(IMyApplication).dataFor(self).(...) or some similar monstrosity.

>| I'll here backpedal just a tiny bit on my earlier adamance on getSession
>| and say that perhaps there is a valid use for access to the currently
>| logged-in user as request data.  By "currently logged-in user" I mean
>| "'topmost' resource object".
>
>Sorry, I'm lost.   Are you saying that:
>
>    (a) An Avatar is a "auto-generated" resource perhaps constructed
>        from the SessionManager resource?

That's the way guard works and should continue to work, yes.

>    (b) Each Request object would have a 'stack' of 'previous-resources'
>        that it has visited?  And that I could ask for the 'Avatar'
>        resource in that 'stack' via a method on the request object?

It's not a stack; certain resources can just put themselves into a slot.  If an API is provided to build up large amounts of implicit state through accretion during resource traversal, then the request will snowball in complexity as more and more junk gets stuck to it by different bits of different applications.

>If so, it sounds more complicated than plain-old getSession().  Perhaps
>I just don't understand what problems you've had with getSession?

You're right that getSession and getSiteResource (or whatever this is called) are very similar, but there is a fundamentally different goal in mind.

getSession is designed to bridge requests automatically from within the HTTP server's framework code, by setting cookies and such.  Session management is a task that should be accomplished by a resource object which can be independently tested, not by the server code.

The proposed interface is something that would probably be *used* by a session-manager resource, and might even represent the session, but its purpose is simply to provide some per-request data that can be shared between resources processing the same request, without resorting to random attributes on the request, and with some way to link to the resource that provided that data.

>| Sketch of an interface:

(snip)

>Ok.  That's very nice.   Just remove the word 'Resource' and you're all
>set; just let it be a regular object.

I suppose this doesn't make much difference.  I want it to be the resource because the accompanying URL should point to it, but I suppose that might be unnecessarily restrictive; at least the URL will point at the thing that set it.

>This similar system would work with Session then?
>
>   request.setSession( my ISession object )

We could call this object a session, although in that case there is no "ISession" - as I mentioned before, the object passed is application-specific, and the framework should expect absolutely nothing from it.

>Ok.  This is where I get confused.  The top level resource can handle
>multiple requests.  I think you're just referring to one's application
>data?  Perhaps...
>
>   request.setAppData(an IAppData object)
>
>where IAppData is any old object that the application wants.

The topmost resource for a particular user is unique to that user, assuming they have logged in with a system like cred.  It's shared among all users if there is no session management going on - in which case, why would you need to know the currently logged in user :).

>| - As I mentioned previously, error messages can be more detailed, since
>| they will indicate what type the current site resource is, and thereby
>| provide the developer some indication of how the offending resource got
>| where it is.  Furthermore the URL can also be used to aid in error
>| reporting, so the developer can tell "where" the path traversal went
>| wrong.  If we want to push the error reporting even harder, we can have
>| an explicit 'interface' argument which has to be passed to both
>| setSiteResource and getSiteResource, used for nothing but matching up to
>| make sure that the implicit state matches the application's expectations.
>
>Sorry; I don't get this one -- do you mind explaining a bit more?

error-reporting behavior with Nevow:

I have a resource which must be rendered after a Foo has been put into the context, remembered with IFoo.  This happens when FooRoot's locateChild is called, on the context passed to locate child.  I forget to put a FooRoot into the path, which I expect to be at /my-app/foo/<id>.

Keep in mind that locateChild is just one of many places the context is passed: it could be set in renderHTTP and used in the template, it could be set in locateChild and used in renderHTTP, it could be set somewhere early in the template and used somewhere later.

Someone else later places my Foo resource at /my-app/stuff/extra/current-foo.  They receive this error:

  KeyError: interface 'IFoo' not remembered

"Where does IFoo get remembered" can sometimes be as easy to find as a grep, but sometimes it's hard to figure out which of many places is being invoked in the actually-working example you're working from.

error-reporting behavior with interfaces and such using this system:

In a similar situation, I need a Foo on the request.  It's set by /my-app/foo.  I put my Foo resources at /my-app/foo/<blah>.  Someone else puts one at /my-app/stuff/extra/current-foo.  The error-reporting now becomes:

  SiteMismatchError: expected current site resource to provide 'IFoo', but instead found 'IMyApp' <MyApp@13715> from http://example.com/my-app/

It is then possible for the developer to insert a 'print' statement into a working Foo and watch the logs, which would allow them to see that the URL which sets the IFoo it's using is http://example.com/my-app/foo/ - this might assist in figuring out how to set up a similar structure for /stuff/.


From glyph at divmod.com  Fri Nov 18 14:02:26 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Nov 18 14:02:28 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <EEE75A9C-2BAD-44CB-9FE6-4E1BCD354549@fuhm.net>
Message-ID: <20051118210226.32735.2116868695.divmod.quotient.221@ohm>

On Fri, 18 Nov 2005 02:12:42 -0500, James Y Knight <foom@fuhm.net> wrote:

>On Nov 17, 2005, at 8:17 AM, glyph@divmod.com wrote:

>Just some random thoughts on authentication. Userid information can  come 
>into the app in a wide variety of ways: (...) it has to 
>be passed through to the rest  of the site, including passing it on 
>externally via *CGI outgoing  REQUEST_USER.

>I find that operation to be conceptually separate from the operation  of 
>"given an authenticated userid, give me his toplevel Resource".  Also  
>completely separate is "gimme a new session". That current guard  merges all 
>three together into one operation is where I've always had  trouble with it. 
>Sometimes the three intersect, sometimes they don't,  it depends upon the 
>application.

There are definitely at least 2 separate levels of abstraction here.

At one level, you are dealing with HTTP objects.  You have resources, and you have essentially meaningless strings that allegedly represent usernames (or form fields) which must be passed to other things which require access to a username.  This is entirely a wiring problem, and the solution is irrelevant to application developers.  No request-specific application data passing APIs are required for this because all the information you just described is part of each HTTP request itself.

At another level, you are authenticating a user to an application written using Twisted.  The way Twisted applications should do this is using cred, and the web way to use cred is with guard.

Application authors are welcome to use the HTTP protocol and resource model traversal code to do something else, if their application requires it.  However, providing discrete, optional APIs for session-creation, credentials passing, and authenticated application object access would be tedious, confusing, and ultimately would break any attempts to integrate with cred objects that were not originally designed for HTTP.

Let me try to clear up a few misconceptions about cred and guard that seem to have crept into the discussion here.

- Resources are lightweight.  You can have a top-level resource object which controls your session.  In other frameworks, such an object is called a "controller" for good reason.  There is no reason to have a separate 'session' object. What else does a "session object" do, anyway?  Store a dictionary of random keys to arbitrary objects?  Namespace conflict and cruft accretion issues abound once you start seeing "the session" as a tiny object you can stick bigger things to.  Your top-level resource is your application's controller, and it carries both session state and authority.

- Authentication does not imply authorization.  You don't have to log in as a user with a username to use the guard style of authentication.  You can implicitly authenticate as the anonymous user, which gives you a top-level resource, which is your session.  Again, resources are lightweight.  It needn't do anything but trivially wrap the shared resource at the top level.  

  - If you are getting a LOT of hits, and individual persistent objects for sessions really are too heavyweight for you, you don't need to use guard to access the static parts of your site.  guard's SessionWrapper doesn't need to live at /, it just needs to be somewhere persistent.

- Guard is a higher-level abstraction that is based around resources.  It shouldn't be built into the request at all.  There is no need to pay its cost if your application is doing something else.

- Guard should be flexible enough to allow for several different kinds of authentication mechanisms, not simply the HTTP-form-post mechanism it provides today.  It should let resources create credentials and pass them to the realm in whatever way makes the most sense for the desired user-experience.  It is currently extremely inflexible in this regard and I think it's just broken.

- Guard should allow the session to be pluggable, using cookies, digest authentication, headers, tunable timeouts, etc.

I am open to suggestions as to how to do cred-style authentication with an interface that isn't IResource, if something else makes more sense there.  I am doubtful but not implacable.  However, web2 is definitely going to include something an awful lot like guard before its final release.  Twisted is unfortunately thin on unifying abstractions currently, and cred is the best one we have.  The alternative to cred-style authentication in web2 is a new, better unifying abstraction plus a rewrite of the relevant portions of at least SIP, IMAP4, POP3, SMTP, Telnet, SSH, FTP, and IRC.  This is what I meant by "cred is non-negotiable".

From cce at clarkevans.com  Fri Nov 18 14:47:02 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri Nov 18 14:47:28 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051118194817.32735.1400407017.divmod.quotient.204@ohm>
References: <20051117212005.GD62588@prometheusresearch.com>
	<20051118194817.32735.1400407017.divmod.quotient.204@ohm>
Message-ID: <20051118214702.GA81176@prometheusresearch.com>

Glyph,

Thank you for taking time to discuss this more.  I think I disagree that
twisted core currently is, or should be an object publishing system.
It's ok if Nevow is an object publishing system; but you should not
restrict the applications of twisted.web2 to object publishing.

By an "object publishing system", I mean a system where every object
in the system is a Resource, and hence has a *unique* URL.  That is,
if I have two distinct objects in the system, they have different
URLs; and if I have two URLs that refer to actual resources in the
system, they refer to different objects.

For starters, some objects in the system (such as a Session) by 
default do not have a URL, and thus by definition, is not a 
Published Object (aka a Resource).  But the current implementation
of web2 goes even further; it is possible for two distinct "Resource"
objects to have been accessed by the same URL (see web2.static.File,
which dynamically creates a Resource object for children).

But overall, I think the decision to give "special meaning" to path
segments is a mistake at such a low-level of web2; it seems to imply
this 1-1 correspondence which doesn't actually exist.  A better 
low-level interface would just be something like:

class IRequestHandler
     def handleRequest(self, request):
          # returns one of:
          # - a IResponse to be returned to the client
          # - an IRequestHandler which is used for further processing
          # or, a deferred which yields one of the above.
      
Then, an IResource is defined as a _kind_ of request handler that eats
exactly one path segment from the request; and it breaks handleRequest
into two cases:  (a) one that returns another IResource aka locateChild(),
or (b) one that returns a Response, aka render(). However, a IResource
is a very special kind of IRequestHandler -- one that respects the
uniqueness constraints of an object publshing system.

In this logic, an IAuthenticator is _not_ a resource, but rather a
IRequestHandler that does a bunch of checks; but otherwise largly
passes-through the request onto the next processing stage. I'm not sure
how an ISession fits into this, but it is not a request handler (and it
certainly isn't a resource). A Session object is the product of an
ISessionManager request handler when applied to the particular request.

In logical terms, the ISessionManager should associate each IRequest
with an ISession; you can then adapt(request,ISession) to obtain the 
given session.  If the IRequest interface provides a short-cut for
this is really an implementation detail; but one with clear value.

In summary, I think you're confusing arbitrary objects in the system
with Resources; and I think the web2 module is already overly-complicated 
since it is addressing a higher level of abstraction than what is
absolutely required.   In my application, I do not have Resources
via the definition of an object publishing system -- nor do I want
to be burdened with this distinction.  I have my own URL processing
and I don't find the web2 concept of "segments" helpful.  

Following are specific comments related to the above...

On Fri, Nov 18, 2005 at 02:48:17PM -0500, glyph@divmod.com wrote:
| Graphs can be problematic as a web data structure, for example, graphs 
| can have cycles, which Nevow specifically disallows (and I think that is 
| generally a good decision).

If you're talking about Resources, yes, I absolutely agree.  However,
this is not a necessary restriction on a RequestHandler; in deed, a
RequestHandler might return itself from handleRequest -- this forms
a cyclic graph, no?

| You'll continue to be able to do that indefinitely.  It certainly breaks 
| encapsulation however, and encouraging it as a general technique will 
| almost certainly create problems related to namespace clashes.  We 
| shouldn't break it, but we also shouldn't suggest it.

Ok.  The _primary_ problem with Request objects is that you don't
want to get into naming clashes.  This is legitimate.  I think 
some sort of adapt() mechanism is needed.  How about this...

Each IRequest object has a member variable, 'peer', which is a mapping
from interfaces, such as IFoo onto the object that implements that
interface.  So, request.peer[ISession] will give me the session
associated with that request.  The appropriate __conform__ logic can
also be implemented so that adapt(peer,ISession) works.

| I've gone through that message now and more thoroughly understood what is 
| going on.  Those stages are interesting, but I don't think that any of 
| them belong in twisted.web2.  Twisted's model of web interoperability is, 
| and has always been, object publishing.  We aren't going to change that 
| to a stage-based or filter-based scheme.

Assume for a moment that IRequestHandler is the basis for web2, 
and that IResource layers on "object publishing" semantics.  Further
assume that the 'peer' attribute on each request maps interfaces
onto objects associated with that interface.

In this case, my "alternative" to object publishing has an IState
object associated with each request; and an IStage interface that
inherits from IRequestHandler.  That said, there is no reason why
I should be forced to layer my IStage on top of an IResource; my
stages are not resources.

| A resource is an object.  It may process requests for one user, or for 
| many.  In the twisted.cred model of looking at resources, each user's top 
| resource is unique to that user. 

Are all objects resources?  If not, what must an object have to be
a resource.  If the answer is "implements IResource", then I ask
you, is a Session a resource?  If so, what does it's locateChild
look like?



| Depending on session management policy 
| the anonymous resource may or may not be shared between anonymous 
| sessions.  It may *wrap* a resource which is common to all users, but the 
| cred way of looking at an object is that each user has a distinct object 
| they communicate with, which determines their view of the world.

Ok.  That's good, an Avatar; but is an Avatar an IResource?

| Think of it this way: a resource should know what it looks like.  If you 
| are looking at a page that says "Welcome, Clark!", then "Welcome, Clark!" 
| should be an attribute of that resource.  Perhaps that data came from a 
| cookie, perhaps it was somehow identified by a session identifier in the 
| URL, but by whatever technique, by the time you are rendering a resource, 
| it should not be looking at the Request object to determine every little 
| thing about itself. 

Here is where we part ways.  This view of the the processing model
is an unnecessary restriction and should not be pladed upon web2.


| Things like accept-encodings and accept-languages 
| can modify or filter the result, but the basic data that's there should 
| be accessed by the application by looking at self, not by looking at 
| request.getSession().getComponent(IMyApplication).dataFor(self).(...) or 
| some similar monstrosity.

adapt(request,IState).bing

| >   (a) An Avatar is a "auto-generated" resource perhaps constructed
| >       from the SessionManager resource?
| 
| That's the way guard works and should continue to work, yes.

An avatar is not a resrouce; if it is, what is it's URL?  What does it
look like (to phrase it with your definition)?

| >   (b) Each Request object would have a 'stack' of 'previous-resources'
| >       that it has visited?  And that I could ask for the 'Avatar'
| >       resource in that 'stack' via a method on the request object?
| 
| It's not a stack; certain resources can just put themselves into a slot.  
| If an API is provided to build up large amounts of implicit state through 
| accretion during resource traversal, then the request will snowball in 
| complexity as more and more junk gets stuck to it by different bits of 
| different applications.

Assuming a 'peers' collection; you only need to access the peers
that your RequestHandler (or IResource) knows or cares about.

| getSession is designed to bridge requests automatically from within the 
| HTTP server's framework code, by setting cookies and such.  Session 
| management is a task that should be accomplished by a resource object 
| which can be independently tested, not by the server code.

No disagreement here.

| The proposed interface is something that would probably be *used* by a 
| session-manager resource, and might even represent the session, but its 
| purpose is simply to provide some per-request data that can be shared 
| between resources processing the same request, without resorting to 
| random attributes on the request, and with some way to link to the 
| resource that provided that data.

It is not necessary to link data associated with a request with 
the 'Resource' that provided the data.

| >Ok.  That's very nice.   Just remove the word 'Resource' and you're all
| >set; just let it be a regular object.
| 
| I suppose this doesn't make much difference.  I want it to be the 
| resource because the accompanying URL should point to it, but I suppose 
| that might be unnecessarily restrictive; at least the URL will point at 
| the thing that set it.

Well, if you want to _expose_ a URL to the user for them to view
their session; then, it is indeed a Resource.  However, not all
sessions need to be Resources, no?

| >This similar system would work with Session then?
| >
| >  request.setSession( my ISession object )
| 
| We could call this object a session, although in that case there is no 
| "ISession" - as I mentioned before, the object passed is 
| application-specific, and the framework should expect absolutely nothing 
| from it.

request.peer[IMySession] = mysession

| >Ok.  This is where I get confused.  The top level resource can handle
| >multiple requests.  I think you're just referring to one's application
| >data?  Perhaps...
| >
| >  request.setAppData(an IAppData object)
| >
| >where IAppData is any old object that the application wants.
| 
| The topmost resource for a particular user is unique to that user, 
| assuming they have logged in with a system like cred.  It's shared among 
| all users if there is no session management going on - in which case, why 
| would you need to know the currently logged in user :).

Does this top-most "resource" have a URL?  If not, then it
isn't a resource.  *poke*

| error-reporting behavior with Nevow

Ouch.  Is this good?

| In a similar situation, I need a Foo on the request.  It's set by 
| /my-app/foo.  I put my Foo resources at /my-app/foo/<blah>.  Someone else 
| puts one at /my-app/stuff/extra/current-foo.  The error-reporting now 
| becomes:
| 
|  SiteMismatchError: expected current site resource to provide 'IFoo', but 
|  instead found 'IMyApp' <MyApp@13715> from http://example.com/my-app/
| 
| It is then possible for the developer to insert a 'print' statement into 
| a working Foo and watch the logs, which would allow them to see that the 
| URL which sets the IFoo it's using is http://example.com/my-app/foo/ - 
| this might assist in figuring out how to set up a similar structure for 
| /stuff/.

Wow.  Is this good?

I think this is overly complicated, and it stems from the attempt to
make "everything a resource".   My system is very very incompatible with
this approach; and I have lots and lots of customers who have written
custom code dependent on my current URLs, so I cannot be changing them.
No way am I adding a /foo/ to my path to reflect that 'foo' logged-in;
or perhaps I didn't understand.

I do hope I'm being helpful; I know it sounds argumentative, but
really, I'm trying to contribute.

Best,

Clark

From ldanielburr at mac.com  Fri Nov 18 16:54:19 2005
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Fri Nov 18 16:54:24 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051118214702.GA81176@prometheusresearch.com>
References: <20051117212005.GD62588@prometheusresearch.com>
	<20051118194817.32735.1400407017.divmod.quotient.204@ohm>
	<20051118214702.GA81176@prometheusresearch.com>
Message-ID: <op.s0gnctbh3oj628@zetsuei>

On Fri, 18 Nov 2005 15:47:02 -0600, Clark C. Evans <cce@clarkevans.com>  
wrote:

> Glyph,
>
> Thank you for taking time to discuss this more.  I think I disagree that
> twisted core currently is, or should be an object publishing system.
> It's ok if Nevow is an object publishing system; but you should not
> restrict the applications of twisted.web2 to object publishing.
>
> By an "object publishing system", I mean a system where every object
> in the system is a Resource, and hence has a *unique* URL.  That is,
> if I have two distinct objects in the system, they have different
> URLs; and if I have two URLs that refer to actual resources in the
> system, they refer to different objects.
> look like (to phrase it with your definition)?

Just a comment from the peanut-gallery: As a person who is currently using  
web2, I want to weigh in heavily on the side of "restrict the applications  
of twisted.web2 to object publishing".  The way in which web2 publishes  
objects fits very nicely with the way Roy Fielding describes REST, at  
least insofar as my understanding of REST goes.

Every Resource *should* be identified by a URL, and that URL *should*  
refer to one logical Resource.  This is how the web works today; I for  
one, hope that it continues to do so.

That said, I'm completely in favor of coming up with sane mechanisms for  
Sessions and Auth.  Changing web2 such that the a singly-rooted tree of  
Resources is no longer the base metaphor should not be a requirement for  
implementing Sessions and Auth.

It seems to me that you'd be much happier with a WSGI solution, wherein  
you can just plug your request-processing, session-handling, foo-handling  
components into the stream at appropriate places.  Web2 supports WSGI  
already, so that might be a better route to take.  Then you can implement  
the model that best suits your application, while leaving web2's object  
publishing model intact for those of us that vastly prefer it.

L. Daniel Burr

From glyph at divmod.com  Fri Nov 18 17:54:58 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Fri Nov 18 17:55:01 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051118214702.GA81176@prometheusresearch.com>
Message-ID: <20051119005458.32735.779424183.divmod.quotient.271@ohm>

On Fri, 18 Nov 2005 16:47:02 -0500, "Clark C. Evans" <cce@clarkevans.com> wrote:

>Thank you for taking time to discuss this more.

Thanks.  I am trying to be more involved in Twisted's direction.  I've been auditing some code lately (not necessarily in web2 ;-)), and finding some good stuff and some unpleasant surprises.  The surprises stem from people trying to preserve my original design constraints without really understanding what they were for or what's going on, so I'm trying to be a bit more forceful and direct, rather than hanging back and not saying anything when I don't have time to code it myself.

>I think I disagree that
>twisted core currently is, or should be an object publishing system.

I'm sorry that you disagree, Clark, but that's the design :).  We thought for a while about taking the resource model out of twisted.web2 (we even had some real-life, face-to-face meetings about it!  with someone taking minutes and everything!), but if you take it out, there isn't any way to integrate with cred, and thereby the rest of Twisted.

Object publishing will remain the design.  You seem to have some misconceptions about what that means, though...

>By an "object publishing system", I mean a system where every object
>in the system is a Resource, and hence has a *unique* URL.  

Lucky for you, that's not what *I* mean when I say "object publishing system".  URLs are insufficiently descriptive anyway; things like the current time, cookies, and even random numbers can influence what object is present at a particular URL.  As you observe, sometimes it's dynamically calculated.

>For starters, some objects in the system (such as a Session) by
>default do not have a URL, and thus by definition, is not a
>Published Object (aka a Resource).  But the current implementation
>of web2 goes even further; it is possible for two distinct "Resource"
>objects to have been accessed by the same URL (see web2.static.File,
>which dynamically creates a Resource object for children).

As I've mentioned in a few previous posts, under guard, the SessionManager returns a Resource which corresponds to the current session.  Generally the path portion of that URL will simply be "/" for whatever server you're on.

>Then, an IResource is defined as a _kind_ of request handler that eats
>exactly one path segment

Only being able to eat exactly one path segment is a design error; there is no reason for any interface to support only one segment at a time, c.f. http://divmod.org/trac/wiki/PotatoProgramming

>from the request; and it breaks handleRequest
>into two cases:  (a) one that returns another IResource aka locateChild(),
>or (b) one that returns a Response, aka render(). However, a IResource
>is a very special kind of IRequestHandler -- one that respects the
>uniqueness constraints of an object publshing system.

Your "IRequestHandler" abstraction breaks all kinds of useful patterns for cooperation between different chunks of web code, as far as I can tell.  In any case, concretely speaking, IRequestHandler sounds exactly like IResource minus the ability to distinguish between different handlers for different paths.  (And yes, the HTTP specs deal explicitly with path segments, the URI specs deal with them, and browsers implement HTML specifically to deal with them.  They're not some imagined thing on the part of twisted web.)

>In this logic, an IAuthenticator is _not_ a resource, but rather a
>IRequestHandler that does a bunch of checks; but otherwise largly
>passes-through the request onto the next processing stage.

The equivalent IAuthenticator in the IResource model simply consumes no segments and defers to another resource.  All you're talking about is removing the ability to consume segments from the base API, making top level resources radically different from and incompatible with IResource objects which implement the bulk of existing, useful functionality in t.web and nevow.

>In logical terms, the ISessionManager should associate each IRequest
>with an ISession; you can then adapt(request,ISession) to obtain the
>given session.  If the IRequest interface provides a short-cut for
>this is really an implementation detail; but one with clear value.

Out of curiosity, what methods do you think ISession provides?

As far as the functionality concerned: SessionManager as a Resource would simply consume zero segments from locateChild, as I said above.

>In summary, I think you're confusing arbitrary objects in the system
>with Resources; and I think the web2 module is already overly-complicated
>since it is addressing a higher level of abstraction than what is
>absolutely required.   In my application, I do not have Resources
>via the definition of an object publishing system -- nor do I want
>to be burdened with this distinction.  I have my own URL processing
>and I don't find the web2 concept of "segments" helpful.

At this point we may have to agree to disagree.  I don't find your URL processing helpful, either, and I feel that the Resource API has proven itself over the course of half a decade of my own, and many others', web work by now.  Being able to consume multiple segments at once is an important feature, but it's been around in Nevow for quite some time now.

You can definitely implement your traversal scheme with the mechanisms provided in twisted.web2 at multiple levels, either on top of the base HTTP implementation or as a Resource, and if it works for you, please, be my guest.  However, the point of twisted.* is not to address the absolute minimum required basis for your application.  Its purpose is to provide an integration framework, in the spirit of the various specifications that it implements.  Your innovations might be neat, but, for example, /x=y/ setting variables is definitely outside the spirit of what the HTTP spec says.

In the context of nevow/web/web2, Resources seem to work to do this for quite a few people.

>Following are specific comments related to the above...
(snip)
>Each IRequest object has a member variable, 'peer', which is a mapping
>from interfaces, such as IFoo onto the object that implements that
>interface.  So, request.peer[ISession] will give me the session
>associated with that request.  The appropriate __conform__ logic can
>also be implemented so that adapt(peer,ISession) works.

That's the way that Nevow's session handling works and I think it's worked out pretty poorly.  It leads to the same kind of confusion as the context.  I would prefer to avoid repeating that mistake.

>| I've gone through that message now and more thoroughly understood what is
>| going on.  Those stages are interesting, but I don't think that any of
>| them belong in twisted.web2.  Twisted's model of web interoperability is,
>| and has always been, object publishing.  We aren't going to change that
>| to a stage-based or filter-based scheme.
>
>Assume for a moment that IRequestHandler is the basis for web2,
>and that IResource layers on "object publishing" semantics.  Further
>assume that the 'peer' attribute on each request maps interfaces
>onto objects associated with that interface.

Now I'm assuming that I've somehow allowed two massive changes into Twisted for a benefit that I can't understand at all...

>there is no reason why
>I should be forced to layer my IStage on top of an IResource; my
>stages are not resources.

In fact there are lots of good reasons.  The main one is that by layering IStage on top of IResource, you can defer back to other IResources easily, and it is clear to the resources what portion of the path they should be handling.  Another is that someone else might want to have your Stage only apply to resources below a particular tree, let's say /cceapp/.

>Are all objects resources?  If not, what must an object have to be
>a resource.  If the answer is "implements IResource", then I ask
>you, is a Session a resource?  If so, what does it's locateChild
>look like?

nevow/guard.py lines 289 to 326. ;-)

Actually, that's slightly wrong.  The 'session' is a user-provided resource, whose locateChild does whatever they want.  The locateChild I'm referring to there does session management.

>| Depending on session management policy
>| the anonymous resource may or may not be shared between anonymous
>| sessions.  It may *wrap* a resource which is common to all users, but the
>| cred way of looking at an object is that each user has a distinct object
>| they communicate with, which determines their view of the world.
>
>Ok.  That's good, an Avatar; but is an Avatar an IResource?

"avatar" is a general term which means "implementation of protocol-specific interface which represents a session with a user, or the special anonymous 'user'".  In web-land it is generally an IResource, but as I said I am open to other suggestions, provided they come along with some *significant* benefit.

>| (snip Resources should be self-contained)

>Here is where we part ways.  This view of the the processing model
>is an unnecessary restriction and should not be pladed upon web2.

Please name one way that using the convention of 'stages' being simply Resources which consume zero segments is 'restrictive'.

>| >   (a) An Avatar is a "auto-generated" resource perhaps constructed
>| >       from the SessionManager resource?
>|
>| That's the way guard works and should continue to work, yes.
>
>An avatar is not a resrouce; if it is, what is it's URL?  What does it
>look like (to phrase it with your definition)?

Its URL is "/"+(implicit modifications by cookies and server's interpretation of cookies)

>Assuming a 'peers' collection; you only need to access the peers
>that your RequestHandler (or IResource) knows or cares about.

I've worked with a couple of systems that worked that way, and that's generally not what happens.  People notice that 'peers' (as you're calling them) are handily available in some context they're working in, and start using them.  Then they can't figure out how to write test cases for their own code becuase they don't know how that contextual information got set up.  Also, their model objects are totally broken without lots of implicit context from the web-rendering code path.  See also Zope's now-abandoned implicit acquisition for why this is bad.

>| getSession is designed to bridge requests automatically from within the
>| HTTP server's framework code, by setting cookies and such.  Session
>| management is a task that should be accomplished by a resource object
>| which can be independently tested, not by the server code.
>
>No disagreement here.

Great!  I was waiting for one of those :).

>| The proposed interface is something that would probably be *used* by a
>| session-manager resource, and might even represent the session, but its
>| purpose is simply to provide some per-request data that can be shared
>| between resources processing the same request, without resorting to
>| random attributes on the request, and with some way to link to the
>| resource that provided that data.
>
>It is not necessary to link data associated with a request with
>the 'Resource' that provided the data.

I disagree.  The only reason to avoid providing this kind of information is if performance requirements dictate that it is too expensive.

>| I suppose this doesn't make much difference.  I want it to be the
>| resource because the accompanying URL should point to it, but I suppose
>| that might be unnecessarily restrictive; at least the URL will point at
>| the thing that set it.
>
>Well, if you want to _expose_ a URL to the user for them to view
>their session; then, it is indeed a Resource.  However, not all
>sessions need to be Resources, no?

I don't understand what you mean by "session".  Broadly, your session is simply everything you could possibly access with the credentials and client-side state you have currently provided.  Perhaps you are talking about some smaller in-memory object which is an implementation detail of the session manager hooking your "session" in the broad sense to your web browser; in the guard sense these implementation details are hidden entirely from the user or the application programmer, and the visible session-object abstraction is the resource that the user is viewing.  Session-specific data can be attributes of 'self' on that resource, because presumably it affects the view, and then that same resource can access those attributes of 'self' and pass them to its children or render them in renderHTTP.

[snip more stuff about 'peer', I think I already addressed that enough times]

>Does this top-most "resource" have a URL?  If not, then it
>isn't a resource.  *poke*

Yes, the top-most resource is /.

>| error-reporting behavior with Nevow
>
>Ouch.  Is this good?

Noooo... it is exactly the thing I am trying to get away from.

(other case)

>Wow.  Is this good?

Better than the Nevow case, at least.  I'm not a big fan of per-request state, I think this should be handled sparingly.

>No way am I adding a /foo/ to my path to reflect that 'foo' logged-in;
>or perhaps I didn't understand.

Nope, /foo/ is just some random application component that lives at that URL, which has child resources that depend on some implicit state it provides.


From michaelschneider at fuse.net  Fri Nov 18 20:26:25 2005
From: michaelschneider at fuse.net (Michael Schneider)
Date: Fri Nov 18 20:24:47 2005
Subject: [Twisted-web] Problems Running Nevow standalone (no twisted)
Message-ID: <437E9B61.6070003@fuse.net>

I was trying the config with no twisted.

I updated from SVN, then tried this test, and it failed .

Any suggestions?

Thanks
Mike
--------------------------- test

from nevow import flat, stan

html = stan.Tag('html')
print html

p = stan.Tag('p')
print p

someStan = html[ p(style='font-family: Verdana;')[ 'Hello, ', 'world!' ] ]
print flat.flatten(someStan)

--------  Error ---------------------------------

Traceback (most recent call last):
  File "C:\devTesting\learning\stan\learn1\basicHtml1.py", line 1, in ?
    from nevow import flat, stan
  File "C:\Python24\Lib\site-packages\nevow\__init__.py", line 12, in ?
    from nevow import compy
  File "C:\Python24\Lib\site-packages\nevow\compy.py", line 17, in ?
    from compyCompat import *
AttributeError: 'module' object has no attribute 'IComponentized'


-- 
The greatest performance improvement occurs on the transition of from the non-working state to the working state.


From exarkun at divmod.com  Sat Nov 19 01:46:16 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Nov 19 01:46:18 2005
Subject: [Twisted-web] Problems Running Nevow standalone (no twisted)
In-Reply-To: <437E9B61.6070003@fuse.net>
Message-ID: <20051119084616.32735.1993586511.divmod.quotient.372@ohm>

On Fri, 18 Nov 2005 22:26:25 -0500, Michael Schneider <michaelschneider@fuse.net> wrote:
>I was trying the config with no twisted.
>
>I updated from SVN, then tried this test, and it failed .
>
>Any suggestions?

Install Twisted.  Running without Twisted isn't really supported behavior anymore.

Jean-Paul

From dsalvatore at freesurf.fr  Sat Nov 19 04:28:57 2005
From: dsalvatore at freesurf.fr (dsalvatore@freesurf.fr)
Date: Sat Nov 19 04:29:02 2005
Subject: [Twisted-web] CSS - locateChild
Message-ID: <33216.81.249.149.188.1132399737.squirrel@jose.freesurf.fr>

Hello,

In the following example, without the 'locateChild'
the css style sheet is rendered, but not when I try
to uses locateChild.

Betwise, is this a good way to refresh a page using 'return self,()' ?

Thank you for your help

Salvatore

from twisted.application import service, internet
from nevow import loaders,rend,appserver,static

class Page(rend.Page):

    child_css = static.File('css')
    docFactory = loaders.xmlfile('xmlsite.xml')

    def render_left(self,context,data):
        return data

    def data_menu(self,context,data):
        return data

    def locateChild(self,context,data):
        return self,()

site = appserver.NevowSite(Page("TEST"))
application = service.Application('example')
internet.TCPServer(8080, site).setServiceParent(application)




From dialtone at divmod.com  Sat Nov 19 06:10:31 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Sat Nov 19 06:10:46 2005
Subject: [Twisted-web] CSS - locateChild
In-Reply-To: <33216.81.249.149.188.1132399737.squirrel@jose.freesurf.fr>
References: <33216.81.249.149.188.1132399737.squirrel@jose.freesurf.fr>
Message-ID: <20051119131031.GA408@divmod.com>

On Sat, Nov 19, 2005 at 12:28:57PM +0100, dsalvatore@freesurf.fr wrote:
> Hello,
> 
> In the following example, without the 'locateChild'
> the css style sheet is rendered, but not when I try
> to uses locateChild.
> 
> Betwise, is this a good way to refresh a page using 'return self,()' ?
> 
> Thank you for your help
> 
> Salvatore
> 
> from twisted.application import service, internet
> from nevow import loaders,rend,appserver,static
> 
> class Page(rend.Page):
> 
>     child_css = static.File('css')
>     docFactory = loaders.xmlfile('xmlsite.xml')
> 
>     def render_left(self,context,data):
>         return data
> 
>     def data_menu(self,context,data):
>         return data
> 
>     def locateChild(self,context,data):
>         return self,()

Do you realize that this locateChild never relies on the default locateChild
behaviour? Which means that it ALWAYS returns self and no more segments to
process wherever you put this with whatever url you passed to it.

This page will render only itself even for its children, you have to check
what the 'data' (that should actually be segments) argument of locateChild is.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051119/156e731a/attachment.pgp
From p.mayers at imperial.ac.uk  Sat Nov 19 16:00:31 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat Nov 19 16:00:42 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <1132336272.24425.13.camel@audrey.local>
References: <20051118024752.10365.2007756776.divmod.quotient.8979@ohm>
	<1132336272.24425.13.camel@audrey.local>
Message-ID: <437FAE8F.5080409@imperial.ac.uk>

David Reid wrote:
> 
> But in Basic and Digest auth you don't have the username until you get
> the response to your challenge.  So this is where IAuthorizer comes in
> it handles all the steps prior to having something that you can use to
> build a credentials.  

I'm no cred expert, and I dislike it conceptually, but as far as I can 
tell it's got all the facilities it needs. HTTP is slightly more complex 
so I'll start with a SASL-ised imap-like example, to see if I've got the 
right idea:

class simpleproto(basic.LineReceiver):
   def lineReceived(self, line):
     if self.creds:
       # forward to CR module that's in progress
       self.creds.lineReceived(line)
     else:
       cmd, rest = line.split(' ', 1)
       fn = getattr(self, 'do_'+cmd, None)
       if not fn:
         self.transport.write('NO unknown command %s\n' % (cmd,))
         self.transport.loseConnection()

   def do_AUTHENTICATE(self, mechanism):
     if mechanism=='GSSAPI':
       self.creds = ChallengeResponse(self)
       return self.portal.login(self.creds).addCallbacks(self.authok, 
self.authfail)

   def authok(self, avatar):
     self.avatar = avatar
     self.lineReceived = avatar.lineReceived

   def authfail(self, why):
     self.transport.write(why.getErrorMessage()+'\n')
     self.transport.loseConnection()

class ChallengeResponse:
   def __init__(self, conn):
     self.conn = conn
     self.started = False
     self.context = hypotheticalGssapiModule.init()

   def lineReceived(self, line):
     done, response = self.context.input(line.decode('base64'))
     self.conn.transport.write(response.encode('base64')+'\n')
     if done:
       if self.context.success():
         self.finish.callback(self.context.getPrincipal())
       else:
         self.finish.errback(self.context.errMsg())

class GssapiChecker:
   implements(checkers.ICredentialsChecker)
   def requestAvatarId(self, creds):
     creds.finish = defer.Deferred()
     return creds.finish

The neat thing about cred is that the code above (if it worked at all, 
which it would with only slight fiddling) doesn't require the portal or 
realm to change. Similarly, only a bit of fiddling permits multi-method 
auth e.g. for IMAP brokenness:

def do_LOGIN(self, data):
   user, pass = data.split(' ', 1)
   creds = credentials.UsernamePassword(user, pass)
   return self.portal.login(creds).addCallbacks(...)

...and add an appropriate checker to the portal.

HTTP is a bit of a pain because of the "connectionless" basis. The RFCs 
for the hacky mechanisms like "Negotiate" (the MS-ism for kerberos over 
HTTP) and such show that. Digest would want some kind of stateless 
version - you're effectively authenticating requests as opposed to the 
connection, but the basic principle is the same. I'm sure you know all this.

So am I missing something? It looks like cred needs no extending?

From cce at clarkevans.com  Sat Nov 19 18:01:47 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat Nov 19 18:02:23 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <op.s0gnctbh3oj628@zetsuei>
References: <20051117212005.GD62588@prometheusresearch.com>
	<20051118194817.32735.1400407017.divmod.quotient.204@ohm>
	<20051118214702.GA81176@prometheusresearch.com>
	<op.s0gnctbh3oj628@zetsuei>
Message-ID: <20051120010147.GA97106@prometheusresearch.com>

On Fri, Nov 18, 2005 at 05:54:19PM -0600, L. Daniel Burr wrote:
| Just a comment from the peanut-gallery: As a person who is currently 
| using  web2, I want to weigh in heavily on the side of "restrict the 
| applications  of twisted.web2 to object publishing".  The way in which 
| web2 publishes  objects fits very nicely with the way Roy Fielding 
| describes REST, at  least insofar as my understanding of REST goes.

In Roy Felding's REST model, a Resource is a function mapping t (time)
into a representation for that resource, where a representation is a set
of entities (byte streams) which are logically equivalent. According to
Felding, a Resource must have a semantic definition "that distinguishes
one [resource] from another". In the practical implementation of his
model, URIs become resource identifiers, a unique name for a given
resource, and the content returned are the entities which, for all
of those requesting the resource, must be logically equivalent at a
particular period in time t.  

The fun part of Felding's model is that a Resource (at a point in time)
is a _set_ of equivalent entities, where by the actual entity returned
for a give request is determined by "Content Negotiation".  Hence,
different media types (say an XML or JSON or PNG) of a given set of
information may be returned depending upon the negotiation between the
client and the server.  However, the semantic meaning of the actual
entity returned must be equal for _all_ possible content negotiations.
A Resource refers to a 'concept', rather than a particular representation
of that concept at a particular point in time; but it also implies a 
certain amount of consistency between its representations.

The particular notion of REST is that all interactions are stateless:
"each request contains all of the information necessary for a connector
to understand the request independent of any requests that may have
preceded it".  In other words, no server side state or cookies should
be used.  While this is great for routine operations; it falls short
when doing 'authentication', which, according to the specifications
themselves requires server-side state (the challenge must be
remembered).  Felding criticizes Cookies in his paper but does not seem
to propose an alternative solution to address user authentication
concerns.  For most purposes, this stateless property is a fantastic
goal to strive for; however, it is not and should not be a rule.

While "object publishing" may support REST semantics, it is not
the only possible way to be REST; and there is no reason why Twisted
should require this model if it isn't absolutely necessary.

| Every Resource *should* be identified by a URL, and that URL *should*  
| refer to one logical Resource.  This is how the web works today; I for  
| one, hope that it continues to do so.

It should be noted that Felding and most others do not require that the
relation from URIs onto Resources be injective -- that is, two different
URIs may (and often do) refer to the same Resource. The object
publishing methodology seems to imply (or assume?) an injective relation
between URIs and Resources.  This is not a necessary assumption.

I certainly do not suggest that the same URI should refer to two
different resources; however, it is certainly valid for two _different_
URIs to refer to the same resource, and Twisted's web2 should support
this methodology -- or at least be neutral towards it.

| That said, I'm completely in favor of coming up with sane mechanisms for  
| Sessions and Auth.  Changing web2 such that the a singly-rooted tree of  
| Resources is no longer the base metaphor should not be a requirement for  
| implementing Sessions and Auth.

Part of the problem with Sessions (or Authentication in general) is that
it requires server-side state.  With the _sole_ exception of the user's
identity, my application is completely stateless.  However, I've yet to
see a "stateless authentication" mechanism.  If you have one, great!

| It seems to me that you'd be much happier with a WSGI solution, wherein  
| you can just plug your request-processing, session-handling, foo-handling 
| components into the stream at appropriate places.  Web2 supports WSGI  
| already, so that might be a better route to take.

I didn't notice; but it looks like a good option.  Thanks for pointing
it out to me.

| Then you can implement 
| the model that best suits your application, while leaving web2's object  
| publishing model intact for those of us that vastly prefer it.

I have no problem with web2's object publishing mechanism; my problem is
that such a system could easily be layered on-top of a simpler
interface -- but it isn't.

Kind Regards,

Clark

From exarkun at divmod.com  Sat Nov 19 18:41:58 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Nov 19 18:42:01 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <437FAE8F.5080409@imperial.ac.uk>
Message-ID: <20051120014158.32735.1816659222.divmod.quotient.593@ohm>

On Sat, 19 Nov 2005 23:00:31 +0000, Phil Mayers <p.mayers@imperial.ac.uk> wrote:
>David Reid wrote:
>>
>>But in Basic and Digest auth you don't have the username until you get
>>the response to your challenge.  So this is where IAuthorizer comes in
>>it handles all the steps prior to having something that you can use to
>>build a credentials.
>
>I'm no cred expert, and I dislike it conceptually, but as far as I can tell 
>it's got all the facilities it needs. HTTP is slightly more complex so I'll 
>start with a SASL-ised imap-like example, to see if I've got the right idea:
>
> [snip - cool example protocol with cred integration]
>
>HTTP is a bit of a pain because of the "connectionless" basis. The RFCs for 
>the hacky mechanisms like "Negotiate" (the MS-ism for kerberos over HTTP) 
>and such show that. Digest would want some kind of stateless version - 
>you're effectively authenticating requests as opposed to the connection, but 
>the basic principle is the same. I'm sure you know all this.
>
>So am I missing something? It looks like cred needs no extending?

Nope.  You're dead on.  Cred can do everything necessary to handle Digest auth as-is.  Digest auth isn't even the most complex scheme it supports.

I wrote the attached quick example of authentication that involves repeated challenges and per-user private authentication-required state.  It is mainly the same as your example, with the addition of support for a kind of credential that requires cooperation from both the authentication database and the protocol.

Jean-Paul
-------------- next part --------------
A non-text attachment was scrubbed...
Name: supercred.py
Type: text/x-python
Size: 6156 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051119/b7b0eaa0/supercred.py
From golux at comcast.net  Sat Nov 19 17:47:23 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Sat Nov 19 18:48:58 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051120010147.GA97106@prometheusresearch.com>
References: <20051117212005.GD62588@prometheusresearch.com>	<20051118194817.32735.1400407017.divmod.quotient.204@ohm>	<20051118214702.GA81176@prometheusresearch.com>	<op.s0gnctbh3oj628@zetsuei>
	<20051120010147.GA97106@prometheusresearch.com>
Message-ID: <437FC79B.4060104@comcast.net>

Clark C. Evans wrote:
> On Fri, Nov 18, 2005 at 05:54:19PM -0600, L. Daniel Burr wrote:
> | Every Resource *should* be identified by a URL, and that URL *should*  
> | refer to one logical Resource.  This is how the web works today; I for  
> | one, hope that it continues to do so.
> 
> It should be noted that Felding and most others do not require that the
> relation from URIs onto Resources be injective -- that is, two different
> URIs may (and often do) refer to the same Resource. The object
> publishing methodology seems to imply (or assume?) an injective relation
> between URIs and Resources.  This is not a necessary assumption.

Actually, what Clark says here does not contradict what L. Daniel said.
L. Daniel said "Every Resource should be identified by a URL" -- he
did not say "one and only one URL"; therefore, his words did not say
injectivity was a requirement.  Hence, it is needless for Clark to say
that no one requires it.  There was no such claim.

Just a point of logic.

Steve

From cce at clarkevans.com  Sat Nov 19 20:01:57 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat Nov 19 20:02:33 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <437FC79B.4060104@comcast.net>
References: <20051117212005.GD62588@prometheusresearch.com>
	<20051118194817.32735.1400407017.divmod.quotient.204@ohm>
	<20051118214702.GA81176@prometheusresearch.com>
	<op.s0gnctbh3oj628@zetsuei>
	<20051120010147.GA97106@prometheusresearch.com>
	<437FC79B.4060104@comcast.net>
Message-ID: <20051120030157.GA97747@prometheusresearch.com>

On Sat, Nov 19, 2005 at 07:47:23PM -0500, Stephen Waterbury wrote:
| >On Fri, Nov 18, 2005 at 05:54:19PM -0600, L. Daniel Burr wrote:
| >| Every Resource *should* be identified by a URL, and that URL *should*  
| >| refer to one logical Resource.  This is how the web works today; I for 
| >| one, hope that it continues to do so.
| >
| >It should be noted that Felding and most others do not require that the
| >relation from URIs onto Resources be injective -- that is, two different
| >URIs may (and often do) refer to the same Resource. The object
| >publishing methodology seems to imply (or assume?) an injective relation
| >between URIs and Resources.  This is not a necessary assumption.
| 
| Actually, what Clark says here does not contradict what L. Daniel said.

I certainly was not contradicting L. Daniel Burr, in fact, I agree with
his position right up-to where he seems to assert that object publication 
systems support REST, while a request handling mechanism doesn't.  

| L. Daniel said "Every Resource should be identified by a URL" -- he
| did not say "one and only one URL"; therefore, his words did not say
| injectivity was a requirement. 

L. Daniel Burr did not say "one or more URLs" either.  He was vague in
his declaration; and I was hoping to respectfully clarify the definition
of Resource without causing a ruckus.

| Hence, it is needless for Clark to say that no one requires it.  There
| was no such claim.

Actually, there is a need to make this clarification.  Most object
publication systems assume that each Resource object has a single parent
(that is, that Resources form a tree).   This is a very tempting
assumption to make, but there is nothing in the web architecture which
requires that a Resource have exactly one URI. 

Not that I think this restriction is unreasonable in many contexts. I
don't mind if a slightly-higher-level object publishing system is built
on-top of low-level primitives. However, I don't think that a system
like Twisted should be making this assumption at its most basic level.
The trunk does not yet make this assumption: I'd like to keep it that way.

Kind Regards,

Clark

From golux at comcast.net  Sat Nov 19 19:39:12 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Sat Nov 19 20:40:46 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051120030157.GA97747@prometheusresearch.com>
References: <20051117212005.GD62588@prometheusresearch.com>	<20051118194817.32735.1400407017.divmod.quotient.204@ohm>	<20051118214702.GA81176@prometheusresearch.com>	<op.s0gnctbh3oj628@zetsuei>	<20051120010147.GA97106@prometheusresearch.com>	<437FC79B.4060104@comcast.net>
	<20051120030157.GA97747@prometheusresearch.com>
Message-ID: <437FE1D0.3050308@comcast.net>

Clark C. Evans wrote:
> Actually, there is a need to make this clarification.  Most object
> publication systems assume that each Resource object has a single parent
> (that is, that Resources form a tree).   This is a very tempting
> assumption to make, but there is nothing in the web architecture which
> requires that a Resource have exactly one URI. 

Actually, for Resources to form a tree does not necessarily require
that they have exactly one URL either.

Steve

From cce at clarkevans.com  Sat Nov 19 22:47:08 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat Nov 19 22:47:42 2005
Subject: [Twisted-web] HTTP-AUTH for web2 / Kudos on web2's operation
In-Reply-To: <20051119005458.32735.779424183.divmod.quotient.271@ohm>
References: <20051118214702.GA81176@prometheusresearch.com>
	<20051119005458.32735.779424183.divmod.quotient.271@ohm>
Message-ID: <20051120054708.GE98462@prometheusresearch.com>

(another long one, sorry; but I spent some time making it... shorter)

On Fri, Nov 18, 2005 at 07:54:58PM -0500, glyph@divmod.com wrote:
| Object publishing will remain the design.  You seem to have some 
| misconceptions about what that means, though...

Thanks, this is very helpful. I think the heart of this thread, as
observantly pointed out by L. Daniel Burr, is the definition of a
"resource", and hence what is expected of objects that implement
implement IResource? 

1.  If a resource exists, must it have a URI?

    No; a resource can exist without having a URI.  For example,
    "today's weather in Xocen, Mexico" is a resource, yet, I did 
    not find a weather page with this information. However, does 
    it make sense for an object to implement IResource if it does 
    not have a URI?

2.  May two different resources have the same URI?

    No; this is the point of being an identifier.  Certainly in real
    life, one's identifier, such as your name, may only be unique within
    a particular context.  However, this isn't real life.

3.  May a resource have more than one URI?

    Yes; a resource may have more than one identifier.  It is common
    for concepts, people, places and things to have more than one name.
    In databases, you might have a primary and a secondary key; and if
    you are to represent a drill-down via these two identifiers you
    will make two different URLs.  For example:

        /office-by-location/us/ct/bridgeport/
        /office-by-telephone/1.203.343.3333/

    I'm not saying these are great examples, but both of these URIs
    could in fact refer to the same office IResource.

4.  May a URI refer to two different resources over the course of time?

    No; the rationale for URIs is that they are stable resource
    identifiers and that the concept of the resource should not
    change.  However, the entity which the resource returns
    for a given "content negotiation" may vary over time in a 
    manner consistent with the definition of the resource.
    
I don't know if this helps you; but it helps me organize my thoughts
about what I expect and don't expect from an object implementing
IResource.  Let me continue now by responding to particular points
in your email...

| URLs are insufficiently descriptive anyway; things like the 
| current time, cookies, and even random numbers can influence 
| what object is present at a particular URL.

Given the definition above, this would seem to violate the 'immutable'
property of a resource.  If I have the same URI, ideally, the system
would send the request to the same IResource object.  What representation 
(aka entity) that IResource object returns (if it returns one at all)
after content negotiation may of course vary substantially.

| As I've mentioned in a few previous posts, under guard, the 
| SessionManager returns a Resource which corresponds to the current 
| session.  Generally the path portion of that URL will simply be "/" for 
| whatever server you're on.

 ...

| The equivalent IAuthenticator in the IResource model simply consumes no 
| segments and defers to another resource. 

(hopefully useful nit-picking, otherwise just ignore)

Then this Session Resource will know about how to delegate to the 
next stage of the request?  Does the Session have a URL, or is it
the same URL as the SessionManager Resource?   How about the
Authenticator?  Do the Session and Authenticator have the same URL?

I think neither SessionManager nor the Authenticator are resources; they
are lower-level RequestHandlers that are triggered before resource
resolution even occurs. Session is probably a Resource, where the
current Request object some-how refers to it. But it is not at the "top
of the resource tree". Its URL should be accessible, something like:
/sessions/3DBDK3DFE/ which publishes information about who the user is,
when they logged on, and details their activity.

| All you're talking about is removing the ability to consume segments 
| from the base API, making top level resources radically different from
| and incompatible with IResource objects which implement the bulk of
| existing, useful functionality in t.web and nevow.

 ...

| Its purpose is to provide an integration framework, in the spirit of 
| the various specifications that it implements.

My primary issue is that the IResource is over-used.  You have things
that are being shoe-horned into the resource model that aren't really
resources.   I think there is a lower-level abstraction that is missing.

| Out of curiosity, what methods do you think ISession provides?

For starters, user sessions completely break the REST model; and
are not friendly to debugging.  They should be used with extreme
caution.  That said, they are mandatory components of any commercial
system and therefore should have direct support -- warts and all.

I would use an ISession in my application only so that I can "authorize"
access to particular resources via the user's identity, and to track
what a particular user did on a particular time (I have to meet HIPPA
regulations for the system I've written).  So, the only thing I need
from the session is: 
  
  - the user to which the session was associated with
  - some identifier that is at least unique for each user
  - when the session was created
  - when the session timed out

I do not require anything else; my application is otherwise stateless
except for this reporting requirement.  That said, I will need some sort
of 'job-management' system for long-running tasks; but these will be
resources in and of themselves.

I would like it if sessions were actual Resources; but I do not require
that the URI for a request using the session contain the URI of the
session as a sub-string (as you seem to imply it should be).  A session
object needs to be accessible via a URI so that an administrator can
audit the activity of a questionable employee, etc.  

| At this point we may have to agree to disagree.  I don't find your URL 
| processing helpful, either, and I feel that the Resource API has proven 
| itself over the course of half a decade of my own, and many others', web 
| work by now.  Being able to consume multiple segments at once is an 
| important feature, but it's been around in Nevow for quite some time now.

I'll say it once more; I think your Resource method is delightful.
However, I think there is a very tiny lower layer you're missing.
Therefore, things that should be in that lower layer (filters,
authenticators, and session management) are instead being fudged as
exceptions or passed off as funky no-path-segment-consuming resources
that really cannot be accessed via their own URI.   *wink*

| >Each IRequest object has a member variable, 'peer', which is a mapping
| >from interfaces, such as IFoo onto the object that implements that
| >interface.  So, request.peer[ISession] will give me the session
| >associated with that request.  The appropriate __conform__ logic can
| >also be implemented so that adapt(peer,ISession) works.
| 
| That's the way that Nevow's session handling works and I think it's 
| worked out pretty poorly.  It leads to the same kind of confusion as the 
| context.  I would prefer to avoid repeating that mistake.

Ok.  Do we have a concrete suggestion for an alternative (that doesn't
have logically-equivalent problems)?  I've not seen one yet.  This
particular proposal is obvious and straight-forward (and clearly,
already implemented in Nevow).   You seem to be thinking that the "top
resource" could act as a place to put this stuff; but I'm not remotely
convinced that this isn't just an equivalent solution (different only by
the name of the ISession object).

What is the alternative, and why is it better?

| In fact there are lots of good reasons.  The main one is that by layering 
| IStage on top of IResource, you can defer back to other IResources 
| easily, and it is clear to the resources what portion of the path they 
| should be handling.  Another is that someone else might want to have your 
| Stage only apply to resources below a particular tree, let's say /cceapp/.

This is a very good point; I need to think on the 'mixing' concept
a bit more.  A consistent interface for all things (even if they
aren't really resources) is probably a good thing.  

| Your "IRequestHandler" abstraction breaks all kinds of useful patterns 
| for cooperation between different chunks of web code, as far as I can 
| tell.  In any case, concretely speaking, IRequestHandler sounds exactly 
| like IResource minus the ability to distinguish between different 
| handlers for different paths. 

I'm not saying that an IResource isn't a useful concept, nor that you'd
want to get rid of IResource.  What I'm saying is that if you _don't_
consume a path segment, you most likely do not have a resource.  Instead
you have an IRequestHandler.   That you try to model RequestHandler's as
a Resource will lead to logical inconsistencies: you will assume that it
has a URI that names it, when in fact, it doesn't.

Furthermore, if you distinguish between an IResource and a lower-level
IRequestHandler; you can extend the IResource with more goodies
such as a method to return the "Canonical URL" for that resource.
This would be a very valuable boon -- but it isn't possible for
your general IRequestHandler.


| >Assuming a 'peers' collection; you only need to access the peers
| >that your IRequestHandler (or IResource) knows or cares about.
| 
| I've worked with a couple of systems that worked that way, and that's 
| generally not what happens.  People notice that 'peers' (as you're 
| calling them) are handily available in some context they're working in, 
| and start using them.  Then they can't figure out how to write test cases 
| for their own code because they don't know how that contextual 
| information got set up.  Also, their model objects are totally broken 
| without lots of implicit context from the web-rendering code path.  See 
| also Zope's now-abandoned implicit acquisition for why this is bad.

This is a *perfect* argument for why you need a Request-Handling stage
that happens before Resource processing.  If someone is adding those
'peers', they should happen via RequestHandlers -- not Resources.

This would also allow you to 'cache' resources via URI; since the
request handlers would have already been run.   Please consider for
a moment the distinction that I'm making... picture this handler chain:

 SessionManager -> Authentication -> Resource-Processor -> Content-Compressor
 
where Resource-Processor is a IRequestHandler that implements your
existing Resource resolution and passes the Response on to the
Content-Compressor as it heads back to the client.  

It's just a layer one lower than your Resources (where they fit
into a stage of the request processing).

| >| getSession is designed to bridge requests automatically from within the
| >| HTTP server's framework code, by setting cookies and such.  Session
| >| management is a task that should be accomplished by a resource object
| >| which can be independently tested, not by the server code.
| >
| >No disagreement here.
| 
| Great!  I was waiting for one of those :).

I don't think that we have much of a disagreement.  Your system is,
IMHO, stella; or I wouldn't be using it nor spending time trying to
make it even better.

Kind Regards,

Clark

From m.kucharz at wheel.pl  Sun Nov 20 04:23:05 2005
From: m.kucharz at wheel.pl (Maciej Kucharz)
Date: Sun Nov 20 04:23:20 2005
Subject: [Twisted-web] TEST - ignore it!
Message-ID: <1CB2CC9C-2151-4990-9C7D-969FF88675E0@wheel.pl>

Test.

-- 
qk

From m.kucharz at wheel.pl  Sun Nov 20 04:32:36 2005
From: m.kucharz at wheel.pl (Maciej Kucharz)
Date: Sun Nov 20 04:32:55 2005
Subject: [Twisted-web] Forms - question
Message-ID: <D98C8773-C94A-4445-B3A1-729678C5B5DD@wheel.pl>

Hello,

I have a question for users of "forms" (http://forms- 
project.pollenation.net).
I'm looking for a way to do something like this:

class UserAdd(forms.ResourceMixin, rend.Page):

     def __init__(self, user, step=1, *a, **k):
         apply(forms.ResourceMixin.__init__, (self, user) + a, k)
         self.user = user
         self.step = step

     def form_edit(self, ctx):
         [...]

         form.addAction(submit)
         return form

     def formSubmitted(self ,ctx, form, data):
        print form, data
        return UserAdd('myuser', self.step)

I want to render form, depend on "self.step"  (i want have a few form  
steps on my site).
In contruction like above on action submit i have neverending loop.

thanks, for any advice

PS. I simply want to have an effect like in "testformless.py" (from  
nevow examples):
"""
class NameWizard(rend.Page):
     docFactory = loaders.stan(tags.html[tags.h1["What is your  
name"], webform.renderForms()])

     def bind_name(self, ctx):
         return [('name', annotate.String())]

     def name(self, name):
         return QuestWizard(name)


class QuestWizard(rend.Page):
     docFactory = loaders.stan(tags.html[tags.h1["What is your  
quest"], webform.renderForms()])

     def bind_quest(self, ctx):
         return [('quest', annotate.Choice(['Find the Grail', 'Get  
laid', 'Earn twenty bucks', 'Destroy the sun']))]

     def quest(self, quest):
         return FinalWizard((self.original, quest))
"""

-- 
qk


From cce at clarkevans.com  Sun Nov 20 13:45:30 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun Nov 20 13:46:11 2005
Subject: [Twisted-web] State and web2 (or, how to not follow REST)
Message-ID: <20051120204530.GA8341@prometheusresearch.com>

This is an attempt to summarize a conversation I had /w glyph on
#twisted.web earlier today.  I've attached the IRC log.  The basic
problem discussed was how to manage server-side state; which in
particular includes sessions and authentication.  Stateful servers
cause serious problems with scalability and with bug hunting.

Glyph is adamant that getSession() as it currently works (by raising a
redirect exception if the session does not already exist) must be fixed.
I absolutely agree with this; as it currently stands the top-level
resource must always ask for a Session object to avoid unexpected
redirects down the request stream.  This shouldn't be a lesson of
experience; it should be built-in convention.

A related issue, one to which Glyph is very concerned about, is the
implicit coupling of resources during the handling of a given request.
In particular, where a resource X (located at /foo) sets a variable V in
the request R and then a resource Y (at /foo/bar) comes to depend upon
this variable V.  If this coupling is not made explicit and checked-for,
then an opportunity for rather obscure bugs emerge; one where the
resource Y is re-used in another context (say at /bing/bar) and still
assumes that V is set.   While Twisted framework cannot prevent such
nonsense, it should propose an alternative mechanism, or at the very
least not promote such dynamic resource dependencies.

One way to make resource dependencies explicit is to require that the
constructor for a child resource take an optional ancestor resource in
its constructor.  In this model, each user/session would in essence have
its own top-level resource, and all resources which dependended upon
session state would take in its constructor the parent resource.  This
approach has a few deficiencies: (a) there might be more than one
instance of a resource Y at /foo/bar, one for each user; this is not
only inefficient but makes debugging hard beause the relation of a URI
onto a resource object is not a relation; (b) while leaf resources, such
as a static.File object need not take a parent resource in its
constructor; it forces generic Resources to have a "pass-through" parent
Resource, even if it does not need state information.  In the IRC
conversation, I believe (and hope) this was proposed and then eventually
rejected; but I'm not sure.  I don't like the idea of any Resource
objects in the system being user or session specific.

Another alternative is to add a getSiteResource() and setSiteResource()
to the Request interface.  The SiteResource would then contain the top
level resource "/" which reflected the user's Session and any other
application specific server side state (ie, nasty persistent global-like
variables which breaks REST).  The SiteResource would therefore be an
appliation specific object; it could, for example contain an session-id
and a username property for down-stream Resource authorization.   Later
in the IRC chat, Glyph said he is "coming around to the fact that it's
not really a resource".  This is good; beacuse I don't think that this
server side state is a resource by the definition of web architecture.

I didn't mention it in the IRC chat, but I'm now thinking that these
methods on the request object could be setState() and getState(); and
that they return an arbitrary application-defined object which has all
of the nastly (but unfortunately mandatory and pratical) session and
request "global variables" that break REST and can cause all sorts of
problems.   Glyph mentioned earlier in an email that perhaps a
declarative syntax could be introduced so that arbitrary Resources could
advertise exactly what "state" they will access; and hence, these sorts
of errors could be detected and reported more intelligently.  I like
this idea; it is framework support to prompt developers to put in
the assertion checks that they should already be doing.  It codifies
a solid pratice, and this is a good thing.  ;)

I think that Glyph and I did have a clear agreement: all of the
information on the State (in Glyph's terms SiteResource) object should
be set (and perhaps made read-only?) _before_ any Resource delegation is
made.   We do have a slight (but very slight) semantic difference.  I
see the process of setting up a session and creating any server-side
state as done in a IRequestHandler _before_ any IResources are called.
Glyph sees this as being done "by a resource which sits at the the top
level".  In both models, this sort of stuff is done before your average
every-day resources are processed; my model is just more explicit and
allows for chaining IRequestHandlers (such as one for sessions, and
another one for authentiction) before IResources are processed.  

I think that's about it.  I just want a simple solution to this, 
and soon.

Best,

Clark

-------------- next part --------------
12:18 -!- glyph [n=glyph@c-24-61-138-211.hsd1.ma.comcast.net] has joined #twisted.web
12:22 < cce> glyph: here
12:23 < cce> sorry; I have horrible connection /w latency and frequent drops
12:23 < cce> but my irc client is server side /w screen; so I can reconnect
12:25 < cce> Anyway, my primary question is how you pictured a down-stream Resource to obtain the Session-ID (which is needed for my application logging)
12:26 < glyph> cce: There are a number of ways
12:26 < glyph> cce: The getSiteResource thing from the mailing list is one way
12:26 < cce> A secondary question is... how is this method actually different from a getSession() both in operation and in the ability to prevent program logic errors.
12:26 < cce> ok
12:26 < glyph> cce: but that's really the non-preferred way
12:26  * cce listens intently.
12:26 < glyph> cce: the way that apps generally *should* work is that, under all these resources, there is a model.  your topmost resource is pointing at that model
12:27 < glyph> cce: when that resource renders itself or hands off the request to its children, it first gathers appropriate data or sub-objects from the model to create the Response or the Resource child
12:27 < cce> ok
12:27 < glyph> cce: so let's say an attribute of your underlying model is LoggingContext(sessionID=xxx)
12:28 < cce> so, all of the information needed to process the request (besides what is in the request itself) is collected by this GenerateModel mechanism.
12:28 < glyph> Right
12:28 < cce> That's how my app works; wonderful. ;)
12:29 < cce> by the time any resouce processing starts; all "state dependent" information has been previously constructed
12:29 < glyph> the top of the session for a particular user is all determined by what object is returned by the IRealm implementor returns from requestAvatar
12:29 < cce> in this way _all_ resources are stateless (and no additional information is put on the request)
12:30 < glyph> cce: Put another way, all Resources are *views*, and the underlying model is something distinct that they wrap
12:30 < cce> ok; we're on the same page here 
12:30 < cce> so the session logger is part of the model
12:30 < cce> (which is application specifi)
12:30 < glyph> cce: The way that Mantissa et. al. do this is just by adapting the user's login database object to IResource; that adaptation already has a 'original' (model) object, which is the user's private database
12:31 < glyph> cce: that's about where I stop suggesting that everyone do it the same way though; if you want to use mantissa's authentication model you can just use mantissa, IRealm implementations don't belong in web2 :)
12:31 < cce> and this is better than a request.get/setPeer(...) since the resources arn't modifying the request (they are only interacting with the model)
12:31 < glyph> cce: yes absolutely
12:31 < cce> well, this is common sense (IMHO)
12:32 < cce> glyph: ok, question, is there a reason why the Model should be considered a Resrouce itself?
12:32 < glyph> cce: no, I'm not advocating that
12:32 < cce> ok, so from my low-level resource / request pair, how do I get the model?
12:32 < glyph> cce: attributes of self :)
12:32 < cce> request.getModel() ?
12:33 < glyph> noooo
12:33 < cce> its a property of Request, right?
12:33 < cce>   def render(self, request):
12:33 < glyph> cce: each Resource is initialized with whatever model objects it needs as arguments to __init__
12:33 < cce>     # from within a nested IResource
12:33 < cce> oh; but then my resources are _user_ specific
12:33 < glyph> cce: that's why the "top of the resource tree" is your "session"
12:33 < cce> oh, I don't like that
12:34 < cce> my resources should not be specific to a given user
12:34 < glyph> cce: why not?
12:34 < cce> a File Resource, in particular, should not care what user it was created from
12:34 < glyph> cce: ah yes
12:35 < glyph> cce: that's the particular use case where you need getSiteResource
12:35 < cce> I _do_ like the idea of officially recongizing and talking abuot a model construction stage
12:35 < glyph> cce: your-app-with-model-data -> File resource -> some-other-part-of-your-app-dynamically-created-from-a-file
12:35 < cce> are you assuming that Resrouces form a tree?
12:35 < glyph> getSiteResource is for passing your model data between two resources which are on opposite sites of a generic resource doing some kind of dispatching
12:36 < glyph> cce: calling it a "tree" or a "graph" is really getting caught up in semantics
12:36 < cce> well, there is a difference
12:36 < glyph> cce: there's a traversal path of calls to locateChild
12:36 < glyph> cce: it could be traversing a tree, or a graph, whatever you like; the framework won't ever enforce that
12:36 < cce> in a tre you can get resource.getParent() and return a parent resource regardless of the Request
12:36 < cce> I don't want this assumption; so I'm just checking
12:37 < cce> so getSiteResource() is a property of Request then?
12:37 < glyph> yes.
12:37 < cce> how is  getSiteResource() different from getModel() in this case?
12:37 < glyph> cce: I don't like explicit functions for dealing with models
12:37 < glyph> cce: Maybe your view requires multiple attributes to its initializer, making its "model" complex
12:37 < cce> (where a model is the program's representation of the user's information that is constructed _before_ any resources are active_)
12:38 < glyph> cce: a good example of this is that you've got your user-specific model and your generic site-wide model
12:38 < glyph> cce: the reason I say 'SiteResource' and not 'SiteObject' is because the point of getSiteResource is view code communicating with other view code; if one view needs to extract a model component from another, that's fine, the view code is in the same layer and it can know what to do there
12:38 < cce> ok, so I'd do getSiteResource().getModel() then?
12:39 < glyph> cce: but the web framework code shouldn't be dealing in arbitrary objects, it should stick to interfaces it knows about
12:39 < glyph> cce: yes
12:39 < cce> glyph: I fail to see how this is any different than getSession()
12:40 < cce> other than the *pratice* that a "Session" or "Model" is constructed _before_ any resource processing takes place.
12:40 < glyph> cce: except getSiteResource() is a Resource (or, allowably, another object) of your own design, so getModel() can be whatever you want; getSessionIDForLog or whatever; the bottom resource in the tree
12:40 < glyph> cce: it's more restrictive
12:40 -!- dreid [i=dreid@c-67-166-157-80.hsd1.ca.comcast.net] has joined #twisted.web
12:40 < glyph> cce: getSession allows you to have multiple parallel sessions set by different systems and passed through the web framework
12:40 < cce> well, it's an extra call; but that's about it.
12:40 < cce> ok
12:40 < cce> (listening)
12:41 < cce> so there is exactly _one_ SiteResource independent of user?
12:41 < glyph> cce: yes
12:41 < glyph> cce: the idea is, don't provide *any* unnecessary mechanisms for users to jam their model objects into the web framework
12:41 < cce> ok, so request.getSiteResource().getModel(request) is needed
12:41 < glyph> cce: models should be passed from model to model
12:41 < cce> glyph: you're confusing me
12:42 < cce> I want to draw  "Hello John" in my resouce 5 layers down
12:42 < glyph> cce: OK wait, let me start with the simpler difference
12:42 < cce> how do I get the user's name...
12:42 < cce> from that resource/request pair
12:42 < glyph> cce: the main difference is that getSession raises a redirect and sets a cookie - this will not do that :)
12:42 < cce> ah; super
12:43 < cce> but let's assume I do a request.getModel().username instead
12:43 < cce> where my application model always sets up a session _before_ any Resources are accessed.
12:43 < cce> how would you do it?
12:43 < glyph> cce: the other difference is superficial, and not too important to understand.  It's a bit more limited than getSession (one state object per request vs. many) but you won't hit the limitations unless you are trying to do things which are bad, and if you already understand that you should be communicating between model objects in terms of your particular model interfaces and methods, it is unlikely that you will be trying to do that
12:44 < cce> yea, I was glossing over the session vs request-specific data
12:44 < cce> that can be handled in the application's model ;)
12:44 < glyph> right :)
12:44 < glyph> Session management will be implemented by a resource which sits at the top level and determines what the top-level model-wrapping site resource is
12:45 < cce> ok
12:45 < cce> what invocation would I need to get the username from my model?
12:45 < glyph> cce: getting there :)
12:45  * cce grins wildly.  (and thanks for your time, BTW)
12:46 < cce> I will make good by writing up meeting minutes and posting them
12:47 < glyph> the session manager won't put any data into the request at all; if your application needs to pass site-specific data down to views that are not created through explicit locateChild that passes along appropriate model data (say, through a static.File, or a vhost) then you can use setSiteResource when you create the File or the Vhost, and then in the locateChild of the resource created through the generic dispatcher resource (file or v
12:47 < glyph> you can call getSiteResource and retrieve it
12:48 < glyph> generic non-application-specific resources like files and static.Data and soforth will therefore never call either of those methods
12:48 < Karnaugh> tell me something
12:48 < glyph> When you need to get the username (here we are!) in a resource, it should be somewhere down in renderHTTP or after locateChild has been called
12:48 < Karnaugh> How does Guarded persist an Avatar internaly?
12:49 < cce> glyph: sorry, I'm confused
12:49 < glyph> Karnaugh: dictionary
12:49 < glyph> cce: let me go with a more concrete example
12:49 < glyph> example 1: your app can do all its communication properly without using any dispatching resources
12:50 < glyph> your user logs in and gets a CCEAvatarResource(cceAvatarModel) as their top resource
12:50 < Karnaugh> glyph: ok, but I'm wondering how it tracks the users session, or is that mangled into Twisted's resource interface or something
12:50 < glyph> cceAvatarModel.username is u"John"
12:51 < Karnaugh> oh wait, it comes from the realm
12:51 < glyph> Karnaugh: yep
12:51 < glyph> cce: The URL being processed is /app/appobject1
12:52 < cce> ok
12:52 < glyph> cce: CCEAvatarResource.child_app looks like this: 'return CCEApplicationObject(self.avatarModel)'
12:54 < glyph> cce: CCEApplicationObject.locateChild looks like this: objname = segments[0]; return CCESingleObjectView(self.avatarModel, self.avatarModel.dataModel.getObjectByName(objname)), segments[1:]
12:55 < glyph> cce: in CCESingleObjectView.renderHTTP (or in the appropriate place in the template) you can simply do 'return self.avatarModel.username'
12:57 < glyph> cce: does this example make sense?  (keep in mind that my point is not that you have to have all these intermediary resources - in an application like a blog where URLs are like /2005/11/15, you would probably create a 'Post' object straight from multiple segments rather than creating an intermediary Year/Month/Day object - my point is that if you do, this is the way to pass data between them.)
12:58 < cce> glyph: so, what your're saying is that the /app resource would be _specific_ to each user
12:58 < cce> and thus the /app/appobject1 would also be specific to each user
12:58 < Karnaugh> glyph: if you have static content or children under a resource, what would be a sensible way to ensure those ar eproccessesd first by locate child before getting arguments like /2005/11/15?
12:59 < cce> ie, you're talking about _alot_ of unnecessary objects, IMHO ;)
12:59 < Karnaugh> I think that sort of thing should be decoupled from the locateChild implementation...
12:59 < cce> Karnaugh: well, if your static resources have dynamic resources, you'd need one copy of each static object (one per user)
12:59 < glyph> cce: not true :)
13:00 < cce> so that it can create the dynamic objects /w the right model
13:00 < glyph> cce: You can easily store a shared static object in a fixed location
13:00 < cce> glyph: I was referring to static objects that have dynamic children (not static leaf objects, which are fine)
13:00 < glyph> cce: I'll get to the static.File example next :)
13:01 < cce> yea, static.File is fine with your presentation
13:01 < cce> it is a leaf (and I'm not sure if you can have static objects that arn't leaves)
13:01 < Karnaugh> What i was saying is if i have /blog/add and /blog/delete and /blog/1 or something where the latter is a refference to some id
13:01 < cce> glyph: well, I must say, I'd rather have request.getModel()
13:01 < Karnaugh> you have to reimplement locateChild to handle the children
13:01 < Karnaugh> afaik
13:01 < glyph> cce: also, you don't need the unnecessary objects; I imagine in a system like yours based on stages, you can have locateChild immediately locate the appropriate leaf resource
13:02 < glyph> cce: and just pass the model data to that leaf in the same way that I passed it down to each intermediary resource
13:02 < cce> yea; it works for me, no doubt
13:02 < Karnaugh> thing is if you're making a big system, constantly customising locateChild for each resource becomes a chore
13:02 < cce> (but anything can be fudged to wkr)
13:02 < cce> glyph: I agree with Karnaugh
13:03 < glyph> Karnaugh: Yeah, we are probably going to add some features to Nevow soon which can be cribbed by web2 for simplifying that chore
13:03 < cce> it is alot of creating/dicarding resource objects
13:03 < cce> unnecesarly
13:03 < Karnaugh> well you're not creating or discarding anything, you just have to reimplement locateChild every gosh darn time
13:03 < cce> how is this any different from putting a getModel() on the request?
13:04 < cce> Karnaugh: well, if each request creates a different model; then _all_ of the child Resoruces need to be re-created
13:04 < glyph> cce: getModel on the request requires that the resource be passed an "appropriate" request in order to be able to render itself
13:04 < glyph> cce: it's unnecessary coupling
13:04 < glyph> cce: in most cases, the resource ought to be able to render itself for *any* request
13:04 < cce> glyph: I think you're just moving the complexity (to a more innefficient form) not actually solving the problem ;)
13:05 < glyph> cce: in some cases it will depend on a cookie or a session-id or whatever, but the idea is to keep all that dependency locked away at the top of the tree, and have all the resources lower down be able to be unit tested with an extremely simple subset of Request
13:05 < glyph> cce: I don't understand why you think this is inefficient
13:05 < cce> well; with this mechanism you're essentially forcing Resoruces (that are Branches) into a Tree
13:06 < cce> ie, you mine as well add a getParent() method while you're at it
13:06 < glyph> cce: no
13:06 < cce> and this tree is essentially created at the time the request arrives
13:06 < glyph> cce: consider the case of the shared static File resource that multiple different users' Resource objects return
13:06 < glyph> cce: they are returned as children from different parents
13:06 < cce> I said Resources that are _branches_
13:06 < cce> a file isn't a branch
13:07 < cce> glyph: well, it's a neat idea, I suppose
13:07 < cce> glyph: ok
13:08 < cce> I've got a counter example problem
13:08 < cce> Suppose that you want to make a 3 deep resource tree
13:08 < cce> but the 2nd and Resource is "generic" module shared across several projects
13:09 < cce> in this case, you'll have to allow for the "model" to be anything, and it just passes along the model
13:09 < cce> so; your 3rd resource deep is passed a model; but it doesn't really know what kind of model
13:09 < glyph> Right.
13:09 < glyph> That's what getSiteResource is for.
13:09 < cce> hence, if your goal is to be able to mix resources form different sources you will always run into the problem of a bad context
13:09 < glyph> In this case, you do need context
13:09 < cce> ie, a resource is used in a way where the data it needs isn't there
13:10 < glyph> and you can't route around it, so the framework *needs* to provide support
13:10 < glyph> that's exactly the case I'm proposing getSiteResource for
13:10 < cce> glyph: the simplest solution, IMHO, is a getModel() on the request, and ask your programmres to be remotely intelligent by (a) asserting that the things they need are there, and (b) writing regression tests.
13:10 < glyph> however, I don't think we should introduce that context dependency *unless* it is needed
13:10 < glyph> the context dependency has a cost
13:11 < cce> ok, so getSiteResource() is a property of the Request?
13:11 < glyph> cce: Yes
13:11 < cce> ok, so that is essentialy my model...
13:11 < glyph> cce: You call setSiteResource in resource #1, and then call getSiteResource in resource #3 in your example, yes
13:11 < cce> any reason why you don't want to call it getModel ?
13:12 < cce> ie, it really isn't a Resource
13:12 < cce> (accoridng to the web definition anyway)
13:12 < glyph> cce: Yeah, I think I'm coming around to the fact that it's not really a resource
13:13 < cce> ok; as much as I like your 'pass-along-the-model-via-constructors' I think it doesn't allow for genreic resources and it has the tendency to create alot of "duplicate" Resoruce objects for the same URI, and this could make debugging harder, not easier.
13:13 < glyph> cce: I don't mind calling it something else, I don't like "getModel" because it sounds too generic, it implies to me that it's suggested that model data *always* be applied to the request, whereas I want to make it clear that such data shouldn't be applied unless it's necessary to traverse a generic resource
13:14 < cce> glyph: well, there are only two peices of information that I really need down-low
13:14 < glyph> cce: setRequestSpecific and getRequestSpecific, maybe
13:15 < cce> AuthenticatedUserIdentifier (a string)
13:15 < cce> and SessionIdentifier (a string)
13:15 < cce> I don't even want them to be objects
13:15 < cce> (my app can look the objects up if they need them)
13:15 < glyph> cce: you mean you don't want them to be user-defined classes? :)
13:15 < cce> could the Request object just have those as properties? None if the sessoin identifier or the authenticated user identifier isn't therE?
13:15 < glyph> cce: (strings are objects, rara)
13:16 < cce> yes; I suppose so; ok
13:16 < glyph> cce: Yes, you can set them in your app, and that will work fine, I just don't thin it should be the suggested mechanism
13:16 < glyph> cce: I'd prefer a documentation convention so that request-specific state is really explicit in every class that uses it
13:16 < cce> but the two common cases is I want to get the username and the session-id, and I'd guess these are the common needs of most commercial applications
13:16 < cce> glyph: fantastic idea
13:17 < glyph> cce: such a documentation convention strongly implies framework support and conventions too - that's all I'm suggesting this getRequestSpecific is; it's really a workaround in my mind :)
13:17 < glyph> anyway, I must depart
13:17 < cce> thank you so much for the chat
From cce at clarkevans.com  Mon Nov 21 12:41:47 2005
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon Nov 21 12:42:33 2005
Subject: [Twisted-web] State and web2 (or, how to not follow REST)
In-Reply-To: <20051120204530.GA8341@prometheusresearch.com>
References: <20051120204530.GA8341@prometheusresearch.com>
Message-ID: <20051121194147.GB34927@prometheusresearch.com>

On IRC today, foom pointed out that my idea for distinguishing between
things that modify a request (a IRequestHandler) such as setting up a
session or authenticating a user, must also be able to happen between
IResources.  The example given was /~user/bing/my-app/foo, where
authentication (and possibly setting up a session) happens:
/~user/bing/{HERE}my-app/foo

So, goal is to distinguish between Resources which should not be
modifying the request's context and RequestFilters which by definition
change the request. The glue can be done by having a ContextResource
that explicitly applies one or more RequestFilters on the current
request.  We can then designate a syntax for asserting that the
application of a particular IRequestFilter has been done on the request.
Anyway, just consider this a random attempt to detail the idea....

  class IRequestFilter(Interface):
      """
          I am a filter that is applied to a given request, examples of
          a RequestFilter are, a "SessionManager", "Authenticator", etc.
      """

      def apply(self, request):
          """ Perform necessary logic on the request, modifying the
              request's context as necessary and/or raising HTTPError
              as needed.   Ideally only an IRequestFilter modifies a
              request's context.
          """

  class IResource:
      # same as before, adding:

      require = Attribute(
                   "A sequence of IRequestFilters which must have
                    been applied to a Request before this resource
                    is accessed")

  class IRequest(Interface):
      # same as before, adding:
      
      filtered = Attribute(
                  "A sequence of IRequestFilters that have been applied.")

      # since there are two objects that are so commonly used, I feel
      # that they merit their own "slot" on the Request object:

      session = Attribute("An optional ISession object added by the 
                  ISessionRequestFilter.")

      avatar = Attribute("An optional IAvatar object added by the
                 IAuthenticateRequestFilter, or other providers of
                 an IAvatar")

  class ContextResource(Resource):  # or SiteResource, or AppResource
      """
          I am a application or site resource which modifies the
          incoming request via a set of RequestFilters.  Only 
          ContextResources should be doing this sort of thing.
      """
       
      filter = None

      def registerFilter(self, requestFilter):
          if not self.filter:
               self.filter = [requestFilter]
               return
          self.filter.append(requestFilter)
     
      def locateChild(self, request, segments):
          for filter in self.filter:
              filter.apply(request)
              request.filtered.append(filter)
          Resource.locateChild(self, request, segments)


myapp = ContextResource()
myapp.registerFilter(SessionManager())
myapp.registerFilter(HTTPAuthHandler())



From mike at mkp.ca  Mon Nov 21 15:14:43 2005
From: mike at mkp.ca (Mike Pelletier)
Date: Mon Nov 21 15:14:17 2005
Subject: [Twisted-web] LivePage cannot append rows to tables?
Message-ID: <200511211714.44689.mike@mkp.ca>

I'm at my wit's end!  Have mercy on a clueless JS user and examine the 
attached page.

The problem it illustates is one I am having with livepage.js's 
nevow_appendNode function.  I am finding that whenever I attempt to append a 
row to a table (or to a tbody, or for that matter to anything else) the HTML 
is silently stripped out and my node is added as a single #TEXT node.  
However, appending a DIV works fine, even when technically illegal; a DIV 
node containing the #TEXT is added.

The attachment includes a copy'n'pasted version of nevow_appendNode.  The only 
modification I have made to it is to add an alert() which demonstrates the 
precise point of failure; assigning "what" to "newspan.innerHTML".  Note that 
the <div> tags are unmolested, but the <tr> and <td> tags are stripped.  I 
get the same behaviour from FF and IE, while Konq just barfs with a DOM 
exception 7.

I simply don't know how to chase this one down any further.  I hope someone 
will tell me I'm a moron and point out what I've done wrong, but I think the 
solution is going to require a change to nevow_appendNode.

Thanks muchly,
Mike.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20051121/6089e6f7/argh.html
From exarkun at divmod.com  Mon Nov 21 16:12:41 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon Nov 21 16:12:43 2005
Subject: [Twisted-web] LivePage cannot append rows to tables?
In-Reply-To: <200511211714.44689.mike@mkp.ca>
Message-ID: <20051121231241.32735.740107853.divmod.quotient.1185@ohm>

On Mon, 21 Nov 2005 17:14:43 -0500, Mike Pelletier <mike@mkp.ca> wrote:
>I'm at my wit's end!  Have mercy on a clueless JS user and examine the
>attached page.
>
>The problem it illustates is one I am having with livepage.js's
>nevow_appendNode function.  I am finding that whenever I attempt to append a
>row to a table (or to a tbody, or for that matter to anything else) the HTML
>is silently stripped out and my node is added as a single #TEXT node.
>However, appending a DIV works fine, even when technically illegal; a DIV
>node containing the #TEXT is added.
>
>The attachment includes a copy'n'pasted version of nevow_appendNode.  The only
>modification I have made to it is to add an alert() which demonstrates the
>precise point of failure; assigning "what" to "newspan.innerHTML".  Note that
>the <div> tags are unmolested, but the <tr> and <td> tags are stripped.  I
>get the same behaviour from FF and IE, while Konq just barfs with a DOM
>exception 7.
>
>I simply don't know how to chase this one down any further.  I hope someone
>will tell me I'm a moron and point out what I've done wrong, but I think the
>solution is going to require a change to nevow_appendNode.

This fails because nevow_appendNode sets the HTML string as the innerHTML property of a DIV node.  The browser validates the resulting DOM, notices it is illegal (you cannot put a TR or a TD inside a DIV) and then either silently "fixes" it or reports an error.

This might be fixable by appending the given HTML string to the target node's innerHTML property.  I have tested it with Firefox and it seems to work in many cases there, but I have not tested it anywhere else.

I'm not terribly interested in trying to fix this (nor all the JS and HTML quoting issues) in LivePage.  Currently I'm focusing development effort on Athena which side-steps this whole class of problems.  However, if someone contributes a patch along with something to instill confidence that the change does not introduce a regression, it might get applied.

Jean-Paul

From j_s_nightingale at yahoo.co.uk  Mon Nov 21 17:59:18 2005
From: j_s_nightingale at yahoo.co.uk (Stephen Nightingale)
Date: Mon Nov 21 17:59:21 2005
Subject: [Twisted-web] Twisted Network Programming Essentials
Message-ID: <20051122005919.86029.qmail@web25708.mail.ukl.yahoo.com>


  Fine Book.  I'm working through the examples.
  Hit a problem with the wordcountproxy.py example,
  under the explanation of HTTP Proxy Servers, on page 62..
  As this __might__ be an issue with Twisted itself,
  I'm cross-posting here as well as back to O'Reilly errata.
  
  The issue is that the:
  'reactor.listenTCP(WEB_PORT, WebReportFactory(counter))'
  call precipitates an error message in  _getfullpathname in
  Lib/ntpath.py, called from web/http.py, and the error is:
  'TypeError: coercing to Unicode: need string or buffer, WordCounter found'
  
  The full traceback is given below.  N.B. I'm using Python 2.4.1
  on Win XP.
  
  I wonder if anyone else has come across this issue?
  Any insights gratefully received,
  
  Regards,
  
  Stephen Nightingale.
  
  2005/11/21 23:20 GMT Standard Time [-] Log opened.
  2005/11/21 23:20 GMT Standard Time [-] __main__.WordCountProxyFactory starting on 8001
  2005/11/21 23:20 GMT Standard Time [-] Starting factory <__main__.WordCountProxyFactory instance at 0x00F03878>
  2005/11/21 23:20 GMT Standard Time [-] Traceback (most recent call last):
  2005/11/21 23:20 GMT Standard Time [-]   File "wordcountproxy.py", line 137, in ?
  2005/11/21 23:20 GMT Standard Time [-]     reactor.listenTCP(WEB_PORT, WebReportFactory(counter))
  2005/11/21 23:20 GMT Standard Time [-]   File  "D:\Python\Lib\site-packages\twisted\web\http.py", line 1086, in  __init__
  2005/11/21 23:20 GMT Standard Time [-]     logPath = os.path.abspath(logPath)
  2005/11/21 23:20 GMT Standard Time [-]   File "d:\Python\lib\ntpath.py", line 500, in abspath
  2005/11/21 23:20 GMT Standard Time [-]     path = _getfullpathname(path)
  2005/11/21 23:20 GMT Standard Time [-] TypeError: coercing to Unicode: need string or buffer, WordCounter found
  
  

		
---------------------------------
To help you stay safe and secure online, we've developed the all new Yahoo! Security Centre.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20051122/61119e7b/attachment.htm
From mike at mkp.ca  Mon Nov 21 18:44:55 2005
From: mike at mkp.ca (Mike Pelletier)
Date: Mon Nov 21 18:44:30 2005
Subject: [Twisted-web] LivePage cannot append rows to tables?
In-Reply-To: <20051121231241.32735.740107853.divmod.quotient.1185@ohm>
References: <20051121231241.32735.740107853.divmod.quotient.1185@ohm>
Message-ID: <200511212044.57535.mike@mkp.ca>

On Mon November 21 2005 18:12, Jean-Paul Calderone wrote:
> This fails because nevow_appendNode sets the HTML string as the innerHTML
> property of a DIV node. The browser validates the resulting DOM, notices 
> it is illegal (you cannot put a TR or a TD inside a DIV) and then either
> silently "fixes" it or reports an error.

That is what I am seeing, yep.

> This might be fixable by appending the given HTML string to the target
> node's innerHTML property. ?I have tested it with Firefox and it seems to
> work in many cases there, but I have not tested it anywhere else.

Thanks a lot for the hints.  I think you are suggesting something like:

function nevow_appendNode(node, what) {
    var oldnode = document.getElementById(node);
    oldnode.innerHTML += what;
}

This works just dandy on Firefox, and not at all on IE.  I get, "Error: 
unknown runtime error."  But oh well, it's a start.  Probably I'll look into 
hacking nevow_glue.js to use MochiKit.DOM.  Or...

> I'm not terribly interested in trying to fix this (nor all the JS and HTML
> quoting issues) in LivePage. ?Currently I'm focusing development effort on
> Athena which side-steps this whole class of problems. ?However, if someone
> contributes a patch along with something to instill confidence that the
> change does not introduce a regression, it might get applied.

...should I be looking into this?  I wasn't aware of nevow.athena, but I see 
I've got it installed.  I don't have any legacy code to worry about, should I 
just skip nevow.livepage completely?  Would you trust 0.6.0 not to put its 
elbows on the table or vomit on the Japanese?  I don't really want to hack up 
javascript if I can avoid it.

Mike.

From exarkun at divmod.com  Mon Nov 21 19:05:18 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon Nov 21 19:05:20 2005
Subject: [Twisted-web] LivePage cannot append rows to tables?
In-Reply-To: <200511212044.57535.mike@mkp.ca>
Message-ID: <20051122020518.32735.843159594.divmod.quotient.1230@ohm>

On Mon, 21 Nov 2005 20:44:55 -0500, Mike Pelletier <mike@mkp.ca> wrote:
>On Mon November 21 2005 18:12, Jean-Paul Calderone wrote:
>>
>> [snip - athena]
>
>...should I be looking into this?  I wasn't aware of nevow.athena, but I see
>I've got it installed.  I don't have any legacy code to worry about, should I
>just skip nevow.livepage completely?  Would you trust 0.6.0 not to put its
>elbows on the table or vomit on the Japanese?  I don't really want to hack up
>javascript if I can avoid it.

It works alright in 0.6 (there might be some puking, but it is relatively limited in scope - bathroom only, I would say).  It works better in current trunk@HEAD.  The API isn't stable yet (it has changed between 0.6 and trunk@HEAD, it will change some more, I think), and there's definitely a few things to fix before I'd say it's deployable.  I'd recommend at least taking a look at it: writing larger apps will definitely be easier with it than with nevow.livepage.  On the other hand, if you only have a few "live" requirements, since you already have some nevow.livepage code, you might want to stick with that for now.  It won't be disappearing suddenly for several releases at least ;)

Jean-Paul

From tv at twistedmatrix.com  Mon Nov 21 23:57:11 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon Nov 21 23:58:18 2005
Subject: [Twisted-web] Twisted Network Programming Essentials
In-Reply-To: <20051122005919.86029.qmail@web25708.mail.ukl.yahoo.com>
References: <20051122005919.86029.qmail@web25708.mail.ukl.yahoo.com>
Message-ID: <1132642632.25125.55.camel@pooch>

On Tue, 2005-11-22 at 00:59 +0000, Stephen Nightingale wrote:
> 
> Fine Book.  I'm working through the examples.
> Hit a problem with the wordcountproxy.py example,
> under the explanation of HTTP Proxy Servers, on page 62..
> As this __might__ be an issue with Twisted itself,
> I'm cross-posting here as well as back to O'Reilly errata.
> 
> The issue is that the:
> 'reactor.listenTCP(WEB_PORT, WebReportFactory(counter))'
> call precipitates an error message in  _getfullpathname in
> Lib/ntpath.py, called from web/http.py, and the error is:
> 'TypeError: coercing to Unicode: need string or buffer, WordCounter
> found'
...
> I wonder if anyone else has come across this issue?
> Any insights gratefully received,

Did you type it in yourself? It seems like the wordCounter
argument to WebReportFactory.__init__ is getting to
HTTPFactory.__init__, which seems to think it is logPath.
But the book I have in front of me seems to be correct:

class WebReportFactory(http.HTTPFactory):
    def __init__(self, wordCounter):
        self.wordCounter = wordCounter
        http.HTTPFactory.__init__(self)
...
    counter = WordCounter()
...
    reactor.listenTCP(WEB_PORT, WebReportFactory(counter))




From j_s_nightingale at yahoo.co.uk  Tue Nov 22 01:41:37 2005
From: j_s_nightingale at yahoo.co.uk (Stephen Nightingale)
Date: Tue Nov 22 01:41:42 2005
Subject: [Twisted-web] Twisted Network Programming Essentials
In-Reply-To: <1132642632.25125.55.camel@pooch>
Message-ID: <20051122084137.78261.qmail@web25703.mail.ukl.yahoo.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: wcp.zip
Type: application/zip
Size: 1352 bytes
Desc: 159769213-wcp.zip
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051122/6cd74f22/wcp-0001.zip
From j_s_nightingale at yahoo.co.uk  Tue Nov 22 03:07:57 2005
From: j_s_nightingale at yahoo.co.uk (Stephen Nightingale)
Date: Tue Nov 22 03:08:02 2005
Subject: [Twisted-web] Twisted Network Programming Essentials
In-Reply-To: <1132642632.25125.55.camel@pooch>
Message-ID: <20051122100757.3751.qmail@web25712.mail.ukl.yahoo.com>



  Ahh,
  
  It works better when I use 'class WordCountProxyClient'
  instead of 'class WordCountProxy'.
  
  Sorry to have troubled you.
  
  Though I must say, the real problem was easier to find when I ran it on  Linux, than on XP.  Different sets of error messages were given.
  (Also easier to find after Tommy V encouraged me to inspect my code
  more carefully :>)
  
  Stephen Nightingale.
  
  
Tommi Virtanen <tv@twistedmatrix.com> wrote:  On Tue, 2005-11-22 at 00:59 +0000, Stephen Nightingale wrote:
> 
> Fine Book.  I'm working through the examples.
> Hit a problem with the wordcountproxy.py example,
> under the explanation of HTTP Proxy Servers, on page 62..
> As this __might__ be an issue with Twisted itself,
> I'm cross-posting here as well as back to O'Reilly errata.
> 
> The issue is that the:
> 'reactor.listenTCP(WEB_PORT, WebReportFactory(counter))'
> call precipitates an error message in  _getfullpathname in
> Lib/ntpath.py, called from web/http.py, and the error is:
> 'TypeError: coercing to Unicode: need string or buffer, WordCounter
> found'
...
> I wonder if anyone else has come across this issue?
> Any insights gratefully received,

Did you type it in yourself? It seems like the wordCounter
argument to WebReportFactory.__init__ is getting to
HTTPFactory.__init__, which seems to think it is logPath.
But the book I have in front of me seems to be correct:

class WebReportFactory(http.HTTPFactory):
    def __init__(self, wordCounter):
        self.wordCounter = wordCounter
        http.HTTPFactory.__init__(self)
...
    counter = WordCounter()
...
    reactor.listenTCP(WEB_PORT, WebReportFactory(counter))






		
---------------------------------
  Win a Yahoo! Vespa NEW - Yahoo! Cars has 3 Vespa LX125s to be won Enter Now! 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20051122/6d42a356/attachment.htm
From Keith.Gunderson at act.org  Tue Nov 22 12:52:17 2005
From: Keith.Gunderson at act.org (Keith.Gunderson@act.org)
Date: Tue Nov 22 12:52:22 2005
Subject: [Twisted-web] How to use twistd on Windows to run a simple webserver
Message-ID: <OF54AC61EA.4A862710-ON862570C1.006B8221-862570C1.006D289F@LocalDomain>

I've finally found a good reason to delve into twisted at my job.  I've
been keeping up with your progress over the past few years, but now I can't
seem to get the simplest of webapps to run.  (I've read all the docs and
blogs that I can get my eyes on.)

The basics....No IRC during business hours,  Win2000, python2.4, latest
TwistedSumo plus TwistedWeb2 reinstalled for good measure.

I want to run the 'Simple application' described the twisted.web2
introduction.  (pasted below.)

Twistd.py has syslog issues for me.  My 'twistdWithSyslogRemoved.py' does
nothing but release an inaudible chirp.  (As does _twistd.py .)

What additional hints can you give me?  I have delusions of nevow,
mantissa, and glory in my future.  But one step at a time.

Many, many thanks.


(from intro.txt)

  from twisted.web2 import server, http, resource

  class Toplevel(resource.Resource):
    addSlash = True
    def render(self, ctx):
      return http.Response(stream="Hello monkey!")

  site = server.Site(Toplevel())

  # Standard twisted application Boilerplate
  from twisted.application import service, strports
  application = service.Application("demoserver")
  s = strports.service('tcp:8080', http.HTTPFactory(site))
  s.setServiceParent(application)

Save this program as ``example1.py``, and then run it via ``twistd -ny
example1.py``. ``twistd`` is the Twisted runner; it knows how to execute
applications by looking for the magic ``application`` variable declared at
top-level. You can also run your server daemonized, via ``twistd -oy
example1.py``. You can then access your server via the url
"http://localhost:8080/". For more deployment options, see the deployment_
chapter.


Keith Gunderson
Performance Test Analyst
IT Audit and Reporting
ACT, Inc.
301 ACT Drive
Iowa City, IA 52245

(319) 337-1548 Voice
(319) 337-1766 Fax



From exarkun at divmod.com  Tue Nov 22 13:03:45 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue Nov 22 13:03:47 2005
Subject: [Twisted-web] How to use twistd on Windows to run a simple
	webserver
In-Reply-To: <OF54AC61EA.4A862710-ON862570C1.006B8221-862570C1.006D289F@LocalDomain>
Message-ID: <20051122200345.1217.1281093228.divmod.quotient.184@ohm>

On Tue, 22 Nov 2005 13:52:17 -0600, keith.gunderson@act.org wrote:
>I've finally found a good reason to delve into twisted at my job.  I've
>been keeping up with your progress over the past few years, but now I can't
>seem to get the simplest of webapps to run.  (I've read all the docs and
>blogs that I can get my eyes on.)
>
>The basics....No IRC during business hours,  Win2000, python2.4, latest
>TwistedSumo plus TwistedWeb2 reinstalled for good measure.
>
>I want to run the 'Simple application' described the twisted.web2
>introduction.  (pasted below.)
>
>Twistd.py has syslog issues for me.  My 'twistdWithSyslogRemoved.py' does
>nothing but release an inaudible chirp.  (As does _twistd.py .)
>
>What additional hints can you give me?  I have delusions of nevow,
>mantissa, and glory in my future.  But one step at a time.

twisted/scripts/twistd.py is a private implementation module, it is not intended to be invoked directly.  It is only used when you use twistd on POSIX.

twisted/scripts/_twistw.py is also a private implementation module.  It is only used when you use twistd on Windows.

bin/twistd is the executable program intended to be invoked.  I'm not sure how the latest Windows installer works.  It used to provide a command shell (cmd.exe with the environment configured to make working with Twisted easier) from which you could run "twistd" without specifying the full location.  This may still be the case.

In any case, you definitely don't want to run anything in twisted/scripts/ manually.

Jean-Paul

From corydodt at twistedmatrix.com  Tue Nov 22 13:13:01 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Tue Nov 22 13:09:47 2005
Subject: [Twisted-web] How to use twistd on Windows to run a
	simple	webserver
In-Reply-To: <20051122200345.1217.1281093228.divmod.quotient.184@ohm>
References: <20051122200345.1217.1281093228.divmod.quotient.184@ohm>
Message-ID: <43837BCD.4090601@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


With the windows installer, you could you the "twisted command prompt" and all
the shell commands within twisted work just as if you were running Unix.
(i.e., as JP described).

Speaking of which, it looks like tm.com/projects/core still hasn't been
rebuilt because it doesn't contain the links to the 2.1.0 windows installer.

C

Jean-Paul Calderone wrote:
> On Tue, 22 Nov 2005 13:52:17 -0600, keith.gunderson@act.org wrote:
> 
>> I've finally found a good reason to delve into twisted at my job.  I've
>> been keeping up with your progress over the past few years, but now I
>> can't
>> seem to get the simplest of webapps to run.  (I've read all the docs and
>> blogs that I can get my eyes on.)
>>
>> The basics....No IRC during business hours,  Win2000, python2.4, latest
>> TwistedSumo plus TwistedWeb2 reinstalled for good measure.
>>
>> I want to run the 'Simple application' described the twisted.web2
>> introduction.  (pasted below.)
>>
>> Twistd.py has syslog issues for me.  My 'twistdWithSyslogRemoved.py' does
>> nothing but release an inaudible chirp.  (As does _twistd.py .)
>>
>> What additional hints can you give me?  I have delusions of nevow,
>> mantissa, and glory in my future.  But one step at a time.
> 
> 
> twisted/scripts/twistd.py is a private implementation module, it is not
> intended to be invoked directly.  It is only used when you use twistd on
> POSIX.
> 
> twisted/scripts/_twistw.py is also a private implementation module.  It
> is only used when you use twistd on Windows.
> 
> bin/twistd is the executable program intended to be invoked.  I'm not
> sure how the latest Windows installer works.  It used to provide a
> command shell (cmd.exe with the environment configured to make working
> with Twisted easier) from which you could run "twistd" without
> specifying the full location.  This may still be the case.
> 
> In any case, you definitely don't want to run anything in
> twisted/scripts/ manually.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDg3vN3A5SrXAiHQcRAtfnAJ9/aQOzlVX7FuFurGcvhurIdhAi9ACgi1FF
urBwO/d/NA82jm0qNAWHEXM=
=3iVq
-----END PGP SIGNATURE-----

From Keith.Gunderson at act.org  Tue Nov 22 13:20:17 2005
From: Keith.Gunderson at act.org (Keith.Gunderson@act.org)
Date: Tue Nov 22 13:20:19 2005
Subject: [Twisted-web] How to use twistd on Windows to run a
	simple	webserver
Message-ID: <OFCF58B0A6.63DD140E-ON862570C1.006F3F63-862570C1.006FB8B9@LocalDomain>


Thats the ticket.  Very nice.  The shortcut was hidden in a menu under a
button labeled Start  :(  Here's the details...

C:\WINNT\system32\CMD.EXE /k C:\SOMEWHERE\python24\lib\site-packages\twiste
d\twistenv.bat C:\SOMEWHERE\python24\scripts

Keith Gunderson



                                                                                                                                                
                      Jean-Paul Calderone                                                                                                       
                      <exarkun@divmod.com>              To:       twisted-web@twistedmatrix.com                                                 
                      Sent by:                          cc:                                                                                     
                      twisted-web-bounces@twiste        Subject:  Re: [Twisted-web] How to use twistd on Windows to run a simple    webserver   
                      dmatrix.com                                                                                                               
                                                                                                                                                
                                                                                                                                                
                      11/22/2005 02:03 PM                                                                                                       
                      Please respond to                                                                                                         
                      "Discussion of                                                                                                            
                      twisted.web, Nevow,   and                                                                                                 
                      Woven"                                                                                                                    
                                                                                                                                                
                                                                                                                                                




On Tue, 22 Nov 2005 13:52:17 -0600, keith.gunderson@act.org wrote:
>I've finally found a good reason to delve into twisted at my job.  I've
>been keeping up with your progress over the past few years, but now I
can't
>seem to get the simplest of webapps to run.  (I've read all the docs and
>blogs that I can get my eyes on.)
...

twisted/scripts/twistd.py is a private implementation module, it is not
intended to be invoked directly.  It is only used when you use twistd on
POSIX.

twisted/scripts/_twistw.py is also a private implementation module.  It is
only used when you use twistd on Windows.

bin/twistd is the executable program intended to be invoked.  I'm not sure
how the latest Windows installer works.  It used to provide a command shell
(cmd.exe with the environment configured to make working with Twisted
easier) from which you could run "twistd" without specifying the full
location.  This may still be the case.

In any case, you definitely don't want to run anything in twisted/scripts/
manually.

Jean-Paul

_______________________________________________
Twisted-web mailing list
Twisted-web@twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web






From exarkun at divmod.com  Tue Nov 22 13:25:32 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue Nov 22 13:25:33 2005
Subject: [Twisted-web] How to use twistd on Windows to run a
	simple	webserver
In-Reply-To: <43837BCD.4090601@twistedmatrix.com>
Message-ID: <20051122202532.1217.110582212.divmod.quotient.192@ohm>

On Tue, 22 Nov 2005 12:13:01 -0800, Cory Dodt <corydodt@twistedmatrix.com> wrote:
>
>Speaking of which, it looks like tm.com/projects/core still hasn't been
>rebuilt because it doesn't contain the links to the 2.1.0 windows installer.
>

Done

Jean-Paul

From mailinglists at smartology.nl  Thu Nov 24 01:00:45 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Thu Nov 24 01:00:52 2005
Subject: [Twisted-web] resource constructor called on every request
Message-ID: <4385732D.2030201@smartology.nl>

Hello,

I don't know if this is a 'normal' twisted/nevow operation procedure,
but my base resources' __init__ is called on every request.

Since a putChild for XMLRPC is setup in this __init__ (which includes a
lot of code), I'm worried about execess overhead. Is there a way to
include the XMLRPC section in a way that it get's initialized only once?
I need the XMLRPC functionality on the same port as the HTTP(S) for
firewall reasons.

Something else ... in locateChild ->

if segments[0] == '':
    # If the server is looking for the root page segments will be ('',)
    # then renderHTTP will be called on self

When I return self, () a max recursion error is the result ... what
should I return here?


-- CODE --

class httpResource(rend.Page):
   
    addSlash = True
   
    def __init__(self, service):
        rend.Page.__init__(self)
        self.service = service
        self.putChild('RPC2', protocols.xmlrpc(self.service))
          
        rt = static.File("www")
        rt.ignoreExt(".rpy")
        rt.processors = {'.rpy': script.ResourceScript, '.php': phpScript}
        rt.indexNames.append('index.php')
        self.putChild('www', rt)

    def locateChild(self, ctx, segments):
        """"""
        if segments[0] == '':
            # If the server is looking for the root page segments will
be ('',)
            # then renderHTTP will be called on self
            return None, ()
        elif segments[0] in ctx.tag.children.keys():
            return ctx.tag.children[segments[0]], segments[1:]
        else:
            return None, ()
       
    def renderHTTP(self, ctx):
        """"""
        if self == ctx:
            return "<html><body>renderHTTP: ROOT</body></html>"
        return ctx.tag
       
components.registerAdapter(httpResource, IowwService, inevow.IResource)


From mailinglists at smartology.nl  Thu Nov 24 01:18:26 2005
From: mailinglists at smartology.nl (Remi Cool)
Date: Thu Nov 24 01:18:35 2005
Subject: [Twisted-web] resource constructor called on every request
In-Reply-To: <4385732D.2030201@smartology.nl>
References: <4385732D.2030201@smartology.nl>
Message-ID: <43857752.30802@smartology.nl>

Remi Cool wrote:

>Something else ... in locateChild ->
>
>if segments[0] == '':
>    # If the server is looking for the root page segments will be ('',)
>    # then renderHTTP will be called on self
>
>When I return self, () a max recursion error is the result ... what
>should I return here?
>  
>
When I return: self.renderHTTP(self), () ... it looks like it's going
ok, is this the correct way?

- Remi -

From j.siegele at gmx.at  Thu Nov 24 09:30:58 2005
From: j.siegele at gmx.at (Johann Siegele)
Date: Thu Nov 24 08:31:04 2005
Subject: [Twisted-web] Dynamical generated slots
Message-ID: <4385EAC2.8000909@gmx.at>

Hello,
    im looking for a possibility to generate Slots for a livepage
dynamical.
my code for the livepage looks like this, it works fine, but i can not
update any of the slots!
    def render_mytable(self, ctx, data):
            mydetail=[]
            for i in range(1,15):
              mydetail.append([T.td [T.slot('test'+str(i), "default")]])
              if i % 3 is 0:
               mydetail.append([T.tr[T.td['-test-']]],)
            return ctx.tag[mydetail]

template:
<table nevow:render="mytable" name="mytabletest"/>

it should be possible that the user can change the text in the row n and
colume x.

this do not work:
client.set('test1', text)

i think the problem is, that the slots are not hardcoded.

is there a other possibility.

thank you very much!


From exarkun at divmod.com  Thu Nov 24 22:57:29 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu Nov 24 22:57:30 2005
Subject: [Twisted-web] Dynamical generated slots
In-Reply-To: <4385EAC2.8000909@gmx.at>
Message-ID: <20051125055729.1217.205812017.divmod.quotient.603@ohm>

On Thu, 24 Nov 2005 16:30:58 +0000, Johann Siegele <j.siegele@gmx.at> wrote:
>Hello,
>    im looking for a possibility to generate Slots for a livepage
>dynamical.
>my code for the livepage looks like this, it works fine, but i can not
>update any of the slots!

What does "update" mean?  The only operation on slots I know of is "fill" - ie, ctx/proto.fillSlots(slotName, slotValue).

>    def render_mytable(self, ctx, data):
>            mydetail=[]
>            for i in range(1,15):
>              mydetail.append([T.td [T.slot('test'+str(i), "default")]])
>              if i % 3 is 0:

You should not use "is" for integer comparison.  It will be wrong sometimes in confusing ways.  Use "==".

>               mydetail.append([T.tr[T.td['-test-']]],)
>            return ctx.tag[mydetail]

This code doesn't ever seem to fill any slots.  I don't think I understand the question you're asking.

>
>template:
><table nevow:render="mytable" name="mytabletest"/>
>
>it should be possible that the user can change the text in the row n and
>colume x.
>
>this do not work:
>client.set('test1', text)

Ah.  Slots are *server* side.  You cannot fill them using LivePage after the page has been rendered.

>
>i think the problem is, that the slots are not hardcoded.
>
>is there a other possibility.

Instead, you probably want to give the nodes IDs and address them in that manner.  Also, I would recommend you take a look at Athena, which makes this kind of thing much easier to handle.  Instead of trying to set the values of nodes in the DOM on the client from the server, the client can implement event handlers and adjust the contents of the page accordingly.

Jean-Paul

From olilau.list.1 at gmail.com  Sun Nov 27 10:12:54 2005
From: olilau.list.1 at gmail.com (Olivier Laurent)
Date: Sun Nov 27 10:13:03 2005
Subject: [Twisted-web] Serving different resource types from the same
	directory
Message-ID: <20051127171254.GA20237@debian>

On dim, 27 nov 2005, at 16:18, oli wrote:
I'm trying to serve 2 different kind of resources from the same
directory. I can, with no problem, serve one kind or the other but not
the two resource types at the same time.

Examples abounds on the web on how to serve one kind of resources from
subdirectory /foo and another kind from subdirectory /bar. But no
example on how to serve different kind of resources from the same
directory.

Here is how I tried:

# [...]

PATH = '/var/www/'

pt_resource = static.File(PATH)
pt_resource.processors = { '.pt' : PTResource }
pt_resource.indexNames = [ 'index' + '.pt' ]

rst_resource = static.File( PATH )
rst_resource.processors = { '.rst' : RSTResource }
rst_resource.indexNames = [ 'index' + '.rst' ]

#root = Resource() # I tried this too
root = static.File(PATH)

root.putChild(PATH, pt_resource)
root.putChild(PATH, rst_resource)

reactor.listenTCP(
        80,
        server.Site( root )
        )
reactor.run( )
# this is the end

What's wrong ? What did I forget ? Is it possible ?

Thank you.

-- 
Olivier Laurent

From exarkun at divmod.com  Sun Nov 27 10:24:30 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun Nov 27 10:24:31 2005
Subject: [Twisted-web] Serving different resource types from the same
	directory
In-Reply-To: <20051127171254.GA20237@debian>
Message-ID: <20051127172430.1217.1730202924.divmod.quotient.1157@ohm>

On Sun, 27 Nov 2005 18:12:54 +0100, Olivier Laurent <olilau.list.1@gmail.com> wrote:
>On dim, 27 nov 2005, at 16:18, oli wrote:
>I'm trying to serve 2 different kind of resources from the same
>directory. I can, with no problem, serve one kind or the other but not
>the two resource types at the same time.
>
>Examples abounds on the web on how to serve one kind of resources from
>subdirectory /foo and another kind from subdirectory /bar. But no
>example on how to serve different kind of resources from the same
>directory.
>
>Here is how I tried:
>
># [...]
>
>PATH = '/var/www/'
>
>pt_resource = static.File(PATH)
>pt_resource.processors = { '.pt' : PTResource }
>pt_resource.indexNames = [ 'index' + '.pt' ]
>
>rst_resource = static.File( PATH )
>rst_resource.processors = { '.rst' : RSTResource }
>rst_resource.indexNames = [ 'index' + '.rst' ]
>
>#root = Resource() # I tried this too
>root = static.File(PATH)
>
>root.putChild(PATH, pt_resource)
>root.putChild(PATH, rst_resource)
>
>reactor.listenTCP(
>        80,
>        server.Site( root )
>        )
>reactor.run( )
># this is the end
>
>What's wrong ? What did I forget ? Is it possible ?

"/var/www/" does not make sense as the first argument to putChild().  Someone would have to request "%2fvar%2fwww%2f" to get anything at that location.  Also, you cannot pass the same path to putChild() twice and expect both resources to figure out what to do.  Fortunately, you do not appear to need two resources.  I think you are looking for something like this:

  root = static.File(PATH)
  root.processors = {'.pt': PTResource, '.rst': RSTResource}
  root.indexNames = ['index.rst', 'index.pt']
  reactor.listenTCP(80, server.Site(root))
  reactor.run()

Jean-Paul

From eric.faurot at gmail.com  Sun Nov 27 10:30:58 2005
From: eric.faurot at gmail.com (Eric Faurot)
Date: Sun Nov 27 10:31:01 2005
Subject: [Twisted-web] Serving different resource types from the same
	directory
In-Reply-To: <20051127171254.GA20237@debian>
References: <20051127171254.GA20237@debian>
Message-ID: <e012d6b50511270930g36a3abc1k926857bd0aa4a8fc@mail.gmail.com>

On 11/27/05, Olivier Laurent <olilau.list.1@gmail.com> wrote:

> Here is how I tried:
>
> # [...]
>
> PATH = '/var/www/'
>
> pt_resource = static.File(PATH)
> pt_resource.processors = { '.pt' : PTResource }
> pt_resource.indexNames = [ 'index' + '.pt' ]
>
> rst_resource = static.File( PATH )
> rst_resource.processors = { '.rst' : RSTResource }
> rst_resource.indexNames = [ 'index' + '.rst' ]
>
> #root = Resource() # I tried this too
> root = static.File(PATH)
>
> root.putChild(PATH, pt_resource)
> root.putChild(PATH, rst_resource)

The point of the resource name is to differenciate it from its siblings.
If you give the same name to both of course it does not work.
Moreover, I don't think '/var/www/' a valid resource name.
Either use different "logical" names for each File, or use different
processors for a single File.

I think you want something like:

my_resource = static.File(PATH)
my_resource.processors = { '.pt' : PTResource,  '.rst' : RSTResource}
my_resource.indexNames = [ 'index.pt',  'index.rst' ]
root.putChild('foo', my_resource)


Eric.
From olilau.list.1 at gmail.com  Sun Nov 27 11:47:38 2005
From: olilau.list.1 at gmail.com (Olivier Laurent)
Date: Sun Nov 27 11:47:41 2005
Subject: [Twisted-web] Serving different resource types from the same
	directory
In-Reply-To: <e012d6b50511270930g36a3abc1k926857bd0aa4a8fc@mail.gmail.com>
References: <20051127171254.GA20237@debian>
	<e012d6b50511270930g36a3abc1k926857bd0aa4a8fc@mail.gmail.com>
Message-ID: <3b21e64c0511271047m4e8ba268i@mail.gmail.com>

On 27/11/05, Eric Faurot <eric.faurot@gmail.com> wrote:
> On 11/27/05, Olivier Laurent <olilau.list.1@gmail.com> wrote:
> > [...]
>
> The point of the resource name is to differenciate it from its siblings.
> If you give the same name to both of course it does not work.
> Moreover, I don't think '/var/www/' a valid resource name.
> Either use different "logical" names for each File, or use different
> processors for a single File.
>
> I think you want something like:
>
> my_resource = static.File(PATH)
> my_resource.processors = { '.pt' : PTResource,  '.rst' : RSTResource}

That's it. One resource with several processors.

Thank you very much.

--
Olivier Laurent

From p.mayers at imperial.ac.uk  Sun Nov 27 14:31:41 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun Nov 27 14:31:53 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <D3346953-9BFD-4A5D-A710-F99BFFFE8EA7@dreid.org>
References: <20051117114727.10365.819776455.divmod.quotient.8771@ohm>
	<D3346953-9BFD-4A5D-A710-F99BFFFE8EA7@dreid.org>
Message-ID: <438A25BD.4010003@imperial.ac.uk>

David Reid wrote:
>>>  c) Exarkun expressed a strong (ok, mandatory) preference for the
>>>     use of tw.cred in any Authentication solution.  However, it was
>>>     noted that tw.cred does not allow for challenge-response
>>>     authentication mechanisms (which all of mine are).  Specific
>>>     examples were noted: twisted.protocols.sip, SASL, OTP
>>
>> Hmm.  How did you get this idea?  Cred's design was specifically to 
>> facilitate challenge-response authentication.  That's why login() 
>> takes credentials and returns a Deferred.  The assumption is that the 
>> credentials object will encapsulate whatever facets of the user's 
>> connection are required to do the negotiation process.
> 
> While it might be a valid assumption, there is no common public 
> interface provided to facilitate it.  Perhaps because no one knows what 
> that should look like, perhaps because no one felt it was necessary.  
> But I do believe that something like twisted.protocols.sip.IAuthorizer, 
> that allows for an arbitrary number of round trips should be in cred, 
> either the ICredentials interface should be extended (probably through a 
> subclass) or a new interface should be created.  I'm toying with some 
> ideas of how to best do this, but I don't really "get" cred so if you 
> have any requirements other than arbitrary number of round trips, let me 
> know so i can take those into account now rather than later.
> 

I've been thinking more about this and I can indeed now see a slight 
impedance mismatch that I haven't yet thought my way around. I got here 
from thinking about implementing Negotiate support using PyGSS.

Exarkun and I posted examples of how one might do arbitrary 
challenge-response by making the creds a proxy object to the protocol 
instance, and I waved my hands saying "HTTP is a bit more hard because 
of the statelessness / request-based nature of the protocol".

The best I've come up with that in theory supports >1 auth mechanism[1] 
is here:

http://deadbeefbabe.org/paste/2249

To "match" HTTP to t.cred, it seems the "credentials" *are* the HTTP 
request object (which in fact is true, given how the HTTP spec is worded 
I think?). There's then a checker that can "check" HTTP requests against 
sub-mechanisms, and if none work then one or all of them can challenge 
the request.

This seems somewhat hackish as the "checker" then has to know about 
"name: value" rfc2822-style protocol PDUs, as opposed to just the 
elements of the auth algorithm. It might be more palatable if you could 
somehow "chain" checkers - e.g. return an IDigestCreds from 
requestAvatarId, or maybe have some kind of 2-pass thing?

[FreeRadius has an interesting thing in it's "authorize" config section 
where you first pass the request through the "authorize" section to 
determine how to authenticate it (and optionally return there and then 
with challenges etc.) then pass it through just one module as defined by 
the auth-type. This will mean nothing to you unless you've seen it, but 
that's what I mean by 2-pass]

On the other hand, this is a very flexible system as it permits you to 
allow based on other portions of the request such as arbitrary headers, 
SSL cert for the TCP connection, and so on.

(Note to all: a load of the code is ripped from the t.p.sip code, so 
appropriate credit where it's due. The stateless nonce thing might be 
worth ripping though)

Comments welcome.

[1] t.w.http does not appear to allow you to set headers >1 time e.g.

WWW-Authenticate: basic realm="server.domain.com"
WWW-Authenticate: digest realm="...",foo="bar",...

From stephen at thorne.id.au  Sun Nov 27 18:53:44 2005
From: stephen at thorne.id.au (Stephen Thorne)
Date: Sun Nov 27 18:53:46 2005
Subject: [Twisted-web] Json breakage
In-Reply-To: 0
Message-ID: <20051128015344.1217.1094110957.divmod.quotient.1266@ohm>

Hi,

Cory noted that json is broken, jp told me about it, I looked at it and hated regexps.

This patch *seems* to work, and passes the tests.

The tests are insubstantial and my grasp of python's regular expressions is crap, so I'd like someone to review this patch before I commit it.

Stephen.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: json-fix.patch
Type: application/octet-stream
Size: 1074 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20051128/76dbd0f8/json-fix.obj
From johannes.beigel at brainbot.com  Mon Nov 28 01:54:25 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Mon Nov 28 01:54:31 2005
Subject: [Twisted-web] Some questions regarding nevow.athena
Message-ID: <438AC5C1.6010307@brainbot.com>

Hi.

We are currently using Twisted+Nevow to build web frontends. There's 
some AJAX stuff involved and we are using several JavaScript and Python 
packages and mostly custom code for this.

With the new Nevow versions a restructuring of LiveEvil/Livepage code to 
the new athena package has begun. I looked at it and it looks very 
promising, especially the way it integrates into existing Nevow code and 
templates.

Is there some API documentation/example code available (some more than 
in the SVN tree)?

The code states that the API could be rather unstable. Would you rather 
recommend to wait for a little more mature athena before using it in 
production code?

-jojo


From kevin at janrain.com  Mon Nov 28 19:18:28 2005
From: kevin at janrain.com (Kevin Turner)
Date: Mon Nov 28 19:18:33 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <438A25BD.4010003@imperial.ac.uk>
References: <20051117114727.10365.819776455.divmod.quotient.8771@ohm>
	<D3346953-9BFD-4A5D-A710-F99BFFFE8EA7@dreid.org>
	<438A25BD.4010003@imperial.ac.uk>
Message-ID: <1133230708.4497.125.camel@lobster.janrain.com>

On Sun, 2005-11-27 at 21:31 +0000, Phil Mayers wrote:
> it seems the "credentials" *are* the HTTP 
> request object (which in fact is true, given how the HTTP spec is worded 
> I think?). 

This is what I tried up doing; including the request in the Credentials.
This works a bit, but it really isn't compatible with t.web.guard.
Mostly because my Checker ends up doing things to the request, but Guard
really had plans to do *other* things with that request once
Portal.login returned, so it ends up in a bit of a wreck.  Maybe it
would work better if I used a livepage channel instead of a dumb
request.



From qanewsletter at gmail.com  Mon Nov 28 21:19:12 2005
From: qanewsletter at gmail.com (QnA)
Date: Mon Nov 28 21:19:15 2005
Subject: [Twisted-web] About Authentication/Membership
Message-ID: <87fb457a0511282019p23dd346fh@mail.gmail.com>

Hi,

I am new to Twisted project and my job is to write a few web-pages
under twisted framework.

I want to ask if Twisted provide a user authentication and session
library just like PHP or JSP?? Or may anyone can give me some idea or
articles I should read?

Thank you very much for all kindly help.


Regards,
QnA

From glyph at divmod.com  Mon Nov 28 21:20:21 2005
From: glyph at divmod.com (glyph@divmod.com)
Date: Mon Nov 28 21:20:23 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <1133230708.4497.125.camel@lobster.janrain.com>
Message-ID: <20051129042021.1217.630084610.divmod.quotient.1629@ohm>



On Mon, 28 Nov 2005 18:18:28 -0800, Kevin Turner <kevin@janrain.com> wrote:
>On Sun, 2005-11-27 at 21:31 +0000, Phil Mayers wrote:
>> it seems the "credentials" *are* the HTTP
>> request object (which in fact is true, given how the HTTP spec is worded
>> I think?).
>
>This is what I tried up doing; including the request in the Credentials.
>This works a bit, but it really isn't compatible with t.web.guard.
>Mostly because my Checker ends up doing things to the request, but Guard
>really had plans to do *other* things with that request once
>Portal.login returned, so it ends up in a bit of a wreck.  Maybe it
>would work better if I used a livepage channel instead of a dumb
>request.

It would be better if some specific interface were published via wrapping the request, so that the authentication code could be clearly recognizable.  I don't think it makes sense to think of the request itself as the authentication interface or the credentials, especially as any interesting HTTP-based authentication scheme (even simple challenge/response digest auth) spans multiple requests.

From anand at maunakeatech.com  Tue Nov 29 06:13:20 2005
From: anand at maunakeatech.com (Ananda Tallur)
Date: Tue Nov 29 06:13:29 2005
Subject: [Twisted-web] Concurrency in a twisted.web application
In-Reply-To: <35FF4505-0289-4FE9-8775-1C63B373F74C@maunakeatech.com>
References: <35FF4505-0289-4FE9-8775-1C63B373F74C@maunakeatech.com>
Message-ID: <03EE009E-6110-4108-A34B-14DAA72617F8@maunakeatech.com>

I have sent a question a few days ago, concerning having concurrency  
in a twisted.web application.

I have a web application, which has some features which imply doing  
long calculations.
My need would be to have the web application still responsive to  
other http requests, while processing a calculation triggered by  
another request.

Therefore, more preciserly, for a request which needs to trigger  
calculations, I would like the following scenario to take place :
-> the resource serving the request launches a dedicated thread or  
process to perform the calculation
-> the resource returns a defered, so that twisted.web core gets the  
control back and continues serving other requests
-> when the calculation thread/process has finished its calculation,  
a callback is called to finish processing the request.

I have no idea of how to implement this, and can't find a  
documentation or an example for this kind of concurrent web  
application with twisted.web.

Does anyone has already written something close, or knows a  
documentation / example which could help me ?

I really thank everyone in advance.

Anand

On 16 nov. 05, at 11:50, Ananda Tallur wrote:

> Dear twisted.web developpers and users,
>
> I have written a twisted application for viewing and exporting movies.
> These movies are in a format specific to my company.
> I use : twisted 2.1.0, twisted.web 0.5.0, and nevow 0.5.0 (all html  
> templates are written using nevow).
>
> In this web application, there is a feature for exporting a movie  
> file into mpeg, and sending it to the client web browser (file  
> download).
>
> This feature is handled by a resource object which is a subclass of  
> static.File.
> Exporting a movie into mpeg implies :
> -> opening the original video file
> -> doing the conversion (which can take as long as 1 minute or more)
> -> sending the resulting mpeg file to the browser (file download)
>
> The problem is that while the twisted web application is working  
> handling the export request, the twisted web server is not  
> responsive to any other HTTP request, as long as the video  
> conversion and file transfer is not finished.
>
> I would like to know if there is a standard or recommanded way of  
> setting up concurrency into a twisted.web application.
> And also if there is a sample program available somewhere.
>
> I would like my web application to be still responsive to other  
> HTTP requests while :
> -> file conversion to mpeg is being processing
> -> mpeg file is being transfered to the client browser (which is  
> handled by a static.File subclass resource)
>
>
> Thank you very much for all your answers.
> I appreciate very much working with twisted.web and interested to  
> get more insight into the way twisted core handles requests.
>
> Anand
>
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From andrew-twisted at puzzling.org  Tue Nov 29 07:09:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue Nov 29 07:09:57 2005
Subject: [Twisted-web] Concurrency in a twisted.web application
In-Reply-To: <03EE009E-6110-4108-A34B-14DAA72617F8@maunakeatech.com>
References: <35FF4505-0289-4FE9-8775-1C63B373F74C@maunakeatech.com>
	<03EE009E-6110-4108-A34B-14DAA72617F8@maunakeatech.com>
Message-ID: <20051129140952.GJ18323@home.puzzling.org>

On Tue, Nov 29, 2005 at 02:13:20PM +0100, Ananda Tallur wrote:
[...]
> 
> I have no idea of how to implement this, and can't find a  
> documentation or an example for this kind of concurrent web  
> application with twisted.web.

Tommi's advice to use reactor.spawnProcess is good.

You may find the "mirror" component of Backwards to be helpful -- if I recall
correctly, if a thumbnail is requested but doesn't exist yet, it can spawn a
process to generate it, which sounds very similar to what you are after.

Backwards can be found at:
    http://puzzling.org/computing/software/projects/backwards

-Andrew.


From p.mayers at imperial.ac.uk  Tue Nov 29 10:26:32 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue Nov 29 10:26:44 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <20051129042021.1217.630084610.divmod.quotient.1629@ohm>
References: <20051129042021.1217.630084610.divmod.quotient.1629@ohm>
Message-ID: <438C8F48.2070207@imperial.ac.uk>

glyph@divmod.com wrote:
> 
> 
> On Mon, 28 Nov 2005 18:18:28 -0800, Kevin Turner <kevin@janrain.com> wrote:
>> On Sun, 2005-11-27 at 21:31 +0000, Phil Mayers wrote:
>>> it seems the "credentials" *are* the HTTP
>>> request object (which in fact is true, given how the HTTP spec is worded
>>> I think?).
>>
>> This is what I tried up doing; including the request in the Credentials.
>> This works a bit, but it really isn't compatible with t.web.guard.
>> Mostly because my Checker ends up doing things to the request, but Guard
>> really had plans to do *other* things with that request once
>> Portal.login returned, so it ends up in a bit of a wreck.  Maybe it
>> would work better if I used a livepage channel instead of a dumb
>> request.
> 
> It would be better if some specific interface were published via 
> wrapping the request, so that the authentication code could be clearly 
> recognizable.  I don't think it makes sense to think of the request 

But the data you need to wrap is different for each mechanism, so all 
that does is move the knowledge of 1 protocol (HTTP) out of the checker 
(which I agree is hacky), and put the knowledge of N mechanisms into the 
protocol.

It's possible this is unavoidable with HTTP :o(

> itself as the authentication interface or the credentials, especially as 
> any interesting HTTP-based authentication scheme (even simple 
> challenge/response digest auth) spans multiple requests.

You're probably right. But there are non-obvious (to me at least) 
difficulties, in particular with keeping the HTTP protocol clear of 
knowledge about the specifics of the auth mechanisms, permitting >1 
WWW-Authenticate challenge header, and keeping the HTTP server free of 
state to route challenge responses back to the appropriate deferreds 
(memory exhaustion attack waiting to happen). And also permitting the 
obligatory HTML-form-based fallback.

I'm having difficulty seeing what it would look like, especially the bit 
of allowing a single portal and list of checkers to support the 
multi-mechanism bit.

You need something pam-like or similar to traverse the checker list with 
"empty" creds, allow all checkers to challenge for their mechanism, then 
pass the challenge-response back to just the single mechanism that's chosen.

At the moment, the best I can come up with is:

class Request(http.Request):
   def process(self):
     variousCreds = []

     if self.isSecure():
       # Can't "challenge" at this stage, he doesn't need to know
       # about us
       variousCreds.append(SSLClientCert(self.sslFoo))

     authz = self.getHeader('Authorization')
     if authz:
       mech, rest = authz.split(' ', 1)
       mech = mech.lower()
       mechCreds = httpMechWrapperFactory(mech, rest, self)
       variousCreds.append(mechCreds)

     # other stuff goes here e.g. URL arguments, pubcookie cookies, etc.

     self.portal.login(variousCreds)

class MultiPortal(Portal):
   def login(self, credlist):
     for c in self.checkers:
       # All or a subset...
       if c.canHandle(credlist):
         return c.login(credlist)
     for c in self.checkers:
       c.maybeChallenge(credlist)

...which starts to look very different from cred as-is

Perhaps this comes from a misunderstanding in the goals? Am I right to 
assume we want to support both the HTTP-standard mechs and also 
HTML-form-based ones? Am I right in assuming >1 mechanism challenge is a 
wanted?

The counter question is, if not, can I assume whatever replaces guard 
will be swappable-out without breaking sessions and/or livepage?

From exarkun at divmod.com  Tue Nov 29 18:49:12 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue Nov 29 18:49:20 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <438C8F48.2070207@imperial.ac.uk>
Message-ID: <20051130014912.1217.626791999.divmod.quotient.1934@ohm>

On Tue, 29 Nov 2005 17:26:32 +0000, Phil Mayers <p.mayers@imperial.ac.uk> wrote:
>
> [snip]
>
>class MultiPortal(Portal):
>   def login(self, credlist):
>     for c in self.checkers:
>       # All or a subset...
>       if c.canHandle(credlist):
>         return c.login(credlist)
>     for c in self.checkers:
>       c.maybeChallenge(credlist)
>
>...which starts to look very different from cred as-is

I haven't had time to catch up on this thread, but I wanted to point out that it is pretty much always wrong to subclass Portal.  If you ever find yourself doing this, you have found a real case cred does not support or (more likely, and I believe this is case here) you not succeeded in fitting whatever authentication scheme is at hand into cred.

Changing the signature of portal.login() in this manner almost entirely defeats the purpose of cred, because it destroys the general nature of the API.  I cannot use a protocol implemented against the above MultiPortal without having specific knowledge as to this implementation detail, nor can I re-use any existing portal which my application already goes to the trouble to create with it.  This is a bad thing.

Jean-Paul

From alengarbage at yahoo.com  Wed Nov 30 10:04:11 2005
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Wed Nov 30 10:05:31 2005
Subject: [Twisted-web] Error output for bad deferred method signatures?
Message-ID: <20051130170411.12910.qmail@web31515.mail.mud.yahoo.com>

I'm curious why errors aren't reported when deferreds
are fired if the deferred method has a bad signature. 
For example, if the following is run:


import httplib, sys
from twisted.web import client
from twisted.internet import reactor, threads, defer
from twisted.protocols import http
from twisted.python import failure

class getYahoo(object):
    def __init__(self):
        factory =
client.HTTPClientFactory("http://www.yahoo.com")
        reactor.connectTCP("www.yahoo.com",80,factory)
       
factory.deferred.addCallback(self._gotResponse,
factory)
        factory.deferred.addErrback(self._errSendReq,
factory)
        self.deferred = factory.deferred

    def _gotResponse(self, resp, factory):
        print "yeah!"
        print resp

    def _errSendReq(self, err, factory):
        print "shucks!"
        print err

def sendRequest():
    return getYahoo().deferred

if __name__ == '__main__':
    def test(msg):
        print msg
        print respOrErr

    d = sendRequest()
    d.addCallback(test, "success")
    d.addErrback(test, "failure")

    reactor.run()


The deferred _gotResponse() and _errSendReq() fire
perfectly, but the test() function in __main__ is not
called for "success" or "failure".  This is expected
as the signature is wrong -- it should be
'test(respOrErr, msg)'.  What isn't clear [to me] is
why this doesn't produce an error upon firing the
deferred, but instead produces an error when the
reactor shuts down [via ctrl-c], which could be hours
later.

I have an instance of this that is more severe, where
the error output is *never* produced (maybe because of
threading?).

Is this the expected behavior, or am I doing something
atrocious to produce it?

  Thanks,
  Lenny


		
__________________________________ 
Yahoo! Music Unlimited 
Access over 1 million songs. Try it free. 
http://music.yahoo.com/unlimited/

From p.mayers at imperial.ac.uk  Wed Nov 30 14:04:16 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed Nov 30 14:04:27 2005
Subject: [Twisted-web] Sessions and Authentication for Web2
In-Reply-To: <20051130014912.1217.626791999.divmod.quotient.1934@ohm>
References: <20051130014912.1217.626791999.divmod.quotient.1934@ohm>
Message-ID: <438E13D0.3070403@imperial.ac.uk>

Jean-Paul Calderone wrote:
> On Tue, 29 Nov 2005 17:26:32 +0000, Phil Mayers 
> <p.mayers@imperial.ac.uk> wrote:
>>
>> [snip]
>>
>> class MultiPortal(Portal):
>>   def login(self, credlist):
>>     for c in self.checkers:
>>       # All or a subset...
>>       if c.canHandle(credlist):
>>         return c.login(credlist)
>>     for c in self.checkers:
>>       c.maybeChallenge(credlist)
>>
>> ...which starts to look very different from cred as-is
> 
> I haven't had time to catch up on this thread, but I wanted to point out 
> that it is pretty much always wrong to subclass Portal.  If you ever 

Yes, wanting to is a symptom of the underlying problem, which is that 
for HTTP and Digest auth, you have to send the initial challenge back 
with the 401. To do this, you have to communicate with the checker to 
generate said challenge, or implement the digest algo. inside the HTTP 
proto, which is way nasty and breaks sharing. This either means:

  * "just deciding" that the client *will* use digest, creating a digest 
creds object that will issue the 401 and challenge, and calling "login" 
with it - losing auth mechanism negotiation support, which is nasty

  * holding a reference to a "challenge" method on the digest checker, 
and potentially any other challenge-with-401 mechs, breaking the 
encapsulation, which is nasty

  * adding a pre-login-stage mechanism to portal, or otherwise futzing 
the API, which is nasty

I would add that the listCredentialInterfaces method is not really 
sufficient for a completely configuration-free decision on what 
mechanisms to present the client - some (e.g. plain/login) may only be 
available over certain channels depending on policy, and deciding that 
policy may require a method call into the checker *instance* with a 
protocol-neutral description of the "connection characteristics" (e.g. 
the SSF in SASL)

It is, in general, a non-trivial problem in any environment. None of 
these issues are specific to Twisted. Witness the hassle GSSAPI, SASL 
and EAP cause. But to drag this back on topic, the original discussion 
was that t.web2 was MANDATED to use t.cred for authentication, and it 
seems to me at least there are unanswered questions about how it will work.

I'm sure it will, and am interested in working out how - hence the 
flurry of emails. Perhaps I'll have another go next week (since I am 
moving datacentre for the rest of this one)

From maillists at ivsn.com  Wed Nov 30 14:44:03 2005
From: maillists at ivsn.com (Paul Reznicek)
Date: Wed Nov 30 14:44:47 2005
Subject: [Twisted-web] Nevow Athena LiveFragment without allowedMethods
Message-ID: <438E1D23.3020800@ivsn.com>

Hi JP & co.,

I've just started playing with current ATHENA - very nice !!!

Is there any deeper security reason to use the "allowedMethods" mapping additionally
to the simple fact, that a fragment implements a method only if it is necessary?
If not, please consider to apply attached patch. It makes the code and use of it
a little bit simpler.

Thanks for your great work, best regards,
Paul Reznicek
-------------- next part --------------
Index: nevow/athena.py 
=================================================================== 
--- nevow/athena.py	(Revision 3368) 
+++ nevow/athena.py	(Arbeitskopie) 
@@ -407,20 +407,18 @@ 
  
             <form onsubmit="Nevow.Athena.refByDOM(this).callRemote('foo', bar); return false;"> 
  
-    By default, only methods named in the C{allowedMethods} mapping 
-    may be invoked by the client. 
     """ 
  
-    allowedMethods = {} 
- 
     def rend(self, context, data): 
         myID = self.page.addLocalObject(self) 
         context.fillSlots('nevow:athena_id', myID) 
         return super(LiveFragment, self).rend(context, data) 
  
     def locateMethod(self, ctx, methodName): 
-        if methodName in self.allowedMethods: 
-            return getattr(self, methodName) 
+        if not methodName.startswith('_'): 
+            method = getattr(self, methodName, None) 
+            if method: 
+                return method 
         raise AttributeError(methodName) 
  
  
Index: examples/athenademo/athenatest.py 
=================================================================== 
--- examples/athenademo/athenatest.py	(Revision 3368) 
+++ examples/athenademo/athenatest.py	(Arbeitskopie) 
@@ -23,7 +23,6 @@ 
         tags.form(action='#', onsubmit='return test(test_ClientToServerArgumentSerialization(this));')[ 
             tags.input(type='submit', value='Test Client To Server Argument Serialization')]]) 
  
-    allowedMethods = {'test': True} 
     def test(self, i, f, s, l, d): 
         self.assertEquals(i, 1) 
         self.assertEquals(f, 1.5) 
@@ -65,7 +64,6 @@ 
         tags.form(action='#', onsubmit='return test(test_ClientToServerResultSerialization(this));')[ 
             tags.input(type='submit', value='Test Client To Server Result Serialization')]]) 
  
-    allowedMethods = {'test': True} 
     def test(self, i, f, s, l, d): 
         return (i, f, s, l, d) 
  
@@ -104,7 +102,6 @@ 
             tags.input(type='submit', value='Test Client To Server Asynchronous Exception Result')]]) 
  
  
-    allowedMethods = {'testSync': True, 'testAsync': True} 
     def testSync(self, s): 
         raise Exception(s) 
  
@@ -135,7 +132,6 @@ 
         tags.form(action='#', onsubmit='return test(test_ServerToClientArgumentSerialization(this));')[ 
             tags.input(type='submit', value='Test Server To Client Argument Serialization')]]) 
  
-    allowedMethods = {'test': True} 
     def test(self): 
         return self.page.callRemote('test_Reverse_ServerToClientArgumentSerialization', 1, 1.5, u'hello', {u'world': u'value'}); 
  
@@ -159,7 +155,6 @@ 
         tags.form(action='#', onsubmit='return test(test_ServerToClientResultSerialization(this));')[ 
             tags.input(type='submit', value='Test Server To Client Result Serialization')]]) 
  
-    allowedMethods = {'test': True} 
     def test(self): 
         def cbResults(result): 
             self.assertEquals(result[0], 1) 
Index: examples/athenademo/typeahead.py 
=================================================================== 
--- examples/athenademo/typeahead.py	(Revision 3368) 
+++ examples/athenademo/typeahead.py	(Arbeitskopie) 
@@ -20,7 +20,6 @@ 
  
 class TypeAheadFieldFragment(athena.LiveFragment): 
     docFactory = loaders.stan(T.input(type="text", id="typehere", **athena.liveFragmentID)) 
-    allowedMethods =  { 'loadDescription' : True } 
  
     def loadDescription(self, typed): 
         if typed == '': 
Index: examples/livefragments/livefrag.py 
=================================================================== 
--- examples/livefragments/livefrag.py	(Revision 3368) 
+++ examples/livefragments/livefrag.py	(Arbeitskopie) 
@@ -40,11 +40,10 @@ 
  
     def __init__(self, label, *a, **kw): 
         super(CooperativeFrag, self).__init__(*a, **kw) 
-        self.allowedMethods = {label: True} 
         setattr(self, label, lambda: unicode(label)) 
  
     def render_submit(self, ctx, data): 
-        return "submitIt(this, '%s'); return false;" % (self.allowedMethods.keys()[0],) 
+        return "submitIt(this, 'label'); return false;" 
  
 class Root(rend.Page): 
     def child_(self, ctx): 
From maillists at ivsn.com  Wed Nov 30 15:29:29 2005
From: maillists at ivsn.com (Paul Reznicek)
Date: Wed Nov 30 15:30:08 2005
Subject: [Twisted-web] Nevow Athena LiveFragment without allowedMethods
In-Reply-To: <438E1D23.3020800@ivsn.com>
References: <438E1D23.3020800@ivsn.com>
Message-ID: <438E27C9.40403@ivsn.com>

...
Sorry, I've introduced an error in livefrag.py, here corrected patch...

Paul
-------------- next part --------------
Index: livefrag.py 
=================================================================== 
--- livefrag.py	(Revision 3368) 
+++ livefrag.py	(Arbeitskopie) 
@@ -40,11 +40,10 @@ 
  
     def __init__(self, label, *a, **kw): 
         super(CooperativeFrag, self).__init__(*a, **kw) 
-        self.allowedMethods = {label: True} 
         setattr(self, label, lambda: unicode(label)) 
  
     def render_submit(self, ctx, data): 
-        return "submitIt(this, '%s'); return false;" % (self.allowedMethods.keys()[0],) 
+        return "submitIt(this, '%s'); return false;" % label 
  
 class Root(rend.Page): 
     def child_(self, ctx): 
From exarkun at divmod.com  Wed Nov 30 17:13:14 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed Nov 30 17:13:15 2005
Subject: [Twisted-web] Nevow Athena LiveFragment without allowedMethods
In-Reply-To: <438E1D23.3020800@ivsn.com>
Message-ID: <20051201001314.1217.924541710.divmod.quotient.2242@ohm>

On Wed, 30 Nov 2005 22:44:03 +0100, Paul Reznicek <maillists@ivsn.com> wrote:
>Hi JP & co.,
>
>I've just started playing with current ATHENA - very nice !!!

Hi Paul, thanks :)

>
>Is there any deeper security reason to use the "allowedMethods" mapping 
>additionally
>to the simple fact, that a fragment implements a method only if it is 
>necessary?

I'm wary of making it possible to accidentally expose a method to the client.  Without allowMethods, it seems to be a quite simple to accidentally expose things.  For example, with your patch, the following methods can be invoked by the client on any LiveFragment:

  get
  rend
  remember
  rememberStuff
  child
  renderer
  render_sequence
  render_mapping
  render_string
  render_xml
  render_data
  macro
  getBindingNames
  getBinding
  getDefault
  postForm

In that list, only postForm looks particularly scary, and many of these take objects which cannot currently be passed to methods by the client (ie, the context), but it is still quite a long list, and making it possible for the client to call these methods seems unnecessarily risky to me.

If it seems okay to you, you can always create a LiveFragment subclass in your project with the locateMethod implementation included in your patch and always subclass that instead of LiveFragment.

With the above list of methods in mind, does it make more sense why allowedMethods is present?

Jean-Paul

From maillists at ivsn.com  Wed Nov 30 22:14:25 2005
From: maillists at ivsn.com (Paul Reznicek)
Date: Wed Nov 30 22:15:05 2005
Subject: [Twisted-web] Nevow Athena LiveFragment without allowedMethods
In-Reply-To: <20051201001314.1217.924541710.divmod.quotient.2242@ohm>
References: <20051201001314.1217.924541710.divmod.quotient.2242@ohm>
Message-ID: <438E86B1.5080103@ivsn.com>

Jean-Paul Calderone wrote:
> I'm wary of making it possible to accidentally expose a method to the 
> client.  Without allowMethods, it seems to be a quite simple to 
> accidentally expose things.  For example, with your patch, the following 
> methods can be invoked by the client on any LiveFragment:
> 
>  get
>  rend
...
>  postForm
> 
...
> With the above list of methods in mind, does it make more sense why 
> allowedMethods is present?

Dear Jean-Paul,

You're right, it could be dangerous, but I'm soooo lazy for typing too much!

Attached is a revisited patch, that fulfill the security and make the allowedMethods
at the same time unnecessary - this version allow only usage of NEW methods
in the subclass, no superclass methods or overriding of them are accepted, try it...
Could it be a way?

Paul
-------------- next part --------------
Index: athena.py 
=================================================================== 
--- athena.py	(Revision 3368) 
+++ athena.py	(Arbeitskopie) 
@@ -407,21 +407,19 @@ 
  
             <form onsubmit="Nevow.Athena.refByDOM(this).callRemote('foo', bar); return false;"> 
  
-    By default, only methods named in the C{allowedMethods} mapping 
-    may be invoked by the client. 
     """ 
  
-    allowedMethods = {} 
- 
     def rend(self, context, data): 
         myID = self.page.addLocalObject(self) 
         context.fillSlots('nevow:athena_id', myID) 
         return super(LiveFragment, self).rend(context, data) 
  
     def locateMethod(self, ctx, methodName): 
-        if methodName in self.allowedMethods: 
-            return getattr(self, methodName) 
-        raise AttributeError(methodName) 
+        if not hasattr(super(LiveFragment, self), methodName): 
+            method = getattr(self, methodName, None) 
+            if method: 
+                return method 
+        raise AttributeError, 'Method "%s" not allowed' % methodName 
  
  
 # Helper for docFactories defined with stan: 
From maillists at ivsn.com  Wed Nov 30 23:47:28 2005
From: maillists at ivsn.com (Paul Reznicek)
Date: Wed Nov 30 23:48:11 2005
Subject: [Twisted-web] lightweight forms thing for use with athena ???
Message-ID: <438E9C80.4060700@ivsn.com>

glyph wrote:
 > Yep.  I predict that will be happening soon - as soon as we manage to fix
 > the athena/FF15 bugs and do some more testing with IE, as well as come up with
 > *a lightweight forms thing for use with athena.*

Hi ALL Nevow/Athena designers and fans,

"lightweight forms for use with athena" is exactly what I was looking for
while I've started playing with athena yesterday!

I'm looking for a solution to replace formless.annotate.XX with a live version
of forms, whereby among other things:
- required fields labels are *bold* as long as they are empty or with wrong
   content and after leaving the input field, the label change accordingly
- value checked input's labels are *red* as long as the entered value did not
   match the allowed range of values (+ there could be a live usage hint,
   displayed only during the input has wrong/missing value)
- the fire (submit) button is disabled as long as the form is not complete
   [+ maybe change the value from _('Please fill all necessary fields')
      to _('Process') depending on form status]
- there can be more buttons with special functions, i.ex.: date manipulation
   (now | +/- day/month/year) for date entry fields and lot of others
- and of course all of this usable together with i18n part of Nevow, so that
   the messages and labels are in the user's selected language ...

Is there any kind of work on this target?
- yes: I'd like to join to share and push the efforts!
- not: Is somebody looking for the same, so it make sense to publish
        partial results of my work?

Paul

