From blix at sophiasuchtig.com  Tue Aug  5 19:30:23 2008
From: blix at sophiasuchtig.com (Govind Salinas)
Date: Tue Aug  5 19:30:27 2008
Subject: [Twisted-web] Setting up a project.
In-Reply-To: <5d46db230808051559t28f47ef4we46471fac41c9928@mail.gmail.com>
References: <5d46db230808051559t28f47ef4we46471fac41c9928@mail.gmail.com>
Message-ID: <5d46db230808051630h216dee76g54af35db8e74621a@mail.gmail.com>

Hi Folks,

I am trying to set up an application that uses twisted.web for doing
some ad-hoc serving of data.  If you are familiar with mercurial, what
i am doing is very similar to the "hg serve" command except it is for
use with git.

So my question is, how should I compose the project.  The how-tos and
examples left me not sure of what I should do.  I have something that
runs and can serve up mako templates, but that is all it can do since
I am doing everything manually.  I would prefer not to have to code in
serving things like css pages, 404 pages etc.  I am sure this is
already in twisted.web somewhere.


Let me give you some information about the set up I have .  Basically
I have a python program running somewhere.  I will have a default set
of files that serve the content a particular way.  The default set
will contain mako templates[1], style sheets and perhaps some images.
So I need a way to kick off the mako templates based on the URL.  The
templates may include each other.

Here is the layout

content-dir/
   __config__.py -- This is a file that currently just sets up the mapping
                            between a regex that selects a page and a path to
                            where that page's template is under the content-dir
   main.html -- The html files here are really the mako templates
   main.css
   etc...

My server class takes in a template dir, loads the config and starts a
server.  When it gets a request it matches it against the regexes and
runs the template.  There should be some initialization that sets up
objects that get passed to the template (in addition to values from
the regex parsing). This is all pretty brain-dead code.

I was hoping for some guidance on a better strategy for doing this.
Any help would be appreciated.  Bonus points if it is something that
could easily be re-used on another webserver if someone wanted to host
this on an existing website.

I tried to post this before signing up to the list and I was rejected.  I don't
know if you guys consider that a problem.

[1] I am only using mako because it seems to suit my needs from a
templating perspective.   If there is something built into twisted
that will do the job as well, then that would be one less dependency
that I have.

Thank You in Advance,
Govind

From szu_ljm at 163.com  Tue Aug  5 20:59:49 2008
From: szu_ljm at 163.com (=?GBK?B?wfW9qMP0?=)
Date: Tue Aug  5 20:59:57 2008
Subject: [Twisted-web] Setting up a project.
In-Reply-To: <5d46db230808051630h216dee76g54af35db8e74621a@mail.gmail.com>
References: <5d46db230808051630h216dee76g54af35db8e74621a@mail.gmail.com>
	<5d46db230808051559t28f47ef4we46471fac41c9928@mail.gmail.com>
Message-ID: <21553535.482401217984389136.JavaMail.coremail@bj163app140.163.com>

dGhhbmsgeW91IHZlcnkgbXVjaCAhIGkgd2lsbCB0aGFuayBhYm91dCAKCgrlnKgyMDA4LTA4LTA2
77yMIkdvdmluZCBTYWxpbmFzIiA8YmxpeEBzb3BoaWFzdWNodGlnLmNvbT4g5YaZ6YGT77yaCgoK
SGkgRm9sa3MsCgpJIGFtIHRyeWluZyB0byBzZXQgdXAgYW4gYXBwbGljYXRpb24gdGhhdCB1c2Vz
IHR3aXN0ZWQud2ViIGZvciBkb2luZwpzb21lIGFkLWhvYyBzZXJ2aW5nIG9mIGRhdGEuICBJZiB5
b3UgYXJlIGZhbWlsaWFyIHdpdGggbWVyY3VyaWFsLCB3aGF0CmkgYW0gZG9pbmcgaXMgdmVyeSBz
aW1pbGFyIHRvIHRoZSAiaGcgc2VydmUiIGNvbW1hbmQgZXhjZXB0IGl0IGlzIGZvcgp1c2Ugd2l0
aCBnaXQuCgpTbyBteSBxdWVzdGlvbiBpcywgaG93IHNob3VsZCBJIGNvbXBvc2UgdGhlIHByb2pl
Y3QuICBUaGUgaG93LXRvcyBhbmQKZXhhbXBsZXMgbGVmdCBtZSBub3Qgc3VyZSBvZiB3aGF0IEkg
c2hvdWxkIGRvLiAgSSBoYXZlIHNvbWV0aGluZyB0aGF0CnJ1bnMgYW5kIGNhbiBzZXJ2ZSB1cCBt
YWtvIHRlbXBsYXRlcywgYnV0IHRoYXQgaXMgYWxsIGl0IGNhbiBkbyBzaW5jZQpJIGFtIGRvaW5n
IGV2ZXJ5dGhpbmcgbWFudWFsbHkuICBJIHdvdWxkIHByZWZlciBub3QgdG8gaGF2ZSB0byBjb2Rl
IGluCnNlcnZpbmcgdGhpbmdzIGxpa2UgY3NzIHBhZ2VzLCA0MDQgcGFnZXMgZXRjLiAgSSBhbSBz
dXJlIHRoaXMgaXMKYWxyZWFkeSBpbiB0d2lzdGVkLndlYiBzb21ld2hlcmUuCgoKTGV0IG1lIGdp
dmUgeW91IHNvbWUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNldCB1cCBJIGhhdmUgLiAgQmFzaWNh
bGx5CkkgaGF2ZSBhIHB5dGhvbiBwcm9ncmFtIHJ1bm5pbmcgc29tZXdoZXJlLiAgSSB3aWxsIGhh
dmUgYSBkZWZhdWx0IHNldApvZiBmaWxlcyB0aGF0IHNlcnZlIHRoZSBjb250ZW50IGEgcGFydGlj
dWxhciB3YXkuICBUaGUgZGVmYXVsdCBzZXQKd2lsbCBjb250YWluIG1ha28gdGVtcGxhdGVzWzFd
LCBzdHlsZSBzaGVldHMgYW5kIHBlcmhhcHMgc29tZSBpbWFnZXMuClNvIEkgbmVlZCBhIHdheSB0
byBraWNrIG9mZiB0aGUgbWFrbyB0ZW1wbGF0ZXMgYmFzZWQgb24gdGhlIFVSTC4gIFRoZQp0ZW1w
bGF0ZXMgbWF5IGluY2x1ZGUgZWFjaCBvdGhlci4KCkhlcmUgaXMgdGhlIGxheW91dAoKY29udGVu
dC1kaXIvCiAgIF9fY29uZmlnX18ucHkgLS0gVGhpcyBpcyBhIGZpbGUgdGhhdCBjdXJyZW50bHkg
anVzdCBzZXRzIHVwIHRoZSBtYXBwaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXR3
ZWVuIGEgcmVnZXggdGhhdCBzZWxlY3RzIGEgcGFnZSBhbmQgYSBwYXRoIHRvCiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICB3aGVyZSB0aGF0IHBhZ2UncyB0ZW1wbGF0ZSBpcyB1bmRlciB0aGUg
Y29udGVudC1kaXIKICAgbWFpbi5odG1sIC0tIFRoZSBodG1sIGZpbGVzIGhlcmUgYXJlIHJlYWxs
eSB0aGUgbWFrbyB0ZW1wbGF0ZXMKICAgbWFpbi5jc3MKICAgZXRjLi4uCgpNeSBzZXJ2ZXIgY2xh
c3MgdGFrZXMgaW4gYSB0ZW1wbGF0ZSBkaXIsIGxvYWRzIHRoZSBjb25maWcgYW5kIHN0YXJ0cyBh
CnNlcnZlci4gIFdoZW4gaXQgZ2V0cyBhIHJlcXVlc3QgaXQgbWF0Y2hlcyBpdCBhZ2FpbnN0IHRo
ZSByZWdleGVzIGFuZApydW5zIHRoZSB0ZW1wbGF0ZS4gIFRoZXJlIHNob3VsZCBiZSBzb21lIGlu
aXRpYWxpemF0aW9uIHRoYXQgc2V0cyB1cApvYmplY3RzIHRoYXQgZ2V0IHBhc3NlZCB0byB0aGUg
dGVtcGxhdGUgKGluIGFkZGl0aW9uIHRvIHZhbHVlcyBmcm9tCnRoZSByZWdleCBwYXJzaW5nKS4g
VGhpcyBpcyBhbGwgcHJldHR5IGJyYWluLWRlYWQgY29kZS4KCkkgd2FzIGhvcGluZyBmb3Igc29t
ZSBndWlkYW5jZSBvbiBhIGJldHRlciBzdHJhdGVneSBmb3IgZG9pbmcgdGhpcy4KQW55IGhlbHAg
d291bGQgYmUgYXBwcmVjaWF0ZWQuICBCb251cyBwb2ludHMgaWYgaXQgaXMgc29tZXRoaW5nIHRo
YXQKY291bGQgZWFzaWx5IGJlIHJlLXVzZWQgb24gYW5vdGhlciB3ZWJzZXJ2ZXIgaWYgc29tZW9u
ZSB3YW50ZWQgdG8gaG9zdAp0aGlzIG9uIGFuIGV4aXN0aW5nIHdlYnNpdGUuCgpJIHRyaWVkIHRv
IHBvc3QgdGhpcyBiZWZvcmUgc2lnbmluZyB1cCB0byB0aGUgbGlzdCBhbmQgSSB3YXMgcmVqZWN0
ZWQuICBJIGRvbid0Cmtub3cgaWYgeW91IGd1eXMgY29uc2lkZXIgdGhhdCBhIHByb2JsZW0uCgpb
MV0gSSBhbSBvbmx5IHVzaW5nIG1ha28gYmVjYXVzZSBpdCBzZWVtcyB0byBzdWl0IG15IG5lZWRz
IGZyb20gYQp0ZW1wbGF0aW5nIHBlcnNwZWN0aXZlLiAgIElmIHRoZXJlIGlzIHNvbWV0aGluZyBi
dWlsdCBpbnRvIHR3aXN0ZWQKdGhhdCB3aWxsIGRvIHRoZSBqb2IgYXMgd2VsbCwgdGhlbiB0aGF0
IHdvdWxkIGJlIG9uZSBsZXNzIGRlcGVuZGVuY3kKdGhhdCBJIGhhdmUuCgpUaGFuayBZb3UgaW4g
QWR2YW5jZSwKR292aW5kCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fXwpUd2lzdGVkLXdlYiBtYWlsaW5nIGxpc3QKVHdpc3RlZC13ZWJAdHdpc3RlZG1hdHJp
eC5jb20KaHR0cDovL3R3aXN0ZWRtYXRyaXguY29tL2NnaS1iaW4vbWFpbG1hbi9saXN0aW5mby90
d2lzdGVkLXdlYgogCi0tLS0tLS0tLS0tLS0tIG5leHQgcGFydCAtLS0tLS0tLS0tLS0tLQpBbiBI
VE1MIGF0dGFjaG1lbnQgd2FzIHNjcnViYmVkLi4uClVSTDogaHR0cDovL3R3aXN0ZWRtYXRyaXgu
Y29tL3BpcGVybWFpbC90d2lzdGVkLXdlYi9hdHRhY2htZW50cy8yMDA4MDgwNi81MWMwMGUyOC9h
dHRhY2htZW50Lmh0bQo=
From p.mayers at imperial.ac.uk  Wed Aug  6 05:27:31 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed Aug  6 05:28:10 2008
Subject: [Twisted-web] Setting up a project.
In-Reply-To: <5d46db230808051630h216dee76g54af35db8e74621a@mail.gmail.com>
References: <5d46db230808051559t28f47ef4we46471fac41c9928@mail.gmail.com>
	<5d46db230808051630h216dee76g54af35db8e74621a@mail.gmail.com>
Message-ID: <20080806092731.GA1283@wildfire.net.ic.ac.uk>

On Tue, Aug 05, 2008 at 06:30:23PM -0500, Govind Salinas wrote:
>Hi Folks,
>
>I am trying to set up an application that uses twisted.web for doing
>some ad-hoc serving of data.  If you are familiar with mercurial, what
>i am doing is very similar to the "hg serve" command except it is for
>use with git.
>
>So my question is, how should I compose the project.  The how-tos and
>examples left me not sure of what I should do.  I have something that
>runs and can serve up mako templates, but that is all it can do since
>I am doing everything manually.  I would prefer not to have to code in
>serving things like css pages, 404 pages etc.  I am sure this is
>already in twisted.web somewhere.


You haven't really given enough information.

I presume you're using twisted.web "Resource" classes and http server?

>
>
>Let me give you some information about the set up I have .  Basically
>I have a python program running somewhere.  I will have a default set
>of files that serve the content a particular way.  The default set
>will contain mako templates[1], style sheets and perhaps some images.
>So I need a way to kick off the mako templates based on the URL.  The
>templates may include each other.
>
>Here is the layout
>
>content-dir/
>   __config__.py -- This is a file that currently just sets up the mapping
>                            between a regex that selects a page and a path to
>                            where that page's template is under the 
>                            content-dir
>   main.html -- The html files here are really the mako templates
>   main.css
>   etc...
>
>My server class takes in a template dir, loads the config and starts a
>server.  When it gets a request it matches it against the regexes and
>runs the template.  There should be some initialization that sets up
>objects that get passed to the template (in addition to values from
>the regex parsing). This is all pretty brain-dead code.

Why does it need to be anything more than that? What's wrong with the 
current code?

>
>I was hoping for some guidance on a better strategy for doing this.

Better how?

>Any help would be appreciated.  Bonus points if it is something that
>could easily be re-used on another webserver if someone wanted to host
>this on an existing website.

I don't understand that bit.

>
>I tried to post this before signing up to the list and I was rejected.  I don't
>know if you guys consider that a problem.
>
>[1] I am only using mako because it seems to suit my needs from a
>templating perspective.   If there is something built into twisted
>that will do the job as well, then that would be one less dependency
>that I have.

You probably want to look at the Nevow toolkit which contains:

 * A slightly better application server / resource object hierarhcy on 
top of twisted.web - my understanding is this will eventually be 
backported into twisted.web

 * An XHTML & native-python deferred-aware templating engine

 * An AJAX/COMET server called Athena

A little more detail about what's wrong with the current system would be 
helpful.

From blix at sophiasuchtig.com  Wed Aug  6 12:13:16 2008
From: blix at sophiasuchtig.com (Govind Salinas)
Date: Wed Aug  6 12:13:19 2008
Subject: Fwd: [Twisted-web] Setting up a project.
In-Reply-To: <mailman.76090.1218038609.30706.twisted-web@twistedmatrix.com>
References: <mailman.76090.1218038609.30706.twisted-web@twistedmatrix.com>
Message-ID: <5d46db230808060913x72558debl44ea50f81d291efd@mail.gmail.com>

On Wed, Aug 6, 2008 at 4:27 AM, Phil Mayers <p.mayers@imperial.ac.uk> wrote:
> On Tue, Aug 05, 2008 at 06:30:23PM -0500, Govind Salinas wrote:
>>
>> Hi Folks,
>>
>> I am trying to set up an application that uses twisted.web for doing
>> some ad-hoc serving of data.  If you are familiar with mercurial, what
>> i am doing is very similar to the "hg serve" command except it is for
>> use with git.
>>
>> So my question is, how should I compose the project.  The how-tos and
>> examples left me not sure of what I should do.  I have something that
>> runs and can serve up mako templates, but that is all it can do since
>> I am doing everything manually.  I would prefer not to have to code in
>> serving things like css pages, 404 pages etc.  I am sure this is
>> already in twisted.web somewhere.
>
>
> You haven't really given enough information.
>
> I presume you're using twisted.web "Resource" classes and http server?
>

Yes that is correct.


>> Let me give you some information about the set up I have .  Basically
>> I have a python program running somewhere.  I will have a default set
>> of files that serve the content a particular way.  The default set
>> will contain mako templates[1], style sheets and perhaps some images.
>> So I need a way to kick off the mako templates based on the URL.  The
>> templates may include each other.
>>
>> Here is the layout
>>
>> content-dir/
>>  __config__.py -- This is a file that currently just sets up the mapping
>>                           between a regex that selects a page and a path
>> to
>>                           where that page's template is under the
>>                   content-dir
>>  main.html -- The html files here are really the mako templates
>>  main.css
>>  etc...
>>
>> My server class takes in a template dir, loads the config and starts a
>> server.  When it gets a request it matches it against the regexes and
>> runs the template.  There should be some initialization that sets up
>> objects that get passed to the template (in addition to values from
>> the regex parsing). This is all pretty brain-dead code.
>
> Why does it need to be anything more than that? What's wrong with the
> current code?

There are a few things wrong with my current approach.  One is that it
feels sort of like a hack the way I am doing it.  It doesn't seem like the
right way.  Second, since manually doing things that I normally expect
the web server to be doing,  I expect there are 100 things that I should
be doing that I am not to act like a proper server.  For instance, my
css pages wouldn't load so I am manually setting the content-type,
but *only* for css pages.  If I end up needing other types of files, I
will have to add that in as well.   Another example is that I am having
to roll my own page-not-found implementation.  Aside from setting
the response code to 404, I am not sure what else I need to be doing.

Now, I have been able to get things to work for the simple pages that
I have put together, and it works rather well.  But it seems limited and
fragile.

Is that more clear.

>> I was hoping for some guidance on a better strategy for doing this.
>
> Better how?
>
>> Any help would be appreciated.  Bonus points if it is something that
>> could easily be re-used on another webserver if someone wanted to host
>> this on an existing website.
>
> I don't understand that bit.

This is not too important, I was hoping that there was a "framework" that I
could use that would be portable to other webservers if someone wanted
to do so.

>>
>> I tried to post this before signing up to the list and I was rejected.  I
>> don't
>> know if you guys consider that a problem.
>>
>> [1] I am only using mako because it seems to suit my needs from a
>> templating perspective.   If there is something built into twisted
>> that will do the job as well, then that would be one less dependency
>> that I have.
>
> You probably want to look at the Nevow toolkit which contains:
>
> * A slightly better application server / resource object hierarhcy on top of
> twisted.web - my understanding is this will eventually be backported into
> twisted.web
>
> * An XHTML & native-python deferred-aware templating engine
>
> * An AJAX/COMET server called Athena
>
> A little more detail about what's wrong with the current system would be
> helpful.

I think the problem is that, even having read the howtos, I do not feel like
I am making full use of the libraries in twisted.

I have not yet looked into newvow.  However I have seen mention of .rpy
files in the documentation, but not a lot on the files themselves. Is there
a tutorial or some documentation on how to use rpy files?  By that I mean
what should go inside them, setting up the server is explained in the
howtos.

-Govind

From db3l.net at gmail.com  Wed Aug  6 12:19:39 2008
From: db3l.net at gmail.com (David Bolen)
Date: Wed Aug  6 12:20:01 2008
Subject: [Twisted-web] Re: Setting up a project.
References: <5d46db230808051559t28f47ef4we46471fac41c9928@mail.gmail.com>
	<5d46db230808051630h216dee76g54af35db8e74621a@mail.gmail.com>
Message-ID: <m2iquef750.fsf@valheru.db3l.homeip.net>

"Govind Salinas" <blix@sophiasuchtig.com> writes:

> So my question is, how should I compose the project.  The how-tos and
> examples left me not sure of what I should do.  I have something that
> runs and can serve up mako templates, but that is all it can do since
> I am doing everything manually.  I would prefer not to have to code in
> serving things like css pages, 404 pages etc.  I am sure this is
> already in twisted.web somewhere.

>From the below is sounds like you're actually pretty well along the
appropriate approach with twisted.web.

Twisted.web is a fairly low level package (which to me, has always
been a point in its favor when I've used it).  There isn't a ton of
advanced functionality (like in a high level framework like django, or
turbogears), aside from some helper objects that can handle items like
file transfers or static file serving.  So you do have to do some of
what might be considered mundane work in your code.  But it sounds
like you've already identified a lot of that.

> Let me give you some information about the set up I have .  Basically
> I have a python program running somewhere.  I will have a default set
> of files that serve the content a particular way.  The default set
> will contain mako templates[1], style sheets and perhaps some images.
> So I need a way to kick off the mako templates based on the URL.  The
> templates may include each other.
>
> Here is the layout
>
> content-dir/
>    __config__.py -- This is a file that currently just sets up the mapping
>                             between a regex that selects a page and a path to
>                             where that page's template is under the content-dir
>    main.html -- The html files here are really the mako templates
>    main.css
>    etc...
>
> My server class takes in a template dir, loads the config and starts a
> server.  When it gets a request it matches it against the regexes and
> runs the template.  There should be some initialization that sets up
> objects that get passed to the template (in addition to values from
> the regex parsing). This is all pretty brain-dead code.

Are you saying "brain-dead" in a negative way here, or to imply that
it's boilerplate or something you'd prefer the framework do for you?
With twisted.web, you're pretty much in charge of this sort of stuff.

I think you've pretty much hit most of the items you need to cover.

For URL traversal, it's not clear from your description if you are
using the regex mapping to also find the Resource object or just for
template lookups by the Resource objects.  Either approach is fine.
Twisted.web itself will traverse a URL by following the chain of
Resource objects and their children.  This can be much more dynamic
than a fixed URL->object mapping definition since the Resources can be
created on the fly when needed.  If your Resource tree is static, then
a fixed mapping is fine too.

Generally what I've done in the past is build up the fixed portion of
my Resource tree during server initialization.  My Resource classes
have internal definitions for their template name (as a relative path
when using directories of templates) and are just handed the template
loader during construction, which they later use for rendering.  The
template loader is given the template root directory at
initialization.  The trade-off with your regex mapping is that you
have to keep two fairly separate bits of code in sync, where I have
the template information inside the object definition, but in my case
it can also be more work to get a global view of template assignments.

In terms of your question on static files (css/images/js), I just
place those into their own sub-tree and then defined a static.File()
object to serve them.  This also has an advantage that if you place
your server behind, say, Apache, in production use, you can define
rules on the Apache side to let it directly serve the static files and
never involve your code, for some improved efficiency.

Another area that you may need to implement your own support would be
for handling authorization (twisted.web provides support for managing
sessions via cookies, but you have to decide when to render an
authentication page and then store any needed authentication
information in the session).

> I was hoping for some guidance on a better strategy for doing this.
> Any help would be appreciated.  Bonus points if it is something that
> could easily be re-used on another webserver if someone wanted to host
> this on an existing website.

I think you need to help defined what parts of the above you perceive
as needing to be "better".  I've implemented several servers (many of
which were embedded in a larger application) using the above approach
and it seems just fine to me.  As to re-usability, that's pretty much
the same question for any code you write - e.g., if you're doing
authentication support, making it reusable is pretty much the same as
making any other piece of code reusable.

If you're looking for a higher level framework approach (much more
functionality "for free"), then twisted.web itself may not be the
ideal solution for you.  In the twisted world, nevow may provide a bit
more of what you're looking for, and of course there are other high
profile high-level web frameworks like django, turbogears, pylons, etc...

But if you like having a very thin layer between your application and
the network, without much baggage or enforced behavior, then
twisted.web can be quite nice.

As a more concrete example, here are some snippets of one of my recent
web server modules (in commercial use for the past year or so).  Note
this is a straight cut 'n paste, so there's various logic in addition
to the pure web processing, and probably references to functions/objects
that won't fully be explained.

First, the main application class, shown below.  It is invoked in the
top level server code through:

    web_app = web.Application(db, options)
    reactor.listenTCP(options['web_port'], web_app)

where options is a simple dictionary of configuration options, and db
is an internal database-access object used by this application to
handle executing SQLAlchemy SQL operations in a separate thread.

The application object itself is where the structure of the web site
is established, including static trees and the linked set of Resource
objects.  I've left some additional complexity in here in that one of
the Resource objects "eats" a parameter in the URL representing a
private key handed out to clients to access files for their "job".

The application comes with a web tree (the root of which is in the
configuration option "web_root") that looks like:

   <web_root>/css
             /images
             /js
             /templates/
                       /include

The static (css,images,js) portion of the tree is mapped with
static.File while templates are referenced through genshi's
TemplateLoader.  (For mako you'd use its TemplateLookup instead).

Note the one case where a specific file (favicon.ico) in the static
images tree is also mapped into a virtual location at the root of the
web site where browsers expect it to be.  This way I can keep the
physical file with the rest of the other images.

URLs for the web application generally fall into three classes:

   http://sitename/                   - Home page
                  /{css,images,js}    - Static content
                  /approval/XXXXXX/*  - Client job access URLs

The home page is handled by a Root object, static via static.File as
mentioned above, and all other URLs are beneath an ApprovalRoot
object, installed in this application object through Resource.putChild.

          - - - - - - - - - - - - - - - - - - - - - - - - -

class Application(Site):

    def __init__(self, db, options):

        # Augment options with a template loader.  Search a local tree
        # in front of the supplied (built-in) tree.
        tmpl_path = [os.path.join(options['data_root'], 'web', 'templates'),
                     os.path.join(options['web_root'], 'templates')]

        self.options = options.copy()
        self.options['loader'] = TemplateLoader(tmpl_path, auto_reload=True)
        print 'Web Loader searching:', tmpl_path

        # Main site URL entry points
        self.root = Root(self.options)
        msg_root = ApprovalRoot(db, self.options)
        self.root.putChild('approval', msg_root)

        # Entry points only permitted through a message key URL
        msg_root.putChild('', JobView(db, self.options))
        msg_root.putChild('thumb', JobThumb(db, self.options))
        msg_root.putChild('play', JobFile(db, self.options, download=False))
        msg_root.putChild('download', JobFile(db, self.options, download=True))
        msg_root.putChild('viewer', JobFileViewer(db, self.options))
        msg_root.putChild('archive', JobArchive(db, self.options))
    
        # Configure static support files
        for curdir in ['css', 'images', 'js']:
            static_dir = os.path.join(self.options['web_root'], curdir)
            self.root.putChild(curdir, FileWithoutDir(static_dir))
            # For images, also add root level access to the favicon file
            if curdir == 'images':
                favicon = static.File(os.path.join(static_dir, 'favicon.ico'),
                                      defaultType='image/vnd.microsoft.icon')
                self.root.putChild('favicon.ico', favicon)

        # And provide static access to a portion of the data tree for
        # homepage files (such as reels) if the location exists
        static_file_dir = os.path.join(self.options['data_root'],
                                       'web', 'static')
        if os.path.exists(static_file_dir):
            self.root.putChild('static', FileWithoutDir(static_file_dir))

        # In production (frozen), don't expose tracebacks
        if self.options.get('frozen'):
            self.displayTracebacks = False

        Site.__init__(self, self.root)

          - - - - - - - - - - - - - - - - - - - - - - - - -

The "FileWithoutDir" I use in some places is just a simple static.File
subclass that prevents directory listings, ala:

          - - - - - - - - - - - - - - - - - - - - - - - - -

class FileWithoutDir(static.File):
    """Acts just like static.File but won't return directory listings"""

    def directoryListing(self):
        e = ErrorPage(http.FORBIDDEN, 'Forbidden',
                      'Access is not permitted to this resource.')
        return e

          - - - - - - - - - - - - - - - - - - - - - - - - -

Here's the handler for the "approval" segment of the URL - it uses the
next segment of the URL as the client job key.  If a valid key in the
database, it then permits continued processing of the URL using its
children Resource objects.

This is somewhat specialized processing that I haven't had use for in
most of my servers, but it shows one approach to taking control of
dynamic URL traversal in twisted.  I terminate the normal URL
traversal by defining the object as a leaf, but then re-use Twisted's
own traversal mechanism on a different Resource tree created by the
ApprovalRoot object.

FYI, the database callback _db_retrieveJobUuid (executed through
db.run) is running in a separate database thread.

          - - - - - - - - - - - - - - - - - - - - - - - - -

class ApprovalRoot(Resource):
    """Act as root of the approval tree, which is accessed from URLs in
    messages, and always include the message key as the first part of
    request.postpath.  Strips off the key, validates it, and then passes
    control on to appropriate job or file based objects depending on the
    remainder of the URL.
    
    This is almost identical to normal child lookup by non-leaf objects,
    but handled at render time since the message key validation is a
    deferred operation."""

    isLeaf = True

    def __init__(self, db, options):
        Resource.__init__(self)
        self.db = db
        self.loader = options['loader']

        # Use a separate resource as the root of the remaining URL processing
        # since the isLeaf on ourselves would defeat any child search

        self.job_root = Resource()

    def putChild(self, path, child):
        """Permit simulated children, so that the overall structure of the
        web site can still be established in a higher level function"""
        self.job_root.putChild(path, child)

    def _db_retrieveJobUuid(self, key):
        sql = sa.select([schema.jobs.c.uuid, schema.messages.c.expiration],
                        sa.and_(schema.jobs.c.uuid ==
                                schema.messages.c.job_uuid,
                                schema.messages.c.key == key))

        r = sql.execute().fetchone()

        if not r:
            raise _Unavailable
        elif (r.expiration and r.expiration < datetime.utcnow()):
            raise NoResource('The email approval key has expired')
        else:
            return r.uuid

    def _cb_render(self, job_uuid, request):
        # Transfer control to the appropriate child for rendering.  In the
        # case of a top level render, modify the postpath to include the job
        # uuid as an argument.
        
        if request.postpath and not request.postpath[0]:
            request.postpath.append(job_uuid.hex)
        child = getChildForRequest(self.job_root, request)
        r = child.render(request)
        if r != NOT_DONE_YET:
            request.write(r)
            request.finish()

    def _cb_render_err(self, failure, request):
        if failure.check(NoResource):
            request.write(failure.value.render(request))
            request.finish()
            return

        return failure

    def _finishRequest(self, value, request):
        request.finish()
        return value

    def render(self, request):
        if len(request.postpath) < 1:
            return ErrorPage(http.NOT_FOUND,
                             'Missing approval reference', '').render(request)

        # We only render message key failures, so if the URL has no further
        # segments beyond the key, add a trailing "/" to trigger the child
        # lookup for the default handler.
        if len(request.postpath) == 1:
            request.redirect(request.prePathURL() + '/' +
                             request.postpath[0] + '/')
            request.finish()
        else:
            msg_key = request.postpath.pop(0)
            d = self.db.run(self._db_retrieveJobUuid, msg_key)
            d.addCallback(self._cb_render, request)
            d.addErrback(self._cb_render_err, request)
            d.addErrback(self._finishRequest, request)
            d.addErrback(log.err)
        return NOT_DONE_YET

          - - - - - - - - - - - - - - - - - - - - - - - - -

And here's a more typical Resource object - in this case something
installed beneath the approval root, but still has a very common
structure of most of my Resource objects, along the lines of:

    * Parse URL arguments
    * Retrieve database information based on arguments (deferred operation)
    * Render template (in database callback) based on information

In this particular case, the request is typically coming from an
embedded QuickTime/MediaPlayer object on a viewing window, so errors
are just logged.  In other cases, different templates are rendered on error
and/or error information is passed into a common template.

          - - - - - - - - - - - - - - - - - - - - - - - - -

class JobFileViewer(Resource):
    """Generates a viewer for a single job file (typically presented in
    a separate window).  Expects single file_uuid in the URL.

    Templates used: viewer.xhtml
    Cacheability: None
    """

    isLeaf = True

    def __init__(self, db, options):
        Resource.__init__(self)
        self.db = db
        self.loader = options['loader']

    def _db_retrieveFile(self, file_uuid):
        sql = sa.select([schema.files, schema.jobs.c.product],
                        sa.and_(schema.files.c.uuid == file_uuid,
                                schema.files.c.uuid ==
                                schema.jobs_files.c.file_uuid,
                                schema.jobs_files.c.job_uuid ==
                                schema.jobs.c.uuid))

        result = sql.execute().fetchone()
        return result

    def _cb_render(self, file_info, request):
        tmpl = self.loader.load('viewer.xhtml')
        try:
            width = int(request.args['width'][0])
            height = int(request.args['height'][0])
        except:
            width = height = 0

        context = {
            'job_name': file_info.product or 'Untitled',
            'curfile': file_info,
            'width': width,
            'height': height,
            'url': '../play/%s/%s' % (file_info.uuid.hex,
                                      urllib.quote(file_info.name)),
            'media_player': 'media_player' in request.args,
            }

        request.write(tmpl.generate(**context).render('html',
                                                      doctype=DocType.HTML))
        request.finish()

    def render(self, request):
        if request.postpath == ['quicktime.mov']:
            return ''

        try:
            file_uuid = uuid.UUID(request.postpath[0])
        except:
            return _Unavailable.render(request)

        setNonCacheable(request)
        d = self.db.run(self._db_retrieveFile, file_uuid)
        d.addCallback(self._cb_render, request)
        d.addErrback(log.err)
        return NOT_DONE_YET

          - - - - - - - - - - - - - - - - - - - - - - - - -

The setNonCacheable call above is an example where twisted.web has no
real higher level support for stuff like caching, so whereas some high
level frameworks might have a decorator or simpler way to control
caching, you handle it more directly in twisted.web.  So here's what I
am using:

          - - - - - - - - - - - - - - - - - - - - - - - - -

def setNonCacheable(request):
    """Sets headers on a request to fully disable any caching"""
    
    # Ensure we're expired by setting time in the past
    request.setHeader('Expires', 'Fri, 25 Nov 1966 08:22:00 EST')
    # HTTP/1.0 no-cache header
    request.setHeader('Pragma', 'no-cache')
    # HTTP/1.1 no-cache headers (pre-post are IE extended)
    request.setHeader('Cache-Control',
                      'no-store, no-cache, must-revalidate, '
                      'post-check=0, pre-check=0')

          - - - - - - - - - - - - - - - - - - - - - - - - -

Hope there's not too much "noise" in the code to prevent it from being
helpful.

-- David


From uhcops at gmail.com  Wed Aug  6 13:41:25 2008
From: uhcops at gmail.com (arun chhetri)
Date: Wed Aug  6 13:41:28 2008
Subject: [Twisted-web] linking javascript and CSS file
Message-ID: <560daff30808061041r464be6aby30aac330f81a9da5@mail.gmail.com>

Hi,

I am new to twisted.web and as per the requirement of my project I have to
link a CSS and JavaScript file to twisted.web.

Please, give me some example or pointer how to do that


Thanks,
dowell
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080806/af=
6be627/attachment-0001.htm
From db3l.net at gmail.com  Wed Aug  6 13:46:38 2008
From: db3l.net at gmail.com (David Bolen)
Date: Wed Aug  6 13:47:00 2008
Subject: [Twisted-web] Re: Fwd: Setting up a project.
References: <mailman.76090.1218038609.30706.twisted-web@twistedmatrix.com>
	<5d46db230808060913x72558debl44ea50f81d291efd@mail.gmail.com>
Message-ID: <m2fxpi11fl.fsf@valheru.db3l.homeip.net>

"Govind Salinas" <blix@sophiasuchtig.com> writes:

> There are a few things wrong with my current approach.  One is that it
> feels sort of like a hack the way I am doing it.  It doesn't seem like the
> right way.  Second, since manually doing things that I normally expect
> the web server to be doing

Remember, with twisted.web, for the most part aside from pure HTTP
processing, not much is going to happen for free without explicitly
being coded.  There are some utility method (like for request
sessions) and some utility modules (like static.py for file serving),
but your code is pretty much in charge, for better or worse :-)

> the web server to be doing,  I expect there are 100 things that I should
> be doing that I am not to act like a proper server.  For instance, my
> css pages wouldn't load so I am manually setting the content-type,
> but *only* for css pages.  If I end up needing other types of files, I
> will have to add that in as well.

twisted.web's static.File implementation does the content type based
on file extension, using Python's internal mimetypes module
dictionary, some custom additions, and anything in /etc/mime.types by
default.  You can also augment class or instance contentTypes variable
if needed to apply your own mappings, as well as establish a default
mapping for a file/directory for non-matching files when you
instantiate static.File (see the favicon usage in my last post).

For resources that aren't static and identifiable by file extension,
yes, you'll need to establish the correct content type as part of your
resource handler during request processing if it's not going to be HTML.

>                                     Another example is that I am having
> to roll my own page-not-found implementation.  Aside from setting
> the response code to 404, I am not sure what else I need to be doing.

Depends on what you want the user to see in such a case.  I don't
think anything more than that is truly required for correct operation
protocol wise.  The resource is still in control of what will be
rendered, so you can use your own template, static content, etc.. in
addition to setting the response code.

twisted.web.error has some simple resources that render some plain
text and set the appropriate HTTP response code, but yes, anything
much above that is your responsibility.

The only exception to this is if displayTracebacks is set to True (the
default) in your Site object.  In that case, exceptions/Failures that
reach the top level will be rendered nicely to the browser (using
twisted.web.util.formatFailure).

> This is not too important, I was hoping that there was a "framework" that I
> could use that would be portable to other webservers if someone wanted
> to do so.

Sounds like you may be looking for a more extensive framework, perhaps
with a wsgi interface.  twisted.web is largely a protocol
implementation.

-- David


From blix at sophiasuchtig.com  Wed Aug  6 17:40:49 2008
From: blix at sophiasuchtig.com (Govind Salinas)
Date: Wed Aug  6 17:40:51 2008
Subject: [Twisted-web] Re: Setting up a project.
In-Reply-To: <m2iquef750.fsf@valheru.db3l.homeip.net>
References: <5d46db230808051559t28f47ef4we46471fac41c9928@mail.gmail.com>
	<5d46db230808051630h216dee76g54af35db8e74621a@mail.gmail.com>
	<m2iquef750.fsf@valheru.db3l.homeip.net>
Message-ID: <5d46db230808061440r6b673003nb07bf38f0d81f4ca@mail.gmail.com>

On Wed, Aug 6, 2008 at 11:19 AM, David Bolen <db3l.net@gmail.com> wrote:
> "Govind Salinas" <blix@sophiasuchtig.com> writes:
>
 -- snip
>> Let me give you some information about the set up I have .  Basically
>> I have a python program running somewhere.  I will have a default set
>> of files that serve the content a particular way.  The default set
>> will contain mako templates[1], style sheets and perhaps some images.
>> So I need a way to kick off the mako templates based on the URL.  The
>> templates may include each other.
>>
>> Here is the layout
>>
>> content-dir/
>>    __config__.py -- This is a file that currently just sets up the mapping
>>                             between a regex that selects a page and a path to
>>                             where that page's template is under the content-dir
>>    main.html -- The html files here are really the mako templates
>>    main.css
>>    etc...
>>
>> My server class takes in a template dir, loads the config and starts a
>> server.  When it gets a request it matches it against the regexes and
>> runs the template.  There should be some initialization that sets up
>> objects that get passed to the template (in addition to values from
>> the regex parsing). This is all pretty brain-dead code.
>
> Are you saying "brain-dead" in a negative way here, or to imply that
> it's boilerplate or something you'd prefer the framework do for you?
> With twisted.web, you're pretty much in charge of this sort of stuff.

I was referring to the code I was writing.  I guess I would consider it
boiler plate.  I think some more complete examples in the howto
would have helped me here.  I seemed to get the gist of what
resources were supposed to do, but wasn't sure how to put
it all together.

> I think you've pretty much hit most of the items you need to cover.
>
> For URL traversal, it's not clear from your description if you are
> using the regex mapping to also find the Resource object or just for
> template lookups by the Resource objects.  Either approach is fine.
> Twisted.web itself will traverse a URL by following the chain of
> Resource objects and their children.  This can be much more dynamic
> than a fixed URL->object mapping definition since the Resources can be
> created on the fly when needed.  If your Resource tree is static, then
> a fixed mapping is fine too.

I had tried using Django for what I was doing but I did not sure if it
would end up as a nice fit.  When I started using twisted, I borrowed
the regex->page mapping from them.  This is how I implemented it:

    def _parse_setup(self, path):
        self._config = {}
        execfile(path, {}, self._config)
        if 'url_map' not in self._config:
            return False
        self._mappings = []
        for exp, f in self._config['url_map']:
            f = f.split('/')
            f.insert(0, self._template_dir)
            f = os.path.join(*f)
            self._mappings.append((re.compile(exp), f))
        return True

    def render_GET(self, request):
        path = request.path[1:]
        uri = request.uri[1:]
        for mapping, f in self._mappings:
            match = mapping.match(uri)
            if match:
                vars = match.groupdict()
                print 'serving:', f
                lookup = TemplateLookup(directories=['/'])
                return Template(filename=f, lookup=lookup).render(**vars)
        path = os.path.join(self._template_dir, path)
        if os.path.isfile(path):
            f = None
            try:
                idx = path.rfind('.')
                print 'serving static:', path, path[idx + 1:]
                type = _mime_types.get(path[idx + 1:], 'text/plain')
                request.setHeader('content-type', type)
                print request.headers, type
                f = file(path, 'r')
                return f.read()
            except:
                print 'failed to serve:', path
                raise
            finally:
                if f:
                    f.close()
        else:
            print '%s does not exist' % path
        request.setResponseCode(404)
        return self._page_not_found

I was not too clear on how the resources would be used, so I chose
this.  And the files/paths are all static, even if the content is not.
One of the things I want to be able to do is allow the user to have
a choice between templates or be able to write their own.  The url
mapping seemed like a good way of soft coding that so that a
different template could organize their code differently.

> Generally what I've done in the past is build up the fixed portion of
> my Resource tree during server initialization.  My Resource classes
> have internal definitions for their template name (as a relative path
> when using directories of templates) and are just handed the template
> loader during construction, which they later use for rendering.  The
> template loader is given the template root directory at
> initialization.  The trade-off with your regex mapping is that you
> have to keep two fairly separate bits of code in sync, where I have
> the template information inside the object definition, but in my case
> it can also be more work to get a global view of template assignments.
>
> In terms of your question on static files (css/images/js), I just
> place those into their own sub-tree and then defined a static.File()
> object to serve them.  This also has an advantage that if you place
> your server behind, say, Apache, in production use, you can define
> rules on the Apache side to let it directly serve the static files and
> never involve your code, for some improved efficiency.

That sounds like a good idea, I will do that.

> Another area that you may need to implement your own support would be
> for handling authorization (twisted.web provides support for managing
> sessions via cookies, but you have to decide when to render an
> authentication page and then store any needed authentication
> information in the session).

I have no use for that yet.  However I will eventually need to do http
and/or ssh authentication (the ability to POST updates to the
repository is a planned feature).  So this will come in handy.

>> I was hoping for some guidance on a better strategy for doing this.
>> Any help would be appreciated.  Bonus points if it is something that
>> could easily be re-used on another webserver if someone wanted to host
>> this on an existing website.
>
> I think you need to help defined what parts of the above you perceive
> as needing to be "better".  I've implemented several servers (many of
> which were embedded in a larger application) using the above approach
> and it seems just fine to me.  As to re-usability, that's pretty much
> the same question for any code you write - e.g., if you're doing
> authentication support, making it reusable is pretty much the same as
> making any other piece of code reusable.
>
> If you're looking for a higher level framework approach (much more
> functionality "for free"), then twisted.web itself may not be the
> ideal solution for you.  In the twisted world, nevow may provide a bit
> more of what you're looking for, and of course there are other high
> profile high-level web frameworks like django, turbogears, pylons, etc...
>
I took a quick look at nevow and I think I like the mako templates
better.  It behaves more that a "python server pages" type of
template, which is conceptually similar to the little web programming
that I have done in the past.

--snip
> As a more concrete example, here are some snippets of one of my recent
> web server modules (in commercial use for the past year or so).  Note
> this is a straight cut 'n paste, so there's various logic in addition
> to the pure web processing, and probably references to functions/objects
> that won't fully be explained.
>

-- snip

> Hope there's not too much "noise" in the code to prevent it from being
> helpful.
>

Actually that was perfect, I have a much better understanding of how things
are supposed to work now.  I appreciate the help.

Thanks,
Govind.

From blix at sophiasuchtig.com  Wed Aug  6 17:47:14 2008
From: blix at sophiasuchtig.com (Govind Salinas)
Date: Wed Aug  6 17:47:17 2008
Subject: [Twisted-web] Re: Fwd: Setting up a project.
In-Reply-To: <5d46db230808061445q77a530a7yfaa8f81c81aa923e@mail.gmail.com>
References: <mailman.76090.1218038609.30706.twisted-web@twistedmatrix.com>
	<5d46db230808060913x72558debl44ea50f81d291efd@mail.gmail.com>
	<m2fxpi11fl.fsf@valheru.db3l.homeip.net>
	<5d46db230808061445q77a530a7yfaa8f81c81aa923e@mail.gmail.com>
Message-ID: <5d46db230808061447m3a6d1545rb00620effb5bbc82@mail.gmail.com>

On Wed, Aug 6, 2008 at 12:46 PM, David Bolen <db3l.net@gmail.com> wrote:
> "Govind Salinas" <blix@sophiasuchtig.com> writes:
>
>> There are a few things wrong with my current approach.  One is that it
>> feels sort of like a hack the way I am doing it.  It doesn't seem like the
>> right way.  Second, since manually doing things that I normally expect
>> the web server to be doing
>
> Remember, with twisted.web, for the most part aside from pure HTTP
> processing, not much is going to happen for free without explicitly
> being coded.  There are some utility method (like for request
> sessions) and some utility modules (like static.py for file serving),
> but your code is pretty much in charge, for better or worse :-)
>
>> the web server to be doing,  I expect there are 100 things that I should
>> be doing that I am not to act like a proper server.  For instance, my
>> css pages wouldn't load so I am manually setting the content-type,
>> but *only* for css pages.  If I end up needing other types of files, I
>> will have to add that in as well.
>
> twisted.web's static.File implementation does the content type based
> on file extension, using Python's internal mimetypes module
> dictionary, some custom additions, and anything in /etc/mime.types by
> default.  You can also augment class or instance contentTypes variable
> if needed to apply your own mappings, as well as establish a default
> mapping for a file/directory for non-matching files when you
> instantiate static.File (see the favicon usage in my last post).
>
> For resources that aren't static and identifiable by file extension,
> yes, you'll need to establish the correct content type as part of your
> resource handler during request processing if it's not going to be HTML.
>
>>                                     Another example is that I am having
>> to roll my own page-not-found implementation.  Aside from setting
>> the response code to 404, I am not sure what else I need to be doing.
>
> Depends on what you want the user to see in such a case.  I don't
> think anything more than that is truly required for correct operation
> protocol wise.  The resource is still in control of what will be
> rendered, so you can use your own template, static content, etc.. in
> addition to setting the response code.
>
> twisted.web.error has some simple resources that render some plain
> text and set the appropriate HTTP response code, but yes, anything
> much above that is your responsibility.
>
> The only exception to this is if displayTracebacks is set to True (the
> default) in your Site object.  In that case, exceptions/Failures that
> reach the top level will be rendered nicely to the browser (using
> twisted.web.util.formatFailure).
>

Very helpful again.  Thanks.

>> This is not too important, I was hoping that there was a "framework" that I
>> could use that would be portable to other webservers if someone wanted
>> to do so.
>
> Sounds like you may be looking for a more extensive framework, perhaps
> with a wsgi interface.  twisted.web is largely a protocol
> implementation.

As I said, this is a nice-to-have, so I am not too worried about it.

Thanks,
Govind.

From exarkun at divmod.com  Wed Aug  6 17:56:02 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed Aug  6 17:56:13 2008
Subject: [Twisted-web] Re: Setting up a project.
In-Reply-To: <5d46db230808061440r6b673003nb07bf38f0d81f4ca@mail.gmail.com>
Message-ID: <20080806215602.29191.280574939.divmod.quotient.11342@ohm>

On Wed, 6 Aug 2008 16:40:49 -0500, Govind Salinas <blix@sophiasuchtig.com> wrote:
> [snip]
>
>I had tried using Django for what I was doing but I did not sure if it
>would end up as a nice fit.  When I started using twisted, I borrowed
>the regex->page mapping from them.  This is how I implemented it:
>
> [snip]
>
>    def render_GET(self, request):
>        path = request.path[1:]
>        uri = request.uri[1:]
>        for mapping, f in self._mappings:
>            match = mapping.match(uri)
>            if match:
>                vars = match.groupdict()
>                print 'serving:', f
>                lookup = TemplateLookup(directories=['/'])
>                return Template(filename=f, lookup=lookup).render(**vars)
>        path = os.path.join(self._template_dir, path)
>        if os.path.isfile(path):

Note that if request.uri is something like "//etc/passwd", your server
might serve up some content you'd rather not see made public.  One
advantage of twisted.web.static.File is that you can specify a directory
and it will only allow things inside that directory to be served.

>            f = None
>            try:
>                idx = path.rfind('.')
>                print 'serving static:', path, path[idx + 1:]
>                type = _mime_types.get(path[idx + 1:], 'text/plain')
>                request.setHeader('content-type', type)
>                print request.headers, type
>                f = file(path, 'r')
>                return f.read()
>            except:
>                print 'failed to serve:', path
>                raise
>            finally:
>                if f:
>                    f.close()

Another advantage of File is that it won't load the entire file into
memory all at once, it will set the content-type for you, and it will
generate 404s if necessary.

Jean-Paul

From aaron.devore at gmail.com  Wed Aug  6 18:09:29 2008
From: aaron.devore at gmail.com (Aaron DeVore)
Date: Wed Aug  6 18:09:33 2008
Subject: [Twisted-web] Using HTTPClientFactory to send POST form data
Message-ID: <2ead2fb0808061509p3436e337ibe18b789850af211@mail.gmail.com>

I'm working on a project that needs to send data in a fashion that is
identical to what is sent via an HTML form with method=3D"post". I picked
HTTPClientFactory for the requests but I'm having a hard time figuring out
how to send the post data. So far I have tried something approximately like:

<code>
post =3D {}
post['name'] =3D val

clientFactory =3D HTTPClientFactory(url, method=3D"POST",
headers=3D{'Content-Type': "application/x-www-form-urlencoded;
charset=3Dutf-8"})
reactory.connectTCP(urlparse(self.currentRequestURL)[1], 80,
self.currentClientFactory)

</code>

When I go to a PHP script that prints out the $_POST array it shows that the
$_POST array is empty.

What am I doing wrong? How would I go about solving the problem?

Thank you,
Aaron DeVore
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080806/d7=
ade849/attachment.htm
From exarkun at divmod.com  Wed Aug  6 18:17:31 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed Aug  6 18:17:42 2008
Subject: [Twisted-web] Using HTTPClientFactory to send POST form data
In-Reply-To: <2ead2fb0808061509p3436e337ibe18b789850af211@mail.gmail.com>
Message-ID: <20080806221731.29191.1415842497.divmod.quotient.11351@ohm>

On Wed, 6 Aug 2008 15:09:29 -0700, Aaron DeVore <aaron.devore@gmail.com> wrote:
>I'm working on a project that needs to send data in a fashion that is
>identical to what is sent via an HTML form with method="post". I picked
>HTTPClientFactory for the requests but I'm having a hard time figuring out
>how to send the post data. So far I have tried something approximately like:
>
><code>
>post = {}
>post['name'] = val
>
>clientFactory = HTTPClientFactory(url, method="POST",
>headers={'Content-Type': "application/x-www-form-urlencoded;
>charset=utf-8"})
>reactory.connectTCP(urlparse(self.currentRequestURL)[1], 80,
>self.currentClientFactory)
>
></code>
>
>When I go to a PHP script that prints out the $_POST array it shows that the
>$_POST array is empty.
>
>What am I doing wrong? How would I go about solving the problem?

You didn't actually supply the post data to the HTTPClientFactory.
The default is to post an empty string.  You need to supply a value
for the `postdata? parameter.  You also need to encode this yourself,
since `postdata? accepts a string, not a dict.

Jean-Paul

From aaron.devore at gmail.com  Wed Aug  6 22:49:04 2008
From: aaron.devore at gmail.com (Aaron DeVore)
Date: Wed Aug  6 22:49:06 2008
Subject: [Twisted-web] Using HTTPClientFactory to send POST form data
In-Reply-To: <20080806221731.29191.1415842497.divmod.quotient.11351@ohm>
References: <2ead2fb0808061509p3436e337ibe18b789850af211@mail.gmail.com>
	<20080806221731.29191.1415842497.divmod.quotient.11351@ohm>
Message-ID: <2ead2fb0808061949q20a330aepb4aab07384e7e18a@mail.gmail.com>

Oops, I should have checked that code example a bit better. The line should
read (with urllib.urlencode imported):

HTTPClientFactory(url, postdata=3Durlencode(postdata), headers=3D{
'Content-Type': 'application/x-www-form-urlencoded; charset=3Dutf-8'})

On Wed, Aug 6, 2008 at 2:17 PM, Jean-Paul Calderone <exarkun@divmod.com>wro=
te:

> On Wed, 6 Aug 2008 15:09:29 -0700, Aaron DeVore <aaron.devore@gmail.com>
> wrote:
>
>> I'm working on a project that needs to send data in a fashion that is
>> identical to what is sent via an HTML form with method=3D"post". I picked
>> HTTPClientFactory for the requests but I'm having a hard time figuring o=
ut
>> how to send the post data. So far I have tried something approximately
>> like:
>>
>> <code>
>> post =3D {}
>> post['name'] =3D val
>>
>> clientFactory =3D HTTPClientFactory(url, method=3D"POST",
>> headers=3D{'Content-Type': "application/x-www-form-urlencoded;
>> charset=3Dutf-8"})
>> reactory.connectTCP(urlparse(self.currentRequestURL)[1], 80,
>> self.currentClientFactory)
>>
>> </code>
>>
>> When I go to a PHP script that prints out the $_POST array it shows that
>> the
>> $_POST array is empty.
>>
>> What am I doing wrong? How would I go about solving the problem?
>>
>
> You didn't actually supply the post data to the HTTPClientFactory.
> The default is to post an empty string.  You need to supply a value
> for the `postdata=B4 parameter.  You also need to encode this yourself,
> since `postdata=B4 accepts a string, not a dict.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080806/39=
eefb02/attachment.htm
From aaron.devore at gmail.com  Wed Aug  6 23:50:33 2008
From: aaron.devore at gmail.com (Aaron DeVore)
Date: Wed Aug  6 23:50:35 2008
Subject: [Twisted-web] Using HTTPClientFactory to send POST form data
In-Reply-To: <2ead2fb0808061949q20a330aepb4aab07384e7e18a@mail.gmail.com>
References: <2ead2fb0808061509p3436e337ibe18b789850af211@mail.gmail.com>
	<20080806221731.29191.1415842497.divmod.quotient.11351@ohm>
	<2ead2fb0808061949q20a330aepb4aab07384e7e18a@mail.gmail.com>
Message-ID: <2ead2fb0808062050t53532ad5xd1c05b2e5b0e8bfb@mail.gmail.com>

Yet again, I managed to catch what I was doing wrong about 1 minute after I
clicked the "Send" button. It turns out that I had written another function
incorrectly. Thanks for the help guys!

-Aaron DeVore

On Wed, Aug 6, 2008 at 7:49 PM, Aaron DeVore <aaron.devore@gmail.com> wrote:

> Oops, I should have checked that code example a bit better. The line shou=
ld
> read (with urllib.urlencode imported):
>
> HTTPClientFactory(url, postdata=3Durlencode(postdata), headers=3D{
> 'Content-Type': 'application/x-www-form-urlencoded; charset=3Dutf-8'})
>
>
> On Wed, Aug 6, 2008 at 2:17 PM, Jean-Paul Calderone <exarkun@divmod.com>w=
rote:
>
>> On Wed, 6 Aug 2008 15:09:29 -0700, Aaron DeVore <aaron.devore@gmail.com>
>> wrote:
>>
>>> I'm working on a project that needs to send data in a fashion that is
>>> identical to what is sent via an HTML form with method=3D"post". I pick=
ed
>>> HTTPClientFactory for the requests but I'm having a hard time figuring
>>> out
>>> how to send the post data. So far I have tried something approximately
>>> like:
>>>
>>> <code>
>>> post =3D {}
>>> post['name'] =3D val
>>>
>>> clientFactory =3D HTTPClientFactory(url, method=3D"POST",
>>> headers=3D{'Content-Type': "application/x-www-form-urlencoded;
>>> charset=3Dutf-8"})
>>> reactory.connectTCP(urlparse(self.currentRequestURL)[1], 80,
>>> self.currentClientFactory)
>>>
>>> </code>
>>>
>>> When I go to a PHP script that prints out the $_POST array it shows that
>>> the
>>> $_POST array is empty.
>>>
>>> What am I doing wrong? How would I go about solving the problem?
>>>
>>
>> You didn't actually supply the post data to the HTTPClientFactory.
>> The default is to post an empty string.  You need to supply a value
>> for the `postdata=B4 parameter.  You also need to encode this yourself,
>> since `postdata=B4 accepts a string, not a dict.
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-web mailing list
>> Twisted-web@twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080806/9c=
af41ee/attachment.htm
From graemeglass at gmail.com  Thu Aug  7 03:40:05 2008
From: graemeglass at gmail.com (Graeme Glass)
Date: Thu Aug  7 03:40:08 2008
Subject: [Twisted-web] linking javascript and CSS file
In-Reply-To: <560daff30808061041r464be6aby30aac330f81a9da5@mail.gmail.com>
References: <560daff30808061041r464be6aby30aac330f81a9da5@mail.gmail.com>
Message-ID: <ead817660808070040k5dbec25fucc3ae9015f15ce07@mail.gmail.com>

On Wed, Aug 6, 2008 at 7:41 PM, arun chhetri <uhcops@gmail.com> wrote:

> Hi,
>
> I am new to twisted.web and as per the requirement of my project I have to
> link a CSS and JavaScript file to twisted.web.
>
> Please, give me some example or pointer how to do that
>
>
> Thanks,
> dowell
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
Hey Dowell,
you server them with using static.

http://twistedmatrix.com/documents/current/api/twisted.web.static.html

Here is a nice example.
http://twistedmatrix.com/projects/web/documentation/howto/using-twistedweb.=
html

HTH,
Graeme
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080807/ec=
7aa4cd/attachment.htm
From f.ingram.lists at gmail.com  Thu Aug  7 10:42:06 2008
From: f.ingram.lists at gmail.com (Felix Ingram)
Date: Thu Aug  7 10:42:11 2008
Subject: [Twisted-web] Proxy CONNECT support
Message-ID: <41beb4dc0808070742p6f1f4606g2512f23ab3a31f00@mail.gmail.com>

Hello all,

I'm looking into adding HTTPS support to the proxy module for some
testing I'm doing. I'd like to be able to trap requests and responses
as they go to and from the server, so proper CONNECT support is not
really what I'm aiming for. I've come up with the following (quite
long, apologies):

"""
from twisted.web import proxy, http
from twisted.internet import reactor, ssl
from twisted.python import log
import sys
import urlparse

from OpenSSL import SSL as OSSL

class MyProxyClient(proxy.ProxyClient):

    def handleEndHeaders(self):
        print "THOSE HEADERS DONE ENDED"
        self.father.transport.write("\r\n")

    def handleResponsePart(self, buffer):
        print "GOT SOME STUFF TO SEND TO THE BROWSER"
        self.father.transport.write(buffer)

    def dataReceived(self, data):
        print "To the Browser"
        print data # Data sent to the browser
        proxy.ProxyClient.dataReceived(self, data)

    def handleResponseEnd(self):
        print "losing connection..."
        self.transport.loseConnection()
        self.father.channel.transport.loseConnection()


class MyProxyClientFactory(proxy.ProxyClientFactory):
    def buildProtocol(self, addr):
        client = proxy.ProxyClientFactory.buildProtocol(self, addr)
        client.__class__ = MyProxyClient
        return client

class MySSLContext(ssl.ContextFactory):
    def getContext(self):
        ctx = OSSL.Context(OSSL.SSLv23_METHOD)
        ctx.use_certificate_file('server.cert')
        ctx.use_privatekey_file('server.pkey')
        return ctx

class MyProxyRequest(proxy.ProxyRequest):
    protocols = {
            'http': MyProxyClientFactory,
            'https': MyProxyClientFactory
            }
    ports = {
            'http': 80,
            'https': 443
            }

    def requestDone(self, request):
        """Called by first request in queue when it is done."""
        print "REQUESTDONE DONE BE CALLED"
        if request != self.requests[0]: raise TypeError
        del self.requests[0]

        if self.persistent:
            # notify next request it can start writing
            if self.requests:
                self.requests[0].noLongerQueued()
            else:
                if self._savedTimeOut:
                    self.setTimeout(self._savedTimeOut)
        else:
            print "lOSING CONNECTION"
            self.transport.loseConnection()

    def process(self):
        parsed = urlparse.urlparse(self.uri)
        protocol = parsed.scheme
        host = parsed.hostname
        doSSL = False
        if self.method.upper() == "CONNECT":
            self.transport.write("HTTP/1.1 200 Connection established\r\n\r\n")
            self.transport.startTLS(MySSLContext())
            protocol = "https"
            self.host = parsed.scheme
            print "finished connect request"
        else:
            if self.isSecure():
                headers = self.getAllHeaders().copy()
                host = headers["host"]
                protocol = "https"
                doSSL = True
            port = self.ports[protocol]
            if ':' in host:
                host, port = host.split(':')
                port = int(port)
            rest = urlparse.urlunparse(('', '') + parsed[2:])
            if not rest:
                rest = rest + '/'
            class_ = self.protocols[protocol]
            headers = self.getAllHeaders().copy()
            if 'host' not in headers:
                headers['host'] = host
            self.content.seek(0, 0)
            s = self.content.read()
            clientFactory = class_(self.method, rest, self.clientproto, headers,
                            s, self)
            if not doSSL:
                self.reactor.connectTCP(host, port, clientFactory)
            else:
                print "Connecting to SSL"
                self.reactor.connectSSL(host, port, clientFactory,
ssl.ClientContextFactory())

class MyProxy(proxy.Proxy):
    def dataReceived(self, data):
        print "To the Server"
        print data # Data sent to the server
        proxy.Proxy.dataReceived(self, data)

    def requestFactory(self, *args):
        return MyProxyRequest(*args)

class ProxyFactory(http.HTTPFactory):
        protocol = MyProxy

reactor.listenTCP(8081, ProxyFactory())
log.startLogging(sys.stdout) # Log to the console
reactor.run()
"""

Most of the magic is happening in the 'process' method. I've copied
some of the other methods in for debugging. At the moment it's a bit
hackish but it's almost working as expected. When a connect request is
received then the SSL connection is set up as required (using
transport.startTLS). This generates certificate mismatch errors in the
browser, but this is expected and is what I'm looking for. The GET
request is then received from the browser and forwarded on to the
server. The server appears to be happy with this as it does pass the
appropriate response back to the proxy. For some reason, however, the
browser does not then get passed the response. Comparing identical
requests for the HTTP and HTTPS versions of a site show that the only
apparent difference is that the headers and body are sent in one go
under HTTP and as two separate chunks under HTTPS.

E.g. HTTPS:
"""
2008-08-07 15:34:15+0100 [MyProxyClient,client] To the Browser
2008-08-07 15:34:15+0100 [MyProxyClient,client] HTTP/1.1 200 OK
2008-08-07 15:34:15+0100 [MyProxyClient,client] Date: Thu, 07 Aug 2008
14:34:15 GMT
2008-08-07 15:34:15+0100 [MyProxyClient,client] Server: Apache/2.2.9
(Win32) DAV/2 mod_ssl/2.2.9 Ope
nSSL/0.9.8h mod_autoindex_color PHP/5.2.6
2008-08-07 15:34:15+0100 [MyProxyClient,client] X-Powered-By: PHP/5.2.6
2008-08-07 15:34:15+0100 [MyProxyClient,client] Content-Length: 1325
2008-08-07 15:34:15+0100 [MyProxyClient,client] Connection: close
2008-08-07 15:34:15+0100 [MyProxyClient,client] Content-Type: text/html
2008-08-07 15:34:15+0100 [MyProxyClient,client]
2008-08-07 15:34:15+0100 [MyProxyClient,client]
2008-08-07 15:34:15+0100 [MyProxyClient,client] THOSE HEADERS DONE ENDED
2008-08-07 15:34:15+0100 [MyProxyClient,client] To the Browser
2008-08-07 15:34:15+0100 [MyProxyClient,client] <html>
2008-08-07 15:34:15+0100 [MyProxyClient,client] <head><title>XAMPP</title>
2008-08-07 15:34:15+0100 [MyProxyClient,client] <link href="xampp.css"
rel="stylesheet" type="text/c
...
"""

HTTP:
"""
2008-08-07 15:34:01+0100 [MyProxyClient,client] To the Browser
2008-08-07 15:34:01+0100 [MyProxyClient,client] HTTP/1.1 200 OK
2008-08-07 15:34:01+0100 [MyProxyClient,client] Date: Thu, 07 Aug 2008
14:34:01 GMT
2008-08-07 15:34:01+0100 [MyProxyClient,client] Server: Apache/2.2.9
(Win32) DAV/2 mod_ssl/2.2.9 Ope
nSSL/0.9.8h mod_autoindex_color PHP/5.2.6
2008-08-07 15:34:01+0100 [MyProxyClient,client] X-Powered-By: PHP/5.2.6
2008-08-07 15:34:01+0100 [MyProxyClient,client] Content-Length: 1325
2008-08-07 15:34:01+0100 [MyProxyClient,client] Connection: close
2008-08-07 15:34:01+0100 [MyProxyClient,client] Content-Type: text/html
2008-08-07 15:34:01+0100 [MyProxyClient,client]
2008-08-07 15:34:01+0100 [MyProxyClient,client] <html>
2008-08-07 15:34:01+0100 [MyProxyClient,client] <head><title>XAMPP</title>
2008-08-07 15:34:01+0100 [MyProxyClient,client] <link href="xampp.css"
rel="stylesheet" type="text/c
"""

The HTTPS version seems to have an extra line feed being added after
the headers, which may be causing the problem. I've tried stripping
this out but then I get some other exception being thrown and HTTP
traffic stops working.

I've got a feeling that I'm not quite going about this in the correct
way but I'd appreciate any help or insights that anyone could offer.
If you need any more details then please ask.

Many thanks in advance,

Felix

From uhcops at gmail.com  Thu Aug  7 12:42:01 2008
From: uhcops at gmail.com (arun chhetri)
Date: Thu Aug  7 12:42:36 2008
Subject: [Twisted-web] linking javascript and CSS file
Message-ID: <560daff30808070942k46122e3ehbdf75f18d5c6d845@mail.gmail.com>

Hi,
I tried this example

class ColorPage(resource.Resource):
    def __init__(self, color):
        self.color =3D color

    def render(self, request):
        return """
        <html>
        <head>
          <title>Color: %s</title>
          <DEFANGED_link type=3D'text/css' href=3D'/css/styles.css'
rel=3D'Stylesheet' />
        </head>
        <body DEFANGED_STYLE=3D'background-color: #%s'>
          <h1>This is #%s.</h1>
          <p DEFANGED_STYLE=3D'background-color: white'>
          <a href=3D'/colors/'>Back</a>
          </p>
        </body>
        </html>
        """ % (self.color, self.color, self.color)

class ColorRoot(resource.Resource):
    def __init__(self):
        resource.Resource.__init__(self)
        self.requestedColors =3D []
        self.putChild('', ColorIndexPage(self.requestedColors))

    def render(self, request):
        # redirect /colors -> /colors/
        request.redirect(request.path + '/')
        return "Please use /colors/ instead."

    def getChild(self, path, request):
        if path not in self.requestedColors:
            self.requestedColors.append(path)
        return ColorPage(path)

class ColorIndexPage(resource.Resource):
    def __init__(self, requestedColorsList):
        resource.Resource.__init__(self)
        self.requestedColors =3D requestedColorsList

    def render(self, request):
        request.write("""
        <html>
        <head>
          <title>Colors</title>
          <DEFANGED_link type=3D'text/css' href=3D'/css/styles.css'
rel=3D'Stylesheet' />
        </head>
        <body>
        <h1>Colors</h1>
        To see a color, enter a url like
        <a href=3D'ff0000'>/colors/ff0000</a>. <br />
        Colors viewed so far:
        <ul>""")
        for color in self.requestedColors:
            request.write(
                "<li><a href=3D'%s' DEFANGED_STYLE=3D'color: #%s'>%s</a></l=
i>" % (
                color, color, color))
        request.write("""
        </ul>
        </body>
        </html>
        """)
        return ""

class HomePage(resource.Resource):
    def render(self, request):
        return """
        <html>
        <head>
          <title>Colors</title>
          <DEFANGED_link type=3D'text/css' href=3D'/css/styles.css'
rel=3D'Stylesheet' />
        </head>
        <body>
        <h1>Colors Demo</h1>
        What's here:
        <ul>
          <li><a href=3D'/colors'>Color viewer</a></li>
        </ul>
        </body>
        </html>
        """

if __name__ =3D=3D "__main__":
    from twisted.internet import reactor
    root =3D resource.Resource()
    root.putChild('', HomePage())
    root.putChild('colors', ColorRoot())
    styles =3D resource.Resource()
    styles.putChild('styles.css', static.File('styles.css'))
    root.putChild('css', styles)
    site =3D server.Site(root)
    reactor.listenTCP(8000, site)
    reactor.run()

with CSS code in external file styles.css, the code is like this

body {
    font-family: Georgia, Times, serif;
    font-size: 11pt;
}

h1 {
    margin: 10px 0;
    padding: 5px;
    background-color: black;
    color: white;
}

a{
    font-family: monospace;
}


p{
    padding: 10px;
}

But, there is no results.
Any pointer what I am doing wrong, I am using MAC OS leopard.

Thanks
dowell
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080807/0c=
f38676/attachment.htm
From m.prajwala at gmail.com  Tue Aug 12 10:21:55 2008
From: m.prajwala at gmail.com (Prajwala Manchikatla)
Date: Tue Aug 12 10:21:59 2008
Subject: [Twisted-web] How to specify cach-control,
	Expires headers for the static files response
Message-ID: <edab0e7c0808120721q34d30053t70863a9b9430f2d8@mail.gmail.com>

Hi,

   I am using twisted.web2.static.File to serve my static files. I want
to specify the Expires, Cache-control headers, so that the browser will
not load this files every time. How can I specify these header?

Thanks,
Prajwala
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080812/78=
bcc508/attachment.htm
From szu_ljm at 163.com  Wed Aug 13 01:15:43 2008
From: szu_ljm at 163.com (=?GBK?B?wfW9qMP0?=)
Date: Wed Aug 13 01:15:54 2008
Subject: [Twisted-web] How to specify cach-control, 	Expires headers for
	the static files response
In-Reply-To: <edab0e7c0808120721q34d30053t70863a9b9430f2d8@mail.gmail.com>
References: <edab0e7c0808120721q34d30053t70863a9b9430f2d8@mail.gmail.com>
Message-ID: <24554433.160701218604543571.JavaMail.coremail@bj163app40.163.com>

IApqdXN0IHNlbmQgIkV4cGlyZXMiICBIVFRQIEhlYWRlcnMgIQoKR29vZCBMdWNrIQoKamFuZQoK
IAogCgrU2jIwMDgtMDgtMTKjrCJQcmFqd2FsYSBNYW5jaGlrYXRsYSIgPG0ucHJhandhbGFAZ21h
aWwuY29tPiDQtLXAo7oKCkhpLAoKICAgSSBhbSB1c2luZyB0d2lzdGVkLndlYjIuc3RhdGljLkZp
bGUgdG8gc2VydmUgbXkgc3RhdGljIGZpbGVzLiBJIHdhbnQgCnRvIHNwZWNpZnkgdGhlIEV4cGly
ZXMsIENhY2hlLWNvbnRyb2wgaGVhZGVycywgc28gdGhhdCB0aGUgYnJvd3NlciB3aWxsIApub3Qg
bG9hZCB0aGlzIGZpbGVzIGV2ZXJ5IHRpbWUuIEhvdyBjYW4gSSBzcGVjaWZ5IHRoZXNlIGhlYWRl
cj8KClRoYW5rcywKUHJhandhbGEKLS0tLS0tLS0tLS0tLS0gbmV4dCBwYXJ0IC0tLS0tLS0tLS0t
LS0tCkFuIEhUTUwgYXR0YWNobWVudCB3YXMgc2NydWJiZWQuLi4KVVJMOiBodHRwOi8vdHdpc3Rl
ZG1hdHJpeC5jb20vcGlwZXJtYWlsL3R3aXN0ZWQtd2ViL2F0dGFjaG1lbnRzLzIwMDgwODEzLzIz
Njg5YjIzL2F0dGFjaG1lbnQuaHRtCg==
From m.prajwala at gmail.com  Wed Aug 13 03:23:20 2008
From: m.prajwala at gmail.com (Prajwala Manchikatla)
Date: Wed Aug 13 03:23:22 2008
Subject: [Twisted-web] How to specify cach-control,
	Expires headers for the static files response
In-Reply-To: <24554433.160701218604543571.JavaMail.coremail@bj163app40.163.com>
References: <edab0e7c0808120721q34d30053t70863a9b9430f2d8@mail.gmail.com>
	<24554433.160701218604543571.JavaMail.coremail@bj163app40.163.com>
Message-ID: <edab0e7c0808130023u904c459u9b3c17e272b23426@mail.gmail.com>

SSBrbm93IHRoYXQgIEkgbmVlZCB0byBzcGVjaWZ5IEV4cGlyZXMgSFRUUCBIZWFkZXJzICwgYnV0
IGhvdz8gY2FuIHlvdSBnaXZlCm1lIHNvbWUgc2FtcGxlIGNvZGUgdG8gZG8gdGhhdD8KTXkgcmVz
b3VyY2UgaXMganVzdCBsaWtlIHRoaXMuCgpjbGFzcyBNZWRpYVJlc291cmNlKHJlc291cmNlLlJl
c291cmNlKToKICAgIGFkZFNsYXNoID0gVHJ1ZQogICAgY2hpbGRfbWVkaWEgPSBzdGF0aWMuRmls
ZShwYXRoKCIuL21lZGlhIikuYWJzcGF0aCgpKQoKVGhhbmtzLApQcmFqd2FsYQoKMjAwOC84LzEz
IMH1vajD9CA8c3p1X2xqbUAxNjMuY29tPgoKPgo+IGp1c3Qgc2VuZCAiRXhwaXJlcyIgIEhUVFAg
SGVhZGVycyAhCj4KPiBHb29kIEx1Y2shCj4KPiBqYW5lCj4KPgo+Cj4g1NoyMDA4LTA4LTEyo6wi
UHJhandhbGEgTWFuY2hpa2F0bGEiIDxtLnByYWp3YWxhQGdtYWlsLmNvbT4g0LS1wKO6Cj4KPiBI
aSwKPgo+ICAgIEkgYW0gdXNpbmcgdHdpc3RlZC53ZWIyLnN0YXRpYy5GaWxlIHRvIHNlcnZlIG15
IHN0YXRpYyBmaWxlcy4gSSB3YW50Cj4gdG8gc3BlY2lmeSB0aGUgRXhwaXJlcywgQ2FjaGUtY29u
dHJvbCBoZWFkZXJzLCBzbyB0aGF0IHRoZSBicm93c2VyIHdpbGwKPiBub3QgbG9hZCB0aGlzIGZp
bGVzIGV2ZXJ5IHRpbWUuIEhvdyBjYW4gSSBzcGVjaWZ5IHRoZXNlIGhlYWRlcj8KPgo+IFRoYW5r
cywKPiBQcmFqd2FsYQo+Cj4KPgo+IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo+IDIy
1KqzrNa1t7nD5iw4LjXV27S/1eSxyMj4LLHYyqTVrLyxy83N+MnPteOyzdPFu9224DxodHRwOi8v
cG9wbWUuMTYzLmNvbS9saW5rLzAwNDU4NF8wNzA4XzY5NTcuaHRtbD4KPiBfX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwo+IFR3aXN0ZWQtd2ViIG1haWxpbmcg
bGlzdAo+IFR3aXN0ZWQtd2ViQHR3aXN0ZWRtYXRyaXguY29tCj4gaHR0cDovL3R3aXN0ZWRtYXRy
aXguY29tL2NnaS1iaW4vbWFpbG1hbi9saXN0aW5mby90d2lzdGVkLXdlYgo+Cj4KLS0tLS0tLS0t
LS0tLS0gbmV4dCBwYXJ0IC0tLS0tLS0tLS0tLS0tCkFuIEhUTUwgYXR0YWNobWVudCB3YXMgc2Ny
dWJiZWQuLi4KVVJMOiBodHRwOi8vdHdpc3RlZG1hdHJpeC5jb20vcGlwZXJtYWlsL3R3aXN0ZWQt
d2ViL2F0dGFjaG1lbnRzLzIwMDgwODEzL2QxNzI5ZjE4L2F0dGFjaG1lbnQuaHRtCg==
From uhcops at gmail.com  Fri Aug 15 18:24:51 2008
From: uhcops at gmail.com (arun chhetri)
Date: Fri Aug 15 18:24:55 2008
Subject: [Twisted-web] newbie question
Message-ID: <560daff30808151524j70bfde1o9bdbb27b2b00f0d3@mail.gmail.com>

hi,
 I have developed some twisted.web application. It connects to the other
server (CalDav) and then it displays back using twisted.web.
My problem is when a user logs into my website which is made using
twisted.web there is some data fetched from CALDAV server. When another user
logs into my website, even his data is downloaded from CalDav server but
this data overwrites the data of previous server. I think I am not able to
fork the process on each request. This is my just guess.

The Code is given below

from twisted.web import resource, static, server
import vobject
import calendarWebUtilities
import Calendar
import datetime
import re,calendar
import Month
import Week
import Day
import socket


class HomePage(resource.Resource):
    def render(self,request):
        return"""
    <html>
    <head>
    <title>VCalendar</title>
    </head>
    <body>
    <form action=3D/optional method=3D"post">
        User Name <input type=3D"text" name=3D"username"><br/>
        Pass Word <input type=3D"password" name=3D"pswd"><br/>
        ServerAdd <input type=3D"text" name=3D"server"><br/>
        <input type=3D"submit" Value=3D"Submit"><br/>
    </form>
    </body>
    </html>"""


class Optional(resource.Resource):
    def __init__(self):
        resource.Resource.__init__(self)
        self.CalendarData =3D {}
        self.account =3D {}
    def render(self,request):
        user =3D request.args["username"]
        pswd =3D request.args["pswd"]
        server =3D request.args["server"]
        if user !=3D None:
            if pswd !=3D None:
                if server !=3D None:
                    CalendarSource =3D None
                    CalendarSource =3D
Calendar.CalendarObject(user[0],pswd[0],server[0])
                    todayDate =3D datetime.datetime.now()
                    start =3D
datetime.datetime((todayDate.year-1),01,01,00,00)
                    end =3D
datetime.datetime((todayDate.year+1),12,31,23,59,59)
                    self.CalendarData['value'] =3D
CalendarSource.readCalendarComponent(start,end)
                    self.account['value'] =3D CalendarSource
                    self.index =3D 1
        request.redirect("/optional/Calendar")
        return " "

   def getChild(self,path,request):
        return MainCalendar(self.index,self.CalendarData,self.account)



class MainCalendar(resource.Resource):
    def __init__(self,index,CalendarData,account):
        resource.Resource.__init__(self)
        self.index =3D index
        self.CalendarData =3D CalendarData
        self.account =3D account

self.putChild('Add',AddCalendarComponent(self.CalendarData,self.account))

    def render(self,request):
        global Calendarata
        global account
        if request.path =3D=3D "/optional/Calendar" :
            request.redirect("/optional/Calendar/Month")
            return " "



    def getChild(self,path,request):
        if request.path =3D=3D "/optional/Calendar/Month":
            return Month.month(self.CalendarData,self.index)
        elif request.path =3D=3D "/optional/Calendar/Week":
            return Week.Week(self.CalendarData,self.index)
        elif request.path =3D=3D "/optional/Calendar/Day":
            return Day.Day(self.CalendarData,self.index)


class AddCalendarComponent(resource.Resource):
    def __init__(self,CalendarData,account):
        resource.Resource.__init__(self)
        self.CalendarData =3D CalendarData
        self.account =3D account

    def render (self,request):
        #if request.args !=3D None:
        queryString =3D len(request.args)
        if queryString !=3D0:
            try :
                summary1 =3D request.args['summary']
                location1 =3D request.args['location']
                startDate1 =3D request.args['startDate']
                endDate1 =3D request.args['endDate']
                CalendarSource =3D self.account['value']
                event =3D
CalendarSource.convertToProperFormatAndAddToCalendar(summary1,location1,sta=
rtDate1,endDate1)
                (self.CalendarData['value']).append(event)
                #CalendarData =3D {}
                #print "New Data Created"
                #print NewCalendar
                #CalendarData['value'] =3D NewCalendar
                request.redirect("/optional/Calendar")
                return " "
            except KeyError:
                request.args =3D {}
                request.redirect('/optional/Calendar/Month/Add')
        else:
            return"""
        <html>
        <head>
        </head>
        <body>

        <form action=3D"/optional/Calendar/Add" method=3D"post">
        Summary =3D <INPUT type=3D"text" name=3D"summary"></br>
        Location =3D <input type=3D"text" name=3D"location"></br>
        Start Date =3D <input type=3D"text" name=3D"startDate">Should Be in=
 format
year/MM/date/HH/MM</br>
        End Date =3D <input type=3D"text" name=3D"endDate">Should Be in for=
mat
year/MM/date/HH/MM</br>
        <input type=3D"submit">
        </form>
        </body>
        </html>
        """




if __name__ =3D=3D "__main__":
    from twisted.internet import reactor
    root =3D resource.Resource()
    root.putChild('',HomePage())
    root.putChild('optional',Optional())
    site =3D server.Site(root)
    reactor.listenTCP(8000,site)
    reactor.run()

I can guess there should be some method by which I can fork the root for
different request,, Please help.

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080815/c2=
37d582/attachment.htm
From bernat at luffy.cx  Sat Aug 16 08:36:47 2008
From: bernat at luffy.cx (Vincent Bernat)
Date: Sat Aug 16 08:37:02 2008
Subject: [Twisted-web] JSON "page" and nevow
Message-ID: <m363q1rva8.fsf@neo.luffy.cx>

Hi!

There are several  pages that I would like to serve  as JSON page. Nevow
include a  JSON serializer but it seems  there is no facility  to send a
page as JSON.

Here is what I do:

,----
| class JsonPage(rend.Page):
| 
|     docFactory = loaders.stan ( T.div(render=T.directive("json"),
|                                       data=T.directive("json")))
|     addSlash = True
|     flattenFactory = lambda self, *args: flat.flattenFactory(*args)
| 
|     def render_json(self, ctx, data):
|         """Render the given data in a proper JSON string"""
| 
|         def sanitize(data, d=None):
|             """Nevow JSON serializer is not able to handle some types.
| 
|             We convert those types in proper types:
|              - string to unicode string
|              - PgSQL result set into list
|              - handling of deferreds
|             """
|             if type(data) in [list, tuple] or isinstance(data, PgSQL.PgResultSet):
|                 return [sanitize(x, d) for x in data]
|             if type(data) == str:
|                 return unicode(data)
|             if isinstance(data, rend.Fragment):
|                 io = StringIO()
|                 writer = io.write
|                 finisher = lambda result: io.getvalue()
|                 newctx = context.PageContext(parent=ctx, tag=data)
|                 data.rememberStuff(newctx)
|                 doc = data.docFactory.load()
|                 newctx = context.WovenContext(newctx, T.invisible[doc])
|                 fl = self.flattenFactory(doc, newctx, writer, finisher)
|                 fl.addCallback(sanitize, None)
|                 d.append(fl)
|                 return fl
|             if isinstance(data, defer.Deferred):
|                 if data.called:
|                     return sanitize(data.result)
|                 return data
|             if isinstance(data, failure.Failure):
|                 return unicode(
|                     "<span class='error'>An error occured (%s)</span>" % data.getErrorMessage())
|             return data
| 
|         def serialize(data):
|             return json.serialize(sanitize(data))
| 
|         d = []
|         data = sanitize(data, d)
|         d = defer.DeferredList(d)
|         d.addCallback(lambda x: serialize(data))
|         return d
|         
| 
|     def beforeRender(self, ctx):
|         inevow.IRequest(ctx).setHeader("Content-Type", "application/json; charset=UTF-8")
`----

I inherit of this class and  just implement data_json. The main point is
that I should be able what I do for regular web pages, including the use
of deferred.

There are several drawbacks:
 - I need to use deferred.called and deferred.result that is not part of
   the public API. I don't know  how to avoid this. JSON serializer does
   not handle deferred (Fragments are rendered synchronously).
 - to  render Fragment,  I  use some  obscur  tricks that  I stole  from
   rend.py. Not sure that this would survive.
 - for Fragment,  serializers will turn  "<" into "&lt;".   Therefore, I
   should turn  them back as "<" on  Javascript side. I did  not found a
   way to avoid serializing twice.  It seems that T.xml instead of T.div
   would  do  the  trick  but  it  does  not  support  data  and  render
   attributes.
 - Nevow  JSON serializer  seems  not  te be  extended  to support  more
   types. Is it some plans to allow this?

Any tip to simplify or enhance the above code would be welcome.

Thanks.
-- 
Write and test a big program in small pieces.
            - The Elements of Programming Style (Kernighan & Plauger)

From exarkun at divmod.com  Sat Aug 16 08:50:23 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat Aug 16 08:50:34 2008
Subject: [Twisted-web] JSON "page" and nevow
In-Reply-To: <m363q1rva8.fsf@neo.luffy.cx>
Message-ID: <20080816125023.29191.1910717553.divmod.quotient.15190@ohm>

On Sat, 16 Aug 2008 14:36:47 +0200, Vincent Bernat <bernat@luffy.cx> wrote:
>Hi!
>
>There are several  pages that I would like to serve  as JSON page. Nevow
>include a  JSON serializer but it seems  there is no facility  to send a
>page as JSON.

`nevow.json? is a support module for `nevow.athena?.  It's not intended to
be a complete or totally awesome JSON implementation.

>
>Here is what I do:
>
>,----
>| class JsonPage(rend.Page):
>|
>|     docFactory = loaders.stan ( T.div(render=T.directive("json"),
>|                                       data=T.directive("json")))
>|     addSlash = True
>|     flattenFactory = lambda self, *args: flat.flattenFactory(*args)
>|
>|     def render_json(self, ctx, data):
> [snip]
>
>I inherit of this class and  just implement data_json. The main point is
>that I should be able what I do for regular web pages, including the use
>of deferred.

JSON isn't XHTML, and the `docFactory? and `render_*? mechanisms are
primarily concerned with the generation of XHTML.  To generate JSON,
I think you'd do better to ignore these features of Page and override
the `renderHTTP? method instead.  You won't have to deal with < being
turned into &lt; and other such XHTML-related problems.

Hope this helps,

Jean-Paul

From graemeglass at gmail.com  Sat Aug 16 17:46:05 2008
From: graemeglass at gmail.com (Graeme Glass)
Date: Sat Aug 16 17:46:09 2008
Subject: [Twisted-web] newbie question
In-Reply-To: <560daff30808151524j70bfde1o9bdbb27b2b00f0d3@mail.gmail.com>
References: <560daff30808151524j70bfde1o9bdbb27b2b00f0d3@mail.gmail.com>
Message-ID: <ead817660808161446kfee35ddk8c894765f98c6d9@mail.gmail.com>

On Sat, Aug 16, 2008 at 12:24 AM, arun chhetri <uhcops@gmail.com> wrote:

> hi,
>  I have developed some twisted.web application. It connects to the other
> server (CalDav) and then it displays back using twisted.web.
> My problem is when a user logs into my website which is made using
> twisted.web there is some data fetched from CALDAV server. When another u=
ser
> logs into my website, even his data is downloaded from CalDav server but
> this data overwrites the data of previous server. I think I am not able to
> fork the process on each request. This is my just guess.
>
> The Code is given below
>
> from twisted.web import resource, static, server
> import vobject
> import calendarWebUtilities
> import Calendar
> import datetime
> import re,calendar
> import Month
> import Week
> import Day
> import socket
>
>
> class HomePage(resource.Resource):
>     def render(self,request):
>         return"""
>     <html>
>     <head>
>     <title>VCalendar</title>
>     </head>
>     <body>
>     <form action=3D/optional method=3D"post">
>         User Name <input type=3D"text" name=3D"username"><br/>
>         Pass Word <input type=3D"password" name=3D"pswd"><br/>
>         ServerAdd <input type=3D"text" name=3D"server"><br/>
>         <input type=3D"submit" Value=3D"Submit"><br/>
>     </form>
>     </body>
>     </html>"""
>
>
> class Optional(resource.Resource):
>     def __init__(self):
>         resource.Resource.__init__(self)
>         self.CalendarData =3D {}
>         self.account =3D {}
>     def render(self,request):
>         user =3D request.args["username"]
>         pswd =3D request.args["pswd"]
>         server =3D request.args["server"]
>         if user !=3D None:
>             if pswd !=3D None:
>                 if server !=3D None:
>                     CalendarSource =3D None
>                     CalendarSource =3D
> Calendar.CalendarObject(user[0],pswd[0],server[0])
>                     todayDate =3D datetime.datetime.now()
>                     start =3D
> datetime.datetime((todayDate.year-1),01,01,00,00)
>                     end =3D
> datetime.datetime((todayDate.year+1),12,31,23,59,59)
>                     self.CalendarData['value'] =3D
> CalendarSource.readCalendarComponent(start,end)
>                     self.account['value'] =3D CalendarSource
>                     self.index =3D 1
>         request.redirect("/optional/Calendar")
>         return " "
>
>    def getChild(self,path,request):
>         return MainCalendar(self.index,self.CalendarData,self.account)
>
>
>
> class MainCalendar(resource.Resource):
>     def __init__(self,index,CalendarData,account):
>         resource.Resource.__init__(self)
>         self.index =3D index
>         self.CalendarData =3D CalendarData
>         self.account =3D account
>
> self.putChild('Add',AddCalendarComponent(self.CalendarData,self.account))
>
>     def render(self,request):
>         global Calendarata
>         global account
>         if request.path =3D=3D "/optional/Calendar" :
>             request.redirect("/optional/Calendar/Month")
>             return " "
>
>
>
>     def getChild(self,path,request):
>         if request.path =3D=3D "/optional/Calendar/Month":
>             return Month.month(self.CalendarData,self.index)
>         elif request.path =3D=3D "/optional/Calendar/Week":
>             return Week.Week(self.CalendarData,self.index)
>         elif request.path =3D=3D "/optional/Calendar/Day":
>             return Day.Day(self.CalendarData,self.index)
>
>
> class AddCalendarComponent(resource.Resource):
>     def __init__(self,CalendarData,account):
>         resource.Resource.__init__(self)
>         self.CalendarData =3D CalendarData
>         self.account =3D account
>
>     def render (self,request):
>         #if request.args !=3D None:
>         queryString =3D len(request.args)
>         if queryString !=3D0:
>             try :
>                 summary1 =3D request.args['summary']
>                 location1 =3D request.args['location']
>                 startDate1 =3D request.args['startDate']
>                 endDate1 =3D request.args['endDate']
>                 CalendarSource =3D self.account['value']
>                 event =3D
> CalendarSource.convertToProperFormatAndAddToCalendar(summary1,location1,s=
tartDate1,endDate1)
>                 (self.CalendarData['value']).append(event)
>                 #CalendarData =3D {}
>                 #print "New Data Created"
>                 #print NewCalendar
>                 #CalendarData['value'] =3D NewCalendar
>                 request.redirect("/optional/Calendar")
>                 return " "
>             except KeyError:
>                 request.args =3D {}
>                 request.redirect('/optional/Calendar/Month/Add')
>         else:
>             return"""
>         <html>
>         <head>
>         </head>
>         <body>
>
>         <form action=3D"/optional/Calendar/Add" method=3D"post">
>         Summary =3D <INPUT type=3D"text" name=3D"summary"></br>
>         Location =3D <input type=3D"text" name=3D"location"></br>
>         Start Date =3D <input type=3D"text" name=3D"startDate">Should Be =
in
> format year/MM/date/HH/MM</br>
>         End Date =3D <input type=3D"text" name=3D"endDate">Should Be in f=
ormat
> year/MM/date/HH/MM</br>
>         <input type=3D"submit">
>         </form>
>         </body>
>         </html>
>         """
>
>
>
>
> if __name__ =3D=3D "__main__":
>     from twisted.internet import reactor
>     root =3D resource.Resource()
>     root.putChild('',HomePage())
>     root.putChild('optional',Optional())
>     site =3D server.Site(root)
>     reactor.listenTCP(8000,site)
>     reactor.run()
>
> I can guess there should be some method by which I can fork the root for
> different request,, Please help.
>
> Thanks
>
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
Try using a factory for your session storage instead of storing it in the
actually resource, that way you will be able to access your session
information from the resources without overriding it on every request. Take
a look at twisted.internet.protocol.ServerFactory.

HTH

G
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080816/67=
275c6d/attachment.htm
From uhcops at gmail.com  Mon Aug 18 11:15:46 2008
From: uhcops at gmail.com (arun chhetri)
Date: Mon Aug 18 11:15:51 2008
Subject: [Twisted-web] newbie question
In-Reply-To: <ead817660808161446kfee35ddk8c894765f98c6d9@mail.gmail.com>
References: <560daff30808151524j70bfde1o9bdbb27b2b00f0d3@mail.gmail.com>
	<ead817660808161446kfee35ddk8c894765f98c6d9@mail.gmail.com>
Message-ID: <560daff30808180815x6fdcbe7cud29f8c5fa374dbcc@mail.gmail.com>

So, does this means that twisted.web can only handle one request at a
time,,,,, why It should do that.

thanks

On Sat, Aug 16, 2008 at 4:46 PM, Graeme Glass <graemeglass@gmail.com> wrote:

> On Sat, Aug 16, 2008 at 12:24 AM, arun chhetri <uhcops@gmail.com> wrote:
>
>> hi,
>>  I have developed some twisted.web application. It connects to the other
>> server (CalDav) and then it displays back using twisted.web.
>> My problem is when a user logs into my website which is made using
>> twisted.web there is some data fetched from CALDAV server. When another =
user
>> logs into my website, even his data is downloaded from CalDav server but
>> this data overwrites the data of previous server. I think I am not able =
to
>> fork the process on each request. This is my just guess.
>>
>> The Code is given below
>>
>> from twisted.web import resource, static, server
>> import vobject
>> import calendarWebUtilities
>> import Calendar
>> import datetime
>> import re,calendar
>> import Month
>> import Week
>> import Day
>> import socket
>>
>>
>> class HomePage(resource.Resource):
>>     def render(self,request):
>>         return"""
>>     <html>
>>     <head>
>>     <title>VCalendar</title>
>>     </head>
>>     <body>
>>     <form action=3D/optional method=3D"post">
>>         User Name <input type=3D"text" name=3D"username"><br/>
>>         Pass Word <input type=3D"password" name=3D"pswd"><br/>
>>         ServerAdd <input type=3D"text" name=3D"server"><br/>
>>         <input type=3D"submit" Value=3D"Submit"><br/>
>>     </form>
>>     </body>
>>     </html>"""
>>
>>
>> class Optional(resource.Resource):
>>     def __init__(self):
>>         resource.Resource.__init__(self)
>>         self.CalendarData =3D {}
>>         self.account =3D {}
>>     def render(self,request):
>>         user =3D request.args["username"]
>>         pswd =3D request.args["pswd"]
>>         server =3D request.args["server"]
>>         if user !=3D None:
>>             if pswd !=3D None:
>>                 if server !=3D None:
>>                     CalendarSource =3D None
>>                     CalendarSource =3D
>> Calendar.CalendarObject(user[0],pswd[0],server[0])
>>                     todayDate =3D datetime.datetime.now()
>>                     start =3D
>> datetime.datetime((todayDate.year-1),01,01,00,00)
>>                     end =3D
>> datetime.datetime((todayDate.year+1),12,31,23,59,59)
>>                     self.CalendarData['value'] =3D
>> CalendarSource.readCalendarComponent(start,end)
>>                     self.account['value'] =3D CalendarSource
>>                     self.index =3D 1
>>         request.redirect("/optional/Calendar")
>>         return " "
>>
>>    def getChild(self,path,request):
>>         return MainCalendar(self.index,self.CalendarData,self.account)
>>
>>
>>
>> class MainCalendar(resource.Resource):
>>     def __init__(self,index,CalendarData,account):
>>         resource.Resource.__init__(self)
>>         self.index =3D index
>>         self.CalendarData =3D CalendarData
>>         self.account =3D account
>>
>> self.putChild('Add',AddCalendarComponent(self.CalendarData,self.account))
>>
>>     def render(self,request):
>>         global Calendarata
>>         global account
>>         if request.path =3D=3D "/optional/Calendar" :
>>             request.redirect("/optional/Calendar/Month")
>>             return " "
>>
>>
>>
>>     def getChild(self,path,request):
>>         if request.path =3D=3D "/optional/Calendar/Month":
>>             return Month.month(self.CalendarData,self.index)
>>         elif request.path =3D=3D "/optional/Calendar/Week":
>>             return Week.Week(self.CalendarData,self.index)
>>         elif request.path =3D=3D "/optional/Calendar/Day":
>>             return Day.Day(self.CalendarData,self.index)
>>
>>
>> class AddCalendarComponent(resource.Resource):
>>     def __init__(self,CalendarData,account):
>>         resource.Resource.__init__(self)
>>         self.CalendarData =3D CalendarData
>>         self.account =3D account
>>
>>     def render (self,request):
>>         #if request.args !=3D None:
>>         queryString =3D len(request.args)
>>         if queryString !=3D0:
>>             try :
>>                 summary1 =3D request.args['summary']
>>                 location1 =3D request.args['location']
>>                 startDate1 =3D request.args['startDate']
>>                 endDate1 =3D request.args['endDate']
>>                 CalendarSource =3D self.account['value']
>>                 event =3D
>> CalendarSource.convertToProperFormatAndAddToCalendar(summary1,location1,=
startDate1,endDate1)
>>                 (self.CalendarData['value']).append(event)
>>                 #CalendarData =3D {}
>>                 #print "New Data Created"
>>                 #print NewCalendar
>>                 #CalendarData['value'] =3D NewCalendar
>>                 request.redirect("/optional/Calendar")
>>                 return " "
>>             except KeyError:
>>                 request.args =3D {}
>>                 request.redirect('/optional/Calendar/Month/Add')
>>         else:
>>             return"""
>>         <html>
>>         <head>
>>         </head>
>>         <body>
>>
>>         <form action=3D"/optional/Calendar/Add" method=3D"post">
>>         Summary =3D <INPUT type=3D"text" name=3D"summary"></br>
>>         Location =3D <input type=3D"text" name=3D"location"></br>
>>         Start Date =3D <input type=3D"text" name=3D"startDate">Should Be=
 in
>> format year/MM/date/HH/MM</br>
>>         End Date =3D <input type=3D"text" name=3D"endDate">Should Be in =
format
>> year/MM/date/HH/MM</br>
>>         <input type=3D"submit">
>>         </form>
>>         </body>
>>         </html>
>>         """
>>
>>
>>
>>
>> if __name__ =3D=3D "__main__":
>>     from twisted.internet import reactor
>>     root =3D resource.Resource()
>>     root.putChild('',HomePage())
>>     root.putChild('optional',Optional())
>>     site =3D server.Site(root)
>>     reactor.listenTCP(8000,site)
>>     reactor.run()
>>
>> I can guess there should be some method by which I can fork the root for
>> different request,, Please help.
>>
>> Thanks
>>
>>
>>
>> _______________________________________________
>> Twisted-web mailing list
>> Twisted-web@twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>>
>>
> Try using a factory for your session storage instead of storing it in the
> actually resource, that way you will be able to access your session
> information from the resources without overriding it on every request. Ta=
ke
> a look at twisted.internet.protocol.ServerFactory.
>
> HTH
>
> G
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080818/d1=
213144/attachment.htm
From exarkun at divmod.com  Mon Aug 18 11:29:54 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon Aug 18 11:30:05 2008
Subject: [Twisted-web] newbie question
In-Reply-To: <560daff30808180815x6fdcbe7cud29f8c5fa374dbcc@mail.gmail.com>
Message-ID: <20080818152954.29191.1482829174.divmod.quotient.16203@ohm>

On Mon, 18 Aug 2008 10:15:46 -0500, arun chhetri <uhcops@gmail.com> wrote:
>So, does this means that twisted.web can only handle one request at a
>time,,,,, why It should do that.
> [snip]
>>>
>>> class Optional(resource.Resource):
>>> [snip]
>>>     def render(self,request):
>>> [snip]
>>>                     self.account['value'] = CalendarSource
>>>                     self.index = 1
>>>         request.redirect("/optional/Calendar")
>>>         return " "
>>>
>>> [snip]
>>>
>>> if __name__ == "__main__":
>>>     from twisted.internet import reactor
>>>     root = resource.Resource()
>>>     root.putChild('',HomePage())
>>>     root.putChild('optional',Optional())
>>>     site = server.Site(root)
>>>     reactor.listenTCP(8000,site)
>>>     reactor.run()

There is just one instance of `Optional? in your application.  That
instance will be used to render the response to any request for
`/optional?.  The `Optional? class also keeps state on itself which
appears to be associated with different users.  So whenever multiple
users make requests of your server, that single `Optional? instance
is going to mix state from them together.  What you probably want to
do instead is have many instances of `Optional?, perhaps one per user
of your system.  This means keeping track of them somewhere and finding
the right one to use for any particular request.  For example, you might
keep a dict keyed on username somewhere and in a custom `getChild?
implementation find the right one and return it.

Jean-Paul

From bernat at luffy.cx  Mon Aug 18 15:14:39 2008
From: bernat at luffy.cx (Vincent Bernat)
Date: Mon Aug 18 15:15:02 2008
Subject: [Twisted-web] JSON "page" and nevow
In-Reply-To: <20080816125023.29191.1910717553.divmod.quotient.15190@ohm>
	(Jean-Paul Calderone's message of "Sat, 16 Aug 2008 08:50:23 -0400")
References: <20080816125023.29191.1910717553.divmod.quotient.15190@ohm>
Message-ID: <m31w0mkue8.fsf@neo.luffy.cx>

OoO En ce d?but d'apr?s-midi nuageux du samedi 16 ao?t 2008, vers 14:50,
Jean-Paul Calderone <exarkun@divmod.com> disait?:

> JSON isn't XHTML, and the `docFactory? and `render_*? mechanisms are
> primarily concerned with the generation of XHTML.  To generate JSON,
> I think you'd do better to ignore these features of Page and override
> the `renderHTTP? method instead.  You won't have to deal with < being
> turned into &lt; and other such XHTML-related problems.

Thanks for the tip.

I have added the following function:

,----
|     addSlash = True
| 
|     def renderHTTP(self, ctx):
|         request = inevow.IRequest(ctx)
|         if inevow.ICurrentSegments(ctx)[-1] != '':
|             request.redirect(request.URLPath().child(''))
|             return ''
|         request.setHeader("Content-Type",
|                           "application/json; charset=UTF-8")
|         d = defer.maybeDeferred(self.data_json, ctx, None)
|         d.addCallback(lambda x: self.render_json(ctx, x))
|         return d
`----

This now works fine.

Thanks for your help.
-- 
Test input for validity and plausibility.
            - The Elements of Programming Style (Kernighan & Plauger)

From shawn at schurchcomputers.com  Mon Aug 18 16:07:30 2008
From: shawn at schurchcomputers.com (Shawn Church)
Date: Mon Aug 18 16:07:37 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
Message-ID: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>

I want to store user data in t.w.s.Session to allow a persistent logon.  As
the login will be made with a PyAmf method call I do not think that
t.w.w.Guard will work because it appears to process the login from POST
data.   It is trivial to store the user data in the session object with
Request.getSession,  but is this a secure method?  Could someone guess the
session key and use it to forge credentials?  Is there a better way to do
this?

The PyAmf examples send the username and password with every method call.  I
would prefer to use the session because the user can log-on once for
multiple windows/tabs.  The twisted PB security model seems much more
elegant then what is available for twisted.web.  Am I missing something????

Thanks in advance and once again thank you for the fantastic work on
twisted.

Shawn Church
I/S Consultant
Shawn At SCchurchComputers.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080818/c8=
0da95b/attachment.htm
From phil at bubblehouse.org  Mon Aug 18 16:28:35 2008
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon Aug 18 16:28:53 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>
Message-ID: <6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>

On Aug 18, 2008, at 4:07 PM, Shawn Church wrote:
> I want to store user data in t.w.s.Session to allow a persistent  
> logon.  As the login will be made with a PyAmf method call I do not  
> think that t.w.w.Guard will work because it appears to process the  
> login from POST data.   It is trivial to store the user data in the  
> session object with Request.getSession,  but is this a secure  
> method?  Could someone guess the session key and use it to forge  
> credentials?  Is there a better way to do this?

Whenever you're dealing with sessions over unencrypted HTTP, it it  
potentially possible to forge credentials. I don't know for sure  
whether guard checks the IP address of a request against the original  
one that created the session in the first place, but even that could  
technically be forged.

> The PyAmf examples send the username and password with every method  
> call.  I would prefer to use the session because the user can log-on  
> once for multiple windows/tabs.  The twisted PB security model seems  
> much more elegant then what is available for twisted.web.  Am I  
> missing something????


I know what you mean; there are a number of things I don't like about  
Nevow guard, although I have to say I haven't spent any time with  
twisted.web's guard, and I know there are some differences.

However, the only real difference between the PB and twisted.web  
security models is guard itself (versus the PB login() methods). They  
both use twisted.cred for dealing with authentication, which is an  
excellent implementation of a common requirement.

If you can get a decent familiarity with twisted.cred, you can  
implement just about any session mechanism you might like. For an  
example, you could check out my txOpenID project (https://launchpad.net/txopenid 
). In this case, I needed to handle sessions without adding redirects  
to the authentication flow, save session data in a relational  
database, and programmatically determine where to redirect an  
unauthenticated user.

My solution in this case was to create a superclass resource that all  
my authenticated resources would inherit from. This is almost  
definitely not the "Twisted way" to do this, but it works  
exceptionally well for my needs.

Hope this was some help,

-phil

From shawn at schurchcomputers.com  Mon Aug 18 17:02:24 2008
From: shawn at schurchcomputers.com (Shawn Church)
Date: Mon Aug 18 17:02:28 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>
	<6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>
Message-ID: <f4a7d4e0808181402h5d9a92a2r63592112a96a1cea@mail.gmail.com>

I'm using https so encryption is not an issue (although there are no plans
to use verisign or any other third-party service to validate the IP
address.  The application is for in-house use and will not be publically
accessible so this should not be an issue).

Thank you for the reference to txOpenID,  I will download and plunder it for
ideas.
On Mon, Aug 18, 2008 at 1:28 PM, Phil Christensen <phil@bubblehouse.org>wro=
te:

> On Aug 18, 2008, at 4:07 PM, Shawn Church wrote:
>
>> I want to store user data in t.w.s.Session to allow a persistent logon.
>>  As the login will be made with a PyAmf method call I do not think that
>> t.w.w.Guard will work because it appears to process the login from POST
>> data.   It is trivial to store the user data in the session object with
>> Request.getSession,  but is this a secure method?  Could someone guess t=
he
>> session key and use it to forge credentials?  Is there a better way to do
>> this?
>>
>
> Whenever you're dealing with sessions over unencrypted HTTP, it it
> potentially possible to forge credentials. I don't know for sure whether
> guard checks the IP address of a request against the original one that
> created the session in the first place, but even that could technically be
> forged.
>
>  The PyAmf examples send the username and password with every method call.
>>  I would prefer to use the session because the user can log-on once for
>> multiple windows/tabs.  The twisted PB security model seems much more
>> elegant then what is available for twisted.web.  Am I missing something?=
???
>>
>
>
> I know what you mean; there are a number of things I don't like about Nev=
ow
> guard, although I have to say I haven't spent any time with twisted.web's
> guard, and I know there are some differences.
>
> However, the only real difference between the PB and twisted.web security
> models is guard itself (versus the PB login() methods). They both use
> twisted.cred for dealing with authentication, which is an excellent
> implementation of a common requirement.
>
> If you can get a decent familiarity with twisted.cred, you can implement
> just about any session mechanism you might like. For an example, you could
> check out my txOpenID project (https://launchpad.net/txopenid). In this
> case, I needed to handle sessions without adding redirects to the
> authentication flow, save session data in a relational database, and
> programmatically determine where to redirect an unauthenticated user.
>
> My solution in this case was to create a superclass resource that all my
> authenticated resources would inherit from. This is almost definitely not
> the "Twisted way" to do this, but it works exceptionally well for my need=
s.
>
> Hope this was some help,
>
> -phil
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080818/4b=
ca9198/attachment.htm
From p.mayers at imperial.ac.uk  Mon Aug 18 17:40:51 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon Aug 18 17:40:59 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>
	<6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>
Message-ID: <20080818214051.GB32257@doorstop.net.ic.ac.uk>

> potentially possible to forge credentials. I don't know for sure 
> whether guard checks the IP address of a request against the original 
> one that created the session in the first place, but even that could 
> technically be forged.

Caches.

From phil at bubblehouse.org  Mon Aug 18 18:44:29 2008
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon Aug 18 18:45:03 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <20080818214051.GB32257@doorstop.net.ic.ac.uk>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>
	<6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>
	<20080818214051.GB32257@doorstop.net.ic.ac.uk>
Message-ID: <E3A8C437-1A6B-47F4-BFAE-0F4002F8E69D@bubblehouse.org>

On Aug 18, 2008, at 5:40 PM, Phil Mayers wrote:
>> potentially possible to forge credentials. I don't know for sure  
>> whether guard checks the IP address of a request against the  
>> original one that created the session in the first place, but even  
>> that could technically be forged.
>
> Caches.

My first guess is that you're referring to caching proxies. I don't  
really see how this is an issue, since there's a host of problems  
you'll run into if a misbehaving caching proxy is aggressively  
caching dynamic content.

Or perhaps the issue you're raising is that there exists a security  
issue in that if you are behind a proxy, anyone else behind that  
proxy could hijack your session even if the web app session code is  
checking the client's IP.

But, you know, I'm not so skilled at the whole brevity thing ;-)...

-phil

From mithrandi at mithrandi.net  Mon Aug 18 20:46:00 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon Aug 18 20:46:17 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <E3A8C437-1A6B-47F4-BFAE-0F4002F8E69D@bubblehouse.org>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>
	<6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>
	<20080818214051.GB32257@doorstop.net.ic.ac.uk>
	<E3A8C437-1A6B-47F4-BFAE-0F4002F8E69D@bubblehouse.org>
Message-ID: <20080819004600.GA12516@mithrandi.net>

KiBQaGlsIENocmlzdGVuc2VuIDxwaGlsQGJ1YmJsZWhvdXNlLm9yZz4gWzIwMDgtMDgtMTggMTg6
NDQ6MjkgLTA0MDBdOgoKPiBPbiBBdWcgMTgsIDIwMDgsIGF0IDU6NDAgUE0sIFBoaWwgTWF5ZXJz
IHdyb3RlOgo+Pj4gcG90ZW50aWFsbHkgcG9zc2libGUgdG8gZm9yZ2UgY3JlZGVudGlhbHMuIEkg
ZG9uJ3Qga25vdyBmb3Igc3VyZSAgCj4+PiB3aGV0aGVyIGd1YXJkIGNoZWNrcyB0aGUgSVAgYWRk
cmVzcyBvZiBhIHJlcXVlc3QgYWdhaW5zdCB0aGUgIAo+Pj4gb3JpZ2luYWwgb25lIHRoYXQgY3Jl
YXRlZCB0aGUgc2Vzc2lvbiBpbiB0aGUgZmlyc3QgcGxhY2UsIGJ1dCBldmVuICAKPj4+IHRoYXQg
Y291bGQgdGVjaG5pY2FsbHkgYmUgZm9yZ2VkLgo+Pgo+PiBDYWNoZXMuCj4KPiBNeSBmaXJzdCBn
dWVzcyBpcyB0aGF0IHlvdSdyZSByZWZlcnJpbmcgdG8gY2FjaGluZyBwcm94aWVzLiBJIGRvbid0
ICAKPiByZWFsbHkgc2VlIGhvdyB0aGlzIGlzIGFuIGlzc3VlLCBzaW5jZSB0aGVyZSdzIGEgaG9z
dCBvZiBwcm9ibGVtcyB5b3UnbGwgCj4gcnVuIGludG8gaWYgYSBtaXNiZWhhdmluZyBjYWNoaW5n
IHByb3h5IGlzIGFnZ3Jlc3NpdmVseSBjYWNoaW5nIGR5bmFtaWMgCj4gY29udGVudC4KPgo+IE9y
IHBlcmhhcHMgdGhlIGlzc3VlIHlvdSdyZSByYWlzaW5nIGlzIHRoYXQgdGhlcmUgZXhpc3RzIGEg
c2VjdXJpdHkgIAo+IGlzc3VlIGluIHRoYXQgaWYgeW91IGFyZSBiZWhpbmQgYSBwcm94eSwgYW55
b25lIGVsc2UgYmVoaW5kIHRoYXQgcHJveHkgCj4gY291bGQgaGlqYWNrIHlvdXIgc2Vzc2lvbiBl
dmVuIGlmIHRoZSB3ZWIgYXBwIHNlc3Npb24gY29kZSBpcyBjaGVja2luZyAKPiB0aGUgY2xpZW50
J3MgSVAuCgpUaGVyZSdzIGFsc28gdGhlIHJldmVyc2UgcHJvYmxlbTsgcHJveHlpbmcgb2YgcmVx
dWVzdHMgKG9yIGhvc3RzIG1vdmluZwpiZXR3ZWVuIG5ldHdvcmtzIGV2ZW4gd2l0aG91dCBwcm94
aWVzKSBjYW4gY2F1c2UgbXVsdGlwbGUgcmVxdWVzdHMgaW4KdGhlIHNhbWUgc2Vzc2lvbiB0byBj
b21lIGZyb20gZGlmZmVyZW50IElQIGFkZHJlc3NlcywgdGh1cyBpbXBsZW1lbnRpbmcKdGhpcyAi
c2VjdXJpdHkgbWVhc3VyZSIgd2lsbCBicmVhayBhIHNpZ25pZmljYW50IG51bWJlciBvZiBjbGll
bnRzLCBhbmQKaXMgcHJvYmFibHkgYSBiYWQgaWRlYSAoc2luY2UgaXQgaXMgYWxzbyBpbmVmZmVj
dHVhbCkuCi0tIAptaXRocmFuZGksIGkgQWluaWwgZW4tQmFsYW5kb3IsIGEgZmFlciBBbWJhcgot
LS0tLS0tLS0tLS0tLSBuZXh0IHBhcnQgLS0tLS0tLS0tLS0tLS0KQSBub24tdGV4dCBhdHRhY2ht
ZW50IHdhcyBzY3J1YmJlZC4uLgpOYW1lOiBub3QgYXZhaWxhYmxlClR5cGU6IGFwcGxpY2F0aW9u
L3BncC1zaWduYXR1cmUKU2l6ZTogMTk3IGJ5dGVzCkRlc2M6IERpZ2l0YWwgc2lnbmF0dXJlClVy
bCA6IGh0dHA6Ly90d2lzdGVkbWF0cml4LmNvbS9waXBlcm1haWwvdHdpc3RlZC13ZWIvYXR0YWNo
bWVudHMvMjAwODA4MTkvZGYyNTQ5MWMvYXR0YWNobWVudC5wZ3AK
From p.mayers at imperial.ac.uk  Tue Aug 19 03:31:57 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue Aug 19 03:32:34 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <20080819004600.GA12516@mithrandi.net>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>	<6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>	<20080818214051.GB32257@doorstop.net.ic.ac.uk>	<E3A8C437-1A6B-47F4-BFAE-0F4002F8E69D@bubblehouse.org>
	<20080819004600.GA12516@mithrandi.net>
Message-ID: <48AA76ED.6060602@imperial.ac.uk>

Tristan Seligmann wrote:
> * Phil Christensen <phil@bubblehouse.org> [2008-08-18 18:44:29 -0400]:
> 
>> On Aug 18, 2008, at 5:40 PM, Phil Mayers wrote:
>>>> potentially possible to forge credentials. I don't know for sure  
>>>> whether guard checks the IP address of a request against the  
>>>> original one that created the session in the first place, but even  
>>>> that could technically be forged.
>>> Caches.
>> My first guess is that you're referring to caching proxies. I don't  
>> really see how this is an issue, since there's a host of problems you'll 
>> run into if a misbehaving caching proxy is aggressively caching dynamic 
>> content.
>>
>> Or perhaps the issue you're raising is that there exists a security  
>> issue in that if you are behind a proxy, anyone else behind that proxy 
>> could hijack your session even if the web app session code is checking 
>> the client's IP.
> 
> There's also the reverse problem; proxying of requests (or hosts moving
> between networks even without proxies) can cause multiple requests in
> the same session to come from different IP addresses, thus implementing
> this "security measure" will break a significant number of clients, and
> is probably a bad idea (since it is also ineffectual).

That's what I was referring to. Apologies for the brevity, I was typing 
on a phone handset at the time ;o)

Broadly, caches are perfectly legitimate in HTTP, and it's legitimate 
for subsequent HTTP requests to come from different IPs (hell, NAT could 
in theory cause that to happen).

So, tying the IP into the authentication is, generally, a bad idea.

Something like Digest HTTP auth is the "safe" way to secure an HTTP 
session - you can even (though I've not seen this commonly uses) re-use 
the digest session ID as a server-side key into application session storage.

From shawn at schurchcomputers.com  Tue Aug 19 03:40:50 2008
From: shawn at schurchcomputers.com (Shawn Church)
Date: Tue Aug 19 03:40:54 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <20080819004600.GA12516@mithrandi.net>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>
	<6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>
	<20080818214051.GB32257@doorstop.net.ic.ac.uk>
	<E3A8C437-1A6B-47F4-BFAE-0F4002F8E69D@bubblehouse.org>
	<20080819004600.GA12516@mithrandi.net>
Message-ID: <f4a7d4e0808190040s79c394cepb2f6a0d9d2a7f55@mail.gmail.com>

So what is the bottom line?  The standard Twisted session,  in the
t.w.server module,  creates a UID from a MD5 hash of a sequential number +
random().  This UID is stored in a cookie.  So is it is safe to store a user
data in the session object and assume that the correct user is returned for
a given request (assuming https is used and also assuming that no one is
hacking the cookies on the users computer)?

Well,  just as I finished typing the above I noticed that Phil Mayers wrote
a more detailed response.  I could set Digest auth via Flex but what about
twisted? I was trying to avoid twisted.web2 because my understanding is that
it is being phased out.

On Mon, Aug 18, 2008 at 5:46 PM, Tristan Seligmann
<mithrandi@mithrandi.net>wrote:

> * Phil Christensen <phil@bubblehouse.org> [2008-08-18 18:44:29 -0400]:
>
> > On Aug 18, 2008, at 5:40 PM, Phil Mayers wrote:
> >>> potentially possible to forge credentials. I don't know for sure
> >>> whether guard checks the IP address of a request against the
> >>> original one that created the session in the first place, but even
> >>> that could technically be forged.
> >>
> >> Caches.
> >
> > My first guess is that you're referring to caching proxies. I don't
> > really see how this is an issue, since there's a host of problems you'll
> > run into if a misbehaving caching proxy is aggressively caching dynamic
> > content.
> >
> > Or perhaps the issue you're raising is that there exists a security
> > issue in that if you are behind a proxy, anyone else behind that proxy
> > could hijack your session even if the web app session code is checking
> > the client's IP.
>
> There's also the reverse problem; proxying of requests (or hosts moving
> between networks even without proxies) can cause multiple requests in
> the same session to come from different IP addresses, thus implementing
> this "security measure" will break a significant number of clients, and
> is probably a bad idea (since it is also ineffectual).
> --
> mithrandi, i Ainil en-Balandor, a faer Ambar
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.9 (GNU/Linux)
>
> iEYEARECAAYFAkiqF8gACgkQpNuXDQIV94rznQCfWQIcZ92qTeZyw14WuogX1GSM
> Gw4Anj4dzZ2d/Qhba9vIVfgLruLZ7ZAW
> =3DGX/n
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080819/65=
b672a0/attachment.htm
From p.mayers at imperial.ac.uk  Tue Aug 19 05:20:59 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue Aug 19 05:21:39 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <f4a7d4e0808190040s79c394cepb2f6a0d9d2a7f55@mail.gmail.com>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>	<6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>	<20080818214051.GB32257@doorstop.net.ic.ac.uk>	<E3A8C437-1A6B-47F4-BFAE-0F4002F8E69D@bubblehouse.org>	<20080819004600.GA12516@mithrandi.net>
	<f4a7d4e0808190040s79c394cepb2f6a0d9d2a7f55@mail.gmail.com>
Message-ID: <48AA907B.5020203@imperial.ac.uk>

Shawn Church wrote:
> So what is the bottom line?  The standard Twisted session,  in the 
> t.w.server module,  creates a UID from a MD5 hash of a sequential number 
> + random().  This UID is stored in a cookie.  So is it is safe to store 
> a user data in the session object and assume that the correct user is 
> returned for a given request (assuming https is used and also assuming 
> that no one is hacking the cookies on the users computer)? 

"It depends".

We use that method, as do an awful lot of web service providers, and 
it's secure enough for our needs.

So, I would say "yes"

> 
> Well,  just as I finished typing the above I noticed that Phil Mayers 
> wrote a more detailed response.  I could set Digest auth via Flex but 
> what about twisted? I was trying to avoid twisted.web2 because my 
> understanding is that it is being phased out.

I was being a tiny bit speculative. However, twisted.web has recently 
acquired new http authentication infrastructure (as opposed to the 
form-based guard stuff already present) which can handle digest.

See:

http://twistedmatrix.com/trac/browser/trunk/doc/web/examples/webguard.py

...however, digest auth only gives you "session-like" capabilities if 
you're using the md5-sess algorithm, and the comments here:

http://twistedmatrix.com/trac/browser/trunk/twisted/web/_auth/digest.py#L26

...make me wonder if the "new" code does?


From manlio_perillo at libero.it  Tue Aug 19 05:28:33 2008
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue Aug 19 05:29:16 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <48AA76ED.6060602@imperial.ac.uk>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>	<6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>	<20080818214051.GB32257@doorstop.net.ic.ac.uk>	<E3A8C437-1A6B-47F4-BFAE-0F4002F8E69D@bubblehouse.org>	<20080819004600.GA12516@mithrandi.net>
	<48AA76ED.6060602@imperial.ac.uk>
Message-ID: <48AA9241.2040304@libero.it>

Phil Mayers ha scritto:
> [...]
> 
> Something like Digest HTTP auth is the "safe" way to secure an HTTP 
> session - you can even (though I've not seen this commonly uses) re-use 
> the digest session ID as a server-side key into application session 
> storage.
> 

I'm doing this in my WSGI framework:
http://hg.mperillo.ath.cx/wsgix/file/tip/wsgix/auth/auth_digest.py

HTTP Digest Authentication really solves a lot a problems, it's very 
unfortunately that it's still poorly implemented in browsers.



Manlio Perillo


From shawn at schurchcomputers.com  Tue Aug 19 16:12:38 2008
From: shawn at schurchcomputers.com (Shawn Church)
Date: Tue Aug 19 16:12:45 2008
Subject: [Twisted-web] Session Based Security for PyAmf application
In-Reply-To: <48AA9241.2040304@libero.it>
References: <f4a7d4e0808181307j3da20ab9nd07afeac05da419e@mail.gmail.com>
	<6E620250-2951-4C8C-B2EC-C866DAC680F7@bubblehouse.org>
	<20080818214051.GB32257@doorstop.net.ic.ac.uk>
	<E3A8C437-1A6B-47F4-BFAE-0F4002F8E69D@bubblehouse.org>
	<20080819004600.GA12516@mithrandi.net>
	<48AA76ED.6060602@imperial.ac.uk> <48AA9241.2040304@libero.it>
Message-ID: <f4a7d4e0808191312p2e593045q5677c366dbd2308f@mail.gmail.com>

For the present I will just use the default session
(t.w.s.Request.getSession()) to store the User data.  When I have some time
I will take a closer look at the new t.w.guard stuff.

Thanks everyone for all of the help.

Shawn Church

On Tue, Aug 19, 2008 at 2:28 AM, Manlio Perillo <manlio_perillo@libero.it>w=
rote:

> Phil Mayers ha scritto:
>
>> [...]
>>
>> Something like Digest HTTP auth is the "safe" way to secure an HTTP
>> session - you can even (though I've not seen this commonly uses) re-use =
the
>> digest session ID as a server-side key into application session storage.
>>
>>
> I'm doing this in my WSGI framework:
> http://hg.mperillo.ath.cx/wsgix/file/tip/wsgix/auth/auth_digest.py
>
> HTTP Digest Authentication really solves a lot a problems, it's very
> unfortunately that it's still poorly implemented in browsers.
>
>
>
> Manlio Perillo
>
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080819/b7=
fb9815/attachment.htm
From jamsratnam at gmail.com  Wed Aug 27 01:28:01 2008
From: jamsratnam at gmail.com (jamsratnam@gmail.com)
Date: Wed Aug 27 01:28:35 2008
Subject: [Twisted-web] jamsratnam@gmail.com has sent you a message about
	IDrive.
Message-ID: <32421500.1219814881937.JavaMail.support@www3.ibackup.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-web/attachments/20080826/512fe4c6/attachment.htm
From tarjei at nu.no  Fri Aug 29 04:17:22 2008
From: tarjei at nu.no (tarjei)
Date: Fri Aug 29 04:17:31 2008
Subject: [Twisted-web] Content-disposition and static.File
Message-ID: <48B7B092.8010101@nu.no>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi,

I'm using static.File to return various pdf files to the user. The files
are stored using the document ID, but I want the browser to return the
correct filename.

Usually I've done this(in PHP) by adding 'Content-Disposition:
attachement;filename=foo.pdf', but I'm not getting this to work with
twisted. Basicly I do:

def locateChild(self, ctx):
   request = inevow.IRequest(ctx)
   request.setHeader("content-disposition" ,"attachment;filename=foo.pdf")

   return static.File(self.path_to_file)

This works well (except I do not get to define the filename) if I do not
add the content-disposition header, but when I do that twisted just
explodes into an exception.

My question is: Is this a bug or a missing feature?

Also, am I doing something else wrong by setting the header before
returning another page?

Kind regards,
Tarjei
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFIt7CSYVRKCnSvzfIRApY+AKCcJF3V1F55eVQlbgNJ9mgnICjzewCcCgIr
j6is0/veiuYvWuA2k9OVq1s=
=Aet3
-----END PGP SIGNATURE-----

From maarten at treewalker.org  Fri Aug 29 04:50:56 2008
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Fri Aug 29 04:50:52 2008
Subject: [Twisted-web] Content-disposition and static.File
In-Reply-To: <48B7B092.8010101@nu.no>
References: <48B7B092.8010101@nu.no>
Message-ID: <200808291051.05637.maarten@treewalker.org>

On Friday 29 August 2008, tarjei wrote:

> def locateChild(self, ctx):
>    request = inevow.IRequest(ctx)
>    request.setHeader("content-disposition"
> ,"attachment;filename=foo.pdf")
>
>    return static.File(self.path_to_file)
>
> This works well (except I do not get to define the filename) if I do not
> add the content-disposition header, but when I do that twisted just
> explodes into an exception.

What is that exception exactly?

One thing to be careful with is that in HTTP headers only ASCII is allowed. 
If your file name is a unicode object (even if it only contains ASCII 
characters), 16-bit characters will be sent in the HTTP headers and the 
browser will not like that. But in my experience this does not cause 
exceptions (maybe it should, though).

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20080829/3d311937/attachment.pgp
