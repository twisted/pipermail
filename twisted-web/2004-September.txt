From serj_trejo at hotmail.com  Wed Sep  1 07:47:02 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Wed Sep  1 07:47:38 2004
Subject: [Twisted-web] Diagraming Twisted apps
Message-ID: <BAY12-F33bjkyqU7a0x00043931@hotmail.com>

Clark,

I just got around to trying out your suggestion of UML diagrams of my 
Twisted application (PyUmlGraph and graphviz). I have both applications 
working, but PyUmlGraph requires a running python application. I tried using 
PyUmlGraph with a .tac file that I had started as a twistd daemon. This .tac 
file contains code that instantiates a few Portals (and Realms tied to the 
Portals) for the purpose of running a Perspective Broker Server (listening 
on a specific port). PyUmlGraph seems limited because it only captures 
intantiated objects at run time (thus the python code that PyUmlGraph runs 
must have all of the objects of interest instantiated based on the moment 
that PyUmlGraph runs the code through the python interpreter). Thus, if you 
have a Twisted (PB Server) application running and TCP listening to a port 
(I.e., port 8000), sinces its waiting for asynchronous responses (such as 
from a PB Client connection and login), I don't know of any way to run 
PyUmlGraph in order to capture the objects that are instantiated by an 
asynchronous trigger. Maybe I'm missing something. Do you have any 
suggestions on how to use PyUmlGraph in this regard?

Cheers,

Serj

>From: "Clark C. Evans" <cce@clarkevans.com>
>Reply-To: "Discussion of twisted.web, Nevow,and Woven" 
><twisted-web@twistedmatrix.com>
>To: twisted-web@twistedmatrix.com
>Subject: Re: [Twisted-web] Diagraming Twisted apps
>Date: Sun, 22 Aug 2004 14:06:43 -0400
>
>On Sun, Aug 22, 2004 at 10:51:12AM -0400, Sergio Trejo wrote:
>| Has anyone tried using Dia?
>
>I use graphviz and a UML graphing tool based on its dot files.
>http://www.zipcon.net/~adamf/software/PyUmlGraph/
>http://www.research.att.com/sw/tools/graphviz/
>
>Clark
>
>_______________________________________________
>Twisted-web mailing list
>Twisted-web@twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

_________________________________________________________________
Add photos to your messages with MSN 8. Get 2 months FREE*. 
http://join.msn.com/?page=features/featuredemail


From syver at inout.no  Wed Sep  1 09:36:38 2004
From: syver at inout.no (Syver Enstad)
Date: Wed Sep  1 09:36:43 2004
Subject: [Twisted-web] Load balancing twisted web.
Message-ID: <uhdqiq9vd.fsf@inout.no>


Hi! I am running a custom twisted server application that uses twisted
web. To improve performance sometime in the future I am interested in
scaling up by adding more instances of the server, but this requires
load balancing. Very simple load balancing is likely to not work very
well since I use the session facilities in twisted web.

As I see it I have a couple of options:

Build my own session mechanism that uses persistent storage shared by
all servers (I am using ZODB already so it is easy to store objects).

Get some kind of load balancer program that takes care of server
affinity by remembering which server has which session id.

Write a load balancer program that does the same.

As far as I know load balancer hardware is out of the question since I
use HTTPS and from what I have heard this is not supported my
inexpensive load balancer hardware.



From eugen at leitl.org  Wed Sep  1 09:42:33 2004
From: eugen at leitl.org (Eugen Leitl)
Date: Wed Sep  1 09:42:36 2004
Subject: [Twisted-web] Load balancing twisted web.
In-Reply-To: <uhdqiq9vd.fsf@inout.no>
References: <uhdqiq9vd.fsf@inout.no>
Message-ID: <20040901154233.GG1458@leitl.org>

On Wed, Sep 01, 2004 at 05:36:38PM +0200, Syver Enstad wrote:

> As far as I know load balancer hardware is out of the question since I
> use HTTPS and from what I have heard this is not supported my
> inexpensive load balancer hardware.

Are you sure https session setup isn't your bottleneck?

I'd be either thinking about a server farm with round-robin DNS, or maybe a VIA (C5J
Esther core) box which does RSA acceleration on the cheap.

-- 
Eugen* Leitl <a href="http://leitl.org">leitl</a>
______________________________________________________________
ICBM: 48.07078, 11.61144            http://www.leitl.org
8B29F6BE: 099D 78BA 2FD3 B014 B08A  7779 75B0 2443 8B29 F6BE
http://moleculardevices.org         http://nanomachines.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040901/cf7835b0/attachment.bin
From syver at inout.no  Wed Sep  1 10:04:05 2004
From: syver at inout.no (Syver Enstad)
Date: Wed Sep  1 10:04:10 2004
Subject: [Twisted-web] Load balancing twisted web.
In-Reply-To: <20040901154233.GG1458@leitl.org>
References: <uhdqiq9vd.fsf@inout.no> <20040901154233.GG1458@leitl.org>
Message-ID: <ud616q8lm.fsf@inout.no>

Eugen Leitl <eugen@leitl.org> writes:

> On Wed, Sep 01, 2004 at 05:36:38PM +0200, Syver Enstad wrote:
> 
> > As far as I know load balancer hardware is out of the question since I
> > use HTTPS and from what I have heard this is not supported my
> > inexpensive load balancer hardware.
> 
> Are you sure https session setup isn't your bottleneck?

I am not sure I understand what you mean here. The problem is that the
site becomes unresponsive when many users are hitting web applications
that does heavy work against the database or renders large amounts of
HTML. I am in the process of improving the performance of the code but
it would be nice to provide better performance to the users while
these improvements are being made. I haven't noticed any performance
differences between using HTTPS or HTTP.


> 
> I'd be either thinking about a server farm with round-robin DNS, or maybe a VIA (C5J
> Esther core) box which does RSA acceleration on the cheap.
> 
> -- 
> Eugen* Leitl <a href="http://leitl.org">leitl</a>
> ______________________________________________________________
> ICBM: 48.07078, 11.61144            http://www.leitl.org
> 8B29F6BE: 099D 78BA 2FD3 B014 B08A  7779 75B0 2443 8B29 F6BE
> http://moleculardevices.org         http://nanomachines.net
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web


From uf069 at victoria.tc.ca  Wed Sep  1 11:50:21 2004
From: uf069 at victoria.tc.ca (Patrick B. Day)
Date: Wed Sep  1 11:50:25 2004
Subject: [Twisted-web] Subclassing a subclass of rend.Page
Message-ID: <Pine.GSO.4.58.0409011026380.20069@vtn1.victoria.tc.ca>

A quick question. I have a situation where I'm starting from a base html
template, say 'template.html', which has some global elements which need
rendering. So I do something like this:

class Template (rend.Page):
   docFactory = rend.htmlfile('template.html')
   def render_global (self, context, data):
      """Fill in elements common to all pages."""

class GreetingsPage (Template):
   def render_contents (self, context, data):
      """Render contents area of page with greetings information."""

   def render_sidebar (self, context, data):
      """Render sidebar area of page specific to greetings."""

When I try this approach though, nevow seems to make all it's rendering
calls to Template and not GreetingsPage. What is the proper approach to
doing what I'm trying to do?

Thanks for your help.

============================

Patrick Day
uf069@victoria.tc.ca

From dp at ulaluma.com  Wed Sep  1 12:16:56 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Sep  1 12:17:19 2004
Subject: [Twisted-web] Subclassing a subclass of rend.Page
In-Reply-To: <Pine.GSO.4.58.0409011026380.20069@vtn1.victoria.tc.ca>
References: <Pine.GSO.4.58.0409011026380.20069@vtn1.victoria.tc.ca>
Message-ID: <1B8EDBE6-FC43-11D8-BA5E-000A95864FC4@ulaluma.com>


On Sep 1, 2004, at 1:50 PM, Patrick B. Day wrote:

> A quick question. I have a situation where I'm starting from a base 
> html
> template, say 'template.html', which has some global elements which 
> need
> rendering. So I do something like this:
>
> class Template (rend.Page):
>    docFactory = rend.htmlfile('template.html')
>    def render_global (self, context, data):
>       """Fill in elements common to all pages."""
>
> class GreetingsPage (Template):
>    def render_contents (self, context, data):
>       """Render contents area of page with greetings information."""
>
>    def render_sidebar (self, context, data):
>       """Render sidebar area of page specific to greetings."""
>
> When I try this approach though, nevow seems to make all it's rendering
> calls to Template and not GreetingsPage. What is the proper approach to
> doing what I'm trying to do?

This should work properly, as you expect it to. Are you sure the page 
you are rendering is actually an instance of GreetingsPage and not 
Template?

dp


From uf069 at victoria.tc.ca  Wed Sep  1 12:51:00 2004
From: uf069 at victoria.tc.ca (Patrick B. Day)
Date: Wed Sep  1 12:51:05 2004
Subject: [Twisted-web] Subclassing a subclass of rend.Page
In-Reply-To: <1B8EDBE6-FC43-11D8-BA5E-000A95864FC4@ulaluma.com>
References: <Pine.GSO.4.58.0409011026380.20069@vtn1.victoria.tc.ca>
	<1B8EDBE6-FC43-11D8-BA5E-000A95864FC4@ulaluma.com>
Message-ID: <Pine.GSO.4.58.0409011136110.4854@vtn1.victoria.tc.ca>

Arg! Sorry! It was actually a weird indenting thing where there wasn't an
error but my program behavior changed in a way I've never come across
before. (I'm working from userdb.py as my basis but I use tabs instead of
spaces.)

BTW I was coding my own web app stuff until I found Nevow. I'm impressed -
finally someone realizes that sticking code in html documents is a not the
greatest approach for web "applications". Thanks for your efforts and
getting back to me so quickly.

-Pat.

On Wed, 1 Sep 2004, Donovan Preston wrote:

>
> On Sep 1, 2004, at 1:50 PM, Patrick B. Day wrote:
>
> > A quick question. I have a situation where I'm starting from a base
> > html
> > template, say 'template.html', which has some global elements which
> > need
> > rendering. So I do something like this:
> >
> > class Template (rend.Page):
> >    docFactory = rend.htmlfile('template.html')
> >    def render_global (self, context, data):
> >       """Fill in elements common to all pages."""
> >
> > class GreetingsPage (Template):
> >    def render_contents (self, context, data):
> >       """Render contents area of page with greetings information."""
> >
> >    def render_sidebar (self, context, data):
> >       """Render sidebar area of page specific to greetings."""
> >
> > When I try this approach though, nevow seems to make all it's rendering
> > calls to Template and not GreetingsPage. What is the proper approach to
> > doing what I'm trying to do?
>
> This should work properly, as you expect it to. Are you sure the page
> you are rendering is actually an instance of GreetingsPage and not
> Template?
>
> dp
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From a9bejo at yahoo.de  Wed Sep  1 13:18:25 2004
From: a9bejo at yahoo.de (Benjamin Ferrari)
Date: Wed Sep  1 13:18:54 2004
Subject: [Twisted-web] how to set charset of html page
Message-ID: <41362081.1040600@yahoo.de>

Hello,

I just started with twisted, so I guess this is a very easy question:

I run a twisted.web server with mktap:

% mktap web --path /path/to/content
% twistd -nf web.tap

and then put a simple html page into the path folder:

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
"DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body>...</body>

unfortunately, browsers (tested with firefox 0.9.3 and IE6) completly 
ignore the <meta/> tag and detect the page as UTF-8 instead of iso-8859-1.

with apache, I can set a default charset to use with

AddDefaultCharset iso-8859-1

How can I do that with the twisted server ?

Thanks for your help,

Benjamin

PS: I'm running twisted as a reverse proxy behind an apache2 server. Not 
sure if that matters.

From dp at ulaluma.com  Wed Sep  1 14:14:12 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Sep  1 14:14:32 2004
Subject: [Twisted-web] how to set charset of html page
In-Reply-To: <41362081.1040600@yahoo.de>
References: <41362081.1040600@yahoo.de>
Message-ID: <7D575D65-FC53-11D8-BA5E-000A95864FC4@ulaluma.com>


On Sep 1, 2004, at 3:18 PM, Benjamin Ferrari wrote:

> Hello,
>
> I just started with twisted, so I guess this is a very easy question:
>
> I run a twisted.web server with mktap:
>
> % mktap web --path /path/to/content
> % twistd -nf web.tap
>
> and then put a simple html page into the path folder:
>
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
> "DTD/xhtml1-strict.dtd">
> <html xmlns="http://www.w3.org/1999/xhtml">
> <head>
>   <meta http-equiv="Content-Type" content="text/html; 
> charset=iso-8859-1">
> </head>
> <body>...</body>
>
> unfortunately, browsers (tested with firefox 0.9.3 and IE6) completly 
> ignore the <meta/> tag and detect the page as UTF-8 instead of 
> iso-8859-1.
>
> with apache, I can set a default charset to use with
>
> AddDefaultCharset iso-8859-1
>
> How can I do that with the twisted server ?

It's not a terribly easy question, although it should be. The trick is 
modify the contentTypes dictionary on the root twisted.web.static.File 
instance which was created when you ran mktap web. You should be able 
to do this with COIL, which is meant to allow you to configure 
application objects created with mktap using a nice GUI, but COIL 
hasn't been finished and nobody has been working on it recently. You 
could do this with manhole, which gives you a python interpreter inside 
your running server, but it might be a pain to get at the File 
instance.

So here is the solution I came up with. Instead of using mktap to 
create a generic application object, write a tac file instead, which is 
just a Python script that creates a custom application object. Modify 
the contentTypes dictionary in this script. Then, start the server 
using twistd -y instead of -f

Here is the script:

from twisted.application import service, internet
from twisted.web import server, static

application = service.Application("My web server")
root = static.File("/Users/dp")
root.contentTypes['.html'] = 'text/html; charset=iso-8859-1'
internet.TCPServer(8080, 
server.Site(root)).setServiceParent(application)

-- 
Donovan


From dan.eloff at gmail.com  Sat Sep  4 13:20:04 2004
From: dan.eloff at gmail.com (Dan Eloff)
Date: Sat Sep  4 13:20:13 2004
Subject: [Twisted-web] Getting started using the twisted web server
Message-ID: <4817b6fc0409041220a7a2888@mail.gmail.com>

My goal is to create a scalable web server for use by either a single
individual on his own computer, or by thousands of people on a remote
server. This server must be capable of serving up both files from the
filesystem like .swf, .gif, .jpg, and .html and data produced
dynamically by the same python process as the server is running in. In
other words not your standard php/cgi setup where a script is executed
when you browse to the file (http://localhost/myscript.php), but
rather where a function from the running host process is called when a
certain url is given (http://localhost/func/func-id).

I can't think of a better solution to the problem than twisted, but I
need help getting started. Is there any examples or anything more that
I can learn from than the API docs?

Thanks,
-Dan

From dreid at dreid.org  Sat Sep  4 14:38:23 2004
From: dreid at dreid.org (David Reid)
Date: Sat Sep  4 14:38:35 2004
Subject: [Twisted-web] Getting started using the twisted web server
In-Reply-To: <4817b6fc0409041220a7a2888@mail.gmail.com>
References: <4817b6fc0409041220a7a2888@mail.gmail.com>
Message-ID: <1094330303.24990.4.camel@localhost>

Twisted's webserver is capable of all of that, including the php stuff
:).  If you'd like to help us improve it, and you're interested in
writing code for one, look at new-web 

svn://cvs.twistedmatrix.com/svn/Twisted/branches/new-web

There is also nevow, which extends twisted.web a great deal, provides
many api improvements and a nifty rendering engine.

There is documentation for using twisted.web in it's current state in
the TwistedDocs.  Just ignore the woven stuff.  But be aware that
(hopefully) this stuff twisted.web's current state, won't be around much
longer.

-- David

On Sat, 2004-09-04 at 12:20, Dan Eloff wrote:
> My goal is to create a scalable web server for use by either a single
> individual on his own computer, or by thousands of people on a remote
> server. This server must be capable of serving up both files from the
> filesystem like .swf, .gif, .jpg, and .html and data produced
> dynamically by the same python process as the server is running in. In
> other words not your standard php/cgi setup where a script is executed
> when you browse to the file (http://localhost/myscript.php), but
> rather where a function from the running host process is called when a
> certain url is given (http://localhost/func/func-id).
> 
> I can't think of a better solution to the problem than twisted, but I
> need help getting started. Is there any examples or anything more that
> I can learn from than the API docs?
> 
> Thanks,
> -Dan
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040904/dbe7e59c/attachment.bin
From knowak at mail.desy.de  Sat Sep  4 23:02:44 2004
From: knowak at mail.desy.de (Krzysztof Nowak)
Date: Sat Sep  4 23:04:41 2004
Subject: [Twisted-web] Getting started using the twisted web server
In-Reply-To: <4817b6fc0409041220a7a2888@mail.gmail.com>
References: <4817b6fc0409041220a7a2888@mail.gmail.com>
Message-ID: <Pine.LNX.4.58.0409050654540.28904@lipka.desy.de>

Few weeks ago I had the same problem so I'm with you with all my heart :)
The great help to me were four articles that I found, accessible at the
end of http://www.gnosis.cx/publish/tech_index_cp.html. Also, you have
this list :)

Cheers,
Krzys


From tjstebbing at gmail.com  Sat Sep  4 23:42:50 2004
From: tjstebbing at gmail.com (Tim Stebbing)
Date: Sat Sep  4 23:43:29 2004
Subject: [Twisted-web] returning a formless form from render_foo
Message-ID: <972281650409042242621c6172@mail.gmail.com>

gday all, 

Im using nevow 0.2.0, ive got a simple formless resource that works
fine when I view it alone, but when I return it from a render_ method,
I get

 nevow.compy.CannotAdapt: <redpanda.root.Index object at 0x4049796c>
(type redpanda.root.Index) cannot be adapted to <class
'formless.iformless.IConfigurable'>.

where redpanda.root.Index has:

def render_foo(self, ctx, data):
    return FooForm()

Why is it trying to adapt the Index resource? whats the proper way to
include a form resource in a templates output?

cheers,

tjs

From dialtone at gmail.com  Sun Sep  5 03:50:45 2004
From: dialtone at gmail.com (Valentino Volonghi)
Date: Sun Sep  5 03:50:56 2004
Subject: [Twisted-web] returning a formless form from render_foo
In-Reply-To: <972281650409042242621c6172@mail.gmail.com>
References: <972281650409042242621c6172@mail.gmail.com>
Message-ID: <c893b853040905025067135986@mail.gmail.com>

On Sun, 5 Sep 2004 15:42:50 +1000, Tim Stebbing <tjstebbing@gmail.com> wrote:

> def render_foo(self, ctx, data):
>     return FooForm()
> 
> Why is it trying to adapt the Index resource? whats the proper way to
> include a form resource in a templates output?

def render_foo(self, ctx, data):
    return webform.renderForms()

This should work.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Proud Gentoo User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/

From mungbean at iprimus.com.au  Sun Sep  5 19:55:56 2004
From: mungbean at iprimus.com.au (Michael Milverton)
Date: Sun Sep  5 19:56:12 2004
Subject: [Twisted-web] Getting started using the twisted web server
In-Reply-To: <Pine.LNX.4.58.0409050654540.28904@lipka.desy.de>
References: <4817b6fc0409041220a7a2888@mail.gmail.com>
	<Pine.LNX.4.58.0409050654540.28904@lipka.desy.de>
Message-ID: <200409060956.04112.mungbean@iprimus.com.au>

Thanks for the link, I was also after info like this.

Thankyou 
Michael Milverton

On Sun, 5 Sep 2004 01:02 pm, Krzysztof Nowak wrote:
> Few weeks ago I had the same problem so I'm with you with all my heart :)
> The great help to me were four articles that I found, accessible at the
> end of http://www.gnosis.cx/publish/tech_index_cp.html. Also, you have
> this list :)
>
> Cheers,
> Krzys
>
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-- 
GNU/Linux: Secure, Stable, Free
Michael <mungbean@iprimus.com.au>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040906/2210cfbe/attachment.bin
From dp at ulaluma.com  Mon Sep  6 14:47:15 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Sep  6 14:47:44 2004
Subject: [Twisted-web] returning a formless form from render_foo
In-Reply-To: <972281650409042242621c6172@mail.gmail.com>
References: <972281650409042242621c6172@mail.gmail.com>
Message-ID: <EF55452C-0045-11D9-93CD-000A95864FC4@ulaluma.com>


On Sep 5, 2004, at 1:42 AM, Tim Stebbing wrote:

> gday all,
>
> Im using nevow 0.2.0, ive got a simple formless resource that works
> fine when I view it alone, but when I return it from a render_ method,
> I get
>
>  nevow.compy.CannotAdapt: <redpanda.root.Index object at 0x4049796c>
> (type redpanda.root.Index) cannot be adapted to <class
> 'formless.iformless.IConfigurable'>.
>
> where redpanda.root.Index has:
>
> def render_foo(self, ctx, data):
>     return FooForm()
>
> Why is it trying to adapt the Index resource? whats the proper way to
> include a form resource in a templates output?

When you place renderForms('configurableName') in a page (the default  
value for configurableName is ''), Nevow does  
IConfigurable(ctx.locate(IConfigurableFactory).locateConfigurable('confi 
gurableName')). The default implementation of locateConfigurable when  
configurableName is '' simply returns "self".  This is why nevow is  
attempting to adapt your Index object to IConfigurable.

If in this case your FooForm is your configurable, I suggest making  
things explicit by implementing configurable_blarg on your Index Page,  
and using renderForms('blarg') instead of renderForms(). You could also  
override configurable_, but I think it is best to always think of the  
"canonical configurable" as the Page instance which is currently being  
rendered.

By the way, you can also have multiple configurables per Page by  
providing multiple configurable_ methods and using renderForms('foo')  
and renderForms('bar') to render the forms where you want them.

dp


From dan.eloff at gmail.com  Mon Sep  6 17:23:39 2004
From: dan.eloff at gmail.com (Dan Eloff)
Date: Mon Sep  6 17:24:38 2004
Subject: [Twisted-web] Getting started using the twisted web server
In-Reply-To: <200409060956.04112.mungbean@iprimus.com.au>
References: <4817b6fc0409041220a7a2888@mail.gmail.com>
	<Pine.LNX.4.58.0409050654540.28904@lipka.desy.de>
	<200409060956.04112.mungbean@iprimus.com.au>
Message-ID: <4817b6fc040906162356035e9c@mail.gmail.com>

Well I followed the links and read the articles, which did help a little.

David, how far along is the new twisted web server? What works? What
needs to be done?

I'm torn between using the old web server and writing my code for
something that's going out the window and between putting the time
into the new web server in order to be able to get something that
works sufficiently.

There's also a lot of options, like using .rpy scripts. I'm guessing,
however, that .rpy scripts will put a much larger strain on the
hardware than simply integrating my application with the web server.
Calling external .rpy scripts is much more expensive than calling a
python function that's already in memory.

Twisted is a great library, but it's weakness is that it offers so
many ways to do the same thing without a large amount of documentation
that it makes things all so very 'twisted' :)

From Chaitan_Rogers at bat.com  Mon Sep  6 20:08:23 2004
From: Chaitan_Rogers at bat.com (Chaitan_Rogers@bat.com)
Date: Mon Sep  6 20:09:28 2004
Subject: [Twisted-web] (no subject)
Message-ID: <OF2CFC4DC7.9E17DD7A-ONCA256F08.000B2DC0@bat.com>





Hello,
       I was wondering whether Nevow/Formless includes
            a)  a multiselect  'Typed' class.
            b)  if there is a way to convince the included Choice class to
produce its output in the form:
            <select>
                  <option value='foo'>Foo</option>
                  <option value='bar'>Bar</option>
            </select>

            instead of:

            <select>
                  <option value='0'>Foo</option>
                  <option value='1'>Bar</option>
            </select>.

      I still haven't figured out how all these components fit together.


      Cheers,
            Chaitan




______________________________________________________________________
Confidentiality Notice: The information in this document and attachments is confidential and may also be legally privileged.  It is intended only for the use of the named recipient.  Internet communications are not secure and therefore British American Tobacco does not accept legal responsibility for the contents of this message.  If you are not the intended recipient, please notify us immediately and then delete this document.  Do not disclose the contents of this document to any other person, nor take any copies.  Violation of this notice may be unlawful.
______________________________________________________________________

From dreid at dreid.org  Mon Sep  6 23:54:25 2004
From: dreid at dreid.org (David Reid)
Date: Mon Sep  6 23:54:21 2004
Subject: [Twisted-web] Getting started using the twisted web server
In-Reply-To: <4817b6fc040906162356035e9c@mail.gmail.com>
References: <4817b6fc0409041220a7a2888@mail.gmail.com>
	<Pine.LNX.4.58.0409050654540.28904@lipka.desy.de>
	<200409060956.04112.mungbean@iprimus.com.au>
	<4817b6fc040906162356035e9c@mail.gmail.com>
Message-ID: <1094536464.24763.7.camel@localhost>

On Mon, 2004-09-06 at 16:23, Dan Eloff wrote:
> David, how far along is the new twisted web server? What works? What
> needs to be done?

Well foom is really in charge of new-web.  As far as what works, i'd
say, nothing completely.  My general suggestion if you want to avoid old
twisted.web is to use nevow, because as far as the Resource API is
concerned, this is what new-web will be based on.  I'm not sure if that
is really good advice, I haven't had much motivation to work on new-web
lately, much less take a look at the recent changes in Nevow, so I'm not
sure what needs to be done.

-David 
-------
Voice(accent="ComicBookGuy")["Worst Twisted-Dev ever!"]
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://pyramid.twistedmatrix.com/pipermail/twisted-web/attachments/20040906/240d642f/attachment.bin
From Mark.Williamson at bl.uk  Wed Sep  8 05:01:02 2004
From: Mark.Williamson at bl.uk (Williamson, Mark)
Date: Wed Sep  8 05:00:34 2004
Subject: [Twisted-web] nevow FileUpload
Message-ID: <343540CF89C2774289E7F3C9EE4F5DF10553A647@nt-lonex1.bl.uk>

Hi, 

I'm building a web app with nevow/twisted and I'm really 
impressed. 

I'm having a small problem with Formless though when trying to 
upload a file: 

here is my interface:

class IAddDocument( formless.TypedInterface ):
   """Interface for Add Document form"""
   def addDocument( self , context = annotate.Context() , fdata =
annotate.FileUpload( required = True ) ):
      pass
   addDocument = formless.autocallable( addDocument )

The form renders fine (I'm using a template pretty much based on the one in
one of the 
tutorials except I've messed about with the table layout a bit) and lets me
choose a file
for upload - it also seems to upload the file. However when my method is
called 
on my page class: 

   def addDocument( self , context , fdata ):
       ...

fdata is None. I've looked at the request from the context and the filename
seems to be there 
but not the file data. 

Can anyone shed any light on this. Its a bit of a sticking point for me 
right now

cheers 

mark 


**************************************************************************

Experience the British Library online at www.bl.uk 

Help the British Library conserve the world's knowledge. Adopt a Book.
www.bl.uk/adoptabook 

*************************************************************************

The information contained in this e-mail is confidential and may be legally
privileged. It is intended for the addressee(s) only. If you are not the
intended recipient, please delete this e-mail and notify the
postmaster@bl.uk : The contents of this e-mail must not be disclosed or
copied without the sender's consent. 

The statements and opinions expressed in this message are those of the
author and do not necessarily reflect those of the British Library. The
British Library does not take any responsibility for the views of the
author. 

************************************************************************* 


From matt at pollenation.net  Wed Sep  8 05:05:48 2004
From: matt at pollenation.net (Matt Goodall)
Date: Wed Sep  8 05:06:00 2004
Subject: [Twisted-web] Add segmentsResolved method to inevow.IResource
Message-ID: <1094641548.12413.97.camel@harold>

Hi all,

On the #twisted.web channel we've had numerous discussions about a
couple of edge cases to do with resource location. Specifically:

1. The located resource is just a proxy to a real resource. Where do I
return the real resource from since locateChild is not called once all
segments have been resolved? A suggested solution has been to return the
real resource from renderHTTP. That is conceptually wrong and also a bit
awkward to support. It's also broken in svn trunk at the moment ;-).

2. I have to access to query parameters in every rend_* method. Is there
a way of processing the query parameters just once so they are already
available in the rend_.* methods? So far, the solution seems to be to
override renderHTTP, process the query parameters (and store them
somewhere) and then call up to the parent class's renderHTTP method.

3. A page displays a list of objects and each object has a delete
action. What's the best way to handle the deletion? There are a few ways
I have seen this implemented: use a form for each object; use a fake
child URL segment and pass the object's id as a query parameter; pass
the object's id as a query parameter to the list page itself (this means
overriding renderHTTP because locateChild is not called, as in #1).

The are probably countless other similar cases.

I propose that we add one more method to the IResource API - a "hook"
method that is called when the final segment has been located, i.e.
there are no more path segments to process. The IResource definition of
the method would look something like:

    def segmentsResolved(self, ctx):
        pass

Suggestions for better names welcome. Perhaps youAreIt is better name
;-).

If the result of calling segmentsResolved is None renderHTTP would be
called as normal. If something not None is returned then it must be an
IResource (or adaptable, deferred, blah blah blah) and will be used as
the resource for that URL from then on. Hmm, I guess segmentsResolved
should be called repeatedly until a None is returned to allow for
proxy->proxy->proxy->real but that's just implementation.

It think that should cover most use cases I have seen and, conceptually,
seems much, much cleaner than what we do right now.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From matt at pollenation.net  Wed Sep  8 05:35:48 2004
From: matt at pollenation.net (Matt Goodall)
Date: Wed Sep  8 05:36:01 2004
Subject: [Twisted-web] url.URL.fromRequest gives unexpected behaviour
Message-ID: <1094643348.12413.129.camel@harold>

Hi,

URL.fromRequest() currently creates a URL for the path segments that
have been resolved so far. That means that creating a URL in locateChild
and a rend_* method gives you a different URL. That's unexpected.

I think we need more explicit ways of creating a URL to allow for
different usecases:


URL.fromString(aStr)
    create a URL from the string. this is already implemented

URL.fromRequestURI(aRequest)
    create a URL that matches the request exactly

URL.fromContext(aContext)
    create a URL for handled path segments. kind of like the
    url.here overlay but not so lazy.

A better name for fromContext might be fromLocation, fromSegment, etc.


We can deprecate URL.fromRequest but, until it's removed, make it call
fromContext.


Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From david at endlessremix.shacknet.nu  Wed Sep  8 10:17:02 2004
From: david at endlessremix.shacknet.nu (David Ferlier)
Date: Wed Sep  8 10:16:59 2004
Subject: [Twisted-web] nevow FileUpload
In-Reply-To: <343540CF89C2774289E7F3C9EE4F5DF10553A647@nt-lonex1.bl.uk>
References: <343540CF89C2774289E7F3C9EE4F5DF10553A647@nt-lonex1.bl.uk>
Message-ID: <20040908161702.GA1704@fortress>

Hi,

First, you should know that there is a very disturbing bug in
NevowSite's code that makes twisted block while nevow creates the
cgi.FieldStorage's instance in finish() (so your website won't be able
to answer requests while the file is uploaded, which makes it
useless). To correct that you need to overload NevowSite : just
overload its finish() method and remove the creation of the
cgi.FieldStorage.

That said, accessing file data from the FieldStorage instance is quite
easy. Let's say that you now have the request object. To access file
data from the 'myfile' field :

file = request["myfile"].file
filedata = file.read()

Hope it helps,

David

On Wed, Sep 08, 2004 at 12:01:02PM +0100, Williamson, Mark wrote:
> Hi, 
> 
> I'm building a web app with nevow/twisted and I'm really 
> impressed. 
> 
> I'm having a small problem with Formless though when trying to 
> upload a file: 
> 
> here is my interface:
> 
> class IAddDocument( formless.TypedInterface ):
>    """Interface for Add Document form"""
>    def addDocument( self , context = annotate.Context() , fdata =
> annotate.FileUpload( required = True ) ):
>       pass
>    addDocument = formless.autocallable( addDocument )
> 
> The form renders fine (I'm using a template pretty much based on the one in
> one of the 
> tutorials except I've messed about with the table layout a bit) and lets me
> choose a file
> for upload - it also seems to upload the file. However when my method is
> called 
> on my page class: 
> 
>    def addDocument( self , context , fdata ):
>        ...
> 
> fdata is None. I've looked at the request from the context and the filename
> seems to be there 
> but not the file data. 
> 
> Can anyone shed any light on this. Its a bit of a sticking point for me 
> right now
> 
> cheers 
> 
> mark 
> 
> 
> **************************************************************************
> 
> Experience the British Library online at www.bl.uk 
> 
> Help the British Library conserve the world's knowledge. Adopt a Book.
> www.bl.uk/adoptabook 
> 
> *************************************************************************
> 
> The information contained in this e-mail is confidential and may be legally
> privileged. It is intended for the addressee(s) only. If you are not the
> intended recipient, please delete this e-mail and notify the
> postmaster@bl.uk : The contents of this e-mail must not be disclosed or
> copied without the sender's consent. 
> 
> The statements and opinions expressed in this message are those of the
> author and do not necessarily reflect those of the British Library. The
> British Library does not take any responsibility for the views of the
> author. 
> 
> ************************************************************************* 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-- 
	David Ferlier -- david@endlessremix.shacknet.nu


From foom at fuhm.net  Wed Sep  8 14:59:40 2004
From: foom at fuhm.net (James Y Knight)
Date: Wed Sep  8 15:00:12 2004
Subject: [Twisted-web] Add segmentsResolved method to inevow.IResource
In-Reply-To: <1094641548.12413.97.camel@harold>
References: <1094641548.12413.97.camel@harold>
Message-ID: <0096D9AE-01DA-11D9-AC9C-000A95A50FB2@fuhm.net>


On Sep 8, 2004, at 7:05 AM, Matt Goodall wrote:
> I propose that we add one more method to the IResource API - a "hook"
> method that is called when the final segment has been located, i.e.
> there are no more path segments to process. The IResource definition of
> the method would look something like:
>
>     def segmentsResolved(self, ctx):
>         pass

Why is this different/easier to support/cleaner than returning a 
resource from renderHTTP?

Instead of:
C1.locateChild, C2.locateChild, C2.renderHTTP, C3.renderHTTP
we'll have:
C1.locateChild, C2.locateChild, C2.segmentsResolved, 
C3.segmentsResolved, C3.renderHTTP.

I don't see why that's a big difference?

James


From dp at ulaluma.com  Wed Sep  8 22:29:19 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Sep  8 22:30:07 2004
Subject: [Twisted-web] Macros in Nevow
Message-ID: <D142A1AE-0218-11D9-8255-000A95864FC4@ulaluma.com>

Implementing compile-time macros has always been on my list of things 
to do in Nevow, but so far I haven't needed it so I haven't bothered 
trying to do it. Now that nevow is getting more finished and there are 
fewer pressing issues for me to work on, I thought I'd give it a shot. 
It turned out to be pretty easy:

 >>> from nevow import flat, tags
 >>> flat.precompile(tags.html[ tags.div(macro=lambda c: 
c.tag.children*5)[ "Child " ]])
['<html>Child Child Child Child Child </html>']

I'm not yet sure exactly how macro directives would be handled -- I 
think there would have to be an explicit type check against the type of 
toBeRenderedBy, followed by a ctx.locate(IMacroFactory).macro(name). 
This is different than how the render and data directives are simply 
adapters registered against the directive type, but I think it is ok.

Another thing to consider would be parameterized macros similar to the 
parameterized renderers and data directives we can use now. However 
since the macro executes immediately the parameters could probably be 
passed directly to the macro method:

<html><div nevow:macro="foo bar,baz" /></html>

def macro_foo(self, ctx, bar, baz):
	return bar, baz

(Which would result in:

<html>barbaz</html>)

Comments, suggestions, heckles?

dp

Index: nevow/flat/flatstan.py
===================================================================
--- nevow/flat/flatstan.py      (revision 587)
+++ nevow/flat/flatstan.py      (working copy)
@@ -40,10 +40,17 @@

      if visible and context.isAttrib:
          raise RuntimeError, "Tried to render tag '%s' in an tag 
attribute context." % (original.tagName)
-
+
+    if context.precompile and original.macro:
+        toBeRenderedBy = original.macro
+        original.macro = Unset
+        newContext = context.with(original)
+        yield serialize(toBeRenderedBy(newContext), newContext)
+        return
+
      ## TODO: Do we really need to bypass precompiling for *all* 
specials?
      ## Perhaps just render?
-    if context.precompile and (original._specials or 
original.slotData):
+    if context.precompile and ([x for x in original._specials.values() 
if x is not None and x is not Unset] or original.slotData):
          ## The tags inside this one get a "fresh" parent chain, because
          ## when the context yielded here is serialized, the parent
          ## chain gets reconnected to the actual parents at that
Index: nevow/stan.py
===================================================================
--- nevow/stan.py       (revision 582)
+++ nevow/stan.py       (working copy)
@@ -77,7 +77,7 @@
      which make representing trees of XML natural using pure python
      syntax. See the docstrings for these methods for more details.
      """
-    specials = ['data', 'render', 'remember', 'pattern', 'key']
+    specials = ['data', 'render', 'remember', 'pattern', 'key', 
'macro']

      slotData = None
      def __init__(self, tag, attributes=None, children=None, 
specials=None):
@@ -108,9 +108,9 @@
          table(width="100%", height="50%", border="1")

          Attributes may be 'invisible' tag instances (so that
-        a(href=invisible(data="foo", render=myhrefrenderer) works),
+        a(href=invisible(data="foo", render=myhrefrenderer)) works),
          strings, functions, or any other object which has a registered
-        ISerializable adapter.
+        flattener.

          A few magic attributes have values other than these, as they
          are not serialized for output but rather have special purposes
@@ -151,7 +151,7 @@
          """Add children to this tag. Multiple children may be added by
          passing a tuple or a list. Children may be other tag instances,
          strings, functions, or any other object which has a registered
-        ISerializable adapter.
+        flattener.

          This is implemented using __getitem__ because it then allows
          the natural syntax:


From uf069 at victoria.tc.ca  Thu Sep  9 13:06:37 2004
From: uf069 at victoria.tc.ca (Patrick B. Day)
Date: Thu Sep  9 13:06:41 2004
Subject: [Twisted-web] Can't subclass when docFactory is a loaders.stan
	instance.
Message-ID: <Pine.GSO.4.58.0409091151380.11568@vtn1.victoria.tc.ca>

Is there anyway when constructing a page using stan to use render_*
methods which are defined in the subclass?

e.g.

class Template (rend.Page):
   docFactory=loaders.stan(T.html()[T.title()[T.span(render='title')]])

class Foo (Template):
   def render_title (self, ctx, data):
      return 'My title is Foo'


If I assign a string to render (in the T.span attribute) then the string
is just returned rather than a render_* method being called. If I assign a
render_* method (eg 'render_title') to render then the rendering is done
by calling the method in Template not in the subclass. For instance this
does not work:

class Template (rend.Page):
   def render_title (self, ctx, data):
      raise NotImplementedError

   docFactory = \
loaders.stan(T.html()[T.title()[T.span(render=render_title)]])

class Foo (Template):
   def render_title (self, ctx, data):
      return 'My title is Foo'


I don't have this issue if I use loaders.htmlfile() and store my stuff in
an html file. Thanks for your help.

-Pat.

============================

Patrick Day
uf069@victoria.tc.ca

From dp at ulaluma.com  Thu Sep  9 15:30:03 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Thu Sep  9 15:30:49 2004
Subject: [Twisted-web] Can't subclass when docFactory is a loaders.stan
	instance.
In-Reply-To: <Pine.GSO.4.58.0409091151380.11568@vtn1.victoria.tc.ca>
References: <Pine.GSO.4.58.0409091151380.11568@vtn1.victoria.tc.ca>
Message-ID: <6929D917-02A7-11D9-9E3E-000A95864FC4@ulaluma.com>


On Sep 9, 2004, at 3:06 PM, Patrick B. Day wrote:

> Is there anyway when constructing a page using stan to use render_*
> methods which are defined in the subclass?

The same way the HTML templates cause an invocation of a render_* 
method -- by setting the render special on a Tag to a directive. Sorry 
it's not better documented:

class Foo(Page):
     docFactory = rend.stan(tags.html[
     tags.head[
          tags.title(render=tags.directive('title'))],
     tags.body[
          tags.h1(render=tags.directive('header')),
          tags.div(render=tags.directive('body'))]]


class Bar(Foo):
     def render_title(self, ctx, data): return ctx.tag["Hello Title"]
     def render_header(self, ctx, data): return ctx.tag["Hello Header"]
     def render_body(self, ctx, data): return ctx.tag["Hello Body"]


By the way, this is a perfect example of where you would want to use 
the macro special, when it is implemented. Page would have to have a 
metaclass that cloned and compiled a unique copy of the superclass' 
docFactory, but after that all the non-dynamic nodes (nodes without a 
render method) would be optimized into contiguous string runs. As it is 
now, the render methods run every time the page is hit, which isn't too 
big of a deal but is slightly slower.

dp


From dan.eloff at gmail.com  Thu Sep  9 17:32:13 2004
From: dan.eloff at gmail.com (Dan Eloff)
Date: Thu Sep  9 17:32:18 2004
Subject: [Twisted-web] Nevow Documentation
Message-ID: <4817b6fc04090916327c387d02@mail.gmail.com>

I've seen tentative hints that someone or some people were almost
finished working on the docs for nevow. I have not found them online,
however. Does anybody know where I might find them?

Thanks,
-Dan

From dialtone at gmail.com  Thu Sep  9 17:35:03 2004
From: dialtone at gmail.com (Valentino Volonghi)
Date: Thu Sep  9 17:35:40 2004
Subject: [Twisted-web] Nevow Documentation
In-Reply-To: <4817b6fc04090916327c387d02@mail.gmail.com>
References: <4817b6fc04090916327c387d02@mail.gmail.com>
Message-ID: <c893b8530409091635155838fc@mail.gmail.com>

On Thu, 9 Sep 2004 16:32:13 -0700, Dan Eloff <dan.eloff@gmail.com> wrote:
> I've seen tentative hints that someone or some people were almost
> finished working on the docs for nevow. I have not found them online,
> however. Does anybody know where I might find them?

There is some in an Issue:
http://divmod.org/users/roundup.twistd/nevow/issue103

Some is here:
www.nevow.com
although it is old and the code doesn't work, the concepts are good

And something is in the example directory of the SVN version.

HTH

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Proud Gentoo User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/

From matt at pollenation.net  Thu Sep  9 17:39:19 2004
From: matt at pollenation.net (Matt Goodall)
Date: Thu Sep  9 17:39:41 2004
Subject: [Twisted-web] Add segmentsResolved method to inevow.IResource
In-Reply-To: <0096D9AE-01DA-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <1094641548.12413.97.camel@harold>
	<0096D9AE-01DA-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <1094773160.8246.12.camel@debian>

On Wed, 2004-09-08 at 16:59 -0400, James Y Knight wrote:
> On Sep 8, 2004, at 7:05 AM, Matt Goodall wrote:
> > I propose that we add one more method to the IResource API - a "hook"
> > method that is called when the final segment has been located, i.e.
> > there are no more path segments to process. The IResource definition of
> > the method would look something like:
> >
> >     def segmentsResolved(self, ctx):
> >         pass
> 
> Why is this different/easier to support/cleaner than returning a 
> resource from renderHTTP?

Because the method would be part of the resource location process and
nothing to do with rendering. It's supposed to return a resource whereas
renderHTTP is supposed to render the page.


> 
> Instead of:
> C1.locateChild, C2.locateChild, C2.renderHTTP, C3.renderHTTP
> we'll have:
> C1.locateChild, C2.locateChild, C2.segmentsResolved, 
> C3.segmentsResolved, C3.renderHTTP.
> 
> I don't see why that's a big difference?

I'm not really talking about t.web/Nevow, I'm talking about application
code where clarity is important. Personally, I don't think returning a
resource from renderHTTP makes sense. Nevow's just located the resource
and asked the resource to render itself, only it doesn't and returns a
new resource instead.




-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From matt at pollenation.net  Thu Sep  9 17:53:20 2004
From: matt at pollenation.net (Matt Goodall)
Date: Thu Sep  9 17:53:36 2004
Subject: [Twisted-web] Add segmentsResolved method to inevow.IResource
In-Reply-To: <0096D9AE-01DA-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <1094641548.12413.97.camel@harold>
	<0096D9AE-01DA-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <1094774000.8246.26.camel@debian>

Please ignore the last message, I hit send by accident.


On Wed, 2004-09-08 at 16:59 -0400, James Y Knight wrote:
> On Sep 8, 2004, at 7:05 AM, Matt Goodall wrote:
> > I propose that we add one more method to the IResource API - a "hook"
> > method that is called when the final segment has been located, i.e.
> > there are no more path segments to process. The IResource definition of
> > the method would look something like:
> >
> >     def segmentsResolved(self, ctx):
> >         pass
> 
> Why is this different/easier to support/cleaner than returning a 
> resource from renderHTTP?

Because the method would be part of the resource location process and
nothing to do with rendering. It's supposed to return a resource whereas
renderHTTP is supposed to render the page.

After a little more thought, a better name might be something like
finalizeLocateChild and it should probably always return a resource, not
None.

> 
> Instead of:
> C1.locateChild, C2.locateChild, C2.renderHTTP, C3.renderHTTP
> we'll have:
> C1.locateChild, C2.locateChild, C2.segmentsResolved, 
> C3.segmentsResolved, C3.renderHTTP.
> 
> I don't see why that's a big difference?

I'm not really talking about t.web/Nevow, I'm talking about application
code where clarity is important. Personally, I don't think returning a
resource from renderHTTP makes much sense. Nevow's just located the resource
and asked the resource to render itself, only it doesn't and returns a
new resource instead.

The problem with this is that it adds a new method to a wonderfully simply
interface and in the vast majority of cases the method would just
"return self". That puts me off the idea somewhat.


Cheers, Matt


From bartek.b at eranet.pl  Fri Sep 10 18:34:11 2004
From: bartek.b at eranet.pl (Bartek Bargiel)
Date: Fri Sep 10 12:35:40 2004
Subject: [Twisted-web] separate sites and server
Message-ID: <645826457.20040910203411@eranet.pl>

Hi!

Is there a way to create separate NevowSites and then
'register'/'unregister' them in a running Twisted application?

My goal is to make possible to many users to run and restart their
sites separately without stopping the whole system (all the apps).
Note that virtual hosts mechanism is used to select the desired app.

Any experiences or solutions?

Regards,

-- 
Bartek Bargiel


From foom at fuhm.net  Fri Sep 10 13:16:33 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri Sep 10 13:16:40 2004
Subject: [Twisted-web] separate sites and server
In-Reply-To: <645826457.20040910203411@eranet.pl>
References: <645826457.20040910203411@eranet.pl>
Message-ID: <EDA5EDB5-035D-11D9-AC9C-000A95A50FB2@fuhm.net>

On Sep 10, 2004, at 8:34 PM, Bartek Bargiel wrote:
> Is there a way to create separate NevowSites and then
> 'register'/'unregister' them in a running Twisted application?
>
> My goal is to make possible to many users to run and restart their
> sites separately without stopping the whole system (all the apps).
> Note that virtual hosts mechanism is used to select the desired app.

Allowing users to run arbitrary python code in your main server is not 
generally a good idea.

Generally the best way to do this is to have them run separate servers 
under their user account and proxy requests from the main server to the 
sub-servers. The t.web.distrib module is designed for this. On 
twistedmatrix.com, the bugtracker is run this way: 
<http://www.twistedmatrix.com/users/roundup.twistd/>. All the 
/users/*.twistd entries are connecting to another server process.

I have no experience with using distrib with Nevow -- it may or may not 
work. This issue of mostly compatible, but slightly different 
interfaces between twisted.web and Nevow is something that we hope to 
solve soon.

James


From bartek.b at eranet.pl  Sat Sep 11 09:52:57 2004
From: bartek.b at eranet.pl (Bartek Bargiel)
Date: Sat Sep 11 04:13:31 2004
Subject: [Twisted-web] separate sites and server
In-Reply-To: <EDA5EDB5-035D-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <645826457.20040910203411@eranet.pl>
	<EDA5EDB5-035D-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <431959940.20040911115257@eranet.pl>

Well, actually you're right. That was actually the simplest solution I was thinking about. But
had no idea about twisted.web.distrib. I'll take a look at it and
report results :-)

regards,

-- 
Bartek Bargiel



From mary-twisted at puzzling.org  Mon Sep 13 04:55:46 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon Sep 13 04:55:53 2004
Subject: [Twisted-web] separate sites and server
In-Reply-To: <EDA5EDB5-035D-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <645826457.20040910203411@eranet.pl>
	<EDA5EDB5-035D-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <20040913105546.GH6648@fuchsia.puzzling.org>

On Fri, Sep 10, 2004, James Y Knight wrote:
> I have no experience with using distrib with Nevow -- it may or may not 
> work. This issue of mostly compatible, but slightly different 
> interfaces between twisted.web and Nevow is something that we hope to 
> solve soon.

My experience as of about three months ago is that distrib does not work
with Nevow, although you can get it to fail in amusingly different ways.
It was something to do with flatten doing the wrong thing. This *may* be
only in combination with vhosts, but perhaps not.

I have been using twisted.web.proxy to do something similar, but it has
a few flaws:

 - it only works over TCP so your users will need to open a port
 
 - it doesn't set the right forward headers for Nevow, so all of Nevow's
   "what is my hostname?" stuff will return "localhost" (in particular,
   this is a problem with Nevow's static.File, which likes to add a
   trailing / to directories and will do this by redirecting to...
   localhost)

To overcome the second problem, I've ended up having to hard-code my
Nevow application's hostname pending a better proxy framework.

-Mary

From david at endlessremix.shacknet.nu  Mon Sep 13 05:04:12 2004
From: david at endlessremix.shacknet.nu (David Ferlier)
Date: Mon Sep 13 05:04:02 2004
Subject: [Twisted-web] Load balancing twisted web.
In-Reply-To: <uhdqiq9vd.fsf@inout.no>
References: <uhdqiq9vd.fsf@inout.no>
Message-ID: <20040913110412.GA1897@fortress>

Hi,

Well, i see a simpler solution. If you really want to do
load-balancing with sessions + HTTPs, you'd better setup
pythondirector (http://pythondirector.sf.net). The only thing you need
to concentrate on is to put your sessions data on a shared machine
(forget ZEO, it *won't* work with twisted).

Or you can develop your own session-aware https proxy with twisted.

On Wed, Sep 01, 2004 at 05:36:38PM +0200, Syver Enstad wrote:
> 
> Hi! I am running a custom twisted server application that uses twisted
> web. To improve performance sometime in the future I am interested in
> scaling up by adding more instances of the server, but this requires
> load balancing. Very simple load balancing is likely to not work very
> well since I use the session facilities in twisted web.
> 
> As I see it I have a couple of options:
> 
> Build my own session mechanism that uses persistent storage shared by
> all servers (I am using ZODB already so it is easy to store objects).
> 
> Get some kind of load balancer program that takes care of server
> affinity by remembering which server has which session id.
> 
> Write a load balancer program that does the same.
> 
> As far as I know load balancer hardware is out of the question since I
> use HTTPS and from what I have heard this is not supported my
> inexpensive load balancer hardware.
> 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-- 
	David Ferlier -- david@endlessremix.shacknet.nu


From uf069 at victoria.tc.ca  Mon Sep 13 13:14:56 2004
From: uf069 at victoria.tc.ca (Patrick B. Day)
Date: Mon Sep 13 13:15:00 2004
Subject: [Twisted-web] Dynamic annotate.Choice form elements?
Message-ID: <Pine.GSO.4.58.0409131210350.20006@vtn1.victoria.tc.ca>

Say a form is to have a picklist which is defined by a database table and
is dynamic (ie changes as the table changes). How do I create an
annotate.TypedInterface subclass and use formless in this case? (ie How do
I access the annotate.Choice element and add the choices during
rendering?) Thanks,

-Pat.

============================

Patrick Day
uf069@victoria.tc.ca

From bartek.b at eranet.pl  Mon Sep 13 19:04:48 2004
From: bartek.b at eranet.pl (Bartek Bargiel)
Date: Mon Sep 13 14:48:53 2004
Subject: [Twisted-web] separate sites and server
Message-ID: <1195325697.20040913210448@eranet.pl>

> I have been using twisted.web.proxy to do something similar, but it has
> a few flaws:

I've already checked out twisted.distrib.
Unfortunately it didn't seem to work with Nevow - with or without vhosts.
Today I quickly introduced Mary's solution mentioned above. That's
what I was looking for! Thanks! :-D

Bartek Bargiel



From foom at fuhm.net  Mon Sep 13 15:24:33 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon Sep 13 15:24:46 2004
Subject: [Twisted-web] separate sites and server
In-Reply-To: <20040913105546.GH6648@fuchsia.puzzling.org>
References: <645826457.20040910203411@eranet.pl>
	<EDA5EDB5-035D-11D9-AC9C-000A95A50FB2@fuhm.net>
	<20040913105546.GH6648@fuchsia.puzzling.org>
Message-ID: <4E1216AA-05CB-11D9-AC9C-000A95A50FB2@fuhm.net>


On Sep 13, 2004, at 6:55 AM, Mary Gardiner wrote:
>  - it doesn't set the right forward headers for Nevow, so all of 
> Nevow's
>    "what is my hostname?" stuff will return "localhost" (in particular,
>    this is a problem with Nevow's static.File, which likes to add a
>    trailing / to directories and will do this by redirecting to...
>    localhost)
>
> To overcome the second problem, I've ended up having to hard-code my
> Nevow application's hostname pending a better proxy framework.

You're supposed to use VHostMonster to solve this. It mutates the 
effective host of the request for just this reason.

James


From dp at ulaluma.com  Tue Sep 14 08:03:22 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Sep 14 08:03:44 2004
Subject: [Twisted-web] url.URL.fromRequest gives unexpected behaviour
In-Reply-To: <1094643348.12413.129.camel@harold>
References: <1094643348.12413.129.camel@harold>
Message-ID: <D6F514F0-0656-11D9-896F-000A95864FC4@ulaluma.com>


On Sep 8, 2004, at 7:35 AM, Matt Goodall wrote:

> Hi,
>
> URL.fromRequest() currently creates a URL for the path segments that
> have been resolved so far. That means that creating a URL in 
> locateChild
> and a rend_* method gives you a different URL. That's unexpected.

Hi, sorry for not responding for so long.

This is actually intentional behavior and is expected -- but so much of 
the url module seems surprising to other people that I think we have to 
stop and seriously revisit it.

> I think we need more explicit ways of creating a URL to allow for
> different usecases:
>
>
> URL.fromString(aStr)
>     create a URL from the string. this is already implemented
>
> URL.fromRequestURI(aRequest)
>     create a URL that matches the request exactly

This would always return a URL object which could reproduce the URL 
used to make the current request. This would be a good thing. But what 
exactly does the URI at the end of the method name indicate?

> URL.fromContext(aContext)
>     create a URL for handled path segments. kind of like the
>     url.here overlay but not so lazy.

Recently, I changed the way keeping track of the current segments works 
by remembering ICurrentSegments and IRemainingSegments in the context. 
Since each Page gets it's own Context object, URL.fromContext could be 
explicitly given a Context object which is at the level for which you 
want the url generated. For example, if you are requesting the url 
/foo/bar/baz but you want a URL object for just /foo, you could find 
the Context object representing this and do URL.fromContext with it. 
(You could find it in the appropriate locateChild, or you could find it 
by climbing the Context .parent chain). This would be a nice way to 
build breadcrumb trails.

> A better name for fromContext might be fromLocation, fromSegment, etc.
>
>
> We can deprecate URL.fromRequest but, until it's removed, make it call
> fromContext.

I don't think we should deprecate fromRequest, just change what it does 
semantically. I don't think anyone was relying on the old behavior, 
anyway.

dp


From foom at fuhm.net  Tue Sep 14 20:19:14 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue Sep 14 20:19:21 2004
Subject: [Twisted-web] Twisted.web2
Message-ID: <A35F53BA-06BD-11D9-AC9C-000A95A50FB2@fuhm.net>

Itamar and I had dinner today and talked about new-web a bit. Here is 
what was discussed:
1) We need to keep compatibility with old Nevow resources
2) We ought to keep compatibility with old twisted.web resources
3) The new request API isn't the same as old request API.
4) new-web depends on Twisted 2.0. Nevow will be depending on new-web, 
so the next Nevow will depend on twisted 2.0. Thus it cannot be 
released until Twisted 2.0. According to itamar the goal for next 
Twisted release is around halloween, although I hadn't seen that 
mentioned anywhere before. ;)
5) Rumors are Anthony is writing a non-sucky HTTP client. (is this 
true?). J. Simms (slyphon) mentioned something about writing one to me 
a few weeks ago but I didn't hear anything after. This should be 
coordinated so the API for the client and server is as similar as 
possible.


Conclusions for action:
1) new-web will be called twisted.web2. I will put what I've got into 
svn trunk as twisted.web2 tomorrow, assuming no objections. This will 
allow easy backwards compatibility at the cost of a 2.
2) Nevow's resource traversal API must be moved to twisted.web2. This 
will probably have to be done by branching Nevow to remove those bits. 
Therefore, the resource traversal part of nevow should be mostly-frozen 
while this happens.
3) For distribution: twisted.web2 depends on Nevow (for static 
directory listings, and error pages), so will be distributed with it. 
Nevow recommends Twisted but does not require it for simple cases (e.g. 
flattening to a string from a CGI script), so there can also be a 
limited-functionality distribution of standalone Nevow.

Current status of new-web: the low-level HTTP protocol and header 
parsing is in passable shape. The high-level Resource API needs to be 
copied over from Nevow (again), because Nevow's API changed. Backwards 
compatibility adapters for the t.w.Request/nevow.inevow.IRequest and 
(possibly) nevow.inevow.IResource should be added.

I am not able to do everything myself. I will need help, especially 
from dp would be helpful for the Nevow transition, to make this happen. 
If we do it right, twisted.web2 might even be ready in time for the 
release of Twisted 2.0.

James


From wilk-ml at flibuste.net  Wed Sep 15 10:26:08 2004
From: wilk-ml at flibuste.net (William Dode)
Date: Wed Sep 15 10:26:17 2004
Subject: [Twisted-web] Twisted.web2
In-Reply-To: <A35F53BA-06BD-11D9-AC9C-000A95A50FB2@fuhm.net> (James Y.
	Knight's message of "Tue, 14 Sep 2004 22:19:14 -0400")
References: <A35F53BA-06BD-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <87k6uvpkgv.fsf@blakie.riol>

James Y Knight <foom@fuhm.net> writes:

...

> 3) For distribution: twisted.web2 depends on Nevow (for static
> directory listings, and error pages), so will be distributed with
> it. Nevow recommends Twisted but does not require it for simple cases
> (e.g. flattening to a string from a CGI script), so there can also be
> a limited-functionality distribution of standalone Nevow.

What about the wsgi spec ? 
http://www.python.org/peps/pep-0333.html

It could be great if the server could not depend on any framework (i
mean nevow).

-- 
William - http://flibuste.net

From matt at pollenation.net  Wed Sep 15 10:53:55 2004
From: matt at pollenation.net (Matt Goodall)
Date: Wed Sep 15 10:54:05 2004
Subject: [Twisted-web] url.URL.fromRequest gives unexpected behaviour
In-Reply-To: <D6F514F0-0656-11D9-896F-000A95864FC4@ulaluma.com>
References: <1094643348.12413.129.camel@harold>
	<D6F514F0-0656-11D9-896F-000A95864FC4@ulaluma.com>
Message-ID: <1095267234.4286.37.camel@harold>

On Tue, 2004-09-14 at 15:03, Donovan Preston wrote:
> On Sep 8, 2004, at 7:35 AM, Matt Goodall wrote:
> 
> > Hi,
> >
> > URL.fromRequest() currently creates a URL for the path segments that
> > have been resolved so far. That means that creating a URL in 
> > locateChild
> > and a rend_* method gives you a different URL. That's unexpected.
> 
> Hi, sorry for not responding for so long.

No problem, I'm busy too ;-)

> This is actually intentional behavior and is expected -- but so much of 
> the url module seems surprising to other people that I think we have to 
> stop and seriously revisit it.

I'd been happily using it and only started questioning the behaviour of
fromRequest() when I was explaining it someone else and they said, "but
that's not the URL that's been requested".

In general I think the url module is wonderful. There are a couple of
ambiguities and surprises, that's all.

> 
> > I think we need more explicit ways of creating a URL to allow for
> > different usecases:
> >
> >
> > URL.fromString(aStr)
> >     create a URL from the string. this is already implemented
> >
> > URL.fromRequestURI(aRequest)
> >     create a URL that matches the request exactly
> 
> This would always return a URL object which could reproduce the URL 
> used to make the current request. This would be a good thing. But what 
> exactly does the URI at the end of the method name indicate?

The "URI" bit was to make it explicit and would allow us to deprecate
the existing method. It may not be needed.

> 
> > URL.fromContext(aContext)
> >     create a URL for handled path segments. kind of like the
> >     url.here overlay but not so lazy.
> 
> Recently, I changed the way keeping track of the current segments works 
> by remembering ICurrentSegments and IRemainingSegments in the context. 
> Since each Page gets it's own Context object, URL.fromContext could be 
> explicitly given a Context object which is at the level for which you 
> want the url generated. For example, if you are requesting the url 
> /foo/bar/baz but you want a URL object for just /foo, you could find 
> the Context object representing this and do URL.fromContext with it. 
> (You could find it in the appropriate locateChild, or you could find it 
> by climbing the Context .parent chain). This would be a nice way to 
> build breadcrumb trails.
> 
> > A better name for fromContext might be fromLocation, fromSegment, etc.
> >
> >
> > We can deprecate URL.fromRequest but, until it's removed, make it call
> > fromContext.
> 
> I don't think we should deprecate fromRequest, just change what it does 
> semantically. I don't think anyone was relying on the old behavior, 
> anyway.

I am! ;-). I don't really mind if it changes though, I can update my
code easily enough.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From foom at fuhm.net  Wed Sep 15 11:49:26 2004
From: foom at fuhm.net (James Y Knight)
Date: Wed Sep 15 11:49:36 2004
Subject: [Twisted-web] Twisted.web2
In-Reply-To: <87k6uvpkgv.fsf@blakie.riol>
References: <A35F53BA-06BD-11D9-AC9C-000A95A50FB2@fuhm.net>
	<87k6uvpkgv.fsf@blakie.riol>
Message-ID: <963E58CE-073F-11D9-AC9C-000A95A50FB2@fuhm.net>

On Sep 15, 2004, at 12:26 PM, William Dode wrote:
> James Y Knight <foom@fuhm.net> writes:
>> 3) For distribution: twisted.web2 depends on Nevow (for static
>> directory listings, and error pages), so will be distributed with
>> it. Nevow recommends Twisted but does not require it for simple cases
>> (e.g. flattening to a string from a CGI script), so there can also be
>> a limited-functionality distribution of standalone Nevow.
>
> What about the wsgi spec ?
> http://www.python.org/peps/pep-0333.html

The WSGI spec is near irrelevant for a twisted web application.

There are two components to look at here:
1) Can we support running WSGI applications?
WSGI specifies blocking behavior and thus cannot be used in twisted as 
the primary, or even a recommended, interface. It is possible to write 
a WSGI application runner for twistedweb, but it would have to either 
spawn a thread or process for each simultaneous WSGI request. Twisted's 
whole architecture is geared towards not having to do that, thus, an 
API that requires it is decidedly second-class and something that isn't 
very high on my list of things I care about.

2) Can we run *as* a WSGI application?
No, not really. WSGI has 4 different modes a client might be run in: 1) 
threads in the same process for each simultaneous request, 2) a process 
for each simultaneous request 3) multiple processes and a thread in one 
of those processes for each simultaneous request (kind of like 1&2 
combined). 4) Spawn a new process for each request and the process ends 
when the request is done.

Twisted web prefers to run all requests in a single thread. Therefore, 
none of the alternatives are very well matches. It could probably work 
in mode 2 and 4, although not ideally, but not in mode 1 and 3, because 
twisted is generally not threadsafe, so running essentially two copies 
of twisted in one process will not work.

I wrote preliminary support for running twisted as a CGI (essentially 
equivilent to wsgi mode 4) except more generally useful. Clearly this 
is not ideal but I think it's useful to have a simple way to integrate 
some twisted stuff into a hostile environment.

We could make a WSGI application that just send the requests over a 
socket to twisted web running in a separate process, but there's not 
really any reason to IMO. HTTP is already a good protocol for talking 
over sockets. Use apache mod_proxy to send requests to the twisted.web 
process. There's also the SCGI socket protocol which looks reasonable 
and we might want to support.

> It could be great if the server could not depend on any framework (i
> mean nevow).

It will use nevow to render the pages the webserver generates, such as 
errors and directory listings. This does not mean you need to use nevow 
for your own pages. You can use whatever templating language you want 
(or none at all) to render your pages, assuming you can hook it up to 
twisted web somehow.

If you want to make a custom hacked-up copy of twisted.web without 
Nevow included, it will work, other than default server-generated 
pages. However, I don't see any reason to not include it by default.

James


From dp at ulaluma.com  Wed Sep 15 12:08:35 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Sep 15 12:09:15 2004
Subject: [Twisted-web] Twisted.web2
In-Reply-To: <87k6uvpkgv.fsf@blakie.riol>
References: <A35F53BA-06BD-11D9-AC9C-000A95A50FB2@fuhm.net>
	<87k6uvpkgv.fsf@blakie.riol>
Message-ID: <42C11254-0742-11D9-B0A0-000A95864FC4@ulaluma.com>


On Sep 15, 2004, at 12:26 PM, William Dode wrote:

> James Y Knight <foom@fuhm.net> writes:
>
> ...
>
>> 3) For distribution: twisted.web2 depends on Nevow (for static
>> directory listings, and error pages), so will be distributed with
>> it. Nevow recommends Twisted but does not require it for simple cases
>> (e.g. flattening to a string from a CGI script), so there can also be
>> a limited-functionality distribution of standalone Nevow.
>
> What about the wsgi spec ?
> http://www.python.org/peps/pep-0333.html
>
> It could be great if the server could not depend on any framework (i
> mean nevow).

The server would depend on Nevow in order to generate the HTML for 
various automatically generated pages, such as directory listings. I 
suggested to James that having a standalone twisted.web server that 
didn't depend on Nevow and wasn't capable of generating any pages 
itself would be possible, but James didn't think it was worth the 
effort.

The WSGI spec is unsuitable for use with asynchronous servers and 
applications. Basically, once the application callable returns, the 
server (or "gateway" as wsgi calls it) must consider the page finished 
rendering.

I have implemented a simple WSGI application callable in Nevow svn 
head, which will take a Page and synchronously render it. However, 
unless there is a way for the application to continue rendering after 
it has returned, I don't think this will be much use beyond just simple 
CGI style apps.

I haven't mentioned anything about this to any WSGI list yet because I 
don't have a solution or a proposal. My initial thought is to have the 
start_response callable return a tuple of (write, finish) callables, 
instead of just write as it does now. I'm not yet sure this will 
actually work, though, so I'll have to give it further thought.

dp


From foom at fuhm.net  Wed Sep 15 17:00:08 2004
From: foom at fuhm.net (James Y Knight)
Date: Wed Sep 15 17:00:15 2004
Subject: [Twisted-web] Partial freeze of nevow coming up.
Message-ID: <FDA049BA-076A-11D9-AC9C-000A95A50FB2@fuhm.net>

Here's the plan. The following modules will be removed from Nevow, and 
merged/copied/whatever into twisted.web2:
appserver.py
static.py
half of context.py
dirlist.py
failure.py
guard.py
static.py
vhost.py
url.py, perhaps.

I want to create a nevow web2 integration branch, and while they are 
being removed from Nevow, and merged back into web2, I don't want the 
Nevow copy radically changing cause that just creates extra work.

So if there's any changes you want to make to any of those, please do 
it soon. The rest of Nevow can continue changing during the transition 
without problem.

Sidenote: Divmod needs to approve the relicensing of the code that 
moves into web2 from nevow under MIT license. Or else move all of Nevow 
under MIT license.

James


From pje at telecommunity.com  Wed Sep 15 17:12:49 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Wed Sep 15 17:14:53 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <6654eac40409151548295fd2d9@mail.gmail.com>
Message-ID: <5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>

At 06:48 PM 9/15/04 -0400, Peter Hunt wrote:
>It looks like WSGI is not well received over at twisted.web.
>
>http://twistedmatrix.com/pipermail/twisted-web/2004-September/000644.html

Excerpting from that post:

"""The WSGI spec is unsuitable for use with asynchronous servers and
applications. Basically, once the application callable returns, the
server (or "gateway" as wsgi calls it) must consider the page finished
rendering."""

This is incorrect.  Here is a simple WSGI application that demonstrates 
yielding 50 data blocks for transmission *after* the "application callable 
returns".

     def an_application(environ, start_response):
         start_response("200 OK", [('Content-Type','text/plain')])
         for i in range(1,51):
             yield "Block %d" % i

This has been a valid WSGI application since the August 8th posting of the 
WSGI pre-PEP.

It may be, however, that Mr. Preston means that applications which want to 
use 'write()' or a similar push-oriented approach to produce data cannot do 
so after the application returns.  If so, we should discuss that use case 
further, preferably on the Web-SIG.


>I thought the blocking call was handled by the iterator, but maybe I'm wrong.

I'm not sure what you mean, but if you're asking whether the iterable is 
allowed to create output blocks after the application callable returns, 
then yes.


From dp at ulaluma.com  Wed Sep 15 17:22:23 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Sep 15 17:22:53 2004
Subject: [Twisted-web] Partial freeze of nevow coming up.
In-Reply-To: <FDA049BA-076A-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <FDA049BA-076A-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <1947FB73-076E-11D9-A6FD-000A95864FC4@ulaluma.com>


I'd like to release Nevow 0.3 from SVN HEAD basically as it is right 
now. It might be nice to put some warnings in the following modules 
mentioning that they will be moving into web2.

On second thought, I don't think url should be in web2. The url module 
is about generating URL strings mostly, so it's a function of the 
renderer. Everything else I would like to be in web2.

On Sep 15, 2004, at 7:00 PM, James Y Knight wrote:

> Here's the plan. The following modules will be removed from Nevow, and 
> merged/copied/whatever into twisted.web2:
> appserver.py
> static.py
> half of context.py
> dirlist.py
> failure.py
> guard.py
> static.py
> vhost.py
> url.py, perhaps.
>
> I want to create a nevow web2 integration branch, and while they are 
> being removed from Nevow, and merged back into web2, I don't want the 
> Nevow copy radically changing cause that just creates extra work.
>
> So if there's any changes you want to make to any of those, please do 
> it soon. The rest of Nevow can continue changing during the transition 
> without problem.
>
> Sidenote: Divmod needs to approve the relicensing of the code that 
> moves into web2 from nevow under MIT license. Or else move all of 
> Nevow under MIT license.

Moving Nevow to MIT license has already been approved. There is an 
issue in our RT tracker (which unfortunately nobody else can see) for 
switching to MIT license, but nobody has gotten time to do it. Anyone 
with commit access who has some spare time, feel free...

dp


From dp at ulaluma.com  Wed Sep 15 23:13:52 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Wed Sep 15 23:14:17 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
References: <5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
Message-ID: <335B4CE1-079F-11D9-A6FD-000A95864FC4@ulaluma.com>


On Sep 15, 2004, at 7:12 PM, Phillip J. Eby wrote:

> At 06:48 PM 9/15/04 -0400, Peter Hunt wrote:
>> It looks like WSGI is not well received over at twisted.web.
>>
>> http://twistedmatrix.com/pipermail/twisted-web/2004-September/ 
>> 000644.html
>
> Excerpting from that post:
>
> """The WSGI spec is unsuitable for use with asynchronous servers and
> applications. Basically, once the application callable returns, the
> server (or "gateway" as wsgi calls it) must consider the page finished
> rendering."""
>
> This is incorrect.

As I said in my original post, I hadn't mentioned anything about this  
yet because I didn't have a solution or proposal to fix the problem,  
which I maintain remains. I will attempt to suggest solutions, but I am  
unsure whether they will work or make sense in all environments. Allow  
me to explain:

>   Here is a simple WSGI application that demonstrates yielding 50 data  
> blocks for transmission *after* the "application callable returns".
>
>     def an_application(environ, start_response):
>         start_response("200 OK", [('Content-Type','text/plain')])
>         for i in range(1,51):
>             yield "Block %d" % i
>
> This has been a valid WSGI application since the August 8th posting of  
> the WSGI pre-PEP.

According to the spec, """The application object must return an  
iterable yielding strings.""" Whether the application callable calls  
write before returning or yields strings to generate content, the  
effect is the same -- there is no way for the application callable to  
say "Wait, hang on a second, I'm not ready to generate more content  
yet. I'll tell you when I am." This means the only way the application  
can pause for network activity is by blocking. For example, a page  
which performed an XML-RPC call and transformed the output into HTML  
would be required to perform the XML-RPC call synchronously. Or a page  
which initiated a telnet session and streamed the results into a web  
page would be required to perform reads on the socket synchronously.  
The server or gateway, by calling next(), is assuming that the call  
will yield a string value, and only a string value.

Of course, Twisted has a canonical way of indicating that a result is  
not yet ready, the Deferred. An asynchronous application could yield a  
Deferred and an asynchronous server would attach a callback to this  
Deferred which invoked the next() method upon resolution. This is how  
Nevow handles Deferreds (in Nevow SVN head at  
nevow.flat.twist.deferflatten).

However, the WSGI spec says nothing about Deferred and indeed, Deferred  
would be useless in the case of another asynchronous server such as  
Medusa. I would suggest that WSGI include a simple Deferred  
implementation, but WSGI is simply a spec which is not intended to have  
any actual code. Thus, one solution would be for the WSGI spec to be  
amended to state:

"""The application object must return an iterable yielding strings or  
objects implementing the following interface:

def addCallback(callable):
	'''Add 'callable' to the list of callables to be invoked when a string
	is available. Callable should take a single argument, which will be a  
string.'''

The application object must invoke the callable passed to addCallback,  
passing a string which will be written to the request.
"""

This places additional burdens upon implementors of WSGI servers or  
gateways. In the case of a threaded HTTP server which uses blocking  
writes, implementing support for these promises would have to look  
something like this:

import Queue

def handle_request(inSocket, outSocket):
     ... read inSocket, parse the request and dispatch ...

     iterable = application(environ, start_response)

     try:
         while True:
             val = iterable.next()
             if isinstance(val, str):
                 outSocket.write(val)
             else:
                 result = Queue.Queue()
                 val.addCallback(result.put)
                 outSocket.write(result.get())
     except StopIteration:
         outSocket.close()

> It may be, however, that Mr. Preston means that applications which  
> want to use 'write()' or a similar push-oriented approach to produce  
> data cannot do so after the application returns.  If so, we should  
> discuss that use case further, preferably on the Web-SIG.

And now we come to my other half-baked proposal.

Instead of merely returning a write callable, start_response could  
return a tuple of (write, finish) callables. The application would be  
free to call write at any time until it calls finish, at which point  
calling either callable becomes illegal. Again, the synchronous server  
support for this would have to use spin locking in a fashion such as  
this:

import threading

def handle_request(inSocket, outSocket):
     ... read request, dispatch ...
     finished = threading.Semaphore()

     def start_response(...):
         ... write headers ...
         return outSocket.write, finished.release

     iterable = application(environ, start_response)
     if iterable is None:
         finished.acquire()
         # Once we get here, the application is done with the request.

Finally, we come to the task of implementing a server or gateway which  
can asynchronously support either asynchronous or blocking  
applications. Since there is no way for the server or gateway to know  
whether the application object it is about to invoke will block,  
starving the main loop and preventing network activity from being  
serviced, it must invoke all applications in a new thread or process. A  
solution to this would be to require application callables to provide  
additional metadata, perhaps via function or object attributes, which  
indicate whether they are capable of running in asynchronous, threaded,  
or multiprocess environments. Since it's getting late and this message  
is getting long I will leave this discussion for another day.

dp


From pje at telecommunity.com  Thu Sep 16 00:37:06 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 16 00:36:43 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <335B4CE1-079F-11D9-A6FD-000A95864FC4@ulaluma.com>
References: <5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>

At 01:13 AM 9/16/04 -0400, Donovan Preston wrote:

>On Sep 15, 2004, at 7:12 PM, Phillip J. Eby wrote:
>
>>At 06:48 PM 9/15/04 -0400, Peter Hunt wrote:
>>>It looks like WSGI is not well received over at twisted.web.
>>>
>>>http://twistedmatrix.com/pipermail/twisted-web/2004-September/ 000644.html
>>
>>Excerpting from that post:
>>
>>"""The WSGI spec is unsuitable for use with asynchronous servers and
>>applications. Basically, once the application callable returns, the
>>server (or "gateway" as wsgi calls it) must consider the page finished
>>rendering."""
>>
>>This is incorrect.
>
>As I said in my original post, I hadn't mentioned anything about this
>yet because I didn't have a solution or proposal to fix the problem,
>which I maintain remains.

Reading the rest of your post, I see that you are actually addressing the 
issue of asynchronous *applications*, and I have only been addressing 
asynchronous *servers* in the spec to date.  (Technically "half-async" 
servers, since to be properly portable, a WSGI server *must* support 
synchronous applications, and therefore an async WSGI server must have a 
thread pool for running applications, even if it contains only one thread.)

However, I'm not certain that it's actually possible to support *portable* 
asynchronous  applications under WSGI, since such asynchrony requires 
additional support such as an event loop service.  As a practical matter, 
asynchronous applications today require a toolset such as Twisted or 
peak.events in addition to the web server, and I don't really know of a way 
to make such applications portable across web servers, since the web server 
might use a different toolset that insists on having its own event 
loop.  Or it might be like mod_python or CGI, and not really have any 
meaningful way to create an event loop: it could be utterly synchronous in 
nature and impossible to make otherwise.

Thus, as a practical matter, applications that make use of asynchronous I/O 
*may* be effectively outside WSGI's scope, if they have no real chance of 
portability.  As I once said on the Web-SIG, the idea of WSGI is more aimed 
at allowing non-Twisted apps to run under a Twisted web server, than at 
allowing Twisted applications to run under other web servers!  The latter, 
obviously, is much more ambitious than the former.

But I'm happy to nonetheless explore whether there is any way to support 
such applications without unduly complicating middleware.  I don't expect 
it would complicate servers much, but middleware can be quite difficult, 
because middleware currently isn't even required to return when the 
application does!  It's not recommended, but a middleware component can sit 
there and iterate over the return value and call its parent's write() 
method all it wants.  In the presence of this kind of behavior, there isn't 
any real way to guarantee that a thread isn't going to be tied up with 
processing.  But realistically, that's what an async server's thread pool 
is *for*.

Anyway, as you'll see below, WSGI can actually run async apps with minimal 
blocking even without any modifications to the spec, and with 
server-specific extensions you can eliminate *all* the blocking, as long as 
middleware doesn't do anything pathological.  In practice, of course, I 
think the spec *should* be updated so that middleware is prohibited from 
interfering with the control flow, and I'll give some thought as to how 
that should be phrased.


>According to the spec, """The application object must return an
>iterable yielding strings.""" Whether the application callable calls
>write before returning or yields strings to generate content, the
>effect is the same -- there is no way for the application callable to
>say "Wait, hang on a second, I'm not ready to generate more content
>yet. I'll tell you when I am." This means the only way the application
>can pause for network activity is by blocking.

That is correct.  The application must block for such activities.  However, 
as a practical matter, this isn't a problem for e.g. database access, since 
using Twisted's adbapi would still tie up *some* thread with the exact same 
blocking I/O, so there's actually no loss in simply doing unadorned DBAPI 
access from within the application.


>  For example, a page
>which performed an XML-RPC call and transformed the output into HTML
>would be required to perform the XML-RPC call synchronously. Or a page
>which initiated a telnet session and streamed the results into a web
>page would be required to perform reads on the socket synchronously.

Technically, it could perform these tasks asynchronously, as long as the 
data were queued such that the application's return iterable simply 
retrieved results from the queue.  However, this would naturally block 
whenever the client was ready for I/O, but no results were available yet.

However, an asynchronous server isn't going to sit there in a loop calling 
next()!  Presumably, it's going to wait until the previous string gets sent 
to the client, before calling next() again.  And, it's presumably going to 
round-robin the active iterables through the threadpool, so that it doesn't 
keep blocking on iterables that aren't likely to have any data to produce 
as yet.

Yes, this arrangement can still block threads sometimes, if there are only 
a few iterables active and they are waiting for some very slow async 
I/O.  But the frequency of such blockages can be further reduced with a 
couple of extensions.  Suppose there was an 'environ["async.sleep"]' and 
'environ["async.wake"]'.  A call to 'sleep' would mean, "don't bother 
iterating over me again until you get a 'wake' call".

This *still* wouldn't prevent some item of middleware from hogging a thread 
in the threadpool, but I suppose you could actually make the 'sleep' 
function sit in a loop and run active iterables' next() methods until one 
of the suspended iterables in the current thread "wakes", at which point it 
would return control to whatever iterable it was called from.  Or, if you 
want to use Greenlets, you can always return control directly to the 
iterable that needs to "wake up".

Anyway, my point here is that it's possible to get a pretty decent setup 
for async applications, without any need to actually modify the base WSGI 
spec.  And, if you add some optional extensions, you can get an even 
smoother setup for async I/O.

Finally, I'm open to trying to define the 'sleep/wake' facilities as 
"standard options" in WSGI, as well as clarifying the middleware control 
flow to support this better.


>The server or gateway, by calling next(), is assuming that the call
>will yield a string value, and only a string value.

The spec doesn't rule out empty strings, however, which would be the 
natural way to indicate that no data is available.  So, the protocol in an 
async app's iterator would be something like:

      while queue.empty():
          if 'async.wake' in environ:
              someDeferred.addCallback(environ['async.wake'])
              environ['async.sleep']()
              yield ""
              # We should only get to this line once environ['async.wake'] 
has been called
          else:
              yield ""
              # delay an exponentially increasing period if queue is still 
empty

If middleware is required to match the control flow of the application it 
wraps (e.g. write()=>write(), yield=>yield), then this would result in 
complete non-blockingness when the server supports the 'async' extensions.

Of course, a blocking delay *is* required when running in a server that 
doesn't support the async extensions, but that's unavoidable in that 
case.  (Technically, you might be better off just doing synchronous I/O if 
you're being run in a synchronous server, but that's of course optional.)


>"""The application object must return an iterable yielding strings or
>objects implementing the following interface:
>
>def addCallback(callable):
>         '''Add 'callable' to the list of callables to be invoked when a 
> string
>         is available. Callable should take a single argument, which will 
> be a
>string.'''
>
>The application object must invoke the callable passed to addCallback,
>passing a string which will be written to the request.
>"""
>
>This places additional burdens upon implementors of WSGI servers or
>gateways.

And a near-intolerable burden on middleware, which would have to have a way 
to "pass through" this facility.  It would be much better to limit the 
pass-through requirements to covering write and yield, rather than 
requiring middleware to implement addCallback facilities as well.


>Finally, we come to the task of implementing a server or gateway which
>can asynchronously support either asynchronous or blocking
>applications. Since there is no way for the server or gateway to know
>whether the application object it is about to invoke will block,
>starving the main loop and preventing network activity from being
>serviced, it must invoke all applications in a new thread or process.

But *some* thread is going to be working on it, and this is true whether 
you use a thread pool or the server is purely synchronous.  And, because a 
WSGI server *must* support synchronous applications, it *must* have some 
thread available that is amenable to blocking.

Of course "new" threads are not required.  I assume that in the case of 
Twisted, something like reactor.deferToThread() will be used to wrap a WSGI 
application's initial invocation, and each individual 'next()' call.


From wilk-ml at flibuste.net  Thu Sep 16 02:20:29 2004
From: wilk-ml at flibuste.net (William Dode)
Date: Thu Sep 16 02:20:37 2004
Subject: [Twisted-web] Twisted.web2
In-Reply-To: <42C11254-0742-11D9-B0A0-000A95864FC4@ulaluma.com> (Donovan
	Preston's message of "Wed, 15 Sep 2004 14:08:35 -0400")
References: <A35F53BA-06BD-11D9-AC9C-000A95A50FB2@fuhm.net>
	<87k6uvpkgv.fsf@blakie.riol>
	<42C11254-0742-11D9-B0A0-000A95864FC4@ulaluma.com>
Message-ID: <87fz5i39rm.fsf@blakie.riol>

Donovan Preston <dp@ulaluma.com> writes:

> On Sep 15, 2004, at 12:26 PM, William Dode wrote:
>
>> James Y Knight <foom@fuhm.net> writes:
>>
>> ...
>>
>>> 3) For distribution: twisted.web2 depends on Nevow (for static
>>> directory listings, and error pages), so will be distributed with
>>> it. Nevow recommends Twisted but does not require it for simple cases
>>> (e.g. flattening to a string from a CGI script), so there can also be
>>> a limited-functionality distribution of standalone Nevow.
>>
>> What about the wsgi spec ?
>> http://www.python.org/peps/pep-0333.html
>>
>> It could be great if the server could not depend on any framework (i
>> mean nevow).
>
> The server would depend on Nevow in order to generate the HTML for
> various automatically generated pages, such as directory listings. I
> suggested to James that having a standalone twisted.web server that
> didn't depend on Nevow and wasn't capable of generating any pages
> itself would be possible, but James didn't think it was worth the
> effort.

I thought that the current spliting plan was interesting to can release
the differents parts independantly. I imagine that twisted.web2 will not
move so much than nevow and it's important to don't update a server when
we don't need.

I hope we'll also find a solution for the wsgi spec, goto the web-sig
list...

-- 
William - http://flibuste.net

From syver at inout.no  Thu Sep 16 02:36:02 2004
From: syver at inout.no (Syver Enstad)
Date: Thu Sep 16 02:36:11 2004
Subject: [Twisted-web] Adding data to the request
Message-ID: <u656ebogd.fsf@inout.no>


Is there a supported way for adding data to a twisted.web request
object. I am not thinking about the session, because I only want the
data to last the current request, the typical use is for a resource to
add some data that would be used by a child resource. I know I could
use the args dictionary but that seems a little awkward as that is
supposed to contain the query string/post for the page.



From matt at pollenation.net  Thu Sep 16 03:23:25 2004
From: matt at pollenation.net (Matt Goodall)
Date: Thu Sep 16 03:23:39 2004
Subject: [Twisted-web] Adding data to the request
In-Reply-To: <u656ebogd.fsf@inout.no>
References: <u656ebogd.fsf@inout.no>
Message-ID: <1095326507.14700.20.camel@harold>

On Thu, 2004-09-16 at 09:36, Syver Enstad wrote:
> Is there a supported way for adding data to a twisted.web request
> object. I am not thinking about the session, because I only want the
> data to last the current request, the typical use is for a resource to
> add some data that would be used by a child resource. I know I could
> use the args dictionary but that seems a little awkward as that is
> supposed to contain the query string/post for the page.

Request is Componentized so you can attach data to the request. Here's
how it works ...

Define an interface and an implementation:

    class IFoo(Interface):
        pass

    class Foo:
        __implements__ = IFoo,


To associate some Foo data with the request do:

    foo = Foo()
    foo.bar = 'bar'
    request.setComponent(IFoo, foo)


And finally, do something like this to retrieve the data from the
request:

    foo = request.getComponent(IFoo)


Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From syver at inout.no  Thu Sep 16 03:52:11 2004
From: syver at inout.no (Syver Enstad)
Date: Thu Sep 16 03:52:15 2004
Subject: [Twisted-web] Adding data to the request
In-Reply-To: <1095326507.14700.20.camel@harold>
References: <u656ebogd.fsf@inout.no> <1095326507.14700.20.camel@harold>
Message-ID: <usm9ia6d0.fsf@inout.no>

Matt Goodall <matt@pollenation.net> writes:

>     request.setComponent(IFoo, foo)
> 
> 
> And finally, do something like this to retrieve the data from the
> request:
> 
>     foo = request.getComponent(IFoo)

Thanks Matt that certainly seems to do what I want. If the foo object
also disappear when the request is finished then this is exactly what
I want.


From matt at pollenation.net  Thu Sep 16 05:09:13 2004
From: matt at pollenation.net (Matt Goodall)
Date: Thu Sep 16 05:09:31 2004
Subject: [Twisted-web] Adding data to the request
In-Reply-To: <usm9ia6d0.fsf@inout.no>
References: <u656ebogd.fsf@inout.no> <1095326507.14700.20.camel@harold>
	<usm9ia6d0.fsf@inout.no>
Message-ID: <1095332953.14984.6.camel@harold>

On Thu, 2004-09-16 at 10:52, Syver Enstad wrote:
> Matt Goodall <matt@pollenation.net> writes:
> 
> >     request.setComponent(IFoo, foo)
> > 
> > 
> > And finally, do something like this to retrieve the data from the
> > request:
> > 
> >     foo = request.getComponent(IFoo)
> 
> Thanks Matt that certainly seems to do what I want. If the foo object
> also disappear when the request is finished then this is exactly what
> I want.

Normal Python garbage collection rules should apply, i.e. there are no
guarantees about what will happen but as long as you don't hang on to
other references to foo then foo will get GC'd at the same time as the
request object.

Cheers, Matt

-- 
Matt Goodall <matt@pollenation.net>


From floydophone at gmail.com  Thu Sep 16 06:02:38 2004
From: floydophone at gmail.com (Peter Hunt)
Date: Thu Sep 16 06:02:46 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI - alternate ideas, part II
In-Reply-To: <5.1.1.6.0.20040915232134.0214fe20@mail.telecommunity.com>
References: <6654eac4040915200673ed116e@mail.gmail.com>
	<5.1.1.6.0.20040915232134.0214fe20@mail.telecommunity.com>
Message-ID: <6654eac4040916050254f7297f@mail.gmail.com>

I think that the application should be passed a finish() method as a
parameter or start_response return value. If the WSGI application is
not a generator and returns wsgi.NOT_DONE_YET (similar to
Twisted.web's NOT_DONE_YET), it is required to call finish().
Otherwise, the gateway will call finish() after the generator is
finished or a string value is returned.

That way, one could do all of the deferred calls they want, and simply
return NOT_DONE_YET and call finish().

How does that sound?

On Wed, 15 Sep 2004 23:27:18 -0400, Phillip J. Eby
<pje@telecommunity.com> wrote:
> At 11:06 PM 9/15/04 -0400, Peter Hunt wrote:
> 
> >Thus, here is my "WSGI-X" proposal. The application will call the
> >gateway, opposite of WSGI. For example, a CGI WSGI-X application may
> >begin with:
> >
> >#!/usr/bin/env python
> >if __name__ == "__main__":
> >       from wsgix import cgi
> >       req = cgi.get_request()
> 
> That's pretty hard to implement correctly in any number of
> servers.  Really, pretty much every server wants to call the application,
> rather than the other way around, because servers want to use their own
> event loop.
> 
> 
> >stdout - the raw, unbuffered direct output stream to the client
> 
> So, header parsing is required?  Or are only 'nph-' CGI scripts allowed?
> 
> 
> >Now we have a basic interface to interact with HTTP. If one wants to
> >write an extension to provide services like simplified cookie
> >handling, sessions, or buffered headers and content, they write an
> >extension function. A simple one for cookies would look like:
> >
> >def cookie_extension(req):
> >       if not hasattr(req, "cookie"):
> >             req.cookie =
> > Cookie.SimpleCookie(req.environ.get("HTTP_COOKIE",""))
> 
> Note that this can easily be accomplished in WSGI, by changing
> 'hasattr(req,"cookie")' to '"my_extension.cookie" in environ' and
> 'req.cookie' to 'environ["my_extension.cookie"]'.
> 
> 
> >It modifies the request object if it hasn't already been modified.
> >This saves us a bit of overhead so we won't need to parse the cookie
> >again in case it is called twice (as it will if other extensions
> >depend on it).
> 
> Also achievable within 'environ'.
> 
> 
> >Finish hooks have the same signature and execute when
> >the finish() method is called. For example, a buffering extension
> >would flush the buffer. Extensions can also add methods to the request
> >object, for items such as add_header().
> 
> Under WSGI, such "finish" hooks can be rendered as a 'close()' method on an
> iterable by a piece of middleware.
> 
>

From syver at inout.no  Thu Sep 16 06:08:04 2004
From: syver at inout.no (Syver Enstad)
Date: Thu Sep 16 06:08:08 2004
Subject: [Twisted-web] Adding data to the request
In-Reply-To: <1095332953.14984.6.camel@harold>
References: <u656ebogd.fsf@inout.no> <1095326507.14700.20.camel@harold>
	<usm9ia6d0.fsf@inout.no> <1095332953.14984.6.camel@harold>
Message-ID: <uoek6a02j.fsf@inout.no>

Matt Goodall <matt@pollenation.net> writes:

> On Thu, 2004-09-16 at 10:52, Syver Enstad wrote:
> > Thanks Matt that certainly seems to do what I want. If the foo object
> > also disappear when the request is finished then this is exactly what
> > I want.
> 
> Normal Python garbage collection rules should apply, i.e. there are no
> guarantees about what will happen but as long as you don't hang on to
> other references to foo then foo will get GC'd at the same time as the
> request object.

Of course, I was just talking about the refernce that the request
kept. I checked it, the request value disappears between
requests. Very nice I am using it already now to maintain some link
information.





From mary-twisted at puzzling.org  Thu Sep 16 06:17:04 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu Sep 16 06:17:46 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI - alternate ideas, part II
In-Reply-To: <6654eac4040916050254f7297f@mail.gmail.com>
References: <6654eac4040915200673ed116e@mail.gmail.com>
	<5.1.1.6.0.20040915232134.0214fe20@mail.telecommunity.com>
	<6654eac4040916050254f7297f@mail.gmail.com>
Message-ID: <20040916121704.GB8426@fuchsia.puzzling.org>

On Thu, Sep 16, 2004, Peter Hunt wrote:
> I think that the application should be passed a finish() method as a
> parameter or start_response return value. If the WSGI application is
> not a generator and returns wsgi.NOT_DONE_YET (similar to
> Twisted.web's NOT_DONE_YET), it is required to call finish().
> Otherwise, the gateway will call finish() after the generator is
> finished or a string value is returned.

Does the NOT_DONE_YET convention still exist in Nevow/web2? It's
generally seemed to have been replaced by the more usual Twisted
convention of returning a Deferred when the data to be rendered is not
yet available.

-Mary

From pje at telecommunity.com  Thu Sep 16 09:14:47 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 16 09:14:14 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI - alternate ideas, part II
In-Reply-To: <6654eac4040916050254f7297f@mail.gmail.com>
References: <5.1.1.6.0.20040915232134.0214fe20@mail.telecommunity.com>
	<6654eac4040915200673ed116e@mail.gmail.com>
	<5.1.1.6.0.20040915232134.0214fe20@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040916111212.021585b0@mail.telecommunity.com>

At 08:02 AM 9/16/04 -0400, Peter Hunt wrote:
>I think that the application should be passed a finish() method as a
>parameter or start_response return value. If the WSGI application is
>not a generator and returns wsgi.NOT_DONE_YET (similar to
>Twisted.web's NOT_DONE_YET), it is required to call finish().
>Otherwise, the gateway will call finish() after the generator is
>finished or a string value is returned.
>
>That way, one could do all of the deferred calls they want, and simply
>return NOT_DONE_YET and call finish().
>
>How does that sound?

Way too complicated in the general case.  I'd prefer a solution that 
doesn't excessively complicate middleware or synchronous servers, just to 
support asynchronous applications that are unlikely to be portable anyway.


From foom at fuhm.net  Thu Sep 16 09:14:20 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu Sep 16 09:14:36 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
References: <5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
Message-ID: <15672B46-07F3-11D9-AC9C-000A95A50FB2@fuhm.net>

On Sep 16, 2004, at 2:37 AM, Phillip J. Eby wrote:
> Reading the rest of your post, I see that you are actually addressing 
> the issue of asynchronous *applications*, and I have only been 
> addressing asynchronous *servers* in the spec to date.  (Technically 
> "half-async" servers, since to be properly portable, a WSGI server 
> *must* support synchronous applications, and therefore an async WSGI 
> server must have a thread pool for running applications, even if it 
> contains only one thread.)

 From the point of view of Twisted as the server, running a WSGI 
application, the big question is:
Can you (as a host server) assume WSGI applications will run 
non-blocking?

The answer is clearly No and I don't imagine that would change. (well, 
right now it's currently not even possible to write a non-blocking WSGI 
application, but even if it were..). The only sensible thing is to 
assume a WSGI app will block for some arbitrarily long amount of time. 
Therefore, the only solution is to spawn threads for simultaneous WSGI 
applications.

This is not the Twisted Way, BUT, it is very clearly doable in Twisted, 
so it's not like the WSGI spec is unimplementable. For some people it 
might be perfectly acceptable to have an async base Twisted webserver 
running multi-threaded user code. I do not care much about doing that 
myself, but it should be fairly easy to write the WSGI layer to make 
this happen, and I would be happy for someone else to do so and 
contribute it to twisted.

So, basically, I concur: WSGI is implementable for async servers, but 
only to implement blocking applications.

> However, I'm not certain that it's actually possible to support 
> *portable* asynchronous  applications under WSGI, since such 
> asynchrony requires additional support such as an event loop service.  
> As a practical matter, asynchronous applications today require a 
> toolset such as Twisted or peak.events in addition to the web server, 
> and I don't really know of a way to make such applications portable 
> across web servers, since the web server might use a different toolset 
> that insists on having its own event loop.  Or it might be like 
> mod_python or CGI, and not really have any meaningful way to create an 
> event loop: it could be utterly synchronous in nature and impossible 
> to make otherwise.
>
> Thus, as a practical matter, applications that make use of 
> asynchronous I/O *may* be effectively outside WSGI's scope, if they 
> have no real chance of portability.  As I once said on the Web-SIG, 
> the idea of WSGI is more aimed at allowing non-Twisted apps to run 
> under a Twisted web server, than at allowing Twisted applications to 
> run under other web servers!  The latter, obviously, is much more 
> ambitious than the former.

Yes, there is no way that I can see to make WSGI suitable for writing 
async applications without significant work.  There are two obvious 
issues: the input stream only provides blocking read(), not a 
selectable fd, and there is no way to pause output.

If the write callback was extended into a write/finish callback, it 
wouldn't completely fix the second problem. Twisted would have to call 
the write() callback from its reactor loop (having no access to the 
original request thread). Especially if there is any middleware, the 
*write* might block! There's also the question of whether the write() 
and finish() methods are threadsafe or not -- would it even be safe to 
call from a separate thread from that in which the request was started?

Writing an async application *is* an interesting question, because 
then, possibly, you could take the framework half of twisted web and 
run it as a WSGI application. However, if this question is punted by 
WSGI (as I think is likely a good idea..), twisted web framework can 
continue to work with other servers by using HTTP proxying -- which is 
a _perfectly good_ solution, and something major webservers already 
support. HTTP is a pretty good protocol for talking between webservers 
and webapps.

Also, if WSGI becomes really popular on servers that cannot do HTTP 
proxying natively, twisted could provide a WSGI "application" that 
simply proxies the requests over a socket to a separate twisted web 
server process. This would provide essentially no advantage to HTTP 
proxying where that works, however.

James


From pje at telecommunity.com  Thu Sep 16 09:22:36 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 16 09:22:03 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <4149AA43.6000803@xhaus.com>
References: <5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040916111612.0215fec0@mail.telecommunity.com>

At 03:59 PM 9/16/04 +0100, Alan Kennedy wrote:
>And, of course, that's what we're really discussing here: server 
>scheduling, and how servers ensure that application output gets 
>transmitted to clients with maximum efficiency and timeliness. IMHO, 
>asynchronous server scheduling algorithms and concerns have no place in 
>core WSGI, although a well-designed optional extension to support effiency 
>might have a nice unification effect on python asynchronous server 
>architectures.

Right.  I'd encourage people to experiment with async extensions like my 
sleep/wake idea, and if there's sufficient consensus we could add a 
"standard extension" to the spec.  But I don't want to disturb the 
write()+iterable model, since that allows middleware to be mostly oblivious 
to the sync/async issue, and only apps or servers that care have to deal 
with it.  While asynchronous servers are fairly common, most existing 
asynchronous applications are going to be tied to a particular async server 
architecture no matter what we do in WSGI.


From pje at telecommunity.com  Thu Sep 16 10:18:26 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 16 10:18:19 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <15672B46-07F3-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040916113124.025e97d0@mail.telecommunity.com>

At 11:14 AM 9/16/04 -0400, James Y Knight wrote:
>On Sep 16, 2004, at 2:37 AM, Phillip J. Eby wrote:
>>Reading the rest of your post, I see that you are actually addressing the 
>>issue of asynchronous *applications*, and I have only been addressing 
>>asynchronous *servers* in the spec to date.  (Technically "half-async" 
>>servers, since to be properly portable, a WSGI server *must* support 
>>synchronous applications, and therefore an async WSGI server must have a 
>>thread pool for running applications, even if it contains only one thread.)
>
> From the point of view of Twisted as the server, running a WSGI 
> application, the big question is:
>Can you (as a host server) assume WSGI applications will run non-blocking?
>
>The answer is clearly No and I don't imagine that would change.

Right, because the ability to wrap existing applications is a must, and 
most existing applications are synchronous.


>  (well, right now it's currently not even possible to write a 
> non-blocking WSGI application, but even if it were..)

That depends on what you define as "non-blocking".  :)


>The only sensible thing is to assume a WSGI app will block for some 
>arbitrarily long amount of time. Therefore, the only solution is to spawn 
>threads for simultaneous WSGI applications.

Right; this has been in the discussions of WSGI since day one, last 
December.  The assumption is that async servers would have to use a thread 
pool (e.g. via reactor.deferToThread) to run WSGI applications.  Since the 
point was to allow non-Twisted applications and frameworks (e.g. Zope) to 
run under Twisted or any other web server, this was the only possible approach.


>So, basically, I concur: WSGI is implementable for async servers, but only 
>to implement blocking applications.

If by "blocking" you mean, you can't absolutely guarantee that no operation 
will tie up the current thread, then yes.  If you mean "tie up the current 
thread for the entire request", then no, since it's possible to pause the 
output with a few minor changes to the spec.


>>However, I'm not certain that it's actually possible to support 
>>*portable* asynchronous  applications under WSGI, since such asynchrony 
>>requires additional support such as an event loop service.
>>As a practical matter, asynchronous applications today require a toolset 
>>such as Twisted or peak.events in addition to the web server, and I don't 
>>really know of a way to make such applications portable across web 
>>servers, since the web server might use a different toolset that insists 
>>on having its own event loop.  Or it might be like mod_python or CGI, and 
>>not really have any meaningful way to create an event loop: it could be 
>>utterly synchronous in nature and impossible to make otherwise.
>>
>>Thus, as a practical matter, applications that make use of asynchronous 
>>I/O *may* be effectively outside WSGI's scope, if they have no real 
>>chance of portability.  As I once said on the Web-SIG, the idea of WSGI 
>>is more aimed at allowing non-Twisted apps to run under a Twisted web 
>>server, than at allowing Twisted applications to run under other web 
>>servers!  The latter, obviously, is much more ambitious than the former.
>
>Yes, there is no way that I can see to make WSGI suitable for writing 
>async applications without significant work.  There are two obvious 
>issues: the input stream only provides blocking read(), not a selectable 
>fd, and there is no way to pause output.

The sleep/wake extensions I proposed would allow pausing output.  I hadn't 
thought about the input stream issue.


>If the write callback was extended into a write/finish callback, it 
>wouldn't completely fix the second problem. Twisted would have to call the 
>write() callback from its reactor loop (having no access to the original 
>request thread). Especially if there is any middleware, the *write* might 
>block! There's also the question of whether the write() and finish() 
>methods are threadsafe or not -- would it even be safe to call from a 
>separate thread from that in which the request was started?

That's one reason why sleep/wake over iterables is a better solution than 
write/finish for the "pausing output" issue.


>Writing an async application *is* an interesting question, because then, 
>possibly, you could take the framework half of twisted web and run it as a 
>WSGI application. However, if this question is punted by WSGI (as I think 
>is likely a good idea..), twisted web framework can continue to work with 
>other servers by using HTTP proxying -- which is a _perfectly good_ 
>solution, and something major webservers already support. HTTP is a pretty 
>good protocol for talking between webservers and webapps.
>
>Also, if WSGI becomes really popular on servers that cannot do HTTP 
>proxying natively, twisted could provide a WSGI "application" that simply 
>proxies the requests over a socket to a separate twisted web server 
>process. This would provide essentially no advantage to HTTP proxying 
>where that works, however.

No *technical* advantage, true, but if WSGI becomes a popular buzzword, the 
mere existence of such a solution allows you to boast that Twisted Web can 
be used with any WSGI-compliant server, as well as any server that supports 
HTTP proxying, which makes it sound like you have twice as many deployment 
options from a "marketecture" perspective.  :)


From pje at telecommunity.com  Thu Sep 16 11:41:54 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 16 11:41:22 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <4149C330.8060009@xhaus.com>
References: <5.1.1.6.0.20040916111612.0215fec0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040916111612.0215fec0@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040916131647.0213d820@mail.telecommunity.com>

At 05:45 PM 9/16/04 +0100, Alan Kennedy wrote:
>The only thing I disagree on are the names "sleep" and "wake", which IMHO 
>come with too many semantic hangovers from the threading world. When an 
>application calls wsgi.sleep(), it's not really sleeping, it's just 
>declaring that it currently has no output: a call to its iterator will 
>succeed, but the returned value will be an empty string.
>
>So basically, WSGI is providing an on/off indicator for every instance of 
>a middleware stack, which indicates to the server if there is currently 
>output available.

Well, I'm proposing it as an optional extension, not a required 
feature.  And, I think I'd like to streamline it to a single 
'wsgi.pause_output' function, e.g.:

     resume = environ['wsgi.pause_output']()

Where 'resume' is then a callback function that can be invoked to resume 
iteration.  This keeps it to a single extension key, helps ensure the 
correct sequence of actions, and makes it easier to implement in some 
cases, while not making other cases any harder.


>In an asynchronous situation, the application cannot simply do a blocking 
>read on the input: that will tie up the server thread.

What do you mean by "server thread"?  A truly asynchronous server (one 
using "no threads") cannot serve multiple WSGI requests simultaneously.  In 
the general case, a WSGI server can only serve as many requests 
simultaneously as it has available threads for.  However, WSGI applications 
that use iteration in place of 'write()' can sometimes be run with fewer 
than one thread per simultaneous request -- that's why iteration is 
recommended for applications that can be implemented that way.


>  So we need a way for the application to be notified/called when input 
> becomes available from the client.
>
>Perhaps we need to add an environment entry, e.g. "wsgi.input_handler", 
>which the app uses to pass a callable to the server. This callable would 
>be called whenever data became available on the input stream.
>
>So how would that work in the middleware stack?

You would have to pass either 'environ' or 'wsgi.input' *into* this input 
handler request function, so that the server can verify it hasn't been 
replaced by any middleware.  This is the standard way in WSGI of providing 
enhanced communication facilities that could "bypass" middleware.  See:

     http://www.python.org/peps/pep-0333.html#server-extension-apis

So, in principle, if the spec is modified to require middleware to honor 
child applications' block boundaries, then you could use an extension API 
to pause iteration until input is available, in much the same way that you 
would pause iteration for any other reason.

Neither of these "pause iteration" solutions are especially elegant, at 
least from the POV of an async application author.  But my objective here 
is only to make it *possible*, not necessarily pretty.  I imagine that if 
there's actual demand for async apps to run under WSGI, it should be 
possible to create wrappers to let an application written in Twisted's 
continuation-passing style be run as a WSGI app.

Such a wrapper would basically be just a function returning an iterator, 
with a bunch of pausing logic and a queue to communicate with the actual 
asynchronous app.  And, such wrappers should only need to be written once 
for each asynchronous API, which as a practical matter probably means only 
Twisted, anyway, as (IMO) it has no real competitors in the Python async 
framework space.


From pje at telecommunity.com  Thu Sep 16 12:03:27 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 16 12:02:55 2004
Subject: [Twisted-web] Draft language for WSGI to forbid blocking by
	middleware
Message-ID: <5.1.1.6.0.20040916135706.021445a0@mail.telecommunity.com>

I'm proposing the following language to be added to PEP 333, as a 
subsection under "Buffering and Streaming", just before the subsection 
entitled, "The write() callable".  It doesn't address pausing or resuming 
iteration (which I don't have a PEP-able proposal for yet), but it should 
ensure that middleware doesn't introduce any additional blocking issues:

===excerpt start===

Middleware Handling of Block Boundaries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to better support asynchronous applications and servers,
middleware components **must not** block iteration waiting for
multiple values from an application iterable.  If the middleware
needs to accumulate more data from the application before it can
produce any output, it **must** yield an empty string.

To put this requirement another way, a middleware component **must
yield at least one value** each time its underlying application
yields a value.  If the middleware cannot yield any other value,
it must yield an empty string.

This requirement ensures that asynchronous applications and servers
can conspire to reduce the number of threads that are required
to run a given number of application instances simultaneously.

Note also that this requirement means that middleware **must**
return an iterable as soon as its underlying application returns
an iterable.  It is also forbidden for middleware to use the
``write()`` callable to transmit data that is yielded by an
underlying application.  Middleware may only use their parent
server's ``write()`` callable to transmit data that the
underlying application sent using a middleware-provided ``write()``
callable.

===excerpt end===

In addition to this insertion, I would modify the 'start_response()' 
specification to note that HTTP headers should not be sent until the first 
*non-empty* string is yielded from the iterable.

Comments?


From pje at telecommunity.com  Thu Sep 16 14:08:48 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 16 14:08:18 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <4149E99B.3060003@xhaus.com>
References: <5.1.1.6.0.20040916131647.0213d820@mail.telecommunity.com>
	<5.1.1.6.0.20040916111612.0215fec0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040916111612.0215fec0@mail.telecommunity.com>
	<5.1.1.6.0.20040916131647.0213d820@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040916155713.03963460@mail.telecommunity.com>

At 08:29 PM 9/16/04 +0100, Alan Kennedy wrote:
>[Alan Kennedy]
> >> In an asynchronous situation, the application cannot simply do a
> >> blocking read on the input: that will tie up the server thread.
>
>[Phillip J. Eby]
> > What do you mean by "server thread"?  A truly asynchronous server (one
> > using "no threads") cannot serve multiple WSGI requests
> > simultaneously.  In the general case, a WSGI server can only serve as
> > many requests simultaneously as it has available threads for.
>
>Sorry, I should have paid more attention to phrasing in this context.
>
>By  "server thread" I mean the thread of execution that is running the 
>select/poll operation in the server (which needs at least *one* thread). 
>If the application did a blocking read of the input running in a simple, 
>single-threaded asyncore-style server, that single thread would block, 
>holding up event processing.

Right, which is (one reason) why a WSGI server can in the general case only 
serve as many WSGI requests simultaneously as it has available threads for, 
although it's possible to improve on that worst-case condition by 
appropriate use of iterators.


>But I don't see the need for pausing logic or queues? Why can't the server 
>simply call directly into the application, e.g. using a "process_input" 
>method, in effect saying "you have some input ready".
>
>And I'm not sure I see the need for the application to check that the 
>wsgi.input hasn't been replaced: if there were middleware further down 
>that stack that was intercepting and transforming the input stream, then 
>*it* should be the one receiving the asynchronous notification from the 
>server. This lower level component would then read some input, process it, 
>and then call a "process_input" method on the next component up in the 
>stack, etc, etc.
>
>I suppose I'm talking about the server "pushing" the input through the 
>middleware stack, whereas you're talking about the application at the stop 
>of the stack "pulling" the data up through the stack. Is that right?

That's correct, and that's what I'm trying to avoid if at all possible, 
because it enormously complicates middleware, to the sole benefit of 
asynchronous apps -- that mostly aren't going to be portable anyway.

So, going by STASCTAP theory (Simple Things Are Simple, Complex Things Are 
Possible), the pause/resume approach makes asynchronous applications 
*possible*, while keeping the nominal synchronous cases and middleware 
*simple*.


>And I'd be interested to see how your approach would handle a situation 
>where there is both streaming input and output. For example, a server that 
>takes strings of any length, say 10**9 bytes, and .encode('rot13')'s each 
>byte in turn, before sending it back to the client.

Presumably, the function to pause for input needs to take a minimum length, 
or have some way to communicate available length to the application.

I don't pretend to fully understand the needed use cases here, because I 
have little experience writing web applications that need to wait on other 
network services (other than databases) while a client is waiting.  And if 
I were writing an asynchronous server, I'd probably at least consider using 
Greenlets to context-switch blocking operations so that they wouldn't tie 
up an active thread.  Such an approach is conceptually easier to deal with, 
IMO, than writing everything in continuation-passing style.

But I *do* want WSGI to make it *possible* to meet async apps' use cases, 
which is why I'm seeking input from those that do have the relevant 
experience.  The trade-off is that it shouldn't excessively complicate 
nominal compliance with WSGI.  In particular, I'd prefer that the current 
"example CGI gateway" in PEP 333 not require any major changes or 
significant expansion.


From pje at telecommunity.com  Thu Sep 16 16:37:39 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 16 16:37:31 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <414A088B.7040601@xhaus.com>
References: <5.1.1.6.0.20040916155713.03963460@mail.telecommunity.com>
	<5.1.1.6.0.20040916131647.0213d820@mail.telecommunity.com>
	<5.1.1.6.0.20040916111612.0215fec0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040916111612.0215fec0@mail.telecommunity.com>
	<5.1.1.6.0.20040916131647.0213d820@mail.telecommunity.com>
	<5.1.1.6.0.20040916155713.03963460@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040916180735.02fa5e80@mail.telecommunity.com>

At 10:41 PM 9/16/04 +0100, Alan Kennedy wrote:

>In this way, there could be a middleware component below the 
>rot13_streamer in the stack that, say, does chunked_transfer encoding and 
>decoding. It would be the same in form as the above, except that it would

FYI, middleware and apps are now banned from dealing in any kind of 
transfer-encodings, per James' very valuable input on that subject.  Like 
connection properties, these should be the exclusive province of the actual 
web server.


>1. Change the environ entry for 'wsgi.async_input_handler' to be its own 
>callable that records the callback for the next layer up in the stack, the 
>rot13_streamer.input_handler.

This would lead to the unacceptable situation of every middleware component 
having to know in principle about extensions.  The "Server Extension APIs" 
section of the PEP demands that any "bypass" API verify replacement for 
this very reason.


>I think that this proposed approach is clean, and not overly complex for 
>async or blocking programmers to handle.

Unless of course they're writing middleware that does something with the input.


>But I think we do have to cleanly separate the two. I think there are 
>problems associated with trying to run *all* components seamlessly across 
>async or blocking servers. I think that middleware components that are 
>always going to behave correctly in an async situation will have to be 
>designed like that from the ground up. It's dangerous to take components 
>written in a blocking environment and run them in an async environment.

It is a non-goal for WSGI to support running multiple requests 
simultaneously in a single-threaded asynchronous server, so the issue 
doesn't really come up.  A WSGI server *must* allow for the fact that WSGI 
apps use up a thread while they're running or producing a value: that's the 
price of being able to run "traditional" web applications under WSGI.


>And lastly, if it is desired to spin jobs into a different thread, e.g. 
>the rot-13 job above, then that should be a middleware concern, not the 
>WSGI server's.

I agree with you -- for *asynchronous* applications.  Synchronous web 
applications are the default case in WSGI and the world in general, so 
servers *must* use a thread pool to start applications and to run 'next()' 
calls, if they are asynchronous.  But, asynchronous applications wish to 
yield control, to avoid hogging resources in that thread pool, so they need 
to delegate the work to their I/O thread, and then yield an empty string to 
pause output, freeing up that thread for another iterable next(), or 
application start.

Notice, however, that if the server is *synchronous* (e.g. CGI, 
single-threaded FastCGI containers, mod_python under Apache 1.x, etc., ), 
then this is a complete waste of time, because you'll only be running one 
simultaneous request in this process anyway, so you're spinning off a 
second thread to keep from tying up the first thread, but all the first 
thread is doing is waiting for the second thread to finish!  This is 
wasteful, to say the least.

The only case where pausing output (whether for unrelated network I/O, or 
because of a need to read from the input stream) is actually useful is when 
the server is *also* asynchronous -- hence the value of making such pausing 
an optional extension API.  The application can then detect when it's 
*useful* to pause, and synchronous applications needn't worry about it.

Of course, even if the server and application are *both* asynchronous, 
that's no guarantee that they're using compatible event loops!  If you try 
to run a Twisted app under asyncore or vice versa, you're going to be 
spinning off an extra thread to run a second event loop, so there's a bit 
of a trade-off to determining whether your asynchrony is going to actually 
*gain* anything.  But that's a separate question.  WSGI will allow you to 
be asynchronous if you really want to, no matter how bad an idea it might 
be in some cases.  :)


>The twisted rot-13 component would then have very thin methods (run from 
>the server's main thread) which interact with the twisted space i.e. 
>transferring data and receiving data back through queues, and layer WSGI 
>semantics on those interactions, i.e. pause_output, yield result, yield 
>empty_string, etc.

You're pretty much describing what I suggested earlier: that async app 
frameworks like Twisted may want to have a model whereby a generic "thin 
wrapper" WSGI application object is used to communicate with an application 
that's written using the underlying framework's async idioms.  So, for 
example, one might perhaps design a Twisted "Transport" that was 
implemented as a WSGI application.  (I don't know if "Transport" is really 
the correct abstraction to use, I'm just giving an example here.)

Anyway, for such a thing to really work, I think you might need 
server-specific reactor plugins, to integrate Twisted's event loop with 
that of the server.


>When I described your approach as "pulling data up the stack", I saw a 
>bigger difference between the two approaches. I'm thinking now that there 
>is little difference between our proposals, except that in mine it's the 
>bottom component that gets notified of the input by the server, and in 
>yours it's the top component. Though I suppose having the top component 
>pulling input from an iterator chain mirrors nicely the situation where 
>the server pulls output from an iterator chain.

Actually, I'm saying you pull data *down* the stack.  The bottom-most 
application iterator calls 'read()' on an input stream provided by a parent 
middleware component, which then calls read on a higher-level component, 
and so on.


>And my approach basically entails a bunch of nested calls, which might be 
>less efficient elegant than if, say, generators were used in an input 
>processing chain.
>
>You're right again Phillip :-)

Not entirely, actually.  For my approach to really work, the middleware 
would have to be guaranteed to return something from read(), as long as the 
parent's read() returns something.  Otherwise, the resumption would block, 
unless the middleware were much smarter.  I've got to think about it some 
more, because right now I'm still not happy with the specifics of any of 
the proposals for pausing and resuming output.


From pje at telecommunity.com  Thu Sep 16 16:59:28 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 16 17:00:05 2004
Subject: [Twisted-web] Re: [Web-SIG] WSGI woes
In-Reply-To: <5.1.1.6.0.20040916180735.02fa5e80@mail.telecommunity.com>
References: <414A088B.7040601@xhaus.com>
	<5.1.1.6.0.20040916155713.03963460@mail.telecommunity.com>
	<5.1.1.6.0.20040916131647.0213d820@mail.telecommunity.com>
	<5.1.1.6.0.20040916111612.0215fec0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040915190031.0215e7d0@mail.telecommunity.com>
	<5.1.1.6.0.20040916012218.02145cf0@mail.telecommunity.com>
	<5.1.1.6.0.20040916111612.0215fec0@mail.telecommunity.com>
	<5.1.1.6.0.20040916131647.0213d820@mail.telecommunity.com>
	<5.1.1.6.0.20040916155713.03963460@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040916184337.02ec9680@mail.telecommunity.com>

At 06:37 PM 9/16/04 -0400, Phillip J. Eby wrote:
>Not entirely, actually.  For my approach to really work, the middleware 
>would have to be guaranteed to return something from read(), as long as 
>the parent's read() returns something.  Otherwise, the resumption would 
>block, unless the middleware were much smarter.  I've got to think about 
>it some more, because right now I'm still not happy with the specifics of 
>any of the proposals for pausing and resuming output.

Aha!  There's the problem.  The 'read()' protocol is what's wrong.  If 
'wsgi.input' were an *iterator* instead of a file-like object, it would be 
fairly straightforward for async servers to implement "would block" reads 
as yielding empty strings.  And, servers could actually support streaming 
input via chunked encoding, because they could just yield blocks once 
they've arrived.

The downside to making 'wsgi.input' an iterator is that you lose control 
over how much data to read at a time: the upstream server or middleware 
determines how much data you get.  But, it's quite possible to make a 
buffering, file-like wrapper over such an iterator, if that's what you 
really need, and your code is synchronous.  (This will slightly increase 
the coding burden for interfacing applications and frameworks that expect 
to have a readable stream for CGI input.)  For asynchronous code, you're 
just going to invoke some sort of callback with each block, and it's the 
callback's job to deal with it.

What does everybody think?  If combined with a "pause iterating me until 
there's input data available" extension API, this would let the input 
stream be non-blocking, and solve the chunked-encoding input issue all in 
one change to the protocol.  Or am I missing something here?


From corydodt at twistedmatrix.com  Mon Sep 20 09:46:57 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon Sep 20 09:48:38 2004
Subject: [Twisted-web] Re: [Twisted-Python] Fwd: [Twisted-commits] r11721 -
	revert r11685
In-Reply-To: <1095692925.4581.3.camel@sheriffpony>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
Message-ID: <414EFB71.6070701@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Urgh.  I usually avoid getting involved in these discussions--not because I
don't want to participate but because the ML style does not work very well
with my brain.  There's all these different parts of this proposal and some
are being rejected by some people and modified by other people and it's very
hard for me to figure out what the whole picture is.

In this case, I have to say something because this is pretty important to the
product I'm developing.  I just spent 6 weeks doing a conversion to Nevow
because Woven isn't being supported any more.  I do *not* want to do the same
thing with Web.  I've made modifications to Twisted trunk that I was hoping to
get out of 2.0 for our official release, but if there's not going to be a web1
any more, that puts this project in jeopardy again because it means I may not
be able to use 2.0.

So here's what I have to say: please *summarize*.  I need to get a sense of:

1) Timeline.. when are changes being implemented, in what order, tied to what
release etc.
2) How is the svn repo going to change?
3) What is going to be put into what release by whom?
4) What's the impact if you're currently using web1 and you want to be using
web2 because 1 isn't supported any more?
5) What's the impact if you stay with web1?

If you haven't decided yet, go ahead and decide, but then summarize
afterwards. :-)

Thanks..

C



Itamar Shtull-Trauring wrote:
| On Mon, 2004-09-20 at 10:49, Glyph Lefkowitz wrote:
|
|
|>>We already figured out which web server we ("we" being those developers
|>>who actually care about the web) are going to be supporting.
|>>twisted.web2. web should have a deprecation warning in __init__ for a
|>>release, and then should be terminated with extreme prejudice.
|>
|>I would terminate before providing a deprecation warning.  If you want
|>to provide a backwards-compatibility release for using web1 with the new
|>reactor core, that's fine, but I don't see any reason to include web1
|>with the new download.
|
|
| twisted.web will not be included. There will be two downloads ("Twisted
| Web 1 - Deprecated", "Twisted Web 2"). Most people will not download the
| first ever. The first will likely not have new releases unless we fine
| security issues. Moving it to branch and only doing releases from there
| may be fine (if our release infrastructure is up to it!) but I still
| think newweb should be twisted.web2.
|
|
| Summary:
|
| 1. twisted.web2 remains web2.
| 2. Move twisted.web (and any other security bugfix only packages, I
| guess) to a "deprecated" branch.
|
| Yes? No?
|
| If yes, that just leaves the nevow/twisted.web2 merger question, which
| should probably be done on twisted-web mailing list.
|
|
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python@twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBTvtx3A5SrXAiHQcRApINAKCggxacS+kFLmAszBQmrQeuByJHBgCgnyov
jBEWFaH7dZ6TZBbtljvVZTg=
=tLpe
-----END PGP SIGNATURE-----

From foom at fuhm.net  Mon Sep 20 11:16:39 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon Sep 20 11:16:46 2004
Subject: [Twisted-web] Re: [Twisted-Python] Fwd: [Twisted-commits] r11721
	- revert r11685
In-Reply-To: <414EFB71.6070701@twistedmatrix.com>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
	<414EFB71.6070701@twistedmatrix.com>
Message-ID: <D5EE735E-0B28-11D9-BF25-000A95A50FB2@fuhm.net>

I guess I'll keep the crossposting, since this may be of interest to 
those who do not read the twisted-web list.

On Sep 20, 2004, at 11:46 AM, Cory Dodt wrote:
> Urgh.  I usually avoid getting involved in these discussions--not 
> because I
> don't want to participate but because the ML style does not work very 
> well
> with my brain.  There's all these different parts of this proposal and 
> some
> are being rejected by some people and modified by other people and 
> it's very
> hard for me to figure out what the whole picture is.
>
> In this case, I have to say something because this is pretty important 
> to the
> product I'm developing.  I just spent 6 weeks doing a conversion to 
> Nevow
> because Woven isn't being supported any more.  I do *not* want to do 
> the same
> thing with Web.  I've made modifications to Twisted trunk that I was 
> hoping to
> get out of 2.0 for our official release, but if there's not going to 
> be a web1
> any more, that puts this project in jeopardy again because it means I 
> may not
> be able to use 2.0.

I do not want that to happen. Note foremost what web2 is. 1) A rewrite 
of the Request/low level HTTP layer. 2) *Migrating* the Nevow resource 
model back into the core webserver where it belongs.

Where there are conflicting statements by others, I'd go with what I 
say since so far I seem to be in charge of web2. ;)

In quick?summary: since you've already migrated to Nevow, I expect to 
be able to provide easy compatibility with your app so you can use new 
releases of Nevow that depend on web2 with little work. If you 
currently have web1 resources working with Nevow, they will also work 
with Nevow/web2.

> So here's what I have to say: please *summarize*.  I need to get a 
> sense of:
>
> 1) Timeline.. when are changes being implemented, in what order, tied 
> to what
> release etc.

Web2 will be done when it is done, hopefully by the time Twisted 2.0 
releases, but if not, then not. In parallel with development of web2, a 
branch of the Nevow repository will be developed that uses t.web2. That 
should be released at the same time. Web1 will stay around for the 
indefinite future. SVN trunk of Nevow will remain dependent only upon 
web1 until such a time as web2&nevow-which-uses-it work sufficiently 
well at which point that branch will merge with the trunk.

> 2) How is the svn repo going to change?

Right now? t.web2 gets added to Twisted. Nevow gets a branch.

> 3) What is going to be put into what release by whom?

I don't know what you're asking.

> 4) What's the impact if you're currently using web1 and you want to be 
> using
> web2 because 1 isn't supported any more?

The migration from web1 to web2 will be about the same difficulty as 
the migration from web1 to Nevow.

However, you are currently not using (most of) web1, so that is the 
wrong question to ask. You are using Nevow's appserver, which is 
basically the same as what web2's appserver will be.

Web2 will be mostly compatible with current Nevow. I say mostly only 
because it may not be feasible to provide absolutely complete 
compatibility, but I'd like to provide compatibility for all the things 
that normal apps use (Nevow Resource API and app-facing parts of the 
Request object).

Web2 will be somewhat compatible with web1 Resources. "Somewhat" here 
means basically the same thing it already means with Nevow (since the 
code will be essentially the same code).

If you're using the Nevow "appserver" now, ideally you will not have to 
change your app for it to work with web2, although you may want to 
change some things to avoid deprecation warnings. Not everything always 
turns out ideally, so I can't promise that, but it is the goal.

> 5) What's the impact if you stay with web1?

You cannot use new releases of Nevow after <whenever web2 is done and 
the Nevow branch is merged>. Web1 will continue to have the same amount 
of maintenance as it does now (namely: almost none)

James

From wilk-ml at flibuste.net  Mon Sep 20 13:41:17 2004
From: wilk-ml at flibuste.net (William Dode)
Date: Mon Sep 20 13:41:23 2004
Subject: [Twisted-web] web2
Message-ID: <87zn3kohia.fsf@blakie.riol>

hi,

Is there somewhere a paper on the plan of web2 ? I mean the goal of web2
and the differences with web1. I think it will help us to understand why
web2 need nevow.

-- 
William - http://flibuste.net

From l.oluyede at gmail.com  Mon Sep 20 16:00:29 2004
From: l.oluyede at gmail.com (Lawrence Oluyede)
Date: Mon Sep 20 16:01:06 2004
Subject: [Twisted-web] web2
In-Reply-To: <87zn3kohia.fsf@blakie.riol>
References: <87zn3kohia.fsf@blakie.riol>
Message-ID: <9eebf57404092015004dd33f98@mail.gmail.com>

On Mon, 20 Sep 2004 21:41:17 +0200, William Dode <wilk-ml@flibuste.net> wrote:
> hi,
> 
> Is there somewhere a paper on the plan of web2 ? I mean the goal of web2
> and the differences with web1. I think it will help us to understand why
> web2 need nevow.

I suggest you to read this thread
http://twistedmatrix.com/pipermail/twisted-python/2004-September/008643.html

Bye

-- 
Lawrence
"If the implementation is hard to explain, it's a bad idea."
from The Zen of Python by Tim Peters

From wilk-ml at flibuste.net  Tue Sep 21 12:37:24 2004
From: wilk-ml at flibuste.net (William Dode)
Date: Tue Sep 21 12:37:28 2004
Subject: [Twisted-web] web2
In-Reply-To: <9eebf57404092015004dd33f98@mail.gmail.com> (Lawrence Oluyede's
	message of "Tue, 21 Sep 2004 00:00:29 +0200")
References: <87zn3kohia.fsf@blakie.riol>
	<9eebf57404092015004dd33f98@mail.gmail.com>
Message-ID: <87u0trjwnv.fsf@blakie.riol>

Lawrence Oluyede <l.oluyede@gmail.com> writes:

> On Mon, 20 Sep 2004 21:41:17 +0200, William Dode <wilk-ml@flibuste.net> wrote:
>> hi,
>> 
>> Is there somewhere a paper on the plan of web2 ? I mean the goal of web2
>> and the differences with web1. I think it will help us to understand why
>> web2 need nevow.
>
> I suggest you to read this thread
> http://twistedmatrix.com/pipermail/twisted-python/2004-September/008643.html

I read it but i would like to know why web1 need to be rewritten. (i'm a
happy user of web1 :-) I just understand that web2 need nevow to can
show traceback and directory files, but i never show traceback neither
directory files !

-- 
William - http://flibuste.net

From syver at inout.no  Wed Sep 22 02:07:17 2004
From: syver at inout.no (Syver Enstad)
Date: Wed Sep 22 02:07:21 2004
Subject: [Twisted-web] web2
In-Reply-To: <87u0trjwnv.fsf@blakie.riol>
References: <87zn3kohia.fsf@blakie.riol>
	<9eebf57404092015004dd33f98@mail.gmail.com>
	<87u0trjwnv.fsf@blakie.riol>
Message-ID: <uacviengq.fsf@inout.no>

William Dode <wilk-ml@flibuste.net> writes:

> Lawrence Oluyede <l.oluyede@gmail.com> writes:
> 
> > On Mon, 20 Sep 2004 21:41:17 +0200, William Dode <wilk-ml@flibuste.net> wrote:
> >> hi,
> >> 
> >> Is there somewhere a paper on the plan of web2 ? I mean the goal of web2
> >> and the differences with web1. I think it will help us to understand why
> >> web2 need nevow.
> >
> > I suggest you to read this thread
> > http://twistedmatrix.com/pipermail/twisted-python/2004-September/008643.html
> 
> I read it but i would like to know why web1 need to be rewritten. (i'm a
> happy user of web1 :-) I just understand that web2 need nevow to can
> show traceback and directory files, but i never show traceback neither
> directory files !

Seconded, as a user of twisted.web I would really like to know what is
so wrong with it that it should be rewritten.



From radeex at gmail.com  Wed Sep 22 02:49:36 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed Sep 22 02:49:45 2004
Subject: [Twisted-web] web2
In-Reply-To: <uacviengq.fsf@inout.no>
References: <87zn3kohia.fsf@blakie.riol>
	<9eebf57404092015004dd33f98@mail.gmail.com>
	<87u0trjwnv.fsf@blakie.riol> <uacviengq.fsf@inout.no>
Message-ID: <60ed19d404092201497c4122d1@mail.gmail.com>

Sounds like someone needs to write a "Twisted Web 2 FAQ" like my
Twisted Split FAQ (and like the Twisted -> Zope Interfaces FAQ which
is theoretically in development). :-)


On 22 Sep 2004 10:07:17 +0200, Syver Enstad <syver@inout.no> wrote:
> William Dode <wilk-ml@flibuste.net> writes:
> 
> > Lawrence Oluyede <l.oluyede@gmail.com> writes:
> >
> > > On Mon, 20 Sep 2004 21:41:17 +0200, William Dode <wilk-ml@flibuste.net> wrote:
> > >> hi,
> > >>
> > >> Is there somewhere a paper on the plan of web2 ? I mean the goal of web2
> > >> and the differences with web1. I think it will help us to understand why
> > >> web2 need nevow.
> > >
> > > I suggest you to read this thread
> > > http://twistedmatrix.com/pipermail/twisted-python/2004-September/008643.html
> >
> > I read it but i would like to know why web1 need to be rewritten. (i'm a
> > happy user of web1 :-) I just understand that web2 need nevow to can
> > show traceback and directory files, but i never show traceback neither
> > directory files !
> 
> Seconded, as a user of twisted.web I would really like to know what is
> so wrong with it that it should be rewritten.
> 
> 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 
> 



-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com

From tjstebbing at gmail.com  Wed Sep 22 16:51:30 2004
From: tjstebbing at gmail.com (Tim Stebbing)
Date: Wed Sep 22 16:52:03 2004
Subject: [Twisted-web] web2
In-Reply-To: <60ed19d404092201497c4122d1@mail.gmail.com>
References: <87zn3kohia.fsf@blakie.riol>
	<9eebf57404092015004dd33f98@mail.gmail.com>
	<87u0trjwnv.fsf@blakie.riol> <uacviengq.fsf@inout.no>
	<60ed19d404092201497c4122d1@mail.gmail.com>
Message-ID: <9722816504092215511fa586ad@mail.gmail.com>

I hate it when people +1 a topic on a mailing list, but Id have to say
that a web2 FAQ would be a good thing(tm).

Alot of us out here are not as deeply involved as the people who hang
out of #twisted.web day in and day out, but we have vested intrest in
t.web/2 as its one of the tools we reach for when we have to do the
webdev thing, or we have legacy code to maintain.
 
-tjs

On Wed, 22 Sep 2004 04:49:36 -0400, Christopher Armstrong
<radeex@gmail.com> wrote:
> Sounds like someone needs to write a "Twisted Web 2 FAQ" like my
> Twisted Split FAQ (and like the Twisted -> Zope Interfaces FAQ which
> is theoretically in development). :-)
> 
> 
> 
> 
> On 22 Sep 2004 10:07:17 +0200, Syver Enstad <syver@inout.no> wrote:
> > William Dode <wilk-ml@flibuste.net> writes:
> >
> > > Lawrence Oluyede <l.oluyede@gmail.com> writes:
> > >
> > > > On Mon, 20 Sep 2004 21:41:17 +0200, William Dode <wilk-ml@flibuste.net> wrote:
> > > >> hi,
> > > >>
> > > >> Is there somewhere a paper on the plan of web2 ? I mean the goal of web2
> > > >> and the differences with web1. I think it will help us to understand why
> > > >> web2 need nevow.
> > > >
> > > > I suggest you to read this thread
> > > > http://twistedmatrix.com/pipermail/twisted-python/2004-September/008643.html
> > >
> > > I read it but i would like to know why web1 need to be rewritten. (i'm a
> > > happy user of web1 :-) I just understand that web2 need nevow to can
> > > show traceback and directory files, but i never show traceback neither
> > > directory files !
> >
> > Seconded, as a user of twisted.web I would really like to know what is
> > so wrong with it that it should be rewritten.
> >
> >
> >
> >
> > _______________________________________________
> > Twisted-web mailing list
> > Twisted-web@twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> >
> >
> 
> 
> --
>  Twisted | Christopher Armstrong: International Man of Twistery
>   Radix  |          Release Manager,  Twisted Project
> ---------+            http://radix.twistedmatrix.com
> 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>

From pje at telecommunity.com  Wed Sep 22 19:56:36 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Wed Sep 22 19:56:24 2004
Subject: [Twisted-web] A more Twisted approach to async apps in WSGI
Message-ID: <5.1.1.6.0.20040922204838.024f61c0@mail.telecommunity.com>

Hi all.  I've been away for a few days due to loss of e-mail service when 
my dedicated server lost a hard drive.  Unfortunately my ISP didn't support 
the OS version any more, so I had to rebuild everything for the new OS version.

Anyway, on to the topic of my post.  Should 'wsgi.input' become an 
iterator?  Or should we develop a different API for asynchronous applications?

On the positive side of the iterator approach, it could make it easier for 
asynchronous applications to pause waiting for input, and it could in 
principle support "chunked" transfer encoding of the input stream.

However, since we last discussed this, I did some Googling on CGI and 
chunked encoding.  By far and away, the most popular links regarding 
chunked encoding and CGI, are all about bugs in IIS and Apache leading to 
various vulnerabilities when chunked encoding is used.  :(

Once you get past those items (e.g. by adding "-IIS -vulnerability" to your 
search), you then find *our* discussion here on the Web-SIG!  Finally, 
digging further, I found some 1998 discussion from the IPP (Internet 
Printing Protocol!) mailing list about what HTTP/1.1 servers support 
chunked encoding for CGI and which don't.

Anyway, the long and short of it is that CGI and chunked encoding are quite 
simply incompatible, which means that relying on its availability would be 
nonportable in a WSGI application anyway.

That leaves the asynchronous use case, but the benefit is rather strained 
at that point.  Many frameworks reuse the 'cgi' module's 'FieldStorage' 
class in order to parse browser input, and the 'cgi' module's 
implementation requires an object with a 'readline()' method.  That means 
that if we switch from an input stream to an iterator, a lot of people are 
going to be trying to make sensible wrappers to convert the iterator back 
to an input stream, and that's just getting ridiculous, especially since in 
many cases the server or gateway has a file-like object to start with.

So, I'm thinking we should shift the burden to an async-specific API.  But, 
in this case, "burden" means that we get to give asynchronous apps an API 
much more suited to their use cases.

Suppose that we did something similar to 'wsgi.file_wrapper'?  That is, 
suppose we had an optional extension that a server could provide, to wrap 
specialized application object(s) in a fashion that then provides backward 
compatibility to the spec?

That is, suppose we had a 'wsgi.async_wrapper', used like this:

     if 'wsgi.async_wrapper' in environ:
         controller=environ['wsgi.async_wrapper'](environ)
         # do stuff with controller, like register its
         # methods as callbacks
         return controller

The idea is that this would create an iterator that the server/gateway 
could recognize as "special", similar to the file-wrapper trick.  But, the 
object returned would provide an extra API for use by the asynchronous 
application, maybe something like:

     put(data) -- queue data for retrieval when the controller is iterated over

     finish() -- mark the iterator finished, so it raises StopIteration

     on_get(length,callback) -- call 'callback(data)' when 'length' bytes 
are available on 'wsgi.input' (but return immediately from the 'on_get()' call)

While this API is an optional extension, it seems it would be closer to 
what some async fans wanted, and less of a kludge.  It won't do away with 
the possibility that middleware might block waiting for input, of course, 
but when no middleware is present or the middleware isn't transforming the 
input stream, it should work out quite well.

In any case, the implementation of the methods and the iterator interface 
are pretty straightforward, either for synchronous or asynchronous servers.

What do y'all think?  I'd especially like feedback from Twisted folk, as to 
whether this looks anything like the right kind of API for async apps.  (I 
expect it will need some tweaking and tuning.)

But if this is the overall right approach, I'd like to drop the current 
proposals to make 'wsgi.input' an iterator and add optional 
'pause'/'resume' APIs, since they were rather kludgy compared to giving 
async apps their own mini-API for nonblocking I/O.

Comments?  Questions?


From wilk-ml at flibuste.net  Thu Sep 23 02:33:33 2004
From: wilk-ml at flibuste.net (William Dode)
Date: Thu Sep 23 02:33:35 2004
Subject: [Twisted-web] A more Twisted approach to async apps in WSGI
In-Reply-To: <5.1.1.6.0.20040922204838.024f61c0@mail.telecommunity.com>
	(Phillip J. Eby's message of "Wed, 22 Sep 2004 21:56:36 -0400")
References: <5.1.1.6.0.20040922204838.024f61c0@mail.telecommunity.com>
Message-ID: <87wtyliduq.fsf@blakie.riol>

"Phillip J. Eby" <pje@telecommunity.com> writes:

> Hi all.  I've been away for a few days due to loss of e-mail service
> when my dedicated server lost a hard drive.  Unfortunately my ISP
> didn't support the OS version any more, so I had to rebuild everything
> for the new OS version.
>
> Anyway, on to the topic of my post.  Should 'wsgi.input' become an
> iterator?  Or should we develop a different API for asynchronous
> applications?
>
> On the positive side of the iterator approach, it could make it easier
> for asynchronous applications to pause waiting for input, and it could
> in principle support "chunked" transfer encoding of the input stream.
>
> However, since we last discussed this, I did some Googling on CGI and
> chunked encoding.  By far and away, the most popular links regarding
> chunked encoding and CGI, are all about bugs in IIS and Apache leading
> to various vulnerabilities when chunked encoding is used.  :(
>
> Once you get past those items (e.g. by adding "-IIS -vulnerability" to
> your search), you then find *our* discussion here on the Web-SIG!
> Finally, digging further, I found some 1998 discussion from the IPP
> (Internet Printing Protocol!) mailing list about what HTTP/1.1 servers
> support chunked encoding for CGI and which don't.
>
> Anyway, the long and short of it is that CGI and chunked encoding are
> quite simply incompatible, which means that relying on its
> availability would be nonportable in a WSGI application anyway.

I don't understand the problem with an iterator on CGI. A CGI script is
by definition multi-process. If one block, a new script will be run and
anyway the first client will wait... If no one block, an iterator or not
will not change anything for him.

It will be up to the server to decide if he can use chunked encoding or
not. If the script block and doesn't use chunked encoding, it will be
not possible to run the script in cgi anyway... I know people who use
chunked encoding in cgi, they know what they do and it's fine, i'm sure
they will use iterator.

I don't see the difference between

[sleep...]
[sleep...]
[sleep...]
return data

and 

[sleep...]
yield
[sleep...]
yield
[sleep...]
yield

for a cgi script if it's not possible to don't sleep.

-- 
William Dod? - http://flibuste.net

From pje at telecommunity.com  Thu Sep 23 07:04:28 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Thu Sep 23 07:04:04 2004
Subject: [Web-SIG] Re: [Twisted-web] A more Twisted approach to
	async apps in WSGI
In-Reply-To: <87wtyliduq.fsf@blakie.riol>
References: <5.1.1.6.0.20040922204838.024f61c0@mail.telecommunity.com>
	<5.1.1.6.0.20040922204838.024f61c0@mail.telecommunity.com>
Message-ID: <5.1.1.6.0.20040923090205.02f25bd0@mail.telecommunity.com>

At 10:33 AM 9/23/04 +0200, William Dode wrote:

>I don't see the difference between
>
>[sleep...]
>[sleep...]
>[sleep...]
>return data
>
>and
>
>[sleep...]
>yield
>[sleep...]
>yield
>[sleep...]
>yield
>
>for a cgi script if it's not possible to don't sleep.

As previously discussed, the existence of an asynchronous API only matters 
for asynchronous servers and gateways.


From bartek.b at eranet.pl  Thu Sep 23 12:57:19 2004
From: bartek.b at eranet.pl (Bartek Bargiel)
Date: Thu Sep 23 10:29:40 2004
Subject: [Twisted-web] session expiration
Message-ID: <373678423.20040923145719@eranet.pl>

Hi!

I was looking for a possibility to set session timeout - I found this
timeout hardcoded in twisted.web.server module. Shouldn't it be
more flexible? ;-)

--
Bartek Bargiel


From matt at pollenation.net  Thu Sep 23 12:38:15 2004
From: matt at pollenation.net (Matt Goodall)
Date: Thu Sep 23 12:38:48 2004
Subject: [Twisted-web] session expiration
In-Reply-To: <373678423.20040923145719@eranet.pl>
References: <373678423.20040923145719@eranet.pl>
Message-ID: <1095964695.15539.7.camel@debian>

On Thu, 2004-09-23 at 14:57 -0400, Bartek Bargiel wrote:
> Hi!
> 
> I was looking for a possibility to set session timeout - I found this
> timeout hardcoded in twisted.web.server module. Shouldn't it be
> more flexible? ;-)

Yes, it should be more flexible. To be frank, sessions are not well
implemented in t.web at the moment. Hopefully, I or someone else will
get be able to do something about that in time for the web2 release.

In the meantime, attached is my twebsucks.py ;-) module I've been using.
I use a NevowSite but you should be able to do the same for
t.web.server.Site.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twebsucks.py
Type: application/x-python
Size: 1058 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20040923/61656ceb/twebsucks.bin
From bartek.b at eranet.pl  Fri Sep 24 20:05:58 2004
From: bartek.b at eranet.pl (Bartek Bargiel)
Date: Fri Sep 24 16:03:44 2004
Subject: [Twisted-web] many virtual hosts -> separate log files
Message-ID: <117466755.20040924220558@eranet.pl>

hi there! :)

let's assume I'm running a single twisted.web server with many vhosts
served. Please tell me how to log requests to separate log files
depending on requestHostname detected?

regards,

-- 
Bartek Bargiel


From dp at ulaluma.com  Sat Sep 25 01:27:24 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Sat Sep 25 01:27:39 2004
Subject: [Twisted-web] web2 cleanup
Message-ID: <5898EB36-0EC4-11D9-A325-000A95864FC4@ulaluma.com>

Well, I finally got a chance to look at web2 tonight, and as I did I 
just did whatever random cleanups seemed appropriate. Patch attached, 
and I will commit unless there is any objection.

It's pretty obvious to me that web2 is going to need some pretty major 
scrubbing before release to remove the stench of web. James, we should 
coordinate some time on IRC when we can both talk about and work on 
this. I need to devote some energy to this before Twisted 2.0.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: web2-cleanup.diff
Type: application/text
Size: 9872 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-web/attachments/20040925/2cdef66d/web2-cleanup.bin
From mary-twisted at puzzling.org  Sat Sep 25 02:26:32 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat Sep 25 02:27:07 2004
Subject: [Twisted-web] web2
In-Reply-To: <60ed19d404092201497c4122d1@mail.gmail.com>
References: <87zn3kohia.fsf@blakie.riol>
	<9eebf57404092015004dd33f98@mail.gmail.com>
	<87u0trjwnv.fsf@blakie.riol> <uacviengq.fsf@inout.no>
	<60ed19d404092201497c4122d1@mail.gmail.com>
Message-ID: <20040925082632.GC4772@fuchsia.puzzling.org>

On Wed, Sep 22, 2004, Christopher Armstrong wrote:
> Sounds like someone needs to write a "Twisted Web 2 FAQ" like my
> Twisted Split FAQ (and like the Twisted -> Zope Interfaces FAQ which
> is theoretically in development). :-)

http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue731

-Mary

From mary-twisted at puzzling.org  Sat Sep 25 03:32:43 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat Sep 25 03:33:05 2004
Subject: [Twisted-web] web2
In-Reply-To: <20040925082632.GC4772@fuchsia.puzzling.org>
References: <87zn3kohia.fsf@blakie.riol>
	<9eebf57404092015004dd33f98@mail.gmail.com>
	<87u0trjwnv.fsf@blakie.riol> <uacviengq.fsf@inout.no>
	<60ed19d404092201497c4122d1@mail.gmail.com>
	<20040925082632.GC4772@fuchsia.puzzling.org>
Message-ID: <20040925093243.GA9851@fuchsia.puzzling.org>

On Sat, Sep 25, 2004, Mary Gardiner wrote:
> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue731

Oh, and as part of this, if any of you web1 users want to contribute, a
really useful thing would be short examples of "typical" web1 idioms:
stuff you do all the time with web1, whether it is manipulating
requests, dynamic child generation, whatever.

These would need to be fairly short and simple "toy" examples that
represent your usage, because what I'm intending to do with them is
develop 'equivalent' web2 examples that show how to use the new APIs and
classes. I definitely won't have time to work up any web1 examples
myself, so this documentation won't exist unless I get some some help.
(The FAQ probably won't either, but I need help from developers on that
one, this one I need help from users.)

Send examples to me off-list.

Thanks,

-Mary

From dp at ulaluma.com  Sat Sep 25 11:24:49 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Sat Sep 25 11:25:04 2004
Subject: [Twisted-web] web2
In-Reply-To: <20040925093243.GA9851@fuchsia.puzzling.org>
References: <87zn3kohia.fsf@blakie.riol>
	<9eebf57404092015004dd33f98@mail.gmail.com>
	<87u0trjwnv.fsf@blakie.riol> <uacviengq.fsf@inout.no>
	<60ed19d404092201497c4122d1@mail.gmail.com>
	<20040925082632.GC4772@fuchsia.puzzling.org>
	<20040925093243.GA9851@fuchsia.puzzling.org>
Message-ID: <CDC031E5-0F17-11D9-8E7B-000A95864FC4@ulaluma.com>


On Sep 25, 2004, at 5:32 AM, Mary Gardiner wrote:

> On Sat, Sep 25, 2004, Mary Gardiner wrote:
>> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue731
>
> Oh, and as part of this, if any of you web1 users want to contribute, a
> really useful thing would be short examples of "typical" web1 idioms:
> stuff you do all the time with web1, whether it is manipulating
> requests, dynamic child generation, whatever.
>
> These would need to be fairly short and simple "toy" examples that
> represent your usage, because what I'm intending to do with them is
> develop 'equivalent' web2 examples that show how to use the new APIs 
> and
> classes. I definitely won't have time to work up any web1 examples
> myself, so this documentation won't exist unless I get some some help.
> (The FAQ probably won't either, but I need help from developers on that
> one, this one I need help from users.)

Also anything that works in web that will continue to work in web2 
should have a unittest developed against it.

dp


From mary-twisted at puzzling.org  Sat Sep 25 13:09:19 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat Sep 25 13:09:30 2004
Subject: [Twisted-web] web2
In-Reply-To: <CDC031E5-0F17-11D9-8E7B-000A95864FC4@ulaluma.com>
References: <87zn3kohia.fsf@blakie.riol>
	<9eebf57404092015004dd33f98@mail.gmail.com>
	<87u0trjwnv.fsf@blakie.riol> <uacviengq.fsf@inout.no>
	<60ed19d404092201497c4122d1@mail.gmail.com>
	<20040925082632.GC4772@fuchsia.puzzling.org>
	<20040925093243.GA9851@fuchsia.puzzling.org>
	<CDC031E5-0F17-11D9-8E7B-000A95864FC4@ulaluma.com>
Message-ID: <20040925190919.GF13964@fuchsia.puzzling.org>

On Sat, Sep 25, 2004, Donovan Preston wrote:
> Also anything that works in web that will continue to work in web2 
> should have a unittest developed against it.

I'm not able to do that, but I'll certainly make the examples available
to anyone who can.

-Mary

From andrew-twisted at puzzling.org  Sat Sep 25 13:36:57 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat Sep 25 13:37:18 2004
Subject: [Twisted-web] web2
In-Reply-To: <CDC031E5-0F17-11D9-8E7B-000A95864FC4@ulaluma.com>
References: <87zn3kohia.fsf@blakie.riol>
	<9eebf57404092015004dd33f98@mail.gmail.com>
	<87u0trjwnv.fsf@blakie.riol> <uacviengq.fsf@inout.no>
	<60ed19d404092201497c4122d1@mail.gmail.com>
	<20040925082632.GC4772@fuchsia.puzzling.org>
	<20040925093243.GA9851@fuchsia.puzzling.org>
	<CDC031E5-0F17-11D9-8E7B-000A95864FC4@ulaluma.com>
Message-ID: <20040925193657.GA23815@frobozz>

On Sat, Sep 25, 2004 at 01:24:49PM -0400, Donovan Preston wrote:
[...]
> 
> Also anything that works in web that will continue to work in web2 
> should have a unittest developed against it.

In fact, anything that should work in web2 should have a test  ;)

-Andrew.


From dp at ulaluma.com  Mon Sep 27 00:05:06 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Sep 27 00:05:27 2004
Subject: [Twisted-web] Nevow 0.3
Message-ID: <2DCF610E-104B-11D9-9BE2-000A95864FC4@ulaluma.com>

Nevow 0.3 is out. Get it from http://nevow.com/releases/0.3.0/

Thanks to everyone for all their hard work over the last 5 months! I'm 
very proud of this release.

dp


From mailinglist at ltsai.com  Mon Sep 27 04:40:33 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Mon Sep 27 04:50:49 2004
Subject: [Twisted-web] Implement "Page Not Found "
Message-ID: <cj8qp8$jef$1@sea.gmane.org>

Dear All

How do I implement a 404 Page Not Found using twisted web for those 
resources that I did not add using putChild?

class Server(resource.Resource):
     def getChild(self, name, request):
         if name == '':
             return self
         return Resource.getChild(self, name, request)

Thanks,
-Liming


From dp at ulaluma.com  Mon Sep 27 14:17:24 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Mon Sep 27 14:17:50 2004
Subject: [Twisted-web] Re: Nevow status
In-Reply-To: <B0B35A92-10AE-11D9-9654-003065D4F272@acm.org>
References: <CBB70B6E-0D8A-11D9-8222-003065D4F272@acm.org>
	<236A3DB7-0F19-11D9-8E7B-000A95864FC4@ulaluma.com>
	<F4B5A7DC-0FB8-11D9-9654-003065D4F272@acm.org>
	<67F5CDCC-10A4-11D9-86A0-000A95864FC4@ulaluma.com>
	<B0B35A92-10AE-11D9-9654-003065D4F272@acm.org>
Message-ID: <3E9BFA99-10C2-11D9-86A0-000A95864FC4@ulaluma.com>


On Sep 27, 2004, at 1:57 PM, Marc-Antoine Parent wrote:

> I wrote some for the hell of it. Page patterns and children factories 
> are dead easy; working my way through the forms logic right now. My 
> only comment so far: I wish adding events did not require writing an 
> interface. (Or does it? Don't answer if you're busy, I'll figure it 
> out ;)
>
> I expected something like
> class myPage(rend.Page):
>     def action_someAction(self, ctx, *kwargs):
> 	....
>
> so that I could call, in a simple href or form:
> myPage?action=someAction&arg1=1&arg2=b
> I know formless and/or liveEvil are better ways to do some of this, 
> but I like calling a RESTful interface from Javascript to transmit 
> data to the server.
> I may just code it atop what is there, it looks easy enough ;-)
> If there are deep reasons _not_ to do it, I'd like to know.

I'm ccing this to the list to solicit more general feedback.

I agree it should be easier and it's something I have been thinking 
about for a little while now. The main reason formless requires 
interfaces is because of the type annotation, coercion and error 
handling features of formless. If you are just submitting strings and 
don't care if they are valid or not it would be easy enough to do what 
you want to do:

class ActionPage(rend.Page):
	def renderHTTP(self, ctx):
		action = ctx.arg('action')
		if action:
			args = IRequest(ctx).args.copy()
			del args['action']
			return getattr(self, 'action_%s' % action)(ctx, **args)
		return rend.Page.renderHTTP(self, ctx)

I might go ahead and add this to rend so people can use it if they 
want. The thing I like about this approach is that it is simple enough 
to get started quickly, since formless is a lot to swallow when you are 
learning the framework.

I still think the formless interface approach is valid and useful 
however, because of all the things you get from it:

* Form rendering
* Error checking
* Error form rendering
* Type coercion
* Method calling and property setting

Really, formless is designed as the ultimate REST architecture, where 
form POSTs only mutate server side objects and are immediately 
redirected to a GET for that same object. But it is overkill for 
simpler tasks. Maybe there should be some sort of middle ground.

dp


From bartek.b at eranet.pl  Mon Sep 27 22:47:13 2004
From: bartek.b at eranet.pl (Bartek Bargiel)
Date: Mon Sep 27 16:51:41 2004
Subject: [Twisted-web] nevow 0.3 + encoding
Message-ID: <152558725.20040928004713@eranet.pl>

Hi!

My first comment after having installed Nevow 0.3: my polish cp1250
encoding chars are not displayed:

- htmlfile replaces them all with question marks (it works OK when using
UTF-8 encoding)

- xmlfile works fine when reading the text from file but again it
fails to display national charset when it gets it returned from Python code

Maybe it's me doing something wrong somewhere, I'm getting more&more
confused with that encoding stuff :)

Bartek Bargiel



From foom at fuhm.net  Mon Sep 27 21:05:19 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon Sep 27 21:05:43 2004
Subject: [Twisted-web] nevow 0.3 + encoding
In-Reply-To: <152558725.20040928004713@eranet.pl>
References: <152558725.20040928004713@eranet.pl>
Message-ID: <3AE9949D-10FB-11D9-9E53-000A95A50FB2@fuhm.net>

On Sep 28, 2004, at 12:47 AM, Bartek Bargiel wrote:
> My first comment after having installed Nevow 0.3: my polish cp1250
> encoding chars are not displayed:
>
> - htmlfile replaces them all with question marks (it works OK when 
> using
> UTF-8 encoding)
>
> - xmlfile works fine when reading the text from file but again it
> fails to display national charset when it gets it returned from Python 
> code
>
> Maybe it's me doing something wrong somewhere, I'm getting more&more
> confused with that encoding stuff :)

Firstly, Nevow is and always will be designed to use only unicode 
internally. Doing anything else at this point in time is complete 
madness.

This has a few consequences:
1) you should always use unicode strings in your python code if they 
have any non-core-ASCII characters in them.
   like e.g. u"??? ?? oh no~ ??? ?? oh yes~"
Additionally, you have to make sure your source code file encoding is 
set properly <http://www.python.org/peps/pep-0263.html> or else use 
unicode escapes instead of the actual characters,
   e.g. u"\uc0c8\uce74\ub9cc \ucee4\ud53c oh no~ \uc0c8\ud558\uc580 
\uc6b0\uc720 oh yes~"

2) xmlfile and htmlfile must decode from the file's encoding to 
unicode. However, htmlfile is completely broken in this regard: it does 
not decode the file encoding at all. If the file happens to be in UTF-8 
already, it will "work", but only because it returns byte strings, 
which are not encoded upon output.

This really ought to be fixed; people have lots of pre-existing files 
in strange encodings, and utf-8 editor support isn't quite all there 
yet, either. htmlfile should do META content-type tag sniffing (like a 
browser would), and also allow the developer to specify a default 
encoding in the htmlfile constructor.

Fortunately, xmlfile does work right: use a standard <?xml 
version="1.0" encoding="cp1250"?> declaration at the top of the file 
and it'll do the right thing.

3) When writing the response to the client, nevow must encode from 
unicode into the proper response encoding.  Currently there is no way 
to specify any response encoding besides UTF-8. I do not believe this 
needs to be (or even should be) fixed: any browser that cannot handle 
UTF-8 encoding is utterly worthless, and I don't think there are any 
browsers that worthless still in use. At least I hope there aren't.

James


From mesozoic at polynode.com  Mon Sep 27 22:41:31 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Mon Sep 27 22:42:04 2004
Subject: [Twisted-web] Remembering things in context from a Realm
Message-ID: <20040928044131.GC18591@perpetual.moxn.net>

I have a Realm class that does something akin to the following:

class MyRealm:
  def requestAvatar(self, id, mind, *interfaces):
    if IResource is in interfaces:
      user = figureOutWhoTheUserIs(id)
      resource = getResourceForUser(user)
      resource.remember(user, ICurrentUser)
      return (IResource, resource, lambda:None)
    
...and this doesn't seem to be working with the ubiquitous context. _Should_
it work, or do I need a new way to do something like this?

Help is appreciated; I'm trying hard to get back in the loop. :/

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/
 
"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_

From dp at ulaluma.com  Tue Sep 28 07:48:05 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Sep 28 07:48:19 2004
Subject: [Twisted-web] Remembering things in context from a Realm
In-Reply-To: <20040928044131.GC18591@perpetual.moxn.net>
References: <20040928044131.GC18591@perpetual.moxn.net>
Message-ID: <05C0C89C-1155-11D9-B35A-000A95864FC4@ulaluma.com>


On Sep 28, 2004, at 12:41 AM, Alex Levy wrote:

> I have a Realm class that does something akin to the following:
>
> class MyRealm:
>   def requestAvatar(self, id, mind, *interfaces):
>     if IResource is in interfaces:
>       user = figureOutWhoTheUserIs(id)
>       resource = getResourceForUser(user)
>       resource.remember(user, ICurrentUser)
>       return (IResource, resource, lambda:None)
>
> ...and this doesn't seem to be working with the ubiquitous context. 
> _Should_
> it work, or do I need a new way to do something like this?
>
> Help is appreciated; I'm trying hard to get back in the loop. :/

You are going to have to put user as an attribute on resource, then 
remember it in the context in an overridden locateChild.

dp


From matt at pollenation.net  Tue Sep 28 08:04:06 2004
From: matt at pollenation.net (Matt Goodall)
Date: Tue Sep 28 08:04:20 2004
Subject: [Twisted-web] Remembering things in context from a Realm
In-Reply-To: <05C0C89C-1155-11D9-B35A-000A95864FC4@ulaluma.com>
References: <20040928044131.GC18591@perpetual.moxn.net>
	<05C0C89C-1155-11D9-B35A-000A95864FC4@ulaluma.com>
Message-ID: <1096380246.13253.10.camel@harold>

On Tue, 2004-09-28 at 14:48, Donovan Preston wrote:
> On Sep 28, 2004, at 12:41 AM, Alex Levy wrote:
> 
> > I have a Realm class that does something akin to the following:
> >
> > class MyRealm:
> >   def requestAvatar(self, id, mind, *interfaces):
> >     if IResource is in interfaces:
> >       user = figureOutWhoTheUserIs(id)
> >       resource = getResourceForUser(user)
> >       resource.remember(user, ICurrentUser)
> >       return (IResource, resource, lambda:None)
> >
> > ...and this doesn't seem to be working with the ubiquitous context. 
> > _Should_
> > it work, or do I need a new way to do something like this?
> >
> > Help is appreciated; I'm trying hard to get back in the loop. :/
> 
> You are going to have to put user as an attribute on resource, then 
> remember it in the context in an overridden locateChild.

Or, you can create a IResource wrapper that is used like this from
requestAvatar: 

	return (IResource, RememberWrapper(resource, user), lambda:None)

and looks like this (untested):

class RememberWrapper:
    __implements__ = inevow.IResource,

    def __init__(self, resource, user):
        self.resource = resource
        self.user = user

    def locateChild(self, ctx, segments):
        ctx.remember(self.user, ICurrentUser)
        return self.resource, segments

    def renderHTTP(self, ctx):
        ctx.remember(self.user, ICurrentUser)
        return self.resource.renderHTTP(ctx)

This avoids setting attributes on the resource which means you can reuse
a single *real* resource object if that makes sense to your application.

Hope this helps.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From matt at pollenation.net  Tue Sep 28 08:04:11 2004
From: matt at pollenation.net (Matt Goodall)
Date: Tue Sep 28 08:04:23 2004
Subject: [Twisted-web] Remembering things in context from a Realm
In-Reply-To: <05C0C89C-1155-11D9-B35A-000A95864FC4@ulaluma.com>
References: <20040928044131.GC18591@perpetual.moxn.net>
	<05C0C89C-1155-11D9-B35A-000A95864FC4@ulaluma.com>
Message-ID: <1096380246.13253.11.camel@harold>

On Tue, 2004-09-28 at 14:48, Donovan Preston wrote:
> On Sep 28, 2004, at 12:41 AM, Alex Levy wrote:
> 
> > I have a Realm class that does something akin to the following:
> >
> > class MyRealm:
> >   def requestAvatar(self, id, mind, *interfaces):
> >     if IResource is in interfaces:
> >       user = figureOutWhoTheUserIs(id)
> >       resource = getResourceForUser(user)
> >       resource.remember(user, ICurrentUser)
> >       return (IResource, resource, lambda:None)
> >
> > ...and this doesn't seem to be working with the ubiquitous context. 
> > _Should_
> > it work, or do I need a new way to do something like this?
> >
> > Help is appreciated; I'm trying hard to get back in the loop. :/
> 
> You are going to have to put user as an attribute on resource, then 
> remember it in the context in an overridden locateChild.

Or, you can create a IResource wrapper that is used like this from
requestAvatar: 

	return (IResource, RememberWrapper(resource, user), lambda:None)

and looks like this (untested):

class RememberWrapper:
    __implements__ = inevow.IResource,

    def __init__(self, resource, user):
        self.resource = resource
        self.user = user

    def locateChild(self, ctx, segments):
        ctx.remember(self.user, ICurrentUser)
        return self.resource, segments

    def renderHTTP(self, ctx):
        ctx.remember(self.user, ICurrentUser)
        return self.resource.renderHTTP(ctx)

This avoids setting attributes on the resource which means you can reuse
a single *real* resource object if that makes sense to your application.

Hope this helps.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt@pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.


From mesozoic at polynode.com  Tue Sep 28 08:20:17 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Tue Sep 28 08:20:51 2004
Subject: [Twisted-web] Re: Remembering things in context from a Realm
In-Reply-To: <1096380246.13253.11.camel@harold>
Message-ID: <E1CCIq1-0000H6-00@perpetual.moxn.net>


On 9/28/2004, "Matt Goodall" <matt@pollenation.net> wrote:

>On Tue, 2004-09-28 at 14:48, Donovan Preston wrote:
>> On Sep 28, 2004, at 12:41 AM, Alex Levy wrote:
>>
>> > I have a Realm class that does something akin to the following:
>> >
>> > class MyRealm:
>> >   def requestAvatar(self, id, mind, *interfaces):
>> >     if IResource is in interfaces:
>> >       user = figureOutWhoTheUserIs(id)
>> >       resource = getResourceForUser(user)
>> >       resource.remember(user, ICurrentUser)
>> >       return (IResource, resource, lambda:None)
>> >
>> > ...and this doesn't seem to be working with the ubiquitous context.
>> > _Should_
>> > it work, or do I need a new way to do something like this?
>> >
>> > Help is appreciated; I'm trying hard to get back in the loop. :/
>>
>> You are going to have to put user as an attribute on resource, then
>> remember it in the context in an overridden locateChild.
>
>Or, you can create a IResource wrapper that is used like this from
>requestAvatar:
>
>	return (IResource, RememberWrapper(resource, user), lambda:None)
>
>and looks like this (untested):
>
>class RememberWrapper:
>    __implements__ = inevow.IResource,
>
>    def __init__(self, resource, user):
>        self.resource = resource
>        self.user = user
>
>    def locateChild(self, ctx, segments):
>        ctx.remember(self.user, ICurrentUser)
>        return self.resource, segments
>
>    def renderHTTP(self, ctx):
>        ctx.remember(self.user, ICurrentUser)
>        return self.resource.renderHTTP(ctx)
>
>This avoids setting attributes on the resource which means you can reuse
>a single *real* resource object if that makes sense to your application.

This is what I'd expected to do -- instead of just returning a regular
resource, return an EverythingLivesInsideHereResource (with a more
suitable name) that contains everything the site needs to pass down to
the resources.

Still, passing the context through the entire resource chain will let me
cut out a _lot_ of cruft from [Paya]go. Kudos! :)

From dp at ulaluma.com  Tue Sep 28 09:06:56 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Tue Sep 28 09:07:10 2004
Subject: [Twisted-web] Re: Remembering things in context from a Realm
In-Reply-To: <E1CCIq1-0000H6-00@perpetual.moxn.net>
References: <E1CCIq1-0000H6-00@perpetual.moxn.net>
Message-ID: <0A0B8417-1160-11D9-A257-000A95864FC4@ulaluma.com>


On Sep 28, 2004, at 10:20 AM, Alex Levy wrote:

> This is what I'd expected to do -- instead of just returning a regular
> resource, return an EverythingLivesInsideHereResource (with a more
> suitable name) that contains everything the site needs to pass down to
> the resources.
>
> Still, passing the context through the entire resource chain will let 
> me
> cut out a _lot_ of cruft from [Paya]go. Kudos! :)

That was the point and the expected result. Glad it is going to work as 
desired ;-)

Perhaps that resource should be nevow proper? Riffing off what mg did:

class RememberWrapper:
     __implements__ = inevow.IResource,

     def __init__(self, resource, remember):
         self.resource = resource
         self.remember = remember

     def locateChild(self, ctx, segments):
         for interface, adapter in self.remember:
             ctx.remember(adapter, interface)
         return self.resource, segments

     def renderHTTP(self, ctx):
         for interface, adapter in self.remember:
             ctx.remember(adapter, interface)
         return self.resource.renderHTTP(ctx)

dp


From thomas.weholt at gmail.com  Tue Sep 28 12:12:40 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Tue Sep 28 12:12:45 2004
Subject: [Twisted-web] Serving files from many web-servers thru one central
	web-server
Message-ID: <ffb7b7f80409281112139feb8b@mail.gmail.com>

Hi,

I got a subnet full of web-servers using twisted and a main
web-server based on twisted as well. The main server is available to
the outside world. I want to serve files on the other web-servers on
the subnet thru the main web-server. There may be many concurrent
users on the main server so it has to be able to handle many clients.

A few users connect to the main server, requesting files on the
subnet web-servers. The main server reads data from several subnet
servers and writes the data back to the requesting clients. How can I
do this in twisted, without blocking, and handle several clients?
We're not talking hardcore P2P here with thousands of clients, most
likely 2-5 concurrent users, 10 at the most.

Any hints? Or doesn't this make any sense?

-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org

From db3l at fitlinxx.com  Tue Sep 28 13:25:15 2004
From: db3l at fitlinxx.com (David Bolen)
Date: Tue Sep 28 13:25:26 2004
Subject: [Twisted-web] Re: Serving files from many web-servers thru one
	central	web-server
References: <ffb7b7f80409281112139feb8b@mail.gmail.com>
Message-ID: <u1xgmi4bo.fsf@fitlinxx.com>

Thomas Weholt <thomas.weholt@gmail.com> writes:

> A few users connect to the main server, requesting files on the
> subnet web-servers. The main server reads data from several subnet
> servers and writes the data back to the requesting clients. How can I
> do this in twisted, without blocking, and handle several clients?
> We're not talking hardcore P2P here with thousands of clients, most
> likely 2-5 concurrent users, 10 at the most.

I haven't had an opportunity to use it myself yet, but there is a
twisted.web.spread module that may work since all of your servers are
using Twisted.

On the subnet servers, wrap your site object in the ResourcePublisher
object (a pb.Root subclass) and set that up to listen on an
appropriate port.

On the main server, for each resource root that you want proxied out
to a remote server, insert an appropriate child resource using
ResourceSubscription.

A PB link used to transmit the requests between the two machines,
which means that all of the server render() calls to be proxied are
handled in a deferred fashion.

I expect there may be a way to interconnect your server into a client
HTTP class to proxy to the subset servers using a more traditional web
request, but given that you are Twisted throughout, probably no reason
not to go ahead and use the PB approach.

It does look like these classes still use the older pb.getObjectAt
approach for the connection rather than the newer getRootObject, but
it should still work.  If it doesn't directly suit what you want, it
it may at least give you an idea for your own approach (since neither
of those classes is overly complex).

-- David


From thomas.weholt at gmail.com  Tue Sep 28 14:38:25 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Tue Sep 28 14:38:49 2004
Subject: [Twisted-web] Re: Serving files from many web-servers thru one
	central web-server
In-Reply-To: <u1xgmi4bo.fsf@fitlinxx.com>
References: <ffb7b7f80409281112139feb8b@mail.gmail.com>
	<u1xgmi4bo.fsf@fitlinxx.com>
Message-ID: <ffb7b7f80409281338728414b3@mail.gmail.com>

Oh, darn!! Forgot all about this when I started my project. I've read
thru most of the docs I've  found so far, but I'm still somewhat
clueless. Can anybody provide a simple example of how to do this,
preferrably without using the examples in
http://twistedmatrix.com/documents/current/howto/using-twistedweb#auto19.
I'm hooking a xmlrpc-handler and a UDP listener into it as well and
find the good ol'

site = server.Site(MyResource())
reactor.listenTCP(8080, site)
reactor.run()

way of doing it better than mktap etc. Feel like I got more control
doing it the manual way.

Anyhow, thanks for your input so far. I just love Twisted !! :-)

Best regards,
Thomas


On 28 Sep 2004 15:25:15 -0400, David Bolen <db3l@fitlinxx.com> wrote:
> Thomas Weholt <thomas.weholt@gmail.com> writes:
> 
> > A few users connect to the main server, requesting files on the
> > subnet web-servers. The main server reads data from several subnet
> > servers and writes the data back to the requesting clients. How can I
> > do this in twisted, without blocking, and handle several clients?
> > We're not talking hardcore P2P here with thousands of clients, most
> > likely 2-5 concurrent users, 10 at the most.
> 
> I haven't had an opportunity to use it myself yet, but there is a
> twisted.web.spread module that may work since all of your servers are
> using Twisted.
> 
> On the subnet servers, wrap your site object in the ResourcePublisher
> object (a pb.Root subclass) and set that up to listen on an
> appropriate port.
> 
> On the main server, for each resource root that you want proxied out
> to a remote server, insert an appropriate child resource using
> ResourceSubscription.
> 
> A PB link used to transmit the requests between the two machines,
> which means that all of the server render() calls to be proxied are
> handled in a deferred fashion.
> 
> I expect there may be a way to interconnect your server into a client
> HTTP class to proxy to the subset servers using a more traditional web
> request, but given that you are Twisted throughout, probably no reason
> not to go ahead and use the PB approach.
> 
> It does look like these classes still use the older pb.getObjectAt
> approach for the connection rather than the newer getRootObject, but
> it should still work.  If it doesn't directly suit what you want, it
> it may at least give you an idea for your own approach (since neither
> of those classes is overly complex).
> 
> -- David
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 



-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org

From selwyn.mccracken at stonebow.otago.ac.nz  Tue Sep 28 15:53:31 2004
From: selwyn.mccracken at stonebow.otago.ac.nz (Selwyn McCracken)
Date: Tue Sep 28 15:51:27 2004
Subject: [Twisted-web] adding etag and modified arguments to twisted
	feedparser
Message-ID: <4159DD5B.9070202@stonebow.otago.ac.nz>

hi,

I am having trouble modifying the twisted-based rss aggregator from the 
python cookbook so that feedparser can make use of the update related 
arguments of 'etag' and 'modified' to save bandwith.
(see http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277099)

I realise that the problem is deferred related, but I can't seem to 
resolve the problem, even after reading the deferred documentation.

Anyway, the series of deferred functions that I think are relevant are:

1) def getPage(self, data, args): #args is the rss feed link
         return client.getPage(args,timeout=TIMEOUT)


2) def parseFeed(self, feed):
     parsed = feedparser.parse(cStringIO.StringIO(feed))

The problem is that getPage() requests the entire rss feed, and then 
passes the stream through to feedparser.parse. Normally however, 
feedparser.parse() takes furthers arguments of 'etag' and 'modified' so 
that only new feed information is returned, thereby saving bandwidth.

I tried modifying getPage() to return feedparser.parse(args), and 
removing the need for parseFeed(), but it runs substantially slower than 
the original method, I presume in a synchronous manner.

Any assistance in helping to restore the impressive parallel downloading 
performance, but with the the datetime arguments included, would be 
greatly appreciated.

many thanks,
Selwyn





From foom at fuhm.net  Tue Sep 28 18:10:05 2004
From: foom at fuhm.net (James Y Knight)
Date: Tue Sep 28 18:10:11 2004
Subject: [Twisted-web] adding etag and modified arguments to twisted
	feedparser
In-Reply-To: <4159DD5B.9070202@stonebow.otago.ac.nz>
References: <4159DD5B.9070202@stonebow.otago.ac.nz>
Message-ID: <EAA69FEB-11AB-11D9-9E53-000A95A50FB2@fuhm.net>

On Sep 28, 2004, at 5:53 PM, Selwyn McCracken wrote:
> I am having trouble modifying the twisted-based rss aggregator from 
> the python cookbook so that feedparser can make use of the update 
> related arguments of 'etag' and 'modified' to save bandwith.
> (see http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277099)
>
> I realise that the problem is deferred related, but I can't seem to 
> resolve the problem, even after reading the deferred documentation.

Not particularly deferred related, more t.w.client related. I assume 
what's happening is that feedparser.parse() can either take a URL or a 
file-like-object. If it takes a URL, it uses its internal HTTP getting 
method, which is synchronous. Twisted's HTTP client is asynchronous, so 
you want to use that.

So what you need to know how to do is send the etag/modified 
information to Twisted's HTTP client.

You want something like:

def getPage(self, data, args): #args is the rss feed link
         return client.getPage(args,timeout=TIMEOUT, 
headers={'If-None-Match': '"xyzzy"', 'If-Modified-Since': 'Sun, 09 Sep 
2001 01:46:40 GMT'})

However, client.getPage doesn't leave you with any way to get at the 
response headers (so you can save the etag and last modified responses 
for the next request), so you'll need to use HTTPClientFactory directly 
(cribbing from the code in client.getPage). Basically, after the 
deferred fires, factory.response_headers will have the data you want, 
so you just need to keep a reference to factory around.

James


From selwyn.mccracken at stonebow.otago.ac.nz  Tue Sep 28 18:24:14 2004
From: selwyn.mccracken at stonebow.otago.ac.nz (Selwyn McCracken)
Date: Tue Sep 28 18:22:16 2004
Subject: [Twisted-web] adding etag and modified arguments to
	twisted	feedparser
In-Reply-To: <EAA69FEB-11AB-11D9-9E53-000A95A50FB2@fuhm.net>
References: <4159DD5B.9070202@stonebow.otago.ac.nz>
	<EAA69FEB-11AB-11D9-9E53-000A95A50FB2@fuhm.net>
Message-ID: <415A00AE.3040509@stonebow.otago.ac.nz>

thanks James, I'll look into that.

Hopefully it wont result in too many more questions ;-)

James Y Knight wrote:
> On Sep 28, 2004, at 5:53 PM, Selwyn McCracken wrote:
> 
>> I am having trouble modifying the twisted-based rss aggregator from 
>> the python cookbook so that feedparser can make use of the update 
>> related arguments of 'etag' and 'modified' to save bandwith.
>> (see http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277099)
>>
>> I realise that the problem is deferred related, but I can't seem to 
>> resolve the problem, even after reading the deferred documentation.
> 
> 
> Not particularly deferred related, more t.w.client related. I assume 
> what's happening is that feedparser.parse() can either take a URL or a 
> file-like-object. If it takes a URL, it uses its internal HTTP getting 
> method, which is synchronous. Twisted's HTTP client is asynchronous, so 
> you want to use that.
> 
> So what you need to know how to do is send the etag/modified information 
> to Twisted's HTTP client.
> 
> You want something like:
> 
> def getPage(self, data, args): #args is the rss feed link
>         return client.getPage(args,timeout=TIMEOUT, 
> headers={'If-None-Match': '"xyzzy"', 'If-Modified-Since': 'Sun, 09 Sep 
> 2001 01:46:40 GMT'})
> 
> However, client.getPage doesn't leave you with any way to get at the 
> response headers (so you can save the etag and last modified responses 
> for the next request), so you'll need to use HTTPClientFactory directly 
> (cribbing from the code in client.getPage). Basically, after the 
> deferred fires, factory.response_headers will have the data you want, so 
> you just need to keep a reference to factory around.
> 
> James
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 

From dialtone at gmail.com  Tue Sep 28 18:25:10 2004
From: dialtone at gmail.com (Valentino Volonghi)
Date: Tue Sep 28 18:25:53 2004
Subject: [Twisted-web] adding etag and modified arguments to twisted
	feedparser
In-Reply-To: <4159DD5B.9070202@stonebow.otago.ac.nz>
References: <4159DD5B.9070202@stonebow.otago.ac.nz>
Message-ID: <c893b853040928172573045966@mail.gmail.com>

On Wed, 29 Sep 2004 09:53:31 +1200, Selwyn McCracken
<selwyn.mccracken@stonebow.otago.ac.nz> wrote:
> hi,
> 
> I am having trouble modifying the twisted-based rss aggregator from the
> python cookbook so that feedparser can make use of the update related
> arguments of 'etag' and 'modified' to save bandwith.
> (see http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277099)

Glad to see someone found that stuff useful :).
I'm the author of that recipe.

You will also be glad to know that I already solved your problems
months ago and you can find the solution here:
http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue612

Unfortunately, when I asked for addition in twisted.web Itamar
rejected because twisted.web already was on its way to deprecation.

It should work without any problems, and you should use 
client.getPageCached() instead of client.getPage().


-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Proud Gentoo User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/

From selwyn.mccracken at stonebow.otago.ac.nz  Tue Sep 28 18:37:20 2004
From: selwyn.mccracken at stonebow.otago.ac.nz (Selwyn McCracken)
Date: Tue Sep 28 18:35:25 2004
Subject: [Twisted-web] adding etag and modified arguments to
	twisted	feedparser
In-Reply-To: <c893b853040928172573045966@mail.gmail.com>
References: <4159DD5B.9070202@stonebow.otago.ac.nz>
	<c893b853040928172573045966@mail.gmail.com>
Message-ID: <415A03C0.5000608@stonebow.otago.ac.nz>

many thanks for both your answer and your recipe (it is very useful).

I will try and get things working with getPageCached()

Valentino Volonghi wrote:

> On Wed, 29 Sep 2004 09:53:31 +1200, Selwyn McCracken
> <selwyn.mccracken@stonebow.otago.ac.nz> wrote:
> 
>>hi,
>>
>>I am having trouble modifying the twisted-based rss aggregator from the
>>python cookbook so that feedparser can make use of the update related
>>arguments of 'etag' and 'modified' to save bandwith.
>>(see http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277099)
> 
> 
> Glad to see someone found that stuff useful :).
> I'm the author of that recipe.
> 
> You will also be glad to know that I already solved your problems
> months ago and you can find the solution here:
> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue612
> 
> Unfortunately, when I asked for addition in twisted.web Itamar
> rejected because twisted.web already was on its way to deprecation.
> 
> It should work without any problems, and you should use 
> client.getPageCached() instead of client.getPage().
> 
> 

From db3l at fitlinxx.com  Wed Sep 29 00:40:47 2004
From: db3l at fitlinxx.com (David Bolen)
Date: Wed Sep 29 00:40:27 2004
Subject: [Twisted-web] Re: Serving files from many web-servers thru one
	central web-server
References: <ffb7b7f80409281112139feb8b@mail.gmail.com>
	<u1xgmi4bo.fsf@fitlinxx.com>
	<ffb7b7f80409281338728414b3@mail.gmail.com>
Message-ID: <ulletfuhc.fsf@fitlinxx.com>

Thomas Weholt <thomas.weholt@gmail.com> writes:

> Oh, darn!! Forgot all about this when I started my project. I've read
> thru most of the docs I've  found so far, but I'm still somewhat
> clueless. Can anybody provide a simple example of how to do this,
> preferrably without using the examples in
> http://twistedmatrix.com/documents/current/howto/using-twistedweb#auto19.
> I'm hooking a xmlrpc-handler and a UDP listener into it as well and
> find the good ol'
(...)

Well, I experimented tonight and here's a quick example of some
situations.  In re-reading your original post, I realized it wasn't
clear if your "reads data from several subnet servers" comment
referred to wanting to access web resources on the internal servers,
or just some other service you needed data from.  If the latter, then
you can use your own PB session that can be richer in interface than a
web resource if you wanted, so I gave a simple example of that too.

This example just runs both the simulated main server and subset
server objects within the same process over a loopback connection, but
should work identically over any other link.

There is a main and child resource on the server side, and the same on
the internal/subnet side, tied into a URL on the server side by using
the ResourcePublisher/ResourceSubscription.  An additional server side
resource turns into its own pure PB call to a remote server object.
Once running you can access the following URLs:

http://localhost:8000                    ExternalRoot
http://localhost:8000/child              ExternalChild
http://localhost:8000/data               InternalData.remote_getData()
http://localhost:8000/internal           InternalRoot
http://localhost:8000/internal/child     InternalChild

In the InternalData case, I'm making a new PB session for each
rendering request.  Presumably you'd want to structure things to
maintain a persistent connection only reconnecting when necessary
(which, BTW, is basically what ResourceSubscription does).

It all seems to work as expected... it's simplistic but hopefully
it'll point you in the right direction.  Shouldn't be any problem to
tie in additional protocols (such as XMLRPC/UDP) into either the main
server or subnet server processes.

-- David

          - - - - - - - - - - - - - - - - - - - - - - - - -

import sys

from twisted.python import log
from twisted.internet import reactor
from twisted.spread import pb
from twisted.web import server, resource, distrib

#
# An internal PB server object on the internal subnet server, with simple
# direct access (no authentication) via a root object.

class InternalData(pb.Root):

    def remote_getData(self):
        # This could be its own deferrable operation
        return 'Internal data'


#
# Resources on the internal subnet servers
#

class InternalChild(resource.Resource):
    """A child resource rendered on the internal server"""

    def render(self, request):
        return '<html><body>Internal Child</body></html>'


class InternalRoot(resource.Resource):
    """The root of the tree rendered on the internal server"""

    def getChild(self, path, request):
        # Support direct rendering (no trailing "/" on request)
        if path == '':
            return self
        else:
            return resource.Resource.getChild(self, path, request)

    def render(self, request):
        return '<html><body>Internal Root</body></html>'


#
# Resources on the primary web server
#

class MainData(resource.Resource):
    """A child resource that renders a data call to the internal server"""

    def __init__(self, host, port):
        resource.Resource.__init__(self)
        self.host = host
        self.port = port

    def render(self, request):
        """Make a request to the remote root object, and use that result
        as the result of our rendering"""
        
        def failure(value):
            request.write('<html><body>'
                          'Unable to access data:<br>%s'
                          '</body></html>' % value)

        def success(value):
            request.write('<html><body>%s</body></html>' % value)
            
        # Right now we make a new connection to the internal host for
        # each rendering request (pretty darn inefficient!)
        factory = pb.PBClientFactory()
        reactor.connectTCP(self.host, self.port, factory)

        # Obtain a reference to the remote object, call the getData method
        # and then disconnect.
        root = factory.getRootObject()
        root.addCallback(lambda root:
                         root.callRemote('getData').addCallback(success))
        root.addErrback(failure)
        root.addCallback(lambda _: request.finish())
        root.addCallback(lambda _: factory.disconnect())
        return server.NOT_DONE_YET


class MainChild(resource.Resource):
    """A child resource rendered directly on the main server"""

    def render(self, request):
        return '<html><body>Main Server Child</body></html>'
        

class MainRoot(resource.Resource):
    """The primary root resource on the main server"""

    def getChild(self, path, request):
        # Support direct rendering (no trailing "/" on request)
        if path == '':
            return self
        else:
            return resource.Resource.getChild(self, path, request)

    def render(self, request):
        return '<html><body>Main Server Root</body></html>'


#
# Simulate main and subnet servers.  The main server will listen on port
# 8000 and the subnet server will listen (for PB connections) on port 8001.
# Additionally the subnet server will provide the InternalData object
# on port 8002.
#

if __name__ == "__main__":

    #
    # Build up a subnet server "site":
    #     /         InternalRoot
    #     /child    InternalChild
    #
    iroot = InternalRoot()
    iroot.putChild('child', InternalChild())
    isite = server.Site(iroot)

    #
    # Build up the main server "site":
    #     /          MainRoot
    #     /child     MainChild
    #     /data      Render result of call to InternalData's retrieveData
    #     /internal  Request to / on subnet server
    #
    root = MainRoot()
    root.putChild('child', MainChild())
    root.putChild('data', MainData('localhost', 8002))
    root.putChild('internal', distrib.ResourceSubscription('localhost',8001))
    site = server.Site(root)

    #
    # Now start both servers listening.  Note that if these were really
    # running on separate machines, the internal server could do a listenTCP
    # for isite on 8000 to support normal web lookups, while also supporting
    # port 8001 for the PB proxied lookups.
    #
    reactor.listenTCP(8000, site)
    reactor.listenTCP(8001,
                      pb.PBServerFactory(distrib.ResourcePublisher(isite)))
    reactor.listenTCP(8002,pb.PBServerFactory(InternalData()))
                      
    log.startLogging(sys.stdout)
    reactor.run()


From thomas.weholt at gmail.com  Wed Sep 29 01:10:38 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Wed Sep 29 01:10:51 2004
Subject: [Twisted-web] Re: Serving files from many web-servers thru one
	central web-server
In-Reply-To: <ulletfuhc.fsf@fitlinxx.com>
References: <ffb7b7f80409281112139feb8b@mail.gmail.com>
	<u1xgmi4bo.fsf@fitlinxx.com>
	<ffb7b7f80409281338728414b3@mail.gmail.com>
	<ulletfuhc.fsf@fitlinxx.com>
Message-ID: <ffb7b7f804092900101d14c357@mail.gmail.com>

Sweet!!! I'm going to try it when I get off work. In my original
design and implemented prototype the slave nodes on the subnet answers
a UDP broadcast from the main server, which in turns keeps a list of
slave-nodes on the local subnet, connecting to them and communicating
with them using a mix of UDP and XMLRPC. Making a connection to the
local slavenodes or adding them to the main server will be a bit more
tricky using the code you supplied, but hey !!! If I can re-implement
my idea using something like this it would be so much better.

Thanks again!! :-)

Best regards,
Thomas


On 29 Sep 2004 02:40:47 -0400, David Bolen <db3l@fitlinxx.com> wrote:
> Thomas Weholt <thomas.weholt@gmail.com> writes:
> 
> > Oh, darn!! Forgot all about this when I started my project. I've read
> > thru most of the docs I've  found so far, but I'm still somewhat
> > clueless. Can anybody provide a simple example of how to do this,
> > preferrably without using the examples in
> > http://twistedmatrix.com/documents/current/howto/using-twistedweb#auto19.
> > I'm hooking a xmlrpc-handler and a UDP listener into it as well and
> > find the good ol'
> (...)
> 
> Well, I experimented tonight and here's a quick example of some
> situations.  In re-reading your original post, I realized it wasn't
> clear if your "reads data from several subnet servers" comment
> referred to wanting to access web resources on the internal servers,
> or just some other service you needed data from.  If the latter, then
> you can use your own PB session that can be richer in interface than a
> web resource if you wanted, so I gave a simple example of that too.
> 
> This example just runs both the simulated main server and subset
> server objects within the same process over a loopback connection, but
> should work identically over any other link.
> 
> There is a main and child resource on the server side, and the same on
> the internal/subnet side, tied into a URL on the server side by using
> the ResourcePublisher/ResourceSubscription.  An additional server side
> resource turns into its own pure PB call to a remote server object.
> Once running you can access the following URLs:
> 
> http://localhost:8000                    ExternalRoot
> http://localhost:8000/child              ExternalChild
> http://localhost:8000/data               InternalData.remote_getData()
> http://localhost:8000/internal           InternalRoot
> http://localhost:8000/internal/child     InternalChild
> 
> In the InternalData case, I'm making a new PB session for each
> rendering request.  Presumably you'd want to structure things to
> maintain a persistent connection only reconnecting when necessary
> (which, BTW, is basically what ResourceSubscription does).
> 
> It all seems to work as expected... it's simplistic but hopefully
> it'll point you in the right direction.  Shouldn't be any problem to
> tie in additional protocols (such as XMLRPC/UDP) into either the main
> server or subnet server processes.
> 
> -- David
> 
>          - - - - - - - - - - - - - - - - - - - - - - - - -
> 
> import sys
> 
> from twisted.python import log
> from twisted.internet import reactor
> from twisted.spread import pb
> from twisted.web import server, resource, distrib
> 
> #
> # An internal PB server object on the internal subnet server, with simple
> # direct access (no authentication) via a root object.
> 
> class InternalData(pb.Root):
> 
>    def remote_getData(self):
>        # This could be its own deferrable operation
>        return 'Internal data'
> 
> #
> # Resources on the internal subnet servers
> #
> 
> class InternalChild(resource.Resource):
>    """A child resource rendered on the internal server"""
> 
>    def render(self, request):
>        return '<html><body>Internal Child</body></html>'
> 
> class InternalRoot(resource.Resource):
>    """The root of the tree rendered on the internal server"""
> 
>    def getChild(self, path, request):
>        # Support direct rendering (no trailing "/" on request)
>        if path == '':
>            return self
>        else:
>            return resource.Resource.getChild(self, path, request)
> 
>    def render(self, request):
>        return '<html><body>Internal Root</body></html>'
> 
> #
> # Resources on the primary web server
> #
> 
> class MainData(resource.Resource):
>    """A child resource that renders a data call to the internal server"""
> 
>    def __init__(self, host, port):
>        resource.Resource.__init__(self)
>        self.host = host
>        self.port = port
> 
>    def render(self, request):
>        """Make a request to the remote root object, and use that result
>        as the result of our rendering"""
> 
>        def failure(value):
>            request.write('<html><body>'
>                          'Unable to access data:<br>%s'
>                          '</body></html>' % value)
> 
>        def success(value):
>            request.write('<html><body>%s</body></html>' % value)
> 
>        # Right now we make a new connection to the internal host for
>        # each rendering request (pretty darn inefficient!)
>        factory = pb.PBClientFactory()
>        reactor.connectTCP(self.host, self.port, factory)
> 
>        # Obtain a reference to the remote object, call the getData method
>        # and then disconnect.
>        root = factory.getRootObject()
>        root.addCallback(lambda root:
>                         root.callRemote('getData').addCallback(success))
>        root.addErrback(failure)
>        root.addCallback(lambda _: request.finish())
>        root.addCallback(lambda _: factory.disconnect())
>        return server.NOT_DONE_YET
> 
> class MainChild(resource.Resource):
>    """A child resource rendered directly on the main server"""
> 
>    def render(self, request):
>        return '<html><body>Main Server Child</body></html>'
> 
> class MainRoot(resource.Resource):
>    """The primary root resource on the main server"""
> 
>    def getChild(self, path, request):
>        # Support direct rendering (no trailing "/" on request)
>        if path == '':
>            return self
>        else:
>            return resource.Resource.getChild(self, path, request)
> 
>    def render(self, request):
>        return '<html><body>Main Server Root</body></html>'
> 
> #
> # Simulate main and subnet servers.  The main server will listen on port
> # 8000 and the subnet server will listen (for PB connections) on port 8001.
> # Additionally the subnet server will provide the InternalData object
> # on port 8002.
> #
> 
> if __name__ == "__main__":
> 
>    #
>    # Build up a subnet server "site":
>    #     /         InternalRoot
>    #     /child    InternalChild
>    #
>    iroot = InternalRoot()
>    iroot.putChild('child', InternalChild())
>    isite = server.Site(iroot)
> 
>    #
>    # Build up the main server "site":
>    #     /          MainRoot
>    #     /child     MainChild
>    #     /data      Render result of call to InternalData's retrieveData
>    #     /internal  Request to / on subnet server
>    #
>    root = MainRoot()
>    root.putChild('child', MainChild())
>    root.putChild('data', MainData('localhost', 8002))
>    root.putChild('internal', distrib.ResourceSubscription('localhost',8001))
>    site = server.Site(root)
> 
>    #
>    # Now start both servers listening.  Note that if these were really
>    # running on separate machines, the internal server could do a listenTCP
>    # for isite on 8000 to support normal web lookups, while also supporting
>    # port 8001 for the PB proxied lookups.
>    #
>    reactor.listenTCP(8000, site)
>    reactor.listenTCP(8001,
>                      pb.PBServerFactory(distrib.ResourcePublisher(isite)))
>    reactor.listenTCP(8002,pb.PBServerFactory(InternalData()))
> 
>    log.startLogging(sys.stdout)
>    reactor.run()
> 
> 
> 
> 
> _______________________________________________
> Twisted-web mailing list
> Twisted-web@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 



-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org

From selwyn.mccracken at stonebow.otago.ac.nz  Wed Sep 29 03:45:58 2004
From: selwyn.mccracken at stonebow.otago.ac.nz (Selwyn McCracken)
Date: Wed Sep 29 03:44:01 2004
Subject: [Twisted-web] adding etag and modified arguments to
	twisted	feedparser
In-Reply-To: <c893b853040928172573045966@mail.gmail.com>
References: <4159DD5B.9070202@stonebow.otago.ac.nz>
	<c893b853040928172573045966@mail.gmail.com>
Message-ID: <415A8456.2040502@stonebow.otago.ac.nz>

Hi Valentino,

sorry for bugging you again.

I have had a look through httpcache.py, but as a total newcomer to 
twisted I am slightly overwhelmed by the concepts of factories and 
protocols at this stage.

I tried modifying getPage() from your recipe to include httpcache, so 
that I could see what was happening, like so:

def getPage(self, data, args):
         return httpcache.getPageCached(args,timeout=TIMEOUT)

however this triggers the following error:
"global name '_parse' is not defined", and I'm not sure how to proceed.

In any case, what I would ideally like is something like:

def getPage(self, data, args):
         return httpcache.getPageCached(args,timeout=TIMEOUT, 
etag=_ETAG,modified=_MODIFIED)

This would simply return the page in full or the 304 error, and then I 
can handle the caching and timestamping outside in workOnPage().

Any help once again would be greatfully received.

thanks,
Selwyn



From db3l at fitlinxx.com  Wed Sep 29 08:45:00 2004
From: db3l at fitlinxx.com (David Bolen)
Date: Wed Sep 29 08:45:13 2004
Subject: [Twisted-web] Re: Serving files from many web-servers thru one
	central web-server
References: <ffb7b7f80409281112139feb8b@mail.gmail.com>
	<u1xgmi4bo.fsf@fitlinxx.com>
	<ffb7b7f80409281338728414b3@mail.gmail.com>
	<ulletfuhc.fsf@fitlinxx.com>
	<ffb7b7f804092900101d14c357@mail.gmail.com>
Message-ID: <u7jqdt9qr.fsf@fitlinxx.com>

Thomas Weholt <thomas.weholt@gmail.com> writes:

> Sweet!!! I'm going to try it when I get off work. In my original
> design and implemented prototype the slave nodes on the subnet answers
> a UDP broadcast from the main server, which in turns keeps a list of
> slave-nodes on the local subnet, connecting to them and communicating
> with them using a mix of UDP and XMLRPC. Making a connection to the
> local slavenodes or adding them to the main server will be a bit more
> tricky using the code you supplied, but hey !!! If I can re-implement
> my idea using something like this it would be so much better.

Note that there's nothing that says you have to use PB to make the
internal requests.  If you already have a working UDP/XMLRPC
mechanism, just go ahead and keep using it.

Any resource's render() operation can just return server.NOT_DONE_YET,
and then manage the request itself, completing it whenever it can,
deferrable or not.  Just request.write() whatever data you eventually
want to, and don't forget to do the request.finish() when done.  You
could just as easily make an XMLRPC request to an internal server from
within a render() as a callRemote to a PB server.

-- David


From bartek.b at eranet.pl  Wed Sep 29 22:19:34 2004
From: bartek.b at eranet.pl (Bartek Bargiel)
Date: Wed Sep 29 16:22:10 2004
Subject: [Twisted-web] need some help
Message-ID: <94358112.20040930001934@eranet.pl>

My question may sound weird but I have no ideas about it...
If there are users of Internet Explorer and Mozilla Firebird around
please use both browsers to enter my website at
http://www.itabak.com/start

Please pay attention to strange behaviour of IE. It seems to stop
downloading site but suddenly it displays the whole page. There's no
action like that in Firebird's case.

I'm not sure if it's anything related to twisted.web or is it just IE page layouting problem.
I'll be glad for all comments.

BTW: thanks for Unicode help!

Regards,

-- 
Bartek Bargiel


From maoy+twisted at cis.upenn.edu  Thu Sep 30 11:52:57 2004
From: maoy+twisted at cis.upenn.edu (Yun Mao)
Date: Thu Sep 30 11:53:00 2004
Subject: [Twisted-web] How to get rid of web logs? 
Message-ID: <Pine.LNX.4.56.0409301352220.4417@klondike.cis.upenn.edu>


Right now I'm using the log for debugging, and I don't wan to log those
info like below. How should I achieve this?  Thanks!

2004/09/30 13:31 Eastern Daylight Time [HTTPChannel,1,127.0.0.1] 127.0.0.1
- - [
30/Sep/2004:17:31:56 +0000] "GET /?view=all HTTP/1.1" 200 2767
"http://localhost
:1083/" "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7)
Gecko/20040803
Firefox/0.9.3"

Yun


From floydophone at gmail.com  Thu Sep 30 13:45:39 2004
From: floydophone at gmail.com (Peter Hunt)
Date: Thu Sep 30 14:12:53 2004
Subject: [Twisted-web] nevow/stackless bugs -- patch
Message-ID: <6654eac404093012451dd5d40f@mail.gmail.com>

I've been trying to run stan on stackless when I ran into a problem
with render methods. Stackless uses "stackless.instancemethod" instead
of "__builtin__.instancemethod", and "stackless.function" instead of
"__builtin__.function". Attached is a svn diff patch of the changes I
made to __init__.py in order for stan to support stackless properly.

HTH,

Peter Hunt
-------------- next part --------------
Index: __init__.py
===================================================================
--- __init__.py	(revision 675)
+++ __init__.py	(working copy)
@@ -164,9 +164,11 @@
 nevow.flat.flatstan.StringCastSerializer          __builtin__.dict
 nevow.flat.flatstan.ListSerializer                __builtin__.tuple
 nevow.flat.flatstan.ListSerializer                __builtin__.generator
-nevow.flat.flatstan.FunctionSerializer            __builtin__.function
+nevow.flat.flatstan.FunctionSerializer            __builtin__.function
+nevow.flat.flatstan.FunctionSerializer            stackless.function
 nevow.flat.flatstan.FunctionSerializer            __builtin__.type
-nevow.flat.flatstan.MethodSerializer              __builtin__.instancemethod
+nevow.flat.flatstan.MethodSerializer              __builtin__.instancemethod
+nevow.flat.flatstan.MethodSerializer              stackless.instancemethod
 nevow.flat.flatstan.CallableInstanceSerializer    nevow.inevow.IRenderer
 nevow.flat.flatstan.CallableInstanceSerializer    nevow.inevow.IRendererFactory
 nevow.flat.flatstan.DirectiveSerializer           nevow.stan.directive
From db3l at fitlinxx.com  Thu Sep 30 16:51:38 2004
From: db3l at fitlinxx.com (David Bolen)
Date: Thu Sep 30 16:51:45 2004
Subject: [Twisted-web] Re: How to get rid of web logs?
References: <Pine.LNX.4.56.0409301352220.4417@klondike.cis.upenn.edu>
Message-ID: <ubrfn4bgl.fsf@fitlinxx.com>

Yun Mao <maoy+twisted@cis.upenn.edu> writes:

> Right now I'm using the log for debugging, and I don't wan to log those
> info like below. How should I achieve this?  Thanks!
> 
> 2004/09/30 13:31 Eastern Daylight Time [HTTPChannel,1,127.0.0.1] 127.0.0.1
> - - [
> 30/Sep/2004:17:31:56 +0000] "GET /?view=all HTTP/1.1" 200 2767
> "http://localhost
> :1083/" "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7)
> Gecko/20040803
> Firefox/0.9.3"

You could set up your own log observer (based on log.FileLogObserver
for simplicity) and filter out anything where the system entry in the
event dictionary started with HTTPChannel.  It does have a dependency
if HTTPChannel changes its prefix in the future, but it should work
fine.

E.g., if you use to do the typical:

    from twisted.python import log

    log.startLogging(somefile)

switch it to:

    from twisted.python import log

    class NoHTTPLogFileObserver(log.FileLogObserver):
        def emit(self, eventDict):
            if not eventDict.get('system','').startswith('HTTPChannel'):
                log.FileLogObserver.emit(self, eventDict)

    log.startLoggingWithObserver(NoHTTPLogFileObserver(sys.stdout).emit)


Alternatively, you can use your own observer to do anything you want
with those.  For example, in one of our applications, we just filter
out the HTTPChannel events to a separate log file whereas most of the
log messages go to a central log.

-- David


From foom at fuhm.net  Thu Sep 30 17:04:22 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu Sep 30 17:05:04 2004
Subject: [Twisted-web] nevow/stackless bugs -- patch
In-Reply-To: <6654eac404093012451dd5d40f@mail.gmail.com>
References: <6654eac404093012451dd5d40f@mail.gmail.com>
Message-ID: <115B6036-1335-11D9-B112-000A95A50FB2@fuhm.net>

On Sep 30, 2004, at 3:45 PM, Peter Hunt wrote:
> I've been trying to run stan on stackless when I ran into a problem
> with render methods. Stackless uses "stackless.instancemethod" instead
> of "__builtin__.instancemethod", and "stackless.function" instead of
> "__builtin__.function". Attached is a svn diff patch of the changes I
> made to __init__.py in order for stan to support stackless properly.

I think this is a serious problem with the lazy adapter registration. 
Even for things that aren't __builtin__ brokenness. For example, if I 
refactor and move some classes around, their module name will change. 
To maintain backwards compatibility, I keep the binding in the old 
module with a deprecation warning, which keeps everything happy, EXCEPT 
for the lazy adapter registration. Since it keys on the full object 
name, it breaks.

But, as for this patch, committed.

James


From dp at ulaluma.com  Thu Sep 30 17:50:08 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Thu Sep 30 17:50:19 2004
Subject: [Twisted-web] nevow/stackless bugs -- patch
In-Reply-To: <115B6036-1335-11D9-B112-000A95A50FB2@fuhm.net>
References: <6654eac404093012451dd5d40f@mail.gmail.com>
	<115B6036-1335-11D9-B112-000A95A50FB2@fuhm.net>
Message-ID: <761C47A2-133B-11D9-BE0A-000A95864FC4@ulaluma.com>


On Sep 30, 2004, at 7:04 PM, James Y Knight wrote:

> On Sep 30, 2004, at 3:45 PM, Peter Hunt wrote:
>> I've been trying to run stan on stackless when I ran into a problem
>> with render methods. Stackless uses "stackless.instancemethod" instead
>> of "__builtin__.instancemethod", and "stackless.function" instead of
>> "__builtin__.function". Attached is a svn diff patch of the changes I
>> made to __init__.py in order for stan to support stackless properly.
>
> I think this is a serious problem with the lazy adapter registration. 
> Even for things that aren't __builtin__ brokenness. For example, if I 
> refactor and move some classes around, their module name will change. 
> To maintain backwards compatibility, I keep the binding in the old 
> module with a deprecation warning, which keeps everything happy, 
> EXCEPT for the lazy adapter registration. Since it keys on the full 
> object name, it breaks.
>
> But, as for this patch, committed.

It's also a problem when you have an adapter registration and then you 
delete the adapter. You have garbage in your registrations that you 
don't know about until later.

To help prevent this situation from occurring, I wrote some tests which 
assert that all the registered adapters actually exist, so while you 
might not see it in production, you'll see it if you run the tests.

I think writing a test that verifies your adapters are registered 
properly is the best solution.

dp


