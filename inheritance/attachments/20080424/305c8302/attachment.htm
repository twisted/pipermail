<tt>
&lt;HTML&gt;&lt;HEAD&gt;<br>
&lt;STYLE&gt;&lt;/STYLE&gt;<br>
&lt;/HEAD&gt;<br>
&lt;BODY&gt;&lt;style&gt;&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br>
//&nbsp;starting&nbsp;the&nbsp;main&nbsp;process&nbsp;for&nbsp;computing&nbsp;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;the&nbsp;distance&nbsp;between&nbsp;the&nbsp;two&nbsp;strings&nbsp;&quot;x&quot;&nbsp;and&nbsp;&quot;y&quot;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfor(i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;=&nbsp;m;&nbsp;++i)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfor(unsigned&nbsp;int&nbsp;j&nbsp;=&nbsp;1;&nbsp;j&nbsp;&lt;=&nbsp;n;&nbsp;++j)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;if&nbsp;the&nbsp;current&nbsp;two&nbsp;characters<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;of&nbsp;both&nbsp;strings&nbsp;are&nbsp;the&nbsp;same<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;then,&nbsp;the&nbsp;corresponding&nbsp;cost&nbsp;value<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;will&nbsp;be&nbsp;zero,otherwise&nbsp;it&nbsp;will&nbsp;be&nbsp;1<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif&nbsp;(x[i-1]&nbsp;==&nbsp;y[j-1])&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcost&nbsp;=&nbsp;0;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}&nbsp;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspelse&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcost&nbsp;=&nbsp;1;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;current&nbsp;cell&nbsp;of&nbsp;the&nbsp;matrix:&nbsp;matrix[i][j]<br>
<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;finds&nbsp;the&nbsp;above&nbsp;cell&nbsp;to&nbsp;the&nbsp;current&nbsp;cell<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspabove_cell&nbsp;=&nbsp;matrix[i-1][j];<br>
<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;finds&nbsp;the&nbsp;left&nbsp;cell&nbsp;to&nbsp;the&nbsp;current&nbsp;cell<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspleft_cell&nbsp;=&nbsp;matrix[i][j-1];<br>
<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;finds&nbsp;the&nbsp;diagonally&nbsp;above&nbsp;cell&nbsp;to&nbsp;the&nbsp;current&nbsp;cell<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdiagonal_cell&nbsp;=&nbsp;matrix[i-1][j-1];<br>
<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;computes&nbsp;the&nbsp;current&nbsp;value&nbsp;of&nbsp;the&nbsp;&quot;edit&nbsp;distance&quot;&nbsp;and&nbsp;place<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;the&nbsp;result&nbsp;into&nbsp;the&nbsp;current&nbsp;matrix&nbsp;cell<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspmatrix[i][j]&nbsp;=&nbsp;_min(above_cell&nbsp;+&nbsp;1,&nbsp;left_cell&nbsp;+&nbsp;1,&nbsp;diagonal_cell&nbsp;+&nbsp;cost);&lt;/style&gt;<br>
&lt;/style&gt;&lt;a&nbsp;href=&quot;http://buiiearm.com&quot;&gt;Healthy&nbsp;living&nbsp;is&nbsp;easily&nbsp;achieved!&lt;/a&gt;&lt;style&gt;<br>
//&nbsp;The&nbsp;&quot;Levenshtein&nbsp;distance&quot;&nbsp;is&nbsp;a&nbsp;measure&nbsp;of&nbsp;the&nbsp;similarity&nbsp;between&nbsp;two&nbsp;strings,<br>
//&nbsp;this&nbsp;algorithm&nbsp;is&nbsp;also&nbsp;refered&nbsp;to&nbsp;as&nbsp;&quot;edit&nbsp;distance&quot;.&nbsp;The&nbsp;&quot;Levenshtein&nbsp;distance&quot;<br>
//&nbsp;was&nbsp;named&nbsp;after&nbsp;the&nbsp;russian&nbsp;scientist&nbsp;&quot;Vladimir&nbsp;Levenshtein&quot;,&nbsp;who&nbsp;has&nbsp;discovered<br>
//&nbsp;it&nbsp;back&nbsp;in&nbsp;1965.&nbsp;The&nbsp;smaller&nbsp;the&nbsp;distance&nbsp;between&nbsp;two&nbsp;strings,&nbsp;the&nbsp;closer&nbsp;are<br>
//&nbsp;these&nbsp;strings&nbsp;syntacticaly.&nbsp;The&nbsp;&quot;Levenshtein&nbsp;distance&quot;&nbsp;is&nbsp;computed&nbsp;by<br>
//&nbsp;calculating&nbsp;the&nbsp;minimum&nbsp;number&nbsp;of&nbsp;operations&nbsp;that&nbsp;has&nbsp;to&nbsp;be&nbsp;made&nbsp;to&nbsp;transform<br>
//&nbsp;one&nbsp;string&nbsp;to&nbsp;another&nbsp;one,usualy&nbsp;this&nbsp;operations&nbsp;are:&nbsp;replace,insert&nbsp;or&nbsp;delete&nbsp;a&nbsp;character<br>
//&nbsp;example:&nbsp;we&nbsp;can&nbsp;change&nbsp;the&nbsp;word:&nbsp;&quot;mathematics&quot;&nbsp;to&nbsp;&quot;mathematician&quot;&nbsp;by&nbsp;changing&nbsp;one&nbsp;character<br>
//&nbsp;and&nbsp;by&nbsp;inserting&nbsp;two&nbsp;more&nbsp;characters&nbsp;at&nbsp;the&nbsp;end.(we&nbsp;can&nbsp;replace&nbsp;&quot;s&quot;&nbsp;by&nbsp;&quot;i&quot;&nbsp;and&nbsp;<br>
//&nbsp;also&nbsp;insert&nbsp;&quot;a&quot;&nbsp;and&nbsp;&quot;n&quot;&nbsp;after&nbsp;that).&nbsp;The&nbsp;total&nbsp;number&nbsp;of&nbsp;operations&nbsp;that&nbsp;was&nbsp;needed&nbsp;in&nbsp;this<br>
//&nbsp;case&nbsp;to&nbsp;change&nbsp;&quot;mathematics&quot;&nbsp;to&nbsp;&quot;mathematician&quot;&nbsp;was&nbsp;3&nbsp;operations&nbsp;and&nbsp;since&nbsp;it&nbsp;is<br>
//&nbsp;also&nbsp;the&nbsp;smallest&nbsp;number&nbsp;of&nbsp;operation&nbsp;that&nbsp;can&nbsp;be&nbsp;use&nbsp;to&nbsp;transform&nbsp;one&nbsp;of&nbsp;this&nbsp;strings<br>
//&nbsp;to&nbsp;the&nbsp;other&nbsp;one,&nbsp;that&nbsp;value&nbsp;is&nbsp;also&nbsp;a&nbsp;measure&nbsp;of&nbsp;the&nbsp;&quot;Levenshtein&nbsp;distance&quot;&nbsp;between<br>
//&nbsp;these&nbsp;two&nbsp;strings.&nbsp;<br>
//&nbsp;There&nbsp;has&nbsp;been&nbsp;many&nbsp;application&nbsp;of&nbsp;the&nbsp;&quot;Levenshtein&nbsp;distance&quot;,&nbsp;here&nbsp;is&nbsp;a&nbsp;few&nbsp;of&nbsp;them:&nbsp;<br>
//&nbsp;Spell&nbsp;Checking,&nbsp;Speech&nbsp;Recognition,&nbsp;Pattern&nbsp;Recognition&nbsp;etc.&nbsp;****************<br>
//<br>
****************************************************************************<br>
#include&nbsp;&quot;distance.h&quot;<br>
<br>
<br>
//&nbsp;finds&nbsp;the&nbsp;minimum&nbsp;of&nbsp;tree&nbsp;integers<br>
int&nbsp;_min(int&nbsp;a,&nbsp;int&nbsp;b,&nbsp;int&nbsp;c)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreturn&nbsp;min(min(a,&nbsp;b),&nbsp;c);<br>
}<br>
<br>
//&nbsp;allocates&nbsp;a&nbsp;2D&nbsp;array&nbsp;of&nbsp;integers<br>
int&nbsp;**create_matrix(int&nbsp;Row,&nbsp;int&nbsp;Col)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspint&nbsp;**array&nbsp;=&nbsp;new&nbsp;int*[Row];<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfor(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;Row;&nbsp;++i)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsparray[i]&nbsp;=&nbsp;new&nbsp;int[Col];<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreturn&nbsp;array;<br>
}<br>
<br>
//&nbsp;deallocates&nbsp;memory<br>
int&nbsp;**delete_matrix(int&nbsp;**array,&nbsp;int&nbsp;Row,&nbsp;int&nbsp;Col)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfor(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;Row;&nbsp;++i)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete&nbsp;array[i];<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete&nbsp;[]&nbsp;array;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreturn&nbsp;array;<br>
}<br>
<br>
//&nbsp;computes&nbsp;the&nbsp;Levenshtein&nbsp;distance&nbsp;between&nbsp;two&nbsp;strings<br>
//&nbsp;&quot;x&quot;&nbsp;represent&nbsp;the&nbsp;pattern&nbsp;and&nbsp;&quot;y&quot;&nbsp;represent&nbsp;the&nbsp;text<br>
//&nbsp;&quot;m&quot;&nbsp;is&nbsp;the&nbsp;pattern&nbsp;length&nbsp;and&nbsp;&quot;n&quot;&nbsp;is&nbsp;the&nbsp;text&nbsp;length<br>
int&nbsp;LD(const&nbsp;char&nbsp;*x,&nbsp;unsigned&nbsp;int&nbsp;m,&nbsp;const&nbsp;char&nbsp;*y,&nbsp;unsigned&nbsp;int&nbsp;n)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;if&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;second&nbsp;string&nbsp;is&nbsp;zero<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;then&nbsp;the&nbsp;distance&nbsp;between&nbsp;the&nbsp;two&nbsp;strings&nbsp;will<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;be&nbsp;equal&nbsp;to&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;first&nbsp;string<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;and&nbsp;vis-versa<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;if&nbsp;the&nbsp;length&nbsp;of&nbsp;both&nbsp;strings&nbsp;is&nbsp;equal&nbsp;to&nbsp;zero<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;then&nbsp;the&nbsp;distance&nbsp;between&nbsp;this&nbsp;two&nbsp;strings&nbsp;will<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;simply&nbsp;be&nbsp;zero<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif&nbsp;(n&nbsp;==&nbsp;0)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreturn&nbsp;m;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}&nbsp;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspelse&nbsp;if&nbsp;(m&nbsp;==&nbsp;0)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreturn&nbsp;n;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}<br>
<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;creating&nbsp;a&nbsp;matrix&nbsp;of&nbsp;m+1&nbsp;rows&nbsp;and&nbsp;n+1&nbsp;columns<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspint&nbsp;**matrix&nbsp;=&nbsp;create_matrix(m&nbsp;+&nbsp;1,&nbsp;n&nbsp;+&nbsp;1);<br>
<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;initialising&nbsp;the&nbsp;first&nbsp;row&nbsp;of&nbsp;the&nbsp;matrix<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfor(unsigned&nbsp;int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;=&nbsp;n;&nbsp;++i)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspmatrix[0][i]&nbsp;=&nbsp;i;&nbsp;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}<br>
<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;initialising&nbsp;the&nbsp;first&nbsp;column&nbsp;of&nbsp;the&nbsp;matrix<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfor(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;=&nbsp;m;&nbsp;++i)&nbsp;{<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspmatrix[i][0]&nbsp;=&nbsp;i;&nbsp;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}<br>
<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp//&nbsp;complementary&nbsp;variables&nbsp;for&nbsp;computing&nbsp;the&nbsp;&quot;Levenshtein&nbsp;distance&quot;<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspunsigned&nbsp;int&nbsp;above_cell,&nbsp;left_cell,&nbsp;diagonal_cell,&nbsp;cost;}&lt;/style&gt;&lt;/BODY&gt;&lt;/HTML&gt;<br>
<br>

</tt>
