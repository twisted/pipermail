From washort@twistedmatrix.com  Mon May  5 02:57:24 2003
From: washort@twistedmatrix.com (Allen Short)
Date: Sun, 04 May 2003 20:57:24 -0500 (CDT)
Subject: [Divunal-author] half-burnt crumbs from the toaster of creatvity
Message-ID: <20030504.205724.982915019.washort@twistedmatrix.com>

----Security_Multipart(Sun_May__4_20:57:24_2003_484)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit


After last night's session on Divunal development, i've been thinking
about what sort of environments we want out players' adventures to
occur in. Realizing we wanted a wide range of possibilities, i started
to make lists. So, here are some possibilities; hopefully this will
spark someone's imagination:

Terrain/Climate
----

Desert: salt flats, sand/rock, arctic
Tropical/jungle
Coast: salt marsh, beach, cliffs/rocky
Mountaintops
Underwater
Tundra/permafrost
Valley/rivers
Space: planetary orbits, asteroids

Constructs
----
Office buildings
Residential: homes, apartments, hotels
Libraries (of course!)
Food storage/markets/restaurants
Communications facilities, radio towers
Research labs (think Black Mesa)
Military installations
Spacecraft: colony ships, warships, orbiters
Sailing/steam ships
Clocktowers
Cathedrals/temples/stadiums 
Zeppelin docks
Factories, warehouses
Power stations: hydroelectric, coal/oil/gas, nuclear, geothermal,
                satellite


And then there's the question of the aesthetic sense and tech level of
the world under consideration; does it use the internal combustion
engine, does it have electricity? does it tend more towards columns
and balconies and scrollwork, or does it look like something out of
the Gernsback Continuum, or maybe it's all ziggurats? 

Anyway. Establishing a basic "feel" for a place should help with the
zero-story aspects of the game; without atmosphere, there's very
little traction for the imagination and it may well degenerate into
Nethack with less randomness. 

So, other open questions: answering these up front is probably not
essential, but will be something players bump up against in one way or
another eventually --

- How many worlds are there?
- Are there reasons to hang out in other worlds than the library when
  not actively treasure-hunting?
- If I take my loot out the front door of the library and drop
  it... what happens?
- How do warpgates get opened to new worlds? 
- Who set up the warpgates and why?
- Do we ever get to meet them?
- Are there legitimate (i.e. non-griefer) reasons for players to be on
  opposite "sides" of an issue? Obviously players will compete for
resources and territory; I suppose a better questions is "what
incentives do players have to work together?".

Final crazy idea: When players die, their container holding their
Stuff gets teleported back to their rooms. What if we made it so that
the teleporting-bit was just a smooth box with no straps or anything,
and you had to buy a carrying case for it if you wanted to wear it on
your back? otherwise, you'd have to carry it and couldn't hold much
else. And of course, when you die, your backpack will stay put...

Anyway. Hope this helps get things started.

Allen

----Security_Multipart(Sun_May__4_20:57:24_2003_484)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQA+tcUNEd6n5DRBYM4RAlalAKCJFJPXUx752+6RPe5cULRm+2zYJgCfWpJ0
wC/OeavQeBnCZzbsC7Vv8qs=
=DCwV
-----END PGP SIGNATURE-----

----Security_Multipart(Sun_May__4_20:57:24_2003_484)----


From washort@twistedmatrix.com  Mon May  5 03:45:25 2003
From: washort@twistedmatrix.com (Allen Short)
Date: Sun, 04 May 2003 21:45:25 -0500 (CDT)
Subject: [Divunal-author] stir-fry of leftover dreams
Message-ID: <20030504.214525.572669731.washort@twistedmatrix.com>

----Security_Multipart(Sun_May__4_21:45:25_2003_610)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit


We've discussed contents for the tutorial before, here's the bits i
remember from it:

picking locks
traversing warpgates
dealing with bulk/weight constraints (a wall you cant climb while
holding something heavy, a gap you cant squeeze through holding
something bulky)
manipulating standard machinery (buttons, levers, knobs)


And then some ideas for what happens after entering the library for
the first time. A few months back, glyph and i talked about this: my
feverishly scribbled notes indicated something like registering for an
apartment, which you would access via elevator and the barcode on your
hand. We had discussed having one wall contain an empty picture frame
with a black button beneath it; pressing it would cause a face to
extrude from the wall, which would then tell the player what to do. We
considered the possibility of the Face speaking in rhyme or meter or
alliteration, or something equally peculiar. The goals we discussed
involved locating and destroying (or sacrificing to the Face) fuel
sources; the idea being that the Face is an agent of entropy and
doesn't like seeing that much energy density. For this, the player is
rewarded in some fashion, and it will be consistent but
low-paying. IIRC, we talked about the Face ultimately making larger
and larger demands, the aim being to make players realize that
listening to it is probably a bad idea. Oh, and sticking other things
with buttons to the wall later may have interesting effects on the
wall and on the Face.


----Security_Multipart(Sun_May__4_21:45:25_2003_610)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQA+tdBHEd6n5DRBYM4RAjs/AJ0efLeP7yW5QrLF83fTA+zVKGpqawCcDPAe
Fk1q6pLQ5e+dY0JQiGtAzQM=
=itEp
-----END PGP SIGNATURE-----

----Security_Multipart(Sun_May__4_21:45:25_2003_610)----


From radix@twistedmatrix.com  Mon May  5 05:05:05 2003
From: radix@twistedmatrix.com (Christopher Armstrong)
Date: Mon, 5 May 2003 00:05:05 -0400
Subject: [Divunal-author] Tentative list of features for initial TR+Divunal release
Message-ID: <20030505040505.GI590@toshi.anaprd01.md.comcast.net>

The plan so far is to have an initial release of TR that includes
a part of what will be the Divunal tutorial as a demo. There's a
basic set of objects that we need for this to happen:

 * Doors with locks
 * Keys
 * Batteries
 * Stuff to put the batteries in [1]
 * Backpacks
 * Adapters for player statistics
   * Charge [1]
   * Health
   * Score

[1]: The Charge adapter will also presumably implement the interface
     for things that can be powered by batteries, although the 
     "socket/plug" will probably be a separate interface.
     Also, elaboration on "stuff to put the batteries in" is required.
     An electronic lock?

That's for the objects.

Commands:
 * inventory
 * score --> 
   'You look at your wrist. It reads: "%d %d %d"' % (charge, health, score)
   :-)

We also need to have an authenticator and a login prompt for the
telnet interface.

And don't forget about persistence and  maps, of course. Dash has volunteered
to be responsible for those things.

Remember that this is just for the demo, so I think we should keep it simple
so we can get a release aout ASAP.

Oh, and hopefully I'll be getting together with exarkun to do some pairing
on this sometime soon. I'm going down to South Carolina for a short
"vacation" from Wednesday->Sunday. I'm going to have some free time on the
weekend, so maybe I'll do some Divu-hacking on the beach. ;-D When I get
back, I plan on getting together with exarkun.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/


From radix@twistedmatrix.com  Tue May  6 05:58:28 2003
From: radix@twistedmatrix.com (Christopher Armstrong)
Date: Tue, 6 May 2003 00:58:28 -0400
Subject: [Divunal-author] half-burnt crumbs from the toaster of creatvity
In-Reply-To: <20030504.205724.982915019.washort@twistedmatrix.com>; from washort@twistedmatrix.com on Sun, May 04, 2003 at 21:57:24 -0400
References: <20030504.205724.982915019.washort@twistedmatrix.com>
Message-ID: <20030506045828.GK7754@toshi.anaprd01.md.comcast.net>

On 2003.05.04 21:57, Allen Short wrote:
> Final crazy idea: When players die, their container holding their
> Stuff gets teleported back to their rooms. What if we made it so that
> the teleporting-bit was just a smooth box with no straps or anything,
> and you had to buy a carrying case for it if you wanted to wear it on
> your back? otherwise, you'd have to carry it and couldn't hold much
> else. And of course, when you die, your backpack will stay put...

I think I like this. I prefer at least *some* vague hand-wavy reason
to zap players' inventories back to their room :-), and, of course, 
strange technology is the name of the game.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/


From washort@twistedmatrix.com  Tue May  6 19:35:48 2003
From: washort@twistedmatrix.com (Allen Short)
Date: Tue, 06 May 2003 13:35:48 -0500 (CDT)
Subject: [Divunal-author] tasty paste from toxic waste
Message-ID: <20030506.133548.631714424.washort@twistedmatrix.com>

----Security_Multipart(Tue_May__6_13:35:48_2003_300)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit


So! Today, I started to convert things.py to use the persistence
strategy formerly known as datamatic. Needless to say, I discovered
some interesting problems. Here are the schemata for Thing and
Movable, at the moment:

class Thing(components.Componentized):
    __schema__ = {
        'gender': int,
        '_adapterCache': DictOf(components.MetaInterface, components.Adapter),
        '_links': ListOf(ref('Thing')).
        '_implementorFilters': InterfaceFilter,
        'unique': int,
        'intensityBarrier': int
        }

class Movable(Thing):
    __schema__ = {
        'location':Thing
        }

So, a few things: first, DictOf doesn't exist yet. glyph says he is
working on that. Second, storing classes seems a
little... wrong. Perhaps _adapterCache needs to map interface _names_
to adapters? Also, there's no InterfaceFilter class;
_implementorFilters apparently was designed to accept anything that
implements IInterfaceFilter. I imagine this isn't good enough for
persistence, is it? Finally, how does inheritance interact with
__schema__? I see that MetaStorable takes bases into account, but can
classes be replaced by their subclasses within a schema? For example,
Thing._links is a list of Things; will it work out OK if some of them
are Movables? Oh, and: does it matter if Movable.location is set on
the class? will Storable deal with an unset attribute on the instance?


Looking further ahead, I'm not sure storing room/item descriptions in
a normal schemamatic file is a good idea; if possible, I'd like to
see them loaded from a CVS-friendly format. From what I can see,
descriptions are going to be the most work, after code; diffs and
history for them will probably be important.

As usual, more random game-design questions:

What role will game developers play in divunal? presumably we will not
have 'normal' characters, nor will be have near-absolute control over
our environs ('zero-story' again). I assume some of the 'archetype'
stuff goes here?

At the start of the game, what will motivate players to collect Stuff?
presumably once they have enough, they'll be looking for more stuff to
maintain/complete/explain the things they do have (o/` the more you
have, the more you have to have to take care of the things you have o/`)

What's the deal with libraries? are we operating from Pratchett-like
L-space assumptions? Are libraries/bookshops in gameworlds magic, or
just The Library itself?

Is there any gameplay reason to check out books?

What are the gameplay mechanics of dealing with friendlies? what do
you feed them, what do you get from them, how much of a time
investment are they, etc?

Allen



----Security_Multipart(Tue_May__6_13:35:48_2003_300)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQA+uACJEd6n5DRBYM4RAkggAJ0QzzjN4tRuSjzUpuDd+Q+5Tc0VbQCdFb82
Ekl3rrs1ce2fss9eUUc4OFs=
=pfTg
-----END PGP SIGNATURE-----

----Security_Multipart(Tue_May__6_13:35:48_2003_300)----


From radix@twistedmatrix.com  Wed May  7 01:01:52 2003
From: radix@twistedmatrix.com (Christopher Armstrong)
Date: Tue, 6 May 2003 20:01:52 -0400
Subject: [Divunal-author] tasty paste from toxic waste
In-Reply-To: <20030506.133548.631714424.washort@twistedmatrix.com>; from washort@twistedmatrix.com on Tue, May 06, 2003 at 14:35:48 -0400
References: <20030506.133548.631714424.washort@twistedmatrix.com>
Message-ID: <20030507000152.GW7754@toshi.anaprd01.md.comcast.net>

On 2003.05.06 14:35, Allen Short wrote:

> Is there any gameplay reason to check out books?

Ancient microwave manuals? >:)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/


From glyph@twistedmatrix.com  Wed May  7 22:44:30 2003
From: glyph@twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 May 2003 16:44:30 -0500
Subject: [Divunal-author] tasty paste from toxic waste
In-Reply-To: <20030506.133548.631714424.washort@twistedmatrix.com>
Message-ID: <159BDCA8-80D5-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, May 6, 2003, at 01:35 PM, Allen Short wrote:

> So, a few things: first, DictOf doesn't exist yet. glyph says he is
> working on that.

It's next up on my list for Divmod now.  You should be seeing it 
shortly.

> Second, storing classes seems a little... wrong. Perhaps _adapterCache 
> needs to map interface _names_
> to adapters?

No reason to change this just for a tiny bit of convenience in the 
storage layer - I can store classes just fine.  (In fact, storing 
classes affords certain optimization that just storing strings would 
not.)

> Also, there's no InterfaceFilter class; _implementorFilters apparently 
> was designed to accept anything that implements IInterfaceFilter. I 
> imagine this isn't good enough for persistence, is it?

Twisted World is dynamically typed.  It would be a ListOf(Storable) 
(which is syntax sugar for StorableList, anyway).  This assumes that 
int and str can't implement IInterfaceFilter but I really hope that is 
a safe assumption.

> Finally, how does inheritance interact with __schema__?

Ngh.  Have to check this out.  Basically I guess it should just 
aggregate the __schema__ dict, and blow up if any column declarations 
conflict.

> I see that MetaStorable takes bases into account, but can classes be 
> replaced by their subclasses within a schema? For example, 
> Thing._links is a list of Things; will it work out OK if some of them 
> are Movables?

They can be any kind of Storable.  They could be 
divmod.schemabox.Message instances, for all I care.

> Oh, and: does it matter if Movable.location is set on the class? will 
> Storable deal with an unset attribute on the instance?

Hmm... it will assume the attribute is None... so in this case, yes.  
It will work as you expect.

> Looking further ahead, I'm not sure storing room/item descriptions in 
> a normal schemamatic file is a good idea; if possible, I'd like to see 
> them loaded from a CVS-friendly format.

haaaahahahahaahahahahaahahaha. ha.

If you want that, then the object descriptions should probably be 
stored in the code.  This might not be such a bad idea - we are 
probably going to need to eliminate support for persistently storing 
tuples as description elements anyway, because "list of tuples of 
arbitrary length" is a pretty hairy datatype to specify in datamatic, 
and it's more flexible to be able to adjust the specifics of your text 
output by adjusting a method than by running an update script over a 
database.

This is pretty consistent with the worldview we've got now, I think.

> From what I can see, descriptions are going to be the most work, after 
> code; diffs and history for them will probably be important.

There is a larger issue here of how to version & checkpoint the map.  
I'm not sure where to go with that, really.

> What role will game developers play in divunal? presumably we will not
> have 'normal' characters, nor will be have near-absolute control over
> our environs ('zero-story' again). I assume some of the 'archetype'
> stuff goes here?

We play the game normally.  If you want to do something funky, create a 
stat to do it, create tools to do it, then artificially boost your stat.

However, I'd like to discourage authors from thinking too hard about 
these special characters up front.  They should, largely, be observers 
to the greater universe as the players are, and not an integral part of 
it.  Unless an author has particularly strong role-playing and writing 
skills, they should not have 1-1 parity with an archetype.  (What I 
mean by this is - tenth is a special case.)

> At the start of the game, what will motivate players to collect Stuff? 
>  presumably once they have enough, they'll be looking for more stuff 
> to maintain/complete/explain the things they do have

External direction of some sort.  Possibly, external compulsion.  If 
it's compulsion, then the collecting of Stuff should enable them to 
throw it off.

>  (o/` the more you have, the more you have to have to take care of the 
> things you have o/`)

Where is this song from?

> What's the deal with libraries? are we operating from Pratchett-like 
> L-space assumptions?

Not quite.  L-Space is just silly.  Everything in the Library has a 
reason for working the way that it does, and a great deal of conscious 
effort went into making it that way.  There is a reason that it's an 
archive where they put all this stuff, too.

> Are libraries/bookshops in gameworlds magic, or just The Library 
> itself?

To varying degrees.

The way I'd like to see this develop

> Is there any gameplay reason to check out books?

Yes.  There should even be some quests for which it is a necessity.  
This implies a "learning" system which I am far too tired to design in 
detail now, but the gist of the inspiration I've got is:

	* you need to learn how to do something
	* you APPLY the DEWEY DECIMAL SYSTEM to locate it
	* you READ the BOOK which you have recovered
	* you perform the action on a small scale (pick a padlock)
	* you READ the BOOK again
	* you perform the action on a slightly larger scale (crack a safe)
	* you RETURN the BOOK before it is OVERDUE
	* you continue performing this action repeatedly until such time as 
you fall out of practice (failing to do it for some period of time)

Also, overdue books are unhealthy for you: 
http://www.achewood.com/index.php?date=03062002

> What are the gameplay mechanics of dealing with friendlies?

YES

> what do you feed them,

food

> what do you get from them,

stuff

> how much of a time investment are they,

some

>  etc?

The questions you're asking here should be answered by a giant database 
full of different answers to them in various combinations.  The 
questions are much more important than their answers, since they define 
what the fields will be in the database :-).

The MMP game development book has a chapter by Sean Riley on his "data 
manager" design pattern.  It's relevant here - I believe his code 
examples are in python.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+uX5DvVGR4uSOE2wRApENAJwMZ6aoxB+yBPp80I/0qCDlrKA94gCfapTF
zHxqY7C4cEt+molvPw+8Ahk=
=odmu
-----END PGP SIGNATURE-----



From washort@twistedmatrix.com  Thu May  8 09:23:28 2003
From: washort@twistedmatrix.com (Allen Short)
Date: Thu, 08 May 2003 03:23:28 -0500 (CDT)
Subject: [Divunal-author] tasty paste from toxic waste
In-Reply-To: <159BDCA8-80D5-11D7-912C-000393C9700E@twistedmatrix.com>
References: <20030506.133548.631714424.washort@twistedmatrix.com>
 <159BDCA8-80D5-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <20030508.032328.99024023.washort@twistedmatrix.com>

----Security_Multipart(Thu_May__8_03:23:28_2003_861)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

>>>>> "Glyph" == Glyph Lefkowitz <glyph@twistedmatrix.com> writes:
    > On Tuesday, May 6, 2003, at 01:35 PM, Allen Short wrote:

    >> Also, there's no InterfaceFilter class; _implementorFilters
    >> apparently was designed to accept anything that implements
    >> IInterfaceFilter. I imagine this isn't good enough for
    >> persistence, is it?

    > Twisted World is dynamically typed.  It would be a
    > ListOf(Storable) (which is syntax sugar for StorableList,
    > anyway).  This assumes that int and str can't implement
    > IInterfaceFilter but I really hope that is a safe assumption.

Me too. 

    >> Finally, how does inheritance interact with __schema__?

    > Ngh.  Have to check this out.  Basically I guess it should just
    > aggregate the __schema__ dict, and blow up if any column
    > declarations conflict.

    >> I see that MetaStorable takes bases into account, but can
    >> classes be replaced by their subclasses within a schema? For
    >> example, Thing._links is a list of Things; will it work out OK
    >> if some of them are Movables?

    > They can be any kind of Storable.  They could be
    > divmod.schemabox.Message instances, for all I care.

It wasn't made clear to me that the type specified in the
schema beyond "Storable" was not too important, thanks for clearing
that up.

    >> Oh, and: does it matter if Movable.location is set on the
    >> class? will Storable deal with an unset attribute on the
    >> instance?

    > Hmm... it will assume the attribute is None... so in this case,
    > yes.  It will work as you expect.

Okay, good. :)

    >> Looking further ahead, I'm not sure storing room/item
    >> descriptions in a normal schemamatic file is a good idea; if
    >> possible, I'd like to see them loaded from a CVS-friendly
    >> format.

    > haaaahahahahaahahahahaahahaha. ha.

Yeah, i was afraid you'd say that.

    > If you want that, then the object descriptions should probably
    > be stored in the code.  This might not be such a bad idea - we
    > are probably going to need to eliminate support for persistently
    > storing tuples as description elements anyway, because "list of
    > tuples of arbitrary length" is a pretty hairy datatype to
    > specify in datamatic, and it's more flexible to be able to
    > adjust the specifics of your text output by adjusting a method
    > than by running an update script over a database.

nnngh, this feels like a poor separation of concerns :) but it's the
approach i'm taking for now, just because i know it can be made to
work. 

    > This is pretty consistent with the worldview we've got now, I
    > think.

    >> From what I can see, descriptions are going to be the most
    >> work, after code; diffs and history for them will probably be
    >> important.

    > There is a larger issue here of how to version & checkpoint the
    > map.  I'm not sure where to go with that, really.

well at the very least, we can backup the entire dataset. versioning
within the database itself seems cool at some level but i am having
extreme difficulties thinking about low-level issues at the moment so
i wont. :)

    >> What role will game developers play in divunal? presumably we
    >> will not have 'normal' characters, nor will be have
    >> near-absolute control over our environs ('zero-story' again). I
    >> assume some of the 'archetype' stuff goes here?

    > We play the game normally.  If you want to do something funky,
    > create a stat to do it, create tools to do it, then artificially
    > boost your stat.

    > However, I'd like to discourage authors from thinking too hard
    > about these special characters up front.  They should, largely,
    > be observers to the greater universe as the players are, and not
    > an integral part of it.  Unless an author has particularly
    > strong role-playing and writing skills, they should not have 1-1
    > parity with an archetype.  (What I mean by this is - tenth is a
    > special case.)

Indeed, Tenth is a special case. :) From div-vision it wasn't clear
that the archetypes weren't all intended to be specificially
represented all the time.

    >> At the start of the game, what will motivate players to collect
    >> Stuff?  presumably once they have enough, they'll be looking
    >> for more stuff to maintain/complete/explain the things they do
    >> have

    > External direction of some sort.  Possibly, external compulsion.
    > If it's compulsion, then the collecting of Stuff should enable
    > them to throw it off.

yay!

    >> (o/` the more you have, the more you have to have to take care
    >> of the things you have o/`)

    > Where is this song from?

Not sure where it's originally from, it's been in the attic of my mind
for years from a children's radio program.

    >> What's the deal with libraries? are we operating from
    >> Pratchett-like L-space assumptions?

    > Not quite.  L-Space is just silly.  Everything in the Library
    > has a reason for working the way that it does, and a great deal
    > of conscious effort went into making it that way.  There is a
    > reason that it's an archive where they put all this stuff, too.

Well, yes, it's silly, but it's the nearest sort of explanation i
could come up with. :) 


    >> What are the gameplay mechanics of dealing with friendlies?

    > YES

    >> etc?

    > The questions you're asking here should be answered by a giant
    > database full of different answers to them in various
    > combinations.  The questions are much more important than their
    > answers, since they define what the fields will be in the
    > database :-).

Oh indeed, which is why i asked them. I have felt certain that you
crazy game-writing people have done enough of that sort of thing befor
e to make it a commonplace, but i'm not used to, shall we say, "data
driven" software on that scale.



So, after reading Graham Nelson's advice for IF authors on
descriptions, i've been trying my hand at a few, and wishing TR
supported my efforts better. In specific, i wish two things were done
differently: 1) not defaulting to listing exits by name and direction
(I want to do this in the description) 2) Not listing all objects in
the inventory list (some also need to be in the description). In olden
days, this was done by adding extra items to the description dict, but
in these modern times it appears only __main__ is displayed unless
something akss for another key. Any thoughts on strategies for making
descriptions of this sort easier?


Allen

----Security_Multipart(Thu_May__8_03:23:28_2003_861)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQA+uhQDEd6n5DRBYM4RAr0EAJ48lgY58ELj+qFbv/s7sS+b5CUUTQCdGQKl
5oKuR99DYDjqfMY6wS87hYc=
=OytH
-----END PGP SIGNATURE-----

----Security_Multipart(Thu_May__8_03:23:28_2003_861)----


From glyph@twistedmatrix.com  Thu May  8 14:13:33 2003
From: glyph@twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 May 2003 08:13:33 -0500
Subject: [Divunal-author] tasty paste from toxic waste
Message-ID: <1785BF12-8157-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday, May 8, 2003, at 03:23 AM, Allen Short wrote:

>>>>>> "Glyph" == Glyph Lefkowitz <glyph@twistedmatrix.com> writes:
>> On Tuesday, May 6, 2003, at 01:35 PM, Allen Short wrote:

>>> Looking further ahead, I'm not sure storing room/item
>>> descriptions in a normal schemamatic file is a good idea; if
>>> possible, I'd like to see them loaded from a CVS-friendly
>>> format.
>
>> haaaahahahahaahahahahaahahaha. ha.
>
> Yeah, i was afraid you'd say that.

"CVS-friendly" and "scalable" are almost directly at odds.

>> If you want that, then the object descriptions should probably
>> be stored in the code.
>
> nnngh, this feels like a poor separation of concerns :) but it's the
> approach i'm taking for now, just because i know it can be made to
> work.

It makes sense to me - the formatting component can be a different 
component, if you _really_ want your concerns separated, but we do have 
the notion of objects knowing how to describe themselves dynamically 
rather than being given static descriptions.

This does place more of a burden on the programmer, but hopefully once 
we've got our writing hats on we can go through and clean up a lot of 
the descriptive text.

The database's concern is storing _relationships between objects_, not 
the text that describes them.

>> There is a larger issue here of how to version & checkpoint the
>> map.  I'm not sure where to go with that, really.
>
> well at the very least, we can backup the entire dataset. versioning
> within the database itself seems cool at some level but i am having
> extreme difficulties thinking about low-level issues at the moment so
> i wont. :)

Hooray, we're back to Pickle.

> Indeed, Tenth is a special case. :) From div-vision it wasn't clear
> that the archetypes weren't all intended to be specificially
> represented all the time.

I didn't spell it all out, but the general idea is: "In this iteration, 
I'd like the archetypes to be separate from their specific instances; 
we should be able to have multiple author characters playing into a 
particular archetype."

>>> etc?
>
>> The questions you're asking here should be answered by a giant
>> database full of different answers to them in various
>> combinations.  The questions are much more important than their
>> answers, since they define what the fields will be in the
>> database :-).
>
> Oh indeed, which is why i asked them. I have felt certain that you
> crazy game-writing people have done enough of that sort of thing befor
> e to make it a commonplace, but i'm not used to, shall we say, "data
> driven" software on that scale.

Yeah, pretty much.  It's too bad Sean isn't working on this.

> So, after reading Graham Nelson's advice for IF authors on 
> descriptions, i've been trying my hand at a few, and wishing TR 
> supported my efforts better.

We should probably discuss his advice here.  Some of the things he 
suggests are peculiar to a linear, directed plot (which we don't have) 
and some are specific to a very slow-paced single-player experience.  
While we should be pushing online gaming closer to those goals, we do 
have to make some concessions to the fact that the game is real-time 
and open-ended.

Examining each point he makes for its context with respect to these 
ideas might yield some new and interesting conventions we could follow.

> In specific, i wish two things were done differently:

> 1) not defaulting to listing exits by name and direction (I want to do 
> this in the description)

I don't have an answer here yet, but I'm thinking that this is a 
questionable UI decision.  Having them listed twice might make sense 
(though in the telnet interface there should be a visual distinction 
between "textual description" and "spatial layout information").  
Players are going to have the ability to add additional exits to almost 
any room, and someone moving through the map quickly could easily miss 
the existence of an exit.

Of course, I have no problem with rewarding attentiveness, but I would 
rather make only things that would be non-obvious to a casual observer 
in a real environment be non-obvious to a player who is only skimming 
descriptions.

> 2) Not listing all objects in the inventory list (some also need to be 
> in the description).

The inventory list should list all _portable_ items, methinks.

> In olden days, this was done by adding extra items to the description 
> dict, but in these modern times it appears only __main__ is displayed 
> unless something akss for another key. Any thoughts on strategies for 
> making descriptions of this sort easier?

Mmm... only __main__ being displayed is a bug.  I'll have to look at 
that at some point.  The description code is obviously only a prototype 
at this point.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ulhgvVGR4uSOE2wRAu7BAJ9Qufxkm6YSk+dt/2zIk2uBNeIj4wCeIf94
aW742NZABwxHP38bO/+klOg=
=+vwC
-----END PGP SIGNATURE-----



From washort@twistedmatrix.com  Thu May  8 17:02:56 2003
From: washort@twistedmatrix.com (Allen Short)
Date: Thu, 08 May 2003 11:02:56 -0500 (CDT)
Subject: [Divunal-author] tasty paste from toxic waste
In-Reply-To: <1785BF12-8157-11D7-912C-000393C9700E@twistedmatrix.com>
References: <1785BF12-8157-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <20030508.110256.715645747.washort@twistedmatrix.com>

----Security_Multipart(Thu_May__8_11:02:56_2003_411)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

>>>>> "Glyph" == Glyph Lefkowitz <glyph@twistedmatrix.com> writes:

    > It makes sense to me - the formatting component can be a
    > different component, if you _really_ want your concerns
    > separated, but we do have the notion of objects knowing how to
    > describe themselves dynamically rather than being given static
    > descriptions.

This brings up the question of formatting descriptions beyond raw
strings. I've occasionally had the idea that descriptions should be
Woven templates but i'm not sure how great of a concept that is.

    > This does place more of a burden on the programmer, but
    > hopefully once we've got our writing hats on we can go through
    > and clean up a lot of the descriptive text.

I suppose i'm still thinking of a division between
"description-writing person" and "code-writing person", but for us
that's going to be a pretty minimal problem, true.

    > We should probably discuss his advice here.  Some of the things
    > he suggests are peculiar to a linear, directed plot (which we
    > don't have) and some are specific to a very slow-paced
    > single-player experience.  While we should be pushing online
    > gaming closer to those goals, we do have to make some
    > concessions to the fact that the game is real-time and
    > open-ended.

    > Examining each point he makes for its context with respect to
    > these ideas might yield some new and interesting conventions we
    > could follow.

Specifically, i was reading
http://www.inform-fiction.org/manual/html/s51.html -- the advice given
there seems pretty universal. 

    >> In specific, i wish two things were done differently:

    >> 1) not defaulting to listing exits by name and direction (I
    >> want to do this in the description)

    > I don't have an answer here yet, but I'm thinking that this is a
    > questionable UI decision.  Having them listed twice might make
    > sense (though in the telnet interface there should be a visual
    > distinction between "textual description" and "spatial layout
    > information").  Players are going to have the ability to add
    > additional exits to almost any room, and someone moving through
    > the map quickly could easily miss the existence of an exit.

True, though arguably adding those new exits to the description should
be enough.

    > Of course, I have no problem with rewarding attentiveness, but I
    > would rather make only things that would be non-obvious to a
    > casual observer in a real environment be non-obvious to a player
    > who is only skimming descriptions.

Hmm. I hadn't thought of that, but it's a good sort of proportionality
to aim for.

    > The inventory list should list all _portable_ items, methinks.

Probably.

I'm mainly thinking of these issues as a reaction against the horribly
flat descriptions prevalent in most MUDs. 

"You are standing on a road winding through the desert. 
Exits: north south east west 
Contents: There is a rock here. There is a gnoll here. There is a
spatula here."

Perhaps there's a compromise that can be struck between literary room
descriptions and utilitarian ones. I expect practice will yield the
best results.

----Security_Multipart(Thu_May__8_11:02:56_2003_411)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQA+un+0Ed6n5DRBYM4RAuW2AJ46ltAH3NwwXrDQ544rX7vdkP44ewCfciOm
0fD1DPgww6Ta3uSrcVHfPDE=
=4oZa
-----END PGP SIGNATURE-----

----Security_Multipart(Thu_May__8_11:02:56_2003_411)----


From radix@twistedmatrix.com  Fri May  9 15:54:46 2003
From: radix@twistedmatrix.com (Christopher Armstrong)
Date: Fri, 9 May 2003 10:54:46 -0400
Subject: [Divunal-author] Tentative list of features for initial TR+Divunal release
In-Reply-To: <20030505040505.GI590@toshi.anaprd01.md.comcast.net>; from radix@twistedmatrix.com on Mon, May 05, 2003 at 00:05:05 -0400
References: <20030505040505.GI590@toshi.anaprd01.md.comcast.net>
Message-ID: <20030509145446.GE557@toshi.TRC.SCRA.ORG>

On 2003.05.05 00:05, Christopher Armstrong wrote:
...
>  * Batteries
>  * Stuff to put the batteries in [1]
...
>  * Adapters for player statistics
>    * Charge [1]
>    * Health
>    * Score

...
>  * score --> 
>    'You look at your wrist. It reads: "%d %d %d"' % (charge, health, score)
>    :-)

> Oh, and hopefully I'll be getting together with exarkun to do some pairing
> on this sometime soon. I'm going down to South Carolina for a short
> "vacation" from Wednesday->Sunday. I'm going to have some free time on the
> weekend, so maybe I'll do some Divu-hacking on the beach. ;-D When I get
> back, I plan on getting together with exarkun.

TODO List for myself this weekend (I'll be unInternetted, afaik)

 * Player status adapters (Zap (which will be an IChargeProducer...?), 
                           Win, Hit ;-)
 * `score' command
 * Batteries and Battery-sockets
 * Whatever cool game objects I can think of

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/


From radix@twistedmatrix.com  Mon May 12 03:56:27 2003
From: radix@twistedmatrix.com (Christopher Armstrong)
Date: Sun, 11 May 2003 22:56:27 -0400
Subject: [Divunal-author] Charge interfaces
In-Reply-To: <20030512025236.GA755@toshi.anaprd01.md.comcast.net>; from radix@twistedmatrix.com on Sun, May 11, 2003 at 22:52:36 -0400
References: <20030512025236.GA755@toshi.anaprd01.md.comcast.net>
Message-ID: <20030512025627.GC998@toshi.anaprd01.md.comcast.net>

So I'm getting through the implementation of charge and whatnot,
and have run into a problem I can't figure out how to solve.

So far I have a new Interface for every kind of socket and plug
(or anything that can be connected, really). The general pattern
is IBattery, IBatterySink, IBatteryCharger, IBatteryChargerSink,
etc (Battery implements IBattery and IBatteryChargerSink). The
problem I'm having is with implementing the `connect' command:

  connect battery to walkman

I've implemented a couple of utility Interfaces that aren't
directly used, IChargeSource and IChargeSink; the interfaces
listed above subclass them, but obviously that doesn't have
any meaning, it's just so I don't have to keep typing the same
method names. However, I really wish I could say something like

   def doAction(self):
       try:
           IChargeSource(self.tool).sinkTo(IChargeSink(self.target))
       except Incompatible:
           ....

This doesn't actually work, of course. And the idea completely breaks
when there are two kinds of IChargeSource on an object. :-(

The only alternative I have come up with is rather lame: There will
only be IChargeSource and IChargeSink interfaces, and they'll both
define a `getShape' method (or maybe getSinkShape and getSourceShape,
because some objects will probably want to implement both source and
sink in the same class). Each implementation of these interfaces will
check to make sure that the opposite is a compatible shape, which
could just be a string. I actually partially implemented this, but it
smelled bad so I threw it out. But now that I've run into the problem
with the `connect' action, it seems to be the only way to do it.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/


From radix@twistedmatrix.com  Mon May 12 03:55:50 2003
From: radix@twistedmatrix.com (Christopher Armstrong)
Date: Sun, 11 May 2003 22:55:50 -0400
Subject: [Divunal-author] Charge interfaces
In-Reply-To: <20030512025236.GA755@toshi.anaprd01.md.comcast.net>; from radix@twistedmatrix.com on Sun, May 11, 2003 at 22:52:36 -0400
References: <20030512025236.GA755@toshi.anaprd01.md.comcast.net>
Message-ID: <20030512025550.GA998@toshi.anaprd01.md.comcast.net>

So I'm getting through the implementation of charge and whatnot,
and have run into a problem I can't figure out how to solve.

So far I have a new Interface for every kind of socket and plug
(or anything that can be connected, really). The general pattern
is IBattery, IBatterySink, IBatteryCharger, IBatteryChargerSink,
etc (Battery implements IBattery and IBatteryChargerSink). The
problem I'm having is with implementing the `connect' command:

  connect battery to walkman

I've implemented a couple of utility Interfaces that aren't
directly used, IChargeSource and IChargeSink; the interfaces
listed above subclass them, but obviously that doesn't have
any meaning, it's just so I don't have to keep typing the same
method names. However, I really wish I could say something like

   def doAction(self):
       try:
           IChargeSource(self.tool).sinkTo(IChargeSink(self.target))
       except Incompatible:
           ....

This doesn't actually work, of course. And the idea completely breaks
when there are two kinds of IChargeSource on an object. :-(

The only alternative I have come up with is rather lame: There will
only be IChargeSource and IChargeSink interfaces, and they'll both
define a `getShape' method (or maybe getSinkShape and getSourceShape,
because some objects will probably want to implement both source and
sink in the same class). Each implementation of these interfaces will
check to make sure that the opposite is a compatible shape, which
could just be a string. I actually partially implemented this, but it
smelled bad so I threw it out. But now that I've run into the problem
with the `connect' action, it seems to be the only way to do it.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From washort@twistedmatrix.com  Mon May 12 05:06:43 2003
From: washort@twistedmatrix.com (Allen Short)
Date: Sun, 11 May 2003 23:06:43 -0500 (CDT)
Subject: [Divunal-author] Charge interfaces
In-Reply-To: <20030512025627.GC998@toshi.anaprd01.md.comcast.net>
References: <20030512025236.GA755@toshi.anaprd01.md.comcast.net>
 <20030512025627.GC998@toshi.anaprd01.md.comcast.net>
Message-ID: <20030511.230643.204119135.washort@twistedmatrix.com>

----Security_Multipart(Sun_May_11_23:06:43_2003_975)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

>>>>> "Christopher" == Christopher Armstrong <radix@twistedmatrix.com> writes:

    > The only alternative I have come up with is rather lame: There
    > will only be IChargeSource and IChargeSink interfaces, and
    > they'll both define a `getShape' method (or maybe getSinkShape
    > and getSourceShape, because some objects will probably want to
    > implement both source and sink in the same class). Each
    > implementation of these interfaces will check to make sure that
    > the opposite is a compatible shape, which could just be a
    > string. I actually partially implemented this, but it smelled
    > bad so I threw it out. But now that I've run into the problem
    > with the `connect' action, it seems to be the only way to do it.

Hmm. I didn't smell it, but from here that doesn't sound so bad. That
way you keep your "charge source/sink compatibility" issues neatly
tucked into a couple components and dont have to fight with the
components system to get stuff like multiple sources/sinks working.

----Security_Multipart(Sun_May_11_23:06:43_2003_975)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQA+vx3WEd6n5DRBYM4RAhiSAJ9ke52DDb4F4ccQa4YQlirNr18iwwCfS7c2
f9For2Dpwb6xRvh/AQ3BMgM=
=GC3z
-----END PGP SIGNATURE-----

----Security_Multipart(Sun_May_11_23:06:43_2003_975)----


From radix@twistedmatrix.com  Mon May 12 20:09:33 2003
From: radix@twistedmatrix.com (Christopher Armstrong)
Date: Mon, 12 May 2003 15:09:33 -0400
Subject: [Divunal-author] Charge interfaces
In-Reply-To: <20030511.230643.204119135.washort@twistedmatrix.com>; from washort@twistedmatrix.com on Mon, May 12, 2003 at 00:06:43 -0400
References: <20030512025236.GA755@toshi.anaprd01.md.comcast.net> <20030512025627.GC998@toshi.anaprd01.md.comcast.net> <20030511.230643.204119135.washort@twistedmatrix.com>
Message-ID: <20030512190933.GA15422@toshi.anaprd01.md.comcast.net>

On 2003.05.12 00:06, Allen Short wrote:
> >>>>> "Christopher" == Christopher Armstrong <radix@twistedmatrix.com> writes:
> 
>     > The only alternative I have come up with is rather lame: There
>     > will only be IChargeSource and IChargeSink interfaces, and
>     > they'll both define a `getShape' method (or maybe getSinkShape
>     > and getSourceShape, because some objects will probably want to
>     > implement both source and sink in the same class). Each
>     > implementation of these interfaces will check to make sure that
>     > the opposite is a compatible shape, which could just be a
>     > string. I actually partially implemented this, but it smelled
>     > bad so I threw it out. But now that I've run into the problem
>     > with the `connect' action, it seems to be the only way to do it.
> 
> Hmm. I didn't smell it, but from here that doesn't sound so bad. That
> way you keep your "charge source/sink compatibility" issues neatly
> tucked into a couple components and dont have to fight with the
> components system to get stuff like multiple sources/sinks working.

I implemented it. You only need a single IChargeSource and IChargeSink
per Thing, even if you want multiple conceptual sources and sinks on
a single object: You just need to implement sinkTo and gotSourced in a
way that can handle multiple objects. Also, I put a `supports(sinkTypes)'
method on Source, and a `getShapes' method on Sink. the result of getShapes
gets passed to supports, and the default implementation of supports returns
true if any of the items in self.compatibleSinks are in sinkTypes.

Oh, and rather than returning strings from getShapes, I'm returning classes.
I couldn't live without knowing that the types have an identity :)

Oh, and I also implemented `Touch' and `Zap' actions. `Touch' allows current
to go from your finger to a device, and `Zap' forces 20 charges into the 
device. TODO: Connect(ing a battery to a battery charger, e.g.).

On a related topic, I'd like people to comment on the large docstring I have
at the top of charge.py. It's just some rambling about a request/response
versus a current-based charge system.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/


From radix@twistedmatrix.com  Tue May 13 21:33:00 2003
From: radix@twistedmatrix.com (Christopher Armstrong)
Date: Tue, 13 May 2003 16:33:00 -0400
Subject: [Divunal-author] Charge interfaces
In-Reply-To: <20030513203002.GA16319@toshi.anaprd01.md.comcast.net>; from radix@twistedmatrix.com on Tue, May 13, 2003 at 16:30:02 -0400
References: <20030512025236.GA755@toshi.anaprd01.md.comcast.net> <20030512025627.GC998@toshi.anaprd01.md.comcast.net> <20030511.230643.204119135.washort@twistedmatrix.com> <20030512190933.GA15422@toshi.anaprd01.md.comcast.net> <20030513203002.GA16319@toshi.anaprd01.md.comcast.net>
Message-ID: <20030513203300.GC16319@toshi.anaprd01.md.comcast.net>

On 2003.05.12 15:09, Christopher Armstrong wrote:
> I implemented it. 

I rewrote it to use a current system, rather than one request/response per
second. Along with this, I implemented reality.chronology, which is a 
simulated real-time scheduler. The two important methods in that are
timer.callLater(ticks_INTEGER, f, ...) and timer.time() --> current age
of reality in ticks. I did this so I could minimize the nuances that
would come about from calculating charge over time. (btw, the length of a
tick is a reactor.callLater(1, ...).)

Another benefit of chronology is that it will make down-time transparent.
When you restart the server, there will be no gap in time for any scheduled
events, as long as all reality coders religiously use chronology as opposed
to the `time' module and reactor.callLater.

Anyway, back to charge.
Right now there's a Radio you can touch or zap (and it will play music),
a battery you can touch or zap (and will blow up if you do it enough) and
connect to a battery charger.

Still todo:
 * make the battery charger a capacitor (right now it's only an IChargeSource
   and never runs out of charge).
 * connect battery to radio (nasty bugs with this)
 * unify IConnectTool and IConnectTarget, there's no reason for them to be 
   separate. In fact, it would be nice if I didn't need the IConnect* at all
   and rather looked up ICharge* implementors.
 * make Connecting try to pick up one of the objects involved before doing 
   the connecting.
 * some other stuff

I'll be getting together with exarkun sometime around the end of the week.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From washort@twistedmatrix.com  Sat May 17 09:09:35 2003
From: washort@twistedmatrix.com (Allen Short)
Date: Sat, 17 May 2003 03:09:35 -0500 (CDT)
Subject: [Divunal-author] goals, gears, golems
Message-ID: <20030517.030935.939834922.washort@twistedmatrix.com>

----Security_Multipart(Sat_May_17_03:09:35_2003_103)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit


So from various discussions, it appears that we're going to try to
have about three areas in the initial divunal demo: glyph's subway
area, some library-like stuff probably based on the map i've been
writing, and perhaps an outdoor area. 

I've been reading glyph-discuss archives; the 'cowboy agility' entry
made me realize we need to start talking about automated tests for the
demo. Do we need something for automatically testing things from
"inside" the sim as an actor, as well as the unit tests for TR's code?
In short, how will we know when we're done? :)



----Security_Multipart(Sat_May_17_03:09:35_2003_103)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.2 (GNU/Linux)

iD8DBQA+xe5EEd6n5DRBYM4RAuzpAJ92LYfu5d5p9EeTgT2eSVFts3VI4gCeLvE+
u2WOp80jlZJDlsvOqlch7Tg=
=saUp
-----END PGP SIGNATURE-----

----Security_Multipart(Sat_May_17_03:09:35_2003_103)----


From tenth@twistedmatrix.com  Sun May 18 06:10:10 2003
From: tenth@twistedmatrix.com (Tenth)
Date: Sun, 18 May 2003 00:10:10 -0500 (CDT)
Subject: [Divunal-author] Skrills for Fun and Profit
Message-ID: <Pine.LNX.4.21.0305180001430.18456-100000@pyramid.twistedmatrix.com>

At Glyph's request, I wrote up a "walkthrough" of part of a puzzle
sequence I've been thinking about, viewable in html form here:

   http://www.twistedmatrix.com/users/tenth/skrill.html

This has an example of the "useful tool which is also an inconveniently
autonomous creature" idea I'd mentioned on #divunal, yet another Tenth
style overcomplicated piece of machinery, and some examples of new verb
useage and alternate spins on Read and Put that weren't possible in the
the old Java Divunal/Reality code. (This example does seem to be using the
old school dynamic descriptions, wherein the part of the description that
changes is always at the end, but hey.)

It seemed like this might be an interesting sort of puzzle to implement,
and at least might have some interesting ideas that could be used in the
demo (or later development).

Viva Las Skrillas,

Tenth



