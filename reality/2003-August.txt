From reality@twistedmatrix.com  Fri Aug 22 00:00:45 2003
From: reality@twistedmatrix.com (reality@twistedmatrix.com)
Date: Thu, 21 Aug 2003 16:00:45 -0700
Subject: [Reality] getting started?
Message-ID: <20030821230045.GG20530@taedium.net>

Hi,

I saw a short note about Twisted on the old MOOP (python moo)
mailing list and thought I'd check it out.  I've installed Twisted
(the python2.2-twisted debs for Debian Woody) and cvs co'd NewReality
but now I don't know what to do.  Can anyone point me in the right
direction?

Thanks,
Eric



From reality@twistedmatrix.com  Fri Aug 22 19:52:05 2003
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 22 Aug 2003 13:52:05 -0500
Subject: [Reality] getting started?
In-Reply-To: <20030821230045.GG20530@taedium.net>
Message-ID: <B95CF796-D4D1-11D7-A143-000393C9700E@twistedmatrix.com>

On Thursday, August 21, 2003, at 06:00 PM, eric@taedium.com wrote:

> I saw a short note about Twisted on the old MOOP (python moo)
> mailing list and thought I'd check it out.  I've installed Twisted
> (the python2.2-twisted debs for Debian Woody) and cvs co'd NewReality
> but now I don't know what to do.  Can anyone point me in the right
> direction?

Well, if you want to experiment with NewReality, you're going to need 
to be a little braver than with most MOO code :).  It's not really in a 
self-consistent state yet; we haven't, for example, hooked up any real 
notion of "user authentication" yet.

However, I can recommend the excellent paper by Allen Short (and, 
nominally, myself), "Twisted Reality: A Flexible Framework for Virtual 
Worlds", which was presented at PyCon 2003 in DC this year.  It should 
at least give you a good idea of where we're trying to go.

If you're looking to set up a small playground to test stuff out in, 
'python sandbox/nettest.py' produces a server which listens on 8888 for 
telnet connections.  (Nominally it also listens on 8088 for web 
connections but that code was written against an early prototype of 
woven and no longer works.)



From reality@twistedmatrix.com  Sat Aug 23 03:24:30 2003
From: reality@twistedmatrix.com (Donovan Preston)
Date: Fri, 22 Aug 2003 19:24:30 -0700
Subject: [Reality] getting started?
In-Reply-To: <B95CF796-D4D1-11D7-A143-000393C9700E@twistedmatrix.com>
References: <B95CF796-D4D1-11D7-A143-000393C9700E@twistedmatrix.com>
Message-ID: <ED65B92D-D510-11D7-B76C-000A95864FC4@twistedmatrix.com>

On Friday, August 22, 2003, at 11:52 AM, Glyph Lefkowitz wrote:

> (Nominally it also listens on 8088 for web connections but that code 
> was written against an early prototype of woven and no longer works.)

It works now -- I just committed a fix. It was trivial.

dp



From reality@twistedmatrix.com  Sun Aug 24 21:29:03 2003
From: reality@twistedmatrix.com (Eric Wong)
Date: Sun, 24 Aug 2003 13:29:03 -0700
Subject: [Reality] getting started?
In-Reply-To: <B95CF796-D4D1-11D7-A143-000393C9700E@twistedmatrix.com>
References: <20030821230045.GG20530@taedium.net> <B95CF796-D4D1-11D7-A143-000393C9700E@twistedmatrix.com>
Message-ID: <20030824202903.GB6691@taedium.net>

On Fri, Aug 22, 2003 at 01:52:05PM -0500, Glyph Lefkowitz wrote:
[cut]
> However, I can recommend the excellent paper by Allen Short (and, 
> nominally, myself), "Twisted Reality: A Flexible Framework for Virtual 
> Worlds", which was presented at PyCon 2003 in DC this year.  It should 
> at least give you a good idea of where we're trying to go.
[cut]

Hello again.

Thanks for the pointers!

I've read the paper and started the servers in sandbox/ and I've poked
around the code a little bit and now I'm trying to wrap my head around
the whole interface/adapter way of doing things.  Would it be more-or-less
right to distill TR's philosphy to this one sentence?

    In TR, "things" interact with one another through their "adapters"
    which conform to and implement "interfaces", all of which are objects.

For example, if I wanted to add the ability to speak to players, I'd
first define an interface ("ISpeaker" and "IListener", or if I were using
action.TargetAction, "ISayActor", "ISayTarget" and "ISayPlace") write
an adapter that implements that interface and register that adapter it
to things.Player or things.Actor.  Then, later on, if I wanted to make
a Bugs Bunny-like Singing Sword, I could just register the same Say
adapter to an ordinary sword (thing with Weapon adapter).

This is probably a common complaint from someone not used to interface/
adapters, but one thing that sort of bothers me is that an objects's
adapters are registered in the adapter, not with the object.  For example
Actor is defined in things.py, but the Damagable interface is registered
to Actor in harm.py.

Eric



From reality@twistedmatrix.com  Sun Aug 24 22:08:16 2003
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: Sun, 24 Aug 2003 17:08:16 -0400
Subject: [Reality] getting started?
In-Reply-To: <20030824202903.GB6691@taedium.net>
References: <20030821230045.GG20530@taedium.net> <B95CF796-D4D1-11D7-A143-000393C9700E@twistedmatrix.com> <20030824202903.GB6691@taedium.net>
Message-ID: <20030824210816.GA488@twistedmatrix.com>

On Sun, Aug 24, 2003 at 01:29:03PM -0700, Eric Wong wrote:
>     In TR, "things" interact with one another through their "adapters"
>     which conform to and implement "interfaces", all of which are objects.

Pretty much, yes. All of the adapter and interface logic is actually a
part of Twisted; Reality is just one of its most demanding use cases.

> For example, if I wanted to add the ability to speak to players, I'd
> first define an interface ("ISpeaker" and "IListener", or if I were using
> action.TargetAction, "ISayActor", "ISayTarget" and "ISayPlace") write
> an adapter that implements that interface and register that adapter it
> to things.Player or things.Actor.  Then, later on, if I wanted to make
> a Bugs Bunny-like Singing Sword, I could just register the same Say
> adapter to an ordinary sword (thing with Weapon adapter).

This sounds right.

> This is probably a common complaint from someone not used to interface/
> adapters, but one thing that sort of bothers me is that an objects's
> adapters are registered in the adapter, not with the object.  For example
> Actor is defined in things.py, but the Damagable interface is registered
> to Actor in harm.py.

This is the _whole point_ of adapters -- separating concerns so you
don't need to modify the original object to add functionality to it.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/


From reality@twistedmatrix.com  Mon Aug 25 20:13:12 2003
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 25 Aug 2003 14:13:12 -0500
Subject: [Reality] getting started?
In-Reply-To: <20030824210816.GA488@twistedmatrix.com>
Message-ID: <2C1B81B2-D730-11D7-B224-000393C9700E@twistedmatrix.com>

On Sunday, August 24, 2003, at 04:08 PM, Christopher Armstrong wrote:

> This is the _whole point_ of adapters -- separating concerns so you 
> don't need to modify the original object to add functionality to it.

It might not be obvious why this is a good idea if you're coming from 
elsewhere :).  The systems we've currently got in the NewReality module 
are pretty thin.  Our goal is to expand them in flexibility (and 
therefore complexity) as much as we possibly can.  Eventually, you 
should be able to create a nylon rope which can be tied in a knot, tied 
to other objects, thrown out the side of a building, climbed up, 
climbed down, attached to a grappling hook and thrown, stretched, 
broken, cut, burned, used as a fuse on an explosive device, bitten 
through, eaten, digested by appropriately engineered animals and later 
excreted as crude oil and/or fissionable uranium.  Each of these 
different actions is a small system which has to be independently coded 
- and remember, we're just talking about rope, there!  The more 
separate that we can keep the systems (for example, the burning system 
should not need to know about climbing, even though the rope can be 
used for both of these), the easier it will be to keep a manageable 
amount of complexity in each module but still get a very flexible end 
result.



From reality@twistedmatrix.com  Thu Aug 28 00:21:08 2003
From: reality@twistedmatrix.com (Jasper Phillips)
Date: Wed, 27 Aug 2003 16:21:08 -0700 (PDT)
Subject: Adaptors, was Re: [Reality] getting started?
In-Reply-To: <2C1B81B2-D730-11D7-B224-000393C9700E@twistedmatrix.com>
References: <2C1B81B2-D730-11D7-B224-000393C9700E@twistedmatrix.com>
Message-ID: <Pine.LNX.4.53.0308271558390.1882@a.shell.peak.org>

On Mon, 25 Aug 2003, Glyph Lefkowitz wrote:

> 
> On Sunday, August 24, 2003, at 04:08 PM, Christopher Armstrong wrote:
> 
> > This is the _whole point_ of adapters -- separating concerns so you 
> > don't need to modify the original object to add functionality to it.
> 
> It might not be obvious why this is a good idea if you're coming from 
> elsewhere :).  The systems we've currently got in the NewReality module 
> are pretty thin.  Our goal is to expand them in flexibility (and 
> therefore complexity) as much as we possibly can.  Eventually, you 
> should be able to create a nylon rope which can be tied in a knot, tied 
> to other objects, thrown out the side of a building, climbed up, 
> climbed down, attached to a grappling hook and thrown, stretched, 
> broken, cut, burned, used as a fuse on an explosive device, bitten 
> through, eaten, digested by appropriately engineered animals and later 
> excreted as crude oil and/or fissionable uranium.  Each of these 
> different actions is a small system which has to be independently coded 
> - and remember, we're just talking about rope, there!  The more 
> separate that we can keep the systems (for example, the burning system 
> should not need to know about climbing, even though the rope can be 
> used for both of these), the easier it will be to keep a manageable 
> amount of complexity in each module but still get a very flexible end 
> result.

<delurk>

This is quite cool, and overall IMHO the right direction to go (similar to
Aspect Programming, and a good use for it).  However, it is also very
ambitious...

Abitious enough that there is still going to be a fair amount of local
complexity (just how does a rope burn?  How do stretching, cutting, and
climbing interact?  Is a knotted rope easier to climb? etc.). This complexity
may mostly be in the form of data fields, but probably some methods as well.

How do you deal with such methods?  Do you place them on what needs them and
call them via reflecteion, or do you extend the adaptors to keep track of
all such complex interactions (if so what about code dealing with
interactions between 2 adaptors)?

Curious,
-Jasper



From reality@twistedmatrix.com  Thu Aug 28 06:16:29 2003
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 28 Aug 2003 00:16:29 -0500
Subject: Adaptors, was Re: [Reality] getting started?
In-Reply-To: <Pine.LNX.4.53.0308271558390.1882@a.shell.peak.org>
Message-ID: <C7C6B09C-D916-11D7-B224-000393C9700E@twistedmatrix.com>

On Wednesday, August 27, 2003, at 06:21 PM, Jasper Phillips wrote:

> How do you deal with such methods?  Do you place them on what needs 
> them and
> call them via reflecteion, or do you extend the adaptors to keep track 
> of
> all such complex interactions (if so what about code dealing with
> interactions between 2 adaptors)?

In theory, extend the adapters.  I'm not sure how far this approach 
will scale, but I think it's safe to say it will scale more than any 
previously attempted approach :).

After all, I don't think it's possible to automate an interaction like 
"how does burning interact with the function of a rope vs. the function 
of a loudspeaker vs. the function of a book?"



From reality@twistedmatrix.com  Thu Aug 28 07:02:38 2003
From: reality@twistedmatrix.com (Jasper Phillips)
Date: Wed, 27 Aug 2003 23:02:38 -0700 (PDT)
Subject: Adaptors, was Re: [Reality] getting started?
In-Reply-To: <C7C6B09C-D916-11D7-B224-000393C9700E@twistedmatrix.com>
References: <C7C6B09C-D916-11D7-B224-000393C9700E@twistedmatrix.com>
Message-ID: <Pine.LNX.4.53.0308272247200.6290@a.shell.peak.org>

On Thu, 28 Aug 2003, Glyph Lefkowitz wrote:

> 
> On Wednesday, August 27, 2003, at 06:21 PM, Jasper Phillips wrote:
> 
> > How do you deal with such methods?  Do you place them on what needs them
> > and call them via reflecteion, or do you extend the adaptors to keep
> > track of all such complex interactions (if so what about code dealing
> > with interactions between 2 adaptors)?
> 
> In theory, extend the adapters.  I'm not sure how far this approach will
> scale, but I think it's safe to say it will scale more than any previously
> attempted approach :).

Heh, fair enough.  I certianly haven't seen a better way to handle such a
hard problem.

This is pure conjecture, but I wonder if some vague sort of "meta" adaptor
arrangement might help.  Something to formalize interaction between adaptors,
e.g. adaptors themselves registering with other adaptors, style rules for
composite adaptors, etc.  This sort of problem feels like a prime source
of complexity, and worth considering.

I have only a fuzzy notion of what this might be like of course.

> After all, I don't think it's possible to automate an interaction like 
> "how does burning interact with the function of a rope vs. the function 
> of a loudspeaker vs. the function of a book?"

Fortunately one probably doesn't need to go so far to have an interesting
environment. ;-)


On a side note, do you consider Twisted Reality to be a pet project, or
part of some long term goal?  I.e is it just for amusement and introspection,
or do you have plans to use it seriously?

-Jasper



From reality@twistedmatrix.com  Thu Aug 28 07:45:21 2003
From: reality@twistedmatrix.com (Eric Wong)
Date: Wed, 27 Aug 2003 23:45:21 -0700
Subject: [Reality] getting started?
In-Reply-To: <2C1B81B2-D730-11D7-B224-000393C9700E@twistedmatrix.com>
References: <20030824210816.GA488@twistedmatrix.com> <2C1B81B2-D730-11D7-B224-000393C9700E@twistedmatrix.com>
Message-ID: <20030828064521.GF29446@taedium.net>

On Mon, Aug 25, 2003 at 02:13:12PM -0500, Glyph Lefkowitz wrote:
> On Sunday, August 24, 2003, at 04:08 PM, Christopher Armstrong wrote:
> 
> >This is the _whole point_ of adapters -- separating concerns so you 
> >don't need to modify the original object to add functionality to it.
> 
> It might not be obvious why this is a good idea if you're coming from 
> elsewhere :).  The systems we've currently got in the NewReality module 
> are pretty thin.  Our goal is to expand them in flexibility (and 
> therefore complexity) as much as we possibly can.
[cut]

Okay, fair enough.  After staring at code for a long time, I think the
light is finally starting to dawn (however dimly =) Now the thing that
sort of bothers me is the way interfaces and adapters are combined in
single modules.  Would it be cleaner and clearer if interfaces were all
defined somewhere (reality/interfaces/* ?) and the adapters somewhere
else?

Should I send in patches?  For example, I subclassed wiring.TextServer
to deal with multiple player logins (to the prosaically named
'MultiPlayerTextServer').  Or is this the sort of system-specific change
that doesn't need to be distributed?

Eric



From reality@twistedmatrix.com  Thu Aug 28 10:26:39 2003
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: Thu, 28 Aug 2003 05:26:39 -0400
Subject: [Reality] getting started?
In-Reply-To: <20030828064521.GF29446@taedium.net>
References: <20030824210816.GA488@twistedmatrix.com> <2C1B81B2-D730-11D7-B224-000393C9700E@twistedmatrix.com> <20030828064521.GF29446@taedium.net>
Message-ID: <20030828092639.GB918@radii>

On Wed, Aug 27, 2003 at 11:45:21PM -0700, Eric Wong wrote:
> Now the thing that sort of bothers me is the way interfaces and
> adapters are combined in single modules.  Would it be cleaner and
> clearer if interfaces were all defined somewhere
> (reality/interfaces/* ?) and the adapters somewhere else?

This is a convention that has been applied of and on in the Twisted
code-base (twisted.internet.interfaces, for example). I'm still not
sure what the best way to do it is.

> Should I send in patches?  For example, I subclassed wiring.TextServer
> to deal with multiple player logins (to the prosaically named
> 'MultiPlayerTextServer').  Or is this the sort of system-specific change
> that doesn't need to be distributed?

Well, for one, this is an extremely generic piece of functionality
(for our target audience -- reality is all about being multiplayer :)
which definitely should be included anyway. For two, Reality will
probably have a good bit of system-specific stuff -- it *will* be just
a "virtual world *engine*", but we learned from Python that a strong
standard library is an *excellent* thing to have.

Anyway, how does your MultiPlayerTextServer do its authentication? 
Does it use the (new) APIs in twisted.cred?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/


From reality@twistedmatrix.com  Thu Aug 28 17:29:55 2003
From: reality@twistedmatrix.com (Eric Wong)
Date: Thu, 28 Aug 2003 09:29:55 -0700
Subject: [Reality] getting started?
In-Reply-To: <20030828092639.GB918@radii>
References: <20030824210816.GA488@twistedmatrix.com> <2C1B81B2-D730-11D7-B224-000393C9700E@twistedmatrix.com> <20030828064521.GF29446@taedium.net> <20030828092639.GB918@radii>
Message-ID: <20030828162955.GG29446@taedium.net>

--pWyiEgJYm5f9v55/
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

On Thu, Aug 28, 2003 at 05:26:39AM -0400, Christopher Armstrong wrote:
> On Wed, Aug 27, 2003 at 11:45:21PM -0700, Eric Wong wrote:
[cut]
> > Should I send in patches?  For example, I subclassed wiring.TextServer
> > to deal with multiple player logins (to the prosaically named
> > 'MultiPlayerTextServer').  Or is this the sort of system-specific change
> > that doesn't need to be distributed?
> 
> Well, for one, this is an extremely generic piece of functionality
> (for our target audience -- reality is all about being multiplayer :)
> which definitely should be included anyway. For two, Reality will
> probably have a good bit of system-specific stuff -- it *will* be just
> a "virtual world *engine*", but we learned from Python that a strong
> standard library is an *excellent* thing to have.
>
> Anyway, how does your MultiPlayerTextServer do its authentication? 
> Does it use the (new) APIs in twisted.cred?

Actually deals with the problem by ignoring it completely.
No authentication is done.  Anyone can log in with any name and more
than one user can have the same name at once (just like Life, eh?)
There's just a stub called loginUser() that anyone can override for
system-specific implementations.  It was mainly to let me log in with
multiple users so I could see how they interact with one another.

It's this way because I'm not sure what (if any) sort of object-
persistance architecture is envisioned for TR.  Some sort of file-based
database (like Cold or LPC, which I currently prefer) or a large
monolithic db (like the venerable LambdaMOO or maybe pickling the
entire world) or a relational-database-backed db (although I don't quite
understand why anyone would want to do this) or what-not-and-not.

Anyhow, my patch is attached.

Eric



--pWyiEgJYm5f9v55/
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename="wiring.py.patch"

Index: wiring.py
===================================================================
RCS file: /cvs/NewReality/reality/wiring.py,v
retrieving revision 1.14
diff -u -r1.14 wiring.py
--- wiring.py	6 Jul 2003 02:01:46 -0000	1.14
+++ wiring.py	28 Aug 2003 16:26:19 -0000
@@ -6,6 +6,7 @@
 from reality.text.common import INoun, IThinker, express, IDescribeable
 from reality.things import EventReceiver, IEventReceiver, IMoveListener, Refusal
 from reality import errors
+from reality import things
 
 import traceback
 
@@ -98,4 +99,47 @@
     def buildProtocol(self, addr):
         p = ServerFactory.buildProtocol(self, addr)
         p.setAvatar(self.person)
+        return p
+
+
+##########################################################
+########################################################## for multi-player
+##########################################################
+
+class MultiPlayerTextServer(TextServer):
+
+    startRoom = None
+
+    def connectMessage(self):
+        return """
+Twisted Reality - MultiPlayerTextServer
+
+name: """
+
+    def telnet_Command(self, cmd):
+        if self.avatar:
+            TextServer.telnet_Command( self, cmd )
+        else:
+            self.loginUser( cmd )
+
+    def loginUser(self, cmd):
+        """This is where the authentication stuff would go.
+           Do the auth, make the user object, set the avatar
+           to that object and move it to the start room or
+           home."""
+        self.setAvatar( things.Actor( cmd ) )
+        self.avatar.moveTo( self.startRoom )
+        self.write(self.commandPrompt())
+
+class MultiPlayerTextFactory(ServerFactory):
+    protocol = MultiPlayerTextServer
+
+    startRoom = None
+
+    def __init__(self, startRoom):
+        self.startRoom = startRoom 
+
+    def buildProtocol(self, addr):
+        p = ServerFactory.buildProtocol(self, addr)
+        p.startRoom = self.startRoom
         return p

--pWyiEgJYm5f9v55/--


From reality@twistedmatrix.com  Thu Aug 28 18:21:22 2003
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 28 Aug 2003 12:21:22 -0500
Subject: [Reality] getting started?
In-Reply-To: <20030828064521.GF29446@taedium.net>
Message-ID: <0BB11314-D97C-11D7-B224-000393C9700E@twistedmatrix.com>

On Thursday, August 28, 2003, at 01:45 AM, Eric Wong wrote:

> Would it be cleaner and clearer if interfaces were all defined 
> somewhere (reality/interfaces/* ?) and the adapters somewhere else?

In a package like twisted.internet where the interfaces are all fairly 
narrow and have a large number of different implementors, this might 
make sense.  However, in NewReality, the interfaces are broad and 
typically only implemented once or twice, not to mention that they're 
tied to a particular domain.

Similarly, sometimes it makes sense to have a module like "data" in a 
package, if there are a few simple types and lots of functions that 
work on them elsewhere.  Usually it isn't such a good idea to separate 
your classes and functions into different modules, though.



