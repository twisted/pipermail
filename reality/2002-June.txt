From reality@twistedmatrix.com  Tue Jun 11 20:48:02 2002
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: 11 Jun 2002 15:48:02 -0400
Subject: [Reality] Command handling?
Message-ID: <87n0u1vbpp.fsf@twistedmatrix.com>

Yo, glyph. exarkun and I are hearing rumours that you have something of
a sentence replacement dreamed up. Can you explain what your ideas are so
far so we can take a look-see?

-- 
                                Chris Armstrong
                         << radix@twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From reality@twistedmatrix.com  Fri Jun 14 07:10:48 2002
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 14 Jun 2002 01:10:48 -0500 (CDT)
Subject: The Future is About Two and a Half Weeks From Now or Maybe a
 Little More than That (Was: Re: [Reality] Command handling?)
In-Reply-To: <87n0u1vbpp.fsf@twistedmatrix.com>
References: <87n0u1vbpp.fsf@twistedmatrix.com>
Message-ID: <20020614.011048.82095220.glyph@twistedmatrix.com>

----Security_Multipart(Fri_Jun_14_01:10:48_2002_454)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

From: Christopher Armstrong <carmstro@twistedmatrix.com>
Subject: [Reality] Command handling?
Date: 11 Jun 2002 15:48:02 -0400

> Yo, glyph. exarkun and I are hearing rumours that you have something of
> a sentence replacement dreamed up. Can you explain what your ideas are so
> far so we can take a look-see?

Well, there's a lot to discuss here.

First and foremost, I am planning to integrate Reality as much as possible with
Beyond 2.0, which is the next iteration of Jason Asbahr's definitive white
paper on the topic of virtual worlds.  I'm really not sure at this point what
all the pieces are going to be called when that's done, which will be "reality"
and which "beyond", but I really don't want TR to be a text-only solution from
bottom to top; it should use virtual world abstractions which are more
universal.  I don't want to rush Jason's design, so there will probably be some
delays in my involvement as we work things out for a much broader category of
games than Reality was originally intended to be used for.  (On the plus side,
there are lots of things in the graphical components of Beyond that Reality
won't need to move forward, initially.)

So, that said, the initial motivation I have to do something to sentence will
be to separate the process of parsing text (determining intent) from the
process of dispatching actions (determining consequences).  Each game will need
to both extend the parser and dispatch new kinds of actions.

The parser is -- obviously -- going to be a text-specific extension.  Games
that want to have a text representation will need to implement this in order
for players to be able to request an action from them.  Dispatch will probably
work based on a "prefix" (not a verb) so you can register the prefix '"', 'say
', 'pick ', 'pickup ', or 'pick up '.  Resolution will work from shortest to
longest matched prefix, and each verb will get to do some fairly ad-hoc
nastiness.

After nearly three years (gods... was it really that long?!) of trying to
perfect a moderately strict, non super-smart NLP system for players to enter
commands to a text-based world, I officially give the hell up.  It can't be
done.  sentence.py was a noble experiment, and it has failed.  I've known this
for a while, but I didn't have a better solution, and I had lots of other
things to work on.

The lesson I have learned is that no matter what you get your parser to do, no
matter how well you document it -- believe it or not, there was a time when
Twisted Reality was a project with really good documentation:

    http://twistedmatrix.com/users/glyph/old/twistedmatrix/www/twistedmatrix.com/reality/ripoff.html

Goddamnit, where'd you go, tenth? ;)

Ahem.  As I was saying.  No matter how well you document it, your users will
type the craziest shit you could possibly imagine, because it seems somewhat
reasonable, and they will be surprised that it doesn't work.  If I had a nickel
for every time I had to explain that "say foo to bar" needed quotes around it
in order for the parser not to catch the preposition... well... I'd have at
least five, maybe six nickels.  But that would be one for just about everybody
that used the system aside from me and tenth!

"The craziest shit that you could possibly imagine" does not just mean
unnecessarily verbose english phrases, either.  It means _everything_.  "get
foo 2" "get second foo" "get foo-2" "pick up the # 2 foo" "bob, shut the fuck
up or I'm calling your parents", etc.  In order to catch a reasonable
percentage of this stuff, you need to monitor your users' input and add ad-hoc
hackery to every verb and have a large library of utility functions, to catch
every case where they might reasonably have said something worthwhile.  You
can't really have a tokenizer, either.  For example, individual ' marks and "
marks are common in unstructured user-input and are expected by various mud
conventions.

Once you're done dealing with whatever mangled garbage the so-called "user" has
deposited at your prompt, you only know what they *want*.  You don't know what
they can do.  The plan for doing things at this point is that the parser will
not make any policy decisions, but emit an "Intention", which will be the sort
of new equivalent of a Sentence.  Unlike Sentence, however, this will be an
instance of a user-defined class; a sentence that begins with "pick", you might
parse to an instance of a PickLock, PickUp, or Choose.  Each of these might be
from an entirely different game system.  Each of these _also_ has its own
dispatch rules -- I don't know if you've noticed this yet, but a set of rules
designed for dispatch of take/drop/look/hit doesn't work so well when you're
trying to deal with verbs like "taste" or "unscrew".

One last thing before I go.  I want to move away from the "everything is a
unique object" mindset that TR had before.  This mindset was itself a rebellion
against MUDs where the rules of the game were completely inviolate,
self-contained, always consistent, and fairly boring.  I wanted to have spice
and flair in the objects in Divunal, so I designed a system that revolved
around uniqueness.

I still like this, in a very abstract philosophical light, but unfortunately it
maps very poorly into the real world.  For example; there tend to be more
players than content creators, by an order of magnitude, in any given virtual
world, so you need to make the rate at which players can devour content
_glacially_ slow.  The best way to do this is to provide an enjoyable,
repeatable experience that they can engage in on a regular basis.  Players
complain if this is *too* repetetive, but they need some form of repetition,
otherwise the game is so constantly unfamiliar and weird that they'd never
develop a sense of accomplishment and want to play it more.  This may all be
obvious to you, but it took a long time in coming to me ;-)

I believe a more realistic solution to the game getting stale is having
boundaries between various "game systems" that are thicker-walled than
elsewhere; providing an abstraction for the overall 'game system' as well as
the relationship of each player to each game system.  So there will be a Game
called Combat and a GamePlayerRole instance associated with all players who can
fight called CombatSkill, which will all point to (probably the same) Combat
instance.  I would likely also have a DiscovererSkill which might include
statistics related to aspects of the game like lockpicking.  In addition to
statistics, it would also include the player's default processing code for the
actions involved in that part of the game.  Ideally these GamePlayerRole *Skill
objects (terrible name, I know, working on a better one) would be able to
implement the Reality.IParserEnhancer interface to provide additional rules for
the parser to match against and the Beyond.IActionSource interfaces to provide
new capabilities to the player.

One of the other outcomes of this is that the games would be well-understood by
the player.  I want this to be interactive fiction in which the player *very
clearly understands* what they can try to do, and the game isn't just
guesswork.  It's an adventure; MANY different kinds of gameplay come into it,
but they're all explained through an interactive help system.  If all the
actions can be listed and the parser extensions are well-understood, it should
be possible to provide the player with examples of everything they can do with
a new item when their character understands how to use it.

I still have a lot more thought to give this, since I'm re-treading ground I
haven't walked on for quite some time, as well as waiting to see how the
critical related components of Beyond turn out.  Any comments on the general
direction?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |

----Security_Multipart(Fri_Jun_14_01:10:48_2002_454)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQA9CYjsvVGR4uSOE2wRAlvQAJ49vRo3PsqY04LruNfHzTU0JJtBUwCghJFp
w/6O2fyPz/rX38heXC/6gXA=
=JKEl
-----END PGP SIGNATURE-----

----Security_Multipart(Fri_Jun_14_01:10:48_2002_454)----


From reality@twistedmatrix.com  Fri Jun 14 17:36:17 2002
From: reality@twistedmatrix.com (Jp Calderone)
Date: Fri, 14 Jun 2002 12:36:17 -0400 (EDT)
Subject: [Reality] Re: T-minus 450 hours and counting (Was: Something a lot longer)
In-Reply-To: <20020614.011048.82095220.glyph@twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0206141011150.11600-100000@meson>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Fri, 14 Jun 2002, Glyph Lefkowitz wrote:

> From: Christopher Armstrong <carmstro@twistedmatrix.com>
> Subject: [Reality] Command handling?
> Date: 11 Jun 2002 15:48:02 -0400
>
> > Yo, glyph. exarkun and I are hearing rumours that you have something
> > of a sentence replacement dreamed up. Can you explain what your ideas
> > are so far so we can take a look-see?
>
> Well, there's a lot to discuss here.
>
> First and foremost, I am planning to integrate Reality as much as
> possible with Beyond 2.0, which is the next iteration of Jason Asbahr's
> definitive white paper on the topic of virtual worlds.  I'm really not
> sure at this point what all the pieces are going to be called when
> that's done, which will be "reality" and which "beyond", but I really
> don't want TR to be a text-only solution from bottom to top; it should
> use virtual world abstractions which are more universal.  I don't want
> to rush Jason's design, so there will probably be some delays in my
> involvement as we work things out for a much broader category of games
> than Reality was originally intended to be used for.  (On the plus side,
> there are lots of things in the graphical components of Beyond that
> Reality won't need to move forward, initially.)

  Yay.  I have long dreamt of a system capable of properly handling
multiple styles of input, but never had either the skill or the drive to
make it happen.  Are the existing Beyond documents available to the
general public, or are seekrut ninja access codes required?

>
> So, that said, the initial motivation I have to do something to sentence
> will be to separate the process of parsing text (determining intent)
> from the process of dispatching actions (determining consequences).
> Each game will need to both extend the parser and dispatch new kinds of
> actions.
>
> [snip : text parsing is fun, documentation is good, users are unclueful]

> Once you're done dealing with whatever mangled garbage the so-called
> "user" has deposited at your prompt, you only know what they *want*.
> You don't know what they can do.  The plan for doing things at this
> point is that the parser will not make any policy decisions, but emit an
> "Intention", which will be the sort of new equivalent of a Sentence.
> Unlike Sentence, however, this will be an instance of a user-defined
> class; a sentence that begins with "pick", you might parse to an
> instance of a PickLock, PickUp, or Choose.  Each of these might be from
> an entirely different game system.  Each of these _also_ has its own
> dispatch rules -- I don't know if you've noticed this yet, but a set of
> rules designed for dispatch of take/drop/look/hit doesn't work so well
> when you're trying to deal with verbs like "taste" or "unscrew".

Oararkgurglegurgle...

So this is basically the "central command registry" or whatever it's
called?  My main concern about this is that it makes it somewhat difficult
to differentiate between commands (Intentions, Abilities, Skills...) that
go by the same name.  Perhaps this is a moot point if the Intentions are
dispatched properly, ie, only to what would currently be the ambient_*,
verb_*, and ability_* methods Reality has.  I have trouble groking this
sort of thing without an implementation to pick up and poke and try to
break :)

>
> One last thing before I go.  I want to move away from the "everything is
> a unique object" mindset that TR had before.  This mindset was itself a
> rebellion against MUDs where the rules of the game were completely
> inviolate, self-contained, always consistent, and fairly boring.  I
> wanted to have spice and flair in the objects in Divunal, so I designed
> a system that revolved around uniqueness.
>
> I still like this, in a very abstract philosophical light, but
> unfortunately it maps very poorly into the real world.  For example;
> there tend to be more players than content creators, by an order of
> magnitude, in any given virtual world, so you need to make the rate at
> which players can devour content _glacially_ slow.  The best way to do
> this is to provide an enjoyable, repeatable experience that they can
> engage in on a regular basis.  Players complain if this is *too*
> repetetive, but they need some form of repetition, otherwise the game is
> so constantly unfamiliar and weird that they'd never develop a sense of
> accomplishment and want to play it more.  This may all be obvious to
> you, but it took a long time in coming to me ;-)

  Hooray.  I'm all for uniqueness, but I'm not God, or even a major diety,
I can't make stuff that fast :)  I have some ideas for an item
construction system to let players partially participate in the creation
process (Nothing unique, I'm sure.  I've been told it's a lot like the EQ
system) and algorithmic generation can be another source of unique, if not
terribly creative, items/locations/creatures, but a template system (which
is already partially available simply via python classes) strikes me as a
must-have.

>
> I believe a more realistic solution to the game getting stale is having
> boundaries between various "game systems" that are thicker-walled than
> elsewhere; providing an abstraction for the overall 'game system' as
> well as the relationship of each player to each game system.  So there
> will be a Game called Combat and a GamePlayerRole instance associated
> with all players who can fight called CombatSkill, which will all point
> to (probably the same) Combat instance.  I would likely also have a
> DiscovererSkill which might include statistics related to aspects of the
> game like lockpicking.  In addition to statistics, it would also include
> the player's default processing code for the actions involved in that
> part of the game.  Ideally these GamePlayerRole *Skill objects (terrible
> name, I know, working on a better one) would be able to implement the
> Reality.IParserEnhancer interface to provide additional rules for the
> parser to match against and the Beyond.IActionSource interfaces to
> provide new capabilities to the player.

  That's going to take some time to digest.  If anything coherent
percolates up, I'll post another reply.

> [snip : a game that makes sense]
>
>
> I still have a lot more thought to give this, since I'm re-treading
> ground I haven't walked on for quite some time, as well as waiting to
> see how the critical related components of Beyond turn out.  Any
> comments on the general direction?

  Comments... Comments... Can't think of anything more interesting than
"sounds good" at the moment.  Please, keep us updated :)

  Jp

- --
"Minerals are inexhaustible and will never be depleted. A stream of
investment creates additions to proved reserves, a very large in-ground
inventory, constantly renewed as it is extracted... How much was in the
ground at the start and how much will be left at the end are unknown and
irrelevant."  -- Morry Adelman, World Renowned Economist
- --
 10:11am up 24 days, 10:53, 5 users, load average: 0.00, 0.00, 0.00
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE9ChuFedcO2BJA+4YRAn91AJ97KKkTLwOg7ddcn+W95AQ5fmYv4wCgtRxo
T1f/MZox3NgWj6FZrv+dQeI=
=SKvO
-----END PGP SIGNATURE-----



From reality@twistedmatrix.com  Fri Jun 14 22:46:43 2002
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 14 Jun 2002 16:46:43 -0500 (CDT)
Subject: [Reality] Re: T-minus 450 hours and counting
In-Reply-To: <Pine.LNX.4.44.0206141011150.11600-100000@meson>
References: <20020614.011048.82095220.glyph@twistedmatrix.com>
 <Pine.LNX.4.44.0206141011150.11600-100000@meson>
Message-ID: <20020614.164643.42462302.glyph@twistedmatrix.com>

----Security_Multipart(Fri_Jun_14_16:46:43_2002_945)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

From: Jp Calderone <exarkun@meson.dyndns.org>
Subject: [Reality] Re: T-minus 450 hours and counting (Was: Something a lot longer)
Date: Fri, 14 Jun 2002 12:36:17 -0400 (EDT)

> On Fri, 14 Jun 2002, Glyph Lefkowitz wrote:
> 
> > First and foremost, I am planning to integrate Reality as much as
> > possible with Beyond 2.0, which is the next iteration of Jason Asbahr's
> > definitive white paper on the topic of virtual worlds.  I'm really not
> > sure at this point what all the pieces are going to be called when
> > that's done, which will be "reality" and which "beyond", but I really
> > don't want TR to be a text-only solution from bottom to top; it should
> > use virtual world abstractions which are more universal.  I don't want
> > to rush Jason's design, so there will probably be some delays in my
> > involvement as we work things out for a much broader category of games
> > than Reality was originally intended to be used for.  (On the plus side,
> > there are lots of things in the graphical components of Beyond that
> > Reality won't need to move forward, initially.)
> 
>   Yay.  I have long dreamt of a system capable of properly handling
> multiple styles of input, but never had either the skill or the drive to
> make it happen.  Are the existing Beyond documents available to the
> general public, or are seekrut ninja access codes required?

There are two documents that you can read at:

    http://www.asbahr.com/papers.html

However, neither of these will match the mind-altering onslaught of the Beyond
2.0 paper, which will unify Jason's experience in the field to date, as well as
document the plans for an open-source platform rather than a closed-source
game.

> > So, that said, the initial motivation I have to do something to sentence
> > will be to separate the process of parsing text (determining intent)
> > from the process of dispatching actions (determining consequences).
> > Each game will need to both extend the parser and dispatch new kinds of
> > actions.

> > [snip : text parsing is fun, documentation is good, users are unclueful]

> > Once you're done dealing with whatever mangled garbage the so-called
> > "user" has deposited at your prompt, you only know what they *want*. [snip]
> 
> Oararkgurglegurgle...
> 
> So this is basically the "central command registry" or whatever it's
> called?  My main concern about this is that it makes it somewhat difficult
> to differentiate between commands (Intentions, Abilities, Skills...) that
> go by the same name.  Perhaps this is a moot point if the Intentions are
> dispatched properly, ie, only to what would currently be the ambient_*,
> verb_*, and ability_* methods Reality has.  I have trouble groking this
> sort of thing without an implementation to pick up and poke and try to
> break :)

In order to respond to a particular action, you're going to have to implement
the interface associated with that action, rather than dispatching simply on
action name.  Hopefully, there will be a rather large unified action repository
that is sufficient for most games.  (For example, I hope for PickUp, PickLock,
and Choose to be in the base Reality distribution).

> > [stuff shouldn't all be unique]

>   Hooray.  I'm all for uniqueness, but I'm not God, or even a major diety,
> I can't make stuff that fast :)  I have some ideas for an item
> construction system to let players partially participate in the creation
> process (Nothing unique, I'm sure.  I've been told it's a lot like the EQ
> system) and algorithmic generation can be another source of unique, if not
> terribly creative, items/locations/creatures, but a template system (which
> is already partially available simply via python classes) strikes me as a
> must-have.

Getting to know some existing systems is a pretty good idea.  Player-generated
content systems generally fall into two categories; decoration and crafting.
Decoration systems allow players to position items in aesthetically different
configurations essentially for free; crafting systems allow players to create
new items from specified formulas.

I hope that dash eventually works out the generalized "chemistry" system that
he described in his last post to the Divunal list one day...

> > [snip : a game that makes sense]
> >
> >
> > I still have a lot more thought to give this, since I'm re-treading
> > ground I haven't walked on for quite some time, as well as waiting to
> > see how the critical related components of Beyond turn out.  Any
> > comments on the general direction?
> 
>   Comments... Comments... Can't think of anything more interesting than
> "sounds good" at the moment.  Please, keep us updated :)

I will.  Thanks for not being too impatient :-).  Speaking of keeping folks
updated, if you guys could use this list to discuss your changes and updates to
Reality that would be great.

> "Minerals are inexhaustible and will never be depleted. A stream of
> investment creates additions to proved reserves, a very large in-ground
> inventory, constantly renewed as it is extracted... How much was in the
> ground at the start and how much will be left at the end are unknown and
> irrelevant."  -- Morry Adelman, World Renowned Economist

This cracked me up :-)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |

----Security_Multipart(Fri_Jun_14_16:46:43_2002_945)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQA9CmRHvVGR4uSOE2wRAiUxAKCh3MJ7RxvDcn6W+Fdd6h2wmZMWngCgqlZW
jUjrKR8MPZWJ05iq1znDS9U=
=a7wC
-----END PGP SIGNATURE-----

----Security_Multipart(Fri_Jun_14_16:46:43_2002_945)----


From reality@twistedmatrix.com  Mon Jun 17 10:51:20 2002
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 17 Jun 2002 04:51:20 -0500 (CDT)
Subject: [Reality] gtk faucet back online?
Message-ID: <20020617.045120.59012161.glyph@twistedmatrix.com>

----Security_Multipart(Mon_Jun_17_04:51:20_2002_808)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit


The faucet should run again; it looked broken.  I just tested against the
TRDemo map.  Was anybody using it to connect?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |

----Security_Multipart(Mon_Jun_17_04:51:20_2002_808)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQA9DbEavVGR4uSOE2wRAlRCAJ49bc1PsdFzyhzC2VVc2bnHQA373QCffeib
V4b4P2AHTTrJkN9POX4MGYI=
=d8AC
-----END PGP SIGNATURE-----

----Security_Multipart(Mon_Jun_17_04:51:20_2002_808)----


From reality@twistedmatrix.com  Mon Jun 17 13:28:23 2002
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: 17 Jun 2002 08:28:23 -0400
Subject: [Reality] gtk faucet back online?
In-Reply-To: <20020617.045120.59012161.glyph@twistedmatrix.com>
References: <20020617.045120.59012161.glyph@twistedmatrix.com>
Message-ID: <87bsaadr88.fsf@twistedmatrix.com>

>>>>> "Glyph" == Glyph Lefkowitz <glyph@twistedmatrix.com> writes:

    Glyph> The faucet should run again; it looked broken.  I just tested
    Glyph> against the TRDemo map.  Was anybody using it to connect?

I don't think so, we've been using telnet for testing. I'll start testing with
gtkfaucet, again ;-)

-- 
                                Chris Armstrong
                         << radix@twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From reality@twistedmatrix.com  Mon Jun 17 15:03:07 2002
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: 17 Jun 2002 10:03:07 -0400
Subject: [Reality] Exits
Message-ID: <87660idmuc.fsf@twistedmatrix.com>

Here's the use case: we need to be able to have a ship (which is made of
multiple rooms) enter a spaceport entirely and make its entrances available to
people in the spaceport. The ship may have multiple entrances: one for the
cockpit and one for the cargo bay, f.e.

Two concepts here:
  1) collection of rooms. We probable need an "Area" class or something.
  2) "entrances". We need areas (or perhaps any object with an 'entrances'
     attribute?) to be able to expose them to their current location.

So here's what dash, exarkun, and I came up with:

  We'll have an Area class. Probably every room will have a reference to the
  area its in. Any exits that are created in a room 'bob' that lead to
  'bob.area' (or perhaps a special constant OUTSIDE, which I think is more
  readable) will send the player to bob.area.location. So, that was the easy
  part: regular exits. Entrances will be similar, but instead of *leading* to
  bob.area (or OUTSIDE), their *source* will be bob.area. This assumes two
  things: that we have first class Exit objects that have both "source" and
  "dest" properties, and that there is a hook bound to creating exits in a room
  that checks whether or not exit.source == room.area. If it is, then add the
  Exit object to areaObj.entrances.

  So that's entrances and exits. Making the entrances available to
  area.location would take nothing more than a hook inserted into the
  "movement" event, to the new location to update its exits list.

OK, so this doesn't seem like a very robust solution after some consideration
(at least that entrances bit, anyway) - f.e., what happens if you change the
source of the Exit object after it's created?

Hrm, then again, we could just make the special Area-checking part of the Exit
class, so that's no worry (i.e., add a set_source method that checks whether
source is an area object, if it is, tell it to update its entrances).

Suggestions welcome.

-- 
                                Chris Armstrong
                         << radix@twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From reality@twistedmatrix.com  Mon Jun 17 16:15:07 2002
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: 17 Jun 2002 11:15:07 -0400
Subject: [Reality] GutenBook
Message-ID: <871yb6djic.fsf@twistedmatrix.com>

Just thought people would think this is cool; I'm going to be implementing a 
GutenBook class for Reality that will be able to process any text in Gutenberg
e-book (plaintext) format. This came about from my desire to put Sun Tsu's
_Art Of War_ in Reality, but I figured I might as well make a general enough
to read any Gutenberg e-text (which have fairly standardized formats).

-- 
                                Chris Armstrong
                         << radix@twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From reality@twistedmatrix.com  Mon Jun 17 16:21:54 2002
From: reality@twistedmatrix.com (Jp Calderone)
Date: Mon, 17 Jun 2002 11:21:54 -0400 (EDT)
Subject: [Reality] GutenBook
In-Reply-To: <871yb6djic.fsf@twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0206171120500.11460-100000@meson>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


  Yay, but when you say "for Reality" you really mean you're going to put
in a generalized "external information retrieval system" and then give it
a GutenBook implementation, right? :)

  Jp

- --
1.79 x 10^24 furlongs per picofortnight - It's not just a good idea,
			It's the law!
- --
 11:20am up 27 days, 12:02, 4 users, load average: 0.00, 0.02, 0.00

On 17 Jun 2002, Christopher Armstrong wrote:

>
> Just thought people would think this is cool; I'm going to be implementing a
> GutenBook class for Reality that will be able to process any text in Gutenberg
> e-book (plaintext) format. This came about from my desire to put Sun Tsu's
> _Art Of War_ in Reality, but I figured I might as well make a general enough
> to read any Gutenberg e-text (which have fairly standardized formats).
>
> --
>                                 Chris Armstrong
>                          << radix@twistedmatrix.com >>
>                 http://twistedmatrix.com/users/carmstro.twistd/
>
>
> _______________________________________________
> Reality mailing list
> Reality@twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/reality
>
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE9Df6WedcO2BJA+4YRAkyYAKDLg3qQN7vpsSizuhLltwiL//+XZwCZAUc7
UV1DLvbOX26XIdNSOb0LtKs=
=ZGuR
-----END PGP SIGNATURE-----



From reality@twistedmatrix.com  Mon Jun 17 17:16:57 2002
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: 17 Jun 2002 12:16:57 -0400
Subject: [Reality] GutenBook
In-Reply-To: <Pine.LNX.4.44.0206171120500.11460-100000@meson>
References: <Pine.LNX.4.44.0206171120500.11460-100000@meson>
Message-ID: <87wusxdgna.fsf@twistedmatrix.com>

>>>>> "Jp" == Jp Calderone <exarkun@meson.dyndns.org> writes:

    Jp>   Yay, but when you say "for Reality" you really mean you're going to
    Jp> put in a generalized "external information retrieval system" and then
    Jp> give it a GutenBook implementation, right? :)


Perhaps. After looking over some books for a while, it seems the standard is
not as clearly-defined as I hoped. :( So the "information retrieval system"
may just be comprised of a regexp shwacking the (super-long) header of the
text and returning the body. I'll show you once I have the implementation :)

    Jp> On 17 Jun 2002, Christopher Armstrong wrote:

    >> Just thought people would think this is cool; I'm going to be
    >> implementing a GutenBook class for Reality that will be able to process
    >> any text in Gutenberg e-book (plaintext) format. This came about from my
    >> desire to put Sun Tsu's _Art Of War_ in Reality, but I figured I might
    >> as well make a general enough to read any Gutenberg e-text (which have
    >> fairly standardized formats).


-- 
                                Chris Armstrong
                         << radix@twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From reality@twistedmatrix.com  Mon Jun 17 17:28:29 2002
From: reality@twistedmatrix.com (Jp Calderone)
Date: Mon, 17 Jun 2002 12:28:29 -0400 (EDT)
Subject: [Reality] Exits
In-Reply-To: <87660idmuc.fsf@twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0206171153290.11460-100000@meson>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1



On 17 Jun 2002, Christopher Armstrong wrote:

>
> Here's the use case: we need to be able to have a ship (which is made of
> multiple rooms) enter a spaceport entirely and make its entrances available to
> people in the spaceport. The ship may have multiple entrances: one for the
> cockpit and one for the cargo bay, f.e.

  Other things that come to mind - temporary or permanant enclosures, such
as a tent Thing that could be carried around and then unpacked, set up,
and entered; ground vehicles; or "scenery" such as an oil drum.

>
> Two concepts here:
>   1) collection of rooms. We probable need an "Area" class or something.
>   2) "entrances". We need areas (or perhaps any object with an 'entrances'
>      attribute?) to be able to expose them to their current location.
>
> So here's what dash, exarkun, and I came up with:
>
>   We'll have an Area class. Probably every room will have a reference to the
>   area its in. Any exits that are created in a room 'bob' that lead to
>   'bob.area' (or perhaps a special constant OUTSIDE, which I think is more
>   readable) will send the player to bob.area.location. So, that was the easy
>   part: regular exits. Entrances will be similar, but instead of *leading* to
>   bob.area (or OUTSIDE), their *source* will be bob.area. This assumes two
>   things: that we have first class Exit objects that have both "source" and
>   "dest" properties, and that there is a hook bound to creating exits in a room
>   that checks whether or not exit.source == room.area. If it is, then add the
>   Exit object to areaObj.entrances.
>
>   So that's entrances and exits. Making the entrances available to
>   area.location would take nothing more than a hook inserted into the
>   "movement" event, to the new location to update its exits list.
>
> OK, so this doesn't seem like a very robust solution after some consideration
> (at least that entrances bit, anyway) - f.e., what happens if you change the
> source of the Exit object after it's created?
>
> Hrm, then again, we could just make the special Area-checking part of the Exit
> class, so that's no worry (i.e., add a set_source method that checks whether
> source is an area object, if it is, tell it to update its entrances).

  Yea, movement hooks would do most of it, then exit can track the rest.
Area should have an interface for adding/removing these exits (as well as
getting a list of them, of course).

  It would be nice if this didn't break the existing exit code.  I guess
these types of exits would only be accessable via a new ability?
Enter/leave or something like that.  Could this be folded into the
existing interface on Thing, perhaps with an option "of" or "on" parameter
to findDirection() that defaults to None?  Or maybe it makes sense to do
the access in a new method..

  Jp

- --
If the automobile had followed the same development as the computer, a
Rolls-Royce would today cost $100, get a million miles per per gallon,
and explode once a year killing everyone inside.
                -- Robert Cringely, InfoWorld
- --
 11:53am up 27 days, 12:35, 4 users, load average: 0.00, 0.00, 0.00

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE9Dg4wedcO2BJA+4YRAma6AJ9cBvUeZlaaK1hvCSuMKCBYiZwHYgCgi1F2
HBS8EDjB04vm88ZN/CU010o=
=HUJm
-----END PGP SIGNATURE-----



From reality@twistedmatrix.com  Mon Jun 17 18:47:11 2002
From: reality@twistedmatrix.com (David Sturgis)
Date: Mon, 17 Jun 2002 12:47:11 -0500
Subject: [Reality] GutenBook
In-Reply-To: <87wusxdgna.fsf@twistedmatrix.com>
References: <Pine.LNX.4.44.0206171120500.11460-100000@meson>
 <87wusxdgna.fsf@twistedmatrix.com>
Message-ID: <20020617124711.57970834.dave@dcit.com>

On 17 Jun 2002 12:16:57 -0400
Christopher Armstrong <radix@twistedmatrix.com> wrote:

> Perhaps. After looking over some books for a while, it seems the standard is
> not as clearly-defined as I hoped. :( So the "information retrieval system"
> may just be comprised of a regexp shwacking the (super-long) header of the
> text and returning the body. I'll show you once I have the implementation :)

     That would be really handy... Having an Alice in Wonderland/Jabberwock based puzzle/area that included a complete copy of the derivative literature as an extra hint would be pretty neat. Especially if creating that in-game book didn't involve retyping the entire contents of said literature into a GTK faucet window.  ;-)

     And that could also be useful for getting large amounts of externally written text (like the "children's book" from Inheritance) into Reality-book form without too much extra work.

---
David Sturgis
dave@dcit.com
Senior Director of Internet Technologies
DCIT Corporation
"The Information Technology Company" (tm)
http://www.dcit.com
724 Bergen Blvd
Ridgefield, NJ 07657
201-313-1845 ext 718
201-941-9699 fax


From reality@twistedmatrix.com  Mon Jun 17 19:00:39 2002
From: reality@twistedmatrix.com (David Sturgis)
Date: Mon, 17 Jun 2002 13:00:39 -0500
Subject: [Reality] Exits
In-Reply-To: <Pine.LNX.4.44.0206171153290.11460-100000@meson>
References: <87660idmuc.fsf@twistedmatrix.com>
 <Pine.LNX.4.44.0206171153290.11460-100000@meson>
Message-ID: <20020617130039.6f1bf549.dave@dcit.com>

On Mon, 17 Jun 2002 12:28:29 -0400 (EDT)
Jp Calderone <exarkun@meson.dyndns.org> wrote:

>   Other things that come to mind - temporary or permanant enclosures, such
> as a tent Thing that could be carried around and then unpacked, set up,
> and entered; ground vehicles; or "scenery" such as an oil drum.

     One idea that had been the source of much consternation in the original Java Reality was the idea of a room/container/location type thing that wasn't immediately obvious... If something was sitting in the bottom of an oil drum, it probably shouldn't be immediately obvious to people in the room (unless they implicity examine/look at/climb into the drum).

     Did we ever find a decent way to handle this in python Reality? A lot of the objects being described here (tents, etc.) are the sort of things that you'd probably have to look into (or at least focus on more directly) to see inside of.

     And it's really cool to hear people talking about Reality stuff again.  ;-)  

     The spaceship and docking system is interesting... I had a similar idea for ships (i.e. the floating on water kind) and docks, but I had never figured out a good way for handling perspective from the boat at sea... You'd have to do some weird things to the descriptions of all the rooms on the deck, sort of the interactive text equivalent of a skybox in a 3D engine, to reflect the weather and other nearby objects (other boats, disgruntled albino whales, islands, etc.). With spacecraft, you usually have a more appliance-like screen/monitor/periscope device that you implicity look into to see what's going on outside.

--
David Sturgis
dave@dcit.com
Senior Director of Internet Technologies
DCIT Corporation
"The Information Technology Company" (tm)
http://www.dcit.com
724 Bergen Blvd
Ridgefield, NJ 07657
201-313-1845 ext 718
201-941-9699 fax


From reality@twistedmatrix.com  Mon Jun 17 19:09:02 2002
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: 17 Jun 2002 14:09:02 -0400
Subject: [Reality] Exits
In-Reply-To: <Pine.LNX.4.44.0206171153290.11460-100000@meson>
References: <Pine.LNX.4.44.0206171153290.11460-100000@meson>
Message-ID: <87sn3ldbgh.fsf@twistedmatrix.com>

>>>>> "Jp" == Jp Calderone <exarkun@meson.dyndns.org> writes:

    Jp> On 17 Jun 2002, Christopher Armstrong wrote:

    >> Here's the use case: we need to be able to have a ship (which is made of
    >> multiple rooms) enter a spaceport entirely and make its entrances
    >> available to people in the spaceport. The ship may have multiple
    >> entrances: one for the cockpit and one for the cargo bay, f.e.

    Jp>   Other things that come to mind - temporary or permanant enclosures,
    Jp> such as a tent Thing that could be carried around and then unpacked,
    Jp> set up, and entered; ground vehicles; or "scenery" such as an oil drum.

What differing requirements do these have? I think it would be fine if we
just checked if any new objects entering a room have an "entrances" attribute
(or perhaps something a bit more explicit), and if so, update the room's
exits.

Is that all you meant? how about going a bit more in depth for these cases?

    >> Hrm, then again, we could just make the special Area-checking part of
    >> the Exit class, so that's no worry (i.e., add a set_source method that
    >> checks whether source is an area object, if it is, tell it to update its
    >> entrances).

    Jp>   Yea, movement hooks would do most of it, then exit can track the
    Jp> rest.  Area should have an interface for adding/removing these exits
    Jp> (as well as getting a list of them, of course).

That's what the 'entrances' attribute would be (A list of Exit objects meant to
be exposed to the containing room). adding and removing stuff from "entrances"
can probably be implicit -- that's the point of having Exit objects track what
their 'source' and 'dest' properties are. Unless you can come up with another
reason for an explicit API :)

    Jp>   It would be nice if this didn't break the existing exit code.  I

I don't personally care about breaking existing Reality code, especially since
there's so little of it. I think we need to come up with a good solution before
we generate a ton of code.

    Jp> guess these types of exits would only be accessable via a new ability?
    Jp> Enter/leave or something like that.  Could this be folded into the

No need, if we tell the containing room about the exits, it can add the exits
to its own internal exits until the thing leaves again. OR, it can simply look
up exits dynamically on any enterable objects inside of it (which may be able
to prevent some "woops, I accidentally left an exit back there" bugs, but then
again, if it doesn't rely on the "end-coder" to do anything it may not be a
problem).

Of course, if you wanted to make an explicit "enter" verb, I guess there's
nothing stopping you.

    Jp> existing interface on Thing, perhaps with an option "of" or "on"
    Jp> parameter to findDirection() that defaults to None?  Or maybe it makes
    Jp> sense to do the access in a new method..

You lost me there. :)

-- 
                                Chris Armstrong
                         << radix@twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From reality@twistedmatrix.com  Mon Jun 17 19:51:18 2002
From: reality@twistedmatrix.com (Jp Calderone)
Date: Mon, 17 Jun 2002 14:51:18 -0400 (EDT)
Subject: [Reality] Exits
In-Reply-To: <87sn3ldbgh.fsf@twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0206171412010.11460-100000@meson>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On 17 Jun 2002, Christopher Armstrong wrote:

> >>>>> "Jp" == Jp Calderone <exarkun@meson.dyndns.org> writes:
>
>     Jp> On 17 Jun 2002, Christopher Armstrong wrote:
>
>     >> Here's the use case: we need to be able to have a ship (which is made of
>     >> multiple rooms) enter a spaceport entirely and make its entrances
>     >> available to people in the spaceport. The ship may have multiple
>     >> entrances: one for the cockpit and one for the cargo bay, f.e.
>
>     Jp>   Other things that come to mind - temporary or permanant enclosures,
>     Jp> such as a tent Thing that could be carried around and then unpacked,
>     Jp> set up, and entered; ground vehicles; or "scenery" such as an oil drum.
>
> What differing requirements do these have? I think it would be fine if we
> just checked if any new objects entering a room have an "entrances" attribute
> (or perhaps something a bit more explicit), and if so, update the room's
> exits.
>
> Is that all you meant? how about going a bit more in depth for these cases?

   Um, yea, mostly I was just listing some more examples.  The only real
difference most of these would have from ships is they'd be one room
areas.  They also demonstrate why being able to look through an entrance
might be nice.  eg, "look through flap on tent" after you "open flap on
tent" to see if anyone is inside (and of course, don't show anyone inside
the oil drum if the top is on).

  Hmmm.  One room areas.  Would it be worth it to specialize on that case?
Nah, probably not...

>
>     >> Hrm, then again, we could just make the special Area-checking part of
>     >> the Exit class, so that's no worry (i.e., add a set_source method that
>     >> checks whether source is an area object, if it is, tell it to update its
>     >> entrances).
>
>     Jp>   Yea, movement hooks would do most of it, then exit can track the
>     Jp> rest.  Area should have an interface for adding/removing these exits
>     Jp> (as well as getting a list of them, of course).
>
> That's what the 'entrances' attribute would be (A list of Exit objects meant to
> be exposed to the containing room). adding and removing stuff from "entrances"
> can probably be implicit -- that's the point of having Exit objects track what
> their 'source' and 'dest' properties are. Unless you can come up with another
> reason for an explicit API :)

  Arg, implicit.  Okay, it fits with the rest of Reality, I guess I'll
just have to get used to it. :)

>
>     Jp>   It would be nice if this didn't break the existing exit code.  I
>
> I don't personally care about breaking existing Reality code, especially since
> there's so little of it. I think we need to come up with a good solution before
> we generate a ton of code.

    Okay.

>
>     Jp> guess these types of exits would only be accessable via a new ability?
>     Jp> Enter/leave or something like that.  Could this be folded into the
>
> No need, if we tell the containing room about the exits, it can add the exits
> to its own internal exits until the thing leaves again. OR, it can simply look
> up exits dynamically on any enterable objects inside of it (which may be able
> to prevent some "woops, I accidentally left an exit back there" bugs, but then
> again, if it doesn't rely on the "end-coder" to do anything it may not be a
> problem).
>
> Of course, if you wanted to make an explicit "enter" verb, I guess there's
> nothing stopping you.
>
>     Jp> existing interface on Thing, perhaps with an option "of" or "on"
>     Jp> parameter to findDirection() that defaults to None?  Or maybe it makes
>     Jp> sense to do the access in a new method..
>
> You lost me there. :)
>

  Going back to the case of ships, say we have a hangar with 10 freighters
prepping for launch.  "go hatch" just doesn't cut it.  "go hatch on
Sunrise II" works a little better, though "go through the hatch on the
Sunrise II" is nicest ;)  Syntax aside, a way to disambiguate entrances is
a must.  You can't count on the names being unique since creators will
have no way of knowing in what company their ship will eventually end up.
Extending ambient_go to recognize "through" and/or "on" and then passing
the Thing that is matched by those prepositions to findExit() or
findDirection() makes sense to me.


  Jp

- --
Somewhere, something incredible is waiting to be known.
                -- Carl Sagan
- --
 2:11pm up 27 days, 14:53, 4 users, load average: 0.00, 0.00, 0.00
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE9Di+qedcO2BJA+4YRAiEyAJwPjWs71yff2aPCPGUQh7ya2lOWqACfXSka
iehLXrmB0bCIytUHQzv/OEU=
=BM1A
-----END PGP SIGNATURE-----



From reality@twistedmatrix.com  Mon Jun 17 21:26:23 2002
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: 17 Jun 2002 16:26:23 -0400
Subject: [Reality] Exits
In-Reply-To: <Pine.LNX.4.44.0206171412010.11460-100000@meson>
References: <Pine.LNX.4.44.0206171412010.11460-100000@meson>
Message-ID: <87ofe9d53k.fsf@twistedmatrix.com>

>>>>> "Jp" == Jp Calderone <exarkun@meson.dyndns.org> writes:

    Jp> On 17 Jun 2002, Christopher Armstrong wrote:
    >> >>>>> "Jp" == Jp Calderone <exarkun@meson.dyndns.org> writes:
    >> 
    Jp> On 17 Jun 2002, Christopher Armstrong wrote:
    >> Is that all you meant? how about going a bit more in depth for these
    >> cases?

    Jp>    Um, yea, mostly I was just listing some more examples.  The only
    Jp> real difference most of these would have from ships is they'd be one
    Jp> room areas.  They also demonstrate why being able to look through an
    Jp> entrance might be nice.  eg, "look through flap on tent" after you
    Jp> "open flap on tent" to see if anyone is inside (and of course, don't
    Jp> show anyone inside the oil drum if the top is on).

    Jp>   Hmmm.  One room areas.  Would it be worth it to specialize on that
    Jp> case?  Nah, probably not...

See, we wouldn't necessarily need them to be Areas. They can just be _any_
Thing with an 'entrances' attribute. i.e., a Tent object might have
self.entrances = [Exit(from=OUTSIDE, to=self)], or something like that.

    >> That's what the 'entrances' attribute would be (A list of Exit objects
    >> meant to be exposed to the containing room). adding and removing stuff
    >> from "entrances" can probably be implicit -- that's the point of having
    >> Exit objects track what their 'source' and 'dest' properties are. Unless
    >> you can come up with another reason for an explicit API :)

    Jp>   Arg, implicit.  Okay, it fits with the rest of Reality, I guess I'll
    Jp> just have to get used to it. :)

IMO, it's not too bad at all, because the (defined!) behavior seems pretty
simplistic, and there aren't any whacky cases that I can see that will confuse
people.

    Jp>   Going back to the case of ships, say we have a hangar with 10
    Jp> freighters prepping for launch.  "go hatch" just doesn't cut it.  "go
    Jp> hatch on Sunrise II" works a little better, though "go through the
    Jp> hatch on the Sunrise II" is nicest ;) Syntax aside, a way to
    Jp> disambiguate entrances is a must.  You can't count on the names being
    Jp> unique since creators will have no way of knowing in what company their
    Jp> ship will eventually end up.  Extending ambient_go to recognize

Probably verb_go/enter, if we do end up going with first class Exits.

    Jp> "through" and/or "on" and then passing the Thing that is matched by
    Jp> those prepositions to findExit() or findDirection() makes sense to me.

Yeah, I agree. This is why sentence needs to be flexible enough to allow
completely "non-conformant" commands, and being able to override object
lookup... or something. I'm tired.

-- 
                                Chris Armstrong
                         << radix@twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From reality@twistedmatrix.com  Tue Jun 18 08:56:02 2002
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 18 Jun 2002 02:56:02 -0500 (CDT)
Subject: [Reality] Exits
In-Reply-To: <20020617130039.6f1bf549.dave@dcit.com>
References: <87660idmuc.fsf@twistedmatrix.com>
 <Pine.LNX.4.44.0206171153290.11460-100000@meson>
 <20020617130039.6f1bf549.dave@dcit.com>
Message-ID: <20020618.025602.91332187.glyph@twistedmatrix.com>

----Security_Multipart(Tue_Jun_18_02:56:02_2002_435)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

From: David Sturgis <dave@dcit.com>
Subject: Re: [Reality] Exits
Date: Mon, 17 Jun 2002 13:00:39 -0500

The legend returns :-)

> One idea that had been the source of much consternation in the original Java
> Reality was the idea of a room/container/location type thing that wasn't
> immediately obvious... If something was sitting in the bottom of an oil drum,
> it probably shouldn't be immediately obvious to people in the room (unless
> they implicity examine/look at/climb into the drum).

> Did we ever find a decent way to handle this in python Reality? A lot of the
> objects being described here (tents, etc.) are the sort of things that you'd
> probably have to look into (or at least focus on more directly) to see inside
> of.

These are slightly different concerns, although you're right in thinking they'd
be essentially the same class of objects.  One is the way of limiting
propogated information from containers to their surroundings.  I am pretty sure
we've got a good set of "special" characteristics of objects in the Python TR
which effectively limit propogation.  The one additional thing necessary on
this front is separating aggregation of broadcast targets and target handling.
(Your perspective should be able to decide whether you're really supposed to
get an event, as well as the object broadcasting the event ought to be able to
decide whether your perspective should receive it.)

The other problem is that you have to be able to control where people are going
when they move.  This sounds like yet *another* problem that will be solved by
the intent/action dispatch separation that I described in a previous email.  If
you knew "the player wants to moveTo(string [, object])", you could have the
room and the target object decide what to do with that, in order.

Then there's the issue of how to get the exits from a room.  My initial feeling
is that there should be some more general mechanism for retrieving a hierarchy
of the room, and getting state updates for it -- parallel simulations on the
client & server, a-la Beyond, rather than a client that simply responds to
"update" events -- but I haven't done enough thought on this to say exactly
how.

> And it's really cool to hear people talking about Reality stuff again.  ;-)  

Glad you think so.  It's certainly cool to hear _you_ talking about it ;-)

> The spaceship and docking system is interesting... I had a similar idea for
> ships (i.e. the floating on water kind) and docks, but I had never figured
> out a good way for handling perspective from the boat at sea... You'd have to
> do some weird things to the descriptions of all the rooms on the deck, sort
> of the interactive text equivalent of a skybox in a 3D engine, to reflect the
> weather and other nearby objects (other boats, disgruntled albino whales,
> islands, etc.). With spacecraft, you usually have a more appliance-like
> screen/monitor/periscope device that you implicity look into to see what's
> going on outside.

Hmm.  What's a "skybox"?  This sounds really cool.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |

----Security_Multipart(Tue_Jun_18_02:56:02_2002_435)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQA9DueUvVGR4uSOE2wRAkYbAKCCTT5SBpsz1TIm46YbXIWHmmfT0wCfYaqs
fMFZUWBs8rTOFyFHaBZUeWI=
=NmFU
-----END PGP SIGNATURE-----

----Security_Multipart(Tue_Jun_18_02:56:02_2002_435)----


From reality@twistedmatrix.com  Tue Jun 18 09:11:26 2002
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 18 Jun 2002 03:11:26 -0500 (CDT)
Subject: [Reality] GutenBook
In-Reply-To: <20020617124711.57970834.dave@dcit.com>
References: <Pine.LNX.4.44.0206171120500.11460-100000@meson>
 <87wusxdgna.fsf@twistedmatrix.com>
 <20020617124711.57970834.dave@dcit.com>
Message-ID: <20020618.031126.80011485.glyph@twistedmatrix.com>

----Security_Multipart(Tue_Jun_18_03:11:26_2002_167)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

From: David Sturgis <dave@dcit.com>
Subject: Re: [Reality] GutenBook
Date: Mon, 17 Jun 2002 12:47:11 -0500

> On 17 Jun 2002 12:16:57 -0400
> Christopher Armstrong <radix@twistedmatrix.com> wrote:
> 
> > Perhaps. After looking over some books for a while, it seems the standard is
> > not as clearly-defined as I hoped. :( So the "information retrieval system"
> > may just be comprised of a regexp shwacking the (super-long) header of the
> > text and returning the body. I'll show you once I have the implementation :)

Let's not get too standards-happy here, especially before seeing any sort of
generalizing patterns.  Twisted is a fairly generalized "information retrieval
system" by itself -- there are many, many varying kinds of structure and levels
of trust that one might want to impose on information being read into the
Reality system.

> That would be really handy... Having an Alice in Wonderland/Jabberwock based
> puzzle/area that included a complete copy of the derivative literature as an
> extra hint would be pretty neat. Especially if creating that in-game book
> didn't involve retyping the entire contents of said literature into a GTK
> faucet window.  ;-)

For those of you who have heard the plans for the New Divunal, this is
*exactly* the sort of environment I described for the lobby-esque area :).  I
don't know if this was intentional or not, but I can't remember if I mentioned
this to either Chris or Dave :)

> And that could also be useful for getting large amounts of externally written
> text (like the "children's book" from Inheritance) into Reality-book form
> without too much extra work.

Well, as Chris said, the Gutenbook data-format standard is kinda sucky.  If we
were going to write lots of external text, we'd probably want certain pages of
the book to be special, for example.  The King in Yellow would have to get
kinda twitchy after the first act, and you shouldn't really be able to turn
pages in the Necronomicon willy-nilly.  Also, it may be necessary for certain
sources of data to actually store all the data in a synchronously-accessible
format, but for others, it may be quite acceptable to keep an fp in memory that
you can seek() on.

Speaking of external data-sources; I seem to recall that Allen wrote a hack
that got the gold/dollar exchange rate and displayed it on a message board in
the demo center at one point.  Anybody know if that still works (or even
exists?).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |

----Security_Multipart(Tue_Jun_18_03:11:26_2002_167)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQA9DuswvVGR4uSOE2wRAt2XAJ9y9MkHqjhdiyl7VTvdCBH9LGNmewCeNFhd
8pNppO7vMsaRgST/Ro1SLTc=
=AL0F
-----END PGP SIGNATURE-----

----Security_Multipart(Tue_Jun_18_03:11:26_2002_167)----


From reality@twistedmatrix.com  Wed Jun 19 01:50:20 2002
From: reality@twistedmatrix.com (Allen Short)
Date: Tue, 18 Jun 2002 19:50:20 -0500 (CDT)
Subject: [Reality] GutenBook
In-Reply-To: <20020618.031126.80011485.glyph@twistedmatrix.com>
References: <87wusxdgna.fsf@twistedmatrix.com>
 <20020617124711.57970834.dave@dcit.com>
 <20020618.031126.80011485.glyph@twistedmatrix.com>
Message-ID: <20020618.195020.730554821.washort@twistedmatrix.com>

>>>>> "Glyph" == Glyph Lefkowitz <glyph@twistedmatrix.com> writes:

    > Speaking of external data-sources; I seem to recall that Allen
    > wrote a hack that got the gold/dollar exchange rate and
    > displayed it on a message board in the demo center at one point.
    > Anybody know if that still works (or even exists?).

well, it exists - finding it involved digging through directories i
hadn't been in for months :)  It's about a year old, so i'm almost certain it
doesn't work, but i'm certain it wont take too long to update it to
current APIs. (this was the motivation for writing the twisted HTTP
client, if i remember right...)

-- 
Allen Short        Programmer-Archaeologist        washort@twistedmatrix.com
"optimization is hacker crack. " -- Johan Kullstam, c.l.l


From reality@twistedmatrix.com  Sat Jun 22 13:06:00 2002
From: reality@twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 22 Jun 2002 07:06:00 -0500 (CDT)
Subject: [Reality] Re: other TR tasklist items
In-Reply-To: <20020622.040457.730556193.washort@twistedmatrix.com>
References: <20020622.040457.730556193.washort@twistedmatrix.com>
Message-ID: <20020622.070600.94561651.glyph@twistedmatrix.com>

----Security_Multipart(Sat_Jun_22_07:06:00_2002_806)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit


Hope you don't mind; I'm Cc:'ing my response to the list, because these are
generally useful questions...

From: Allen Short <washort@twistedmatrix.com>
Subject: other TR tasklist items
Date: Sat, 22 Jun 2002 04:04:57 -0500 (CDT)

> i keep hearing you say you wish you'd never used the 'intelligence'
> system used by Thing for user interface. what should be done instead?

Wow... where to begin.  There should be parallel simulation on the client.
There are too many notifications that the user *might* want to be aware of but
might want to ignore; lots of things that are quiet, subtle updates that they
could see if their visual focus were on one area of the screen and not another.
This indicates that the client should be receiving more information than the
user can physically see at once in some cases (this is *especially* true of
things that, e.g. interrupt you while you're reading a book.  The hacks we went
through to make you "look up" when that happened... oy vey...)

There should be real event notifications, not willy-nilly method calls all over
the place.  Events should be tracked, so you can record and replay interactions
on the client.  Events should be ignorable so the client can be extended.

There should be a sensible way to "posess" someone in the game; there is no way
to redirect the calls on "intelligence" to another object currently.  (This
could be hacked without "real" events, but let's not.)

> also, do we want to rename all the *Hears methods?

Yes.  Better yet, re-implement them using real events and let's actually make
sensory channels and notification types and all that good stuff.  Given the
game-system-not-unique-object focus of the New Reality, let's also construct
event types rather than having ad-hoc flavor text inline with the code.

(OK, ad-hoc flavor text is sometimes useful, especially for debugging, but
let's try to make that a utility method and not a core part of the API)

> and why is all this gunk from Player moved into Thing?

Because we have no sensible model for AI yet, so Thing needs to be able to
"hear" messages that are sent to the room and parse them.  People have been
telling me I was an idiot for doing it this way for many years:

    http://twistedmatrix.com/pipermail/divunal-devel/1999-June/000008.html

and I have finally decided that they were right.  Changing things to use real
events (as above) will probably not make much of a difference in terms of the
ratio of code in Thing to Player, but it *will* make it a little more sensible
that said code be in Thing.

> the ambiguity between 'locate' and 'find' is particularly bothersome.

Uh... yes.  I really should have thought up better names for those.  Probably
'lookAroundFor' and 'findInContents', respectively, would have been better
names, but I think that 'locate' was primarily support for sentence and will
probably be moving into the parser anyway (or into parser support libs).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |

----Security_Multipart(Sat_Jun_22_07:06:00_2002_806)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQA9FGgqvVGR4uSOE2wRAq+0AKCkNccAjC9gYRIyF4SaUJpeN0H/MQCcC91b
V1YrcrP5jOh3AkSC50qOK2E=
=360/
-----END PGP SIGNATURE-----

----Security_Multipart(Sat_Jun_22_07:06:00_2002_806)----


From reality@twistedmatrix.com  Sat Jun 22 17:40:59 2002
From: reality@twistedmatrix.com (Christopher Armstrong)
Date: Sat, 22 Jun 2002 12:40:59 -0400
Subject: [Reality] Re: other TR tasklist items
In-Reply-To: <20020622.070600.94561651.glyph@twistedmatrix.com> (Glyph
 Lefkowitz's message of "Sat, 22 Jun 2002 07:06:00 -0500 (CDT)")
References: <20020622.040457.730556193.washort@twistedmatrix.com>
 <20020622.070600.94561651.glyph@twistedmatrix.com>
Message-ID: <877kkri7vo.fsf@twistedmatrix.com>

>>>>> "Glyph" == Glyph Lefkowitz <glyph@twistedmatrix.com> writes:
    Glyph> From: Allen Short <washort@twistedmatrix.com> Subject: other TR
    Glyph> tasklist items Date: Sat, 22 Jun 2002 04:04:57 -0500 (CDT)

    >> i keep hearing you say you wish you'd never used the 'intelligence'
    >> system used by Thing for user interface. what should be done instead?

    Glyph> Wow... where to begin.  There should be parallel simulation on the
    Glyph> client.  There are too many notifications that the user *might* want
    Glyph> to be aware of but might want to ignore; lots of things that are
    Glyph> quiet, subtle updates that they could see if their visual focus were
    Glyph> on one area of the screen and not another.  This indicates that the
    Glyph> client should be receiving more information than the user can
    Glyph> physically see at once in some cases (this is *especially* true of
    Glyph> things that, e.g. interrupt you while you're reading a book.  The
    Glyph> hacks we went through to make you "look up" when that happened... oy
    Glyph> vey...)

I was just talking to exarkun about this yesterday. For the auto-mapper that
I plan on eventually writing, client-side simulation would be required (or
at least very advantageous :)).


    >> also, do we want to rename all the *Hears methods?

    Glyph> Yes.  Better yet, re-implement them using real events and let's
    Glyph> actually make sensory channels and notification types and all that
    Glyph> good stuff.  Given the game-system-not-unique-object focus of the
    Glyph> New Reality, let's also construct event types rather than having
    Glyph> ad-hoc flavor text inline with the code.

Sensory channels? That reminds me of allexpro's mud: he's got these cheesy
(but kinda neato) prefixes to most of his messages:

> look sugar
[EYES] You see some sugar.
> taste sugar
[MOUTH] The sugar is sweet.



-- 
                                Chris Armstrong
                         << radix@twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From reality@twistedmatrix.com  Sun Jun 30 05:35:04 2002
From: reality@twistedmatrix.com (reality@twistedmatrix.com)
Date: Sun, 30 Jun 2002 00:35:04 -0400
Subject: [Reality] Teh Actions Tehy Aren't Ah Actin'
Message-ID: <20020630043504.GA23171@meson.dyndns.org>

--2fHTh5uZTiUOsy+g
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

  So, I'm trying to rewrite SOpera's existing sentence-based code to use
glyph's new and improved, super versatile (highly complex, at least for my
tiny brain) Action system, and I'm having some problems getting out of the
gate.  If someone (Heh, who am I kidding) could point out what I'm doing
wrong here, it'd be great.  SOpera's complete source is available from
zaibach's CVS (module name "SOpera"), or will be shortly.  All the new
action code is in vending.py.  A general overview of my understanding of
actions and the specifics I've tried to implement follows.

  First off, the goal.  Two objects are involved (maybe I should have tried
to walk before running.. oh well).  A coin and a vending machine.  From what
I understand, then, an Insert class is derived from a ToolAction.  Two
interfaces are then defined, IInsertActor and IInsertTarget, that provide
("dictate"?  "document"?  "suggest"?) the methods actorActionInsert(self,
target) and actorTargetInsert(self, tool) respectively.  Next, a subclass of
Subparser is created and given a parse_insert method.  The parse_insert
method snarfs up text such as "insert quarter into vending machine" and
decides that "quarter" is the Coin instance I'm holding and "vending
machine" is the VendingMachine instance sitting in the room with me.  It
creates a list containing an Insert instance with the two found instances
(or an empty list if something goes wrong).  Next, the Coin class is made to
__implements__ IInsertTarget and given an implementation for the appropriate
interface method.

  Now, all that said, I can't seem to stop getting DispatchFailed
exceptions.  I think I've made some progress since beginning this email,
though ;)  I think I'm probably using some part of the Target/Tool Actions
wrong, or implementing the wrong methods in the wrong places, but I can't
quite tell what should be right.

  I can send a traceback to the list, or instructions for reproducing the
behavior in-game if anyone thinks that would be useful.

  Jp

--=20
Elitism: It's lonely at the top, but it's comforting to look down upon
everyone at the bottom.
--
 10:06pm up 39 days, 22:50, 2 users, load average: 0.01, 0.02, 0.00

--2fHTh5uZTiUOsy+g
Content-Type: application/pgp-signature
Content-Disposition: inline

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE9Hop3edcO2BJA+4YRAgbVAJ9wt4g5MUp/r3e2ZKZD9wxJyKtA/gCgpApN
yY7DTHv9o8eHapGUFXYzDNk=
=cC5k
-----END PGP SIGNATURE-----

--2fHTh5uZTiUOsy+g--


